
Smart_Joint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000171f4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000808  08017384  08017384  00018384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017b8c  08017b8c  000192ec  2**0
                  CONTENTS
  4 .ARM          00000008  08017b8c  08017b8c  00018b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017b94  08017b94  000192ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017b94  08017b94  00018b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017b98  08017b98  00018b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ec  20000000  08017b9c  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c68  200002f0  08017e88  000192f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005f58  08017e88  00019f58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000192ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a050  00000000  00000000  0001931c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006864  00000000  00000000  0005336c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e60  00000000  00000000  00059bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002433  00000000  00000000  0005ca30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003148f  00000000  00000000  0005ee63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000387d1  00000000  00000000  000902f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124a4f  00000000  00000000  000c8ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ed512  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d0f0  00000000  00000000  001ed558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001fa648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f0 	.word	0x200002f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801736c 	.word	0x0801736c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002f4 	.word	0x200002f4
 80001cc:	0801736c 	.word	0x0801736c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b988 	b.w	8000da4 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	468e      	mov	lr, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	4688      	mov	r8, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d962      	bls.n	8000b88 <__udivmoddi4+0xdc>
 8000ac2:	fab2 f682 	clz	r6, r2
 8000ac6:	b14e      	cbz	r6, 8000adc <__udivmoddi4+0x30>
 8000ac8:	f1c6 0320 	rsb	r3, r6, #32
 8000acc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ad0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad4:	40b7      	lsls	r7, r6
 8000ad6:	ea43 0808 	orr.w	r8, r3, r8
 8000ada:	40b4      	lsls	r4, r6
 8000adc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae0:	fa1f fc87 	uxth.w	ip, r7
 8000ae4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	fb0e 8811 	mls	r8, lr, r1, r8
 8000aee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af2:	fb01 f20c 	mul.w	r2, r1, ip
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b00:	f080 80ea 	bcs.w	8000cd8 <__udivmoddi4+0x22c>
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f240 80e7 	bls.w	8000cd8 <__udivmoddi4+0x22c>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	1a9a      	subs	r2, r3, r2
 8000b10:	b2a3      	uxth	r3, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b22:	459c      	cmp	ip, r3
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0x8e>
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2c:	f080 80d6 	bcs.w	8000cdc <__udivmoddi4+0x230>
 8000b30:	459c      	cmp	ip, r3
 8000b32:	f240 80d3 	bls.w	8000cdc <__udivmoddi4+0x230>
 8000b36:	443b      	add	r3, r7
 8000b38:	3802      	subs	r0, #2
 8000b3a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b3e:	eba3 030c 	sub.w	r3, r3, ip
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11d      	cbz	r5, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40f3      	lsrs	r3, r6
 8000b48:	2200      	movs	r2, #0
 8000b4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d905      	bls.n	8000b62 <__udivmoddi4+0xb6>
 8000b56:	b10d      	cbz	r5, 8000b5c <__udivmoddi4+0xb0>
 8000b58:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e7f5      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b62:	fab3 f183 	clz	r1, r3
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d146      	bne.n	8000bf8 <__udivmoddi4+0x14c>
 8000b6a:	4573      	cmp	r3, lr
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0xc8>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 8105 	bhi.w	8000d7e <__udivmoddi4+0x2d2>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0e5      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b82:	e9c5 4800 	strd	r4, r8, [r5]
 8000b86:	e7e2      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f000 8090 	beq.w	8000cae <__udivmoddi4+0x202>
 8000b8e:	fab2 f682 	clz	r6, r2
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	f040 80a4 	bne.w	8000ce0 <__udivmoddi4+0x234>
 8000b98:	1a8a      	subs	r2, r1, r2
 8000b9a:	0c03      	lsrs	r3, r0, #16
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	b280      	uxth	r0, r0
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000baa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb2:	fb04 f20c 	mul.w	r2, r4, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <__udivmoddi4+0x11e>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x11c>
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f200 80e0 	bhi.w	8000d88 <__udivmoddi4+0x2dc>
 8000bc8:	46c4      	mov	ip, r8
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bd0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bd4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bd8:	fb02 f404 	mul.w	r4, r2, r4
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x144>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x142>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f200 80ca 	bhi.w	8000d82 <__udivmoddi4+0x2d6>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	1b1b      	subs	r3, r3, r4
 8000bf2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bf6:	e7a5      	b.n	8000b44 <__udivmoddi4+0x98>
 8000bf8:	f1c1 0620 	rsb	r6, r1, #32
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000c02:	431f      	orrs	r7, r3
 8000c04:	fa0e f401 	lsl.w	r4, lr, r1
 8000c08:	fa20 f306 	lsr.w	r3, r0, r6
 8000c0c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c10:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c14:	4323      	orrs	r3, r4
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	fa1f fc87 	uxth.w	ip, r7
 8000c1e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c22:	0c1c      	lsrs	r4, r3, #16
 8000c24:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c2c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	fa02 f201 	lsl.w	r2, r2, r1
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x1a0>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c3e:	f080 809c 	bcs.w	8000d7a <__udivmoddi4+0x2ce>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8099 	bls.w	8000d7a <__udivmoddi4+0x2ce>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	fa1f fe83 	uxth.w	lr, r3
 8000c54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c58:	fb09 4413 	mls	r4, r9, r3, r4
 8000c5c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c60:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c64:	45a4      	cmp	ip, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x1ce>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c6e:	f080 8082 	bcs.w	8000d76 <__udivmoddi4+0x2ca>
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	d97f      	bls.n	8000d76 <__udivmoddi4+0x2ca>
 8000c76:	3b02      	subs	r3, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c7e:	eba4 040c 	sub.w	r4, r4, ip
 8000c82:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c86:	4564      	cmp	r4, ip
 8000c88:	4673      	mov	r3, lr
 8000c8a:	46e1      	mov	r9, ip
 8000c8c:	d362      	bcc.n	8000d54 <__udivmoddi4+0x2a8>
 8000c8e:	d05f      	beq.n	8000d50 <__udivmoddi4+0x2a4>
 8000c90:	b15d      	cbz	r5, 8000caa <__udivmoddi4+0x1fe>
 8000c92:	ebb8 0203 	subs.w	r2, r8, r3
 8000c96:	eb64 0409 	sbc.w	r4, r4, r9
 8000c9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000ca2:	431e      	orrs	r6, r3
 8000ca4:	40cc      	lsrs	r4, r1
 8000ca6:	e9c5 6400 	strd	r6, r4, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	e74f      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000cae:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cb2:	0c01      	lsrs	r1, r0, #16
 8000cb4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cb8:	b280      	uxth	r0, r0
 8000cba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	463c      	mov	r4, r7
 8000cc4:	46b8      	mov	r8, r7
 8000cc6:	46be      	mov	lr, r7
 8000cc8:	2620      	movs	r6, #32
 8000cca:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cce:	eba2 0208 	sub.w	r2, r2, r8
 8000cd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cd6:	e766      	b.n	8000ba6 <__udivmoddi4+0xfa>
 8000cd8:	4601      	mov	r1, r0
 8000cda:	e718      	b.n	8000b0e <__udivmoddi4+0x62>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	e72c      	b.n	8000b3a <__udivmoddi4+0x8e>
 8000ce0:	f1c6 0220 	rsb	r2, r6, #32
 8000ce4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ce8:	40b7      	lsls	r7, r6
 8000cea:	40b1      	lsls	r1, r6
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cfa:	b2bc      	uxth	r4, r7
 8000cfc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb08 f904 	mul.w	r9, r8, r4
 8000d0a:	40b0      	lsls	r0, r6
 8000d0c:	4589      	cmp	r9, r1
 8000d0e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d12:	b280      	uxth	r0, r0
 8000d14:	d93e      	bls.n	8000d94 <__udivmoddi4+0x2e8>
 8000d16:	1879      	adds	r1, r7, r1
 8000d18:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d1c:	d201      	bcs.n	8000d22 <__udivmoddi4+0x276>
 8000d1e:	4589      	cmp	r9, r1
 8000d20:	d81f      	bhi.n	8000d62 <__udivmoddi4+0x2b6>
 8000d22:	eba1 0109 	sub.w	r1, r1, r9
 8000d26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2a:	fb09 f804 	mul.w	r8, r9, r4
 8000d2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d32:	b292      	uxth	r2, r2
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	4542      	cmp	r2, r8
 8000d3a:	d229      	bcs.n	8000d90 <__udivmoddi4+0x2e4>
 8000d3c:	18ba      	adds	r2, r7, r2
 8000d3e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d42:	d2c4      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d44:	4542      	cmp	r2, r8
 8000d46:	d2c2      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d48:	f1a9 0102 	sub.w	r1, r9, #2
 8000d4c:	443a      	add	r2, r7
 8000d4e:	e7be      	b.n	8000cce <__udivmoddi4+0x222>
 8000d50:	45f0      	cmp	r8, lr
 8000d52:	d29d      	bcs.n	8000c90 <__udivmoddi4+0x1e4>
 8000d54:	ebbe 0302 	subs.w	r3, lr, r2
 8000d58:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	46e1      	mov	r9, ip
 8000d60:	e796      	b.n	8000c90 <__udivmoddi4+0x1e4>
 8000d62:	eba7 0909 	sub.w	r9, r7, r9
 8000d66:	4449      	add	r1, r9
 8000d68:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d6c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d70:	fb09 f804 	mul.w	r8, r9, r4
 8000d74:	e7db      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d76:	4673      	mov	r3, lr
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1ce>
 8000d7a:	4650      	mov	r0, sl
 8000d7c:	e766      	b.n	8000c4c <__udivmoddi4+0x1a0>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e6fd      	b.n	8000b7e <__udivmoddi4+0xd2>
 8000d82:	443b      	add	r3, r7
 8000d84:	3a02      	subs	r2, #2
 8000d86:	e733      	b.n	8000bf0 <__udivmoddi4+0x144>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	e71c      	b.n	8000bca <__udivmoddi4+0x11e>
 8000d90:	4649      	mov	r1, r9
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x222>
 8000d94:	eba1 0109 	sub.w	r1, r1, r9
 8000d98:	46c4      	mov	ip, r8
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fb09 f804 	mul.w	r8, r9, r4
 8000da2:	e7c4      	b.n	8000d2e <__udivmoddi4+0x282>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
 8000da8:	b480      	push	{r7}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	603b      	str	r3, [r7, #0]
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
#else
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000dbc:	d11a      	bne.n	8000df4 <LL_USART_SetBaudRate+0x4c>
#endif /* USART_PRESC_PRESCALER */
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	005a      	lsls	r2, r3, #1
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	085b      	lsrs	r3, r3, #1
 8000dc6:	441a      	add	r2, r3
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
    brrtemp = usartdiv & 0xFFF0U;
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	085b      	lsrs	r3, r3, #1
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	60da      	str	r2, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif /* USART_PRESC_PRESCALER */
  }
}
 8000df2:	e00a      	b.n	8000e0a <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	085a      	lsrs	r2, r3, #1
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	441a      	add	r2, r3
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	461a      	mov	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	60da      	str	r2, [r3, #12]
}
 8000e0a:	bf00      	nop
 8000e0c:	371c      	adds	r7, #28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <Temp_Sensor_Init>:
#include "stm32l4xx_ll_usart.h"


/*------INIZIALIZZAZIONE SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Init(void)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
	uint8_t data = 0xF0;
 8000e1e:	23f0      	movs	r3, #240	@ 0xf0
 8000e20:	71fb      	strb	r3, [r7, #7]

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 9600);
 8000e22:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e24:	681c      	ldr	r4, [r3, #0]
 8000e26:	f00f fb4f 	bl	80104c8 <HAL_RCC_GetPCLK2Freq>
 8000e2a:	4601      	mov	r1, r0
 8000e2c:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000e30:	2200      	movs	r2, #0
 8000e32:	4620      	mov	r0, r4
 8000e34:	f7ff ffb8 	bl	8000da8 <LL_USART_SetBaudRate>

	HAL_UART_Transmit(TEMP_UART, &data, 1, 100);  // low for 500+us
 8000e38:	1df9      	adds	r1, r7, #7
 8000e3a:	2364      	movs	r3, #100	@ 0x64
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	4813      	ldr	r0, [pc, #76]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e40:	f013 fe1c 	bl	8014a7c <HAL_UART_Transmit>
	if (HAL_UART_Receive(TEMP_UART, &data, 1, 1000) != HAL_OK)
 8000e44:	1df9      	adds	r1, r7, #7
 8000e46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	480f      	ldr	r0, [pc, #60]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e4e:	f013 fe9e 	bl	8014b8e <HAL_UART_Receive>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <Temp_Sensor_Init+0x44>
		while(1);
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <Temp_Sensor_Init+0x40>

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 115200);
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e5e:	681c      	ldr	r4, [r3, #0]
 8000e60:	f00f fb32 	bl	80104c8 <HAL_RCC_GetPCLK2Freq>
 8000e64:	4601      	mov	r1, r0
 8000e66:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	f7ff ff9b 	bl	8000da8 <LL_USART_SetBaudRate>

	if (data == 0xF0)
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2bf0      	cmp	r3, #240	@ 0xf0
 8000e76:	d101      	bne.n	8000e7c <Temp_Sensor_Init+0x64>
		while(1);
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <Temp_Sensor_Init+0x60>

	Temp_Sensor_Write(0xCC);  // skip ROM
 8000e7c:	20cc      	movs	r0, #204	@ 0xcc
 8000e7e:	f000 f807 	bl	8000e90 <Temp_Sensor_Write>
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd90      	pop	{r4, r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000069c 	.word	0x2000069c

08000e90 <Temp_Sensor_Write>:

/*------SCRITTURA SU SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Write(uint8_t data)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[8];

	for (int i=0; i<8; i++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	e017      	b.n	8000ed0 <Temp_Sensor_Write+0x40>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 8000ea0:	79fa      	ldrb	r2, [r7, #7]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	fa42 f303 	asr.w	r3, r2, r3
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d006      	beq.n	8000ebe <Temp_Sensor_Write+0x2e>
		{
			buffer[i] = 0xFF;  // write 1
 8000eb0:	f107 020c 	add.w	r2, r7, #12
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	22ff      	movs	r2, #255	@ 0xff
 8000eba:	701a      	strb	r2, [r3, #0]
 8000ebc:	e005      	b.n	8000eca <Temp_Sensor_Write+0x3a>
		}
		else  // if the bit is low
		{
			buffer[i] = 0;  // write 0
 8000ebe:	f107 020c 	add.w	r2, r7, #12
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<8; i++)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	2b07      	cmp	r3, #7
 8000ed4:	dde4      	ble.n	8000ea0 <Temp_Sensor_Write+0x10>
		}
	}

	HAL_UART_Transmit(TEMP_UART, buffer, 8, 100);
 8000ed6:	f107 010c 	add.w	r1, r7, #12
 8000eda:	2364      	movs	r3, #100	@ 0x64
 8000edc:	2208      	movs	r2, #8
 8000ede:	4803      	ldr	r0, [pc, #12]	@ (8000eec <Temp_Sensor_Write+0x5c>)
 8000ee0:	f013 fdcc 	bl	8014a7c <HAL_UART_Transmit>
}
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	2000069c 	.word	0x2000069c

08000ef0 <Temp_Sensor_ReadByte>:

/*------LETTURA BYTE DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadByte(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
	uint8_t RxByte = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	71bb      	strb	r3, [r7, #6]
 8000efe:	e00e      	b.n	8000f1e <Temp_Sensor_ReadByte+0x2e>
	{
		RxByte >>= 1;
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	085b      	lsrs	r3, r3, #1
 8000f04:	71fb      	strb	r3, [r7, #7]
		if (Temp_Sensor_ReadBit())
 8000f06:	f000 f813 	bl	8000f30 <Temp_Sensor_ReadBit>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <Temp_Sensor_ReadByte+0x28>
		{
			RxByte |= 0x80;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f16:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8000f18:	79bb      	ldrb	r3, [r7, #6]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	71bb      	strb	r3, [r7, #6]
 8000f1e:	79bb      	ldrb	r3, [r7, #6]
 8000f20:	2b07      	cmp	r3, #7
 8000f22:	d9ed      	bls.n	8000f00 <Temp_Sensor_ReadByte+0x10>
		}
	}
	return RxByte;
 8000f24:	79fb      	ldrb	r3, [r7, #7]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <Temp_Sensor_ReadBit>:

/*------LETTURA BIT DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadBit(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
    uint8_t ReadBitCMD = 0xFF;
 8000f36:	23ff      	movs	r3, #255	@ 0xff
 8000f38:	71fb      	strb	r3, [r7, #7]
    uint8_t RxBit;

    // Send Read Bit CMD
    HAL_UART_Transmit(&huart1, &ReadBitCMD, 1, 1);
 8000f3a:	1df9      	adds	r1, r7, #7
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4808      	ldr	r0, [pc, #32]	@ (8000f64 <Temp_Sensor_ReadBit+0x34>)
 8000f42:	f013 fd9b 	bl	8014a7c <HAL_UART_Transmit>
    // Receive The Bit
    HAL_UART_Receive(&huart1, &RxBit, 1, 1);
 8000f46:	1db9      	adds	r1, r7, #6
 8000f48:	2301      	movs	r3, #1
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <Temp_Sensor_ReadBit+0x34>)
 8000f4e:	f013 fe1e 	bl	8014b8e <HAL_UART_Receive>

    return (RxBit & 0x01);
 8000f52:	79bb      	ldrb	r3, [r7, #6]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000724 	.word	0x20000724

08000f68 <Read_Temperature>:

/*------LETTURA TEMPERATURA------*/
uint16_t Read_Temperature(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
	uint8_t Temp_LSB = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_MSB = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	71bb      	strb	r3, [r7, #6]
	uint16_t Temp = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	80bb      	strh	r3, [r7, #4]
	
	Temp_Sensor_Init();
 8000f7a:	f7ff ff4d 	bl	8000e18 <Temp_Sensor_Init>
	Temp_Sensor_Write(0xCC);  // skip ROM
 8000f7e:	20cc      	movs	r0, #204	@ 0xcc
 8000f80:	f7ff ff86 	bl	8000e90 <Temp_Sensor_Write>

	uint8_t status = Temp_Sensor_ReadBit();
 8000f84:	f7ff ffd4 	bl	8000f30 <Temp_Sensor_ReadBit>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	70fb      	strb	r3, [r7, #3]

	if (status) 
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d01d      	beq.n	8000fce <Read_Temperature+0x66>
	{
		Temp_Sensor_Write(0xBE);  // read Scratch-pad
 8000f92:	20be      	movs	r0, #190	@ 0xbe
 8000f94:	f7ff ff7c 	bl	8000e90 <Temp_Sensor_Write>
		Temp_LSB = Temp_Sensor_ReadByte();
 8000f98:	f7ff ffaa 	bl	8000ef0 <Temp_Sensor_ReadByte>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	71fb      	strb	r3, [r7, #7]
	    Temp_MSB = Temp_Sensor_ReadByte();
 8000fa0:	f7ff ffa6 	bl	8000ef0 <Temp_Sensor_ReadByte>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	71bb      	strb	r3, [r7, #6]
		Temp_Sensor_Init();
 8000fa8:	f7ff ff36 	bl	8000e18 <Temp_Sensor_Init>
		Temp_Sensor_Write(0xCC);  // skip ROM
 8000fac:	20cc      	movs	r0, #204	@ 0xcc
 8000fae:	f7ff ff6f 	bl	8000e90 <Temp_Sensor_Write>
		Temp_Sensor_Write(0x44);  // convert t
 8000fb2:	2044      	movs	r0, #68	@ 0x44
 8000fb4:	f7ff ff6c 	bl	8000e90 <Temp_Sensor_Write>
		Temp = ((Temp_MSB << 8)) | Temp_LSB;
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	80bb      	strh	r3, [r7, #4]
		return Temp;
 8000fca:	88bb      	ldrh	r3, [r7, #4]
 8000fcc:	e000      	b.n	8000fd0 <Read_Temperature+0x68>
	}
	
	return 0; 
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <INA3221_Init>:
#include "INA3221.h"
#include "INA3221_reg.h"
#include "peripherals.h"

void INA3221_Init()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
	uint16_t rcheck = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	80fb      	strh	r3, [r7, #6]

	INA3221_write_reg(INA3221_REG_CONFIG, 0x8000);   //RESET
 8000fe2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 f87a 	bl	80010e0 <INA3221_write_reg>

	HAL_Delay(100);
 8000fec:	2064      	movs	r0, #100	@ 0x64
 8000fee:	f00a f849 	bl	800b084 <HAL_Delay>

	INA3221_read_reg(INA3221_REG_MID, &rcheck);
 8000ff2:	1dbb      	adds	r3, r7, #6
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	20fe      	movs	r0, #254	@ 0xfe
 8000ff8:	f000 f83c 	bl	8001074 <INA3221_read_reg>

	if(rcheck != INA3221_DEFAULT_MID)
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	f245 4249 	movw	r2, #21577	@ 0x5449
 8001002:	4293      	cmp	r3, r2
 8001004:	d001      	beq.n	800100a <INA3221_Init+0x32>
		while(1);
 8001006:	bf00      	nop
 8001008:	e7fd      	b.n	8001006 <INA3221_Init+0x2e>

	INA3221_write_reg(INA3221_REG_CONFIG, 0x7D27);   //CH1 CH2 CH3 Enabled, 512 AVG, 1.1ms conv time, continous mode
 800100a:	f647 5127 	movw	r1, #32039	@ 0x7d27
 800100e:	2000      	movs	r0, #0
 8001010:	f000 f866 	bl	80010e0 <INA3221_write_reg>
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <INA3221_Read_Measure>:

void INA3221_Read_Measure(supply_bus_t *measure)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_1, (uint16_t *)&(measure->v1));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4619      	mov	r1, r3
 8001028:	2002      	movs	r0, #2
 800102a:	f000 f823 	bl	8001074 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_2, (uint16_t *)&(measure->v2));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3302      	adds	r3, #2
 8001032:	4619      	mov	r1, r3
 8001034:	2004      	movs	r0, #4
 8001036:	f000 f81d 	bl	8001074 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_3, (uint16_t *)&(measure->v3));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3304      	adds	r3, #4
 800103e:	4619      	mov	r1, r3
 8001040:	2006      	movs	r0, #6
 8001042:	f000 f817 	bl	8001074 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_1, (uint16_t *)&(measure->i1));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3306      	adds	r3, #6
 800104a:	4619      	mov	r1, r3
 800104c:	2001      	movs	r0, #1
 800104e:	f000 f811 	bl	8001074 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_2, (uint16_t *)&(measure->i2));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3308      	adds	r3, #8
 8001056:	4619      	mov	r1, r3
 8001058:	2003      	movs	r0, #3
 800105a:	f000 f80b 	bl	8001074 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_3, (uint16_t *)&(measure->i3));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	330a      	adds	r3, #10
 8001062:	4619      	mov	r1, r3
 8001064:	2005      	movs	r0, #5
 8001066:	f000 f805 	bl	8001074 <INA3221_read_reg>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <INA3221_read_reg>:


int INA3221_read_reg(uint8_t reg, uint16_t *rdata)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af02      	add	r7, sp, #8
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
 8001084:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 8001086:	2300      	movs	r3, #0
 8001088:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, &reg, 1, 100) == HAL_OK)
 800108a:	1dfa      	adds	r2, r7, #7
 800108c:	2364      	movs	r3, #100	@ 0x64
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	2180      	movs	r1, #128	@ 0x80
 8001094:	4811      	ldr	r0, [pc, #68]	@ (80010dc <INA3221_read_reg+0x68>)
 8001096:	f00d fa7b 	bl	800e590 <HAL_I2C_Master_Transmit>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d118      	bne.n	80010d2 <INA3221_read_reg+0x5e>
	{

		if(HAL_I2C_Master_Receive(I2C,  INA3221_ADDR_0 << 1, data, 2, 100) == HAL_OK)
 80010a0:	f107 0208 	add.w	r2, r7, #8
 80010a4:	2364      	movs	r3, #100	@ 0x64
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2302      	movs	r3, #2
 80010aa:	2180      	movs	r1, #128	@ 0x80
 80010ac:	480b      	ldr	r0, [pc, #44]	@ (80010dc <INA3221_read_reg+0x68>)
 80010ae:	f00d fb87 	bl	800e7c0 <HAL_I2C_Master_Receive>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10c      	bne.n	80010d2 <INA3221_read_reg+0x5e>
		{
			result = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 80010bc:	7a3b      	ldrb	r3, [r7, #8]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	7a7b      	ldrb	r3, [r7, #9]
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200003e8 	.word	0x200003e8

080010e0 <INA3221_write_reg>:


int INA3221_write_reg(uint8_t reg, uint16_t wdata)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	4603      	mov	r3, r0
 80010e8:	460a      	mov	r2, r1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	4613      	mov	r3, r2
 80010ee:	80bb      	strh	r3, [r7, #4]
    int result = -1;
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
 80010f4:	60fb      	str	r3, [r7, #12]
    uint8_t data[3];
    
    data[0] = reg;                    
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	723b      	strb	r3, [r7, #8]
    data[1] = (wdata >> 8);          
 80010fa:	88bb      	ldrh	r3, [r7, #4]
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	b29b      	uxth	r3, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	727b      	strb	r3, [r7, #9]
    data[2] = (wdata & 0xFF);        
 8001104:	88bb      	ldrh	r3, [r7, #4]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	72bb      	strb	r3, [r7, #10]

    if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, data, 3, 100) == HAL_OK)
 800110a:	f107 0208 	add.w	r2, r7, #8
 800110e:	2364      	movs	r3, #100	@ 0x64
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2303      	movs	r3, #3
 8001114:	2180      	movs	r1, #128	@ 0x80
 8001116:	4806      	ldr	r0, [pc, #24]	@ (8001130 <INA3221_write_reg+0x50>)
 8001118:	f00d fa3a 	bl	800e590 <HAL_I2C_Master_Transmit>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <INA3221_write_reg+0x46>
    {
        result = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
    }
    
    return result;
 8001126:	68fb      	ldr	r3, [r7, #12]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200003e8 	.word	0x200003e8

08001134 <RTC_Init>:
#include "RTC.h"


/*-----INIZiALIZZAZIONE ORA RTC-----*/
void RTC_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
	for (int retry = 0; retry < 3; retry++)
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	e00b      	b.n	8001158 <RTC_Init+0x24>
	{
		if (Get_DateTime_From_Network())
 8001140:	f000 f814 	bl	800116c <Get_DateTime_From_Network>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10c      	bne.n	8001164 <RTC_Init+0x30>
		{
			return;
		}
		HAL_Delay(1000);
 800114a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800114e:	f009 ff99 	bl	800b084 <HAL_Delay>
	for (int retry = 0; retry < 3; retry++)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3301      	adds	r3, #1
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b02      	cmp	r3, #2
 800115c:	ddf0      	ble.n	8001140 <RTC_Init+0xc>
	}
	Set_Default_DateTime();
 800115e:	f000 f903 	bl	8001368 <Set_Default_DateTime>
 8001162:	e000      	b.n	8001166 <RTC_Init+0x32>
			return;
 8001164:	bf00      	nop
}
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <Get_DateTime_From_Network>:

/*-----SINCRONIZZAZIONE RTC DA RETE-----*/
int Get_DateTime_From_Network(void)
{
 800116c:	b5b0      	push	{r4, r5, r7, lr}
 800116e:	b0a2      	sub	sp, #136	@ 0x88
 8001170:	af00      	add	r7, sp, #0
	char response[100] = {0};
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	2264      	movs	r2, #100	@ 0x64
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f015 f826 	bl	80161cc <memset>
	RTC_DateTypeDef sDate = {0};
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
	RTC_TimeTypeDef sTime = {0};
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

	SIM_Send_Command("AT+CCLK?\r");
 8001192:	4871      	ldr	r0, [pc, #452]	@ (8001358 <Get_DateTime_From_Network+0x1ec>)
 8001194:	f000 fc4c 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8001198:	f107 031c 	add.w	r3, r7, #28
 800119c:	4618      	mov	r0, r3
 800119e:	f000 fc73 	bl	8001a88 <SIM_Receive_Response>

    char* cclk_pos = strstr(response, "+CCLK: \"");
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	496d      	ldr	r1, [pc, #436]	@ (800135c <Get_DateTime_From_Network+0x1f0>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f015 f849 	bl	8016240 <strstr>
 80011ae:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (cclk_pos == NULL)
 80011b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <Get_DateTime_From_Network+0x52>
	{
        return 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e0c8      	b.n	8001350 <Get_DateTime_From_Network+0x1e4>
    }

    char* time_start = cclk_pos + 8;
 80011be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011c2:	3308      	adds	r3, #8
 80011c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    if (strlen(time_start) < 17)
 80011c8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80011cc:	f7ff f80a 	bl	80001e4 <strlen>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b10      	cmp	r3, #16
 80011d4:	d801      	bhi.n	80011da <Get_DateTime_From_Network+0x6e>
	{
		return 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e0ba      	b.n	8001350 <Get_DateTime_From_Network+0x1e4>
	}

	sDate.Year = (time_start[0] - '0') * 10 + (time_start[1] - '0');
 80011da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	3b30      	subs	r3, #48	@ 0x30
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	461a      	mov	r2, r3
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80011f2:	3301      	adds	r3, #1
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	3b30      	subs	r3, #48	@ 0x30
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	76fb      	strb	r3, [r7, #27]
	sDate.Month = (time_start[3] - '0') * 10 + (time_start[4] - '0');
 8001200:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001204:	3303      	adds	r3, #3
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	3b30      	subs	r3, #48	@ 0x30
 800120a:	b2db      	uxtb	r3, r3
 800120c:	461a      	mov	r2, r3
 800120e:	0092      	lsls	r2, r2, #2
 8001210:	4413      	add	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	b2da      	uxtb	r2, r3
 8001216:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800121a:	3304      	adds	r3, #4
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	b2db      	uxtb	r3, r3
 8001222:	3b30      	subs	r3, #48	@ 0x30
 8001224:	b2db      	uxtb	r3, r3
 8001226:	767b      	strb	r3, [r7, #25]
	sDate.Date = (time_start[6] - '0') * 10 + (time_start[7] - '0');
 8001228:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800122c:	3306      	adds	r3, #6
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	3b30      	subs	r3, #48	@ 0x30
 8001232:	b2db      	uxtb	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	4413      	add	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	b2da      	uxtb	r2, r3
 800123e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001242:	3307      	adds	r3, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	b2db      	uxtb	r3, r3
 800124a:	3b30      	subs	r3, #48	@ 0x30
 800124c:	b2db      	uxtb	r3, r3
 800124e:	76bb      	strb	r3, [r7, #26]

	sTime.Hours = (time_start[9] - '0') * 10 + (time_start[10] - '0');
 8001250:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001254:	3309      	adds	r3, #9
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	3b30      	subs	r3, #48	@ 0x30
 800125a:	b2db      	uxtb	r3, r3
 800125c:	461a      	mov	r2, r3
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4413      	add	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	b2da      	uxtb	r2, r3
 8001266:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800126a:	330a      	adds	r3, #10
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	b2db      	uxtb	r3, r3
 8001272:	3b30      	subs	r3, #48	@ 0x30
 8001274:	b2db      	uxtb	r3, r3
 8001276:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = (time_start[12] - '0') * 10 + (time_start[13] - '0');
 8001278:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800127c:	330c      	adds	r3, #12
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	3b30      	subs	r3, #48	@ 0x30
 8001282:	b2db      	uxtb	r3, r3
 8001284:	461a      	mov	r2, r3
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	4413      	add	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	b2da      	uxtb	r2, r3
 800128e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001292:	330d      	adds	r3, #13
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	4413      	add	r3, r2
 8001298:	b2db      	uxtb	r3, r3
 800129a:	3b30      	subs	r3, #48	@ 0x30
 800129c:	b2db      	uxtb	r3, r3
 800129e:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = (time_start[15] - '0') * 10 + (time_start[16] - '0');
 80012a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012a4:	330f      	adds	r3, #15
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	3b30      	subs	r3, #48	@ 0x30
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	461a      	mov	r2, r3
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012ba:	3310      	adds	r3, #16
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	3b30      	subs	r3, #48	@ 0x30
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	71bb      	strb	r3, [r7, #6]

	if (sDate.Month < 1 || sDate.Month > 12 ||
 80012c8:	7e7b      	ldrb	r3, [r7, #25]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d011      	beq.n	80012f2 <Get_DateTime_From_Network+0x186>
 80012ce:	7e7b      	ldrb	r3, [r7, #25]
 80012d0:	2b0c      	cmp	r3, #12
 80012d2:	d80e      	bhi.n	80012f2 <Get_DateTime_From_Network+0x186>
        sDate.Date < 1 || sDate.Date > 31 ||
 80012d4:	7ebb      	ldrb	r3, [r7, #26]
	if (sDate.Month < 1 || sDate.Month > 12 ||
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00b      	beq.n	80012f2 <Get_DateTime_From_Network+0x186>
        sDate.Date < 1 || sDate.Date > 31 ||
 80012da:	7ebb      	ldrb	r3, [r7, #26]
 80012dc:	2b1f      	cmp	r3, #31
 80012de:	d808      	bhi.n	80012f2 <Get_DateTime_From_Network+0x186>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 80012e0:	793b      	ldrb	r3, [r7, #4]
        sDate.Date < 1 || sDate.Date > 31 ||
 80012e2:	2b17      	cmp	r3, #23
 80012e4:	d805      	bhi.n	80012f2 <Get_DateTime_From_Network+0x186>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 80012e6:	797b      	ldrb	r3, [r7, #5]
 80012e8:	2b3b      	cmp	r3, #59	@ 0x3b
 80012ea:	d802      	bhi.n	80012f2 <Get_DateTime_From_Network+0x186>
 80012ec:	79bb      	ldrb	r3, [r7, #6]
 80012ee:	2b3b      	cmp	r3, #59	@ 0x3b
 80012f0:	d901      	bls.n	80012f6 <Get_DateTime_From_Network+0x18a>
        return 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e02c      	b.n	8001350 <Get_DateTime_From_Network+0x1e4>
    }

	sDate.WeekDay = Calculate_Weekday(sDate.Year + 2000, sDate.Month, sDate.Date);
 80012f6:	7efb      	ldrb	r3, [r7, #27]
 80012f8:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	7e79      	ldrb	r1, [r7, #25]
 8001300:	7eba      	ldrb	r2, [r7, #26]
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f874 	bl	80013f0 <Calculate_Weekday>
 8001308:	4603      	mov	r3, r0
 800130a:	763b      	strb	r3, [r7, #24]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001314:	f107 0318 	add.w	r3, r7, #24
 8001318:	2200      	movs	r2, #0
 800131a:	4619      	mov	r1, r3
 800131c:	4810      	ldr	r0, [pc, #64]	@ (8001360 <Get_DateTime_From_Network+0x1f4>)
 800131e:	f00f ff86 	bl	801122e <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	4619      	mov	r1, r3
 8001328:	480d      	ldr	r0, [pc, #52]	@ (8001360 <Get_DateTime_From_Network+0x1f4>)
 800132a:	f00f fe87 	bl	801103c <HAL_RTC_SetTime>

    sys.onDate = sDate;
 800132e:	4b0d      	ldr	r3, [pc, #52]	@ (8001364 <Get_DateTime_From_Network+0x1f8>)
 8001330:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001334:	461a      	mov	r2, r3
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	6413      	str	r3, [r2, #64]	@ 0x40
    sys.onTime = sTime;
 800133a:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <Get_DateTime_From_Network+0x1f8>)
 800133c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001340:	f103 0444 	add.w	r4, r3, #68	@ 0x44
 8001344:	1d3d      	adds	r5, r7, #4
 8001346:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001348:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800134a:	682b      	ldr	r3, [r5, #0]
 800134c:	6023      	str	r3, [r4, #0]
    
	return 1;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	3788      	adds	r7, #136	@ 0x88
 8001354:	46bd      	mov	sp, r7
 8001356:	bdb0      	pop	{r4, r5, r7, pc}
 8001358:	08017384 	.word	0x08017384
 800135c:	08017390 	.word	0x08017390
 8001360:	20000480 	.word	0x20000480
 8001364:	20000840 	.word	0x20000840

08001368 <Set_Default_DateTime>:

/*-----DATA E ORA DI DEFAULT 1/1/2020 00:00:00-----*/
void Set_Default_DateTime(void)
{
 8001368:	b5b0      	push	{r4, r5, r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
    RTC_DateTypeDef sDate = {0};
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
    RTC_TimeTypeDef sTime = {0};
 8001372:	463b      	mov	r3, r7
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]

    // Default: 01/01/2020 00:00:00
    sDate.Year = 20;  // 2020
 8001380:	2314      	movs	r3, #20
 8001382:	75fb      	strb	r3, [r7, #23]
    sDate.Month = RTC_MONTH_JANUARY;
 8001384:	2301      	movs	r3, #1
 8001386:	757b      	strb	r3, [r7, #21]
    sDate.Date = 1;
 8001388:	2301      	movs	r3, #1
 800138a:	75bb      	strb	r3, [r7, #22]
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY; // 1 Jan 2020 era mercoledì
 800138c:	2303      	movs	r3, #3
 800138e:	753b      	strb	r3, [r7, #20]

    sTime.Hours = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	703b      	strb	r3, [r7, #0]
    sTime.Minutes = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	707b      	strb	r3, [r7, #1]
    sTime.Seconds = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	70bb      	strb	r3, [r7, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]

    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	4619      	mov	r1, r3
 80013ac:	480e      	ldr	r0, [pc, #56]	@ (80013e8 <Set_Default_DateTime+0x80>)
 80013ae:	f00f ff3e 	bl	801122e <HAL_RTC_SetDate>
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80013b2:	463b      	mov	r3, r7
 80013b4:	2200      	movs	r2, #0
 80013b6:	4619      	mov	r1, r3
 80013b8:	480b      	ldr	r0, [pc, #44]	@ (80013e8 <Set_Default_DateTime+0x80>)
 80013ba:	f00f fe3f 	bl	801103c <HAL_RTC_SetTime>

    sys.onDate = sDate;
 80013be:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <Set_Default_DateTime+0x84>)
 80013c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013c4:	461a      	mov	r2, r3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	6413      	str	r3, [r2, #64]	@ 0x40
    sys.onTime = sTime;
 80013ca:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <Set_Default_DateTime+0x84>)
 80013cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013d0:	f103 0444 	add.w	r4, r3, #68	@ 0x44
 80013d4:	463d      	mov	r5, r7
 80013d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013da:	682b      	ldr	r3, [r5, #0]
 80013dc:	6023      	str	r3, [r4, #0]
}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bdb0      	pop	{r4, r5, r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000480 	.word	0x20000480
 80013ec:	20000840 	.word	0x20000840

080013f0 <Calculate_Weekday>:

/*-----CALCOLO GIORNO SETTIMANA-----*/
uint8_t Calculate_Weekday(uint16_t year, uint8_t month, uint8_t day)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
 80013fa:	460b      	mov	r3, r1
 80013fc:	717b      	strb	r3, [r7, #5]
 80013fe:	4613      	mov	r3, r2
 8001400:	713b      	strb	r3, [r7, #4]
    // Algoritmo di Zeller per calcolo giorno settimana
    if (month < 3) {
 8001402:	797b      	ldrb	r3, [r7, #5]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d805      	bhi.n	8001414 <Calculate_Weekday+0x24>
        month += 12;
 8001408:	797b      	ldrb	r3, [r7, #5]
 800140a:	330c      	adds	r3, #12
 800140c:	717b      	strb	r3, [r7, #5]
        year--;
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	3b01      	subs	r3, #1
 8001412:	80fb      	strh	r3, [r7, #6]
    }
    uint8_t zeller_day = (day + ((13 * (month + 1)) / 5) + year + (year / 4) - (year / 100) + (year / 400)) % 7;
 8001414:	7939      	ldrb	r1, [r7, #4]
 8001416:	797b      	ldrb	r3, [r7, #5]
 8001418:	1c5a      	adds	r2, r3, #1
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	4a1e      	ldr	r2, [pc, #120]	@ (80014a0 <Calculate_Weekday+0xb0>)
 8001426:	fb82 0203 	smull	r0, r2, r2, r3
 800142a:	1052      	asrs	r2, r2, #1
 800142c:	17db      	asrs	r3, r3, #31
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	18ca      	adds	r2, r1, r3
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	4413      	add	r3, r2
 8001436:	88fa      	ldrh	r2, [r7, #6]
 8001438:	0892      	lsrs	r2, r2, #2
 800143a:	b292      	uxth	r2, r2
 800143c:	4413      	add	r3, r2
 800143e:	88fa      	ldrh	r2, [r7, #6]
 8001440:	4918      	ldr	r1, [pc, #96]	@ (80014a4 <Calculate_Weekday+0xb4>)
 8001442:	fba1 1202 	umull	r1, r2, r1, r2
 8001446:	0952      	lsrs	r2, r2, #5
 8001448:	b292      	uxth	r2, r2
 800144a:	1a9b      	subs	r3, r3, r2
 800144c:	88fa      	ldrh	r2, [r7, #6]
 800144e:	4915      	ldr	r1, [pc, #84]	@ (80014a4 <Calculate_Weekday+0xb4>)
 8001450:	fba1 1202 	umull	r1, r2, r1, r2
 8001454:	09d2      	lsrs	r2, r2, #7
 8001456:	b292      	uxth	r2, r2
 8001458:	441a      	add	r2, r3
 800145a:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <Calculate_Weekday+0xb8>)
 800145c:	fb83 1302 	smull	r1, r3, r3, r2
 8001460:	4413      	add	r3, r2
 8001462:	1099      	asrs	r1, r3, #2
 8001464:	17d3      	asrs	r3, r2, #31
 8001466:	1ac9      	subs	r1, r1, r3
 8001468:	460b      	mov	r3, r1
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	1a5b      	subs	r3, r3, r1
 800146e:	1ad1      	subs	r1, r2, r3
 8001470:	460b      	mov	r3, r1
 8001472:	73fb      	strb	r3, [r7, #15]

    uint8_t hal_weekday_map[] = {RTC_WEEKDAY_SATURDAY, RTC_WEEKDAY_SUNDAY, RTC_WEEKDAY_MONDAY,
 8001474:	4a0d      	ldr	r2, [pc, #52]	@ (80014ac <Calculate_Weekday+0xbc>)
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800147e:	6018      	str	r0, [r3, #0]
 8001480:	3304      	adds	r3, #4
 8001482:	8019      	strh	r1, [r3, #0]
 8001484:	3302      	adds	r3, #2
 8001486:	0c0a      	lsrs	r2, r1, #16
 8001488:	701a      	strb	r2, [r3, #0]
                                 RTC_WEEKDAY_TUESDAY, RTC_WEEKDAY_WEDNESDAY, RTC_WEEKDAY_THURSDAY, RTC_WEEKDAY_FRIDAY};

    return hal_weekday_map[zeller_day];
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	3310      	adds	r3, #16
 800148e:	443b      	add	r3, r7
 8001490:	f813 3c08 	ldrb.w	r3, [r3, #-8]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	66666667 	.word	0x66666667
 80014a4:	51eb851f 	.word	0x51eb851f
 80014a8:	92492493 	.word	0x92492493
 80014ac:	0801739c 	.word	0x0801739c

080014b0 <SIM_Init>:
#include "process.h"
#include "leds.h"

/*------INIZIALIZZAZIONE DEL MODULO LTE------*/
int SIM_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80014b6:	af00      	add	r7, sp, #0
	char command[256];
	char response[256];
	sprintf(sys.apn, "a");
 80014b8:	49bb      	ldr	r1, [pc, #748]	@ (80017a8 <SIM_Init+0x2f8>)
 80014ba:	48bc      	ldr	r0, [pc, #752]	@ (80017ac <SIM_Init+0x2fc>)
 80014bc:	f014 fe26 	bl	801610c <siprintf>
	sprintf(sys.MQTT.clientID, "a");
 80014c0:	49b9      	ldr	r1, [pc, #740]	@ (80017a8 <SIM_Init+0x2f8>)
 80014c2:	48bb      	ldr	r0, [pc, #748]	@ (80017b0 <SIM_Init+0x300>)
 80014c4:	f014 fe22 	bl	801610c <siprintf>
	sprintf(sys.MQTT.server_name, "a");
 80014c8:	49b7      	ldr	r1, [pc, #732]	@ (80017a8 <SIM_Init+0x2f8>)
 80014ca:	48ba      	ldr	r0, [pc, #744]	@ (80017b4 <SIM_Init+0x304>)
 80014cc:	f014 fe1e 	bl	801610c <siprintf>
	sprintf(sys.MQTT.port, "a");
 80014d0:	49b5      	ldr	r1, [pc, #724]	@ (80017a8 <SIM_Init+0x2f8>)
 80014d2:	48b9      	ldr	r0, [pc, #740]	@ (80017b8 <SIM_Init+0x308>)
 80014d4:	f014 fe1a 	bl	801610c <siprintf>
	sprintf(sys.MQTT.username, "a");
 80014d8:	49b3      	ldr	r1, [pc, #716]	@ (80017a8 <SIM_Init+0x2f8>)
 80014da:	48b8      	ldr	r0, [pc, #736]	@ (80017bc <SIM_Init+0x30c>)
 80014dc:	f014 fe16 	bl	801610c <siprintf>
	sprintf(sys.MQTT.password, "a");
 80014e0:	49b1      	ldr	r1, [pc, #708]	@ (80017a8 <SIM_Init+0x2f8>)
 80014e2:	48b7      	ldr	r0, [pc, #732]	@ (80017c0 <SIM_Init+0x310>)
 80014e4:	f014 fe12 	bl	801610c <siprintf>
	sprintf(sys.TCP.IP_address, "a");
 80014e8:	49af      	ldr	r1, [pc, #700]	@ (80017a8 <SIM_Init+0x2f8>)
 80014ea:	48b6      	ldr	r0, [pc, #728]	@ (80017c4 <SIM_Init+0x314>)
 80014ec:	f014 fe0e 	bl	801610c <siprintf>
	sprintf(sys.TCP.Port, "a");
 80014f0:	49ad      	ldr	r1, [pc, #692]	@ (80017a8 <SIM_Init+0x2f8>)
 80014f2:	48b5      	ldr	r0, [pc, #724]	@ (80017c8 <SIM_Init+0x318>)
 80014f4:	f014 fe0a 	bl	801610c <siprintf>
	strcpy(sys.MQTT.Data_Topic, config.data_topic);
 80014f8:	49b4      	ldr	r1, [pc, #720]	@ (80017cc <SIM_Init+0x31c>)
 80014fa:	48b5      	ldr	r0, [pc, #724]	@ (80017d0 <SIM_Init+0x320>)
 80014fc:	f014 fee2 	bl	80162c4 <strcpy>
	strcpy(sys.MQTT.Command_Topic, config.command_topic);
 8001500:	49b4      	ldr	r1, [pc, #720]	@ (80017d4 <SIM_Init+0x324>)
 8001502:	48b5      	ldr	r0, [pc, #724]	@ (80017d8 <SIM_Init+0x328>)
 8001504:	f014 fede 	bl	80162c4 <strcpy>
	strcpy(sys.MQTT.OTA_Topic, config.ota_topic);
 8001508:	49b4      	ldr	r1, [pc, #720]	@ (80017dc <SIM_Init+0x32c>)
 800150a:	48b5      	ldr	r0, [pc, #724]	@ (80017e0 <SIM_Init+0x330>)
 800150c:	f014 feda 	bl	80162c4 <strcpy>
	strcpy(sys.MQTT.Info_Topic, config.info_topic);
 8001510:	49b4      	ldr	r1, [pc, #720]	@ (80017e4 <SIM_Init+0x334>)
 8001512:	48b5      	ldr	r0, [pc, #724]	@ (80017e8 <SIM_Init+0x338>)
 8001514:	f014 fed6 	bl	80162c4 <strcpy>

	SIM_Power_On();
 8001518:	f000 fa74 	bl	8001a04 <SIM_Power_On>
	HAL_Delay(5000);
 800151c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001520:	f009 fdb0 	bl	800b084 <HAL_Delay>

	SIM_Send_Command("AT\r");                                                                     //Verifica comunicazione
 8001524:	48b1      	ldr	r0, [pc, #708]	@ (80017ec <SIM_Init+0x33c>)
 8001526:	f000 fa83 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 800152a:	48b1      	ldr	r0, [pc, #708]	@ (80017f0 <SIM_Init+0x340>)
 800152c:	f000 feb0 	bl	8002290 <SIM_Wait_Response>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d002      	beq.n	800153c <SIM_Init+0x8c>
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	e23c      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+IPR=921600\r");                                                          //Baudrate a 921600
 800153c:	48ad      	ldr	r0, [pc, #692]	@ (80017f4 <SIM_Init+0x344>)
 800153e:	f000 fa77 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001542:	48ab      	ldr	r0, [pc, #684]	@ (80017f0 <SIM_Init+0x340>)
 8001544:	f000 fea4 	bl	8002290 <SIM_Wait_Response>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d002      	beq.n	8001554 <SIM_Init+0xa4>
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
 8001552:	e230      	b.n	80019b6 <SIM_Init+0x506>

	huart1.Init.BaudRate = 921600;
 8001554:	4ba8      	ldr	r3, [pc, #672]	@ (80017f8 <SIM_Init+0x348>)
 8001556:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800155a:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(SIM_UART);
 800155c:	48a6      	ldr	r0, [pc, #664]	@ (80017f8 <SIM_Init+0x348>)
 800155e:	f013 f9e9 	bl	8014934 <HAL_UART_Init>

	SIM_Send_Command("AT+CFUN=1\r");                                                              //Full functionality
 8001562:	48a6      	ldr	r0, [pc, #664]	@ (80017fc <SIM_Init+0x34c>)
 8001564:	f000 fa64 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001568:	48a1      	ldr	r0, [pc, #644]	@ (80017f0 <SIM_Init+0x340>)
 800156a:	f000 fe91 	bl	8002290 <SIM_Wait_Response>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <SIM_Init+0xca>
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
 8001578:	e21d      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+CNMP=38\r");                                                             //Modalità solo LTE o NB-IoT
 800157a:	48a1      	ldr	r0, [pc, #644]	@ (8001800 <SIM_Init+0x350>)
 800157c:	f000 fa58 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001580:	489b      	ldr	r0, [pc, #620]	@ (80017f0 <SIM_Init+0x340>)
 8001582:	f000 fe85 	bl	8002290 <SIM_Wait_Response>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d002      	beq.n	8001592 <SIM_Init+0xe2>
 800158c:	f04f 33ff 	mov.w	r3, #4294967295
 8001590:	e211      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+CMNB=2\r");                                                              //NB-IoT
 8001592:	489c      	ldr	r0, [pc, #624]	@ (8001804 <SIM_Init+0x354>)
 8001594:	f000 fa4c 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001598:	4895      	ldr	r0, [pc, #596]	@ (80017f0 <SIM_Init+0x340>)
 800159a:	f000 fe79 	bl	8002290 <SIM_Wait_Response>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d002      	beq.n	80015aa <SIM_Init+0xfa>
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295
 80015a8:	e205      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+NBSC=1\r");                                                              //Abilitazione scrambling feature DA VEDERE SE L'OPERATORE LA RICHIEDE
 80015aa:	4897      	ldr	r0, [pc, #604]	@ (8001808 <SIM_Init+0x358>)
 80015ac:	f000 fa40 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80015b0:	488f      	ldr	r0, [pc, #572]	@ (80017f0 <SIM_Init+0x340>)
 80015b2:	f000 fe6d 	bl	8002290 <SIM_Wait_Response>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d002      	beq.n	80015c2 <SIM_Init+0x112>
 80015bc:	f04f 33ff 	mov.w	r3, #4294967295
 80015c0:	e1f9      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+CEREG?\r");                                                              //Controllo registrazione alla rete
 80015c2:	4892      	ldr	r0, [pc, #584]	@ (800180c <SIM_Init+0x35c>)
 80015c4:	f000 fa34 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response);
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 fa5b 	bl	8001a88 <SIM_Receive_Response>
	int stat = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
	int n, stat_value;
	if(strstr(response, "+CEREG: ") != NULL)
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	498c      	ldr	r1, [pc, #560]	@ (8001810 <SIM_Init+0x360>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f014 fe2e 	bl	8016240 <strstr>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d03a      	beq.n	8001660 <SIM_Init+0x1b0>
	{
		while(stat != 1)
 80015ea:	e035      	b.n	8001658 <SIM_Init+0x1a8>
		{
			if(sscanf(response, "+CEREG: %d,%d", &n, &stat_value) >= 2) 
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	f107 0208 	add.w	r2, r7, #8
 80015f2:	f107 000c 	add.w	r0, r7, #12
 80015f6:	4987      	ldr	r1, [pc, #540]	@ (8001814 <SIM_Init+0x364>)
 80015f8:	f014 fdaa 	bl	8016150 <siscanf>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b01      	cmp	r3, #1
 8001600:	dd1e      	ble.n	8001640 <SIM_Init+0x190>
			{
				if(stat_value == 1 || stat_value == 5)
 8001602:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001606:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d006      	beq.n	800161e <SIM_Init+0x16e>
 8001610:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001614:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b05      	cmp	r3, #5
 800161c:	d103      	bne.n	8001626 <SIM_Init+0x176>
			    {
					 stat = 1;
 800161e:	2301      	movs	r3, #1
 8001620:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8001624:	e018      	b.n	8001658 <SIM_Init+0x1a8>
				}
				 else
				{
					SIM_Send_Command("AT+CEREG?\r");
 8001626:	4879      	ldr	r0, [pc, #484]	@ (800180c <SIM_Init+0x35c>)
 8001628:	f000 fa02 	bl	8001a30 <SIM_Send_Command>
					SIM_Receive_Response(response);
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	4618      	mov	r0, r3
 8001632:	f000 fa29 	bl	8001a88 <SIM_Receive_Response>
					HAL_Delay(1000);
 8001636:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800163a:	f009 fd23 	bl	800b084 <HAL_Delay>
 800163e:	e00b      	b.n	8001658 <SIM_Init+0x1a8>
				}
			}
			else  
			{
				SIM_Send_Command("AT+CEREG?\r");
 8001640:	4872      	ldr	r0, [pc, #456]	@ (800180c <SIM_Init+0x35c>)
 8001642:	f000 f9f5 	bl	8001a30 <SIM_Send_Command>
				SIM_Receive_Response(response);
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	4618      	mov	r0, r3
 800164c:	f000 fa1c 	bl	8001a88 <SIM_Receive_Response>
				HAL_Delay(1000);
 8001650:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001654:	f009 fd16 	bl	800b084 <HAL_Delay>
		while(stat != 1)
 8001658:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800165c:	2b01      	cmp	r3, #1
 800165e:	d1c5      	bne.n	80015ec <SIM_Init+0x13c>
			}
		}

	}

	sprintf(command, "AT+CGDCONT=1,\"IP\",\"%s\"\r", sys.apn);                                    //Configurazione APN
 8001660:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001664:	4a51      	ldr	r2, [pc, #324]	@ (80017ac <SIM_Init+0x2fc>)
 8001666:	496c      	ldr	r1, [pc, #432]	@ (8001818 <SIM_Init+0x368>)
 8001668:	4618      	mov	r0, r3
 800166a:	f014 fd4f 	bl	801610c <siprintf>
	SIM_Send_Command(command);
 800166e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f9dc 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001678:	485d      	ldr	r0, [pc, #372]	@ (80017f0 <SIM_Init+0x340>)
 800167a:	f000 fe09 	bl	8002290 <SIM_Wait_Response>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <SIM_Init+0x1da>
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
 8001688:	e195      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+CNACT=1\r");                                                             //Attivazione della rete
 800168a:	4864      	ldr	r0, [pc, #400]	@ (800181c <SIM_Init+0x36c>)
 800168c:	f000 f9d0 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	4618      	mov	r0, r3
 8001696:	f000 f9f7 	bl	8001a88 <SIM_Receive_Response>
	if(strstr(response, "+APP PDP: ACTIVE") == NULL)
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	4960      	ldr	r1, [pc, #384]	@ (8001820 <SIM_Init+0x370>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f014 fdcd 	bl	8016240 <strstr>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d115      	bne.n	80016d8 <SIM_Init+0x228>
	{
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 80016ac:	e00b      	b.n	80016c6 <SIM_Init+0x216>
		{
			SIM_Send_Command("AT+CNACT=1\r");
 80016ae:	485b      	ldr	r0, [pc, #364]	@ (800181c <SIM_Init+0x36c>)
 80016b0:	f000 f9be 	bl	8001a30 <SIM_Send_Command>
			SIM_Receive_Response(response);
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 f9e5 	bl	8001a88 <SIM_Receive_Response>
			HAL_Delay(1000);
 80016be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016c2:	f009 fcdf 	bl	800b084 <HAL_Delay>
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	4955      	ldr	r1, [pc, #340]	@ (8001820 <SIM_Init+0x370>)
 80016cc:	4618      	mov	r0, r3
 80016ce:	f014 fdb7 	bl	8016240 <strstr>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0ea      	beq.n	80016ae <SIM_Init+0x1fe>
		}
	}

	SIM_Send_Command("AT+CNACT?\r");                                                              //Verifica indirizzo IP
 80016d8:	4852      	ldr	r0, [pc, #328]	@ (8001824 <SIM_Init+0x374>)
 80016da:	f000 f9a9 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response);
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f9d0 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_IP(response))
 80016e8:	e00b      	b.n	8001702 <SIM_Init+0x252>
	{
		SIM_Send_Command("AT+CNACT?\r");
 80016ea:	484e      	ldr	r0, [pc, #312]	@ (8001824 <SIM_Init+0x374>)
 80016ec:	f000 f9a0 	bl	8001a30 <SIM_Send_Command>
		SIM_Receive_Response(response);
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 f9c7 	bl	8001a88 <SIM_Receive_Response>
		HAL_Delay(1000);
 80016fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016fe:	f009 fcc1 	bl	800b084 <HAL_Delay>
	while(!SIM_Check_IP(response))
 8001702:	f107 030c 	add.w	r3, r7, #12
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f9d8 	bl	8001abc <SIM_Check_IP>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0eb      	beq.n	80016ea <SIM_Init+0x23a>
	}

	sprintf(command, "AT+SMCONF=\"URL\",\"%s\",%s\r", sys.MQTT.server_name, sys.MQTT.port);       //Configurazione MQTT
 8001712:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8001716:	4b28      	ldr	r3, [pc, #160]	@ (80017b8 <SIM_Init+0x308>)
 8001718:	4a26      	ldr	r2, [pc, #152]	@ (80017b4 <SIM_Init+0x304>)
 800171a:	4943      	ldr	r1, [pc, #268]	@ (8001828 <SIM_Init+0x378>)
 800171c:	f014 fcf6 	bl	801610c <siprintf>
	SIM_Send_Command(command);
 8001720:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001724:	4618      	mov	r0, r3
 8001726:	f000 f983 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 800172a:	4831      	ldr	r0, [pc, #196]	@ (80017f0 <SIM_Init+0x340>)
 800172c:	f000 fdb0 	bl	8002290 <SIM_Wait_Response>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <SIM_Init+0x28c>
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
 800173a:	e13c      	b.n	80019b6 <SIM_Init+0x506>

	sprintf(command, "AT+SMCONF=\"CLIENTID\",\"%s\"\r", sys.MQTT.clientID);
 800173c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001740:	4a1b      	ldr	r2, [pc, #108]	@ (80017b0 <SIM_Init+0x300>)
 8001742:	493a      	ldr	r1, [pc, #232]	@ (800182c <SIM_Init+0x37c>)
 8001744:	4618      	mov	r0, r3
 8001746:	f014 fce1 	bl	801610c <siprintf>
	SIM_Send_Command(command);
 800174a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800174e:	4618      	mov	r0, r3
 8001750:	f000 f96e 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001754:	4826      	ldr	r0, [pc, #152]	@ (80017f0 <SIM_Init+0x340>)
 8001756:	f000 fd9b 	bl	8002290 <SIM_Wait_Response>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <SIM_Init+0x2b6>
 8001760:	f04f 33ff 	mov.w	r3, #4294967295
 8001764:	e127      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+SMCONF=\"KEEPTIME\",60\r");
 8001766:	4832      	ldr	r0, [pc, #200]	@ (8001830 <SIM_Init+0x380>)
 8001768:	f000 f962 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 800176c:	4820      	ldr	r0, [pc, #128]	@ (80017f0 <SIM_Init+0x340>)
 800176e:	f000 fd8f 	bl	8002290 <SIM_Wait_Response>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <SIM_Init+0x2ce>
 8001778:	f04f 33ff 	mov.w	r3, #4294967295
 800177c:	e11b      	b.n	80019b6 <SIM_Init+0x506>

	sprintf(command, "AT+SMCONF=\"USERNAME\",\"%s\"\r", sys.MQTT.username);
 800177e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001782:	4a0e      	ldr	r2, [pc, #56]	@ (80017bc <SIM_Init+0x30c>)
 8001784:	492b      	ldr	r1, [pc, #172]	@ (8001834 <SIM_Init+0x384>)
 8001786:	4618      	mov	r0, r3
 8001788:	f014 fcc0 	bl	801610c <siprintf>
	SIM_Send_Command(command);
 800178c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001790:	4618      	mov	r0, r3
 8001792:	f000 f94d 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001796:	4816      	ldr	r0, [pc, #88]	@ (80017f0 <SIM_Init+0x340>)
 8001798:	f000 fd7a 	bl	8002290 <SIM_Wait_Response>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d04a      	beq.n	8001838 <SIM_Init+0x388>
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	e106      	b.n	80019b6 <SIM_Init+0x506>
 80017a8:	080173a4 	.word	0x080173a4
 80017ac:	20001898 	.word	0x20001898
 80017b0:	20001aac 	.word	0x20001aac
 80017b4:	2000191c 	.word	0x2000191c
 80017b8:	20001980 	.word	0x20001980
 80017bc:	200019e4 	.word	0x200019e4
 80017c0:	20001a48 	.word	0x20001a48
 80017c4:	20001ca0 	.word	0x20001ca0
 80017c8:	20001d04 	.word	0x20001d04
 80017cc:	20001dda 	.word	0x20001dda
 80017d0:	20001b10 	.word	0x20001b10
 80017d4:	20001e1a 	.word	0x20001e1a
 80017d8:	20001b74 	.word	0x20001b74
 80017dc:	20001e5a 	.word	0x20001e5a
 80017e0:	20001bd8 	.word	0x20001bd8
 80017e4:	20001e9a 	.word	0x20001e9a
 80017e8:	20001c3c 	.word	0x20001c3c
 80017ec:	080173a8 	.word	0x080173a8
 80017f0:	080173ac 	.word	0x080173ac
 80017f4:	080173b0 	.word	0x080173b0
 80017f8:	20000724 	.word	0x20000724
 80017fc:	080173c0 	.word	0x080173c0
 8001800:	080173cc 	.word	0x080173cc
 8001804:	080173d8 	.word	0x080173d8
 8001808:	080173e4 	.word	0x080173e4
 800180c:	080173f0 	.word	0x080173f0
 8001810:	080173fc 	.word	0x080173fc
 8001814:	08017408 	.word	0x08017408
 8001818:	08017418 	.word	0x08017418
 800181c:	08017430 	.word	0x08017430
 8001820:	0801743c 	.word	0x0801743c
 8001824:	08017450 	.word	0x08017450
 8001828:	0801745c 	.word	0x0801745c
 800182c:	08017478 	.word	0x08017478
 8001830:	08017494 	.word	0x08017494
 8001834:	080174b0 	.word	0x080174b0

	sprintf(command, "AT+SMCONF=\"PASSWORD\",\"%s\"\r", sys.MQTT.password);
 8001838:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800183c:	4a60      	ldr	r2, [pc, #384]	@ (80019c0 <SIM_Init+0x510>)
 800183e:	4961      	ldr	r1, [pc, #388]	@ (80019c4 <SIM_Init+0x514>)
 8001840:	4618      	mov	r0, r3
 8001842:	f014 fc63 	bl	801610c <siprintf>
	SIM_Send_Command(command);
 8001846:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f8f0 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001850:	485d      	ldr	r0, [pc, #372]	@ (80019c8 <SIM_Init+0x518>)
 8001852:	f000 fd1d 	bl	8002290 <SIM_Wait_Response>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <SIM_Init+0x3b2>
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
 8001860:	e0a9      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+SMCONF=\"QOS\",1\r");
 8001862:	485a      	ldr	r0, [pc, #360]	@ (80019cc <SIM_Init+0x51c>)
 8001864:	f000 f8e4 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001868:	4857      	ldr	r0, [pc, #348]	@ (80019c8 <SIM_Init+0x518>)
 800186a:	f000 fd11 	bl	8002290 <SIM_Wait_Response>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <SIM_Init+0x3ca>
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
 8001878:	e09d      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+SMCONF=\"RETAIN\",0\r");
 800187a:	4855      	ldr	r0, [pc, #340]	@ (80019d0 <SIM_Init+0x520>)
 800187c:	f000 f8d8 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001880:	4851      	ldr	r0, [pc, #324]	@ (80019c8 <SIM_Init+0x518>)
 8001882:	f000 fd05 	bl	8002290 <SIM_Wait_Response>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d002      	beq.n	8001892 <SIM_Init+0x3e2>
 800188c:	f04f 33ff 	mov.w	r3, #4294967295
 8001890:	e091      	b.n	80019b6 <SIM_Init+0x506>

	sprintf(command, "AT+SMCONF=\"TOPIC\",\"%s\"\r", sys.MQTT.Data_Topic);
 8001892:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001896:	4a4f      	ldr	r2, [pc, #316]	@ (80019d4 <SIM_Init+0x524>)
 8001898:	494f      	ldr	r1, [pc, #316]	@ (80019d8 <SIM_Init+0x528>)
 800189a:	4618      	mov	r0, r3
 800189c:	f014 fc36 	bl	801610c <siprintf>
	SIM_Send_Command(command);
 80018a0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 f8c3 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80018aa:	4847      	ldr	r0, [pc, #284]	@ (80019c8 <SIM_Init+0x518>)
 80018ac:	f000 fcf0 	bl	8002290 <SIM_Wait_Response>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <SIM_Init+0x40c>
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ba:	e07c      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+SMCONN\r");                                                              //Connessione al broker MQTT
 80018bc:	4847      	ldr	r0, [pc, #284]	@ (80019dc <SIM_Init+0x52c>)
 80018be:	f000 f8b7 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80018c2:	4841      	ldr	r0, [pc, #260]	@ (80019c8 <SIM_Init+0x518>)
 80018c4:	f000 fce4 	bl	8002290 <SIM_Wait_Response>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <SIM_Init+0x424>
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	e070      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+SMSTATE?\r");                                                            //Verifica connessione al broker MQTT
 80018d4:	4842      	ldr	r0, [pc, #264]	@ (80019e0 <SIM_Init+0x530>)
 80018d6:	f000 f8ab 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response);
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 f8d2 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_MQTT_State(response))
 80018e4:	e00b      	b.n	80018fe <SIM_Init+0x44e>
	{
		SIM_Send_Command("AT+SMSTATE?\r");
 80018e6:	483e      	ldr	r0, [pc, #248]	@ (80019e0 <SIM_Init+0x530>)
 80018e8:	f000 f8a2 	bl	8001a30 <SIM_Send_Command>
		SIM_Receive_Response(response);
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 f8c9 	bl	8001a88 <SIM_Receive_Response>
		HAL_Delay(1000);
 80018f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018fa:	f009 fbc3 	bl	800b084 <HAL_Delay>
	while(!SIM_Check_MQTT_State(response))
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	4618      	mov	r0, r3
 8001904:	f000 f904 	bl	8001b10 <SIM_Check_MQTT_State>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0eb      	beq.n	80018e6 <SIM_Init+0x436>
	}

	sprintf(command, "AT+SMSUB=\"%s\",1\r", sys.MQTT.Command_Topic);                              //Iscrizione al topic per ricezione comandi dal server
 800190e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001912:	4a34      	ldr	r2, [pc, #208]	@ (80019e4 <SIM_Init+0x534>)
 8001914:	4934      	ldr	r1, [pc, #208]	@ (80019e8 <SIM_Init+0x538>)
 8001916:	4618      	mov	r0, r3
 8001918:	f014 fbf8 	bl	801610c <siprintf>
	SIM_Send_Command(command);
 800191c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001920:	4618      	mov	r0, r3
 8001922:	f000 f885 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001926:	4828      	ldr	r0, [pc, #160]	@ (80019c8 <SIM_Init+0x518>)
 8001928:	f000 fcb2 	bl	8002290 <SIM_Wait_Response>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <SIM_Init+0x488>
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	e03e      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+CIPRXGET=1\r");                                                         //Impostazione ricezione manuale da server TCP
 8001938:	482c      	ldr	r0, [pc, #176]	@ (80019ec <SIM_Init+0x53c>)
 800193a:	f000 f879 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 800193e:	4822      	ldr	r0, [pc, #136]	@ (80019c8 <SIM_Init+0x518>)
 8001940:	f000 fca6 	bl	8002290 <SIM_Wait_Response>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <SIM_Init+0x4a0>
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	e032      	b.n	80019b6 <SIM_Init+0x506>

	sprintf(command, "AT+CIPSTART=\"TCP\",\"%s\",%s\r", sys.TCP.IP_address, sys.TCP.Port);        //Connessione TCP
 8001950:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8001954:	4b26      	ldr	r3, [pc, #152]	@ (80019f0 <SIM_Init+0x540>)
 8001956:	4a27      	ldr	r2, [pc, #156]	@ (80019f4 <SIM_Init+0x544>)
 8001958:	4927      	ldr	r1, [pc, #156]	@ (80019f8 <SIM_Init+0x548>)
 800195a:	f014 fbd7 	bl	801610c <siprintf>
	SIM_Send_Command(command);
 800195e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f864 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("CONNECT OK") != HAL_OK) return -1;
 8001968:	4824      	ldr	r0, [pc, #144]	@ (80019fc <SIM_Init+0x54c>)
 800196a:	f000 fc91 	bl	8002290 <SIM_Wait_Response>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <SIM_Init+0x4ca>
 8001974:	f04f 33ff 	mov.w	r3, #4294967295
 8001978:	e01d      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        //Verifica connessione al server TCP
 800197a:	4821      	ldr	r0, [pc, #132]	@ (8001a00 <SIM_Init+0x550>)
 800197c:	f000 f858 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	4618      	mov	r0, r3
 8001986:	f000 f87f 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_TCP_State(response))
 800198a:	e00b      	b.n	80019a4 <SIM_Init+0x4f4>
	{
		SIM_Send_Command("AT+CIPSTATUS=0\r");
 800198c:	481c      	ldr	r0, [pc, #112]	@ (8001a00 <SIM_Init+0x550>)
 800198e:	f000 f84f 	bl	8001a30 <SIM_Send_Command>
		SIM_Receive_Response(response);
 8001992:	f107 030c 	add.w	r3, r7, #12
 8001996:	4618      	mov	r0, r3
 8001998:	f000 f876 	bl	8001a88 <SIM_Receive_Response>
		HAL_Delay(1000);
 800199c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019a0:	f009 fb70 	bl	800b084 <HAL_Delay>
	while(!SIM_Check_TCP_State(response))
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 f8d7 	bl	8001b5c <SIM_Check_TCP_State>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0eb      	beq.n	800198c <SIM_Init+0x4dc>
	}

	return 0;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20001a48 	.word	0x20001a48
 80019c4:	080174cc 	.word	0x080174cc
 80019c8:	080173ac 	.word	0x080173ac
 80019cc:	080174e8 	.word	0x080174e8
 80019d0:	080174fc 	.word	0x080174fc
 80019d4:	20001b10 	.word	0x20001b10
 80019d8:	08017514 	.word	0x08017514
 80019dc:	0801752c 	.word	0x0801752c
 80019e0:	08017538 	.word	0x08017538
 80019e4:	20001b74 	.word	0x20001b74
 80019e8:	08017548 	.word	0x08017548
 80019ec:	0801755c 	.word	0x0801755c
 80019f0:	20001d04 	.word	0x20001d04
 80019f4:	20001ca0 	.word	0x20001ca0
 80019f8:	0801756c 	.word	0x0801756c
 80019fc:	08017588 	.word	0x08017588
 8001a00:	08017594 	.word	0x08017594

08001a04 <SIM_Power_On>:

/*------ACCENSIONE DEL MODULO LTE------*/
void SIM_Power_On(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a12:	f00c fd09 	bl	800e428 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001a16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a1a:	f009 fb33 	bl	800b084 <HAL_Delay>
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a28:	f00c fcfe 	bl	800e428 <HAL_GPIO_WritePin>
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <SIM_Send_Command>:
	HAL_GPIO_WritePin(LTE_RESET_GPIO_Port, LTE_RESET_Pin, GPIO_PIN_RESET);
}

/*------INVIO COMANDO AL MODULO LTE------*/
void SIM_Send_Command(char* command)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7fe fbd3 	bl	80001e4 <strlen>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(SIM_UART, (uint8_t*)command, len, 100);
 8001a42:	89fa      	ldrh	r2, [r7, #14]
 8001a44:	2364      	movs	r3, #100	@ 0x64
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4803      	ldr	r0, [pc, #12]	@ (8001a58 <SIM_Send_Command+0x28>)
 8001a4a:	f013 f817 	bl	8014a7c <HAL_UART_Transmit>
}
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000724 	.word	0x20000724

08001a5c <SIM_Send_Command_DMA>:

/*------INVIO COMANDO AL MODULO LTE (DMA)------*/
void SIM_Send_Command_DMA(char* command)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7fe fbbd 	bl	80001e4 <strlen>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit_DMA(SIM_UART, (uint8_t*)command, len);
 8001a6e:	89fb      	ldrh	r3, [r7, #14]
 8001a70:	461a      	mov	r2, r3
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4803      	ldr	r0, [pc, #12]	@ (8001a84 <SIM_Send_Command_DMA+0x28>)
 8001a76:	f013 f953 	bl	8014d20 <HAL_UART_Transmit_DMA>
}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000724 	.word	0x20000724

08001a88 <SIM_Receive_Response>:

/*------RICEZIONE RISPOSTA DAL MODULO LTE------*/
uint16_t SIM_Receive_Response(char* response)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af02      	add	r7, sp, #8
 8001a8e:	6078      	str	r0, [r7, #4]
	uint16_t max_size = 256;
 8001a90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a94:	81fb      	strh	r3, [r7, #14]
	uint16_t RxLen = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	81bb      	strh	r3, [r7, #12]

	HAL_UARTEx_ReceiveToIdle(SIM_UART, (uint8_t *)response, max_size, &RxLen, 1000);
 8001a9a:	f107 030c 	add.w	r3, r7, #12
 8001a9e:	89fa      	ldrh	r2, [r7, #14]
 8001aa0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001aa4:	9100      	str	r1, [sp, #0]
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	4803      	ldr	r0, [pc, #12]	@ (8001ab8 <SIM_Receive_Response+0x30>)
 8001aaa:	f014 f94e 	bl	8015d4a <HAL_UARTEx_ReceiveToIdle>
	return RxLen;
 8001aae:	89bb      	ldrh	r3, [r7, #12]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000724 	.word	0x20000724

08001abc <SIM_Check_IP>:

/*------CONTROLLO INDIRIZZO IP------*/
int SIM_Check_IP(const char* response)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	char* cnact_pos = strstr(response, "+CNACT:");
 8001ac4:	4910      	ldr	r1, [pc, #64]	@ (8001b08 <SIM_Check_IP+0x4c>)
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f014 fbba 	bl	8016240 <strstr>
 8001acc:	6178      	str	r0, [r7, #20]
    if(cnact_pos != NULL) {
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d014      	beq.n	8001afe <SIM_Check_IP+0x42>
        int context_id, status;
        if(sscanf(cnact_pos, "+CNACT: %d,%d", &context_id, &status) >= 2) {
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	f107 0210 	add.w	r2, r7, #16
 8001adc:	490b      	ldr	r1, [pc, #44]	@ (8001b0c <SIM_Check_IP+0x50>)
 8001ade:	6978      	ldr	r0, [r7, #20]
 8001ae0:	f014 fb36 	bl	8016150 <siscanf>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	dd09      	ble.n	8001afe <SIM_Check_IP+0x42>
            return (context_id == 1 && status == 1) ? 1 : 0;
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d104      	bne.n	8001afa <SIM_Check_IP+0x3e>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <SIM_Check_IP+0x3e>
 8001af6:	2301      	movs	r3, #1
 8001af8:	e002      	b.n	8001b00 <SIM_Check_IP+0x44>
 8001afa:	2300      	movs	r3, #0
 8001afc:	e000      	b.n	8001b00 <SIM_Check_IP+0x44>
        }
    }
    return 0;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	080175a4 	.word	0x080175a4
 8001b0c:	080175ac 	.word	0x080175ac

08001b10 <SIM_Check_MQTT_State>:

/*------CONTROLLO STATO CONNESSIONE MQTT------*/
int SIM_Check_MQTT_State(const char* response)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
    char* smstate_pos = strstr(response, "+SMSTATE:");
 8001b18:	490e      	ldr	r1, [pc, #56]	@ (8001b54 <SIM_Check_MQTT_State+0x44>)
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f014 fb90 	bl	8016240 <strstr>
 8001b20:	60f8      	str	r0, [r7, #12]
    if(smstate_pos != NULL) {
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d010      	beq.n	8001b4a <SIM_Check_MQTT_State+0x3a>
        int mqtt_state;
        if(sscanf(smstate_pos, "+SMSTATE: %d", &mqtt_state) >= 1) {
 8001b28:	f107 0308 	add.w	r3, r7, #8
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	490a      	ldr	r1, [pc, #40]	@ (8001b58 <SIM_Check_MQTT_State+0x48>)
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f014 fb0d 	bl	8016150 <siscanf>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	dd06      	ble.n	8001b4a <SIM_Check_MQTT_State+0x3a>
            return (mqtt_state == 1) ? 1 : 0;
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	bf0c      	ite	eq
 8001b42:	2301      	moveq	r3, #1
 8001b44:	2300      	movne	r3, #0
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	e000      	b.n	8001b4c <SIM_Check_MQTT_State+0x3c>
        }
    }
    return 0;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	080175bc 	.word	0x080175bc
 8001b58:	080175c8 	.word	0x080175c8

08001b5c <SIM_Check_TCP_State>:

/*------CONTROLLO STATO CONNESSIONE TCP------*/
int SIM_Check_TCP_State(const char* response)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
    char* cipstatus_pos = strstr(response, "+CIPSTATUS: 0");
 8001b64:	490a      	ldr	r1, [pc, #40]	@ (8001b90 <SIM_Check_TCP_State+0x34>)
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f014 fb6a 	bl	8016240 <strstr>
 8001b6c:	60f8      	str	r0, [r7, #12]
    if(cipstatus_pos != NULL) {
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <SIM_Check_TCP_State+0x2a>
        // Cerca "CONNECTED" nella stessa riga
        if(strstr(cipstatus_pos, "CONNECTED") != NULL) {
 8001b74:	4907      	ldr	r1, [pc, #28]	@ (8001b94 <SIM_Check_TCP_State+0x38>)
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f014 fb62 	bl	8016240 <strstr>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <SIM_Check_TCP_State+0x2a>
            return 1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <SIM_Check_TCP_State+0x2c>
        }
    }
    return 0;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	080175d8 	.word	0x080175d8
 8001b94:	080175e8 	.word	0x080175e8

08001b98 <SIM_Parse_Command>:

/*------PARSING MESSAGGIO MQTT------*/
void SIM_Parse_Command(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
    char* buf = (char*)sim_rx_buffer;
 8001b9e:	4b78      	ldr	r3, [pc, #480]	@ (8001d80 <SIM_Parse_Command+0x1e8>)
 8001ba0:	61fb      	str	r3, [r7, #28]

    if(strncmp(buf, "+SMSUB: ", 8) == 0)
 8001ba2:	2208      	movs	r2, #8
 8001ba4:	4977      	ldr	r1, [pc, #476]	@ (8001d84 <SIM_Parse_Command+0x1ec>)
 8001ba6:	69f8      	ldr	r0, [r7, #28]
 8001ba8:	f014 fb25 	bl	80161f6 <strncmp>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 80e1 	bne.w	8001d76 <SIM_Parse_Command+0x1de>
    {
        char* pos = buf + 8;
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	3308      	adds	r3, #8
 8001bb8:	61bb      	str	r3, [r7, #24]

        char* first_quote = strchr(pos, '"');
 8001bba:	2122      	movs	r1, #34	@ 0x22
 8001bbc:	69b8      	ldr	r0, [r7, #24]
 8001bbe:	f014 fb0d 	bl	80161dc <strchr>
 8001bc2:	6178      	str	r0, [r7, #20]
        if(first_quote) {
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 80d5 	beq.w	8001d76 <SIM_Parse_Command+0x1de>
            char* second_quote = strchr(first_quote + 1, '"');
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	2122      	movs	r1, #34	@ 0x22
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f014 fb02 	bl	80161dc <strchr>
 8001bd8:	6138      	str	r0, [r7, #16]

            if(second_quote) {
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80ca 	beq.w	8001d76 <SIM_Parse_Command+0x1de>
                char* third_quote = strchr(second_quote + 1, '"');
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	3301      	adds	r3, #1
 8001be6:	2122      	movs	r1, #34	@ 0x22
 8001be8:	4618      	mov	r0, r3
 8001bea:	f014 faf7 	bl	80161dc <strchr>
 8001bee:	60f8      	str	r0, [r7, #12]

                if(third_quote) {
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 80bf 	beq.w	8001d76 <SIM_Parse_Command+0x1de>
                    char* cmd_pos = third_quote + 1;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	60bb      	str	r3, [r7, #8]
                    char* fourth_quote = strchr(cmd_pos, '"');
 8001bfe:	2122      	movs	r1, #34	@ 0x22
 8001c00:	68b8      	ldr	r0, [r7, #8]
 8001c02:	f014 faeb 	bl	80161dc <strchr>
 8001c06:	6078      	str	r0, [r7, #4]

                    if(fourth_quote && (fourth_quote - cmd_pos) >= 3) {
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 80b3 	beq.w	8001d76 <SIM_Parse_Command+0x1de>
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	f340 80ad 	ble.w	8001d76 <SIM_Parse_Command+0x1de>

                        uint32_t cmd_val = (cmd_pos[2] << 16) | (cmd_pos[1] << 8) | cmd_pos[0];
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	3302      	adds	r3, #2
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	041a      	lsls	r2, r3, #16
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	3301      	adds	r3, #1
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	7812      	ldrb	r2, [r2, #0]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	603b      	str	r3, [r7, #0]

                        switch(cmd_val) {
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	4a53      	ldr	r2, [pc, #332]	@ (8001d88 <SIM_Parse_Command+0x1f0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	f000 8093 	beq.w	8001d66 <SIM_Parse_Command+0x1ce>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	4a51      	ldr	r2, [pc, #324]	@ (8001d88 <SIM_Parse_Command+0x1f0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	f200 8091 	bhi.w	8001d6c <SIM_Parse_Command+0x1d4>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	4a4f      	ldr	r2, [pc, #316]	@ (8001d8c <SIM_Parse_Command+0x1f4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d03b      	beq.n	8001cca <SIM_Parse_Command+0x132>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	4a4e      	ldr	r2, [pc, #312]	@ (8001d90 <SIM_Parse_Command+0x1f8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	f080 8088 	bcs.w	8001d6c <SIM_Parse_Command+0x1d4>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	4a4d      	ldr	r2, [pc, #308]	@ (8001d94 <SIM_Parse_Command+0x1fc>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d066      	beq.n	8001d32 <SIM_Parse_Command+0x19a>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	4a4c      	ldr	r2, [pc, #304]	@ (8001d98 <SIM_Parse_Command+0x200>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d27f      	bcs.n	8001d6c <SIM_Parse_Command+0x1d4>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	4a4b      	ldr	r2, [pc, #300]	@ (8001d9c <SIM_Parse_Command+0x204>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d06b      	beq.n	8001d4c <SIM_Parse_Command+0x1b4>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	4a49      	ldr	r2, [pc, #292]	@ (8001d9c <SIM_Parse_Command+0x204>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d877      	bhi.n	8001d6c <SIM_Parse_Command+0x1d4>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	4a48      	ldr	r2, [pc, #288]	@ (8001da0 <SIM_Parse_Command+0x208>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d034      	beq.n	8001cee <SIM_Parse_Command+0x156>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	4a46      	ldr	r2, [pc, #280]	@ (8001da0 <SIM_Parse_Command+0x208>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d86f      	bhi.n	8001d6c <SIM_Parse_Command+0x1d4>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	4a45      	ldr	r2, [pc, #276]	@ (8001da4 <SIM_Parse_Command+0x20c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d014      	beq.n	8001cbe <SIM_Parse_Command+0x126>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	4a43      	ldr	r2, [pc, #268]	@ (8001da4 <SIM_Parse_Command+0x20c>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d867      	bhi.n	8001d6c <SIM_Parse_Command+0x1d4>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	4a42      	ldr	r2, [pc, #264]	@ (8001da8 <SIM_Parse_Command+0x210>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d018      	beq.n	8001cd6 <SIM_Parse_Command+0x13e>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	4a40      	ldr	r2, [pc, #256]	@ (8001da8 <SIM_Parse_Command+0x210>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d85f      	bhi.n	8001d6c <SIM_Parse_Command+0x1d4>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	4a3f      	ldr	r2, [pc, #252]	@ (8001dac <SIM_Parse_Command+0x214>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d034      	beq.n	8001d1e <SIM_Parse_Command+0x186>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	4a3e      	ldr	r2, [pc, #248]	@ (8001db0 <SIM_Parse_Command+0x218>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d012      	beq.n	8001ce2 <SIM_Parse_Command+0x14a>
								}
							case 0x545352: // RST
								HAL_NVIC_SystemReset();
								break;
							default: 
								break;
 8001cbc:	e056      	b.n	8001d6c <SIM_Parse_Command+0x1d4>
								flags.CMD.Idle = 1; 
 8001cbe:	4a3d      	ldr	r2, [pc, #244]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001cc0:	7893      	ldrb	r3, [r2, #2]
 8001cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cc6:	7093      	strb	r3, [r2, #2]
								break;    
 8001cc8:	e055      	b.n	8001d76 <SIM_Parse_Command+0x1de>
								flags.CMD.Start_Meas = 1; 
 8001cca:	4a3a      	ldr	r2, [pc, #232]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001ccc:	7893      	ldrb	r3, [r2, #2]
 8001cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cd2:	7093      	strb	r3, [r2, #2]
								break;
 8001cd4:	e04f      	b.n	8001d76 <SIM_Parse_Command+0x1de>
								flags.CMD.Ping = 1; 
 8001cd6:	4a37      	ldr	r2, [pc, #220]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001cd8:	7893      	ldrb	r3, [r2, #2]
 8001cda:	f043 0308 	orr.w	r3, r3, #8
 8001cde:	7093      	strb	r3, [r2, #2]
								break;
 8001ce0:	e049      	b.n	8001d76 <SIM_Parse_Command+0x1de>
								flags.CMD.Data_Request = 1; 
 8001ce2:	4a34      	ldr	r2, [pc, #208]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001ce4:	7893      	ldrb	r3, [r2, #2]
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	7093      	strb	r3, [r2, #2]
								break;
 8001cec:	e043      	b.n	8001d76 <SIM_Parse_Command+0x1de>
								if(!flags.CMD.Measure_Request)
 8001cee:	4b31      	ldr	r3, [pc, #196]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001cf0:	789b      	ldrb	r3, [r3, #2]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d139      	bne.n	8001d70 <SIM_Parse_Command+0x1d8>
									LED_Start(RED_LED, FAST, LOW);
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	2100      	movs	r1, #0
 8001d00:	2004      	movs	r0, #4
 8001d02:	f001 fcf5 	bl	80036f0 <LED_Start>
									Send_Measure_Addr = Saved_Bytes;
 8001d06:	4b2c      	ldr	r3, [pc, #176]	@ (8001db8 <SIM_Parse_Command+0x220>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a2c      	ldr	r2, [pc, #176]	@ (8001dbc <SIM_Parse_Command+0x224>)
 8001d0c:	6013      	str	r3, [r2, #0]
									flags.CMD.Measure_Request = 1; 
 8001d0e:	4a29      	ldr	r2, [pc, #164]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001d10:	7893      	ldrb	r3, [r2, #2]
 8001d12:	f043 0302 	orr.w	r3, r3, #2
 8001d16:	7093      	strb	r3, [r2, #2]
									Switch_Buffer();
 8001d18:	f004 f80c 	bl	8005d34 <Switch_Buffer>
								break;
 8001d1c:	e028      	b.n	8001d70 <SIM_Parse_Command+0x1d8>
								if(state == IDLE)
 8001d1e:	4b28      	ldr	r3, [pc, #160]	@ (8001dc0 <SIM_Parse_Command+0x228>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d126      	bne.n	8001d74 <SIM_Parse_Command+0x1dc>
									flags.CMD.Start_OTA = 1;
 8001d26:	4a23      	ldr	r2, [pc, #140]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001d28:	7893      	ldrb	r3, [r2, #2]
 8001d2a:	f043 0304 	orr.w	r3, r3, #4
 8001d2e:	7093      	strb	r3, [r2, #2]
								break;
 8001d30:	e020      	b.n	8001d74 <SIM_Parse_Command+0x1dc>
								if(state == IDLE)
 8001d32:	4b23      	ldr	r3, [pc, #140]	@ (8001dc0 <SIM_Parse_Command+0x228>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d108      	bne.n	8001d4c <SIM_Parse_Command+0x1b4>
									flags.CMD.Set_Config = 1;
 8001d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001d3c:	7893      	ldrb	r3, [r2, #2]
 8001d3e:	f043 0310 	orr.w	r3, r3, #16
 8001d42:	7093      	strb	r3, [r2, #2]
									SIM_Parse_Cfg(cmd_pos, fourth_quote);
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	68b8      	ldr	r0, [r7, #8]
 8001d48:	f000 f83c 	bl	8001dc4 <SIM_Parse_Cfg>
								if(state == IDLE)
 8001d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc0 <SIM_Parse_Command+0x228>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d108      	bne.n	8001d66 <SIM_Parse_Command+0x1ce>
									flags.CMD.Get_Config = 1;
 8001d54:	4a17      	ldr	r2, [pc, #92]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001d56:	7893      	ldrb	r3, [r2, #2]
 8001d58:	f043 0320 	orr.w	r3, r3, #32
 8001d5c:	7093      	strb	r3, [r2, #2]
									SIM_Get_Cfg(cmd_pos, fourth_quote);
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	68b8      	ldr	r0, [r7, #8]
 8001d62:	f000 f8af 	bl	8001ec4 <SIM_Get_Cfg>
								HAL_NVIC_SystemReset();
 8001d66:	f00a fe66 	bl	800ca36 <HAL_NVIC_SystemReset>
								break;
 8001d6a:	e004      	b.n	8001d76 <SIM_Parse_Command+0x1de>
								break;
 8001d6c:	bf00      	nop
 8001d6e:	e002      	b.n	8001d76 <SIM_Parse_Command+0x1de>
								break;
 8001d70:	bf00      	nop
 8001d72:	e000      	b.n	8001d76 <SIM_Parse_Command+0x1de>
								break;
 8001d74:	bf00      	nop
                    }
                }
            }
        }
    }
}
 8001d76:	bf00      	nop
 8001d78:	3720      	adds	r7, #32
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200055f8 	.word	0x200055f8
 8001d84:	080175f4 	.word	0x080175f4
 8001d88:	00545352 	.word	0x00545352
 8001d8c:	00545253 	.word	0x00545253
 8001d90:	00545254 	.word	0x00545254
 8001d94:	00544553 	.word	0x00544553
 8001d98:	00544554 	.word	0x00544554
 8001d9c:	00544547 	.word	0x00544547
 8001da0:	0052534d 	.word	0x0052534d
 8001da4:	004c4449 	.word	0x004c4449
 8001da8:	00474e50 	.word	0x00474e50
 8001dac:	0041544f 	.word	0x0041544f
 8001db0:	00444e53 	.word	0x00444e53
 8001db4:	20001d68 	.word	0x20001d68
 8001db8:	20004fc4 	.word	0x20004fc4
 8001dbc:	20004fcc 	.word	0x20004fcc
 8001dc0:	2000083c 	.word	0x2000083c

08001dc4 <SIM_Parse_Cfg>:

/*-----PARSING CONFIGURAZIONE-----*/
void SIM_Parse_Cfg(char* cmd_start, char* cmd_end)
{   
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
    memset(cfg_var, 0, sizeof(cfg_var));
 8001dce:	2214      	movs	r2, #20
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4839      	ldr	r0, [pc, #228]	@ (8001eb8 <SIM_Parse_Cfg+0xf4>)
 8001dd4:	f014 f9fa 	bl	80161cc <memset>
    memset(new_cfg_val, 0, sizeof(new_cfg_val));
 8001dd8:	220a      	movs	r2, #10
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4837      	ldr	r0, [pc, #220]	@ (8001ebc <SIM_Parse_Cfg+0xf8>)
 8001dde:	f014 f9f5 	bl	80161cc <memset>
    
    char* pos = cmd_start + 4; // Salta "SET,"
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3304      	adds	r3, #4
 8001de6:	61fb      	str	r3, [r7, #28]
    
    // Prima virgola (dopo SET)
    char* comma1 = strchr(pos, ',');
 8001de8:	212c      	movs	r1, #44	@ 0x2c
 8001dea:	69f8      	ldr	r0, [r7, #28]
 8001dec:	f014 f9f6 	bl	80161dc <strchr>
 8001df0:	61b8      	str	r0, [r7, #24]
    if(!comma1 || comma1 >= cmd_end) return;
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d056      	beq.n	8001ea6 <SIM_Parse_Cfg+0xe2>
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d252      	bcs.n	8001ea6 <SIM_Parse_Cfg+0xe2>
    
    // Seconda virgola
    char* comma2 = strchr(comma1 + 1, ',');
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	3301      	adds	r3, #1
 8001e04:	212c      	movs	r1, #44	@ 0x2c
 8001e06:	4618      	mov	r0, r3
 8001e08:	f014 f9e8 	bl	80161dc <strchr>
 8001e0c:	6178      	str	r0, [r7, #20]
    if(!comma2 || comma2 >= cmd_end) return;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d04a      	beq.n	8001eaa <SIM_Parse_Cfg+0xe6>
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d246      	bcs.n	8001eaa <SIM_Parse_Cfg+0xe6>
    
    // Terza virgola
    char* comma3 = strchr(comma2 + 1, ',');
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	212c      	movs	r1, #44	@ 0x2c
 8001e22:	4618      	mov	r0, r3
 8001e24:	f014 f9da 	bl	80161dc <strchr>
 8001e28:	6138      	str	r0, [r7, #16]
    if(!comma3 || comma3 >= cmd_end) return;
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d03e      	beq.n	8001eae <SIM_Parse_Cfg+0xea>
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d23a      	bcs.n	8001eae <SIM_Parse_Cfg+0xea>
    
    // Estrai cfg_var (tra SET, e prima virgola)
    int var_len = comma2 - comma1 - 1;
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	60fb      	str	r3, [r7, #12]
    if(var_len > 0 && var_len < sizeof(cfg_var)) 
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	dd0e      	ble.n	8001e66 <SIM_Parse_Cfg+0xa2>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b13      	cmp	r3, #19
 8001e4c:	d80b      	bhi.n	8001e66 <SIM_Parse_Cfg+0xa2>
	{
        strncpy(cfg_var, comma1 + 1, var_len);
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	3301      	adds	r3, #1
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	4619      	mov	r1, r3
 8001e56:	4818      	ldr	r0, [pc, #96]	@ (8001eb8 <SIM_Parse_Cfg+0xf4>)
 8001e58:	f014 f9df 	bl	801621a <strncpy>
        cfg_var[var_len] = '\0';
 8001e5c:	4a16      	ldr	r2, [pc, #88]	@ (8001eb8 <SIM_Parse_Cfg+0xf4>)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4413      	add	r3, r2
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
    }
    
    // Estrai cfg_idx
    cfg_idx = atoi(comma2 + 1);
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f014 f8c4 	bl	8015ff8 <atoi>
 8001e70:	4603      	mov	r3, r0
 8001e72:	4a13      	ldr	r2, [pc, #76]	@ (8001ec0 <SIM_Parse_Cfg+0xfc>)
 8001e74:	6013      	str	r3, [r2, #0]
    
    // Estrai new_cfg_val
    int val_len = cmd_end - comma3 - 1;
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	60bb      	str	r3, [r7, #8]
    if(val_len > 0 && val_len < sizeof(new_cfg_val)) 
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	dd14      	ble.n	8001eb0 <SIM_Parse_Cfg+0xec>
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b09      	cmp	r3, #9
 8001e8a:	d811      	bhi.n	8001eb0 <SIM_Parse_Cfg+0xec>
	{
        strncpy(new_cfg_val, comma3 + 1, val_len);
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	4619      	mov	r1, r3
 8001e94:	4809      	ldr	r0, [pc, #36]	@ (8001ebc <SIM_Parse_Cfg+0xf8>)
 8001e96:	f014 f9c0 	bl	801621a <strncpy>
        new_cfg_val[val_len] = '\0';
 8001e9a:	4a08      	ldr	r2, [pc, #32]	@ (8001ebc <SIM_Parse_Cfg+0xf8>)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
 8001ea4:	e004      	b.n	8001eb0 <SIM_Parse_Cfg+0xec>
    if(!comma1 || comma1 >= cmd_end) return;
 8001ea6:	bf00      	nop
 8001ea8:	e002      	b.n	8001eb0 <SIM_Parse_Cfg+0xec>
    if(!comma2 || comma2 >= cmd_end) return;
 8001eaa:	bf00      	nop
 8001eac:	e000      	b.n	8001eb0 <SIM_Parse_Cfg+0xec>
    if(!comma3 || comma3 >= cmd_end) return;
 8001eae:	bf00      	nop
    }
}
 8001eb0:	3720      	adds	r7, #32
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20005dc8 	.word	0x20005dc8
 8001ebc:	20005de0 	.word	0x20005de0
 8001ec0:	20005ddc 	.word	0x20005ddc

08001ec4 <SIM_Get_Cfg>:

/*-----RECUPERO VALORE DI CONFIGURAZIONE-----*/
void SIM_Get_Cfg(char* cmd_start, char* cmd_end)
{   
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
	memset(cfg_var, 0, sizeof(cfg_var));
 8001ece:	2214      	movs	r2, #20
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4825      	ldr	r0, [pc, #148]	@ (8001f68 <SIM_Get_Cfg+0xa4>)
 8001ed4:	f014 f97a 	bl	80161cc <memset>
	memset(new_cfg_val, 0, sizeof(new_cfg_val));
 8001ed8:	220a      	movs	r2, #10
 8001eda:	2100      	movs	r1, #0
 8001edc:	4823      	ldr	r0, [pc, #140]	@ (8001f6c <SIM_Get_Cfg+0xa8>)
 8001ede:	f014 f975 	bl	80161cc <memset>
	
	char* pos = cmd_start + 4; // Salta "GET,"
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	617b      	str	r3, [r7, #20]
	
	// Prima virgola (dopo GET)
	char* comma1 = strchr(pos, ',');
 8001ee8:	212c      	movs	r1, #44	@ 0x2c
 8001eea:	6978      	ldr	r0, [r7, #20]
 8001eec:	f014 f976 	bl	80161dc <strchr>
 8001ef0:	6138      	str	r0, [r7, #16]
	if(!comma1 || comma1 >= cmd_end) return;
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d031      	beq.n	8001f5c <SIM_Get_Cfg+0x98>
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d22d      	bcs.n	8001f5c <SIM_Get_Cfg+0x98>
	
	// Seconda virgola
	char* comma2 = strchr(comma1 + 1, ',');
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	3301      	adds	r3, #1
 8001f04:	212c      	movs	r1, #44	@ 0x2c
 8001f06:	4618      	mov	r0, r3
 8001f08:	f014 f968 	bl	80161dc <strchr>
 8001f0c:	60f8      	str	r0, [r7, #12]
	if(!comma2 || comma2 >= cmd_end) return;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d025      	beq.n	8001f60 <SIM_Get_Cfg+0x9c>
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d221      	bcs.n	8001f60 <SIM_Get_Cfg+0x9c>
	
	// Estrai cfg_var (tra GET, e prima virgola)
	int var_len = comma2 - comma1 - 1;
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	3b01      	subs	r3, #1
 8001f24:	60bb      	str	r3, [r7, #8]
	if(var_len > 0 && var_len < sizeof(cfg_var)) 
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	dd0e      	ble.n	8001f4a <SIM_Get_Cfg+0x86>
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b13      	cmp	r3, #19
 8001f30:	d80b      	bhi.n	8001f4a <SIM_Get_Cfg+0x86>
	{
		strncpy(cfg_var, comma1 + 1, var_len);
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	3301      	adds	r3, #1
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	480b      	ldr	r0, [pc, #44]	@ (8001f68 <SIM_Get_Cfg+0xa4>)
 8001f3c:	f014 f96d 	bl	801621a <strncpy>
		cfg_var[var_len] = '\0';
 8001f40:	4a09      	ldr	r2, [pc, #36]	@ (8001f68 <SIM_Get_Cfg+0xa4>)
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	4413      	add	r3, r2
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
	}
	
	// Estrai cfg_idx
	cfg_idx = atoi(comma2 + 1);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f014 f852 	bl	8015ff8 <atoi>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4a06      	ldr	r2, [pc, #24]	@ (8001f70 <SIM_Get_Cfg+0xac>)
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	e002      	b.n	8001f62 <SIM_Get_Cfg+0x9e>
	if(!comma1 || comma1 >= cmd_end) return;
 8001f5c:	bf00      	nop
 8001f5e:	e000      	b.n	8001f62 <SIM_Get_Cfg+0x9e>
	if(!comma2 || comma2 >= cmd_end) return;
 8001f60:	bf00      	nop
}
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20005dc8 	.word	0x20005dc8
 8001f6c:	20005de0 	.word	0x20005de0
 8001f70:	20005ddc 	.word	0x20005ddc

08001f74 <SIM_publish_MQTT_Message_DMA>:

/*------PUBBLICAZIONE MESSAGGIO MQTT IN MODALITA' DMA------*/
void SIM_publish_MQTT_Message_DMA(const char* topic, const char* message)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b0c4      	sub	sp, #272	@ 0x110
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f82:	6018      	str	r0, [r3, #0]
 8001f84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f88:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001f8c:	6019      	str	r1, [r3, #0]
    char command[256];
    uint16_t len = (uint16_t)strlen(message);
 8001f8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f92:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	f7fe f924 	bl	80001e4 <strlen>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

    if(topic != NULL && strlen(topic) > 0)
 8001fa2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001fa6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d014      	beq.n	8001fda <SIM_publish_MQTT_Message_DMA+0x66>
 8001fb0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001fb4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00c      	beq.n	8001fda <SIM_publish_MQTT_Message_DMA+0x66>
	{
        sprintf(command, "AT+SMPUB=\"%s\",%d,1,0\r", topic, len);
 8001fc0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8001fc4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001fc8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001fcc:	f107 000c 	add.w	r0, r7, #12
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	490b      	ldr	r1, [pc, #44]	@ (8002000 <SIM_publish_MQTT_Message_DMA+0x8c>)
 8001fd4:	f014 f89a 	bl	801610c <siprintf>
 8001fd8:	e007      	b.n	8001fea <SIM_publish_MQTT_Message_DMA+0x76>
    } 
	else 
	{
        sprintf(command, "AT+SMPUB=%d\r", len);
 8001fda:	f8b7 210e 	ldrh.w	r2, [r7, #270]	@ 0x10e
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	4908      	ldr	r1, [pc, #32]	@ (8002004 <SIM_publish_MQTT_Message_DMA+0x90>)
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f014 f891 	bl	801610c <siprintf>
    }
    
    SIM_Send_Command_DMA(command);
 8001fea:	f107 030c 	add.w	r3, r7, #12
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fd34 	bl	8001a5c <SIM_Send_Command_DMA>
}
 8001ff4:	bf00      	nop
 8001ff6:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	08017600 	.word	0x08017600
 8002004:	08017618 	.word	0x08017618

08002008 <SIM_publish_MQTT_Message>:

/*-----PUBBLICAZIONE MESSAGGIO MQTT-----*/
void SIM_publish_MQTT_Message(const char* topic, const char* message)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b0c4      	sub	sp, #272	@ 0x110
 800200c:	af00      	add	r7, sp, #0
 800200e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002012:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002016:	6018      	str	r0, [r3, #0]
 8002018:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800201c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002020:	6019      	str	r1, [r3, #0]
	char command[256];
	uint16_t len = (uint16_t)strlen(message);
 8002022:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002026:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	f7fe f8da 	bl	80001e4 <strlen>
 8002030:	4603      	mov	r3, r0
 8002032:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

	if(topic != NULL && strlen(topic) > 0)
 8002036:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800203a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d014      	beq.n	800206e <SIM_publish_MQTT_Message+0x66>
 8002044:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002048:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00c      	beq.n	800206e <SIM_publish_MQTT_Message+0x66>
	{
		sprintf(command, "AT+SMPUB=\"%s\",%d,1,0\r", topic, len);
 8002054:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8002058:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800205c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002060:	f107 000c 	add.w	r0, r7, #12
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	4917      	ldr	r1, [pc, #92]	@ (80020c4 <SIM_publish_MQTT_Message+0xbc>)
 8002068:	f014 f850 	bl	801610c <siprintf>
 800206c:	e007      	b.n	800207e <SIM_publish_MQTT_Message+0x76>
	} 
	else 
	{
		sprintf(command, "AT+SMPUB=%d\r", len);
 800206e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	@ 0x10e
 8002072:	f107 030c 	add.w	r3, r7, #12
 8002076:	4914      	ldr	r1, [pc, #80]	@ (80020c8 <SIM_publish_MQTT_Message+0xc0>)
 8002078:	4618      	mov	r0, r3
 800207a:	f014 f847 	bl	801610c <siprintf>
	}
	
	SIM_Send_Command(command);
 800207e:	f107 030c 	add.w	r3, r7, #12
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff fcd4 	bl	8001a30 <SIM_Send_Command>
	SIM_Wait_Response(">");                       
 8002088:	4810      	ldr	r0, [pc, #64]	@ (80020cc <SIM_publish_MQTT_Message+0xc4>)
 800208a:	f000 f901 	bl	8002290 <SIM_Wait_Response>
	HAL_UART_Transmit(SIM_UART, (uint8_t*)message, strlen(message), 1000);
 800208e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002092:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	f7fe f8a4 	bl	80001e4 <strlen>
 800209c:	4603      	mov	r3, r0
 800209e:	b29a      	uxth	r2, r3
 80020a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80020a4:	f5a3 7188 	sub.w	r1, r3, #272	@ 0x110
 80020a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ac:	6809      	ldr	r1, [r1, #0]
 80020ae:	4808      	ldr	r0, [pc, #32]	@ (80020d0 <SIM_publish_MQTT_Message+0xc8>)
 80020b0:	f012 fce4 	bl	8014a7c <HAL_UART_Transmit>
    SIM_Wait_Response("OK");
 80020b4:	4807      	ldr	r0, [pc, #28]	@ (80020d4 <SIM_publish_MQTT_Message+0xcc>)
 80020b6:	f000 f8eb 	bl	8002290 <SIM_Wait_Response>
}
 80020ba:	bf00      	nop
 80020bc:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	08017600 	.word	0x08017600
 80020c8:	08017618 	.word	0x08017618
 80020cc:	08017628 	.word	0x08017628
 80020d0:	20000724 	.word	0x20000724
 80020d4:	080173ac 	.word	0x080173ac

080020d8 <SIM_Send_TCP_Chunk_DMA>:
    SIM_Wait_Response("SEND OK");                              // Attesa invio avvenuto
}

/*-----INVIO DATI AL SERVER TCP CON DMA-----*/
void SIM_Send_TCP_Chunk_DMA(uint8_t* data, uint16_t size)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b090      	sub	sp, #64	@ 0x40
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	807b      	strh	r3, [r7, #2]
    char cmd[50];

    sprintf(cmd, "AT+CIPSEND=%u\r", size);
 80020e4:	887a      	ldrh	r2, [r7, #2]
 80020e6:	f107 030c 	add.w	r3, r7, #12
 80020ea:	4906      	ldr	r1, [pc, #24]	@ (8002104 <SIM_Send_TCP_Chunk_DMA+0x2c>)
 80020ec:	4618      	mov	r0, r3
 80020ee:	f014 f80d 	bl	801610c <siprintf>
    SIM_Send_Command_DMA(cmd);
 80020f2:	f107 030c 	add.w	r3, r7, #12
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fcb0 	bl	8001a5c <SIM_Send_Command_DMA>
}
 80020fc:	bf00      	nop
 80020fe:	3740      	adds	r7, #64	@ 0x40
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	0801762c 	.word	0x0801762c

08002108 <SIM_Send_Infos>:

/*-----INVIO INFORMAZIONI AL SERVER MQTT-----*/
void SIM_Send_Infos(void)
{
 8002108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800210a:	f5ad 7d3f 	sub.w	sp, sp, #764	@ 0x2fc
 800210e:	af10      	add	r7, sp, #64	@ 0x40
	uint16_t len = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	f8a7 32b6 	strh.w	r3, [r7, #694]	@ 0x2b6
	char command[128];
	char infos[512];
	uint16_t new_temp = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	f8a7 32b4 	strh.w	r3, [r7, #692]	@ 0x2b4

	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 800211c:	4951      	ldr	r1, [pc, #324]	@ (8002264 <SIM_Send_Infos+0x15c>)
 800211e:	203b      	movs	r0, #59	@ 0x3b
 8002120:	f000 faf8 	bl	8002714 <BC_MultiRead_Reg>
	INA3221_Read_Measure(&Supply);
 8002124:	4850      	ldr	r0, [pc, #320]	@ (8002268 <SIM_Send_Infos+0x160>)
 8002126:	f7fe ff79 	bl	800101c <INA3221_Read_Measure>
	if((new_temp = Read_Temperature()) != 0)
 800212a:	f7fe ff1d 	bl	8000f68 <Read_Temperature>
 800212e:	4603      	mov	r3, r0
 8002130:	f8a7 32b4 	strh.w	r3, [r7, #692]	@ 0x2b4
 8002134:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	@ 0x2b4
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <SIM_Send_Infos+0x3c>
	{
		Temperature = new_temp;
 800213c:	4a4b      	ldr	r2, [pc, #300]	@ (800226c <SIM_Send_Infos+0x164>)
 800213e:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	@ 0x2b4
 8002142:	8013      	strh	r3, [r2, #0]
	}
	uint16_t fw_ver = FW_VERSION;
 8002144:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002148:	f8a7 32b2 	strh.w	r3, [r7, #690]	@ 0x2b2

	sprintf(infos, "%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", config.device_id, fw_ver, sys.onDate.Year, sys.onDate.Month, sys.onDate.Date, sys.onTime.Hours, sys.onTime.Minutes, sys.onTime.Seconds, Vbatt, config.samp_freq, config.buffering_secs, Supply.v1, Supply.v2, Supply.v3, Supply.i1, Supply.i2, Supply.i3, Temperature);
 800214c:	4b48      	ldr	r3, [pc, #288]	@ (8002270 <SIM_Send_Infos+0x168>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	469c      	mov	ip, r3
 8002152:	f8b7 42b2 	ldrh.w	r4, [r7, #690]	@ 0x2b2
 8002156:	4b47      	ldr	r3, [pc, #284]	@ (8002274 <SIM_Send_Infos+0x16c>)
 8002158:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800215c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002160:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002162:	4b44      	ldr	r3, [pc, #272]	@ (8002274 <SIM_Send_Infos+0x16c>)
 8002164:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800216c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800216e:	4b41      	ldr	r3, [pc, #260]	@ (8002274 <SIM_Send_Infos+0x16c>)
 8002170:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002174:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002178:	627b      	str	r3, [r7, #36]	@ 0x24
 800217a:	4b3e      	ldr	r3, [pc, #248]	@ (8002274 <SIM_Send_Infos+0x16c>)
 800217c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002180:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002184:	623b      	str	r3, [r7, #32]
 8002186:	4b3b      	ldr	r3, [pc, #236]	@ (8002274 <SIM_Send_Infos+0x16c>)
 8002188:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800218c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002190:	61fb      	str	r3, [r7, #28]
 8002192:	4b38      	ldr	r3, [pc, #224]	@ (8002274 <SIM_Send_Infos+0x16c>)
 8002194:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002198:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	4b31      	ldr	r3, [pc, #196]	@ (8002264 <SIM_Send_Infos+0x15c>)
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	4b32      	ldr	r3, [pc, #200]	@ (8002270 <SIM_Send_Infos+0x168>)
 80021a6:	885b      	ldrh	r3, [r3, #2]
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	4b31      	ldr	r3, [pc, #196]	@ (8002270 <SIM_Send_Infos+0x168>)
 80021ac:	791b      	ldrb	r3, [r3, #4]
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002268 <SIM_Send_Infos+0x160>)
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002268 <SIM_Send_Infos+0x160>)
 80021b8:	885b      	ldrh	r3, [r3, #2]
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002268 <SIM_Send_Infos+0x160>)
 80021be:	889b      	ldrh	r3, [r3, #4]
 80021c0:	461e      	mov	r6, r3
 80021c2:	4b29      	ldr	r3, [pc, #164]	@ (8002268 <SIM_Send_Infos+0x160>)
 80021c4:	88db      	ldrh	r3, [r3, #6]
 80021c6:	461d      	mov	r5, r3
 80021c8:	4b27      	ldr	r3, [pc, #156]	@ (8002268 <SIM_Send_Infos+0x160>)
 80021ca:	891b      	ldrh	r3, [r3, #8]
 80021cc:	4619      	mov	r1, r3
 80021ce:	4b26      	ldr	r3, [pc, #152]	@ (8002268 <SIM_Send_Infos+0x160>)
 80021d0:	895b      	ldrh	r3, [r3, #10]
 80021d2:	461a      	mov	r2, r3
 80021d4:	4b25      	ldr	r3, [pc, #148]	@ (800226c <SIM_Send_Infos+0x164>)
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80021dc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80021de:	920e      	str	r2, [sp, #56]	@ 0x38
 80021e0:	910d      	str	r1, [sp, #52]	@ 0x34
 80021e2:	950c      	str	r5, [sp, #48]	@ 0x30
 80021e4:	960b      	str	r6, [sp, #44]	@ 0x2c
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	920a      	str	r2, [sp, #40]	@ 0x28
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	9208      	str	r2, [sp, #32]
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	9207      	str	r2, [sp, #28]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	9206      	str	r2, [sp, #24]
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	9205      	str	r2, [sp, #20]
 80021fe:	69fa      	ldr	r2, [r7, #28]
 8002200:	9204      	str	r2, [sp, #16]
 8002202:	6a3a      	ldr	r2, [r7, #32]
 8002204:	9203      	str	r2, [sp, #12]
 8002206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002208:	9202      	str	r2, [sp, #8]
 800220a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800220c:	9201      	str	r2, [sp, #4]
 800220e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	4623      	mov	r3, r4
 8002214:	4662      	mov	r2, ip
 8002216:	4918      	ldr	r1, [pc, #96]	@ (8002278 <SIM_Send_Infos+0x170>)
 8002218:	f013 ff78 	bl	801610c <siprintf>
	len = (uint16_t)strlen(infos);
 800221c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002220:	4618      	mov	r0, r3
 8002222:	f7fd ffdf 	bl	80001e4 <strlen>
 8002226:	4603      	mov	r3, r0
 8002228:	f8a7 32b6 	strh.w	r3, [r7, #694]	@ 0x2b6

	sprintf(command, "AT+SMPUB=\"%s\",%d,1,0\r", sys.MQTT.Info_Topic, len);
 800222c:	f8b7 32b6 	ldrh.w	r3, [r7, #694]	@ 0x2b6
 8002230:	f507 700c 	add.w	r0, r7, #560	@ 0x230
 8002234:	4a11      	ldr	r2, [pc, #68]	@ (800227c <SIM_Send_Infos+0x174>)
 8002236:	4912      	ldr	r1, [pc, #72]	@ (8002280 <SIM_Send_Infos+0x178>)
 8002238:	f013 ff68 	bl	801610c <siprintf>
	SIM_Wait_Response(">"); 
 800223c:	4811      	ldr	r0, [pc, #68]	@ (8002284 <SIM_Send_Infos+0x17c>)
 800223e:	f000 f827 	bl	8002290 <SIM_Wait_Response>
	HAL_UART_Transmit(SIM_UART, (uint8_t*)infos, len, 100);
 8002242:	f8b7 22b6 	ldrh.w	r2, [r7, #694]	@ 0x2b6
 8002246:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800224a:	2364      	movs	r3, #100	@ 0x64
 800224c:	480e      	ldr	r0, [pc, #56]	@ (8002288 <SIM_Send_Infos+0x180>)
 800224e:	f012 fc15 	bl	8014a7c <HAL_UART_Transmit>
	SIM_Wait_Response("OK");
 8002252:	480e      	ldr	r0, [pc, #56]	@ (800228c <SIM_Send_Infos+0x184>)
 8002254:	f000 f81c 	bl	8002290 <SIM_Wait_Response>
}
 8002258:	bf00      	nop
 800225a:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 800225e:	46bd      	mov	sp, r7
 8002260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002262:	bf00      	nop
 8002264:	20004826 	.word	0x20004826
 8002268:	20003f44 	.word	0x20003f44
 800226c:	20004824 	.word	0x20004824
 8002270:	20001d6c 	.word	0x20001d6c
 8002274:	20000840 	.word	0x20000840
 8002278:	08017644 	.word	0x08017644
 800227c:	20001c3c 	.word	0x20001c3c
 8002280:	08017600 	.word	0x08017600
 8002284:	08017628 	.word	0x08017628
 8002288:	20000724 	.word	0x20000724
 800228c:	080173ac 	.word	0x080173ac

08002290 <SIM_Wait_Response>:

/*-----ATTESA RISPOSTA-----*/
int SIM_Wait_Response(const char* expected)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b0c8      	sub	sp, #288	@ 0x120
 8002294:	af02      	add	r7, sp, #8
 8002296:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800229a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800229e:	6018      	str	r0, [r3, #0]
    char response[256];
    uint16_t timeout = 10000; // 10 secondi
 80022a0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80022a4:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    uint32_t start_time = HAL_GetTick();
 80022a8:	f008 fee0 	bl	800b06c <HAL_GetTick>
 80022ac:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    
    while((HAL_GetTick() - start_time) < timeout)
 80022b0:	e02a      	b.n	8002308 <SIM_Wait_Response+0x78>
    {
        uint16_t RxLen = 0;
 80022b2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022b6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80022ba:	2200      	movs	r2, #0
 80022bc:	801a      	strh	r2, [r3, #0]
        HAL_UARTEx_ReceiveToIdle(SIM_UART, (uint8_t*)response, sizeof(response), &RxLen, 500);
 80022be:	f107 030e 	add.w	r3, r7, #14
 80022c2:	f107 0110 	add.w	r1, r7, #16
 80022c6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80022ca:	9200      	str	r2, [sp, #0]
 80022cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022d0:	4816      	ldr	r0, [pc, #88]	@ (800232c <SIM_Wait_Response+0x9c>)
 80022d2:	f013 fd3a 	bl	8015d4a <HAL_UARTEx_ReceiveToIdle>
        
        if(RxLen > 0 && strstr(response, expected) != NULL)
 80022d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022da:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00e      	beq.n	8002302 <SIM_Wait_Response+0x72>
 80022e4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022e8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80022ec:	f107 0210 	add.w	r2, r7, #16
 80022f0:	6819      	ldr	r1, [r3, #0]
 80022f2:	4610      	mov	r0, r2
 80022f4:	f013 ffa4 	bl	8016240 <strstr>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <SIM_Wait_Response+0x72>
        {
            return 0; 
 80022fe:	2300      	movs	r3, #0
 8002300:	e00e      	b.n	8002320 <SIM_Wait_Response+0x90>
        }
        
        HAL_Delay(10);
 8002302:	200a      	movs	r0, #10
 8002304:	f008 febe 	bl	800b084 <HAL_Delay>
    while((HAL_GetTick() - start_time) < timeout)
 8002308:	f008 feb0 	bl	800b06c <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002312:	1ad2      	subs	r2, r2, r3
 8002314:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8002318:	429a      	cmp	r2, r3
 800231a:	d3ca      	bcc.n	80022b2 <SIM_Wait_Response+0x22>
    }
	return -1;
 800231c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002320:	4618      	mov	r0, r3
 8002322:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000724 	.word	0x20000724

08002330 <SIM_Check_Connection>:

/*-----CONTROLLA STATO CONNESSIONE MQTT E TCP-----*/
void SIM_Check_Connection(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002336:	af00      	add	r7, sp, #0
	char command_sim[256];
	char response_sim[256];

	SIM_Send_Command("AT+SMSTATE?\r");                                                            
 8002338:	4823      	ldr	r0, [pc, #140]	@ (80023c8 <SIM_Check_Connection+0x98>)
 800233a:	f7ff fb79 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response_sim);
 800233e:	463b      	mov	r3, r7
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fba1 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_MQTT_State(response_sim))
 8002346:	e00c      	b.n	8002362 <SIM_Check_Connection+0x32>
	{
		SIM_Send_Command("AT+SMCONN\r");                                                              
 8002348:	4820      	ldr	r0, [pc, #128]	@ (80023cc <SIM_Check_Connection+0x9c>)
 800234a:	f7ff fb71 	bl	8001a30 <SIM_Send_Command>
		SIM_Wait_Response("OK");
 800234e:	4820      	ldr	r0, [pc, #128]	@ (80023d0 <SIM_Check_Connection+0xa0>)
 8002350:	f7ff ff9e 	bl	8002290 <SIM_Wait_Response>
		SIM_Send_Command("AT+SMSTATE?\r");                                                            
 8002354:	481c      	ldr	r0, [pc, #112]	@ (80023c8 <SIM_Check_Connection+0x98>)
 8002356:	f7ff fb6b 	bl	8001a30 <SIM_Send_Command>
		SIM_Receive_Response(response_sim);
 800235a:	463b      	mov	r3, r7
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fb93 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_MQTT_State(response_sim))
 8002362:	463b      	mov	r3, r7
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fbd3 	bl	8001b10 <SIM_Check_MQTT_State>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0eb      	beq.n	8002348 <SIM_Check_Connection+0x18>
	}
	SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        
 8002370:	4818      	ldr	r0, [pc, #96]	@ (80023d4 <SIM_Check_Connection+0xa4>)
 8002372:	f7ff fb5d 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response_sim);
 8002376:	463b      	mov	r3, r7
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fb85 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_TCP_State(response_sim))
 800237e:	e015      	b.n	80023ac <SIM_Check_Connection+0x7c>
	{
		sprintf(command_sim, "AT+CIPSTART=\"TCP\",\"%s\",%s\r", sys.TCP.IP_address, sys.TCP.Port);       
 8002380:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8002384:	4b14      	ldr	r3, [pc, #80]	@ (80023d8 <SIM_Check_Connection+0xa8>)
 8002386:	4a15      	ldr	r2, [pc, #84]	@ (80023dc <SIM_Check_Connection+0xac>)
 8002388:	4915      	ldr	r1, [pc, #84]	@ (80023e0 <SIM_Check_Connection+0xb0>)
 800238a:	f013 febf 	bl	801610c <siprintf>
		SIM_Send_Command(command_sim);
 800238e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fb4c 	bl	8001a30 <SIM_Send_Command>
		SIM_Wait_Response("CONNECT OK");
 8002398:	4812      	ldr	r0, [pc, #72]	@ (80023e4 <SIM_Check_Connection+0xb4>)
 800239a:	f7ff ff79 	bl	8002290 <SIM_Wait_Response>
		SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        
 800239e:	480d      	ldr	r0, [pc, #52]	@ (80023d4 <SIM_Check_Connection+0xa4>)
 80023a0:	f7ff fb46 	bl	8001a30 <SIM_Send_Command>
		SIM_Receive_Response(response_sim);
 80023a4:	463b      	mov	r3, r7
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fb6e 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_TCP_State(response_sim))
 80023ac:	463b      	mov	r3, r7
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fbd4 	bl	8001b5c <SIM_Check_TCP_State>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0e2      	beq.n	8002380 <SIM_Check_Connection+0x50>
	}
}
 80023ba:	bf00      	nop
 80023bc:	bf00      	nop
 80023be:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	08017538 	.word	0x08017538
 80023cc:	0801752c 	.word	0x0801752c
 80023d0:	080173ac 	.word	0x080173ac
 80023d4:	08017594 	.word	0x08017594
 80023d8:	20001d04 	.word	0x20001d04
 80023dc:	20001ca0 	.word	0x20001ca0
 80023e0:	0801756c 	.word	0x0801756c
 80023e4:	08017588 	.word	0x08017588

080023e8 <Base64_Decode>:
#include "global_variables.h"


/*-----DECODIFICA BASE64-----*/
size_t Base64_Decode(const char *in, uint8_t *out, size_t out_len)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b08b      	sub	sp, #44	@ 0x2c
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
    size_t i = 0, j = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80023f8:	2300      	movs	r3, #0
 80023fa:	623b      	str	r3, [r7, #32]
    int v = 0, val = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61fb      	str	r3, [r7, #28]
 8002400:	2300      	movs	r3, #0
 8002402:	61bb      	str	r3, [r7, #24]
    while (in[i] && in[i] != '\n' && in[i] != '\r')
 8002404:	e02b      	b.n	800245e <Base64_Decode+0x76>
    {
        unsigned char c = base64_table[(unsigned char)in[i++]];
 8002406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	627a      	str	r2, [r7, #36]	@ 0x24
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	4413      	add	r3, r2
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	4b1e      	ldr	r3, [pc, #120]	@ (8002490 <Base64_Decode+0xa8>)
 8002416:	5c9b      	ldrb	r3, [r3, r2]
 8002418:	75fb      	strb	r3, [r7, #23]
        if (c == 0x80) continue; // carattere non valido
 800241a:	7dfb      	ldrb	r3, [r7, #23]
 800241c:	2b80      	cmp	r3, #128	@ 0x80
 800241e:	d01d      	beq.n	800245c <Base64_Decode+0x74>
        val = (val << 6) | c;
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	019a      	lsls	r2, r3, #6
 8002424:	7dfb      	ldrb	r3, [r7, #23]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        v += 6;
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3306      	adds	r3, #6
 800242e:	61fb      	str	r3, [r7, #28]
        if (v >= 8)
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	2b07      	cmp	r3, #7
 8002434:	dd13      	ble.n	800245e <Base64_Decode+0x76>
        {
            v -= 8;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3b08      	subs	r3, #8
 800243a:	61fb      	str	r3, [r7, #28]
            if (j < out_len) out[j++] = (val >> v) & 0xFF;
 800243c:	6a3a      	ldr	r2, [r7, #32]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	429a      	cmp	r2, r3
 8002442:	d20c      	bcs.n	800245e <Base64_Decode+0x76>
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	fa42 f103 	asr.w	r1, r2, r3
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	623a      	str	r2, [r7, #32]
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	4413      	add	r3, r2
 8002456:	b2ca      	uxtb	r2, r1
 8002458:	701a      	strb	r2, [r3, #0]
 800245a:	e000      	b.n	800245e <Base64_Decode+0x76>
        if (c == 0x80) continue; // carattere non valido
 800245c:	bf00      	nop
    while (in[i] && in[i] != '\n' && in[i] != '\r')
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002462:	4413      	add	r3, r2
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00b      	beq.n	8002482 <Base64_Decode+0x9a>
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246e:	4413      	add	r3, r2
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b0a      	cmp	r3, #10
 8002474:	d005      	beq.n	8002482 <Base64_Decode+0x9a>
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247a:	4413      	add	r3, r2
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b0d      	cmp	r3, #13
 8002480:	d1c1      	bne.n	8002406 <Base64_Decode+0x1e>
        }
    }
    return j; // numero di byte decodificati
 8002482:	6a3b      	ldr	r3, [r7, #32]
}
 8002484:	4618      	mov	r0, r3
 8002486:	372c      	adds	r7, #44	@ 0x2c
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	20000168 	.word	0x20000168

08002494 <Base64_Encode>:

/*-----CODIFICA BASE64-----*/
size_t Base64_Encode(const uint8_t *in, size_t in_len, char *out, size_t out_size)
{
 8002494:	b480      	push	{r7}
 8002496:	b08b      	sub	sp, #44	@ 0x2c
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
 80024a0:	603b      	str	r3, [r7, #0]
    size_t i = 0, j = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80024a6:	2300      	movs	r3, #0
 80024a8:	623b      	str	r3, [r7, #32]
    while (i < in_len && (j + 4) <= out_size)
 80024aa:	e06c      	b.n	8002586 <Base64_Encode+0xf2>
    {
        uint32_t octet_a = i < in_len ? in[i++] : 0;
 80024ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d206      	bcs.n	80024c2 <Base64_Encode+0x2e>
 80024b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4413      	add	r3, r2
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	e000      	b.n	80024c4 <Base64_Encode+0x30>
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
        uint32_t octet_b = i < in_len ? in[i++] : 0;
 80024c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d206      	bcs.n	80024dc <Base64_Encode+0x48>
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	e000      	b.n	80024de <Base64_Encode+0x4a>
 80024dc:	2300      	movs	r3, #0
 80024de:	61bb      	str	r3, [r7, #24]
        uint32_t octet_c = i < in_len ? in[i++] : 0;
 80024e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d206      	bcs.n	80024f6 <Base64_Encode+0x62>
 80024e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4413      	add	r3, r2
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	e000      	b.n	80024f8 <Base64_Encode+0x64>
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
        uint32_t triple = (octet_a << 16) | (octet_b << 8) | octet_c;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	041a      	lsls	r2, r3, #16
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	021b      	lsls	r3, r3, #8
 8002502:	4313      	orrs	r3, r2
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]

        out[j++] = base64_enc_table[(triple >> 18) & 0x3F];
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	0c9b      	lsrs	r3, r3, #18
 800250e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	1c59      	adds	r1, r3, #1
 8002516:	6239      	str	r1, [r7, #32]
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	440b      	add	r3, r1
 800251c:	4926      	ldr	r1, [pc, #152]	@ (80025b8 <Base64_Encode+0x124>)
 800251e:	5c8a      	ldrb	r2, [r1, r2]
 8002520:	701a      	strb	r2, [r3, #0]
        out[j++] = base64_enc_table[(triple >> 12) & 0x3F];
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	0b1b      	lsrs	r3, r3, #12
 8002526:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	1c59      	adds	r1, r3, #1
 800252e:	6239      	str	r1, [r7, #32]
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	440b      	add	r3, r1
 8002534:	4920      	ldr	r1, [pc, #128]	@ (80025b8 <Base64_Encode+0x124>)
 8002536:	5c8a      	ldrb	r2, [r1, r2]
 8002538:	701a      	strb	r2, [r3, #0]
        out[j++] = (i > in_len + 1) ? '=' : base64_enc_table[(triple >> 6) & 0x3F];
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	3301      	adds	r3, #1
 800253e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002540:	429a      	cmp	r2, r3
 8002542:	d806      	bhi.n	8002552 <Base64_Encode+0xbe>
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	099b      	lsrs	r3, r3, #6
 8002548:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800254c:	4a1a      	ldr	r2, [pc, #104]	@ (80025b8 <Base64_Encode+0x124>)
 800254e:	5cd1      	ldrb	r1, [r2, r3]
 8002550:	e000      	b.n	8002554 <Base64_Encode+0xc0>
 8002552:	213d      	movs	r1, #61	@ 0x3d
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	623a      	str	r2, [r7, #32]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	4413      	add	r3, r2
 800255e:	460a      	mov	r2, r1
 8002560:	701a      	strb	r2, [r3, #0]
        out[j++] = (i > in_len) ? '=' : base64_enc_table[triple & 0x3F];
 8002562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	429a      	cmp	r2, r3
 8002568:	d805      	bhi.n	8002576 <Base64_Encode+0xe2>
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002570:	4a11      	ldr	r2, [pc, #68]	@ (80025b8 <Base64_Encode+0x124>)
 8002572:	5cd1      	ldrb	r1, [r2, r3]
 8002574:	e000      	b.n	8002578 <Base64_Encode+0xe4>
 8002576:	213d      	movs	r1, #61	@ 0x3d
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	623a      	str	r2, [r7, #32]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	460a      	mov	r2, r1
 8002584:	701a      	strb	r2, [r3, #0]
    while (i < in_len && (j + 4) <= out_size)
 8002586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	429a      	cmp	r2, r3
 800258c:	d204      	bcs.n	8002598 <Base64_Encode+0x104>
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	3304      	adds	r3, #4
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d289      	bcs.n	80024ac <Base64_Encode+0x18>
    }
    if (j < out_size) out[j] = '\0'; // null-terminate se vuoi una stringa
 8002598:	6a3a      	ldr	r2, [r7, #32]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d204      	bcs.n	80025aa <Base64_Encode+0x116>
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	4413      	add	r3, r2
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
    return j; // lunghezza della stringa base64 prodotta (senza null)
 80025aa:	6a3b      	ldr	r3, [r7, #32]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	372c      	adds	r7, #44	@ 0x2c
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	08017904 	.word	0x08017904

080025bc <BC_Init>:
#include "global_variables.h"


/*------INIZIALIZZAZIONE BATTERY CHARGER------*/
void BC_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
	BC_Write_Reg(REG00_MINIMAL_SYSTEM_VOLTAGE, 0x1A);           //Tensione minima di uscita con 3 celle = 9V   <----- Senza Batteria il sistema fornisce questa tensione
 80025c0:	211a      	movs	r1, #26
 80025c2:	2000      	movs	r0, #0
 80025c4:	f000 f830 	bl	8002628 <BC_Write_Reg>
	BC_MultiWrite_Reg(REG01_CHARGE_VOLTAGE_LIMIT, 0x04EC);      //Limite tensione di carica con 3 celle = 12.6V
 80025c8:	f240 41ec 	movw	r1, #1260	@ 0x4ec
 80025cc:	2001      	movs	r0, #1
 80025ce:	f000 f877 	bl	80026c0 <BC_MultiWrite_Reg>
	BC_MultiWrite_Reg(REG03_CHARGE_CURRENT_LIMIT, 0x0064);      //Limite corrente di carica con 3 celle = 1A
 80025d2:	2164      	movs	r1, #100	@ 0x64
 80025d4:	2003      	movs	r0, #3
 80025d6:	f000 f873 	bl	80026c0 <BC_MultiWrite_Reg>
	BC_Write_Reg(REG10_CHARGER_CONTROL_1, 0x85);                //Tensione di OVP in ingresso = 26V
 80025da:	2185      	movs	r1, #133	@ 0x85
 80025dc:	2010      	movs	r0, #16
 80025de:	f000 f823 	bl	8002628 <BC_Write_Reg>
	BC_Write_Reg(REG14_CHARGER_CONTROL_5, 0x96);                //Informazione sulla presenza dello Ship-FET
 80025e2:	2196      	movs	r1, #150	@ 0x96
 80025e4:	2014      	movs	r0, #20
 80025e6:	f000 f81f 	bl	8002628 <BC_Write_Reg>
	BC_Write_Reg(REG15_MPPT_CONTROL, 0xAB);                     //MPPT attivato, tensione di MPP = 0.875*Vin, misura di 300ms ogni 2 minuti della Vin
 80025ea:	21ab      	movs	r1, #171	@ 0xab
 80025ec:	2015      	movs	r0, #21
 80025ee:	f000 f81b 	bl	8002628 <BC_Write_Reg>
	BC_Write_Reg(REG28_CHARGER_MASK_0, 0xE1);                   //Interrupt attivati: Poor source, Power good, VAC2 present, VAC1 present
 80025f2:	21e1      	movs	r1, #225	@ 0xe1
 80025f4:	2028      	movs	r0, #40	@ 0x28
 80025f6:	f000 f817 	bl	8002628 <BC_Write_Reg>
	BC_Write_Reg(REG29_CHARGER_MASK_1, 0xD7);                   //Interrupt attivati: nessuno
 80025fa:	21d7      	movs	r1, #215	@ 0xd7
 80025fc:	2029      	movs	r0, #41	@ 0x29
 80025fe:	f000 f813 	bl	8002628 <BC_Write_Reg>
	BC_Write_Reg(REG2A_CHARGER_MASK_2, 0x7F);                   //Interrupt attivati: nessuno
 8002602:	217f      	movs	r1, #127	@ 0x7f
 8002604:	202a      	movs	r0, #42	@ 0x2a
 8002606:	f000 f80f 	bl	8002628 <BC_Write_Reg>
	BC_Write_Reg(REG2B_CHARGER_MASK_3, 0x1F);                   //Interrupt attivati: nessuno
 800260a:	211f      	movs	r1, #31
 800260c:	202b      	movs	r0, #43	@ 0x2b
 800260e:	f000 f80b 	bl	8002628 <BC_Write_Reg>
	BC_Write_Reg(REG2C_FAULT_MASK_0, 0xFC);                     //Interrupt attivati: VAC2 over-voltage, VAC1 over-voltage
 8002612:	21fc      	movs	r1, #252	@ 0xfc
 8002614:	202c      	movs	r0, #44	@ 0x2c
 8002616:	f000 f807 	bl	8002628 <BC_Write_Reg>
	BC_Write_Reg(REG2D_FAULT_MASK_1, 0xF4);                     //Interrupt attivati: nessuno
 800261a:	21f4      	movs	r1, #244	@ 0xf4
 800261c:	202d      	movs	r0, #45	@ 0x2d
 800261e:	f000 f803 	bl	8002628 <BC_Write_Reg>
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <BC_Write_Reg>:

/*------SCRITTURA REGISTRO 8 BIT------*/
int BC_Write_Reg(uint8_t reg, uint8_t wdata)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af02      	add	r7, sp, #8
 800262e:	4603      	mov	r3, r0
 8002630:	460a      	mov	r2, r1
 8002632:	71fb      	strb	r3, [r7, #7]
 8002634:	4613      	mov	r3, r2
 8002636:	71bb      	strb	r3, [r7, #6]
	int result = -1;
 8002638:	f04f 33ff 	mov.w	r3, #4294967295
 800263c:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[2];
	toSend[0] = reg;
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	723b      	strb	r3, [r7, #8]
	toSend[1] = wdata;
 8002642:	79bb      	ldrb	r3, [r7, #6]
 8002644:	727b      	strb	r3, [r7, #9]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 2, 100) == HAL_OK)
 8002646:	f107 0208 	add.w	r2, r7, #8
 800264a:	2364      	movs	r3, #100	@ 0x64
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	2302      	movs	r3, #2
 8002650:	21d6      	movs	r1, #214	@ 0xd6
 8002652:	4806      	ldr	r0, [pc, #24]	@ (800266c <BC_Write_Reg+0x44>)
 8002654:	f00b ff9c 	bl	800e590 <HAL_I2C_Master_Transmit>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <BC_Write_Reg+0x3a>
	{
		result = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8002662:	68fb      	ldr	r3, [r7, #12]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	200003e8 	.word	0x200003e8

08002670 <BC_Read_Reg>:

/*------LETTURA REGISTRO 8 BIT------*/
int BC_Read_Reg(uint8_t reg, uint8_t *rdata)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af02      	add	r7, sp, #8
 8002676:	4603      	mov	r3, r0
 8002678:	6039      	str	r1, [r7, #0]
 800267a:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 800267c:	f04f 33ff 	mov.w	r3, #4294967295
 8002680:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8002682:	1dfa      	adds	r2, r7, #7
 8002684:	2364      	movs	r3, #100	@ 0x64
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	2301      	movs	r3, #1
 800268a:	21d6      	movs	r1, #214	@ 0xd6
 800268c:	480b      	ldr	r0, [pc, #44]	@ (80026bc <BC_Read_Reg+0x4c>)
 800268e:	f00b ff7f 	bl	800e590 <HAL_I2C_Master_Transmit>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10c      	bne.n	80026b2 <BC_Read_Reg+0x42>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, rdata, 1, 100) == HAL_OK)
 8002698:	2364      	movs	r3, #100	@ 0x64
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	2301      	movs	r3, #1
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	21d6      	movs	r1, #214	@ 0xd6
 80026a2:	4806      	ldr	r0, [pc, #24]	@ (80026bc <BC_Read_Reg+0x4c>)
 80026a4:	f00c f88c 	bl	800e7c0 <HAL_I2C_Master_Receive>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <BC_Read_Reg+0x42>
		{
			result = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
		}
	}

	return result;
 80026b2:	68fb      	ldr	r3, [r7, #12]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	200003e8 	.word	0x200003e8

080026c0 <BC_MultiWrite_Reg>:

/*------SCRITTURA REGISTRO 16 BIT------*/
int BC_MultiWrite_Reg(uint8_t reg, uint16_t wdata)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	4603      	mov	r3, r0
 80026c8:	460a      	mov	r2, r1
 80026ca:	71fb      	strb	r3, [r7, #7]
 80026cc:	4613      	mov	r3, r2
 80026ce:	80bb      	strh	r3, [r7, #4]
	int result = -1;
 80026d0:	f04f 33ff 	mov.w	r3, #4294967295
 80026d4:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[3];
	toSend[0] = reg;
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	723b      	strb	r3, [r7, #8]
	toSend[1] = (wdata & 0xFF00) >> 8;
 80026da:	88bb      	ldrh	r3, [r7, #4]
 80026dc:	0a1b      	lsrs	r3, r3, #8
 80026de:	b29b      	uxth	r3, r3
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	727b      	strb	r3, [r7, #9]
	toSend[2] = wdata & 0x00FF;
 80026e4:	88bb      	ldrh	r3, [r7, #4]
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 3, 100) == HAL_OK)
 80026ea:	f107 0208 	add.w	r2, r7, #8
 80026ee:	2364      	movs	r3, #100	@ 0x64
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	2303      	movs	r3, #3
 80026f4:	21d6      	movs	r1, #214	@ 0xd6
 80026f6:	4806      	ldr	r0, [pc, #24]	@ (8002710 <BC_MultiWrite_Reg+0x50>)
 80026f8:	f00b ff4a 	bl	800e590 <HAL_I2C_Master_Transmit>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <BC_MultiWrite_Reg+0x46>
	{
		result = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8002706:	68fb      	ldr	r3, [r7, #12]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	200003e8 	.word	0x200003e8

08002714 <BC_MultiRead_Reg>:

/*------LETTURA REGISTRO 16 BIT------*/
int BC_MultiRead_Reg(uint8_t reg, uint16_t *rdata)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af02      	add	r7, sp, #8
 800271a:	4603      	mov	r3, r0
 800271c:	6039      	str	r1, [r7, #0]
 800271e:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8002720:	f04f 33ff 	mov.w	r3, #4294967295
 8002724:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 8002726:	2300      	movs	r3, #0
 8002728:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 800272a:	1dfa      	adds	r2, r7, #7
 800272c:	2364      	movs	r3, #100	@ 0x64
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	2301      	movs	r3, #1
 8002732:	21d6      	movs	r1, #214	@ 0xd6
 8002734:	4811      	ldr	r0, [pc, #68]	@ (800277c <BC_MultiRead_Reg+0x68>)
 8002736:	f00b ff2b 	bl	800e590 <HAL_I2C_Master_Transmit>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d118      	bne.n	8002772 <BC_MultiRead_Reg+0x5e>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, data, 2, 100) == HAL_OK)
 8002740:	f107 0208 	add.w	r2, r7, #8
 8002744:	2364      	movs	r3, #100	@ 0x64
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	2302      	movs	r3, #2
 800274a:	21d6      	movs	r1, #214	@ 0xd6
 800274c:	480b      	ldr	r0, [pc, #44]	@ (800277c <BC_MultiRead_Reg+0x68>)
 800274e:	f00c f837 	bl	800e7c0 <HAL_I2C_Master_Receive>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10c      	bne.n	8002772 <BC_MultiRead_Reg+0x5e>
		{
			result = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 800275c:	7a3b      	ldrb	r3, [r7, #8]
 800275e:	b21b      	sxth	r3, r3
 8002760:	021b      	lsls	r3, r3, #8
 8002762:	b21a      	sxth	r2, r3
 8002764:	7a7b      	ldrb	r3, [r7, #9]
 8002766:	b21b      	sxth	r3, r3
 8002768:	4313      	orrs	r3, r2
 800276a:	b21b      	sxth	r3, r3
 800276c:	b29a      	uxth	r2, r3
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 8002772:	68fb      	ldr	r3, [r7, #12]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	200003e8 	.word	0x200003e8

08002780 <BC_Read_Flags>:

/*------LETTURA FLAGS DI INTERRUZIONE------*/
int BC_Read_Flags(uint64_t *flags)
{
 8002780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002784:	b09b      	sub	sp, #108	@ 0x6c
 8002786:	af02      	add	r7, sp, #8
 8002788:	64f8      	str	r0, [r7, #76]	@ 0x4c
	int result = -1;
 800278a:	f04f 33ff 	mov.w	r3, #4294967295
 800278e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint8_t data[6] = {0};
 8002790:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002794:	2300      	movs	r3, #0
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	8093      	strh	r3, [r2, #4]
	uint8_t reg = REG22_CHARGER_FLAG_0;
 800279a:	2322      	movs	r3, #34	@ 0x22
 800279c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 80027a0:	f107 0253 	add.w	r2, r7, #83	@ 0x53
 80027a4:	2364      	movs	r3, #100	@ 0x64
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	2301      	movs	r3, #1
 80027aa:	21d6      	movs	r1, #214	@ 0xd6
 80027ac:	484a      	ldr	r0, [pc, #296]	@ (80028d8 <BC_Read_Flags+0x158>)
 80027ae:	f00b feef 	bl	800e590 <HAL_I2C_Master_Transmit>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f040 8089 	bne.w	80028cc <BC_Read_Flags+0x14c>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1 , (uint8_t *)data, 6, 100) == HAL_OK)
 80027ba:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80027be:	2364      	movs	r3, #100	@ 0x64
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	2306      	movs	r3, #6
 80027c4:	21d6      	movs	r1, #214	@ 0xd6
 80027c6:	4844      	ldr	r0, [pc, #272]	@ (80028d8 <BC_Read_Flags+0x158>)
 80027c8:	f00b fffa 	bl	800e7c0 <HAL_I2C_Master_Receive>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d17c      	bne.n	80028cc <BC_Read_Flags+0x14c>
		{
			result = 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
			*flags = ((uint64_t)data[0] << 40) | ((uint64_t)data[1] << 32) | ((uint64_t)data[2] << 24) | ((uint64_t)data[3] << 16) | ((uint64_t)data[4] << 8) | (uint64_t)data[5];
 80027d6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2200      	movs	r2, #0
 80027de:	643b      	str	r3, [r7, #64]	@ 0x40
 80027e0:	647a      	str	r2, [r7, #68]	@ 0x44
 80027e2:	f04f 0000 	mov.w	r0, #0
 80027e6:	f04f 0100 	mov.w	r1, #0
 80027ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027ec:	0219      	lsls	r1, r3, #8
 80027ee:	2000      	movs	r0, #0
 80027f0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2200      	movs	r2, #0
 80027f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8002806:	0033      	movs	r3, r6
 8002808:	2200      	movs	r2, #0
 800280a:	ea40 0802 	orr.w	r8, r0, r2
 800280e:	ea41 0903 	orr.w	r9, r1, r3
 8002812:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2200      	movs	r2, #0
 800281a:	633b      	str	r3, [r7, #48]	@ 0x30
 800281c:	637a      	str	r2, [r7, #52]	@ 0x34
 800281e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8002822:	460b      	mov	r3, r1
 8002824:	0a1d      	lsrs	r5, r3, #8
 8002826:	460b      	mov	r3, r1
 8002828:	061c      	lsls	r4, r3, #24
 800282a:	ea48 0304 	orr.w	r3, r8, r4
 800282e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002830:	ea49 0305 	orr.w	r3, r9, r5
 8002834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002836:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2200      	movs	r2, #0
 800283e:	623b      	str	r3, [r7, #32]
 8002840:	627a      	str	r2, [r7, #36]	@ 0x24
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800284e:	4629      	mov	r1, r5
 8002850:	040b      	lsls	r3, r1, #16
 8002852:	4621      	mov	r1, r4
 8002854:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8002858:	4621      	mov	r1, r4
 800285a:	040a      	lsls	r2, r1, #16
 800285c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002860:	4621      	mov	r1, r4
 8002862:	4311      	orrs	r1, r2
 8002864:	61b9      	str	r1, [r7, #24]
 8002866:	4629      	mov	r1, r5
 8002868:	4319      	orrs	r1, r3
 800286a:	61f9      	str	r1, [r7, #28]
 800286c:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2200      	movs	r2, #0
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	617a      	str	r2, [r7, #20]
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002884:	4629      	mov	r1, r5
 8002886:	020b      	lsls	r3, r1, #8
 8002888:	4621      	mov	r1, r4
 800288a:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800288e:	4621      	mov	r1, r4
 8002890:	020a      	lsls	r2, r1, #8
 8002892:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002896:	4621      	mov	r1, r4
 8002898:	ea41 0a02 	orr.w	sl, r1, r2
 800289c:	4629      	mov	r1, r5
 800289e:	ea41 0b03 	orr.w	fp, r1, r3
 80028a2:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2200      	movs	r2, #0
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	60fa      	str	r2, [r7, #12]
 80028ae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80028b2:	460b      	mov	r3, r1
 80028b4:	ea4a 0303 	orr.w	r3, sl, r3
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	4613      	mov	r3, r2
 80028bc:	ea4b 0303 	orr.w	r3, fp, r3
 80028c0:	607b      	str	r3, [r7, #4]
 80028c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028c4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80028c8:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}

	return result;
 80028cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3764      	adds	r7, #100	@ 0x64
 80028d2:	46bd      	mov	sp, r7
 80028d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028d8:	200003e8 	.word	0x200003e8

080028dc <BC_Manage_Interrupts>:

/*------GESTIONE DELLE INTERRUZIONI------*/
void BC_Manage_Interrupts(uint64_t flags)
{
 80028dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t status = 0;
 80028e8:	2100      	movs	r1, #0
 80028ea:	73f9      	strb	r1, [r7, #15]

	if((flags & POOR_SOURCE_MASK) != 0)   //INGRESSO NON BUONO
 80028ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f401 5380 	and.w	r3, r1, #4096	@ 0x1000
 80028f6:	4313      	orrs	r3, r2
 80028f8:	d00c      	beq.n	8002914 <BC_Manage_Interrupts+0x38>
	{
		// ...gestione evento...
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 80028fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	0a0a      	lsrs	r2, r1, #8
 8002908:	2300      	movs	r3, #0
 800290a:	b2d3      	uxtb	r3, r2
 800290c:	4619      	mov	r1, r3
 800290e:	2022      	movs	r0, #34	@ 0x22
 8002910:	f7ff fe8a 	bl	8002628 <BC_Write_Reg>
	}

	if((flags & VAC2_CHANGE_MASK) != 0)  //PANNELLO INSERITO O RIMOSSO
 8002914:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002918:	f04f 0800 	mov.w	r8, #0
 800291c:	f403 6980 	and.w	r9, r3, #1024	@ 0x400
 8002920:	ea58 0309 	orrs.w	r3, r8, r9
 8002924:	d020      	beq.n	8002968 <BC_Manage_Interrupts+0x8c>
	{
		BC_Read_Reg(REG1B_CHARGER_STATUS_0, &status);
 8002926:	f107 030f 	add.w	r3, r7, #15
 800292a:	4619      	mov	r1, r3
 800292c:	201b      	movs	r0, #27
 800292e:	f7ff fe9f 	bl	8002670 <BC_Read_Reg>
		if((status & VAC2_PRESENT_MASK) != 0)
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d004      	beq.n	8002946 <BC_Manage_Interrupts+0x6a>
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x80);                //Usa Pannello
 800293c:	2180      	movs	r1, #128	@ 0x80
 800293e:	2013      	movs	r0, #19
 8002940:	f7ff fe72 	bl	8002628 <BC_Write_Reg>
 8002944:	e003      	b.n	800294e <BC_Manage_Interrupts+0x72>
		}
		else
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x40);                //Usa Turbina
 8002946:	2140      	movs	r1, #64	@ 0x40
 8002948:	2013      	movs	r0, #19
 800294a:	f7ff fe6d 	bl	8002628 <BC_Write_Reg>
		}
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 800294e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	0a0a      	lsrs	r2, r1, #8
 800295c:	2300      	movs	r3, #0
 800295e:	b2d3      	uxtb	r3, r2
 8002960:	4619      	mov	r1, r3
 8002962:	2022      	movs	r0, #34	@ 0x22
 8002964:	f7ff fe60 	bl	8002628 <BC_Write_Reg>
	}

	if((flags & VAC1_CHANGE_MASK) != 0)  //TURBINA INSERITA O RIMOSSA
 8002968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800296c:	2400      	movs	r4, #0
 800296e:	f403 7500 	and.w	r5, r3, #512	@ 0x200
 8002972:	ea54 0305 	orrs.w	r3, r4, r5
 8002976:	d00c      	beq.n	8002992 <BC_Manage_Interrupts+0xb6>
	{
		// ...gestione evento...
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 8002978:	e9d7 0100 	ldrd	r0, r1, [r7]
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	0a0a      	lsrs	r2, r1, #8
 8002986:	2300      	movs	r3, #0
 8002988:	b2d3      	uxtb	r3, r2
 800298a:	4619      	mov	r1, r3
 800298c:	2022      	movs	r0, #34	@ 0x22
 800298e:	f7ff fe4b 	bl	8002628 <BC_Write_Reg>
	}

	flags = 0;
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	e9c7 2300 	strd	r2, r3, [r7]
}
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080029a8 <HAL_UARTEx_RxEventCallback>:
	}
}

/* ------CALLBACK UART RX IDLE------*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	807b      	strh	r3, [r7, #2]
	if(huart == SIM_UART)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a31      	ldr	r2, [pc, #196]	@ (8002a7c <HAL_UARTEx_RxEventCallback+0xd4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d155      	bne.n	8002a68 <HAL_UARTEx_RxEventCallback+0xc0>
	{
		if(*(uint8_t*)sim_rx_buffer == '>')
 80029bc:	4b30      	ldr	r3, [pc, #192]	@ (8002a80 <HAL_UARTEx_RxEventCallback+0xd8>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80029c2:	d120      	bne.n	8002a06 <HAL_UARTEx_RxEventCallback+0x5e>
		{
			if(flags.CMD.Measure_Request)
 80029c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002a84 <HAL_UARTEx_RxEventCallback+0xdc>)
 80029c6:	789b      	ldrb	r3, [r3, #2]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d005      	beq.n	80029de <HAL_UARTEx_RxEventCallback+0x36>
			{
				flags.TCP_ReadytoSend = 1;
 80029d2:	4a2c      	ldr	r2, [pc, #176]	@ (8002a84 <HAL_UARTEx_RxEventCallback+0xdc>)
 80029d4:	7853      	ldrb	r3, [r2, #1]
 80029d6:	f043 0302 	orr.w	r3, r3, #2
 80029da:	7053      	strb	r3, [r2, #1]
 80029dc:	e044      	b.n	8002a68 <HAL_UARTEx_RxEventCallback+0xc0>
			}
			else if(flags.CMD.Data_Request)
 80029de:	4b29      	ldr	r3, [pc, #164]	@ (8002a84 <HAL_UARTEx_RxEventCallback+0xdc>)
 80029e0:	789b      	ldrb	r3, [r3, #2]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d03d      	beq.n	8002a68 <HAL_UARTEx_RxEventCallback+0xc0>
			{
				flags.MQTT_ReadytoSend = 1;
 80029ec:	4a25      	ldr	r2, [pc, #148]	@ (8002a84 <HAL_UARTEx_RxEventCallback+0xdc>)
 80029ee:	7853      	ldrb	r3, [r2, #1]
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	7053      	strb	r3, [r2, #1]
				sys.SIM_Prompt_Status = 0;
 80029f6:	4b24      	ldr	r3, [pc, #144]	@ (8002a88 <HAL_UARTEx_RxEventCallback+0xe0>)
 80029f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029fc:	461a      	mov	r2, r3
 80029fe:	2300      	movs	r3, #0
 8002a00:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002a04:	e030      	b.n	8002a68 <HAL_UARTEx_RxEventCallback+0xc0>
			}
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 8002a06:	4b1e      	ldr	r3, [pc, #120]	@ (8002a80 <HAL_UARTEx_RxEventCallback+0xd8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a20      	ldr	r2, [pc, #128]	@ (8002a8c <HAL_UARTEx_RxEventCallback+0xe4>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d10a      	bne.n	8002a26 <HAL_UARTEx_RxEventCallback+0x7e>
				*(uint32_t*)(sim_rx_buffer + 4) == 0x203A4255)       // "UB: "
 8002a10:	4b1f      	ldr	r3, [pc, #124]	@ (8002a90 <HAL_UARTEx_RxEventCallback+0xe8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
		else if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 8002a14:	4a1f      	ldr	r2, [pc, #124]	@ (8002a94 <HAL_UARTEx_RxEventCallback+0xec>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d105      	bne.n	8002a26 <HAL_UARTEx_RxEventCallback+0x7e>
		{     
			flags.MQTT_Message_Rx = 1;
 8002a1a:	4a1a      	ldr	r2, [pc, #104]	@ (8002a84 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002a1c:	7813      	ldrb	r3, [r2, #0]
 8002a1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a22:	7013      	strb	r3, [r2, #0]
 8002a24:	e020      	b.n	8002a68 <HAL_UARTEx_RxEventCallback+0xc0>
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x444E4553 &&           // "SEND"
 8002a26:	4b16      	ldr	r3, [pc, #88]	@ (8002a80 <HAL_UARTEx_RxEventCallback+0xd8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8002a98 <HAL_UARTEx_RxEventCallback+0xf0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d10a      	bne.n	8002a46 <HAL_UARTEx_RxEventCallback+0x9e>
       			*(uint32_t*)(sim_rx_buffer + 4) == 0x004B204F)       // " OK\0"
 8002a30:	4b17      	ldr	r3, [pc, #92]	@ (8002a90 <HAL_UARTEx_RxEventCallback+0xe8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
		else if(*(uint32_t*)sim_rx_buffer == 0x444E4553 &&           // "SEND"
 8002a34:	4a19      	ldr	r2, [pc, #100]	@ (8002a9c <HAL_UARTEx_RxEventCallback+0xf4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d105      	bne.n	8002a46 <HAL_UARTEx_RxEventCallback+0x9e>
		{
			flags.TCP_isSending = 0;
 8002a3a:	4a12      	ldr	r2, [pc, #72]	@ (8002a84 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002a3c:	7853      	ldrb	r3, [r2, #1]
 8002a3e:	f023 0304 	bic.w	r3, r3, #4
 8002a42:	7053      	strb	r3, [r2, #1]
 8002a44:	e010      	b.n	8002a68 <HAL_UARTEx_RxEventCallback+0xc0>
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x4552524F)            //"ERRO"
 8002a46:	4b0e      	ldr	r3, [pc, #56]	@ (8002a80 <HAL_UARTEx_RxEventCallback+0xd8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a15      	ldr	r2, [pc, #84]	@ (8002aa0 <HAL_UARTEx_RxEventCallback+0xf8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d10b      	bne.n	8002a68 <HAL_UARTEx_RxEventCallback+0xc0>
		{
			flags.MQTT_ReadytoSend = 0;
 8002a50:	4a0c      	ldr	r2, [pc, #48]	@ (8002a84 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002a52:	7853      	ldrb	r3, [r2, #1]
 8002a54:	f023 0301 	bic.w	r3, r3, #1
 8002a58:	7053      	strb	r3, [r2, #1]
			sys.SIM_Prompt_Status = 0;
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a88 <HAL_UARTEx_RxEventCallback+0xe0>)
 8002a5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a60:	461a      	mov	r2, r3
 8002a62:	2300      	movs	r3, #0
 8002a64:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
		}
	}
	
	HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8002a68:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002a6c:	4904      	ldr	r1, [pc, #16]	@ (8002a80 <HAL_UARTEx_RxEventCallback+0xd8>)
 8002a6e:	4803      	ldr	r0, [pc, #12]	@ (8002a7c <HAL_UARTEx_RxEventCallback+0xd4>)
 8002a70:	f013 fa6e 	bl	8015f50 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20000724 	.word	0x20000724
 8002a80:	200055f8 	.word	0x200055f8
 8002a84:	20001d68 	.word	0x20001d68
 8002a88:	20000840 	.word	0x20000840
 8002a8c:	534d532b 	.word	0x534d532b
 8002a90:	200055fc 	.word	0x200055fc
 8002a94:	203a4255 	.word	0x203a4255
 8002a98:	444e4553 	.word	0x444e4553
 8002a9c:	004b204f 	.word	0x004b204f
 8002aa0:	4552524f 	.word	0x4552524f

08002aa4 <HAL_UART_RxCpltCallback>:

/* ------CALLBACK UART RX COMPLETE------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
	if (huart == SIM_UART)
	{

	}

}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_UART_TxCpltCallback>:

/* ------CALLBACK UART TX COMPLETE------*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
	if (huart == SIM_UART)
	{

	}

}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_ADC_ConvHalfCpltCallback>:

/* ------CALLBACK HALF ADC------*/
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a09      	ldr	r2, [pc, #36]	@ (8002afc <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d109      	bne.n	8002af0 <HAL_ADC_ConvHalfCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8002adc:	4a08      	ldr	r2, [pc, #32]	@ (8002b00 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8002ade:	7813      	ldrb	r3, [r2, #0]
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	7013      	strb	r3, [r2, #0]
		flags.ADC_Half_Buffer = 1;
 8002ae6:	4a06      	ldr	r2, [pc, #24]	@ (8002b00 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8002ae8:	7813      	ldrb	r3, [r2, #0]
 8002aea:	f043 0302 	orr.w	r3, r3, #2
 8002aee:	7013      	strb	r3, [r2, #0]
	}
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	20000318 	.word	0x20000318
 8002b00:	20001d68 	.word	0x20001d68

08002b04 <HAL_ADC_ConvCpltCallback>:

/*------CALLBACK FULL ADC------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a09      	ldr	r2, [pc, #36]	@ (8002b34 <HAL_ADC_ConvCpltCallback+0x30>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d109      	bne.n	8002b28 <HAL_ADC_ConvCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8002b14:	4a08      	ldr	r2, [pc, #32]	@ (8002b38 <HAL_ADC_ConvCpltCallback+0x34>)
 8002b16:	7813      	ldrb	r3, [r2, #0]
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	7013      	strb	r3, [r2, #0]
		flags.ADC_Full_Buffer = 1;
 8002b1e:	4a06      	ldr	r2, [pc, #24]	@ (8002b38 <HAL_ADC_ConvCpltCallback+0x34>)
 8002b20:	7813      	ldrb	r3, [r2, #0]
 8002b22:	f043 0304 	orr.w	r3, r3, #4
 8002b26:	7013      	strb	r3, [r2, #0]
	}
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	20000318 	.word	0x20000318
 8002b38:	20001d68 	.word	0x20001d68

08002b3c <HAL_RTC_AlarmAEventCallback>:

/*------CALLBACK RTC CAMBIO ORA------*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b092      	sub	sp, #72	@ 0x48
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef gTime;
	RTC_AlarmTypeDef sAlarm = {0};
 8002b44:	f107 0308 	add.w	r3, r7, #8
 8002b48:	222c      	movs	r2, #44	@ 0x2c
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f013 fb3d 	bl	80161cc <memset>

	HAL_RTC_GetTime(hrtc, &gTime, RTC_FORMAT_BIN);
 8002b52:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002b56:	2200      	movs	r2, #0
 8002b58:	4619      	mov	r1, r3
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f00e fb0b 	bl	8011176 <HAL_RTC_GetTime>

	sys.Low_th = Low_TH_Array[gTime.Hours];
 8002b60:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002b64:	461a      	mov	r2, r3
 8002b66:	4b17      	ldr	r3, [pc, #92]	@ (8002bc4 <HAL_RTC_AlarmAEventCallback+0x88>)
 8002b68:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002b6c:	4b16      	ldr	r3, [pc, #88]	@ (8002bc8 <HAL_RTC_AlarmAEventCallback+0x8c>)
 8002b6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b72:	85da      	strh	r2, [r3, #46]	@ 0x2e
	sys.High_th = High_TH_Array[gTime.Hours];
 8002b74:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4b14      	ldr	r3, [pc, #80]	@ (8002bcc <HAL_RTC_AlarmAEventCallback+0x90>)
 8002b7c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002b80:	4b11      	ldr	r3, [pc, #68]	@ (8002bc8 <HAL_RTC_AlarmAEventCallback+0x8c>)
 8002b82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b86:	861a      	strh	r2, [r3, #48]	@ 0x30

	sAlarm.AlarmTime.Hours = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	723b      	strb	r3, [r7, #8]
    sAlarm.AlarmTime.Minutes = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	727b      	strb	r3, [r7, #9]
    sAlarm.AlarmTime.Seconds = 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	72bb      	strb	r3, [r7, #10]
    sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS | RTC_ALARMMASK_SECONDS;
 8002b94:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd0 <HAL_RTC_AlarmAEventCallback+0x94>)
 8002b96:	61fb      	str	r3, [r7, #28]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	627b      	str	r3, [r7, #36]	@ 0x24
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    sAlarm.AlarmDateWeekDay = 1;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    sAlarm.Alarm = RTC_ALARM_A;
 8002ba6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002baa:	633b      	str	r3, [r7, #48]	@ 0x30
    
    HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BIN);
 8002bac:	f107 0308 	add.w	r3, r7, #8
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f00e fbc1 	bl	801133c <HAL_RTC_SetAlarm_IT>
}
 8002bba:	bf00      	nop
 8002bbc:	3748      	adds	r7, #72	@ 0x48
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	200055b8 	.word	0x200055b8
 8002bc8:	20000840 	.word	0x20000840
 8002bcc:	20005588 	.word	0x20005588
 8002bd0:	80800080 	.word	0x80800080

08002bd4 <extflash_cs_set>:
uint32_t	exflashNumSectors = 0;
uint8_t		exflashInitDone = 0;


void extflash_cs_set()
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_RESET);
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002bde:	4802      	ldr	r0, [pc, #8]	@ (8002be8 <extflash_cs_set+0x14>)
 8002be0:	f00b fc22 	bl	800e428 <HAL_GPIO_WritePin>
}
 8002be4:	bf00      	nop
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	48000400 	.word	0x48000400

08002bec <extflash_cs_reset>:

void extflash_cs_reset()
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002bf6:	4802      	ldr	r0, [pc, #8]	@ (8002c00 <extflash_cs_reset+0x14>)
 8002bf8:	f00b fc16 	bl	800e428 <HAL_GPIO_WritePin>
}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	48000400 	.word	0x48000400

08002c04 <extflash_wp_reset>:
{
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_RESET);
}

void extflash_wp_reset()
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_SET);
 8002c08:	2201      	movs	r2, #1
 8002c0a:	2140      	movs	r1, #64	@ 0x40
 8002c0c:	4802      	ldr	r0, [pc, #8]	@ (8002c18 <extflash_wp_reset+0x14>)
 8002c0e:	f00b fc0b 	bl	800e428 <HAL_GPIO_WritePin>
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	48000800 	.word	0x48000800

08002c1c <extflash_hard_reset>:


void extflash_hard_reset()
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_RESET);
 8002c20:	2200      	movs	r2, #0
 8002c22:	2180      	movs	r1, #128	@ 0x80
 8002c24:	4806      	ldr	r0, [pc, #24]	@ (8002c40 <extflash_hard_reset+0x24>)
 8002c26:	f00b fbff 	bl	800e428 <HAL_GPIO_WritePin>

	HAL_Delay(50);
 8002c2a:	2032      	movs	r0, #50	@ 0x32
 8002c2c:	f008 fa2a 	bl	800b084 <HAL_Delay>

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_SET);
 8002c30:	2201      	movs	r2, #1
 8002c32:	2180      	movs	r1, #128	@ 0x80
 8002c34:	4802      	ldr	r0, [pc, #8]	@ (8002c40 <extflash_hard_reset+0x24>)
 8002c36:	f00b fbf7 	bl	800e428 <HAL_GPIO_WritePin>

	return;
 8002c3a:	bf00      	nop
}
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	48000800 	.word	0x48000800

08002c44 <extflash_send_cmd>:


int32_t extflash_send_cmd(extflash_cmd_t command)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]

	uint8_t addr_bytes[4] = {0};
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61bb      	str	r3, [r7, #24]
	uint8_t dummy_bytes[8] = {0};
 8002c50:	f107 0310 	add.w	r3, r7, #16
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
	uint8_t dummy = 0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	77fb      	strb	r3, [r7, #31]
	uint8_t cmd_data = command->cmd;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	73fb      	strb	r3, [r7, #15]

	if(command->address_en != 0)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	785b      	ldrb	r3, [r3, #1]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00d      	beq.n	8002c88 <extflash_send_cmd+0x44>
	{
		addr_bytes[0] = (command->address >> 16) & 0xFF;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	0c1b      	lsrs	r3, r3, #16
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	763b      	strb	r3, [r7, #24]
		addr_bytes[1] = (command->address >> 8) & 0xFF;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	0a1b      	lsrs	r3, r3, #8
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	767b      	strb	r3, [r7, #25]
		addr_bytes[2] = (command->address) & 0xFF;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	76bb      	strb	r3, [r7, #26]
	}

	extflash_cs_set();
 8002c88:	f7ff ffa4 	bl	8002bd4 <extflash_cs_set>

	HAL_SPI_Transmit(EXTFLASH_SPI, &cmd_data, 1, FLASH_SPI_DEF_TIMEOUT);
 8002c8c:	f107 010f 	add.w	r1, r7, #15
 8002c90:	2364      	movs	r3, #100	@ 0x64
 8002c92:	2201      	movs	r2, #1
 8002c94:	4823      	ldr	r0, [pc, #140]	@ (8002d24 <extflash_send_cmd+0xe0>)
 8002c96:	f00e fe50 	bl	801193a <HAL_SPI_Transmit>

	if(command->address_en != 0)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	785b      	ldrb	r3, [r3, #1]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d006      	beq.n	8002cb0 <extflash_send_cmd+0x6c>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, addr_bytes, 3, FLASH_SPI_DEF_TIMEOUT);
 8002ca2:	f107 0118 	add.w	r1, r7, #24
 8002ca6:	2364      	movs	r3, #100	@ 0x64
 8002ca8:	2203      	movs	r2, #3
 8002caa:	481e      	ldr	r0, [pc, #120]	@ (8002d24 <extflash_send_cmd+0xe0>)
 8002cac:	f00e fe45 	bl	801193a <HAL_SPI_Transmit>
	}

	if(command->dummy_nb > 0)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	88db      	ldrh	r3, [r3, #6]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00e      	beq.n	8002cd6 <extflash_send_cmd+0x92>
	{
		dummy = command->dummy_nb > sizeof(dummy_bytes) ? sizeof(dummy_bytes) : command->dummy_nb;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	88db      	ldrh	r3, [r3, #6]
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	bf28      	it	cs
 8002cc0:	2308      	movcs	r3, #8
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	77fb      	strb	r3, [r7, #31]
		HAL_SPI_Transmit(EXTFLASH_SPI, dummy_bytes, dummy, FLASH_SPI_DEF_TIMEOUT);
 8002cc6:	7ffb      	ldrb	r3, [r7, #31]
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	f107 0110 	add.w	r1, r7, #16
 8002cce:	2364      	movs	r3, #100	@ 0x64
 8002cd0:	4814      	ldr	r0, [pc, #80]	@ (8002d24 <extflash_send_cmd+0xe0>)
 8002cd2:	f00e fe32 	bl	801193a <HAL_SPI_Transmit>
	}

	if(command->tx_nb > 0 && command->tx_data != NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	885b      	ldrh	r3, [r3, #2]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <extflash_send_cmd+0xb2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d007      	beq.n	8002cf6 <extflash_send_cmd+0xb2>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, command->tx_data, command->tx_nb, FLASH_SPI_DEF_TIMEOUT);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68d9      	ldr	r1, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	885a      	ldrh	r2, [r3, #2]
 8002cee:	2364      	movs	r3, #100	@ 0x64
 8002cf0:	480c      	ldr	r0, [pc, #48]	@ (8002d24 <extflash_send_cmd+0xe0>)
 8002cf2:	f00e fe22 	bl	801193a <HAL_SPI_Transmit>
	}

	if(command->rx_nb > 0 && command->rx_data != NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	889b      	ldrh	r3, [r3, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00b      	beq.n	8002d16 <extflash_send_cmd+0xd2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d007      	beq.n	8002d16 <extflash_send_cmd+0xd2>
	{
		HAL_SPI_Receive(EXTFLASH_SPI, command->rx_data, command->rx_nb, FLASH_SPI_DEF_TIMEOUT);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6919      	ldr	r1, [r3, #16]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	889a      	ldrh	r2, [r3, #4]
 8002d0e:	2364      	movs	r3, #100	@ 0x64
 8002d10:	4804      	ldr	r0, [pc, #16]	@ (8002d24 <extflash_send_cmd+0xe0>)
 8002d12:	f00e ff88 	bl	8011c26 <HAL_SPI_Receive>
	}

	extflash_cs_reset();
 8002d16:	f7ff ff69 	bl	8002bec <extflash_cs_reset>

	return 0;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3720      	adds	r7, #32
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	200004a4 	.word	0x200004a4

08002d28 <extflash_read_extended_read_reg>:

}


int extflash_read_extended_read_reg(uint8_t *ereg)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 8002d30:	f107 030c 	add.w	r3, r7, #12
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDERP;
 8002d40:	2381      	movs	r3, #129	@ 0x81
 8002d42:	733b      	strb	r3, [r7, #12]
	command.address_en = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	737b      	strb	r3, [r7, #13]
	command.address = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
	command.rx_nb = 1;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	823b      	strh	r3, [r7, #16]
	command.rx_data = ereg;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	61fb      	str	r3, [r7, #28]

	return extflash_send_cmd(&command);
 8002d54:	f107 030c 	add.w	r3, r7, #12
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff ff73 	bl	8002c44 <extflash_send_cmd>
 8002d5e:	4603      	mov	r3, r0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3720      	adds	r7, #32
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <extflash_clear_extended_read_reg>:


int extflash_clear_extended_read_reg()
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
	extflash_cmd command = {0};
 8002d6e:	1d3b      	adds	r3, r7, #4
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	60da      	str	r2, [r3, #12]
 8002d7a:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_CLERP;
 8002d7c:	2382      	movs	r3, #130	@ 0x82
 8002d7e:	713b      	strb	r3, [r7, #4]

	return extflash_send_cmd(&command);
 8002d80:	1d3b      	adds	r3, r7, #4
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff ff5e 	bl	8002c44 <extflash_send_cmd>
 8002d88:	4603      	mov	r3, r0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <extflash_set_write_protection>:
	return extflash_send_cmd(&command);

}

int extflash_set_write_protection(uint8_t enable)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b088      	sub	sp, #32
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	4603      	mov	r3, r0
 8002d9a:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 8002d9c:	f107 030c 	add.w	r3, r7, #12
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	611a      	str	r2, [r3, #16]
	command.cmd = enable==0 ? EFLASH_CMD_WREN : EFLASH_CMD_WRDI;
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <extflash_set_write_protection+0x24>
 8002db2:	2306      	movs	r3, #6
 8002db4:	e000      	b.n	8002db8 <extflash_set_write_protection+0x26>
 8002db6:	2304      	movs	r3, #4
 8002db8:	733b      	strb	r3, [r7, #12]

	return extflash_send_cmd(&command);
 8002dba:	f107 030c 	add.w	r3, r7, #12
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff ff40 	bl	8002c44 <extflash_send_cmd>
 8002dc4:	4603      	mov	r3, r0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3720      	adds	r7, #32
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <extflash_read_sfdp>:

int extflash_read_sfdp(uint32_t regaddr, uint8_t *reg, uint8_t nregs)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b08a      	sub	sp, #40	@ 0x28
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDSFDP;
 8002dec:	235a      	movs	r3, #90	@ 0x5a
 8002dee:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 8002df0:	2301      	movs	r3, #1
 8002df2:	757b      	strb	r3, [r7, #21]
	command.address = regaddr;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nregs;
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	833b      	strh	r3, [r7, #24]
	command.rx_data = reg;
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8002e06:	f107 0314 	add.w	r3, r7, #20
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff ff1a 	bl	8002c44 <extflash_send_cmd>
 8002e10:	4603      	mov	r3, r0

}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3728      	adds	r7, #40	@ 0x28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <extflash_raw_read>:

int extflash_raw_read(uint32_t address, uint8_t *pBuffer, uint16_t nbytes)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b08a      	sub	sp, #40	@ 0x28
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	4613      	mov	r3, r2
 8002e26:	80fb      	strh	r3, [r7, #6]

	extflash_cmd command = {0};
 8002e28:	f107 0314 	add.w	r3, r7, #20
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_FRD;
 8002e38:	230b      	movs	r3, #11
 8002e3a:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	757b      	strb	r3, [r7, #21]
	command.address = address;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8002e44:	2301      	movs	r3, #1
 8002e46:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nbytes;
 8002e48:	88fb      	ldrh	r3, [r7, #6]
 8002e4a:	833b      	strh	r3, [r7, #24]
	command.rx_data = pBuffer;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8002e50:	f107 0314 	add.w	r3, r7, #20
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff fef5 	bl	8002c44 <extflash_send_cmd>
 8002e5a:	4603      	mov	r3, r0

}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3728      	adds	r7, #40	@ 0x28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <extflash_raw_erase>:

int extflash_raw_erase(uint32_t address)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 8002e6c:	f107 030c 	add.w	r3, r7, #12
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	609a      	str	r2, [r3, #8]
 8002e78:	60da      	str	r2, [r3, #12]
 8002e7a:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_SER;
 8002e7c:	23d7      	movs	r3, #215	@ 0xd7
 8002e7e:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 8002e80:	2301      	movs	r3, #1
 8002e82:	737b      	strb	r3, [r7, #13]
	command.address = address;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	617b      	str	r3, [r7, #20]

	return extflash_send_cmd(&command);
 8002e88:	f107 030c 	add.w	r3, r7, #12
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fed9 	bl	8002c44 <extflash_send_cmd>
 8002e92:	4603      	mov	r3, r0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3720      	adds	r7, #32
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <extflash_raw_page_write>:

int extflash_raw_page_write(uint32_t address, const uint8_t *pBuffer)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]

	extflash_cmd command = {0};
 8002ea6:	f107 030c 	add.w	r3, r7, #12
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	605a      	str	r2, [r3, #4]
 8002eb0:	609a      	str	r2, [r3, #8]
 8002eb2:	60da      	str	r2, [r3, #12]
 8002eb4:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_PP;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	737b      	strb	r3, [r7, #13]
	command.address = address;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	617b      	str	r3, [r7, #20]
	command.tx_nb = EFLASH_DEF_PAGE_SIZE;
 8002ec2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ec6:	81fb      	strh	r3, [r7, #14]
	command.tx_data = pBuffer;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	61bb      	str	r3, [r7, #24]

	return extflash_send_cmd(&command);
 8002ecc:	f107 030c 	add.w	r3, r7, #12
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff feb7 	bl	8002c44 <extflash_send_cmd>
 8002ed6:	4603      	mov	r3, r0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3720      	adds	r7, #32
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <extflash_sector_read>:


int extflash_sector_read(uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08a      	sub	sp, #40	@ 0x28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
	int result = 0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61fb      	str	r3, [r7, #28]
	uint8_t ereg = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	75fb      	strb	r3, [r7, #23]
	uint32_t tmo = HAL_GetTick();
 8002ef4:	f008 f8ba 	bl	800b06c <HAL_GetTick>
 8002ef8:	61b8      	str	r0, [r7, #24]
	uint8_t *wPtr = pBuffer;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	031b      	lsls	r3, r3, #12
 8002f02:	623b      	str	r3, [r7, #32]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002f04:	f107 0317 	add.w	r3, r7, #23
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff ff0d 	bl	8002d28 <extflash_read_extended_read_reg>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	da10      	bge.n	8002f36 <extflash_sector_read+0x56>
 8002f14:	f04f 33ff 	mov.w	r3, #4294967295
 8002f18:	e037      	b.n	8002f8a <extflash_sector_read+0xaa>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002f1a:	f107 0317 	add.w	r3, r7, #23
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff ff02 	bl	8002d28 <extflash_read_extended_read_reg>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	da02      	bge.n	8002f30 <extflash_sector_read+0x50>
 8002f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2e:	e02c      	b.n	8002f8a <extflash_sector_read+0xaa>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8002f30:	2001      	movs	r0, #1
 8002f32:	f008 f8a7 	bl	800b084 <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
 8002f36:	7dfb      	ldrb	r3, [r7, #23]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d020      	beq.n	8002f82 <extflash_sector_read+0xa2>
 8002f40:	f008 f894 	bl	800b06c <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f4e:	d3e4      	bcc.n	8002f1a <extflash_sector_read+0x3a>
	}

	while(nsectors > 0)
 8002f50:	e017      	b.n	8002f82 <extflash_sector_read+0xa2>
	{
		result = extflash_raw_read(address, wPtr, EFLASH_DEF_SECTOR_SIZE);
 8002f52:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002f56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f58:	6a38      	ldr	r0, [r7, #32]
 8002f5a:	f7ff ff5e 	bl	8002e1a <extflash_raw_read>
 8002f5e:	61f8      	str	r0, [r7, #28]
		if(result < 0)return -1;
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	da02      	bge.n	8002f6c <extflash_sector_read+0x8c>
 8002f66:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6a:	e00e      	b.n	8002f8a <extflash_sector_read+0xaa>

		address += EFLASH_DEF_SECTOR_SIZE;
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f72:	623b      	str	r3, [r7, #32]
		wPtr += EFLASH_DEF_SECTOR_SIZE;
 8002f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f7a:	627b      	str	r3, [r7, #36]	@ 0x24
		nsectors--;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1e4      	bne.n	8002f52 <extflash_sector_read+0x72>
	}

	return 0;
 8002f88:	2300      	movs	r3, #0

}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3728      	adds	r7, #40	@ 0x28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <extflash_wait_for_wop>:

int extflash_wait_for_wop(uint32_t timeout)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
	uint8_t ereg = 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	72fb      	strb	r3, [r7, #11]
	uint32_t tmo = HAL_GetTick();
 8002f9e:	f008 f865 	bl	800b06c <HAL_GetTick>
 8002fa2:	60f8      	str	r0, [r7, #12]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002fa4:	f107 030b 	add.w	r3, r7, #11
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff febd 	bl	8002d28 <extflash_read_extended_read_reg>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	da10      	bge.n	8002fd6 <extflash_wait_for_wop+0x44>
 8002fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb8:	e023      	b.n	8003002 <extflash_wait_for_wop+0x70>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002fba:	f107 030b 	add.w	r3, r7, #11
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff feb2 	bl	8002d28 <extflash_read_extended_read_reg>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	da02      	bge.n	8002fd0 <extflash_wait_for_wop+0x3e>
 8002fca:	f04f 33ff 	mov.w	r3, #4294967295
 8002fce:	e018      	b.n	8003002 <extflash_wait_for_wop+0x70>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	f008 f857 	bl	800b084 <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
 8002fd6:	7afb      	ldrb	r3, [r7, #11]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d007      	beq.n	8002ff0 <extflash_wait_for_wop+0x5e>
 8002fe0:	f008 f844 	bl	800b06c <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d8e4      	bhi.n	8002fba <extflash_wait_for_wop+0x28>
	}

	if(ereg & (ESTATUS_PROT_ERR | ESTATUS_P_ERR | ESTATUS_E_ERR))
 8002ff0:	7afb      	ldrb	r3, [r7, #11]
 8002ff2:	f003 030e 	and.w	r3, r3, #14
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <extflash_wait_for_wop+0x6e>
	{
		return -2; //Erase o write error
 8002ffa:	f06f 0301 	mvn.w	r3, #1
 8002ffe:	e000      	b.n	8003002 <extflash_wait_for_wop+0x70>
	}

	return 0;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <extflash_sector_write>:

int extflash_sector_write(uint32_t sector, uint32_t nsectors, const uint8_t *pBuffer)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b088      	sub	sp, #32
 800300e:	af00      	add	r7, sp, #0
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	607a      	str	r2, [r7, #4]
	int result = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
	const uint8_t *wPtr = pBuffer;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	031b      	lsls	r3, r3, #12
 8003022:	61bb      	str	r3, [r7, #24]

	extflash_clear_extended_read_reg();
 8003024:	f7ff fea0 	bl	8002d68 <extflash_clear_extended_read_reg>

	while(nsectors > 0)
 8003028:	e04e      	b.n	80030c8 <extflash_sector_write+0xbe>
	{
		//Controllo operazioni in corso
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 800302a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800302e:	f7ff ffb0 	bl	8002f92 <extflash_wait_for_wop>
 8003032:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	2b00      	cmp	r3, #0
 8003038:	db4a      	blt.n	80030d0 <extflash_sector_write+0xc6>

		//Erase del settore
		result = extflash_set_write_protection(0);
 800303a:	2000      	movs	r0, #0
 800303c:	f7ff fea9 	bl	8002d92 <extflash_set_write_protection>
 8003040:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	2b00      	cmp	r3, #0
 8003046:	db45      	blt.n	80030d4 <extflash_sector_write+0xca>
		result = extflash_raw_erase(address);
 8003048:	69b8      	ldr	r0, [r7, #24]
 800304a:	f7ff ff0b 	bl	8002e64 <extflash_raw_erase>
 800304e:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	db40      	blt.n	80030d8 <extflash_sector_write+0xce>

		//Attesa ERASE
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8003056:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800305a:	f7ff ff9a 	bl	8002f92 <extflash_wait_for_wop>
 800305e:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	2b00      	cmp	r3, #0
 8003064:	db3a      	blt.n	80030dc <extflash_sector_write+0xd2>

		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	e021      	b.n	80030b0 <extflash_sector_write+0xa6>
		{
			result = extflash_set_write_protection(0);
 800306c:	2000      	movs	r0, #0
 800306e:	f7ff fe90 	bl	8002d92 <extflash_set_write_protection>
 8003072:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	2b00      	cmp	r3, #0
 8003078:	db1e      	blt.n	80030b8 <extflash_sector_write+0xae>
			result = extflash_raw_page_write(address, wPtr);
 800307a:	69f9      	ldr	r1, [r7, #28]
 800307c:	69b8      	ldr	r0, [r7, #24]
 800307e:	f7ff ff0d 	bl	8002e9c <extflash_raw_page_write>
 8003082:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	db18      	blt.n	80030bc <extflash_sector_write+0xb2>

			address += EFLASH_DEF_PAGE_SIZE;
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003090:	61bb      	str	r3, [r7, #24]
			wPtr += EFLASH_DEF_PAGE_SIZE;
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003098:	61fb      	str	r3, [r7, #28]
			//Attesa write
			result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 800309a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800309e:	f7ff ff78 	bl	8002f92 <extflash_wait_for_wop>
 80030a2:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	db0a      	blt.n	80030c0 <extflash_sector_write+0xb6>
		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	3301      	adds	r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2b0f      	cmp	r3, #15
 80030b4:	ddda      	ble.n	800306c <extflash_sector_write+0x62>
 80030b6:	e004      	b.n	80030c2 <extflash_sector_write+0xb8>
			if(result < 0)break;
 80030b8:	bf00      	nop
 80030ba:	e002      	b.n	80030c2 <extflash_sector_write+0xb8>
			if(result < 0)break;
 80030bc:	bf00      	nop
 80030be:	e000      	b.n	80030c2 <extflash_sector_write+0xb8>
			if(result < 0)break;
 80030c0:	bf00      	nop
		}

		nsectors--;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	3b01      	subs	r3, #1
 80030c6:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1ad      	bne.n	800302a <extflash_sector_write+0x20>
 80030ce:	e006      	b.n	80030de <extflash_sector_write+0xd4>
		if(result < 0)break;
 80030d0:	bf00      	nop
 80030d2:	e004      	b.n	80030de <extflash_sector_write+0xd4>
		if(result < 0)break;
 80030d4:	bf00      	nop
 80030d6:	e002      	b.n	80030de <extflash_sector_write+0xd4>
		if(result < 0)break;
 80030d8:	bf00      	nop
 80030da:	e000      	b.n	80030de <extflash_sector_write+0xd4>
		if(result < 0)break;
 80030dc:	bf00      	nop
	}

	extflash_set_write_protection(1);
 80030de:	2001      	movs	r0, #1
 80030e0:	f7ff fe57 	bl	8002d92 <extflash_set_write_protection>

	return 0;
 80030e4:	2300      	movs	r3, #0

}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3720      	adds	r7, #32
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <extflash_get_sector_size>:


unsigned int extflash_get_sector_size()
{
 80030ee:	b480      	push	{r7}
 80030f0:	af00      	add	r7, sp, #0
	return EFLASH_DEF_SECTOR_SIZE;
 80030f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <extflash_get_sector_count>:

unsigned int extflash_get_sector_count()
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
	return exflashNumSectors;
 8003104:	4b03      	ldr	r3, [pc, #12]	@ (8003114 <extflash_get_sector_count+0x14>)
 8003106:	681b      	ldr	r3, [r3, #0]
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	20000310 	.word	0x20000310

08003118 <extflash_is_initialized>:
{
	return exflashSize;
}

int extflash_is_initialized()
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
	return exflashInitDone;
 800311c:	4b03      	ldr	r3, [pc, #12]	@ (800312c <extflash_is_initialized+0x14>)
 800311e:	781b      	ldrb	r3, [r3, #0]
}
 8003120:	4618      	mov	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	20000314 	.word	0x20000314

08003130 <extflash_init>:

int extflash_init()
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af00      	add	r7, sp, #0
	uint8_t manufacturer_id[2] = {0};
 8003136:	2300      	movs	r3, #0
 8003138:	83bb      	strh	r3, [r7, #28]
	extflash_cmd command = {0};
 800313a:	f107 0308 	add.w	r3, r7, #8
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	605a      	str	r2, [r3, #4]
 8003144:	609a      	str	r2, [r3, #8]
 8003146:	60da      	str	r2, [r3, #12]
 8003148:	611a      	str	r2, [r3, #16]
	uint8_t density[4] = {0};
 800314a:	2300      	movs	r3, #0
 800314c:	607b      	str	r3, [r7, #4]

	exflashInitDone = 0;
 800314e:	4b26      	ldr	r3, [pc, #152]	@ (80031e8 <extflash_init+0xb8>)
 8003150:	2200      	movs	r2, #0
 8003152:	701a      	strb	r2, [r3, #0]
	exflashNumSectors = 0;
 8003154:	4b25      	ldr	r3, [pc, #148]	@ (80031ec <extflash_init+0xbc>)
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]

	extflash_hard_reset();
 800315a:	f7ff fd5f 	bl	8002c1c <extflash_hard_reset>
	extflash_cs_reset();
 800315e:	f7ff fd45 	bl	8002bec <extflash_cs_reset>
	extflash_wp_reset();
 8003162:	f7ff fd4f 	bl	8002c04 <extflash_wp_reset>

	command.cmd = EFLASH_CMD_RDMDID;
 8003166:	2390      	movs	r3, #144	@ 0x90
 8003168:	723b      	strb	r3, [r7, #8]
	command.address_en = 1;
 800316a:	2301      	movs	r3, #1
 800316c:	727b      	strb	r3, [r7, #9]
	command.address = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
	command.rx_nb = 2;
 8003172:	2302      	movs	r3, #2
 8003174:	81bb      	strh	r3, [r7, #12]
	command.rx_data = manufacturer_id;
 8003176:	f107 031c 	add.w	r3, r7, #28
 800317a:	61bb      	str	r3, [r7, #24]

	extflash_send_cmd(&command);
 800317c:	f107 0308 	add.w	r3, r7, #8
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fd5f 	bl	8002c44 <extflash_send_cmd>

	if(manufacturer_id[0] != EFLASH_DEF_MANIFACTURER || manufacturer_id[1] != EFLASH_DEF_DEVID)
 8003186:	7f3b      	ldrb	r3, [r7, #28]
 8003188:	2b9d      	cmp	r3, #157	@ 0x9d
 800318a:	d102      	bne.n	8003192 <extflash_init+0x62>
 800318c:	7f7b      	ldrb	r3, [r7, #29]
 800318e:	2b17      	cmp	r3, #23
 8003190:	d002      	beq.n	8003198 <extflash_init+0x68>
	{
		return -1;
 8003192:	f04f 33ff 	mov.w	r3, #4294967295
 8003196:	e022      	b.n	80031de <extflash_init+0xae>
	}

	memset((void *)&command, 0, sizeof(command));
 8003198:	f107 0308 	add.w	r3, r7, #8
 800319c:	2214      	movs	r2, #20
 800319e:	2100      	movs	r1, #0
 80031a0:	4618      	mov	r0, r3
 80031a2:	f013 f813 	bl	80161cc <memset>

	extflash_read_sfdp(SFDP_FLASH_DENSITY, density, sizeof(density));
 80031a6:	1d3b      	adds	r3, r7, #4
 80031a8:	2204      	movs	r2, #4
 80031aa:	4619      	mov	r1, r3
 80031ac:	2034      	movs	r0, #52	@ 0x34
 80031ae:	f7ff fe0e 	bl	8002dce <extflash_read_sfdp>

	memcpy(&exflashSize, density, sizeof(uint32_t));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a0e      	ldr	r2, [pc, #56]	@ (80031f0 <extflash_init+0xc0>)
 80031b6:	6013      	str	r3, [r2, #0]

	exflashSize += 1;
 80031b8:	4b0d      	ldr	r3, [pc, #52]	@ (80031f0 <extflash_init+0xc0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3301      	adds	r3, #1
 80031be:	4a0c      	ldr	r2, [pc, #48]	@ (80031f0 <extflash_init+0xc0>)
 80031c0:	6013      	str	r3, [r2, #0]
	exflashSize >>= 3;
 80031c2:	4b0b      	ldr	r3, [pc, #44]	@ (80031f0 <extflash_init+0xc0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	08db      	lsrs	r3, r3, #3
 80031c8:	4a09      	ldr	r2, [pc, #36]	@ (80031f0 <extflash_init+0xc0>)
 80031ca:	6013      	str	r3, [r2, #0]

	exflashNumSectors = exflashSize / EFLASH_DEF_SECTOR_SIZE;
 80031cc:	4b08      	ldr	r3, [pc, #32]	@ (80031f0 <extflash_init+0xc0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	0b1b      	lsrs	r3, r3, #12
 80031d2:	4a06      	ldr	r2, [pc, #24]	@ (80031ec <extflash_init+0xbc>)
 80031d4:	6013      	str	r3, [r2, #0]

	exflashInitDone = 1;
 80031d6:	4b04      	ldr	r3, [pc, #16]	@ (80031e8 <extflash_init+0xb8>)
 80031d8:	2201      	movs	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]

	return 0;
 80031dc:	2300      	movs	r3, #0

}
 80031de:	4618      	mov	r0, r3
 80031e0:	3720      	adds	r7, #32
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000314 	.word	0x20000314
 80031ec:	20000310 	.word	0x20000310
 80031f0:	2000030c 	.word	0x2000030c

080031f4 <System_Init>:
#include "lsm6dsv16x_rw.h"
#include "DS18B20.h"

/*-----INIZiALIZZAZIONE SISTEMA-----*/
void System_Init(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
	acc.write_reg = acc_write;
 80031f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003278 <System_Init+0x84>)
 80031fa:	4a20      	ldr	r2, [pc, #128]	@ (800327c <System_Init+0x88>)
 80031fc:	601a      	str	r2, [r3, #0]
	acc.read_reg = acc_read;
 80031fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003278 <System_Init+0x84>)
 8003200:	4a1f      	ldr	r2, [pc, #124]	@ (8003280 <System_Init+0x8c>)
 8003202:	605a      	str	r2, [r3, #4]
	acc.handle = &hspi3;
 8003204:	4b1c      	ldr	r3, [pc, #112]	@ (8003278 <System_Init+0x84>)
 8003206:	4a1f      	ldr	r2, [pc, #124]	@ (8003284 <System_Init+0x90>)
 8003208:	60da      	str	r2, [r3, #12]

	LED_Start(GRN_LED, FAST, HIGH);
 800320a:	2205      	movs	r2, #5
 800320c:	2100      	movs	r1, #0
 800320e:	2008      	movs	r0, #8
 8003210:	f000 fa6e 	bl	80036f0 <LED_Start>

	BC_Init();
 8003214:	f7ff f9d2 	bl	80025bc <BC_Init>
	INA3221_Init();
 8003218:	f7fd fede 	bl	8000fd8 <INA3221_Init>
	FatFS_Init();
 800321c:	f000 f83a 	bl	8003294 <FatFS_Init>
	Config_Init();
 8003220:	f000 f980 	bl	8003524 <Config_Init>
	Acc_Init(&acc);
 8003224:	4814      	ldr	r0, [pc, #80]	@ (8003278 <System_Init+0x84>)
 8003226:	f000 f8d1 	bl	80033cc <Acc_Init>
	LED_Start(ORG_LED, FAST, HALF);
 800322a:	2206      	movs	r2, #6
 800322c:	2100      	movs	r1, #0
 800322e:	2000      	movs	r0, #0
 8003230:	f000 fa5e 	bl	80036f0 <LED_Start>
	while(SIM_Init() != HAL_OK);
 8003234:	bf00      	nop
 8003236:	f7fe f93b 	bl	80014b0 <SIM_Init>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1fa      	bne.n	8003236 <System_Init+0x42>
	LED_Stop(ORG_LED);
 8003240:	2000      	movs	r0, #0
 8003242:	f000 fb47 	bl	80038d4 <LED_Stop>
	RTC_Init();
 8003246:	f7fd ff75 	bl	8001134 <RTC_Init>
	Temperature = Read_Temperature();
 800324a:	f7fd fe8d 	bl	8000f68 <Read_Temperature>
 800324e:	4603      	mov	r3, r0
 8003250:	461a      	mov	r2, r3
 8003252:	4b0d      	ldr	r3, [pc, #52]	@ (8003288 <System_Init+0x94>)
 8003254:	801a      	strh	r2, [r3, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8003256:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800325a:	490c      	ldr	r1, [pc, #48]	@ (800328c <System_Init+0x98>)
 800325c:	480c      	ldr	r0, [pc, #48]	@ (8003290 <System_Init+0x9c>)
 800325e:	f012 fe77 	bl	8015f50 <HAL_UARTEx_ReceiveToIdle_DMA>

	HAL_Delay(9000);
 8003262:	f242 3028 	movw	r0, #9000	@ 0x2328
 8003266:	f007 ff0d 	bl	800b084 <HAL_Delay>
	LED_Start(GRN_LED, MEDIUM, HALF);
 800326a:	2206      	movs	r2, #6
 800326c:	2101      	movs	r1, #1
 800326e:	2008      	movs	r0, #8
 8003270:	f000 fa3e 	bl	80036f0 <LED_Start>
}
 8003274:	bf00      	nop
 8003276:	bd80      	pop	{r7, pc}
 8003278:	200055e8 	.word	0x200055e8
 800327c:	080040f7 	.word	0x080040f7
 8003280:	0800414f 	.word	0x0800414f
 8003284:	20000508 	.word	0x20000508
 8003288:	20004824 	.word	0x20004824
 800328c:	200055f8 	.word	0x200055f8
 8003290:	20000724 	.word	0x20000724

08003294 <FatFS_Init>:

/*-----INIZiALIZZAZIONE MEMORIE-----*/
void FatFS_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	75fb      	strb	r3, [r7, #23]
	MKFS_PARM mkfs_opt = {0};
 800329e:	1d3b      	adds	r3, r7, #4
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	60da      	str	r2, [r3, #12]

	do
	{
		sys.RAM_Mounted = 0;
 80032aa:	4b41      	ldr	r3, [pc, #260]	@ (80033b0 <FatFS_Init+0x11c>)
 80032ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032b0:	461a      	mov	r2, r3
 80032b2:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80032b6:	f023 0302 	bic.w	r3, r3, #2
 80032ba:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		
		mkfs_opt.fmt = FM_FAT32;
 80032be:	2302      	movs	r3, #2
 80032c0:	713b      	strb	r3, [r7, #4]
		mkfs_opt.au_size = 1024; 
 80032c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032c6:	613b      	str	r3, [r7, #16]
		mkfs_opt.n_fat = 1;
 80032c8:	2301      	movs	r3, #1
 80032ca:	717b      	strb	r3, [r7, #5]
		mkfs_opt.align = 1;
 80032cc:	2301      	movs	r3, #1
 80032ce:	60bb      	str	r3, [r7, #8]

		fRes = f_mkfs("/ram", &mkfs_opt, psram_fs.win, sizeof(psram_fs.win));
 80032d0:	1d39      	adds	r1, r7, #4
 80032d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032d6:	4a37      	ldr	r2, [pc, #220]	@ (80033b4 <FatFS_Init+0x120>)
 80032d8:	4837      	ldr	r0, [pc, #220]	@ (80033b8 <FatFS_Init+0x124>)
 80032da:	f007 f9e5 	bl	800a6a8 <f_mkfs>
 80032de:	4603      	mov	r3, r0
 80032e0:	75fb      	strb	r3, [r7, #23]
		if (fRes != FR_OK)
 80032e2:	7dfb      	ldrb	r3, [r7, #23]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d114      	bne.n	8003312 <FatFS_Init+0x7e>
		{
			break;
		}

		fRes = f_mount(&psram_fs, "/ram", 1);
 80032e8:	2201      	movs	r2, #1
 80032ea:	4933      	ldr	r1, [pc, #204]	@ (80033b8 <FatFS_Init+0x124>)
 80032ec:	4833      	ldr	r0, [pc, #204]	@ (80033bc <FatFS_Init+0x128>)
 80032ee:	f006 fb59 	bl	80099a4 <f_mount>
 80032f2:	4603      	mov	r3, r0
 80032f4:	75fb      	strb	r3, [r7, #23]

		if (fRes != FR_OK)
 80032f6:	7dfb      	ldrb	r3, [r7, #23]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10c      	bne.n	8003316 <FatFS_Init+0x82>
		{
			break;
		}

		sys.RAM_Mounted = 1;
 80032fc:	4b2c      	ldr	r3, [pc, #176]	@ (80033b0 <FatFS_Init+0x11c>)
 80032fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003302:	461a      	mov	r2, r3
 8003304:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003308:	f043 0302 	orr.w	r3, r3, #2
 800330c:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 8003310:	e002      	b.n	8003318 <FatFS_Init+0x84>
			break;
 8003312:	bf00      	nop
 8003314:	e000      	b.n	8003318 <FatFS_Init+0x84>
			break;
 8003316:	bf00      	nop
	} while (1);

	do
	{
		sys.FLASH_Mounted = 0;
 8003318:	4b25      	ldr	r3, [pc, #148]	@ (80033b0 <FatFS_Init+0x11c>)
 800331a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800331e:	461a      	mov	r2, r3
 8003320:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003324:	f023 0304 	bic.w	r3, r3, #4
 8003328:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		fRes = f_mount(&flash_fs, "/flash", 1);
 800332c:	2201      	movs	r2, #1
 800332e:	4924      	ldr	r1, [pc, #144]	@ (80033c0 <FatFS_Init+0x12c>)
 8003330:	4824      	ldr	r0, [pc, #144]	@ (80033c4 <FatFS_Init+0x130>)
 8003332:	f006 fb37 	bl	80099a4 <f_mount>
 8003336:	4603      	mov	r3, r0
 8003338:	75fb      	strb	r3, [r7, #23]

		if (fRes == FR_NO_FILESYSTEM)
 800333a:	7dfb      	ldrb	r3, [r7, #23]
 800333c:	2b0d      	cmp	r3, #13
 800333e:	d124      	bne.n	800338a <FatFS_Init+0xf6>
		{
			memset((void *)&mkfs_opt, 0, sizeof(mkfs_opt));
 8003340:	1d3b      	adds	r3, r7, #4
 8003342:	2210      	movs	r2, #16
 8003344:	2100      	movs	r1, #0
 8003346:	4618      	mov	r0, r3
 8003348:	f012 ff40 	bl	80161cc <memset>
			mkfs_opt.fmt = FM_FAT32;
 800334c:	2302      	movs	r3, #2
 800334e:	713b      	strb	r3, [r7, #4]
			mkfs_opt.au_size = 4096;    
 8003350:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003354:	613b      	str	r3, [r7, #16]
			mkfs_opt.n_fat = 1;
 8003356:	2301      	movs	r3, #1
 8003358:	717b      	strb	r3, [r7, #5]
			mkfs_opt.align = 1;
 800335a:	2301      	movs	r3, #1
 800335c:	60bb      	str	r3, [r7, #8]

			fRes = f_mkfs("/flash", &mkfs_opt, flash_fs.win, sizeof(flash_fs.win));
 800335e:	1d39      	adds	r1, r7, #4
 8003360:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003364:	4a18      	ldr	r2, [pc, #96]	@ (80033c8 <FatFS_Init+0x134>)
 8003366:	4816      	ldr	r0, [pc, #88]	@ (80033c0 <FatFS_Init+0x12c>)
 8003368:	f007 f99e 	bl	800a6a8 <f_mkfs>
 800336c:	4603      	mov	r3, r0
 800336e:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 8003370:	7dfb      	ldrb	r3, [r7, #23]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d114      	bne.n	80033a0 <FatFS_Init+0x10c>
			{
				break;
			}

			fRes = f_mount(&flash_fs, "/flash", 1);
 8003376:	2201      	movs	r2, #1
 8003378:	4911      	ldr	r1, [pc, #68]	@ (80033c0 <FatFS_Init+0x12c>)
 800337a:	4812      	ldr	r0, [pc, #72]	@ (80033c4 <FatFS_Init+0x130>)
 800337c:	f006 fb12 	bl	80099a4 <f_mount>
 8003380:	4603      	mov	r3, r0
 8003382:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 8003384:	7dfb      	ldrb	r3, [r7, #23]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10c      	bne.n	80033a4 <FatFS_Init+0x110>
			{
				break;
			}
		}

		sys.FLASH_Mounted = 1;
 800338a:	4b09      	ldr	r3, [pc, #36]	@ (80033b0 <FatFS_Init+0x11c>)
 800338c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003390:	461a      	mov	r2, r3
 8003392:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003396:	f043 0304 	orr.w	r3, r3, #4
 800339a:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 800339e:	e002      	b.n	80033a6 <FatFS_Init+0x112>
				break;
 80033a0:	bf00      	nop
 80033a2:	e000      	b.n	80033a6 <FatFS_Init+0x112>
				break;
 80033a4:	bf00      	nop
	} while (1);


}
 80033a6:	bf00      	nop
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20000840 	.word	0x20000840
 80033b4:	20001f10 	.word	0x20001f10
 80033b8:	0801767c 	.word	0x0801767c
 80033bc:	20001edc 	.word	0x20001edc
 80033c0:	08017684 	.word	0x08017684
 80033c4:	20002f10 	.word	0x20002f10
 80033c8:	20002f44 	.word	0x20002f44

080033cc <Acc_Init>:

/*-----INIZiALIZZAZIONE ACCELEROMETRO-----*/
void Acc_Init(stmdev_ctx_t* acc)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
	lsm6dsv16x_reset_t rst;
	lsm6dsv16x_pin_int_route_t pin_int = {0};
 80033d4:	f107 0310 	add.w	r3, r7, #16
 80033d8:	2100      	movs	r1, #0
 80033da:	460a      	mov	r2, r1
 80033dc:	801a      	strh	r2, [r3, #0]
 80033de:	460a      	mov	r2, r1
 80033e0:	709a      	strb	r2, [r3, #2]
	uint8_t acc_whoamI = 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]
	uint8_t wmi_cnt = 0;
 80033e6:	2300      	movs	r3, #0
 80033e8:	75fb      	strb	r3, [r7, #23]

	pin_int.fifo_th = PROPERTY_ENABLE;
 80033ea:	7c3b      	ldrb	r3, [r7, #16]
 80033ec:	f043 0308 	orr.w	r3, r3, #8
 80033f0:	743b      	strb	r3, [r7, #16]


	lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 80033f2:	f107 030f 	add.w	r3, r7, #15
 80033f6:	4619      	mov	r1, r3
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 fb4f 	bl	8003a9c <lsm6dsv16x_device_id_get>
	if (acc_whoamI != LSM6DSV16X_ID)
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	2b70      	cmp	r3, #112	@ 0x70
 8003402:	d01f      	beq.n	8003444 <Acc_Init+0x78>
		while (acc_whoamI != LSM6DSV16X_ID)
 8003404:	e01b      	b.n	800343e <Acc_Init+0x72>
		{
			lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 8003406:	f107 030f 	add.w	r3, r7, #15
 800340a:	4619      	mov	r1, r3
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 fb45 	bl	8003a9c <lsm6dsv16x_device_id_get>
			wmi_cnt++;
 8003412:	7dfb      	ldrb	r3, [r7, #23]
 8003414:	3301      	adds	r3, #1
 8003416:	75fb      	strb	r3, [r7, #23]
			if (wmi_cnt == 3)
 8003418:	7dfb      	ldrb	r3, [r7, #23]
 800341a:	2b03      	cmp	r3, #3
 800341c:	d10f      	bne.n	800343e <Acc_Init+0x72>
			{
				sys.ACC_Present = 0;
 800341e:	4b3e      	ldr	r3, [pc, #248]	@ (8003518 <Acc_Init+0x14c>)
 8003420:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003424:	461a      	mov	r2, r3
 8003426:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800342a:	f023 0301 	bic.w	r3, r3, #1
 800342e:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
				flags.ACC_Complete = 1;
 8003432:	4a3a      	ldr	r2, [pc, #232]	@ (800351c <Acc_Init+0x150>)
 8003434:	7813      	ldrb	r3, [r2, #0]
 8003436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800343a:	7013      	strb	r3, [r2, #0]
 800343c:	e069      	b.n	8003512 <Acc_Init+0x146>
		while (acc_whoamI != LSM6DSV16X_ID)
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	2b70      	cmp	r3, #112	@ 0x70
 8003442:	d1e0      	bne.n	8003406 <Acc_Init+0x3a>
				return;
			}
		}
	sys.ACC_Present = 1;
 8003444:	4b34      	ldr	r3, [pc, #208]	@ (8003518 <Acc_Init+0x14c>)
 8003446:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800344a:	461a      	mov	r2, r3
 800344c:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
	lsm6dsv16x_reset_set(acc, LSM6DSV16X_GLOBAL_RST);
 8003458:	2101      	movs	r1, #1
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 fa78 	bl	8003950 <lsm6dsv16x_reset_set>
	do {
		lsm6dsv16x_reset_get(acc, &rst);
 8003460:	f107 0316 	add.w	r3, r7, #22
 8003464:	4619      	mov	r1, r3
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fac2 	bl	80039f0 <lsm6dsv16x_reset_get>
		HAL_Delay(10);
 800346c:	200a      	movs	r0, #10
 800346e:	f007 fe09 	bl	800b084 <HAL_Delay>
	} while (rst != LSM6DSV16X_READY);
 8003472:	7dbb      	ldrb	r3, [r7, #22]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1f3      	bne.n	8003460 <Acc_Init+0x94>

	lsm6dsv16x_block_data_update_set(acc, PROPERTY_ENABLE);
 8003478:	2101      	movs	r1, #1
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 fc0b 	bl	8003c96 <lsm6dsv16x_block_data_update_set>
	lsm6dsv16x_ui_i2c_i3c_mode_set(acc, LSM6DSV16X_I2C_I3C_DISABLE);
 8003480:	2101      	movs	r1, #1
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fe11 	bl	80040aa <lsm6dsv16x_ui_i2c_i3c_mode_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_HIGH_PERFORMANCE_MD);
 8003488:	2100      	movs	r1, #0
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fb68 	bl	8003b60 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_HIGH_PERFORMANCE_MD);
 8003490:	2100      	movs	r1, #0
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fbd9 	bl	8003c4a <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_fifo_xl_batch_set(acc, LSM6DSV16X_XL_BATCHED_AT_960Hz);
 8003498:	2109      	movs	r1, #9
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fd93 	bl	8003fc6 <lsm6dsv16x_fifo_xl_batch_set>
	lsm6dsv16x_fifo_gy_batch_set(acc, LSM6DSV16X_GY_NOT_BATCHED);
 80034a0:	2100      	movs	r1, #0
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fdb5 	bl	8004012 <lsm6dsv16x_fifo_gy_batch_set>
	lsm6dsv16x_fifo_mode_set(acc, LSM6DSV16X_BYPASS_MODE);
 80034a8:	2100      	movs	r1, #0
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fdd7 	bl	800405e <lsm6dsv16x_fifo_mode_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 80034b0:	2100      	movs	r1, #0
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fb03 	bl	8003abe <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_gy_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 80034b8:	2100      	movs	r1, #0
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fb76 	bl	8003bac <lsm6dsv16x_gy_data_rate_set>
	lsm6dsv16x_odr_trig_cfg_set(acc, 16);  //800SPS
 80034c0:	2110      	movs	r1, #16
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fc0d 	bl	8003ce2 <lsm6dsv16x_odr_trig_cfg_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_ODR_TRIGGERED_MD);
 80034c8:	2103      	movs	r1, #3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fb48 	bl	8003b60 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_ODR_TRIGGERED_MD);
 80034d0:	2103      	movs	r1, #3
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fbb9 	bl	8003c4a <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_den_polarity_set(acc, LSM6DSV16X_DEN_ACT_HIGH);
 80034d8:	2101      	movs	r1, #1
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fd2d 	bl	8003f3a <lsm6dsv16x_den_polarity_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_AT_960Hz);
 80034e0:	2109      	movs	r1, #9
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 faeb 	bl	8003abe <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_xl_full_scale_set(acc, LSM6DSV16X_2g);
 80034e8:	2100      	movs	r1, #0
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fc48 	bl	8003d80 <lsm6dsv16x_xl_full_scale_set>
	lsm6dsv16x_gy_full_scale_set(acc, LSM6DSV16X_2000dps);
 80034f0:	2104      	movs	r1, #4
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fc1e 	bl	8003d34 <lsm6dsv16x_gy_full_scale_set>
	lsm6dsv16x_fifo_watermark_set(acc, ACC_FIFO_WATERMARK);
 80034f8:	21c8      	movs	r1, #200	@ 0xc8
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fd43 	bl	8003f86 <lsm6dsv16x_fifo_watermark_set>
	lsm6dsv16x_pin_int1_route_set(acc, &pin_int);
 8003500:	f107 0310 	add.w	r3, r7, #16
 8003504:	4619      	mov	r1, r3
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fc60 	bl	8003dcc <lsm6dsv16x_pin_int1_route_set>

	__HAL_GPIO_EXTI_CLEAR_IT(ACC_INTERRUPT);
 800350c:	4b04      	ldr	r3, [pc, #16]	@ (8003520 <Acc_Init+0x154>)
 800350e:	2204      	movs	r2, #4
 8003510:	615a      	str	r2, [r3, #20]
}
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000840 	.word	0x20000840
 800351c:	20001d68 	.word	0x20001d68
 8003520:	40010400 	.word	0x40010400

08003524 <Config_Init>:

/*-----INIZiALIZZAZIONE CONFIGURAZIONE-----*/
void Config_Init(void)
{
 8003524:	b590      	push	{r4, r7, lr}
 8003526:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
    FIL config_file;
    UINT bytes_read;
    UINT bytes_written;

    if (f_open(&config_file, CONFIG_FILE, FA_READ) == FR_OK) 
 800352e:	f107 0318 	add.w	r3, r7, #24
 8003532:	3b0c      	subs	r3, #12
 8003534:	2201      	movs	r2, #1
 8003536:	4963      	ldr	r1, [pc, #396]	@ (80036c4 <Config_Init+0x1a0>)
 8003538:	4618      	mov	r0, r3
 800353a:	f006 fa7d 	bl	8009a38 <f_open>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d121      	bne.n	8003588 <Config_Init+0x64>
	{
        if (f_read(&config_file, &config, sizeof(config), &bytes_read) == FR_OK && bytes_read == sizeof(config))
 8003544:	f107 0318 	add.w	r3, r7, #24
 8003548:	3b10      	subs	r3, #16
 800354a:	f107 0018 	add.w	r0, r7, #24
 800354e:	380c      	subs	r0, #12
 8003550:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8003554:	495c      	ldr	r1, [pc, #368]	@ (80036c8 <Config_Init+0x1a4>)
 8003556:	f006 fc07 	bl	8009d68 <f_read>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10d      	bne.n	800357c <Config_Init+0x58>
 8003560:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003564:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8003568:	f5b3 7fb8 	cmp.w	r3, #368	@ 0x170
 800356c:	d106      	bne.n	800357c <Config_Init+0x58>
		{
			f_close(&config_file);
 800356e:	f107 0318 	add.w	r3, r7, #24
 8003572:	3b0c      	subs	r3, #12
 8003574:	4618      	mov	r0, r3
 8003576:	f006 ff53 	bl	800a420 <f_close>
			return;
 800357a:	e09e      	b.n	80036ba <Config_Init+0x196>
        }
        f_close(&config_file);
 800357c:	f107 0318 	add.w	r3, r7, #24
 8003580:	3b0c      	subs	r3, #12
 8003582:	4618      	mov	r0, r3
 8003584:	f006 ff4c 	bl	800a420 <f_close>
    }

    config.device_id = 0;
 8003588:	4b4f      	ldr	r3, [pc, #316]	@ (80036c8 <Config_Init+0x1a4>)
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]
	config.samp_freq = 800;
 800358e:	4b4e      	ldr	r3, [pc, #312]	@ (80036c8 <Config_Init+0x1a4>)
 8003590:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003594:	805a      	strh	r2, [r3, #2]
	config.buffering_secs = 30;
 8003596:	4b4c      	ldr	r3, [pc, #304]	@ (80036c8 <Config_Init+0x1a4>)
 8003598:	221e      	movs	r2, #30
 800359a:	711a      	strb	r2, [r3, #4]
	config.connection_timeout = 60000;
 800359c:	4b4a      	ldr	r3, [pc, #296]	@ (80036c8 <Config_Init+0x1a4>)
 800359e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80035a2:	609a      	str	r2, [r3, #8]
	config.hammer_th = 2048;
 80035a4:	4b48      	ldr	r3, [pc, #288]	@ (80036c8 <Config_Init+0x1a4>)
 80035a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035aa:	819a      	strh	r2, [r3, #12]
    for(int i = 0; i < 24; i++) 
 80035ac:	2300      	movs	r3, #0
 80035ae:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80035b2:	f102 0214 	add.w	r2, r2, #20
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	e021      	b.n	80035fe <Config_Init+0xda>
	{
        config.low_th[i] = 0;
 80035ba:	4a43      	ldr	r2, [pc, #268]	@ (80036c8 <Config_Init+0x1a4>)
 80035bc:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80035c0:	f103 0314 	add.w	r3, r3, #20
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	3304      	adds	r3, #4
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	4413      	add	r3, r2
 80035cc:	2200      	movs	r2, #0
 80035ce:	80da      	strh	r2, [r3, #6]
        config.high_th[i] = 4096;
 80035d0:	4a3d      	ldr	r2, [pc, #244]	@ (80036c8 <Config_Init+0x1a4>)
 80035d2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80035d6:	f103 0314 	add.w	r3, r3, #20
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	331c      	adds	r3, #28
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	4413      	add	r3, r2
 80035e2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80035e6:	80da      	strh	r2, [r3, #6]
    for(int i = 0; i < 24; i++) 
 80035e8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80035ec:	f103 0314 	add.w	r3, r3, #20
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	3301      	adds	r3, #1
 80035f4:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80035f8:	f102 0214 	add.w	r2, r2, #20
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8003602:	f103 0314 	add.w	r3, r3, #20
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b17      	cmp	r3, #23
 800360a:	ddd6      	ble.n	80035ba <Config_Init+0x96>
    }
    strcpy(config.data_topic, "Data_Topic");
 800360c:	4a2f      	ldr	r2, [pc, #188]	@ (80036cc <Config_Init+0x1a8>)
 800360e:	4b30      	ldr	r3, [pc, #192]	@ (80036d0 <Config_Init+0x1ac>)
 8003610:	cb03      	ldmia	r3!, {r0, r1}
 8003612:	6010      	str	r0, [r2, #0]
 8003614:	6051      	str	r1, [r2, #4]
 8003616:	8819      	ldrh	r1, [r3, #0]
 8003618:	789b      	ldrb	r3, [r3, #2]
 800361a:	8111      	strh	r1, [r2, #8]
 800361c:	7293      	strb	r3, [r2, #10]
    strcpy(config.command_topic, "Command_Topic");  
 800361e:	4a2d      	ldr	r2, [pc, #180]	@ (80036d4 <Config_Init+0x1b0>)
 8003620:	4b2d      	ldr	r3, [pc, #180]	@ (80036d8 <Config_Init+0x1b4>)
 8003622:	4614      	mov	r4, r2
 8003624:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003626:	6020      	str	r0, [r4, #0]
 8003628:	6061      	str	r1, [r4, #4]
 800362a:	60a2      	str	r2, [r4, #8]
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	81a3      	strh	r3, [r4, #12]
    strcpy(config.ota_topic, "OTA_Topic");
 8003630:	4a2a      	ldr	r2, [pc, #168]	@ (80036dc <Config_Init+0x1b8>)
 8003632:	4b2b      	ldr	r3, [pc, #172]	@ (80036e0 <Config_Init+0x1bc>)
 8003634:	cb03      	ldmia	r3!, {r0, r1}
 8003636:	6010      	str	r0, [r2, #0]
 8003638:	6051      	str	r1, [r2, #4]
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	8113      	strh	r3, [r2, #8]
	strcpy(config.info_topic, "Info_Topic");
 800363e:	4a29      	ldr	r2, [pc, #164]	@ (80036e4 <Config_Init+0x1c0>)
 8003640:	4b29      	ldr	r3, [pc, #164]	@ (80036e8 <Config_Init+0x1c4>)
 8003642:	cb03      	ldmia	r3!, {r0, r1}
 8003644:	6010      	str	r0, [r2, #0]
 8003646:	6051      	str	r1, [r2, #4]
 8003648:	8819      	ldrh	r1, [r3, #0]
 800364a:	789b      	ldrb	r3, [r3, #2]
 800364c:	8111      	strh	r1, [r2, #8]
 800364e:	7293      	strb	r3, [r2, #10]
    
    if (f_open(&config_file, CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8003650:	f107 0318 	add.w	r3, r7, #24
 8003654:	3b0c      	subs	r3, #12
 8003656:	220a      	movs	r2, #10
 8003658:	491a      	ldr	r1, [pc, #104]	@ (80036c4 <Config_Init+0x1a0>)
 800365a:	4618      	mov	r0, r3
 800365c:	f006 f9ec 	bl	8009a38 <f_open>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d128      	bne.n	80036b8 <Config_Init+0x194>
    {
        return;
    }

    if (f_write(&config_file, &config, sizeof(Config_Typedef), &bytes_written) != FR_OK || bytes_written != sizeof(Config_Typedef)) 
 8003666:	f107 0318 	add.w	r3, r7, #24
 800366a:	3b14      	subs	r3, #20
 800366c:	f107 0018 	add.w	r0, r7, #24
 8003670:	380c      	subs	r0, #12
 8003672:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8003676:	4914      	ldr	r1, [pc, #80]	@ (80036c8 <Config_Init+0x1a4>)
 8003678:	f006 fcc9 	bl	800a00e <f_write>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d106      	bne.n	8003690 <Config_Init+0x16c>
 8003682:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003686:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800368a:	f5b3 7fb8 	cmp.w	r3, #368	@ 0x170
 800368e:	d006      	beq.n	800369e <Config_Init+0x17a>
	{
        f_close(&config_file);
 8003690:	f107 0318 	add.w	r3, r7, #24
 8003694:	3b0c      	subs	r3, #12
 8003696:	4618      	mov	r0, r3
 8003698:	f006 fec2 	bl	800a420 <f_close>
        return;
 800369c:	e00d      	b.n	80036ba <Config_Init+0x196>
    }
    
    f_sync(&config_file);
 800369e:	f107 0318 	add.w	r3, r7, #24
 80036a2:	3b0c      	subs	r3, #12
 80036a4:	4618      	mov	r0, r3
 80036a6:	f006 fe3b 	bl	800a320 <f_sync>
    f_close(&config_file);
 80036aa:	f107 0318 	add.w	r3, r7, #24
 80036ae:	3b0c      	subs	r3, #12
 80036b0:	4618      	mov	r0, r3
 80036b2:	f006 feb5 	bl	800a420 <f_close>
 80036b6:	e000      	b.n	80036ba <Config_Init+0x196>
        return;
 80036b8:	bf00      	nop
}
 80036ba:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 80036be:	371c      	adds	r7, #28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd90      	pop	{r4, r7, pc}
 80036c4:	0801768c 	.word	0x0801768c
 80036c8:	20001d6c 	.word	0x20001d6c
 80036cc:	20001dda 	.word	0x20001dda
 80036d0:	080176a0 	.word	0x080176a0
 80036d4:	20001e1a 	.word	0x20001e1a
 80036d8:	080176ac 	.word	0x080176ac
 80036dc:	20001e5a 	.word	0x20001e5a
 80036e0:	080176bc 	.word	0x080176bc
 80036e4:	20001e9a 	.word	0x20001e9a
 80036e8:	080176c8 	.word	0x080176c8
 80036ec:	00000000 	.word	0x00000000

080036f0 <LED_Start>:
#include "leds.h"
#include "peripherals.h"

/*------ACCENSIONE LED------*/
void LED_Start(uint32_t LED, uint8_t freq, uint8_t duty)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	70fb      	strb	r3, [r7, #3]
 80036fc:	4613      	mov	r3, r2
 80036fe:	70bb      	strb	r3, [r7, #2]
    TIM_HandleTypeDef *htim = LED_TIMER;
 8003700:	4b6f      	ldr	r3, [pc, #444]	@ (80038c0 <LED_Start+0x1d0>)
 8003702:	60fb      	str	r3, [r7, #12]
	uint16_t pulse = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	82fb      	strh	r3, [r7, #22]

    uint16_t prescaler = (uint16_t)(SystemCoreClock / 5000 - 1);
 8003708:	4b6e      	ldr	r3, [pc, #440]	@ (80038c4 <LED_Start+0x1d4>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a6e      	ldr	r2, [pc, #440]	@ (80038c8 <LED_Start+0x1d8>)
 800370e:	fba2 2303 	umull	r2, r3, r2, r3
 8003712:	0b1b      	lsrs	r3, r3, #12
 8003714:	b29b      	uxth	r3, r3
 8003716:	3b01      	subs	r3, #1
 8003718:	82bb      	strh	r3, [r7, #20]
    uint16_t period = 0;
 800371a:	2300      	movs	r3, #0
 800371c:	827b      	strh	r3, [r7, #18]

    switch(freq)
 800371e:	78fb      	ldrb	r3, [r7, #3]
 8003720:	2b03      	cmp	r3, #3
 8003722:	f200 80c3 	bhi.w	80038ac <LED_Start+0x1bc>
 8003726:	a201      	add	r2, pc, #4	@ (adr r2, 800372c <LED_Start+0x3c>)
 8003728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372c:	0800373d 	.word	0x0800373d
 8003730:	08003749 	.word	0x08003749
 8003734:	08003751 	.word	0x08003751
 8003738:	08003789 	.word	0x08003789
    {
        case FAST:  
            period = (uint16_t)((prescaler / 2) - 1);
 800373c:	8abb      	ldrh	r3, [r7, #20]
 800373e:	085b      	lsrs	r3, r3, #1
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	827b      	strh	r3, [r7, #18]
            break;
 8003746:	e03b      	b.n	80037c0 <LED_Start+0xd0>
        case MEDIUM:
            period = (uint16_t)(prescaler / 1 - 1);
 8003748:	8abb      	ldrh	r3, [r7, #20]
 800374a:	3b01      	subs	r3, #1
 800374c:	827b      	strh	r3, [r7, #18]
            break;
 800374e:	e037      	b.n	80037c0 <LED_Start+0xd0>
        case SLOW:
            prescaler = (uint16_t)(SystemCoreClock / 0.5 - 1);
 8003750:	4b5c      	ldr	r3, [pc, #368]	@ (80038c4 <LED_Start+0x1d4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7fc fee5 	bl	8000524 <__aeabi_ui2d>
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	4b5b      	ldr	r3, [pc, #364]	@ (80038cc <LED_Start+0x1dc>)
 8003760:	f7fd f884 	bl	800086c <__aeabi_ddiv>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	4610      	mov	r0, r2
 800376a:	4619      	mov	r1, r3
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	4b57      	ldr	r3, [pc, #348]	@ (80038d0 <LED_Start+0x1e0>)
 8003772:	f7fc fd99 	bl	80002a8 <__aeabi_dsub>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4610      	mov	r0, r2
 800377c:	4619      	mov	r1, r3
 800377e:	f7fd f95d 	bl	8000a3c <__aeabi_d2uiz>
 8003782:	4603      	mov	r3, r0
 8003784:	82bb      	strh	r3, [r7, #20]
            break;
 8003786:	e01b      	b.n	80037c0 <LED_Start+0xd0>
        case VERY_SLOW:
            prescaler = (uint16_t)(SystemCoreClock / 0.1 - 1);
 8003788:	4b4e      	ldr	r3, [pc, #312]	@ (80038c4 <LED_Start+0x1d4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f7fc fec9 	bl	8000524 <__aeabi_ui2d>
 8003792:	a349      	add	r3, pc, #292	@ (adr r3, 80038b8 <LED_Start+0x1c8>)
 8003794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003798:	f7fd f868 	bl	800086c <__aeabi_ddiv>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4610      	mov	r0, r2
 80037a2:	4619      	mov	r1, r3
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	4b49      	ldr	r3, [pc, #292]	@ (80038d0 <LED_Start+0x1e0>)
 80037aa:	f7fc fd7d 	bl	80002a8 <__aeabi_dsub>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4610      	mov	r0, r2
 80037b4:	4619      	mov	r1, r3
 80037b6:	f7fd f941 	bl	8000a3c <__aeabi_d2uiz>
 80037ba:	4603      	mov	r3, r0
 80037bc:	82bb      	strh	r3, [r7, #20]
            break;
 80037be:	bf00      	nop
        default:
            return;
    }

	switch(duty)
 80037c0:	78bb      	ldrb	r3, [r7, #2]
 80037c2:	3b04      	subs	r3, #4
 80037c4:	2b03      	cmp	r3, #3
 80037c6:	d873      	bhi.n	80038b0 <LED_Start+0x1c0>
 80037c8:	a201      	add	r2, pc, #4	@ (adr r2, 80037d0 <LED_Start+0xe0>)
 80037ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ce:	bf00      	nop
 80037d0:	080037e1 	.word	0x080037e1
 80037d4:	080037e7 	.word	0x080037e7
 80037d8:	080037fb 	.word	0x080037fb
 80037dc:	08003803 	.word	0x08003803
	{
		case FULL:
			pulse = period; 
 80037e0:	8a7b      	ldrh	r3, [r7, #18]
 80037e2:	82fb      	strh	r3, [r7, #22]
		    break;
 80037e4:	e011      	b.n	800380a <LED_Start+0x11a>
        case HIGH:
			pulse = period * 3 / 4;
 80037e6:	8a7a      	ldrh	r2, [r7, #18]
 80037e8:	4613      	mov	r3, r2
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	4413      	add	r3, r2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	da00      	bge.n	80037f4 <LED_Start+0x104>
 80037f2:	3303      	adds	r3, #3
 80037f4:	109b      	asrs	r3, r3, #2
 80037f6:	82fb      	strh	r3, [r7, #22]
			break;
 80037f8:	e007      	b.n	800380a <LED_Start+0x11a>
		case HALF:
			pulse = period / 2;
 80037fa:	8a7b      	ldrh	r3, [r7, #18]
 80037fc:	085b      	lsrs	r3, r3, #1
 80037fe:	82fb      	strh	r3, [r7, #22]
			break;
 8003800:	e003      	b.n	800380a <LED_Start+0x11a>
		case LOW:
			pulse = period / 4;
 8003802:	8a7b      	ldrh	r3, [r7, #18]
 8003804:	089b      	lsrs	r3, r3, #2
 8003806:	82fb      	strh	r3, [r7, #22]
			break;
 8003808:	bf00      	nop
        default:
            return;
	}

    // Imposta periodo e prescaler
    htim->Instance->PSC = prescaler;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	8aba      	ldrh	r2, [r7, #20]
 8003810:	629a      	str	r2, [r3, #40]	@ 0x28
    htim->Instance->ARR = period;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	8a7a      	ldrh	r2, [r7, #18]
 8003818:	62da      	str	r2, [r3, #44]	@ 0x2c
    htim->Instance->CCR1 = (LED == GRN_LED) ? pulse : htim->Instance->CCR1;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b08      	cmp	r3, #8
 800381e:	d101      	bne.n	8003824 <LED_Start+0x134>
 8003820:	8afb      	ldrh	r3, [r7, #22]
 8003822:	e002      	b.n	800382a <LED_Start+0x13a>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	6812      	ldr	r2, [r2, #0]
 800382e:	6353      	str	r3, [r2, #52]	@ 0x34
    htim->Instance->CCR2 = (LED == ORG_LED) ? pulse : htim->Instance->CCR2;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <LED_Start+0x14a>
 8003836:	8afb      	ldrh	r3, [r7, #22]
 8003838:	e002      	b.n	8003840 <LED_Start+0x150>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	6393      	str	r3, [r2, #56]	@ 0x38
    htim->Instance->CCR3 = (LED == RED_LED) ? pulse : htim->Instance->CCR3;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b04      	cmp	r3, #4
 800384a:	d101      	bne.n	8003850 <LED_Start+0x160>
 800384c:	8afb      	ldrh	r3, [r7, #22]
 800384e:	e002      	b.n	8003856 <LED_Start+0x166>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	63d3      	str	r3, [r2, #60]	@ 0x3c

    // Avvia PWM solo se non già attivo
    switch(LED)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b08      	cmp	r3, #8
 8003860:	d009      	beq.n	8003876 <LED_Start+0x186>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b08      	cmp	r3, #8
 8003866:	d824      	bhi.n	80038b2 <LED_Start+0x1c2>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00c      	beq.n	8003888 <LED_Start+0x198>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b04      	cmp	r3, #4
 8003872:	d012      	beq.n	800389a <LED_Start+0x1aa>
 8003874:	e01d      	b.n	80038b2 <LED_Start+0x1c2>
    {
        case GRN_LED:
            htim->Instance->CCER |= TIM_CCER_CC1E;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6a1a      	ldr	r2, [r3, #32]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f042 0201 	orr.w	r2, r2, #1
 8003884:	621a      	str	r2, [r3, #32]
            break;
 8003886:	e014      	b.n	80038b2 <LED_Start+0x1c2>
        case ORG_LED:
            htim->Instance->CCER |= TIM_CCER_CC2E;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6a1a      	ldr	r2, [r3, #32]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0210 	orr.w	r2, r2, #16
 8003896:	621a      	str	r2, [r3, #32]
            break;
 8003898:	e00b      	b.n	80038b2 <LED_Start+0x1c2>
        case RED_LED:
            htim->Instance->CCER |= TIM_CCER_CC3E;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6a1a      	ldr	r2, [r3, #32]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038a8:	621a      	str	r2, [r3, #32]
            break;
 80038aa:	e002      	b.n	80038b2 <LED_Start+0x1c2>
            return;
 80038ac:	bf00      	nop
 80038ae:	e000      	b.n	80038b2 <LED_Start+0x1c2>
            return;
 80038b0:	bf00      	nop
    }
}
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	9999999a 	.word	0x9999999a
 80038bc:	3fb99999 	.word	0x3fb99999
 80038c0:	2000056c 	.word	0x2000056c
 80038c4:	20000268 	.word	0x20000268
 80038c8:	d1b71759 	.word	0xd1b71759
 80038cc:	3fe00000 	.word	0x3fe00000
 80038d0:	3ff00000 	.word	0x3ff00000

080038d4 <LED_Stop>:

/*------SPEGNIMENTO LED------*/
void LED_Stop(uint32_t LED)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(LED_TIMER, LED);
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4803      	ldr	r0, [pc, #12]	@ (80038ec <LED_Stop+0x18>)
 80038e0:	f00f fb02 	bl	8012ee8 <HAL_TIM_PWM_Stop>
}
 80038e4:	bf00      	nop
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	2000056c 	.word	0x2000056c

080038f0 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 80038f0:	b590      	push	{r4, r7, lr}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	607a      	str	r2, [r7, #4]
 80038fa:	461a      	mov	r2, r3
 80038fc:	460b      	mov	r3, r1
 80038fe:	72fb      	strb	r3, [r7, #11]
 8003900:	4613      	mov	r3, r2
 8003902:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	685c      	ldr	r4, [r3, #4]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	68d8      	ldr	r0, [r3, #12]
 800390c:	893b      	ldrh	r3, [r7, #8]
 800390e:	7af9      	ldrb	r1, [r7, #11]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	47a0      	blx	r4
 8003914:	6178      	str	r0, [r7, #20]

  return ret;
 8003916:	697b      	ldr	r3, [r7, #20]
}
 8003918:	4618      	mov	r0, r3
 800391a:	371c      	adds	r7, #28
 800391c:	46bd      	mov	sp, r7
 800391e:	bd90      	pop	{r4, r7, pc}

08003920 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8003920:	b590      	push	{r4, r7, lr}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	607a      	str	r2, [r7, #4]
 800392a:	461a      	mov	r2, r3
 800392c:	460b      	mov	r3, r1
 800392e:	72fb      	strb	r3, [r7, #11]
 8003930:	4613      	mov	r3, r2
 8003932:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681c      	ldr	r4, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	68d8      	ldr	r0, [r3, #12]
 800393c:	893b      	ldrh	r3, [r7, #8]
 800393e:	7af9      	ldrb	r1, [r7, #11]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	47a0      	blx	r4
 8003944:	6178      	str	r0, [r7, #20]

  return ret;
 8003946:	697b      	ldr	r3, [r7, #20]
}
 8003948:	4618      	mov	r0, r3
 800394a:	371c      	adds	r7, #28
 800394c:	46bd      	mov	sp, r7
 800394e:	bd90      	pop	{r4, r7, pc}

08003950 <lsm6dsv16x_reset_set>:
  * @param  val      Reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_set(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t val)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800395c:	f107 020c 	add.w	r2, r7, #12
 8003960:	2301      	movs	r3, #1
 8003962:	2112      	movs	r1, #18
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff ffc3 	bl	80038f0 <lsm6dsv16x_read_reg>
 800396a:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 800396c:	f107 0210 	add.w	r2, r7, #16
 8003970:	2301      	movs	r3, #1
 8003972:	2101      	movs	r1, #1
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ffbb 	bl	80038f0 <lsm6dsv16x_read_reg>
 800397a:	4602      	mov	r2, r0
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	4413      	add	r3, r2
 8003980:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <lsm6dsv16x_reset_set+0x3c>
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	e02d      	b.n	80039e8 <lsm6dsv16x_reset_set+0x98>

  ctrl3.boot = ((uint8_t)val & 0x04U) >> 2;
 800398c:	78fb      	ldrb	r3, [r7, #3]
 800398e:	089b      	lsrs	r3, r3, #2
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	b2da      	uxtb	r2, r3
 8003996:	7b3b      	ldrb	r3, [r7, #12]
 8003998:	f362 13c7 	bfi	r3, r2, #7, #1
 800399c:	733b      	strb	r3, [r7, #12]
  ctrl3.sw_reset = ((uint8_t)val & 0x02U) >> 1;
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	085b      	lsrs	r3, r3, #1
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	7b3b      	ldrb	r3, [r7, #12]
 80039aa:	f362 0300 	bfi	r3, r2, #0, #1
 80039ae:	733b      	strb	r3, [r7, #12]
  func_cfg_access.sw_por = (uint8_t)val & 0x01U;
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	7c3b      	ldrb	r3, [r7, #16]
 80039ba:	f362 0382 	bfi	r3, r2, #2, #1
 80039be:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80039c0:	f107 020c 	add.w	r2, r7, #12
 80039c4:	2301      	movs	r3, #1
 80039c6:	2112      	movs	r1, #18
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7ff ffa9 	bl	8003920 <lsm6dsv16x_write_reg>
 80039ce:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80039d0:	f107 0210 	add.w	r2, r7, #16
 80039d4:	2301      	movs	r3, #1
 80039d6:	2101      	movs	r1, #1
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ffa1 	bl	8003920 <lsm6dsv16x_write_reg>
 80039de:	4602      	mov	r2, r0
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	4413      	add	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]

  return ret;
 80039e6:	697b      	ldr	r3, [r7, #20]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <lsm6dsv16x_reset_get>:
  * @param  val      Global reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_get(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t *val)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80039fa:	f107 020c 	add.w	r2, r7, #12
 80039fe:	2301      	movs	r3, #1
 8003a00:	2112      	movs	r1, #18
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff ff74 	bl	80038f0 <lsm6dsv16x_read_reg>
 8003a08:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8003a0a:	f107 0210 	add.w	r2, r7, #16
 8003a0e:	2301      	movs	r3, #1
 8003a10:	2101      	movs	r1, #1
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff ff6c 	bl	80038f0 <lsm6dsv16x_read_reg>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <lsm6dsv16x_reset_get+0x3a>
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	e033      	b.n	8003a92 <lsm6dsv16x_reset_get+0xa2>

  switch ((ctrl3.sw_reset << 2) + (ctrl3.boot << 1) + func_cfg_access.sw_por)
 8003a2a:	7b3b      	ldrb	r3, [r7, #12]
 8003a2c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	009a      	lsls	r2, r3, #2
 8003a34:	7b3b      	ldrb	r3, [r7, #12]
 8003a36:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	4413      	add	r3, r2
 8003a40:	7c3a      	ldrb	r2, [r7, #16]
 8003a42:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	4413      	add	r3, r2
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d81c      	bhi.n	8003a88 <lsm6dsv16x_reset_get+0x98>
 8003a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a54 <lsm6dsv16x_reset_get+0x64>)
 8003a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a54:	08003a69 	.word	0x08003a69
 8003a58:	08003a71 	.word	0x08003a71
 8003a5c:	08003a79 	.word	0x08003a79
 8003a60:	08003a89 	.word	0x08003a89
 8003a64:	08003a81 	.word	0x08003a81
  {
    case LSM6DSV16X_READY:
      *val = LSM6DSV16X_READY;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	701a      	strb	r2, [r3, #0]
      break;
 8003a6e:	e00f      	b.n	8003a90 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_GLOBAL_RST:
      *val = LSM6DSV16X_GLOBAL_RST;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2201      	movs	r2, #1
 8003a74:	701a      	strb	r2, [r3, #0]
      break;
 8003a76:	e00b      	b.n	8003a90 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CAL_PARAM:
      *val = LSM6DSV16X_RESTORE_CAL_PARAM;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	701a      	strb	r2, [r3, #0]
      break;
 8003a7e:	e007      	b.n	8003a90 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CTRL_REGS:
      *val = LSM6DSV16X_RESTORE_CTRL_REGS;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	2204      	movs	r2, #4
 8003a84:	701a      	strb	r2, [r3, #0]
      break;
 8003a86:	e003      	b.n	8003a90 <lsm6dsv16x_reset_get+0xa0>

    default:
      *val = LSM6DSV16X_GLOBAL_RST;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	701a      	strb	r2, [r3, #0]
      break;
 8003a8e:	bf00      	nop
  }

  return ret;
 8003a90:	697b      	ldr	r3, [r7, #20]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop

08003a9c <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	210f      	movs	r1, #15
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff ff1f 	bl	80038f0 <lsm6dsv16x_read_reg>
 8003ab2:	60f8      	str	r0, [r7, #12]

  return ret;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b086      	sub	sp, #24
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8003aca:	f107 0210 	add.w	r2, r7, #16
 8003ace:	2301      	movs	r3, #1
 8003ad0:	2110      	movs	r1, #16
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff ff0c 	bl	80038f0 <lsm6dsv16x_read_reg>
 8003ad8:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <lsm6dsv16x_xl_data_rate_set+0x26>
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	e039      	b.n	8003b58 <lsm6dsv16x_xl_data_rate_set+0x9a>

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 8003ae4:	78fb      	ldrb	r3, [r7, #3]
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	7c3b      	ldrb	r3, [r7, #16]
 8003aee:	f362 0303 	bfi	r3, r2, #0, #4
 8003af2:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8003af4:	f107 0210 	add.w	r2, r7, #16
 8003af8:	2301      	movs	r3, #1
 8003afa:	2110      	movs	r1, #16
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7ff ff0f 	bl	8003920 <lsm6dsv16x_write_reg>
 8003b02:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <lsm6dsv16x_xl_data_rate_set+0x50>
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	e024      	b.n	8003b58 <lsm6dsv16x_xl_data_rate_set+0x9a>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8003b0e:	78fb      	ldrb	r3, [r7, #3]
 8003b10:	091b      	lsrs	r3, r3, #4
 8003b12:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8003b14:	7cfb      	ldrb	r3, [r7, #19]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d01d      	beq.n	8003b56 <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003b1a:	f107 020c 	add.w	r2, r7, #12
 8003b1e:	2301      	movs	r3, #1
 8003b20:	2162      	movs	r1, #98	@ 0x62
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff fee4 	bl	80038f0 <lsm6dsv16x_read_reg>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8003b30:	7cfb      	ldrb	r3, [r7, #19]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	7b3b      	ldrb	r3, [r7, #12]
 8003b3a:	f362 0301 	bfi	r3, r2, #0, #2
 8003b3e:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003b40:	f107 020c 	add.w	r2, r7, #12
 8003b44:	2301      	movs	r3, #1
 8003b46:	2162      	movs	r1, #98	@ 0x62
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff fee9 	bl	8003920 <lsm6dsv16x_write_reg>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	4413      	add	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003b56:	697b      	ldr	r3, [r7, #20]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <lsm6dsv16x_xl_mode_set>:
  * @param  val      XL_HIGH_PERFORMANCE_MD, XL_HIGH_ACCURACY_ODR_MD, XL_LOW_POWER_2_AVG_MD, XL_LOW_POWER_4_AVG_MD, XL_LOW_POWER_8_AVG_MD, XL_NORMAL_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_xl_mode_t val)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8003b6c:	f107 0208 	add.w	r2, r7, #8
 8003b70:	2301      	movs	r3, #1
 8003b72:	2110      	movs	r1, #16
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff febb 	bl	80038f0 <lsm6dsv16x_read_reg>
 8003b7a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10f      	bne.n	8003ba2 <lsm6dsv16x_xl_mode_set+0x42>
  {
    ctrl1.op_mode_xl = (uint8_t)val & 0x07U;
 8003b82:	78fb      	ldrb	r3, [r7, #3]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	7a3b      	ldrb	r3, [r7, #8]
 8003b8c:	f362 1306 	bfi	r3, r2, #4, #3
 8003b90:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8003b92:	f107 0208 	add.w	r2, r7, #8
 8003b96:	2301      	movs	r3, #1
 8003b98:	2110      	movs	r1, #16
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff fec0 	bl	8003920 <lsm6dsv16x_write_reg>
 8003ba0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003bb8:	f107 0210 	add.w	r2, r7, #16
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	2111      	movs	r1, #17
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7ff fe95 	bl	80038f0 <lsm6dsv16x_read_reg>
 8003bc6:	6178      	str	r0, [r7, #20]
  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	7c3b      	ldrb	r3, [r7, #16]
 8003bd2:	f362 0303 	bfi	r3, r2, #0, #4
 8003bd6:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003bd8:	f107 0210 	add.w	r2, r7, #16
 8003bdc:	2301      	movs	r3, #1
 8003bde:	2111      	movs	r1, #17
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff fe9d 	bl	8003920 <lsm6dsv16x_write_reg>
 8003be6:	4602      	mov	r2, r0
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	4413      	add	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <lsm6dsv16x_gy_data_rate_set+0x4c>
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	e024      	b.n	8003c42 <lsm6dsv16x_gy_data_rate_set+0x96>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	091b      	lsrs	r3, r3, #4
 8003bfc:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8003bfe:	7cfb      	ldrb	r3, [r7, #19]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d01d      	beq.n	8003c40 <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003c04:	f107 020c 	add.w	r2, r7, #12
 8003c08:	2301      	movs	r3, #1
 8003c0a:	2162      	movs	r1, #98	@ 0x62
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff fe6f 	bl	80038f0 <lsm6dsv16x_read_reg>
 8003c12:	4602      	mov	r2, r0
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	4413      	add	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8003c1a:	7cfb      	ldrb	r3, [r7, #19]
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	7b3b      	ldrb	r3, [r7, #12]
 8003c24:	f362 0301 	bfi	r3, r2, #0, #2
 8003c28:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003c2a:	f107 020c 	add.w	r2, r7, #12
 8003c2e:	2301      	movs	r3, #1
 8003c30:	2162      	movs	r1, #98	@ 0x62
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff fe74 	bl	8003920 <lsm6dsv16x_write_reg>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003c40:	697b      	ldr	r3, [r7, #20]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <lsm6dsv16x_gy_mode_set>:
  * @param  val      GY_HIGH_PERFORMANCE_MD, GY_HIGH_ACCURACY_ODR_MD, GY_SLEEP_MD, GY_LOW_POWER_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_gy_mode_t val)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	460b      	mov	r3, r1
 8003c54:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003c56:	f107 0208 	add.w	r2, r7, #8
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	2111      	movs	r1, #17
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff fe46 	bl	80038f0 <lsm6dsv16x_read_reg>
 8003c64:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10f      	bne.n	8003c8c <lsm6dsv16x_gy_mode_set+0x42>
  {
    ctrl2.op_mode_g = (uint8_t)val & 0x07U;
 8003c6c:	78fb      	ldrb	r3, [r7, #3]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	7a3b      	ldrb	r3, [r7, #8]
 8003c76:	f362 1306 	bfi	r3, r2, #4, #3
 8003c7a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003c7c:	f107 0208 	add.w	r2, r7, #8
 8003c80:	2301      	movs	r3, #1
 8003c82:	2111      	movs	r1, #17
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7ff fe4b 	bl	8003920 <lsm6dsv16x_write_reg>
 8003c8a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b084      	sub	sp, #16
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003ca2:	f107 0208 	add.w	r2, r7, #8
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	2112      	movs	r1, #18
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff fe20 	bl	80038f0 <lsm6dsv16x_read_reg>
 8003cb0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10f      	bne.n	8003cd8 <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	7a3b      	ldrb	r3, [r7, #8]
 8003cc2:	f362 1386 	bfi	r3, r2, #6, #1
 8003cc6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003cc8:	f107 0208 	add.w	r2, r7, #8
 8003ccc:	2301      	movs	r3, #1
 8003cce:	2112      	movs	r1, #18
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff fe25 	bl	8003920 <lsm6dsv16x_write_reg>
 8003cd6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <lsm6dsv16x_odr_trig_cfg_set>:
  * @param  val      number of data in the reference period.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_odr_trig_cfg_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	460b      	mov	r3, r1
 8003cec:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_odr_trig_cfg_t odr_trig;
  int32_t ret;

  if (val >= 1U && val <= 3U) {
 8003cee:	78fb      	ldrb	r3, [r7, #3]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
 8003cf4:	78fb      	ldrb	r3, [r7, #3]
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d802      	bhi.n	8003d00 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
    return -1;
 8003cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfe:	e015      	b.n	8003d2c <lsm6dsv16x_odr_trig_cfg_set+0x4a>
  }

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 8003d00:	f107 0208 	add.w	r2, r7, #8
 8003d04:	2301      	movs	r3, #1
 8003d06:	2106      	movs	r1, #6
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff fdf1 	bl	80038f0 <lsm6dsv16x_read_reg>
 8003d0e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d109      	bne.n	8003d2a <lsm6dsv16x_odr_trig_cfg_set+0x48>
  {
    odr_trig.odr_trig_nodr = val;
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 8003d1a:	f107 0208 	add.w	r2, r7, #8
 8003d1e:	2301      	movs	r3, #1
 8003d20:	2106      	movs	r1, #6
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff fdfc 	bl	8003920 <lsm6dsv16x_write_reg>
 8003d28:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8003d40:	f107 0208 	add.w	r2, r7, #8
 8003d44:	2301      	movs	r3, #1
 8003d46:	2115      	movs	r1, #21
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff fdd1 	bl	80038f0 <lsm6dsv16x_read_reg>
 8003d4e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10f      	bne.n	8003d76 <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 8003d56:	78fb      	ldrb	r3, [r7, #3]
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	7a3b      	ldrb	r3, [r7, #8]
 8003d60:	f362 0303 	bfi	r3, r2, #0, #4
 8003d64:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8003d66:	f107 0208 	add.w	r2, r7, #8
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	2115      	movs	r1, #21
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff fdd6 	bl	8003920 <lsm6dsv16x_write_reg>
 8003d74:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003d76:	68fb      	ldr	r3, [r7, #12]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8003d8c:	f107 0208 	add.w	r2, r7, #8
 8003d90:	2301      	movs	r3, #1
 8003d92:	2117      	movs	r1, #23
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff fdab 	bl	80038f0 <lsm6dsv16x_read_reg>
 8003d9a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10f      	bne.n	8003dc2 <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 8003da2:	78fb      	ldrb	r3, [r7, #3]
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	7a3b      	ldrb	r3, [r7, #8]
 8003dac:	f362 0301 	bfi	r3, r2, #0, #2
 8003db0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8003db2:	f107 0208 	add.w	r2, r7, #8
 8003db6:	2301      	movs	r3, #1
 8003db8:	2117      	movs	r1, #23
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7ff fdb0 	bl	8003920 <lsm6dsv16x_write_reg>
 8003dc0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <lsm6dsv16x_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsv16x_pin_int1_route_set(stmdev_ctx_t *ctx,
                                      lsm6dsv16x_pin_int_route_t *val)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_int1_ctrl_t          int1_ctrl;
  lsm6dsv16x_md1_cfg_t            md1_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003dd6:	f107 0210 	add.w	r2, r7, #16
 8003dda:	2301      	movs	r3, #1
 8003ddc:	210d      	movs	r1, #13
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7ff fd86 	bl	80038f0 <lsm6dsv16x_read_reg>
 8003de4:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <lsm6dsv16x_pin_int1_route_set+0x24>
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	e0a0      	b.n	8003f32 <lsm6dsv16x_pin_int1_route_set+0x166>

  int1_ctrl.int1_drdy_xl       = val->drdy_xl;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	7c3b      	ldrb	r3, [r7, #16]
 8003dfc:	f362 0300 	bfi	r3, r2, #0, #1
 8003e00:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_drdy_g        = val->drdy_g;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	7c3b      	ldrb	r3, [r7, #16]
 8003e0e:	f362 0341 	bfi	r3, r2, #1, #1
 8003e12:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_th       = val->fifo_th;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	7c3b      	ldrb	r3, [r7, #16]
 8003e20:	f362 03c3 	bfi	r3, r2, #3, #1
 8003e24:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_ovr      = val->fifo_ovr;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	7c3b      	ldrb	r3, [r7, #16]
 8003e32:	f362 1304 	bfi	r3, r2, #4, #1
 8003e36:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_full     = val->fifo_full;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	7c3b      	ldrb	r3, [r7, #16]
 8003e44:	f362 1345 	bfi	r3, r2, #5, #1
 8003e48:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_cnt_bdr       = val->cnt_bdr;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	7c3b      	ldrb	r3, [r7, #16]
 8003e56:	f362 1386 	bfi	r3, r2, #6, #1
 8003e5a:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003e5c:	f107 0210 	add.w	r2, r7, #16
 8003e60:	2301      	movs	r3, #1
 8003e62:	210d      	movs	r1, #13
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7ff fd5b 	bl	8003920 <lsm6dsv16x_write_reg>
 8003e6a:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <lsm6dsv16x_pin_int1_route_set+0xaa>
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	e05d      	b.n	8003f32 <lsm6dsv16x_pin_int1_route_set+0x166>

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8003e76:	f107 020c 	add.w	r2, r7, #12
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	215e      	movs	r1, #94	@ 0x5e
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff fd36 	bl	80038f0 <lsm6dsv16x_read_reg>
 8003e84:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <lsm6dsv16x_pin_int1_route_set+0xc4>
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	e050      	b.n	8003f32 <lsm6dsv16x_pin_int1_route_set+0x166>

  md1_cfg.int1_shub            = val->shub;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	785b      	ldrb	r3, [r3, #1]
 8003e94:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	7b3b      	ldrb	r3, [r7, #12]
 8003e9c:	f362 0300 	bfi	r3, r2, #0, #1
 8003ea0:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_emb_func        = val->emb_func;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	785b      	ldrb	r3, [r3, #1]
 8003ea6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	7b3b      	ldrb	r3, [r7, #12]
 8003eae:	f362 0341 	bfi	r3, r2, #1, #1
 8003eb2:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_6d              = val->sixd;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	785b      	ldrb	r3, [r3, #1]
 8003eb8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	7b3b      	ldrb	r3, [r7, #12]
 8003ec0:	f362 0382 	bfi	r3, r2, #2, #1
 8003ec4:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_single_tap      = val->single_tap;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	785b      	ldrb	r3, [r3, #1]
 8003eca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	7b3b      	ldrb	r3, [r7, #12]
 8003ed2:	f362 1386 	bfi	r3, r2, #6, #1
 8003ed6:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_double_tap      = val->double_tap;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	785b      	ldrb	r3, [r3, #1]
 8003edc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	7b3b      	ldrb	r3, [r7, #12]
 8003ee4:	f362 03c3 	bfi	r3, r2, #3, #1
 8003ee8:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_wu              = val->wakeup;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	785b      	ldrb	r3, [r3, #1]
 8003eee:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	7b3b      	ldrb	r3, [r7, #12]
 8003ef6:	f362 1345 	bfi	r3, r2, #5, #1
 8003efa:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_ff              = val->freefall;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	785b      	ldrb	r3, [r3, #1]
 8003f00:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	7b3b      	ldrb	r3, [r7, #12]
 8003f08:	f362 1304 	bfi	r3, r2, #4, #1
 8003f0c:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_sleep_change    = val->sleep_change;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	789b      	ldrb	r3, [r3, #2]
 8003f12:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	7b3b      	ldrb	r3, [r7, #12]
 8003f1a:	f362 13c7 	bfi	r3, r2, #7, #1
 8003f1e:	733b      	strb	r3, [r7, #12]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8003f20:	f107 020c 	add.w	r2, r7, #12
 8003f24:	2301      	movs	r3, #1
 8003f26:	215e      	movs	r1, #94	@ 0x5e
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff fcf9 	bl	8003920 <lsm6dsv16x_write_reg>
 8003f2e:	6178      	str	r0, [r7, #20]

  return ret;
 8003f30:	697b      	ldr	r3, [r7, #20]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <lsm6dsv16x_den_polarity_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_den_polarity_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_den_polarity_t val)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	460b      	mov	r3, r1
 8003f44:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl4_t ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 8003f46:	f107 0208 	add.w	r2, r7, #8
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	2113      	movs	r1, #19
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7ff fcce 	bl	80038f0 <lsm6dsv16x_read_reg>
 8003f54:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10f      	bne.n	8003f7c <lsm6dsv16x_den_polarity_set+0x42>
  {
    ctrl4.int2_in_lh = (uint8_t)val & 0x1U;
 8003f5c:	78fb      	ldrb	r3, [r7, #3]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	7a3b      	ldrb	r3, [r7, #8]
 8003f66:	f362 0300 	bfi	r3, r2, #0, #1
 8003f6a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 8003f6c:	f107 0208 	add.w	r2, r7, #8
 8003f70:	2301      	movs	r3, #1
 8003f72:	2113      	movs	r1, #19
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff fcd3 	bl	8003920 <lsm6dsv16x_write_reg>
 8003f7a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <lsm6dsv16x_fifo_watermark_set>:
  * @param  val      FIFO watermark threshold (1 LSb = TAG (1 Byte) + 1 sensor (6 Bytes) written in FIFO).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_watermark_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b084      	sub	sp, #16
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	460b      	mov	r3, r1
 8003f90:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl1_t fifo_ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8003f92:	f107 0208 	add.w	r2, r7, #8
 8003f96:	2301      	movs	r3, #1
 8003f98:	2107      	movs	r1, #7
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7ff fca8 	bl	80038f0 <lsm6dsv16x_read_reg>
 8003fa0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d109      	bne.n	8003fbc <lsm6dsv16x_fifo_watermark_set+0x36>
  {
    fifo_ctrl1.wtm = val;
 8003fa8:	78fb      	ldrb	r3, [r7, #3]
 8003faa:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8003fac:	f107 0208 	add.w	r2, r7, #8
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	2107      	movs	r1, #7
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff fcb3 	bl	8003920 <lsm6dsv16x_write_reg>
 8003fba:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <lsm6dsv16x_fifo_xl_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_xl_batch_t val)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b084      	sub	sp, #16
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8003fd2:	f107 0208 	add.w	r2, r7, #8
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	2109      	movs	r1, #9
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7ff fc88 	bl	80038f0 <lsm6dsv16x_read_reg>
 8003fe0:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10f      	bne.n	8004008 <lsm6dsv16x_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val & 0xFu;
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	7a3b      	ldrb	r3, [r7, #8]
 8003ff2:	f362 0303 	bfi	r3, r2, #0, #4
 8003ff6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8003ff8:	f107 0208 	add.w	r2, r7, #8
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	2109      	movs	r1, #9
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff fc8d 	bl	8003920 <lsm6dsv16x_write_reg>
 8004006:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004008:	68fb      	ldr	r3, [r7, #12]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <lsm6dsv16x_fifo_gy_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_gy_batch_t val)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b084      	sub	sp, #16
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	460b      	mov	r3, r1
 800401c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 800401e:	f107 0208 	add.w	r2, r7, #8
 8004022:	2301      	movs	r3, #1
 8004024:	2109      	movs	r1, #9
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff fc62 	bl	80038f0 <lsm6dsv16x_read_reg>
 800402c:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10f      	bne.n	8004054 <lsm6dsv16x_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val & 0x0Fu;
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	b2da      	uxtb	r2, r3
 800403c:	7a3b      	ldrb	r3, [r7, #8]
 800403e:	f362 1307 	bfi	r3, r2, #4, #4
 8004042:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8004044:	f107 0208 	add.w	r2, r7, #8
 8004048:	2301      	movs	r3, #1
 800404a:	2109      	movs	r1, #9
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff fc67 	bl	8003920 <lsm6dsv16x_write_reg>
 8004052:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004054:	68fb      	ldr	r3, [r7, #12]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b084      	sub	sp, #16
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	460b      	mov	r3, r1
 8004068:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 800406a:	f107 0208 	add.w	r2, r7, #8
 800406e:	2301      	movs	r3, #1
 8004070:	210a      	movs	r1, #10
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7ff fc3c 	bl	80038f0 <lsm6dsv16x_read_reg>
 8004078:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10f      	bne.n	80040a0 <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	b2da      	uxtb	r2, r3
 8004088:	7a3b      	ldrb	r3, [r7, #8]
 800408a:	f362 0302 	bfi	r3, r2, #0, #3
 800408e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8004090:	f107 0208 	add.w	r2, r7, #8
 8004094:	2301      	movs	r3, #1
 8004096:	210a      	movs	r1, #10
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff fc41 	bl	8003920 <lsm6dsv16x_write_reg>
 800409e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80040a0:	68fb      	ldr	r3, [r7, #12]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <lsm6dsv16x_ui_i2c_i3c_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ui_i2c_i3c_mode_set(stmdev_ctx_t *ctx,
                                       lsm6dsv16x_ui_i2c_i3c_mode_t val)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b084      	sub	sp, #16
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
 80040b2:	460b      	mov	r3, r1
 80040b4:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_if_cfg_t if_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 80040b6:	f107 0208 	add.w	r2, r7, #8
 80040ba:	2301      	movs	r3, #1
 80040bc:	2103      	movs	r1, #3
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff fc16 	bl	80038f0 <lsm6dsv16x_read_reg>
 80040c4:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10f      	bne.n	80040ec <lsm6dsv16x_ui_i2c_i3c_mode_set+0x42>
  {
    if_cfg.i2c_i3c_disable = (uint8_t)val & 0x1U;
 80040cc:	78fb      	ldrb	r3, [r7, #3]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	7a3b      	ldrb	r3, [r7, #8]
 80040d6:	f362 0300 	bfi	r3, r2, #0, #1
 80040da:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 80040dc:	f107 0208 	add.w	r2, r7, #8
 80040e0:	2301      	movs	r3, #1
 80040e2:	2103      	movs	r1, #3
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff fc1b 	bl	8003920 <lsm6dsv16x_write_reg>
 80040ea:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80040ec:	68fb      	ldr	r3, [r7, #12]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <acc_write>:
#include "global_variables.h"
#include "peripherals.h"

/* -------------SCRITTURA ACCELEROMETRO-------------*/
int32_t acc_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b084      	sub	sp, #16
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	461a      	mov	r2, r3
 8004102:	460b      	mov	r3, r1
 8004104:	72fb      	strb	r3, [r7, #11]
 8004106:	4613      	mov	r3, r2
 8004108:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 800410a:	2200      	movs	r2, #0
 800410c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004110:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004114:	f00a f988 	bl	800e428 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8004118:	f107 010b 	add.w	r1, r7, #11
 800411c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004120:	2201      	movs	r2, #1
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f00d fc09 	bl	801193a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 8004128:	893a      	ldrh	r2, [r7, #8]
 800412a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f00d fc02 	bl	801193a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 8004136:	2201      	movs	r2, #1
 8004138:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800413c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004140:	f00a f972 	bl	800e428 <HAL_GPIO_WritePin>
	return 0;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <acc_read>:

/* -------------LETTURA ACCELEROMETRO-------------*/
int32_t acc_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b084      	sub	sp, #16
 8004152:	af00      	add	r7, sp, #0
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	461a      	mov	r2, r3
 800415a:	460b      	mov	r3, r1
 800415c:	72fb      	strb	r3, [r7, #11]
 800415e:	4613      	mov	r3, r2
 8004160:	813b      	strh	r3, [r7, #8]
	reg |= 0x80;
 8004162:	7afb      	ldrb	r3, [r7, #11]
 8004164:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004168:	b2db      	uxtb	r3, r3
 800416a:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 800416c:	2200      	movs	r2, #0
 800416e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004172:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004176:	f00a f957 	bl	800e428 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 800417a:	f107 010b 	add.w	r1, r7, #11
 800417e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004182:	2201      	movs	r2, #1
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f00d fbd8 	bl	801193a <HAL_SPI_Transmit>
	HAL_SPI_Receive(handle, bufp, len, 1000);
 800418a:	893a      	ldrh	r2, [r7, #8]
 800418c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004190:	6879      	ldr	r1, [r7, #4]
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f00d fd47 	bl	8011c26 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 8004198:	2201      	movs	r2, #1
 800419a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800419e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80041a2:	f00a f941 	bl	800e428 <HAL_GPIO_WritePin>
	return 0;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80041b4:	f3bf 8f4f 	dsb	sy
}
 80041b8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80041ba:	4b06      	ldr	r3, [pc, #24]	@ (80041d4 <__NVIC_SystemReset+0x24>)
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80041c2:	4904      	ldr	r1, [pc, #16]	@ (80041d4 <__NVIC_SystemReset+0x24>)
 80041c4:	4b04      	ldr	r3, [pc, #16]	@ (80041d8 <__NVIC_SystemReset+0x28>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80041ca:	f3bf 8f4f 	dsb	sy
}
 80041ce:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80041d0:	bf00      	nop
 80041d2:	e7fd      	b.n	80041d0 <__NVIC_SystemReset+0x20>
 80041d4:	e000ed00 	.word	0xe000ed00
 80041d8:	05fa0004 	.word	0x05fa0004

080041dc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80041dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041de:	b093      	sub	sp, #76	@ 0x4c
 80041e0:	af0c      	add	r7, sp, #48	@ 0x30
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80041e2:	f006 feda 	bl	800af9a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80041e6:	f000 fafd 	bl	80047e4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80041ea:	f000 ffd1 	bl	8005190 <MX_GPIO_Init>
	MX_DMA_Init();
 80041ee:	f000 ffa1 	bl	8005134 <MX_DMA_Init>
	MX_QUADSPI_Init();
 80041f2:	f000 fc23 	bl	8004a3c <MX_QUADSPI_Init>
	MX_SPI2_Init();
 80041f6:	f000 fcd9 	bl	8004bac <MX_SPI2_Init>
	MX_USART1_UART_Init();
 80041fa:	f000 ff6b 	bl	80050d4 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 80041fe:	f000 fb43 	bl	8004888 <MX_ADC1_Init>
	MX_I2C3_Init();
 8004202:	f000 fbdb 	bl	80049bc <MX_I2C3_Init>
	MX_TIM2_Init();
 8004206:	f000 fdf5 	bl	8004df4 <MX_TIM2_Init>
	MX_UART4_Init();
 800420a:	f000 ff33 	bl	8005074 <MX_UART4_Init>
	MX_TIM1_Init();
 800420e:	f000 fd49 	bl	8004ca4 <MX_TIM1_Init>
	MX_CRC_Init();
 8004212:	f000 fbb1 	bl	8004978 <MX_CRC_Init>
	MX_TIM4_Init();
 8004216:	f000 feb9 	bl	8004f8c <MX_TIM4_Init>
	MX_RTC_Init();
 800421a:	f000 fc35 	bl	8004a88 <MX_RTC_Init>
	MX_SPI3_Init();
 800421e:	f000 fd03 	bl	8004c28 <MX_SPI3_Init>
	MX_TIM3_Init();
 8004222:	f000 fe3b 	bl	8004e9c <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	System_Init();
 8004226:	f7fe ffe5 	bl	80031f4 <System_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		switch(state)
 800422a:	4bb2      	ldr	r3, [pc, #712]	@ (80044f4 <main+0x318>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b03      	cmp	r3, #3
 8004230:	f200 82ae 	bhi.w	8004790 <main+0x5b4>
 8004234:	a201      	add	r2, pc, #4	@ (adr r2, 800423c <main+0x60>)
 8004236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423a:	bf00      	nop
 800423c:	0800424d 	.word	0x0800424d
 8004240:	0800436f 	.word	0x0800436f
 8004244:	08004385 	.word	0x08004385
 8004248:	08004667 	.word	0x08004667
		{
		case IDLE:
			if(flags.MQTT_Message_Rx)
 800424c:	4baa      	ldr	r3, [pc, #680]	@ (80044f8 <main+0x31c>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d068      	beq.n	800432c <main+0x150>
			{
				LED_Start(RED_LED, MEDIUM, HIGH);
 800425a:	2205      	movs	r2, #5
 800425c:	2101      	movs	r1, #1
 800425e:	2004      	movs	r0, #4
 8004260:	f7ff fa46 	bl	80036f0 <LED_Start>
				SIM_Parse_Command();
 8004264:	f7fd fc98 	bl	8001b98 <SIM_Parse_Command>
				flags.MQTT_Message_Rx = 0;
 8004268:	4aa3      	ldr	r2, [pc, #652]	@ (80044f8 <main+0x31c>)
 800426a:	7813      	ldrb	r3, [r2, #0]
 800426c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004270:	7013      	strb	r3, [r2, #0]
				if(flags.CMD.Start_Meas)
 8004272:	4ba1      	ldr	r3, [pc, #644]	@ (80044f8 <main+0x31c>)
 8004274:	789b      	ldrb	r3, [r3, #2]
 8004276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d008      	beq.n	8004292 <main+0xb6>
				{
					state = MEASURE_INIT_STATE;
 8004280:	4b9c      	ldr	r3, [pc, #624]	@ (80044f4 <main+0x318>)
 8004282:	2201      	movs	r2, #1
 8004284:	701a      	strb	r2, [r3, #0]
					flags.CMD.Start_Meas = 0;
 8004286:	4a9c      	ldr	r2, [pc, #624]	@ (80044f8 <main+0x31c>)
 8004288:	7893      	ldrb	r3, [r2, #2]
 800428a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800428e:	7093      	strb	r3, [r2, #2]
 8004290:	e048      	b.n	8004324 <main+0x148>
				}
				else if(flags.CMD.Set_Config)
 8004292:	4b99      	ldr	r3, [pc, #612]	@ (80044f8 <main+0x31c>)
 8004294:	789b      	ldrb	r3, [r3, #2]
 8004296:	f003 0310 	and.w	r3, r3, #16
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d007      	beq.n	80042b0 <main+0xd4>
				{
					Apply_Config();
 80042a0:	f002 fb40 	bl	8006924 <Apply_Config>
					flags.CMD.Set_Config = 0;
 80042a4:	4a94      	ldr	r2, [pc, #592]	@ (80044f8 <main+0x31c>)
 80042a6:	7893      	ldrb	r3, [r2, #2]
 80042a8:	f023 0310 	bic.w	r3, r3, #16
 80042ac:	7093      	strb	r3, [r2, #2]
 80042ae:	e039      	b.n	8004324 <main+0x148>
				}
				else if(flags.CMD.Get_Config)
 80042b0:	4b91      	ldr	r3, [pc, #580]	@ (80044f8 <main+0x31c>)
 80042b2:	789b      	ldrb	r3, [r3, #2]
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d007      	beq.n	80042ce <main+0xf2>
				{
					Get_Config();
 80042be:	f002 fccd 	bl	8006c5c <Get_Config>
					flags.CMD.Get_Config = 0;
 80042c2:	4a8d      	ldr	r2, [pc, #564]	@ (80044f8 <main+0x31c>)
 80042c4:	7893      	ldrb	r3, [r2, #2]
 80042c6:	f023 0320 	bic.w	r3, r3, #32
 80042ca:	7093      	strb	r3, [r2, #2]
 80042cc:	e02a      	b.n	8004324 <main+0x148>
				}
				else if(flags.CMD.Start_OTA)
 80042ce:	4b8a      	ldr	r3, [pc, #552]	@ (80044f8 <main+0x31c>)
 80042d0:	789b      	ldrb	r3, [r3, #2]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d015      	beq.n	8004308 <main+0x12c>
				{
					LED_Stop(GRN_LED);
 80042dc:	2008      	movs	r0, #8
 80042de:	f7ff faf9 	bl	80038d4 <LED_Stop>
					LED_Start(ORG_LED, FAST, FULL);
 80042e2:	2204      	movs	r2, #4
 80042e4:	2100      	movs	r1, #0
 80042e6:	2000      	movs	r0, #0
 80042e8:	f7ff fa02 	bl	80036f0 <LED_Start>
					LED_Start(RED_LED, FAST, HIGH);
 80042ec:	2205      	movs	r2, #5
 80042ee:	2100      	movs	r1, #0
 80042f0:	2004      	movs	r0, #4
 80042f2:	f7ff f9fd 	bl	80036f0 <LED_Start>
					state = OTA_STATE;
 80042f6:	4b7f      	ldr	r3, [pc, #508]	@ (80044f4 <main+0x318>)
 80042f8:	2203      	movs	r2, #3
 80042fa:	701a      	strb	r2, [r3, #0]
					flags.CMD.Start_OTA = 0;
 80042fc:	4a7e      	ldr	r2, [pc, #504]	@ (80044f8 <main+0x31c>)
 80042fe:	7893      	ldrb	r3, [r2, #2]
 8004300:	f023 0304 	bic.w	r3, r3, #4
 8004304:	7093      	strb	r3, [r2, #2]
 8004306:	e00d      	b.n	8004324 <main+0x148>
				}
				else if(flags.CMD.Ping)
 8004308:	4b7b      	ldr	r3, [pc, #492]	@ (80044f8 <main+0x31c>)
 800430a:	789b      	ldrb	r3, [r3, #2]
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d006      	beq.n	8004324 <main+0x148>
				{
					SIM_Send_Infos();
 8004316:	f7fd fef7 	bl	8002108 <SIM_Send_Infos>
					flags.CMD.Ping = 0;
 800431a:	4a77      	ldr	r2, [pc, #476]	@ (80044f8 <main+0x31c>)
 800431c:	7893      	ldrb	r3, [r2, #2]
 800431e:	f023 0308 	bic.w	r3, r3, #8
 8004322:	7093      	strb	r3, [r2, #2]
				}
				LED_Stop(RED_LED);
 8004324:	2004      	movs	r0, #4
 8004326:	f7ff fad5 	bl	80038d4 <LED_Stop>
				LED_Start(ORG_LED, MEDIUM, HALF);
				SIM_Check_Connection();
				sys.SIM_Connection_Status = HAL_GetTick();
				LED_Stop(ORG_LED);
			}
			break;
 800432a:	e233      	b.n	8004794 <main+0x5b8>
			else if(HAL_GetTick() - sys.SIM_Connection_Status > config.connection_timeout)                  // Controllo connessione MQTT e TCP ogni 60 secondi
 800432c:	f006 fe9e 	bl	800b06c <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	4b72      	ldr	r3, [pc, #456]	@ (80044fc <main+0x320>)
 8004334:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004338:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800433c:	1ad2      	subs	r2, r2, r3
 800433e:	4b70      	ldr	r3, [pc, #448]	@ (8004500 <main+0x324>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	429a      	cmp	r2, r3
 8004344:	f240 8226 	bls.w	8004794 <main+0x5b8>
				LED_Start(ORG_LED, MEDIUM, HALF);
 8004348:	2206      	movs	r2, #6
 800434a:	2101      	movs	r1, #1
 800434c:	2000      	movs	r0, #0
 800434e:	f7ff f9cf 	bl	80036f0 <LED_Start>
				SIM_Check_Connection();
 8004352:	f7fd ffed 	bl	8002330 <SIM_Check_Connection>
				sys.SIM_Connection_Status = HAL_GetTick();
 8004356:	f006 fe89 	bl	800b06c <HAL_GetTick>
 800435a:	4603      	mov	r3, r0
 800435c:	4a67      	ldr	r2, [pc, #412]	@ (80044fc <main+0x320>)
 800435e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004362:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
				LED_Stop(ORG_LED);
 8004366:	2000      	movs	r0, #0
 8004368:	f7ff fab4 	bl	80038d4 <LED_Stop>
			break;
 800436c:	e212      	b.n	8004794 <main+0x5b8>

		case MEASURE_INIT_STATE:
			Start_Measure();
 800436e:	f001 fd59 	bl	8005e24 <Start_Measure>
			LED_Start(GRN_LED, FAST, FULL);
 8004372:	2204      	movs	r2, #4
 8004374:	2100      	movs	r1, #0
 8004376:	2008      	movs	r0, #8
 8004378:	f7ff f9ba 	bl	80036f0 <LED_Start>
			state = MEASURING_STATE;
 800437c:	4b5d      	ldr	r3, [pc, #372]	@ (80044f4 <main+0x318>)
 800437e:	2202      	movs	r2, #2
 8004380:	701a      	strb	r2, [r3, #0]
			break;
 8004382:	e20a      	b.n	800479a <main+0x5be>

		case MEASURING_STATE:
			if(flags.ADC_Complete && flags.ACC_Complete)
 8004384:	4b5c      	ldr	r3, [pc, #368]	@ (80044f8 <main+0x31c>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 8202 	beq.w	8004798 <main+0x5bc>
 8004394:	4b58      	ldr	r3, [pc, #352]	@ (80044f8 <main+0x31c>)
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 81fa 	beq.w	8004798 <main+0x5bc>
			{
				Save_Data();
 80043a4:	f001 fa94 	bl	80058d0 <Save_Data>
				if(flags.BC_Interrupt)
 80043a8:	4b53      	ldr	r3, [pc, #332]	@ (80044f8 <main+0x31c>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	f003 0320 	and.w	r3, r3, #32
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d010      	beq.n	80043d8 <main+0x1fc>
				{
					BC_Read_Flags(&sys.BC_Flags);
 80043b6:	4853      	ldr	r0, [pc, #332]	@ (8004504 <main+0x328>)
 80043b8:	f7fe f9e2 	bl	8002780 <BC_Read_Flags>
					BC_Manage_Interrupts(sys.BC_Flags);
 80043bc:	4b4f      	ldr	r3, [pc, #316]	@ (80044fc <main+0x320>)
 80043be:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 80043c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80043c6:	4610      	mov	r0, r2
 80043c8:	4619      	mov	r1, r3
 80043ca:	f7fe fa87 	bl	80028dc <BC_Manage_Interrupts>
					flags.BC_Interrupt = 0;
 80043ce:	4a4a      	ldr	r2, [pc, #296]	@ (80044f8 <main+0x31c>)
 80043d0:	7813      	ldrb	r3, [r2, #0]
 80043d2:	f023 0320 	bic.w	r3, r3, #32
 80043d6:	7013      	strb	r3, [r2, #0]
				}
				if(flags.MQTT_Message_Rx)
 80043d8:	4b47      	ldr	r3, [pc, #284]	@ (80044f8 <main+0x31c>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00b      	beq.n	80043fe <main+0x222>
				{
					SIM_Parse_Command();
 80043e6:	f7fd fbd7 	bl	8001b98 <SIM_Parse_Command>
					flags.SIM_isConnected = 1;
 80043ea:	4a43      	ldr	r2, [pc, #268]	@ (80044f8 <main+0x31c>)
 80043ec:	7853      	ldrb	r3, [r2, #1]
 80043ee:	f043 0308 	orr.w	r3, r3, #8
 80043f2:	7053      	strb	r3, [r2, #1]
					flags.MQTT_Message_Rx = 0;
 80043f4:	4a40      	ldr	r2, [pc, #256]	@ (80044f8 <main+0x31c>)
 80043f6:	7813      	ldrb	r3, [r2, #0]
 80043f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043fc:	7013      	strb	r3, [r2, #0]
				}
				if(flags.CMD.Data_Request)
 80043fe:	4b3e      	ldr	r3, [pc, #248]	@ (80044f8 <main+0x31c>)
 8004400:	789b      	ldrb	r3, [r3, #2]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d055      	beq.n	80044b8 <main+0x2dc>
				{
					LED_Start(ORG_LED, FAST, HIGH);
 800440c:	2205      	movs	r2, #5
 800440e:	2100      	movs	r1, #0
 8004410:	2000      	movs	r0, #0
 8004412:	f7ff f96d 	bl	80036f0 <LED_Start>
					sprintf(MQTT_Logging, "%u,%u,%lu,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", config.device_id, Last_Pressure, Last_Volume, Last_Acceleration.x, Last_Acceleration.y, Last_Acceleration.z, Vbatt, Supply.i1, Supply.i2, Supply.i3, Supply.v1, Supply.v2, Supply.v3, Temperature);
 8004416:	4b3a      	ldr	r3, [pc, #232]	@ (8004500 <main+0x324>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	469c      	mov	ip, r3
 800441c:	4b3a      	ldr	r3, [pc, #232]	@ (8004508 <main+0x32c>)
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	469e      	mov	lr, r3
 8004422:	4b3a      	ldr	r3, [pc, #232]	@ (800450c <main+0x330>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	4b3a      	ldr	r3, [pc, #232]	@ (8004510 <main+0x334>)
 8004428:	885b      	ldrh	r3, [r3, #2]
 800442a:	4619      	mov	r1, r3
 800442c:	4b38      	ldr	r3, [pc, #224]	@ (8004510 <main+0x334>)
 800442e:	889b      	ldrh	r3, [r3, #4]
 8004430:	4618      	mov	r0, r3
 8004432:	4b37      	ldr	r3, [pc, #220]	@ (8004510 <main+0x334>)
 8004434:	88db      	ldrh	r3, [r3, #6]
 8004436:	461c      	mov	r4, r3
 8004438:	4b36      	ldr	r3, [pc, #216]	@ (8004514 <main+0x338>)
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	461d      	mov	r5, r3
 800443e:	4b36      	ldr	r3, [pc, #216]	@ (8004518 <main+0x33c>)
 8004440:	88db      	ldrh	r3, [r3, #6]
 8004442:	461e      	mov	r6, r3
 8004444:	4b34      	ldr	r3, [pc, #208]	@ (8004518 <main+0x33c>)
 8004446:	891b      	ldrh	r3, [r3, #8]
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	4b33      	ldr	r3, [pc, #204]	@ (8004518 <main+0x33c>)
 800444c:	895b      	ldrh	r3, [r3, #10]
 800444e:	613b      	str	r3, [r7, #16]
 8004450:	4b31      	ldr	r3, [pc, #196]	@ (8004518 <main+0x33c>)
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	4b30      	ldr	r3, [pc, #192]	@ (8004518 <main+0x33c>)
 8004458:	885b      	ldrh	r3, [r3, #2]
 800445a:	60bb      	str	r3, [r7, #8]
 800445c:	4b2e      	ldr	r3, [pc, #184]	@ (8004518 <main+0x33c>)
 800445e:	889b      	ldrh	r3, [r3, #4]
 8004460:	607b      	str	r3, [r7, #4]
 8004462:	4b2e      	ldr	r3, [pc, #184]	@ (800451c <main+0x340>)
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	930a      	str	r3, [sp, #40]	@ 0x28
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	9308      	str	r3, [sp, #32]
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	9307      	str	r3, [sp, #28]
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	9306      	str	r3, [sp, #24]
 800447c:	9605      	str	r6, [sp, #20]
 800447e:	9504      	str	r5, [sp, #16]
 8004480:	9403      	str	r4, [sp, #12]
 8004482:	9002      	str	r0, [sp, #8]
 8004484:	9101      	str	r1, [sp, #4]
 8004486:	9200      	str	r2, [sp, #0]
 8004488:	4673      	mov	r3, lr
 800448a:	4662      	mov	r2, ip
 800448c:	4924      	ldr	r1, [pc, #144]	@ (8004520 <main+0x344>)
 800448e:	4825      	ldr	r0, [pc, #148]	@ (8004524 <main+0x348>)
 8004490:	f011 fe3c 	bl	801610c <siprintf>
					SIM_publish_MQTT_Message_DMA(NULL, MQTT_Logging);
 8004494:	4923      	ldr	r1, [pc, #140]	@ (8004524 <main+0x348>)
 8004496:	2000      	movs	r0, #0
 8004498:	f7fd fd6c 	bl	8001f74 <SIM_publish_MQTT_Message_DMA>
					sys.SIM_Prompt_Status = HAL_GetTick();
 800449c:	f006 fde6 	bl	800b06c <HAL_GetTick>
 80044a0:	4603      	mov	r3, r0
 80044a2:	4a16      	ldr	r2, [pc, #88]	@ (80044fc <main+0x320>)
 80044a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044a8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
					flags.CMD.Data_Request = 0;
 80044ac:	4a12      	ldr	r2, [pc, #72]	@ (80044f8 <main+0x31c>)
 80044ae:	7893      	ldrb	r3, [r2, #2]
 80044b0:	f023 0301 	bic.w	r3, r3, #1
 80044b4:	7093      	strb	r3, [r2, #2]
 80044b6:	e07d      	b.n	80045b4 <main+0x3d8>
				}
				else if(flags.CMD.Idle)
 80044b8:	4b0f      	ldr	r3, [pc, #60]	@ (80044f8 <main+0x31c>)
 80044ba:	789b      	ldrb	r3, [r3, #2]
 80044bc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d030      	beq.n	8004528 <main+0x34c>
				{
					LED_Stop(ORG_LED);
 80044c6:	2000      	movs	r0, #0
 80044c8:	f7ff fa04 	bl	80038d4 <LED_Stop>
					LED_Stop(RED_LED);
 80044cc:	2004      	movs	r0, #4
 80044ce:	f7ff fa01 	bl	80038d4 <LED_Stop>
					LED_Start(GRN_LED, MEDIUM, HALF);
 80044d2:	2206      	movs	r2, #6
 80044d4:	2101      	movs	r1, #1
 80044d6:	2008      	movs	r0, #8
 80044d8:	f7ff f90a 	bl	80036f0 <LED_Start>
					state = IDLE;
 80044dc:	4b05      	ldr	r3, [pc, #20]	@ (80044f4 <main+0x318>)
 80044de:	2200      	movs	r2, #0
 80044e0:	701a      	strb	r2, [r3, #0]
					Stop_Measure();
 80044e2:	f001 fd5d 	bl	8005fa0 <Stop_Measure>
					flags.CMD.Idle = 0;
 80044e6:	4a04      	ldr	r2, [pc, #16]	@ (80044f8 <main+0x31c>)
 80044e8:	7893      	ldrb	r3, [r2, #2]
 80044ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044ee:	7093      	strb	r3, [r2, #2]
 80044f0:	e060      	b.n	80045b4 <main+0x3d8>
 80044f2:	bf00      	nop
 80044f4:	2000083c 	.word	0x2000083c
 80044f8:	20001d68 	.word	0x20001d68
 80044fc:	20000840 	.word	0x20000840
 8004500:	20001d6c 	.word	0x20001d6c
 8004504:	20001878 	.word	0x20001878
 8004508:	20004814 	.word	0x20004814
 800450c:	20004818 	.word	0x20004818
 8004510:	2000481c 	.word	0x2000481c
 8004514:	20004826 	.word	0x20004826
 8004518:	20003f44 	.word	0x20003f44
 800451c:	20004824 	.word	0x20004824
 8004520:	080176d4 	.word	0x080176d4
 8004524:	20004828 	.word	0x20004828
				}
				else if(flags.CMD.Measure_Request)
 8004528:	4b9c      	ldr	r3, [pc, #624]	@ (800479c <main+0x5c0>)
 800452a:	789b      	ldrb	r3, [r3, #2]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d03e      	beq.n	80045b4 <main+0x3d8>
				{
					if(!flags.TCP_isSending)
 8004536:	4b99      	ldr	r3, [pc, #612]	@ (800479c <main+0x5c0>)
 8004538:	785b      	ldrb	r3, [r3, #1]
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	d137      	bne.n	80045b4 <main+0x3d8>
					{
						Send_Measure_Addr = Send_Measure_Chunk(sys.RAM_Buffer_Base_tosend, sys.Inactive_RAM_Len, Send_Measure_Addr);
 8004544:	4b96      	ldr	r3, [pc, #600]	@ (80047a0 <main+0x5c4>)
 8004546:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800454a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800454e:	4a94      	ldr	r2, [pc, #592]	@ (80047a0 <main+0x5c4>)
 8004550:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004554:	f8d2 10d0 	ldr.w	r1, [r2, #208]	@ 0xd0
 8004558:	4a92      	ldr	r2, [pc, #584]	@ (80047a4 <main+0x5c8>)
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f001 fe01 	bl	8006164 <Send_Measure_Chunk>
 8004562:	4603      	mov	r3, r0
 8004564:	4a8f      	ldr	r2, [pc, #572]	@ (80047a4 <main+0x5c8>)
 8004566:	6013      	str	r3, [r2, #0]
						if(flags.TCP_ReadytoSend)
 8004568:	4b8c      	ldr	r3, [pc, #560]	@ (800479c <main+0x5c0>)
 800456a:	785b      	ldrb	r3, [r3, #1]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d01e      	beq.n	80045b4 <main+0x3d8>
						{
							SIM_Send_Command_DMA((char*)tcp_chunk);
 8004576:	488c      	ldr	r0, [pc, #560]	@ (80047a8 <main+0x5cc>)
 8004578:	f7fd fa70 	bl	8001a5c <SIM_Send_Command_DMA>
							flags.TCP_isSending = 1;
 800457c:	4a87      	ldr	r2, [pc, #540]	@ (800479c <main+0x5c0>)
 800457e:	7853      	ldrb	r3, [r2, #1]
 8004580:	f043 0304 	orr.w	r3, r3, #4
 8004584:	7053      	strb	r3, [r2, #1]
							flags.TCP_ReadytoSend = 0;
 8004586:	4a85      	ldr	r2, [pc, #532]	@ (800479c <main+0x5c0>)
 8004588:	7853      	ldrb	r3, [r2, #1]
 800458a:	f023 0302 	bic.w	r3, r3, #2
 800458e:	7053      	strb	r3, [r2, #1]
							if (Send_Measure_Addr == 0)
 8004590:	4b84      	ldr	r3, [pc, #528]	@ (80047a4 <main+0x5c8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10d      	bne.n	80045b4 <main+0x3d8>
							{
								memset(tcp_chunk, 0, 1460);
 8004598:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800459c:	2100      	movs	r1, #0
 800459e:	4882      	ldr	r0, [pc, #520]	@ (80047a8 <main+0x5cc>)
 80045a0:	f011 fe14 	bl	80161cc <memset>
								LED_Stop(RED_LED);
 80045a4:	2004      	movs	r0, #4
 80045a6:	f7ff f995 	bl	80038d4 <LED_Stop>
								flags.CMD.Measure_Request = 0;
 80045aa:	4a7c      	ldr	r2, [pc, #496]	@ (800479c <main+0x5c0>)
 80045ac:	7893      	ldrb	r3, [r2, #2]
 80045ae:	f023 0302 	bic.w	r3, r3, #2
 80045b2:	7093      	strb	r3, [r2, #2]
							}
						}
					}
				}
				if(flags.MQTT_ReadytoSend)
 80045b4:	4b79      	ldr	r3, [pc, #484]	@ (800479c <main+0x5c0>)
 80045b6:	785b      	ldrb	r3, [r3, #1]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <main+0x3fc>
				{
					SIM_Send_Command_DMA(MQTT_Logging);
 80045c2:	487a      	ldr	r0, [pc, #488]	@ (80047ac <main+0x5d0>)
 80045c4:	f7fd fa4a 	bl	8001a5c <SIM_Send_Command_DMA>
					LED_Stop(ORG_LED);
 80045c8:	2000      	movs	r0, #0
 80045ca:	f7ff f983 	bl	80038d4 <LED_Stop>
					flags.MQTT_ReadytoSend = 0;
 80045ce:	4a73      	ldr	r2, [pc, #460]	@ (800479c <main+0x5c0>)
 80045d0:	7853      	ldrb	r3, [r2, #1]
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	7053      	strb	r3, [r2, #1]
				}
				if(sys.SIM_Prompt_Status > 0 && (HAL_GetTick() - sys.SIM_Prompt_Status) > SIM_PROMPT_TIMEOUT_MS)
 80045d8:	4b71      	ldr	r3, [pc, #452]	@ (80047a0 <main+0x5c4>)
 80045da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d018      	beq.n	8004618 <main+0x43c>
 80045e6:	f006 fd41 	bl	800b06c <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	4b6c      	ldr	r3, [pc, #432]	@ (80047a0 <main+0x5c4>)
 80045ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d90b      	bls.n	8004618 <main+0x43c>
				{
					flags.CMD.Data_Request = 1;
 8004600:	4a66      	ldr	r2, [pc, #408]	@ (800479c <main+0x5c0>)
 8004602:	7893      	ldrb	r3, [r2, #2]
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	7093      	strb	r3, [r2, #2]
					sys.SIM_Prompt_Status = 0;
 800460a:	4b65      	ldr	r3, [pc, #404]	@ (80047a0 <main+0x5c4>)
 800460c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004610:	461a      	mov	r2, r3
 8004612:	2300      	movs	r3, #0
 8004614:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
				}
				if(HAL_GetTick() - sys.SIM_Connection_Status > config.connection_timeout)
 8004618:	f006 fd28 	bl	800b06c <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	4b60      	ldr	r3, [pc, #384]	@ (80047a0 <main+0x5c4>)
 8004620:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004624:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004628:	1ad2      	subs	r2, r2, r3
 800462a:	4b61      	ldr	r3, [pc, #388]	@ (80047b0 <main+0x5d4>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	429a      	cmp	r2, r3
 8004630:	f240 80b2 	bls.w	8004798 <main+0x5bc>
				{
					sys.SIM_Connection_Status = HAL_GetTick();
 8004634:	f006 fd1a 	bl	800b06c <HAL_GetTick>
 8004638:	4603      	mov	r3, r0
 800463a:	4a59      	ldr	r2, [pc, #356]	@ (80047a0 <main+0x5c4>)
 800463c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004640:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
					if(flags.SIM_isConnected)
 8004644:	4b55      	ldr	r3, [pc, #340]	@ (800479c <main+0x5c0>)
 8004646:	785b      	ldrb	r3, [r3, #1]
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <main+0x482>
					{
						flags.SIM_isConnected = 0;
 8004652:	4a52      	ldr	r2, [pc, #328]	@ (800479c <main+0x5c0>)
 8004654:	7853      	ldrb	r3, [r2, #1]
 8004656:	f023 0308 	bic.w	r3, r3, #8
 800465a:	7053      	strb	r3, [r2, #1]
					{
						state = IDLE;
					}
				}
			}
			break;
 800465c:	e09c      	b.n	8004798 <main+0x5bc>
						state = IDLE;
 800465e:	4b55      	ldr	r3, [pc, #340]	@ (80047b4 <main+0x5d8>)
 8004660:	2200      	movs	r2, #0
 8004662:	701a      	strb	r2, [r3, #0]
			break;
 8004664:	e098      	b.n	8004798 <main+0x5bc>

		case OTA_STATE:
			if(OTA_Init() == HAL_OK)
 8004666:	f000 fe8f 	bl	8005388 <OTA_Init>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d176      	bne.n	800475e <main+0x582>
			{
				HAL_UART_DMAStop(SIM_UART);
 8004670:	4851      	ldr	r0, [pc, #324]	@ (80047b8 <main+0x5dc>)
 8004672:	f010 fbd1 	bl	8014e18 <HAL_UART_DMAStop>
				HAL_Delay(100);
 8004676:	2064      	movs	r0, #100	@ 0x64
 8004678:	f006 fd04 	bl	800b084 <HAL_Delay>
				SIM_publish_MQTT_Message(sys.MQTT.OTA_Topic, "OTA_READY");
 800467c:	494f      	ldr	r1, [pc, #316]	@ (80047bc <main+0x5e0>)
 800467e:	4850      	ldr	r0, [pc, #320]	@ (80047c0 <main+0x5e4>)
 8004680:	f7fd fcc2 	bl	8002008 <SIM_publish_MQTT_Message>
				if(OTA_Receive() == HAL_OK)
 8004684:	f000 feac 	bl	80053e0 <OTA_Receive>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d14e      	bne.n	800472c <main+0x550>
				{
					SIM_publish_MQTT_Message(sys.MQTT.OTA_Topic, "OTA_RECEIVED");
 800468e:	494d      	ldr	r1, [pc, #308]	@ (80047c4 <main+0x5e8>)
 8004690:	484b      	ldr	r0, [pc, #300]	@ (80047c0 <main+0x5e4>)
 8004692:	f7fd fcb9 	bl	8002008 <SIM_publish_MQTT_Message>
					if(OTA_CRC_Check() == HAL_OK)
 8004696:	f000 ff45 	bl	8005524 <OTA_CRC_Check>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d109      	bne.n	80046b4 <main+0x4d8>
					{
						SIM_publish_MQTT_Message(sys.MQTT.OTA_Topic, "OTA_CRC_OK");
 80046a0:	4949      	ldr	r1, [pc, #292]	@ (80047c8 <main+0x5ec>)
 80046a2:	4847      	ldr	r0, [pc, #284]	@ (80047c0 <main+0x5e4>)
 80046a4:	f7fd fcb0 	bl	8002008 <SIM_publish_MQTT_Message>
						LED_Start(GRN_LED, MEDIUM, HALF);
						state = IDLE;
						break;
					}

					if(OTA_Apply() == HAL_OK)
 80046a8:	f001 f814 	bl	80056d4 <OTA_Apply>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d123      	bne.n	80046fa <main+0x51e>
 80046b2:	e018      	b.n	80046e6 <main+0x50a>
						SIM_publish_MQTT_Message(sys.MQTT.OTA_Topic, "OTA_CRC_ERROR");
 80046b4:	4945      	ldr	r1, [pc, #276]	@ (80047cc <main+0x5f0>)
 80046b6:	4842      	ldr	r0, [pc, #264]	@ (80047c0 <main+0x5e4>)
 80046b8:	f7fd fca6 	bl	8002008 <SIM_publish_MQTT_Message>
						HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 80046bc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80046c0:	4943      	ldr	r1, [pc, #268]	@ (80047d0 <main+0x5f4>)
 80046c2:	483d      	ldr	r0, [pc, #244]	@ (80047b8 <main+0x5dc>)
 80046c4:	f011 fc44 	bl	8015f50 <HAL_UARTEx_ReceiveToIdle_DMA>
						LED_Stop(ORG_LED);
 80046c8:	2000      	movs	r0, #0
 80046ca:	f7ff f903 	bl	80038d4 <LED_Stop>
						LED_Stop(RED_LED);
 80046ce:	2004      	movs	r0, #4
 80046d0:	f7ff f900 	bl	80038d4 <LED_Stop>
						LED_Start(GRN_LED, MEDIUM, HALF);
 80046d4:	2206      	movs	r2, #6
 80046d6:	2101      	movs	r1, #1
 80046d8:	2008      	movs	r0, #8
 80046da:	f7ff f809 	bl	80036f0 <LED_Start>
						state = IDLE;
 80046de:	4b35      	ldr	r3, [pc, #212]	@ (80047b4 <main+0x5d8>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	701a      	strb	r2, [r3, #0]
						break;
 80046e4:	e059      	b.n	800479a <main+0x5be>
					{
						SIM_publish_MQTT_Message(sys.MQTT.OTA_Topic, "OTA_SUCCESS");
 80046e6:	493b      	ldr	r1, [pc, #236]	@ (80047d4 <main+0x5f8>)
 80046e8:	4835      	ldr	r0, [pc, #212]	@ (80047c0 <main+0x5e4>)
 80046ea:	f7fd fc8d 	bl	8002008 <SIM_publish_MQTT_Message>
						HAL_Delay(500);
 80046ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80046f2:	f006 fcc7 	bl	800b084 <HAL_Delay>
						NVIC_SystemReset();
 80046f6:	f7ff fd5b 	bl	80041b0 <__NVIC_SystemReset>
					}
					else
					{
						SIM_publish_MQTT_Message(sys.MQTT.OTA_Topic, "OTA_APPLY_ERROR");
 80046fa:	4937      	ldr	r1, [pc, #220]	@ (80047d8 <main+0x5fc>)
 80046fc:	4830      	ldr	r0, [pc, #192]	@ (80047c0 <main+0x5e4>)
 80046fe:	f7fd fc83 	bl	8002008 <SIM_publish_MQTT_Message>
						HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8004702:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004706:	4932      	ldr	r1, [pc, #200]	@ (80047d0 <main+0x5f4>)
 8004708:	482b      	ldr	r0, [pc, #172]	@ (80047b8 <main+0x5dc>)
 800470a:	f011 fc21 	bl	8015f50 <HAL_UARTEx_ReceiveToIdle_DMA>
						LED_Stop(ORG_LED);
 800470e:	2000      	movs	r0, #0
 8004710:	f7ff f8e0 	bl	80038d4 <LED_Stop>
						LED_Stop(RED_LED);
 8004714:	2004      	movs	r0, #4
 8004716:	f7ff f8dd 	bl	80038d4 <LED_Stop>
						LED_Start(GRN_LED, MEDIUM, HALF);
 800471a:	2206      	movs	r2, #6
 800471c:	2101      	movs	r1, #1
 800471e:	2008      	movs	r0, #8
 8004720:	f7fe ffe6 	bl	80036f0 <LED_Start>
						state = IDLE;
 8004724:	4b23      	ldr	r3, [pc, #140]	@ (80047b4 <main+0x5d8>)
 8004726:	2200      	movs	r2, #0
 8004728:	701a      	strb	r2, [r3, #0]
				LED_Stop(ORG_LED);
				LED_Stop(RED_LED);
				LED_Start(GRN_LED, MEDIUM, HALF);
				state = IDLE;
			}
			break;
 800472a:	e036      	b.n	800479a <main+0x5be>
					SIM_publish_MQTT_Message(sys.MQTT.OTA_Topic, "OTA_RECEIVE_ERROR");
 800472c:	492b      	ldr	r1, [pc, #172]	@ (80047dc <main+0x600>)
 800472e:	4824      	ldr	r0, [pc, #144]	@ (80047c0 <main+0x5e4>)
 8004730:	f7fd fc6a 	bl	8002008 <SIM_publish_MQTT_Message>
					HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8004734:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004738:	4925      	ldr	r1, [pc, #148]	@ (80047d0 <main+0x5f4>)
 800473a:	481f      	ldr	r0, [pc, #124]	@ (80047b8 <main+0x5dc>)
 800473c:	f011 fc08 	bl	8015f50 <HAL_UARTEx_ReceiveToIdle_DMA>
					LED_Stop(ORG_LED);
 8004740:	2000      	movs	r0, #0
 8004742:	f7ff f8c7 	bl	80038d4 <LED_Stop>
					LED_Stop(RED_LED);
 8004746:	2004      	movs	r0, #4
 8004748:	f7ff f8c4 	bl	80038d4 <LED_Stop>
					LED_Start(GRN_LED, MEDIUM, HALF);
 800474c:	2206      	movs	r2, #6
 800474e:	2101      	movs	r1, #1
 8004750:	2008      	movs	r0, #8
 8004752:	f7fe ffcd 	bl	80036f0 <LED_Start>
					state = IDLE;
 8004756:	4b17      	ldr	r3, [pc, #92]	@ (80047b4 <main+0x5d8>)
 8004758:	2200      	movs	r2, #0
 800475a:	701a      	strb	r2, [r3, #0]
			break;
 800475c:	e01d      	b.n	800479a <main+0x5be>
				SIM_publish_MQTT_Message(sys.MQTT.OTA_Topic, "OTA_INIT_ERROR");
 800475e:	4920      	ldr	r1, [pc, #128]	@ (80047e0 <main+0x604>)
 8004760:	4817      	ldr	r0, [pc, #92]	@ (80047c0 <main+0x5e4>)
 8004762:	f7fd fc51 	bl	8002008 <SIM_publish_MQTT_Message>
				HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8004766:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800476a:	4919      	ldr	r1, [pc, #100]	@ (80047d0 <main+0x5f4>)
 800476c:	4812      	ldr	r0, [pc, #72]	@ (80047b8 <main+0x5dc>)
 800476e:	f011 fbef 	bl	8015f50 <HAL_UARTEx_ReceiveToIdle_DMA>
				LED_Stop(ORG_LED);
 8004772:	2000      	movs	r0, #0
 8004774:	f7ff f8ae 	bl	80038d4 <LED_Stop>
				LED_Stop(RED_LED);
 8004778:	2004      	movs	r0, #4
 800477a:	f7ff f8ab 	bl	80038d4 <LED_Stop>
				LED_Start(GRN_LED, MEDIUM, HALF);
 800477e:	2206      	movs	r2, #6
 8004780:	2101      	movs	r1, #1
 8004782:	2008      	movs	r0, #8
 8004784:	f7fe ffb4 	bl	80036f0 <LED_Start>
				state = IDLE;
 8004788:	4b0a      	ldr	r3, [pc, #40]	@ (80047b4 <main+0x5d8>)
 800478a:	2200      	movs	r2, #0
 800478c:	701a      	strb	r2, [r3, #0]
			break;
 800478e:	e004      	b.n	800479a <main+0x5be>

		default:
			break;
 8004790:	bf00      	nop
 8004792:	e54a      	b.n	800422a <main+0x4e>
			break;
 8004794:	bf00      	nop
 8004796:	e548      	b.n	800422a <main+0x4e>
			break;
 8004798:	bf00      	nop
		switch(state)
 800479a:	e546      	b.n	800422a <main+0x4e>
 800479c:	20001d68 	.word	0x20001d68
 80047a0:	20000840 	.word	0x20000840
 80047a4:	20004fcc 	.word	0x20004fcc
 80047a8:	20004fd0 	.word	0x20004fd0
 80047ac:	20004828 	.word	0x20004828
 80047b0:	20001d6c 	.word	0x20001d6c
 80047b4:	2000083c 	.word	0x2000083c
 80047b8:	20000724 	.word	0x20000724
 80047bc:	08017700 	.word	0x08017700
 80047c0:	20001bd8 	.word	0x20001bd8
 80047c4:	0801770c 	.word	0x0801770c
 80047c8:	0801771c 	.word	0x0801771c
 80047cc:	08017728 	.word	0x08017728
 80047d0:	200055f8 	.word	0x200055f8
 80047d4:	08017738 	.word	0x08017738
 80047d8:	08017744 	.word	0x08017744
 80047dc:	08017754 	.word	0x08017754
 80047e0:	08017768 	.word	0x08017768

080047e4 <SystemClock_Config>:
	/**
	 * @brief System Clock Configuration
	 * @retval None
	 */
	void SystemClock_Config(void)
	{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b096      	sub	sp, #88	@ 0x58
 80047e8:	af00      	add	r7, sp, #0
		RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047ea:	f107 0314 	add.w	r3, r7, #20
 80047ee:	2244      	movs	r2, #68	@ 0x44
 80047f0:	2100      	movs	r1, #0
 80047f2:	4618      	mov	r0, r3
 80047f4:	f011 fcea 	bl	80161cc <memset>
		RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047f8:	463b      	mov	r3, r7
 80047fa:	2200      	movs	r2, #0
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	605a      	str	r2, [r3, #4]
 8004800:	609a      	str	r2, [r3, #8]
 8004802:	60da      	str	r2, [r3, #12]
 8004804:	611a      	str	r2, [r3, #16]

		/** Configure the main internal regulator output voltage
		 */
		if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004806:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800480a:	f00a fc1b 	bl	800f044 <HAL_PWREx_ControlVoltageScaling>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <SystemClock_Config+0x34>
		{
			Error_Handler();
 8004814:	f000 fdb2 	bl	800537c <Error_Handler>
		}

		/** Initializes the RCC Oscillators according to the specified parameters
		 * in the RCC_OscInitTypeDef structure.
		 */
		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004818:	2309      	movs	r3, #9
 800481a:	617b      	str	r3, [r7, #20]
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800481c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004820:	61bb      	str	r3, [r7, #24]
		RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004822:	2301      	movs	r3, #1
 8004824:	62bb      	str	r3, [r7, #40]	@ 0x28
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004826:	2302      	movs	r3, #2
 8004828:	63fb      	str	r3, [r7, #60]	@ 0x3c
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800482a:	2303      	movs	r3, #3
 800482c:	643b      	str	r3, [r7, #64]	@ 0x40
		RCC_OscInitStruct.PLL.PLLM = 1;
 800482e:	2301      	movs	r3, #1
 8004830:	647b      	str	r3, [r7, #68]	@ 0x44
		RCC_OscInitStruct.PLL.PLLN = 20;
 8004832:	2314      	movs	r3, #20
 8004834:	64bb      	str	r3, [r7, #72]	@ 0x48
		RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004836:	2307      	movs	r3, #7
 8004838:	64fb      	str	r3, [r7, #76]	@ 0x4c
		RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800483a:	2302      	movs	r3, #2
 800483c:	653b      	str	r3, [r7, #80]	@ 0x50
		RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800483e:	2302      	movs	r3, #2
 8004840:	657b      	str	r3, [r7, #84]	@ 0x54
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004842:	f107 0314 	add.w	r3, r7, #20
 8004846:	4618      	mov	r0, r3
 8004848:	f00b f8b4 	bl	800f9b4 <HAL_RCC_OscConfig>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <SystemClock_Config+0x72>
		{
			Error_Handler();
 8004852:	f000 fd93 	bl	800537c <Error_Handler>
		}

		/** Initializes the CPU, AHB and APB buses clocks
		 */
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004856:	230f      	movs	r3, #15
 8004858:	603b      	str	r3, [r7, #0]
				|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800485a:	2303      	movs	r3, #3
 800485c:	607b      	str	r3, [r7, #4]
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800485e:	2300      	movs	r3, #0
 8004860:	60bb      	str	r3, [r7, #8]
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004866:	2300      	movs	r3, #0
 8004868:	613b      	str	r3, [r7, #16]

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800486a:	463b      	mov	r3, r7
 800486c:	2104      	movs	r1, #4
 800486e:	4618      	mov	r0, r3
 8004870:	f00b fc7c 	bl	801016c <HAL_RCC_ClockConfig>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <SystemClock_Config+0x9a>
		{
			Error_Handler();
 800487a:	f000 fd7f 	bl	800537c <Error_Handler>
		}
	}
 800487e:	bf00      	nop
 8004880:	3758      	adds	r7, #88	@ 0x58
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <MX_ADC1_Init>:
	 * @brief ADC1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_ADC1_Init(void)
	{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08a      	sub	sp, #40	@ 0x28
 800488c:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN ADC1_Init 0 */

		/* USER CODE END ADC1_Init 0 */

		ADC_MultiModeTypeDef multimode = {0};
 800488e:	f107 031c 	add.w	r3, r7, #28
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	605a      	str	r2, [r3, #4]
 8004898:	609a      	str	r2, [r3, #8]
		ADC_ChannelConfTypeDef sConfig = {0};
 800489a:	1d3b      	adds	r3, r7, #4
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	605a      	str	r2, [r3, #4]
 80048a2:	609a      	str	r2, [r3, #8]
 80048a4:	60da      	str	r2, [r3, #12]
 80048a6:	611a      	str	r2, [r3, #16]
 80048a8:	615a      	str	r2, [r3, #20]

		/* USER CODE END ADC1_Init 1 */

		/** Common config
		 */
		hadc1.Instance = ADC1;
 80048aa:	4b30      	ldr	r3, [pc, #192]	@ (800496c <MX_ADC1_Init+0xe4>)
 80048ac:	4a30      	ldr	r2, [pc, #192]	@ (8004970 <MX_ADC1_Init+0xe8>)
 80048ae:	601a      	str	r2, [r3, #0]
		hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80048b0:	4b2e      	ldr	r3, [pc, #184]	@ (800496c <MX_ADC1_Init+0xe4>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	605a      	str	r2, [r3, #4]
		hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80048b6:	4b2d      	ldr	r3, [pc, #180]	@ (800496c <MX_ADC1_Init+0xe4>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	609a      	str	r2, [r3, #8]
		hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80048bc:	4b2b      	ldr	r3, [pc, #172]	@ (800496c <MX_ADC1_Init+0xe4>)
 80048be:	2200      	movs	r2, #0
 80048c0:	60da      	str	r2, [r3, #12]
		hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80048c2:	4b2a      	ldr	r3, [pc, #168]	@ (800496c <MX_ADC1_Init+0xe4>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	611a      	str	r2, [r3, #16]
		hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80048c8:	4b28      	ldr	r3, [pc, #160]	@ (800496c <MX_ADC1_Init+0xe4>)
 80048ca:	2208      	movs	r2, #8
 80048cc:	615a      	str	r2, [r3, #20]
		hadc1.Init.LowPowerAutoWait = DISABLE;
 80048ce:	4b27      	ldr	r3, [pc, #156]	@ (800496c <MX_ADC1_Init+0xe4>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	761a      	strb	r2, [r3, #24]
		hadc1.Init.ContinuousConvMode = DISABLE;
 80048d4:	4b25      	ldr	r3, [pc, #148]	@ (800496c <MX_ADC1_Init+0xe4>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	765a      	strb	r2, [r3, #25]
		hadc1.Init.NbrOfConversion = 1;
 80048da:	4b24      	ldr	r3, [pc, #144]	@ (800496c <MX_ADC1_Init+0xe4>)
 80048dc:	2201      	movs	r2, #1
 80048de:	61da      	str	r2, [r3, #28]
		hadc1.Init.DiscontinuousConvMode = DISABLE;
 80048e0:	4b22      	ldr	r3, [pc, #136]	@ (800496c <MX_ADC1_Init+0xe4>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2020 	strb.w	r2, [r3, #32]
		hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 80048e8:	4b20      	ldr	r3, [pc, #128]	@ (800496c <MX_ADC1_Init+0xe4>)
 80048ea:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80048ee:	629a      	str	r2, [r3, #40]	@ 0x28
		hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80048f0:	4b1e      	ldr	r3, [pc, #120]	@ (800496c <MX_ADC1_Init+0xe4>)
 80048f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80048f6:	62da      	str	r2, [r3, #44]	@ 0x2c
		hadc1.Init.DMAContinuousRequests = ENABLE;
 80048f8:	4b1c      	ldr	r3, [pc, #112]	@ (800496c <MX_ADC1_Init+0xe4>)
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004900:	4b1a      	ldr	r3, [pc, #104]	@ (800496c <MX_ADC1_Init+0xe4>)
 8004902:	2200      	movs	r2, #0
 8004904:	635a      	str	r2, [r3, #52]	@ 0x34
		hadc1.Init.OversamplingMode = DISABLE;
 8004906:	4b19      	ldr	r3, [pc, #100]	@ (800496c <MX_ADC1_Init+0xe4>)
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800490e:	4817      	ldr	r0, [pc, #92]	@ (800496c <MX_ADC1_Init+0xe4>)
 8004910:	f006 fe00 	bl	800b514 <HAL_ADC_Init>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <MX_ADC1_Init+0x96>
		{
			Error_Handler();
 800491a:	f000 fd2f 	bl	800537c <Error_Handler>
		}

		/** Configure the ADC multi-mode
		 */
		multimode.Mode = ADC_MODE_INDEPENDENT;
 800491e:	2300      	movs	r3, #0
 8004920:	61fb      	str	r3, [r7, #28]
		if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004922:	f107 031c 	add.w	r3, r7, #28
 8004926:	4619      	mov	r1, r3
 8004928:	4810      	ldr	r0, [pc, #64]	@ (800496c <MX_ADC1_Init+0xe4>)
 800492a:	f007 feb9 	bl	800c6a0 <HAL_ADCEx_MultiModeConfigChannel>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <MX_ADC1_Init+0xb0>
		{
			Error_Handler();
 8004934:	f000 fd22 	bl	800537c <Error_Handler>
		}

		/** Configure Regular Channel
		 */
		sConfig.Channel = ADC_CHANNEL_9;
 8004938:	4b0e      	ldr	r3, [pc, #56]	@ (8004974 <MX_ADC1_Init+0xec>)
 800493a:	607b      	str	r3, [r7, #4]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 800493c:	2306      	movs	r3, #6
 800493e:	60bb      	str	r3, [r7, #8]
		sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8004940:	2300      	movs	r3, #0
 8004942:	60fb      	str	r3, [r7, #12]
		sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004944:	237f      	movs	r3, #127	@ 0x7f
 8004946:	613b      	str	r3, [r7, #16]
		sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004948:	2304      	movs	r3, #4
 800494a:	617b      	str	r3, [r7, #20]
		sConfig.Offset = 0;
 800494c:	2300      	movs	r3, #0
 800494e:	61bb      	str	r3, [r7, #24]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004950:	1d3b      	adds	r3, r7, #4
 8004952:	4619      	mov	r1, r3
 8004954:	4805      	ldr	r0, [pc, #20]	@ (800496c <MX_ADC1_Init+0xe4>)
 8004956:	f007 f855 	bl	800ba04 <HAL_ADC_ConfigChannel>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <MX_ADC1_Init+0xdc>
		{
			Error_Handler();
 8004960:	f000 fd0c 	bl	800537c <Error_Handler>
		}
		/* USER CODE BEGIN ADC1_Init 2 */

		/* USER CODE END ADC1_Init 2 */

	}
 8004964:	bf00      	nop
 8004966:	3728      	adds	r7, #40	@ 0x28
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20000318 	.word	0x20000318
 8004970:	50040000 	.word	0x50040000
 8004974:	25b00200 	.word	0x25b00200

08004978 <MX_CRC_Init>:
	 * @brief CRC Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_CRC_Init(void)
	{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
		/* USER CODE END CRC_Init 0 */

		/* USER CODE BEGIN CRC_Init 1 */

		/* USER CODE END CRC_Init 1 */
		hcrc.Instance = CRC;
 800497c:	4b0d      	ldr	r3, [pc, #52]	@ (80049b4 <MX_CRC_Init+0x3c>)
 800497e:	4a0e      	ldr	r2, [pc, #56]	@ (80049b8 <MX_CRC_Init+0x40>)
 8004980:	601a      	str	r2, [r3, #0]
		hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8004982:	4b0c      	ldr	r3, [pc, #48]	@ (80049b4 <MX_CRC_Init+0x3c>)
 8004984:	2200      	movs	r2, #0
 8004986:	711a      	strb	r2, [r3, #4]
		hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8004988:	4b0a      	ldr	r3, [pc, #40]	@ (80049b4 <MX_CRC_Init+0x3c>)
 800498a:	2200      	movs	r2, #0
 800498c:	715a      	strb	r2, [r3, #5]
		hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800498e:	4b09      	ldr	r3, [pc, #36]	@ (80049b4 <MX_CRC_Init+0x3c>)
 8004990:	2200      	movs	r2, #0
 8004992:	615a      	str	r2, [r3, #20]
		hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004994:	4b07      	ldr	r3, [pc, #28]	@ (80049b4 <MX_CRC_Init+0x3c>)
 8004996:	2200      	movs	r2, #0
 8004998:	619a      	str	r2, [r3, #24]
		hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800499a:	4b06      	ldr	r3, [pc, #24]	@ (80049b4 <MX_CRC_Init+0x3c>)
 800499c:	2201      	movs	r2, #1
 800499e:	621a      	str	r2, [r3, #32]
		if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80049a0:	4804      	ldr	r0, [pc, #16]	@ (80049b4 <MX_CRC_Init+0x3c>)
 80049a2:	f008 f859 	bl	800ca58 <HAL_CRC_Init>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <MX_CRC_Init+0x38>
		{
			Error_Handler();
 80049ac:	f000 fce6 	bl	800537c <Error_Handler>
		}
		/* USER CODE BEGIN CRC_Init 2 */

		/* USER CODE END CRC_Init 2 */

	}
 80049b0:	bf00      	nop
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	200003c4 	.word	0x200003c4
 80049b8:	40023000 	.word	0x40023000

080049bc <MX_I2C3_Init>:
	 * @brief I2C3 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_I2C3_Init(void)
	{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
		/* USER CODE END I2C3_Init 0 */

		/* USER CODE BEGIN I2C3_Init 1 */

		/* USER CODE END I2C3_Init 1 */
		hi2c3.Instance = I2C3;
 80049c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a30 <MX_I2C3_Init+0x74>)
 80049c2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a34 <MX_I2C3_Init+0x78>)
 80049c4:	601a      	str	r2, [r3, #0]
		hi2c3.Init.Timing = 0x10909CEC;
 80049c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004a30 <MX_I2C3_Init+0x74>)
 80049c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004a38 <MX_I2C3_Init+0x7c>)
 80049ca:	605a      	str	r2, [r3, #4]
		hi2c3.Init.OwnAddress1 = 0;
 80049cc:	4b18      	ldr	r3, [pc, #96]	@ (8004a30 <MX_I2C3_Init+0x74>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	609a      	str	r2, [r3, #8]
		hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80049d2:	4b17      	ldr	r3, [pc, #92]	@ (8004a30 <MX_I2C3_Init+0x74>)
 80049d4:	2201      	movs	r2, #1
 80049d6:	60da      	str	r2, [r3, #12]
		hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80049d8:	4b15      	ldr	r3, [pc, #84]	@ (8004a30 <MX_I2C3_Init+0x74>)
 80049da:	2200      	movs	r2, #0
 80049dc:	611a      	str	r2, [r3, #16]
		hi2c3.Init.OwnAddress2 = 0;
 80049de:	4b14      	ldr	r3, [pc, #80]	@ (8004a30 <MX_I2C3_Init+0x74>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	615a      	str	r2, [r3, #20]
		hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80049e4:	4b12      	ldr	r3, [pc, #72]	@ (8004a30 <MX_I2C3_Init+0x74>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	619a      	str	r2, [r3, #24]
		hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80049ea:	4b11      	ldr	r3, [pc, #68]	@ (8004a30 <MX_I2C3_Init+0x74>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	61da      	str	r2, [r3, #28]
		hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80049f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004a30 <MX_I2C3_Init+0x74>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	621a      	str	r2, [r3, #32]
		if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80049f6:	480e      	ldr	r0, [pc, #56]	@ (8004a30 <MX_I2C3_Init+0x74>)
 80049f8:	f009 fd2e 	bl	800e458 <HAL_I2C_Init>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <MX_I2C3_Init+0x4a>
		{
			Error_Handler();
 8004a02:	f000 fcbb 	bl	800537c <Error_Handler>
		}

		/** Configure Analogue filter
		 */
		if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004a06:	2100      	movs	r1, #0
 8004a08:	4809      	ldr	r0, [pc, #36]	@ (8004a30 <MX_I2C3_Init+0x74>)
 8004a0a:	f00a fa75 	bl	800eef8 <HAL_I2CEx_ConfigAnalogFilter>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <MX_I2C3_Init+0x5c>
		{
			Error_Handler();
 8004a14:	f000 fcb2 	bl	800537c <Error_Handler>
		}

		/** Configure Digital filter
		 */
		if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8004a18:	2100      	movs	r1, #0
 8004a1a:	4805      	ldr	r0, [pc, #20]	@ (8004a30 <MX_I2C3_Init+0x74>)
 8004a1c:	f00a fab7 	bl	800ef8e <HAL_I2CEx_ConfigDigitalFilter>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <MX_I2C3_Init+0x6e>
		{
			Error_Handler();
 8004a26:	f000 fca9 	bl	800537c <Error_Handler>
		}
		/* USER CODE BEGIN I2C3_Init 2 */

		/* USER CODE END I2C3_Init 2 */

	}
 8004a2a:	bf00      	nop
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	200003e8 	.word	0x200003e8
 8004a34:	40005c00 	.word	0x40005c00
 8004a38:	10909cec 	.word	0x10909cec

08004a3c <MX_QUADSPI_Init>:
	 * @brief QUADSPI Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_QUADSPI_Init(void)
	{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN QUADSPI_Init 1 */

		/* USER CODE END QUADSPI_Init 1 */
		/* QUADSPI parameter configuration*/
		hqspi.Instance = QUADSPI;
 8004a40:	4b0f      	ldr	r3, [pc, #60]	@ (8004a80 <MX_QUADSPI_Init+0x44>)
 8004a42:	4a10      	ldr	r2, [pc, #64]	@ (8004a84 <MX_QUADSPI_Init+0x48>)
 8004a44:	601a      	str	r2, [r3, #0]
		hqspi.Init.ClockPrescaler = 1;
 8004a46:	4b0e      	ldr	r3, [pc, #56]	@ (8004a80 <MX_QUADSPI_Init+0x44>)
 8004a48:	2201      	movs	r2, #1
 8004a4a:	605a      	str	r2, [r3, #4]
		hqspi.Init.FifoThreshold = 1;
 8004a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a80 <MX_QUADSPI_Init+0x44>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	609a      	str	r2, [r3, #8]
		hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8004a52:	4b0b      	ldr	r3, [pc, #44]	@ (8004a80 <MX_QUADSPI_Init+0x44>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	60da      	str	r2, [r3, #12]
		hqspi.Init.FlashSize = 1;
 8004a58:	4b09      	ldr	r3, [pc, #36]	@ (8004a80 <MX_QUADSPI_Init+0x44>)
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	611a      	str	r2, [r3, #16]
		hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8004a5e:	4b08      	ldr	r3, [pc, #32]	@ (8004a80 <MX_QUADSPI_Init+0x44>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	615a      	str	r2, [r3, #20]
		hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8004a64:	4b06      	ldr	r3, [pc, #24]	@ (8004a80 <MX_QUADSPI_Init+0x44>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	619a      	str	r2, [r3, #24]
		if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8004a6a:	4805      	ldr	r0, [pc, #20]	@ (8004a80 <MX_QUADSPI_Init+0x44>)
 8004a6c:	f00a fb40 	bl	800f0f0 <HAL_QSPI_Init>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <MX_QUADSPI_Init+0x3e>
		{
			Error_Handler();
 8004a76:	f000 fc81 	bl	800537c <Error_Handler>
		}
		/* USER CODE BEGIN QUADSPI_Init 2 */

		/* USER CODE END QUADSPI_Init 2 */

	}
 8004a7a:	bf00      	nop
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	2000043c 	.word	0x2000043c
 8004a84:	a0001000 	.word	0xa0001000

08004a88 <MX_RTC_Init>:
	 * @brief RTC Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_RTC_Init(void)
	{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b092      	sub	sp, #72	@ 0x48
 8004a8c:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN RTC_Init 0 */

		/* USER CODE END RTC_Init 0 */

		RTC_TimeTypeDef sTime = {0};
 8004a8e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004a92:	2200      	movs	r2, #0
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	605a      	str	r2, [r3, #4]
 8004a98:	609a      	str	r2, [r3, #8]
 8004a9a:	60da      	str	r2, [r3, #12]
 8004a9c:	611a      	str	r2, [r3, #16]
		RTC_DateTypeDef sDate = {0};
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	633b      	str	r3, [r7, #48]	@ 0x30
		RTC_AlarmTypeDef sAlarm = {0};
 8004aa2:	1d3b      	adds	r3, r7, #4
 8004aa4:	222c      	movs	r2, #44	@ 0x2c
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f011 fb8f 	bl	80161cc <memset>

		/* USER CODE END RTC_Init 1 */

		/** Initialize RTC Only
		 */
		hrtc.Instance = RTC;
 8004aae:	4b3c      	ldr	r3, [pc, #240]	@ (8004ba0 <MX_RTC_Init+0x118>)
 8004ab0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ba4 <MX_RTC_Init+0x11c>)
 8004ab2:	601a      	str	r2, [r3, #0]
		hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004ab4:	4b3a      	ldr	r3, [pc, #232]	@ (8004ba0 <MX_RTC_Init+0x118>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	605a      	str	r2, [r3, #4]
		hrtc.Init.AsynchPrediv = 127;
 8004aba:	4b39      	ldr	r3, [pc, #228]	@ (8004ba0 <MX_RTC_Init+0x118>)
 8004abc:	227f      	movs	r2, #127	@ 0x7f
 8004abe:	609a      	str	r2, [r3, #8]
		hrtc.Init.SynchPrediv = 255;
 8004ac0:	4b37      	ldr	r3, [pc, #220]	@ (8004ba0 <MX_RTC_Init+0x118>)
 8004ac2:	22ff      	movs	r2, #255	@ 0xff
 8004ac4:	60da      	str	r2, [r3, #12]
		hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004ac6:	4b36      	ldr	r3, [pc, #216]	@ (8004ba0 <MX_RTC_Init+0x118>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	611a      	str	r2, [r3, #16]
		hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004acc:	4b34      	ldr	r3, [pc, #208]	@ (8004ba0 <MX_RTC_Init+0x118>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	615a      	str	r2, [r3, #20]
		hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004ad2:	4b33      	ldr	r3, [pc, #204]	@ (8004ba0 <MX_RTC_Init+0x118>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	619a      	str	r2, [r3, #24]
		hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004ad8:	4b31      	ldr	r3, [pc, #196]	@ (8004ba0 <MX_RTC_Init+0x118>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	61da      	str	r2, [r3, #28]
		if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004ade:	4830      	ldr	r0, [pc, #192]	@ (8004ba0 <MX_RTC_Init+0x118>)
 8004ae0:	f00c fa24 	bl	8010f2c <HAL_RTC_Init>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <MX_RTC_Init+0x66>
		{
			Error_Handler();
 8004aea:	f000 fc47 	bl	800537c <Error_Handler>

		/* USER CODE END Check_RTC_BKUP */

		/** Initialize RTC and set the Time and Date
		 */
		sTime.Hours = 0;
 8004aee:	2300      	movs	r3, #0
 8004af0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
		sTime.Minutes = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
		sTime.Seconds = 0;
 8004afa:	2300      	movs	r3, #0
 8004afc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004b00:	2300      	movs	r3, #0
 8004b02:	643b      	str	r3, [r7, #64]	@ 0x40
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004b04:	2300      	movs	r3, #0
 8004b06:	647b      	str	r3, [r7, #68]	@ 0x44
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004b08:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4823      	ldr	r0, [pc, #140]	@ (8004ba0 <MX_RTC_Init+0x118>)
 8004b12:	f00c fa93 	bl	801103c <HAL_RTC_SetTime>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <MX_RTC_Init+0x98>
		{
			Error_Handler();
 8004b1c:	f000 fc2e 	bl	800537c <Error_Handler>
		}
		sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004b20:	2301      	movs	r3, #1
 8004b22:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
		sDate.Month = RTC_MONTH_JANUARY;
 8004b26:	2301      	movs	r3, #1
 8004b28:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
		sDate.Date = 1;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
		sDate.Year = 0;
 8004b32:	2300      	movs	r3, #0
 8004b34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004b38:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4817      	ldr	r0, [pc, #92]	@ (8004ba0 <MX_RTC_Init+0x118>)
 8004b42:	f00c fb74 	bl	801122e <HAL_RTC_SetDate>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <MX_RTC_Init+0xc8>
		{
			Error_Handler();
 8004b4c:	f000 fc16 	bl	800537c <Error_Handler>
		}

		/** Enable the Alarm A
		 */
		sAlarm.AlarmTime.Hours = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	713b      	strb	r3, [r7, #4]
		sAlarm.AlarmTime.Minutes = 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	717b      	strb	r3, [r7, #5]
		sAlarm.AlarmTime.Seconds = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	71bb      	strb	r3, [r7, #6]
		sAlarm.AlarmTime.SubSeconds = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60bb      	str	r3, [r7, #8]
		sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004b60:	2300      	movs	r3, #0
 8004b62:	613b      	str	r3, [r7, #16]
		sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004b64:	2300      	movs	r3, #0
 8004b66:	617b      	str	r3, [r7, #20]
		sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8004b68:	4b0f      	ldr	r3, [pc, #60]	@ (8004ba8 <MX_RTC_Init+0x120>)
 8004b6a:	61bb      	str	r3, [r7, #24]
				|RTC_ALARMMASK_SECONDS;
		sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	623b      	str	r3, [r7, #32]
		sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004b70:	2300      	movs	r3, #0
 8004b72:	627b      	str	r3, [r7, #36]	@ 0x24
		sAlarm.AlarmDateWeekDay = 1;
 8004b74:	2301      	movs	r3, #1
 8004b76:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		sAlarm.Alarm = RTC_ALARM_A;
 8004b7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8004b80:	1d3b      	adds	r3, r7, #4
 8004b82:	2200      	movs	r2, #0
 8004b84:	4619      	mov	r1, r3
 8004b86:	4806      	ldr	r0, [pc, #24]	@ (8004ba0 <MX_RTC_Init+0x118>)
 8004b88:	f00c fbd8 	bl	801133c <HAL_RTC_SetAlarm_IT>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <MX_RTC_Init+0x10e>
		{
			Error_Handler();
 8004b92:	f000 fbf3 	bl	800537c <Error_Handler>
		}
		/* USER CODE BEGIN RTC_Init 2 */

		/* USER CODE END RTC_Init 2 */

	}
 8004b96:	bf00      	nop
 8004b98:	3748      	adds	r7, #72	@ 0x48
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000480 	.word	0x20000480
 8004ba4:	40002800 	.word	0x40002800
 8004ba8:	80800080 	.word	0x80800080

08004bac <MX_SPI2_Init>:
	 * @brief SPI2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_SPI2_Init(void)
	{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN SPI2_Init 1 */

		/* USER CODE END SPI2_Init 1 */
		/* SPI2 parameter configuration*/
		hspi2.Instance = SPI2;
 8004bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8004c20 <MX_SPI2_Init+0x74>)
 8004bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8004c24 <MX_SPI2_Init+0x78>)
 8004bb4:	601a      	str	r2, [r3, #0]
		hspi2.Init.Mode = SPI_MODE_MASTER;
 8004bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8004c20 <MX_SPI2_Init+0x74>)
 8004bb8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004bbc:	605a      	str	r2, [r3, #4]
		hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004bbe:	4b18      	ldr	r3, [pc, #96]	@ (8004c20 <MX_SPI2_Init+0x74>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	609a      	str	r2, [r3, #8]
		hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004bc4:	4b16      	ldr	r3, [pc, #88]	@ (8004c20 <MX_SPI2_Init+0x74>)
 8004bc6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004bca:	60da      	str	r2, [r3, #12]
		hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bcc:	4b14      	ldr	r3, [pc, #80]	@ (8004c20 <MX_SPI2_Init+0x74>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	611a      	str	r2, [r3, #16]
		hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004bd2:	4b13      	ldr	r3, [pc, #76]	@ (8004c20 <MX_SPI2_Init+0x74>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	615a      	str	r2, [r3, #20]
		hspi2.Init.NSS = SPI_NSS_SOFT;
 8004bd8:	4b11      	ldr	r3, [pc, #68]	@ (8004c20 <MX_SPI2_Init+0x74>)
 8004bda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bde:	619a      	str	r2, [r3, #24]
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004be0:	4b0f      	ldr	r3, [pc, #60]	@ (8004c20 <MX_SPI2_Init+0x74>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	61da      	str	r2, [r3, #28]
		hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004be6:	4b0e      	ldr	r3, [pc, #56]	@ (8004c20 <MX_SPI2_Init+0x74>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	621a      	str	r2, [r3, #32]
		hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004bec:	4b0c      	ldr	r3, [pc, #48]	@ (8004c20 <MX_SPI2_Init+0x74>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	625a      	str	r2, [r3, #36]	@ 0x24
		hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8004c20 <MX_SPI2_Init+0x74>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	629a      	str	r2, [r3, #40]	@ 0x28
		hspi2.Init.CRCPolynomial = 7;
 8004bf8:	4b09      	ldr	r3, [pc, #36]	@ (8004c20 <MX_SPI2_Init+0x74>)
 8004bfa:	2207      	movs	r2, #7
 8004bfc:	62da      	str	r2, [r3, #44]	@ 0x2c
		hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004bfe:	4b08      	ldr	r3, [pc, #32]	@ (8004c20 <MX_SPI2_Init+0x74>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	631a      	str	r2, [r3, #48]	@ 0x30
		hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004c04:	4b06      	ldr	r3, [pc, #24]	@ (8004c20 <MX_SPI2_Init+0x74>)
 8004c06:	2208      	movs	r2, #8
 8004c08:	635a      	str	r2, [r3, #52]	@ 0x34
		if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004c0a:	4805      	ldr	r0, [pc, #20]	@ (8004c20 <MX_SPI2_Init+0x74>)
 8004c0c:	f00c fdf2 	bl	80117f4 <HAL_SPI_Init>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <MX_SPI2_Init+0x6e>
		{
			Error_Handler();
 8004c16:	f000 fbb1 	bl	800537c <Error_Handler>
		}
		/* USER CODE BEGIN SPI2_Init 2 */

		/* USER CODE END SPI2_Init 2 */

	}
 8004c1a:	bf00      	nop
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	200004a4 	.word	0x200004a4
 8004c24:	40003800 	.word	0x40003800

08004c28 <MX_SPI3_Init>:
	 * @brief SPI3 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_SPI3_Init(void)
	{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN SPI3_Init 1 */

		/* USER CODE END SPI3_Init 1 */
		/* SPI3 parameter configuration*/
		hspi3.Instance = SPI3;
 8004c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8004c9c <MX_SPI3_Init+0x74>)
 8004c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ca0 <MX_SPI3_Init+0x78>)
 8004c30:	601a      	str	r2, [r3, #0]
		hspi3.Init.Mode = SPI_MODE_MASTER;
 8004c32:	4b1a      	ldr	r3, [pc, #104]	@ (8004c9c <MX_SPI3_Init+0x74>)
 8004c34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004c38:	605a      	str	r2, [r3, #4]
		hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004c3a:	4b18      	ldr	r3, [pc, #96]	@ (8004c9c <MX_SPI3_Init+0x74>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	609a      	str	r2, [r3, #8]
		hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8004c40:	4b16      	ldr	r3, [pc, #88]	@ (8004c9c <MX_SPI3_Init+0x74>)
 8004c42:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004c46:	60da      	str	r2, [r3, #12]
		hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c48:	4b14      	ldr	r3, [pc, #80]	@ (8004c9c <MX_SPI3_Init+0x74>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	611a      	str	r2, [r3, #16]
		hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004c4e:	4b13      	ldr	r3, [pc, #76]	@ (8004c9c <MX_SPI3_Init+0x74>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	615a      	str	r2, [r3, #20]
		hspi3.Init.NSS = SPI_NSS_SOFT;
 8004c54:	4b11      	ldr	r3, [pc, #68]	@ (8004c9c <MX_SPI3_Init+0x74>)
 8004c56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c5a:	619a      	str	r2, [r3, #24]
		hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8004c9c <MX_SPI3_Init+0x74>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	61da      	str	r2, [r3, #28]
		hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c62:	4b0e      	ldr	r3, [pc, #56]	@ (8004c9c <MX_SPI3_Init+0x74>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	621a      	str	r2, [r3, #32]
		hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c68:	4b0c      	ldr	r3, [pc, #48]	@ (8004c9c <MX_SPI3_Init+0x74>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	625a      	str	r2, [r3, #36]	@ 0x24
		hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c9c <MX_SPI3_Init+0x74>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	629a      	str	r2, [r3, #40]	@ 0x28
		hspi3.Init.CRCPolynomial = 7;
 8004c74:	4b09      	ldr	r3, [pc, #36]	@ (8004c9c <MX_SPI3_Init+0x74>)
 8004c76:	2207      	movs	r2, #7
 8004c78:	62da      	str	r2, [r3, #44]	@ 0x2c
		hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004c7a:	4b08      	ldr	r3, [pc, #32]	@ (8004c9c <MX_SPI3_Init+0x74>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	631a      	str	r2, [r3, #48]	@ 0x30
		hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004c80:	4b06      	ldr	r3, [pc, #24]	@ (8004c9c <MX_SPI3_Init+0x74>)
 8004c82:	2208      	movs	r2, #8
 8004c84:	635a      	str	r2, [r3, #52]	@ 0x34
		if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004c86:	4805      	ldr	r0, [pc, #20]	@ (8004c9c <MX_SPI3_Init+0x74>)
 8004c88:	f00c fdb4 	bl	80117f4 <HAL_SPI_Init>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <MX_SPI3_Init+0x6e>
		{
			Error_Handler();
 8004c92:	f000 fb73 	bl	800537c <Error_Handler>
		}
		/* USER CODE BEGIN SPI3_Init 2 */

		/* USER CODE END SPI3_Init 2 */

	}
 8004c96:	bf00      	nop
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20000508 	.word	0x20000508
 8004ca0:	40003c00 	.word	0x40003c00

08004ca4 <MX_TIM1_Init>:
	 * @brief TIM1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM1_Init(void)
	{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b096      	sub	sp, #88	@ 0x58
 8004ca8:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM1_Init 0 */

		/* USER CODE END TIM1_Init 0 */

		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004caa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	605a      	str	r2, [r3, #4]
 8004cb4:	609a      	str	r2, [r3, #8]
		TIM_OC_InitTypeDef sConfigOC = {0};
 8004cb6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	605a      	str	r2, [r3, #4]
 8004cc0:	609a      	str	r2, [r3, #8]
 8004cc2:	60da      	str	r2, [r3, #12]
 8004cc4:	611a      	str	r2, [r3, #16]
 8004cc6:	615a      	str	r2, [r3, #20]
 8004cc8:	619a      	str	r2, [r3, #24]
		TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004cca:	1d3b      	adds	r3, r7, #4
 8004ccc:	222c      	movs	r2, #44	@ 0x2c
 8004cce:	2100      	movs	r1, #0
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f011 fa7b 	bl	80161cc <memset>

		/* USER CODE BEGIN TIM1_Init 1 */

		/* USER CODE END TIM1_Init 1 */
		htim1.Instance = TIM1;
 8004cd6:	4b45      	ldr	r3, [pc, #276]	@ (8004dec <MX_TIM1_Init+0x148>)
 8004cd8:	4a45      	ldr	r2, [pc, #276]	@ (8004df0 <MX_TIM1_Init+0x14c>)
 8004cda:	601a      	str	r2, [r3, #0]
		htim1.Init.Prescaler = 1599;
 8004cdc:	4b43      	ldr	r3, [pc, #268]	@ (8004dec <MX_TIM1_Init+0x148>)
 8004cde:	f240 623f 	movw	r2, #1599	@ 0x63f
 8004ce2:	605a      	str	r2, [r3, #4]
		htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ce4:	4b41      	ldr	r3, [pc, #260]	@ (8004dec <MX_TIM1_Init+0x148>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	609a      	str	r2, [r3, #8]
		htim1.Init.Period = 49999;
 8004cea:	4b40      	ldr	r3, [pc, #256]	@ (8004dec <MX_TIM1_Init+0x148>)
 8004cec:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8004cf0:	60da      	str	r2, [r3, #12]
		htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cf2:	4b3e      	ldr	r3, [pc, #248]	@ (8004dec <MX_TIM1_Init+0x148>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	611a      	str	r2, [r3, #16]
		htim1.Init.RepetitionCounter = 0;
 8004cf8:	4b3c      	ldr	r3, [pc, #240]	@ (8004dec <MX_TIM1_Init+0x148>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	615a      	str	r2, [r3, #20]
		htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cfe:	4b3b      	ldr	r3, [pc, #236]	@ (8004dec <MX_TIM1_Init+0x148>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8004d04:	4839      	ldr	r0, [pc, #228]	@ (8004dec <MX_TIM1_Init+0x148>)
 8004d06:	f00d fcf8 	bl	80126fa <HAL_TIM_OC_Init>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <MX_TIM1_Init+0x70>
		{
			Error_Handler();
 8004d10:	f000 fb34 	bl	800537c <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d14:	2300      	movs	r3, #0
 8004d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
		sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	653b      	str	r3, [r7, #80]	@ 0x50
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	657b      	str	r3, [r7, #84]	@ 0x54
		if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004d20:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004d24:	4619      	mov	r1, r3
 8004d26:	4831      	ldr	r0, [pc, #196]	@ (8004dec <MX_TIM1_Init+0x148>)
 8004d28:	f00f fcfe 	bl	8014728 <HAL_TIMEx_MasterConfigSynchronization>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <MX_TIM1_Init+0x92>
		{
			Error_Handler();
 8004d32:	f000 fb23 	bl	800537c <Error_Handler>
		}
		sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004d36:	2300      	movs	r3, #0
 8004d38:	633b      	str	r3, [r7, #48]	@ 0x30
		sConfigOC.Pulse = 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	637b      	str	r3, [r7, #52]	@ 0x34
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	63bb      	str	r3, [r7, #56]	@ 0x38
		sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004d42:	2300      	movs	r3, #0
 8004d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d46:	2300      	movs	r3, #0
 8004d48:	643b      	str	r3, [r7, #64]	@ 0x40
		sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	647b      	str	r3, [r7, #68]	@ 0x44
		sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d52:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004d56:	2200      	movs	r2, #0
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4824      	ldr	r0, [pc, #144]	@ (8004dec <MX_TIM1_Init+0x148>)
 8004d5c:	f00e fbba 	bl	80134d4 <HAL_TIM_OC_ConfigChannel>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <MX_TIM1_Init+0xc6>
		{
			Error_Handler();
 8004d66:	f000 fb09 	bl	800537c <Error_Handler>
		}
		if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004d6a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004d6e:	2204      	movs	r2, #4
 8004d70:	4619      	mov	r1, r3
 8004d72:	481e      	ldr	r0, [pc, #120]	@ (8004dec <MX_TIM1_Init+0x148>)
 8004d74:	f00e fbae 	bl	80134d4 <HAL_TIM_OC_ConfigChannel>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <MX_TIM1_Init+0xde>
		{
			Error_Handler();
 8004d7e:	f000 fafd 	bl	800537c <Error_Handler>
		}
		if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004d82:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004d86:	2208      	movs	r2, #8
 8004d88:	4619      	mov	r1, r3
 8004d8a:	4818      	ldr	r0, [pc, #96]	@ (8004dec <MX_TIM1_Init+0x148>)
 8004d8c:	f00e fba2 	bl	80134d4 <HAL_TIM_OC_ConfigChannel>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <MX_TIM1_Init+0xf6>
		{
			Error_Handler();
 8004d96:	f000 faf1 	bl	800537c <Error_Handler>
		}
		sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	607b      	str	r3, [r7, #4]
		sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60bb      	str	r3, [r7, #8]
		sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004da2:	2300      	movs	r3, #0
 8004da4:	60fb      	str	r3, [r7, #12]
		sBreakDeadTimeConfig.DeadTime = 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	613b      	str	r3, [r7, #16]
		sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004daa:	2300      	movs	r3, #0
 8004dac:	617b      	str	r3, [r7, #20]
		sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004dae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004db2:	61bb      	str	r3, [r7, #24]
		sBreakDeadTimeConfig.BreakFilter = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61fb      	str	r3, [r7, #28]
		sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004db8:	2300      	movs	r3, #0
 8004dba:	623b      	str	r3, [r7, #32]
		sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004dbc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dc0:	627b      	str	r3, [r7, #36]	@ 0x24
		sBreakDeadTimeConfig.Break2Filter = 0;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
		sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004dca:	1d3b      	adds	r3, r7, #4
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4807      	ldr	r0, [pc, #28]	@ (8004dec <MX_TIM1_Init+0x148>)
 8004dd0:	f00f fd32 	bl	8014838 <HAL_TIMEx_ConfigBreakDeadTime>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <MX_TIM1_Init+0x13a>
		{
			Error_Handler();
 8004dda:	f000 facf 	bl	800537c <Error_Handler>
		}
		/* USER CODE BEGIN TIM1_Init 2 */

		/* USER CODE END TIM1_Init 2 */
		HAL_TIM_MspPostInit(&htim1);
 8004dde:	4803      	ldr	r0, [pc, #12]	@ (8004dec <MX_TIM1_Init+0x148>)
 8004de0:	f002 fe26 	bl	8007a30 <HAL_TIM_MspPostInit>

	}
 8004de4:	bf00      	nop
 8004de6:	3758      	adds	r7, #88	@ 0x58
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	2000056c 	.word	0x2000056c
 8004df0:	40012c00 	.word	0x40012c00

08004df4 <MX_TIM2_Init>:
	 * @brief TIM2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM2_Init(void)
	{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM2_Init 0 */

		/* USER CODE END TIM2_Init 0 */

		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dfa:	f107 0314 	add.w	r3, r7, #20
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	605a      	str	r2, [r3, #4]
 8004e04:	609a      	str	r2, [r3, #8]
		TIM_IC_InitTypeDef sConfigIC = {0};
 8004e06:	1d3b      	adds	r3, r7, #4
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	605a      	str	r2, [r3, #4]
 8004e0e:	609a      	str	r2, [r3, #8]
 8004e10:	60da      	str	r2, [r3, #12]

		/* USER CODE BEGIN TIM2_Init 1 */

		/* USER CODE END TIM2_Init 1 */
		htim2.Instance = TIM2;
 8004e12:	4b21      	ldr	r3, [pc, #132]	@ (8004e98 <MX_TIM2_Init+0xa4>)
 8004e14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004e18:	601a      	str	r2, [r3, #0]
		htim2.Init.Prescaler = 0;
 8004e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8004e98 <MX_TIM2_Init+0xa4>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	605a      	str	r2, [r3, #4]
		htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e20:	4b1d      	ldr	r3, [pc, #116]	@ (8004e98 <MX_TIM2_Init+0xa4>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	609a      	str	r2, [r3, #8]
		htim2.Init.Period = 4294967295;
 8004e26:	4b1c      	ldr	r3, [pc, #112]	@ (8004e98 <MX_TIM2_Init+0xa4>)
 8004e28:	f04f 32ff 	mov.w	r2, #4294967295
 8004e2c:	60da      	str	r2, [r3, #12]
		htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8004e98 <MX_TIM2_Init+0xa4>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	611a      	str	r2, [r3, #16]
		htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e34:	4b18      	ldr	r3, [pc, #96]	@ (8004e98 <MX_TIM2_Init+0xa4>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004e3a:	4817      	ldr	r0, [pc, #92]	@ (8004e98 <MX_TIM2_Init+0xa4>)
 8004e3c:	f00e f8ea 	bl	8013014 <HAL_TIM_IC_Init>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <MX_TIM2_Init+0x56>
		{
			Error_Handler();
 8004e46:	f000 fa99 	bl	800537c <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	617b      	str	r3, [r7, #20]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	61fb      	str	r3, [r7, #28]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e52:	f107 0314 	add.w	r3, r7, #20
 8004e56:	4619      	mov	r1, r3
 8004e58:	480f      	ldr	r0, [pc, #60]	@ (8004e98 <MX_TIM2_Init+0xa4>)
 8004e5a:	f00f fc65 	bl	8014728 <HAL_TIMEx_MasterConfigSynchronization>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <MX_TIM2_Init+0x74>
		{
			Error_Handler();
 8004e64:	f000 fa8a 	bl	800537c <Error_Handler>
		}
		sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	607b      	str	r3, [r7, #4]
		sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	60bb      	str	r3, [r7, #8]
		sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004e70:	2300      	movs	r3, #0
 8004e72:	60fb      	str	r3, [r7, #12]
		sConfigIC.ICFilter = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	613b      	str	r3, [r7, #16]
		if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004e78:	1d3b      	adds	r3, r7, #4
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4806      	ldr	r0, [pc, #24]	@ (8004e98 <MX_TIM2_Init+0xa4>)
 8004e80:	f00e fba2 	bl	80135c8 <HAL_TIM_IC_ConfigChannel>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <MX_TIM2_Init+0x9a>
		{
			Error_Handler();
 8004e8a:	f000 fa77 	bl	800537c <Error_Handler>
		}
		/* USER CODE BEGIN TIM2_Init 2 */

		/* USER CODE END TIM2_Init 2 */

	}
 8004e8e:	bf00      	nop
 8004e90:	3720      	adds	r7, #32
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	200005b8 	.word	0x200005b8

08004e9c <MX_TIM3_Init>:
	 * @brief TIM3 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM3_Init(void)
	{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b090      	sub	sp, #64	@ 0x40
 8004ea0:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM3_Init 0 */

		/* USER CODE END TIM3_Init 0 */

		TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004ea2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	605a      	str	r2, [r3, #4]
 8004eac:	609a      	str	r2, [r3, #8]
 8004eae:	60da      	str	r2, [r3, #12]
 8004eb0:	611a      	str	r2, [r3, #16]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004eb2:	f107 0320 	add.w	r3, r7, #32
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	605a      	str	r2, [r3, #4]
 8004ebc:	609a      	str	r2, [r3, #8]
		TIM_OC_InitTypeDef sConfigOC = {0};
 8004ebe:	1d3b      	adds	r3, r7, #4
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	605a      	str	r2, [r3, #4]
 8004ec6:	609a      	str	r2, [r3, #8]
 8004ec8:	60da      	str	r2, [r3, #12]
 8004eca:	611a      	str	r2, [r3, #16]
 8004ecc:	615a      	str	r2, [r3, #20]
 8004ece:	619a      	str	r2, [r3, #24]

		/* USER CODE BEGIN TIM3_Init 1 */

		/* USER CODE END TIM3_Init 1 */
		htim3.Instance = TIM3;
 8004ed0:	4b2c      	ldr	r3, [pc, #176]	@ (8004f84 <MX_TIM3_Init+0xe8>)
 8004ed2:	4a2d      	ldr	r2, [pc, #180]	@ (8004f88 <MX_TIM3_Init+0xec>)
 8004ed4:	601a      	str	r2, [r3, #0]
		htim3.Init.Prescaler = 0;
 8004ed6:	4b2b      	ldr	r3, [pc, #172]	@ (8004f84 <MX_TIM3_Init+0xe8>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	605a      	str	r2, [r3, #4]
		htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004edc:	4b29      	ldr	r3, [pc, #164]	@ (8004f84 <MX_TIM3_Init+0xe8>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	609a      	str	r2, [r3, #8]
		htim3.Init.Period = 31;
 8004ee2:	4b28      	ldr	r3, [pc, #160]	@ (8004f84 <MX_TIM3_Init+0xe8>)
 8004ee4:	221f      	movs	r2, #31
 8004ee6:	60da      	str	r2, [r3, #12]
		htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ee8:	4b26      	ldr	r3, [pc, #152]	@ (8004f84 <MX_TIM3_Init+0xe8>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	611a      	str	r2, [r3, #16]
		htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004eee:	4b25      	ldr	r3, [pc, #148]	@ (8004f84 <MX_TIM3_Init+0xe8>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004ef4:	4823      	ldr	r0, [pc, #140]	@ (8004f84 <MX_TIM3_Init+0xe8>)
 8004ef6:	f00d fba9 	bl	801264c <HAL_TIM_Base_Init>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <MX_TIM3_Init+0x68>
		{
			Error_Handler();
 8004f00:	f000 fa3c 	bl	800537c <Error_Handler>
		}
		if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004f04:	481f      	ldr	r0, [pc, #124]	@ (8004f84 <MX_TIM3_Init+0xe8>)
 8004f06:	f00d fe87 	bl	8012c18 <HAL_TIM_PWM_Init>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <MX_TIM3_Init+0x78>
		{
			Error_Handler();
 8004f10:	f000 fa34 	bl	800537c <Error_Handler>
		}
		sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8004f14:	2307      	movs	r3, #7
 8004f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8004f18:	2330      	movs	r3, #48	@ 0x30
 8004f1a:	633b      	str	r3, [r7, #48]	@ 0x30
		if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8004f1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f20:	4619      	mov	r1, r3
 8004f22:	4818      	ldr	r0, [pc, #96]	@ (8004f84 <MX_TIM3_Init+0xe8>)
 8004f24:	f00e fdc9 	bl	8013aba <HAL_TIM_SlaveConfigSynchro>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <MX_TIM3_Init+0x96>
		{
			Error_Handler();
 8004f2e:	f000 fa25 	bl	800537c <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f32:	2300      	movs	r3, #0
 8004f34:	623b      	str	r3, [r7, #32]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f36:	2300      	movs	r3, #0
 8004f38:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f3a:	f107 0320 	add.w	r3, r7, #32
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4810      	ldr	r0, [pc, #64]	@ (8004f84 <MX_TIM3_Init+0xe8>)
 8004f42:	f00f fbf1 	bl	8014728 <HAL_TIMEx_MasterConfigSynchronization>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <MX_TIM3_Init+0xb4>
		{
			Error_Handler();
 8004f4c:	f000 fa16 	bl	800537c <Error_Handler>
		}
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f50:	2360      	movs	r3, #96	@ 0x60
 8004f52:	607b      	str	r3, [r7, #4]
		sConfigOC.Pulse = 15;
 8004f54:	230f      	movs	r3, #15
 8004f56:	60bb      	str	r3, [r7, #8]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]
		if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004f60:	1d3b      	adds	r3, r7, #4
 8004f62:	2208      	movs	r2, #8
 8004f64:	4619      	mov	r1, r3
 8004f66:	4807      	ldr	r0, [pc, #28]	@ (8004f84 <MX_TIM3_Init+0xe8>)
 8004f68:	f00e fbca 	bl	8013700 <HAL_TIM_PWM_ConfigChannel>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <MX_TIM3_Init+0xda>
		{
			Error_Handler();
 8004f72:	f000 fa03 	bl	800537c <Error_Handler>
		}
		/* USER CODE BEGIN TIM3_Init 2 */

		/* USER CODE END TIM3_Init 2 */
		HAL_TIM_MspPostInit(&htim3);
 8004f76:	4803      	ldr	r0, [pc, #12]	@ (8004f84 <MX_TIM3_Init+0xe8>)
 8004f78:	f002 fd5a 	bl	8007a30 <HAL_TIM_MspPostInit>

	}
 8004f7c:	bf00      	nop
 8004f7e:	3740      	adds	r7, #64	@ 0x40
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	20000604 	.word	0x20000604
 8004f88:	40000400 	.word	0x40000400

08004f8c <MX_TIM4_Init>:
	 * @brief TIM4 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM4_Init(void)
	{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08e      	sub	sp, #56	@ 0x38
 8004f90:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM4_Init 0 */

		/* USER CODE END TIM4_Init 0 */

		TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	605a      	str	r2, [r3, #4]
 8004f9c:	609a      	str	r2, [r3, #8]
 8004f9e:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fa0:	f107 031c 	add.w	r3, r7, #28
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	605a      	str	r2, [r3, #4]
 8004faa:	609a      	str	r2, [r3, #8]
		TIM_OC_InitTypeDef sConfigOC = {0};
 8004fac:	463b      	mov	r3, r7
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	605a      	str	r2, [r3, #4]
 8004fb4:	609a      	str	r2, [r3, #8]
 8004fb6:	60da      	str	r2, [r3, #12]
 8004fb8:	611a      	str	r2, [r3, #16]
 8004fba:	615a      	str	r2, [r3, #20]
 8004fbc:	619a      	str	r2, [r3, #24]

		/* USER CODE BEGIN TIM4_Init 1 */

		/* USER CODE END TIM4_Init 1 */
		htim4.Instance = TIM4;
 8004fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800506c <MX_TIM4_Init+0xe0>)
 8004fc0:	4a2b      	ldr	r2, [pc, #172]	@ (8005070 <MX_TIM4_Init+0xe4>)
 8004fc2:	601a      	str	r2, [r3, #0]
		htim4.Init.Prescaler = 99;
 8004fc4:	4b29      	ldr	r3, [pc, #164]	@ (800506c <MX_TIM4_Init+0xe0>)
 8004fc6:	2263      	movs	r2, #99	@ 0x63
 8004fc8:	605a      	str	r2, [r3, #4]
		htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fca:	4b28      	ldr	r3, [pc, #160]	@ (800506c <MX_TIM4_Init+0xe0>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	609a      	str	r2, [r3, #8]
		htim4.Init.Period = 999;
 8004fd0:	4b26      	ldr	r3, [pc, #152]	@ (800506c <MX_TIM4_Init+0xe0>)
 8004fd2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004fd6:	60da      	str	r2, [r3, #12]
		htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fd8:	4b24      	ldr	r3, [pc, #144]	@ (800506c <MX_TIM4_Init+0xe0>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	611a      	str	r2, [r3, #16]
		htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004fde:	4b23      	ldr	r3, [pc, #140]	@ (800506c <MX_TIM4_Init+0xe0>)
 8004fe0:	2280      	movs	r2, #128	@ 0x80
 8004fe2:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004fe4:	4821      	ldr	r0, [pc, #132]	@ (800506c <MX_TIM4_Init+0xe0>)
 8004fe6:	f00d fb31 	bl	801264c <HAL_TIM_Base_Init>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <MX_TIM4_Init+0x68>
		{
			Error_Handler();
 8004ff0:	f000 f9c4 	bl	800537c <Error_Handler>
		}
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ff4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004ffa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004ffe:	4619      	mov	r1, r3
 8005000:	481a      	ldr	r0, [pc, #104]	@ (800506c <MX_TIM4_Init+0xe0>)
 8005002:	f00e fc91 	bl	8013928 <HAL_TIM_ConfigClockSource>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <MX_TIM4_Init+0x84>
		{
			Error_Handler();
 800500c:	f000 f9b6 	bl	800537c <Error_Handler>
		}
		if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8005010:	4816      	ldr	r0, [pc, #88]	@ (800506c <MX_TIM4_Init+0xe0>)
 8005012:	f00d fb72 	bl	80126fa <HAL_TIM_OC_Init>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <MX_TIM4_Init+0x94>
		{
			Error_Handler();
 800501c:	f000 f9ae 	bl	800537c <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005020:	2320      	movs	r3, #32
 8005022:	61fb      	str	r3, [r7, #28]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005024:	2300      	movs	r3, #0
 8005026:	627b      	str	r3, [r7, #36]	@ 0x24
		if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005028:	f107 031c 	add.w	r3, r7, #28
 800502c:	4619      	mov	r1, r3
 800502e:	480f      	ldr	r0, [pc, #60]	@ (800506c <MX_TIM4_Init+0xe0>)
 8005030:	f00f fb7a 	bl	8014728 <HAL_TIMEx_MasterConfigSynchronization>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <MX_TIM4_Init+0xb2>
		{
			Error_Handler();
 800503a:	f000 f99f 	bl	800537c <Error_Handler>
		}
		sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800503e:	2300      	movs	r3, #0
 8005040:	603b      	str	r3, [r7, #0]
		sConfigOC.Pulse = 0;
 8005042:	2300      	movs	r3, #0
 8005044:	607b      	str	r3, [r7, #4]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005046:	2300      	movs	r3, #0
 8005048:	60bb      	str	r3, [r7, #8]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800504a:	2300      	movs	r3, #0
 800504c:	613b      	str	r3, [r7, #16]
		if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800504e:	463b      	mov	r3, r7
 8005050:	2208      	movs	r2, #8
 8005052:	4619      	mov	r1, r3
 8005054:	4805      	ldr	r0, [pc, #20]	@ (800506c <MX_TIM4_Init+0xe0>)
 8005056:	f00e fa3d 	bl	80134d4 <HAL_TIM_OC_ConfigChannel>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <MX_TIM4_Init+0xd8>
		{
			Error_Handler();
 8005060:	f000 f98c 	bl	800537c <Error_Handler>
		}
		/* USER CODE BEGIN TIM4_Init 2 */

		/* USER CODE END TIM4_Init 2 */

	}
 8005064:	bf00      	nop
 8005066:	3738      	adds	r7, #56	@ 0x38
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	20000650 	.word	0x20000650
 8005070:	40000800 	.word	0x40000800

08005074 <MX_UART4_Init>:
	 * @brief UART4 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_UART4_Init(void)
	{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
		/* USER CODE END UART4_Init 0 */

		/* USER CODE BEGIN UART4_Init 1 */

		/* USER CODE END UART4_Init 1 */
		huart4.Instance = UART4;
 8005078:	4b14      	ldr	r3, [pc, #80]	@ (80050cc <MX_UART4_Init+0x58>)
 800507a:	4a15      	ldr	r2, [pc, #84]	@ (80050d0 <MX_UART4_Init+0x5c>)
 800507c:	601a      	str	r2, [r3, #0]
		huart4.Init.BaudRate = 115200;
 800507e:	4b13      	ldr	r3, [pc, #76]	@ (80050cc <MX_UART4_Init+0x58>)
 8005080:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005084:	605a      	str	r2, [r3, #4]
		huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005086:	4b11      	ldr	r3, [pc, #68]	@ (80050cc <MX_UART4_Init+0x58>)
 8005088:	2200      	movs	r2, #0
 800508a:	609a      	str	r2, [r3, #8]
		huart4.Init.StopBits = UART_STOPBITS_1;
 800508c:	4b0f      	ldr	r3, [pc, #60]	@ (80050cc <MX_UART4_Init+0x58>)
 800508e:	2200      	movs	r2, #0
 8005090:	60da      	str	r2, [r3, #12]
		huart4.Init.Parity = UART_PARITY_NONE;
 8005092:	4b0e      	ldr	r3, [pc, #56]	@ (80050cc <MX_UART4_Init+0x58>)
 8005094:	2200      	movs	r2, #0
 8005096:	611a      	str	r2, [r3, #16]
		huart4.Init.Mode = UART_MODE_TX_RX;
 8005098:	4b0c      	ldr	r3, [pc, #48]	@ (80050cc <MX_UART4_Init+0x58>)
 800509a:	220c      	movs	r2, #12
 800509c:	615a      	str	r2, [r3, #20]
		huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800509e:	4b0b      	ldr	r3, [pc, #44]	@ (80050cc <MX_UART4_Init+0x58>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	619a      	str	r2, [r3, #24]
		huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80050a4:	4b09      	ldr	r3, [pc, #36]	@ (80050cc <MX_UART4_Init+0x58>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	61da      	str	r2, [r3, #28]
		huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80050aa:	4b08      	ldr	r3, [pc, #32]	@ (80050cc <MX_UART4_Init+0x58>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	621a      	str	r2, [r3, #32]
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80050b0:	4b06      	ldr	r3, [pc, #24]	@ (80050cc <MX_UART4_Init+0x58>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	625a      	str	r2, [r3, #36]	@ 0x24
		if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 80050b6:	4805      	ldr	r0, [pc, #20]	@ (80050cc <MX_UART4_Init+0x58>)
 80050b8:	f00f fc8a 	bl	80149d0 <HAL_HalfDuplex_Init>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <MX_UART4_Init+0x52>
		{
			Error_Handler();
 80050c2:	f000 f95b 	bl	800537c <Error_Handler>
		}
		/* USER CODE BEGIN UART4_Init 2 */

		/* USER CODE END UART4_Init 2 */

	}
 80050c6:	bf00      	nop
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	2000069c 	.word	0x2000069c
 80050d0:	40004c00 	.word	0x40004c00

080050d4 <MX_USART1_UART_Init>:
	 * @brief USART1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_USART1_UART_Init(void)
	{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
		/* USER CODE END USART1_Init 0 */

		/* USER CODE BEGIN USART1_Init 1 */

		/* USER CODE END USART1_Init 1 */
		huart1.Instance = USART1;
 80050d8:	4b14      	ldr	r3, [pc, #80]	@ (800512c <MX_USART1_UART_Init+0x58>)
 80050da:	4a15      	ldr	r2, [pc, #84]	@ (8005130 <MX_USART1_UART_Init+0x5c>)
 80050dc:	601a      	str	r2, [r3, #0]
		huart1.Init.BaudRate = 115200;
 80050de:	4b13      	ldr	r3, [pc, #76]	@ (800512c <MX_USART1_UART_Init+0x58>)
 80050e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80050e4:	605a      	str	r2, [r3, #4]
		huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80050e6:	4b11      	ldr	r3, [pc, #68]	@ (800512c <MX_USART1_UART_Init+0x58>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	609a      	str	r2, [r3, #8]
		huart1.Init.StopBits = UART_STOPBITS_1;
 80050ec:	4b0f      	ldr	r3, [pc, #60]	@ (800512c <MX_USART1_UART_Init+0x58>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	60da      	str	r2, [r3, #12]
		huart1.Init.Parity = UART_PARITY_NONE;
 80050f2:	4b0e      	ldr	r3, [pc, #56]	@ (800512c <MX_USART1_UART_Init+0x58>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	611a      	str	r2, [r3, #16]
		huart1.Init.Mode = UART_MODE_TX_RX;
 80050f8:	4b0c      	ldr	r3, [pc, #48]	@ (800512c <MX_USART1_UART_Init+0x58>)
 80050fa:	220c      	movs	r2, #12
 80050fc:	615a      	str	r2, [r3, #20]
		huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80050fe:	4b0b      	ldr	r3, [pc, #44]	@ (800512c <MX_USART1_UART_Init+0x58>)
 8005100:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005104:	619a      	str	r2, [r3, #24]
		huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005106:	4b09      	ldr	r3, [pc, #36]	@ (800512c <MX_USART1_UART_Init+0x58>)
 8005108:	2200      	movs	r2, #0
 800510a:	61da      	str	r2, [r3, #28]
		huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800510c:	4b07      	ldr	r3, [pc, #28]	@ (800512c <MX_USART1_UART_Init+0x58>)
 800510e:	2200      	movs	r2, #0
 8005110:	621a      	str	r2, [r3, #32]
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005112:	4b06      	ldr	r3, [pc, #24]	@ (800512c <MX_USART1_UART_Init+0x58>)
 8005114:	2200      	movs	r2, #0
 8005116:	625a      	str	r2, [r3, #36]	@ 0x24
		if (HAL_UART_Init(&huart1) != HAL_OK)
 8005118:	4804      	ldr	r0, [pc, #16]	@ (800512c <MX_USART1_UART_Init+0x58>)
 800511a:	f00f fc0b 	bl	8014934 <HAL_UART_Init>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <MX_USART1_UART_Init+0x54>
		{
			Error_Handler();
 8005124:	f000 f92a 	bl	800537c <Error_Handler>
		}
		/* USER CODE BEGIN USART1_Init 2 */

		/* USER CODE END USART1_Init 2 */

	}
 8005128:	bf00      	nop
 800512a:	bd80      	pop	{r7, pc}
 800512c:	20000724 	.word	0x20000724
 8005130:	40013800 	.word	0x40013800

08005134 <MX_DMA_Init>:

	/**
	 * Enable DMA controller clock
	 */
	static void MX_DMA_Init(void)
	{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0

		/* DMA controller clock enable */
		__HAL_RCC_DMA1_CLK_ENABLE();
 800513a:	4b14      	ldr	r3, [pc, #80]	@ (800518c <MX_DMA_Init+0x58>)
 800513c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800513e:	4a13      	ldr	r2, [pc, #76]	@ (800518c <MX_DMA_Init+0x58>)
 8005140:	f043 0301 	orr.w	r3, r3, #1
 8005144:	6493      	str	r3, [r2, #72]	@ 0x48
 8005146:	4b11      	ldr	r3, [pc, #68]	@ (800518c <MX_DMA_Init+0x58>)
 8005148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	607b      	str	r3, [r7, #4]
 8005150:	687b      	ldr	r3, [r7, #4]

		/* DMA interrupt init */
		/* DMA1_Channel1_IRQn interrupt configuration */
		HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005152:	2200      	movs	r2, #0
 8005154:	2100      	movs	r1, #0
 8005156:	200b      	movs	r0, #11
 8005158:	f007 fc43 	bl	800c9e2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800515c:	200b      	movs	r0, #11
 800515e:	f007 fc5c 	bl	800ca1a <HAL_NVIC_EnableIRQ>
		/* DMA1_Channel4_IRQn interrupt configuration */
		HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8005162:	2200      	movs	r2, #0
 8005164:	2100      	movs	r1, #0
 8005166:	200e      	movs	r0, #14
 8005168:	f007 fc3b 	bl	800c9e2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800516c:	200e      	movs	r0, #14
 800516e:	f007 fc54 	bl	800ca1a <HAL_NVIC_EnableIRQ>
		/* DMA1_Channel5_IRQn interrupt configuration */
		HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005172:	2200      	movs	r2, #0
 8005174:	2100      	movs	r1, #0
 8005176:	200f      	movs	r0, #15
 8005178:	f007 fc33 	bl	800c9e2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800517c:	200f      	movs	r0, #15
 800517e:	f007 fc4c 	bl	800ca1a <HAL_NVIC_EnableIRQ>

	}
 8005182:	bf00      	nop
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40021000 	.word	0x40021000

08005190 <MX_GPIO_Init>:
	 * @brief GPIO Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_GPIO_Init(void)
	{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08a      	sub	sp, #40	@ 0x28
 8005194:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005196:	f107 0314 	add.w	r3, r7, #20
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	605a      	str	r2, [r3, #4]
 80051a0:	609a      	str	r2, [r3, #8]
 80051a2:	60da      	str	r2, [r3, #12]
 80051a4:	611a      	str	r2, [r3, #16]
		/* USER CODE BEGIN MX_GPIO_Init_1 */
		/* USER CODE END MX_GPIO_Init_1 */

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80051a6:	4b71      	ldr	r3, [pc, #452]	@ (800536c <MX_GPIO_Init+0x1dc>)
 80051a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051aa:	4a70      	ldr	r2, [pc, #448]	@ (800536c <MX_GPIO_Init+0x1dc>)
 80051ac:	f043 0304 	orr.w	r3, r3, #4
 80051b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051b2:	4b6e      	ldr	r3, [pc, #440]	@ (800536c <MX_GPIO_Init+0x1dc>)
 80051b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051b6:	f003 0304 	and.w	r3, r3, #4
 80051ba:	613b      	str	r3, [r7, #16]
 80051bc:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOH_CLK_ENABLE();
 80051be:	4b6b      	ldr	r3, [pc, #428]	@ (800536c <MX_GPIO_Init+0x1dc>)
 80051c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c2:	4a6a      	ldr	r2, [pc, #424]	@ (800536c <MX_GPIO_Init+0x1dc>)
 80051c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051ca:	4b68      	ldr	r3, [pc, #416]	@ (800536c <MX_GPIO_Init+0x1dc>)
 80051cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80051d6:	4b65      	ldr	r3, [pc, #404]	@ (800536c <MX_GPIO_Init+0x1dc>)
 80051d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051da:	4a64      	ldr	r2, [pc, #400]	@ (800536c <MX_GPIO_Init+0x1dc>)
 80051dc:	f043 0301 	orr.w	r3, r3, #1
 80051e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051e2:	4b62      	ldr	r3, [pc, #392]	@ (800536c <MX_GPIO_Init+0x1dc>)
 80051e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	60bb      	str	r3, [r7, #8]
 80051ec:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80051ee:	4b5f      	ldr	r3, [pc, #380]	@ (800536c <MX_GPIO_Init+0x1dc>)
 80051f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051f2:	4a5e      	ldr	r2, [pc, #376]	@ (800536c <MX_GPIO_Init+0x1dc>)
 80051f4:	f043 0302 	orr.w	r3, r3, #2
 80051f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051fa:	4b5c      	ldr	r3, [pc, #368]	@ (800536c <MX_GPIO_Init+0x1dc>)
 80051fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	607b      	str	r3, [r7, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8005206:	4b59      	ldr	r3, [pc, #356]	@ (800536c <MX_GPIO_Init+0x1dc>)
 8005208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800520a:	4a58      	ldr	r2, [pc, #352]	@ (800536c <MX_GPIO_Init+0x1dc>)
 800520c:	f043 0308 	orr.w	r3, r3, #8
 8005210:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005212:	4b56      	ldr	r3, [pc, #344]	@ (800536c <MX_GPIO_Init+0x1dc>)
 8005214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	683b      	ldr	r3, [r7, #0]

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(DBG_GPIO_Port, DBG_Pin, GPIO_PIN_RESET);
 800521e:	2200      	movs	r2, #0
 8005220:	2108      	movs	r1, #8
 8005222:	4853      	ldr	r0, [pc, #332]	@ (8005370 <MX_GPIO_Init+0x1e0>)
 8005224:	f009 f900 	bl	800e428 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 8005228:	2201      	movs	r2, #1
 800522a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800522e:	4851      	ldr	r0, [pc, #324]	@ (8005374 <MX_GPIO_Init+0x1e4>)
 8005230:	f009 f8fa 	bl	800e428 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOC, FLASH_nWP_Pin|FLASH_nRESET_Pin, GPIO_PIN_SET);
 8005234:	2201      	movs	r2, #1
 8005236:	21c0      	movs	r1, #192	@ 0xc0
 8005238:	484d      	ldr	r0, [pc, #308]	@ (8005370 <MX_GPIO_Init+0x1e0>)
 800523a:	f009 f8f5 	bl	800e428 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOA, LTE_POWER_ON_Pin|LTE_RESET_Pin, GPIO_PIN_SET);
 800523e:	2201      	movs	r2, #1
 8005240:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005244:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005248:	f009 f8ee 	bl	800e428 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 800524c:	2200      	movs	r2, #0
 800524e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005252:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005256:	f009 f8e7 	bl	800e428 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(DTR_GPIO_Port, DTR_Pin, GPIO_PIN_RESET);
 800525a:	2200      	movs	r2, #0
 800525c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005260:	4844      	ldr	r0, [pc, #272]	@ (8005374 <MX_GPIO_Init+0x1e4>)
 8005262:	f009 f8e1 	bl	800e428 <HAL_GPIO_WritePin>

		/*Configure GPIO pins : USR_BTN_Pin PC4 */
		GPIO_InitStruct.Pin = USR_BTN_Pin|GPIO_PIN_4;
 8005266:	f242 0310 	movw	r3, #8208	@ 0x2010
 800526a:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800526c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005270:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005272:	2300      	movs	r3, #0
 8005274:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005276:	f107 0314 	add.w	r3, r7, #20
 800527a:	4619      	mov	r1, r3
 800527c:	483c      	ldr	r0, [pc, #240]	@ (8005370 <MX_GPIO_Init+0x1e0>)
 800527e:	f008 ff29 	bl	800e0d4 <HAL_GPIO_Init>

		/*Configure GPIO pins : DBG_Pin FLASH_nWP_Pin FLASH_nRESET_Pin */
		GPIO_InitStruct.Pin = DBG_Pin|FLASH_nWP_Pin|FLASH_nRESET_Pin;
 8005282:	23c8      	movs	r3, #200	@ 0xc8
 8005284:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005286:	2301      	movs	r3, #1
 8005288:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528a:	2300      	movs	r3, #0
 800528c:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800528e:	2300      	movs	r3, #0
 8005290:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005292:	f107 0314 	add.w	r3, r7, #20
 8005296:	4619      	mov	r1, r3
 8005298:	4835      	ldr	r0, [pc, #212]	@ (8005370 <MX_GPIO_Init+0x1e0>)
 800529a:	f008 ff1b 	bl	800e0d4 <HAL_GPIO_Init>

		/*Configure GPIO pin : PA3 */
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 800529e:	2308      	movs	r3, #8
 80052a0:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052a2:	2300      	movs	r3, #0
 80052a4:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052aa:	f107 0314 	add.w	r3, r7, #20
 80052ae:	4619      	mov	r1, r3
 80052b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80052b4:	f008 ff0e 	bl	800e0d4 <HAL_GPIO_Init>

		/*Configure GPIO pins : FLASH_nCS_Pin DTR_Pin */
		GPIO_InitStruct.Pin = FLASH_nCS_Pin|DTR_Pin;
 80052b8:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 80052bc:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052be:	2301      	movs	r3, #1
 80052c0:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052c6:	2300      	movs	r3, #0
 80052c8:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052ca:	f107 0314 	add.w	r3, r7, #20
 80052ce:	4619      	mov	r1, r3
 80052d0:	4828      	ldr	r0, [pc, #160]	@ (8005374 <MX_GPIO_Init+0x1e4>)
 80052d2:	f008 feff 	bl	800e0d4 <HAL_GPIO_Init>

		/*Configure GPIO pins : LTE_POWER_ON_Pin LTE_RESET_Pin */
		GPIO_InitStruct.Pin = LTE_POWER_ON_Pin|LTE_RESET_Pin;
 80052d6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80052da:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80052dc:	2311      	movs	r3, #17
 80052de:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e0:	2300      	movs	r3, #0
 80052e2:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052e4:	2300      	movs	r3, #0
 80052e6:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052e8:	f107 0314 	add.w	r3, r7, #20
 80052ec:	4619      	mov	r1, r3
 80052ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80052f2:	f008 feef 	bl	800e0d4 <HAL_GPIO_Init>

		/*Configure GPIO pin : ACC_nCS_Pin */
		GPIO_InitStruct.Pin = ACC_nCS_Pin;
 80052f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052fa:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052fc:	2301      	movs	r3, #1
 80052fe:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005300:	2300      	movs	r3, #0
 8005302:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005304:	2300      	movs	r3, #0
 8005306:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(ACC_nCS_GPIO_Port, &GPIO_InitStruct);
 8005308:	f107 0314 	add.w	r3, r7, #20
 800530c:	4619      	mov	r1, r3
 800530e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005312:	f008 fedf 	bl	800e0d4 <HAL_GPIO_Init>

		/*Configure GPIO pin : PD2 */
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005316:	2304      	movs	r3, #4
 8005318:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800531a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800531e:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005320:	2300      	movs	r3, #0
 8005322:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005324:	f107 0314 	add.w	r3, r7, #20
 8005328:	4619      	mov	r1, r3
 800532a:	4813      	ldr	r0, [pc, #76]	@ (8005378 <MX_GPIO_Init+0x1e8>)
 800532c:	f008 fed2 	bl	800e0d4 <HAL_GPIO_Init>

		/*Configure GPIO pin : DCD_Pin */
		GPIO_InitStruct.Pin = DCD_Pin;
 8005330:	2320      	movs	r3, #32
 8005332:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005334:	2300      	movs	r3, #0
 8005336:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005338:	2300      	movs	r3, #0
 800533a:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(DCD_GPIO_Port, &GPIO_InitStruct);
 800533c:	f107 0314 	add.w	r3, r7, #20
 8005340:	4619      	mov	r1, r3
 8005342:	480c      	ldr	r0, [pc, #48]	@ (8005374 <MX_GPIO_Init+0x1e4>)
 8005344:	f008 fec6 	bl	800e0d4 <HAL_GPIO_Init>

		/*Configure GPIO pin : PB8 */
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005348:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800534c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800534e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005352:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005354:	2300      	movs	r3, #0
 8005356:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005358:	f107 0314 	add.w	r3, r7, #20
 800535c:	4619      	mov	r1, r3
 800535e:	4805      	ldr	r0, [pc, #20]	@ (8005374 <MX_GPIO_Init+0x1e4>)
 8005360:	f008 feb8 	bl	800e0d4 <HAL_GPIO_Init>

		/* USER CODE BEGIN MX_GPIO_Init_2 */
		/* USER CODE END MX_GPIO_Init_2 */
	}
 8005364:	bf00      	nop
 8005366:	3728      	adds	r7, #40	@ 0x28
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40021000 	.word	0x40021000
 8005370:	48000800 	.word	0x48000800
 8005374:	48000400 	.word	0x48000400
 8005378:	48000c00 	.word	0x48000c00

0800537c <Error_Handler>:
	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval None
	 */
	void Error_Handler(void)
	{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005380:	b672      	cpsid	i
}
 8005382:	bf00      	nop
		/* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 8005384:	bf00      	nop
 8005386:	e7fd      	b.n	8005384 <Error_Handler+0x8>

08005388 <OTA_Init>:
#include "base64.h"


/*-----INIZIALIZZAZIONE OTA-----*/
int OTA_Init(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 800538e:	2300      	movs	r3, #0
 8005390:	71fb      	strb	r3, [r7, #7]

	if (sys.OTA_File_isOpen)
 8005392:	4b10      	ldr	r3, [pc, #64]	@ (80053d4 <OTA_Init+0x4c>)
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <OTA_Init+0x1e>
	{
		f_close(&sys.OTA_File);
 80053a0:	480d      	ldr	r0, [pc, #52]	@ (80053d8 <OTA_Init+0x50>)
 80053a2:	f005 f83d 	bl	800a420 <f_close>
	}

	sys.OTA_File_isOpen = 0;
 80053a6:	4a0b      	ldr	r2, [pc, #44]	@ (80053d4 <OTA_Init+0x4c>)
 80053a8:	7813      	ldrb	r3, [r2, #0]
 80053aa:	f023 0301 	bic.w	r3, r3, #1
 80053ae:	7013      	strb	r3, [r2, #0]

	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ | FA_WRITE | FA_CREATE_ALWAYS);
 80053b0:	220b      	movs	r2, #11
 80053b2:	490a      	ldr	r1, [pc, #40]	@ (80053dc <OTA_Init+0x54>)
 80053b4:	4808      	ldr	r0, [pc, #32]	@ (80053d8 <OTA_Init+0x50>)
 80053b6:	f004 fb3f 	bl	8009a38 <f_open>
 80053ba:	4603      	mov	r3, r0
 80053bc:	71fb      	strb	r3, [r7, #7]

	if (fRes != FR_OK)
 80053be:	79fb      	ldrb	r3, [r7, #7]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d002      	beq.n	80053ca <OTA_Init+0x42>
	{
		return -1;
 80053c4:	f04f 33ff 	mov.w	r3, #4294967295
 80053c8:	e000      	b.n	80053cc <OTA_Init+0x44>
	}

	return 0;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	20000840 	.word	0x20000840
 80053d8:	20000844 	.word	0x20000844
 80053dc:	08017778 	.word	0x08017778

080053e0 <OTA_Receive>:

/*-----RICEZIONE FILE OTA-----*/
int OTA_Receive(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	f5ad 6d3d 	sub.w	sp, sp, #3024	@ 0xbd0
 80053e6:	af00      	add	r7, sp, #0
	uint8_t rx_buffer[1500];
	UINT bytes_written = 0;
 80053e8:	f507 633d 	add.w	r3, r7, #3024	@ 0xbd0
 80053ec:	f5a3 63be 	sub.w	r3, r3, #1520	@ 0x5f0
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
	uint8_t bin_buffer[1500];
	
	SIM_Wait_Response("+CIPRXGET: 1");
 80053f4:	483f      	ldr	r0, [pc, #252]	@ (80054f4 <OTA_Receive+0x114>)
 80053f6:	f7fc ff4b 	bl	8002290 <SIM_Wait_Response>

	while(1)
	{
		SIM_Send_Command("AT+CIPRXGET=2,1460\r");
 80053fa:	483f      	ldr	r0, [pc, #252]	@ (80054f8 <OTA_Receive+0x118>)
 80053fc:	f7fc fb18 	bl	8001a30 <SIM_Send_Command>
		SIM_Receive_Response((char*)rx_buffer);
 8005400:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 8005404:	4618      	mov	r0, r3
 8005406:	f7fc fb3f 	bl	8001a88 <SIM_Receive_Response>

		char *info = strstr((char*)rx_buffer, "+CIPRXGET: 2,");
 800540a:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 800540e:	493b      	ldr	r1, [pc, #236]	@ (80054fc <OTA_Receive+0x11c>)
 8005410:	4618      	mov	r0, r3
 8005412:	f010 ff15 	bl	8016240 <strstr>
 8005416:	f8c7 0bcc 	str.w	r0, [r7, #3020]	@ 0xbcc
		if (info) 
 800541a:	f8d7 3bcc 	ldr.w	r3, [r7, #3020]	@ 0xbcc
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0eb      	beq.n	80053fa <OTA_Receive+0x1a>
		{
			int actual_len = atoi(info + strlen("+CIPRXGET: 2,"));
 8005422:	f8d7 3bcc 	ldr.w	r3, [r7, #3020]	@ 0xbcc
 8005426:	330d      	adds	r3, #13
 8005428:	4618      	mov	r0, r3
 800542a:	f010 fde5 	bl	8015ff8 <atoi>
 800542e:	f8c7 0bc8 	str.w	r0, [r7, #3016]	@ 0xbc8
			char *data_start = strstr(info, "\r\n");
 8005432:	4933      	ldr	r1, [pc, #204]	@ (8005500 <OTA_Receive+0x120>)
 8005434:	f8d7 0bcc 	ldr.w	r0, [r7, #3020]	@ 0xbcc
 8005438:	f010 ff02 	bl	8016240 <strstr>
 800543c:	f8c7 0bc4 	str.w	r0, [r7, #3012]	@ 0xbc4
			if (actual_len == 0)
 8005440:	f8d7 3bc8 	ldr.w	r3, [r7, #3016]	@ 0xbc8
 8005444:	2b00      	cmp	r3, #0
 8005446:	d045      	beq.n	80054d4 <OTA_Receive+0xf4>
            {
                break;           // Fine file
            }
			if (data_start) 
 8005448:	f8d7 3bc4 	ldr.w	r3, [r7, #3012]	@ 0xbc4
 800544c:	2b00      	cmp	r3, #0
 800544e:	d03b      	beq.n	80054c8 <OTA_Receive+0xe8>
			{
				data_start += 2; // Salta "\r\n"
 8005450:	f8d7 3bc4 	ldr.w	r3, [r7, #3012]	@ 0xbc4
 8005454:	3302      	adds	r3, #2
 8005456:	f8c7 3bc4 	str.w	r3, [r7, #3012]	@ 0xbc4
				SIM_Wait_Response("OK");
 800545a:	482a      	ldr	r0, [pc, #168]	@ (8005504 <OTA_Receive+0x124>)
 800545c:	f7fc ff18 	bl	8002290 <SIM_Wait_Response>
				size_t bin_len = Base64_Decode(data_start, bin_buffer, actual_len);
 8005460:	f8d7 2bc8 	ldr.w	r2, [r7, #3016]	@ 0xbc8
 8005464:	1d3b      	adds	r3, r7, #4
 8005466:	4619      	mov	r1, r3
 8005468:	f8d7 0bc4 	ldr.w	r0, [r7, #3012]	@ 0xbc4
 800546c:	f7fc ffbc 	bl	80023e8 <Base64_Decode>
 8005470:	f8c7 0bc0 	str.w	r0, [r7, #3008]	@ 0xbc0
				f_write(&sys.OTA_File, bin_buffer, bin_len, &bytes_written);
 8005474:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8005478:	1d39      	adds	r1, r7, #4
 800547a:	f8d7 2bc0 	ldr.w	r2, [r7, #3008]	@ 0xbc0
 800547e:	4822      	ldr	r0, [pc, #136]	@ (8005508 <OTA_Receive+0x128>)
 8005480:	f004 fdc5 	bl	800a00e <f_write>
				if(bytes_written != bin_len)
 8005484:	f507 633d 	add.w	r3, r7, #3024	@ 0xbd0
 8005488:	f5a3 63be 	sub.w	r3, r3, #1520	@ 0x5f0
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f8d7 2bc0 	ldr.w	r2, [r7, #3008]	@ 0xbc0
 8005492:	429a      	cmp	r2, r3
 8005494:	d005      	beq.n	80054a2 <OTA_Receive+0xc2>
				{
					f_close(&sys.OTA_File);
 8005496:	481c      	ldr	r0, [pc, #112]	@ (8005508 <OTA_Receive+0x128>)
 8005498:	f004 ffc2 	bl	800a420 <f_close>
					return -1; 
 800549c:	f04f 33ff 	mov.w	r3, #4294967295
 80054a0:	e022      	b.n	80054e8 <OTA_Receive+0x108>
				}
				SIM_Send_Command("AT+CIPSEND\r");
 80054a2:	481a      	ldr	r0, [pc, #104]	@ (800550c <OTA_Receive+0x12c>)
 80054a4:	f7fc fac4 	bl	8001a30 <SIM_Send_Command>
				SIM_Wait_Response(">");
 80054a8:	4819      	ldr	r0, [pc, #100]	@ (8005510 <OTA_Receive+0x130>)
 80054aa:	f7fc fef1 	bl	8002290 <SIM_Wait_Response>
				SIM_Send_Command("ACK"); // oppure "ACK\n" se vuoi
 80054ae:	4819      	ldr	r0, [pc, #100]	@ (8005514 <OTA_Receive+0x134>)
 80054b0:	f7fc fabe 	bl	8001a30 <SIM_Send_Command>
				SIM_Send_Command("\x1A"); // CTRL+Z per invio
 80054b4:	4818      	ldr	r0, [pc, #96]	@ (8005518 <OTA_Receive+0x138>)
 80054b6:	f7fc fabb 	bl	8001a30 <SIM_Send_Command>
				SIM_Wait_Response("SEND OK");
 80054ba:	4818      	ldr	r0, [pc, #96]	@ (800551c <OTA_Receive+0x13c>)
 80054bc:	f7fc fee8 	bl	8002290 <SIM_Wait_Response>
				SIM_Wait_Response("+CIPRXGET: 1");
 80054c0:	480c      	ldr	r0, [pc, #48]	@ (80054f4 <OTA_Receive+0x114>)
 80054c2:	f7fc fee5 	bl	8002290 <SIM_Wait_Response>
 80054c6:	e798      	b.n	80053fa <OTA_Receive+0x1a>
			}
			else
			{
				f_close(&sys.OTA_File);
 80054c8:	480f      	ldr	r0, [pc, #60]	@ (8005508 <OTA_Receive+0x128>)
 80054ca:	f004 ffa9 	bl	800a420 <f_close>
				return -1; 
 80054ce:	f04f 33ff 	mov.w	r3, #4294967295
 80054d2:	e009      	b.n	80054e8 <OTA_Receive+0x108>
                break;           // Fine file
 80054d4:	bf00      	nop
			}
		}
	}

	f_close(&sys.OTA_File);
 80054d6:	480c      	ldr	r0, [pc, #48]	@ (8005508 <OTA_Receive+0x128>)
 80054d8:	f004 ffa2 	bl	800a420 <f_close>
    sys.OTA_File_isOpen = 0;
 80054dc:	4a10      	ldr	r2, [pc, #64]	@ (8005520 <OTA_Receive+0x140>)
 80054de:	7813      	ldrb	r3, [r2, #0]
 80054e0:	f023 0301 	bic.w	r3, r3, #1
 80054e4:	7013      	strb	r3, [r2, #0]
	return 0;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	f507 673d 	add.w	r7, r7, #3024	@ 0xbd0
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	08017788 	.word	0x08017788
 80054f8:	08017798 	.word	0x08017798
 80054fc:	080177ac 	.word	0x080177ac
 8005500:	080177bc 	.word	0x080177bc
 8005504:	080177c0 	.word	0x080177c0
 8005508:	20000844 	.word	0x20000844
 800550c:	080177c4 	.word	0x080177c4
 8005510:	080177d0 	.word	0x080177d0
 8005514:	080177d4 	.word	0x080177d4
 8005518:	080177d8 	.word	0x080177d8
 800551c:	080177dc 	.word	0x080177dc
 8005520:	20000840 	.word	0x20000840

08005524 <OTA_CRC_Check>:

int OTA_CRC_Check(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	f5ad 6d8e 	sub.w	sp, sp, #1136	@ 0x470
 800552a:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 800552c:	2300      	movs	r3, #0
 800552e:	f887 3463 	strb.w	r3, [r7, #1123]	@ 0x463
	UINT read = 0;
 8005532:	2300      	movs	r3, #0
 8005534:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
	uint16_t ota_crc = 0;
 8005538:	2300      	movs	r3, #0
 800553a:	f8a7 346e 	strh.w	r3, [r7, #1134]	@ 0x46e
	uint8_t rx_buffer[64];
	uint32_t calc_crc = 0;
 800553e:	2300      	movs	r3, #0
 8005540:	f8c7 3468 	str.w	r3, [r7, #1128]	@ 0x468

	SIM_Wait_Response("+CIPRXGET: 1");
 8005544:	485a      	ldr	r0, [pc, #360]	@ (80056b0 <OTA_CRC_Check+0x18c>)
 8005546:	f7fc fea3 	bl	8002290 <SIM_Wait_Response>
	SIM_Send_Command("AT+CIPRXGET=2,1024\r");
 800554a:	485a      	ldr	r0, [pc, #360]	@ (80056b4 <OTA_CRC_Check+0x190>)
 800554c:	f7fc fa70 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response((char*)rx_buffer);
 8005550:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 8005554:	4618      	mov	r0, r3
 8005556:	f7fc fa97 	bl	8001a88 <SIM_Receive_Response>
	char *info = strstr((char*)rx_buffer, "+CIPRXGET: 2,");
 800555a:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 800555e:	4956      	ldr	r1, [pc, #344]	@ (80056b8 <OTA_CRC_Check+0x194>)
 8005560:	4618      	mov	r0, r3
 8005562:	f010 fe6d 	bl	8016240 <strstr>
 8005566:	f8c7 045c 	str.w	r0, [r7, #1116]	@ 0x45c
	char *data_start = strstr(info, "\r\n");
 800556a:	4954      	ldr	r1, [pc, #336]	@ (80056bc <OTA_CRC_Check+0x198>)
 800556c:	f8d7 045c 	ldr.w	r0, [r7, #1116]	@ 0x45c
 8005570:	f010 fe66 	bl	8016240 <strstr>
 8005574:	f8c7 0458 	str.w	r0, [r7, #1112]	@ 0x458

	if (data_start) 
 8005578:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 800557c:	2b00      	cmp	r3, #0
 800557e:	d022      	beq.n	80055c6 <OTA_CRC_Check+0xa2>
	{
		data_start += 2; // Salta "\r\n"
 8005580:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 8005584:	3302      	adds	r3, #2
 8005586:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
		uint8_t crc_bin[8];
		size_t crc_len = Base64_Decode(data_start, crc_bin, sizeof(crc_bin));
 800558a:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 800558e:	2208      	movs	r2, #8
 8005590:	4619      	mov	r1, r3
 8005592:	f8d7 0458 	ldr.w	r0, [r7, #1112]	@ 0x458
 8005596:	f7fc ff27 	bl	80023e8 <Base64_Decode>
 800559a:	f8c7 0454 	str.w	r0, [r7, #1108]	@ 0x454
		if (crc_len == 4) 
 800559e:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d10c      	bne.n	80055c0 <OTA_CRC_Check+0x9c>
		{
			ota_crc = (crc_bin[0] << 24) | (crc_bin[1] << 16) | (crc_bin[2] << 8) | crc_bin[3];
 80055a6:	f897 3406 	ldrb.w	r3, [r7, #1030]	@ 0x406
 80055aa:	b21b      	sxth	r3, r3
 80055ac:	021b      	lsls	r3, r3, #8
 80055ae:	b21a      	sxth	r2, r3
 80055b0:	f897 3407 	ldrb.w	r3, [r7, #1031]	@ 0x407
 80055b4:	b21b      	sxth	r3, r3
 80055b6:	4313      	orrs	r3, r2
 80055b8:	b21b      	sxth	r3, r3
 80055ba:	f8a7 346e 	strh.w	r3, [r7, #1134]	@ 0x46e
 80055be:	e002      	b.n	80055c6 <OTA_CRC_Check+0xa2>
		} 
		else 
		{
			return -1;
 80055c0:	f04f 33ff 	mov.w	r3, #4294967295
 80055c4:	e06f      	b.n	80056a6 <OTA_CRC_Check+0x182>
		}
	}

	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ);
 80055c6:	2201      	movs	r2, #1
 80055c8:	493d      	ldr	r1, [pc, #244]	@ (80056c0 <OTA_CRC_Check+0x19c>)
 80055ca:	483e      	ldr	r0, [pc, #248]	@ (80056c4 <OTA_CRC_Check+0x1a0>)
 80055cc:	f004 fa34 	bl	8009a38 <f_open>
 80055d0:	4603      	mov	r3, r0
 80055d2:	f887 3463 	strb.w	r3, [r7, #1123]	@ 0x463
	if (fRes != FR_OK)
 80055d6:	f897 3463 	ldrb.w	r3, [r7, #1123]	@ 0x463
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <OTA_CRC_Check+0xc0>
	{
		return -1;
 80055de:	f04f 33ff 	mov.w	r3, #4294967295
 80055e2:	e060      	b.n	80056a6 <OTA_CRC_Check+0x182>
	}

	uint32_t size = f_size(&sys.OTA_File);
 80055e4:	4b38      	ldr	r3, [pc, #224]	@ (80056c8 <OTA_CRC_Check+0x1a4>)
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
    HAL_CRCEx_Input_Data_Reverse(HCRC, CRC_INPUTDATA_INVERSION_BYTE);
 80055ec:	2120      	movs	r1, #32
 80055ee:	4837      	ldr	r0, [pc, #220]	@ (80056cc <OTA_CRC_Check+0x1a8>)
 80055f0:	f007 fc32 	bl	800ce58 <HAL_CRCEx_Input_Data_Reverse>
    HAL_CRCEx_Output_Data_Reverse(HCRC, CRC_OUTPUTDATA_INVERSION_ENABLE);
 80055f4:	2180      	movs	r1, #128	@ 0x80
 80055f6:	4835      	ldr	r0, [pc, #212]	@ (80056cc <OTA_CRC_Check+0x1a8>)
 80055f8:	f007 fc4a 	bl	800ce90 <HAL_CRCEx_Output_Data_Reverse>
    HCRC->Instance->INIT = 0xFFFFFFFF;
 80055fc:	4b33      	ldr	r3, [pc, #204]	@ (80056cc <OTA_CRC_Check+0x1a8>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f04f 32ff 	mov.w	r2, #4294967295
 8005604:	611a      	str	r2, [r3, #16]
    HAL_CRCEx_Polynomial_Set(HCRC, 0x04c11db7, CRC_POLYLENGTH_32B);
 8005606:	2200      	movs	r2, #0
 8005608:	4931      	ldr	r1, [pc, #196]	@ (80056d0 <OTA_CRC_Check+0x1ac>)
 800560a:	4830      	ldr	r0, [pc, #192]	@ (80056cc <OTA_CRC_Check+0x1a8>)
 800560c:	f007 fb96 	bl	800cd3c <HAL_CRCEx_Polynomial_Set>

	while (size > 0)
 8005610:	e038      	b.n	8005684 <OTA_CRC_Check+0x160>
	{
		uint8_t buffer[1024];
		UINT to_read = (size > sizeof(buffer)) ? sizeof(buffer) : size;
 8005612:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8005616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800561a:	bf28      	it	cs
 800561c:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8005620:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
		if (f_read(&sys.OTA_File, buffer, to_read, &read) != FR_OK || read == 0)
 8005624:	f207 434c 	addw	r3, r7, #1100	@ 0x44c
 8005628:	1d39      	adds	r1, r7, #4
 800562a:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 800562e:	4825      	ldr	r0, [pc, #148]	@ (80056c4 <OTA_CRC_Check+0x1a0>)
 8005630:	f004 fb9a 	bl	8009d68 <f_read>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d103      	bne.n	8005642 <OTA_CRC_Check+0x11e>
 800563a:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 800563e:	2b00      	cmp	r3, #0
 8005640:	d105      	bne.n	800564e <OTA_CRC_Check+0x12a>
		{
			f_close(&sys.OTA_File);
 8005642:	4820      	ldr	r0, [pc, #128]	@ (80056c4 <OTA_CRC_Check+0x1a0>)
 8005644:	f004 feec 	bl	800a420 <f_close>
			return -1;
 8005648:	f04f 33ff 	mov.w	r3, #4294967295
 800564c:	e02b      	b.n	80056a6 <OTA_CRC_Check+0x182>
		}
		calc_crc = HAL_CRC_Accumulate(HCRC, (uint32_t *)buffer, read / 4 + (read % 4 != 0));
 800564e:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8005652:	089b      	lsrs	r3, r3, #2
 8005654:	f8d7 244c 	ldr.w	r2, [r7, #1100]	@ 0x44c
 8005658:	f002 0203 	and.w	r2, r2, #3
 800565c:	2a00      	cmp	r2, #0
 800565e:	bf14      	ite	ne
 8005660:	2201      	movne	r2, #1
 8005662:	2200      	moveq	r2, #0
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	441a      	add	r2, r3
 8005668:	1d3b      	adds	r3, r7, #4
 800566a:	4619      	mov	r1, r3
 800566c:	4817      	ldr	r0, [pc, #92]	@ (80056cc <OTA_CRC_Check+0x1a8>)
 800566e:	f007 fa57 	bl	800cb20 <HAL_CRC_Accumulate>
 8005672:	f8c7 0468 	str.w	r0, [r7, #1128]	@ 0x468
		size -= read;
 8005676:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 800567a:	f8d7 2464 	ldr.w	r2, [r7, #1124]	@ 0x464
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
	while (size > 0)
 8005684:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1c2      	bne.n	8005612 <OTA_CRC_Check+0xee>
	}

	f_close(&sys.OTA_File);
 800568c:	480d      	ldr	r0, [pc, #52]	@ (80056c4 <OTA_CRC_Check+0x1a0>)
 800568e:	f004 fec7 	bl	800a420 <f_close>

	if (calc_crc != ota_crc)
 8005692:	f8b7 346e 	ldrh.w	r3, [r7, #1134]	@ 0x46e
 8005696:	f8d7 2468 	ldr.w	r2, [r7, #1128]	@ 0x468
 800569a:	429a      	cmp	r2, r3
 800569c:	d002      	beq.n	80056a4 <OTA_CRC_Check+0x180>
	{
		return -1; // CRC non corrisponde
 800569e:	f04f 33ff 	mov.w	r3, #4294967295
 80056a2:	e000      	b.n	80056a6 <OTA_CRC_Check+0x182>
	}
	
	return 0; // CRC OK
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	f507 678e 	add.w	r7, r7, #1136	@ 0x470
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	08017788 	.word	0x08017788
 80056b4:	080177e4 	.word	0x080177e4
 80056b8:	080177ac 	.word	0x080177ac
 80056bc:	080177bc 	.word	0x080177bc
 80056c0:	08017778 	.word	0x08017778
 80056c4:	20000844 	.word	0x20000844
 80056c8:	20000840 	.word	0x20000840
 80056cc:	200003c4 	.word	0x200003c4
 80056d0:	04c11db7 	.word	0x04c11db7

080056d4 <OTA_Apply>:


/*-----APPLICAZIONE UPDATE-----*/
int OTA_Apply(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b098      	sub	sp, #96	@ 0x60
 80056d8:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 80056da:	2300      	movs	r3, #0
 80056dc:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	int32_t result = 0;
 80056e0:	2300      	movs	r3, #0
 80056e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint8_t ota_bank = 0;
 80056e4:	2300      	movs	r3, #0
 80056e6:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
	uint32_t faddr = 0;
 80056ea:	2300      	movs	r3, #0
 80056ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t size = 0;
 80056ee:	2300      	movs	r3, #0
 80056f0:	65bb      	str	r3, [r7, #88]	@ 0x58
	uint64_t pword = 0;
 80056f2:	f04f 0200 	mov.w	r2, #0
 80056f6:	f04f 0300 	mov.w	r3, #0
 80056fa:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	uint32_t faddr_off = 0;
 80056fe:	2300      	movs	r3, #0
 8005700:	657b      	str	r3, [r7, #84]	@ 0x54
	UINT read = 0;
 8005702:	2300      	movs	r3, #0
 8005704:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t PageError = 0;
 8005706:	2300      	movs	r3, #0
 8005708:	63bb      	str	r3, [r7, #56]	@ 0x38
	FLASH_EraseInitTypeDef erase_cfg = {0};
 800570a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	605a      	str	r2, [r3, #4]
 8005714:	609a      	str	r2, [r3, #8]
 8005716:	60da      	str	r2, [r3, #12]

	const uint32_t BANKSIZE = FLASH_SIZE >> 1;
 8005718:	4b68      	ldr	r3, [pc, #416]	@ (80058bc <OTA_Apply+0x1e8>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	b29b      	uxth	r3, r3
 800571e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005722:	4293      	cmp	r3, r2
 8005724:	d006      	beq.n	8005734 <OTA_Apply+0x60>
 8005726:	4b65      	ldr	r3, [pc, #404]	@ (80058bc <OTA_Apply+0x1e8>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	029b      	lsls	r3, r3, #10
 800572c:	085a      	lsrs	r2, r3, #1
 800572e:	4b64      	ldr	r3, [pc, #400]	@ (80058c0 <OTA_Apply+0x1ec>)
 8005730:	4013      	ands	r3, r2
 8005732:	e001      	b.n	8005738 <OTA_Apply+0x64>
 8005734:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005738:	64bb      	str	r3, [r7, #72]	@ 0x48

	FLASH_OBProgramInitTypeDef ob = {0};
 800573a:	463b      	mov	r3, r7
 800573c:	2228      	movs	r2, #40	@ 0x28
 800573e:	2100      	movs	r1, #0
 8005740:	4618      	mov	r0, r3
 8005742:	f010 fd43 	bl	80161cc <memset>

	HAL_FLASHEx_OBGetConfig(&ob);
 8005746:	463b      	mov	r3, r7
 8005748:	4618      	mov	r0, r3
 800574a:	f008 f897 	bl	800d87c <HAL_FLASHEx_OBGetConfig>

	if ((ob.USERConfig & FLASH_OPTR_DUALBANK) == 0)
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d102      	bne.n	800575e <OTA_Apply+0x8a>
	{
		return -1;
 8005758:	f04f 33ff 	mov.w	r3, #4294967295
 800575c:	e0aa      	b.n	80058b4 <OTA_Apply+0x1e0>
	}

	ota_bank = (ob.USERConfig & FLASH_OPTR_BFB2) ? FLASH_BANK_1 : FLASH_BANK_2;
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <OTA_Apply+0x98>
 8005768:	2301      	movs	r3, #1
 800576a:	e000      	b.n	800576e <OTA_Apply+0x9a>
 800576c:	2302      	movs	r3, #2
 800576e:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

	// L'indirizzo deve essere sempre quello del banco 2 (se fa il boot da BANK2 il BANK1 viene rimappato)
	faddr = FLASH_BASE + BANKSIZE;
 8005772:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005774:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8005778:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_FLASH_Unlock() != HAL_OK)
 800577a:	f007 fe53 	bl	800d424 <HAL_FLASH_Unlock>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <OTA_Apply+0xb6>
	{
		return -1;
 8005784:	f04f 33ff 	mov.w	r3, #4294967295
 8005788:	e094      	b.n	80058b4 <OTA_Apply+0x1e0>
	}

	f_close(&sys.OTA_File);
 800578a:	484e      	ldr	r0, [pc, #312]	@ (80058c4 <OTA_Apply+0x1f0>)
 800578c:	f004 fe48 	bl	800a420 <f_close>
	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ);
 8005790:	2201      	movs	r2, #1
 8005792:	494d      	ldr	r1, [pc, #308]	@ (80058c8 <OTA_Apply+0x1f4>)
 8005794:	484b      	ldr	r0, [pc, #300]	@ (80058c4 <OTA_Apply+0x1f0>)
 8005796:	f004 f94f 	bl	8009a38 <f_open>
 800579a:	4603      	mov	r3, r0
 800579c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	if (fRes != FR_OK)
 80057a0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d003      	beq.n	80057b0 <OTA_Apply+0xdc>
	{
		result = -1;
 80057a8:	f04f 33ff 	mov.w	r3, #4294967295
 80057ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 80057ae:	e07b      	b.n	80058a8 <OTA_Apply+0x1d4>
	}

	if ((size = f_size(&sys.OTA_File)) > BANKSIZE)
 80057b0:	4b46      	ldr	r3, [pc, #280]	@ (80058cc <OTA_Apply+0x1f8>)
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d903      	bls.n	80057c6 <OTA_Apply+0xf2>
	{
		result = -1;
 80057be:	f04f 33ff 	mov.w	r3, #4294967295
 80057c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 80057c4:	e070      	b.n	80058a8 <OTA_Apply+0x1d4>
	}

	erase_cfg.TypeErase = FLASH_TYPEERASE_MASSERASE;
 80057c6:	2301      	movs	r3, #1
 80057c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	erase_cfg.Banks = ota_bank;
 80057ca:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80057ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_FLASHEx_Erase(&erase_cfg, &PageError) != HAL_OK)
 80057d0:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80057d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80057d8:	4611      	mov	r1, r2
 80057da:	4618      	mov	r0, r3
 80057dc:	f007 ff44 	bl	800d668 <HAL_FLASHEx_Erase>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d026      	beq.n	8005834 <OTA_Apply+0x160>
	{
		result = -1;
 80057e6:	f04f 33ff 	mov.w	r3, #4294967295
 80057ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 80057ec:	e05c      	b.n	80058a8 <OTA_Apply+0x1d4>
	}

	while (size > 0)
	{
		pword = 0;
 80057ee:	f04f 0200 	mov.w	r2, #0
 80057f2:	f04f 0300 	mov.w	r3, #0
 80057f6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		if (f_read(&sys.OTA_File, (uint8_t *)&pword, sizeof(pword), &read) < 0)
 80057fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80057fe:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8005802:	2208      	movs	r2, #8
 8005804:	482f      	ldr	r0, [pc, #188]	@ (80058c4 <OTA_Apply+0x1f0>)
 8005806:	f004 faaf 	bl	8009d68 <f_read>
			break;
		if (read == 0)
 800580a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800580c:	2b00      	cmp	r3, #0
 800580e:	d015      	beq.n	800583c <OTA_Apply+0x168>
			break;
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, faddr + faddr_off, pword) != HAL_OK)
 8005810:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005814:	18d1      	adds	r1, r2, r3
 8005816:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800581a:	2000      	movs	r0, #0
 800581c:	f007 fd96 	bl	800d34c <HAL_FLASH_Program>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10c      	bne.n	8005840 <OTA_Apply+0x16c>
			break;
		faddr_off += sizeof(pword);
 8005826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005828:	3308      	adds	r3, #8
 800582a:	657b      	str	r3, [r7, #84]	@ 0x54
		size -= read;
 800582c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800582e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	65bb      	str	r3, [r7, #88]	@ 0x58
	while (size > 0)
 8005834:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1d9      	bne.n	80057ee <OTA_Apply+0x11a>
 800583a:	e002      	b.n	8005842 <OTA_Apply+0x16e>
			break;
 800583c:	bf00      	nop
 800583e:	e000      	b.n	8005842 <OTA_Apply+0x16e>
			break;
 8005840:	bf00      	nop
	}

	if (size > 0)
 8005842:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <OTA_Apply+0x17c>
	{
		result = -1;
 8005848:	f04f 33ff 	mov.w	r3, #4294967295
 800584c:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 800584e:	e02b      	b.n	80058a8 <OTA_Apply+0x1d4>
	}

	HAL_FLASH_Lock();
 8005850:	f007 fe0a 	bl	800d468 <HAL_FLASH_Lock>

	HAL_FLASHEx_OBGetConfig(&ob);
 8005854:	463b      	mov	r3, r7
 8005856:	4618      	mov	r0, r3
 8005858:	f008 f810 	bl	800d87c <HAL_FLASHEx_OBGetConfig>
	HAL_FLASH_Unlock();
 800585c:	f007 fde2 	bl	800d424 <HAL_FLASH_Unlock>
	HAL_FLASH_OB_Unlock();
 8005860:	f007 fe12 	bl	800d488 <HAL_FLASH_OB_Unlock>

	ob.OptionType = OPTIONBYTE_USER;
 8005864:	2304      	movs	r3, #4
 8005866:	603b      	str	r3, [r7, #0]
	ob.USERType = OB_USER_BFB2;
 8005868:	2380      	movs	r3, #128	@ 0x80
 800586a:	617b      	str	r3, [r7, #20]
	ob.USERConfig = (ota_bank == FLASH_BANK_2) ? FLASH_OPTR_BFB2 : 0;
 800586c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8005870:	2b02      	cmp	r3, #2
 8005872:	d102      	bne.n	800587a <OTA_Apply+0x1a6>
 8005874:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005878:	e000      	b.n	800587c <OTA_Apply+0x1a8>
 800587a:	2300      	movs	r3, #0
 800587c:	61bb      	str	r3, [r7, #24]

	if (HAL_FLASHEx_OBProgram(&ob) != HAL_OK)
 800587e:	463b      	mov	r3, r7
 8005880:	4618      	mov	r0, r3
 8005882:	f007 ff8d 	bl	800d7a0 <HAL_FLASHEx_OBProgram>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d007      	beq.n	800589c <OTA_Apply+0x1c8>
	{
		HAL_FLASH_OB_Lock();
 800588c:	f007 fe18 	bl	800d4c0 <HAL_FLASH_OB_Lock>
		HAL_FLASH_Lock();
 8005890:	f007 fdea 	bl	800d468 <HAL_FLASH_Lock>
		result = -1;
 8005894:	f04f 33ff 	mov.w	r3, #4294967295
 8005898:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 800589a:	e005      	b.n	80058a8 <OTA_Apply+0x1d4>
	}

	HAL_FLASH_OB_Launch();
 800589c:	f007 fe20 	bl	800d4e0 <HAL_FLASH_OB_Launch>
	HAL_FLASH_OB_Lock();
 80058a0:	f007 fe0e 	bl	800d4c0 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 80058a4:	f007 fde0 	bl	800d468 <HAL_FLASH_Lock>

	DONE:

	f_close(&sys.OTA_File);
 80058a8:	4806      	ldr	r0, [pc, #24]	@ (80058c4 <OTA_Apply+0x1f0>)
 80058aa:	f004 fdb9 	bl	800a420 <f_close>

	HAL_FLASH_Lock();
 80058ae:	f007 fddb 	bl	800d468 <HAL_FLASH_Lock>

	return result;
 80058b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3760      	adds	r7, #96	@ 0x60
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	1fff75e0 	.word	0x1fff75e0
 80058c0:	01fffe00 	.word	0x01fffe00
 80058c4:	20000844 	.word	0x20000844
 80058c8:	08017778 	.word	0x08017778
 80058cc:	20000840 	.word	0x20000840

080058d0 <Save_Data>:
#include "base64.h"


/*-----ACQUISIZIONE MISURE E LOG DEI DATI-----*/
void Save_Data(void)
{
 80058d0:	b590      	push	{r4, r7, lr}
 80058d2:	f2ad 4ddc 	subw	sp, sp, #1244	@ 0x4dc
 80058d6:	af00      	add	r7, sp, #0
	if(flags.ADC_Half_Buffer)
 80058d8:	4b76      	ldr	r3, [pc, #472]	@ (8005ab4 <Save_Data+0x1e4>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d037      	beq.n	8005956 <Save_Data+0x86>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[0], PRESS_HALF_LEN);
 80058e6:	4b74      	ldr	r3, [pc, #464]	@ (8005ab8 <Save_Data+0x1e8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	461a      	mov	r2, r3
 80058ec:	4b73      	ldr	r3, [pc, #460]	@ (8005abc <Save_Data+0x1ec>)
 80058ee:	4413      	add	r3, r2
 80058f0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80058f4:	4972      	ldr	r1, [pc, #456]	@ (8005ac0 <Save_Data+0x1f0>)
 80058f6:	4618      	mov	r0, r3
 80058f8:	f010 fcec 	bl	80162d4 <memcpy>
		Last_Pressure = 0;
 80058fc:	4b71      	ldr	r3, [pc, #452]	@ (8005ac4 <Save_Data+0x1f4>)
 80058fe:	2200      	movs	r2, #0
 8005900:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 8005902:	2300      	movs	r3, #0
 8005904:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 8005908:	e00f      	b.n	800592a <Save_Data+0x5a>
		{
			Last_Pressure += Pressure[i];
 800590a:	4a6d      	ldr	r2, [pc, #436]	@ (8005ac0 <Save_Data+0x1f0>)
 800590c:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 8005910:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005914:	4b6b      	ldr	r3, [pc, #428]	@ (8005ac4 <Save_Data+0x1f4>)
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	4413      	add	r3, r2
 800591a:	b29a      	uxth	r2, r3
 800591c:	4b69      	ldr	r3, [pc, #420]	@ (8005ac4 <Save_Data+0x1f4>)
 800591e:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 8005920:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 8005924:	3301      	adds	r3, #1
 8005926:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 800592a:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 800592e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005930:	ddeb      	ble.n	800590a <Save_Data+0x3a>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 8005932:	4b64      	ldr	r3, [pc, #400]	@ (8005ac4 <Save_Data+0x1f4>)
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	4a64      	ldr	r2, [pc, #400]	@ (8005ac8 <Save_Data+0x1f8>)
 8005938:	fba2 2303 	umull	r2, r3, r2, r3
 800593c:	099b      	lsrs	r3, r3, #6
 800593e:	b29a      	uxth	r2, r3
 8005940:	4b60      	ldr	r3, [pc, #384]	@ (8005ac4 <Save_Data+0x1f4>)
 8005942:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[0]);
 8005944:	485e      	ldr	r0, [pc, #376]	@ (8005ac0 <Save_Data+0x1f0>)
 8005946:	f000 fb47 	bl	8005fd8 <Warning_Detection>
		flags.ADC_Half_Buffer = 0;
 800594a:	4a5a      	ldr	r2, [pc, #360]	@ (8005ab4 <Save_Data+0x1e4>)
 800594c:	7813      	ldrb	r3, [r2, #0]
 800594e:	f023 0302 	bic.w	r3, r3, #2
 8005952:	7013      	strb	r3, [r2, #0]
 8005954:	e03e      	b.n	80059d4 <Save_Data+0x104>
	}
	else if(flags.ADC_Full_Buffer)
 8005956:	4b57      	ldr	r3, [pc, #348]	@ (8005ab4 <Save_Data+0x1e4>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	d037      	beq.n	80059d4 <Save_Data+0x104>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[PRESS_HALF_SAMPLES], PRESS_HALF_LEN);
 8005964:	4b54      	ldr	r3, [pc, #336]	@ (8005ab8 <Save_Data+0x1e8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	461a      	mov	r2, r3
 800596a:	4b54      	ldr	r3, [pc, #336]	@ (8005abc <Save_Data+0x1ec>)
 800596c:	4413      	add	r3, r2
 800596e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005972:	4956      	ldr	r1, [pc, #344]	@ (8005acc <Save_Data+0x1fc>)
 8005974:	4618      	mov	r0, r3
 8005976:	f010 fcad 	bl	80162d4 <memcpy>
		Last_Pressure = 0;
 800597a:	4b52      	ldr	r3, [pc, #328]	@ (8005ac4 <Save_Data+0x1f4>)
 800597c:	2200      	movs	r2, #0
 800597e:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 8005980:	23c8      	movs	r3, #200	@ 0xc8
 8005982:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 8005986:	e00f      	b.n	80059a8 <Save_Data+0xd8>
		{
			Last_Pressure += Pressure[i];
 8005988:	4a4d      	ldr	r2, [pc, #308]	@ (8005ac0 <Save_Data+0x1f0>)
 800598a:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 800598e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005992:	4b4c      	ldr	r3, [pc, #304]	@ (8005ac4 <Save_Data+0x1f4>)
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	4413      	add	r3, r2
 8005998:	b29a      	uxth	r2, r3
 800599a:	4b4a      	ldr	r3, [pc, #296]	@ (8005ac4 <Save_Data+0x1f4>)
 800599c:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 800599e:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 80059a2:	3301      	adds	r3, #1
 80059a4:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 80059a8:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 80059ac:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80059b0:	dbea      	blt.n	8005988 <Save_Data+0xb8>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 80059b2:	4b44      	ldr	r3, [pc, #272]	@ (8005ac4 <Save_Data+0x1f4>)
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	4a44      	ldr	r2, [pc, #272]	@ (8005ac8 <Save_Data+0x1f8>)
 80059b8:	fba2 2303 	umull	r2, r3, r2, r3
 80059bc:	099b      	lsrs	r3, r3, #6
 80059be:	b29a      	uxth	r2, r3
 80059c0:	4b40      	ldr	r3, [pc, #256]	@ (8005ac4 <Save_Data+0x1f4>)
 80059c2:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[PRESS_HALF_SAMPLES]);
 80059c4:	4841      	ldr	r0, [pc, #260]	@ (8005acc <Save_Data+0x1fc>)
 80059c6:	f000 fb07 	bl	8005fd8 <Warning_Detection>
		flags.ADC_Full_Buffer = 0;
 80059ca:	4a3a      	ldr	r2, [pc, #232]	@ (8005ab4 <Save_Data+0x1e4>)
 80059cc:	7813      	ldrb	r3, [r2, #0]
 80059ce:	f023 0304 	bic.w	r3, r3, #4
 80059d2:	7013      	strb	r3, [r2, #0]
	}
	flags.ADC_Complete = 0;
 80059d4:	4a37      	ldr	r2, [pc, #220]	@ (8005ab4 <Save_Data+0x1e4>)
 80059d6:	7813      	ldrb	r3, [r2, #0]
 80059d8:	f023 0301 	bic.w	r3, r3, #1
 80059dc:	7013      	strb	r3, [r2, #0]
	Address_Offset += PRESS_HALF_LEN;
 80059de:	4b36      	ldr	r3, [pc, #216]	@ (8005ab8 <Save_Data+0x1e8>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80059e6:	4a34      	ldr	r2, [pc, #208]	@ (8005ab8 <Save_Data+0x1e8>)
 80059e8:	6013      	str	r3, [r2, #0]

	memcpy(Saving_Buffer + Address_Offset, Volume_Period, MAX_VOLUME_LEN);
 80059ea:	4b33      	ldr	r3, [pc, #204]	@ (8005ab8 <Save_Data+0x1e8>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	461a      	mov	r2, r3
 80059f0:	4b32      	ldr	r3, [pc, #200]	@ (8005abc <Save_Data+0x1ec>)
 80059f2:	4413      	add	r3, r2
 80059f4:	2228      	movs	r2, #40	@ 0x28
 80059f6:	4936      	ldr	r1, [pc, #216]	@ (8005ad0 <Save_Data+0x200>)
 80059f8:	4618      	mov	r0, r3
 80059fa:	f010 fc6b 	bl	80162d4 <memcpy>
	uint8_t current_period_cnt = Period_cnt;
 80059fe:	4b35      	ldr	r3, [pc, #212]	@ (8005ad4 <Save_Data+0x204>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
	Last_Volume = 0;
 8005a06:	4b34      	ldr	r3, [pc, #208]	@ (8005ad8 <Save_Data+0x208>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < current_period_cnt; i++)
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8005a12:	e00e      	b.n	8005a32 <Save_Data+0x162>
	{
		Last_Volume += Volume_Period[i];
 8005a14:	4a2e      	ldr	r2, [pc, #184]	@ (8005ad0 <Save_Data+0x200>)
 8005a16:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8005a1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005a1e:	4b2e      	ldr	r3, [pc, #184]	@ (8005ad8 <Save_Data+0x208>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4413      	add	r3, r2
 8005a24:	4a2c      	ldr	r2, [pc, #176]	@ (8005ad8 <Save_Data+0x208>)
 8005a26:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < current_period_cnt; i++)
 8005a28:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8005a32:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 8005a36:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	@ 0x4cc
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	dbea      	blt.n	8005a14 <Save_Data+0x144>
	}
	Last_Volume = (uint32_t)(Last_Volume / current_period_cnt);
 8005a3e:	4b26      	ldr	r3, [pc, #152]	@ (8005ad8 <Save_Data+0x208>)
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 8005a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4a:	4a23      	ldr	r2, [pc, #140]	@ (8005ad8 <Save_Data+0x208>)
 8005a4c:	6013      	str	r3, [r2, #0]
	memset(Volume_Period, 0, sizeof(Volume_Period));
 8005a4e:	2228      	movs	r2, #40	@ 0x28
 8005a50:	2100      	movs	r1, #0
 8005a52:	481f      	ldr	r0, [pc, #124]	@ (8005ad0 <Save_Data+0x200>)
 8005a54:	f010 fbba 	bl	80161cc <memset>
	Period_cnt = 0;
 8005a58:	4b1e      	ldr	r3, [pc, #120]	@ (8005ad4 <Save_Data+0x204>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	701a      	strb	r2, [r3, #0]
	Address_Offset += MAX_VOLUME_LEN;
 8005a5e:	4b16      	ldr	r3, [pc, #88]	@ (8005ab8 <Save_Data+0x1e8>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3328      	adds	r3, #40	@ 0x28
 8005a64:	4a14      	ldr	r2, [pc, #80]	@ (8005ab8 <Save_Data+0x1e8>)
 8005a66:	6013      	str	r3, [r2, #0]

	if(sys.ACC_Present)
 8005a68:	4b1c      	ldr	r3, [pc, #112]	@ (8005adc <Save_Data+0x20c>)
 8005a6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a6e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 80a4 	beq.w	8005bc6 <Save_Data+0x2f6>
	{
		memcpy(Saving_Buffer + Address_Offset, Acceleration, ACCELERATION_LEN);
 8005a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ab8 <Save_Data+0x1e8>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	461a      	mov	r2, r3
 8005a84:	4b0d      	ldr	r3, [pc, #52]	@ (8005abc <Save_Data+0x1ec>)
 8005a86:	4413      	add	r3, r2
 8005a88:	4a15      	ldr	r2, [pc, #84]	@ (8005ae0 <Save_Data+0x210>)
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8005a92:	461a      	mov	r2, r3
 8005a94:	f010 fc1e 	bl	80162d4 <memcpy>
		Last_Acceleration.x = 0;
 8005a98:	4b12      	ldr	r3, [pc, #72]	@ (8005ae4 <Save_Data+0x214>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = 0;
 8005a9e:	4b11      	ldr	r3, [pc, #68]	@ (8005ae4 <Save_Data+0x214>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = 0;
 8005aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8005ae4 <Save_Data+0x214>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 8005aaa:	2300      	movs	r3, #0
 8005aac:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 8005ab0:	e064      	b.n	8005b7c <Save_Data+0x2ac>
 8005ab2:	bf00      	nop
 8005ab4:	20001d68 	.word	0x20001d68
 8005ab8:	20004fbc 	.word	0x20004fbc
 8005abc:	2000488c 	.word	0x2000488c
 8005ac0:	20003f54 	.word	0x20003f54
 8005ac4:	20004814 	.word	0x20004814
 8005ac8:	51eb851f 	.word	0x51eb851f
 8005acc:	200040e4 	.word	0x200040e4
 8005ad0:	20004274 	.word	0x20004274
 8005ad4:	20003f50 	.word	0x20003f50
 8005ad8:	20004818 	.word	0x20004818
 8005adc:	20000840 	.word	0x20000840
 8005ae0:	2000429c 	.word	0x2000429c
 8005ae4:	2000481c 	.word	0x2000481c
		{
			Last_Acceleration.x += Acceleration[i+1] | (Acceleration[i+2] << 8); 
 8005ae8:	4b85      	ldr	r3, [pc, #532]	@ (8005d00 <Save_Data+0x430>)
 8005aea:	885a      	ldrh	r2, [r3, #2]
 8005aec:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005af0:	3301      	adds	r3, #1
 8005af2:	4984      	ldr	r1, [pc, #528]	@ (8005d04 <Save_Data+0x434>)
 8005af4:	5ccb      	ldrb	r3, [r1, r3]
 8005af6:	b219      	sxth	r1, r3
 8005af8:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005afc:	3302      	adds	r3, #2
 8005afe:	4881      	ldr	r0, [pc, #516]	@ (8005d04 <Save_Data+0x434>)
 8005b00:	5cc3      	ldrb	r3, [r0, r3]
 8005b02:	b21b      	sxth	r3, r3
 8005b04:	021b      	lsls	r3, r3, #8
 8005b06:	b21b      	sxth	r3, r3
 8005b08:	430b      	orrs	r3, r1
 8005b0a:	b21b      	sxth	r3, r3
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	4413      	add	r3, r2
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	4b7b      	ldr	r3, [pc, #492]	@ (8005d00 <Save_Data+0x430>)
 8005b14:	805a      	strh	r2, [r3, #2]
			Last_Acceleration.y += Acceleration[i+3] | (Acceleration[i+4] << 8); 
 8005b16:	4b7a      	ldr	r3, [pc, #488]	@ (8005d00 <Save_Data+0x430>)
 8005b18:	889a      	ldrh	r2, [r3, #4]
 8005b1a:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005b1e:	3303      	adds	r3, #3
 8005b20:	4978      	ldr	r1, [pc, #480]	@ (8005d04 <Save_Data+0x434>)
 8005b22:	5ccb      	ldrb	r3, [r1, r3]
 8005b24:	b219      	sxth	r1, r3
 8005b26:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	4875      	ldr	r0, [pc, #468]	@ (8005d04 <Save_Data+0x434>)
 8005b2e:	5cc3      	ldrb	r3, [r0, r3]
 8005b30:	b21b      	sxth	r3, r3
 8005b32:	021b      	lsls	r3, r3, #8
 8005b34:	b21b      	sxth	r3, r3
 8005b36:	430b      	orrs	r3, r1
 8005b38:	b21b      	sxth	r3, r3
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	4413      	add	r3, r2
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	4b6f      	ldr	r3, [pc, #444]	@ (8005d00 <Save_Data+0x430>)
 8005b42:	809a      	strh	r2, [r3, #4]
			Last_Acceleration.z += Acceleration[i+5] | (Acceleration[i+6] << 8); 
 8005b44:	4b6e      	ldr	r3, [pc, #440]	@ (8005d00 <Save_Data+0x430>)
 8005b46:	88da      	ldrh	r2, [r3, #6]
 8005b48:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005b4c:	3305      	adds	r3, #5
 8005b4e:	496d      	ldr	r1, [pc, #436]	@ (8005d04 <Save_Data+0x434>)
 8005b50:	5ccb      	ldrb	r3, [r1, r3]
 8005b52:	b219      	sxth	r1, r3
 8005b54:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005b58:	3306      	adds	r3, #6
 8005b5a:	486a      	ldr	r0, [pc, #424]	@ (8005d04 <Save_Data+0x434>)
 8005b5c:	5cc3      	ldrb	r3, [r0, r3]
 8005b5e:	b21b      	sxth	r3, r3
 8005b60:	021b      	lsls	r3, r3, #8
 8005b62:	b21b      	sxth	r3, r3
 8005b64:	430b      	orrs	r3, r1
 8005b66:	b21b      	sxth	r3, r3
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	4413      	add	r3, r2
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	4b64      	ldr	r3, [pc, #400]	@ (8005d00 <Save_Data+0x430>)
 8005b70:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 8005b72:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005b76:	3307      	adds	r3, #7
 8005b78:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 8005b7c:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005b80:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 8005b84:	dbb0      	blt.n	8005ae8 <Save_Data+0x218>
		}
		Last_Acceleration.x = (uint16_t)(Last_Acceleration.x / (ACCELERATION_LEN / 7));
 8005b86:	4b5e      	ldr	r3, [pc, #376]	@ (8005d00 <Save_Data+0x430>)
 8005b88:	885b      	ldrh	r3, [r3, #2]
 8005b8a:	4a5f      	ldr	r2, [pc, #380]	@ (8005d08 <Save_Data+0x438>)
 8005b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b90:	099b      	lsrs	r3, r3, #6
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	4b5a      	ldr	r3, [pc, #360]	@ (8005d00 <Save_Data+0x430>)
 8005b96:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = (uint16_t)(Last_Acceleration.y / (ACCELERATION_LEN / 7));
 8005b98:	4b59      	ldr	r3, [pc, #356]	@ (8005d00 <Save_Data+0x430>)
 8005b9a:	889b      	ldrh	r3, [r3, #4]
 8005b9c:	4a5a      	ldr	r2, [pc, #360]	@ (8005d08 <Save_Data+0x438>)
 8005b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba2:	099b      	lsrs	r3, r3, #6
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	4b56      	ldr	r3, [pc, #344]	@ (8005d00 <Save_Data+0x430>)
 8005ba8:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = (uint16_t)(Last_Acceleration.z / (ACCELERATION_LEN / 7));
 8005baa:	4b55      	ldr	r3, [pc, #340]	@ (8005d00 <Save_Data+0x430>)
 8005bac:	88db      	ldrh	r3, [r3, #6]
 8005bae:	4a56      	ldr	r2, [pc, #344]	@ (8005d08 <Save_Data+0x438>)
 8005bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb4:	099b      	lsrs	r3, r3, #6
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	4b51      	ldr	r3, [pc, #324]	@ (8005d00 <Save_Data+0x430>)
 8005bba:	80da      	strh	r2, [r3, #6]
		flags.ACC_Complete = 0;
 8005bbc:	4a53      	ldr	r2, [pc, #332]	@ (8005d0c <Save_Data+0x43c>)
 8005bbe:	7813      	ldrb	r3, [r2, #0]
 8005bc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bc4:	7013      	strb	r3, [r2, #0]
	}
	Address_Offset += ACCELERATION_LEN;
 8005bc6:	4b52      	ldr	r3, [pc, #328]	@ (8005d10 <Save_Data+0x440>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 8005bce:	4a50      	ldr	r2, [pc, #320]	@ (8005d10 <Save_Data+0x440>)
 8005bd0:	6013      	str	r3, [r2, #0]

	INA3221_Read_Measure(&Supply);
 8005bd2:	4850      	ldr	r0, [pc, #320]	@ (8005d14 <Save_Data+0x444>)
 8005bd4:	f7fb fa22 	bl	800101c <INA3221_Read_Measure>
	uint16_t new_temp = 0;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4
	if((new_temp = Read_Temperature()) != 0)
 8005bde:	f7fb f9c3 	bl	8000f68 <Read_Temperature>
 8005be2:	4603      	mov	r3, r0
 8005be4:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4
 8005be8:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <Save_Data+0x328>
	{
		Temperature = new_temp;
 8005bf0:	4a49      	ldr	r2, [pc, #292]	@ (8005d18 <Save_Data+0x448>)
 8005bf2:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8005bf6:	8013      	strh	r3, [r2, #0]
	}
	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 8005bf8:	4948      	ldr	r1, [pc, #288]	@ (8005d1c <Save_Data+0x44c>)
 8005bfa:	203b      	movs	r0, #59	@ 0x3b
 8005bfc:	f7fc fd8a 	bl	8002714 <BC_MultiRead_Reg>

	uint8_t compressed_data[MAX_COMPRESSED_SIZE];
	Compressed_Sample_Typedef sample;
    sample.compressed_size = Compress_Sample(Saving_Buffer, SAVING_BUFFER_LEN, compressed_data);
 8005c00:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8005c04:	f2a3 44cc 	subw	r4, r3, #1228	@ 0x4cc
 8005c08:	4638      	mov	r0, r7
 8005c0a:	f107 0314 	add.w	r3, r7, #20
 8005c0e:	f44f 62e6 	mov.w	r2, #1840	@ 0x730
 8005c12:	4943      	ldr	r1, [pc, #268]	@ (8005d20 <Save_Data+0x450>)
 8005c14:	f000 fbd4 	bl	80063c0 <Compress_Sample>
 8005c18:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8005c1c:	f5a3 629b 	sub.w	r2, r3, #1240	@ 0x4d8
 8005c20:	4623      	mov	r3, r4
 8005c22:	6810      	ldr	r0, [r2, #0]
 8005c24:	6018      	str	r0, [r3, #0]
 8005c26:	8892      	ldrh	r2, [r2, #4]
 8005c28:	809a      	strh	r2, [r3, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c2a:	b672      	cpsid	i
}
 8005c2c:	bf00      	nop

	__disable_irq();
	RAM_Save_Measure(&sample, compressed_data);
 8005c2e:	f107 0214 	add.w	r2, r7, #20
 8005c32:	f107 030c 	add.w	r3, r7, #12
 8005c36:	4611      	mov	r1, r2
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 fa31 	bl	80060a0 <RAM_Save_Measure>
  __ASM volatile ("cpsie i" : : : "memory");
 8005c3e:	b662      	cpsie	i
}
 8005c40:	bf00      	nop
	__enable_irq();

	Address_Offset = 0;
 8005c42:	4b33      	ldr	r3, [pc, #204]	@ (8005d10 <Save_Data+0x440>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]

	if(flags.Hammer_Detected || flags.Threshold_Detected)
 8005c48:	4b30      	ldr	r3, [pc, #192]	@ (8005d0c <Save_Data+0x43c>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	f003 0308 	and.w	r3, r3, #8
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d106      	bne.n	8005c64 <Save_Data+0x394>
 8005c56:	4b2d      	ldr	r3, [pc, #180]	@ (8005d0c <Save_Data+0x43c>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	f003 0310 	and.w	r3, r3, #16
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d048      	beq.n	8005cf6 <Save_Data+0x426>
	{
		Cycles_After_Warning++;
 8005c64:	4b2f      	ldr	r3, [pc, #188]	@ (8005d24 <Save_Data+0x454>)
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	4b2d      	ldr	r3, [pc, #180]	@ (8005d24 <Save_Data+0x454>)
 8005c6e:	801a      	strh	r2, [r3, #0]
		if(Cycles_After_Warning >= config.buffering_secs * (config.samp_freq / ACC_FIFO_WATERMARK))
 8005c70:	4b2c      	ldr	r3, [pc, #176]	@ (8005d24 <Save_Data+0x454>)
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	4619      	mov	r1, r3
 8005c76:	4b2c      	ldr	r3, [pc, #176]	@ (8005d28 <Save_Data+0x458>)
 8005c78:	791b      	ldrb	r3, [r3, #4]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	4b2a      	ldr	r3, [pc, #168]	@ (8005d28 <Save_Data+0x458>)
 8005c7e:	885b      	ldrh	r3, [r3, #2]
 8005c80:	4a21      	ldr	r2, [pc, #132]	@ (8005d08 <Save_Data+0x438>)
 8005c82:	fba2 2303 	umull	r2, r3, r2, r3
 8005c86:	099b      	lsrs	r3, r3, #6
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	fb00 f303 	mul.w	r3, r0, r3
 8005c8e:	4299      	cmp	r1, r3
 8005c90:	db31      	blt.n	8005cf6 <Save_Data+0x426>
		{
			if(!flags.CMD.Measure_Request)
 8005c92:	4b1e      	ldr	r3, [pc, #120]	@ (8005d0c <Save_Data+0x43c>)
 8005c94:	789b      	ldrb	r3, [r3, #2]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d12a      	bne.n	8005cf6 <Save_Data+0x426>
			{
				LED_Start(RED_LED, FAST, LOW);
 8005ca0:	2207      	movs	r2, #7
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	2004      	movs	r0, #4
 8005ca6:	f7fd fd23 	bl	80036f0 <LED_Start>
				Switch_Buffer();
 8005caa:	f000 f843 	bl	8005d34 <Switch_Buffer>
				flags.CMD.Measure_Request = 1;
 8005cae:	4a17      	ldr	r2, [pc, #92]	@ (8005d0c <Save_Data+0x43c>)
 8005cb0:	7893      	ldrb	r3, [r2, #2]
 8005cb2:	f043 0302 	orr.w	r3, r3, #2
 8005cb6:	7093      	strb	r3, [r2, #2]
				Send_Measure_Addr = Saved_Bytes;
 8005cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8005d2c <Save_Data+0x45c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8005d30 <Save_Data+0x460>)
 8005cbe:	6013      	str	r3, [r2, #0]
				Cycles_After_Warning = 0;
 8005cc0:	4b18      	ldr	r3, [pc, #96]	@ (8005d24 <Save_Data+0x454>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	801a      	strh	r2, [r3, #0]
				if(flags.Hammer_Detected)
 8005cc6:	4b11      	ldr	r3, [pc, #68]	@ (8005d0c <Save_Data+0x43c>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	f003 0308 	and.w	r3, r3, #8
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d004      	beq.n	8005cde <Save_Data+0x40e>
				{
					flags.Hammer_Detected = 0;
 8005cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8005d0c <Save_Data+0x43c>)
 8005cd6:	7813      	ldrb	r3, [r2, #0]
 8005cd8:	f023 0308 	bic.w	r3, r3, #8
 8005cdc:	7013      	strb	r3, [r2, #0]
				}
				if(flags.Threshold_Detected)
 8005cde:	4b0b      	ldr	r3, [pc, #44]	@ (8005d0c <Save_Data+0x43c>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	f003 0310 	and.w	r3, r3, #16
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d004      	beq.n	8005cf6 <Save_Data+0x426>
				{
					flags.Threshold_Detected = 0;
 8005cec:	4a07      	ldr	r2, [pc, #28]	@ (8005d0c <Save_Data+0x43c>)
 8005cee:	7813      	ldrb	r3, [r2, #0]
 8005cf0:	f023 0310 	bic.w	r3, r3, #16
 8005cf4:	7013      	strb	r3, [r2, #0]
				}
			}
		}
	}

}
 8005cf6:	bf00      	nop
 8005cf8:	f207 47dc 	addw	r7, r7, #1244	@ 0x4dc
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd90      	pop	{r4, r7, pc}
 8005d00:	2000481c 	.word	0x2000481c
 8005d04:	2000429c 	.word	0x2000429c
 8005d08:	51eb851f 	.word	0x51eb851f
 8005d0c:	20001d68 	.word	0x20001d68
 8005d10:	20004fbc 	.word	0x20004fbc
 8005d14:	20003f44 	.word	0x20003f44
 8005d18:	20004824 	.word	0x20004824
 8005d1c:	20004826 	.word	0x20004826
 8005d20:	2000488c 	.word	0x2000488c
 8005d24:	20004fc0 	.word	0x20004fc0
 8005d28:	20001d6c 	.word	0x20001d6c
 8005d2c:	20004fc4 	.word	0x20004fc4
 8005d30:	20004fcc 	.word	0x20004fcc

08005d34 <Switch_Buffer>:

/*-----CAMBIO BUFFER-----*/
void Switch_Buffer(void)
{
 8005d34:	b480      	push	{r7}
 8005d36:	af00      	add	r7, sp, #0
    sys.Inactive_RAM_Len = sys.Current_RAM_Len;
 8005d38:	4b23      	ldr	r3, [pc, #140]	@ (8005dc8 <Switch_Buffer+0x94>)
 8005d3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d3e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005d42:	4a21      	ldr	r2, [pc, #132]	@ (8005dc8 <Switch_Buffer+0x94>)
 8005d44:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005d48:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

    if (sys.Active_RAM_Buffer == 0) 
 8005d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8005dc8 <Switch_Buffer+0x94>)
 8005d4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d52:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d116      	bne.n	8005d88 <Switch_Buffer+0x54>
	{
		sys.RAM_Buffer_Base_tosend = RAM_SECOND_BUFFER_ADD;
 8005d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc8 <Switch_Buffer+0x94>)
 8005d5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d60:	461a      	mov	r2, r3
 8005d62:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005d66:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
        sys.Active_RAM_Buffer = 1;
 8005d6a:	4b17      	ldr	r3, [pc, #92]	@ (8005dc8 <Switch_Buffer+0x94>)
 8005d6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        sys.Current_RAM_Base = RAM_SECOND_BUFFER_ADD;
 8005d76:	4b14      	ldr	r3, [pc, #80]	@ (8005dc8 <Switch_Buffer+0x94>)
 8005d78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005d82:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
 8005d86:	e013      	b.n	8005db0 <Switch_Buffer+0x7c>
    } 
	else 
	{
		sys.RAM_Buffer_Base_tosend = RAM_FIRST_BUFFER_ADD;
 8005d88:	4b0f      	ldr	r3, [pc, #60]	@ (8005dc8 <Switch_Buffer+0x94>)
 8005d8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d8e:	461a      	mov	r2, r3
 8005d90:	2300      	movs	r3, #0
 8005d92:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
        sys.Active_RAM_Buffer = 0;
 8005d96:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc8 <Switch_Buffer+0x94>)
 8005d98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        sys.Current_RAM_Base = RAM_FIRST_BUFFER_ADD;
 8005da2:	4b09      	ldr	r3, [pc, #36]	@ (8005dc8 <Switch_Buffer+0x94>)
 8005da4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005da8:	461a      	mov	r2, r3
 8005daa:	2300      	movs	r3, #0
 8005dac:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
    }

    sys.Current_RAM_Len = 0;
 8005db0:	4b05      	ldr	r3, [pc, #20]	@ (8005dc8 <Switch_Buffer+0x94>)
 8005db2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005db6:	461a      	mov	r2, r3
 8005db8:	2300      	movs	r3, #0
 8005dba:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8005dbe:	bf00      	nop
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	20000840 	.word	0x20000840

08005dcc <Erase_RAM_Data>:

/*-----CANCELLAZIONE DATI RAM-----*/
void Erase_RAM_Data(void)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8005dd2:	af00      	add	r7, sp, #0
	uint8_t zero_buffer[1024] = {0};
 8005dd4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8005dd8:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005de2:	461a      	mov	r2, r3
 8005de4:	2100      	movs	r1, #0
 8005de6:	f010 f9f1 	bl	80161cc <memset>
	for (uint32_t addr = 0; addr < 0x800000; addr += sizeof(zero_buffer)) 
 8005dea:	2300      	movs	r3, #0
 8005dec:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8005df0:	e00d      	b.n	8005e0e <Erase_RAM_Data+0x42>
	{
		RAM_Write(addr, sizeof(zero_buffer), zero_buffer);
 8005df2:	1d3b      	adds	r3, r7, #4
 8005df4:	461a      	mov	r2, r3
 8005df6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005dfa:	f8d7 0404 	ldr.w	r0, [r7, #1028]	@ 0x404
 8005dfe:	f001 fa97 	bl	8007330 <RAM_Write>
	for (uint32_t addr = 0; addr < 0x800000; addr += sizeof(zero_buffer)) 
 8005e02:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8005e06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e0a:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8005e0e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8005e12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e16:	d3ec      	bcc.n	8005df2 <Erase_RAM_Data+0x26>
	}
}
 8005e18:	bf00      	nop
 8005e1a:	bf00      	nop
 8005e1c:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <Start_Measure>:


/*-----AVVIO MISURA-----*/
void Start_Measure(void)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	af00      	add	r7, sp, #0
	Erase_RAM_Data();
 8005e28:	f7ff ffd0 	bl	8005dcc <Erase_RAM_Data>
	sys.RAM_Samples_Number = (config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * 2;
 8005e2c:	4b4a      	ldr	r3, [pc, #296]	@ (8005f58 <Start_Measure+0x134>)
 8005e2e:	885b      	ldrh	r3, [r3, #2]
 8005e30:	4a4a      	ldr	r2, [pc, #296]	@ (8005f5c <Start_Measure+0x138>)
 8005e32:	fba2 2303 	umull	r2, r3, r2, r3
 8005e36:	099b      	lsrs	r3, r3, #6
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	4b46      	ldr	r3, [pc, #280]	@ (8005f58 <Start_Measure+0x134>)
 8005e3e:	791b      	ldrb	r3, [r3, #4]
 8005e40:	fb02 f303 	mul.w	r3, r2, r3
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	461a      	mov	r2, r3
 8005e48:	4b45      	ldr	r3, [pc, #276]	@ (8005f60 <Start_Measure+0x13c>)
 8005e4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e4e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	sys.Active_RAM_Buffer = 0;
 8005e52:	4b43      	ldr	r3, [pc, #268]	@ (8005f60 <Start_Measure+0x13c>)
 8005e54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
	sys.Inactive_RAM_Len = 0;
 8005e5e:	4b40      	ldr	r3, [pc, #256]	@ (8005f60 <Start_Measure+0x13c>)
 8005e60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e64:	461a      	mov	r2, r3
 8005e66:	2300      	movs	r3, #0
 8005e68:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
	sys.Current_RAM_Base = RAM_FIRST_BUFFER_ADD;
 8005e6c:	4b3c      	ldr	r3, [pc, #240]	@ (8005f60 <Start_Measure+0x13c>)
 8005e6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e72:	461a      	mov	r2, r3
 8005e74:	2300      	movs	r3, #0
 8005e76:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
	sys.Current_RAM_Len = 0;
 8005e7a:	4b39      	ldr	r3, [pc, #228]	@ (8005f60 <Start_Measure+0x13c>)
 8005e7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e80:	461a      	mov	r2, r3
 8005e82:	2300      	movs	r3, #0
 8005e84:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
	flags.SIM_isConnected = 1;
 8005e88:	4a36      	ldr	r2, [pc, #216]	@ (8005f64 <Start_Measure+0x140>)
 8005e8a:	7853      	ldrb	r3, [r2, #1]
 8005e8c:	f043 0308 	orr.w	r3, r3, #8
 8005e90:	7053      	strb	r3, [r2, #1]
	memset(Pressure, 0, sizeof(Pressure));
 8005e92:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8005e96:	2100      	movs	r1, #0
 8005e98:	4833      	ldr	r0, [pc, #204]	@ (8005f68 <Start_Measure+0x144>)
 8005e9a:	f010 f997 	bl	80161cc <memset>
	memset(Volume_Period, 0, sizeof(Volume_Period));
 8005e9e:	2228      	movs	r2, #40	@ 0x28
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	4832      	ldr	r0, [pc, #200]	@ (8005f6c <Start_Measure+0x148>)
 8005ea4:	f010 f992 	bl	80161cc <memset>
	memset(Acceleration, 0, sizeof(Acceleration));
 8005ea8:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8005eac:	2100      	movs	r1, #0
 8005eae:	4830      	ldr	r0, [pc, #192]	@ (8005f70 <Start_Measure+0x14c>)
 8005eb0:	f010 f98c 	bl	80161cc <memset>
	memset(&Supply, 0, sizeof(Supply));
 8005eb4:	220c      	movs	r2, #12
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	482e      	ldr	r0, [pc, #184]	@ (8005f74 <Start_Measure+0x150>)
 8005eba:	f010 f987 	bl	80161cc <memset>
	Temperature = 0;
 8005ebe:	4b2e      	ldr	r3, [pc, #184]	@ (8005f78 <Start_Measure+0x154>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	801a      	strh	r2, [r3, #0]
	Saved_Bytes = 0;
 8005ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8005f7c <Start_Measure+0x158>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	601a      	str	r2, [r3, #0]
	Saved_Samples = 0;
 8005eca:	4b2d      	ldr	r3, [pc, #180]	@ (8005f80 <Start_Measure+0x15c>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	801a      	strh	r2, [r3, #0]
	Address_Offset = 0;
 8005ed0:	4b2c      	ldr	r3, [pc, #176]	@ (8005f84 <Start_Measure+0x160>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]
	Cycles_After_Warning = 0;
 8005ed6:	4b2c      	ldr	r3, [pc, #176]	@ (8005f88 <Start_Measure+0x164>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	801a      	strh	r2, [r3, #0]
	Clear_Flags();
 8005edc:	f000 ffd6 	bl	8006e8c <Clear_Flags>

	ADC_TIMER->Instance->PSC = 100 - 1;
 8005ee0:	4b2a      	ldr	r3, [pc, #168]	@ (8005f8c <Start_Measure+0x168>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2263      	movs	r2, #99	@ 0x63
 8005ee6:	629a      	str	r2, [r3, #40]	@ 0x28
	ADC_TIMER->Instance->ARR = (uint32_t)(SystemCoreClock / (ADC_TIMER->Instance->PSC * config.samp_freq)) - 1;
 8005ee8:	4b29      	ldr	r3, [pc, #164]	@ (8005f90 <Start_Measure+0x16c>)
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	4b27      	ldr	r3, [pc, #156]	@ (8005f8c <Start_Measure+0x168>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef2:	4919      	ldr	r1, [pc, #100]	@ (8005f58 <Start_Measure+0x134>)
 8005ef4:	8849      	ldrh	r1, [r1, #2]
 8005ef6:	fb01 f303 	mul.w	r3, r1, r3
 8005efa:	fbb2 f2f3 	udiv	r2, r2, r3
 8005efe:	4b23      	ldr	r3, [pc, #140]	@ (8005f8c <Start_Measure+0x168>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3a01      	subs	r2, #1
 8005f04:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->ARR = (uint32_t)(config.samp_freq / 25) - 1;
 8005f06:	4b14      	ldr	r3, [pc, #80]	@ (8005f58 <Start_Measure+0x134>)
 8005f08:	885b      	ldrh	r3, [r3, #2]
 8005f0a:	4a14      	ldr	r2, [pc, #80]	@ (8005f5c <Start_Measure+0x138>)
 8005f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f10:	08db      	lsrs	r3, r3, #3
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	461a      	mov	r2, r3
 8005f16:	4b1f      	ldr	r3, [pc, #124]	@ (8005f94 <Start_Measure+0x170>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	3a01      	subs	r2, #1
 8005f1c:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->CCR3 = (uint32_t)((ACC_TIMER->Instance->ARR + 1) / 2);
 8005f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8005f94 <Start_Measure+0x170>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	4b1b      	ldr	r3, [pc, #108]	@ (8005f94 <Start_Measure+0x170>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	0852      	lsrs	r2, r2, #1
 8005f2c:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_IC_Start_IT(VOLUME_TIMER, TIM_CHANNEL_1);
 8005f2e:	2100      	movs	r1, #0
 8005f30:	4819      	ldr	r0, [pc, #100]	@ (8005f98 <Start_Measure+0x174>)
 8005f32:	f00d f8c7 	bl	80130c4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(ACC_TIMER, TIM_CHANNEL_3);
 8005f36:	2108      	movs	r1, #8
 8005f38:	4816      	ldr	r0, [pc, #88]	@ (8005f94 <Start_Measure+0x170>)
 8005f3a:	f00c fecf 	bl	8012cdc <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(PRESSURE_ADC, (uint32_t*)&Pressure, PRESS_FULL_SAMPLES);
 8005f3e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005f42:	4909      	ldr	r1, [pc, #36]	@ (8005f68 <Start_Measure+0x144>)
 8005f44:	4815      	ldr	r0, [pc, #84]	@ (8005f9c <Start_Measure+0x178>)
 8005f46:	f005 fc35 	bl	800b7b4 <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start_IT(ADC_TIMER, TIM_CHANNEL_3);
 8005f4a:	2108      	movs	r1, #8
 8005f4c:	480f      	ldr	r0, [pc, #60]	@ (8005f8c <Start_Measure+0x168>)
 8005f4e:	f00c fc2b 	bl	80127a8 <HAL_TIM_OC_Start_IT>
}
 8005f52:	bf00      	nop
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20001d6c 	.word	0x20001d6c
 8005f5c:	51eb851f 	.word	0x51eb851f
 8005f60:	20000840 	.word	0x20000840
 8005f64:	20001d68 	.word	0x20001d68
 8005f68:	20003f54 	.word	0x20003f54
 8005f6c:	20004274 	.word	0x20004274
 8005f70:	2000429c 	.word	0x2000429c
 8005f74:	20003f44 	.word	0x20003f44
 8005f78:	20004824 	.word	0x20004824
 8005f7c:	20004fc4 	.word	0x20004fc4
 8005f80:	20004fc8 	.word	0x20004fc8
 8005f84:	20004fbc 	.word	0x20004fbc
 8005f88:	20004fc0 	.word	0x20004fc0
 8005f8c:	20000650 	.word	0x20000650
 8005f90:	20000268 	.word	0x20000268
 8005f94:	20000604 	.word	0x20000604
 8005f98:	200005b8 	.word	0x200005b8
 8005f9c:	20000318 	.word	0x20000318

08005fa0 <Stop_Measure>:

/*-----FINE MISURA-----*/
void Stop_Measure(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(PRESSURE_ADC);
 8005fa4:	4808      	ldr	r0, [pc, #32]	@ (8005fc8 <Stop_Measure+0x28>)
 8005fa6:	f005 fcc1 	bl	800b92c <HAL_ADC_Stop_DMA>
	HAL_TIM_OC_Stop_IT(ADC_TIMER, TIM_CHANNEL_3);
 8005faa:	2108      	movs	r1, #8
 8005fac:	4807      	ldr	r0, [pc, #28]	@ (8005fcc <Stop_Measure+0x2c>)
 8005fae:	f00c fd4f 	bl	8012a50 <HAL_TIM_OC_Stop_IT>
	HAL_TIM_PWM_Stop(ACC_TIMER, TIM_CHANNEL_3);
 8005fb2:	2108      	movs	r1, #8
 8005fb4:	4806      	ldr	r0, [pc, #24]	@ (8005fd0 <Stop_Measure+0x30>)
 8005fb6:	f00c ff97 	bl	8012ee8 <HAL_TIM_PWM_Stop>
	HAL_TIM_IC_Stop_IT(VOLUME_TIMER, TIM_CHANNEL_1);
 8005fba:	2100      	movs	r1, #0
 8005fbc:	4805      	ldr	r0, [pc, #20]	@ (8005fd4 <Stop_Measure+0x34>)
 8005fbe:	f00d f9cb 	bl	8013358 <HAL_TIM_IC_Stop_IT>
}
 8005fc2:	bf00      	nop
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20000318 	.word	0x20000318
 8005fcc:	20000650 	.word	0x20000650
 8005fd0:	20000604 	.word	0x20000604
 8005fd4:	200005b8 	.word	0x200005b8

08005fd8 <Warning_Detection>:

/*-----DETECTION COLPO D'ARIETE-----*/
void Warning_Detection(uint16_t* Data)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
	uint16_t max = Data[0];
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	81fb      	strh	r3, [r7, #14]
	uint16_t min = Data[0];
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	81bb      	strh	r3, [r7, #12]

	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 8005fec:	2301      	movs	r3, #1
 8005fee:	60bb      	str	r3, [r7, #8]
 8005ff0:	e03a      	b.n	8006068 <Warning_Detection+0x90>
	{
		if(Data[i] > max)
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	89fa      	ldrh	r2, [r7, #14]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d206      	bcs.n	8006010 <Warning_Detection+0x38>
		{
			max = Data[i];
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	4413      	add	r3, r2
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	81fb      	strh	r3, [r7, #14]
 800600e:	e00d      	b.n	800602c <Warning_Detection+0x54>
		}
		else if(Data[i] < min)
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	005b      	lsls	r3, r3, #1
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	4413      	add	r3, r2
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	89ba      	ldrh	r2, [r7, #12]
 800601c:	429a      	cmp	r2, r3
 800601e:	d905      	bls.n	800602c <Warning_Detection+0x54>
		{
			min = Data[i];
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	005b      	lsls	r3, r3, #1
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	4413      	add	r3, r2
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	81bb      	strh	r3, [r7, #12]
		}

		if(Data[i] < sys.Low_th || Data[i] > sys.High_th)
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	005b      	lsls	r3, r3, #1
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	4413      	add	r3, r2
 8006034:	881a      	ldrh	r2, [r3, #0]
 8006036:	4b17      	ldr	r3, [pc, #92]	@ (8006094 <Warning_Detection+0xbc>)
 8006038:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800603c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800603e:	429a      	cmp	r2, r3
 8006040:	d30a      	bcc.n	8006058 <Warning_Detection+0x80>
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	4413      	add	r3, r2
 800604a:	881a      	ldrh	r2, [r3, #0]
 800604c:	4b11      	ldr	r3, [pc, #68]	@ (8006094 <Warning_Detection+0xbc>)
 800604e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006052:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8006054:	429a      	cmp	r2, r3
 8006056:	d904      	bls.n	8006062 <Warning_Detection+0x8a>
		{
			flags.Threshold_Detected= 1;
 8006058:	4a0f      	ldr	r2, [pc, #60]	@ (8006098 <Warning_Detection+0xc0>)
 800605a:	7813      	ldrb	r3, [r2, #0]
 800605c:	f043 0310 	orr.w	r3, r3, #16
 8006060:	7013      	strb	r3, [r2, #0]
	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	3301      	adds	r3, #1
 8006066:	60bb      	str	r3, [r7, #8]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2bc7      	cmp	r3, #199	@ 0xc7
 800606c:	ddc1      	ble.n	8005ff2 <Warning_Detection+0x1a>
		}
	}

	if(max - min >= Hammer_Th)
 800606e:	89fa      	ldrh	r2, [r7, #14]
 8006070:	89bb      	ldrh	r3, [r7, #12]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	4a09      	ldr	r2, [pc, #36]	@ (800609c <Warning_Detection+0xc4>)
 8006076:	8812      	ldrh	r2, [r2, #0]
 8006078:	4293      	cmp	r3, r2
 800607a:	db04      	blt.n	8006086 <Warning_Detection+0xae>
	{
		flags.Hammer_Detected = 1;
 800607c:	4a06      	ldr	r2, [pc, #24]	@ (8006098 <Warning_Detection+0xc0>)
 800607e:	7813      	ldrb	r3, [r2, #0]
 8006080:	f043 0308 	orr.w	r3, r3, #8
 8006084:	7013      	strb	r3, [r2, #0]
	}

}
 8006086:	bf00      	nop
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	20000840 	.word	0x20000840
 8006098:	20001d68 	.word	0x20001d68
 800609c:	20005584 	.word	0x20005584

080060a0 <RAM_Save_Measure>:

/*-----SALVATAGGIO MISURA IN RAM-----*/
void RAM_Save_Measure(Compressed_Sample_Typedef* sample, uint8_t* compressed_data)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
    uint32_t samples_size = sample->compressed_size.pressure_size +
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	461a      	mov	r2, r3
                            sample->compressed_size.volume_size +
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	885b      	ldrh	r3, [r3, #2]
 80060b6:	b29b      	uxth	r3, r3
    uint32_t samples_size = sample->compressed_size.pressure_size +
 80060b8:	4413      	add	r3, r2
                            sample->compressed_size.acceleration_size;
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	8892      	ldrh	r2, [r2, #4]
 80060be:	b292      	uxth	r2, r2
                            sample->compressed_size.volume_size +
 80060c0:	4413      	add	r3, r2
    uint32_t samples_size = sample->compressed_size.pressure_size +
 80060c2:	613b      	str	r3, [r7, #16]
    uint32_t total_size = METADATA_SIZE + samples_size;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	3306      	adds	r3, #6
 80060c8:	60fb      	str	r3, [r7, #12]
    uint32_t address = sys.Current_RAM_Base + sys.Current_RAM_Len;
 80060ca:	4b23      	ldr	r3, [pc, #140]	@ (8006158 <RAM_Save_Measure+0xb8>)
 80060cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060d0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80060d4:	4b20      	ldr	r3, [pc, #128]	@ (8006158 <RAM_Save_Measure+0xb8>)
 80060d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060da:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80060de:	4413      	add	r3, r2
 80060e0:	617b      	str	r3, [r7, #20]

	if(Saved_Samples >= sys.RAM_Samples_Number) 
 80060e2:	4b1e      	ldr	r3, [pc, #120]	@ (800615c <RAM_Save_Measure+0xbc>)
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006158 <RAM_Save_Measure+0xb8>)
 80060ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d312      	bcc.n	800611c <RAM_Save_Measure+0x7c>
	{
		sys.Current_RAM_Len = Saved_Bytes;
 80060f6:	4b1a      	ldr	r3, [pc, #104]	@ (8006160 <RAM_Save_Measure+0xc0>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a17      	ldr	r2, [pc, #92]	@ (8006158 <RAM_Save_Measure+0xb8>)
 80060fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006100:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
		Saved_Bytes = 0;
 8006104:	4b16      	ldr	r3, [pc, #88]	@ (8006160 <RAM_Save_Measure+0xc0>)
 8006106:	2200      	movs	r2, #0
 8006108:	601a      	str	r2, [r3, #0]
		Saved_Samples = 0;
 800610a:	4b14      	ldr	r3, [pc, #80]	@ (800615c <RAM_Save_Measure+0xbc>)
 800610c:	2200      	movs	r2, #0
 800610e:	801a      	strh	r2, [r3, #0]
		address = sys.Current_RAM_Base;
 8006110:	4b11      	ldr	r3, [pc, #68]	@ (8006158 <RAM_Save_Measure+0xb8>)
 8006112:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006116:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800611a:	617b      	str	r3, [r7, #20]
    }

	RAM_Write(address, METADATA_SIZE, (uint8_t*)sample);
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	2106      	movs	r1, #6
 8006120:	6978      	ldr	r0, [r7, #20]
 8006122:	f001 f905 	bl	8007330 <RAM_Write>
    address += METADATA_SIZE;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	3306      	adds	r3, #6
 800612a:	617b      	str	r3, [r7, #20]

	RAM_Write(address, samples_size, compressed_data);
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	6939      	ldr	r1, [r7, #16]
 8006130:	6978      	ldr	r0, [r7, #20]
 8006132:	f001 f8fd 	bl	8007330 <RAM_Write>
    
    Saved_Bytes += total_size;
 8006136:	4b0a      	ldr	r3, [pc, #40]	@ (8006160 <RAM_Save_Measure+0xc0>)
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4413      	add	r3, r2
 800613e:	4a08      	ldr	r2, [pc, #32]	@ (8006160 <RAM_Save_Measure+0xc0>)
 8006140:	6013      	str	r3, [r2, #0]
	Saved_Samples++;
 8006142:	4b06      	ldr	r3, [pc, #24]	@ (800615c <RAM_Save_Measure+0xbc>)
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	3301      	adds	r3, #1
 8006148:	b29a      	uxth	r2, r3
 800614a:	4b04      	ldr	r3, [pc, #16]	@ (800615c <RAM_Save_Measure+0xbc>)
 800614c:	801a      	strh	r2, [r3, #0]
}
 800614e:	bf00      	nop
 8006150:	3718      	adds	r7, #24
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	20000840 	.word	0x20000840
 800615c:	20004fc8 	.word	0x20004fc8
 8006160:	20004fc4 	.word	0x20004fc4

08006164 <Send_Measure_Chunk>:

/*-----INVIO CHUNK MISURA-----*/
uint32_t Send_Measure_Chunk(uint32_t buffer_base, uint32_t buffer_len, uint32_t start_address)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	f5ad 6d87 	sub.w	sp, sp, #1080	@ 0x438
 800616a:	af00      	add	r7, sp, #0
 800616c:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8006170:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8006174:	6018      	str	r0, [r3, #0]
 8006176:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800617a:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800617e:	6019      	str	r1, [r3, #0]
 8006180:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8006184:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8006188:	601a      	str	r2, [r3, #0]
    uint32_t raw_fill = 0;
 800618a:	2300      	movs	r3, #0
 800618c:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
    uint8_t raw_buffer[1024]; // buffer temporaneo per i dati raw
    uint32_t address = start_address;
 8006190:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8006194:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
    uint32_t end_address = start_address;
 800619e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80061a2:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428
    uint8_t first_loop = 1;
 80061ac:	2301      	movs	r3, #1
 80061ae:	f887 342f 	strb.w	r3, [r7, #1071]	@ 0x42f

    if (buffer_len == 0) 
 80061b2:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80061b6:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <Send_Measure_Chunk+0x60>
    {
        return 0;
 80061c0:	2300      	movs	r3, #0
 80061c2:	e0f5      	b.n	80063b0 <Send_Measure_Chunk+0x24c>
    }

    do {
        if (address >= buffer_base + buffer_len) 
 80061c4:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80061c8:	f2a3 422c 	subw	r2, r3, #1068	@ 0x42c
 80061cc:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80061d0:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 80061d4:	6812      	ldr	r2, [r2, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4413      	add	r3, r2
 80061da:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 80061de:	429a      	cmp	r2, r3
 80061e0:	d306      	bcc.n	80061f0 <Send_Measure_Chunk+0x8c>
        {
            address = buffer_base;
 80061e2:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80061e6:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
        }

        if ((buffer_base + buffer_len - address) < METADATA_SIZE && address < buffer_base + buffer_len) 
 80061f0:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80061f4:	f2a3 422c 	subw	r2, r3, #1068	@ 0x42c
 80061f8:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80061fc:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 8006200:	6812      	ldr	r2, [r2, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	441a      	add	r2, r3
 8006206:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b05      	cmp	r3, #5
 800620e:	d80f      	bhi.n	8006230 <Send_Measure_Chunk+0xcc>
 8006210:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8006214:	f2a3 422c 	subw	r2, r3, #1068	@ 0x42c
 8006218:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800621c:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 8006220:	6812      	ldr	r2, [r2, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4413      	add	r3, r2
 8006226:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 800622a:	429a      	cmp	r2, r3
 800622c:	f0c0 8099 	bcc.w	8006362 <Send_Measure_Chunk+0x1fe>
        {
            break;
        }
        if ((raw_fill + METADATA_SIZE) > sizeof(raw_buffer)) 
 8006230:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8006234:	3306      	adds	r3, #6
 8006236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800623a:	f200 8094 	bhi.w	8006366 <Send_Measure_Chunk+0x202>
        {
            break;
        }

        Compressed_Sample_Typedef sample_header;
        RAM_Read(address, METADATA_SIZE, (uint8_t*)&sample_header);
 800623e:	f107 0314 	add.w	r3, r7, #20
 8006242:	461a      	mov	r2, r3
 8006244:	2106      	movs	r1, #6
 8006246:	f8d7 0430 	ldr.w	r0, [r7, #1072]	@ 0x430
 800624a:	f001 f882 	bl	8007352 <RAM_Read>

        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 800624e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8006252:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8006256:	881b      	ldrh	r3, [r3, #0]
 8006258:	461a      	mov	r2, r3
                               sample_header.compressed_size.volume_size +
 800625a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800625e:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8006262:	885b      	ldrh	r3, [r3, #2]
        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 8006264:	4413      	add	r3, r2
                               sample_header.compressed_size.acceleration_size;
 8006266:	f507 6287 	add.w	r2, r7, #1080	@ 0x438
 800626a:	f2a2 4224 	subw	r2, r2, #1060	@ 0x424
 800626e:	8892      	ldrh	r2, [r2, #4]
                               sample_header.compressed_size.volume_size +
 8006270:	4413      	add	r3, r2
        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 8006272:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424
        uint32_t sample_total_size = METADATA_SIZE + sample_size;
 8006276:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 800627a:	3306      	adds	r3, #6
 800627c:	f8c7 3420 	str.w	r3, [r7, #1056]	@ 0x420

        if ((raw_fill + sample_total_size) > sizeof(raw_buffer)) 
 8006280:	f8d7 2434 	ldr.w	r2, [r7, #1076]	@ 0x434
 8006284:	f8d7 3420 	ldr.w	r3, [r7, #1056]	@ 0x420
 8006288:	4413      	add	r3, r2
 800628a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800628e:	d86c      	bhi.n	800636a <Send_Measure_Chunk+0x206>
        {
            break;
        }

        RAM_Read(address, METADATA_SIZE, raw_buffer + raw_fill);
 8006290:	f107 021c 	add.w	r2, r7, #28
 8006294:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8006298:	4413      	add	r3, r2
 800629a:	461a      	mov	r2, r3
 800629c:	2106      	movs	r1, #6
 800629e:	f8d7 0430 	ldr.w	r0, [r7, #1072]	@ 0x430
 80062a2:	f001 f856 	bl	8007352 <RAM_Read>
        raw_fill += METADATA_SIZE;
 80062a6:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80062aa:	3306      	adds	r3, #6
 80062ac:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
        address += METADATA_SIZE;
 80062b0:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 80062b4:	3306      	adds	r3, #6
 80062b6:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
        if (address >= buffer_base + buffer_len) address = buffer_base;
 80062ba:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80062be:	f2a3 422c 	subw	r2, r3, #1068	@ 0x42c
 80062c2:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80062c6:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 80062ca:	6812      	ldr	r2, [r2, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4413      	add	r3, r2
 80062d0:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d306      	bcc.n	80062e6 <Send_Measure_Chunk+0x182>
 80062d8:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80062dc:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430

        RAM_Read(address, sample_size, raw_buffer + raw_fill);
 80062e6:	f107 021c 	add.w	r2, r7, #28
 80062ea:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80062ee:	4413      	add	r3, r2
 80062f0:	461a      	mov	r2, r3
 80062f2:	f8d7 1424 	ldr.w	r1, [r7, #1060]	@ 0x424
 80062f6:	f8d7 0430 	ldr.w	r0, [r7, #1072]	@ 0x430
 80062fa:	f001 f82a 	bl	8007352 <RAM_Read>
        raw_fill += sample_size;
 80062fe:	f8d7 2434 	ldr.w	r2, [r7, #1076]	@ 0x434
 8006302:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 8006306:	4413      	add	r3, r2
 8006308:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
        address += sample_size;
 800630c:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 8006310:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 8006314:	4413      	add	r3, r2
 8006316:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
        if (address >= buffer_base + buffer_len) address = buffer_base;
 800631a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800631e:	f2a3 422c 	subw	r2, r3, #1068	@ 0x42c
 8006322:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8006326:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800632a:	6812      	ldr	r2, [r2, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4413      	add	r3, r2
 8006330:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 8006334:	429a      	cmp	r2, r3
 8006336:	d306      	bcc.n	8006346 <Send_Measure_Chunk+0x1e2>
 8006338:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800633c:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430

        if (address == end_address && !first_loop) 
 8006346:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 800634a:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 800634e:	429a      	cmp	r2, r3
 8006350:	d103      	bne.n	800635a <Send_Measure_Chunk+0x1f6>
 8006352:	f897 342f 	ldrb.w	r3, [r7, #1071]	@ 0x42f
 8006356:	2b00      	cmp	r3, #0
 8006358:	d009      	beq.n	800636e <Send_Measure_Chunk+0x20a>
        {
            break;
        }
        first_loop = 0;
 800635a:	2300      	movs	r3, #0
 800635c:	f887 342f 	strb.w	r3, [r7, #1071]	@ 0x42f
    do {
 8006360:	e730      	b.n	80061c4 <Send_Measure_Chunk+0x60>
            break;
 8006362:	bf00      	nop
 8006364:	e004      	b.n	8006370 <Send_Measure_Chunk+0x20c>
            break;
 8006366:	bf00      	nop
 8006368:	e002      	b.n	8006370 <Send_Measure_Chunk+0x20c>
            break;
 800636a:	bf00      	nop
 800636c:	e000      	b.n	8006370 <Send_Measure_Chunk+0x20c>
            break;
 800636e:	bf00      	nop
    } while (1);

    if (raw_fill > 0) 
 8006370:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8006374:	2b00      	cmp	r3, #0
 8006376:	d011      	beq.n	800639c <Send_Measure_Chunk+0x238>
    {
        // Codifica in base64
        size_t b64_len = Base64_Encode(raw_buffer, raw_fill, (char*)tcp_chunk, sizeof(tcp_chunk));
 8006378:	f107 001c 	add.w	r0, r7, #28
 800637c:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8006380:	4a0e      	ldr	r2, [pc, #56]	@ (80063bc <Send_Measure_Chunk+0x258>)
 8006382:	f8d7 1434 	ldr.w	r1, [r7, #1076]	@ 0x434
 8006386:	f7fc f885 	bl	8002494 <Base64_Encode>
 800638a:	f8c7 041c 	str.w	r0, [r7, #1052]	@ 0x41c
        SIM_Send_TCP_Chunk_DMA(tcp_chunk, b64_len);
 800638e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8006392:	b29b      	uxth	r3, r3
 8006394:	4619      	mov	r1, r3
 8006396:	4809      	ldr	r0, [pc, #36]	@ (80063bc <Send_Measure_Chunk+0x258>)
 8006398:	f7fb fe9e 	bl	80020d8 <SIM_Send_TCP_Chunk_DMA>
    }

    if (address == end_address) 
 800639c:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 80063a0:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d101      	bne.n	80063ac <Send_Measure_Chunk+0x248>
    {
        return 0;
 80063a8:	2300      	movs	r3, #0
 80063aa:	e001      	b.n	80063b0 <Send_Measure_Chunk+0x24c>
    }
    return address;
 80063ac:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	f507 6787 	add.w	r7, r7, #1080	@ 0x438
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	20004fd0 	.word	0x20004fd0

080063c0 <Compress_Sample>:

/*-----COMPRESSIONE DATI-----*/
Compressed_Sizes_Typedef Compress_Sample(uint8_t *input, uint16_t input_len, uint8_t *output)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b09a      	sub	sp, #104	@ 0x68
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	603b      	str	r3, [r7, #0]
 80063cc:	4613      	mov	r3, r2
 80063ce:	80fb      	strh	r3, [r7, #6]
	uint16_t out_idx = 0;
 80063d0:	2300      	movs	r3, #0
 80063d2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	uint8_t packed_byte = 0;
 80063d6:	2300      	movs	r3, #0
 80063d8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	Compressed_Sizes_Typedef sizes = {0, 0, 0};
 80063dc:	2300      	movs	r3, #0
 80063de:	843b      	strh	r3, [r7, #32]
 80063e0:	2300      	movs	r3, #0
 80063e2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80063e4:	2300      	movs	r3, #0
 80063e6:	84bb      	strh	r3, [r7, #36]	@ 0x24

    AdpcmState_Typedef press_state = {0, 0};
 80063e8:	2300      	movs	r3, #0
 80063ea:	83bb      	strh	r3, [r7, #28]
 80063ec:	2300      	movs	r3, #0
 80063ee:	77bb      	strb	r3, [r7, #30]
    AdpcmState_Typedef acc_x_state = {0, 0}, acc_y_state = {0, 0}, acc_z_state = {0, 0};
 80063f0:	2300      	movs	r3, #0
 80063f2:	833b      	strh	r3, [r7, #24]
 80063f4:	2300      	movs	r3, #0
 80063f6:	76bb      	strb	r3, [r7, #26]
 80063f8:	2300      	movs	r3, #0
 80063fa:	82bb      	strh	r3, [r7, #20]
 80063fc:	2300      	movs	r3, #0
 80063fe:	75bb      	strb	r3, [r7, #22]
 8006400:	2300      	movs	r3, #0
 8006402:	823b      	strh	r3, [r7, #16]
 8006404:	2300      	movs	r3, #0
 8006406:	74bb      	strb	r3, [r7, #18]

	// --- 1. Pressione ---
	uint16_t *adc = (uint16_t*)input;
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint16_t pressure_start = out_idx;
 800640c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006410:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	output[out_idx++] = adc[0] & 0xFF;
 8006414:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006416:	881a      	ldrh	r2, [r3, #0]
 8006418:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800641c:	1c59      	adds	r1, r3, #1
 800641e:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006422:	4619      	mov	r1, r3
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	440b      	add	r3, r1
 8006428:	b2d2      	uxtb	r2, r2
 800642a:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = adc[0] >> 8;
 800642c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	0a1b      	lsrs	r3, r3, #8
 8006432:	b29a      	uxth	r2, r3
 8006434:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006438:	1c59      	adds	r1, r3, #1
 800643a:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800643e:	4619      	mov	r1, r3
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	440b      	add	r3, r1
 8006444:	b2d2      	uxtb	r2, r2
 8006446:	701a      	strb	r2, [r3, #0]
	press_state.previous_value = adc[0];
 8006448:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	b21b      	sxth	r3, r3
 800644e:	83bb      	strh	r3, [r7, #28]
	for (int i = 1; i < PRESS_HALF_SAMPLES; i++) 
 8006450:	2301      	movs	r3, #1
 8006452:	663b      	str	r3, [r7, #96]	@ 0x60
 8006454:	e033      	b.n	80064be <Compress_Sample+0xfe>
	{
		uint8_t nibble = ADPCM_Compression(adc[i], &press_state, step_size_table_12bit);
 8006456:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800645c:	4413      	add	r3, r2
 800645e:	881b      	ldrh	r3, [r3, #0]
 8006460:	b21b      	sxth	r3, r3
 8006462:	f107 011c 	add.w	r1, r7, #28
 8006466:	4a99      	ldr	r2, [pc, #612]	@ (80066cc <Compress_Sample+0x30c>)
 8006468:	4618      	mov	r0, r3
 800646a:	f000 f9cf 	bl	800680c <ADPCM_Compression>
 800646e:	4603      	mov	r3, r0
 8006470:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (i % 2 != 0) 
 8006474:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d004      	beq.n	8006488 <Compress_Sample+0xc8>
		{
			packed_byte = nibble;
 800647e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006482:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 8006486:	e017      	b.n	80064b8 <Compress_Sample+0xf8>
		} else 
		{
			packed_byte |= (nibble << 4);
 8006488:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800648c:	011b      	lsls	r3, r3, #4
 800648e:	b25a      	sxtb	r2, r3
 8006490:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8006494:	4313      	orrs	r3, r2
 8006496:	b25b      	sxtb	r3, r3
 8006498:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
			output[out_idx++] = packed_byte;
 800649c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 80064a6:	461a      	mov	r2, r3
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	4413      	add	r3, r2
 80064ac:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 80064b0:	701a      	strb	r2, [r3, #0]
			packed_byte = 0;
 80064b2:	2300      	movs	r3, #0
 80064b4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	for (int i = 1; i < PRESS_HALF_SAMPLES; i++) 
 80064b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064ba:	3301      	adds	r3, #1
 80064bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80064be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064c0:	2bc7      	cmp	r3, #199	@ 0xc7
 80064c2:	ddc8      	ble.n	8006456 <Compress_Sample+0x96>
	if (PRESS_HALF_SAMPLES % 2 != 0) 
	{
		output[out_idx++] = packed_byte;
		packed_byte = 0;
	}
	sizes.pressure_size = out_idx - pressure_start;
 80064c4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 80064c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	843b      	strh	r3, [r7, #32]

	// --- 2. Flusso (RLE) ---
	uint32_t *counter = (uint32_t*)(input + PRESS_HALF_LEN);
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80064d8:	643b      	str	r3, [r7, #64]	@ 0x40
	uint16_t volume_start = out_idx;
 80064da:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80064de:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	uint32_t prev = counter[0];
 80064e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint16_t run_len = 1;
 80064e6:	2301      	movs	r3, #1
 80064e8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

	for (int i = 1; i < MAX_VOLUME_SAMPLES; i++) {
 80064ec:	2301      	movs	r3, #1
 80064ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80064f0:	e058      	b.n	80065a4 <Compress_Sample+0x1e4>
		if (counter[i] == prev && run_len < 255) {
 80064f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064f8:	4413      	add	r3, r2
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80064fe:	429a      	cmp	r2, r3
 8006500:	d109      	bne.n	8006516 <Compress_Sample+0x156>
 8006502:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006506:	2bfe      	cmp	r3, #254	@ 0xfe
 8006508:	d805      	bhi.n	8006516 <Compress_Sample+0x156>
			run_len++;
 800650a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800650e:	3301      	adds	r3, #1
 8006510:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8006514:	e043      	b.n	800659e <Compress_Sample+0x1de>
		} else {
			// Scrivi valore e run_len (4 byte valore + 1 byte run_len)
			output[out_idx++] = prev & 0xFF;
 8006516:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8006520:	461a      	mov	r2, r3
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	4413      	add	r3, r2
 8006526:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 8) & 0xFF;
 800652c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800652e:	0a1a      	lsrs	r2, r3, #8
 8006530:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006534:	1c59      	adds	r1, r3, #1
 8006536:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800653a:	4619      	mov	r1, r3
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	440b      	add	r3, r1
 8006540:	b2d2      	uxtb	r2, r2
 8006542:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 16) & 0xFF;
 8006544:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006546:	0c1a      	lsrs	r2, r3, #16
 8006548:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800654c:	1c59      	adds	r1, r3, #1
 800654e:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006552:	4619      	mov	r1, r3
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	440b      	add	r3, r1
 8006558:	b2d2      	uxtb	r2, r2
 800655a:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 24) & 0xFF;
 800655c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800655e:	0e1a      	lsrs	r2, r3, #24
 8006560:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006564:	1c59      	adds	r1, r3, #1
 8006566:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800656a:	4619      	mov	r1, r3
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	440b      	add	r3, r1
 8006570:	b2d2      	uxtb	r2, r2
 8006572:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = run_len;
 8006574:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 800657e:	461a      	mov	r2, r3
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	4413      	add	r3, r2
 8006584:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	701a      	strb	r2, [r3, #0]
			prev = counter[i];
 800658c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006592:	4413      	add	r3, r2
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	65fb      	str	r3, [r7, #92]	@ 0x5c
			run_len = 1;
 8006598:	2301      	movs	r3, #1
 800659a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	for (int i = 1; i < MAX_VOLUME_SAMPLES; i++) {
 800659e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065a0:	3301      	adds	r3, #1
 80065a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80065a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065a6:	2b09      	cmp	r3, #9
 80065a8:	dda3      	ble.n	80064f2 <Compress_Sample+0x132>
		}
	}
	// Scrivi l'ultimo run
	output[out_idx++] = prev & 0xFF;
 80065aa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80065ae:	1c5a      	adds	r2, r3, #1
 80065b0:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 80065b4:	461a      	mov	r2, r3
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	4413      	add	r3, r2
 80065ba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80065bc:	b2d2      	uxtb	r2, r2
 80065be:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 8) & 0xFF;
 80065c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065c2:	0a1a      	lsrs	r2, r3, #8
 80065c4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80065c8:	1c59      	adds	r1, r3, #1
 80065ca:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80065ce:	4619      	mov	r1, r3
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	440b      	add	r3, r1
 80065d4:	b2d2      	uxtb	r2, r2
 80065d6:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 16) & 0xFF;
 80065d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065da:	0c1a      	lsrs	r2, r3, #16
 80065dc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80065e0:	1c59      	adds	r1, r3, #1
 80065e2:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80065e6:	4619      	mov	r1, r3
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	440b      	add	r3, r1
 80065ec:	b2d2      	uxtb	r2, r2
 80065ee:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 24) & 0xFF;
 80065f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065f2:	0e1a      	lsrs	r2, r3, #24
 80065f4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80065f8:	1c59      	adds	r1, r3, #1
 80065fa:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80065fe:	4619      	mov	r1, r3
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	440b      	add	r3, r1
 8006604:	b2d2      	uxtb	r2, r2
 8006606:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = run_len;
 8006608:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8006612:	461a      	mov	r2, r3
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	4413      	add	r3, r2
 8006618:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	701a      	strb	r2, [r3, #0]

	sizes.volume_size = out_idx - volume_start;
 8006620:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8006624:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	b29b      	uxth	r3, r3
 800662a:	847b      	strh	r3, [r7, #34]	@ 0x22

	// --- 3. Accelerometro (3 canali separati) ---
	uint8_t *accel = input + PRESS_HALF_LEN + MAX_VOLUME_LEN;
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006632:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint16_t accel_start = out_idx;
 8006634:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006638:	86fb      	strh	r3, [r7, #54]	@ 0x36

	uint16_t x0 = accel[1] | (accel[2] << 8);
 800663a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663c:	3301      	adds	r3, #1
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	b21a      	sxth	r2, r3
 8006642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006644:	3302      	adds	r3, #2
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	b21b      	sxth	r3, r3
 800664a:	021b      	lsls	r3, r3, #8
 800664c:	b21b      	sxth	r3, r3
 800664e:	4313      	orrs	r3, r2
 8006650:	b21b      	sxth	r3, r3
 8006652:	86bb      	strh	r3, [r7, #52]	@ 0x34
	uint16_t y0 = accel[3] | (accel[4] << 8);
 8006654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006656:	3303      	adds	r3, #3
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	b21a      	sxth	r2, r3
 800665c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665e:	3304      	adds	r3, #4
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	b21b      	sxth	r3, r3
 8006664:	021b      	lsls	r3, r3, #8
 8006666:	b21b      	sxth	r3, r3
 8006668:	4313      	orrs	r3, r2
 800666a:	b21b      	sxth	r3, r3
 800666c:	867b      	strh	r3, [r7, #50]	@ 0x32
	uint16_t z0 = accel[5] | (accel[6] << 8);
 800666e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006670:	3305      	adds	r3, #5
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	b21a      	sxth	r2, r3
 8006676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006678:	3306      	adds	r3, #6
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	b21b      	sxth	r3, r3
 800667e:	021b      	lsls	r3, r3, #8
 8006680:	b21b      	sxth	r3, r3
 8006682:	4313      	orrs	r3, r2
 8006684:	b21b      	sxth	r3, r3
 8006686:	863b      	strh	r3, [r7, #48]	@ 0x30
	acc_x_state.previous_value = x0;
 8006688:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800668c:	833b      	strh	r3, [r7, #24]
	acc_y_state.previous_value = y0;
 800668e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8006692:	82bb      	strh	r3, [r7, #20]
	acc_z_state.previous_value = z0;
 8006694:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8006698:	823b      	strh	r3, [r7, #16]
	for(int k=0; k<7; ++k) output[out_idx++] = accel[k];
 800669a:	2300      	movs	r3, #0
 800669c:	653b      	str	r3, [r7, #80]	@ 0x50
 800669e:	e00f      	b.n	80066c0 <Compress_Sample+0x300>
 80066a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066a4:	441a      	add	r2, r3
 80066a6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80066aa:	1c59      	adds	r1, r3, #1
 80066ac:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80066b0:	4619      	mov	r1, r3
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	440b      	add	r3, r1
 80066b6:	7812      	ldrb	r2, [r2, #0]
 80066b8:	701a      	strb	r2, [r3, #0]
 80066ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066bc:	3301      	adds	r3, #1
 80066be:	653b      	str	r3, [r7, #80]	@ 0x50
 80066c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066c2:	2b06      	cmp	r3, #6
 80066c4:	ddec      	ble.n	80066a0 <Compress_Sample+0x2e0>
	for (int i = 1; i < ACC_FIFO_WATERMARK; i++) 
 80066c6:	2301      	movs	r3, #1
 80066c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066ca:	e087      	b.n	80067dc <Compress_Sample+0x41c>
 80066cc:	200000b0 	.word	0x200000b0
	{
		uint16_t x = accel[i*7+1] | (accel[i*7+2] << 8);
 80066d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80066d2:	4613      	mov	r3, r2
 80066d4:	00db      	lsls	r3, r3, #3
 80066d6:	1a9b      	subs	r3, r3, r2
 80066d8:	3301      	adds	r3, #1
 80066da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066dc:	4413      	add	r3, r2
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	b219      	sxth	r1, r3
 80066e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80066e4:	4613      	mov	r3, r2
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	1a9b      	subs	r3, r3, r2
 80066ea:	3302      	adds	r3, #2
 80066ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066ee:	4413      	add	r3, r2
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	b21b      	sxth	r3, r3
 80066f4:	021b      	lsls	r3, r3, #8
 80066f6:	b21b      	sxth	r3, r3
 80066f8:	430b      	orrs	r3, r1
 80066fa:	b21b      	sxth	r3, r3
 80066fc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		uint16_t y = accel[i*7+3] | (accel[i*7+4] << 8);
 80066fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006700:	4613      	mov	r3, r2
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	1a9b      	subs	r3, r3, r2
 8006706:	3303      	adds	r3, #3
 8006708:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800670a:	4413      	add	r3, r2
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	b219      	sxth	r1, r3
 8006710:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006712:	4613      	mov	r3, r2
 8006714:	00db      	lsls	r3, r3, #3
 8006716:	1a9b      	subs	r3, r3, r2
 8006718:	3304      	adds	r3, #4
 800671a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800671c:	4413      	add	r3, r2
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	b21b      	sxth	r3, r3
 8006722:	021b      	lsls	r3, r3, #8
 8006724:	b21b      	sxth	r3, r3
 8006726:	430b      	orrs	r3, r1
 8006728:	b21b      	sxth	r3, r3
 800672a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		uint16_t z = accel[i*7+5] | (accel[i*7+6] << 8);
 800672c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800672e:	4613      	mov	r3, r2
 8006730:	00db      	lsls	r3, r3, #3
 8006732:	1a9b      	subs	r3, r3, r2
 8006734:	3305      	adds	r3, #5
 8006736:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006738:	4413      	add	r3, r2
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	b219      	sxth	r1, r3
 800673e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006740:	4613      	mov	r3, r2
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	1a9b      	subs	r3, r3, r2
 8006746:	3306      	adds	r3, #6
 8006748:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800674a:	4413      	add	r3, r2
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	b21b      	sxth	r3, r3
 8006750:	021b      	lsls	r3, r3, #8
 8006752:	b21b      	sxth	r3, r3
 8006754:	430b      	orrs	r3, r1
 8006756:	b21b      	sxth	r3, r3
 8006758:	857b      	strh	r3, [r7, #42]	@ 0x2a
		uint8_t nibble_x = ADPCM_Compression(x, &acc_x_state, step_size_table_16bit);
 800675a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800675e:	f107 0118 	add.w	r1, r7, #24
 8006762:	4a29      	ldr	r2, [pc, #164]	@ (8006808 <Compress_Sample+0x448>)
 8006764:	4618      	mov	r0, r3
 8006766:	f000 f851 	bl	800680c <ADPCM_Compression>
 800676a:	4603      	mov	r3, r0
 800676c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		uint8_t nibble_y = ADPCM_Compression(y, &acc_y_state, step_size_table_16bit);
 8006770:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8006774:	f107 0114 	add.w	r1, r7, #20
 8006778:	4a23      	ldr	r2, [pc, #140]	@ (8006808 <Compress_Sample+0x448>)
 800677a:	4618      	mov	r0, r3
 800677c:	f000 f846 	bl	800680c <ADPCM_Compression>
 8006780:	4603      	mov	r3, r0
 8006782:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		uint8_t nibble_z = ADPCM_Compression(z, &acc_z_state, step_size_table_16bit);
 8006786:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800678a:	f107 0110 	add.w	r1, r7, #16
 800678e:	4a1e      	ldr	r2, [pc, #120]	@ (8006808 <Compress_Sample+0x448>)
 8006790:	4618      	mov	r0, r3
 8006792:	f000 f83b 	bl	800680c <ADPCM_Compression>
 8006796:	4603      	mov	r3, r0
 8006798:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		output[out_idx++] = nibble_x | (nibble_y << 4);
 800679c:	f997 3028 	ldrsb.w	r3, [r7, #40]	@ 0x28
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	b25a      	sxtb	r2, r3
 80067a4:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 80067a8:	4313      	orrs	r3, r2
 80067aa:	b25a      	sxtb	r2, r3
 80067ac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80067b0:	1c59      	adds	r1, r3, #1
 80067b2:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80067b6:	4619      	mov	r1, r3
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	440b      	add	r3, r1
 80067bc:	b2d2      	uxtb	r2, r2
 80067be:	701a      	strb	r2, [r3, #0]
		output[out_idx++] = nibble_z;
 80067c0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80067c4:	1c5a      	adds	r2, r3, #1
 80067c6:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 80067ca:	461a      	mov	r2, r3
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	4413      	add	r3, r2
 80067d0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80067d4:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < ACC_FIFO_WATERMARK; i++) 
 80067d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067d8:	3301      	adds	r3, #1
 80067da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067de:	2bc7      	cmp	r3, #199	@ 0xc7
 80067e0:	f77f af76 	ble.w	80066d0 <Compress_Sample+0x310>
	}
	sizes.acceleration_size = out_idx - accel_start;
 80067e4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 80067e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	84bb      	strh	r3, [r7, #36]	@ 0x24

	return sizes;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	461a      	mov	r2, r3
 80067f4:	f107 0320 	add.w	r3, r7, #32
 80067f8:	6818      	ldr	r0, [r3, #0]
 80067fa:	6010      	str	r0, [r2, #0]
 80067fc:	889b      	ldrh	r3, [r3, #4]
 80067fe:	8093      	strh	r3, [r2, #4]
}
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	3768      	adds	r7, #104	@ 0x68
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	20000000 	.word	0x20000000

0800680c <ADPCM_Compression>:

/*-----FUNZIONE DI COMPRESSIONE ADPCM-----*/
uint8_t ADPCM_Compression(int16_t sample, AdpcmState_Typedef* state, uint16_t* step_size_table) 
{
 800680c:	b480      	push	{r7}
 800680e:	b08b      	sub	sp, #44	@ 0x2c
 8006810:	af00      	add	r7, sp, #0
 8006812:	4603      	mov	r3, r0
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
 8006818:	81fb      	strh	r3, [r7, #14]
    int32_t diff = (int32_t)sample - state->previous_value;
 800681a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006824:	1a9b      	subs	r3, r3, r2
 8006826:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t step = step_size_table[state->step_index];
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800682e:	005b      	lsls	r3, r3, #1
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	4413      	add	r3, r2
 8006834:	881b      	ldrh	r3, [r3, #0]
 8006836:	837b      	strh	r3, [r7, #26]
    uint8_t nibble = 0;
 8006838:	2300      	movs	r3, #0
 800683a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    if (diff < 0) 
 800683e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006840:	2b00      	cmp	r3, #0
 8006842:	da05      	bge.n	8006850 <ADPCM_Compression+0x44>
	{
        nibble = 8; // Bit di segno
 8006844:	2308      	movs	r3, #8
 8006846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        diff = -diff;
 800684a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684c:	425b      	negs	r3, r3
 800684e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Calcola il nibble quantizzato
    uint32_t temp = (uint32_t)diff * 4;
 8006850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	617b      	str	r3, [r7, #20]
    if (temp < step) 
 8006856:	8b7b      	ldrh	r3, [r7, #26]
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	429a      	cmp	r2, r3
 800685c:	d312      	bcc.n	8006884 <ADPCM_Compression+0x78>
	{
        nibble |= 0;
    } 
	else 
	{
        nibble |= (uint8_t)((temp / step > 7) ? 7 : (temp / step));
 800685e:	8b7b      	ldrh	r3, [r7, #26]
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	fbb2 f3f3 	udiv	r3, r2, r3
 8006866:	2b07      	cmp	r3, #7
 8006868:	d805      	bhi.n	8006876 <ADPCM_Compression+0x6a>
 800686a:	8b7b      	ldrh	r3, [r7, #26]
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006872:	b25b      	sxtb	r3, r3
 8006874:	e000      	b.n	8006878 <ADPCM_Compression+0x6c>
 8006876:	2307      	movs	r3, #7
 8006878:	f997 2023 	ldrsb.w	r2, [r7, #35]	@ 0x23
 800687c:	4313      	orrs	r3, r2
 800687e:	b25b      	sxtb	r3, r3
 8006880:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }

    // Ricostruisci il valore per la predizione successiva (usando solo il nibble)
    int32_t reconstructed_diff = (step * (nibble & 7)) / 4 + step / 8;
 8006884:	8b7b      	ldrh	r3, [r7, #26]
 8006886:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800688a:	f002 0207 	and.w	r2, r2, #7
 800688e:	fb02 f303 	mul.w	r3, r2, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	da00      	bge.n	8006898 <ADPCM_Compression+0x8c>
 8006896:	3303      	adds	r3, #3
 8006898:	109b      	asrs	r3, r3, #2
 800689a:	461a      	mov	r2, r3
 800689c:	8b7b      	ldrh	r3, [r7, #26]
 800689e:	08db      	lsrs	r3, r3, #3
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	4413      	add	r3, r2
 80068a4:	61fb      	str	r3, [r7, #28]
    if (nibble & 8) {
 80068a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80068aa:	f003 0308 	and.w	r3, r3, #8
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d002      	beq.n	80068b8 <ADPCM_Compression+0xac>
        reconstructed_diff = -reconstructed_diff;
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	425b      	negs	r3, r3
 80068b6:	61fb      	str	r3, [r7, #28]
    }
    
    state->previous_value += reconstructed_diff;
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068be:	b29a      	uxth	r2, r3
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	4413      	add	r3, r2
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	b21a      	sxth	r2, r3
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	801a      	strh	r2, [r3, #0]
    // Clamp del valore predetto
    if (state->previous_value > 32767) state->previous_value = 32767;
    if (state->previous_value < -32768) state->previous_value = -32768;

    // Aggiorna l'indice dello step
    state->step_index += index_adjustment_table[nibble & 7];
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80068da:	f003 0307 	and.w	r3, r3, #7
 80068de:	4910      	ldr	r1, [pc, #64]	@ (8006920 <ADPCM_Compression+0x114>)
 80068e0:	56cb      	ldrsb	r3, [r1, r3]
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	4413      	add	r3, r2
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	b25a      	sxtb	r2, r3
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	709a      	strb	r2, [r3, #2]
    if (state->step_index < 0) state->step_index = 0;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	da02      	bge.n	80068fe <ADPCM_Compression+0xf2>
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2200      	movs	r2, #0
 80068fc:	709a      	strb	r2, [r3, #2]
    if (state->step_index > 87) state->step_index = 87;
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006904:	2b57      	cmp	r3, #87	@ 0x57
 8006906:	dd02      	ble.n	800690e <ADPCM_Compression+0x102>
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2257      	movs	r2, #87	@ 0x57
 800690c:	709a      	strb	r2, [r3, #2]

    return nibble;
 800690e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8006912:	4618      	mov	r0, r3
 8006914:	372c      	adds	r7, #44	@ 0x2c
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	20000160 	.word	0x20000160

08006924 <Apply_Config>:


/*-----APPLICA VALORI CONFIGURAZIONE-----*/
void Apply_Config(void)
{
 8006924:	b590      	push	{r4, r7, lr}
 8006926:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
	FIL config_file;
	UINT bytes_written;
	
	if(strcmp(cfg_var, "DEVICE_ID") == 0) 
 800692e:	49af      	ldr	r1, [pc, #700]	@ (8006bec <Apply_Config+0x2c8>)
 8006930:	48af      	ldr	r0, [pc, #700]	@ (8006bf0 <Apply_Config+0x2cc>)
 8006932:	f7f9 fc4d 	bl	80001d0 <strcmp>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d107      	bne.n	800694c <Apply_Config+0x28>
	{
		config.device_id = (uint8_t)atoi(new_cfg_val);
 800693c:	48ad      	ldr	r0, [pc, #692]	@ (8006bf4 <Apply_Config+0x2d0>)
 800693e:	f00f fb5b 	bl	8015ff8 <atoi>
 8006942:	4603      	mov	r3, r0
 8006944:	b2da      	uxtb	r2, r3
 8006946:	4bac      	ldr	r3, [pc, #688]	@ (8006bf8 <Apply_Config+0x2d4>)
 8006948:	701a      	strb	r2, [r3, #0]
 800694a:	e11e      	b.n	8006b8a <Apply_Config+0x266>
    }
	else if(strcmp(cfg_var, "SAMP_FREQ") == 0)
 800694c:	49ab      	ldr	r1, [pc, #684]	@ (8006bfc <Apply_Config+0x2d8>)
 800694e:	48a8      	ldr	r0, [pc, #672]	@ (8006bf0 <Apply_Config+0x2cc>)
 8006950:	f7f9 fc3e 	bl	80001d0 <strcmp>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d132      	bne.n	80069c0 <Apply_Config+0x9c>
	{
		if((uint16_t)atoi(new_cfg_val) != 800 && (uint16_t)atoi(new_cfg_val) != 1600)
 800695a:	48a6      	ldr	r0, [pc, #664]	@ (8006bf4 <Apply_Config+0x2d0>)
 800695c:	f00f fb4c 	bl	8015ff8 <atoi>
 8006960:	4603      	mov	r3, r0
 8006962:	b29b      	uxth	r3, r3
 8006964:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8006968:	d008      	beq.n	800697c <Apply_Config+0x58>
 800696a:	48a2      	ldr	r0, [pc, #648]	@ (8006bf4 <Apply_Config+0x2d0>)
 800696c:	f00f fb44 	bl	8015ff8 <atoi>
 8006970:	4603      	mov	r3, r0
 8006972:	b29b      	uxth	r3, r3
 8006974:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006978:	f040 8131 	bne.w	8006bde <Apply_Config+0x2ba>
		{
			return;
		}
		else
		{
			if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 800697c:	4b9e      	ldr	r3, [pc, #632]	@ (8006bf8 <Apply_Config+0x2d4>)
 800697e:	885b      	ldrh	r3, [r3, #2]
 8006980:	4a9f      	ldr	r2, [pc, #636]	@ (8006c00 <Apply_Config+0x2dc>)
 8006982:	fba2 2303 	umull	r2, r3, r2, r3
 8006986:	099b      	lsrs	r3, r3, #6
 8006988:	b29b      	uxth	r3, r3
 800698a:	461a      	mov	r2, r3
 800698c:	4b9a      	ldr	r3, [pc, #616]	@ (8006bf8 <Apply_Config+0x2d4>)
 800698e:	791b      	ldrb	r3, [r3, #4]
 8006990:	fb02 f303 	mul.w	r3, r2, r3
 8006994:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006998:	fb02 f303 	mul.w	r3, r2, r3
 800699c:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 80069a0:	005b      	lsls	r3, r3, #1
 80069a2:	461c      	mov	r4, r3
 80069a4:	f000 fd08 	bl	80073b8 <psram_get_size>
 80069a8:	4603      	mov	r3, r0
 80069aa:	429c      	cmp	r4, r3
 80069ac:	f240 80ed 	bls.w	8006b8a <Apply_Config+0x266>
			{
				config.samp_freq = (uint16_t)atoi(new_cfg_val);
 80069b0:	4890      	ldr	r0, [pc, #576]	@ (8006bf4 <Apply_Config+0x2d0>)
 80069b2:	f00f fb21 	bl	8015ff8 <atoi>
 80069b6:	4603      	mov	r3, r0
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	4b8f      	ldr	r3, [pc, #572]	@ (8006bf8 <Apply_Config+0x2d4>)
 80069bc:	805a      	strh	r2, [r3, #2]
 80069be:	e0e4      	b.n	8006b8a <Apply_Config+0x266>
			}
		}
	}
	else if(strcmp(cfg_var, "BUFFER_SECS") == 0)
 80069c0:	4990      	ldr	r1, [pc, #576]	@ (8006c04 <Apply_Config+0x2e0>)
 80069c2:	488b      	ldr	r0, [pc, #556]	@ (8006bf0 <Apply_Config+0x2cc>)
 80069c4:	f7f9 fc04 	bl	80001d0 <strcmp>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d131      	bne.n	8006a32 <Apply_Config+0x10e>
	{
		if((uint8_t)atoi(new_cfg_val) < 5 || (uint8_t)atoi(new_cfg_val) > 30)
 80069ce:	4889      	ldr	r0, [pc, #548]	@ (8006bf4 <Apply_Config+0x2d0>)
 80069d0:	f00f fb12 	bl	8015ff8 <atoi>
 80069d4:	4603      	mov	r3, r0
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b04      	cmp	r3, #4
 80069da:	f240 8102 	bls.w	8006be2 <Apply_Config+0x2be>
 80069de:	4885      	ldr	r0, [pc, #532]	@ (8006bf4 <Apply_Config+0x2d0>)
 80069e0:	f00f fb0a 	bl	8015ff8 <atoi>
 80069e4:	4603      	mov	r3, r0
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b1e      	cmp	r3, #30
 80069ea:	f200 80fa 	bhi.w	8006be2 <Apply_Config+0x2be>
		{
			return;
		}
		else
		{
			if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 80069ee:	4b82      	ldr	r3, [pc, #520]	@ (8006bf8 <Apply_Config+0x2d4>)
 80069f0:	885b      	ldrh	r3, [r3, #2]
 80069f2:	4a83      	ldr	r2, [pc, #524]	@ (8006c00 <Apply_Config+0x2dc>)
 80069f4:	fba2 2303 	umull	r2, r3, r2, r3
 80069f8:	099b      	lsrs	r3, r3, #6
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	461a      	mov	r2, r3
 80069fe:	4b7e      	ldr	r3, [pc, #504]	@ (8006bf8 <Apply_Config+0x2d4>)
 8006a00:	791b      	ldrb	r3, [r3, #4]
 8006a02:	fb02 f303 	mul.w	r3, r2, r3
 8006a06:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006a0a:	fb02 f303 	mul.w	r3, r2, r3
 8006a0e:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	461c      	mov	r4, r3
 8006a16:	f000 fccf 	bl	80073b8 <psram_get_size>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	429c      	cmp	r4, r3
 8006a1e:	f240 80b4 	bls.w	8006b8a <Apply_Config+0x266>
			{
				config.buffering_secs = (uint8_t)atoi(new_cfg_val);
 8006a22:	4874      	ldr	r0, [pc, #464]	@ (8006bf4 <Apply_Config+0x2d0>)
 8006a24:	f00f fae8 	bl	8015ff8 <atoi>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	4b72      	ldr	r3, [pc, #456]	@ (8006bf8 <Apply_Config+0x2d4>)
 8006a2e:	711a      	strb	r2, [r3, #4]
 8006a30:	e0ab      	b.n	8006b8a <Apply_Config+0x266>
			}
		}
	}
	else if(strcmp(cfg_var, "CONN_TIMEOUT") == 0)
 8006a32:	4975      	ldr	r1, [pc, #468]	@ (8006c08 <Apply_Config+0x2e4>)
 8006a34:	486e      	ldr	r0, [pc, #440]	@ (8006bf0 <Apply_Config+0x2cc>)
 8006a36:	f7f9 fbcb 	bl	80001d0 <strcmp>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d107      	bne.n	8006a50 <Apply_Config+0x12c>
	{
		config.connection_timeout = (uint32_t)atoi(new_cfg_val);
 8006a40:	486c      	ldr	r0, [pc, #432]	@ (8006bf4 <Apply_Config+0x2d0>)
 8006a42:	f00f fad9 	bl	8015ff8 <atoi>
 8006a46:	4603      	mov	r3, r0
 8006a48:	461a      	mov	r2, r3
 8006a4a:	4b6b      	ldr	r3, [pc, #428]	@ (8006bf8 <Apply_Config+0x2d4>)
 8006a4c:	609a      	str	r2, [r3, #8]
 8006a4e:	e09c      	b.n	8006b8a <Apply_Config+0x266>
	}
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 8006a50:	496e      	ldr	r1, [pc, #440]	@ (8006c0c <Apply_Config+0x2e8>)
 8006a52:	4867      	ldr	r0, [pc, #412]	@ (8006bf0 <Apply_Config+0x2cc>)
 8006a54:	f7f9 fbbc 	bl	80001d0 <strcmp>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d107      	bne.n	8006a6e <Apply_Config+0x14a>
	{
		config.hammer_th = (uint16_t)atoi(new_cfg_val);
 8006a5e:	4865      	ldr	r0, [pc, #404]	@ (8006bf4 <Apply_Config+0x2d0>)
 8006a60:	f00f faca 	bl	8015ff8 <atoi>
 8006a64:	4603      	mov	r3, r0
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	4b63      	ldr	r3, [pc, #396]	@ (8006bf8 <Apply_Config+0x2d4>)
 8006a6a:	819a      	strh	r2, [r3, #12]
 8006a6c:	e08d      	b.n	8006b8a <Apply_Config+0x266>
	}
    else if(strcmp(cfg_var, "HIGH_TH") == 0) 
 8006a6e:	4968      	ldr	r1, [pc, #416]	@ (8006c10 <Apply_Config+0x2ec>)
 8006a70:	485f      	ldr	r0, [pc, #380]	@ (8006bf0 <Apply_Config+0x2cc>)
 8006a72:	f7f9 fbad 	bl	80001d0 <strcmp>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d116      	bne.n	8006aaa <Apply_Config+0x186>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 8006a7c:	4b65      	ldr	r3, [pc, #404]	@ (8006c14 <Apply_Config+0x2f0>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f2c0 8082 	blt.w	8006b8a <Apply_Config+0x266>
 8006a86:	4b63      	ldr	r3, [pc, #396]	@ (8006c14 <Apply_Config+0x2f0>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b17      	cmp	r3, #23
 8006a8c:	dc7d      	bgt.n	8006b8a <Apply_Config+0x266>
		{
            config.high_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 8006a8e:	4859      	ldr	r0, [pc, #356]	@ (8006bf4 <Apply_Config+0x2d0>)
 8006a90:	f00f fab2 	bl	8015ff8 <atoi>
 8006a94:	4602      	mov	r2, r0
 8006a96:	4b5f      	ldr	r3, [pc, #380]	@ (8006c14 <Apply_Config+0x2f0>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	b291      	uxth	r1, r2
 8006a9c:	4a56      	ldr	r2, [pc, #344]	@ (8006bf8 <Apply_Config+0x2d4>)
 8006a9e:	331c      	adds	r3, #28
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	4413      	add	r3, r2
 8006aa4:	460a      	mov	r2, r1
 8006aa6:	80da      	strh	r2, [r3, #6]
 8006aa8:	e06f      	b.n	8006b8a <Apply_Config+0x266>
        }
    }
    else if(strcmp(cfg_var, "LOW_TH") == 0) 
 8006aaa:	495b      	ldr	r1, [pc, #364]	@ (8006c18 <Apply_Config+0x2f4>)
 8006aac:	4850      	ldr	r0, [pc, #320]	@ (8006bf0 <Apply_Config+0x2cc>)
 8006aae:	f7f9 fb8f 	bl	80001d0 <strcmp>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d115      	bne.n	8006ae4 <Apply_Config+0x1c0>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 8006ab8:	4b56      	ldr	r3, [pc, #344]	@ (8006c14 <Apply_Config+0x2f0>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	db64      	blt.n	8006b8a <Apply_Config+0x266>
 8006ac0:	4b54      	ldr	r3, [pc, #336]	@ (8006c14 <Apply_Config+0x2f0>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b17      	cmp	r3, #23
 8006ac6:	dc60      	bgt.n	8006b8a <Apply_Config+0x266>
		{
            config.low_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 8006ac8:	484a      	ldr	r0, [pc, #296]	@ (8006bf4 <Apply_Config+0x2d0>)
 8006aca:	f00f fa95 	bl	8015ff8 <atoi>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	4b50      	ldr	r3, [pc, #320]	@ (8006c14 <Apply_Config+0x2f0>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	b291      	uxth	r1, r2
 8006ad6:	4a48      	ldr	r2, [pc, #288]	@ (8006bf8 <Apply_Config+0x2d4>)
 8006ad8:	3304      	adds	r3, #4
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	4413      	add	r3, r2
 8006ade:	460a      	mov	r2, r1
 8006ae0:	80da      	strh	r2, [r3, #6]
 8006ae2:	e052      	b.n	8006b8a <Apply_Config+0x266>
        }
    }
    else if(strcmp(cfg_var, "DATA_TOPIC") == 0) 
 8006ae4:	494d      	ldr	r1, [pc, #308]	@ (8006c1c <Apply_Config+0x2f8>)
 8006ae6:	4842      	ldr	r0, [pc, #264]	@ (8006bf0 <Apply_Config+0x2cc>)
 8006ae8:	f7f9 fb72 	bl	80001d0 <strcmp>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10d      	bne.n	8006b0e <Apply_Config+0x1ea>
	{
        strncpy(config.data_topic, new_cfg_val, sizeof(config.data_topic) - 1);
 8006af2:	223f      	movs	r2, #63	@ 0x3f
 8006af4:	493f      	ldr	r1, [pc, #252]	@ (8006bf4 <Apply_Config+0x2d0>)
 8006af6:	484a      	ldr	r0, [pc, #296]	@ (8006c20 <Apply_Config+0x2fc>)
 8006af8:	f00f fb8f 	bl	801621a <strncpy>
        config.data_topic[sizeof(config.data_topic) - 1] = '\0';
 8006afc:	4b3e      	ldr	r3, [pc, #248]	@ (8006bf8 <Apply_Config+0x2d4>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
		strcpy(sys.MQTT.Data_Topic, config.data_topic);
 8006b04:	4946      	ldr	r1, [pc, #280]	@ (8006c20 <Apply_Config+0x2fc>)
 8006b06:	4847      	ldr	r0, [pc, #284]	@ (8006c24 <Apply_Config+0x300>)
 8006b08:	f00f fbdc 	bl	80162c4 <strcpy>
 8006b0c:	e03d      	b.n	8006b8a <Apply_Config+0x266>
    }
    else if(strcmp(cfg_var, "CMD_TOPIC") == 0) 
 8006b0e:	4946      	ldr	r1, [pc, #280]	@ (8006c28 <Apply_Config+0x304>)
 8006b10:	4837      	ldr	r0, [pc, #220]	@ (8006bf0 <Apply_Config+0x2cc>)
 8006b12:	f7f9 fb5d 	bl	80001d0 <strcmp>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10d      	bne.n	8006b38 <Apply_Config+0x214>
	{
        strncpy(config.command_topic, new_cfg_val, sizeof(config.command_topic) - 1);
 8006b1c:	223f      	movs	r2, #63	@ 0x3f
 8006b1e:	4935      	ldr	r1, [pc, #212]	@ (8006bf4 <Apply_Config+0x2d0>)
 8006b20:	4842      	ldr	r0, [pc, #264]	@ (8006c2c <Apply_Config+0x308>)
 8006b22:	f00f fb7a 	bl	801621a <strncpy>
        config.command_topic[sizeof(config.command_topic) - 1] = '\0';
 8006b26:	4b34      	ldr	r3, [pc, #208]	@ (8006bf8 <Apply_Config+0x2d4>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
		strcpy(sys.MQTT.Command_Topic, config.command_topic);
 8006b2e:	493f      	ldr	r1, [pc, #252]	@ (8006c2c <Apply_Config+0x308>)
 8006b30:	483f      	ldr	r0, [pc, #252]	@ (8006c30 <Apply_Config+0x30c>)
 8006b32:	f00f fbc7 	bl	80162c4 <strcpy>
 8006b36:	e028      	b.n	8006b8a <Apply_Config+0x266>
    }
	else if(strcmp(cfg_var, "INFO_TOPIC") == 0)
 8006b38:	493e      	ldr	r1, [pc, #248]	@ (8006c34 <Apply_Config+0x310>)
 8006b3a:	482d      	ldr	r0, [pc, #180]	@ (8006bf0 <Apply_Config+0x2cc>)
 8006b3c:	f7f9 fb48 	bl	80001d0 <strcmp>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10d      	bne.n	8006b62 <Apply_Config+0x23e>
	{
		strncpy(config.info_topic, new_cfg_val, sizeof(config.info_topic) - 1);
 8006b46:	223f      	movs	r2, #63	@ 0x3f
 8006b48:	492a      	ldr	r1, [pc, #168]	@ (8006bf4 <Apply_Config+0x2d0>)
 8006b4a:	483b      	ldr	r0, [pc, #236]	@ (8006c38 <Apply_Config+0x314>)
 8006b4c:	f00f fb65 	bl	801621a <strncpy>
		config.info_topic[sizeof(config.info_topic) - 1] = '\0';
 8006b50:	4b29      	ldr	r3, [pc, #164]	@ (8006bf8 <Apply_Config+0x2d4>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 216d 	strb.w	r2, [r3, #365]	@ 0x16d
		strcpy(sys.MQTT.Info_Topic, config.info_topic);
 8006b58:	4937      	ldr	r1, [pc, #220]	@ (8006c38 <Apply_Config+0x314>)
 8006b5a:	4838      	ldr	r0, [pc, #224]	@ (8006c3c <Apply_Config+0x318>)
 8006b5c:	f00f fbb2 	bl	80162c4 <strcpy>
 8006b60:	e013      	b.n	8006b8a <Apply_Config+0x266>
	}
	else if(strcmp(cfg_var, "OTA_TOPIC") == 0)
 8006b62:	4937      	ldr	r1, [pc, #220]	@ (8006c40 <Apply_Config+0x31c>)
 8006b64:	4822      	ldr	r0, [pc, #136]	@ (8006bf0 <Apply_Config+0x2cc>)
 8006b66:	f7f9 fb33 	bl	80001d0 <strcmp>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d13a      	bne.n	8006be6 <Apply_Config+0x2c2>
	{
		strncpy(config.ota_topic, new_cfg_val, sizeof(config.ota_topic) - 1);
 8006b70:	223f      	movs	r2, #63	@ 0x3f
 8006b72:	4920      	ldr	r1, [pc, #128]	@ (8006bf4 <Apply_Config+0x2d0>)
 8006b74:	4833      	ldr	r0, [pc, #204]	@ (8006c44 <Apply_Config+0x320>)
 8006b76:	f00f fb50 	bl	801621a <strncpy>
		config.ota_topic[sizeof(config.ota_topic) - 1] = '\0';
 8006b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8006bf8 <Apply_Config+0x2d4>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 212d 	strb.w	r2, [r3, #301]	@ 0x12d
		strcpy(sys.MQTT.OTA_Topic, config.ota_topic);
 8006b82:	4930      	ldr	r1, [pc, #192]	@ (8006c44 <Apply_Config+0x320>)
 8006b84:	4830      	ldr	r0, [pc, #192]	@ (8006c48 <Apply_Config+0x324>)
 8006b86:	f00f fb9d 	bl	80162c4 <strcpy>
	else
	{
		return;
	}

	if (f_open(&config_file, CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) == FR_OK)
 8006b8a:	f107 0310 	add.w	r3, r7, #16
 8006b8e:	3b08      	subs	r3, #8
 8006b90:	220a      	movs	r2, #10
 8006b92:	492e      	ldr	r1, [pc, #184]	@ (8006c4c <Apply_Config+0x328>)
 8006b94:	4618      	mov	r0, r3
 8006b96:	f002 ff4f 	bl	8009a38 <f_open>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d157      	bne.n	8006c50 <Apply_Config+0x32c>
	{
		f_write(&config_file, &config, sizeof(config), &bytes_written);
 8006ba0:	f107 0310 	add.w	r3, r7, #16
 8006ba4:	3b0c      	subs	r3, #12
 8006ba6:	f107 0010 	add.w	r0, r7, #16
 8006baa:	3808      	subs	r0, #8
 8006bac:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8006bb0:	4911      	ldr	r1, [pc, #68]	@ (8006bf8 <Apply_Config+0x2d4>)
 8006bb2:	f003 fa2c 	bl	800a00e <f_write>
		f_close(&config_file);
 8006bb6:	f107 0310 	add.w	r3, r7, #16
 8006bba:	3b08      	subs	r3, #8
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f003 fc2f 	bl	800a420 <f_close>
	else
	{
		return;
	}
	
	memset(cfg_var, 0, sizeof(cfg_var));
 8006bc2:	2214      	movs	r2, #20
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	480a      	ldr	r0, [pc, #40]	@ (8006bf0 <Apply_Config+0x2cc>)
 8006bc8:	f00f fb00 	bl	80161cc <memset>
	cfg_idx = 0;
 8006bcc:	4b11      	ldr	r3, [pc, #68]	@ (8006c14 <Apply_Config+0x2f0>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 8006bd2:	220a      	movs	r2, #10
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	4807      	ldr	r0, [pc, #28]	@ (8006bf4 <Apply_Config+0x2d0>)
 8006bd8:	f00f faf8 	bl	80161cc <memset>
 8006bdc:	e039      	b.n	8006c52 <Apply_Config+0x32e>
			return;
 8006bde:	bf00      	nop
 8006be0:	e037      	b.n	8006c52 <Apply_Config+0x32e>
			return;
 8006be2:	bf00      	nop
 8006be4:	e035      	b.n	8006c52 <Apply_Config+0x32e>
		return;
 8006be6:	bf00      	nop
 8006be8:	e033      	b.n	8006c52 <Apply_Config+0x32e>
 8006bea:	bf00      	nop
 8006bec:	080177f8 	.word	0x080177f8
 8006bf0:	20005dc8 	.word	0x20005dc8
 8006bf4:	20005de0 	.word	0x20005de0
 8006bf8:	20001d6c 	.word	0x20001d6c
 8006bfc:	08017804 	.word	0x08017804
 8006c00:	51eb851f 	.word	0x51eb851f
 8006c04:	08017810 	.word	0x08017810
 8006c08:	0801781c 	.word	0x0801781c
 8006c0c:	0801782c 	.word	0x0801782c
 8006c10:	08017838 	.word	0x08017838
 8006c14:	20005ddc 	.word	0x20005ddc
 8006c18:	08017840 	.word	0x08017840
 8006c1c:	08017848 	.word	0x08017848
 8006c20:	20001dda 	.word	0x20001dda
 8006c24:	20001b10 	.word	0x20001b10
 8006c28:	08017854 	.word	0x08017854
 8006c2c:	20001e1a 	.word	0x20001e1a
 8006c30:	20001b74 	.word	0x20001b74
 8006c34:	08017860 	.word	0x08017860
 8006c38:	20001e9a 	.word	0x20001e9a
 8006c3c:	20001c3c 	.word	0x20001c3c
 8006c40:	0801786c 	.word	0x0801786c
 8006c44:	20001e5a 	.word	0x20001e5a
 8006c48:	20001bd8 	.word	0x20001bd8
 8006c4c:	08017878 	.word	0x08017878
		return;
 8006c50:	bf00      	nop
}
 8006c52:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8006c56:	3714      	adds	r7, #20
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd90      	pop	{r4, r7, pc}

08006c5c <Get_Config>:

/*-----RECUPERO E INVIO VALORE DI CONFIGURAZIONE-----*/
void Get_Config(void)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b0a2      	sub	sp, #136	@ 0x88
 8006c60:	af00      	add	r7, sp, #0
	char value_str[128] = {0};
 8006c62:	1d3b      	adds	r3, r7, #4
 8006c64:	2280      	movs	r2, #128	@ 0x80
 8006c66:	2100      	movs	r1, #0
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f00f faaf 	bl	80161cc <memset>
	const char* topic = sys.MQTT.Info_Topic;
 8006c6e:	4b70      	ldr	r3, [pc, #448]	@ (8006e30 <Get_Config+0x1d4>)
 8006c70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

	if(strcmp(cfg_var, "DEVICE_ID") == 0)
 8006c74:	496f      	ldr	r1, [pc, #444]	@ (8006e34 <Get_Config+0x1d8>)
 8006c76:	4870      	ldr	r0, [pc, #448]	@ (8006e38 <Get_Config+0x1dc>)
 8006c78:	f7f9 faaa 	bl	80001d0 <strcmp>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d108      	bne.n	8006c94 <Get_Config+0x38>
	{
		sprintf(value_str, "%u", config.device_id);
 8006c82:	4b6e      	ldr	r3, [pc, #440]	@ (8006e3c <Get_Config+0x1e0>)
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	461a      	mov	r2, r3
 8006c88:	1d3b      	adds	r3, r7, #4
 8006c8a:	496d      	ldr	r1, [pc, #436]	@ (8006e40 <Get_Config+0x1e4>)
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f00f fa3d 	bl	801610c <siprintf>
 8006c92:	e0b6      	b.n	8006e02 <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "SAMP_FREQ") == 0)
 8006c94:	496b      	ldr	r1, [pc, #428]	@ (8006e44 <Get_Config+0x1e8>)
 8006c96:	4868      	ldr	r0, [pc, #416]	@ (8006e38 <Get_Config+0x1dc>)
 8006c98:	f7f9 fa9a 	bl	80001d0 <strcmp>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d108      	bne.n	8006cb4 <Get_Config+0x58>
	{
		sprintf(value_str, "%u", config.samp_freq);
 8006ca2:	4b66      	ldr	r3, [pc, #408]	@ (8006e3c <Get_Config+0x1e0>)
 8006ca4:	885b      	ldrh	r3, [r3, #2]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	1d3b      	adds	r3, r7, #4
 8006caa:	4965      	ldr	r1, [pc, #404]	@ (8006e40 <Get_Config+0x1e4>)
 8006cac:	4618      	mov	r0, r3
 8006cae:	f00f fa2d 	bl	801610c <siprintf>
 8006cb2:	e0a6      	b.n	8006e02 <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "BUFFER_SECS") == 0)
 8006cb4:	4964      	ldr	r1, [pc, #400]	@ (8006e48 <Get_Config+0x1ec>)
 8006cb6:	4860      	ldr	r0, [pc, #384]	@ (8006e38 <Get_Config+0x1dc>)
 8006cb8:	f7f9 fa8a 	bl	80001d0 <strcmp>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d108      	bne.n	8006cd4 <Get_Config+0x78>
	{
		sprintf(value_str, "%u", config.buffering_secs);
 8006cc2:	4b5e      	ldr	r3, [pc, #376]	@ (8006e3c <Get_Config+0x1e0>)
 8006cc4:	791b      	ldrb	r3, [r3, #4]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	1d3b      	adds	r3, r7, #4
 8006cca:	495d      	ldr	r1, [pc, #372]	@ (8006e40 <Get_Config+0x1e4>)
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f00f fa1d 	bl	801610c <siprintf>
 8006cd2:	e096      	b.n	8006e02 <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "CONN_TIMEOUT") == 0)
 8006cd4:	495d      	ldr	r1, [pc, #372]	@ (8006e4c <Get_Config+0x1f0>)
 8006cd6:	4858      	ldr	r0, [pc, #352]	@ (8006e38 <Get_Config+0x1dc>)
 8006cd8:	f7f9 fa7a 	bl	80001d0 <strcmp>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d107      	bne.n	8006cf2 <Get_Config+0x96>
	{
		sprintf(value_str, "%lu", config.connection_timeout);
 8006ce2:	4b56      	ldr	r3, [pc, #344]	@ (8006e3c <Get_Config+0x1e0>)
 8006ce4:	689a      	ldr	r2, [r3, #8]
 8006ce6:	1d3b      	adds	r3, r7, #4
 8006ce8:	4959      	ldr	r1, [pc, #356]	@ (8006e50 <Get_Config+0x1f4>)
 8006cea:	4618      	mov	r0, r3
 8006cec:	f00f fa0e 	bl	801610c <siprintf>
 8006cf0:	e087      	b.n	8006e02 <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 8006cf2:	4958      	ldr	r1, [pc, #352]	@ (8006e54 <Get_Config+0x1f8>)
 8006cf4:	4850      	ldr	r0, [pc, #320]	@ (8006e38 <Get_Config+0x1dc>)
 8006cf6:	f7f9 fa6b 	bl	80001d0 <strcmp>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d108      	bne.n	8006d12 <Get_Config+0xb6>
	{
		sprintf(value_str, "%u", config.hammer_th);
 8006d00:	4b4e      	ldr	r3, [pc, #312]	@ (8006e3c <Get_Config+0x1e0>)
 8006d02:	899b      	ldrh	r3, [r3, #12]
 8006d04:	461a      	mov	r2, r3
 8006d06:	1d3b      	adds	r3, r7, #4
 8006d08:	494d      	ldr	r1, [pc, #308]	@ (8006e40 <Get_Config+0x1e4>)
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f00f f9fe 	bl	801610c <siprintf>
 8006d10:	e077      	b.n	8006e02 <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "HIGH_TH") == 0 && cfg_idx >= 0 && cfg_idx < 24)
 8006d12:	4951      	ldr	r1, [pc, #324]	@ (8006e58 <Get_Config+0x1fc>)
 8006d14:	4848      	ldr	r0, [pc, #288]	@ (8006e38 <Get_Config+0x1dc>)
 8006d16:	f7f9 fa5b 	bl	80001d0 <strcmp>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d115      	bne.n	8006d4c <Get_Config+0xf0>
 8006d20:	4b4e      	ldr	r3, [pc, #312]	@ (8006e5c <Get_Config+0x200>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	db11      	blt.n	8006d4c <Get_Config+0xf0>
 8006d28:	4b4c      	ldr	r3, [pc, #304]	@ (8006e5c <Get_Config+0x200>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b17      	cmp	r3, #23
 8006d2e:	dc0d      	bgt.n	8006d4c <Get_Config+0xf0>
	{
		sprintf(value_str, "%u", config.high_th[cfg_idx]);
 8006d30:	4b4a      	ldr	r3, [pc, #296]	@ (8006e5c <Get_Config+0x200>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a41      	ldr	r2, [pc, #260]	@ (8006e3c <Get_Config+0x1e0>)
 8006d36:	331c      	adds	r3, #28
 8006d38:	005b      	lsls	r3, r3, #1
 8006d3a:	4413      	add	r3, r2
 8006d3c:	88db      	ldrh	r3, [r3, #6]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	1d3b      	adds	r3, r7, #4
 8006d42:	493f      	ldr	r1, [pc, #252]	@ (8006e40 <Get_Config+0x1e4>)
 8006d44:	4618      	mov	r0, r3
 8006d46:	f00f f9e1 	bl	801610c <siprintf>
 8006d4a:	e05a      	b.n	8006e02 <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "LOW_TH") == 0 && cfg_idx >= 0 && cfg_idx < 24)
 8006d4c:	4944      	ldr	r1, [pc, #272]	@ (8006e60 <Get_Config+0x204>)
 8006d4e:	483a      	ldr	r0, [pc, #232]	@ (8006e38 <Get_Config+0x1dc>)
 8006d50:	f7f9 fa3e 	bl	80001d0 <strcmp>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d115      	bne.n	8006d86 <Get_Config+0x12a>
 8006d5a:	4b40      	ldr	r3, [pc, #256]	@ (8006e5c <Get_Config+0x200>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	db11      	blt.n	8006d86 <Get_Config+0x12a>
 8006d62:	4b3e      	ldr	r3, [pc, #248]	@ (8006e5c <Get_Config+0x200>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b17      	cmp	r3, #23
 8006d68:	dc0d      	bgt.n	8006d86 <Get_Config+0x12a>
	{
		sprintf(value_str, "%u", config.low_th[cfg_idx]);
 8006d6a:	4b3c      	ldr	r3, [pc, #240]	@ (8006e5c <Get_Config+0x200>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a33      	ldr	r2, [pc, #204]	@ (8006e3c <Get_Config+0x1e0>)
 8006d70:	3304      	adds	r3, #4
 8006d72:	005b      	lsls	r3, r3, #1
 8006d74:	4413      	add	r3, r2
 8006d76:	88db      	ldrh	r3, [r3, #6]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	1d3b      	adds	r3, r7, #4
 8006d7c:	4930      	ldr	r1, [pc, #192]	@ (8006e40 <Get_Config+0x1e4>)
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f00f f9c4 	bl	801610c <siprintf>
 8006d84:	e03d      	b.n	8006e02 <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "DATA_TOPIC") == 0)
 8006d86:	4937      	ldr	r1, [pc, #220]	@ (8006e64 <Get_Config+0x208>)
 8006d88:	482b      	ldr	r0, [pc, #172]	@ (8006e38 <Get_Config+0x1dc>)
 8006d8a:	f7f9 fa21 	bl	80001d0 <strcmp>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d106      	bne.n	8006da2 <Get_Config+0x146>
	{
		strncpy(value_str, config.data_topic, sizeof(value_str)-1);
 8006d94:	1d3b      	adds	r3, r7, #4
 8006d96:	227f      	movs	r2, #127	@ 0x7f
 8006d98:	4933      	ldr	r1, [pc, #204]	@ (8006e68 <Get_Config+0x20c>)
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f00f fa3d 	bl	801621a <strncpy>
 8006da0:	e02f      	b.n	8006e02 <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "CMD_TOPIC") == 0)
 8006da2:	4932      	ldr	r1, [pc, #200]	@ (8006e6c <Get_Config+0x210>)
 8006da4:	4824      	ldr	r0, [pc, #144]	@ (8006e38 <Get_Config+0x1dc>)
 8006da6:	f7f9 fa13 	bl	80001d0 <strcmp>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d106      	bne.n	8006dbe <Get_Config+0x162>
	{
		strncpy(value_str, config.command_topic, sizeof(value_str)-1);
 8006db0:	1d3b      	adds	r3, r7, #4
 8006db2:	227f      	movs	r2, #127	@ 0x7f
 8006db4:	492e      	ldr	r1, [pc, #184]	@ (8006e70 <Get_Config+0x214>)
 8006db6:	4618      	mov	r0, r3
 8006db8:	f00f fa2f 	bl	801621a <strncpy>
 8006dbc:	e021      	b.n	8006e02 <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "INFO_TOPIC") == 0)
 8006dbe:	492d      	ldr	r1, [pc, #180]	@ (8006e74 <Get_Config+0x218>)
 8006dc0:	481d      	ldr	r0, [pc, #116]	@ (8006e38 <Get_Config+0x1dc>)
 8006dc2:	f7f9 fa05 	bl	80001d0 <strcmp>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d106      	bne.n	8006dda <Get_Config+0x17e>
	{
		strncpy(value_str, config.info_topic, sizeof(value_str)-1);
 8006dcc:	1d3b      	adds	r3, r7, #4
 8006dce:	227f      	movs	r2, #127	@ 0x7f
 8006dd0:	4929      	ldr	r1, [pc, #164]	@ (8006e78 <Get_Config+0x21c>)
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f00f fa21 	bl	801621a <strncpy>
 8006dd8:	e013      	b.n	8006e02 <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "OTA_TOPIC") == 0)
 8006dda:	4928      	ldr	r1, [pc, #160]	@ (8006e7c <Get_Config+0x220>)
 8006ddc:	4816      	ldr	r0, [pc, #88]	@ (8006e38 <Get_Config+0x1dc>)
 8006dde:	f7f9 f9f7 	bl	80001d0 <strcmp>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d106      	bne.n	8006df6 <Get_Config+0x19a>
	{
		strncpy(value_str, config.ota_topic, sizeof(value_str)-1);
 8006de8:	1d3b      	adds	r3, r7, #4
 8006dea:	227f      	movs	r2, #127	@ 0x7f
 8006dec:	4924      	ldr	r1, [pc, #144]	@ (8006e80 <Get_Config+0x224>)
 8006dee:	4618      	mov	r0, r3
 8006df0:	f00f fa13 	bl	801621a <strncpy>
 8006df4:	e005      	b.n	8006e02 <Get_Config+0x1a6>
	}
	else
	{
		strncpy(value_str, "UNKNOWN", sizeof(value_str)-1);
 8006df6:	1d3b      	adds	r3, r7, #4
 8006df8:	227f      	movs	r2, #127	@ 0x7f
 8006dfa:	4922      	ldr	r1, [pc, #136]	@ (8006e84 <Get_Config+0x228>)
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f00f fa0c 	bl	801621a <strncpy>
	}

	memset(cfg_var, 0, sizeof(cfg_var));
 8006e02:	2214      	movs	r2, #20
 8006e04:	2100      	movs	r1, #0
 8006e06:	480c      	ldr	r0, [pc, #48]	@ (8006e38 <Get_Config+0x1dc>)
 8006e08:	f00f f9e0 	bl	80161cc <memset>
	cfg_idx = 0;
 8006e0c:	4b13      	ldr	r3, [pc, #76]	@ (8006e5c <Get_Config+0x200>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 8006e12:	220a      	movs	r2, #10
 8006e14:	2100      	movs	r1, #0
 8006e16:	481c      	ldr	r0, [pc, #112]	@ (8006e88 <Get_Config+0x22c>)
 8006e18:	f00f f9d8 	bl	80161cc <memset>

	SIM_publish_MQTT_Message(topic, value_str);
 8006e1c:	1d3b      	adds	r3, r7, #4
 8006e1e:	4619      	mov	r1, r3
 8006e20:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8006e24:	f7fb f8f0 	bl	8002008 <SIM_publish_MQTT_Message>
}
 8006e28:	bf00      	nop
 8006e2a:	3788      	adds	r7, #136	@ 0x88
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	20001c3c 	.word	0x20001c3c
 8006e34:	080177f8 	.word	0x080177f8
 8006e38:	20005dc8 	.word	0x20005dc8
 8006e3c:	20001d6c 	.word	0x20001d6c
 8006e40:	0801788c 	.word	0x0801788c
 8006e44:	08017804 	.word	0x08017804
 8006e48:	08017810 	.word	0x08017810
 8006e4c:	0801781c 	.word	0x0801781c
 8006e50:	08017890 	.word	0x08017890
 8006e54:	0801782c 	.word	0x0801782c
 8006e58:	08017838 	.word	0x08017838
 8006e5c:	20005ddc 	.word	0x20005ddc
 8006e60:	08017840 	.word	0x08017840
 8006e64:	08017848 	.word	0x08017848
 8006e68:	20001dda 	.word	0x20001dda
 8006e6c:	08017854 	.word	0x08017854
 8006e70:	20001e1a 	.word	0x20001e1a
 8006e74:	08017860 	.word	0x08017860
 8006e78:	20001e9a 	.word	0x20001e9a
 8006e7c:	0801786c 	.word	0x0801786c
 8006e80:	20001e5a 	.word	0x20001e5a
 8006e84:	08017894 	.word	0x08017894
 8006e88:	20005de0 	.word	0x20005de0

08006e8c <Clear_Flags>:

/*-----AZZERAMENTO FLAG-----*/
void Clear_Flags(void)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	af00      	add	r7, sp, #0
	memset(&sys, 0, sizeof(sys));
 8006e90:	f241 5228 	movw	r2, #5416	@ 0x1528
 8006e94:	2100      	movs	r1, #0
 8006e96:	480c      	ldr	r0, [pc, #48]	@ (8006ec8 <Clear_Flags+0x3c>)
 8006e98:	f00f f998 	bl	80161cc <memset>
	if(!sys.ACC_Present)
 8006e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ec8 <Clear_Flags+0x3c>)
 8006e9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ea2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d109      	bne.n	8006ec4 <Clear_Flags+0x38>
	{
		sys.ACC_Present = 1;
 8006eb0:	4b05      	ldr	r3, [pc, #20]	@ (8006ec8 <Clear_Flags+0x3c>)
 8006eb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8006ebc:	f043 0301 	orr.w	r3, r3, #1
 8006ec0:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
	}
}
 8006ec4:	bf00      	nop
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	20000840 	.word	0x20000840

08006ecc <psram_reset>:
uint32_t	psramSize = 0;
uint32_t	psramNumPages = 0;


int psram_reset()
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b08e      	sub	sp, #56	@ 0x38
 8006ed0:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = {0};
 8006ed2:	463b      	mov	r3, r7
 8006ed4:	2238      	movs	r2, #56	@ 0x38
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f00f f977 	bl	80161cc <memset>

	sCommand.Instruction = 0x66;
 8006ede:	2366      	movs	r3, #102	@ 0x66
 8006ee0:	603b      	str	r3, [r7, #0]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8006ee2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006ee6:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_NONE;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	60fb      	str	r3, [r7, #12]
	sCommand.NbData = 0;
 8006eec:	2300      	movs	r3, #0
 8006eee:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006ef0:	463b      	mov	r3, r7
 8006ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	480e      	ldr	r0, [pc, #56]	@ (8006f34 <psram_reset+0x68>)
 8006efa:	f008 f96f 	bl	800f1dc <HAL_QSPI_Command>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <psram_reset+0x3e>
	{
		return -1;
 8006f04:	f04f 33ff 	mov.w	r3, #4294967295
 8006f08:	e00f      	b.n	8006f2a <psram_reset+0x5e>
	}

	sCommand.Instruction = 0x99;
 8006f0a:	2399      	movs	r3, #153	@ 0x99
 8006f0c:	603b      	str	r3, [r7, #0]

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006f0e:	463b      	mov	r3, r7
 8006f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f14:	4619      	mov	r1, r3
 8006f16:	4807      	ldr	r0, [pc, #28]	@ (8006f34 <psram_reset+0x68>)
 8006f18:	f008 f960 	bl	800f1dc <HAL_QSPI_Command>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d002      	beq.n	8006f28 <psram_reset+0x5c>
	{
		return -1;
 8006f22:	f04f 33ff 	mov.w	r3, #4294967295
 8006f26:	e000      	b.n	8006f2a <psram_reset+0x5e>
	}

	return 0;
 8006f28:	2300      	movs	r3, #0

}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3738      	adds	r7, #56	@ 0x38
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	2000043c 	.word	0x2000043c

08006f38 <psram_qpi_mode>:
{
	return psramQSPI;
}

int psram_qpi_mode(uint8_t enable)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b090      	sub	sp, #64	@ 0x40
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	4603      	mov	r3, r0
 8006f40:	71fb      	strb	r3, [r7, #7]

	QSPI_CommandTypeDef sCommand = {0};
 8006f42:	f107 0308 	add.w	r3, r7, #8
 8006f46:	2238      	movs	r2, #56	@ 0x38
 8006f48:	2100      	movs	r1, #0
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f00f f93e 	bl	80161cc <memset>

	if(!psramInitDone)return -1;
 8006f50:	4b1c      	ldr	r3, [pc, #112]	@ (8006fc4 <psram_qpi_mode+0x8c>)
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d102      	bne.n	8006f5e <psram_qpi_mode+0x26>
 8006f58:	f04f 33ff 	mov.w	r3, #4294967295
 8006f5c:	e02d      	b.n	8006fba <psram_qpi_mode+0x82>

	if(psramQSPI==1 && enable == 0)
 8006f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8006fc8 <psram_qpi_mode+0x90>)
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d108      	bne.n	8006f78 <psram_qpi_mode+0x40>
 8006f66:	79fb      	ldrb	r3, [r7, #7]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d105      	bne.n	8006f78 <psram_qpi_mode+0x40>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_DISABLE;
 8006f6c:	23f5      	movs	r3, #245	@ 0xf5
 8006f6e:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8006f70:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006f74:	623b      	str	r3, [r7, #32]
 8006f76:	e00e      	b.n	8006f96 <psram_qpi_mode+0x5e>

	}else if(psramQSPI==0 && enable == 1)
 8006f78:	4b13      	ldr	r3, [pc, #76]	@ (8006fc8 <psram_qpi_mode+0x90>)
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d108      	bne.n	8006f92 <psram_qpi_mode+0x5a>
 8006f80:	79fb      	ldrb	r3, [r7, #7]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d105      	bne.n	8006f92 <psram_qpi_mode+0x5a>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_ENABLE;
 8006f86:	2335      	movs	r3, #53	@ 0x35
 8006f88:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8006f8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006f8e:	623b      	str	r3, [r7, #32]
 8006f90:	e001      	b.n	8006f96 <psram_qpi_mode+0x5e>

	}else{

		return 0;
 8006f92:	2300      	movs	r3, #0
 8006f94:	e011      	b.n	8006fba <psram_qpi_mode+0x82>

	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006f96:	f107 0308 	add.w	r3, r7, #8
 8006f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	480a      	ldr	r0, [pc, #40]	@ (8006fcc <psram_qpi_mode+0x94>)
 8006fa2:	f008 f91b 	bl	800f1dc <HAL_QSPI_Command>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <psram_qpi_mode+0x7a>
	{
		return -1;
 8006fac:	f04f 33ff 	mov.w	r3, #4294967295
 8006fb0:	e003      	b.n	8006fba <psram_qpi_mode+0x82>
	}

	psramQSPI = enable;
 8006fb2:	4a05      	ldr	r2, [pc, #20]	@ (8006fc8 <psram_qpi_mode+0x90>)
 8006fb4:	79fb      	ldrb	r3, [r7, #7]
 8006fb6:	7013      	strb	r3, [r2, #0]

	return 0;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3740      	adds	r7, #64	@ 0x40
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20005dea 	.word	0x20005dea
 8006fc8:	20005deb 	.word	0x20005deb
 8006fcc:	2000043c 	.word	0x2000043c

08006fd0 <psram_read_id>:

int psram_read_id(uint8_t *id_data, int id_data_size)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b090      	sub	sp, #64	@ 0x40
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef sCommand = {0};
 8006fda:	f107 0308 	add.w	r3, r7, #8
 8006fde:	2238      	movs	r2, #56	@ 0x38
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f00f f8f2 	bl	80161cc <memset>

	if(id_data == NULL || id_data_size < 8)return -2;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <psram_read_id+0x24>
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2b07      	cmp	r3, #7
 8006ff2:	dc02      	bgt.n	8006ffa <psram_read_id+0x2a>
 8006ff4:	f06f 0301 	mvn.w	r3, #1
 8006ff8:	e034      	b.n	8007064 <psram_read_id+0x94>

	sCommand.Instruction = 0x9F;
 8006ffa:	239f      	movs	r3, #159	@ 0x9f
 8006ffc:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8006ffe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007002:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8007004:	2300      	movs	r3, #0
 8007006:	60fb      	str	r3, [r7, #12]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8007008:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800700c:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 800700e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007012:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode    = QSPI_DATA_1_LINE;
 8007014:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007018:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.NbData = 8;
 800701a:	2308      	movs	r3, #8
 800701c:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800701e:	2300      	movs	r3, #0
 8007020:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8007022:	2300      	movs	r3, #0
 8007024:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007026:	2300      	movs	r3, #0
 8007028:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800702a:	2300      	movs	r3, #0
 800702c:	63fb      	str	r3, [r7, #60]	@ 0x3c

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800702e:	f107 0308 	add.w	r3, r7, #8
 8007032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007036:	4619      	mov	r1, r3
 8007038:	480c      	ldr	r0, [pc, #48]	@ (800706c <psram_read_id+0x9c>)
 800703a:	f008 f8cf 	bl	800f1dc <HAL_QSPI_Command>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d002      	beq.n	800704a <psram_read_id+0x7a>
	{
		return -1;
 8007044:	f04f 33ff 	mov.w	r3, #4294967295
 8007048:	e00c      	b.n	8007064 <psram_read_id+0x94>
	}

	if (HAL_QSPI_Receive(PSRAM_SPI, id_data, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800704a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800704e:	6879      	ldr	r1, [r7, #4]
 8007050:	4806      	ldr	r0, [pc, #24]	@ (800706c <psram_read_id+0x9c>)
 8007052:	f008 f9b8 	bl	800f3c6 <HAL_QSPI_Receive>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <psram_read_id+0x92>
	{
		return -1;
 800705c:	f04f 33ff 	mov.w	r3, #4294967295
 8007060:	e000      	b.n	8007064 <psram_read_id+0x94>
	}


	return 0;
 8007062:	2300      	movs	r3, #0

}
 8007064:	4618      	mov	r0, r3
 8007066:	3740      	adds	r7, #64	@ 0x40
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	2000043c 	.word	0x2000043c

08007070 <psram_internal_read_write>:

int psram_internal_read_write(uint8_t write, uint32_t address, uint16_t nbytes, uint8_t *pBuffer)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b092      	sub	sp, #72	@ 0x48
 8007074:	af00      	add	r7, sp, #0
 8007076:	60b9      	str	r1, [r7, #8]
 8007078:	607b      	str	r3, [r7, #4]
 800707a:	4603      	mov	r3, r0
 800707c:	73fb      	strb	r3, [r7, #15]
 800707e:	4613      	mov	r3, r2
 8007080:	81bb      	strh	r3, [r7, #12]

	QSPI_CommandTypeDef sCommand = {0};
 8007082:	f107 0310 	add.w	r3, r7, #16
 8007086:	2238      	movs	r2, #56	@ 0x38
 8007088:	2100      	movs	r1, #0
 800708a:	4618      	mov	r0, r3
 800708c:	f00f f89e 	bl	80161cc <memset>

	sCommand.Address = address;
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007094:	2300      	movs	r3, #0
 8007096:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8007098:	2300      	movs	r3, #0
 800709a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800709c:	2300      	movs	r3, #0
 800709e:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80070a0:	2300      	movs	r3, #0
 80070a2:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.NbData = nbytes;
 80070a4:	89bb      	ldrh	r3, [r7, #12]
 80070a6:	63bb      	str	r3, [r7, #56]	@ 0x38

	if(psramQSPI)
 80070a8:	4b33      	ldr	r3, [pc, #204]	@ (8007178 <psram_internal_read_write+0x108>)
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d01a      	beq.n	80070e6 <psram_internal_read_write+0x76>
	{
		//QSPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE_QUAD : PSRAM_CMD_READ_FAST_QIO;
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <psram_internal_read_write+0x4a>
 80070b6:	2338      	movs	r3, #56	@ 0x38
 80070b8:	e000      	b.n	80070bc <psram_internal_read_write+0x4c>
 80070ba:	23eb      	movs	r3, #235	@ 0xeb
 80070bc:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 80070be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80070c2:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80070c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80070c8:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 80070ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80070ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_4_LINES;
 80070d0:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80070d4:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_QPI_READ_FAST_QIO_WAIT;
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <psram_internal_read_write+0x70>
 80070dc:	2300      	movs	r3, #0
 80070de:	e000      	b.n	80070e2 <psram_internal_read_write+0x72>
 80070e0:	2306      	movs	r3, #6
 80070e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80070e4:	e019      	b.n	800711a <psram_internal_read_write+0xaa>
	}else{
		//SPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE : PSRAM_CMD_READ_FAST;
 80070e6:	7bfb      	ldrb	r3, [r7, #15]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d001      	beq.n	80070f0 <psram_internal_read_write+0x80>
 80070ec:	2302      	movs	r3, #2
 80070ee:	e000      	b.n	80070f2 <psram_internal_read_write+0x82>
 80070f0:	230b      	movs	r3, #11
 80070f2:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80070f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80070f8:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80070fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80070fe:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8007100:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007104:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_1_LINE;
 8007106:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800710a:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_READ_FAST_WAIT;
 800710c:	7bfb      	ldrb	r3, [r7, #15]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <psram_internal_read_write+0xa6>
 8007112:	2300      	movs	r3, #0
 8007114:	e000      	b.n	8007118 <psram_internal_read_write+0xa8>
 8007116:	2308      	movs	r3, #8
 8007118:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800711a:	f107 0310 	add.w	r3, r7, #16
 800711e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007122:	4619      	mov	r1, r3
 8007124:	4815      	ldr	r0, [pc, #84]	@ (800717c <psram_internal_read_write+0x10c>)
 8007126:	f008 f859 	bl	800f1dc <HAL_QSPI_Command>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d002      	beq.n	8007136 <psram_internal_read_write+0xc6>
	{
		return -1;
 8007130:	f04f 33ff 	mov.w	r3, #4294967295
 8007134:	e01b      	b.n	800716e <psram_internal_read_write+0xfe>
	}

	if(write)
 8007136:	7bfb      	ldrb	r3, [r7, #15]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00b      	beq.n	8007154 <psram_internal_read_write+0xe4>
	{
		if (HAL_QSPI_Transmit(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800713c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007140:	6879      	ldr	r1, [r7, #4]
 8007142:	480e      	ldr	r0, [pc, #56]	@ (800717c <psram_internal_read_write+0x10c>)
 8007144:	f008 f8a8 	bl	800f298 <HAL_QSPI_Transmit>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00e      	beq.n	800716c <psram_internal_read_write+0xfc>
		{
			return -1;
 800714e:	f04f 33ff 	mov.w	r3, #4294967295
 8007152:	e00c      	b.n	800716e <psram_internal_read_write+0xfe>
		}

	}else{

		if (HAL_QSPI_Receive(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007158:	6879      	ldr	r1, [r7, #4]
 800715a:	4808      	ldr	r0, [pc, #32]	@ (800717c <psram_internal_read_write+0x10c>)
 800715c:	f008 f933 	bl	800f3c6 <HAL_QSPI_Receive>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d002      	beq.n	800716c <psram_internal_read_write+0xfc>
		{
			return -1;
 8007166:	f04f 33ff 	mov.w	r3, #4294967295
 800716a:	e000      	b.n	800716e <psram_internal_read_write+0xfe>
		}

	}

	return 0;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3748      	adds	r7, #72	@ 0x48
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20005deb 	.word	0x20005deb
 800717c:	2000043c 	.word	0x2000043c

08007180 <psram_sector_read_write>:


//Funzione usata da FatFs
int psram_sector_read_write(uint8_t write, uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b088      	sub	sp, #32
 8007184:	af00      	add	r7, sp, #0
 8007186:	60b9      	str	r1, [r7, #8]
 8007188:	607a      	str	r2, [r7, #4]
 800718a:	603b      	str	r3, [r7, #0]
 800718c:	4603      	mov	r3, r0
 800718e:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8007190:	2300      	movs	r3, #0
 8007192:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * PSRAM_PAGE_SIZE;
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	029b      	lsls	r3, r3, #10
 800719c:	61bb      	str	r3, [r7, #24]

	while(nsectors > 0)
 800719e:	e018      	b.n	80071d2 <psram_sector_read_write+0x52>
	{
		result = psram_internal_read_write(write, address, PSRAM_PAGE_SIZE, wPtr);
 80071a0:	7bf8      	ldrb	r0, [r7, #15]
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80071a8:	69b9      	ldr	r1, [r7, #24]
 80071aa:	f7ff ff61 	bl	8007070 <psram_internal_read_write>
 80071ae:	6178      	str	r0, [r7, #20]
		if(result < 0)return -1;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	da02      	bge.n	80071bc <psram_sector_read_write+0x3c>
 80071b6:	f04f 33ff 	mov.w	r3, #4294967295
 80071ba:	e00e      	b.n	80071da <psram_sector_read_write+0x5a>
		address += PSRAM_PAGE_SIZE;
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071c2:	61bb      	str	r3, [r7, #24]
		wPtr += PSRAM_PAGE_SIZE;
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071ca:	61fb      	str	r3, [r7, #28]
		nsectors--;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	607b      	str	r3, [r7, #4]
	while(nsectors > 0)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1e3      	bne.n	80071a0 <psram_sector_read_write+0x20>
	}

	return 0;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3720      	adds	r7, #32
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
	...

080071e4 <psram_read_write>:



int psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b088      	sub	sp, #32
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60b9      	str	r1, [r7, #8]
 80071ec:	607a      	str	r2, [r7, #4]
 80071ee:	603b      	str	r3, [r7, #0]
 80071f0:	4603      	mov	r3, r0
 80071f2:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 80071f4:	2300      	movs	r3, #0
 80071f6:	61bb      	str	r3, [r7, #24]
	uint32_t trBytes = 0;
 80071f8:	2300      	movs	r3, #0
 80071fa:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	61fb      	str	r3, [r7, #28]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 8007200:	4b1e      	ldr	r3, [pc, #120]	@ (800727c <psram_read_write+0x98>)
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <psram_read_write+0x2a>
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d102      	bne.n	8007214 <psram_read_write+0x30>
 800720e:	f04f 33ff 	mov.w	r3, #4294967295
 8007212:	e02e      	b.n	8007272 <psram_read_write+0x8e>
	if(address + nbytes >= psramSize)return -2;
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	441a      	add	r2, r3
 800721a:	4b19      	ldr	r3, [pc, #100]	@ (8007280 <psram_read_write+0x9c>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	429a      	cmp	r2, r3
 8007220:	d323      	bcc.n	800726a <psram_read_write+0x86>
 8007222:	f06f 0301 	mvn.w	r3, #1
 8007226:	e024      	b.n	8007272 <psram_read_write+0x8e>

	while(nbytes > 0)
	{
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800722e:	bf28      	it	cs
 8007230:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8007234:	617b      	str	r3, [r7, #20]
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	b29a      	uxth	r2, r3
 800723a:	7bf8      	ldrb	r0, [r7, #15]
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	68b9      	ldr	r1, [r7, #8]
 8007240:	f7ff ff16 	bl	8007070 <psram_internal_read_write>
 8007244:	61b8      	str	r0, [r7, #24]

		if(result < 0)return -1;
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	2b00      	cmp	r3, #0
 800724a:	da02      	bge.n	8007252 <psram_read_write+0x6e>
 800724c:	f04f 33ff 	mov.w	r3, #4294967295
 8007250:	e00f      	b.n	8007272 <psram_read_write+0x8e>

		address += trBytes;
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	4413      	add	r3, r2
 8007258:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 800725a:	69fa      	ldr	r2, [r7, #28]
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	4413      	add	r3, r2
 8007260:	61fb      	str	r3, [r7, #28]
		nbytes -= trBytes;
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	607b      	str	r3, [r7, #4]
	while(nbytes > 0)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1db      	bne.n	8007228 <psram_read_write+0x44>
	}

	return 0;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3720      	adds	r7, #32
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	20005dea 	.word	0x20005dea
 8007280:	20005df4 	.word	0x20005df4

08007284 <raw_psram_read_write>:

int raw_psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b088      	sub	sp, #32
 8007288:	af00      	add	r7, sp, #0
 800728a:	60b9      	str	r1, [r7, #8]
 800728c:	607a      	str	r2, [r7, #4]
 800728e:	603b      	str	r3, [r7, #0]
 8007290:	4603      	mov	r3, r0
 8007292:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8007294:	2300      	movs	r3, #0
 8007296:	617b      	str	r3, [r7, #20]
	uint32_t trBytes = 0;
 8007298:	2300      	movs	r3, #0
 800729a:	61fb      	str	r3, [r7, #28]
	uint8_t *wPtr = pBuffer;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	61bb      	str	r3, [r7, #24]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 80072a0:	4b21      	ldr	r3, [pc, #132]	@ (8007328 <raw_psram_read_write+0xa4>)
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d002      	beq.n	80072ae <raw_psram_read_write+0x2a>
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d102      	bne.n	80072b4 <raw_psram_read_write+0x30>
 80072ae:	f04f 33ff 	mov.w	r3, #4294967295
 80072b2:	e035      	b.n	8007320 <raw_psram_read_write+0x9c>
	if(address + nbytes >= psramSize)return -2;
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	441a      	add	r2, r3
 80072ba:	4b1c      	ldr	r3, [pc, #112]	@ (800732c <raw_psram_read_write+0xa8>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d302      	bcc.n	80072c8 <raw_psram_read_write+0x44>
 80072c2:	f06f 0301 	mvn.w	r3, #1
 80072c6:	e02b      	b.n	8007320 <raw_psram_read_write+0x9c>

	trBytes = 1024 - address % 1024;
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072ce:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 80072d2:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 80072d4:	e020      	b.n	8007318 <raw_psram_read_write+0x94>
	{
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	b29a      	uxth	r2, r3
 80072da:	7bf8      	ldrb	r0, [r7, #15]
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	68b9      	ldr	r1, [r7, #8]
 80072e0:	f7ff fec6 	bl	8007070 <psram_internal_read_write>
 80072e4:	6178      	str	r0, [r7, #20]

		if(result < 0)return -1;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	da02      	bge.n	80072f2 <raw_psram_read_write+0x6e>
 80072ec:	f04f 33ff 	mov.w	r3, #4294967295
 80072f0:	e016      	b.n	8007320 <raw_psram_read_write+0x9c>

		address += trBytes;
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	4413      	add	r3, r2
 80072f8:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 80072fa:	69ba      	ldr	r2, [r7, #24]
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	4413      	add	r3, r2
 8007300:	61bb      	str	r3, [r7, #24]
		nbytes -= trBytes;
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	607b      	str	r3, [r7, #4]
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007310:	bf28      	it	cs
 8007312:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8007316:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1db      	bne.n	80072d6 <raw_psram_read_write+0x52>
	}

	return 0;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3720      	adds	r7, #32
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	20005dea 	.word	0x20005dea
 800732c:	20005df4 	.word	0x20005df4

08007330 <RAM_Write>:
{
	return psram_read_write(1, address, nbytes, pBuffer);
}

int RAM_Write(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
	return raw_psram_read_write(1, address, nbytes, pBuffer);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	68f9      	ldr	r1, [r7, #12]
 8007342:	2001      	movs	r0, #1
 8007344:	f7ff ff9e 	bl	8007284 <raw_psram_read_write>
 8007348:	4603      	mov	r3, r0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <RAM_Read>:

int RAM_Read(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	60f8      	str	r0, [r7, #12]
 800735a:	60b9      	str	r1, [r7, #8]
 800735c:	607a      	str	r2, [r7, #4]
	return psram_read_write(0, address, nbytes, pBuffer);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	68f9      	ldr	r1, [r7, #12]
 8007364:	2000      	movs	r0, #0
 8007366:	f7ff ff3d 	bl	80071e4 <psram_read_write>
 800736a:	4603      	mov	r3, r0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <psram_is_initialized>:


int psram_is_initialized()
{
 8007374:	b480      	push	{r7}
 8007376:	af00      	add	r7, sp, #0
	return psramInitDone;
 8007378:	4b03      	ldr	r3, [pc, #12]	@ (8007388 <psram_is_initialized+0x14>)
 800737a:	781b      	ldrb	r3, [r3, #0]
}
 800737c:	4618      	mov	r0, r3
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	20005dea 	.word	0x20005dea

0800738c <psram_get_sector_size>:

unsigned int psram_get_sector_size()
{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0
	return PSRAM_PAGE_SIZE;
 8007390:	f44f 6380 	mov.w	r3, #1024	@ 0x400
}
 8007394:	4618      	mov	r0, r3
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
	...

080073a0 <psram_get_sector_count>:

unsigned int psram_get_sector_count()
{
 80073a0:	b480      	push	{r7}
 80073a2:	af00      	add	r7, sp, #0
	return psramNumPages;
 80073a4:	4b03      	ldr	r3, [pc, #12]	@ (80073b4 <psram_get_sector_count+0x14>)
 80073a6:	681b      	ldr	r3, [r3, #0]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	20005df8 	.word	0x20005df8

080073b8 <psram_get_size>:

unsigned int psram_get_size()
{
 80073b8:	b480      	push	{r7}
 80073ba:	af00      	add	r7, sp, #0
	return psramSize;
 80073bc:	4b03      	ldr	r3, [pc, #12]	@ (80073cc <psram_get_size+0x14>)
 80073be:	681b      	ldr	r3, [r3, #0]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	20005df4 	.word	0x20005df4

080073d0 <psram_init>:

int psram_init()
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0

	uint8_t density = 0xFF;
 80073d6:	23ff      	movs	r3, #255	@ 0xff
 80073d8:	71fb      	strb	r3, [r7, #7]

	psramInitDone = 0;
 80073da:	4b20      	ldr	r3, [pc, #128]	@ (800745c <psram_init+0x8c>)
 80073dc:	2200      	movs	r2, #0
 80073de:	701a      	strb	r2, [r3, #0]

	if(psram_reset() < 0)return -1;
 80073e0:	f7ff fd74 	bl	8006ecc <psram_reset>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	da02      	bge.n	80073f0 <psram_init+0x20>
 80073ea:	f04f 33ff 	mov.w	r3, #4294967295
 80073ee:	e030      	b.n	8007452 <psram_init+0x82>

	memset(psramId, 0xFF, sizeof(psramId));
 80073f0:	2208      	movs	r2, #8
 80073f2:	21ff      	movs	r1, #255	@ 0xff
 80073f4:	481a      	ldr	r0, [pc, #104]	@ (8007460 <psram_init+0x90>)
 80073f6:	f00e fee9 	bl	80161cc <memset>

	if(psram_read_id(psramId, sizeof(psramId)) < 0)return -1;
 80073fa:	2108      	movs	r1, #8
 80073fc:	4818      	ldr	r0, [pc, #96]	@ (8007460 <psram_init+0x90>)
 80073fe:	f7ff fde7 	bl	8006fd0 <psram_read_id>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	da02      	bge.n	800740e <psram_init+0x3e>
 8007408:	f04f 33ff 	mov.w	r3, #4294967295
 800740c:	e021      	b.n	8007452 <psram_init+0x82>

	density = psramId[2] >> 5;
 800740e:	4b14      	ldr	r3, [pc, #80]	@ (8007460 <psram_init+0x90>)
 8007410:	789b      	ldrb	r3, [r3, #2]
 8007412:	095b      	lsrs	r3, r3, #5
 8007414:	71fb      	strb	r3, [r7, #7]

	if(psramId[0] == PSRAM_MANUFACTURER && psramId[1] == PSRAM_KGD && density <= PSRAM_DENSITY_64MB)
 8007416:	4b12      	ldr	r3, [pc, #72]	@ (8007460 <psram_init+0x90>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	2b0d      	cmp	r3, #13
 800741c:	d117      	bne.n	800744e <psram_init+0x7e>
 800741e:	4b10      	ldr	r3, [pc, #64]	@ (8007460 <psram_init+0x90>)
 8007420:	785b      	ldrb	r3, [r3, #1]
 8007422:	2b5d      	cmp	r3, #93	@ 0x5d
 8007424:	d113      	bne.n	800744e <psram_init+0x7e>
 8007426:	79fb      	ldrb	r3, [r7, #7]
 8007428:	2b03      	cmp	r3, #3
 800742a:	d810      	bhi.n	800744e <psram_init+0x7e>
	{
		psramSize = PSRAM_DENSITY_64MB_EADDR;
 800742c:	4b0d      	ldr	r3, [pc, #52]	@ (8007464 <psram_init+0x94>)
 800742e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007432:	601a      	str	r2, [r3, #0]
		psramNumPages = psramSize / PSRAM_PAGE_SIZE;
 8007434:	4b0b      	ldr	r3, [pc, #44]	@ (8007464 <psram_init+0x94>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	0a9b      	lsrs	r3, r3, #10
 800743a:	4a0b      	ldr	r2, [pc, #44]	@ (8007468 <psram_init+0x98>)
 800743c:	6013      	str	r3, [r2, #0]

		psram_qpi_mode(1);
 800743e:	2001      	movs	r0, #1
 8007440:	f7ff fd7a 	bl	8006f38 <psram_qpi_mode>

		psramInitDone = 1;
 8007444:	4b05      	ldr	r3, [pc, #20]	@ (800745c <psram_init+0x8c>)
 8007446:	2201      	movs	r2, #1
 8007448:	701a      	strb	r2, [r3, #0]
		return 0;
 800744a:	2300      	movs	r3, #0
 800744c:	e001      	b.n	8007452 <psram_init+0x82>
	}else{
		return -1;
 800744e:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 8007452:	4618      	mov	r0, r3
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	20005dea 	.word	0x20005dea
 8007460:	20005dec 	.word	0x20005dec
 8007464:	20005df4 	.word	0x20005df4
 8007468:	20005df8 	.word	0x20005df8

0800746c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007472:	4b0f      	ldr	r3, [pc, #60]	@ (80074b0 <HAL_MspInit+0x44>)
 8007474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007476:	4a0e      	ldr	r2, [pc, #56]	@ (80074b0 <HAL_MspInit+0x44>)
 8007478:	f043 0301 	orr.w	r3, r3, #1
 800747c:	6613      	str	r3, [r2, #96]	@ 0x60
 800747e:	4b0c      	ldr	r3, [pc, #48]	@ (80074b0 <HAL_MspInit+0x44>)
 8007480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	607b      	str	r3, [r7, #4]
 8007488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800748a:	4b09      	ldr	r3, [pc, #36]	@ (80074b0 <HAL_MspInit+0x44>)
 800748c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800748e:	4a08      	ldr	r2, [pc, #32]	@ (80074b0 <HAL_MspInit+0x44>)
 8007490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007494:	6593      	str	r3, [r2, #88]	@ 0x58
 8007496:	4b06      	ldr	r3, [pc, #24]	@ (80074b0 <HAL_MspInit+0x44>)
 8007498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800749a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800749e:	603b      	str	r3, [r7, #0]
 80074a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80074a2:	bf00      	nop
 80074a4:	370c      	adds	r7, #12
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	40021000 	.word	0x40021000

080074b4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b0ac      	sub	sp, #176	@ 0xb0
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80074c0:	2200      	movs	r2, #0
 80074c2:	601a      	str	r2, [r3, #0]
 80074c4:	605a      	str	r2, [r3, #4]
 80074c6:	609a      	str	r2, [r3, #8]
 80074c8:	60da      	str	r2, [r3, #12]
 80074ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80074cc:	f107 0314 	add.w	r3, r7, #20
 80074d0:	2288      	movs	r2, #136	@ 0x88
 80074d2:	2100      	movs	r1, #0
 80074d4:	4618      	mov	r0, r3
 80074d6:	f00e fe79 	bl	80161cc <memset>
  if(hadc->Instance==ADC1)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a3d      	ldr	r2, [pc, #244]	@ (80075d4 <HAL_ADC_MspInit+0x120>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d172      	bne.n	80075ca <HAL_ADC_MspInit+0x116>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80074e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80074e8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80074ea:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80074ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80074f2:	2303      	movs	r3, #3
 80074f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80074f6:	2301      	movs	r3, #1
 80074f8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80074fa:	2308      	movs	r3, #8
 80074fc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80074fe:	2307      	movs	r3, #7
 8007500:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8007502:	2302      	movs	r3, #2
 8007504:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8007506:	2302      	movs	r3, #2
 8007508:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800750a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800750e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007510:	f107 0314 	add.w	r3, r7, #20
 8007514:	4618      	mov	r0, r3
 8007516:	f009 f84d 	bl	80105b4 <HAL_RCCEx_PeriphCLKConfig>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8007520:	f7fd ff2c 	bl	800537c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8007524:	4b2c      	ldr	r3, [pc, #176]	@ (80075d8 <HAL_ADC_MspInit+0x124>)
 8007526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007528:	4a2b      	ldr	r2, [pc, #172]	@ (80075d8 <HAL_ADC_MspInit+0x124>)
 800752a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800752e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007530:	4b29      	ldr	r3, [pc, #164]	@ (80075d8 <HAL_ADC_MspInit+0x124>)
 8007532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007534:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007538:	613b      	str	r3, [r7, #16]
 800753a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800753c:	4b26      	ldr	r3, [pc, #152]	@ (80075d8 <HAL_ADC_MspInit+0x124>)
 800753e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007540:	4a25      	ldr	r2, [pc, #148]	@ (80075d8 <HAL_ADC_MspInit+0x124>)
 8007542:	f043 0301 	orr.w	r3, r3, #1
 8007546:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007548:	4b23      	ldr	r3, [pc, #140]	@ (80075d8 <HAL_ADC_MspInit+0x124>)
 800754a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	60fb      	str	r3, [r7, #12]
 8007552:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007554:	2310      	movs	r3, #16
 8007556:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800755a:	230b      	movs	r3, #11
 800755c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007560:	2300      	movs	r3, #0
 8007562:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007566:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800756a:	4619      	mov	r1, r3
 800756c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007570:	f006 fdb0 	bl	800e0d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8007574:	4b19      	ldr	r3, [pc, #100]	@ (80075dc <HAL_ADC_MspInit+0x128>)
 8007576:	4a1a      	ldr	r2, [pc, #104]	@ (80075e0 <HAL_ADC_MspInit+0x12c>)
 8007578:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800757a:	4b18      	ldr	r3, [pc, #96]	@ (80075dc <HAL_ADC_MspInit+0x128>)
 800757c:	2200      	movs	r2, #0
 800757e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007580:	4b16      	ldr	r3, [pc, #88]	@ (80075dc <HAL_ADC_MspInit+0x128>)
 8007582:	2200      	movs	r2, #0
 8007584:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007586:	4b15      	ldr	r3, [pc, #84]	@ (80075dc <HAL_ADC_MspInit+0x128>)
 8007588:	2200      	movs	r2, #0
 800758a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800758c:	4b13      	ldr	r3, [pc, #76]	@ (80075dc <HAL_ADC_MspInit+0x128>)
 800758e:	2280      	movs	r2, #128	@ 0x80
 8007590:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007592:	4b12      	ldr	r3, [pc, #72]	@ (80075dc <HAL_ADC_MspInit+0x128>)
 8007594:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007598:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800759a:	4b10      	ldr	r3, [pc, #64]	@ (80075dc <HAL_ADC_MspInit+0x128>)
 800759c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80075a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80075a2:	4b0e      	ldr	r3, [pc, #56]	@ (80075dc <HAL_ADC_MspInit+0x128>)
 80075a4:	2220      	movs	r2, #32
 80075a6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80075a8:	4b0c      	ldr	r3, [pc, #48]	@ (80075dc <HAL_ADC_MspInit+0x128>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80075ae:	480b      	ldr	r0, [pc, #44]	@ (80075dc <HAL_ADC_MspInit+0x128>)
 80075b0:	f005 fc8a 	bl	800cec8 <HAL_DMA_Init>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 80075ba:	f7fd fedf 	bl	800537c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a06      	ldr	r2, [pc, #24]	@ (80075dc <HAL_ADC_MspInit+0x128>)
 80075c2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80075c4:	4a05      	ldr	r2, [pc, #20]	@ (80075dc <HAL_ADC_MspInit+0x128>)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80075ca:	bf00      	nop
 80075cc:	37b0      	adds	r7, #176	@ 0xb0
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	50040000 	.word	0x50040000
 80075d8:	40021000 	.word	0x40021000
 80075dc:	2000037c 	.word	0x2000037c
 80075e0:	40020008 	.word	0x40020008

080075e4 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a0a      	ldr	r2, [pc, #40]	@ (800761c <HAL_CRC_MspInit+0x38>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d10b      	bne.n	800760e <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80075f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007620 <HAL_CRC_MspInit+0x3c>)
 80075f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075fa:	4a09      	ldr	r2, [pc, #36]	@ (8007620 <HAL_CRC_MspInit+0x3c>)
 80075fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007600:	6493      	str	r3, [r2, #72]	@ 0x48
 8007602:	4b07      	ldr	r3, [pc, #28]	@ (8007620 <HAL_CRC_MspInit+0x3c>)
 8007604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007606:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800760a:	60fb      	str	r3, [r7, #12]
 800760c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 800760e:	bf00      	nop
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	40023000 	.word	0x40023000
 8007620:	40021000 	.word	0x40021000

08007624 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b0ac      	sub	sp, #176	@ 0xb0
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800762c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007630:	2200      	movs	r2, #0
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	605a      	str	r2, [r3, #4]
 8007636:	609a      	str	r2, [r3, #8]
 8007638:	60da      	str	r2, [r3, #12]
 800763a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800763c:	f107 0314 	add.w	r3, r7, #20
 8007640:	2288      	movs	r2, #136	@ 0x88
 8007642:	2100      	movs	r1, #0
 8007644:	4618      	mov	r0, r3
 8007646:	f00e fdc1 	bl	80161cc <memset>
  if(hi2c->Instance==I2C3)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a21      	ldr	r2, [pc, #132]	@ (80076d4 <HAL_I2C_MspInit+0xb0>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d13b      	bne.n	80076cc <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8007654:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007658:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800765a:	2300      	movs	r3, #0
 800765c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800765e:	f107 0314 	add.w	r3, r7, #20
 8007662:	4618      	mov	r0, r3
 8007664:	f008 ffa6 	bl	80105b4 <HAL_RCCEx_PeriphCLKConfig>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d001      	beq.n	8007672 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800766e:	f7fd fe85 	bl	800537c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007672:	4b19      	ldr	r3, [pc, #100]	@ (80076d8 <HAL_I2C_MspInit+0xb4>)
 8007674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007676:	4a18      	ldr	r2, [pc, #96]	@ (80076d8 <HAL_I2C_MspInit+0xb4>)
 8007678:	f043 0304 	orr.w	r3, r3, #4
 800767c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800767e:	4b16      	ldr	r3, [pc, #88]	@ (80076d8 <HAL_I2C_MspInit+0xb4>)
 8007680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007682:	f003 0304 	and.w	r3, r3, #4
 8007686:	613b      	str	r3, [r7, #16]
 8007688:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800768a:	2303      	movs	r3, #3
 800768c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007690:	2312      	movs	r3, #18
 8007692:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007696:	2300      	movs	r3, #0
 8007698:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800769c:	2303      	movs	r3, #3
 800769e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80076a2:	2304      	movs	r3, #4
 80076a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80076a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80076ac:	4619      	mov	r1, r3
 80076ae:	480b      	ldr	r0, [pc, #44]	@ (80076dc <HAL_I2C_MspInit+0xb8>)
 80076b0:	f006 fd10 	bl	800e0d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80076b4:	4b08      	ldr	r3, [pc, #32]	@ (80076d8 <HAL_I2C_MspInit+0xb4>)
 80076b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076b8:	4a07      	ldr	r2, [pc, #28]	@ (80076d8 <HAL_I2C_MspInit+0xb4>)
 80076ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80076be:	6593      	str	r3, [r2, #88]	@ 0x58
 80076c0:	4b05      	ldr	r3, [pc, #20]	@ (80076d8 <HAL_I2C_MspInit+0xb4>)
 80076c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076c8:	60fb      	str	r3, [r7, #12]
 80076ca:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 80076cc:	bf00      	nop
 80076ce:	37b0      	adds	r7, #176	@ 0xb0
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	40005c00 	.word	0x40005c00
 80076d8:	40021000 	.word	0x40021000
 80076dc:	48000800 	.word	0x48000800

080076e0 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b08a      	sub	sp, #40	@ 0x28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076e8:	f107 0314 	add.w	r3, r7, #20
 80076ec:	2200      	movs	r2, #0
 80076ee:	601a      	str	r2, [r3, #0]
 80076f0:	605a      	str	r2, [r3, #4]
 80076f2:	609a      	str	r2, [r3, #8]
 80076f4:	60da      	str	r2, [r3, #12]
 80076f6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a26      	ldr	r2, [pc, #152]	@ (8007798 <HAL_QSPI_MspInit+0xb8>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d145      	bne.n	800778e <HAL_QSPI_MspInit+0xae>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8007702:	4b26      	ldr	r3, [pc, #152]	@ (800779c <HAL_QSPI_MspInit+0xbc>)
 8007704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007706:	4a25      	ldr	r2, [pc, #148]	@ (800779c <HAL_QSPI_MspInit+0xbc>)
 8007708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800770c:	6513      	str	r3, [r2, #80]	@ 0x50
 800770e:	4b23      	ldr	r3, [pc, #140]	@ (800779c <HAL_QSPI_MspInit+0xbc>)
 8007710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007716:	613b      	str	r3, [r7, #16]
 8007718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800771a:	4b20      	ldr	r3, [pc, #128]	@ (800779c <HAL_QSPI_MspInit+0xbc>)
 800771c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800771e:	4a1f      	ldr	r2, [pc, #124]	@ (800779c <HAL_QSPI_MspInit+0xbc>)
 8007720:	f043 0301 	orr.w	r3, r3, #1
 8007724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007726:	4b1d      	ldr	r3, [pc, #116]	@ (800779c <HAL_QSPI_MspInit+0xbc>)
 8007728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	60fb      	str	r3, [r7, #12]
 8007730:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007732:	4b1a      	ldr	r3, [pc, #104]	@ (800779c <HAL_QSPI_MspInit+0xbc>)
 8007734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007736:	4a19      	ldr	r2, [pc, #100]	@ (800779c <HAL_QSPI_MspInit+0xbc>)
 8007738:	f043 0302 	orr.w	r3, r3, #2
 800773c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800773e:	4b17      	ldr	r3, [pc, #92]	@ (800779c <HAL_QSPI_MspInit+0xbc>)
 8007740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	60bb      	str	r3, [r7, #8]
 8007748:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800774a:	23c0      	movs	r3, #192	@ 0xc0
 800774c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800774e:	2302      	movs	r3, #2
 8007750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007752:	2300      	movs	r3, #0
 8007754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007756:	2303      	movs	r3, #3
 8007758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800775a:	230a      	movs	r3, #10
 800775c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800775e:	f107 0314 	add.w	r3, r7, #20
 8007762:	4619      	mov	r1, r3
 8007764:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007768:	f006 fcb4 	bl	800e0d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 800776c:	f640 4303 	movw	r3, #3075	@ 0xc03
 8007770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007772:	2302      	movs	r3, #2
 8007774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007776:	2300      	movs	r3, #0
 8007778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800777a:	2303      	movs	r3, #3
 800777c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800777e:	230a      	movs	r3, #10
 8007780:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007782:	f107 0314 	add.w	r3, r7, #20
 8007786:	4619      	mov	r1, r3
 8007788:	4805      	ldr	r0, [pc, #20]	@ (80077a0 <HAL_QSPI_MspInit+0xc0>)
 800778a:	f006 fca3 	bl	800e0d4 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800778e:	bf00      	nop
 8007790:	3728      	adds	r7, #40	@ 0x28
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	a0001000 	.word	0xa0001000
 800779c:	40021000 	.word	0x40021000
 80077a0:	48000400 	.word	0x48000400

080077a4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b0a4      	sub	sp, #144	@ 0x90
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80077ac:	f107 0308 	add.w	r3, r7, #8
 80077b0:	2288      	movs	r2, #136	@ 0x88
 80077b2:	2100      	movs	r1, #0
 80077b4:	4618      	mov	r0, r3
 80077b6:	f00e fd09 	bl	80161cc <memset>
  if(hrtc->Instance==RTC)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a14      	ldr	r2, [pc, #80]	@ (8007810 <HAL_RTC_MspInit+0x6c>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d120      	bne.n	8007806 <HAL_RTC_MspInit+0x62>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80077c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80077c8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80077ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80077ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80077d2:	f107 0308 	add.w	r3, r7, #8
 80077d6:	4618      	mov	r0, r3
 80077d8:	f008 feec 	bl	80105b4 <HAL_RCCEx_PeriphCLKConfig>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80077e2:	f7fd fdcb 	bl	800537c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80077e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007814 <HAL_RTC_MspInit+0x70>)
 80077e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ec:	4a09      	ldr	r2, [pc, #36]	@ (8007814 <HAL_RTC_MspInit+0x70>)
 80077ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80077f6:	2200      	movs	r2, #0
 80077f8:	2100      	movs	r1, #0
 80077fa:	2029      	movs	r0, #41	@ 0x29
 80077fc:	f005 f8f1 	bl	800c9e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8007800:	2029      	movs	r0, #41	@ 0x29
 8007802:	f005 f90a 	bl	800ca1a <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8007806:	bf00      	nop
 8007808:	3790      	adds	r7, #144	@ 0x90
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	40002800 	.word	0x40002800
 8007814:	40021000 	.word	0x40021000

08007818 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b08c      	sub	sp, #48	@ 0x30
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007820:	f107 031c 	add.w	r3, r7, #28
 8007824:	2200      	movs	r2, #0
 8007826:	601a      	str	r2, [r3, #0]
 8007828:	605a      	str	r2, [r3, #4]
 800782a:	609a      	str	r2, [r3, #8]
 800782c:	60da      	str	r2, [r3, #12]
 800782e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a2f      	ldr	r2, [pc, #188]	@ (80078f4 <HAL_SPI_MspInit+0xdc>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d129      	bne.n	800788e <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800783a:	4b2f      	ldr	r3, [pc, #188]	@ (80078f8 <HAL_SPI_MspInit+0xe0>)
 800783c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800783e:	4a2e      	ldr	r2, [pc, #184]	@ (80078f8 <HAL_SPI_MspInit+0xe0>)
 8007840:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007844:	6593      	str	r3, [r2, #88]	@ 0x58
 8007846:	4b2c      	ldr	r3, [pc, #176]	@ (80078f8 <HAL_SPI_MspInit+0xe0>)
 8007848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800784a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800784e:	61bb      	str	r3, [r7, #24]
 8007850:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007852:	4b29      	ldr	r3, [pc, #164]	@ (80078f8 <HAL_SPI_MspInit+0xe0>)
 8007854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007856:	4a28      	ldr	r2, [pc, #160]	@ (80078f8 <HAL_SPI_MspInit+0xe0>)
 8007858:	f043 0302 	orr.w	r3, r3, #2
 800785c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800785e:	4b26      	ldr	r3, [pc, #152]	@ (80078f8 <HAL_SPI_MspInit+0xe0>)
 8007860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007862:	f003 0302 	and.w	r3, r3, #2
 8007866:	617b      	str	r3, [r7, #20]
 8007868:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800786a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800786e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007870:	2302      	movs	r3, #2
 8007872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007874:	2300      	movs	r3, #0
 8007876:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007878:	2303      	movs	r3, #3
 800787a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800787c:	2305      	movs	r3, #5
 800787e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007880:	f107 031c 	add.w	r3, r7, #28
 8007884:	4619      	mov	r1, r3
 8007886:	481d      	ldr	r0, [pc, #116]	@ (80078fc <HAL_SPI_MspInit+0xe4>)
 8007888:	f006 fc24 	bl	800e0d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 800788c:	e02d      	b.n	80078ea <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a1b      	ldr	r2, [pc, #108]	@ (8007900 <HAL_SPI_MspInit+0xe8>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d128      	bne.n	80078ea <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007898:	4b17      	ldr	r3, [pc, #92]	@ (80078f8 <HAL_SPI_MspInit+0xe0>)
 800789a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800789c:	4a16      	ldr	r2, [pc, #88]	@ (80078f8 <HAL_SPI_MspInit+0xe0>)
 800789e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80078a4:	4b14      	ldr	r3, [pc, #80]	@ (80078f8 <HAL_SPI_MspInit+0xe0>)
 80078a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80078ac:	613b      	str	r3, [r7, #16]
 80078ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80078b0:	4b11      	ldr	r3, [pc, #68]	@ (80078f8 <HAL_SPI_MspInit+0xe0>)
 80078b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078b4:	4a10      	ldr	r2, [pc, #64]	@ (80078f8 <HAL_SPI_MspInit+0xe0>)
 80078b6:	f043 0304 	orr.w	r3, r3, #4
 80078ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80078bc:	4b0e      	ldr	r3, [pc, #56]	@ (80078f8 <HAL_SPI_MspInit+0xe0>)
 80078be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078c0:	f003 0304 	and.w	r3, r3, #4
 80078c4:	60fb      	str	r3, [r7, #12]
 80078c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80078c8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80078cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078ce:	2302      	movs	r3, #2
 80078d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078d6:	2303      	movs	r3, #3
 80078d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80078da:	2306      	movs	r3, #6
 80078dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078de:	f107 031c 	add.w	r3, r7, #28
 80078e2:	4619      	mov	r1, r3
 80078e4:	4807      	ldr	r0, [pc, #28]	@ (8007904 <HAL_SPI_MspInit+0xec>)
 80078e6:	f006 fbf5 	bl	800e0d4 <HAL_GPIO_Init>
}
 80078ea:	bf00      	nop
 80078ec:	3730      	adds	r7, #48	@ 0x30
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	40003800 	.word	0x40003800
 80078f8:	40021000 	.word	0x40021000
 80078fc:	48000400 	.word	0x48000400
 8007900:	40003c00 	.word	0x40003c00
 8007904:	48000800 	.word	0x48000800

08007908 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a0a      	ldr	r2, [pc, #40]	@ (8007940 <HAL_TIM_OC_MspInit+0x38>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d10b      	bne.n	8007932 <HAL_TIM_OC_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800791a:	4b0a      	ldr	r3, [pc, #40]	@ (8007944 <HAL_TIM_OC_MspInit+0x3c>)
 800791c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800791e:	4a09      	ldr	r2, [pc, #36]	@ (8007944 <HAL_TIM_OC_MspInit+0x3c>)
 8007920:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007924:	6613      	str	r3, [r2, #96]	@ 0x60
 8007926:	4b07      	ldr	r3, [pc, #28]	@ (8007944 <HAL_TIM_OC_MspInit+0x3c>)
 8007928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800792a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8007932:	bf00      	nop
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	40012c00 	.word	0x40012c00
 8007944:	40021000 	.word	0x40021000

08007948 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b08a      	sub	sp, #40	@ 0x28
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007950:	f107 0314 	add.w	r3, r7, #20
 8007954:	2200      	movs	r2, #0
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	605a      	str	r2, [r3, #4]
 800795a:	609a      	str	r2, [r3, #8]
 800795c:	60da      	str	r2, [r3, #12]
 800795e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007968:	d128      	bne.n	80079bc <HAL_TIM_IC_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800796a:	4b16      	ldr	r3, [pc, #88]	@ (80079c4 <HAL_TIM_IC_MspInit+0x7c>)
 800796c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800796e:	4a15      	ldr	r2, [pc, #84]	@ (80079c4 <HAL_TIM_IC_MspInit+0x7c>)
 8007970:	f043 0301 	orr.w	r3, r3, #1
 8007974:	6593      	str	r3, [r2, #88]	@ 0x58
 8007976:	4b13      	ldr	r3, [pc, #76]	@ (80079c4 <HAL_TIM_IC_MspInit+0x7c>)
 8007978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	613b      	str	r3, [r7, #16]
 8007980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007982:	4b10      	ldr	r3, [pc, #64]	@ (80079c4 <HAL_TIM_IC_MspInit+0x7c>)
 8007984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007986:	4a0f      	ldr	r2, [pc, #60]	@ (80079c4 <HAL_TIM_IC_MspInit+0x7c>)
 8007988:	f043 0301 	orr.w	r3, r3, #1
 800798c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800798e:	4b0d      	ldr	r3, [pc, #52]	@ (80079c4 <HAL_TIM_IC_MspInit+0x7c>)
 8007990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	60fb      	str	r3, [r7, #12]
 8007998:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800799a:	2320      	movs	r3, #32
 800799c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800799e:	2302      	movs	r3, #2
 80079a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80079a2:	2301      	movs	r3, #1
 80079a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079a6:	2300      	movs	r3, #0
 80079a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80079aa:	2301      	movs	r3, #1
 80079ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079ae:	f107 0314 	add.w	r3, r7, #20
 80079b2:	4619      	mov	r1, r3
 80079b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80079b8:	f006 fb8c 	bl	800e0d4 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80079bc:	bf00      	nop
 80079be:	3728      	adds	r7, #40	@ 0x28
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	40021000 	.word	0x40021000

080079c8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a13      	ldr	r2, [pc, #76]	@ (8007a24 <HAL_TIM_Base_MspInit+0x5c>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d10c      	bne.n	80079f4 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80079da:	4b13      	ldr	r3, [pc, #76]	@ (8007a28 <HAL_TIM_Base_MspInit+0x60>)
 80079dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079de:	4a12      	ldr	r2, [pc, #72]	@ (8007a28 <HAL_TIM_Base_MspInit+0x60>)
 80079e0:	f043 0302 	orr.w	r3, r3, #2
 80079e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80079e6:	4b10      	ldr	r3, [pc, #64]	@ (8007a28 <HAL_TIM_Base_MspInit+0x60>)
 80079e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079ea:	f003 0302 	and.w	r3, r3, #2
 80079ee:	60fb      	str	r3, [r7, #12]
 80079f0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80079f2:	e010      	b.n	8007a16 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a0c      	ldr	r2, [pc, #48]	@ (8007a2c <HAL_TIM_Base_MspInit+0x64>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d10b      	bne.n	8007a16 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80079fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007a28 <HAL_TIM_Base_MspInit+0x60>)
 8007a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a02:	4a09      	ldr	r2, [pc, #36]	@ (8007a28 <HAL_TIM_Base_MspInit+0x60>)
 8007a04:	f043 0304 	orr.w	r3, r3, #4
 8007a08:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a0a:	4b07      	ldr	r3, [pc, #28]	@ (8007a28 <HAL_TIM_Base_MspInit+0x60>)
 8007a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a0e:	f003 0304 	and.w	r3, r3, #4
 8007a12:	60bb      	str	r3, [r7, #8]
 8007a14:	68bb      	ldr	r3, [r7, #8]
}
 8007a16:	bf00      	nop
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	40000400 	.word	0x40000400
 8007a28:	40021000 	.word	0x40021000
 8007a2c:	40000800 	.word	0x40000800

08007a30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b08a      	sub	sp, #40	@ 0x28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a38:	f107 0314 	add.w	r3, r7, #20
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	601a      	str	r2, [r3, #0]
 8007a40:	605a      	str	r2, [r3, #4]
 8007a42:	609a      	str	r2, [r3, #8]
 8007a44:	60da      	str	r2, [r3, #12]
 8007a46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a23      	ldr	r2, [pc, #140]	@ (8007adc <HAL_TIM_MspPostInit+0xac>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d11e      	bne.n	8007a90 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a52:	4b23      	ldr	r3, [pc, #140]	@ (8007ae0 <HAL_TIM_MspPostInit+0xb0>)
 8007a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a56:	4a22      	ldr	r2, [pc, #136]	@ (8007ae0 <HAL_TIM_MspPostInit+0xb0>)
 8007a58:	f043 0301 	orr.w	r3, r3, #1
 8007a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a5e:	4b20      	ldr	r3, [pc, #128]	@ (8007ae0 <HAL_TIM_MspPostInit+0xb0>)
 8007a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	613b      	str	r3, [r7, #16]
 8007a68:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8007a6a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8007a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a70:	2302      	movs	r3, #2
 8007a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a74:	2300      	movs	r3, #0
 8007a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a80:	f107 0314 	add.w	r3, r7, #20
 8007a84:	4619      	mov	r1, r3
 8007a86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007a8a:	f006 fb23 	bl	800e0d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8007a8e:	e021      	b.n	8007ad4 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a13      	ldr	r2, [pc, #76]	@ (8007ae4 <HAL_TIM_MspPostInit+0xb4>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d11c      	bne.n	8007ad4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a9a:	4b11      	ldr	r3, [pc, #68]	@ (8007ae0 <HAL_TIM_MspPostInit+0xb0>)
 8007a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a9e:	4a10      	ldr	r2, [pc, #64]	@ (8007ae0 <HAL_TIM_MspPostInit+0xb0>)
 8007aa0:	f043 0304 	orr.w	r3, r3, #4
 8007aa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8007ae0 <HAL_TIM_MspPostInit+0xb0>)
 8007aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007aaa:	f003 0304 	and.w	r3, r3, #4
 8007aae:	60fb      	str	r3, [r7, #12]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007ab2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ab8:	2302      	movs	r3, #2
 8007aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007abc:	2300      	movs	r3, #0
 8007abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007ac8:	f107 0314 	add.w	r3, r7, #20
 8007acc:	4619      	mov	r1, r3
 8007ace:	4806      	ldr	r0, [pc, #24]	@ (8007ae8 <HAL_TIM_MspPostInit+0xb8>)
 8007ad0:	f006 fb00 	bl	800e0d4 <HAL_GPIO_Init>
}
 8007ad4:	bf00      	nop
 8007ad6:	3728      	adds	r7, #40	@ 0x28
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	40012c00 	.word	0x40012c00
 8007ae0:	40021000 	.word	0x40021000
 8007ae4:	40000400 	.word	0x40000400
 8007ae8:	48000800 	.word	0x48000800

08007aec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b0ae      	sub	sp, #184	@ 0xb8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007af4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8007af8:	2200      	movs	r2, #0
 8007afa:	601a      	str	r2, [r3, #0]
 8007afc:	605a      	str	r2, [r3, #4]
 8007afe:	609a      	str	r2, [r3, #8]
 8007b00:	60da      	str	r2, [r3, #12]
 8007b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007b04:	f107 031c 	add.w	r3, r7, #28
 8007b08:	2288      	movs	r2, #136	@ 0x88
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f00e fb5d 	bl	80161cc <memset>
  if(huart->Instance==UART4)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a6b      	ldr	r2, [pc, #428]	@ (8007cc4 <HAL_UART_MspInit+0x1d8>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d13c      	bne.n	8007b96 <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8007b1c:	2308      	movs	r3, #8
 8007b1e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8007b20:	2300      	movs	r3, #0
 8007b22:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007b24:	f107 031c 	add.w	r3, r7, #28
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f008 fd43 	bl	80105b4 <HAL_RCCEx_PeriphCLKConfig>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d001      	beq.n	8007b38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8007b34:	f7fd fc22 	bl	800537c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007b38:	4b63      	ldr	r3, [pc, #396]	@ (8007cc8 <HAL_UART_MspInit+0x1dc>)
 8007b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b3c:	4a62      	ldr	r2, [pc, #392]	@ (8007cc8 <HAL_UART_MspInit+0x1dc>)
 8007b3e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b42:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b44:	4b60      	ldr	r3, [pc, #384]	@ (8007cc8 <HAL_UART_MspInit+0x1dc>)
 8007b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b4c:	61bb      	str	r3, [r7, #24]
 8007b4e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b50:	4b5d      	ldr	r3, [pc, #372]	@ (8007cc8 <HAL_UART_MspInit+0x1dc>)
 8007b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b54:	4a5c      	ldr	r2, [pc, #368]	@ (8007cc8 <HAL_UART_MspInit+0x1dc>)
 8007b56:	f043 0301 	orr.w	r3, r3, #1
 8007b5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007b5c:	4b5a      	ldr	r3, [pc, #360]	@ (8007cc8 <HAL_UART_MspInit+0x1dc>)
 8007b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b60:	f003 0301 	and.w	r3, r3, #1
 8007b64:	617b      	str	r3, [r7, #20]
 8007b66:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007b6e:	2312      	movs	r3, #18
 8007b70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007b74:	2301      	movs	r3, #1
 8007b76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007b80:	2308      	movs	r3, #8
 8007b82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b86:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007b90:	f006 faa0 	bl	800e0d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8007b94:	e092      	b.n	8007cbc <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART1)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a4c      	ldr	r2, [pc, #304]	@ (8007ccc <HAL_UART_MspInit+0x1e0>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	f040 808d 	bne.w	8007cbc <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007baa:	f107 031c 	add.w	r3, r7, #28
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f008 fd00 	bl	80105b4 <HAL_RCCEx_PeriphCLKConfig>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d001      	beq.n	8007bbe <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8007bba:	f7fd fbdf 	bl	800537c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8007bbe:	4b42      	ldr	r3, [pc, #264]	@ (8007cc8 <HAL_UART_MspInit+0x1dc>)
 8007bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bc2:	4a41      	ldr	r2, [pc, #260]	@ (8007cc8 <HAL_UART_MspInit+0x1dc>)
 8007bc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007bc8:	6613      	str	r3, [r2, #96]	@ 0x60
 8007bca:	4b3f      	ldr	r3, [pc, #252]	@ (8007cc8 <HAL_UART_MspInit+0x1dc>)
 8007bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bd2:	613b      	str	r3, [r7, #16]
 8007bd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007bd6:	4b3c      	ldr	r3, [pc, #240]	@ (8007cc8 <HAL_UART_MspInit+0x1dc>)
 8007bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bda:	4a3b      	ldr	r2, [pc, #236]	@ (8007cc8 <HAL_UART_MspInit+0x1dc>)
 8007bdc:	f043 0302 	orr.w	r3, r3, #2
 8007be0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007be2:	4b39      	ldr	r3, [pc, #228]	@ (8007cc8 <HAL_UART_MspInit+0x1dc>)
 8007be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007be6:	f003 0302 	and.w	r3, r3, #2
 8007bea:	60fb      	str	r3, [r7, #12]
 8007bec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8007bee:	23d8      	movs	r3, #216	@ 0xd8
 8007bf0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c00:	2303      	movs	r3, #3
 8007c02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007c06:	2307      	movs	r3, #7
 8007c08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c0c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8007c10:	4619      	mov	r1, r3
 8007c12:	482f      	ldr	r0, [pc, #188]	@ (8007cd0 <HAL_UART_MspInit+0x1e4>)
 8007c14:	f006 fa5e 	bl	800e0d4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8007c18:	4b2e      	ldr	r3, [pc, #184]	@ (8007cd4 <HAL_UART_MspInit+0x1e8>)
 8007c1a:	4a2f      	ldr	r2, [pc, #188]	@ (8007cd8 <HAL_UART_MspInit+0x1ec>)
 8007c1c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8007c1e:	4b2d      	ldr	r3, [pc, #180]	@ (8007cd4 <HAL_UART_MspInit+0x1e8>)
 8007c20:	2202      	movs	r2, #2
 8007c22:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007c24:	4b2b      	ldr	r3, [pc, #172]	@ (8007cd4 <HAL_UART_MspInit+0x1e8>)
 8007c26:	2200      	movs	r2, #0
 8007c28:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8007cd4 <HAL_UART_MspInit+0x1e8>)
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007c30:	4b28      	ldr	r3, [pc, #160]	@ (8007cd4 <HAL_UART_MspInit+0x1e8>)
 8007c32:	2280      	movs	r2, #128	@ 0x80
 8007c34:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007c36:	4b27      	ldr	r3, [pc, #156]	@ (8007cd4 <HAL_UART_MspInit+0x1e8>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007c3c:	4b25      	ldr	r3, [pc, #148]	@ (8007cd4 <HAL_UART_MspInit+0x1e8>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8007c42:	4b24      	ldr	r3, [pc, #144]	@ (8007cd4 <HAL_UART_MspInit+0x1e8>)
 8007c44:	2200      	movs	r2, #0
 8007c46:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007c48:	4b22      	ldr	r3, [pc, #136]	@ (8007cd4 <HAL_UART_MspInit+0x1e8>)
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007c4e:	4821      	ldr	r0, [pc, #132]	@ (8007cd4 <HAL_UART_MspInit+0x1e8>)
 8007c50:	f005 f93a 	bl	800cec8 <HAL_DMA_Init>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <HAL_UART_MspInit+0x172>
      Error_Handler();
 8007c5a:	f7fd fb8f 	bl	800537c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a1c      	ldr	r2, [pc, #112]	@ (8007cd4 <HAL_UART_MspInit+0x1e8>)
 8007c62:	675a      	str	r2, [r3, #116]	@ 0x74
 8007c64:	4a1b      	ldr	r2, [pc, #108]	@ (8007cd4 <HAL_UART_MspInit+0x1e8>)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8007cdc <HAL_UART_MspInit+0x1f0>)
 8007c6c:	4a1c      	ldr	r2, [pc, #112]	@ (8007ce0 <HAL_UART_MspInit+0x1f4>)
 8007c6e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8007c70:	4b1a      	ldr	r3, [pc, #104]	@ (8007cdc <HAL_UART_MspInit+0x1f0>)
 8007c72:	2202      	movs	r2, #2
 8007c74:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007c76:	4b19      	ldr	r3, [pc, #100]	@ (8007cdc <HAL_UART_MspInit+0x1f0>)
 8007c78:	2210      	movs	r2, #16
 8007c7a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c7c:	4b17      	ldr	r3, [pc, #92]	@ (8007cdc <HAL_UART_MspInit+0x1f0>)
 8007c7e:	2200      	movs	r2, #0
 8007c80:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007c82:	4b16      	ldr	r3, [pc, #88]	@ (8007cdc <HAL_UART_MspInit+0x1f0>)
 8007c84:	2280      	movs	r2, #128	@ 0x80
 8007c86:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007c88:	4b14      	ldr	r3, [pc, #80]	@ (8007cdc <HAL_UART_MspInit+0x1f0>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007c8e:	4b13      	ldr	r3, [pc, #76]	@ (8007cdc <HAL_UART_MspInit+0x1f0>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8007c94:	4b11      	ldr	r3, [pc, #68]	@ (8007cdc <HAL_UART_MspInit+0x1f0>)
 8007c96:	2200      	movs	r2, #0
 8007c98:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007c9a:	4b10      	ldr	r3, [pc, #64]	@ (8007cdc <HAL_UART_MspInit+0x1f0>)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007ca0:	480e      	ldr	r0, [pc, #56]	@ (8007cdc <HAL_UART_MspInit+0x1f0>)
 8007ca2:	f005 f911 	bl	800cec8 <HAL_DMA_Init>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8007cac:	f7fd fb66 	bl	800537c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8007cdc <HAL_UART_MspInit+0x1f0>)
 8007cb4:	671a      	str	r2, [r3, #112]	@ 0x70
 8007cb6:	4a09      	ldr	r2, [pc, #36]	@ (8007cdc <HAL_UART_MspInit+0x1f0>)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8007cbc:	bf00      	nop
 8007cbe:	37b8      	adds	r7, #184	@ 0xb8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	40004c00 	.word	0x40004c00
 8007cc8:	40021000 	.word	0x40021000
 8007ccc:	40013800 	.word	0x40013800
 8007cd0:	48000400 	.word	0x48000400
 8007cd4:	200007ac 	.word	0x200007ac
 8007cd8:	40020058 	.word	0x40020058
 8007cdc:	200007f4 	.word	0x200007f4
 8007ce0:	40020044 	.word	0x40020044

08007ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007ce8:	bf00      	nop
 8007cea:	e7fd      	b.n	8007ce8 <NMI_Handler+0x4>

08007cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007cec:	b480      	push	{r7}
 8007cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007cf0:	bf00      	nop
 8007cf2:	e7fd      	b.n	8007cf0 <HardFault_Handler+0x4>

08007cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007cf8:	bf00      	nop
 8007cfa:	e7fd      	b.n	8007cf8 <MemManage_Handler+0x4>

08007cfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007d00:	bf00      	nop
 8007d02:	e7fd      	b.n	8007d00 <BusFault_Handler+0x4>

08007d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007d04:	b480      	push	{r7}
 8007d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007d08:	bf00      	nop
 8007d0a:	e7fd      	b.n	8007d08 <UsageFault_Handler+0x4>

08007d0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007d10:	bf00      	nop
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007d1e:	bf00      	nop
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007d2c:	bf00      	nop
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007d3a:	f003 f983 	bl	800b044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007d3e:	bf00      	nop
 8007d40:	bd80      	pop	{r7, pc}
	...

08007d44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007d48:	4802      	ldr	r0, [pc, #8]	@ (8007d54 <DMA1_Channel1_IRQHandler+0x10>)
 8007d4a:	f005 fa13 	bl	800d174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007d4e:	bf00      	nop
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	2000037c 	.word	0x2000037c

08007d58 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8007d5c:	4802      	ldr	r0, [pc, #8]	@ (8007d68 <DMA1_Channel4_IRQHandler+0x10>)
 8007d5e:	f005 fa09 	bl	800d174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8007d62:	bf00      	nop
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	200007f4 	.word	0x200007f4

08007d6c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007d70:	4802      	ldr	r0, [pc, #8]	@ (8007d7c <DMA1_Channel5_IRQHandler+0x10>)
 8007d72:	f005 f9ff 	bl	800d174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8007d76:	bf00      	nop
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	200007ac 	.word	0x200007ac

08007d80 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8007d84:	4802      	ldr	r0, [pc, #8]	@ (8007d90 <RTC_Alarm_IRQHandler+0x10>)
 8007d86:	f009 fc15 	bl	80115b4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8007d8a:	bf00      	nop
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	20000480 	.word	0x20000480

08007d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007d9c:	4a14      	ldr	r2, [pc, #80]	@ (8007df0 <_sbrk+0x5c>)
 8007d9e:	4b15      	ldr	r3, [pc, #84]	@ (8007df4 <_sbrk+0x60>)
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007da8:	4b13      	ldr	r3, [pc, #76]	@ (8007df8 <_sbrk+0x64>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d102      	bne.n	8007db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007db0:	4b11      	ldr	r3, [pc, #68]	@ (8007df8 <_sbrk+0x64>)
 8007db2:	4a12      	ldr	r2, [pc, #72]	@ (8007dfc <_sbrk+0x68>)
 8007db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007db6:	4b10      	ldr	r3, [pc, #64]	@ (8007df8 <_sbrk+0x64>)
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d207      	bcs.n	8007dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007dc4:	f00e fa52 	bl	801626c <__errno>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	220c      	movs	r2, #12
 8007dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007dce:	f04f 33ff 	mov.w	r3, #4294967295
 8007dd2:	e009      	b.n	8007de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007dd4:	4b08      	ldr	r3, [pc, #32]	@ (8007df8 <_sbrk+0x64>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007dda:	4b07      	ldr	r3, [pc, #28]	@ (8007df8 <_sbrk+0x64>)
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4413      	add	r3, r2
 8007de2:	4a05      	ldr	r2, [pc, #20]	@ (8007df8 <_sbrk+0x64>)
 8007de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007de6:	68fb      	ldr	r3, [r7, #12]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3718      	adds	r7, #24
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	20018000 	.word	0x20018000
 8007df4:	00000400 	.word	0x00000400
 8007df8:	20005dfc 	.word	0x20005dfc
 8007dfc:	20005f58 	.word	0x20005f58

08007e00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8007e00:	b480      	push	{r7}
 8007e02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8007e04:	4b06      	ldr	r3, [pc, #24]	@ (8007e20 <SystemInit+0x20>)
 8007e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e0a:	4a05      	ldr	r2, [pc, #20]	@ (8007e20 <SystemInit+0x20>)
 8007e0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007e10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8007e14:	bf00      	nop
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	e000ed00 	.word	0xe000ed00

08007e24 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;

	switch (pdrv) {
 8007e2e:	79fb      	ldrb	r3, [r7, #7]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d002      	beq.n	8007e3a <disk_status+0x16>
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d00c      	beq.n	8007e52 <disk_status+0x2e>
 8007e38:	e017      	b.n	8007e6a <disk_status+0x46>
	case DEV_RAM :

		if(!psram_is_initialized())
 8007e3a:	f7ff fa9b 	bl	8007374 <psram_is_initialized>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d102      	bne.n	8007e4a <disk_status+0x26>
		{
			stat = STA_NOINIT;
 8007e44:	2301      	movs	r3, #1
 8007e46:	73fb      	strb	r3, [r7, #15]
 8007e48:	e001      	b.n	8007e4e <disk_status+0x2a>
		}else{
			stat = 0;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
 8007e50:	e00c      	b.n	8007e6c <disk_status+0x48>

	case DEV_MMC :

		if(!extflash_is_initialized())
 8007e52:	f7fb f961 	bl	8003118 <extflash_is_initialized>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d102      	bne.n	8007e62 <disk_status+0x3e>
		{
			stat = STA_NOINIT;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	73fb      	strb	r3, [r7, #15]
 8007e60:	e001      	b.n	8007e66 <disk_status+0x42>
		}else{
			stat = 0;
 8007e62:	2300      	movs	r3, #0
 8007e64:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007e66:	7bfb      	ldrb	r3, [r7, #15]
 8007e68:	e000      	b.n	8007e6c <disk_status+0x48>

	}
	return STA_NOINIT;
 8007e6a:	2301      	movs	r3, #1
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;
	switch (pdrv) {
 8007e7e:	79fb      	ldrb	r3, [r7, #7]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d002      	beq.n	8007e8a <disk_initialize+0x16>
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d00c      	beq.n	8007ea2 <disk_initialize+0x2e>
 8007e88:	e017      	b.n	8007eba <disk_initialize+0x46>
	case DEV_RAM :

		if(psram_init() < 0)
 8007e8a:	f7ff faa1 	bl	80073d0 <psram_init>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	da02      	bge.n	8007e9a <disk_initialize+0x26>
		{
			stat = STA_NODISK;
 8007e94:	2302      	movs	r3, #2
 8007e96:	73fb      	strb	r3, [r7, #15]
 8007e98:	e001      	b.n	8007e9e <disk_initialize+0x2a>
		}else{
			stat = 0;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ea0:	e00c      	b.n	8007ebc <disk_initialize+0x48>

	case DEV_MMC :

		if(extflash_init() < 0)
 8007ea2:	f7fb f945 	bl	8003130 <extflash_init>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	da02      	bge.n	8007eb2 <disk_initialize+0x3e>
		{
			stat = STA_NODISK;
 8007eac:	2302      	movs	r3, #2
 8007eae:	73fb      	strb	r3, [r7, #15]
 8007eb0:	e001      	b.n	8007eb6 <disk_initialize+0x42>
		}else{
			stat = 0;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
 8007eb8:	e000      	b.n	8007ebc <disk_initialize+0x48>

	}
	return STA_NOINIT;
 8007eba:	2301      	movs	r3, #1
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60b9      	str	r1, [r7, #8]
 8007ecc:	607a      	str	r2, [r7, #4]
 8007ece:	603b      	str	r3, [r7, #0]
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	73fb      	strb	r3, [r7, #15]
	DRESULT res;
	int result;

	switch (pdrv) {
 8007ed4:	7bfb      	ldrb	r3, [r7, #15]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d002      	beq.n	8007ee0 <disk_read+0x1c>
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d010      	beq.n	8007f00 <disk_read+0x3c>
 8007ede:	e01e      	b.n	8007f1e <disk_read+0x5a>
	case DEV_RAM :

		if(psram_sector_read_write(0, sector, count, buff) < 0)
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	6879      	ldr	r1, [r7, #4]
 8007ee6:	2000      	movs	r0, #0
 8007ee8:	f7ff f94a 	bl	8007180 <psram_sector_read_write>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	da02      	bge.n	8007ef8 <disk_read+0x34>
		{
			res = RES_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	75fb      	strb	r3, [r7, #23]
 8007ef6:	e001      	b.n	8007efc <disk_read+0x38>
		}else{

			res = 0;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007efc:	7dfb      	ldrb	r3, [r7, #23]
 8007efe:	e00f      	b.n	8007f20 <disk_read+0x5c>

	case DEV_MMC :

		if(extflash_sector_read(sector, count, buff) < 0)
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7fa ffeb 	bl	8002ee0 <extflash_sector_read>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	da02      	bge.n	8007f16 <disk_read+0x52>
		{
			res = RES_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	75fb      	strb	r3, [r7, #23]
 8007f14:	e001      	b.n	8007f1a <disk_read+0x56>
		}else{

			res = 0;
 8007f16:	2300      	movs	r3, #0
 8007f18:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007f1a:	7dfb      	ldrb	r3, [r7, #23]
 8007f1c:	e000      	b.n	8007f20 <disk_read+0x5c>

	}

	return RES_PARERR;
 8007f1e:	2304      	movs	r3, #4
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3718      	adds	r7, #24
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	607a      	str	r2, [r7, #4]
 8007f32:	603b      	str	r3, [r7, #0]
 8007f34:	4603      	mov	r3, r0
 8007f36:	73fb      	strb	r3, [r7, #15]
	DRESULT res = RES_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	75fb      	strb	r3, [r7, #23]

	switch (pdrv) {
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d002      	beq.n	8007f48 <disk_write+0x20>
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d010      	beq.n	8007f68 <disk_write+0x40>
 8007f46:	e01e      	b.n	8007f86 <disk_write+0x5e>
	case DEV_RAM :

		if(psram_sector_read_write(1, sector, count, (const uint8_t *)buff) < 0)
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	6879      	ldr	r1, [r7, #4]
 8007f4e:	2001      	movs	r0, #1
 8007f50:	f7ff f916 	bl	8007180 <psram_sector_read_write>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	da02      	bge.n	8007f60 <disk_write+0x38>
		{
			res = RES_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	75fb      	strb	r3, [r7, #23]
 8007f5e:	e001      	b.n	8007f64 <disk_write+0x3c>
		}else{

			res = 0;
 8007f60:	2300      	movs	r3, #0
 8007f62:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007f64:	7dfb      	ldrb	r3, [r7, #23]
 8007f66:	e00f      	b.n	8007f88 <disk_write+0x60>

	case DEV_MMC :

		if(extflash_sector_write(sector, count, buff) < 0)
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7fb f84c 	bl	800300a <extflash_sector_write>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	da02      	bge.n	8007f7e <disk_write+0x56>
		{
			res = RES_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	75fb      	strb	r3, [r7, #23]
 8007f7c:	e001      	b.n	8007f82 <disk_write+0x5a>
		}else{

			res = 0;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007f82:	7dfb      	ldrb	r3, [r7, #23]
 8007f84:	e000      	b.n	8007f88 <disk_write+0x60>

	}

	return RES_PARERR;
 8007f86:	2304      	movs	r3, #4
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3718      	adds	r7, #24
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	4603      	mov	r3, r0
 8007f98:	603a      	str	r2, [r7, #0]
 8007f9a:	71fb      	strb	r3, [r7, #7]
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_PARERR;
 8007fa0:	2304      	movs	r3, #4
 8007fa2:	73fb      	strb	r3, [r7, #15]

	switch (pdrv) {
 8007fa4:	79fb      	ldrb	r3, [r7, #7]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d002      	beq.n	8007fb0 <disk_ioctl+0x20>
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d036      	beq.n	800801c <disk_ioctl+0x8c>
 8007fae:	e06b      	b.n	8008088 <disk_ioctl+0xf8>
	case DEV_RAM :

		if(!psram_is_initialized())return RES_NOTRDY;
 8007fb0:	f7ff f9e0 	bl	8007374 <psram_is_initialized>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d101      	bne.n	8007fbe <disk_ioctl+0x2e>
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e065      	b.n	800808a <disk_ioctl+0xfa>

		switch(cmd)
 8007fbe:	79bb      	ldrb	r3, [r7, #6]
 8007fc0:	2b04      	cmp	r3, #4
 8007fc2:	d826      	bhi.n	8008012 <disk_ioctl+0x82>
 8007fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8007fcc <disk_ioctl+0x3c>)
 8007fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fca:	bf00      	nop
 8007fcc:	0800800d 	.word	0x0800800d
 8007fd0:	08007fe1 	.word	0x08007fe1
 8007fd4:	08007ff1 	.word	0x08007ff1
 8007fd8:	08008001 	.word	0x08008001
 8007fdc:	0800800d 	.word	0x0800800d
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = psram_get_sector_count();
 8007fe0:	f7ff f9de 	bl	80073a0 <psram_get_sector_count>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	601a      	str	r2, [r3, #0]
				res = 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	73fb      	strb	r3, [r7, #15]
				break;
 8007fee:	e013      	b.n	8008018 <disk_ioctl+0x88>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = psram_get_sector_size();
 8007ff0:	f7ff f9cc 	bl	800738c <psram_get_sector_size>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	601a      	str	r2, [r3, #0]
				res = 0;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	73fb      	strb	r3, [r7, #15]
				break;
 8007ffe:	e00b      	b.n	8008018 <disk_ioctl+0x88>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	2201      	movs	r2, #1
 8008004:	601a      	str	r2, [r3, #0]
				res = 0;
 8008006:	2300      	movs	r3, #0
 8008008:	73fb      	strb	r3, [r7, #15]
				break;
 800800a:	e005      	b.n	8008018 <disk_ioctl+0x88>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 800800c:	2300      	movs	r3, #0
 800800e:	73fb      	strb	r3, [r7, #15]
				break;
 8008010:	e002      	b.n	8008018 <disk_ioctl+0x88>

			default:
				res = RES_PARERR;
 8008012:	2304      	movs	r3, #4
 8008014:	73fb      	strb	r3, [r7, #15]
				break;
 8008016:	bf00      	nop
		}

		return res;
 8008018:	7bfb      	ldrb	r3, [r7, #15]
 800801a:	e036      	b.n	800808a <disk_ioctl+0xfa>

	case DEV_MMC :

		if(!extflash_is_initialized())return RES_NOTRDY;
 800801c:	f7fb f87c 	bl	8003118 <extflash_is_initialized>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d101      	bne.n	800802a <disk_ioctl+0x9a>
 8008026:	2303      	movs	r3, #3
 8008028:	e02f      	b.n	800808a <disk_ioctl+0xfa>

		switch(cmd)
 800802a:	79bb      	ldrb	r3, [r7, #6]
 800802c:	2b04      	cmp	r3, #4
 800802e:	d826      	bhi.n	800807e <disk_ioctl+0xee>
 8008030:	a201      	add	r2, pc, #4	@ (adr r2, 8008038 <disk_ioctl+0xa8>)
 8008032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008036:	bf00      	nop
 8008038:	08008079 	.word	0x08008079
 800803c:	0800804d 	.word	0x0800804d
 8008040:	0800805d 	.word	0x0800805d
 8008044:	0800806d 	.word	0x0800806d
 8008048:	08008079 	.word	0x08008079
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = extflash_get_sector_count();
 800804c:	f7fb f858 	bl	8003100 <extflash_get_sector_count>
 8008050:	4602      	mov	r2, r0
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	601a      	str	r2, [r3, #0]
				res = 0;
 8008056:	2300      	movs	r3, #0
 8008058:	73fb      	strb	r3, [r7, #15]
				break;
 800805a:	e013      	b.n	8008084 <disk_ioctl+0xf4>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = extflash_get_sector_size();
 800805c:	f7fb f847 	bl	80030ee <extflash_get_sector_size>
 8008060:	4602      	mov	r2, r0
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	601a      	str	r2, [r3, #0]
				res = 0;
 8008066:	2300      	movs	r3, #0
 8008068:	73fb      	strb	r3, [r7, #15]
				break;
 800806a:	e00b      	b.n	8008084 <disk_ioctl+0xf4>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	2201      	movs	r2, #1
 8008070:	601a      	str	r2, [r3, #0]
				res = 0;
 8008072:	2300      	movs	r3, #0
 8008074:	73fb      	strb	r3, [r7, #15]
				break;
 8008076:	e005      	b.n	8008084 <disk_ioctl+0xf4>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 8008078:	2300      	movs	r3, #0
 800807a:	73fb      	strb	r3, [r7, #15]
				break;
 800807c:	e002      	b.n	8008084 <disk_ioctl+0xf4>

			default:
				res = RES_PARERR;
 800807e:	2304      	movs	r3, #4
 8008080:	73fb      	strb	r3, [r7, #15]
				break;
 8008082:	bf00      	nop
		}

		return res;
 8008084:	7bfb      	ldrb	r3, [r7, #15]
 8008086:	e000      	b.n	800808a <disk_ioctl+0xfa>

	}

	return RES_PARERR;
 8008088:	2304      	movs	r3, #4
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop

08008094 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	3301      	adds	r3, #1
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80080a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80080a8:	021b      	lsls	r3, r3, #8
 80080aa:	b21a      	sxth	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	b21b      	sxth	r3, r3
 80080b2:	4313      	orrs	r3, r2
 80080b4:	b21b      	sxth	r3, r3
 80080b6:	81fb      	strh	r3, [r7, #14]
	return rv;
 80080b8:	89fb      	ldrh	r3, [r7, #14]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3714      	adds	r7, #20
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80080c6:	b480      	push	{r7}
 80080c8:	b085      	sub	sp, #20
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	3303      	adds	r3, #3
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	021b      	lsls	r3, r3, #8
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	3202      	adds	r2, #2
 80080de:	7812      	ldrb	r2, [r2, #0]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	021b      	lsls	r3, r3, #8
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	3201      	adds	r2, #1
 80080ec:	7812      	ldrb	r2, [r2, #0]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	021b      	lsls	r3, r3, #8
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	7812      	ldrb	r2, [r2, #0]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	60fb      	str	r3, [r7, #12]
	return rv;
 80080fe:	68fb      	ldr	r3, [r7, #12]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	1c5a      	adds	r2, r3, #1
 800811c:	607a      	str	r2, [r7, #4]
 800811e:	887a      	ldrh	r2, [r7, #2]
 8008120:	b2d2      	uxtb	r2, r2
 8008122:	701a      	strb	r2, [r3, #0]
 8008124:	887b      	ldrh	r3, [r7, #2]
 8008126:	0a1b      	lsrs	r3, r3, #8
 8008128:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	1c5a      	adds	r2, r3, #1
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	887a      	ldrh	r2, [r7, #2]
 8008132:	b2d2      	uxtb	r2, r2
 8008134:	701a      	strb	r2, [r3, #0]
}
 8008136:	bf00      	nop
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008142:	b480      	push	{r7}
 8008144:	b083      	sub	sp, #12
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	1c5a      	adds	r2, r3, #1
 8008150:	607a      	str	r2, [r7, #4]
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	b2d2      	uxtb	r2, r2
 8008156:	701a      	strb	r2, [r3, #0]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	0a1b      	lsrs	r3, r3, #8
 800815c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	1c5a      	adds	r2, r3, #1
 8008162:	607a      	str	r2, [r7, #4]
 8008164:	683a      	ldr	r2, [r7, #0]
 8008166:	b2d2      	uxtb	r2, r2
 8008168:	701a      	strb	r2, [r3, #0]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	0a1b      	lsrs	r3, r3, #8
 800816e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	1c5a      	adds	r2, r3, #1
 8008174:	607a      	str	r2, [r7, #4]
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	b2d2      	uxtb	r2, r2
 800817a:	701a      	strb	r2, [r3, #0]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	0a1b      	lsrs	r3, r3, #8
 8008180:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	1c5a      	adds	r2, r3, #1
 8008186:	607a      	str	r2, [r7, #4]
 8008188:	683a      	ldr	r2, [r7, #0]
 800818a:	b2d2      	uxtb	r2, r2
 800818c:	701a      	strb	r2, [r3, #0]
}
 800818e:	bf00      	nop
 8008190:	370c      	adds	r7, #12
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 800819a:	b480      	push	{r7}
 800819c:	b083      	sub	sp, #12
 800819e:	af00      	add	r7, sp, #0
 80081a0:	4603      	mov	r3, r0
 80081a2:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 80081a4:	79fb      	ldrb	r3, [r7, #7]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <dbc_1st+0x14>
 80081aa:	2300      	movs	r3, #0
 80081ac:	e000      	b.n	80081b0 <dbc_1st+0x16>
#endif
	return 0;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	4603      	mov	r3, r0
 80081c4:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 80081c6:	79fb      	ldrb	r3, [r7, #7]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d001      	beq.n	80081d0 <dbc_2nd+0x14>
 80081cc:	2300      	movs	r3, #0
 80081ce:	e000      	b.n	80081d2 <dbc_2nd+0x16>
#endif
	return 0;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr

080081de <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b084      	sub	sp, #16
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	791b      	ldrb	r3, [r3, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d02c      	beq.n	800824c <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	7858      	ldrb	r0, [r3, #1]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008200:	2301      	movs	r3, #1
 8008202:	f7ff fe91 	bl	8007f28 <disk_write>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d11d      	bne.n	8008248 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800821a:	1ad2      	subs	r2, r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	69db      	ldr	r3, [r3, #28]
 8008220:	429a      	cmp	r2, r3
 8008222:	d213      	bcs.n	800824c <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	78db      	ldrb	r3, [r3, #3]
 8008228:	2b02      	cmp	r3, #2
 800822a:	d10f      	bne.n	800824c <sync_window+0x6e>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	7858      	ldrb	r0, [r3, #1]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	69db      	ldr	r3, [r3, #28]
 800823e:	441a      	add	r2, r3
 8008240:	2301      	movs	r3, #1
 8008242:	f7ff fe71 	bl	8007f28 <disk_write>
 8008246:	e001      	b.n	800824c <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8008248:	2301      	movs	r3, #1
 800824a:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 800824c:	7bfb      	ldrb	r3, [r7, #15]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008260:	2300      	movs	r3, #0
 8008262:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	429a      	cmp	r2, r3
 800826c:	d01b      	beq.n	80082a6 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f7ff ffb5 	bl	80081de <sync_window>
 8008274:	4603      	mov	r3, r0
 8008276:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008278:	7bfb      	ldrb	r3, [r7, #15]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d113      	bne.n	80082a6 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	7858      	ldrb	r0, [r3, #1]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008288:	2301      	movs	r3, #1
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	f7ff fe1a 	bl	8007ec4 <disk_read>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d004      	beq.n	80082a0 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8008296:	f04f 33ff 	mov.w	r3, #4294967295
 800829a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800829c:	2301      	movs	r3, #1
 800829e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7ff ff90 	bl	80081de <sync_window>
 80082be:	4603      	mov	r3, r0
 80082c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d158      	bne.n	800837a <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	2b03      	cmp	r3, #3
 80082ce:	d148      	bne.n	8008362 <sync_fs+0xb2>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	795b      	ldrb	r3, [r3, #5]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d144      	bne.n	8008362 <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	3334      	adds	r3, #52	@ 0x34
 80082dc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80082e0:	2100      	movs	r1, #0
 80082e2:	4618      	mov	r0, r3
 80082e4:	f00d ff72 	bl	80161cc <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	3334      	adds	r3, #52	@ 0x34
 80082ec:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80082f0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7ff ff09 	bl	800810c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	3334      	adds	r3, #52	@ 0x34
 80082fe:	4921      	ldr	r1, [pc, #132]	@ (8008384 <sync_fs+0xd4>)
 8008300:	4618      	mov	r0, r3
 8008302:	f7ff ff1e 	bl	8008142 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	3334      	adds	r3, #52	@ 0x34
 800830a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800830e:	491e      	ldr	r1, [pc, #120]	@ (8008388 <sync_fs+0xd8>)
 8008310:	4618      	mov	r0, r3
 8008312:	f7ff ff16 	bl	8008142 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	3334      	adds	r3, #52	@ 0x34
 800831a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	4619      	mov	r1, r3
 8008324:	4610      	mov	r0, r2
 8008326:	f7ff ff0c 	bl	8008142 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	3334      	adds	r3, #52	@ 0x34
 800832e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	4619      	mov	r1, r3
 8008338:	4610      	mov	r0, r2
 800833a:	f7ff ff02 	bl	8008142 <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	1c5a      	adds	r2, r3, #1
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	7858      	ldrb	r0, [r3, #1]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008356:	2301      	movs	r3, #1
 8008358:	f7ff fde6 	bl	8007f28 <disk_write>
			fs->fsi_flag = 0;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	785b      	ldrb	r3, [r3, #1]
 8008366:	2200      	movs	r2, #0
 8008368:	2100      	movs	r1, #0
 800836a:	4618      	mov	r0, r3
 800836c:	f7ff fe10 	bl	8007f90 <disk_ioctl>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <sync_fs+0xca>
 8008376:	2301      	movs	r3, #1
 8008378:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800837a:	7bfb      	ldrb	r3, [r7, #15]
}
 800837c:	4618      	mov	r0, r3
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	41615252 	.word	0x41615252
 8008388:	61417272 	.word	0x61417272

0800838c <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	3b02      	subs	r3, #2
 800839a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	699b      	ldr	r3, [r3, #24]
 80083a0:	3b02      	subs	r3, #2
 80083a2:	683a      	ldr	r2, [r7, #0]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d301      	bcc.n	80083ac <clst2sect+0x20>
 80083a8:	2300      	movs	r3, #0
 80083aa:	e008      	b.n	80083be <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	895b      	ldrh	r3, [r3, #10]
 80083b4:	4619      	mov	r1, r3
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	fb01 f303 	mul.w	r3, r1, r3
 80083bc:	4413      	add	r3, r2
}
 80083be:	4618      	mov	r0, r3
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b086      	sub	sp, #24
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
 80083d2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d904      	bls.n	80083ea <get_fat+0x20>
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	699b      	ldr	r3, [r3, #24]
 80083e4:	683a      	ldr	r2, [r7, #0]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d302      	bcc.n	80083f0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80083ea:	2301      	movs	r3, #1
 80083ec:	617b      	str	r3, [r7, #20]
 80083ee:	e0ba      	b.n	8008566 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80083f0:	f04f 33ff 	mov.w	r3, #4294967295
 80083f4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	2b03      	cmp	r3, #3
 80083fc:	f000 8082 	beq.w	8008504 <get_fat+0x13a>
 8008400:	2b03      	cmp	r3, #3
 8008402:	f300 80a6 	bgt.w	8008552 <get_fat+0x188>
 8008406:	2b01      	cmp	r3, #1
 8008408:	d002      	beq.n	8008410 <get_fat+0x46>
 800840a:	2b02      	cmp	r3, #2
 800840c:	d055      	beq.n	80084ba <get_fat+0xf0>
 800840e:	e0a0      	b.n	8008552 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	60fb      	str	r3, [r7, #12]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	085b      	lsrs	r3, r3, #1
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	4413      	add	r3, r2
 800841c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	899b      	ldrh	r3, [r3, #12]
 8008426:	4619      	mov	r1, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	fbb3 f3f1 	udiv	r3, r3, r1
 800842e:	4413      	add	r3, r2
 8008430:	4619      	mov	r1, r3
 8008432:	6938      	ldr	r0, [r7, #16]
 8008434:	f7ff ff0f 	bl	8008256 <move_window>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	f040 808c 	bne.w	8008558 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	1c5a      	adds	r2, r3, #1
 8008444:	60fa      	str	r2, [r7, #12]
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	8992      	ldrh	r2, [r2, #12]
 800844a:	fbb3 f1f2 	udiv	r1, r3, r2
 800844e:	fb01 f202 	mul.w	r2, r1, r2
 8008452:	1a9b      	subs	r3, r3, r2
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	4413      	add	r3, r2
 8008458:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800845c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	899b      	ldrh	r3, [r3, #12]
 8008466:	4619      	mov	r1, r3
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	fbb3 f3f1 	udiv	r3, r3, r1
 800846e:	4413      	add	r3, r2
 8008470:	4619      	mov	r1, r3
 8008472:	6938      	ldr	r0, [r7, #16]
 8008474:	f7ff feef 	bl	8008256 <move_window>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d16e      	bne.n	800855c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	899b      	ldrh	r3, [r3, #12]
 8008482:	461a      	mov	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	fbb3 f1f2 	udiv	r1, r3, r2
 800848a:	fb01 f202 	mul.w	r2, r1, r2
 800848e:	1a9b      	subs	r3, r3, r2
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	4413      	add	r3, r2
 8008494:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008498:	021b      	lsls	r3, r3, #8
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	4313      	orrs	r3, r2
 800849e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	f003 0301 	and.w	r3, r3, #1
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d002      	beq.n	80084b0 <get_fat+0xe6>
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	091b      	lsrs	r3, r3, #4
 80084ae:	e002      	b.n	80084b6 <get_fat+0xec>
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084b6:	617b      	str	r3, [r7, #20]
			break;
 80084b8:	e055      	b.n	8008566 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	899b      	ldrh	r3, [r3, #12]
 80084c2:	085b      	lsrs	r3, r3, #1
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	4619      	mov	r1, r3
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80084ce:	4413      	add	r3, r2
 80084d0:	4619      	mov	r1, r3
 80084d2:	6938      	ldr	r0, [r7, #16]
 80084d4:	f7ff febf 	bl	8008256 <move_window>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d140      	bne.n	8008560 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	005b      	lsls	r3, r3, #1
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	8992      	ldrh	r2, [r2, #12]
 80084ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80084f0:	fb00 f202 	mul.w	r2, r0, r2
 80084f4:	1a9b      	subs	r3, r3, r2
 80084f6:	440b      	add	r3, r1
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7ff fdcb 	bl	8008094 <ld_word>
 80084fe:	4603      	mov	r3, r0
 8008500:	617b      	str	r3, [r7, #20]
			break;
 8008502:	e030      	b.n	8008566 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	899b      	ldrh	r3, [r3, #12]
 800850c:	089b      	lsrs	r3, r3, #2
 800850e:	b29b      	uxth	r3, r3
 8008510:	4619      	mov	r1, r3
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	fbb3 f3f1 	udiv	r3, r3, r1
 8008518:	4413      	add	r3, r2
 800851a:	4619      	mov	r1, r3
 800851c:	6938      	ldr	r0, [r7, #16]
 800851e:	f7ff fe9a 	bl	8008256 <move_window>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d11d      	bne.n	8008564 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	693a      	ldr	r2, [r7, #16]
 8008534:	8992      	ldrh	r2, [r2, #12]
 8008536:	fbb3 f0f2 	udiv	r0, r3, r2
 800853a:	fb00 f202 	mul.w	r2, r0, r2
 800853e:	1a9b      	subs	r3, r3, r2
 8008540:	440b      	add	r3, r1
 8008542:	4618      	mov	r0, r3
 8008544:	f7ff fdbf 	bl	80080c6 <ld_dword>
 8008548:	4603      	mov	r3, r0
 800854a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800854e:	617b      	str	r3, [r7, #20]
			break;
 8008550:	e009      	b.n	8008566 <get_fat+0x19c>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 8008552:	2301      	movs	r3, #1
 8008554:	617b      	str	r3, [r7, #20]
 8008556:	e006      	b.n	8008566 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008558:	bf00      	nop
 800855a:	e004      	b.n	8008566 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800855c:	bf00      	nop
 800855e:	e002      	b.n	8008566 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008560:	bf00      	nop
 8008562:	e000      	b.n	8008566 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008564:	bf00      	nop
		}
	}

	return val;
 8008566:	697b      	ldr	r3, [r7, #20]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3718      	adds	r7, #24
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008570:	b590      	push	{r4, r7, lr}
 8008572:	b089      	sub	sp, #36	@ 0x24
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800857c:	2302      	movs	r3, #2
 800857e:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	2b01      	cmp	r3, #1
 8008584:	f240 8109 	bls.w	800879a <put_fat+0x22a>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	429a      	cmp	r2, r3
 8008590:	f080 8103 	bcs.w	800879a <put_fat+0x22a>
		switch (fs->fs_type) {
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	2b03      	cmp	r3, #3
 800859a:	f000 80b6 	beq.w	800870a <put_fat+0x19a>
 800859e:	2b03      	cmp	r3, #3
 80085a0:	f300 80fb 	bgt.w	800879a <put_fat+0x22a>
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d003      	beq.n	80085b0 <put_fat+0x40>
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	f000 8083 	beq.w	80086b4 <put_fat+0x144>
 80085ae:	e0f4      	b.n	800879a <put_fat+0x22a>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	61bb      	str	r3, [r7, #24]
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	085b      	lsrs	r3, r3, #1
 80085b8:	69ba      	ldr	r2, [r7, #24]
 80085ba:	4413      	add	r3, r2
 80085bc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	899b      	ldrh	r3, [r3, #12]
 80085c6:	4619      	mov	r1, r3
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80085ce:	4413      	add	r3, r2
 80085d0:	4619      	mov	r1, r3
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f7ff fe3f 	bl	8008256 <move_window>
 80085d8:	4603      	mov	r3, r0
 80085da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80085dc:	7ffb      	ldrb	r3, [r7, #31]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f040 80d4 	bne.w	800878c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	1c5a      	adds	r2, r3, #1
 80085ee:	61ba      	str	r2, [r7, #24]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	8992      	ldrh	r2, [r2, #12]
 80085f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80085f8:	fb00 f202 	mul.w	r2, r0, r2
 80085fc:	1a9b      	subs	r3, r3, r2
 80085fe:	440b      	add	r3, r1
 8008600:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	f003 0301 	and.w	r3, r3, #1
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00d      	beq.n	8008628 <put_fat+0xb8>
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	b25b      	sxtb	r3, r3
 8008612:	f003 030f 	and.w	r3, r3, #15
 8008616:	b25a      	sxtb	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	b25b      	sxtb	r3, r3
 800861c:	011b      	lsls	r3, r3, #4
 800861e:	b25b      	sxtb	r3, r3
 8008620:	4313      	orrs	r3, r2
 8008622:	b25b      	sxtb	r3, r3
 8008624:	b2db      	uxtb	r3, r3
 8008626:	e001      	b.n	800862c <put_fat+0xbc>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	b2db      	uxtb	r3, r3
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2201      	movs	r2, #1
 8008634:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	899b      	ldrh	r3, [r3, #12]
 800863e:	4619      	mov	r1, r3
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	fbb3 f3f1 	udiv	r3, r3, r1
 8008646:	4413      	add	r3, r2
 8008648:	4619      	mov	r1, r3
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f7ff fe03 	bl	8008256 <move_window>
 8008650:	4603      	mov	r3, r0
 8008652:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008654:	7ffb      	ldrb	r3, [r7, #31]
 8008656:	2b00      	cmp	r3, #0
 8008658:	f040 809a 	bne.w	8008790 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	899b      	ldrh	r3, [r3, #12]
 8008666:	461a      	mov	r2, r3
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	fbb3 f0f2 	udiv	r0, r3, r2
 800866e:	fb00 f202 	mul.w	r2, r0, r2
 8008672:	1a9b      	subs	r3, r3, r2
 8008674:	440b      	add	r3, r1
 8008676:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	f003 0301 	and.w	r3, r3, #1
 800867e:	2b00      	cmp	r3, #0
 8008680:	d003      	beq.n	800868a <put_fat+0x11a>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	091b      	lsrs	r3, r3, #4
 8008686:	b2db      	uxtb	r3, r3
 8008688:	e00e      	b.n	80086a8 <put_fat+0x138>
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	b25b      	sxtb	r3, r3
 8008690:	f023 030f 	bic.w	r3, r3, #15
 8008694:	b25a      	sxtb	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	0a1b      	lsrs	r3, r3, #8
 800869a:	b25b      	sxtb	r3, r3
 800869c:	f003 030f 	and.w	r3, r3, #15
 80086a0:	b25b      	sxtb	r3, r3
 80086a2:	4313      	orrs	r3, r2
 80086a4:	b25b      	sxtb	r3, r3
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	697a      	ldr	r2, [r7, #20]
 80086aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2201      	movs	r2, #1
 80086b0:	711a      	strb	r2, [r3, #4]
			break;
 80086b2:	e072      	b.n	800879a <put_fat+0x22a>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	899b      	ldrh	r3, [r3, #12]
 80086bc:	085b      	lsrs	r3, r3, #1
 80086be:	b29b      	uxth	r3, r3
 80086c0:	4619      	mov	r1, r3
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80086c8:	4413      	add	r3, r2
 80086ca:	4619      	mov	r1, r3
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f7ff fdc2 	bl	8008256 <move_window>
 80086d2:	4603      	mov	r3, r0
 80086d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80086d6:	7ffb      	ldrb	r3, [r7, #31]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d15b      	bne.n	8008794 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	005b      	lsls	r3, r3, #1
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	8992      	ldrh	r2, [r2, #12]
 80086ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80086ee:	fb00 f202 	mul.w	r2, r0, r2
 80086f2:	1a9b      	subs	r3, r3, r2
 80086f4:	440b      	add	r3, r1
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	b292      	uxth	r2, r2
 80086fa:	4611      	mov	r1, r2
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7ff fd05 	bl	800810c <st_word>
			fs->wflag = 1;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2201      	movs	r2, #1
 8008706:	711a      	strb	r2, [r3, #4]
			break;
 8008708:	e047      	b.n	800879a <put_fat+0x22a>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	899b      	ldrh	r3, [r3, #12]
 8008712:	089b      	lsrs	r3, r3, #2
 8008714:	b29b      	uxth	r3, r3
 8008716:	4619      	mov	r1, r3
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	fbb3 f3f1 	udiv	r3, r3, r1
 800871e:	4413      	add	r3, r2
 8008720:	4619      	mov	r1, r3
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f7ff fd97 	bl	8008256 <move_window>
 8008728:	4603      	mov	r3, r0
 800872a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800872c:	7ffb      	ldrb	r3, [r7, #31]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d132      	bne.n	8008798 <put_fat+0x228>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	8992      	ldrh	r2, [r2, #12]
 8008746:	fbb3 f0f2 	udiv	r0, r3, r2
 800874a:	fb00 f202 	mul.w	r2, r0, r2
 800874e:	1a9b      	subs	r3, r3, r2
 8008750:	440b      	add	r3, r1
 8008752:	4618      	mov	r0, r3
 8008754:	f7ff fcb7 	bl	80080c6 <ld_dword>
 8008758:	4603      	mov	r3, r0
 800875a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800875e:	4323      	orrs	r3, r4
 8008760:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	8992      	ldrh	r2, [r2, #12]
 8008770:	fbb3 f0f2 	udiv	r0, r3, r2
 8008774:	fb00 f202 	mul.w	r2, r0, r2
 8008778:	1a9b      	subs	r3, r3, r2
 800877a:	440b      	add	r3, r1
 800877c:	6879      	ldr	r1, [r7, #4]
 800877e:	4618      	mov	r0, r3
 8008780:	f7ff fcdf 	bl	8008142 <st_dword>
			fs->wflag = 1;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2201      	movs	r2, #1
 8008788:	711a      	strb	r2, [r3, #4]
			break;
 800878a:	e006      	b.n	800879a <put_fat+0x22a>
			if (res != FR_OK) break;
 800878c:	bf00      	nop
 800878e:	e004      	b.n	800879a <put_fat+0x22a>
			if (res != FR_OK) break;
 8008790:	bf00      	nop
 8008792:	e002      	b.n	800879a <put_fat+0x22a>
			if (res != FR_OK) break;
 8008794:	bf00      	nop
 8008796:	e000      	b.n	800879a <put_fat+0x22a>
			if (res != FR_OK) break;
 8008798:	bf00      	nop
		}
	}
	return res;
 800879a:	7ffb      	ldrb	r3, [r7, #31]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3724      	adds	r7, #36	@ 0x24
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd90      	pop	{r4, r7, pc}

080087a4 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b088      	sub	sp, #32
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80087b0:	2300      	movs	r3, #0
 80087b2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d904      	bls.n	80087ca <remove_chain+0x26>
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	699b      	ldr	r3, [r3, #24]
 80087c4:	68ba      	ldr	r2, [r7, #8]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d301      	bcc.n	80087ce <remove_chain+0x2a>
 80087ca:	2302      	movs	r3, #2
 80087cc:	e04b      	b.n	8008866 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00c      	beq.n	80087ee <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80087d4:	f04f 32ff 	mov.w	r2, #4294967295
 80087d8:	6879      	ldr	r1, [r7, #4]
 80087da:	69b8      	ldr	r0, [r7, #24]
 80087dc:	f7ff fec8 	bl	8008570 <put_fat>
 80087e0:	4603      	mov	r3, r0
 80087e2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80087e4:	7ffb      	ldrb	r3, [r7, #31]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <remove_chain+0x4a>
 80087ea:	7ffb      	ldrb	r3, [r7, #31]
 80087ec:	e03b      	b.n	8008866 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80087ee:	68b9      	ldr	r1, [r7, #8]
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f7ff fdea 	bl	80083ca <get_fat>
 80087f6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d031      	beq.n	8008862 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d101      	bne.n	8008808 <remove_chain+0x64>
 8008804:	2302      	movs	r3, #2
 8008806:	e02e      	b.n	8008866 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800880e:	d101      	bne.n	8008814 <remove_chain+0x70>
 8008810:	2301      	movs	r3, #1
 8008812:	e028      	b.n	8008866 <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008814:	2200      	movs	r2, #0
 8008816:	68b9      	ldr	r1, [r7, #8]
 8008818:	69b8      	ldr	r0, [r7, #24]
 800881a:	f7ff fea9 	bl	8008570 <put_fat>
 800881e:	4603      	mov	r3, r0
 8008820:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008822:	7ffb      	ldrb	r3, [r7, #31]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d001      	beq.n	800882c <remove_chain+0x88>
 8008828:	7ffb      	ldrb	r3, [r7, #31]
 800882a:	e01c      	b.n	8008866 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	695a      	ldr	r2, [r3, #20]
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	3b02      	subs	r3, #2
 8008836:	429a      	cmp	r2, r3
 8008838:	d20b      	bcs.n	8008852 <remove_chain+0xae>
			fs->free_clst++;
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	1c5a      	adds	r2, r3, #1
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	795b      	ldrb	r3, [r3, #5]
 8008848:	f043 0301 	orr.w	r3, r3, #1
 800884c:	b2da      	uxtb	r2, r3
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	715a      	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	699b      	ldr	r3, [r3, #24]
 800885a:	68ba      	ldr	r2, [r7, #8]
 800885c:	429a      	cmp	r2, r3
 800885e:	d3c6      	bcc.n	80087ee <remove_chain+0x4a>
 8008860:	e000      	b.n	8008864 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008862:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3720      	adds	r7, #32
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b088      	sub	sp, #32
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d10d      	bne.n	80088a0 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d004      	beq.n	800889a <create_chain+0x2c>
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	699b      	ldr	r3, [r3, #24]
 8008894:	69ba      	ldr	r2, [r7, #24]
 8008896:	429a      	cmp	r2, r3
 8008898:	d31b      	bcc.n	80088d2 <create_chain+0x64>
 800889a:	2301      	movs	r3, #1
 800889c:	61bb      	str	r3, [r7, #24]
 800889e:	e018      	b.n	80088d2 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80088a0:	6839      	ldr	r1, [r7, #0]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7ff fd91 	bl	80083ca <get_fat>
 80088a8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d801      	bhi.n	80088b4 <create_chain+0x46>
 80088b0:	2301      	movs	r3, #1
 80088b2:	e0a9      	b.n	8008a08 <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ba:	d101      	bne.n	80088c0 <create_chain+0x52>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	e0a3      	b.n	8008a08 <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d201      	bcs.n	80088ce <create_chain+0x60>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	e09c      	b.n	8008a08 <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d101      	bne.n	80088de <create_chain+0x70>
 80088da:	2300      	movs	r3, #0
 80088dc:	e094      	b.n	8008a08 <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 80088de:	2300      	movs	r3, #0
 80088e0:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 80088e2:	69ba      	ldr	r2, [r7, #24]
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d129      	bne.n	800893e <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	3301      	adds	r3, #1
 80088ee:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	69fa      	ldr	r2, [r7, #28]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d301      	bcc.n	80088fe <create_chain+0x90>
 80088fa:	2302      	movs	r3, #2
 80088fc:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 80088fe:	69f9      	ldr	r1, [r7, #28]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f7ff fd62 	bl	80083ca <get_fat>
 8008906:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2b01      	cmp	r3, #1
 800890c:	d003      	beq.n	8008916 <create_chain+0xa8>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008914:	d101      	bne.n	800891a <create_chain+0xac>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	e076      	b.n	8008a08 <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00e      	beq.n	800893e <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d906      	bls.n	800893a <create_chain+0xcc>
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	429a      	cmp	r2, r3
 8008934:	d201      	bcs.n	800893a <create_chain+0xcc>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 800893a:	2300      	movs	r3, #0
 800893c:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d129      	bne.n	8008998 <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	3301      	adds	r3, #1
 800894c:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	69fa      	ldr	r2, [r7, #28]
 8008954:	429a      	cmp	r2, r3
 8008956:	d307      	bcc.n	8008968 <create_chain+0xfa>
					ncl = 2;
 8008958:	2302      	movs	r3, #2
 800895a:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 800895c:	69fa      	ldr	r2, [r7, #28]
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	429a      	cmp	r2, r3
 8008962:	d901      	bls.n	8008968 <create_chain+0xfa>
 8008964:	2300      	movs	r3, #0
 8008966:	e04f      	b.n	8008a08 <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008968:	69f9      	ldr	r1, [r7, #28]
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7ff fd2d 	bl	80083ca <get_fat>
 8008970:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00e      	beq.n	8008996 <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2b01      	cmp	r3, #1
 800897c:	d003      	beq.n	8008986 <create_chain+0x118>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008984:	d101      	bne.n	800898a <create_chain+0x11c>
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	e03e      	b.n	8008a08 <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800898a:	69fa      	ldr	r2, [r7, #28]
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	429a      	cmp	r2, r3
 8008990:	d1da      	bne.n	8008948 <create_chain+0xda>
 8008992:	2300      	movs	r3, #0
 8008994:	e038      	b.n	8008a08 <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 8008996:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8008998:	f04f 32ff 	mov.w	r2, #4294967295
 800899c:	69f9      	ldr	r1, [r7, #28]
 800899e:	6938      	ldr	r0, [r7, #16]
 80089a0:	f7ff fde6 	bl	8008570 <put_fat>
 80089a4:	4603      	mov	r3, r0
 80089a6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80089a8:	7dfb      	ldrb	r3, [r7, #23]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d109      	bne.n	80089c2 <create_chain+0x154>
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d006      	beq.n	80089c2 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 80089b4:	69fa      	ldr	r2, [r7, #28]
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	6938      	ldr	r0, [r7, #16]
 80089ba:	f7ff fdd9 	bl	8008570 <put_fat>
 80089be:	4603      	mov	r3, r0
 80089c0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80089c2:	7dfb      	ldrb	r3, [r7, #23]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d116      	bne.n	80089f6 <create_chain+0x188>
		fs->last_clst = ncl;
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	69fa      	ldr	r2, [r7, #28]
 80089cc:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	695a      	ldr	r2, [r3, #20]
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	3b02      	subs	r3, #2
 80089d8:	429a      	cmp	r2, r3
 80089da:	d804      	bhi.n	80089e6 <create_chain+0x178>
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	695b      	ldr	r3, [r3, #20]
 80089e0:	1e5a      	subs	r2, r3, #1
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	795b      	ldrb	r3, [r3, #5]
 80089ea:	f043 0301 	orr.w	r3, r3, #1
 80089ee:	b2da      	uxtb	r2, r3
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	715a      	strb	r2, [r3, #5]
 80089f4:	e007      	b.n	8008a06 <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d102      	bne.n	8008a02 <create_chain+0x194>
 80089fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008a00:	e000      	b.n	8008a04 <create_chain+0x196>
 8008a02:	2301      	movs	r3, #1
 8008a04:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008a06:	69fb      	ldr	r3, [r7, #28]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3720      	adds	r7, #32
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b086      	sub	sp, #24
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7ff fbdf 	bl	80081de <sync_window>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d001      	beq.n	8008a2a <dir_clear+0x1a>
 8008a26:	2301      	movs	r3, #1
 8008a28:	e036      	b.n	8008a98 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8008a2a:	6839      	ldr	r1, [r7, #0]
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f7ff fcad 	bl	800838c <clst2sect>
 8008a32:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	631a      	str	r2, [r3, #48]	@ 0x30
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	3334      	adds	r3, #52	@ 0x34
 8008a3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008a42:	2100      	movs	r1, #0
 8008a44:	4618      	mov	r0, r3
 8008a46:	f00d fbc1 	bl	80161cc <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	3334      	adds	r3, #52	@ 0x34
 8008a4e:	60fb      	str	r3, [r7, #12]
 8008a50:	2301      	movs	r3, #1
 8008a52:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8008a54:	2300      	movs	r3, #0
 8008a56:	617b      	str	r3, [r7, #20]
 8008a58:	e003      	b.n	8008a62 <dir_clear+0x52>
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	4413      	add	r3, r2
 8008a60:	617b      	str	r3, [r7, #20]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	895b      	ldrh	r3, [r3, #10]
 8008a66:	461a      	mov	r2, r3
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d20b      	bcs.n	8008a86 <dir_clear+0x76>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	7858      	ldrb	r0, [r3, #1]
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	441a      	add	r2, r3
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	68f9      	ldr	r1, [r7, #12]
 8008a7c:	f7ff fa54 	bl	8007f28 <disk_write>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d0e9      	beq.n	8008a5a <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	895b      	ldrh	r3, [r3, #10]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	bf14      	ite	ne
 8008a92:	2301      	movne	r3, #1
 8008a94:	2300      	moveq	r3, #0
 8008a96:	b2db      	uxtb	r3, r3
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3718      	adds	r7, #24
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ab6:	d204      	bcs.n	8008ac2 <dir_sdi+0x22>
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	f003 031f 	and.w	r3, r3, #31
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	e071      	b.n	8008baa <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	683a      	ldr	r2, [r7, #0]
 8008aca:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d106      	bne.n	8008ae6 <dir_sdi+0x46>
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d902      	bls.n	8008ae6 <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae4:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10c      	bne.n	8008b06 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	095b      	lsrs	r3, r3, #5
 8008af0:	693a      	ldr	r2, [r7, #16]
 8008af2:	8912      	ldrh	r2, [r2, #8]
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d301      	bcc.n	8008afc <dir_sdi+0x5c>
 8008af8:	2302      	movs	r3, #2
 8008afa:	e056      	b.n	8008baa <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	619a      	str	r2, [r3, #24]
 8008b04:	e02d      	b.n	8008b62 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	895b      	ldrh	r3, [r3, #10]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	899b      	ldrh	r3, [r3, #12]
 8008b10:	fb02 f303 	mul.w	r3, r2, r3
 8008b14:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008b16:	e019      	b.n	8008b4c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6979      	ldr	r1, [r7, #20]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7ff fc54 	bl	80083ca <get_fat>
 8008b22:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b2a:	d101      	bne.n	8008b30 <dir_sdi+0x90>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e03c      	b.n	8008baa <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d904      	bls.n	8008b40 <dir_sdi+0xa0>
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	697a      	ldr	r2, [r7, #20]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d301      	bcc.n	8008b44 <dir_sdi+0xa4>
 8008b40:	2302      	movs	r3, #2
 8008b42:	e032      	b.n	8008baa <dir_sdi+0x10a>
			ofs -= csz;
 8008b44:	683a      	ldr	r2, [r7, #0]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d2e1      	bcs.n	8008b18 <dir_sdi+0x78>
		}
		dp->sect = clst2sect(fs, clst);
 8008b54:	6979      	ldr	r1, [r7, #20]
 8008b56:	6938      	ldr	r0, [r7, #16]
 8008b58:	f7ff fc18 	bl	800838c <clst2sect>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	697a      	ldr	r2, [r7, #20]
 8008b66:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d101      	bne.n	8008b74 <dir_sdi+0xd4>
 8008b70:	2302      	movs	r3, #2
 8008b72:	e01a      	b.n	8008baa <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	699a      	ldr	r2, [r3, #24]
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	899b      	ldrh	r3, [r3, #12]
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b84:	441a      	add	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	899b      	ldrh	r3, [r3, #12]
 8008b94:	461a      	mov	r2, r3
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b9c:	fb00 f202 	mul.w	r2, r0, r2
 8008ba0:	1a9b      	subs	r3, r3, r2
 8008ba2:	18ca      	adds	r2, r1, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3718      	adds	r7, #24
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b086      	sub	sp, #24
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	3320      	adds	r3, #32
 8008bc8:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008bd0:	d302      	bcc.n	8008bd8 <dir_next+0x26>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d101      	bne.n	8008be4 <dir_next+0x32>
 8008be0:	2304      	movs	r3, #4
 8008be2:	e088      	b.n	8008cf6 <dir_next+0x144>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	899b      	ldrh	r3, [r3, #12]
 8008be8:	461a      	mov	r2, r3
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bf0:	fb01 f202 	mul.w	r2, r1, r2
 8008bf4:	1a9b      	subs	r3, r3, r2
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d16a      	bne.n	8008cd0 <dir_next+0x11e>
		dp->sect++;				/* Next sector */
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	1c5a      	adds	r2, r3, #1
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	695b      	ldr	r3, [r3, #20]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10a      	bne.n	8008c22 <dir_next+0x70>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	095b      	lsrs	r3, r3, #5
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	8912      	ldrh	r2, [r2, #8]
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d35b      	bcc.n	8008cd0 <dir_next+0x11e>
				dp->sect = 0; return FR_NO_FILE;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	619a      	str	r2, [r3, #24]
 8008c1e:	2304      	movs	r3, #4
 8008c20:	e069      	b.n	8008cf6 <dir_next+0x144>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	899b      	ldrh	r3, [r3, #12]
 8008c26:	461a      	mov	r2, r3
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c2e:	693a      	ldr	r2, [r7, #16]
 8008c30:	8952      	ldrh	r2, [r2, #10]
 8008c32:	3a01      	subs	r2, #1
 8008c34:	4013      	ands	r3, r2
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d14a      	bne.n	8008cd0 <dir_next+0x11e>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	695b      	ldr	r3, [r3, #20]
 8008c40:	4619      	mov	r1, r3
 8008c42:	4610      	mov	r0, r2
 8008c44:	f7ff fbc1 	bl	80083ca <get_fat>
 8008c48:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d801      	bhi.n	8008c54 <dir_next+0xa2>
 8008c50:	2302      	movs	r3, #2
 8008c52:	e050      	b.n	8008cf6 <dir_next+0x144>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c5a:	d101      	bne.n	8008c60 <dir_next+0xae>
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e04a      	b.n	8008cf6 <dir_next+0x144>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d328      	bcc.n	8008cbc <dir_next+0x10a>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d104      	bne.n	8008c7a <dir_next+0xc8>
						dp->sect = 0; return FR_NO_FILE;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	619a      	str	r2, [r3, #24]
 8008c76:	2304      	movs	r3, #4
 8008c78:	e03d      	b.n	8008cf6 <dir_next+0x144>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	695b      	ldr	r3, [r3, #20]
 8008c80:	4619      	mov	r1, r3
 8008c82:	4610      	mov	r0, r2
 8008c84:	f7ff fdf3 	bl	800886e <create_chain>
 8008c88:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d101      	bne.n	8008c94 <dir_next+0xe2>
 8008c90:	2307      	movs	r3, #7
 8008c92:	e030      	b.n	8008cf6 <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d101      	bne.n	8008c9e <dir_next+0xec>
 8008c9a:	2302      	movs	r3, #2
 8008c9c:	e02b      	b.n	8008cf6 <dir_next+0x144>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca4:	d101      	bne.n	8008caa <dir_next+0xf8>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e025      	b.n	8008cf6 <dir_next+0x144>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8008caa:	6979      	ldr	r1, [r7, #20]
 8008cac:	6938      	ldr	r0, [r7, #16]
 8008cae:	f7ff feaf 	bl	8008a10 <dir_clear>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <dir_next+0x10a>
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e01c      	b.n	8008cf6 <dir_next+0x144>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	697a      	ldr	r2, [r7, #20]
 8008cc0:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8008cc2:	6979      	ldr	r1, [r7, #20]
 8008cc4:	6938      	ldr	r0, [r7, #16]
 8008cc6:	f7ff fb61 	bl	800838c <clst2sect>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	899b      	ldrh	r3, [r3, #12]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ce8:	fb00 f202 	mul.w	r2, r0, r2
 8008cec:	1a9b      	subs	r3, r3, r2
 8008cee:	18ca      	adds	r2, r1, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3718      	adds	r7, #24
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b086      	sub	sp, #24
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008d0e:	2100      	movs	r1, #0
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7ff fec5 	bl	8008aa0 <dir_sdi>
 8008d16:	4603      	mov	r3, r0
 8008d18:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008d1a:	7dfb      	ldrb	r3, [r7, #23]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d12b      	bne.n	8008d78 <dir_alloc+0x7a>
		n = 0;
 8008d20:	2300      	movs	r3, #0
 8008d22:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	4619      	mov	r1, r3
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f7ff fa93 	bl	8008256 <move_window>
 8008d30:	4603      	mov	r3, r0
 8008d32:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008d34:	7dfb      	ldrb	r3, [r7, #23]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d11d      	bne.n	8008d76 <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	69db      	ldr	r3, [r3, #28]
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	2be5      	cmp	r3, #229	@ 0xe5
 8008d42:	d004      	beq.n	8008d4e <dir_alloc+0x50>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	69db      	ldr	r3, [r3, #28]
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d107      	bne.n	8008d5e <dir_alloc+0x60>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	3301      	adds	r3, #1
 8008d52:	613b      	str	r3, [r7, #16]
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d102      	bne.n	8008d62 <dir_alloc+0x64>
 8008d5c:	e00c      	b.n	8008d78 <dir_alloc+0x7a>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 8008d5e:	2300      	movs	r3, #0
 8008d60:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8008d62:	2101      	movs	r1, #1
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7ff ff24 	bl	8008bb2 <dir_next>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8008d6e:	7dfb      	ldrb	r3, [r7, #23]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d0d7      	beq.n	8008d24 <dir_alloc+0x26>
 8008d74:	e000      	b.n	8008d78 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008d76:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008d78:	7dfb      	ldrb	r3, [r7, #23]
 8008d7a:	2b04      	cmp	r3, #4
 8008d7c:	d101      	bne.n	8008d82 <dir_alloc+0x84>
 8008d7e:	2307      	movs	r3, #7
 8008d80:	75fb      	strb	r3, [r7, #23]
	return res;
 8008d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3718      	adds	r7, #24
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	331a      	adds	r3, #26
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7ff f97a 	bl	8008094 <ld_word>
 8008da0:	4603      	mov	r3, r0
 8008da2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	2b03      	cmp	r3, #3
 8008daa:	d109      	bne.n	8008dc0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	3314      	adds	r3, #20
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7ff f96f 	bl	8008094 <ld_word>
 8008db6:	4603      	mov	r3, r0
 8008db8:	041b      	lsls	r3, r3, #16
 8008dba:	68fa      	ldr	r2, [r7, #12]
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b084      	sub	sp, #16
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	60f8      	str	r0, [r7, #12]
 8008dd2:	60b9      	str	r1, [r7, #8]
 8008dd4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	331a      	adds	r3, #26
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	b292      	uxth	r2, r2
 8008dde:	4611      	mov	r1, r2
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7ff f993 	bl	800810c <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	d109      	bne.n	8008e02 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	f103 0214 	add.w	r2, r3, #20
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	0c1b      	lsrs	r3, r3, #16
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	4610      	mov	r0, r2
 8008dfe:	f7ff f985 	bl	800810c <st_word>
	}
}
 8008e02:	bf00      	nop
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b086      	sub	sp, #24
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008e18:	2100      	movs	r1, #0
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f7ff fe40 	bl	8008aa0 <dir_sdi>
 8008e20:	4603      	mov	r3, r0
 8008e22:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008e24:	7dfb      	ldrb	r3, [r7, #23]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d001      	beq.n	8008e2e <dir_find+0x24>
 8008e2a:	7dfb      	ldrb	r3, [r7, #23]
 8008e2c:	e03e      	b.n	8008eac <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	4619      	mov	r1, r3
 8008e34:	6938      	ldr	r0, [r7, #16]
 8008e36:	f7ff fa0e 	bl	8008256 <move_window>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008e3e:	7dfb      	ldrb	r3, [r7, #23]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d12f      	bne.n	8008ea4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	69db      	ldr	r3, [r3, #28]
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008e4c:	7bfb      	ldrb	r3, [r7, #15]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d102      	bne.n	8008e58 <dir_find+0x4e>
 8008e52:	2304      	movs	r3, #4
 8008e54:	75fb      	strb	r3, [r7, #23]
 8008e56:	e028      	b.n	8008eaa <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	69db      	ldr	r3, [r3, #28]
 8008e5c:	330b      	adds	r3, #11
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e64:	b2da      	uxtb	r2, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	69db      	ldr	r3, [r3, #28]
 8008e6e:	330b      	adds	r3, #11
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	f003 0308 	and.w	r3, r3, #8
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10a      	bne.n	8008e90 <dir_find+0x86>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	69d8      	ldr	r0, [r3, #28]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	3320      	adds	r3, #32
 8008e82:	220b      	movs	r2, #11
 8008e84:	4619      	mov	r1, r3
 8008e86:	f00d f991 	bl	80161ac <memcmp>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00b      	beq.n	8008ea8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008e90:	2100      	movs	r1, #0
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f7ff fe8d 	bl	8008bb2 <dir_next>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008e9c:	7dfb      	ldrb	r3, [r7, #23]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d0c5      	beq.n	8008e2e <dir_find+0x24>
 8008ea2:	e002      	b.n	8008eaa <dir_find+0xa0>
		if (res != FR_OK) break;
 8008ea4:	bf00      	nop
 8008ea6:	e000      	b.n	8008eaa <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008ea8:	bf00      	nop

	return res;
 8008eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3718      	adds	r7, #24
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --n_ent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008ec2:	2101      	movs	r1, #1
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f7ff ff1a 	bl	8008cfe <dir_alloc>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008ece:	7bfb      	ldrb	r3, [r7, #15]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d11c      	bne.n	8008f0e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	68b8      	ldr	r0, [r7, #8]
 8008edc:	f7ff f9bb 	bl	8008256 <move_window>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008ee4:	7bfb      	ldrb	r3, [r7, #15]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d111      	bne.n	8008f0e <dir_register+0x5a>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	69db      	ldr	r3, [r3, #28]
 8008eee:	2220      	movs	r2, #32
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f00d f96a 	bl	80161cc <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	69d8      	ldr	r0, [r3, #28]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	3320      	adds	r3, #32
 8008f00:	220b      	movs	r2, #11
 8008f02:	4619      	mov	r1, r3
 8008f04:	f00d f9e6 	bl	80162d4 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b08a      	sub	sp, #40	@ 0x28
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
	BYTE *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	617b      	str	r3, [r7, #20]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	3320      	adds	r3, #32
 8008f2c:	613b      	str	r3, [r7, #16]
	memset(sfn, ' ', 11);
 8008f2e:	220b      	movs	r2, #11
 8008f30:	2120      	movs	r1, #32
 8008f32:	6938      	ldr	r0, [r7, #16]
 8008f34:	f00d f94a 	bl	80161cc <memset>
	si = i = 0; ni = 8;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	61bb      	str	r3, [r7, #24]
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	61fb      	str	r3, [r7, #28]
 8008f40:	2308      	movs	r3, #8
 8008f42:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	1c5a      	adds	r2, r3, #1
 8008f48:	61fa      	str	r2, [r7, #28]
 8008f4a:	697a      	ldr	r2, [r7, #20]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008f54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f58:	2b20      	cmp	r3, #32
 8008f5a:	f240 8089 	bls.w	8009070 <create_name+0x158>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 8008f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f62:	2b2f      	cmp	r3, #47	@ 0x2f
 8008f64:	d007      	beq.n	8008f76 <create_name+0x5e>
 8008f66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f6a:	2b5c      	cmp	r3, #92	@ 0x5c
 8008f6c:	d110      	bne.n	8008f90 <create_name+0x78>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 8008f6e:	e002      	b.n	8008f76 <create_name+0x5e>
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	3301      	adds	r3, #1
 8008f74:	61fb      	str	r3, [r7, #28]
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	2b2f      	cmp	r3, #47	@ 0x2f
 8008f80:	d0f6      	beq.n	8008f70 <create_name+0x58>
 8008f82:	697a      	ldr	r2, [r7, #20]
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	4413      	add	r3, r2
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	2b5c      	cmp	r3, #92	@ 0x5c
 8008f8c:	d0f0      	beq.n	8008f70 <create_name+0x58>
			break;
 8008f8e:	e070      	b.n	8009072 <create_name+0x15a>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8008f90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f94:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f96:	d003      	beq.n	8008fa0 <create_name+0x88>
 8008f98:	69ba      	ldr	r2, [r7, #24]
 8008f9a:	6a3b      	ldr	r3, [r7, #32]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d30d      	bcc.n	8008fbc <create_name+0xa4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8008fa0:	6a3b      	ldr	r3, [r7, #32]
 8008fa2:	2b0b      	cmp	r3, #11
 8008fa4:	d003      	beq.n	8008fae <create_name+0x96>
 8008fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008faa:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fac:	d001      	beq.n	8008fb2 <create_name+0x9a>
 8008fae:	2306      	movs	r3, #6
 8008fb0:	e081      	b.n	80090b6 <create_name+0x19e>
			i = 8; ni = 11;				/* Enter file extension field */
 8008fb2:	2308      	movs	r3, #8
 8008fb4:	61bb      	str	r3, [r7, #24]
 8008fb6:	230b      	movs	r3, #11
 8008fb8:	623b      	str	r3, [r7, #32]
			continue;
 8008fba:	e058      	b.n	800906e <create_name+0x156>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
 8008fbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	da07      	bge.n	8008fd4 <create_name+0xbc>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 8008fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008fc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fcc:	4a3c      	ldr	r2, [pc, #240]	@ (80090c0 <create_name+0x1a8>)
 8008fce:	5cd3      	ldrb	r3, [r2, r3]
 8008fd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 8008fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7ff f8de 	bl	800819a <dbc_1st>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d024      	beq.n	800902e <create_name+0x116>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	1c5a      	adds	r2, r3, #1
 8008fe8:	61fa      	str	r2, [r7, #28]
 8008fea:	697a      	ldr	r2, [r7, #20]
 8008fec:	4413      	add	r3, r2
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8008ff2:	7bfb      	ldrb	r3, [r7, #15]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7ff f8e1 	bl	80081bc <dbc_2nd>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d004      	beq.n	800900a <create_name+0xf2>
 8009000:	6a3b      	ldr	r3, [r7, #32]
 8009002:	3b01      	subs	r3, #1
 8009004:	69ba      	ldr	r2, [r7, #24]
 8009006:	429a      	cmp	r2, r3
 8009008:	d301      	bcc.n	800900e <create_name+0xf6>
 800900a:	2306      	movs	r3, #6
 800900c:	e053      	b.n	80090b6 <create_name+0x19e>
			sfn[i++] = c;
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	1c5a      	adds	r2, r3, #1
 8009012:	61ba      	str	r2, [r7, #24]
 8009014:	693a      	ldr	r2, [r7, #16]
 8009016:	4413      	add	r3, r2
 8009018:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800901c:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	1c5a      	adds	r2, r3, #1
 8009022:	61ba      	str	r2, [r7, #24]
 8009024:	693a      	ldr	r2, [r7, #16]
 8009026:	4413      	add	r3, r2
 8009028:	7bfa      	ldrb	r2, [r7, #15]
 800902a:	701a      	strb	r2, [r3, #0]
 800902c:	e78a      	b.n	8008f44 <create_name+0x2c>
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800902e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009032:	4619      	mov	r1, r3
 8009034:	4823      	ldr	r0, [pc, #140]	@ (80090c4 <create_name+0x1ac>)
 8009036:	f00d f8d1 	bl	80161dc <strchr>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d001      	beq.n	8009044 <create_name+0x12c>
 8009040:	2306      	movs	r3, #6
 8009042:	e038      	b.n	80090b6 <create_name+0x19e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009044:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009048:	2b60      	cmp	r3, #96	@ 0x60
 800904a:	d908      	bls.n	800905e <create_name+0x146>
 800904c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009050:	2b7a      	cmp	r3, #122	@ 0x7a
 8009052:	d804      	bhi.n	800905e <create_name+0x146>
 8009054:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009058:	3b20      	subs	r3, #32
 800905a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			sfn[i++] = c;
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	1c5a      	adds	r2, r3, #1
 8009062:	61ba      	str	r2, [r7, #24]
 8009064:	693a      	ldr	r2, [r7, #16]
 8009066:	4413      	add	r3, r2
 8009068:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800906c:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 800906e:	e769      	b.n	8008f44 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009070:	bf00      	nop
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009072:	697a      	ldr	r2, [r7, #20]
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	441a      	add	r2, r3
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d101      	bne.n	8009086 <create_name+0x16e>
 8009082:	2306      	movs	r3, #6
 8009084:	e017      	b.n	80090b6 <create_name+0x19e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	2be5      	cmp	r3, #229	@ 0xe5
 800908c:	d102      	bne.n	8009094 <create_name+0x17c>
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	2205      	movs	r2, #5
 8009092:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 8009094:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009098:	2b20      	cmp	r3, #32
 800909a:	d905      	bls.n	80090a8 <create_name+0x190>
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	4413      	add	r3, r2
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	2b20      	cmp	r3, #32
 80090a6:	d801      	bhi.n	80090ac <create_name+0x194>
 80090a8:	2204      	movs	r2, #4
 80090aa:	e000      	b.n	80090ae <create_name+0x196>
 80090ac:	2200      	movs	r2, #0
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	330b      	adds	r3, #11
 80090b2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80090b4:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3728      	adds	r7, #40	@ 0x28
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	0801798c 	.word	0x0801798c
 80090c4:	080178a8 	.word	0x080178a8

080090c8 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b086      	sub	sp, #24
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 80090d8:	e002      	b.n	80090e0 <follow_path+0x18>
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	3301      	adds	r3, #1
 80090de:	603b      	str	r3, [r7, #0]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80090e6:	d0f8      	beq.n	80090da <follow_path+0x12>
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	2b5c      	cmp	r3, #92	@ 0x5c
 80090ee:	d0f4      	beq.n	80090da <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	2b1f      	cmp	r3, #31
 80090fc:	d80a      	bhi.n	8009114 <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2280      	movs	r2, #128	@ 0x80
 8009102:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 8009106:	2100      	movs	r1, #0
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f7ff fcc9 	bl	8008aa0 <dir_sdi>
 800910e:	4603      	mov	r3, r0
 8009110:	75fb      	strb	r3, [r7, #23]
 8009112:	e048      	b.n	80091a6 <follow_path+0xde>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009114:	463b      	mov	r3, r7
 8009116:	4619      	mov	r1, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f7ff fefd 	bl	8008f18 <create_name>
 800911e:	4603      	mov	r3, r0
 8009120:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009122:	7dfb      	ldrb	r3, [r7, #23]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d139      	bne.n	800919c <follow_path+0xd4>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f7ff fe6e 	bl	8008e0a <dir_find>
 800912e:	4603      	mov	r3, r0
 8009130:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8009138:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 800913a:	7dfb      	ldrb	r3, [r7, #23]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00a      	beq.n	8009156 <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009140:	7dfb      	ldrb	r3, [r7, #23]
 8009142:	2b04      	cmp	r3, #4
 8009144:	d12c      	bne.n	80091a0 <follow_path+0xd8>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009146:	7bfb      	ldrb	r3, [r7, #15]
 8009148:	f003 0304 	and.w	r3, r3, #4
 800914c:	2b00      	cmp	r3, #0
 800914e:	d127      	bne.n	80091a0 <follow_path+0xd8>
 8009150:	2305      	movs	r3, #5
 8009152:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009154:	e024      	b.n	80091a0 <follow_path+0xd8>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8009156:	7bfb      	ldrb	r3, [r7, #15]
 8009158:	f003 0304 	and.w	r3, r3, #4
 800915c:	2b00      	cmp	r3, #0
 800915e:	d121      	bne.n	80091a4 <follow_path+0xdc>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	799b      	ldrb	r3, [r3, #6]
 8009164:	f003 0310 	and.w	r3, r3, #16
 8009168:	2b00      	cmp	r3, #0
 800916a:	d102      	bne.n	8009172 <follow_path+0xaa>
				res = FR_NO_PATH; break;
 800916c:	2305      	movs	r3, #5
 800916e:	75fb      	strb	r3, [r7, #23]
 8009170:	e019      	b.n	80091a6 <follow_path+0xde>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	693a      	ldr	r2, [r7, #16]
 800917e:	8992      	ldrh	r2, [r2, #12]
 8009180:	fbb3 f0f2 	udiv	r0, r3, r2
 8009184:	fb00 f202 	mul.w	r2, r0, r2
 8009188:	1a9b      	subs	r3, r3, r2
 800918a:	440b      	add	r3, r1
 800918c:	4619      	mov	r1, r3
 800918e:	6938      	ldr	r0, [r7, #16]
 8009190:	f7ff fdfc 	bl	8008d8c <ld_clust>
 8009194:	4602      	mov	r2, r0
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800919a:	e7bb      	b.n	8009114 <follow_path+0x4c>
			if (res != FR_OK) break;
 800919c:	bf00      	nop
 800919e:	e002      	b.n	80091a6 <follow_path+0xde>
				break;
 80091a0:	bf00      	nop
 80091a2:	e000      	b.n	80091a6 <follow_path+0xde>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 80091a4:	bf00      	nop
			}
		}
	}

	return res;
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3718      	adds	r7, #24
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b08b      	sub	sp, #44	@ 0x2c
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 80091b8:	f04f 33ff 	mov.w	r3, #4294967295
 80091bc:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80091c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c6:	623b      	str	r3, [r7, #32]
	if (!tp) return vol;	/* Invalid path name? */
 80091c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d101      	bne.n	80091d2 <get_ldnumber+0x22>
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	e080      	b.n	80092d4 <get_ldnumber+0x124>
	do {					/* Find a colon in the path */
		tc = *tt++;
 80091d2:	6a3b      	ldr	r3, [r7, #32]
 80091d4:	1c5a      	adds	r2, r3, #1
 80091d6:	623a      	str	r2, [r7, #32]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	77fb      	strb	r3, [r7, #31]
	} while (!IsTerminator(tc) && tc != ':');
 80091dc:	7ffb      	ldrb	r3, [r7, #31]
 80091de:	2b20      	cmp	r3, #32
 80091e0:	d902      	bls.n	80091e8 <get_ldnumber+0x38>
 80091e2:	7ffb      	ldrb	r3, [r7, #31]
 80091e4:	2b3a      	cmp	r3, #58	@ 0x3a
 80091e6:	d1f4      	bne.n	80091d2 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 80091e8:	7ffb      	ldrb	r3, [r7, #31]
 80091ea:	2b3a      	cmp	r3, #58	@ 0x3a
 80091ec:	d11c      	bne.n	8009228 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 80091ee:	2302      	movs	r3, #2
 80091f0:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 80091f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	2b2f      	cmp	r3, #47	@ 0x2f
 80091f8:	d90c      	bls.n	8009214 <get_ldnumber+0x64>
 80091fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	2b39      	cmp	r3, #57	@ 0x39
 8009200:	d808      	bhi.n	8009214 <get_ldnumber+0x64>
 8009202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009204:	3302      	adds	r3, #2
 8009206:	6a3a      	ldr	r2, [r7, #32]
 8009208:	429a      	cmp	r2, r3
 800920a:	d103      	bne.n	8009214 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 800920c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	3b30      	subs	r3, #48	@ 0x30
 8009212:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	2b01      	cmp	r3, #1
 8009218:	dc04      	bgt.n	8009224 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a3a      	ldr	r2, [r7, #32]
 8009222:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	e055      	b.n	80092d4 <get_ldnumber+0x124>
	}
#if FF_STR_VOLUME_ID == 2		/* Unix style volume ID is enabled */
	if (*tp == '/') {			/* Is there a volume ID? */
 8009228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	2b2f      	cmp	r3, #47	@ 0x2f
 800922e:	d14e      	bne.n	80092ce <get_ldnumber+0x11e>
		while (*(tp + 1) == '/') tp++;	/* Skip duplicated separator */
 8009230:	e002      	b.n	8009238 <get_ldnumber+0x88>
 8009232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009234:	3301      	adds	r3, #1
 8009236:	627b      	str	r3, [r7, #36]	@ 0x24
 8009238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923a:	3301      	adds	r3, #1
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	2b2f      	cmp	r3, #47	@ 0x2f
 8009240:	d0f7      	beq.n	8009232 <get_ldnumber+0x82>
		i = 0;
 8009242:	2300      	movs	r3, #0
 8009244:	61bb      	str	r3, [r7, #24]
		do {
			tt = tp; sp = VolumeStr[i]; /* Path name and this string volume ID */
 8009246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009248:	623b      	str	r3, [r7, #32]
 800924a:	4a25      	ldr	r2, [pc, #148]	@ (80092e0 <get_ldnumber+0x130>)
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009252:	613b      	str	r3, [r7, #16]
			do {	/* Compare the volume ID with path name */
				c = *sp++; tc = *(++tt);
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	1c5a      	adds	r2, r3, #1
 8009258:	613a      	str	r2, [r7, #16]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	73fb      	strb	r3, [r7, #15]
 800925e:	6a3b      	ldr	r3, [r7, #32]
 8009260:	3301      	adds	r3, #1
 8009262:	623b      	str	r3, [r7, #32]
 8009264:	6a3b      	ldr	r3, [r7, #32]
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	77fb      	strb	r3, [r7, #31]
				if (IsLower(c)) c -= 0x20;
 800926a:	7bfb      	ldrb	r3, [r7, #15]
 800926c:	2b60      	cmp	r3, #96	@ 0x60
 800926e:	d905      	bls.n	800927c <get_ldnumber+0xcc>
 8009270:	7bfb      	ldrb	r3, [r7, #15]
 8009272:	2b7a      	cmp	r3, #122	@ 0x7a
 8009274:	d802      	bhi.n	800927c <get_ldnumber+0xcc>
 8009276:	7bfb      	ldrb	r3, [r7, #15]
 8009278:	3b20      	subs	r3, #32
 800927a:	73fb      	strb	r3, [r7, #15]
				if (IsLower(tc)) tc -= 0x20;
 800927c:	7ffb      	ldrb	r3, [r7, #31]
 800927e:	2b60      	cmp	r3, #96	@ 0x60
 8009280:	d905      	bls.n	800928e <get_ldnumber+0xde>
 8009282:	7ffb      	ldrb	r3, [r7, #31]
 8009284:	2b7a      	cmp	r3, #122	@ 0x7a
 8009286:	d802      	bhi.n	800928e <get_ldnumber+0xde>
 8009288:	7ffb      	ldrb	r3, [r7, #31]
 800928a:	3b20      	subs	r3, #32
 800928c:	77fb      	strb	r3, [r7, #31]
			} while (c && (TCHAR)c == tc);
 800928e:	7bfb      	ldrb	r3, [r7, #15]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d003      	beq.n	800929c <get_ldnumber+0xec>
 8009294:	7bfa      	ldrb	r2, [r7, #15]
 8009296:	7ffb      	ldrb	r3, [r7, #31]
 8009298:	429a      	cmp	r2, r3
 800929a:	d0db      	beq.n	8009254 <get_ldnumber+0xa4>
		} while ((c || (tc != '/' && !IsTerminator(tc))) && ++i < FF_VOLUMES);	/* Repeat for each ID until pattern match */
 800929c:	7bfb      	ldrb	r3, [r7, #15]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d105      	bne.n	80092ae <get_ldnumber+0xfe>
 80092a2:	7ffb      	ldrb	r3, [r7, #31]
 80092a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80092a6:	d008      	beq.n	80092ba <get_ldnumber+0x10a>
 80092a8:	7ffb      	ldrb	r3, [r7, #31]
 80092aa:	2b20      	cmp	r3, #32
 80092ac:	d905      	bls.n	80092ba <get_ldnumber+0x10a>
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	3301      	adds	r3, #1
 80092b2:	61bb      	str	r3, [r7, #24]
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	ddc5      	ble.n	8009246 <get_ldnumber+0x96>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	dc04      	bgt.n	80092ca <get_ldnumber+0x11a>
			vol = i;		/* Drive number */
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a3a      	ldr	r2, [r7, #32]
 80092c8:	601a      	str	r2, [r3, #0]
		}
		return vol;
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	e002      	b.n	80092d4 <get_ldnumber+0x124>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 80092ce:	2300      	movs	r3, #0
 80092d0:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 80092d2:	697b      	ldr	r3, [r7, #20]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	372c      	adds	r7, #44	@ 0x2c
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr
 80092e0:	2000026c 	.word	0x2000026c

080092e4 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	711a      	strb	r2, [r3, #4]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f04f 32ff 	mov.w	r2, #4294967295
 80092fa:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 80092fc:	6839      	ldr	r1, [r7, #0]
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f7fe ffa9 	bl	8008256 <move_window>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <check_fs+0x2a>
 800930a:	2304      	movs	r3, #4
 800930c:	e088      	b.n	8009420 <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	3334      	adds	r3, #52	@ 0x34
 8009312:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009316:	4618      	mov	r0, r3
 8009318:	f7fe febc 	bl	8008094 <ld_word>
 800931c:	4603      	mov	r3, r0
 800931e:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009326:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 8009328:	7b7b      	ldrb	r3, [r7, #13]
 800932a:	2beb      	cmp	r3, #235	@ 0xeb
 800932c:	d005      	beq.n	800933a <check_fs+0x56>
 800932e:	7b7b      	ldrb	r3, [r7, #13]
 8009330:	2be9      	cmp	r3, #233	@ 0xe9
 8009332:	d002      	beq.n	800933a <check_fs+0x56>
 8009334:	7b7b      	ldrb	r3, [r7, #13]
 8009336:	2be8      	cmp	r3, #232	@ 0xe8
 8009338:	d16a      	bne.n	8009410 <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 800933a:	89fb      	ldrh	r3, [r7, #14]
 800933c:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8009340:	4293      	cmp	r3, r2
 8009342:	d10c      	bne.n	800935e <check_fs+0x7a>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	3334      	adds	r3, #52	@ 0x34
 8009348:	3352      	adds	r3, #82	@ 0x52
 800934a:	2208      	movs	r2, #8
 800934c:	4936      	ldr	r1, [pc, #216]	@ (8009428 <check_fs+0x144>)
 800934e:	4618      	mov	r0, r3
 8009350:	f00c ff2c 	bl	80161ac <memcmp>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d101      	bne.n	800935e <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 800935a:	2300      	movs	r3, #0
 800935c:	e060      	b.n	8009420 <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	3334      	adds	r3, #52	@ 0x34
 8009362:	330b      	adds	r3, #11
 8009364:	4618      	mov	r0, r3
 8009366:	f7fe fe95 	bl	8008094 <ld_word>
 800936a:	4603      	mov	r3, r0
 800936c:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009374:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 8009376:	897a      	ldrh	r2, [r7, #10]
 8009378:	897b      	ldrh	r3, [r7, #10]
 800937a:	3b01      	subs	r3, #1
 800937c:	4013      	ands	r3, r2
 800937e:	2b00      	cmp	r3, #0
 8009380:	d146      	bne.n	8009410 <check_fs+0x12c>
 8009382:	897b      	ldrh	r3, [r7, #10]
 8009384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009388:	d342      	bcc.n	8009410 <check_fs+0x12c>
 800938a:	897b      	ldrh	r3, [r7, #10]
 800938c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009390:	d83e      	bhi.n	8009410 <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 8009392:	7b7b      	ldrb	r3, [r7, #13]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d03b      	beq.n	8009410 <check_fs+0x12c>
 8009398:	7b7a      	ldrb	r2, [r7, #13]
 800939a:	7b7b      	ldrb	r3, [r7, #13]
 800939c:	3b01      	subs	r3, #1
 800939e:	4013      	ands	r3, r2
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d135      	bne.n	8009410 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	3334      	adds	r3, #52	@ 0x34
 80093a8:	330e      	adds	r3, #14
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fe fe72 	bl	8008094 <ld_word>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d02c      	beq.n	8009410 <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80093bc:	3b01      	subs	r3, #1
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d826      	bhi.n	8009410 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	3334      	adds	r3, #52	@ 0x34
 80093c6:	3311      	adds	r3, #17
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7fe fe63 	bl	8008094 <ld_word>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d01d      	beq.n	8009410 <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	3334      	adds	r3, #52	@ 0x34
 80093d8:	3313      	adds	r3, #19
 80093da:	4618      	mov	r0, r3
 80093dc:	f7fe fe5a 	bl	8008094 <ld_word>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80093e4:	d809      	bhi.n	80093fa <check_fs+0x116>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	3334      	adds	r3, #52	@ 0x34
 80093ea:	3320      	adds	r3, #32
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7fe fe6a 	bl	80080c6 <ld_dword>
 80093f2:	4603      	mov	r3, r0
 80093f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093f8:	d30a      	bcc.n	8009410 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	3334      	adds	r3, #52	@ 0x34
 80093fe:	3316      	adds	r3, #22
 8009400:	4618      	mov	r0, r3
 8009402:	f7fe fe47 	bl	8008094 <ld_word>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d001      	beq.n	8009410 <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 800940c:	2300      	movs	r3, #0
 800940e:	e007      	b.n	8009420 <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 8009410:	89fb      	ldrh	r3, [r7, #14]
 8009412:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8009416:	4293      	cmp	r3, r2
 8009418:	d101      	bne.n	800941e <check_fs+0x13a>
 800941a:	2302      	movs	r3, #2
 800941c:	e000      	b.n	8009420 <check_fs+0x13c>
 800941e:	2303      	movs	r3, #3
}
 8009420:	4618      	mov	r0, r3
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	080178b8 	.word	0x080178b8

0800942c <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b088      	sub	sp, #32
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 8009436:	2100      	movs	r1, #0
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7ff ff53 	bl	80092e4 <check_fs>
 800943e:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	2b02      	cmp	r3, #2
 8009444:	d007      	beq.n	8009456 <find_volume+0x2a>
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	2b02      	cmp	r3, #2
 800944a:	d802      	bhi.n	8009452 <find_volume+0x26>
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d101      	bne.n	8009456 <find_volume+0x2a>
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	e045      	b.n	80094e2 <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8009456:	2300      	movs	r3, #0
 8009458:	61fb      	str	r3, [r7, #28]
 800945a:	e014      	b.n	8009486 <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	011b      	lsls	r3, r3, #4
 8009466:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 800946a:	4413      	add	r3, r2
 800946c:	4618      	mov	r0, r3
 800946e:	f7fe fe2a 	bl	80080c6 <ld_dword>
 8009472:	4602      	mov	r2, r0
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	3320      	adds	r3, #32
 800947a:	443b      	add	r3, r7
 800947c:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	3301      	adds	r3, #1
 8009484:	61fb      	str	r3, [r7, #28]
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	2b03      	cmp	r3, #3
 800948a:	d9e7      	bls.n	800945c <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d002      	beq.n	8009498 <find_volume+0x6c>
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	3b01      	subs	r3, #1
 8009496:	e000      	b.n	800949a <find_volume+0x6e>
 8009498:	2300      	movs	r3, #0
 800949a:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	3320      	adds	r3, #32
 80094a2:	443b      	add	r3, r7
 80094a4:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00b      	beq.n	80094c4 <find_volume+0x98>
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	3320      	adds	r3, #32
 80094b2:	443b      	add	r3, r7
 80094b4:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80094b8:	4619      	mov	r1, r3
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f7ff ff12 	bl	80092e4 <check_fs>
 80094c0:	4603      	mov	r3, r0
 80094c2:	e000      	b.n	80094c6 <find_volume+0x9a>
 80094c4:	2303      	movs	r3, #3
 80094c6:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d108      	bne.n	80094e0 <find_volume+0xb4>
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d905      	bls.n	80094e0 <find_volume+0xb4>
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	3301      	adds	r3, #1
 80094d8:	61fb      	str	r3, [r7, #28]
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	2b03      	cmp	r3, #3
 80094de:	d9dd      	bls.n	800949c <find_volume+0x70>
	return fmt;
 80094e0:	69bb      	ldr	r3, [r7, #24]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3720      	adds	r7, #32
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
	...

080094ec <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b090      	sub	sp, #64	@ 0x40
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	4613      	mov	r3, r2
 80094f8:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	2200      	movs	r2, #0
 80094fe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f7ff fe55 	bl	80091b0 <get_ldnumber>
 8009506:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800950a:	2b00      	cmp	r3, #0
 800950c:	da01      	bge.n	8009512 <mount_volume+0x26>
 800950e:	230b      	movs	r3, #11
 8009510:	e207      	b.n	8009922 <mount_volume+0x436>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8009512:	4aa2      	ldr	r2, [pc, #648]	@ (800979c <mount_volume+0x2b0>)
 8009514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800951a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800951c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951e:	2b00      	cmp	r3, #0
 8009520:	d101      	bne.n	8009526 <mount_volume+0x3a>
 8009522:	230c      	movs	r3, #12
 8009524:	e1fd      	b.n	8009922 <mount_volume+0x436>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800952a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800952c:	79fb      	ldrb	r3, [r7, #7]
 800952e:	f023 0301 	bic.w	r3, r3, #1
 8009532:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8009534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d01a      	beq.n	8009572 <mount_volume+0x86>
		stat = disk_status(fs->pdrv);
 800953c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800953e:	785b      	ldrb	r3, [r3, #1]
 8009540:	4618      	mov	r0, r3
 8009542:	f7fe fc6f 	bl	8007e24 <disk_status>
 8009546:	4603      	mov	r3, r0
 8009548:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800954c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009550:	f003 0301 	and.w	r3, r3, #1
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10c      	bne.n	8009572 <mount_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009558:	79fb      	ldrb	r3, [r7, #7]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d007      	beq.n	800956e <mount_volume+0x82>
 800955e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009562:	f003 0304 	and.w	r3, r3, #4
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <mount_volume+0x82>
				return FR_WRITE_PROTECTED;
 800956a:	230a      	movs	r3, #10
 800956c:	e1d9      	b.n	8009922 <mount_volume+0x436>
			}
			return FR_OK;				/* The filesystem object is already valid */
 800956e:	2300      	movs	r3, #0
 8009570:	e1d7      	b.n	8009922 <mount_volume+0x436>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 8009572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009574:	2200      	movs	r2, #0
 8009576:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8009578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800957a:	785b      	ldrb	r3, [r3, #1]
 800957c:	4618      	mov	r0, r3
 800957e:	f7fe fc79 	bl	8007e74 <disk_initialize>
 8009582:	4603      	mov	r3, r0
 8009584:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009588:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800958c:	f003 0301 	and.w	r3, r3, #1
 8009590:	2b00      	cmp	r3, #0
 8009592:	d001      	beq.n	8009598 <mount_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009594:	2303      	movs	r3, #3
 8009596:	e1c4      	b.n	8009922 <mount_volume+0x436>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009598:	79fb      	ldrb	r3, [r7, #7]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d007      	beq.n	80095ae <mount_volume+0xc2>
 800959e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095a2:	f003 0304 	and.w	r3, r3, #4
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <mount_volume+0xc2>
		return FR_WRITE_PROTECTED;
 80095aa:	230a      	movs	r3, #10
 80095ac:	e1b9      	b.n	8009922 <mount_volume+0x436>
	}
#if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80095ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b0:	7858      	ldrb	r0, [r3, #1]
 80095b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b4:	330c      	adds	r3, #12
 80095b6:	461a      	mov	r2, r3
 80095b8:	2102      	movs	r1, #2
 80095ba:	f7fe fce9 	bl	8007f90 <disk_ioctl>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d001      	beq.n	80095c8 <mount_volume+0xdc>
 80095c4:	2301      	movs	r3, #1
 80095c6:	e1ac      	b.n	8009922 <mount_volume+0x436>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80095c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ca:	899b      	ldrh	r3, [r3, #12]
 80095cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095d0:	d80d      	bhi.n	80095ee <mount_volume+0x102>
 80095d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d4:	899b      	ldrh	r3, [r3, #12]
 80095d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095da:	d308      	bcc.n	80095ee <mount_volume+0x102>
 80095dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095de:	899b      	ldrh	r3, [r3, #12]
 80095e0:	461a      	mov	r2, r3
 80095e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e4:	899b      	ldrh	r3, [r3, #12]
 80095e6:	3b01      	subs	r3, #1
 80095e8:	4013      	ands	r3, r2
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d001      	beq.n	80095f2 <mount_volume+0x106>
 80095ee:	2301      	movs	r3, #1
 80095f0:	e197      	b.n	8009922 <mount_volume+0x436>
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 80095f2:	2100      	movs	r1, #0
 80095f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095f6:	f7ff ff19 	bl	800942c <find_volume>
 80095fa:	6338      	str	r0, [r7, #48]	@ 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 80095fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fe:	2b04      	cmp	r3, #4
 8009600:	d101      	bne.n	8009606 <mount_volume+0x11a>
 8009602:	2301      	movs	r3, #1
 8009604:	e18d      	b.n	8009922 <mount_volume+0x436>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009608:	2b01      	cmp	r3, #1
 800960a:	d901      	bls.n	8009610 <mount_volume+0x124>
 800960c:	230d      	movs	r3, #13
 800960e:	e188      	b.n	8009922 <mount_volume+0x436>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 8009610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009614:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009618:	3334      	adds	r3, #52	@ 0x34
 800961a:	330b      	adds	r3, #11
 800961c:	4618      	mov	r0, r3
 800961e:	f7fe fd39 	bl	8008094 <ld_word>
 8009622:	4603      	mov	r3, r0
 8009624:	461a      	mov	r2, r3
 8009626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009628:	899b      	ldrh	r3, [r3, #12]
 800962a:	429a      	cmp	r2, r3
 800962c:	d001      	beq.n	8009632 <mount_volume+0x146>
 800962e:	230d      	movs	r3, #13
 8009630:	e177      	b.n	8009922 <mount_volume+0x436>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009634:	3334      	adds	r3, #52	@ 0x34
 8009636:	3316      	adds	r3, #22
 8009638:	4618      	mov	r0, r3
 800963a:	f7fe fd2b 	bl	8008094 <ld_word>
 800963e:	4603      	mov	r3, r0
 8009640:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009644:	2b00      	cmp	r3, #0
 8009646:	d106      	bne.n	8009656 <mount_volume+0x16a>
 8009648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800964a:	3334      	adds	r3, #52	@ 0x34
 800964c:	3324      	adds	r3, #36	@ 0x24
 800964e:	4618      	mov	r0, r3
 8009650:	f7fe fd39 	bl	80080c6 <ld_dword>
 8009654:	63b8      	str	r0, [r7, #56]	@ 0x38
		fs->fsize = fasize;
 8009656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009658:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800965a:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800965c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800965e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009664:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009668:	78db      	ldrb	r3, [r3, #3]
 800966a:	2b01      	cmp	r3, #1
 800966c:	d005      	beq.n	800967a <mount_volume+0x18e>
 800966e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009670:	78db      	ldrb	r3, [r3, #3]
 8009672:	2b02      	cmp	r3, #2
 8009674:	d001      	beq.n	800967a <mount_volume+0x18e>
 8009676:	230d      	movs	r3, #13
 8009678:	e153      	b.n	8009922 <mount_volume+0x436>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800967a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800967c:	78db      	ldrb	r3, [r3, #3]
 800967e:	461a      	mov	r2, r3
 8009680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009682:	fb02 f303 	mul.w	r3, r2, r3
 8009686:	63bb      	str	r3, [r7, #56]	@ 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800968a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800968e:	461a      	mov	r2, r3
 8009690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009692:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009696:	895b      	ldrh	r3, [r3, #10]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d008      	beq.n	80096ae <mount_volume+0x1c2>
 800969c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969e:	895b      	ldrh	r3, [r3, #10]
 80096a0:	461a      	mov	r2, r3
 80096a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a4:	895b      	ldrh	r3, [r3, #10]
 80096a6:	3b01      	subs	r3, #1
 80096a8:	4013      	ands	r3, r2
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d001      	beq.n	80096b2 <mount_volume+0x1c6>
 80096ae:	230d      	movs	r3, #13
 80096b0:	e137      	b.n	8009922 <mount_volume+0x436>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80096b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b4:	3334      	adds	r3, #52	@ 0x34
 80096b6:	3311      	adds	r3, #17
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7fe fceb 	bl	8008094 <ld_word>
 80096be:	4603      	mov	r3, r0
 80096c0:	461a      	mov	r2, r3
 80096c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c4:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80096c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c8:	891b      	ldrh	r3, [r3, #8]
 80096ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096cc:	8992      	ldrh	r2, [r2, #12]
 80096ce:	0952      	lsrs	r2, r2, #5
 80096d0:	b292      	uxth	r2, r2
 80096d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80096d6:	fb01 f202 	mul.w	r2, r1, r2
 80096da:	1a9b      	subs	r3, r3, r2
 80096dc:	b29b      	uxth	r3, r3
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <mount_volume+0x1fa>
 80096e2:	230d      	movs	r3, #13
 80096e4:	e11d      	b.n	8009922 <mount_volume+0x436>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80096e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096e8:	3334      	adds	r3, #52	@ 0x34
 80096ea:	3313      	adds	r3, #19
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fe fcd1 	bl	8008094 <ld_word>
 80096f2:	4603      	mov	r3, r0
 80096f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80096f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d106      	bne.n	800970a <mount_volume+0x21e>
 80096fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096fe:	3334      	adds	r3, #52	@ 0x34
 8009700:	3320      	adds	r3, #32
 8009702:	4618      	mov	r0, r3
 8009704:	f7fe fcdf 	bl	80080c6 <ld_dword>
 8009708:	63f8      	str	r0, [r7, #60]	@ 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800970a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800970c:	3334      	adds	r3, #52	@ 0x34
 800970e:	330e      	adds	r3, #14
 8009710:	4618      	mov	r0, r3
 8009712:	f7fe fcbf 	bl	8008094 <ld_word>
 8009716:	4603      	mov	r3, r0
 8009718:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800971a:	8bfb      	ldrh	r3, [r7, #30]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d101      	bne.n	8009724 <mount_volume+0x238>
 8009720:	230d      	movs	r3, #13
 8009722:	e0fe      	b.n	8009922 <mount_volume+0x436>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009724:	8bfa      	ldrh	r2, [r7, #30]
 8009726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009728:	4413      	add	r3, r2
 800972a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800972c:	8911      	ldrh	r1, [r2, #8]
 800972e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009730:	8992      	ldrh	r2, [r2, #12]
 8009732:	0952      	lsrs	r2, r2, #5
 8009734:	b292      	uxth	r2, r2
 8009736:	fbb1 f2f2 	udiv	r2, r1, r2
 800973a:	b292      	uxth	r2, r2
 800973c:	4413      	add	r3, r2
 800973e:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009740:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	429a      	cmp	r2, r3
 8009746:	d201      	bcs.n	800974c <mount_volume+0x260>
 8009748:	230d      	movs	r3, #13
 800974a:	e0ea      	b.n	8009922 <mount_volume+0x436>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800974c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009754:	8952      	ldrh	r2, [r2, #10]
 8009756:	fbb3 f3f2 	udiv	r3, r3, r2
 800975a:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d101      	bne.n	8009766 <mount_volume+0x27a>
 8009762:	230d      	movs	r3, #13
 8009764:	e0dd      	b.n	8009922 <mount_volume+0x436>
		fmt = 0;
 8009766:	2300      	movs	r3, #0
 8009768:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	4a0c      	ldr	r2, [pc, #48]	@ (80097a0 <mount_volume+0x2b4>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d801      	bhi.n	8009776 <mount_volume+0x28a>
 8009772:	2303      	movs	r3, #3
 8009774:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800977c:	4293      	cmp	r3, r2
 800977e:	d801      	bhi.n	8009784 <mount_volume+0x298>
 8009780:	2302      	movs	r3, #2
 8009782:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800978a:	4293      	cmp	r3, r2
 800978c:	d801      	bhi.n	8009792 <mount_volume+0x2a6>
 800978e:	2301      	movs	r3, #1
 8009790:	633b      	str	r3, [r7, #48]	@ 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8009792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009794:	2b00      	cmp	r3, #0
 8009796:	d105      	bne.n	80097a4 <mount_volume+0x2b8>
 8009798:	230d      	movs	r3, #13
 800979a:	e0c2      	b.n	8009922 <mount_volume+0x436>
 800979c:	20005e00 	.word	0x20005e00
 80097a0:	0ffffff5 	.word	0x0ffffff5

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	1c9a      	adds	r2, r3, #2
 80097a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097aa:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80097ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ae:	6a3a      	ldr	r2, [r7, #32]
 80097b0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80097b2:	8bfa      	ldrh	r2, [r7, #30]
 80097b4:	6a3b      	ldr	r3, [r7, #32]
 80097b6:	441a      	add	r2, r3
 80097b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ba:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80097bc:	6a3a      	ldr	r2, [r7, #32]
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	441a      	add	r2, r3
 80097c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097c4:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 80097c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c8:	2b03      	cmp	r3, #3
 80097ca:	d11e      	bne.n	800980a <mount_volume+0x31e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80097cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ce:	3334      	adds	r3, #52	@ 0x34
 80097d0:	332a      	adds	r3, #42	@ 0x2a
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fe fc5e 	bl	8008094 <ld_word>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <mount_volume+0x2f6>
 80097de:	230d      	movs	r3, #13
 80097e0:	e09f      	b.n	8009922 <mount_volume+0x436>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80097e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e4:	891b      	ldrh	r3, [r3, #8]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d001      	beq.n	80097ee <mount_volume+0x302>
 80097ea:	230d      	movs	r3, #13
 80097ec:	e099      	b.n	8009922 <mount_volume+0x436>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80097ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f0:	3334      	adds	r3, #52	@ 0x34
 80097f2:	332c      	adds	r3, #44	@ 0x2c
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7fe fc66 	bl	80080c6 <ld_dword>
 80097fa:	4602      	mov	r2, r0
 80097fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097fe:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009802:	699b      	ldr	r3, [r3, #24]
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	637b      	str	r3, [r7, #52]	@ 0x34
 8009808:	e01e      	b.n	8009848 <mount_volume+0x35c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800980a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800980c:	891b      	ldrh	r3, [r3, #8]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d101      	bne.n	8009816 <mount_volume+0x32a>
 8009812:	230d      	movs	r3, #13
 8009814:	e085      	b.n	8009922 <mount_volume+0x436>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009818:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800981a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800981c:	441a      	add	r2, r3
 800981e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009820:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009824:	2b02      	cmp	r3, #2
 8009826:	d103      	bne.n	8009830 <mount_volume+0x344>
 8009828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	005b      	lsls	r3, r3, #1
 800982e:	e00a      	b.n	8009846 <mount_volume+0x35a>
 8009830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009832:	699a      	ldr	r2, [r3, #24]
 8009834:	4613      	mov	r3, r2
 8009836:	005b      	lsls	r3, r3, #1
 8009838:	4413      	add	r3, r2
 800983a:	085a      	lsrs	r2, r3, #1
 800983c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	f003 0301 	and.w	r3, r3, #1
 8009844:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009846:	637b      	str	r3, [r7, #52]	@ 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800984a:	69da      	ldr	r2, [r3, #28]
 800984c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800984e:	899b      	ldrh	r3, [r3, #12]
 8009850:	4619      	mov	r1, r3
 8009852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009854:	440b      	add	r3, r1
 8009856:	3b01      	subs	r3, #1
 8009858:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800985a:	8989      	ldrh	r1, [r1, #12]
 800985c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009860:	429a      	cmp	r2, r3
 8009862:	d201      	bcs.n	8009868 <mount_volume+0x37c>
 8009864:	230d      	movs	r3, #13
 8009866:	e05c      	b.n	8009922 <mount_volume+0x436>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800986a:	f04f 32ff 	mov.w	r2, #4294967295
 800986e:	615a      	str	r2, [r3, #20]
 8009870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009872:	695a      	ldr	r2, [r3, #20]
 8009874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009876:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800987a:	2280      	movs	r2, #128	@ 0x80
 800987c:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800987e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009880:	2b03      	cmp	r3, #3
 8009882:	d13f      	bne.n	8009904 <mount_volume+0x418>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009886:	3334      	adds	r3, #52	@ 0x34
 8009888:	3330      	adds	r3, #48	@ 0x30
 800988a:	4618      	mov	r0, r3
 800988c:	f7fe fc02 	bl	8008094 <ld_word>
 8009890:	4603      	mov	r3, r0
 8009892:	2b01      	cmp	r3, #1
 8009894:	d136      	bne.n	8009904 <mount_volume+0x418>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009896:	6a3b      	ldr	r3, [r7, #32]
 8009898:	3301      	adds	r3, #1
 800989a:	4619      	mov	r1, r3
 800989c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800989e:	f7fe fcda 	bl	8008256 <move_window>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d12d      	bne.n	8009904 <mount_volume+0x418>
		{
			fs->fsi_flag = 0;
 80098a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098aa:	2200      	movs	r2, #0
 80098ac:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 80098ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b0:	3334      	adds	r3, #52	@ 0x34
 80098b2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7fe fbec 	bl	8008094 <ld_word>
 80098bc:	4603      	mov	r3, r0
 80098be:	461a      	mov	r2, r3
 80098c0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d11d      	bne.n	8009904 <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80098c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ca:	3334      	adds	r3, #52	@ 0x34
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7fe fbfa 	bl	80080c6 <ld_dword>
 80098d2:	4603      	mov	r3, r0
 80098d4:	4a15      	ldr	r2, [pc, #84]	@ (800992c <mount_volume+0x440>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d114      	bne.n	8009904 <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80098da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098dc:	3334      	adds	r3, #52	@ 0x34
 80098de:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7fe fbef 	bl	80080c6 <ld_dword>
 80098e8:	4603      	mov	r3, r0
 80098ea:	4a11      	ldr	r2, [pc, #68]	@ (8009930 <mount_volume+0x444>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d109      	bne.n	8009904 <mount_volume+0x418>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80098f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f2:	3334      	adds	r3, #52	@ 0x34
 80098f4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7fe fbe4 	bl	80080c6 <ld_dword>
 80098fe:	4602      	mov	r2, r0
 8009900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009902:	611a      	str	r2, [r3, #16]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 8009904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009906:	b2da      	uxtb	r2, r3
 8009908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800990a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800990c:	4b09      	ldr	r3, [pc, #36]	@ (8009934 <mount_volume+0x448>)
 800990e:	881b      	ldrh	r3, [r3, #0]
 8009910:	3301      	adds	r3, #1
 8009912:	b29a      	uxth	r2, r3
 8009914:	4b07      	ldr	r3, [pc, #28]	@ (8009934 <mount_volume+0x448>)
 8009916:	801a      	strh	r2, [r3, #0]
 8009918:	4b06      	ldr	r3, [pc, #24]	@ (8009934 <mount_volume+0x448>)
 800991a:	881a      	ldrh	r2, [r3, #0]
 800991c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991e:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	3740      	adds	r7, #64	@ 0x40
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	41615252 	.word	0x41615252
 8009930:	61417272 	.word	0x61417272
 8009934:	20005e08 	.word	0x20005e08

08009938 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009942:	2309      	movs	r3, #9
 8009944:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d01c      	beq.n	8009986 <validate+0x4e>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d018      	beq.n	8009986 <validate+0x4e>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d013      	beq.n	8009986 <validate+0x4e>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	889a      	ldrh	r2, [r3, #4]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	88db      	ldrh	r3, [r3, #6]
 8009968:	429a      	cmp	r2, r3
 800996a:	d10c      	bne.n	8009986 <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	785b      	ldrb	r3, [r3, #1]
 8009972:	4618      	mov	r0, r3
 8009974:	f7fe fa56 	bl	8007e24 <disk_status>
 8009978:	4603      	mov	r3, r0
 800997a:	f003 0301 	and.w	r3, r3, #1
 800997e:	2b00      	cmp	r3, #0
 8009980:	d101      	bne.n	8009986 <validate+0x4e>
			res = FR_OK;
 8009982:	2300      	movs	r3, #0
 8009984:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 8009986:	7bfb      	ldrb	r3, [r7, #15]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d102      	bne.n	8009992 <validate+0x5a>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	e000      	b.n	8009994 <validate+0x5c>
 8009992:	2300      	movs	r3, #0
 8009994:	683a      	ldr	r2, [r7, #0]
 8009996:	6013      	str	r3, [r2, #0]
	return res;
 8009998:	7bfb      	ldrb	r3, [r7, #15]
}
 800999a:	4618      	mov	r0, r3
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
	...

080099a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b088      	sub	sp, #32
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	4613      	mov	r3, r2
 80099b0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 80099b6:	f107 0310 	add.w	r3, r7, #16
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7ff fbf8 	bl	80091b0 <get_ldnumber>
 80099c0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80099c2:	69fb      	ldr	r3, [r7, #28]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	da01      	bge.n	80099cc <f_mount+0x28>
 80099c8:	230b      	movs	r3, #11
 80099ca:	e02e      	b.n	8009a2a <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 80099cc:	4a19      	ldr	r2, [pc, #100]	@ (8009a34 <f_mount+0x90>)
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099d4:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d007      	beq.n	80099ec <f_mount+0x48>
		FatFs[vol] = 0;
 80099dc:	4a15      	ldr	r2, [pc, #84]	@ (8009a34 <f_mount+0x90>)
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	2100      	movs	r1, #0
 80099e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	2200      	movs	r2, #0
 80099ea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00b      	beq.n	8009a0a <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	69fa      	ldr	r2, [r7, #28]
 80099f6:	b2d2      	uxtb	r2, r2
 80099f8:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2200      	movs	r2, #0
 80099fe:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	490c      	ldr	r1, [pc, #48]	@ (8009a34 <f_mount+0x90>)
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 8009a0a:	79fb      	ldrb	r3, [r7, #7]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d101      	bne.n	8009a14 <f_mount+0x70>
 8009a10:	2300      	movs	r3, #0
 8009a12:	e00a      	b.n	8009a2a <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009a14:	f107 010c 	add.w	r1, r7, #12
 8009a18:	f107 0308 	add.w	r3, r7, #8
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7ff fd64 	bl	80094ec <mount_volume>
 8009a24:	4603      	mov	r3, r0
 8009a26:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3720      	adds	r7, #32
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	20005e00 	.word	0x20005e00

08009a38 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b098      	sub	sp, #96	@ 0x60
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	4613      	mov	r3, r2
 8009a44:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d101      	bne.n	8009a50 <f_open+0x18>
 8009a4c:	2309      	movs	r3, #9
 8009a4e:	e184      	b.n	8009d5a <f_open+0x322>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8009a50:	79fb      	ldrb	r3, [r7, #7]
 8009a52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a56:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 8009a58:	79fa      	ldrb	r2, [r7, #7]
 8009a5a:	f107 0114 	add.w	r1, r7, #20
 8009a5e:	f107 0308 	add.w	r3, r7, #8
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7ff fd42 	bl	80094ec <mount_volume>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8009a6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f040 8168 	bne.w	8009d48 <f_open+0x310>
		dj.obj.fs = fs;
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009a7c:	68ba      	ldr	r2, [r7, #8]
 8009a7e:	f107 0318 	add.w	r3, r7, #24
 8009a82:	4611      	mov	r1, r2
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7ff fb1f 	bl	80090c8 <follow_path>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8009a90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d107      	bne.n	8009aa8 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009a98:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009a9c:	b25b      	sxtb	r3, r3
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	da02      	bge.n	8009aa8 <f_open+0x70>
				res = FR_INVALID_NAME;
 8009aa2:	2306      	movs	r3, #6
 8009aa4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009aa8:	79fb      	ldrb	r3, [r7, #7]
 8009aaa:	f003 031c 	and.w	r3, r3, #28
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d077      	beq.n	8009ba2 <f_open+0x16a>
			if (res != FR_OK) {					/* No file, create new */
 8009ab2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d010      	beq.n	8009adc <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009aba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009abe:	2b04      	cmp	r3, #4
 8009ac0:	d107      	bne.n	8009ad2 <f_open+0x9a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8009ac2:	f107 0318 	add.w	r3, r7, #24
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7ff f9f4 	bl	8008eb4 <dir_register>
 8009acc:	4603      	mov	r3, r0
 8009ace:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009ad2:	79fb      	ldrb	r3, [r7, #7]
 8009ad4:	f043 0308 	orr.w	r3, r3, #8
 8009ad8:	71fb      	strb	r3, [r7, #7]
 8009ada:	e010      	b.n	8009afe <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009adc:	7fbb      	ldrb	r3, [r7, #30]
 8009ade:	f003 0311 	and.w	r3, r3, #17
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d003      	beq.n	8009aee <f_open+0xb6>
					res = FR_DENIED;
 8009ae6:	2307      	movs	r3, #7
 8009ae8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009aec:	e007      	b.n	8009afe <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009aee:	79fb      	ldrb	r3, [r7, #7]
 8009af0:	f003 0304 	and.w	r3, r3, #4
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d002      	beq.n	8009afe <f_open+0xc6>
 8009af8:	2308      	movs	r3, #8
 8009afa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8009afe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d167      	bne.n	8009bd6 <f_open+0x19e>
 8009b06:	79fb      	ldrb	r3, [r7, #7]
 8009b08:	f003 0308 	and.w	r3, r3, #8
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d062      	beq.n	8009bd6 <f_open+0x19e>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 8009b10:	4b94      	ldr	r3, [pc, #592]	@ (8009d64 <f_open+0x32c>)
 8009b12:	653b      	str	r3, [r7, #80]	@ 0x50
					st_dword(dj.dir + DIR_CrtTime, tm);
 8009b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b16:	330e      	adds	r3, #14
 8009b18:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7fe fb11 	bl	8008142 <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 8009b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b22:	3316      	adds	r3, #22
 8009b24:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7fe fb0b 	bl	8008142 <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b30:	4611      	mov	r1, r2
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7ff f92a 	bl	8008d8c <ld_clust>
 8009b38:	64f8      	str	r0, [r7, #76]	@ 0x4c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b3c:	330b      	adds	r3, #11
 8009b3e:	2220      	movs	r2, #32
 8009b40:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009b46:	2200      	movs	r2, #0
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7ff f93e 	bl	8008dca <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b50:	331c      	adds	r3, #28
 8009b52:	2100      	movs	r1, #0
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7fe faf4 	bl	8008142 <st_dword>
					fs->wflag = 1;
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8009b60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d037      	beq.n	8009bd6 <f_open+0x19e>
						sc = fs->winsect;
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
						res = remove_chain(&dj.obj, cl, 0);
 8009b6c:	f107 0318 	add.w	r3, r7, #24
 8009b70:	2200      	movs	r2, #0
 8009b72:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7fe fe15 	bl	80087a4 <remove_chain>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8009b80:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d126      	bne.n	8009bd6 <f_open+0x19e>
							res = move_window(fs, sc);
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7fe fb62 	bl	8008256 <move_window>
 8009b92:	4603      	mov	r3, r0
 8009b94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009b9c:	3a01      	subs	r2, #1
 8009b9e:	611a      	str	r2, [r3, #16]
 8009ba0:	e019      	b.n	8009bd6 <f_open+0x19e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8009ba2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d115      	bne.n	8009bd6 <f_open+0x19e>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8009baa:	7fbb      	ldrb	r3, [r7, #30]
 8009bac:	f003 0310 	and.w	r3, r3, #16
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d003      	beq.n	8009bbc <f_open+0x184>
					res = FR_NO_FILE;
 8009bb4:	2304      	movs	r3, #4
 8009bb6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009bba:	e00c      	b.n	8009bd6 <f_open+0x19e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8009bbc:	79fb      	ldrb	r3, [r7, #7]
 8009bbe:	f003 0302 	and.w	r3, r3, #2
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d007      	beq.n	8009bd6 <f_open+0x19e>
 8009bc6:	7fbb      	ldrb	r3, [r7, #30]
 8009bc8:	f003 0301 	and.w	r3, r3, #1
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d002      	beq.n	8009bd6 <f_open+0x19e>
						res = FR_DENIED;
 8009bd0:	2307      	movs	r3, #7
 8009bd2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009bd6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d10f      	bne.n	8009bfe <f_open+0x1c6>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8009bde:	79fb      	ldrb	r3, [r7, #7]
 8009be0:	f003 0308 	and.w	r3, r3, #8
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d003      	beq.n	8009bf0 <f_open+0x1b8>
 8009be8:	79fb      	ldrb	r3, [r7, #7]
 8009bea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bee:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8009bf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009bfe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f040 80a0 	bne.w	8009d48 <f_open+0x310>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c0c:	4611      	mov	r1, r2
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7ff f8bc 	bl	8008d8c <ld_clust>
 8009c14:	4602      	mov	r2, r0
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c1c:	331c      	adds	r3, #28
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fe fa51 	bl	80080c6 <ld_dword>
 8009c24:	4602      	mov	r2, r0
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 8009c2a:	697a      	ldr	r2, [r7, #20]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	88da      	ldrh	r2, [r3, #6]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	79fa      	ldrb	r2, [r7, #7]
 8009c3c:	741a      	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2200      	movs	r2, #0
 8009c42:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2200      	movs	r2, #0
 8009c48:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	3328      	adds	r3, #40	@ 0x28
 8009c54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009c58:	2100      	movs	r1, #0
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f00c fab6 	bl	80161cc <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009c60:	79fb      	ldrb	r3, [r7, #7]
 8009c62:	f003 0320 	and.w	r3, r3, #32
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d06e      	beq.n	8009d48 <f_open+0x310>
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d06a      	beq.n	8009d48 <f_open+0x310>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	68da      	ldr	r2, [r3, #12]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	895b      	ldrh	r3, [r3, #10]
 8009c7e:	461a      	mov	r2, r3
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	899b      	ldrh	r3, [r3, #12]
 8009c84:	fb02 f303 	mul.w	r3, r2, r3
 8009c88:	647b      	str	r3, [r7, #68]	@ 0x44
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c96:	e016      	b.n	8009cc6 <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7fe fb94 	bl	80083ca <get_fat>
 8009ca2:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009ca4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d802      	bhi.n	8009cb0 <f_open+0x278>
 8009caa:	2302      	movs	r3, #2
 8009cac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009cb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb6:	d102      	bne.n	8009cbe <f_open+0x286>
 8009cb8:	2301      	movs	r3, #1
 8009cba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009cbe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009cc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cc2:	1ad3      	subs	r3, r2, r3
 8009cc4:	657b      	str	r3, [r7, #84]	@ 0x54
 8009cc6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d103      	bne.n	8009cd6 <f_open+0x29e>
 8009cce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009cd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d8e0      	bhi.n	8009c98 <f_open+0x260>
				}
				fp->clust = clst;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009cda:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009cdc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d131      	bne.n	8009d48 <f_open+0x310>
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	899b      	ldrh	r3, [r3, #12]
 8009ce8:	461a      	mov	r2, r3
 8009cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cec:	fbb3 f1f2 	udiv	r1, r3, r2
 8009cf0:	fb01 f202 	mul.w	r2, r1, r2
 8009cf4:	1a9b      	subs	r3, r3, r2
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d026      	beq.n	8009d48 <f_open+0x310>
					sc = clst2sect(fs, clst);
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7fe fb44 	bl	800838c <clst2sect>
 8009d04:	64b8      	str	r0, [r7, #72]	@ 0x48
					if (sc == 0) {
 8009d06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d103      	bne.n	8009d14 <f_open+0x2dc>
						res = FR_INT_ERR;
 8009d0c:	2302      	movs	r3, #2
 8009d0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009d12:	e019      	b.n	8009d48 <f_open+0x310>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	899b      	ldrh	r3, [r3, #12]
 8009d18:	461a      	mov	r2, r3
 8009d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d1c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d22:	441a      	add	r2, r3
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	7858      	ldrb	r0, [r3, #1]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	69da      	ldr	r2, [r3, #28]
 8009d36:	2301      	movs	r3, #1
 8009d38:	f7fe f8c4 	bl	8007ec4 <disk_read>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d002      	beq.n	8009d48 <f_open+0x310>
 8009d42:	2301      	movs	r3, #1
 8009d44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009d48:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d002      	beq.n	8009d56 <f_open+0x31e>
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009d56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3760      	adds	r7, #96	@ 0x60
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	54210000 	.word	0x54210000

08009d68 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b08e      	sub	sp, #56	@ 0x38
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
 8009d74:	603b      	str	r3, [r7, #0]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f107 0214 	add.w	r2, r7, #20
 8009d86:	4611      	mov	r1, r2
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7ff fdd5 	bl	8009938 <validate>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009d94:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d107      	bne.n	8009dac <f_read+0x44>
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	7c5b      	ldrb	r3, [r3, #17]
 8009da0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009da4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d002      	beq.n	8009db2 <f_read+0x4a>
 8009dac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009db0:	e129      	b.n	800a006 <f_read+0x29e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	7c1b      	ldrb	r3, [r3, #16]
 8009db6:	f003 0301 	and.w	r3, r3, #1
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d101      	bne.n	8009dc2 <f_read+0x5a>
 8009dbe:	2307      	movs	r3, #7
 8009dc0:	e121      	b.n	800a006 <f_read+0x29e>
	remain = fp->obj.objsize - fp->fptr;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	68da      	ldr	r2, [r3, #12]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	695b      	ldr	r3, [r3, #20]
 8009dca:	1ad3      	subs	r3, r2, r3
 8009dcc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	6a3b      	ldr	r3, [r7, #32]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	f240 8112 	bls.w	8009ffc <f_read+0x294>
 8009dd8:	6a3b      	ldr	r3, [r7, #32]
 8009dda:	607b      	str	r3, [r7, #4]

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8009ddc:	e10e      	b.n	8009ffc <f_read+0x294>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	695b      	ldr	r3, [r3, #20]
 8009de2:	697a      	ldr	r2, [r7, #20]
 8009de4:	8992      	ldrh	r2, [r2, #12]
 8009de6:	fbb3 f1f2 	udiv	r1, r3, r2
 8009dea:	fb01 f202 	mul.w	r2, r1, r2
 8009dee:	1a9b      	subs	r3, r3, r2
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f040 80c9 	bne.w	8009f88 <f_read+0x220>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	695b      	ldr	r3, [r3, #20]
 8009dfa:	697a      	ldr	r2, [r7, #20]
 8009dfc:	8992      	ldrh	r2, [r2, #12]
 8009dfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e02:	697a      	ldr	r2, [r7, #20]
 8009e04:	8952      	ldrh	r2, [r2, #10]
 8009e06:	3a01      	subs	r2, #1
 8009e08:	4013      	ands	r3, r2
 8009e0a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d123      	bne.n	8009e5a <f_read+0xf2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	695b      	ldr	r3, [r3, #20]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d103      	bne.n	8009e22 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e20:	e007      	b.n	8009e32 <f_read+0xca>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	699b      	ldr	r3, [r3, #24]
 8009e28:	4619      	mov	r1, r3
 8009e2a:	4610      	mov	r0, r2
 8009e2c:	f7fe facd 	bl	80083ca <get_fat>
 8009e30:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d804      	bhi.n	8009e42 <f_read+0xda>
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2202      	movs	r2, #2
 8009e3c:	745a      	strb	r2, [r3, #17]
 8009e3e:	2302      	movs	r3, #2
 8009e40:	e0e1      	b.n	800a006 <f_read+0x29e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e48:	d104      	bne.n	8009e54 <f_read+0xec>
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	745a      	strb	r2, [r3, #17]
 8009e50:	2301      	movs	r3, #1
 8009e52:	e0d8      	b.n	800a006 <f_read+0x29e>
				fp->clust = clst;				/* Update current cluster */
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e58:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8009e5a:	697a      	ldr	r2, [r7, #20]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	699b      	ldr	r3, [r3, #24]
 8009e60:	4619      	mov	r1, r3
 8009e62:	4610      	mov	r0, r2
 8009e64:	f7fe fa92 	bl	800838c <clst2sect>
 8009e68:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8009e6a:	69bb      	ldr	r3, [r7, #24]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d104      	bne.n	8009e7a <f_read+0x112>
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2202      	movs	r2, #2
 8009e74:	745a      	strb	r2, [r3, #17]
 8009e76:	2302      	movs	r3, #2
 8009e78:	e0c5      	b.n	800a006 <f_read+0x29e>
			sect += csect;
 8009e7a:	69ba      	ldr	r2, [r7, #24]
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	4413      	add	r3, r2
 8009e80:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	899b      	ldrh	r3, [r3, #12]
 8009e86:	461a      	mov	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8009e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d041      	beq.n	8009f1a <f_read+0x1b2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009e96:	69fa      	ldr	r2, [r7, #28]
 8009e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e9a:	4413      	add	r3, r2
 8009e9c:	697a      	ldr	r2, [r7, #20]
 8009e9e:	8952      	ldrh	r2, [r2, #10]
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d905      	bls.n	8009eb0 <f_read+0x148>
					cc = fs->csize - csect;
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	895b      	ldrh	r3, [r3, #10]
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	1ad3      	subs	r3, r2, r3
 8009eae:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	7858      	ldrb	r0, [r3, #1]
 8009eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eb6:	69ba      	ldr	r2, [r7, #24]
 8009eb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009eba:	f7fe f803 	bl	8007ec4 <disk_read>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d004      	beq.n	8009ece <f_read+0x166>
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	745a      	strb	r2, [r3, #17]
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e09b      	b.n	800a006 <f_read+0x29e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	7c1b      	ldrb	r3, [r3, #16]
 8009ed2:	b25b      	sxtb	r3, r3
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	da18      	bge.n	8009f0a <f_read+0x1a2>
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	69da      	ldr	r2, [r3, #28]
 8009edc:	69bb      	ldr	r3, [r7, #24]
 8009ede:	1ad3      	subs	r3, r2, r3
 8009ee0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d911      	bls.n	8009f0a <f_read+0x1a2>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	69da      	ldr	r2, [r3, #28]
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	1ad3      	subs	r3, r2, r3
 8009eee:	697a      	ldr	r2, [r7, #20]
 8009ef0:	8992      	ldrh	r2, [r2, #12]
 8009ef2:	fb02 f303 	mul.w	r3, r2, r3
 8009ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ef8:	18d0      	adds	r0, r2, r3
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	899b      	ldrh	r3, [r3, #12]
 8009f04:	461a      	mov	r2, r3
 8009f06:	f00c f9e5 	bl	80162d4 <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	899b      	ldrh	r3, [r3, #12]
 8009f0e:	461a      	mov	r2, r3
 8009f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f12:	fb02 f303 	mul.w	r3, r2, r3
 8009f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009f18:	e05c      	b.n	8009fd4 <f_read+0x26c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	69db      	ldr	r3, [r3, #28]
 8009f1e:	69ba      	ldr	r2, [r7, #24]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d02e      	beq.n	8009f82 <f_read+0x21a>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	7c1b      	ldrb	r3, [r3, #16]
 8009f28:	b25b      	sxtb	r3, r3
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	da18      	bge.n	8009f60 <f_read+0x1f8>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	7858      	ldrb	r0, [r3, #1]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	69da      	ldr	r2, [r3, #28]
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	f7fd fff3 	bl	8007f28 <disk_write>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d004      	beq.n	8009f52 <f_read+0x1ea>
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	745a      	strb	r2, [r3, #17]
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e059      	b.n	800a006 <f_read+0x29e>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	7c1b      	ldrb	r3, [r3, #16]
 8009f56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f5a:	b2da      	uxtb	r2, r3
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	7858      	ldrb	r0, [r3, #1]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	69ba      	ldr	r2, [r7, #24]
 8009f6e:	f7fd ffa9 	bl	8007ec4 <disk_read>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d004      	beq.n	8009f82 <f_read+0x21a>
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	745a      	strb	r2, [r3, #17]
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e041      	b.n	800a006 <f_read+0x29e>
			}
#endif
			fp->sect = sect;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	69ba      	ldr	r2, [r7, #24]
 8009f86:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	899b      	ldrh	r3, [r3, #12]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	695b      	ldr	r3, [r3, #20]
 8009f92:	697a      	ldr	r2, [r7, #20]
 8009f94:	8992      	ldrh	r2, [r2, #12]
 8009f96:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f9a:	fb01 f202 	mul.w	r2, r1, r2
 8009f9e:	1a9b      	subs	r3, r3, r2
 8009fa0:	1ac3      	subs	r3, r0, r3
 8009fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009fa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d901      	bls.n	8009fb0 <f_read+0x248>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	695b      	ldr	r3, [r3, #20]
 8009fba:	697a      	ldr	r2, [r7, #20]
 8009fbc:	8992      	ldrh	r2, [r2, #12]
 8009fbe:	fbb3 f0f2 	udiv	r0, r3, r2
 8009fc2:	fb00 f202 	mul.w	r2, r0, r2
 8009fc6:	1a9b      	subs	r3, r3, r2
 8009fc8:	440b      	add	r3, r1
 8009fca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fcc:	4619      	mov	r1, r3
 8009fce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009fd0:	f00c f980 	bl	80162d4 <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fd8:	1ad3      	subs	r3, r2, r3
 8009fda:	607b      	str	r3, [r7, #4]
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fe2:	441a      	add	r2, r3
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	601a      	str	r2, [r3, #0]
 8009fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fec:	4413      	add	r3, r2
 8009fee:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	695a      	ldr	r2, [r3, #20]
 8009ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff6:	441a      	add	r2, r3
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	615a      	str	r2, [r3, #20]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f47f aeed 	bne.w	8009dde <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3738      	adds	r7, #56	@ 0x38
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b08c      	sub	sp, #48	@ 0x30
 800a012:	af00      	add	r7, sp, #0
 800a014:	60f8      	str	r0, [r7, #12]
 800a016:	60b9      	str	r1, [r7, #8]
 800a018:	607a      	str	r2, [r7, #4]
 800a01a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	2200      	movs	r2, #0
 800a024:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f107 0210 	add.w	r2, r7, #16
 800a02c:	4611      	mov	r1, r2
 800a02e:	4618      	mov	r0, r3
 800a030:	f7ff fc82 	bl	8009938 <validate>
 800a034:	4603      	mov	r3, r0
 800a036:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a03a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d107      	bne.n	800a052 <f_write+0x44>
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	7c5b      	ldrb	r3, [r3, #17]
 800a046:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a04a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d002      	beq.n	800a058 <f_write+0x4a>
 800a052:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a056:	e15e      	b.n	800a316 <f_write+0x308>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	7c1b      	ldrb	r3, [r3, #16]
 800a05c:	f003 0302 	and.w	r3, r3, #2
 800a060:	2b00      	cmp	r3, #0
 800a062:	d101      	bne.n	800a068 <f_write+0x5a>
 800a064:	2307      	movs	r3, #7
 800a066:	e156      	b.n	800a316 <f_write+0x308>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	695a      	ldr	r2, [r3, #20]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	441a      	add	r2, r3
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	695b      	ldr	r3, [r3, #20]
 800a074:	429a      	cmp	r2, r3
 800a076:	f080 8140 	bcs.w	800a2fa <f_write+0x2ec>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	695b      	ldr	r3, [r3, #20]
 800a07e:	43db      	mvns	r3, r3
 800a080:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800a082:	e13a      	b.n	800a2fa <f_write+0x2ec>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	695b      	ldr	r3, [r3, #20]
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	8992      	ldrh	r2, [r2, #12]
 800a08c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a090:	fb01 f202 	mul.w	r2, r1, r2
 800a094:	1a9b      	subs	r3, r3, r2
 800a096:	2b00      	cmp	r3, #0
 800a098:	f040 80e5 	bne.w	800a266 <f_write+0x258>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	693a      	ldr	r2, [r7, #16]
 800a0a2:	8992      	ldrh	r2, [r2, #12]
 800a0a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0a8:	693a      	ldr	r2, [r7, #16]
 800a0aa:	8952      	ldrh	r2, [r2, #10]
 800a0ac:	3a01      	subs	r2, #1
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d137      	bne.n	800a128 <f_write+0x11a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	695b      	ldr	r3, [r3, #20]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10c      	bne.n	800a0da <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d10e      	bne.n	800a0ea <f_write+0xdc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7fe fbcc 	bl	800886e <create_chain>
 800a0d6:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a0d8:	e007      	b.n	800a0ea <f_write+0xdc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a0da:	68fa      	ldr	r2, [r7, #12]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	699b      	ldr	r3, [r3, #24]
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	4610      	mov	r0, r2
 800a0e4:	f7fe fbc3 	bl	800886e <create_chain>
 800a0e8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a0ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f000 8109 	beq.w	800a304 <f_write+0x2f6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d104      	bne.n	800a102 <f_write+0xf4>
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2202      	movs	r2, #2
 800a0fc:	745a      	strb	r2, [r3, #17]
 800a0fe:	2302      	movs	r3, #2
 800a100:	e109      	b.n	800a316 <f_write+0x308>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a104:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a108:	d104      	bne.n	800a114 <f_write+0x106>
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2201      	movs	r2, #1
 800a10e:	745a      	strb	r2, [r3, #17]
 800a110:	2301      	movs	r3, #1
 800a112:	e100      	b.n	800a316 <f_write+0x308>
				fp->clust = clst;			/* Update current cluster */
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a118:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d102      	bne.n	800a128 <f_write+0x11a>
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a126:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	7c1b      	ldrb	r3, [r3, #16]
 800a12c:	b25b      	sxtb	r3, r3
 800a12e:	2b00      	cmp	r3, #0
 800a130:	da18      	bge.n	800a164 <f_write+0x156>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	7858      	ldrb	r0, [r3, #1]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	69da      	ldr	r2, [r3, #28]
 800a140:	2301      	movs	r3, #1
 800a142:	f7fd fef1 	bl	8007f28 <disk_write>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d004      	beq.n	800a156 <f_write+0x148>
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2201      	movs	r2, #1
 800a150:	745a      	strb	r2, [r3, #17]
 800a152:	2301      	movs	r3, #1
 800a154:	e0df      	b.n	800a316 <f_write+0x308>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	7c1b      	ldrb	r3, [r3, #16]
 800a15a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a15e:	b2da      	uxtb	r2, r3
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800a164:	693a      	ldr	r2, [r7, #16]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	699b      	ldr	r3, [r3, #24]
 800a16a:	4619      	mov	r1, r3
 800a16c:	4610      	mov	r0, r2
 800a16e:	f7fe f90d 	bl	800838c <clst2sect>
 800a172:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d104      	bne.n	800a184 <f_write+0x176>
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2202      	movs	r2, #2
 800a17e:	745a      	strb	r2, [r3, #17]
 800a180:	2302      	movs	r3, #2
 800a182:	e0c8      	b.n	800a316 <f_write+0x308>
			sect += csect;
 800a184:	697a      	ldr	r2, [r7, #20]
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	4413      	add	r3, r2
 800a18a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	899b      	ldrh	r3, [r3, #12]
 800a190:	461a      	mov	r2, r3
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	fbb3 f3f2 	udiv	r3, r3, r2
 800a198:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 800a19a:	6a3b      	ldr	r3, [r7, #32]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d043      	beq.n	800a228 <f_write+0x21a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a1a0:	69ba      	ldr	r2, [r7, #24]
 800a1a2:	6a3b      	ldr	r3, [r7, #32]
 800a1a4:	4413      	add	r3, r2
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	8952      	ldrh	r2, [r2, #10]
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d905      	bls.n	800a1ba <f_write+0x1ac>
					cc = fs->csize - csect;
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	895b      	ldrh	r3, [r3, #10]
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	1ad3      	subs	r3, r2, r3
 800a1b8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	7858      	ldrb	r0, [r3, #1]
 800a1be:	6a3b      	ldr	r3, [r7, #32]
 800a1c0:	697a      	ldr	r2, [r7, #20]
 800a1c2:	69f9      	ldr	r1, [r7, #28]
 800a1c4:	f7fd feb0 	bl	8007f28 <disk_write>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d004      	beq.n	800a1d8 <f_write+0x1ca>
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	745a      	strb	r2, [r3, #17]
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e09e      	b.n	800a316 <f_write+0x308>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	69da      	ldr	r2, [r3, #28]
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	6a3a      	ldr	r2, [r7, #32]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d918      	bls.n	800a218 <f_write+0x20a>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	69da      	ldr	r2, [r3, #28]
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	693a      	ldr	r2, [r7, #16]
 800a1f6:	8992      	ldrh	r2, [r2, #12]
 800a1f8:	fb02 f303 	mul.w	r3, r2, r3
 800a1fc:	69fa      	ldr	r2, [r7, #28]
 800a1fe:	18d1      	adds	r1, r2, r3
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	899b      	ldrh	r3, [r3, #12]
 800a204:	461a      	mov	r2, r3
 800a206:	f00c f865 	bl	80162d4 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	7c1b      	ldrb	r3, [r3, #16]
 800a20e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a212:	b2da      	uxtb	r2, r3
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	899b      	ldrh	r3, [r3, #12]
 800a21c:	461a      	mov	r2, r3
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	fb02 f303 	mul.w	r3, r2, r3
 800a224:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800a226:	e04b      	b.n	800a2c0 <f_write+0x2b2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	69db      	ldr	r3, [r3, #28]
 800a22c:	697a      	ldr	r2, [r7, #20]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d016      	beq.n	800a260 <f_write+0x252>
				fp->fptr < fp->obj.objsize &&
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	695a      	ldr	r2, [r3, #20]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d210      	bcs.n	800a260 <f_write+0x252>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	7858      	ldrb	r0, [r3, #1]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a248:	2301      	movs	r3, #1
 800a24a:	697a      	ldr	r2, [r7, #20]
 800a24c:	f7fd fe3a 	bl	8007ec4 <disk_read>
 800a250:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a252:	2b00      	cmp	r3, #0
 800a254:	d004      	beq.n	800a260 <f_write+0x252>
					ABORT(fs, FR_DISK_ERR);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2201      	movs	r2, #1
 800a25a:	745a      	strb	r2, [r3, #17]
 800a25c:	2301      	movs	r3, #1
 800a25e:	e05a      	b.n	800a316 <f_write+0x308>
			}
#endif
			fp->sect = sect;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	697a      	ldr	r2, [r7, #20]
 800a264:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	899b      	ldrh	r3, [r3, #12]
 800a26a:	4618      	mov	r0, r3
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	695b      	ldr	r3, [r3, #20]
 800a270:	693a      	ldr	r2, [r7, #16]
 800a272:	8992      	ldrh	r2, [r2, #12]
 800a274:	fbb3 f1f2 	udiv	r1, r3, r2
 800a278:	fb01 f202 	mul.w	r2, r1, r2
 800a27c:	1a9b      	subs	r3, r3, r2
 800a27e:	1ac3      	subs	r3, r0, r3
 800a280:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	429a      	cmp	r2, r3
 800a288:	d901      	bls.n	800a28e <f_write+0x280>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	627b      	str	r3, [r7, #36]	@ 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	695b      	ldr	r3, [r3, #20]
 800a298:	693a      	ldr	r2, [r7, #16]
 800a29a:	8992      	ldrh	r2, [r2, #12]
 800a29c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a2a0:	fb00 f202 	mul.w	r2, r0, r2
 800a2a4:	1a9b      	subs	r3, r3, r2
 800a2a6:	440b      	add	r3, r1
 800a2a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2aa:	69f9      	ldr	r1, [r7, #28]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f00c f811 	bl	80162d4 <memcpy>
		fp->flag |= FA_DIRTY;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	7c1b      	ldrb	r3, [r3, #16]
 800a2b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a2ba:	b2da      	uxtb	r2, r3
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	741a      	strb	r2, [r3, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c4:	1ad3      	subs	r3, r2, r3
 800a2c6:	607b      	str	r3, [r7, #4]
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ce:	441a      	add	r2, r3
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	601a      	str	r2, [r3, #0]
 800a2d4:	69fa      	ldr	r2, [r7, #28]
 800a2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d8:	4413      	add	r3, r2
 800a2da:	61fb      	str	r3, [r7, #28]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	695a      	ldr	r2, [r3, #20]
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e2:	441a      	add	r2, r3
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	615a      	str	r2, [r3, #20]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	68da      	ldr	r2, [r3, #12]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	695b      	ldr	r3, [r3, #20]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	bf38      	it	cc
 800a2f4:	461a      	movcc	r2, r3
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	60da      	str	r2, [r3, #12]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f47f aec1 	bne.w	800a084 <f_write+0x76>
 800a302:	e000      	b.n	800a306 <f_write+0x2f8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a304:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	7c1b      	ldrb	r3, [r3, #16]
 800a30a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a30e:	b2da      	uxtb	r2, r3
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3730      	adds	r7, #48	@ 0x30
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
	...

0800a320 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b086      	sub	sp, #24
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f107 0208 	add.w	r2, r7, #8
 800a32e:	4611      	mov	r1, r2
 800a330:	4618      	mov	r0, r3
 800a332:	f7ff fb01 	bl	8009938 <validate>
 800a336:	4603      	mov	r3, r0
 800a338:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a33a:	7dfb      	ldrb	r3, [r7, #23]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d167      	bne.n	800a410 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	7c1b      	ldrb	r3, [r3, #16]
 800a344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d061      	beq.n	800a410 <f_sync+0xf0>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	7c1b      	ldrb	r3, [r3, #16]
 800a350:	b25b      	sxtb	r3, r3
 800a352:	2b00      	cmp	r3, #0
 800a354:	da15      	bge.n	800a382 <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	7858      	ldrb	r0, [r3, #1]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	69da      	ldr	r2, [r3, #28]
 800a364:	2301      	movs	r3, #1
 800a366:	f7fd fddf 	bl	8007f28 <disk_write>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d001      	beq.n	800a374 <f_sync+0x54>
 800a370:	2301      	movs	r3, #1
 800a372:	e04e      	b.n	800a412 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	7c1b      	ldrb	r3, [r3, #16]
 800a378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a37c:	b2da      	uxtb	r2, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a382:	4b26      	ldr	r3, [pc, #152]	@ (800a41c <f_sync+0xfc>)
 800a384:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a386:	68ba      	ldr	r2, [r7, #8]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6a1b      	ldr	r3, [r3, #32]
 800a38c:	4619      	mov	r1, r3
 800a38e:	4610      	mov	r0, r2
 800a390:	f7fd ff61 	bl	8008256 <move_window>
 800a394:	4603      	mov	r3, r0
 800a396:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a398:	7dfb      	ldrb	r3, [r7, #23]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d138      	bne.n	800a410 <f_sync+0xf0>
					dir = fp->dir_ptr;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3a2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	330b      	adds	r3, #11
 800a3a8:	781a      	ldrb	r2, [r3, #0]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	330b      	adds	r3, #11
 800a3ae:	f042 0220 	orr.w	r2, r2, #32
 800a3b2:	b2d2      	uxtb	r2, r2
 800a3b4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6818      	ldr	r0, [r3, #0]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	68f9      	ldr	r1, [r7, #12]
 800a3c2:	f7fe fd02 	bl	8008dca <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f103 021c 	add.w	r2, r3, #28
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	4610      	mov	r0, r2
 800a3d4:	f7fd feb5 	bl	8008142 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	3316      	adds	r3, #22
 800a3dc:	6939      	ldr	r1, [r7, #16]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7fd feaf 	bl	8008142 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	3312      	adds	r3, #18
 800a3e8:	2100      	movs	r1, #0
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7fd fe8e 	bl	800810c <st_word>
					fs->wflag = 1;
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7fd ff59 	bl	80082b0 <sync_fs>
 800a3fe:	4603      	mov	r3, r0
 800a400:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	7c1b      	ldrb	r3, [r3, #16]
 800a406:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a40a:	b2da      	uxtb	r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a410:	7dfb      	ldrb	r3, [r7, #23]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3718      	adds	r7, #24
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	54210000 	.word	0x54210000

0800a420 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f7ff ff79 	bl	800a320 <f_sync>
 800a42e:	4603      	mov	r3, r0
 800a430:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a432:	7bfb      	ldrb	r3, [r7, #15]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d10e      	bne.n	800a456 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f107 0208 	add.w	r2, r7, #8
 800a43e:	4611      	mov	r1, r2
 800a440:	4618      	mov	r0, r3
 800a442:	f7ff fa79 	bl	8009938 <validate>
 800a446:	4603      	mov	r3, r0
 800a448:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a44a:	7bfb      	ldrb	r3, [r7, #15]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d102      	bne.n	800a456 <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a456:	7bfb      	ldrb	r3, [r7, #15]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3710      	adds	r7, #16
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID for each partition (for only MBR) */
	BYTE *buf			/* Working buffer for a sector */
)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b08e      	sub	sp, #56	@ 0x38
 800a464:	af00      	add	r7, sp, #0
 800a466:	60b9      	str	r1, [r7, #8]
 800a468:	607b      	str	r3, [r7, #4]
 800a46a:	4603      	mov	r3, r0
 800a46c:	73fb      	strb	r3, [r7, #15]
 800a46e:	4613      	mov	r3, r2
 800a470:	73bb      	strb	r3, [r7, #14]
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 800a472:	f107 0210 	add.w	r2, r7, #16
 800a476:	7bfb      	ldrb	r3, [r7, #15]
 800a478:	2101      	movs	r1, #1
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7fd fd88 	bl	8007f90 <disk_ioctl>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d001      	beq.n	800a48a <create_partition+0x2a>
 800a486:	2301      	movs	r3, #1
 800a488:	e108      	b.n	800a69c <create_partition+0x23c>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	623b      	str	r3, [r7, #32]
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
 800a48e:	233f      	movs	r3, #63	@ 0x3f
 800a490:	77fb      	strb	r3, [r7, #31]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 800a492:	2308      	movs	r3, #8
 800a494:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a498:	e004      	b.n	800a4a4 <create_partition+0x44>
 800a49a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a49e:	005b      	lsls	r3, r3, #1
 800a4a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a4a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00a      	beq.n	800a4c2 <create_partition+0x62>
 800a4ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a4b0:	6a3a      	ldr	r2, [r7, #32]
 800a4b2:	fbb2 f2f3 	udiv	r2, r2, r3
 800a4b6:	7ffb      	ldrb	r3, [r7, #31]
 800a4b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4c0:	d8eb      	bhi.n	800a49a <create_partition+0x3a>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 800a4c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d102      	bne.n	800a4d0 <create_partition+0x70>
 800a4ca:	23ff      	movs	r3, #255	@ 0xff
 800a4cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 800a4d0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f00b fe78 	bl	80161cc <memset>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a4e2:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4e8:	7ffb      	ldrb	r3, [r7, #31]
 800a4ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4ec:	e0b5      	b.n	800a65a <create_partition+0x1fa>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 800a4ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	68ba      	ldr	r2, [r7, #8]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 800a4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4fc:	2b64      	cmp	r3, #100	@ 0x64
 800a4fe:	d80d      	bhi.n	800a51c <create_partition+0xbc>
 800a500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a502:	2b64      	cmp	r3, #100	@ 0x64
 800a504:	d008      	beq.n	800a518 <create_partition+0xb8>
 800a506:	6a3b      	ldr	r3, [r7, #32]
 800a508:	4a66      	ldr	r2, [pc, #408]	@ (800a6a4 <create_partition+0x244>)
 800a50a:	fba2 2303 	umull	r2, r3, r2, r3
 800a50e:	095b      	lsrs	r3, r3, #5
 800a510:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a512:	fb02 f303 	mul.w	r3, r2, r3
 800a516:	e000      	b.n	800a51a <create_partition+0xba>
 800a518:	6a3b      	ldr	r3, [r7, #32]
 800a51a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 800a51c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a520:	4413      	add	r3, r2
 800a522:	6a3a      	ldr	r2, [r7, #32]
 800a524:	429a      	cmp	r2, r3
 800a526:	d305      	bcc.n	800a534 <create_partition+0xd4>
 800a528:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a52a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a52c:	4413      	add	r3, r2
 800a52e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a530:	429a      	cmp	r2, r3
 800a532:	d903      	bls.n	800a53c <create_partition+0xdc>
 800a534:	6a3a      	ldr	r2, [r7, #32]
 800a536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800a53c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a53e:	2b00      	cmp	r3, #0
 800a540:	f000 8097 	beq.w	800a672 <create_partition+0x212>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 800a544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a546:	3308      	adds	r3, #8
 800a548:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7fd fdf9 	bl	8008142 <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 800a550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a552:	330c      	adds	r3, #12
 800a554:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a556:	4618      	mov	r0, r3
 800a558:	f7fd fdf3 	bl	8008142 <st_dword>
			pte[PTE_System] = sys;					/* System type */
 800a55c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a55e:	3304      	adds	r3, #4
 800a560:	7bba      	ldrb	r2, [r7, #14]
 800a562:	701a      	strb	r2, [r3, #0]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 800a564:	7ffb      	ldrb	r3, [r7, #31]
 800a566:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a568:	fbb2 f2f3 	udiv	r2, r2, r3
 800a56c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a570:	fbb2 f3f3 	udiv	r3, r2, r3
 800a574:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 800a576:	7ffb      	ldrb	r3, [r7, #31]
 800a578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a57a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a57e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a582:	fbb3 f1f2 	udiv	r1, r3, r2
 800a586:	fb01 f202 	mul.w	r2, r1, r2
 800a58a:	1a9b      	subs	r3, r3, r2
 800a58c:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 800a58e:	7ffa      	ldrb	r2, [r7, #31]
 800a590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a592:	fbb3 f1f2 	udiv	r1, r3, r2
 800a596:	fb01 f202 	mul.w	r2, r1, r2
 800a59a:	1a9b      	subs	r3, r3, r2
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	3301      	adds	r3, #1
 800a5a0:	75bb      	strb	r3, [r7, #22]
			pte[PTE_StHead] = hd;
 800a5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	7dfa      	ldrb	r2, [r7, #23]
 800a5a8:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	089b      	lsrs	r3, r3, #2
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a5b4:	b2d9      	uxtb	r1, r3
 800a5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b8:	3302      	adds	r3, #2
 800a5ba:	7dba      	ldrb	r2, [r7, #22]
 800a5bc:	430a      	orrs	r2, r1
 800a5be:	b2d2      	uxtb	r2, r2
 800a5c0:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = (BYTE)cy;
 800a5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c4:	3303      	adds	r3, #3
 800a5c6:	69ba      	ldr	r2, [r7, #24]
 800a5c8:	b2d2      	uxtb	r2, r2
 800a5ca:	701a      	strb	r2, [r3, #0]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 800a5cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5d0:	4413      	add	r3, r2
 800a5d2:	1e5a      	subs	r2, r3, #1
 800a5d4:	7ffb      	ldrb	r3, [r7, #31]
 800a5d6:	fbb2 f2f3 	udiv	r2, r2, r3
 800a5da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a5de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5e2:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 800a5e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5e8:	4413      	add	r3, r2
 800a5ea:	1e5a      	subs	r2, r3, #1
 800a5ec:	7ffb      	ldrb	r3, [r7, #31]
 800a5ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5f2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a5f6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5fa:	fb01 f202 	mul.w	r2, r1, r2
 800a5fe:	1a9b      	subs	r3, r3, r2
 800a600:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 800a602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a606:	4413      	add	r3, r2
 800a608:	3b01      	subs	r3, #1
 800a60a:	7ffa      	ldrb	r2, [r7, #31]
 800a60c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a610:	fb01 f202 	mul.w	r2, r1, r2
 800a614:	1a9b      	subs	r3, r3, r2
 800a616:	b2db      	uxtb	r3, r3
 800a618:	3301      	adds	r3, #1
 800a61a:	75bb      	strb	r3, [r7, #22]
			pte[PTE_EdHead] = hd;
 800a61c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a61e:	3305      	adds	r3, #5
 800a620:	7dfa      	ldrb	r2, [r7, #23]
 800a622:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800a624:	69bb      	ldr	r3, [r7, #24]
 800a626:	089b      	lsrs	r3, r3, #2
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a62e:	b2d9      	uxtb	r1, r3
 800a630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a632:	3306      	adds	r3, #6
 800a634:	7dba      	ldrb	r2, [r7, #22]
 800a636:	430a      	orrs	r2, r1
 800a638:	b2d2      	uxtb	r2, r2
 800a63a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)cy;
 800a63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a63e:	3307      	adds	r3, #7
 800a640:	69ba      	ldr	r2, [r7, #24]
 800a642:	b2d2      	uxtb	r2, r2
 800a644:	701a      	strb	r2, [r3, #0]

			pte += SZ_PTE;		/* Next entry */
 800a646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a648:	3310      	adds	r3, #16
 800a64a:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800a64c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a64e:	3301      	adds	r3, #1
 800a650:	637b      	str	r3, [r7, #52]	@ 0x34
 800a652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a656:	4413      	add	r3, r2
 800a658:	633b      	str	r3, [r7, #48]	@ 0x30
 800a65a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a65c:	2b03      	cmp	r3, #3
 800a65e:	d809      	bhi.n	800a674 <create_partition+0x214>
 800a660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a662:	2b00      	cmp	r3, #0
 800a664:	d006      	beq.n	800a674 <create_partition+0x214>
 800a666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a668:	6a3b      	ldr	r3, [r7, #32]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	f4ff af3f 	bcc.w	800a4ee <create_partition+0x8e>
 800a670:	e000      	b.n	800a674 <create_partition+0x214>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800a672:	bf00      	nop
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a67a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a67e:	4618      	mov	r0, r3
 800a680:	f7fd fd44 	bl	800810c <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800a684:	7bf8      	ldrb	r0, [r7, #15]
 800a686:	2301      	movs	r3, #1
 800a688:	2200      	movs	r2, #0
 800a68a:	6879      	ldr	r1, [r7, #4]
 800a68c:	f7fd fc4c 	bl	8007f28 <disk_write>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d001      	beq.n	800a69a <create_partition+0x23a>
 800a696:	2301      	movs	r3, #1
 800a698:	e000      	b.n	800a69c <create_partition+0x23c>
	}

	return FR_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3738      	adds	r7, #56	@ 0x38
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	51eb851f 	.word	0x51eb851f

0800a6a8 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b09e      	sub	sp, #120	@ 0x78
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	607a      	str	r2, [r7, #4]
 800a6b4:	603b      	str	r3, [r7, #0]
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800a6b6:	f107 030c 	add.w	r3, r7, #12
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7fe fd78 	bl	80091b0 <get_ldnumber>
 800a6c0:	6478      	str	r0, [r7, #68]	@ 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800a6c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	da02      	bge.n	800a6ce <f_mkfs+0x26>
 800a6c8:	230b      	movs	r3, #11
 800a6ca:	f000 bc39 	b.w	800af40 <f_mkfs+0x898>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 800a6ce:	4a90      	ldr	r2, [pc, #576]	@ (800a910 <f_mkfs+0x268>)
 800a6d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d005      	beq.n	800a6e6 <f_mkfs+0x3e>
 800a6da:	4a8d      	ldr	r2, [pc, #564]	@ (800a910 <f_mkfs+0x268>)
 800a6dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 800a6e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6e8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 800a6f2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7fd fbbc 	bl	8007e74 <disk_initialize>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	if (ds & STA_NOINIT) return FR_NOT_READY;
 800a702:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a706:	f003 0301 	and.w	r3, r3, #1
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d002      	beq.n	800a714 <f_mkfs+0x6c>
 800a70e:	2303      	movs	r3, #3
 800a710:	f000 bc16 	b.w	800af40 <f_mkfs+0x898>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 800a714:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a718:	f003 0304 	and.w	r3, r3, #4
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d002      	beq.n	800a726 <f_mkfs+0x7e>
 800a720:	230a      	movs	r3, #10
 800a722:	f000 bc0d 	b.w	800af40 <f_mkfs+0x898>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d101      	bne.n	800a730 <f_mkfs+0x88>
 800a72c:	4b79      	ldr	r3, [pc, #484]	@ (800a914 <f_mkfs+0x26c>)
 800a72e:	60bb      	str	r3, [r7, #8]
	sz_blk = opt->align;
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	61fb      	str	r3, [r7, #28]
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the paramter or lower layer */
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d107      	bne.n	800a74c <f_mkfs+0xa4>
 800a73c:	f107 021c 	add.w	r2, r7, #28
 800a740:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a744:	2103      	movs	r1, #3
 800a746:	4618      	mov	r0, r3
 800a748:	f7fd fc22 	bl	8007f90 <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d009      	beq.n	800a766 <f_mkfs+0xbe>
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a758:	d805      	bhi.n	800a766 <f_mkfs+0xbe>
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	1e5a      	subs	r2, r3, #1
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	4013      	ands	r3, r2
 800a762:	2b00      	cmp	r3, #0
 800a764:	d001      	beq.n	800a76a <f_mkfs+0xc2>
 800a766:	2301      	movs	r3, #1
 800a768:	61fb      	str	r3, [r7, #28]
#if FF_MAX_SS != FF_MIN_SS
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 800a76a:	f107 0220 	add.w	r2, r7, #32
 800a76e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a772:	2102      	movs	r1, #2
 800a774:	4618      	mov	r0, r3
 800a776:	f7fd fc0b 	bl	8007f90 <disk_ioctl>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d001      	beq.n	800a784 <f_mkfs+0xdc>
 800a780:	2301      	movs	r3, #1
 800a782:	e3dd      	b.n	800af40 <f_mkfs+0x898>
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 800a784:	8c3b      	ldrh	r3, [r7, #32]
 800a786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a78a:	d80a      	bhi.n	800a7a2 <f_mkfs+0xfa>
 800a78c:	8c3b      	ldrh	r3, [r7, #32]
 800a78e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a792:	d306      	bcc.n	800a7a2 <f_mkfs+0xfa>
 800a794:	8c3b      	ldrh	r3, [r7, #32]
 800a796:	461a      	mov	r2, r3
 800a798:	8c3b      	ldrh	r3, [r7, #32]
 800a79a:	3b01      	subs	r3, #1
 800a79c:	4013      	ands	r3, r2
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d001      	beq.n	800a7a6 <f_mkfs+0xfe>
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e3cc      	b.n	800af40 <f_mkfs+0x898>
#else
	ss = FF_MAX_SS;
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	f003 030f 	and.w	r3, r3, #15
 800a7ae:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	785b      	ldrb	r3, [r3, #1]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d006      	beq.n	800a7c8 <f_mkfs+0x120>
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	785b      	ldrb	r3, [r3, #1]
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d802      	bhi.n	800a7c8 <f_mkfs+0x120>
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	785b      	ldrb	r3, [r3, #1]
 800a7c6:	e000      	b.n	800a7ca <f_mkfs+0x122>
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	689b      	ldr	r3, [r3, #8]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d013      	beq.n	800a7fc <f_mkfs+0x154>
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7dc:	d80e      	bhi.n	800a7fc <f_mkfs+0x154>
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	8c3a      	ldrh	r2, [r7, #32]
 800a7e4:	0952      	lsrs	r2, r2, #5
 800a7e6:	b292      	uxth	r2, r2
 800a7e8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a7ec:	fb01 f202 	mul.w	r2, r1, r2
 800a7f0:	1a9b      	subs	r3, r3, r2
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d102      	bne.n	800a7fc <f_mkfs+0x154>
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	e001      	b.n	800a800 <f_mkfs+0x158>
 800a7fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a800:	63bb      	str	r3, [r7, #56]	@ 0x38
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a80a:	d80a      	bhi.n	800a822 <f_mkfs+0x17a>
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	68da      	ldr	r2, [r3, #12]
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	3b01      	subs	r3, #1
 800a816:	4013      	ands	r3, r2
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d102      	bne.n	800a822 <f_mkfs+0x17a>
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	e000      	b.n	800a824 <f_mkfs+0x17c>
 800a822:	2300      	movs	r3, #0
 800a824:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sz_au /= ss;	/* Byte --> Sector */
 800a826:	8c3b      	ldrh	r3, [r7, #32]
 800a828:	461a      	mov	r2, r3
 800a82a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a82c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a830:	64fb      	str	r3, [r7, #76]	@ 0x4c

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 800a832:	8c3b      	ldrh	r3, [r7, #32]
 800a834:	461a      	mov	r2, r3
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	fbb3 f3f2 	udiv	r3, r3, r2
 800a83c:	637b      	str	r3, [r7, #52]	@ 0x34
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 800a83e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a840:	2b00      	cmp	r3, #0
 800a842:	d101      	bne.n	800a848 <f_mkfs+0x1a0>
 800a844:	2311      	movs	r3, #17
 800a846:	e37b      	b.n	800af40 <f_mkfs+0x898>
	buf = (BYTE*)work;		/* Working buffer */
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	633b      	str	r3, [r7, #48]	@ 0x30
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 800a84c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d101      	bne.n	800a856 <f_mkfs+0x1ae>
 800a852:	2311      	movs	r3, #17
 800a854:	e374      	b.n	800af40 <f_mkfs+0x898>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 800a856:	2300      	movs	r3, #0
 800a858:	61bb      	str	r3, [r7, #24]
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	66fb      	str	r3, [r7, #108]	@ 0x6c
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800a85e:	f107 0218 	add.w	r2, r7, #24
 800a862:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a866:	2101      	movs	r1, #1
 800a868:	4618      	mov	r0, r3
 800a86a:	f7fd fb91 	bl	8007f90 <disk_ioctl>
 800a86e:	4603      	mov	r3, r0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d001      	beq.n	800a878 <f_mkfs+0x1d0>
 800a874:	2301      	movs	r3, #1
 800a876:	e363      	b.n	800af40 <f_mkfs+0x898>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 800a878:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a87c:	f003 0308 	and.w	r3, r3, #8
 800a880:	2b00      	cmp	r3, #0
 800a882:	d108      	bne.n	800a896 <f_mkfs+0x1ee>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 800a884:	69bb      	ldr	r3, [r7, #24]
 800a886:	2b3f      	cmp	r3, #63	@ 0x3f
 800a888:	d905      	bls.n	800a896 <f_mkfs+0x1ee>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 800a88a:	233f      	movs	r3, #63	@ 0x3f
 800a88c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a88e:	69ba      	ldr	r2, [r7, #24]
 800a890:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a892:	1ad3      	subs	r3, r2, r3
 800a894:	61bb      	str	r3, [r7, #24]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	2b7f      	cmp	r3, #127	@ 0x7f
 800a89a:	d801      	bhi.n	800a8a0 <f_mkfs+0x1f8>
 800a89c:	230e      	movs	r3, #14
 800a89e:	e34f      	b.n	800af40 <f_mkfs+0x898>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 800a8a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8a2:	2b80      	cmp	r3, #128	@ 0x80
 800a8a4:	d901      	bls.n	800a8aa <f_mkfs+0x202>
 800a8a6:	2380      	movs	r3, #128	@ 0x80
 800a8a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 800a8aa:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a8ae:	f003 0302 	and.w	r3, r3, #2
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d009      	beq.n	800a8ca <f_mkfs+0x222>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 800a8b6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a8ba:	f003 0301 	and.w	r3, r3, #1
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d103      	bne.n	800a8ca <f_mkfs+0x222>
				fsty = FS_FAT32; break;
 800a8c2:	2303      	movs	r3, #3
 800a8c4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800a8c8:	e00a      	b.n	800a8e0 <f_mkfs+0x238>
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 800a8ca:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a8ce:	f003 0301 	and.w	r3, r3, #1
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d101      	bne.n	800a8da <f_mkfs+0x232>
 800a8d6:	2313      	movs	r3, #19
 800a8d8:	e332      	b.n	800af40 <f_mkfs+0x898>
		fsty = FS_FAT16;
 800a8da:	2302      	movs	r3, #2
 800a8dc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 800a8e0:	69bb      	ldr	r3, [r7, #24]
 800a8e2:	f103 43a8 	add.w	r3, r3, #1409286144	@ 0x54000000
 800a8e6:	f503 1304 	add.w	r3, r3, #2162688	@ 0x210000
 800a8ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
 800a8ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8ee:	663b      	str	r3, [r7, #96]	@ 0x60
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 800a8f0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a8f4:	2b03      	cmp	r3, #3
 800a8f6:	d141      	bne.n	800a97c <f_mkfs+0x2d4>
				if (pau == 0) {	/* AU auto-selection */
 800a8f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d120      	bne.n	800a940 <f_mkfs+0x298>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800a8fe:	69bb      	ldr	r3, [r7, #24]
 800a900:	0c5b      	lsrs	r3, r3, #17
 800a902:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a904:	2300      	movs	r3, #0
 800a906:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a908:	2301      	movs	r3, #1
 800a90a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a90c:	e00a      	b.n	800a924 <f_mkfs+0x27c>
 800a90e:	bf00      	nop
 800a910:	20005e00 	.word	0x20005e00
 800a914:	08017a0c 	.word	0x08017a0c
 800a918:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a91a:	3301      	adds	r3, #1
 800a91c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a91e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a920:	005b      	lsls	r3, r3, #1
 800a922:	663b      	str	r3, [r7, #96]	@ 0x60
 800a924:	4a95      	ldr	r2, [pc, #596]	@ (800ab7c <f_mkfs+0x4d4>)
 800a926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a928:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d007      	beq.n	800a940 <f_mkfs+0x298>
 800a930:	4a92      	ldr	r2, [pc, #584]	@ (800ab7c <f_mkfs+0x4d4>)
 800a932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a938:	461a      	mov	r2, r3
 800a93a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d2eb      	bcs.n	800a918 <f_mkfs+0x270>
				}
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 800a940:	69ba      	ldr	r2, [r7, #24]
 800a942:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a944:	fbb2 f3f3 	udiv	r3, r2, r3
 800a948:	62bb      	str	r3, [r7, #40]	@ 0x28
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800a94a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a94c:	3302      	adds	r3, #2
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	8c3a      	ldrh	r2, [r7, #32]
 800a952:	4413      	add	r3, r2
 800a954:	3b01      	subs	r3, #1
 800a956:	8c3a      	ldrh	r2, [r7, #32]
 800a958:	fbb3 f3f2 	udiv	r3, r3, r2
 800a95c:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 800a95e:	2320      	movs	r3, #32
 800a960:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = 0;		/* No static directory */
 800a962:	2300      	movs	r3, #0
 800a964:	653b      	str	r3, [r7, #80]	@ 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800a966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a968:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d903      	bls.n	800a978 <f_mkfs+0x2d0>
 800a970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a972:	4a83      	ldr	r2, [pc, #524]	@ (800ab80 <f_mkfs+0x4d8>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d94b      	bls.n	800aa10 <f_mkfs+0x368>
 800a978:	230e      	movs	r3, #14
 800a97a:	e2e1      	b.n	800af40 <f_mkfs+0x898>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 800a97c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d11b      	bne.n	800a9ba <f_mkfs+0x312>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	0b1b      	lsrs	r3, r3, #12
 800a986:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a988:	2300      	movs	r3, #0
 800a98a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a98c:	2301      	movs	r3, #1
 800a98e:	663b      	str	r3, [r7, #96]	@ 0x60
 800a990:	e005      	b.n	800a99e <f_mkfs+0x2f6>
 800a992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a994:	3301      	adds	r3, #1
 800a996:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a998:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a99a:	005b      	lsls	r3, r3, #1
 800a99c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a99e:	4a79      	ldr	r2, [pc, #484]	@ (800ab84 <f_mkfs+0x4dc>)
 800a9a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d007      	beq.n	800a9ba <f_mkfs+0x312>
 800a9aa:	4a76      	ldr	r2, [pc, #472]	@ (800ab84 <f_mkfs+0x4dc>)
 800a9ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d2eb      	bcs.n	800a992 <f_mkfs+0x2ea>
				}
				n_clst = (DWORD)sz_vol / pau;
 800a9ba:	69ba      	ldr	r2, [r7, #24]
 800a9bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a9be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9c2:	62bb      	str	r3, [r7, #40]	@ 0x28
				if (n_clst > MAX_FAT12) {
 800a9c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9c6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d904      	bls.n	800a9d8 <f_mkfs+0x330>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800a9ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d0:	3302      	adds	r3, #2
 800a9d2:	005b      	lsls	r3, r3, #1
 800a9d4:	667b      	str	r3, [r7, #100]	@ 0x64
 800a9d6:	e00a      	b.n	800a9ee <f_mkfs+0x346>
				} else {
					fsty = FS_FAT12;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800a9de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	005b      	lsls	r3, r3, #1
 800a9e4:	4413      	add	r3, r2
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	085b      	lsrs	r3, r3, #1
 800a9ea:	3303      	adds	r3, #3
 800a9ec:	667b      	str	r3, [r7, #100]	@ 0x64
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800a9ee:	8c3b      	ldrh	r3, [r7, #32]
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9f4:	4413      	add	r3, r2
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	8c3a      	ldrh	r2, [r7, #32]
 800a9fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9fe:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 800aa00:	2301      	movs	r3, #1
 800aa02:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 800aa04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa06:	015b      	lsls	r3, r3, #5
 800aa08:	8c3a      	ldrh	r2, [r7, #32]
 800aa0a:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa0e:	653b      	str	r3, [r7, #80]	@ 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800aa10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aa12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aa14:	4413      	add	r3, r2
 800aa16:	66bb      	str	r3, [r7, #104]	@ 0x68
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800aa18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aa1c:	fb03 f202 	mul.w	r2, r3, r2
 800aa20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa22:	4413      	add	r3, r2
 800aa24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aa26:	4413      	add	r3, r2
 800aa28:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 800aa2a:	69fa      	ldr	r2, [r7, #28]
 800aa2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2e:	4413      	add	r3, r2
 800aa30:	1e5a      	subs	r2, r3, #1
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	425b      	negs	r3, r3
 800aa36:	401a      	ands	r2, r3
 800aa38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3a:	1ad3      	subs	r3, r2, r3
 800aa3c:	667b      	str	r3, [r7, #100]	@ 0x64
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 800aa3e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800aa42:	2b03      	cmp	r3, #3
 800aa44:	d108      	bne.n	800aa58 <f_mkfs+0x3b0>
				sz_rsv += n; b_fat += n;
 800aa46:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800aa48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa4a:	4413      	add	r3, r2
 800aa4c:	677b      	str	r3, [r7, #116]	@ 0x74
 800aa4e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800aa50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa52:	4413      	add	r3, r2
 800aa54:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa56:	e019      	b.n	800aa8c <f_mkfs+0x3e4>
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
 800aa58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aa5c:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa62:	fb01 f202 	mul.w	r2, r1, r2
 800aa66:	1a9b      	subs	r3, r3, r2
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d008      	beq.n	800aa7e <f_mkfs+0x3d6>
					n--; sz_rsv++; b_fat++;
 800aa6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa6e:	3b01      	subs	r3, #1
 800aa70:	667b      	str	r3, [r7, #100]	@ 0x64
 800aa72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aa74:	3301      	adds	r3, #1
 800aa76:	677b      	str	r3, [r7, #116]	@ 0x74
 800aa78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	66bb      	str	r3, [r7, #104]	@ 0x68
				}
				sz_fat += n / n_fat;
 800aa7e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aa80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa82:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa86:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aa88:	4413      	add	r3, r2
 800aa8a:	657b      	str	r3, [r7, #84]	@ 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 800aa8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa8e:	011a      	lsls	r2, r3, #4
 800aa90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa92:	441a      	add	r2, r3
 800aa94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa96:	1ad2      	subs	r2, r2, r3
 800aa98:	69bb      	ldr	r3, [r7, #24]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d901      	bls.n	800aaa2 <f_mkfs+0x3fa>
 800aa9e:	230e      	movs	r3, #14
 800aaa0:	e24e      	b.n	800af40 <f_mkfs+0x898>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 800aaa2:	69ba      	ldr	r2, [r7, #24]
 800aaa4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aaa6:	1ad2      	subs	r2, r2, r3
 800aaa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aaaa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aaac:	fb01 f303 	mul.w	r3, r1, r3
 800aab0:	1ad2      	subs	r2, r2, r3
 800aab2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aab4:	1ad2      	subs	r2, r2, r3
 800aab6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aab8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aabc:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (fsty == FS_FAT32) {
 800aabe:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800aac2:	2b03      	cmp	r3, #3
 800aac4:	d10f      	bne.n	800aae6 <f_mkfs+0x43e>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 800aac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800aacc:	4293      	cmp	r3, r2
 800aace:	d80a      	bhi.n	800aae6 <f_mkfs+0x43e>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800aad0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d105      	bne.n	800aae2 <f_mkfs+0x43a>
 800aad6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aad8:	085b      	lsrs	r3, r3, #1
 800aada:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aadc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d145      	bne.n	800ab6e <f_mkfs+0x4c6>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800aae2:	230e      	movs	r3, #14
 800aae4:	e22c      	b.n	800af40 <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT16) {
 800aae6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d134      	bne.n	800ab58 <f_mkfs+0x4b0>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800aaee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaf0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d91f      	bls.n	800ab38 <f_mkfs+0x490>
					if (sz_au == 0 && (pau * 2) <= 64) {
 800aaf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d107      	bne.n	800ab0e <f_mkfs+0x466>
 800aafe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab00:	005b      	lsls	r3, r3, #1
 800ab02:	2b40      	cmp	r3, #64	@ 0x40
 800ab04:	d803      	bhi.n	800ab0e <f_mkfs+0x466>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 800ab06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab08:	005b      	lsls	r3, r3, #1
 800ab0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab0c:	e034      	b.n	800ab78 <f_mkfs+0x4d0>
					}
					if ((fsopt & FM_FAT32)) {
 800ab0e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800ab12:	f003 0302 	and.w	r3, r3, #2
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d003      	beq.n	800ab22 <f_mkfs+0x47a>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800ab1a:	2303      	movs	r3, #3
 800ab1c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800ab20:	e02a      	b.n	800ab78 <f_mkfs+0x4d0>
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ab22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d105      	bne.n	800ab34 <f_mkfs+0x48c>
 800ab28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab2a:	005b      	lsls	r3, r3, #1
 800ab2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab30:	2b80      	cmp	r3, #128	@ 0x80
 800ab32:	d91e      	bls.n	800ab72 <f_mkfs+0x4ca>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800ab34:	230e      	movs	r3, #14
 800ab36:	e203      	b.n	800af40 <f_mkfs+0x898>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800ab38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab3a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d80a      	bhi.n	800ab58 <f_mkfs+0x4b0>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ab42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d105      	bne.n	800ab54 <f_mkfs+0x4ac>
 800ab48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab4a:	005b      	lsls	r3, r3, #1
 800ab4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab50:	2b80      	cmp	r3, #128	@ 0x80
 800ab52:	d910      	bls.n	800ab76 <f_mkfs+0x4ce>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800ab54:	230e      	movs	r3, #14
 800ab56:	e1f3      	b.n	800af40 <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 800ab58:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d113      	bne.n	800ab88 <f_mkfs+0x4e0>
 800ab60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab62:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d90e      	bls.n	800ab88 <f_mkfs+0x4e0>
 800ab6a:	230e      	movs	r3, #14
 800ab6c:	e1e8      	b.n	800af40 <f_mkfs+0x898>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800ab6e:	bf00      	nop
 800ab70:	e6bc      	b.n	800a8ec <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ab72:	bf00      	nop
 800ab74:	e6ba      	b.n	800a8ec <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ab76:	bf00      	nop
			pau = sz_au;
 800ab78:	e6b8      	b.n	800a8ec <f_mkfs+0x244>
 800ab7a:	bf00      	nop
 800ab7c:	08017a1c 	.word	0x08017a1c
 800ab80:	0ffffff5 	.word	0x0ffffff5
 800ab84:	08017a2c 	.word	0x08017a2c

			/* Ok, it is the valid cluster configuration */
			break;
 800ab88:	bf00      	nop
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
 800ab8a:	8c3b      	ldrh	r3, [r7, #32]
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	2100      	movs	r1, #0
 800ab90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab92:	f00b fb1b 	bl	80161cc <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 800ab96:	220b      	movs	r2, #11
 800ab98:	49b1      	ldr	r1, [pc, #708]	@ (800ae60 <f_mkfs+0x7b8>)
 800ab9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab9c:	f00b fb9a 	bl	80162d4 <memcpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800aba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba2:	330b      	adds	r3, #11
 800aba4:	8c3a      	ldrh	r2, [r7, #32]
 800aba6:	4611      	mov	r1, r2
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7fd faaf 	bl	800810c <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800abae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb0:	330d      	adds	r3, #13
 800abb2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800abb4:	b2d2      	uxtb	r2, r2
 800abb6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800abb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abba:	330e      	adds	r3, #14
 800abbc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800abbe:	b292      	uxth	r2, r2
 800abc0:	4611      	mov	r1, r2
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7fd faa2 	bl	800810c <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 800abc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abca:	3310      	adds	r3, #16
 800abcc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800abce:	b2d2      	uxtb	r2, r2
 800abd0:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 800abd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd4:	f103 0211 	add.w	r2, r3, #17
 800abd8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800abdc:	2b03      	cmp	r3, #3
 800abde:	d002      	beq.n	800abe6 <f_mkfs+0x53e>
 800abe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	e000      	b.n	800abe8 <f_mkfs+0x540>
 800abe6:	2300      	movs	r3, #0
 800abe8:	4619      	mov	r1, r3
 800abea:	4610      	mov	r0, r2
 800abec:	f7fd fa8e 	bl	800810c <st_word>
		if (sz_vol < 0x10000) {
 800abf0:	69bb      	ldr	r3, [r7, #24]
 800abf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abf6:	d208      	bcs.n	800ac0a <f_mkfs+0x562>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800abf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abfa:	3313      	adds	r3, #19
 800abfc:	69ba      	ldr	r2, [r7, #24]
 800abfe:	b292      	uxth	r2, r2
 800ac00:	4611      	mov	r1, r2
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7fd fa82 	bl	800810c <st_word>
 800ac08:	e006      	b.n	800ac18 <f_mkfs+0x570>
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 800ac0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac0c:	3320      	adds	r3, #32
 800ac0e:	69ba      	ldr	r2, [r7, #24]
 800ac10:	4611      	mov	r1, r2
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fd fa95 	bl	8008142 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800ac18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac1a:	3315      	adds	r3, #21
 800ac1c:	22f8      	movs	r2, #248	@ 0xf8
 800ac1e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800ac20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac22:	3318      	adds	r3, #24
 800ac24:	213f      	movs	r1, #63	@ 0x3f
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7fd fa70 	bl	800810c <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800ac2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac2e:	331a      	adds	r3, #26
 800ac30:	21ff      	movs	r1, #255	@ 0xff
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7fd fa6a 	bl	800810c <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 800ac38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac3a:	331c      	adds	r3, #28
 800ac3c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7fd fa7f 	bl	8008142 <st_dword>
		if (fsty == FS_FAT32) {
 800ac44:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ac48:	2b03      	cmp	r3, #3
 800ac4a:	d12d      	bne.n	800aca8 <f_mkfs+0x600>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 800ac4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac4e:	3343      	adds	r3, #67	@ 0x43
 800ac50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7fd fa75 	bl	8008142 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800ac58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac5a:	3324      	adds	r3, #36	@ 0x24
 800ac5c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7fd fa6f 	bl	8008142 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800ac64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac66:	332c      	adds	r3, #44	@ 0x2c
 800ac68:	2102      	movs	r1, #2
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7fd fa69 	bl	8008142 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800ac70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac72:	3330      	adds	r3, #48	@ 0x30
 800ac74:	2101      	movs	r1, #1
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7fd fa48 	bl	800810c <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800ac7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac7e:	3332      	adds	r3, #50	@ 0x32
 800ac80:	2106      	movs	r1, #6
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7fd fa42 	bl	800810c <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800ac88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac8a:	3340      	adds	r3, #64	@ 0x40
 800ac8c:	2280      	movs	r2, #128	@ 0x80
 800ac8e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800ac90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac92:	3342      	adds	r3, #66	@ 0x42
 800ac94:	2229      	movs	r2, #41	@ 0x29
 800ac96:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800ac98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac9a:	3347      	adds	r3, #71	@ 0x47
 800ac9c:	2213      	movs	r2, #19
 800ac9e:	4971      	ldr	r1, [pc, #452]	@ (800ae64 <f_mkfs+0x7bc>)
 800aca0:	4618      	mov	r0, r3
 800aca2:	f00b fb17 	bl	80162d4 <memcpy>
 800aca6:	e01c      	b.n	800ace2 <f_mkfs+0x63a>
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 800aca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acaa:	3327      	adds	r3, #39	@ 0x27
 800acac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800acae:	4618      	mov	r0, r3
 800acb0:	f7fd fa47 	bl	8008142 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800acb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb6:	3316      	adds	r3, #22
 800acb8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800acba:	b292      	uxth	r2, r2
 800acbc:	4611      	mov	r1, r2
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7fd fa24 	bl	800810c <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800acc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc6:	3324      	adds	r3, #36	@ 0x24
 800acc8:	2280      	movs	r2, #128	@ 0x80
 800acca:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800accc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acce:	3326      	adds	r3, #38	@ 0x26
 800acd0:	2229      	movs	r2, #41	@ 0x29
 800acd2:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800acd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd6:	332b      	adds	r3, #43	@ 0x2b
 800acd8:	2213      	movs	r2, #19
 800acda:	4963      	ldr	r1, [pc, #396]	@ (800ae68 <f_mkfs+0x7c0>)
 800acdc:	4618      	mov	r0, r3
 800acde:	f00b faf9 	bl	80162d4 <memcpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800ace2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ace8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800acec:	4618      	mov	r0, r3
 800acee:	f7fd fa0d 	bl	800810c <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 800acf2:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800acf6:	2301      	movs	r3, #1
 800acf8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800acfa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800acfc:	f7fd f914 	bl	8007f28 <disk_write>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d001      	beq.n	800ad0a <f_mkfs+0x662>
 800ad06:	2301      	movs	r3, #1
 800ad08:	e11a      	b.n	800af40 <f_mkfs+0x898>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 800ad0a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ad0e:	2b03      	cmp	r3, #3
 800ad10:	d140      	bne.n	800ad94 <f_mkfs+0x6ec>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800ad12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad14:	1d9a      	adds	r2, r3, #6
 800ad16:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ad1e:	f7fd f903 	bl	8007f28 <disk_write>
			memset(buf, 0, ss);
 800ad22:	8c3b      	ldrh	r3, [r7, #32]
 800ad24:	461a      	mov	r2, r3
 800ad26:	2100      	movs	r1, #0
 800ad28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad2a:	f00b fa4f 	bl	80161cc <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800ad2e:	494f      	ldr	r1, [pc, #316]	@ (800ae6c <f_mkfs+0x7c4>)
 800ad30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad32:	f7fd fa06 	bl	8008142 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800ad36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad38:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ad3c:	494c      	ldr	r1, [pc, #304]	@ (800ae70 <f_mkfs+0x7c8>)
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fd f9ff 	bl	8008142 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800ad44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad46:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800ad4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad4c:	3b01      	subs	r3, #1
 800ad4e:	4619      	mov	r1, r3
 800ad50:	4610      	mov	r0, r2
 800ad52:	f7fd f9f6 	bl	8008142 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800ad56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad58:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800ad5c:	2102      	movs	r1, #2
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7fd f9ef 	bl	8008142 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800ad64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad66:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ad6a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7fd f9cc 	bl	800810c <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800ad74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad76:	1dda      	adds	r2, r3, #7
 800ad78:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ad80:	f7fd f8d2 	bl	8007f28 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800ad84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad86:	1c5a      	adds	r2, r3, #1
 800ad88:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ad90:	f7fd f8ca 	bl	8007f28 <disk_write>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
 800ad94:	8c3b      	ldrh	r3, [r7, #32]
 800ad96:	461a      	mov	r2, r3
 800ad98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad9a:	fb02 f303 	mul.w	r3, r2, r3
 800ad9e:	461a      	mov	r2, r3
 800ada0:	2100      	movs	r1, #0
 800ada2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ada4:	f00b fa12 	bl	80161cc <memset>
		sect = b_fat;		/* FAT start sector */
 800ada8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800adaa:	673b      	str	r3, [r7, #112]	@ 0x70
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800adac:	2300      	movs	r3, #0
 800adae:	64bb      	str	r3, [r7, #72]	@ 0x48
 800adb0:	e04b      	b.n	800ae4a <f_mkfs+0x7a2>
			if (fsty == FS_FAT32) {
 800adb2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800adb6:	2b03      	cmp	r3, #3
 800adb8:	d113      	bne.n	800ade2 <f_mkfs+0x73a>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
 800adba:	f06f 0107 	mvn.w	r1, #7
 800adbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800adc0:	f7fd f9bf 	bl	8008142 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
 800adc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc6:	3304      	adds	r3, #4
 800adc8:	f04f 31ff 	mov.w	r1, #4294967295
 800adcc:	4618      	mov	r0, r3
 800adce:	f7fd f9b8 	bl	8008142 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
 800add2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add4:	3308      	adds	r3, #8
 800add6:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800adda:	4618      	mov	r0, r3
 800addc:	f7fd f9b1 	bl	8008142 <st_dword>
 800ade0:	e00b      	b.n	800adfa <f_mkfs+0x752>
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 800ade2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d101      	bne.n	800adee <f_mkfs+0x746>
 800adea:	4b22      	ldr	r3, [pc, #136]	@ (800ae74 <f_mkfs+0x7cc>)
 800adec:	e001      	b.n	800adf2 <f_mkfs+0x74a>
 800adee:	f06f 0307 	mvn.w	r3, #7
 800adf2:	4619      	mov	r1, r3
 800adf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800adf6:	f7fd f9a4 	bl	8008142 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800adfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800adfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800adfe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ae00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae02:	4293      	cmp	r3, r2
 800ae04:	bf28      	it	cs
 800ae06:	4613      	movcs	r3, r2
 800ae08:	667b      	str	r3, [r7, #100]	@ 0x64
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800ae0a:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800ae0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae10:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ae12:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ae14:	f7fd f888 	bl	8007f28 <disk_write>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d001      	beq.n	800ae22 <f_mkfs+0x77a>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e08e      	b.n	800af40 <f_mkfs+0x898>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
 800ae22:	8c3b      	ldrh	r3, [r7, #32]
 800ae24:	461a      	mov	r2, r3
 800ae26:	2100      	movs	r1, #0
 800ae28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae2a:	f00b f9cf 	bl	80161cc <memset>
				sect += n; nsect -= n;
 800ae2e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ae30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae32:	4413      	add	r3, r2
 800ae34:	673b      	str	r3, [r7, #112]	@ 0x70
 800ae36:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ae38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae3a:	1ad3      	subs	r3, r2, r3
 800ae3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
			} while (nsect);
 800ae3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d1dc      	bne.n	800adfe <f_mkfs+0x756>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800ae44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae46:	3301      	adds	r3, #1
 800ae48:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d3af      	bcc.n	800adb2 <f_mkfs+0x70a>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800ae52:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ae56:	2b03      	cmp	r3, #3
 800ae58:	d10e      	bne.n	800ae78 <f_mkfs+0x7d0>
 800ae5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae5c:	e00d      	b.n	800ae7a <f_mkfs+0x7d2>
 800ae5e:	bf00      	nop
 800ae60:	080178c4 	.word	0x080178c4
 800ae64:	080178d0 	.word	0x080178d0
 800ae68:	080178e4 	.word	0x080178e4
 800ae6c:	41615252 	.word	0x41615252
 800ae70:	61417272 	.word	0x61417272
 800ae74:	00fffff8 	.word	0x00fffff8
 800ae78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800ae7c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ae7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae80:	4293      	cmp	r3, r2
 800ae82:	bf28      	it	cs
 800ae84:	4613      	movcs	r3, r2
 800ae86:	667b      	str	r3, [r7, #100]	@ 0x64
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800ae88:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800ae8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae8e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ae90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ae92:	f7fd f849 	bl	8007f28 <disk_write>
 800ae96:	4603      	mov	r3, r0
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d001      	beq.n	800aea0 <f_mkfs+0x7f8>
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e04f      	b.n	800af40 <f_mkfs+0x898>
			sect += n; nsect -= n;
 800aea0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800aea2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aea4:	4413      	add	r3, r2
 800aea6:	673b      	str	r3, [r7, #112]	@ 0x70
 800aea8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800aeaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aeac:	1ad3      	subs	r3, r2, r3
 800aeae:	65fb      	str	r3, [r7, #92]	@ 0x5c
		} while (nsect);
 800aeb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d1e2      	bne.n	800ae7c <f_mkfs+0x7d4>
	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;		/* exFAT */
	} else if (fsty == FS_FAT32) {
 800aeb6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800aeba:	2b03      	cmp	r3, #3
 800aebc:	d103      	bne.n	800aec6 <f_mkfs+0x81e>
		sys = 0x0C;		/* FAT32X */
 800aebe:	230c      	movs	r3, #12
 800aec0:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800aec4:	e012      	b.n	800aeec <f_mkfs+0x844>
	} else if (sz_vol >= 0x10000) {
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aecc:	d303      	bcc.n	800aed6 <f_mkfs+0x82e>
		sys = 0x06;		/* FAT12/16 (large) */
 800aece:	2306      	movs	r3, #6
 800aed0:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800aed4:	e00a      	b.n	800aeec <f_mkfs+0x844>
	} else if (fsty == FS_FAT16) {
 800aed6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800aeda:	2b02      	cmp	r3, #2
 800aedc:	d103      	bne.n	800aee6 <f_mkfs+0x83e>
		sys = 0x04;		/* FAT16 */
 800aede:	2304      	movs	r3, #4
 800aee0:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800aee4:	e002      	b.n	800aeec <f_mkfs+0x844>
	} else {
		sys = 0x01;		/* FAT12 */
 800aee6:	2301      	movs	r3, #1
 800aee8:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 800aeec:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800aef0:	f003 0308 	and.w	r3, r3, #8
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d116      	bne.n	800af26 <f_mkfs+0x87e>
			lba[0] = sz_vol; lba[1] = 0;
 800aef8:	69bb      	ldr	r3, [r7, #24]
 800aefa:	613b      	str	r3, [r7, #16]
 800aefc:	2300      	movs	r3, #0
 800aefe:	617b      	str	r3, [r7, #20]
			res = create_partition(pdrv, lba, sys, buf);
 800af00:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 800af04:	f107 0110 	add.w	r1, r7, #16
 800af08:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800af0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af0e:	f7ff faa7 	bl	800a460 <create_partition>
 800af12:	4603      	mov	r3, r0
 800af14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			if (res != FR_OK) LEAVE_MKFS(res);
 800af18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d002      	beq.n	800af26 <f_mkfs+0x87e>
 800af20:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800af24:	e00c      	b.n	800af40 <f_mkfs+0x898>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800af26:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800af2a:	2200      	movs	r2, #0
 800af2c:	2100      	movs	r1, #0
 800af2e:	4618      	mov	r0, r3
 800af30:	f7fd f82e 	bl	8007f90 <disk_ioctl>
 800af34:	4603      	mov	r3, r0
 800af36:	2b00      	cmp	r3, #0
 800af38:	d001      	beq.n	800af3e <f_mkfs+0x896>
 800af3a:	2301      	movs	r3, #1
 800af3c:	e000      	b.n	800af40 <f_mkfs+0x898>

	LEAVE_MKFS(FR_OK);
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	3778      	adds	r7, #120	@ 0x78
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800af48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800af80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800af4c:	f7fc ff58 	bl	8007e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800af50:	480c      	ldr	r0, [pc, #48]	@ (800af84 <LoopForever+0x6>)
  ldr r1, =_edata
 800af52:	490d      	ldr	r1, [pc, #52]	@ (800af88 <LoopForever+0xa>)
  ldr r2, =_sidata
 800af54:	4a0d      	ldr	r2, [pc, #52]	@ (800af8c <LoopForever+0xe>)
  movs r3, #0
 800af56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800af58:	e002      	b.n	800af60 <LoopCopyDataInit>

0800af5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800af5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800af5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800af5e:	3304      	adds	r3, #4

0800af60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800af60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800af62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800af64:	d3f9      	bcc.n	800af5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800af66:	4a0a      	ldr	r2, [pc, #40]	@ (800af90 <LoopForever+0x12>)
  ldr r4, =_ebss
 800af68:	4c0a      	ldr	r4, [pc, #40]	@ (800af94 <LoopForever+0x16>)
  movs r3, #0
 800af6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800af6c:	e001      	b.n	800af72 <LoopFillZerobss>

0800af6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800af6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800af70:	3204      	adds	r2, #4

0800af72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800af72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800af74:	d3fb      	bcc.n	800af6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800af76:	f00b f97f 	bl	8016278 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800af7a:	f7f9 f92f 	bl	80041dc <main>

0800af7e <LoopForever>:

LoopForever:
    b LoopForever
 800af7e:	e7fe      	b.n	800af7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800af80:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800af84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800af88:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 800af8c:	08017b9c 	.word	0x08017b9c
  ldr r2, =_sbss
 800af90:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 800af94:	20005f58 	.word	0x20005f58

0800af98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800af98:	e7fe      	b.n	800af98 <ADC1_2_IRQHandler>

0800af9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b082      	sub	sp, #8
 800af9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800afa0:	2300      	movs	r3, #0
 800afa2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800afa4:	2003      	movs	r0, #3
 800afa6:	f001 fd11 	bl	800c9cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800afaa:	200f      	movs	r0, #15
 800afac:	f000 f80e 	bl	800afcc <HAL_InitTick>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d002      	beq.n	800afbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800afb6:	2301      	movs	r3, #1
 800afb8:	71fb      	strb	r3, [r7, #7]
 800afba:	e001      	b.n	800afc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800afbc:	f7fc fa56 	bl	800746c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800afc0:	79fb      	ldrb	r3, [r7, #7]
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3708      	adds	r7, #8
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
	...

0800afcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800afd4:	2300      	movs	r3, #0
 800afd6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800afd8:	4b17      	ldr	r3, [pc, #92]	@ (800b038 <HAL_InitTick+0x6c>)
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d023      	beq.n	800b028 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800afe0:	4b16      	ldr	r3, [pc, #88]	@ (800b03c <HAL_InitTick+0x70>)
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	4b14      	ldr	r3, [pc, #80]	@ (800b038 <HAL_InitTick+0x6c>)
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	4619      	mov	r1, r3
 800afea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800afee:	fbb3 f3f1 	udiv	r3, r3, r1
 800aff2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aff6:	4618      	mov	r0, r3
 800aff8:	f001 fd21 	bl	800ca3e <HAL_SYSTICK_Config>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d10f      	bne.n	800b022 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2b0f      	cmp	r3, #15
 800b006:	d809      	bhi.n	800b01c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b008:	2200      	movs	r2, #0
 800b00a:	6879      	ldr	r1, [r7, #4]
 800b00c:	f04f 30ff 	mov.w	r0, #4294967295
 800b010:	f001 fce7 	bl	800c9e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b014:	4a0a      	ldr	r2, [pc, #40]	@ (800b040 <HAL_InitTick+0x74>)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6013      	str	r3, [r2, #0]
 800b01a:	e007      	b.n	800b02c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800b01c:	2301      	movs	r3, #1
 800b01e:	73fb      	strb	r3, [r7, #15]
 800b020:	e004      	b.n	800b02c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800b022:	2301      	movs	r3, #1
 800b024:	73fb      	strb	r3, [r7, #15]
 800b026:	e001      	b.n	800b02c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800b028:	2301      	movs	r3, #1
 800b02a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800b02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	20000278 	.word	0x20000278
 800b03c:	20000268 	.word	0x20000268
 800b040:	20000274 	.word	0x20000274

0800b044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b044:	b480      	push	{r7}
 800b046:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800b048:	4b06      	ldr	r3, [pc, #24]	@ (800b064 <HAL_IncTick+0x20>)
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	461a      	mov	r2, r3
 800b04e:	4b06      	ldr	r3, [pc, #24]	@ (800b068 <HAL_IncTick+0x24>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4413      	add	r3, r2
 800b054:	4a04      	ldr	r2, [pc, #16]	@ (800b068 <HAL_IncTick+0x24>)
 800b056:	6013      	str	r3, [r2, #0]
}
 800b058:	bf00      	nop
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	20000278 	.word	0x20000278
 800b068:	20005e0c 	.word	0x20005e0c

0800b06c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b06c:	b480      	push	{r7}
 800b06e:	af00      	add	r7, sp, #0
  return uwTick;
 800b070:	4b03      	ldr	r3, [pc, #12]	@ (800b080 <HAL_GetTick+0x14>)
 800b072:	681b      	ldr	r3, [r3, #0]
}
 800b074:	4618      	mov	r0, r3
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr
 800b07e:	bf00      	nop
 800b080:	20005e0c 	.word	0x20005e0c

0800b084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b08c:	f7ff ffee 	bl	800b06c <HAL_GetTick>
 800b090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b09c:	d005      	beq.n	800b0aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800b09e:	4b0a      	ldr	r3, [pc, #40]	@ (800b0c8 <HAL_Delay+0x44>)
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	4413      	add	r3, r2
 800b0a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b0aa:	bf00      	nop
 800b0ac:	f7ff ffde 	bl	800b06c <HAL_GetTick>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	1ad3      	subs	r3, r2, r3
 800b0b6:	68fa      	ldr	r2, [r7, #12]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d8f7      	bhi.n	800b0ac <HAL_Delay+0x28>
  {
  }
}
 800b0bc:	bf00      	nop
 800b0be:	bf00      	nop
 800b0c0:	3710      	adds	r7, #16
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	20000278 	.word	0x20000278

0800b0cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	431a      	orrs	r2, r3
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	609a      	str	r2, [r3, #8]
}
 800b0e6:	bf00      	nop
 800b0e8:	370c      	adds	r7, #12
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr

0800b0f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800b0f2:	b480      	push	{r7}
 800b0f4:	b083      	sub	sp, #12
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	431a      	orrs	r2, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	609a      	str	r2, [r3, #8]
}
 800b10c:	bf00      	nop
 800b10e:	370c      	adds	r7, #12
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr

0800b118 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b118:	b480      	push	{r7}
 800b11a:	b083      	sub	sp, #12
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	689b      	ldr	r3, [r3, #8]
 800b124:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800b128:	4618      	mov	r0, r3
 800b12a:	370c      	adds	r7, #12
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800b134:	b480      	push	{r7}
 800b136:	b087      	sub	sp, #28
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	607a      	str	r2, [r7, #4]
 800b140:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	3360      	adds	r3, #96	@ 0x60
 800b146:	461a      	mov	r2, r3
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	4413      	add	r3, r2
 800b14e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	4b08      	ldr	r3, [pc, #32]	@ (800b178 <LL_ADC_SetOffset+0x44>)
 800b156:	4013      	ands	r3, r2
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800b15e:	683a      	ldr	r2, [r7, #0]
 800b160:	430a      	orrs	r2, r1
 800b162:	4313      	orrs	r3, r2
 800b164:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800b16c:	bf00      	nop
 800b16e:	371c      	adds	r7, #28
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr
 800b178:	03fff000 	.word	0x03fff000

0800b17c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b085      	sub	sp, #20
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	3360      	adds	r3, #96	@ 0x60
 800b18a:	461a      	mov	r2, r3
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	4413      	add	r3, r2
 800b192:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3714      	adds	r7, #20
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b087      	sub	sp, #28
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	3360      	adds	r3, #96	@ 0x60
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	4413      	add	r3, r2
 800b1c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	431a      	orrs	r2, r3
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800b1d2:	bf00      	nop
 800b1d4:	371c      	adds	r7, #28
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr

0800b1de <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800b1de:	b480      	push	{r7}
 800b1e0:	b083      	sub	sp, #12
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	68db      	ldr	r3, [r3, #12]
 800b1ea:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d101      	bne.n	800b1f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	e000      	b.n	800b1f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800b1f6:	2300      	movs	r3, #0
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800b204:	b480      	push	{r7}
 800b206:	b087      	sub	sp, #28
 800b208:	af00      	add	r7, sp, #0
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	60b9      	str	r1, [r7, #8]
 800b20e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	3330      	adds	r3, #48	@ 0x30
 800b214:	461a      	mov	r2, r3
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	0a1b      	lsrs	r3, r3, #8
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	f003 030c 	and.w	r3, r3, #12
 800b220:	4413      	add	r3, r2
 800b222:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	f003 031f 	and.w	r3, r3, #31
 800b22e:	211f      	movs	r1, #31
 800b230:	fa01 f303 	lsl.w	r3, r1, r3
 800b234:	43db      	mvns	r3, r3
 800b236:	401a      	ands	r2, r3
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	0e9b      	lsrs	r3, r3, #26
 800b23c:	f003 011f 	and.w	r1, r3, #31
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	f003 031f 	and.w	r3, r3, #31
 800b246:	fa01 f303 	lsl.w	r3, r1, r3
 800b24a:	431a      	orrs	r2, r3
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800b250:	bf00      	nop
 800b252:	371c      	adds	r7, #28
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b087      	sub	sp, #28
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	3314      	adds	r3, #20
 800b26c:	461a      	mov	r2, r3
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	0e5b      	lsrs	r3, r3, #25
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	f003 0304 	and.w	r3, r3, #4
 800b278:	4413      	add	r3, r2
 800b27a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	0d1b      	lsrs	r3, r3, #20
 800b284:	f003 031f 	and.w	r3, r3, #31
 800b288:	2107      	movs	r1, #7
 800b28a:	fa01 f303 	lsl.w	r3, r1, r3
 800b28e:	43db      	mvns	r3, r3
 800b290:	401a      	ands	r2, r3
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	0d1b      	lsrs	r3, r3, #20
 800b296:	f003 031f 	and.w	r3, r3, #31
 800b29a:	6879      	ldr	r1, [r7, #4]
 800b29c:	fa01 f303 	lsl.w	r3, r1, r3
 800b2a0:	431a      	orrs	r2, r3
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800b2a6:	bf00      	nop
 800b2a8:	371c      	adds	r7, #28
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr
	...

0800b2b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b085      	sub	sp, #20
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2cc:	43db      	mvns	r3, r3
 800b2ce:	401a      	ands	r2, r3
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f003 0318 	and.w	r3, r3, #24
 800b2d6:	4908      	ldr	r1, [pc, #32]	@ (800b2f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 800b2d8:	40d9      	lsrs	r1, r3
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	400b      	ands	r3, r1
 800b2de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2e2:	431a      	orrs	r2, r3
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800b2ea:	bf00      	nop
 800b2ec:	3714      	adds	r7, #20
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr
 800b2f6:	bf00      	nop
 800b2f8:	0007ffff 	.word	0x0007ffff

0800b2fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	f003 031f 	and.w	r3, r3, #31
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	370c      	adds	r7, #12
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800b328:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	6093      	str	r3, [r2, #8]
}
 800b330:	bf00      	nop
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b34c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b350:	d101      	bne.n	800b356 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800b352:	2301      	movs	r3, #1
 800b354:	e000      	b.n	800b358 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800b356:	2300      	movs	r3, #0
}
 800b358:	4618      	mov	r0, r3
 800b35a:	370c      	adds	r7, #12
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	689b      	ldr	r3, [r3, #8]
 800b370:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800b374:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b378:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800b380:	bf00      	nop
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b39c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3a0:	d101      	bne.n	800b3a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	e000      	b.n	800b3a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b3c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b3c8:	f043 0201 	orr.w	r2, r3, #1
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800b3d0:	bf00      	nop
 800b3d2:	370c      	adds	r7, #12
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	689b      	ldr	r3, [r3, #8]
 800b3e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b3ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b3f0:	f043 0202 	orr.w	r2, r3, #2
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800b3f8:	bf00      	nop
 800b3fa:	370c      	adds	r7, #12
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800b404:	b480      	push	{r7}
 800b406:	b083      	sub	sp, #12
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	689b      	ldr	r3, [r3, #8]
 800b410:	f003 0301 	and.w	r3, r3, #1
 800b414:	2b01      	cmp	r3, #1
 800b416:	d101      	bne.n	800b41c <LL_ADC_IsEnabled+0x18>
 800b418:	2301      	movs	r3, #1
 800b41a:	e000      	b.n	800b41e <LL_ADC_IsEnabled+0x1a>
 800b41c:	2300      	movs	r3, #0
}
 800b41e:	4618      	mov	r0, r3
 800b420:	370c      	adds	r7, #12
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr

0800b42a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800b42a:	b480      	push	{r7}
 800b42c:	b083      	sub	sp, #12
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	f003 0302 	and.w	r3, r3, #2
 800b43a:	2b02      	cmp	r3, #2
 800b43c:	d101      	bne.n	800b442 <LL_ADC_IsDisableOngoing+0x18>
 800b43e:	2301      	movs	r3, #1
 800b440:	e000      	b.n	800b444 <LL_ADC_IsDisableOngoing+0x1a>
 800b442:	2300      	movs	r3, #0
}
 800b444:	4618      	mov	r0, r3
 800b446:	370c      	adds	r7, #12
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr

0800b450 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b460:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b464:	f043 0204 	orr.w	r2, r3, #4
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800b46c:	bf00      	nop
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	689b      	ldr	r3, [r3, #8]
 800b484:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b488:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b48c:	f043 0210 	orr.w	r2, r3, #16
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800b494:	bf00      	nop
 800b496:	370c      	adds	r7, #12
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr

0800b4a0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	f003 0304 	and.w	r3, r3, #4
 800b4b0:	2b04      	cmp	r3, #4
 800b4b2:	d101      	bne.n	800b4b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	e000      	b.n	800b4ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	370c      	adds	r7, #12
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr

0800b4c6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800b4c6:	b480      	push	{r7}
 800b4c8:	b083      	sub	sp, #12
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b4d6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b4da:	f043 0220 	orr.w	r2, r3, #32
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800b4e2:	bf00      	nop
 800b4e4:	370c      	adds	r7, #12
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr

0800b4ee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b4ee:	b480      	push	{r7}
 800b4f0:	b083      	sub	sp, #12
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	689b      	ldr	r3, [r3, #8]
 800b4fa:	f003 0308 	and.w	r3, r3, #8
 800b4fe:	2b08      	cmp	r3, #8
 800b500:	d101      	bne.n	800b506 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800b502:	2301      	movs	r3, #1
 800b504:	e000      	b.n	800b508 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	370c      	adds	r7, #12
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b514:	b590      	push	{r4, r7, lr}
 800b516:	b089      	sub	sp, #36	@ 0x24
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b51c:	2300      	movs	r3, #0
 800b51e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800b520:	2300      	movs	r3, #0
 800b522:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d101      	bne.n	800b52e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800b52a:	2301      	movs	r3, #1
 800b52c:	e130      	b.n	800b790 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	691b      	ldr	r3, [r3, #16]
 800b532:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d109      	bne.n	800b550 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f7fb ffb9 	bl	80074b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2200      	movs	r2, #0
 800b546:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2200      	movs	r2, #0
 800b54c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4618      	mov	r0, r3
 800b556:	f7ff fef1 	bl	800b33c <LL_ADC_IsDeepPowerDownEnabled>
 800b55a:	4603      	mov	r3, r0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d004      	beq.n	800b56a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4618      	mov	r0, r3
 800b566:	f7ff fed7 	bl	800b318 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4618      	mov	r0, r3
 800b570:	f7ff ff0c 	bl	800b38c <LL_ADC_IsInternalRegulatorEnabled>
 800b574:	4603      	mov	r3, r0
 800b576:	2b00      	cmp	r3, #0
 800b578:	d115      	bne.n	800b5a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4618      	mov	r0, r3
 800b580:	f7ff fef0 	bl	800b364 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b584:	4b84      	ldr	r3, [pc, #528]	@ (800b798 <HAL_ADC_Init+0x284>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	099b      	lsrs	r3, r3, #6
 800b58a:	4a84      	ldr	r2, [pc, #528]	@ (800b79c <HAL_ADC_Init+0x288>)
 800b58c:	fba2 2303 	umull	r2, r3, r2, r3
 800b590:	099b      	lsrs	r3, r3, #6
 800b592:	3301      	adds	r3, #1
 800b594:	005b      	lsls	r3, r3, #1
 800b596:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b598:	e002      	b.n	800b5a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	3b01      	subs	r3, #1
 800b59e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d1f9      	bne.n	800b59a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7ff feee 	bl	800b38c <LL_ADC_IsInternalRegulatorEnabled>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d10d      	bne.n	800b5d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5ba:	f043 0210 	orr.w	r2, r3, #16
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5c6:	f043 0201 	orr.w	r2, r3, #1
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7ff ff62 	bl	800b4a0 <LL_ADC_REG_IsConversionOngoing>
 800b5dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5e2:	f003 0310 	and.w	r3, r3, #16
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	f040 80c9 	bne.w	800b77e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	f040 80c5 	bne.w	800b77e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5f8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800b5fc:	f043 0202 	orr.w	r2, r3, #2
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4618      	mov	r0, r3
 800b60a:	f7ff fefb 	bl	800b404 <LL_ADC_IsEnabled>
 800b60e:	4603      	mov	r3, r0
 800b610:	2b00      	cmp	r3, #0
 800b612:	d115      	bne.n	800b640 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b614:	4862      	ldr	r0, [pc, #392]	@ (800b7a0 <HAL_ADC_Init+0x28c>)
 800b616:	f7ff fef5 	bl	800b404 <LL_ADC_IsEnabled>
 800b61a:	4604      	mov	r4, r0
 800b61c:	4861      	ldr	r0, [pc, #388]	@ (800b7a4 <HAL_ADC_Init+0x290>)
 800b61e:	f7ff fef1 	bl	800b404 <LL_ADC_IsEnabled>
 800b622:	4603      	mov	r3, r0
 800b624:	431c      	orrs	r4, r3
 800b626:	4860      	ldr	r0, [pc, #384]	@ (800b7a8 <HAL_ADC_Init+0x294>)
 800b628:	f7ff feec 	bl	800b404 <LL_ADC_IsEnabled>
 800b62c:	4603      	mov	r3, r0
 800b62e:	4323      	orrs	r3, r4
 800b630:	2b00      	cmp	r3, #0
 800b632:	d105      	bne.n	800b640 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	4619      	mov	r1, r3
 800b63a:	485c      	ldr	r0, [pc, #368]	@ (800b7ac <HAL_ADC_Init+0x298>)
 800b63c:	f7ff fd46 	bl	800b0cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	7e5b      	ldrb	r3, [r3, #25]
 800b644:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b64a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800b650:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800b656:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b65e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b660:	4313      	orrs	r3, r2
 800b662:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d106      	bne.n	800b67c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b672:	3b01      	subs	r3, #1
 800b674:	045b      	lsls	r3, r3, #17
 800b676:	69ba      	ldr	r2, [r7, #24]
 800b678:	4313      	orrs	r3, r2
 800b67a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b680:	2b00      	cmp	r3, #0
 800b682:	d009      	beq.n	800b698 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b688:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b690:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b692:	69ba      	ldr	r2, [r7, #24]
 800b694:	4313      	orrs	r3, r2
 800b696:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	68da      	ldr	r2, [r3, #12]
 800b69e:	4b44      	ldr	r3, [pc, #272]	@ (800b7b0 <HAL_ADC_Init+0x29c>)
 800b6a0:	4013      	ands	r3, r2
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	6812      	ldr	r2, [r2, #0]
 800b6a6:	69b9      	ldr	r1, [r7, #24]
 800b6a8:	430b      	orrs	r3, r1
 800b6aa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7ff ff1c 	bl	800b4ee <LL_ADC_INJ_IsConversionOngoing>
 800b6b6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d13d      	bne.n	800b73a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d13a      	bne.n	800b73a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b6c8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b6d0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b6e0:	f023 0302 	bic.w	r3, r3, #2
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	6812      	ldr	r2, [r2, #0]
 800b6e8:	69b9      	ldr	r1, [r7, #24]
 800b6ea:	430b      	orrs	r3, r1
 800b6ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d118      	bne.n	800b72a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	691b      	ldr	r3, [r3, #16]
 800b6fe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b702:	f023 0304 	bic.w	r3, r3, #4
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b70e:	4311      	orrs	r1, r2
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800b714:	4311      	orrs	r1, r2
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b71a:	430a      	orrs	r2, r1
 800b71c:	431a      	orrs	r2, r3
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f042 0201 	orr.w	r2, r2, #1
 800b726:	611a      	str	r2, [r3, #16]
 800b728:	e007      	b.n	800b73a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	691a      	ldr	r2, [r3, #16]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f022 0201 	bic.w	r2, r2, #1
 800b738:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	691b      	ldr	r3, [r3, #16]
 800b73e:	2b01      	cmp	r3, #1
 800b740:	d10c      	bne.n	800b75c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b748:	f023 010f 	bic.w	r1, r3, #15
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	69db      	ldr	r3, [r3, #28]
 800b750:	1e5a      	subs	r2, r3, #1
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	430a      	orrs	r2, r1
 800b758:	631a      	str	r2, [r3, #48]	@ 0x30
 800b75a:	e007      	b.n	800b76c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f022 020f 	bic.w	r2, r2, #15
 800b76a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b770:	f023 0303 	bic.w	r3, r3, #3
 800b774:	f043 0201 	orr.w	r2, r3, #1
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	655a      	str	r2, [r3, #84]	@ 0x54
 800b77c:	e007      	b.n	800b78e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b782:	f043 0210 	orr.w	r2, r3, #16
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800b78a:	2301      	movs	r3, #1
 800b78c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800b78e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b790:	4618      	mov	r0, r3
 800b792:	3724      	adds	r7, #36	@ 0x24
 800b794:	46bd      	mov	sp, r7
 800b796:	bd90      	pop	{r4, r7, pc}
 800b798:	20000268 	.word	0x20000268
 800b79c:	053e2d63 	.word	0x053e2d63
 800b7a0:	50040000 	.word	0x50040000
 800b7a4:	50040100 	.word	0x50040100
 800b7a8:	50040200 	.word	0x50040200
 800b7ac:	50040300 	.word	0x50040300
 800b7b0:	fff0c007 	.word	0xfff0c007

0800b7b4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b086      	sub	sp, #24
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b7c0:	4853      	ldr	r0, [pc, #332]	@ (800b910 <HAL_ADC_Start_DMA+0x15c>)
 800b7c2:	f7ff fd9b 	bl	800b2fc <LL_ADC_GetMultimode>
 800b7c6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7ff fe67 	bl	800b4a0 <LL_ADC_REG_IsConversionOngoing>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	f040 8093 	bne.w	800b900 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d101      	bne.n	800b7e8 <HAL_ADC_Start_DMA+0x34>
 800b7e4:	2302      	movs	r3, #2
 800b7e6:	e08e      	b.n	800b906 <HAL_ADC_Start_DMA+0x152>
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	4a47      	ldr	r2, [pc, #284]	@ (800b914 <HAL_ADC_Start_DMA+0x160>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d008      	beq.n	800b80c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d005      	beq.n	800b80c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	2b05      	cmp	r3, #5
 800b804:	d002      	beq.n	800b80c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	2b09      	cmp	r3, #9
 800b80a:	d172      	bne.n	800b8f2 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800b80c:	68f8      	ldr	r0, [r7, #12]
 800b80e:	f000 fda7 	bl	800c360 <ADC_Enable>
 800b812:	4603      	mov	r3, r0
 800b814:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800b816:	7dfb      	ldrb	r3, [r7, #23]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d165      	bne.n	800b8e8 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b820:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b824:	f023 0301 	bic.w	r3, r3, #1
 800b828:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a38      	ldr	r2, [pc, #224]	@ (800b918 <HAL_ADC_Start_DMA+0x164>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d002      	beq.n	800b840 <HAL_ADC_Start_DMA+0x8c>
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	e000      	b.n	800b842 <HAL_ADC_Start_DMA+0x8e>
 800b840:	4b36      	ldr	r3, [pc, #216]	@ (800b91c <HAL_ADC_Start_DMA+0x168>)
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	6812      	ldr	r2, [r2, #0]
 800b846:	4293      	cmp	r3, r2
 800b848:	d002      	beq.n	800b850 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d105      	bne.n	800b85c <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b854:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b860:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b864:	2b00      	cmp	r3, #0
 800b866:	d006      	beq.n	800b876 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b86c:	f023 0206 	bic.w	r2, r3, #6
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	659a      	str	r2, [r3, #88]	@ 0x58
 800b874:	e002      	b.n	800b87c <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2200      	movs	r2, #0
 800b87a:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b880:	4a27      	ldr	r2, [pc, #156]	@ (800b920 <HAL_ADC_Start_DMA+0x16c>)
 800b882:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b888:	4a26      	ldr	r2, [pc, #152]	@ (800b924 <HAL_ADC_Start_DMA+0x170>)
 800b88a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b890:	4a25      	ldr	r2, [pc, #148]	@ (800b928 <HAL_ADC_Start_DMA+0x174>)
 800b892:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	221c      	movs	r2, #28
 800b89a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	685a      	ldr	r2, [r3, #4]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f042 0210 	orr.w	r2, r2, #16
 800b8b2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	68da      	ldr	r2, [r3, #12]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f042 0201 	orr.w	r2, r2, #1
 800b8c2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	3340      	adds	r3, #64	@ 0x40
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	68ba      	ldr	r2, [r7, #8]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f001 fbb0 	bl	800d038 <HAL_DMA_Start_IT>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7ff fdb5 	bl	800b450 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800b8e6:	e00d      	b.n	800b904 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800b8f0:	e008      	b.n	800b904 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800b8fe:	e001      	b.n	800b904 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800b900:	2302      	movs	r3, #2
 800b902:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800b904:	7dfb      	ldrb	r3, [r7, #23]
}
 800b906:	4618      	mov	r0, r3
 800b908:	3718      	adds	r7, #24
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop
 800b910:	50040300 	.word	0x50040300
 800b914:	50040200 	.word	0x50040200
 800b918:	50040100 	.word	0x50040100
 800b91c:	50040000 	.word	0x50040000
 800b920:	0800c52b 	.word	0x0800c52b
 800b924:	0800c603 	.word	0x0800c603
 800b928:	0800c61f 	.word	0x0800c61f

0800b92c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d101      	bne.n	800b942 <HAL_ADC_Stop_DMA+0x16>
 800b93e:	2302      	movs	r3, #2
 800b940:	e051      	b.n	800b9e6 <HAL_ADC_Stop_DMA+0xba>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2201      	movs	r2, #1
 800b946:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800b94a:	2103      	movs	r1, #3
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f000 fc4b 	bl	800c1e8 <ADC_ConversionStop>
 800b952:	4603      	mov	r3, r0
 800b954:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800b956:	7bfb      	ldrb	r3, [r7, #15]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d13f      	bne.n	800b9dc <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	68da      	ldr	r2, [r3, #12]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f022 0201 	bic.w	r2, r2, #1
 800b96a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b970:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b974:	b2db      	uxtb	r3, r3
 800b976:	2b02      	cmp	r3, #2
 800b978:	d10f      	bne.n	800b99a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b97e:	4618      	mov	r0, r3
 800b980:	f001 fbba 	bl	800d0f8 <HAL_DMA_Abort>
 800b984:	4603      	mov	r3, r0
 800b986:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800b988:	7bfb      	ldrb	r3, [r7, #15]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d005      	beq.n	800b99a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b992:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	685a      	ldr	r2, [r3, #4]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f022 0210 	bic.w	r2, r2, #16
 800b9a8:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800b9aa:	7bfb      	ldrb	r3, [r7, #15]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d105      	bne.n	800b9bc <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 fd5b 	bl	800c46c <ADC_Disable>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	73fb      	strb	r3, [r7, #15]
 800b9ba:	e002      	b.n	800b9c2 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 fd55 	bl	800c46c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800b9c2:	7bfb      	ldrb	r3, [r7, #15]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d109      	bne.n	800b9dc <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9cc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800b9d0:	f023 0301 	bic.w	r3, r3, #1
 800b9d4:	f043 0201 	orr.w	r2, r3, #1
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800b9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3710      	adds	r7, #16
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800b9ee:	b480      	push	{r7}
 800b9f0:	b083      	sub	sp, #12
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800b9f6:	bf00      	nop
 800b9f8:	370c      	adds	r7, #12
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr
	...

0800ba04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b0b6      	sub	sp, #216	@ 0xd8
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800ba14:	2300      	movs	r3, #0
 800ba16:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d101      	bne.n	800ba26 <HAL_ADC_ConfigChannel+0x22>
 800ba22:	2302      	movs	r3, #2
 800ba24:	e3c9      	b.n	800c1ba <HAL_ADC_ConfigChannel+0x7b6>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7ff fd34 	bl	800b4a0 <LL_ADC_REG_IsConversionOngoing>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	f040 83aa 	bne.w	800c194 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	2b05      	cmp	r3, #5
 800ba4e:	d824      	bhi.n	800ba9a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	3b02      	subs	r3, #2
 800ba56:	2b03      	cmp	r3, #3
 800ba58:	d81b      	bhi.n	800ba92 <HAL_ADC_ConfigChannel+0x8e>
 800ba5a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba60 <HAL_ADC_ConfigChannel+0x5c>)
 800ba5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba60:	0800ba71 	.word	0x0800ba71
 800ba64:	0800ba79 	.word	0x0800ba79
 800ba68:	0800ba81 	.word	0x0800ba81
 800ba6c:	0800ba89 	.word	0x0800ba89
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800ba70:	230c      	movs	r3, #12
 800ba72:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800ba76:	e010      	b.n	800ba9a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800ba78:	2312      	movs	r3, #18
 800ba7a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800ba7e:	e00c      	b.n	800ba9a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800ba80:	2318      	movs	r3, #24
 800ba82:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800ba86:	e008      	b.n	800ba9a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800ba88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ba8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800ba90:	e003      	b.n	800ba9a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800ba92:	2306      	movs	r3, #6
 800ba94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800ba98:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6818      	ldr	r0, [r3, #0]
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	461a      	mov	r2, r3
 800baa4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800baa8:	f7ff fbac 	bl	800b204 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7ff fcf5 	bl	800b4a0 <LL_ADC_REG_IsConversionOngoing>
 800bab6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	4618      	mov	r0, r3
 800bac0:	f7ff fd15 	bl	800b4ee <LL_ADC_INJ_IsConversionOngoing>
 800bac4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800bac8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bacc:	2b00      	cmp	r3, #0
 800bace:	f040 81a4 	bne.w	800be1a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800bad2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	f040 819f 	bne.w	800be1a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6818      	ldr	r0, [r3, #0]
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	6819      	ldr	r1, [r3, #0]
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	461a      	mov	r2, r3
 800baea:	f7ff fbb7 	bl	800b25c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	695a      	ldr	r2, [r3, #20]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	08db      	lsrs	r3, r3, #3
 800bafa:	f003 0303 	and.w	r3, r3, #3
 800bafe:	005b      	lsls	r3, r3, #1
 800bb00:	fa02 f303 	lsl.w	r3, r2, r3
 800bb04:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	691b      	ldr	r3, [r3, #16]
 800bb0c:	2b04      	cmp	r3, #4
 800bb0e:	d00a      	beq.n	800bb26 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6818      	ldr	r0, [r3, #0]
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	6919      	ldr	r1, [r3, #16]
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bb20:	f7ff fb08 	bl	800b134 <LL_ADC_SetOffset>
 800bb24:	e179      	b.n	800be1a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	2100      	movs	r1, #0
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7ff fb25 	bl	800b17c <LL_ADC_GetOffsetChannel>
 800bb32:	4603      	mov	r3, r0
 800bb34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d10a      	bne.n	800bb52 <HAL_ADC_ConfigChannel+0x14e>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2100      	movs	r1, #0
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7ff fb1a 	bl	800b17c <LL_ADC_GetOffsetChannel>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	0e9b      	lsrs	r3, r3, #26
 800bb4c:	f003 021f 	and.w	r2, r3, #31
 800bb50:	e01e      	b.n	800bb90 <HAL_ADC_ConfigChannel+0x18c>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	2100      	movs	r1, #0
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f7ff fb0f 	bl	800b17c <LL_ADC_GetOffsetChannel>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bb68:	fa93 f3a3 	rbit	r3, r3
 800bb6c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800bb70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bb74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800bb78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d101      	bne.n	800bb84 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800bb80:	2320      	movs	r3, #32
 800bb82:	e004      	b.n	800bb8e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800bb84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bb88:	fab3 f383 	clz	r3, r3
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d105      	bne.n	800bba8 <HAL_ADC_ConfigChannel+0x1a4>
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	0e9b      	lsrs	r3, r3, #26
 800bba2:	f003 031f 	and.w	r3, r3, #31
 800bba6:	e018      	b.n	800bbda <HAL_ADC_ConfigChannel+0x1d6>
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bbb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bbb4:	fa93 f3a3 	rbit	r3, r3
 800bbb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800bbbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bbc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800bbc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d101      	bne.n	800bbd0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800bbcc:	2320      	movs	r3, #32
 800bbce:	e004      	b.n	800bbda <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800bbd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bbd4:	fab3 f383 	clz	r3, r3
 800bbd8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d106      	bne.n	800bbec <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7ff fade 	bl	800b1a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	2101      	movs	r1, #1
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7ff fac2 	bl	800b17c <LL_ADC_GetOffsetChannel>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d10a      	bne.n	800bc18 <HAL_ADC_ConfigChannel+0x214>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2101      	movs	r1, #1
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f7ff fab7 	bl	800b17c <LL_ADC_GetOffsetChannel>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	0e9b      	lsrs	r3, r3, #26
 800bc12:	f003 021f 	and.w	r2, r3, #31
 800bc16:	e01e      	b.n	800bc56 <HAL_ADC_ConfigChannel+0x252>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	2101      	movs	r1, #1
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7ff faac 	bl	800b17c <LL_ADC_GetOffsetChannel>
 800bc24:	4603      	mov	r3, r0
 800bc26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc2e:	fa93 f3a3 	rbit	r3, r3
 800bc32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800bc36:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bc3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800bc3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d101      	bne.n	800bc4a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800bc46:	2320      	movs	r3, #32
 800bc48:	e004      	b.n	800bc54 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800bc4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc4e:	fab3 f383 	clz	r3, r3
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d105      	bne.n	800bc6e <HAL_ADC_ConfigChannel+0x26a>
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	0e9b      	lsrs	r3, r3, #26
 800bc68:	f003 031f 	and.w	r3, r3, #31
 800bc6c:	e018      	b.n	800bca0 <HAL_ADC_ConfigChannel+0x29c>
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bc7a:	fa93 f3a3 	rbit	r3, r3
 800bc7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800bc82:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bc86:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800bc8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d101      	bne.n	800bc96 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800bc92:	2320      	movs	r3, #32
 800bc94:	e004      	b.n	800bca0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800bc96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bc9a:	fab3 f383 	clz	r3, r3
 800bc9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d106      	bne.n	800bcb2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	2101      	movs	r1, #1
 800bcac:	4618      	mov	r0, r3
 800bcae:	f7ff fa7b 	bl	800b1a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2102      	movs	r1, #2
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7ff fa5f 	bl	800b17c <LL_ADC_GetOffsetChannel>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d10a      	bne.n	800bcde <HAL_ADC_ConfigChannel+0x2da>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2102      	movs	r1, #2
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7ff fa54 	bl	800b17c <LL_ADC_GetOffsetChannel>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	0e9b      	lsrs	r3, r3, #26
 800bcd8:	f003 021f 	and.w	r2, r3, #31
 800bcdc:	e01e      	b.n	800bd1c <HAL_ADC_ConfigChannel+0x318>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	2102      	movs	r1, #2
 800bce4:	4618      	mov	r0, r3
 800bce6:	f7ff fa49 	bl	800b17c <LL_ADC_GetOffsetChannel>
 800bcea:	4603      	mov	r3, r0
 800bcec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bcf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bcf4:	fa93 f3a3 	rbit	r3, r3
 800bcf8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800bcfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bd00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800bd04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d101      	bne.n	800bd10 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800bd0c:	2320      	movs	r3, #32
 800bd0e:	e004      	b.n	800bd1a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800bd10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bd14:	fab3 f383 	clz	r3, r3
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d105      	bne.n	800bd34 <HAL_ADC_ConfigChannel+0x330>
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	0e9b      	lsrs	r3, r3, #26
 800bd2e:	f003 031f 	and.w	r3, r3, #31
 800bd32:	e014      	b.n	800bd5e <HAL_ADC_ConfigChannel+0x35a>
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bd3c:	fa93 f3a3 	rbit	r3, r3
 800bd40:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800bd42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bd44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800bd48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d101      	bne.n	800bd54 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800bd50:	2320      	movs	r3, #32
 800bd52:	e004      	b.n	800bd5e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800bd54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bd58:	fab3 f383 	clz	r3, r3
 800bd5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d106      	bne.n	800bd70 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	2200      	movs	r2, #0
 800bd68:	2102      	movs	r1, #2
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7ff fa1c 	bl	800b1a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	2103      	movs	r1, #3
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7ff fa00 	bl	800b17c <LL_ADC_GetOffsetChannel>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d10a      	bne.n	800bd9c <HAL_ADC_ConfigChannel+0x398>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	2103      	movs	r1, #3
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7ff f9f5 	bl	800b17c <LL_ADC_GetOffsetChannel>
 800bd92:	4603      	mov	r3, r0
 800bd94:	0e9b      	lsrs	r3, r3, #26
 800bd96:	f003 021f 	and.w	r2, r3, #31
 800bd9a:	e017      	b.n	800bdcc <HAL_ADC_ConfigChannel+0x3c8>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2103      	movs	r1, #3
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7ff f9ea 	bl	800b17c <LL_ADC_GetOffsetChannel>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bdac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bdae:	fa93 f3a3 	rbit	r3, r3
 800bdb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800bdb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdb6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800bdb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d101      	bne.n	800bdc2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800bdbe:	2320      	movs	r3, #32
 800bdc0:	e003      	b.n	800bdca <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800bdc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bdc4:	fab3 f383 	clz	r3, r3
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d105      	bne.n	800bde4 <HAL_ADC_ConfigChannel+0x3e0>
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	0e9b      	lsrs	r3, r3, #26
 800bdde:	f003 031f 	and.w	r3, r3, #31
 800bde2:	e011      	b.n	800be08 <HAL_ADC_ConfigChannel+0x404>
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bdea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bdec:	fa93 f3a3 	rbit	r3, r3
 800bdf0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800bdf2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bdf4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800bdf6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d101      	bne.n	800be00 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800bdfc:	2320      	movs	r3, #32
 800bdfe:	e003      	b.n	800be08 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800be00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800be02:	fab3 f383 	clz	r3, r3
 800be06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800be08:	429a      	cmp	r2, r3
 800be0a:	d106      	bne.n	800be1a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2200      	movs	r2, #0
 800be12:	2103      	movs	r1, #3
 800be14:	4618      	mov	r0, r3
 800be16:	f7ff f9c7 	bl	800b1a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4618      	mov	r0, r3
 800be20:	f7ff faf0 	bl	800b404 <LL_ADC_IsEnabled>
 800be24:	4603      	mov	r3, r0
 800be26:	2b00      	cmp	r3, #0
 800be28:	f040 8140 	bne.w	800c0ac <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6818      	ldr	r0, [r3, #0]
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	6819      	ldr	r1, [r3, #0]
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	68db      	ldr	r3, [r3, #12]
 800be38:	461a      	mov	r2, r3
 800be3a:	f7ff fa3b 	bl	800b2b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	4a8f      	ldr	r2, [pc, #572]	@ (800c080 <HAL_ADC_ConfigChannel+0x67c>)
 800be44:	4293      	cmp	r3, r2
 800be46:	f040 8131 	bne.w	800c0ac <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be56:	2b00      	cmp	r3, #0
 800be58:	d10b      	bne.n	800be72 <HAL_ADC_ConfigChannel+0x46e>
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	0e9b      	lsrs	r3, r3, #26
 800be60:	3301      	adds	r3, #1
 800be62:	f003 031f 	and.w	r3, r3, #31
 800be66:	2b09      	cmp	r3, #9
 800be68:	bf94      	ite	ls
 800be6a:	2301      	movls	r3, #1
 800be6c:	2300      	movhi	r3, #0
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	e019      	b.n	800bea6 <HAL_ADC_ConfigChannel+0x4a2>
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be7a:	fa93 f3a3 	rbit	r3, r3
 800be7e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800be80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be82:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800be84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be86:	2b00      	cmp	r3, #0
 800be88:	d101      	bne.n	800be8e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800be8a:	2320      	movs	r3, #32
 800be8c:	e003      	b.n	800be96 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800be8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be90:	fab3 f383 	clz	r3, r3
 800be94:	b2db      	uxtb	r3, r3
 800be96:	3301      	adds	r3, #1
 800be98:	f003 031f 	and.w	r3, r3, #31
 800be9c:	2b09      	cmp	r3, #9
 800be9e:	bf94      	ite	ls
 800bea0:	2301      	movls	r3, #1
 800bea2:	2300      	movhi	r3, #0
 800bea4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d079      	beq.n	800bf9e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d107      	bne.n	800bec6 <HAL_ADC_ConfigChannel+0x4c2>
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	0e9b      	lsrs	r3, r3, #26
 800bebc:	3301      	adds	r3, #1
 800bebe:	069b      	lsls	r3, r3, #26
 800bec0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bec4:	e015      	b.n	800bef2 <HAL_ADC_ConfigChannel+0x4ee>
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800becc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bece:	fa93 f3a3 	rbit	r3, r3
 800bed2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800bed4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bed6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800bed8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d101      	bne.n	800bee2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800bede:	2320      	movs	r3, #32
 800bee0:	e003      	b.n	800beea <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800bee2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bee4:	fab3 f383 	clz	r3, r3
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	3301      	adds	r3, #1
 800beec:	069b      	lsls	r3, r3, #26
 800beee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800befa:	2b00      	cmp	r3, #0
 800befc:	d109      	bne.n	800bf12 <HAL_ADC_ConfigChannel+0x50e>
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	0e9b      	lsrs	r3, r3, #26
 800bf04:	3301      	adds	r3, #1
 800bf06:	f003 031f 	and.w	r3, r3, #31
 800bf0a:	2101      	movs	r1, #1
 800bf0c:	fa01 f303 	lsl.w	r3, r1, r3
 800bf10:	e017      	b.n	800bf42 <HAL_ADC_ConfigChannel+0x53e>
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf1a:	fa93 f3a3 	rbit	r3, r3
 800bf1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800bf20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf22:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800bf24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d101      	bne.n	800bf2e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800bf2a:	2320      	movs	r3, #32
 800bf2c:	e003      	b.n	800bf36 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800bf2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf30:	fab3 f383 	clz	r3, r3
 800bf34:	b2db      	uxtb	r3, r3
 800bf36:	3301      	adds	r3, #1
 800bf38:	f003 031f 	and.w	r3, r3, #31
 800bf3c:	2101      	movs	r1, #1
 800bf3e:	fa01 f303 	lsl.w	r3, r1, r3
 800bf42:	ea42 0103 	orr.w	r1, r2, r3
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d10a      	bne.n	800bf68 <HAL_ADC_ConfigChannel+0x564>
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	0e9b      	lsrs	r3, r3, #26
 800bf58:	3301      	adds	r3, #1
 800bf5a:	f003 021f 	and.w	r2, r3, #31
 800bf5e:	4613      	mov	r3, r2
 800bf60:	005b      	lsls	r3, r3, #1
 800bf62:	4413      	add	r3, r2
 800bf64:	051b      	lsls	r3, r3, #20
 800bf66:	e018      	b.n	800bf9a <HAL_ADC_ConfigChannel+0x596>
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf70:	fa93 f3a3 	rbit	r3, r3
 800bf74:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800bf76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf78:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800bf7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d101      	bne.n	800bf84 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800bf80:	2320      	movs	r3, #32
 800bf82:	e003      	b.n	800bf8c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800bf84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf86:	fab3 f383 	clz	r3, r3
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	f003 021f 	and.w	r2, r3, #31
 800bf92:	4613      	mov	r3, r2
 800bf94:	005b      	lsls	r3, r3, #1
 800bf96:	4413      	add	r3, r2
 800bf98:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bf9a:	430b      	orrs	r3, r1
 800bf9c:	e081      	b.n	800c0a2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d107      	bne.n	800bfba <HAL_ADC_ConfigChannel+0x5b6>
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	0e9b      	lsrs	r3, r3, #26
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	069b      	lsls	r3, r3, #26
 800bfb4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bfb8:	e015      	b.n	800bfe6 <HAL_ADC_ConfigChannel+0x5e2>
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bfc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc2:	fa93 f3a3 	rbit	r3, r3
 800bfc6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800bfc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800bfcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d101      	bne.n	800bfd6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800bfd2:	2320      	movs	r3, #32
 800bfd4:	e003      	b.n	800bfde <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800bfd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfd8:	fab3 f383 	clz	r3, r3
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	3301      	adds	r3, #1
 800bfe0:	069b      	lsls	r3, r3, #26
 800bfe2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d109      	bne.n	800c006 <HAL_ADC_ConfigChannel+0x602>
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	0e9b      	lsrs	r3, r3, #26
 800bff8:	3301      	adds	r3, #1
 800bffa:	f003 031f 	and.w	r3, r3, #31
 800bffe:	2101      	movs	r1, #1
 800c000:	fa01 f303 	lsl.w	r3, r1, r3
 800c004:	e017      	b.n	800c036 <HAL_ADC_ConfigChannel+0x632>
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c00c:	69fb      	ldr	r3, [r7, #28]
 800c00e:	fa93 f3a3 	rbit	r3, r3
 800c012:	61bb      	str	r3, [r7, #24]
  return result;
 800c014:	69bb      	ldr	r3, [r7, #24]
 800c016:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800c018:	6a3b      	ldr	r3, [r7, #32]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d101      	bne.n	800c022 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800c01e:	2320      	movs	r3, #32
 800c020:	e003      	b.n	800c02a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800c022:	6a3b      	ldr	r3, [r7, #32]
 800c024:	fab3 f383 	clz	r3, r3
 800c028:	b2db      	uxtb	r3, r3
 800c02a:	3301      	adds	r3, #1
 800c02c:	f003 031f 	and.w	r3, r3, #31
 800c030:	2101      	movs	r1, #1
 800c032:	fa01 f303 	lsl.w	r3, r1, r3
 800c036:	ea42 0103 	orr.w	r1, r2, r3
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c042:	2b00      	cmp	r3, #0
 800c044:	d10d      	bne.n	800c062 <HAL_ADC_ConfigChannel+0x65e>
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	0e9b      	lsrs	r3, r3, #26
 800c04c:	3301      	adds	r3, #1
 800c04e:	f003 021f 	and.w	r2, r3, #31
 800c052:	4613      	mov	r3, r2
 800c054:	005b      	lsls	r3, r3, #1
 800c056:	4413      	add	r3, r2
 800c058:	3b1e      	subs	r3, #30
 800c05a:	051b      	lsls	r3, r3, #20
 800c05c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c060:	e01e      	b.n	800c0a0 <HAL_ADC_ConfigChannel+0x69c>
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	fa93 f3a3 	rbit	r3, r3
 800c06e:	60fb      	str	r3, [r7, #12]
  return result;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d104      	bne.n	800c084 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800c07a:	2320      	movs	r3, #32
 800c07c:	e006      	b.n	800c08c <HAL_ADC_ConfigChannel+0x688>
 800c07e:	bf00      	nop
 800c080:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	fab3 f383 	clz	r3, r3
 800c08a:	b2db      	uxtb	r3, r3
 800c08c:	3301      	adds	r3, #1
 800c08e:	f003 021f 	and.w	r2, r3, #31
 800c092:	4613      	mov	r3, r2
 800c094:	005b      	lsls	r3, r3, #1
 800c096:	4413      	add	r3, r2
 800c098:	3b1e      	subs	r3, #30
 800c09a:	051b      	lsls	r3, r3, #20
 800c09c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c0a0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800c0a2:	683a      	ldr	r2, [r7, #0]
 800c0a4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c0a6:	4619      	mov	r1, r3
 800c0a8:	f7ff f8d8 	bl	800b25c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	681a      	ldr	r2, [r3, #0]
 800c0b0:	4b44      	ldr	r3, [pc, #272]	@ (800c1c4 <HAL_ADC_ConfigChannel+0x7c0>)
 800c0b2:	4013      	ands	r3, r2
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d07a      	beq.n	800c1ae <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c0b8:	4843      	ldr	r0, [pc, #268]	@ (800c1c8 <HAL_ADC_ConfigChannel+0x7c4>)
 800c0ba:	f7ff f82d 	bl	800b118 <LL_ADC_GetCommonPathInternalCh>
 800c0be:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4a41      	ldr	r2, [pc, #260]	@ (800c1cc <HAL_ADC_ConfigChannel+0x7c8>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d12c      	bne.n	800c126 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800c0cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c0d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d126      	bne.n	800c126 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a3c      	ldr	r2, [pc, #240]	@ (800c1d0 <HAL_ADC_ConfigChannel+0x7cc>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d004      	beq.n	800c0ec <HAL_ADC_ConfigChannel+0x6e8>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a3b      	ldr	r2, [pc, #236]	@ (800c1d4 <HAL_ADC_ConfigChannel+0x7d0>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d15d      	bne.n	800c1a8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c0ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c0f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	4834      	ldr	r0, [pc, #208]	@ (800c1c8 <HAL_ADC_ConfigChannel+0x7c4>)
 800c0f8:	f7fe fffb 	bl	800b0f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c0fc:	4b36      	ldr	r3, [pc, #216]	@ (800c1d8 <HAL_ADC_ConfigChannel+0x7d4>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	099b      	lsrs	r3, r3, #6
 800c102:	4a36      	ldr	r2, [pc, #216]	@ (800c1dc <HAL_ADC_ConfigChannel+0x7d8>)
 800c104:	fba2 2303 	umull	r2, r3, r2, r3
 800c108:	099b      	lsrs	r3, r3, #6
 800c10a:	1c5a      	adds	r2, r3, #1
 800c10c:	4613      	mov	r3, r2
 800c10e:	005b      	lsls	r3, r3, #1
 800c110:	4413      	add	r3, r2
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800c116:	e002      	b.n	800c11e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	3b01      	subs	r3, #1
 800c11c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d1f9      	bne.n	800c118 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c124:	e040      	b.n	800c1a8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4a2d      	ldr	r2, [pc, #180]	@ (800c1e0 <HAL_ADC_ConfigChannel+0x7dc>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d118      	bne.n	800c162 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800c130:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c134:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d112      	bne.n	800c162 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4a23      	ldr	r2, [pc, #140]	@ (800c1d0 <HAL_ADC_ConfigChannel+0x7cc>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d004      	beq.n	800c150 <HAL_ADC_ConfigChannel+0x74c>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4a22      	ldr	r2, [pc, #136]	@ (800c1d4 <HAL_ADC_ConfigChannel+0x7d0>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d12d      	bne.n	800c1ac <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c150:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c154:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c158:	4619      	mov	r1, r3
 800c15a:	481b      	ldr	r0, [pc, #108]	@ (800c1c8 <HAL_ADC_ConfigChannel+0x7c4>)
 800c15c:	f7fe ffc9 	bl	800b0f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c160:	e024      	b.n	800c1ac <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4a1f      	ldr	r2, [pc, #124]	@ (800c1e4 <HAL_ADC_ConfigChannel+0x7e0>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d120      	bne.n	800c1ae <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800c16c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c170:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c174:	2b00      	cmp	r3, #0
 800c176:	d11a      	bne.n	800c1ae <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	4a14      	ldr	r2, [pc, #80]	@ (800c1d0 <HAL_ADC_ConfigChannel+0x7cc>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d115      	bne.n	800c1ae <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c182:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c186:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c18a:	4619      	mov	r1, r3
 800c18c:	480e      	ldr	r0, [pc, #56]	@ (800c1c8 <HAL_ADC_ConfigChannel+0x7c4>)
 800c18e:	f7fe ffb0 	bl	800b0f2 <LL_ADC_SetCommonPathInternalCh>
 800c192:	e00c      	b.n	800c1ae <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c198:	f043 0220 	orr.w	r2, r3, #32
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800c1a6:	e002      	b.n	800c1ae <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c1a8:	bf00      	nop
 800c1aa:	e000      	b.n	800c1ae <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c1ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800c1b6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	37d8      	adds	r7, #216	@ 0xd8
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	80080000 	.word	0x80080000
 800c1c8:	50040300 	.word	0x50040300
 800c1cc:	c7520000 	.word	0xc7520000
 800c1d0:	50040000 	.word	0x50040000
 800c1d4:	50040200 	.word	0x50040200
 800c1d8:	20000268 	.word	0x20000268
 800c1dc:	053e2d63 	.word	0x053e2d63
 800c1e0:	cb840000 	.word	0xcb840000
 800c1e4:	80000001 	.word	0x80000001

0800c1e8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b088      	sub	sp, #32
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7ff f94e 	bl	800b4a0 <LL_ADC_REG_IsConversionOngoing>
 800c204:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7ff f96f 	bl	800b4ee <LL_ADC_INJ_IsConversionOngoing>
 800c210:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d103      	bne.n	800c220 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	f000 8098 	beq.w	800c350 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	68db      	ldr	r3, [r3, #12]
 800c226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d02a      	beq.n	800c284 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	7e5b      	ldrb	r3, [r3, #25]
 800c232:	2b01      	cmp	r3, #1
 800c234:	d126      	bne.n	800c284 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	7e1b      	ldrb	r3, [r3, #24]
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d122      	bne.n	800c284 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800c23e:	2301      	movs	r3, #1
 800c240:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800c242:	e014      	b.n	800c26e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800c244:	69fb      	ldr	r3, [r7, #28]
 800c246:	4a45      	ldr	r2, [pc, #276]	@ (800c35c <ADC_ConversionStop+0x174>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d90d      	bls.n	800c268 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c250:	f043 0210 	orr.w	r2, r3, #16
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c25c:	f043 0201 	orr.w	r2, r3, #1
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800c264:	2301      	movs	r3, #1
 800c266:	e074      	b.n	800c352 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800c268:	69fb      	ldr	r3, [r7, #28]
 800c26a:	3301      	adds	r3, #1
 800c26c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c278:	2b40      	cmp	r3, #64	@ 0x40
 800c27a:	d1e3      	bne.n	800c244 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	2240      	movs	r2, #64	@ 0x40
 800c282:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	2b02      	cmp	r3, #2
 800c288:	d014      	beq.n	800c2b4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	4618      	mov	r0, r3
 800c290:	f7ff f906 	bl	800b4a0 <LL_ADC_REG_IsConversionOngoing>
 800c294:	4603      	mov	r3, r0
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00c      	beq.n	800c2b4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7ff f8c3 	bl	800b42a <LL_ADC_IsDisableOngoing>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d104      	bne.n	800c2b4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7ff f8e2 	bl	800b478 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800c2b4:	69bb      	ldr	r3, [r7, #24]
 800c2b6:	2b01      	cmp	r3, #1
 800c2b8:	d014      	beq.n	800c2e4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7ff f915 	bl	800b4ee <LL_ADC_INJ_IsConversionOngoing>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d00c      	beq.n	800c2e4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7ff f8ab 	bl	800b42a <LL_ADC_IsDisableOngoing>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d104      	bne.n	800c2e4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7ff f8f1 	bl	800b4c6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800c2e4:	69bb      	ldr	r3, [r7, #24]
 800c2e6:	2b02      	cmp	r3, #2
 800c2e8:	d005      	beq.n	800c2f6 <ADC_ConversionStop+0x10e>
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	2b03      	cmp	r3, #3
 800c2ee:	d105      	bne.n	800c2fc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800c2f0:	230c      	movs	r3, #12
 800c2f2:	617b      	str	r3, [r7, #20]
        break;
 800c2f4:	e005      	b.n	800c302 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800c2f6:	2308      	movs	r3, #8
 800c2f8:	617b      	str	r3, [r7, #20]
        break;
 800c2fa:	e002      	b.n	800c302 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800c2fc:	2304      	movs	r3, #4
 800c2fe:	617b      	str	r3, [r7, #20]
        break;
 800c300:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800c302:	f7fe feb3 	bl	800b06c <HAL_GetTick>
 800c306:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800c308:	e01b      	b.n	800c342 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800c30a:	f7fe feaf 	bl	800b06c <HAL_GetTick>
 800c30e:	4602      	mov	r2, r0
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	1ad3      	subs	r3, r2, r3
 800c314:	2b05      	cmp	r3, #5
 800c316:	d914      	bls.n	800c342 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	689a      	ldr	r2, [r3, #8]
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	4013      	ands	r3, r2
 800c322:	2b00      	cmp	r3, #0
 800c324:	d00d      	beq.n	800c342 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c32a:	f043 0210 	orr.w	r2, r3, #16
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c336:	f043 0201 	orr.w	r2, r3, #1
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800c33e:	2301      	movs	r3, #1
 800c340:	e007      	b.n	800c352 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	689a      	ldr	r2, [r3, #8]
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	4013      	ands	r3, r2
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d1dc      	bne.n	800c30a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3720      	adds	r7, #32
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	a33fffff 	.word	0xa33fffff

0800c360 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800c368:	2300      	movs	r3, #0
 800c36a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4618      	mov	r0, r3
 800c372:	f7ff f847 	bl	800b404 <LL_ADC_IsEnabled>
 800c376:	4603      	mov	r3, r0
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d169      	bne.n	800c450 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	689a      	ldr	r2, [r3, #8]
 800c382:	4b36      	ldr	r3, [pc, #216]	@ (800c45c <ADC_Enable+0xfc>)
 800c384:	4013      	ands	r3, r2
 800c386:	2b00      	cmp	r3, #0
 800c388:	d00d      	beq.n	800c3a6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c38e:	f043 0210 	orr.w	r2, r3, #16
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c39a:	f043 0201 	orr.w	r2, r3, #1
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	e055      	b.n	800c452 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7ff f802 	bl	800b3b4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800c3b0:	482b      	ldr	r0, [pc, #172]	@ (800c460 <ADC_Enable+0x100>)
 800c3b2:	f7fe feb1 	bl	800b118 <LL_ADC_GetCommonPathInternalCh>
 800c3b6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800c3b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d013      	beq.n	800c3e8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c3c0:	4b28      	ldr	r3, [pc, #160]	@ (800c464 <ADC_Enable+0x104>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	099b      	lsrs	r3, r3, #6
 800c3c6:	4a28      	ldr	r2, [pc, #160]	@ (800c468 <ADC_Enable+0x108>)
 800c3c8:	fba2 2303 	umull	r2, r3, r2, r3
 800c3cc:	099b      	lsrs	r3, r3, #6
 800c3ce:	1c5a      	adds	r2, r3, #1
 800c3d0:	4613      	mov	r3, r2
 800c3d2:	005b      	lsls	r3, r3, #1
 800c3d4:	4413      	add	r3, r2
 800c3d6:	009b      	lsls	r3, r3, #2
 800c3d8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800c3da:	e002      	b.n	800c3e2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	3b01      	subs	r3, #1
 800c3e0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d1f9      	bne.n	800c3dc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800c3e8:	f7fe fe40 	bl	800b06c <HAL_GetTick>
 800c3ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c3ee:	e028      	b.n	800c442 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7ff f805 	bl	800b404 <LL_ADC_IsEnabled>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d104      	bne.n	800c40a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4618      	mov	r0, r3
 800c406:	f7fe ffd5 	bl	800b3b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c40a:	f7fe fe2f 	bl	800b06c <HAL_GetTick>
 800c40e:	4602      	mov	r2, r0
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	1ad3      	subs	r3, r2, r3
 800c414:	2b02      	cmp	r3, #2
 800c416:	d914      	bls.n	800c442 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f003 0301 	and.w	r3, r3, #1
 800c422:	2b01      	cmp	r3, #1
 800c424:	d00d      	beq.n	800c442 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c42a:	f043 0210 	orr.w	r2, r3, #16
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c436:	f043 0201 	orr.w	r2, r3, #1
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800c43e:	2301      	movs	r3, #1
 800c440:	e007      	b.n	800c452 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f003 0301 	and.w	r3, r3, #1
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d1cf      	bne.n	800c3f0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c450:	2300      	movs	r3, #0
}
 800c452:	4618      	mov	r0, r3
 800c454:	3710      	adds	r7, #16
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop
 800c45c:	8000003f 	.word	0x8000003f
 800c460:	50040300 	.word	0x50040300
 800c464:	20000268 	.word	0x20000268
 800c468:	053e2d63 	.word	0x053e2d63

0800c46c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4618      	mov	r0, r3
 800c47a:	f7fe ffd6 	bl	800b42a <LL_ADC_IsDisableOngoing>
 800c47e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4618      	mov	r0, r3
 800c486:	f7fe ffbd 	bl	800b404 <LL_ADC_IsEnabled>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d047      	beq.n	800c520 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d144      	bne.n	800c520 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	689b      	ldr	r3, [r3, #8]
 800c49c:	f003 030d 	and.w	r3, r3, #13
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d10c      	bne.n	800c4be <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f7fe ff97 	bl	800b3dc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	2203      	movs	r2, #3
 800c4b4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800c4b6:	f7fe fdd9 	bl	800b06c <HAL_GetTick>
 800c4ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c4bc:	e029      	b.n	800c512 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4c2:	f043 0210 	orr.w	r2, r3, #16
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4ce:	f043 0201 	orr.w	r2, r3, #1
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e023      	b.n	800c522 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800c4da:	f7fe fdc7 	bl	800b06c <HAL_GetTick>
 800c4de:	4602      	mov	r2, r0
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	1ad3      	subs	r3, r2, r3
 800c4e4:	2b02      	cmp	r3, #2
 800c4e6:	d914      	bls.n	800c512 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	689b      	ldr	r3, [r3, #8]
 800c4ee:	f003 0301 	and.w	r3, r3, #1
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d00d      	beq.n	800c512 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4fa:	f043 0210 	orr.w	r2, r3, #16
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c506:	f043 0201 	orr.w	r2, r3, #1
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800c50e:	2301      	movs	r3, #1
 800c510:	e007      	b.n	800c522 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	689b      	ldr	r3, [r3, #8]
 800c518:	f003 0301 	and.w	r3, r3, #1
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d1dc      	bne.n	800c4da <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c520:	2300      	movs	r3, #0
}
 800c522:	4618      	mov	r0, r3
 800c524:	3710      	adds	r7, #16
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}

0800c52a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800c52a:	b580      	push	{r7, lr}
 800c52c:	b084      	sub	sp, #16
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c536:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c53c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c540:	2b00      	cmp	r3, #0
 800c542:	d14b      	bne.n	800c5dc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c548:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f003 0308 	and.w	r3, r3, #8
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d021      	beq.n	800c5a2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4618      	mov	r0, r3
 800c564:	f7fe fe3b 	bl	800b1de <LL_ADC_REG_IsTriggerSourceSWStart>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d032      	beq.n	800c5d4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	68db      	ldr	r3, [r3, #12]
 800c574:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d12b      	bne.n	800c5d4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c580:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c58c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c590:	2b00      	cmp	r3, #0
 800c592:	d11f      	bne.n	800c5d4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c598:	f043 0201 	orr.w	r2, r3, #1
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	655a      	str	r2, [r3, #84]	@ 0x54
 800c5a0:	e018      	b.n	800c5d4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	68db      	ldr	r3, [r3, #12]
 800c5a8:	f003 0302 	and.w	r3, r3, #2
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d111      	bne.n	800c5d4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d105      	bne.n	800c5d4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5cc:	f043 0201 	orr.w	r2, r3, #1
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c5d4:	68f8      	ldr	r0, [r7, #12]
 800c5d6:	f7f6 fa95 	bl	8002b04 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c5da:	e00e      	b.n	800c5fa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5e0:	f003 0310 	and.w	r3, r3, #16
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d003      	beq.n	800c5f0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800c5e8:	68f8      	ldr	r0, [r7, #12]
 800c5ea:	f7ff fa00 	bl	800b9ee <HAL_ADC_ErrorCallback>
}
 800c5ee:	e004      	b.n	800c5fa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c5f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	4798      	blx	r3
}
 800c5fa:	bf00      	nop
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800c602:	b580      	push	{r7, lr}
 800c604:	b084      	sub	sp, #16
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c60e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c610:	68f8      	ldr	r0, [r7, #12]
 800c612:	f7f6 fa5b 	bl	8002acc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c616:	bf00      	nop
 800c618:	3710      	adds	r7, #16
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}

0800c61e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800c61e:	b580      	push	{r7, lr}
 800c620:	b084      	sub	sp, #16
 800c622:	af00      	add	r7, sp, #0
 800c624:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c62a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c630:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c63c:	f043 0204 	orr.w	r2, r3, #4
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c644:	68f8      	ldr	r0, [r7, #12]
 800c646:	f7ff f9d2 	bl	800b9ee <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c64a:	bf00      	nop
 800c64c:	3710      	adds	r7, #16
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}

0800c652 <LL_ADC_IsEnabled>:
{
 800c652:	b480      	push	{r7}
 800c654:	b083      	sub	sp, #12
 800c656:	af00      	add	r7, sp, #0
 800c658:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	689b      	ldr	r3, [r3, #8]
 800c65e:	f003 0301 	and.w	r3, r3, #1
 800c662:	2b01      	cmp	r3, #1
 800c664:	d101      	bne.n	800c66a <LL_ADC_IsEnabled+0x18>
 800c666:	2301      	movs	r3, #1
 800c668:	e000      	b.n	800c66c <LL_ADC_IsEnabled+0x1a>
 800c66a:	2300      	movs	r3, #0
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	370c      	adds	r7, #12
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <LL_ADC_REG_IsConversionOngoing>:
{
 800c678:	b480      	push	{r7}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	689b      	ldr	r3, [r3, #8]
 800c684:	f003 0304 	and.w	r3, r3, #4
 800c688:	2b04      	cmp	r3, #4
 800c68a:	d101      	bne.n	800c690 <LL_ADC_REG_IsConversionOngoing+0x18>
 800c68c:	2301      	movs	r3, #1
 800c68e:	e000      	b.n	800c692 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800c690:	2300      	movs	r3, #0
}
 800c692:	4618      	mov	r0, r3
 800c694:	370c      	adds	r7, #12
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr
	...

0800c6a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800c6a0:	b590      	push	{r4, r7, lr}
 800c6a2:	b09f      	sub	sp, #124	@ 0x7c
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d101      	bne.n	800c6be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800c6ba:	2302      	movs	r3, #2
 800c6bc:	e093      	b.n	800c7e6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4a47      	ldr	r2, [pc, #284]	@ (800c7f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d102      	bne.n	800c6de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800c6d8:	4b46      	ldr	r3, [pc, #280]	@ (800c7f4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c6da:	60bb      	str	r3, [r7, #8]
 800c6dc:	e001      	b.n	800c6e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800c6de:	2300      	movs	r3, #0
 800c6e0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d10b      	bne.n	800c700 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6ec:	f043 0220 	orr.w	r2, r3, #32
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	e072      	b.n	800c7e6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	4618      	mov	r0, r3
 800c704:	f7ff ffb8 	bl	800c678 <LL_ADC_REG_IsConversionOngoing>
 800c708:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4618      	mov	r0, r3
 800c710:	f7ff ffb2 	bl	800c678 <LL_ADC_REG_IsConversionOngoing>
 800c714:	4603      	mov	r3, r0
 800c716:	2b00      	cmp	r3, #0
 800c718:	d154      	bne.n	800c7c4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800c71a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d151      	bne.n	800c7c4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800c720:	4b35      	ldr	r3, [pc, #212]	@ (800c7f8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800c722:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d02c      	beq.n	800c786 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800c72c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c72e:	689b      	ldr	r3, [r3, #8]
 800c730:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	6859      	ldr	r1, [r3, #4]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c73e:	035b      	lsls	r3, r3, #13
 800c740:	430b      	orrs	r3, r1
 800c742:	431a      	orrs	r2, r3
 800c744:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c746:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c748:	4829      	ldr	r0, [pc, #164]	@ (800c7f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c74a:	f7ff ff82 	bl	800c652 <LL_ADC_IsEnabled>
 800c74e:	4604      	mov	r4, r0
 800c750:	4828      	ldr	r0, [pc, #160]	@ (800c7f4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c752:	f7ff ff7e 	bl	800c652 <LL_ADC_IsEnabled>
 800c756:	4603      	mov	r3, r0
 800c758:	431c      	orrs	r4, r3
 800c75a:	4828      	ldr	r0, [pc, #160]	@ (800c7fc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800c75c:	f7ff ff79 	bl	800c652 <LL_ADC_IsEnabled>
 800c760:	4603      	mov	r3, r0
 800c762:	4323      	orrs	r3, r4
 800c764:	2b00      	cmp	r3, #0
 800c766:	d137      	bne.n	800c7d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800c768:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c76a:	689b      	ldr	r3, [r3, #8]
 800c76c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c770:	f023 030f 	bic.w	r3, r3, #15
 800c774:	683a      	ldr	r2, [r7, #0]
 800c776:	6811      	ldr	r1, [r2, #0]
 800c778:	683a      	ldr	r2, [r7, #0]
 800c77a:	6892      	ldr	r2, [r2, #8]
 800c77c:	430a      	orrs	r2, r1
 800c77e:	431a      	orrs	r2, r3
 800c780:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c782:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c784:	e028      	b.n	800c7d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800c786:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c788:	689b      	ldr	r3, [r3, #8]
 800c78a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c78e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c790:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c792:	4817      	ldr	r0, [pc, #92]	@ (800c7f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c794:	f7ff ff5d 	bl	800c652 <LL_ADC_IsEnabled>
 800c798:	4604      	mov	r4, r0
 800c79a:	4816      	ldr	r0, [pc, #88]	@ (800c7f4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c79c:	f7ff ff59 	bl	800c652 <LL_ADC_IsEnabled>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	431c      	orrs	r4, r3
 800c7a4:	4815      	ldr	r0, [pc, #84]	@ (800c7fc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800c7a6:	f7ff ff54 	bl	800c652 <LL_ADC_IsEnabled>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	4323      	orrs	r3, r4
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d112      	bne.n	800c7d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800c7b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c7b4:	689b      	ldr	r3, [r3, #8]
 800c7b6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c7ba:	f023 030f 	bic.w	r3, r3, #15
 800c7be:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c7c0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c7c2:	e009      	b.n	800c7d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7c8:	f043 0220 	orr.w	r2, r3, #32
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800c7d6:	e000      	b.n	800c7da <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c7d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800c7e2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	377c      	adds	r7, #124	@ 0x7c
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd90      	pop	{r4, r7, pc}
 800c7ee:	bf00      	nop
 800c7f0:	50040000 	.word	0x50040000
 800c7f4:	50040100 	.word	0x50040100
 800c7f8:	50040300 	.word	0x50040300
 800c7fc:	50040200 	.word	0x50040200

0800c800 <__NVIC_SetPriorityGrouping>:
{
 800c800:	b480      	push	{r7}
 800c802:	b085      	sub	sp, #20
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f003 0307 	and.w	r3, r3, #7
 800c80e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c810:	4b0c      	ldr	r3, [pc, #48]	@ (800c844 <__NVIC_SetPriorityGrouping+0x44>)
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c816:	68ba      	ldr	r2, [r7, #8]
 800c818:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c81c:	4013      	ands	r3, r2
 800c81e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c828:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c82c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c832:	4a04      	ldr	r2, [pc, #16]	@ (800c844 <__NVIC_SetPriorityGrouping+0x44>)
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	60d3      	str	r3, [r2, #12]
}
 800c838:	bf00      	nop
 800c83a:	3714      	adds	r7, #20
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr
 800c844:	e000ed00 	.word	0xe000ed00

0800c848 <__NVIC_GetPriorityGrouping>:
{
 800c848:	b480      	push	{r7}
 800c84a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c84c:	4b04      	ldr	r3, [pc, #16]	@ (800c860 <__NVIC_GetPriorityGrouping+0x18>)
 800c84e:	68db      	ldr	r3, [r3, #12]
 800c850:	0a1b      	lsrs	r3, r3, #8
 800c852:	f003 0307 	and.w	r3, r3, #7
}
 800c856:	4618      	mov	r0, r3
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr
 800c860:	e000ed00 	.word	0xe000ed00

0800c864 <__NVIC_EnableIRQ>:
{
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
 800c86a:	4603      	mov	r3, r0
 800c86c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c86e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c872:	2b00      	cmp	r3, #0
 800c874:	db0b      	blt.n	800c88e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c876:	79fb      	ldrb	r3, [r7, #7]
 800c878:	f003 021f 	and.w	r2, r3, #31
 800c87c:	4907      	ldr	r1, [pc, #28]	@ (800c89c <__NVIC_EnableIRQ+0x38>)
 800c87e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c882:	095b      	lsrs	r3, r3, #5
 800c884:	2001      	movs	r0, #1
 800c886:	fa00 f202 	lsl.w	r2, r0, r2
 800c88a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c88e:	bf00      	nop
 800c890:	370c      	adds	r7, #12
 800c892:	46bd      	mov	sp, r7
 800c894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c898:	4770      	bx	lr
 800c89a:	bf00      	nop
 800c89c:	e000e100 	.word	0xe000e100

0800c8a0 <__NVIC_SetPriority>:
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	6039      	str	r1, [r7, #0]
 800c8aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c8ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	db0a      	blt.n	800c8ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	b2da      	uxtb	r2, r3
 800c8b8:	490c      	ldr	r1, [pc, #48]	@ (800c8ec <__NVIC_SetPriority+0x4c>)
 800c8ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c8be:	0112      	lsls	r2, r2, #4
 800c8c0:	b2d2      	uxtb	r2, r2
 800c8c2:	440b      	add	r3, r1
 800c8c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c8c8:	e00a      	b.n	800c8e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	b2da      	uxtb	r2, r3
 800c8ce:	4908      	ldr	r1, [pc, #32]	@ (800c8f0 <__NVIC_SetPriority+0x50>)
 800c8d0:	79fb      	ldrb	r3, [r7, #7]
 800c8d2:	f003 030f 	and.w	r3, r3, #15
 800c8d6:	3b04      	subs	r3, #4
 800c8d8:	0112      	lsls	r2, r2, #4
 800c8da:	b2d2      	uxtb	r2, r2
 800c8dc:	440b      	add	r3, r1
 800c8de:	761a      	strb	r2, [r3, #24]
}
 800c8e0:	bf00      	nop
 800c8e2:	370c      	adds	r7, #12
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr
 800c8ec:	e000e100 	.word	0xe000e100
 800c8f0:	e000ed00 	.word	0xe000ed00

0800c8f4 <NVIC_EncodePriority>:
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b089      	sub	sp, #36	@ 0x24
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	60f8      	str	r0, [r7, #12]
 800c8fc:	60b9      	str	r1, [r7, #8]
 800c8fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	f003 0307 	and.w	r3, r3, #7
 800c906:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	f1c3 0307 	rsb	r3, r3, #7
 800c90e:	2b04      	cmp	r3, #4
 800c910:	bf28      	it	cs
 800c912:	2304      	movcs	r3, #4
 800c914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c916:	69fb      	ldr	r3, [r7, #28]
 800c918:	3304      	adds	r3, #4
 800c91a:	2b06      	cmp	r3, #6
 800c91c:	d902      	bls.n	800c924 <NVIC_EncodePriority+0x30>
 800c91e:	69fb      	ldr	r3, [r7, #28]
 800c920:	3b03      	subs	r3, #3
 800c922:	e000      	b.n	800c926 <NVIC_EncodePriority+0x32>
 800c924:	2300      	movs	r3, #0
 800c926:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c928:	f04f 32ff 	mov.w	r2, #4294967295
 800c92c:	69bb      	ldr	r3, [r7, #24]
 800c92e:	fa02 f303 	lsl.w	r3, r2, r3
 800c932:	43da      	mvns	r2, r3
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	401a      	ands	r2, r3
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c93c:	f04f 31ff 	mov.w	r1, #4294967295
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	fa01 f303 	lsl.w	r3, r1, r3
 800c946:	43d9      	mvns	r1, r3
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c94c:	4313      	orrs	r3, r2
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3724      	adds	r7, #36	@ 0x24
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr
	...

0800c95c <__NVIC_SystemReset>:
{
 800c95c:	b480      	push	{r7}
 800c95e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800c960:	f3bf 8f4f 	dsb	sy
}
 800c964:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800c966:	4b06      	ldr	r3, [pc, #24]	@ (800c980 <__NVIC_SystemReset+0x24>)
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800c96e:	4904      	ldr	r1, [pc, #16]	@ (800c980 <__NVIC_SystemReset+0x24>)
 800c970:	4b04      	ldr	r3, [pc, #16]	@ (800c984 <__NVIC_SystemReset+0x28>)
 800c972:	4313      	orrs	r3, r2
 800c974:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c976:	f3bf 8f4f 	dsb	sy
}
 800c97a:	bf00      	nop
    __NOP();
 800c97c:	bf00      	nop
 800c97e:	e7fd      	b.n	800c97c <__NVIC_SystemReset+0x20>
 800c980:	e000ed00 	.word	0xe000ed00
 800c984:	05fa0004 	.word	0x05fa0004

0800c988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	3b01      	subs	r3, #1
 800c994:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c998:	d301      	bcc.n	800c99e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c99a:	2301      	movs	r3, #1
 800c99c:	e00f      	b.n	800c9be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c99e:	4a0a      	ldr	r2, [pc, #40]	@ (800c9c8 <SysTick_Config+0x40>)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	3b01      	subs	r3, #1
 800c9a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c9a6:	210f      	movs	r1, #15
 800c9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ac:	f7ff ff78 	bl	800c8a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c9b0:	4b05      	ldr	r3, [pc, #20]	@ (800c9c8 <SysTick_Config+0x40>)
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c9b6:	4b04      	ldr	r3, [pc, #16]	@ (800c9c8 <SysTick_Config+0x40>)
 800c9b8:	2207      	movs	r2, #7
 800c9ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c9bc:	2300      	movs	r3, #0
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3708      	adds	r7, #8
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	e000e010 	.word	0xe000e010

0800c9cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f7ff ff13 	bl	800c800 <__NVIC_SetPriorityGrouping>
}
 800c9da:	bf00      	nop
 800c9dc:	3708      	adds	r7, #8
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b086      	sub	sp, #24
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	60b9      	str	r1, [r7, #8]
 800c9ec:	607a      	str	r2, [r7, #4]
 800c9ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c9f4:	f7ff ff28 	bl	800c848 <__NVIC_GetPriorityGrouping>
 800c9f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	68b9      	ldr	r1, [r7, #8]
 800c9fe:	6978      	ldr	r0, [r7, #20]
 800ca00:	f7ff ff78 	bl	800c8f4 <NVIC_EncodePriority>
 800ca04:	4602      	mov	r2, r0
 800ca06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca0a:	4611      	mov	r1, r2
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f7ff ff47 	bl	800c8a0 <__NVIC_SetPriority>
}
 800ca12:	bf00      	nop
 800ca14:	3718      	adds	r7, #24
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}

0800ca1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ca1a:	b580      	push	{r7, lr}
 800ca1c:	b082      	sub	sp, #8
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	4603      	mov	r3, r0
 800ca22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ca24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7ff ff1b 	bl	800c864 <__NVIC_EnableIRQ>
}
 800ca2e:	bf00      	nop
 800ca30:	3708      	adds	r7, #8
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}

0800ca36 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800ca36:	b580      	push	{r7, lr}
 800ca38:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800ca3a:	f7ff ff8f 	bl	800c95c <__NVIC_SystemReset>

0800ca3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b082      	sub	sp, #8
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f7ff ff9e 	bl	800c988 <SysTick_Config>
 800ca4c:	4603      	mov	r3, r0
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3708      	adds	r7, #8
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
	...

0800ca58 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d101      	bne.n	800ca6a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800ca66:	2301      	movs	r3, #1
 800ca68:	e054      	b.n	800cb14 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	7f5b      	ldrb	r3, [r3, #29]
 800ca6e:	b2db      	uxtb	r3, r3
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d105      	bne.n	800ca80 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2200      	movs	r2, #0
 800ca78:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f7fa fdb2 	bl	80075e4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2202      	movs	r2, #2
 800ca84:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	791b      	ldrb	r3, [r3, #4]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d10c      	bne.n	800caa8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4a22      	ldr	r2, [pc, #136]	@ (800cb1c <HAL_CRC_Init+0xc4>)
 800ca94:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	689a      	ldr	r2, [r3, #8]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f022 0218 	bic.w	r2, r2, #24
 800caa4:	609a      	str	r2, [r3, #8]
 800caa6:	e00c      	b.n	800cac2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6899      	ldr	r1, [r3, #8]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	68db      	ldr	r3, [r3, #12]
 800cab0:	461a      	mov	r2, r3
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 f942 	bl	800cd3c <HAL_CRCEx_Polynomial_Set>
 800cab8:	4603      	mov	r3, r0
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d001      	beq.n	800cac2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800cabe:	2301      	movs	r3, #1
 800cac0:	e028      	b.n	800cb14 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	795b      	ldrb	r3, [r3, #5]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d105      	bne.n	800cad6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f04f 32ff 	mov.w	r2, #4294967295
 800cad2:	611a      	str	r2, [r3, #16]
 800cad4:	e004      	b.n	800cae0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	6912      	ldr	r2, [r2, #16]
 800cade:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	689b      	ldr	r3, [r3, #8]
 800cae6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	695a      	ldr	r2, [r3, #20]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	430a      	orrs	r2, r1
 800caf4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	689b      	ldr	r3, [r3, #8]
 800cafc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	699a      	ldr	r2, [r3, #24]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	430a      	orrs	r2, r1
 800cb0a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2201      	movs	r2, #1
 800cb10:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800cb12:	2300      	movs	r3, #0
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3708      	adds	r7, #8
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	04c11db7 	.word	0x04c11db7

0800cb20 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b086      	sub	sp, #24
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	60b9      	str	r1, [r7, #8]
 800cb2a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2202      	movs	r2, #2
 800cb34:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	6a1b      	ldr	r3, [r3, #32]
 800cb3a:	2b03      	cmp	r3, #3
 800cb3c:	d006      	beq.n	800cb4c <HAL_CRC_Accumulate+0x2c>
 800cb3e:	2b03      	cmp	r3, #3
 800cb40:	d829      	bhi.n	800cb96 <HAL_CRC_Accumulate+0x76>
 800cb42:	2b01      	cmp	r3, #1
 800cb44:	d019      	beq.n	800cb7a <HAL_CRC_Accumulate+0x5a>
 800cb46:	2b02      	cmp	r3, #2
 800cb48:	d01e      	beq.n	800cb88 <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 800cb4a:	e024      	b.n	800cb96 <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	617b      	str	r3, [r7, #20]
 800cb50:	e00a      	b.n	800cb68 <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	68ba      	ldr	r2, [r7, #8]
 800cb58:	441a      	add	r2, r3
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	6812      	ldr	r2, [r2, #0]
 800cb60:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	3301      	adds	r3, #1
 800cb66:	617b      	str	r3, [r7, #20]
 800cb68:	697a      	ldr	r2, [r7, #20]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d3f0      	bcc.n	800cb52 <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	613b      	str	r3, [r7, #16]
      break;
 800cb78:	e00e      	b.n	800cb98 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	68b9      	ldr	r1, [r7, #8]
 800cb7e:	68f8      	ldr	r0, [r7, #12]
 800cb80:	f000 f812 	bl	800cba8 <CRC_Handle_8>
 800cb84:	6138      	str	r0, [r7, #16]
      break;
 800cb86:	e007      	b.n	800cb98 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800cb88:	687a      	ldr	r2, [r7, #4]
 800cb8a:	68b9      	ldr	r1, [r7, #8]
 800cb8c:	68f8      	ldr	r0, [r7, #12]
 800cb8e:	f000 f89b 	bl	800ccc8 <CRC_Handle_16>
 800cb92:	6138      	str	r0, [r7, #16]
      break;
 800cb94:	e000      	b.n	800cb98 <HAL_CRC_Accumulate+0x78>
      break;
 800cb96:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800cb9e:	693b      	ldr	r3, [r7, #16]
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3718      	adds	r7, #24
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b089      	sub	sp, #36	@ 0x24
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	60f8      	str	r0, [r7, #12]
 800cbb0:	60b9      	str	r1, [r7, #8]
 800cbb2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	61fb      	str	r3, [r7, #28]
 800cbb8:	e023      	b.n	800cc02 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800cbba:	69fb      	ldr	r3, [r7, #28]
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	68ba      	ldr	r2, [r7, #8]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800cbc6:	69fb      	ldr	r3, [r7, #28]
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	3301      	adds	r3, #1
 800cbcc:	68b9      	ldr	r1, [r7, #8]
 800cbce:	440b      	add	r3, r1
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800cbd4:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800cbd6:	69fb      	ldr	r3, [r7, #28]
 800cbd8:	009b      	lsls	r3, r3, #2
 800cbda:	3302      	adds	r3, #2
 800cbdc:	68b9      	ldr	r1, [r7, #8]
 800cbde:	440b      	add	r3, r1
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800cbe4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800cbe6:	69fb      	ldr	r3, [r7, #28]
 800cbe8:	009b      	lsls	r3, r3, #2
 800cbea:	3303      	adds	r3, #3
 800cbec:	68b9      	ldr	r1, [r7, #8]
 800cbee:	440b      	add	r3, r1
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800cbf8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800cbfa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800cbfc:	69fb      	ldr	r3, [r7, #28]
 800cbfe:	3301      	adds	r3, #1
 800cc00:	61fb      	str	r3, [r7, #28]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	089b      	lsrs	r3, r3, #2
 800cc06:	69fa      	ldr	r2, [r7, #28]
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d3d6      	bcc.n	800cbba <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f003 0303 	and.w	r3, r3, #3
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d04f      	beq.n	800ccb6 <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f003 0303 	and.w	r3, r3, #3
 800cc1c:	2b01      	cmp	r3, #1
 800cc1e:	d107      	bne.n	800cc30 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800cc20:	69fb      	ldr	r3, [r7, #28]
 800cc22:	009b      	lsls	r3, r3, #2
 800cc24:	68ba      	ldr	r2, [r7, #8]
 800cc26:	4413      	add	r3, r2
 800cc28:	68fa      	ldr	r2, [r7, #12]
 800cc2a:	6812      	ldr	r2, [r2, #0]
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f003 0303 	and.w	r3, r3, #3
 800cc36:	2b02      	cmp	r3, #2
 800cc38:	d117      	bne.n	800cc6a <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	009b      	lsls	r3, r3, #2
 800cc3e:	68ba      	ldr	r2, [r7, #8]
 800cc40:	4413      	add	r3, r2
 800cc42:	781b      	ldrb	r3, [r3, #0]
 800cc44:	b21b      	sxth	r3, r3
 800cc46:	021b      	lsls	r3, r3, #8
 800cc48:	b21a      	sxth	r2, r3
 800cc4a:	69fb      	ldr	r3, [r7, #28]
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	3301      	adds	r3, #1
 800cc50:	68b9      	ldr	r1, [r7, #8]
 800cc52:	440b      	add	r3, r1
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	b21b      	sxth	r3, r3
 800cc58:	4313      	orrs	r3, r2
 800cc5a:	b21b      	sxth	r3, r3
 800cc5c:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	8b7a      	ldrh	r2, [r7, #26]
 800cc68:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f003 0303 	and.w	r3, r3, #3
 800cc70:	2b03      	cmp	r3, #3
 800cc72:	d120      	bne.n	800ccb6 <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800cc74:	69fb      	ldr	r3, [r7, #28]
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	68ba      	ldr	r2, [r7, #8]
 800cc7a:	4413      	add	r3, r2
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	b21b      	sxth	r3, r3
 800cc80:	021b      	lsls	r3, r3, #8
 800cc82:	b21a      	sxth	r2, r3
 800cc84:	69fb      	ldr	r3, [r7, #28]
 800cc86:	009b      	lsls	r3, r3, #2
 800cc88:	3301      	adds	r3, #1
 800cc8a:	68b9      	ldr	r1, [r7, #8]
 800cc8c:	440b      	add	r3, r1
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	b21b      	sxth	r3, r3
 800cc92:	4313      	orrs	r3, r2
 800cc94:	b21b      	sxth	r3, r3
 800cc96:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	8b7a      	ldrh	r2, [r7, #26]
 800cca2:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800cca4:	69fb      	ldr	r3, [r7, #28]
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	3302      	adds	r3, #2
 800ccaa:	68ba      	ldr	r2, [r7, #8]
 800ccac:	4413      	add	r3, r2
 800ccae:	68fa      	ldr	r2, [r7, #12]
 800ccb0:	6812      	ldr	r2, [r2, #0]
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	681b      	ldr	r3, [r3, #0]
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3724      	adds	r7, #36	@ 0x24
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr

0800ccc8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b087      	sub	sp, #28
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	617b      	str	r3, [r7, #20]
 800ccd8:	e013      	b.n	800cd02 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	68ba      	ldr	r2, [r7, #8]
 800cce0:	4413      	add	r3, r2
 800cce2:	881b      	ldrh	r3, [r3, #0]
 800cce4:	041a      	lsls	r2, r3, #16
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	3302      	adds	r3, #2
 800ccec:	68b9      	ldr	r1, [r7, #8]
 800ccee:	440b      	add	r3, r1
 800ccf0:	881b      	ldrh	r3, [r3, #0]
 800ccf2:	4619      	mov	r1, r3
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	430a      	orrs	r2, r1
 800ccfa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	3301      	adds	r3, #1
 800cd00:	617b      	str	r3, [r7, #20]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	085b      	lsrs	r3, r3, #1
 800cd06:	697a      	ldr	r2, [r7, #20]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d3e6      	bcc.n	800ccda <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f003 0301 	and.w	r3, r3, #1
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d009      	beq.n	800cd2a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	009b      	lsls	r3, r3, #2
 800cd20:	68ba      	ldr	r2, [r7, #8]
 800cd22:	4413      	add	r3, r2
 800cd24:	881a      	ldrh	r2, [r3, #0]
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	681b      	ldr	r3, [r3, #0]
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	371c      	adds	r7, #28
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b087      	sub	sp, #28
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800cd4c:	231f      	movs	r3, #31
 800cd4e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	f003 0301 	and.w	r3, r3, #1
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d102      	bne.n	800cd60 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	75fb      	strb	r3, [r7, #23]
 800cd5e:	e063      	b.n	800ce28 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800cd60:	bf00      	nop
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	1e5a      	subs	r2, r3, #1
 800cd66:	613a      	str	r2, [r7, #16]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d009      	beq.n	800cd80 <HAL_CRCEx_Polynomial_Set+0x44>
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	f003 031f 	and.w	r3, r3, #31
 800cd72:	68ba      	ldr	r2, [r7, #8]
 800cd74:	fa22 f303 	lsr.w	r3, r2, r3
 800cd78:	f003 0301 	and.w	r3, r3, #1
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d0f0      	beq.n	800cd62 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2b18      	cmp	r3, #24
 800cd84:	d846      	bhi.n	800ce14 <HAL_CRCEx_Polynomial_Set+0xd8>
 800cd86:	a201      	add	r2, pc, #4	@ (adr r2, 800cd8c <HAL_CRCEx_Polynomial_Set+0x50>)
 800cd88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd8c:	0800ce1b 	.word	0x0800ce1b
 800cd90:	0800ce15 	.word	0x0800ce15
 800cd94:	0800ce15 	.word	0x0800ce15
 800cd98:	0800ce15 	.word	0x0800ce15
 800cd9c:	0800ce15 	.word	0x0800ce15
 800cda0:	0800ce15 	.word	0x0800ce15
 800cda4:	0800ce15 	.word	0x0800ce15
 800cda8:	0800ce15 	.word	0x0800ce15
 800cdac:	0800ce09 	.word	0x0800ce09
 800cdb0:	0800ce15 	.word	0x0800ce15
 800cdb4:	0800ce15 	.word	0x0800ce15
 800cdb8:	0800ce15 	.word	0x0800ce15
 800cdbc:	0800ce15 	.word	0x0800ce15
 800cdc0:	0800ce15 	.word	0x0800ce15
 800cdc4:	0800ce15 	.word	0x0800ce15
 800cdc8:	0800ce15 	.word	0x0800ce15
 800cdcc:	0800cdfd 	.word	0x0800cdfd
 800cdd0:	0800ce15 	.word	0x0800ce15
 800cdd4:	0800ce15 	.word	0x0800ce15
 800cdd8:	0800ce15 	.word	0x0800ce15
 800cddc:	0800ce15 	.word	0x0800ce15
 800cde0:	0800ce15 	.word	0x0800ce15
 800cde4:	0800ce15 	.word	0x0800ce15
 800cde8:	0800ce15 	.word	0x0800ce15
 800cdec:	0800cdf1 	.word	0x0800cdf1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	2b06      	cmp	r3, #6
 800cdf4:	d913      	bls.n	800ce1e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800cdfa:	e010      	b.n	800ce1e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	2b07      	cmp	r3, #7
 800ce00:	d90f      	bls.n	800ce22 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800ce02:	2301      	movs	r3, #1
 800ce04:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800ce06:	e00c      	b.n	800ce22 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	2b0f      	cmp	r3, #15
 800ce0c:	d90b      	bls.n	800ce26 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800ce12:	e008      	b.n	800ce26 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800ce14:	2301      	movs	r3, #1
 800ce16:	75fb      	strb	r3, [r7, #23]
        break;
 800ce18:	e006      	b.n	800ce28 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800ce1a:	bf00      	nop
 800ce1c:	e004      	b.n	800ce28 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800ce1e:	bf00      	nop
 800ce20:	e002      	b.n	800ce28 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800ce22:	bf00      	nop
 800ce24:	e000      	b.n	800ce28 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800ce26:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800ce28:	7dfb      	ldrb	r3, [r7, #23]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d10d      	bne.n	800ce4a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	68ba      	ldr	r2, [r7, #8]
 800ce34:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	689b      	ldr	r3, [r3, #8]
 800ce3c:	f023 0118 	bic.w	r1, r3, #24
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	687a      	ldr	r2, [r7, #4]
 800ce46:	430a      	orrs	r2, r1
 800ce48:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800ce4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	371c      	adds	r7, #28
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr

0800ce58 <HAL_CRCEx_Input_Data_Reverse>:
  *          @arg @ref CRC_INPUTDATA_INVERSION_HALFWORD HalfWord-wise bit reversal
  *          @arg @ref CRC_INPUTDATA_INVERSION_WORD     Word-wise bit reversal
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Input_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t InputReverseMode)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b083      	sub	sp, #12
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(InputReverseMode));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2202      	movs	r2, #2
 800ce66:	775a      	strb	r2, [r3, #29]

  /* set input data inversion mode */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, InputReverseMode);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	689b      	ldr	r3, [r3, #8]
 800ce6e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	683a      	ldr	r2, [r7, #0]
 800ce78:	430a      	orrs	r2, r1
 800ce7a:	609a      	str	r2, [r3, #8]
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2201      	movs	r2, #1
 800ce80:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800ce82:	2300      	movs	r3, #0
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	370c      	adds	r7, #12
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr

0800ce90 <HAL_CRCEx_Output_Data_Reverse>:
  *          @arg @ref CRC_OUTPUTDATA_INVERSION_DISABLE no CRC inversion (default value)
  *          @arg @ref CRC_OUTPUTDATA_INVERSION_ENABLE  bit-level inversion (e.g. for a 8-bit CRC: 0xB5 becomes 0xAD)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Output_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t OutputReverseMode)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b083      	sub	sp, #12
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(OutputReverseMode));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2202      	movs	r2, #2
 800ce9e:	775a      	strb	r2, [r3, #29]

  /* set output data inversion mode */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, OutputReverseMode);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	689b      	ldr	r3, [r3, #8]
 800cea6:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	683a      	ldr	r2, [r7, #0]
 800ceb0:	430a      	orrs	r2, r1
 800ceb2:	609a      	str	r2, [r3, #8]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800ceba:	2300      	movs	r3, #0
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	370c      	adds	r7, #12
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr

0800cec8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b085      	sub	sp, #20
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d101      	bne.n	800ceda <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800ced6:	2301      	movs	r3, #1
 800ced8:	e098      	b.n	800d00c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	461a      	mov	r2, r3
 800cee0:	4b4d      	ldr	r3, [pc, #308]	@ (800d018 <HAL_DMA_Init+0x150>)
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d80f      	bhi.n	800cf06 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	461a      	mov	r2, r3
 800ceec:	4b4b      	ldr	r3, [pc, #300]	@ (800d01c <HAL_DMA_Init+0x154>)
 800ceee:	4413      	add	r3, r2
 800cef0:	4a4b      	ldr	r2, [pc, #300]	@ (800d020 <HAL_DMA_Init+0x158>)
 800cef2:	fba2 2303 	umull	r2, r3, r2, r3
 800cef6:	091b      	lsrs	r3, r3, #4
 800cef8:	009a      	lsls	r2, r3, #2
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	4a48      	ldr	r2, [pc, #288]	@ (800d024 <HAL_DMA_Init+0x15c>)
 800cf02:	641a      	str	r2, [r3, #64]	@ 0x40
 800cf04:	e00e      	b.n	800cf24 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	4b46      	ldr	r3, [pc, #280]	@ (800d028 <HAL_DMA_Init+0x160>)
 800cf0e:	4413      	add	r3, r2
 800cf10:	4a43      	ldr	r2, [pc, #268]	@ (800d020 <HAL_DMA_Init+0x158>)
 800cf12:	fba2 2303 	umull	r2, r3, r2, r3
 800cf16:	091b      	lsrs	r3, r3, #4
 800cf18:	009a      	lsls	r2, r3, #2
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	4a42      	ldr	r2, [pc, #264]	@ (800d02c <HAL_DMA_Init+0x164>)
 800cf22:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2202      	movs	r2, #2
 800cf28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800cf3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800cf48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	691b      	ldr	r3, [r3, #16]
 800cf4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cf54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	699b      	ldr	r3, [r3, #24]
 800cf5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cf60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6a1b      	ldr	r3, [r3, #32]
 800cf66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800cf68:	68fa      	ldr	r2, [r7, #12]
 800cf6a:	4313      	orrs	r3, r2
 800cf6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	68fa      	ldr	r2, [r7, #12]
 800cf74:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	689b      	ldr	r3, [r3, #8]
 800cf7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cf7e:	d039      	beq.n	800cff4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf84:	4a27      	ldr	r2, [pc, #156]	@ (800d024 <HAL_DMA_Init+0x15c>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d11a      	bne.n	800cfc0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800cf8a:	4b29      	ldr	r3, [pc, #164]	@ (800d030 <HAL_DMA_Init+0x168>)
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf92:	f003 031c 	and.w	r3, r3, #28
 800cf96:	210f      	movs	r1, #15
 800cf98:	fa01 f303 	lsl.w	r3, r1, r3
 800cf9c:	43db      	mvns	r3, r3
 800cf9e:	4924      	ldr	r1, [pc, #144]	@ (800d030 <HAL_DMA_Init+0x168>)
 800cfa0:	4013      	ands	r3, r2
 800cfa2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800cfa4:	4b22      	ldr	r3, [pc, #136]	@ (800d030 <HAL_DMA_Init+0x168>)
 800cfa6:	681a      	ldr	r2, [r3, #0]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6859      	ldr	r1, [r3, #4]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfb0:	f003 031c 	and.w	r3, r3, #28
 800cfb4:	fa01 f303 	lsl.w	r3, r1, r3
 800cfb8:	491d      	ldr	r1, [pc, #116]	@ (800d030 <HAL_DMA_Init+0x168>)
 800cfba:	4313      	orrs	r3, r2
 800cfbc:	600b      	str	r3, [r1, #0]
 800cfbe:	e019      	b.n	800cff4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800cfc0:	4b1c      	ldr	r3, [pc, #112]	@ (800d034 <HAL_DMA_Init+0x16c>)
 800cfc2:	681a      	ldr	r2, [r3, #0]
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfc8:	f003 031c 	and.w	r3, r3, #28
 800cfcc:	210f      	movs	r1, #15
 800cfce:	fa01 f303 	lsl.w	r3, r1, r3
 800cfd2:	43db      	mvns	r3, r3
 800cfd4:	4917      	ldr	r1, [pc, #92]	@ (800d034 <HAL_DMA_Init+0x16c>)
 800cfd6:	4013      	ands	r3, r2
 800cfd8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800cfda:	4b16      	ldr	r3, [pc, #88]	@ (800d034 <HAL_DMA_Init+0x16c>)
 800cfdc:	681a      	ldr	r2, [r3, #0]
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6859      	ldr	r1, [r3, #4]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfe6:	f003 031c 	and.w	r3, r3, #28
 800cfea:	fa01 f303 	lsl.w	r3, r1, r3
 800cfee:	4911      	ldr	r1, [pc, #68]	@ (800d034 <HAL_DMA_Init+0x16c>)
 800cff0:	4313      	orrs	r3, r2
 800cff2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2200      	movs	r2, #0
 800cff8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2201      	movs	r2, #1
 800cffe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2200      	movs	r2, #0
 800d006:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800d00a:	2300      	movs	r3, #0
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3714      	adds	r7, #20
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr
 800d018:	40020407 	.word	0x40020407
 800d01c:	bffdfff8 	.word	0xbffdfff8
 800d020:	cccccccd 	.word	0xcccccccd
 800d024:	40020000 	.word	0x40020000
 800d028:	bffdfbf8 	.word	0xbffdfbf8
 800d02c:	40020400 	.word	0x40020400
 800d030:	400200a8 	.word	0x400200a8
 800d034:	400204a8 	.word	0x400204a8

0800d038 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b086      	sub	sp, #24
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	607a      	str	r2, [r7, #4]
 800d044:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d046:	2300      	movs	r3, #0
 800d048:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d050:	2b01      	cmp	r3, #1
 800d052:	d101      	bne.n	800d058 <HAL_DMA_Start_IT+0x20>
 800d054:	2302      	movs	r3, #2
 800d056:	e04b      	b.n	800d0f0 <HAL_DMA_Start_IT+0xb8>
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2201      	movs	r2, #1
 800d05c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800d066:	b2db      	uxtb	r3, r3
 800d068:	2b01      	cmp	r3, #1
 800d06a:	d13a      	bne.n	800d0e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2202      	movs	r2, #2
 800d070:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	2200      	movs	r2, #0
 800d078:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	681a      	ldr	r2, [r3, #0]
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f022 0201 	bic.w	r2, r2, #1
 800d088:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	687a      	ldr	r2, [r7, #4]
 800d08e:	68b9      	ldr	r1, [r7, #8]
 800d090:	68f8      	ldr	r0, [r7, #12]
 800d092:	f000 f92a 	bl	800d2ea <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d008      	beq.n	800d0b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f042 020e 	orr.w	r2, r2, #14
 800d0ac:	601a      	str	r2, [r3, #0]
 800d0ae:	e00f      	b.n	800d0d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	681a      	ldr	r2, [r3, #0]
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f022 0204 	bic.w	r2, r2, #4
 800d0be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	681a      	ldr	r2, [r3, #0]
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f042 020a 	orr.w	r2, r2, #10
 800d0ce:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	f042 0201 	orr.w	r2, r2, #1
 800d0de:	601a      	str	r2, [r3, #0]
 800d0e0:	e005      	b.n	800d0ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800d0ea:	2302      	movs	r3, #2
 800d0ec:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800d0ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3718      	adds	r7, #24
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b085      	sub	sp, #20
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d100:	2300      	movs	r3, #0
 800d102:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800d10a:	b2db      	uxtb	r3, r3
 800d10c:	2b02      	cmp	r3, #2
 800d10e:	d008      	beq.n	800d122 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2204      	movs	r2, #4
 800d114:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2200      	movs	r2, #0
 800d11a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800d11e:	2301      	movs	r3, #1
 800d120:	e022      	b.n	800d168 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	681a      	ldr	r2, [r3, #0]
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f022 020e 	bic.w	r2, r2, #14
 800d130:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	681a      	ldr	r2, [r3, #0]
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f022 0201 	bic.w	r2, r2, #1
 800d140:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d146:	f003 021c 	and.w	r2, r3, #28
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d14e:	2101      	movs	r1, #1
 800d150:	fa01 f202 	lsl.w	r2, r1, r2
 800d154:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2201      	movs	r2, #1
 800d15a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2200      	movs	r2, #0
 800d162:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800d166:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3714      	adds	r7, #20
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr

0800d174 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b084      	sub	sp, #16
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d190:	f003 031c 	and.w	r3, r3, #28
 800d194:	2204      	movs	r2, #4
 800d196:	409a      	lsls	r2, r3
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	4013      	ands	r3, r2
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d026      	beq.n	800d1ee <HAL_DMA_IRQHandler+0x7a>
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	f003 0304 	and.w	r3, r3, #4
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d021      	beq.n	800d1ee <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f003 0320 	and.w	r3, r3, #32
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d107      	bne.n	800d1c8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	681a      	ldr	r2, [r3, #0]
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f022 0204 	bic.w	r2, r2, #4
 800d1c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1cc:	f003 021c 	and.w	r2, r3, #28
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1d4:	2104      	movs	r1, #4
 800d1d6:	fa01 f202 	lsl.w	r2, r1, r2
 800d1da:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d071      	beq.n	800d2c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800d1ec:	e06c      	b.n	800d2c8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1f2:	f003 031c 	and.w	r3, r3, #28
 800d1f6:	2202      	movs	r2, #2
 800d1f8:	409a      	lsls	r2, r3
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	4013      	ands	r3, r2
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d02e      	beq.n	800d260 <HAL_DMA_IRQHandler+0xec>
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	f003 0302 	and.w	r3, r3, #2
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d029      	beq.n	800d260 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f003 0320 	and.w	r3, r3, #32
 800d216:	2b00      	cmp	r3, #0
 800d218:	d10b      	bne.n	800d232 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f022 020a 	bic.w	r2, r2, #10
 800d228:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2201      	movs	r2, #1
 800d22e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d236:	f003 021c 	and.w	r2, r3, #28
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d23e:	2102      	movs	r1, #2
 800d240:	fa01 f202 	lsl.w	r2, r1, r2
 800d244:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2200      	movs	r2, #0
 800d24a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d252:	2b00      	cmp	r3, #0
 800d254:	d038      	beq.n	800d2c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800d25e:	e033      	b.n	800d2c8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d264:	f003 031c 	and.w	r3, r3, #28
 800d268:	2208      	movs	r2, #8
 800d26a:	409a      	lsls	r2, r3
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	4013      	ands	r3, r2
 800d270:	2b00      	cmp	r3, #0
 800d272:	d02a      	beq.n	800d2ca <HAL_DMA_IRQHandler+0x156>
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	f003 0308 	and.w	r3, r3, #8
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d025      	beq.n	800d2ca <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	681a      	ldr	r2, [r3, #0]
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f022 020e 	bic.w	r2, r2, #14
 800d28c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d292:	f003 021c 	and.w	r2, r3, #28
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d29a:	2101      	movs	r1, #1
 800d29c:	fa01 f202 	lsl.w	r2, r1, r2
 800d2a0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2201      	movs	r2, #1
 800d2a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d004      	beq.n	800d2ca <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800d2c8:	bf00      	nop
 800d2ca:	bf00      	nop
}
 800d2cc:	3710      	adds	r7, #16
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}

0800d2d2 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800d2d2:	b480      	push	{r7}
 800d2d4:	b083      	sub	sp, #12
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	370c      	adds	r7, #12
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e8:	4770      	bx	lr

0800d2ea <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d2ea:	b480      	push	{r7}
 800d2ec:	b085      	sub	sp, #20
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	60f8      	str	r0, [r7, #12]
 800d2f2:	60b9      	str	r1, [r7, #8]
 800d2f4:	607a      	str	r2, [r7, #4]
 800d2f6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2fc:	f003 021c 	and.w	r2, r3, #28
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d304:	2101      	movs	r1, #1
 800d306:	fa01 f202 	lsl.w	r2, r1, r2
 800d30a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	683a      	ldr	r2, [r7, #0]
 800d312:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	689b      	ldr	r3, [r3, #8]
 800d318:	2b10      	cmp	r3, #16
 800d31a:	d108      	bne.n	800d32e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	68ba      	ldr	r2, [r7, #8]
 800d32a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800d32c:	e007      	b.n	800d33e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	68ba      	ldr	r2, [r7, #8]
 800d334:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	60da      	str	r2, [r3, #12]
}
 800d33e:	bf00      	nop
 800d340:	3714      	adds	r7, #20
 800d342:	46bd      	mov	sp, r7
 800d344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d348:	4770      	bx	lr
	...

0800d34c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b086      	sub	sp, #24
 800d350:	af00      	add	r7, sp, #0
 800d352:	60f8      	str	r0, [r7, #12]
 800d354:	60b9      	str	r1, [r7, #8]
 800d356:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800d35a:	2300      	movs	r3, #0
 800d35c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d35e:	4b2f      	ldr	r3, [pc, #188]	@ (800d41c <HAL_FLASH_Program+0xd0>)
 800d360:	781b      	ldrb	r3, [r3, #0]
 800d362:	2b01      	cmp	r3, #1
 800d364:	d101      	bne.n	800d36a <HAL_FLASH_Program+0x1e>
 800d366:	2302      	movs	r3, #2
 800d368:	e053      	b.n	800d412 <HAL_FLASH_Program+0xc6>
 800d36a:	4b2c      	ldr	r3, [pc, #176]	@ (800d41c <HAL_FLASH_Program+0xd0>)
 800d36c:	2201      	movs	r2, #1
 800d36e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d370:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d374:	f000 f8c6 	bl	800d504 <FLASH_WaitForLastOperation>
 800d378:	4603      	mov	r3, r0
 800d37a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800d37c:	7dfb      	ldrb	r3, [r7, #23]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d143      	bne.n	800d40a <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d382:	4b26      	ldr	r3, [pc, #152]	@ (800d41c <HAL_FLASH_Program+0xd0>)
 800d384:	2200      	movs	r2, #0
 800d386:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800d388:	4b25      	ldr	r3, [pc, #148]	@ (800d420 <HAL_FLASH_Program+0xd4>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d390:	2b00      	cmp	r3, #0
 800d392:	d009      	beq.n	800d3a8 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800d394:	4b22      	ldr	r3, [pc, #136]	@ (800d420 <HAL_FLASH_Program+0xd4>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4a21      	ldr	r2, [pc, #132]	@ (800d420 <HAL_FLASH_Program+0xd4>)
 800d39a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d39e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800d3a0:	4b1e      	ldr	r3, [pc, #120]	@ (800d41c <HAL_FLASH_Program+0xd0>)
 800d3a2:	2202      	movs	r2, #2
 800d3a4:	771a      	strb	r2, [r3, #28]
 800d3a6:	e002      	b.n	800d3ae <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800d3a8:	4b1c      	ldr	r3, [pc, #112]	@ (800d41c <HAL_FLASH_Program+0xd0>)
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d107      	bne.n	800d3c4 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800d3b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3b8:	68b8      	ldr	r0, [r7, #8]
 800d3ba:	f000 f8f9 	bl	800d5b0 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800d3be:	2301      	movs	r3, #1
 800d3c0:	613b      	str	r3, [r7, #16]
 800d3c2:	e010      	b.n	800d3e6 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2b01      	cmp	r3, #1
 800d3c8:	d002      	beq.n	800d3d0 <HAL_FLASH_Program+0x84>
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2b02      	cmp	r3, #2
 800d3ce:	d10a      	bne.n	800d3e6 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	4619      	mov	r1, r3
 800d3d4:	68b8      	ldr	r0, [r7, #8]
 800d3d6:	f000 f911 	bl	800d5fc <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2b02      	cmp	r3, #2
 800d3de:	d102      	bne.n	800d3e6 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800d3e0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d3e4:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d3e6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d3ea:	f000 f88b 	bl	800d504 <FLASH_WaitForLastOperation>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d006      	beq.n	800d406 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800d3f8:	4b09      	ldr	r3, [pc, #36]	@ (800d420 <HAL_FLASH_Program+0xd4>)
 800d3fa:	695a      	ldr	r2, [r3, #20]
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	43db      	mvns	r3, r3
 800d400:	4907      	ldr	r1, [pc, #28]	@ (800d420 <HAL_FLASH_Program+0xd4>)
 800d402:	4013      	ands	r3, r2
 800d404:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800d406:	f000 fae5 	bl	800d9d4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d40a:	4b04      	ldr	r3, [pc, #16]	@ (800d41c <HAL_FLASH_Program+0xd0>)
 800d40c:	2200      	movs	r2, #0
 800d40e:	701a      	strb	r2, [r3, #0]

  return status;
 800d410:	7dfb      	ldrb	r3, [r7, #23]
}
 800d412:	4618      	mov	r0, r3
 800d414:	3718      	adds	r7, #24
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
 800d41a:	bf00      	nop
 800d41c:	2000027c 	.word	0x2000027c
 800d420:	40022000 	.word	0x40022000

0800d424 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800d424:	b480      	push	{r7}
 800d426:	b083      	sub	sp, #12
 800d428:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800d42a:	2300      	movs	r3, #0
 800d42c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800d42e:	4b0b      	ldr	r3, [pc, #44]	@ (800d45c <HAL_FLASH_Unlock+0x38>)
 800d430:	695b      	ldr	r3, [r3, #20]
 800d432:	2b00      	cmp	r3, #0
 800d434:	da0b      	bge.n	800d44e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800d436:	4b09      	ldr	r3, [pc, #36]	@ (800d45c <HAL_FLASH_Unlock+0x38>)
 800d438:	4a09      	ldr	r2, [pc, #36]	@ (800d460 <HAL_FLASH_Unlock+0x3c>)
 800d43a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800d43c:	4b07      	ldr	r3, [pc, #28]	@ (800d45c <HAL_FLASH_Unlock+0x38>)
 800d43e:	4a09      	ldr	r2, [pc, #36]	@ (800d464 <HAL_FLASH_Unlock+0x40>)
 800d440:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800d442:	4b06      	ldr	r3, [pc, #24]	@ (800d45c <HAL_FLASH_Unlock+0x38>)
 800d444:	695b      	ldr	r3, [r3, #20]
 800d446:	2b00      	cmp	r3, #0
 800d448:	da01      	bge.n	800d44e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800d44a:	2301      	movs	r3, #1
 800d44c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800d44e:	79fb      	ldrb	r3, [r7, #7]
}
 800d450:	4618      	mov	r0, r3
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr
 800d45c:	40022000 	.word	0x40022000
 800d460:	45670123 	.word	0x45670123
 800d464:	cdef89ab 	.word	0xcdef89ab

0800d468 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800d468:	b480      	push	{r7}
 800d46a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800d46c:	4b05      	ldr	r3, [pc, #20]	@ (800d484 <HAL_FLASH_Lock+0x1c>)
 800d46e:	695b      	ldr	r3, [r3, #20]
 800d470:	4a04      	ldr	r2, [pc, #16]	@ (800d484 <HAL_FLASH_Lock+0x1c>)
 800d472:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d476:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800d478:	2300      	movs	r3, #0
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr
 800d484:	40022000 	.word	0x40022000

0800d488 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800d488:	b480      	push	{r7}
 800d48a:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 800d48c:	4b09      	ldr	r3, [pc, #36]	@ (800d4b4 <HAL_FLASH_OB_Unlock+0x2c>)
 800d48e:	695b      	ldr	r3, [r3, #20]
 800d490:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d494:	2b00      	cmp	r3, #0
 800d496:	d007      	beq.n	800d4a8 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800d498:	4b06      	ldr	r3, [pc, #24]	@ (800d4b4 <HAL_FLASH_OB_Unlock+0x2c>)
 800d49a:	4a07      	ldr	r2, [pc, #28]	@ (800d4b8 <HAL_FLASH_OB_Unlock+0x30>)
 800d49c:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800d49e:	4b05      	ldr	r3, [pc, #20]	@ (800d4b4 <HAL_FLASH_OB_Unlock+0x2c>)
 800d4a0:	4a06      	ldr	r2, [pc, #24]	@ (800d4bc <HAL_FLASH_OB_Unlock+0x34>)
 800d4a2:	60da      	str	r2, [r3, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	e000      	b.n	800d4aa <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800d4a8:	2301      	movs	r3, #1
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr
 800d4b4:	40022000 	.word	0x40022000
 800d4b8:	08192a3b 	.word	0x08192a3b
 800d4bc:	4c5d6e7f 	.word	0x4c5d6e7f

0800d4c0 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 800d4c4:	4b05      	ldr	r3, [pc, #20]	@ (800d4dc <HAL_FLASH_OB_Lock+0x1c>)
 800d4c6:	695b      	ldr	r3, [r3, #20]
 800d4c8:	4a04      	ldr	r2, [pc, #16]	@ (800d4dc <HAL_FLASH_OB_Lock+0x1c>)
 800d4ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d4ce:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800d4d0:	2300      	movs	r3, #0
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr
 800d4dc:	40022000 	.word	0x40022000

0800d4e0 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 800d4e4:	4b06      	ldr	r3, [pc, #24]	@ (800d500 <HAL_FLASH_OB_Launch+0x20>)
 800d4e6:	695b      	ldr	r3, [r3, #20]
 800d4e8:	4a05      	ldr	r2, [pc, #20]	@ (800d500 <HAL_FLASH_OB_Launch+0x20>)
 800d4ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d4ee:	6153      	str	r3, [r2, #20]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 800d4f0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d4f4:	f000 f806 	bl	800d504 <FLASH_WaitForLastOperation>
 800d4f8:	4603      	mov	r3, r0
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	bf00      	nop
 800d500:	40022000 	.word	0x40022000

0800d504 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800d50c:	f7fd fdae 	bl	800b06c <HAL_GetTick>
 800d510:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800d512:	e00d      	b.n	800d530 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d51a:	d009      	beq.n	800d530 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800d51c:	f7fd fda6 	bl	800b06c <HAL_GetTick>
 800d520:	4602      	mov	r2, r0
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	1ad3      	subs	r3, r2, r3
 800d526:	687a      	ldr	r2, [r7, #4]
 800d528:	429a      	cmp	r2, r3
 800d52a:	d801      	bhi.n	800d530 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800d52c:	2303      	movs	r3, #3
 800d52e:	e036      	b.n	800d59e <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800d530:	4b1d      	ldr	r3, [pc, #116]	@ (800d5a8 <FLASH_WaitForLastOperation+0xa4>)
 800d532:	691b      	ldr	r3, [r3, #16]
 800d534:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d1eb      	bne.n	800d514 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800d53c:	4b1a      	ldr	r3, [pc, #104]	@ (800d5a8 <FLASH_WaitForLastOperation+0xa4>)
 800d53e:	691a      	ldr	r2, [r3, #16]
 800d540:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800d544:	4013      	ands	r3, r2
 800d546:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d01d      	beq.n	800d58a <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800d54e:	4b17      	ldr	r3, [pc, #92]	@ (800d5ac <FLASH_WaitForLastOperation+0xa8>)
 800d550:	685a      	ldr	r2, [r3, #4]
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	4313      	orrs	r3, r2
 800d556:	4a15      	ldr	r2, [pc, #84]	@ (800d5ac <FLASH_WaitForLastOperation+0xa8>)
 800d558:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d560:	d307      	bcc.n	800d572 <FLASH_WaitForLastOperation+0x6e>
 800d562:	4b11      	ldr	r3, [pc, #68]	@ (800d5a8 <FLASH_WaitForLastOperation+0xa4>)
 800d564:	699a      	ldr	r2, [r3, #24]
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800d56c:	490e      	ldr	r1, [pc, #56]	@ (800d5a8 <FLASH_WaitForLastOperation+0xa4>)
 800d56e:	4313      	orrs	r3, r2
 800d570:	618b      	str	r3, [r1, #24]
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d004      	beq.n	800d586 <FLASH_WaitForLastOperation+0x82>
 800d57c:	4a0a      	ldr	r2, [pc, #40]	@ (800d5a8 <FLASH_WaitForLastOperation+0xa4>)
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800d584:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800d586:	2301      	movs	r3, #1
 800d588:	e009      	b.n	800d59e <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800d58a:	4b07      	ldr	r3, [pc, #28]	@ (800d5a8 <FLASH_WaitForLastOperation+0xa4>)
 800d58c:	691b      	ldr	r3, [r3, #16]
 800d58e:	f003 0301 	and.w	r3, r3, #1
 800d592:	2b00      	cmp	r3, #0
 800d594:	d002      	beq.n	800d59c <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800d596:	4b04      	ldr	r3, [pc, #16]	@ (800d5a8 <FLASH_WaitForLastOperation+0xa4>)
 800d598:	2201      	movs	r2, #1
 800d59a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800d59c:	2300      	movs	r3, #0
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3710      	adds	r7, #16
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	40022000 	.word	0x40022000
 800d5ac:	2000027c 	.word	0x2000027c

0800d5b0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b085      	sub	sp, #20
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	60f8      	str	r0, [r7, #12]
 800d5b8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800d5bc:	4b0e      	ldr	r3, [pc, #56]	@ (800d5f8 <FLASH_Program_DoubleWord+0x48>)
 800d5be:	695b      	ldr	r3, [r3, #20]
 800d5c0:	4a0d      	ldr	r2, [pc, #52]	@ (800d5f8 <FLASH_Program_DoubleWord+0x48>)
 800d5c2:	f043 0301 	orr.w	r3, r3, #1
 800d5c6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	683a      	ldr	r2, [r7, #0]
 800d5cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800d5ce:	f3bf 8f6f 	isb	sy
}
 800d5d2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800d5d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d5d8:	f04f 0200 	mov.w	r2, #0
 800d5dc:	f04f 0300 	mov.w	r3, #0
 800d5e0:	000a      	movs	r2, r1
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	68f9      	ldr	r1, [r7, #12]
 800d5e6:	3104      	adds	r1, #4
 800d5e8:	4613      	mov	r3, r2
 800d5ea:	600b      	str	r3, [r1, #0]
}
 800d5ec:	bf00      	nop
 800d5ee:	3714      	adds	r7, #20
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr
 800d5f8:	40022000 	.word	0x40022000

0800d5fc <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b089      	sub	sp, #36	@ 0x24
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800d606:	2340      	movs	r3, #64	@ 0x40
 800d608:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800d612:	4b14      	ldr	r3, [pc, #80]	@ (800d664 <FLASH_Program_Fast+0x68>)
 800d614:	695b      	ldr	r3, [r3, #20]
 800d616:	4a13      	ldr	r2, [pc, #76]	@ (800d664 <FLASH_Program_Fast+0x68>)
 800d618:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d61c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d61e:	f3ef 8310 	mrs	r3, PRIMASK
 800d622:	60fb      	str	r3, [r7, #12]
  return(result);
 800d624:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800d626:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d628:	b672      	cpsid	i
}
 800d62a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	69bb      	ldr	r3, [r7, #24]
 800d632:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800d634:	69bb      	ldr	r3, [r7, #24]
 800d636:	3304      	adds	r3, #4
 800d638:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	3304      	adds	r3, #4
 800d63e:	617b      	str	r3, [r7, #20]
    row_index--;
 800d640:	7ffb      	ldrb	r3, [r7, #31]
 800d642:	3b01      	subs	r3, #1
 800d644:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800d646:	7ffb      	ldrb	r3, [r7, #31]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d1ef      	bne.n	800d62c <FLASH_Program_Fast+0x30>
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	f383 8810 	msr	PRIMASK, r3
}
 800d656:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800d658:	bf00      	nop
 800d65a:	3724      	adds	r7, #36	@ 0x24
 800d65c:	46bd      	mov	sp, r7
 800d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d662:	4770      	bx	lr
 800d664:	40022000 	.word	0x40022000

0800d668 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d672:	4b49      	ldr	r3, [pc, #292]	@ (800d798 <HAL_FLASHEx_Erase+0x130>)
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	2b01      	cmp	r3, #1
 800d678:	d101      	bne.n	800d67e <HAL_FLASHEx_Erase+0x16>
 800d67a:	2302      	movs	r3, #2
 800d67c:	e087      	b.n	800d78e <HAL_FLASHEx_Erase+0x126>
 800d67e:	4b46      	ldr	r3, [pc, #280]	@ (800d798 <HAL_FLASHEx_Erase+0x130>)
 800d680:	2201      	movs	r2, #1
 800d682:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d684:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d688:	f7ff ff3c 	bl	800d504 <FLASH_WaitForLastOperation>
 800d68c:	4603      	mov	r3, r0
 800d68e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800d690:	7bfb      	ldrb	r3, [r7, #15]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d177      	bne.n	800d786 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d696:	4b40      	ldr	r3, [pc, #256]	@ (800d798 <HAL_FLASHEx_Erase+0x130>)
 800d698:	2200      	movs	r2, #0
 800d69a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800d69c:	4b3f      	ldr	r3, [pc, #252]	@ (800d79c <HAL_FLASHEx_Erase+0x134>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d013      	beq.n	800d6d0 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800d6a8:	4b3c      	ldr	r3, [pc, #240]	@ (800d79c <HAL_FLASHEx_Erase+0x134>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d009      	beq.n	800d6c8 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800d6b4:	4b39      	ldr	r3, [pc, #228]	@ (800d79c <HAL_FLASHEx_Erase+0x134>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4a38      	ldr	r2, [pc, #224]	@ (800d79c <HAL_FLASHEx_Erase+0x134>)
 800d6ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d6be:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800d6c0:	4b35      	ldr	r3, [pc, #212]	@ (800d798 <HAL_FLASHEx_Erase+0x130>)
 800d6c2:	2203      	movs	r2, #3
 800d6c4:	771a      	strb	r2, [r3, #28]
 800d6c6:	e016      	b.n	800d6f6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800d6c8:	4b33      	ldr	r3, [pc, #204]	@ (800d798 <HAL_FLASHEx_Erase+0x130>)
 800d6ca:	2201      	movs	r2, #1
 800d6cc:	771a      	strb	r2, [r3, #28]
 800d6ce:	e012      	b.n	800d6f6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800d6d0:	4b32      	ldr	r3, [pc, #200]	@ (800d79c <HAL_FLASHEx_Erase+0x134>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d009      	beq.n	800d6f0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800d6dc:	4b2f      	ldr	r3, [pc, #188]	@ (800d79c <HAL_FLASHEx_Erase+0x134>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4a2e      	ldr	r2, [pc, #184]	@ (800d79c <HAL_FLASHEx_Erase+0x134>)
 800d6e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d6e6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800d6e8:	4b2b      	ldr	r3, [pc, #172]	@ (800d798 <HAL_FLASHEx_Erase+0x130>)
 800d6ea:	2202      	movs	r2, #2
 800d6ec:	771a      	strb	r2, [r3, #28]
 800d6ee:	e002      	b.n	800d6f6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800d6f0:	4b29      	ldr	r3, [pc, #164]	@ (800d798 <HAL_FLASHEx_Erase+0x130>)
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d113      	bne.n	800d726 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	4618      	mov	r0, r3
 800d704:	f000 f908 	bl	800d918 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d708:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d70c:	f7ff fefa 	bl	800d504 <FLASH_WaitForLastOperation>
 800d710:	4603      	mov	r3, r0
 800d712:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800d714:	4b21      	ldr	r3, [pc, #132]	@ (800d79c <HAL_FLASHEx_Erase+0x134>)
 800d716:	695b      	ldr	r3, [r3, #20]
 800d718:	4a20      	ldr	r2, [pc, #128]	@ (800d79c <HAL_FLASHEx_Erase+0x134>)
 800d71a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d71e:	f023 0304 	bic.w	r3, r3, #4
 800d722:	6153      	str	r3, [r2, #20]
 800d724:	e02d      	b.n	800d782 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	f04f 32ff 	mov.w	r2, #4294967295
 800d72c:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	689b      	ldr	r3, [r3, #8]
 800d732:	60bb      	str	r3, [r7, #8]
 800d734:	e01d      	b.n	800d772 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	685b      	ldr	r3, [r3, #4]
 800d73a:	4619      	mov	r1, r3
 800d73c:	68b8      	ldr	r0, [r7, #8]
 800d73e:	f000 f913 	bl	800d968 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d742:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d746:	f7ff fedd 	bl	800d504 <FLASH_WaitForLastOperation>
 800d74a:	4603      	mov	r3, r0
 800d74c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800d74e:	4b13      	ldr	r3, [pc, #76]	@ (800d79c <HAL_FLASHEx_Erase+0x134>)
 800d750:	695b      	ldr	r3, [r3, #20]
 800d752:	4a12      	ldr	r2, [pc, #72]	@ (800d79c <HAL_FLASHEx_Erase+0x134>)
 800d754:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800d758:	f023 0302 	bic.w	r3, r3, #2
 800d75c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800d75e:	7bfb      	ldrb	r3, [r7, #15]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d003      	beq.n	800d76c <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	68ba      	ldr	r2, [r7, #8]
 800d768:	601a      	str	r2, [r3, #0]
          break;
 800d76a:	e00a      	b.n	800d782 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	3301      	adds	r3, #1
 800d770:	60bb      	str	r3, [r7, #8]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	689a      	ldr	r2, [r3, #8]
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	68db      	ldr	r3, [r3, #12]
 800d77a:	4413      	add	r3, r2
 800d77c:	68ba      	ldr	r2, [r7, #8]
 800d77e:	429a      	cmp	r2, r3
 800d780:	d3d9      	bcc.n	800d736 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800d782:	f000 f927 	bl	800d9d4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d786:	4b04      	ldr	r3, [pc, #16]	@ (800d798 <HAL_FLASHEx_Erase+0x130>)
 800d788:	2200      	movs	r2, #0
 800d78a:	701a      	strb	r2, [r3, #0]

  return status;
 800d78c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3710      	adds	r7, #16
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
 800d796:	bf00      	nop
 800d798:	2000027c 	.word	0x2000027c
 800d79c:	40022000 	.word	0x40022000

0800d7a0 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b084      	sub	sp, #16
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d7ac:	4b32      	ldr	r3, [pc, #200]	@ (800d878 <HAL_FLASHEx_OBProgram+0xd8>)
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	2b01      	cmp	r3, #1
 800d7b2:	d101      	bne.n	800d7b8 <HAL_FLASHEx_OBProgram+0x18>
 800d7b4:	2302      	movs	r3, #2
 800d7b6:	e05a      	b.n	800d86e <HAL_FLASHEx_OBProgram+0xce>
 800d7b8:	4b2f      	ldr	r3, [pc, #188]	@ (800d878 <HAL_FLASHEx_OBProgram+0xd8>)
 800d7ba:	2201      	movs	r2, #1
 800d7bc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d7be:	4b2e      	ldr	r3, [pc, #184]	@ (800d878 <HAL_FLASHEx_OBProgram+0xd8>)
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	f003 0301 	and.w	r3, r3, #1
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d00d      	beq.n	800d7ec <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if(FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6858      	ldr	r0, [r3, #4]
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6899      	ldr	r1, [r3, #8]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	68db      	ldr	r3, [r3, #12]
 800d7dc:	461a      	mov	r2, r3
 800d7de:	f000 f943 	bl	800da68 <FLASH_OB_WRPConfig>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d001      	beq.n	800d7ec <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	73fb      	strb	r3, [r7, #15]
    }

  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f003 0302 	and.w	r3, r3, #2
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d009      	beq.n	800d80c <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	691b      	ldr	r3, [r3, #16]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f000 f997 	bl	800db30 <FLASH_OB_RDPConfig>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	d001      	beq.n	800d80c <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 800d808:	2301      	movs	r3, #1
 800d80a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* User Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f003 0304 	and.w	r3, r3, #4
 800d814:	2b00      	cmp	r3, #0
 800d816:	d00c      	beq.n	800d832 <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	695a      	ldr	r2, [r3, #20]
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	699b      	ldr	r3, [r3, #24]
 800d820:	4619      	mov	r1, r3
 800d822:	4610      	mov	r0, r2
 800d824:	f000 f9b2 	bl	800db8c <FLASH_OB_UserConfig>
 800d828:	4603      	mov	r3, r0
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d001      	beq.n	800d832 <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 800d82e:	2301      	movs	r3, #1
 800d830:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* PCROP Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	f003 0308 	and.w	r3, r3, #8
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d013      	beq.n	800d866 <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6a1a      	ldr	r2, [r3, #32]
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d846:	429a      	cmp	r2, r3
 800d848:	d00d      	beq.n	800d866 <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	69d8      	ldr	r0, [r3, #28]
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6a19      	ldr	r1, [r3, #32]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d856:	461a      	mov	r2, r3
 800d858:	f000 fa90 	bl	800dd7c <FLASH_OB_PCROPConfig>
 800d85c:	4603      	mov	r3, r0
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d001      	beq.n	800d866 <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 800d862:	2301      	movs	r3, #1
 800d864:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d866:	4b04      	ldr	r3, [pc, #16]	@ (800d878 <HAL_FLASHEx_OBProgram+0xd8>)
 800d868:	2200      	movs	r2, #0
 800d86a:	701a      	strb	r2, [r3, #0]

  return status;
 800d86c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3710      	adds	r7, #16
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
 800d876:	bf00      	nop
 800d878:	2000027c 	.word	0x2000027c

0800d87c <HAL_FLASHEx_OBGetConfig>:
  *         which area is requested for the WRP and PCROP, else no information will be returned
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2206      	movs	r2, #6
 800d888:	601a      	str	r2, [r3, #0]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d00b      	beq.n	800d8aa <HAL_FLASHEx_OBGetConfig+0x2e>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	685b      	ldr	r3, [r3, #4]
 800d896:	2b01      	cmp	r3, #1
 800d898:	d007      	beq.n	800d8aa <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	685b      	ldr	r3, [r3, #4]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800d89e:	2b02      	cmp	r3, #2
 800d8a0:	d003      	beq.n	800d8aa <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	2b04      	cmp	r3, #4
 800d8a8:	d10f      	bne.n	800d8ca <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f043 0201 	orr.w	r2, r3, #1
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6858      	ldr	r0, [r3, #4]
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f103 0108 	add.w	r1, r3, #8
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	330c      	adds	r3, #12
 800d8c4:	461a      	mov	r2, r3
 800d8c6:	f000 fb05 	bl	800ded4 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800d8ca:	f000 fb4d 	bl	800df68 <FLASH_OB_GetRDP>
 800d8ce:	4602      	mov	r2, r0
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800d8d4:	f000 fb62 	bl	800df9c <FLASH_OB_GetUser>
 800d8d8:	4602      	mov	r2, r0
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	619a      	str	r2, [r3, #24]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	69db      	ldr	r3, [r3, #28]
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	d003      	beq.n	800d8ee <HAL_FLASHEx_OBGetConfig+0x72>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	69db      	ldr	r3, [r3, #28]
 800d8ea:	2b02      	cmp	r3, #2
 800d8ec:	d110      	bne.n	800d910 <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if(pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f043 0208 	orr.w	r2, r3, #8
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f103 001c 	add.w	r0, r3, #28
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f103 0120 	add.w	r1, r3, #32
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	3324      	adds	r3, #36	@ 0x24
 800d90a:	461a      	mov	r2, r3
 800d90c:	f000 fb5a 	bl	800dfc4 <FLASH_OB_GetPCROP>
  }
}
 800d910:	bf00      	nop
 800d912:	3708      	adds	r7, #8
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800d918:	b480      	push	{r7}
 800d91a:	b083      	sub	sp, #12
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f003 0301 	and.w	r3, r3, #1
 800d926:	2b00      	cmp	r3, #0
 800d928:	d005      	beq.n	800d936 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800d92a:	4b0e      	ldr	r3, [pc, #56]	@ (800d964 <FLASH_MassErase+0x4c>)
 800d92c:	695b      	ldr	r3, [r3, #20]
 800d92e:	4a0d      	ldr	r2, [pc, #52]	@ (800d964 <FLASH_MassErase+0x4c>)
 800d930:	f043 0304 	orr.w	r3, r3, #4
 800d934:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f003 0302 	and.w	r3, r3, #2
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d005      	beq.n	800d94c <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800d940:	4b08      	ldr	r3, [pc, #32]	@ (800d964 <FLASH_MassErase+0x4c>)
 800d942:	695b      	ldr	r3, [r3, #20]
 800d944:	4a07      	ldr	r2, [pc, #28]	@ (800d964 <FLASH_MassErase+0x4c>)
 800d946:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d94a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d94c:	4b05      	ldr	r3, [pc, #20]	@ (800d964 <FLASH_MassErase+0x4c>)
 800d94e:	695b      	ldr	r3, [r3, #20]
 800d950:	4a04      	ldr	r2, [pc, #16]	@ (800d964 <FLASH_MassErase+0x4c>)
 800d952:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d956:	6153      	str	r3, [r2, #20]
}
 800d958:	bf00      	nop
 800d95a:	370c      	adds	r7, #12
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr
 800d964:	40022000 	.word	0x40022000

0800d968 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800d968:	b480      	push	{r7}
 800d96a:	b083      	sub	sp, #12
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	f003 0301 	and.w	r3, r3, #1
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d006      	beq.n	800d98a <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800d97c:	4b14      	ldr	r3, [pc, #80]	@ (800d9d0 <FLASH_PageErase+0x68>)
 800d97e:	695b      	ldr	r3, [r3, #20]
 800d980:	4a13      	ldr	r2, [pc, #76]	@ (800d9d0 <FLASH_PageErase+0x68>)
 800d982:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d986:	6153      	str	r3, [r2, #20]
 800d988:	e005      	b.n	800d996 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800d98a:	4b11      	ldr	r3, [pc, #68]	@ (800d9d0 <FLASH_PageErase+0x68>)
 800d98c:	695b      	ldr	r3, [r3, #20]
 800d98e:	4a10      	ldr	r2, [pc, #64]	@ (800d9d0 <FLASH_PageErase+0x68>)
 800d990:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d994:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800d996:	4b0e      	ldr	r3, [pc, #56]	@ (800d9d0 <FLASH_PageErase+0x68>)
 800d998:	695b      	ldr	r3, [r3, #20]
 800d99a:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	00db      	lsls	r3, r3, #3
 800d9a2:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 800d9a6:	490a      	ldr	r1, [pc, #40]	@ (800d9d0 <FLASH_PageErase+0x68>)
 800d9a8:	4313      	orrs	r3, r2
 800d9aa:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800d9ac:	4b08      	ldr	r3, [pc, #32]	@ (800d9d0 <FLASH_PageErase+0x68>)
 800d9ae:	695b      	ldr	r3, [r3, #20]
 800d9b0:	4a07      	ldr	r2, [pc, #28]	@ (800d9d0 <FLASH_PageErase+0x68>)
 800d9b2:	f043 0302 	orr.w	r3, r3, #2
 800d9b6:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d9b8:	4b05      	ldr	r3, [pc, #20]	@ (800d9d0 <FLASH_PageErase+0x68>)
 800d9ba:	695b      	ldr	r3, [r3, #20]
 800d9bc:	4a04      	ldr	r2, [pc, #16]	@ (800d9d0 <FLASH_PageErase+0x68>)
 800d9be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d9c2:	6153      	str	r3, [r2, #20]
}
 800d9c4:	bf00      	nop
 800d9c6:	370c      	adds	r7, #12
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr
 800d9d0:	40022000 	.word	0x40022000

0800d9d4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b083      	sub	sp, #12
 800d9d8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800d9da:	4b21      	ldr	r3, [pc, #132]	@ (800da60 <FLASH_FlushCaches+0x8c>)
 800d9dc:	7f1b      	ldrb	r3, [r3, #28]
 800d9de:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800d9e0:	79fb      	ldrb	r3, [r7, #7]
 800d9e2:	2b01      	cmp	r3, #1
 800d9e4:	d002      	beq.n	800d9ec <FLASH_FlushCaches+0x18>
 800d9e6:	79fb      	ldrb	r3, [r7, #7]
 800d9e8:	2b03      	cmp	r3, #3
 800d9ea:	d117      	bne.n	800da1c <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800d9ec:	4b1d      	ldr	r3, [pc, #116]	@ (800da64 <FLASH_FlushCaches+0x90>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4a1c      	ldr	r2, [pc, #112]	@ (800da64 <FLASH_FlushCaches+0x90>)
 800d9f2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d9f6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800d9f8:	4b1a      	ldr	r3, [pc, #104]	@ (800da64 <FLASH_FlushCaches+0x90>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	4a19      	ldr	r2, [pc, #100]	@ (800da64 <FLASH_FlushCaches+0x90>)
 800d9fe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800da02:	6013      	str	r3, [r2, #0]
 800da04:	4b17      	ldr	r3, [pc, #92]	@ (800da64 <FLASH_FlushCaches+0x90>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	4a16      	ldr	r2, [pc, #88]	@ (800da64 <FLASH_FlushCaches+0x90>)
 800da0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800da0e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800da10:	4b14      	ldr	r3, [pc, #80]	@ (800da64 <FLASH_FlushCaches+0x90>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a13      	ldr	r2, [pc, #76]	@ (800da64 <FLASH_FlushCaches+0x90>)
 800da16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800da1a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800da1c:	79fb      	ldrb	r3, [r7, #7]
 800da1e:	2b02      	cmp	r3, #2
 800da20:	d002      	beq.n	800da28 <FLASH_FlushCaches+0x54>
 800da22:	79fb      	ldrb	r3, [r7, #7]
 800da24:	2b03      	cmp	r3, #3
 800da26:	d111      	bne.n	800da4c <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800da28:	4b0e      	ldr	r3, [pc, #56]	@ (800da64 <FLASH_FlushCaches+0x90>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4a0d      	ldr	r2, [pc, #52]	@ (800da64 <FLASH_FlushCaches+0x90>)
 800da2e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800da32:	6013      	str	r3, [r2, #0]
 800da34:	4b0b      	ldr	r3, [pc, #44]	@ (800da64 <FLASH_FlushCaches+0x90>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	4a0a      	ldr	r2, [pc, #40]	@ (800da64 <FLASH_FlushCaches+0x90>)
 800da3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800da3e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800da40:	4b08      	ldr	r3, [pc, #32]	@ (800da64 <FLASH_FlushCaches+0x90>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	4a07      	ldr	r2, [pc, #28]	@ (800da64 <FLASH_FlushCaches+0x90>)
 800da46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800da4a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800da4c:	4b04      	ldr	r3, [pc, #16]	@ (800da60 <FLASH_FlushCaches+0x8c>)
 800da4e:	2200      	movs	r2, #0
 800da50:	771a      	strb	r2, [r3, #28]
}
 800da52:	bf00      	nop
 800da54:	370c      	adds	r7, #12
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr
 800da5e:	bf00      	nop
 800da60:	2000027c 	.word	0x2000027c
 800da64:	40022000 	.word	0x40022000

0800da68 <FLASH_OB_WRPConfig>:
  *          This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1)
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b086      	sub	sp, #24
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	60b9      	str	r1, [r7, #8]
 800da72:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800da74:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800da78:	f7ff fd44 	bl	800d504 <FLASH_WaitForLastOperation>
 800da7c:	4603      	mov	r3, r0
 800da7e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800da80:	7dfb      	ldrb	r3, [r7, #23]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d14c      	bne.n	800db20 <FLASH_OB_WRPConfig+0xb8>
  {
    /* Configure the write protected area */
    if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d10b      	bne.n	800daa4 <FLASH_OB_WRPConfig+0x3c>
    {
      MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
 800da8c:	4b27      	ldr	r3, [pc, #156]	@ (800db2c <FLASH_OB_WRPConfig+0xc4>)
 800da8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da90:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	0419      	lsls	r1, r3, #16
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	430b      	orrs	r3, r1
 800da9c:	4923      	ldr	r1, [pc, #140]	@ (800db2c <FLASH_OB_WRPConfig+0xc4>)
 800da9e:	4313      	orrs	r3, r2
 800daa0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800daa2:	e02b      	b.n	800dafc <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	2b01      	cmp	r3, #1
 800daa8:	d10b      	bne.n	800dac2 <FLASH_OB_WRPConfig+0x5a>
    {
      MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
 800daaa:	4b20      	ldr	r3, [pc, #128]	@ (800db2c <FLASH_OB_WRPConfig+0xc4>)
 800daac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800daae:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	0419      	lsls	r1, r3, #16
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	430b      	orrs	r3, r1
 800daba:	491c      	ldr	r1, [pc, #112]	@ (800db2c <FLASH_OB_WRPConfig+0xc4>)
 800dabc:	4313      	orrs	r3, r2
 800dabe:	630b      	str	r3, [r1, #48]	@ 0x30
 800dac0:	e01c      	b.n	800dafc <FLASH_OB_WRPConfig+0x94>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	2b02      	cmp	r3, #2
 800dac6:	d10b      	bne.n	800dae0 <FLASH_OB_WRPConfig+0x78>
    {
      MODIFY_REG(FLASH->WRP2AR, (FLASH_WRP2AR_WRP2A_STRT | FLASH_WRP2AR_WRP2A_END),
 800dac8:	4b18      	ldr	r3, [pc, #96]	@ (800db2c <FLASH_OB_WRPConfig+0xc4>)
 800daca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dacc:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	0419      	lsls	r1, r3, #16
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	430b      	orrs	r3, r1
 800dad8:	4914      	ldr	r1, [pc, #80]	@ (800db2c <FLASH_OB_WRPConfig+0xc4>)
 800dada:	4313      	orrs	r3, r2
 800dadc:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800dade:	e00d      	b.n	800dafc <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2b04      	cmp	r3, #4
 800dae4:	d10a      	bne.n	800dafc <FLASH_OB_WRPConfig+0x94>
    {
      MODIFY_REG(FLASH->WRP2BR, (FLASH_WRP2BR_WRP2B_STRT | FLASH_WRP2BR_WRP2B_END),
 800dae6:	4b11      	ldr	r3, [pc, #68]	@ (800db2c <FLASH_OB_WRPConfig+0xc4>)
 800dae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800daea:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	0419      	lsls	r1, r3, #16
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	430b      	orrs	r3, r1
 800daf6:	490d      	ldr	r1, [pc, #52]	@ (800db2c <FLASH_OB_WRPConfig+0xc4>)
 800daf8:	4313      	orrs	r3, r2
 800dafa:	650b      	str	r3, [r1, #80]	@ 0x50
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800dafc:	4b0b      	ldr	r3, [pc, #44]	@ (800db2c <FLASH_OB_WRPConfig+0xc4>)
 800dafe:	695b      	ldr	r3, [r3, #20]
 800db00:	4a0a      	ldr	r2, [pc, #40]	@ (800db2c <FLASH_OB_WRPConfig+0xc4>)
 800db02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800db06:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800db08:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800db0c:	f7ff fcfa 	bl	800d504 <FLASH_WaitForLastOperation>
 800db10:	4603      	mov	r3, r0
 800db12:	75fb      	strb	r3, [r7, #23]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800db14:	4b05      	ldr	r3, [pc, #20]	@ (800db2c <FLASH_OB_WRPConfig+0xc4>)
 800db16:	695b      	ldr	r3, [r3, #20]
 800db18:	4a04      	ldr	r2, [pc, #16]	@ (800db2c <FLASH_OB_WRPConfig+0xc4>)
 800db1a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800db1e:	6153      	str	r3, [r2, #20]
  }

  return status;
 800db20:	7dfb      	ldrb	r3, [r7, #23]
}
 800db22:	4618      	mov	r0, r3
 800db24:	3718      	adds	r7, #24
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
 800db2a:	bf00      	nop
 800db2c:	40022000 	.word	0x40022000

0800db30 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b084      	sub	sp, #16
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800db38:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800db3c:	f7ff fce2 	bl	800d504 <FLASH_WaitForLastOperation>
 800db40:	4603      	mov	r3, r0
 800db42:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800db44:	7bfb      	ldrb	r3, [r7, #15]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d119      	bne.n	800db7e <FLASH_OB_RDPConfig+0x4e>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 800db4a:	4b0f      	ldr	r3, [pc, #60]	@ (800db88 <FLASH_OB_RDPConfig+0x58>)
 800db4c:	6a1b      	ldr	r3, [r3, #32]
 800db4e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800db52:	490d      	ldr	r1, [pc, #52]	@ (800db88 <FLASH_OB_RDPConfig+0x58>)
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	4313      	orrs	r3, r2
 800db58:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800db5a:	4b0b      	ldr	r3, [pc, #44]	@ (800db88 <FLASH_OB_RDPConfig+0x58>)
 800db5c:	695b      	ldr	r3, [r3, #20]
 800db5e:	4a0a      	ldr	r2, [pc, #40]	@ (800db88 <FLASH_OB_RDPConfig+0x58>)
 800db60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800db64:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800db66:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800db6a:	f7ff fccb 	bl	800d504 <FLASH_WaitForLastOperation>
 800db6e:	4603      	mov	r3, r0
 800db70:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800db72:	4b05      	ldr	r3, [pc, #20]	@ (800db88 <FLASH_OB_RDPConfig+0x58>)
 800db74:	695b      	ldr	r3, [r3, #20]
 800db76:	4a04      	ldr	r2, [pc, #16]	@ (800db88 <FLASH_OB_RDPConfig+0x58>)
 800db78:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800db7c:	6153      	str	r3, [r2, #20]
  }

  return status;
 800db7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db80:	4618      	mov	r0, r3
 800db82:	3710      	adds	r7, #16
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}
 800db88:	40022000 	.word	0x40022000

0800db8c <FLASH_OB_UserConfig>:
  *         DUALBANK(Bit21), nBOOT1(Bit23), SRAM2_PE(Bit24) and SRAM2_RST(Bit25).
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b086      	sub	sp, #24
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 800db96:	2300      	movs	r3, #0
 800db98:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 800db9a:	2300      	movs	r3, #0
 800db9c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800db9e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800dba2:	f7ff fcaf 	bl	800d504 <FLASH_WaitForLastOperation>
 800dba6:	4603      	mov	r3, r0
 800dba8:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800dbaa:	7bfb      	ldrb	r3, [r7, #15]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	f040 80de 	bne.w	800dd6e <FLASH_OB_UserConfig+0x1e2>
  {
    if((UserType & OB_USER_BOR_LEV) != 0U)
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f003 0301 	and.w	r3, r3, #1
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d009      	beq.n	800dbd0 <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dbc2:	697a      	ldr	r2, [r7, #20]
 800dbc4:	4313      	orrs	r3, r2
 800dbc6:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800dbce:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STOP) != 0U)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f003 0302 	and.w	r3, r3, #2
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d009      	beq.n	800dbee <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800dbe0:	697a      	ldr	r2, [r7, #20]
 800dbe2:	4313      	orrs	r3, r2
 800dbe4:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800dbec:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STDBY) != 0U)
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f003 0304 	and.w	r3, r3, #4
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d009      	beq.n	800dc0c <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dbfe:	697a      	ldr	r2, [r7, #20]
 800dc00:	4313      	orrs	r3, r2
 800dc02:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800dc0a:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_SHDW) != 0U)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d009      	beq.n	800dc2a <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dc1c:	697a      	ldr	r2, [r7, #20]
 800dc1e:	4313      	orrs	r3, r2
 800dc20:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dc28:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_SW) != 0U)
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f003 0308 	and.w	r3, r3, #8
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d009      	beq.n	800dc48 <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dc3a:	697a      	ldr	r2, [r7, #20]
 800dc3c:	4313      	orrs	r3, r2
 800dc3e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dc46:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STOP) != 0U)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f003 0310 	and.w	r3, r3, #16
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d009      	beq.n	800dc66 <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dc58:	697a      	ldr	r2, [r7, #20]
 800dc5a:	4313      	orrs	r3, r2
 800dc5c:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dc64:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STDBY) != 0U)
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f003 0320 	and.w	r3, r3, #32
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d009      	beq.n	800dc84 <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800dc76:	697a      	ldr	r2, [r7, #20]
 800dc78:	4313      	orrs	r3, r2
 800dc7a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800dc82:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_WWDG_SW) != 0U)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d009      	beq.n	800dca2 <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800dc94:	697a      	ldr	r2, [r7, #20]
 800dc96:	4313      	orrs	r3, r2
 800dc98:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dca0:	613b      	str	r3, [r7, #16]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_BFB2) != 0U)
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d009      	beq.n	800dcc0 <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dcb2:	697a      	ldr	r2, [r7, #20]
 800dcb4:	4313      	orrs	r3, r2
 800dcb6:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dcbe:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_DUALBANK) != 0U)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d009      	beq.n	800dcde <FLASH_OB_UserConfig+0x152>
#else
      /* DUALBANK option byte should be modified */
      assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));

      /* Set value and mask for DUALBANK option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dcd0:	697a      	ldr	r2, [r7, #20]
 800dcd2:	4313      	orrs	r3, r2
 800dcd4:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_DUALBANK;
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800dcdc:	613b      	str	r3, [r7, #16]
#endif
    }
#endif

    if((UserType & OB_USER_nBOOT1) != 0U)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d009      	beq.n	800dcfc <FLASH_OB_UserConfig+0x170>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dcee:	697a      	ldr	r2, [r7, #20]
 800dcf0:	4313      	orrs	r3, r2
 800dcf2:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800dcfa:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_PE) != 0U)
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d009      	beq.n	800dd1a <FLASH_OB_UserConfig+0x18e>
    {
      /* SRAM2_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_PARITY(UserConfig & FLASH_OPTR_SRAM2_PE));

      /* Set value and mask for SRAM2_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_PE);
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dd0c:	697a      	ldr	r2, [r7, #20]
 800dd0e:	4313      	orrs	r3, r2
 800dd10:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_PE;
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dd18:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_RST) != 0U)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d009      	beq.n	800dd38 <FLASH_OB_UserConfig+0x1ac>
    {
      /* SRAM2_RST option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));

      /* Set value and mask for SRAM2_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dd2a:	697a      	ldr	r2, [r7, #20]
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800dd36:	613b      	str	r3, [r7, #16]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
    }
#endif

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 800dd38:	4b0f      	ldr	r3, [pc, #60]	@ (800dd78 <FLASH_OB_UserConfig+0x1ec>)
 800dd3a:	6a1a      	ldr	r2, [r3, #32]
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	43db      	mvns	r3, r3
 800dd40:	401a      	ands	r2, r3
 800dd42:	490d      	ldr	r1, [pc, #52]	@ (800dd78 <FLASH_OB_UserConfig+0x1ec>)
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	4313      	orrs	r3, r2
 800dd48:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800dd4a:	4b0b      	ldr	r3, [pc, #44]	@ (800dd78 <FLASH_OB_UserConfig+0x1ec>)
 800dd4c:	695b      	ldr	r3, [r3, #20]
 800dd4e:	4a0a      	ldr	r2, [pc, #40]	@ (800dd78 <FLASH_OB_UserConfig+0x1ec>)
 800dd50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dd54:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800dd56:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800dd5a:	f7ff fbd3 	bl	800d504 <FLASH_WaitForLastOperation>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800dd62:	4b05      	ldr	r3, [pc, #20]	@ (800dd78 <FLASH_OB_UserConfig+0x1ec>)
 800dd64:	695b      	ldr	r3, [r3, #20]
 800dd66:	4a04      	ldr	r2, [pc, #16]	@ (800dd78 <FLASH_OB_UserConfig+0x1ec>)
 800dd68:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800dd6c:	6153      	str	r3, [r2, #20]
  }

  return status;
 800dd6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3718      	adds	r7, #24
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}
 800dd78:	40022000 	.word	0x40022000

0800dd7c <FLASH_OB_PCROPConfig>:
  *          This parameter can be an address between PCROPStartAddr and end of the bank
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b088      	sub	sp, #32
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	60f8      	str	r0, [r7, #12]
 800dd84:	60b9      	str	r1, [r7, #8]
 800dd86:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800dd88:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800dd8c:	f7ff fbba 	bl	800d504 <FLASH_WaitForLastOperation>
 800dd90:	4603      	mov	r3, r0
 800dd92:	77fb      	strb	r3, [r7, #31]

  if(status == HAL_OK)
 800dd94:	7ffb      	ldrb	r3, [r7, #31]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	f040 808c 	bne.w	800deb4 <FLASH_OB_PCROPConfig+0x138>
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800dd9c:	4b48      	ldr	r3, [pc, #288]	@ (800dec0 <FLASH_OB_PCROPConfig+0x144>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d115      	bne.n	800ddd4 <FLASH_OB_PCROPConfig+0x58>
    {
      bank1_addr = FLASH_BASE;
 800dda8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ddac:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800ddae:	4b45      	ldr	r3, [pc, #276]	@ (800dec4 <FLASH_OB_PCROPConfig+0x148>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d008      	beq.n	800ddce <FLASH_OB_PCROPConfig+0x52>
 800ddbc:	4b41      	ldr	r3, [pc, #260]	@ (800dec4 <FLASH_OB_PCROPConfig+0x148>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	029b      	lsls	r3, r3, #10
 800ddc2:	085a      	lsrs	r2, r3, #1
 800ddc4:	4b40      	ldr	r3, [pc, #256]	@ (800dec8 <FLASH_OB_PCROPConfig+0x14c>)
 800ddc6:	4013      	ands	r3, r2
 800ddc8:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800ddcc:	e000      	b.n	800ddd0 <FLASH_OB_PCROPConfig+0x54>
 800ddce:	4b3f      	ldr	r3, [pc, #252]	@ (800decc <FLASH_OB_PCROPConfig+0x150>)
 800ddd0:	617b      	str	r3, [r7, #20]
 800ddd2:	e014      	b.n	800ddfe <FLASH_OB_PCROPConfig+0x82>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800ddd4:	4b3b      	ldr	r3, [pc, #236]	@ (800dec4 <FLASH_OB_PCROPConfig+0x148>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d008      	beq.n	800ddf4 <FLASH_OB_PCROPConfig+0x78>
 800dde2:	4b38      	ldr	r3, [pc, #224]	@ (800dec4 <FLASH_OB_PCROPConfig+0x148>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	029b      	lsls	r3, r3, #10
 800dde8:	085a      	lsrs	r2, r3, #1
 800ddea:	4b37      	ldr	r3, [pc, #220]	@ (800dec8 <FLASH_OB_PCROPConfig+0x14c>)
 800ddec:	4013      	ands	r3, r2
 800ddee:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800ddf2:	e000      	b.n	800ddf6 <FLASH_OB_PCROPConfig+0x7a>
 800ddf4:	4b35      	ldr	r3, [pc, #212]	@ (800decc <FLASH_OB_PCROPConfig+0x150>)
 800ddf6:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 800ddf8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ddfc:	617b      	str	r3, [r7, #20]
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	f003 0303 	and.w	r3, r3, #3
 800de04:	2b01      	cmp	r3, #1
 800de06:	d11a      	bne.n	800de3e <FLASH_OB_PCROPConfig+0xc2>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 800de08:	68ba      	ldr	r2, [r7, #8]
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	1ad3      	subs	r3, r2, r3
 800de0e:	08db      	lsrs	r3, r3, #3
 800de10:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 800de12:	4b2f      	ldr	r3, [pc, #188]	@ (800ded0 <FLASH_OB_PCROPConfig+0x154>)
 800de14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de16:	0c1b      	lsrs	r3, r3, #16
 800de18:	041b      	lsls	r3, r3, #16
 800de1a:	492d      	ldr	r1, [pc, #180]	@ (800ded0 <FLASH_OB_PCROPConfig+0x154>)
 800de1c:	693a      	ldr	r2, [r7, #16]
 800de1e:	4313      	orrs	r3, r2
 800de20:	624b      	str	r3, [r1, #36]	@ 0x24

        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 800de22:	687a      	ldr	r2, [r7, #4]
 800de24:	69bb      	ldr	r3, [r7, #24]
 800de26:	1ad3      	subs	r3, r2, r3
 800de28:	08db      	lsrs	r3, r3, #3
 800de2a:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 800de2c:	4b28      	ldr	r3, [pc, #160]	@ (800ded0 <FLASH_OB_PCROPConfig+0x154>)
 800de2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de30:	0c1b      	lsrs	r3, r3, #16
 800de32:	041b      	lsls	r3, r3, #16
 800de34:	4926      	ldr	r1, [pc, #152]	@ (800ded0 <FLASH_OB_PCROPConfig+0x154>)
 800de36:	693a      	ldr	r2, [r7, #16]
 800de38:	4313      	orrs	r3, r2
 800de3a:	628b      	str	r3, [r1, #40]	@ 0x28
 800de3c:	e01e      	b.n	800de7c <FLASH_OB_PCROPConfig+0x100>
      }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	f003 0303 	and.w	r3, r3, #3
 800de44:	2b02      	cmp	r3, #2
 800de46:	d119      	bne.n	800de7c <FLASH_OB_PCROPConfig+0x100>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 800de48:	68ba      	ldr	r2, [r7, #8]
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	1ad3      	subs	r3, r2, r3
 800de4e:	08db      	lsrs	r3, r3, #3
 800de50:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 800de52:	4b1f      	ldr	r3, [pc, #124]	@ (800ded0 <FLASH_OB_PCROPConfig+0x154>)
 800de54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de56:	0c1b      	lsrs	r3, r3, #16
 800de58:	041b      	lsls	r3, r3, #16
 800de5a:	491d      	ldr	r1, [pc, #116]	@ (800ded0 <FLASH_OB_PCROPConfig+0x154>)
 800de5c:	693a      	ldr	r2, [r7, #16]
 800de5e:	4313      	orrs	r3, r2
 800de60:	644b      	str	r3, [r1, #68]	@ 0x44

        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 800de62:	687a      	ldr	r2, [r7, #4]
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	1ad3      	subs	r3, r2, r3
 800de68:	08db      	lsrs	r3, r3, #3
 800de6a:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 800de6c:	4b18      	ldr	r3, [pc, #96]	@ (800ded0 <FLASH_OB_PCROPConfig+0x154>)
 800de6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800de70:	0c1b      	lsrs	r3, r3, #16
 800de72:	041b      	lsls	r3, r3, #16
 800de74:	4916      	ldr	r1, [pc, #88]	@ (800ded0 <FLASH_OB_PCROPConfig+0x154>)
 800de76:	693a      	ldr	r2, [r7, #16]
 800de78:	4313      	orrs	r3, r2
 800de7a:	648b      	str	r3, [r1, #72]	@ 0x48
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 800de7c:	4b14      	ldr	r3, [pc, #80]	@ (800ded0 <FLASH_OB_PCROPConfig+0x154>)
 800de7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de80:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800de8a:	4911      	ldr	r1, [pc, #68]	@ (800ded0 <FLASH_OB_PCROPConfig+0x154>)
 800de8c:	4313      	orrs	r3, r2
 800de8e:	628b      	str	r3, [r1, #40]	@ 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800de90:	4b0f      	ldr	r3, [pc, #60]	@ (800ded0 <FLASH_OB_PCROPConfig+0x154>)
 800de92:	695b      	ldr	r3, [r3, #20]
 800de94:	4a0e      	ldr	r2, [pc, #56]	@ (800ded0 <FLASH_OB_PCROPConfig+0x154>)
 800de96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800de9a:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800de9c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800dea0:	f7ff fb30 	bl	800d504 <FLASH_WaitForLastOperation>
 800dea4:	4603      	mov	r3, r0
 800dea6:	77fb      	strb	r3, [r7, #31]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800dea8:	4b09      	ldr	r3, [pc, #36]	@ (800ded0 <FLASH_OB_PCROPConfig+0x154>)
 800deaa:	695b      	ldr	r3, [r3, #20]
 800deac:	4a08      	ldr	r2, [pc, #32]	@ (800ded0 <FLASH_OB_PCROPConfig+0x154>)
 800deae:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800deb2:	6153      	str	r3, [r2, #20]
  }

  return status;
 800deb4:	7ffb      	ldrb	r3, [r7, #31]
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3720      	adds	r7, #32
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	40010000 	.word	0x40010000
 800dec4:	1fff75e0 	.word	0x1fff75e0
 800dec8:	01fffe00 	.word	0x01fffe00
 800decc:	08080000 	.word	0x08080000
 800ded0:	40022000 	.word	0x40022000

0800ded4 <FLASH_OB_GetWRP>:
  *                        the write protected area
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t * WRPStartOffset, uint32_t * WRDPEndOffset)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b085      	sub	sp, #20
 800ded8:	af00      	add	r7, sp, #0
 800deda:	60f8      	str	r0, [r7, #12]
 800dedc:	60b9      	str	r1, [r7, #8]
 800dede:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d10b      	bne.n	800defe <FLASH_OB_GetWRP+0x2a>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 800dee6:	4b1f      	ldr	r3, [pc, #124]	@ (800df64 <FLASH_OB_GetWRP+0x90>)
 800dee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800deea:	b2da      	uxtb	r2, r3
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 800def0:	4b1c      	ldr	r3, [pc, #112]	@ (800df64 <FLASH_OB_GetWRP+0x90>)
 800def2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800def4:	0c1b      	lsrs	r3, r3, #16
 800def6:	b2da      	uxtb	r2, r3
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 800defc:	e02b      	b.n	800df56 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2b01      	cmp	r3, #1
 800df02:	d10b      	bne.n	800df1c <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 800df04:	4b17      	ldr	r3, [pc, #92]	@ (800df64 <FLASH_OB_GetWRP+0x90>)
 800df06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df08:	b2da      	uxtb	r2, r3
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 800df0e:	4b15      	ldr	r3, [pc, #84]	@ (800df64 <FLASH_OB_GetWRP+0x90>)
 800df10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df12:	0c1b      	lsrs	r3, r3, #16
 800df14:	b2da      	uxtb	r2, r3
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	601a      	str	r2, [r3, #0]
}
 800df1a:	e01c      	b.n	800df56 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	2b02      	cmp	r3, #2
 800df20:	d10b      	bne.n	800df3a <FLASH_OB_GetWRP+0x66>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 800df22:	4b10      	ldr	r3, [pc, #64]	@ (800df64 <FLASH_OB_GetWRP+0x90>)
 800df24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800df26:	b2da      	uxtb	r2, r3
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 800df2c:	4b0d      	ldr	r3, [pc, #52]	@ (800df64 <FLASH_OB_GetWRP+0x90>)
 800df2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800df30:	0c1b      	lsrs	r3, r3, #16
 800df32:	b2da      	uxtb	r2, r3
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	601a      	str	r2, [r3, #0]
}
 800df38:	e00d      	b.n	800df56 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	2b04      	cmp	r3, #4
 800df3e:	d10a      	bne.n	800df56 <FLASH_OB_GetWRP+0x82>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 800df40:	4b08      	ldr	r3, [pc, #32]	@ (800df64 <FLASH_OB_GetWRP+0x90>)
 800df42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df44:	b2da      	uxtb	r2, r3
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 800df4a:	4b06      	ldr	r3, [pc, #24]	@ (800df64 <FLASH_OB_GetWRP+0x90>)
 800df4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df4e:	0c1b      	lsrs	r3, r3, #16
 800df50:	b2da      	uxtb	r2, r3
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	601a      	str	r2, [r3, #0]
}
 800df56:	bf00      	nop
 800df58:	3714      	adds	r7, #20
 800df5a:	46bd      	mov	sp, r7
 800df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df60:	4770      	bx	lr
 800df62:	bf00      	nop
 800df64:	40022000 	.word	0x40022000

0800df68 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 800df68:	b480      	push	{r7}
 800df6a:	b083      	sub	sp, #12
 800df6c:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800df6e:	4b0a      	ldr	r3, [pc, #40]	@ (800df98 <FLASH_OB_GetRDP+0x30>)
 800df70:	6a1b      	ldr	r3, [r3, #32]
 800df72:	b2db      	uxtb	r3, r3
 800df74:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2baa      	cmp	r3, #170	@ 0xaa
 800df7a:	d004      	beq.n	800df86 <FLASH_OB_GetRDP+0x1e>
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2bcc      	cmp	r3, #204	@ 0xcc
 800df80:	d001      	beq.n	800df86 <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 800df82:	23bb      	movs	r3, #187	@ 0xbb
 800df84:	e002      	b.n	800df8c <FLASH_OB_GetRDP+0x24>
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 800df86:	4b04      	ldr	r3, [pc, #16]	@ (800df98 <FLASH_OB_GetRDP+0x30>)
 800df88:	6a1b      	ldr	r3, [r3, #32]
 800df8a:	b2db      	uxtb	r3, r3
  }
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	370c      	adds	r7, #12
 800df90:	46bd      	mov	sp, r7
 800df92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df96:	4770      	bx	lr
 800df98:	40022000 	.word	0x40022000

0800df9c <FLASH_OB_GetUser>:
  *         BOR_LEV(Bit8-10), nRST_STOP(Bit12), nRST_STDBY(Bit13), nRST_SHDW(Bit14),
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27).
  */
static uint32_t FLASH_OB_GetUser(void)
{
 800df9c:	b480      	push	{r7}
 800df9e:	b083      	sub	sp, #12
 800dfa0:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 800dfa2:	4b07      	ldr	r3, [pc, #28]	@ (800dfc0 <FLASH_OB_GetUser+0x24>)
 800dfa4:	6a1b      	ldr	r3, [r3, #32]
 800dfa6:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800dfae:	607b      	str	r3, [r7, #4]

  return user_config;
 800dfb0:	687b      	ldr	r3, [r7, #4]
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	370c      	adds	r7, #12
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbc:	4770      	bx	lr
 800dfbe:	bf00      	nop
 800dfc0:	40022000 	.word	0x40022000

0800dfc4 <FLASH_OB_GetPCROP>:
  *                       the Proprietary code readout protection
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t * PCROPConfig, uint32_t * PCROPStartAddr, uint32_t * PCROPEndAddr)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b089      	sub	sp, #36	@ 0x24
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	607a      	str	r2, [r7, #4]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800dfd0:	4b3b      	ldr	r3, [pc, #236]	@ (800e0c0 <FLASH_OB_GetPCROP+0xfc>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d115      	bne.n	800e008 <FLASH_OB_GetPCROP+0x44>
  {
    bank1_addr = FLASH_BASE;
 800dfdc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dfe0:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800dfe2:	4b38      	ldr	r3, [pc, #224]	@ (800e0c4 <FLASH_OB_GetPCROP+0x100>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	b29b      	uxth	r3, r3
 800dfe8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dfec:	4293      	cmp	r3, r2
 800dfee:	d008      	beq.n	800e002 <FLASH_OB_GetPCROP+0x3e>
 800dff0:	4b34      	ldr	r3, [pc, #208]	@ (800e0c4 <FLASH_OB_GetPCROP+0x100>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	029b      	lsls	r3, r3, #10
 800dff6:	085a      	lsrs	r2, r3, #1
 800dff8:	4b33      	ldr	r3, [pc, #204]	@ (800e0c8 <FLASH_OB_GetPCROP+0x104>)
 800dffa:	4013      	ands	r3, r2
 800dffc:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800e000:	e000      	b.n	800e004 <FLASH_OB_GetPCROP+0x40>
 800e002:	4b32      	ldr	r3, [pc, #200]	@ (800e0cc <FLASH_OB_GetPCROP+0x108>)
 800e004:	61bb      	str	r3, [r7, #24]
 800e006:	e014      	b.n	800e032 <FLASH_OB_GetPCROP+0x6e>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800e008:	4b2e      	ldr	r3, [pc, #184]	@ (800e0c4 <FLASH_OB_GetPCROP+0x100>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e012:	4293      	cmp	r3, r2
 800e014:	d008      	beq.n	800e028 <FLASH_OB_GetPCROP+0x64>
 800e016:	4b2b      	ldr	r3, [pc, #172]	@ (800e0c4 <FLASH_OB_GetPCROP+0x100>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	029b      	lsls	r3, r3, #10
 800e01c:	085a      	lsrs	r2, r3, #1
 800e01e:	4b2a      	ldr	r3, [pc, #168]	@ (800e0c8 <FLASH_OB_GetPCROP+0x104>)
 800e020:	4013      	ands	r3, r2
 800e022:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800e026:	e000      	b.n	800e02a <FLASH_OB_GetPCROP+0x66>
 800e028:	4b28      	ldr	r3, [pc, #160]	@ (800e0cc <FLASH_OB_GetPCROP+0x108>)
 800e02a:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 800e02c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e030:	61bb      	str	r3, [r7, #24]
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	f003 0303 	and.w	r3, r3, #3
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	d115      	bne.n	800e06a <FLASH_OB_GetPCROP+0xa6>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 800e03e:	4b24      	ldr	r3, [pc, #144]	@ (800e0d0 <FLASH_OB_GetPCROP+0x10c>)
 800e040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e042:	b29b      	uxth	r3, r3
 800e044:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	00da      	lsls	r2, r3, #3
 800e04a:	69fb      	ldr	r3, [r7, #28]
 800e04c:	441a      	add	r2, r3
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 800e052:	4b1f      	ldr	r3, [pc, #124]	@ (800e0d0 <FLASH_OB_GetPCROP+0x10c>)
 800e054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e056:	b29b      	uxth	r3, r3
 800e058:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	00da      	lsls	r2, r3, #3
 800e05e:	69fb      	ldr	r3, [r7, #28]
 800e060:	4413      	add	r3, r2
 800e062:	1dda      	adds	r2, r3, #7
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	601a      	str	r2, [r3, #0]
 800e068:	e01a      	b.n	800e0a0 <FLASH_OB_GetPCROP+0xdc>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f003 0303 	and.w	r3, r3, #3
 800e072:	2b02      	cmp	r3, #2
 800e074:	d114      	bne.n	800e0a0 <FLASH_OB_GetPCROP+0xdc>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 800e076:	4b16      	ldr	r3, [pc, #88]	@ (800e0d0 <FLASH_OB_GetPCROP+0x10c>)
 800e078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	00da      	lsls	r2, r3, #3
 800e082:	69bb      	ldr	r3, [r7, #24]
 800e084:	441a      	add	r2, r3
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 800e08a:	4b11      	ldr	r3, [pc, #68]	@ (800e0d0 <FLASH_OB_GetPCROP+0x10c>)
 800e08c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e08e:	b29b      	uxth	r3, r3
 800e090:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr + 0x7U;
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	00da      	lsls	r2, r3, #3
 800e096:	69bb      	ldr	r3, [r7, #24]
 800e098:	4413      	add	r3, r2
 800e09a:	1dda      	adds	r2, r3, #7
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 800e0a0:	4b0b      	ldr	r3, [pc, #44]	@ (800e0d0 <FLASH_OB_GetPCROP+0x10c>)
 800e0a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0a4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	431a      	orrs	r2, r3
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	601a      	str	r2, [r3, #0]
}
 800e0b2:	bf00      	nop
 800e0b4:	3724      	adds	r7, #36	@ 0x24
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0bc:	4770      	bx	lr
 800e0be:	bf00      	nop
 800e0c0:	40010000 	.word	0x40010000
 800e0c4:	1fff75e0 	.word	0x1fff75e0
 800e0c8:	01fffe00 	.word	0x01fffe00
 800e0cc:	08080000 	.word	0x08080000
 800e0d0:	40022000 	.word	0x40022000

0800e0d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b087      	sub	sp, #28
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e0e2:	e17f      	b.n	800e3e4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	681a      	ldr	r2, [r3, #0]
 800e0e8:	2101      	movs	r1, #1
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	fa01 f303 	lsl.w	r3, r1, r3
 800e0f0:	4013      	ands	r3, r2
 800e0f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	f000 8171 	beq.w	800e3de <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	f003 0303 	and.w	r3, r3, #3
 800e104:	2b01      	cmp	r3, #1
 800e106:	d005      	beq.n	800e114 <HAL_GPIO_Init+0x40>
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	685b      	ldr	r3, [r3, #4]
 800e10c:	f003 0303 	and.w	r3, r3, #3
 800e110:	2b02      	cmp	r3, #2
 800e112:	d130      	bne.n	800e176 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	689b      	ldr	r3, [r3, #8]
 800e118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	005b      	lsls	r3, r3, #1
 800e11e:	2203      	movs	r2, #3
 800e120:	fa02 f303 	lsl.w	r3, r2, r3
 800e124:	43db      	mvns	r3, r3
 800e126:	693a      	ldr	r2, [r7, #16]
 800e128:	4013      	ands	r3, r2
 800e12a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	68da      	ldr	r2, [r3, #12]
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	005b      	lsls	r3, r3, #1
 800e134:	fa02 f303 	lsl.w	r3, r2, r3
 800e138:	693a      	ldr	r2, [r7, #16]
 800e13a:	4313      	orrs	r3, r2
 800e13c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	693a      	ldr	r2, [r7, #16]
 800e142:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e14a:	2201      	movs	r2, #1
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	fa02 f303 	lsl.w	r3, r2, r3
 800e152:	43db      	mvns	r3, r3
 800e154:	693a      	ldr	r2, [r7, #16]
 800e156:	4013      	ands	r3, r2
 800e158:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	685b      	ldr	r3, [r3, #4]
 800e15e:	091b      	lsrs	r3, r3, #4
 800e160:	f003 0201 	and.w	r2, r3, #1
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	fa02 f303 	lsl.w	r3, r2, r3
 800e16a:	693a      	ldr	r2, [r7, #16]
 800e16c:	4313      	orrs	r3, r2
 800e16e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	693a      	ldr	r2, [r7, #16]
 800e174:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	685b      	ldr	r3, [r3, #4]
 800e17a:	f003 0303 	and.w	r3, r3, #3
 800e17e:	2b03      	cmp	r3, #3
 800e180:	d118      	bne.n	800e1b4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e186:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800e188:	2201      	movs	r2, #1
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	fa02 f303 	lsl.w	r3, r2, r3
 800e190:	43db      	mvns	r3, r3
 800e192:	693a      	ldr	r2, [r7, #16]
 800e194:	4013      	ands	r3, r2
 800e196:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	685b      	ldr	r3, [r3, #4]
 800e19c:	08db      	lsrs	r3, r3, #3
 800e19e:	f003 0201 	and.w	r2, r3, #1
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	fa02 f303 	lsl.w	r3, r2, r3
 800e1a8:	693a      	ldr	r2, [r7, #16]
 800e1aa:	4313      	orrs	r3, r2
 800e1ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	693a      	ldr	r2, [r7, #16]
 800e1b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	f003 0303 	and.w	r3, r3, #3
 800e1bc:	2b03      	cmp	r3, #3
 800e1be:	d017      	beq.n	800e1f0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	68db      	ldr	r3, [r3, #12]
 800e1c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	005b      	lsls	r3, r3, #1
 800e1ca:	2203      	movs	r2, #3
 800e1cc:	fa02 f303 	lsl.w	r3, r2, r3
 800e1d0:	43db      	mvns	r3, r3
 800e1d2:	693a      	ldr	r2, [r7, #16]
 800e1d4:	4013      	ands	r3, r2
 800e1d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	689a      	ldr	r2, [r3, #8]
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	005b      	lsls	r3, r3, #1
 800e1e0:	fa02 f303 	lsl.w	r3, r2, r3
 800e1e4:	693a      	ldr	r2, [r7, #16]
 800e1e6:	4313      	orrs	r3, r2
 800e1e8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	693a      	ldr	r2, [r7, #16]
 800e1ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	685b      	ldr	r3, [r3, #4]
 800e1f4:	f003 0303 	and.w	r3, r3, #3
 800e1f8:	2b02      	cmp	r3, #2
 800e1fa:	d123      	bne.n	800e244 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	08da      	lsrs	r2, r3, #3
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	3208      	adds	r2, #8
 800e204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e208:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	f003 0307 	and.w	r3, r3, #7
 800e210:	009b      	lsls	r3, r3, #2
 800e212:	220f      	movs	r2, #15
 800e214:	fa02 f303 	lsl.w	r3, r2, r3
 800e218:	43db      	mvns	r3, r3
 800e21a:	693a      	ldr	r2, [r7, #16]
 800e21c:	4013      	ands	r3, r2
 800e21e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	691a      	ldr	r2, [r3, #16]
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	f003 0307 	and.w	r3, r3, #7
 800e22a:	009b      	lsls	r3, r3, #2
 800e22c:	fa02 f303 	lsl.w	r3, r2, r3
 800e230:	693a      	ldr	r2, [r7, #16]
 800e232:	4313      	orrs	r3, r2
 800e234:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	08da      	lsrs	r2, r3, #3
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	3208      	adds	r2, #8
 800e23e:	6939      	ldr	r1, [r7, #16]
 800e240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	005b      	lsls	r3, r3, #1
 800e24e:	2203      	movs	r2, #3
 800e250:	fa02 f303 	lsl.w	r3, r2, r3
 800e254:	43db      	mvns	r3, r3
 800e256:	693a      	ldr	r2, [r7, #16]
 800e258:	4013      	ands	r3, r2
 800e25a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	f003 0203 	and.w	r2, r3, #3
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	005b      	lsls	r3, r3, #1
 800e268:	fa02 f303 	lsl.w	r3, r2, r3
 800e26c:	693a      	ldr	r2, [r7, #16]
 800e26e:	4313      	orrs	r3, r2
 800e270:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	693a      	ldr	r2, [r7, #16]
 800e276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	685b      	ldr	r3, [r3, #4]
 800e27c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e280:	2b00      	cmp	r3, #0
 800e282:	f000 80ac 	beq.w	800e3de <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e286:	4b5f      	ldr	r3, [pc, #380]	@ (800e404 <HAL_GPIO_Init+0x330>)
 800e288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e28a:	4a5e      	ldr	r2, [pc, #376]	@ (800e404 <HAL_GPIO_Init+0x330>)
 800e28c:	f043 0301 	orr.w	r3, r3, #1
 800e290:	6613      	str	r3, [r2, #96]	@ 0x60
 800e292:	4b5c      	ldr	r3, [pc, #368]	@ (800e404 <HAL_GPIO_Init+0x330>)
 800e294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e296:	f003 0301 	and.w	r3, r3, #1
 800e29a:	60bb      	str	r3, [r7, #8]
 800e29c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800e29e:	4a5a      	ldr	r2, [pc, #360]	@ (800e408 <HAL_GPIO_Init+0x334>)
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	089b      	lsrs	r3, r3, #2
 800e2a4:	3302      	adds	r3, #2
 800e2a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	f003 0303 	and.w	r3, r3, #3
 800e2b2:	009b      	lsls	r3, r3, #2
 800e2b4:	220f      	movs	r2, #15
 800e2b6:	fa02 f303 	lsl.w	r3, r2, r3
 800e2ba:	43db      	mvns	r3, r3
 800e2bc:	693a      	ldr	r2, [r7, #16]
 800e2be:	4013      	ands	r3, r2
 800e2c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800e2c8:	d025      	beq.n	800e316 <HAL_GPIO_Init+0x242>
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	4a4f      	ldr	r2, [pc, #316]	@ (800e40c <HAL_GPIO_Init+0x338>)
 800e2ce:	4293      	cmp	r3, r2
 800e2d0:	d01f      	beq.n	800e312 <HAL_GPIO_Init+0x23e>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	4a4e      	ldr	r2, [pc, #312]	@ (800e410 <HAL_GPIO_Init+0x33c>)
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	d019      	beq.n	800e30e <HAL_GPIO_Init+0x23a>
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	4a4d      	ldr	r2, [pc, #308]	@ (800e414 <HAL_GPIO_Init+0x340>)
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	d013      	beq.n	800e30a <HAL_GPIO_Init+0x236>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	4a4c      	ldr	r2, [pc, #304]	@ (800e418 <HAL_GPIO_Init+0x344>)
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	d00d      	beq.n	800e306 <HAL_GPIO_Init+0x232>
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	4a4b      	ldr	r2, [pc, #300]	@ (800e41c <HAL_GPIO_Init+0x348>)
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	d007      	beq.n	800e302 <HAL_GPIO_Init+0x22e>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	4a4a      	ldr	r2, [pc, #296]	@ (800e420 <HAL_GPIO_Init+0x34c>)
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	d101      	bne.n	800e2fe <HAL_GPIO_Init+0x22a>
 800e2fa:	2306      	movs	r3, #6
 800e2fc:	e00c      	b.n	800e318 <HAL_GPIO_Init+0x244>
 800e2fe:	2307      	movs	r3, #7
 800e300:	e00a      	b.n	800e318 <HAL_GPIO_Init+0x244>
 800e302:	2305      	movs	r3, #5
 800e304:	e008      	b.n	800e318 <HAL_GPIO_Init+0x244>
 800e306:	2304      	movs	r3, #4
 800e308:	e006      	b.n	800e318 <HAL_GPIO_Init+0x244>
 800e30a:	2303      	movs	r3, #3
 800e30c:	e004      	b.n	800e318 <HAL_GPIO_Init+0x244>
 800e30e:	2302      	movs	r3, #2
 800e310:	e002      	b.n	800e318 <HAL_GPIO_Init+0x244>
 800e312:	2301      	movs	r3, #1
 800e314:	e000      	b.n	800e318 <HAL_GPIO_Init+0x244>
 800e316:	2300      	movs	r3, #0
 800e318:	697a      	ldr	r2, [r7, #20]
 800e31a:	f002 0203 	and.w	r2, r2, #3
 800e31e:	0092      	lsls	r2, r2, #2
 800e320:	4093      	lsls	r3, r2
 800e322:	693a      	ldr	r2, [r7, #16]
 800e324:	4313      	orrs	r3, r2
 800e326:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800e328:	4937      	ldr	r1, [pc, #220]	@ (800e408 <HAL_GPIO_Init+0x334>)
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	089b      	lsrs	r3, r3, #2
 800e32e:	3302      	adds	r3, #2
 800e330:	693a      	ldr	r2, [r7, #16]
 800e332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e336:	4b3b      	ldr	r3, [pc, #236]	@ (800e424 <HAL_GPIO_Init+0x350>)
 800e338:	689b      	ldr	r3, [r3, #8]
 800e33a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	43db      	mvns	r3, r3
 800e340:	693a      	ldr	r2, [r7, #16]
 800e342:	4013      	ands	r3, r2
 800e344:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	685b      	ldr	r3, [r3, #4]
 800e34a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d003      	beq.n	800e35a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800e352:	693a      	ldr	r2, [r7, #16]
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	4313      	orrs	r3, r2
 800e358:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800e35a:	4a32      	ldr	r2, [pc, #200]	@ (800e424 <HAL_GPIO_Init+0x350>)
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800e360:	4b30      	ldr	r3, [pc, #192]	@ (800e424 <HAL_GPIO_Init+0x350>)
 800e362:	68db      	ldr	r3, [r3, #12]
 800e364:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	43db      	mvns	r3, r3
 800e36a:	693a      	ldr	r2, [r7, #16]
 800e36c:	4013      	ands	r3, r2
 800e36e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	685b      	ldr	r3, [r3, #4]
 800e374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d003      	beq.n	800e384 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800e37c:	693a      	ldr	r2, [r7, #16]
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	4313      	orrs	r3, r2
 800e382:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800e384:	4a27      	ldr	r2, [pc, #156]	@ (800e424 <HAL_GPIO_Init+0x350>)
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800e38a:	4b26      	ldr	r3, [pc, #152]	@ (800e424 <HAL_GPIO_Init+0x350>)
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	43db      	mvns	r3, r3
 800e394:	693a      	ldr	r2, [r7, #16]
 800e396:	4013      	ands	r3, r2
 800e398:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d003      	beq.n	800e3ae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800e3a6:	693a      	ldr	r2, [r7, #16]
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	4313      	orrs	r3, r2
 800e3ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800e3ae:	4a1d      	ldr	r2, [pc, #116]	@ (800e424 <HAL_GPIO_Init+0x350>)
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800e3b4:	4b1b      	ldr	r3, [pc, #108]	@ (800e424 <HAL_GPIO_Init+0x350>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	43db      	mvns	r3, r3
 800e3be:	693a      	ldr	r2, [r7, #16]
 800e3c0:	4013      	ands	r3, r2
 800e3c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	685b      	ldr	r3, [r3, #4]
 800e3c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d003      	beq.n	800e3d8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800e3d0:	693a      	ldr	r2, [r7, #16]
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	4313      	orrs	r3, r2
 800e3d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800e3d8:	4a12      	ldr	r2, [pc, #72]	@ (800e424 <HAL_GPIO_Init+0x350>)
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	681a      	ldr	r2, [r3, #0]
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	fa22 f303 	lsr.w	r3, r2, r3
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	f47f ae78 	bne.w	800e0e4 <HAL_GPIO_Init+0x10>
  }
}
 800e3f4:	bf00      	nop
 800e3f6:	bf00      	nop
 800e3f8:	371c      	adds	r7, #28
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e400:	4770      	bx	lr
 800e402:	bf00      	nop
 800e404:	40021000 	.word	0x40021000
 800e408:	40010000 	.word	0x40010000
 800e40c:	48000400 	.word	0x48000400
 800e410:	48000800 	.word	0x48000800
 800e414:	48000c00 	.word	0x48000c00
 800e418:	48001000 	.word	0x48001000
 800e41c:	48001400 	.word	0x48001400
 800e420:	48001800 	.word	0x48001800
 800e424:	40010400 	.word	0x40010400

0800e428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e428:	b480      	push	{r7}
 800e42a:	b083      	sub	sp, #12
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
 800e430:	460b      	mov	r3, r1
 800e432:	807b      	strh	r3, [r7, #2]
 800e434:	4613      	mov	r3, r2
 800e436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e438:	787b      	ldrb	r3, [r7, #1]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d003      	beq.n	800e446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800e43e:	887a      	ldrh	r2, [r7, #2]
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800e444:	e002      	b.n	800e44c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800e446:	887a      	ldrh	r2, [r7, #2]
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800e44c:	bf00      	nop
 800e44e:	370c      	adds	r7, #12
 800e450:	46bd      	mov	sp, r7
 800e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e456:	4770      	bx	lr

0800e458 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d101      	bne.n	800e46a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e466:	2301      	movs	r3, #1
 800e468:	e08d      	b.n	800e586 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e470:	b2db      	uxtb	r3, r3
 800e472:	2b00      	cmp	r3, #0
 800e474:	d106      	bne.n	800e484 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2200      	movs	r2, #0
 800e47a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f7f9 f8d0 	bl	8007624 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2224      	movs	r2, #36	@ 0x24
 800e488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	681a      	ldr	r2, [r3, #0]
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f022 0201 	bic.w	r2, r2, #1
 800e49a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	685a      	ldr	r2, [r3, #4]
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800e4a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	689a      	ldr	r2, [r3, #8]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e4b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	68db      	ldr	r3, [r3, #12]
 800e4be:	2b01      	cmp	r3, #1
 800e4c0:	d107      	bne.n	800e4d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	689a      	ldr	r2, [r3, #8]
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e4ce:	609a      	str	r2, [r3, #8]
 800e4d0:	e006      	b.n	800e4e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	689a      	ldr	r2, [r3, #8]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800e4de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	68db      	ldr	r3, [r3, #12]
 800e4e4:	2b02      	cmp	r3, #2
 800e4e6:	d108      	bne.n	800e4fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	685a      	ldr	r2, [r3, #4]
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e4f6:	605a      	str	r2, [r3, #4]
 800e4f8:	e007      	b.n	800e50a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	685a      	ldr	r2, [r3, #4]
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e508:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	685b      	ldr	r3, [r3, #4]
 800e510:	687a      	ldr	r2, [r7, #4]
 800e512:	6812      	ldr	r2, [r2, #0]
 800e514:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800e518:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e51c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	68da      	ldr	r2, [r3, #12]
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e52c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	691a      	ldr	r2, [r3, #16]
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	695b      	ldr	r3, [r3, #20]
 800e536:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	699b      	ldr	r3, [r3, #24]
 800e53e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	430a      	orrs	r2, r1
 800e546:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	69d9      	ldr	r1, [r3, #28]
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6a1a      	ldr	r2, [r3, #32]
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	430a      	orrs	r2, r1
 800e556:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	681a      	ldr	r2, [r3, #0]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	f042 0201 	orr.w	r2, r2, #1
 800e566:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2200      	movs	r2, #0
 800e56c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2220      	movs	r2, #32
 800e572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2200      	movs	r2, #0
 800e57a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2200      	movs	r2, #0
 800e580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800e584:	2300      	movs	r3, #0
}
 800e586:	4618      	mov	r0, r3
 800e588:	3708      	adds	r7, #8
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}
	...

0800e590 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b088      	sub	sp, #32
 800e594:	af02      	add	r7, sp, #8
 800e596:	60f8      	str	r0, [r7, #12]
 800e598:	607a      	str	r2, [r7, #4]
 800e59a:	461a      	mov	r2, r3
 800e59c:	460b      	mov	r3, r1
 800e59e:	817b      	strh	r3, [r7, #10]
 800e5a0:	4613      	mov	r3, r2
 800e5a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e5aa:	b2db      	uxtb	r3, r3
 800e5ac:	2b20      	cmp	r3, #32
 800e5ae:	f040 80fd 	bne.w	800e7ac <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	d101      	bne.n	800e5c0 <HAL_I2C_Master_Transmit+0x30>
 800e5bc:	2302      	movs	r3, #2
 800e5be:	e0f6      	b.n	800e7ae <HAL_I2C_Master_Transmit+0x21e>
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	2201      	movs	r2, #1
 800e5c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e5c8:	f7fc fd50 	bl	800b06c <HAL_GetTick>
 800e5cc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	9300      	str	r3, [sp, #0]
 800e5d2:	2319      	movs	r3, #25
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e5da:	68f8      	ldr	r0, [r7, #12]
 800e5dc:	f000 fa0a 	bl	800e9f4 <I2C_WaitOnFlagUntilTimeout>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d001      	beq.n	800e5ea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	e0e1      	b.n	800e7ae <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2221      	movs	r2, #33	@ 0x21
 800e5ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	2210      	movs	r2, #16
 800e5f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	687a      	ldr	r2, [r7, #4]
 800e604:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	893a      	ldrh	r2, [r7, #8]
 800e60a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2200      	movs	r2, #0
 800e610:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e616:	b29b      	uxth	r3, r3
 800e618:	2bff      	cmp	r3, #255	@ 0xff
 800e61a:	d906      	bls.n	800e62a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	22ff      	movs	r2, #255	@ 0xff
 800e620:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800e622:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e626:	617b      	str	r3, [r7, #20]
 800e628:	e007      	b.n	800e63a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e62e:	b29a      	uxth	r2, r3
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800e634:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e638:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d024      	beq.n	800e68c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e646:	781a      	ldrb	r2, [r3, #0]
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e652:	1c5a      	adds	r2, r3, #1
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e65c:	b29b      	uxth	r3, r3
 800e65e:	3b01      	subs	r3, #1
 800e660:	b29a      	uxth	r2, r3
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e66a:	3b01      	subs	r3, #1
 800e66c:	b29a      	uxth	r2, r3
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e676:	b2db      	uxtb	r3, r3
 800e678:	3301      	adds	r3, #1
 800e67a:	b2da      	uxtb	r2, r3
 800e67c:	8979      	ldrh	r1, [r7, #10]
 800e67e:	4b4e      	ldr	r3, [pc, #312]	@ (800e7b8 <HAL_I2C_Master_Transmit+0x228>)
 800e680:	9300      	str	r3, [sp, #0]
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	68f8      	ldr	r0, [r7, #12]
 800e686:	f000 fc05 	bl	800ee94 <I2C_TransferConfig>
 800e68a:	e066      	b.n	800e75a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e690:	b2da      	uxtb	r2, r3
 800e692:	8979      	ldrh	r1, [r7, #10]
 800e694:	4b48      	ldr	r3, [pc, #288]	@ (800e7b8 <HAL_I2C_Master_Transmit+0x228>)
 800e696:	9300      	str	r3, [sp, #0]
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	68f8      	ldr	r0, [r7, #12]
 800e69c:	f000 fbfa 	bl	800ee94 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800e6a0:	e05b      	b.n	800e75a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e6a2:	693a      	ldr	r2, [r7, #16]
 800e6a4:	6a39      	ldr	r1, [r7, #32]
 800e6a6:	68f8      	ldr	r0, [r7, #12]
 800e6a8:	f000 f9fd 	bl	800eaa6 <I2C_WaitOnTXISFlagUntilTimeout>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d001      	beq.n	800e6b6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	e07b      	b.n	800e7ae <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6ba:	781a      	ldrb	r2, [r3, #0]
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6c6:	1c5a      	adds	r2, r3, #1
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e6d0:	b29b      	uxth	r3, r3
 800e6d2:	3b01      	subs	r3, #1
 800e6d4:	b29a      	uxth	r2, r3
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e6de:	3b01      	subs	r3, #1
 800e6e0:	b29a      	uxth	r2, r3
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e6ea:	b29b      	uxth	r3, r3
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d034      	beq.n	800e75a <HAL_I2C_Master_Transmit+0x1ca>
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d130      	bne.n	800e75a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	9300      	str	r3, [sp, #0]
 800e6fc:	6a3b      	ldr	r3, [r7, #32]
 800e6fe:	2200      	movs	r2, #0
 800e700:	2180      	movs	r1, #128	@ 0x80
 800e702:	68f8      	ldr	r0, [r7, #12]
 800e704:	f000 f976 	bl	800e9f4 <I2C_WaitOnFlagUntilTimeout>
 800e708:	4603      	mov	r3, r0
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d001      	beq.n	800e712 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800e70e:	2301      	movs	r3, #1
 800e710:	e04d      	b.n	800e7ae <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e716:	b29b      	uxth	r3, r3
 800e718:	2bff      	cmp	r3, #255	@ 0xff
 800e71a:	d90e      	bls.n	800e73a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	22ff      	movs	r2, #255	@ 0xff
 800e720:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e726:	b2da      	uxtb	r2, r3
 800e728:	8979      	ldrh	r1, [r7, #10]
 800e72a:	2300      	movs	r3, #0
 800e72c:	9300      	str	r3, [sp, #0]
 800e72e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e732:	68f8      	ldr	r0, [r7, #12]
 800e734:	f000 fbae 	bl	800ee94 <I2C_TransferConfig>
 800e738:	e00f      	b.n	800e75a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e73e:	b29a      	uxth	r2, r3
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e748:	b2da      	uxtb	r2, r3
 800e74a:	8979      	ldrh	r1, [r7, #10]
 800e74c:	2300      	movs	r3, #0
 800e74e:	9300      	str	r3, [sp, #0]
 800e750:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e754:	68f8      	ldr	r0, [r7, #12]
 800e756:	f000 fb9d 	bl	800ee94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e75e:	b29b      	uxth	r3, r3
 800e760:	2b00      	cmp	r3, #0
 800e762:	d19e      	bne.n	800e6a2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e764:	693a      	ldr	r2, [r7, #16]
 800e766:	6a39      	ldr	r1, [r7, #32]
 800e768:	68f8      	ldr	r0, [r7, #12]
 800e76a:	f000 f9e3 	bl	800eb34 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e76e:	4603      	mov	r3, r0
 800e770:	2b00      	cmp	r3, #0
 800e772:	d001      	beq.n	800e778 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800e774:	2301      	movs	r3, #1
 800e776:	e01a      	b.n	800e7ae <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	2220      	movs	r2, #32
 800e77e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	6859      	ldr	r1, [r3, #4]
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	4b0c      	ldr	r3, [pc, #48]	@ (800e7bc <HAL_I2C_Master_Transmit+0x22c>)
 800e78c:	400b      	ands	r3, r1
 800e78e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	2220      	movs	r2, #32
 800e794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	2200      	movs	r2, #0
 800e79c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	e000      	b.n	800e7ae <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800e7ac:	2302      	movs	r3, #2
  }
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3718      	adds	r7, #24
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
 800e7b6:	bf00      	nop
 800e7b8:	80002000 	.word	0x80002000
 800e7bc:	fe00e800 	.word	0xfe00e800

0800e7c0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b088      	sub	sp, #32
 800e7c4:	af02      	add	r7, sp, #8
 800e7c6:	60f8      	str	r0, [r7, #12]
 800e7c8:	607a      	str	r2, [r7, #4]
 800e7ca:	461a      	mov	r2, r3
 800e7cc:	460b      	mov	r3, r1
 800e7ce:	817b      	strh	r3, [r7, #10]
 800e7d0:	4613      	mov	r3, r2
 800e7d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e7da:	b2db      	uxtb	r3, r3
 800e7dc:	2b20      	cmp	r3, #32
 800e7de:	f040 80db 	bne.w	800e998 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e7e8:	2b01      	cmp	r3, #1
 800e7ea:	d101      	bne.n	800e7f0 <HAL_I2C_Master_Receive+0x30>
 800e7ec:	2302      	movs	r3, #2
 800e7ee:	e0d4      	b.n	800e99a <HAL_I2C_Master_Receive+0x1da>
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e7f8:	f7fc fc38 	bl	800b06c <HAL_GetTick>
 800e7fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	9300      	str	r3, [sp, #0]
 800e802:	2319      	movs	r3, #25
 800e804:	2201      	movs	r2, #1
 800e806:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e80a:	68f8      	ldr	r0, [r7, #12]
 800e80c:	f000 f8f2 	bl	800e9f4 <I2C_WaitOnFlagUntilTimeout>
 800e810:	4603      	mov	r3, r0
 800e812:	2b00      	cmp	r3, #0
 800e814:	d001      	beq.n	800e81a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800e816:	2301      	movs	r3, #1
 800e818:	e0bf      	b.n	800e99a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2222      	movs	r2, #34	@ 0x22
 800e81e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2210      	movs	r2, #16
 800e826:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	2200      	movs	r2, #0
 800e82e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	687a      	ldr	r2, [r7, #4]
 800e834:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	893a      	ldrh	r2, [r7, #8]
 800e83a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	2200      	movs	r2, #0
 800e840:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e846:	b29b      	uxth	r3, r3
 800e848:	2bff      	cmp	r3, #255	@ 0xff
 800e84a:	d90e      	bls.n	800e86a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	2201      	movs	r2, #1
 800e850:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e856:	b2da      	uxtb	r2, r3
 800e858:	8979      	ldrh	r1, [r7, #10]
 800e85a:	4b52      	ldr	r3, [pc, #328]	@ (800e9a4 <HAL_I2C_Master_Receive+0x1e4>)
 800e85c:	9300      	str	r3, [sp, #0]
 800e85e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e862:	68f8      	ldr	r0, [r7, #12]
 800e864:	f000 fb16 	bl	800ee94 <I2C_TransferConfig>
 800e868:	e06d      	b.n	800e946 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e86e:	b29a      	uxth	r2, r3
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e878:	b2da      	uxtb	r2, r3
 800e87a:	8979      	ldrh	r1, [r7, #10]
 800e87c:	4b49      	ldr	r3, [pc, #292]	@ (800e9a4 <HAL_I2C_Master_Receive+0x1e4>)
 800e87e:	9300      	str	r3, [sp, #0]
 800e880:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e884:	68f8      	ldr	r0, [r7, #12]
 800e886:	f000 fb05 	bl	800ee94 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800e88a:	e05c      	b.n	800e946 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e88c:	697a      	ldr	r2, [r7, #20]
 800e88e:	6a39      	ldr	r1, [r7, #32]
 800e890:	68f8      	ldr	r0, [r7, #12]
 800e892:	f000 f993 	bl	800ebbc <I2C_WaitOnRXNEFlagUntilTimeout>
 800e896:	4603      	mov	r3, r0
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d001      	beq.n	800e8a0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800e89c:	2301      	movs	r3, #1
 800e89e:	e07c      	b.n	800e99a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8aa:	b2d2      	uxtb	r2, r2
 800e8ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8b2:	1c5a      	adds	r2, r3, #1
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8bc:	3b01      	subs	r3, #1
 800e8be:	b29a      	uxth	r2, r3
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8c8:	b29b      	uxth	r3, r3
 800e8ca:	3b01      	subs	r3, #1
 800e8cc:	b29a      	uxth	r2, r3
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8d6:	b29b      	uxth	r3, r3
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d034      	beq.n	800e946 <HAL_I2C_Master_Receive+0x186>
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d130      	bne.n	800e946 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	9300      	str	r3, [sp, #0]
 800e8e8:	6a3b      	ldr	r3, [r7, #32]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	2180      	movs	r1, #128	@ 0x80
 800e8ee:	68f8      	ldr	r0, [r7, #12]
 800e8f0:	f000 f880 	bl	800e9f4 <I2C_WaitOnFlagUntilTimeout>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d001      	beq.n	800e8fe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	e04d      	b.n	800e99a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e902:	b29b      	uxth	r3, r3
 800e904:	2bff      	cmp	r3, #255	@ 0xff
 800e906:	d90e      	bls.n	800e926 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	22ff      	movs	r2, #255	@ 0xff
 800e90c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e912:	b2da      	uxtb	r2, r3
 800e914:	8979      	ldrh	r1, [r7, #10]
 800e916:	2300      	movs	r3, #0
 800e918:	9300      	str	r3, [sp, #0]
 800e91a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e91e:	68f8      	ldr	r0, [r7, #12]
 800e920:	f000 fab8 	bl	800ee94 <I2C_TransferConfig>
 800e924:	e00f      	b.n	800e946 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e92a:	b29a      	uxth	r2, r3
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e934:	b2da      	uxtb	r2, r3
 800e936:	8979      	ldrh	r1, [r7, #10]
 800e938:	2300      	movs	r3, #0
 800e93a:	9300      	str	r3, [sp, #0]
 800e93c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e940:	68f8      	ldr	r0, [r7, #12]
 800e942:	f000 faa7 	bl	800ee94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e94a:	b29b      	uxth	r3, r3
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d19d      	bne.n	800e88c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e950:	697a      	ldr	r2, [r7, #20]
 800e952:	6a39      	ldr	r1, [r7, #32]
 800e954:	68f8      	ldr	r0, [r7, #12]
 800e956:	f000 f8ed 	bl	800eb34 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e95a:	4603      	mov	r3, r0
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d001      	beq.n	800e964 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800e960:	2301      	movs	r3, #1
 800e962:	e01a      	b.n	800e99a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	2220      	movs	r2, #32
 800e96a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	6859      	ldr	r1, [r3, #4]
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	681a      	ldr	r2, [r3, #0]
 800e976:	4b0c      	ldr	r3, [pc, #48]	@ (800e9a8 <HAL_I2C_Master_Receive+0x1e8>)
 800e978:	400b      	ands	r3, r1
 800e97a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2220      	movs	r2, #32
 800e980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2200      	movs	r2, #0
 800e988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	2200      	movs	r2, #0
 800e990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e994:	2300      	movs	r3, #0
 800e996:	e000      	b.n	800e99a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800e998:	2302      	movs	r3, #2
  }
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3718      	adds	r7, #24
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	80002400 	.word	0x80002400
 800e9a8:	fe00e800 	.word	0xfe00e800

0800e9ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b083      	sub	sp, #12
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	699b      	ldr	r3, [r3, #24]
 800e9ba:	f003 0302 	and.w	r3, r3, #2
 800e9be:	2b02      	cmp	r3, #2
 800e9c0:	d103      	bne.n	800e9ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	699b      	ldr	r3, [r3, #24]
 800e9d0:	f003 0301 	and.w	r3, r3, #1
 800e9d4:	2b01      	cmp	r3, #1
 800e9d6:	d007      	beq.n	800e9e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	699a      	ldr	r2, [r3, #24]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f042 0201 	orr.w	r2, r2, #1
 800e9e6:	619a      	str	r2, [r3, #24]
  }
}
 800e9e8:	bf00      	nop
 800e9ea:	370c      	adds	r7, #12
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f2:	4770      	bx	lr

0800e9f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b084      	sub	sp, #16
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	60f8      	str	r0, [r7, #12]
 800e9fc:	60b9      	str	r1, [r7, #8]
 800e9fe:	603b      	str	r3, [r7, #0]
 800ea00:	4613      	mov	r3, r2
 800ea02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ea04:	e03b      	b.n	800ea7e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ea06:	69ba      	ldr	r2, [r7, #24]
 800ea08:	6839      	ldr	r1, [r7, #0]
 800ea0a:	68f8      	ldr	r0, [r7, #12]
 800ea0c:	f000 f962 	bl	800ecd4 <I2C_IsErrorOccurred>
 800ea10:	4603      	mov	r3, r0
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d001      	beq.n	800ea1a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800ea16:	2301      	movs	r3, #1
 800ea18:	e041      	b.n	800ea9e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea20:	d02d      	beq.n	800ea7e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea22:	f7fc fb23 	bl	800b06c <HAL_GetTick>
 800ea26:	4602      	mov	r2, r0
 800ea28:	69bb      	ldr	r3, [r7, #24]
 800ea2a:	1ad3      	subs	r3, r2, r3
 800ea2c:	683a      	ldr	r2, [r7, #0]
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	d302      	bcc.n	800ea38 <I2C_WaitOnFlagUntilTimeout+0x44>
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d122      	bne.n	800ea7e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	699a      	ldr	r2, [r3, #24]
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	4013      	ands	r3, r2
 800ea42:	68ba      	ldr	r2, [r7, #8]
 800ea44:	429a      	cmp	r2, r3
 800ea46:	bf0c      	ite	eq
 800ea48:	2301      	moveq	r3, #1
 800ea4a:	2300      	movne	r3, #0
 800ea4c:	b2db      	uxtb	r3, r3
 800ea4e:	461a      	mov	r2, r3
 800ea50:	79fb      	ldrb	r3, [r7, #7]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d113      	bne.n	800ea7e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea5a:	f043 0220 	orr.w	r2, r3, #32
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2220      	movs	r2, #32
 800ea66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	2200      	movs	r2, #0
 800ea76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	e00f      	b.n	800ea9e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	699a      	ldr	r2, [r3, #24]
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	4013      	ands	r3, r2
 800ea88:	68ba      	ldr	r2, [r7, #8]
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	bf0c      	ite	eq
 800ea8e:	2301      	moveq	r3, #1
 800ea90:	2300      	movne	r3, #0
 800ea92:	b2db      	uxtb	r3, r3
 800ea94:	461a      	mov	r2, r3
 800ea96:	79fb      	ldrb	r3, [r7, #7]
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d0b4      	beq.n	800ea06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ea9c:	2300      	movs	r3, #0
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3710      	adds	r7, #16
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}

0800eaa6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800eaa6:	b580      	push	{r7, lr}
 800eaa8:	b084      	sub	sp, #16
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	60f8      	str	r0, [r7, #12]
 800eaae:	60b9      	str	r1, [r7, #8]
 800eab0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800eab2:	e033      	b.n	800eb1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800eab4:	687a      	ldr	r2, [r7, #4]
 800eab6:	68b9      	ldr	r1, [r7, #8]
 800eab8:	68f8      	ldr	r0, [r7, #12]
 800eaba:	f000 f90b 	bl	800ecd4 <I2C_IsErrorOccurred>
 800eabe:	4603      	mov	r3, r0
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d001      	beq.n	800eac8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800eac4:	2301      	movs	r3, #1
 800eac6:	e031      	b.n	800eb2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eac8:	68bb      	ldr	r3, [r7, #8]
 800eaca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eace:	d025      	beq.n	800eb1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ead0:	f7fc facc 	bl	800b06c <HAL_GetTick>
 800ead4:	4602      	mov	r2, r0
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	1ad3      	subs	r3, r2, r3
 800eada:	68ba      	ldr	r2, [r7, #8]
 800eadc:	429a      	cmp	r2, r3
 800eade:	d302      	bcc.n	800eae6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d11a      	bne.n	800eb1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	699b      	ldr	r3, [r3, #24]
 800eaec:	f003 0302 	and.w	r3, r3, #2
 800eaf0:	2b02      	cmp	r3, #2
 800eaf2:	d013      	beq.n	800eb1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eaf8:	f043 0220 	orr.w	r2, r3, #32
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	2220      	movs	r2, #32
 800eb04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	2200      	movs	r2, #0
 800eb14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800eb18:	2301      	movs	r3, #1
 800eb1a:	e007      	b.n	800eb2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	699b      	ldr	r3, [r3, #24]
 800eb22:	f003 0302 	and.w	r3, r3, #2
 800eb26:	2b02      	cmp	r3, #2
 800eb28:	d1c4      	bne.n	800eab4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800eb2a:	2300      	movs	r3, #0
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	3710      	adds	r7, #16
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b084      	sub	sp, #16
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	60f8      	str	r0, [r7, #12]
 800eb3c:	60b9      	str	r1, [r7, #8]
 800eb3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800eb40:	e02f      	b.n	800eba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800eb42:	687a      	ldr	r2, [r7, #4]
 800eb44:	68b9      	ldr	r1, [r7, #8]
 800eb46:	68f8      	ldr	r0, [r7, #12]
 800eb48:	f000 f8c4 	bl	800ecd4 <I2C_IsErrorOccurred>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d001      	beq.n	800eb56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800eb52:	2301      	movs	r3, #1
 800eb54:	e02d      	b.n	800ebb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb56:	f7fc fa89 	bl	800b06c <HAL_GetTick>
 800eb5a:	4602      	mov	r2, r0
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	1ad3      	subs	r3, r2, r3
 800eb60:	68ba      	ldr	r2, [r7, #8]
 800eb62:	429a      	cmp	r2, r3
 800eb64:	d302      	bcc.n	800eb6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d11a      	bne.n	800eba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	699b      	ldr	r3, [r3, #24]
 800eb72:	f003 0320 	and.w	r3, r3, #32
 800eb76:	2b20      	cmp	r3, #32
 800eb78:	d013      	beq.n	800eba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb7e:	f043 0220 	orr.w	r2, r3, #32
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2220      	movs	r2, #32
 800eb8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	2200      	movs	r2, #0
 800eb92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	2200      	movs	r2, #0
 800eb9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800eb9e:	2301      	movs	r3, #1
 800eba0:	e007      	b.n	800ebb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	699b      	ldr	r3, [r3, #24]
 800eba8:	f003 0320 	and.w	r3, r3, #32
 800ebac:	2b20      	cmp	r3, #32
 800ebae:	d1c8      	bne.n	800eb42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ebb0:	2300      	movs	r3, #0
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3710      	adds	r7, #16
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}
	...

0800ebbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b086      	sub	sp, #24
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	60f8      	str	r0, [r7, #12]
 800ebc4:	60b9      	str	r1, [r7, #8]
 800ebc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800ebcc:	e071      	b.n	800ecb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ebce:	687a      	ldr	r2, [r7, #4]
 800ebd0:	68b9      	ldr	r1, [r7, #8]
 800ebd2:	68f8      	ldr	r0, [r7, #12]
 800ebd4:	f000 f87e 	bl	800ecd4 <I2C_IsErrorOccurred>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d001      	beq.n	800ebe2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800ebde:	2301      	movs	r3, #1
 800ebe0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	699b      	ldr	r3, [r3, #24]
 800ebe8:	f003 0320 	and.w	r3, r3, #32
 800ebec:	2b20      	cmp	r3, #32
 800ebee:	d13b      	bne.n	800ec68 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800ebf0:	7dfb      	ldrb	r3, [r7, #23]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d138      	bne.n	800ec68 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	699b      	ldr	r3, [r3, #24]
 800ebfc:	f003 0304 	and.w	r3, r3, #4
 800ec00:	2b04      	cmp	r3, #4
 800ec02:	d105      	bne.n	800ec10 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d001      	beq.n	800ec10 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	699b      	ldr	r3, [r3, #24]
 800ec16:	f003 0310 	and.w	r3, r3, #16
 800ec1a:	2b10      	cmp	r3, #16
 800ec1c:	d121      	bne.n	800ec62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2210      	movs	r2, #16
 800ec24:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	2204      	movs	r2, #4
 800ec2a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	2220      	movs	r2, #32
 800ec32:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	6859      	ldr	r1, [r3, #4]
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681a      	ldr	r2, [r3, #0]
 800ec3e:	4b24      	ldr	r3, [pc, #144]	@ (800ecd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800ec40:	400b      	ands	r3, r1
 800ec42:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	2220      	movs	r2, #32
 800ec48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	2200      	movs	r2, #0
 800ec58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	75fb      	strb	r3, [r7, #23]
 800ec60:	e002      	b.n	800ec68 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2200      	movs	r2, #0
 800ec66:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800ec68:	f7fc fa00 	bl	800b06c <HAL_GetTick>
 800ec6c:	4602      	mov	r2, r0
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	1ad3      	subs	r3, r2, r3
 800ec72:	68ba      	ldr	r2, [r7, #8]
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d302      	bcc.n	800ec7e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d119      	bne.n	800ecb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800ec7e:	7dfb      	ldrb	r3, [r7, #23]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d116      	bne.n	800ecb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	699b      	ldr	r3, [r3, #24]
 800ec8a:	f003 0304 	and.w	r3, r3, #4
 800ec8e:	2b04      	cmp	r3, #4
 800ec90:	d00f      	beq.n	800ecb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec96:	f043 0220 	orr.w	r2, r3, #32
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	2220      	movs	r2, #32
 800eca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800ecae:	2301      	movs	r3, #1
 800ecb0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	699b      	ldr	r3, [r3, #24]
 800ecb8:	f003 0304 	and.w	r3, r3, #4
 800ecbc:	2b04      	cmp	r3, #4
 800ecbe:	d002      	beq.n	800ecc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800ecc0:	7dfb      	ldrb	r3, [r7, #23]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d083      	beq.n	800ebce <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800ecc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3718      	adds	r7, #24
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}
 800ecd0:	fe00e800 	.word	0xfe00e800

0800ecd4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b08a      	sub	sp, #40	@ 0x28
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	60f8      	str	r0, [r7, #12]
 800ecdc:	60b9      	str	r1, [r7, #8]
 800ecde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ece0:	2300      	movs	r3, #0
 800ece2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	699b      	ldr	r3, [r3, #24]
 800ecec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ecf6:	69bb      	ldr	r3, [r7, #24]
 800ecf8:	f003 0310 	and.w	r3, r3, #16
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d068      	beq.n	800edd2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	2210      	movs	r2, #16
 800ed06:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ed08:	e049      	b.n	800ed9e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed10:	d045      	beq.n	800ed9e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ed12:	f7fc f9ab 	bl	800b06c <HAL_GetTick>
 800ed16:	4602      	mov	r2, r0
 800ed18:	69fb      	ldr	r3, [r7, #28]
 800ed1a:	1ad3      	subs	r3, r2, r3
 800ed1c:	68ba      	ldr	r2, [r7, #8]
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d302      	bcc.n	800ed28 <I2C_IsErrorOccurred+0x54>
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d13a      	bne.n	800ed9e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ed32:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ed3a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	699b      	ldr	r3, [r3, #24]
 800ed42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ed46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ed4a:	d121      	bne.n	800ed90 <I2C_IsErrorOccurred+0xbc>
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ed52:	d01d      	beq.n	800ed90 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800ed54:	7cfb      	ldrb	r3, [r7, #19]
 800ed56:	2b20      	cmp	r3, #32
 800ed58:	d01a      	beq.n	800ed90 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	685a      	ldr	r2, [r3, #4]
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ed68:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800ed6a:	f7fc f97f 	bl	800b06c <HAL_GetTick>
 800ed6e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ed70:	e00e      	b.n	800ed90 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ed72:	f7fc f97b 	bl	800b06c <HAL_GetTick>
 800ed76:	4602      	mov	r2, r0
 800ed78:	69fb      	ldr	r3, [r7, #28]
 800ed7a:	1ad3      	subs	r3, r2, r3
 800ed7c:	2b19      	cmp	r3, #25
 800ed7e:	d907      	bls.n	800ed90 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800ed80:	6a3b      	ldr	r3, [r7, #32]
 800ed82:	f043 0320 	orr.w	r3, r3, #32
 800ed86:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800ed88:	2301      	movs	r3, #1
 800ed8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800ed8e:	e006      	b.n	800ed9e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	699b      	ldr	r3, [r3, #24]
 800ed96:	f003 0320 	and.w	r3, r3, #32
 800ed9a:	2b20      	cmp	r3, #32
 800ed9c:	d1e9      	bne.n	800ed72 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	699b      	ldr	r3, [r3, #24]
 800eda4:	f003 0320 	and.w	r3, r3, #32
 800eda8:	2b20      	cmp	r3, #32
 800edaa:	d003      	beq.n	800edb4 <I2C_IsErrorOccurred+0xe0>
 800edac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d0aa      	beq.n	800ed0a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800edb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d103      	bne.n	800edc4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	2220      	movs	r2, #32
 800edc2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800edc4:	6a3b      	ldr	r3, [r7, #32]
 800edc6:	f043 0304 	orr.w	r3, r3, #4
 800edca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800edcc:	2301      	movs	r3, #1
 800edce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	699b      	ldr	r3, [r3, #24]
 800edd8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800edda:	69bb      	ldr	r3, [r7, #24]
 800eddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d00b      	beq.n	800edfc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ede4:	6a3b      	ldr	r3, [r7, #32]
 800ede6:	f043 0301 	orr.w	r3, r3, #1
 800edea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800edf4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800edf6:	2301      	movs	r3, #1
 800edf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800edfc:	69bb      	ldr	r3, [r7, #24]
 800edfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d00b      	beq.n	800ee1e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800ee06:	6a3b      	ldr	r3, [r7, #32]
 800ee08:	f043 0308 	orr.w	r3, r3, #8
 800ee0c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ee16:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ee1e:	69bb      	ldr	r3, [r7, #24]
 800ee20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d00b      	beq.n	800ee40 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800ee28:	6a3b      	ldr	r3, [r7, #32]
 800ee2a:	f043 0302 	orr.w	r3, r3, #2
 800ee2e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ee38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800ee40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d01c      	beq.n	800ee82 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ee48:	68f8      	ldr	r0, [r7, #12]
 800ee4a:	f7ff fdaf 	bl	800e9ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	6859      	ldr	r1, [r3, #4]
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	681a      	ldr	r2, [r3, #0]
 800ee58:	4b0d      	ldr	r3, [pc, #52]	@ (800ee90 <I2C_IsErrorOccurred+0x1bc>)
 800ee5a:	400b      	ands	r3, r1
 800ee5c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ee62:	6a3b      	ldr	r3, [r7, #32]
 800ee64:	431a      	orrs	r2, r3
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	2220      	movs	r2, #32
 800ee6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	2200      	movs	r2, #0
 800ee76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800ee82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	3728      	adds	r7, #40	@ 0x28
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	fe00e800 	.word	0xfe00e800

0800ee94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ee94:	b480      	push	{r7}
 800ee96:	b087      	sub	sp, #28
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	60f8      	str	r0, [r7, #12]
 800ee9c:	607b      	str	r3, [r7, #4]
 800ee9e:	460b      	mov	r3, r1
 800eea0:	817b      	strh	r3, [r7, #10]
 800eea2:	4613      	mov	r3, r2
 800eea4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800eea6:	897b      	ldrh	r3, [r7, #10]
 800eea8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800eeac:	7a7b      	ldrb	r3, [r7, #9]
 800eeae:	041b      	lsls	r3, r3, #16
 800eeb0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800eeb4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800eeba:	6a3b      	ldr	r3, [r7, #32]
 800eebc:	4313      	orrs	r3, r2
 800eebe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800eec2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	685a      	ldr	r2, [r3, #4]
 800eeca:	6a3b      	ldr	r3, [r7, #32]
 800eecc:	0d5b      	lsrs	r3, r3, #21
 800eece:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800eed2:	4b08      	ldr	r3, [pc, #32]	@ (800eef4 <I2C_TransferConfig+0x60>)
 800eed4:	430b      	orrs	r3, r1
 800eed6:	43db      	mvns	r3, r3
 800eed8:	ea02 0103 	and.w	r1, r2, r3
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	697a      	ldr	r2, [r7, #20]
 800eee2:	430a      	orrs	r2, r1
 800eee4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800eee6:	bf00      	nop
 800eee8:	371c      	adds	r7, #28
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr
 800eef2:	bf00      	nop
 800eef4:	03ff63ff 	.word	0x03ff63ff

0800eef8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800eef8:	b480      	push	{r7}
 800eefa:	b083      	sub	sp, #12
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
 800ef00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ef08:	b2db      	uxtb	r3, r3
 800ef0a:	2b20      	cmp	r3, #32
 800ef0c:	d138      	bne.n	800ef80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ef14:	2b01      	cmp	r3, #1
 800ef16:	d101      	bne.n	800ef1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ef18:	2302      	movs	r3, #2
 800ef1a:	e032      	b.n	800ef82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2201      	movs	r2, #1
 800ef20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2224      	movs	r2, #36	@ 0x24
 800ef28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	681a      	ldr	r2, [r3, #0]
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	f022 0201 	bic.w	r2, r2, #1
 800ef3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	681a      	ldr	r2, [r3, #0]
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ef4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	6819      	ldr	r1, [r3, #0]
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	683a      	ldr	r2, [r7, #0]
 800ef58:	430a      	orrs	r2, r1
 800ef5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	681a      	ldr	r2, [r3, #0]
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f042 0201 	orr.w	r2, r2, #1
 800ef6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2220      	movs	r2, #32
 800ef70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2200      	movs	r2, #0
 800ef78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	e000      	b.n	800ef82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ef80:	2302      	movs	r3, #2
  }
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	370c      	adds	r7, #12
 800ef86:	46bd      	mov	sp, r7
 800ef88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8c:	4770      	bx	lr

0800ef8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ef8e:	b480      	push	{r7}
 800ef90:	b085      	sub	sp, #20
 800ef92:	af00      	add	r7, sp, #0
 800ef94:	6078      	str	r0, [r7, #4]
 800ef96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ef9e:	b2db      	uxtb	r3, r3
 800efa0:	2b20      	cmp	r3, #32
 800efa2:	d139      	bne.n	800f018 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800efaa:	2b01      	cmp	r3, #1
 800efac:	d101      	bne.n	800efb2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800efae:	2302      	movs	r3, #2
 800efb0:	e033      	b.n	800f01a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2201      	movs	r2, #1
 800efb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2224      	movs	r2, #36	@ 0x24
 800efbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	681a      	ldr	r2, [r3, #0]
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	f022 0201 	bic.w	r2, r2, #1
 800efd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800efe0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	021b      	lsls	r3, r3, #8
 800efe6:	68fa      	ldr	r2, [r7, #12]
 800efe8:	4313      	orrs	r3, r2
 800efea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	68fa      	ldr	r2, [r7, #12]
 800eff2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f042 0201 	orr.w	r2, r2, #1
 800f002:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2220      	movs	r2, #32
 800f008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2200      	movs	r2, #0
 800f010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800f014:	2300      	movs	r3, #0
 800f016:	e000      	b.n	800f01a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800f018:	2302      	movs	r3, #2
  }
}
 800f01a:	4618      	mov	r0, r3
 800f01c:	3714      	adds	r7, #20
 800f01e:	46bd      	mov	sp, r7
 800f020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f024:	4770      	bx	lr
	...

0800f028 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800f028:	b480      	push	{r7}
 800f02a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800f02c:	4b04      	ldr	r3, [pc, #16]	@ (800f040 <HAL_PWREx_GetVoltageRange+0x18>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800f034:	4618      	mov	r0, r3
 800f036:	46bd      	mov	sp, r7
 800f038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03c:	4770      	bx	lr
 800f03e:	bf00      	nop
 800f040:	40007000 	.word	0x40007000

0800f044 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800f044:	b480      	push	{r7}
 800f046:	b085      	sub	sp, #20
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f052:	d130      	bne.n	800f0b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800f054:	4b23      	ldr	r3, [pc, #140]	@ (800f0e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f05c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f060:	d038      	beq.n	800f0d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800f062:	4b20      	ldr	r3, [pc, #128]	@ (800f0e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800f06a:	4a1e      	ldr	r2, [pc, #120]	@ (800f0e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f06c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800f070:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800f072:	4b1d      	ldr	r3, [pc, #116]	@ (800f0e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	2232      	movs	r2, #50	@ 0x32
 800f078:	fb02 f303 	mul.w	r3, r2, r3
 800f07c:	4a1b      	ldr	r2, [pc, #108]	@ (800f0ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800f07e:	fba2 2303 	umull	r2, r3, r2, r3
 800f082:	0c9b      	lsrs	r3, r3, #18
 800f084:	3301      	adds	r3, #1
 800f086:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f088:	e002      	b.n	800f090 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	3b01      	subs	r3, #1
 800f08e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f090:	4b14      	ldr	r3, [pc, #80]	@ (800f0e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f092:	695b      	ldr	r3, [r3, #20]
 800f094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f098:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f09c:	d102      	bne.n	800f0a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d1f2      	bne.n	800f08a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800f0a4:	4b0f      	ldr	r3, [pc, #60]	@ (800f0e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f0a6:	695b      	ldr	r3, [r3, #20]
 800f0a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f0ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f0b0:	d110      	bne.n	800f0d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800f0b2:	2303      	movs	r3, #3
 800f0b4:	e00f      	b.n	800f0d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800f0b6:	4b0b      	ldr	r3, [pc, #44]	@ (800f0e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f0be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f0c2:	d007      	beq.n	800f0d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800f0c4:	4b07      	ldr	r3, [pc, #28]	@ (800f0e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800f0cc:	4a05      	ldr	r2, [pc, #20]	@ (800f0e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f0ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800f0d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800f0d4:	2300      	movs	r3, #0
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	3714      	adds	r7, #20
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e0:	4770      	bx	lr
 800f0e2:	bf00      	nop
 800f0e4:	40007000 	.word	0x40007000
 800f0e8:	20000268 	.word	0x20000268
 800f0ec:	431bde83 	.word	0x431bde83

0800f0f0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b086      	sub	sp, #24
 800f0f4:	af02      	add	r7, sp, #8
 800f0f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f0f8:	f7fb ffb8 	bl	800b06c <HAL_GetTick>
 800f0fc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d101      	bne.n	800f108 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800f104:	2301      	movs	r3, #1
 800f106:	e063      	b.n	800f1d0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f10e:	b2db      	uxtb	r3, r3
 800f110:	2b00      	cmp	r3, #0
 800f112:	d10b      	bne.n	800f12c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2200      	movs	r2, #0
 800f118:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f7f8 fadf 	bl	80076e0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800f122:	f241 3188 	movw	r1, #5000	@ 0x1388
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f000 fa68 	bl	800f5fc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	689b      	ldr	r3, [r3, #8]
 800f13a:	3b01      	subs	r3, #1
 800f13c:	021a      	lsls	r2, r3, #8
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	430a      	orrs	r2, r1
 800f144:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f14a:	9300      	str	r3, [sp, #0]
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	2200      	movs	r2, #0
 800f150:	2120      	movs	r1, #32
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f000 fa60 	bl	800f618 <QSPI_WaitFlagStateUntilTimeout>
 800f158:	4603      	mov	r3, r0
 800f15a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800f15c:	7afb      	ldrb	r3, [r7, #11]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d131      	bne.n	800f1c6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f16c:	f023 0310 	bic.w	r3, r3, #16
 800f170:	687a      	ldr	r2, [r7, #4]
 800f172:	6852      	ldr	r2, [r2, #4]
 800f174:	0611      	lsls	r1, r2, #24
 800f176:	687a      	ldr	r2, [r7, #4]
 800f178:	68d2      	ldr	r2, [r2, #12]
 800f17a:	4311      	orrs	r1, r2
 800f17c:	687a      	ldr	r2, [r7, #4]
 800f17e:	6812      	ldr	r2, [r2, #0]
 800f180:	430b      	orrs	r3, r1
 800f182:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	685a      	ldr	r2, [r3, #4]
 800f18a:	4b13      	ldr	r3, [pc, #76]	@ (800f1d8 <HAL_QSPI_Init+0xe8>)
 800f18c:	4013      	ands	r3, r2
 800f18e:	687a      	ldr	r2, [r7, #4]
 800f190:	6912      	ldr	r2, [r2, #16]
 800f192:	0411      	lsls	r1, r2, #16
 800f194:	687a      	ldr	r2, [r7, #4]
 800f196:	6952      	ldr	r2, [r2, #20]
 800f198:	4311      	orrs	r1, r2
 800f19a:	687a      	ldr	r2, [r7, #4]
 800f19c:	6992      	ldr	r2, [r2, #24]
 800f19e:	4311      	orrs	r1, r2
 800f1a0:	687a      	ldr	r2, [r7, #4]
 800f1a2:	6812      	ldr	r2, [r2, #0]
 800f1a4:	430b      	orrs	r3, r1
 800f1a6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	681a      	ldr	r2, [r3, #0]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f042 0201 	orr.w	r2, r2, #1
 800f1b6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800f1ce:	7afb      	ldrb	r3, [r7, #11]
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3710      	adds	r7, #16
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	ffe0f8fe 	.word	0xffe0f8fe

0800f1dc <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b088      	sub	sp, #32
 800f1e0:	af02      	add	r7, sp, #8
 800f1e2:	60f8      	str	r0, [r7, #12]
 800f1e4:	60b9      	str	r1, [r7, #8]
 800f1e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f1e8:	f7fb ff40 	bl	800b06c <HAL_GetTick>
 800f1ec:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f1f4:	b2db      	uxtb	r3, r3
 800f1f6:	2b01      	cmp	r3, #1
 800f1f8:	d101      	bne.n	800f1fe <HAL_QSPI_Command+0x22>
 800f1fa:	2302      	movs	r3, #2
 800f1fc:	e048      	b.n	800f290 <HAL_QSPI_Command+0xb4>
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	2201      	movs	r2, #1
 800f202:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f20c:	b2db      	uxtb	r3, r3
 800f20e:	2b01      	cmp	r3, #1
 800f210:	d137      	bne.n	800f282 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	2200      	movs	r2, #0
 800f216:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	2202      	movs	r2, #2
 800f21c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	9300      	str	r3, [sp, #0]
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	2200      	movs	r2, #0
 800f228:	2120      	movs	r1, #32
 800f22a:	68f8      	ldr	r0, [r7, #12]
 800f22c:	f000 f9f4 	bl	800f618 <QSPI_WaitFlagStateUntilTimeout>
 800f230:	4603      	mov	r3, r0
 800f232:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800f234:	7dfb      	ldrb	r3, [r7, #23]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d125      	bne.n	800f286 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800f23a:	2200      	movs	r2, #0
 800f23c:	68b9      	ldr	r1, [r7, #8]
 800f23e:	68f8      	ldr	r0, [r7, #12]
 800f240:	f000 fa21 	bl	800f686 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d115      	bne.n	800f278 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	9300      	str	r3, [sp, #0]
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	2201      	movs	r2, #1
 800f254:	2102      	movs	r1, #2
 800f256:	68f8      	ldr	r0, [r7, #12]
 800f258:	f000 f9de 	bl	800f618 <QSPI_WaitFlagStateUntilTimeout>
 800f25c:	4603      	mov	r3, r0
 800f25e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800f260:	7dfb      	ldrb	r3, [r7, #23]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d10f      	bne.n	800f286 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	2202      	movs	r2, #2
 800f26c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	2201      	movs	r2, #1
 800f272:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f276:	e006      	b.n	800f286 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	2201      	movs	r2, #1
 800f27c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f280:	e001      	b.n	800f286 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800f282:	2302      	movs	r3, #2
 800f284:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	2200      	movs	r2, #0
 800f28a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800f28e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f290:	4618      	mov	r0, r3
 800f292:	3718      	adds	r7, #24
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}

0800f298 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b08a      	sub	sp, #40	@ 0x28
 800f29c:	af02      	add	r7, sp, #8
 800f29e:	60f8      	str	r0, [r7, #12]
 800f2a0:	60b9      	str	r1, [r7, #8]
 800f2a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800f2a8:	f7fb fee0 	bl	800b06c <HAL_GetTick>
 800f2ac:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	3320      	adds	r3, #32
 800f2b4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f2bc:	b2db      	uxtb	r3, r3
 800f2be:	2b01      	cmp	r3, #1
 800f2c0:	d101      	bne.n	800f2c6 <HAL_QSPI_Transmit+0x2e>
 800f2c2:	2302      	movs	r3, #2
 800f2c4:	e07b      	b.n	800f3be <HAL_QSPI_Transmit+0x126>
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2201      	movs	r2, #1
 800f2ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f2d4:	b2db      	uxtb	r3, r3
 800f2d6:	2b01      	cmp	r3, #1
 800f2d8:	d16a      	bne.n	800f3b0 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	2200      	movs	r2, #0
 800f2de:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d05b      	beq.n	800f39e <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	2212      	movs	r2, #18
 800f2ea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	691b      	ldr	r3, [r3, #16]
 800f2f4:	1c5a      	adds	r2, r3, #1
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	625a      	str	r2, [r3, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	691b      	ldr	r3, [r3, #16]
 800f300:	1c5a      	adds	r2, r3, #1
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	68ba      	ldr	r2, [r7, #8]
 800f30a:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	695a      	ldr	r2, [r3, #20]
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800f31a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800f31c:	e01b      	b.n	800f356 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	9300      	str	r3, [sp, #0]
 800f322:	69bb      	ldr	r3, [r7, #24]
 800f324:	2201      	movs	r2, #1
 800f326:	2104      	movs	r1, #4
 800f328:	68f8      	ldr	r0, [r7, #12]
 800f32a:	f000 f975 	bl	800f618 <QSPI_WaitFlagStateUntilTimeout>
 800f32e:	4603      	mov	r3, r0
 800f330:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800f332:	7ffb      	ldrb	r3, [r7, #31]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d113      	bne.n	800f360 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	69db      	ldr	r3, [r3, #28]
 800f33c:	781a      	ldrb	r2, [r3, #0]
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	69db      	ldr	r3, [r3, #28]
 800f346:	1c5a      	adds	r2, r3, #1
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f350:	1e5a      	subs	r2, r3, #1
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	625a      	str	r2, [r3, #36]	@ 0x24
      while(hqspi->TxXferCount > 0U)
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d1df      	bne.n	800f31e <HAL_QSPI_Transmit+0x86>
 800f35e:	e000      	b.n	800f362 <HAL_QSPI_Transmit+0xca>
          break;
 800f360:	bf00      	nop
      }

      if (status == HAL_OK)
 800f362:	7ffb      	ldrb	r3, [r7, #31]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d115      	bne.n	800f394 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	9300      	str	r3, [sp, #0]
 800f36c:	69bb      	ldr	r3, [r7, #24]
 800f36e:	2201      	movs	r2, #1
 800f370:	2102      	movs	r1, #2
 800f372:	68f8      	ldr	r0, [r7, #12]
 800f374:	f000 f950 	bl	800f618 <QSPI_WaitFlagStateUntilTimeout>
 800f378:	4603      	mov	r3, r0
 800f37a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800f37c:	7ffb      	ldrb	r3, [r7, #31]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d108      	bne.n	800f394 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	2202      	movs	r2, #2
 800f388:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800f38a:	68f8      	ldr	r0, [r7, #12]
 800f38c:	f000 f8bd 	bl	800f50a <HAL_QSPI_Abort>
 800f390:	4603      	mov	r3, r0
 800f392:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	2201      	movs	r2, #1
 800f398:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f39c:	e00a      	b.n	800f3b4 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f3a2:	f043 0208 	orr.w	r2, r3, #8
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	77fb      	strb	r3, [r7, #31]
 800f3ae:	e001      	b.n	800f3b4 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800f3b0:	2302      	movs	r3, #2
 800f3b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800f3bc:	7ffb      	ldrb	r3, [r7, #31]
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3720      	adds	r7, #32
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}

0800f3c6 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800f3c6:	b580      	push	{r7, lr}
 800f3c8:	b08a      	sub	sp, #40	@ 0x28
 800f3ca:	af02      	add	r7, sp, #8
 800f3cc:	60f8      	str	r0, [r7, #12]
 800f3ce:	60b9      	str	r1, [r7, #8]
 800f3d0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800f3d6:	f7fb fe49 	bl	800b06c <HAL_GetTick>
 800f3da:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	699b      	ldr	r3, [r3, #24]
 800f3e2:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	3320      	adds	r3, #32
 800f3ea:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f3f2:	b2db      	uxtb	r3, r3
 800f3f4:	2b01      	cmp	r3, #1
 800f3f6:	d101      	bne.n	800f3fc <HAL_QSPI_Receive+0x36>
 800f3f8:	2302      	movs	r3, #2
 800f3fa:	e082      	b.n	800f502 <HAL_QSPI_Receive+0x13c>
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	2201      	movs	r2, #1
 800f400:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f40a:	b2db      	uxtb	r3, r3
 800f40c:	2b01      	cmp	r3, #1
 800f40e:	d171      	bne.n	800f4f4 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	2200      	movs	r2, #0
 800f414:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d062      	beq.n	800f4e2 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	2222      	movs	r2, #34	@ 0x22
 800f420:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	691b      	ldr	r3, [r3, #16]
 800f42a:	1c5a      	adds	r2, r3, #1
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	631a      	str	r2, [r3, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	691b      	ldr	r3, [r3, #16]
 800f436:	1c5a      	adds	r2, r3, #1
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->pRxBuffPtr = pData;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	68ba      	ldr	r2, [r7, #8]
 800f440:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	695b      	ldr	r3, [r3, #20]
 800f448:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800f454:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	697a      	ldr	r2, [r7, #20]
 800f45c:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800f45e:	e01c      	b.n	800f49a <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	9300      	str	r3, [sp, #0]
 800f464:	69bb      	ldr	r3, [r7, #24]
 800f466:	2201      	movs	r2, #1
 800f468:	2106      	movs	r1, #6
 800f46a:	68f8      	ldr	r0, [r7, #12]
 800f46c:	f000 f8d4 	bl	800f618 <QSPI_WaitFlagStateUntilTimeout>
 800f470:	4603      	mov	r3, r0
 800f472:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800f474:	7ffb      	ldrb	r3, [r7, #31]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d114      	bne.n	800f4a4 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f47e:	693a      	ldr	r2, [r7, #16]
 800f480:	7812      	ldrb	r2, [r2, #0]
 800f482:	b2d2      	uxtb	r2, r2
 800f484:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f48a:	1c5a      	adds	r2, r3, #1
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	629a      	str	r2, [r3, #40]	@ 0x28
        hqspi->RxXferCount--;
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f494:	1e5a      	subs	r2, r3, #1
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	631a      	str	r2, [r3, #48]	@ 0x30
      while(hqspi->RxXferCount > 0U)
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d1de      	bne.n	800f460 <HAL_QSPI_Receive+0x9a>
 800f4a2:	e000      	b.n	800f4a6 <HAL_QSPI_Receive+0xe0>
          break;
 800f4a4:	bf00      	nop
      }

      if (status == HAL_OK)
 800f4a6:	7ffb      	ldrb	r3, [r7, #31]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d115      	bne.n	800f4d8 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	9300      	str	r3, [sp, #0]
 800f4b0:	69bb      	ldr	r3, [r7, #24]
 800f4b2:	2201      	movs	r2, #1
 800f4b4:	2102      	movs	r1, #2
 800f4b6:	68f8      	ldr	r0, [r7, #12]
 800f4b8:	f000 f8ae 	bl	800f618 <QSPI_WaitFlagStateUntilTimeout>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800f4c0:	7ffb      	ldrb	r3, [r7, #31]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d108      	bne.n	800f4d8 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	2202      	movs	r2, #2
 800f4cc:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800f4ce:	68f8      	ldr	r0, [r7, #12]
 800f4d0:	f000 f81b 	bl	800f50a <HAL_QSPI_Abort>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	2201      	movs	r2, #1
 800f4dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f4e0:	e00a      	b.n	800f4f8 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4e6:	f043 0208 	orr.w	r2, r3, #8
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	77fb      	strb	r3, [r7, #31]
 800f4f2:	e001      	b.n	800f4f8 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800f4f4:	2302      	movs	r3, #2
 800f4f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800f500:	7ffb      	ldrb	r3, [r7, #31]
}
 800f502:	4618      	mov	r0, r3
 800f504:	3720      	adds	r7, #32
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}

0800f50a <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800f50a:	b580      	push	{r7, lr}
 800f50c:	b086      	sub	sp, #24
 800f50e:	af02      	add	r7, sp, #8
 800f510:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f512:	2300      	movs	r3, #0
 800f514:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800f516:	f7fb fda9 	bl	800b06c <HAL_GetTick>
 800f51a:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f522:	b2db      	uxtb	r3, r3
 800f524:	f003 0302 	and.w	r3, r3, #2
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d062      	beq.n	800f5f2 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2200      	movs	r2, #0
 800f530:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	f003 0304 	and.w	r3, r3, #4
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d017      	beq.n	800f572 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	681a      	ldr	r2, [r3, #0]
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f022 0204 	bic.w	r2, r2, #4
 800f550:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f556:	4618      	mov	r0, r3
 800f558:	f7fd fdce 	bl	800d0f8 <HAL_DMA_Abort>
 800f55c:	4603      	mov	r3, r0
 800f55e:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800f560:	7bfb      	ldrb	r3, [r7, #15]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d005      	beq.n	800f572 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f56a:	f043 0204 	orr.w	r2, r3, #4
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	689b      	ldr	r3, [r3, #8]
 800f578:	f003 0320 	and.w	r3, r3, #32
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d034      	beq.n	800f5ea <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	681a      	ldr	r2, [r3, #0]
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f042 0202 	orr.w	r2, r2, #2
 800f58e:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f594:	9300      	str	r3, [sp, #0]
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	2201      	movs	r2, #1
 800f59a:	2102      	movs	r1, #2
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f000 f83b 	bl	800f618 <QSPI_WaitFlagStateUntilTimeout>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 800f5a6:	7bfb      	ldrb	r3, [r7, #15]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d10e      	bne.n	800f5ca <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	2202      	movs	r2, #2
 800f5b2:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5b8:	9300      	str	r3, [sp, #0]
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	2120      	movs	r1, #32
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f000 f829 	bl	800f618 <QSPI_WaitFlagStateUntilTimeout>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800f5ca:	7bfb      	ldrb	r3, [r7, #15]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d110      	bne.n	800f5f2 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	695a      	ldr	r2, [r3, #20]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800f5de:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f5e8:	e003      	b.n	800f5f2 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2201      	movs	r2, #1
 800f5ee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    }
  }

  return status;
 800f5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3710      	adds	r7, #16
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}

0800f5fc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b083      	sub	sp, #12
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
 800f604:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	683a      	ldr	r2, [r7, #0]
 800f60a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800f60c:	bf00      	nop
 800f60e:	370c      	adds	r7, #12
 800f610:	46bd      	mov	sp, r7
 800f612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f616:	4770      	bx	lr

0800f618 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b084      	sub	sp, #16
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	60f8      	str	r0, [r7, #12]
 800f620:	60b9      	str	r1, [r7, #8]
 800f622:	603b      	str	r3, [r7, #0]
 800f624:	4613      	mov	r3, r2
 800f626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f628:	e01a      	b.n	800f660 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f62a:	69bb      	ldr	r3, [r7, #24]
 800f62c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f630:	d016      	beq.n	800f660 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f632:	f7fb fd1b 	bl	800b06c <HAL_GetTick>
 800f636:	4602      	mov	r2, r0
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	1ad3      	subs	r3, r2, r3
 800f63c:	69ba      	ldr	r2, [r7, #24]
 800f63e:	429a      	cmp	r2, r3
 800f640:	d302      	bcc.n	800f648 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800f642:	69bb      	ldr	r3, [r7, #24]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d10b      	bne.n	800f660 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	2204      	movs	r2, #4
 800f64c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f654:	f043 0201 	orr.w	r2, r3, #1
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800f65c:	2301      	movs	r3, #1
 800f65e:	e00e      	b.n	800f67e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	689a      	ldr	r2, [r3, #8]
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	4013      	ands	r3, r2
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	bf14      	ite	ne
 800f66e:	2301      	movne	r3, #1
 800f670:	2300      	moveq	r3, #0
 800f672:	b2db      	uxtb	r3, r3
 800f674:	461a      	mov	r2, r3
 800f676:	79fb      	ldrb	r3, [r7, #7]
 800f678:	429a      	cmp	r2, r3
 800f67a:	d1d6      	bne.n	800f62a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f67c:	2300      	movs	r3, #0
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3710      	adds	r7, #16
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}

0800f686 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800f686:	b480      	push	{r7}
 800f688:	b085      	sub	sp, #20
 800f68a:	af00      	add	r7, sp, #0
 800f68c:	60f8      	str	r0, [r7, #12]
 800f68e:	60b9      	str	r1, [r7, #8]
 800f690:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f696:	2b00      	cmp	r3, #0
 800f698:	d009      	beq.n	800f6ae <QSPI_Config+0x28>
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f6a0:	d005      	beq.n	800f6ae <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	3a01      	subs	r2, #1
 800f6ac:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	699b      	ldr	r3, [r3, #24]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	f000 80c1 	beq.w	800f83a <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	6a1b      	ldr	r3, [r3, #32]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d063      	beq.n	800f788 <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	68ba      	ldr	r2, [r7, #8]
 800f6c6:	6892      	ldr	r2, [r2, #8]
 800f6c8:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f6ca:	68bb      	ldr	r3, [r7, #8]
 800f6cc:	69db      	ldr	r3, [r3, #28]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d031      	beq.n	800f736 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6d6:	68bb      	ldr	r3, [r7, #8]
 800f6d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6da:	431a      	orrs	r2, r3
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f6e0:	431a      	orrs	r2, r3
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6e6:	431a      	orrs	r2, r3
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	695b      	ldr	r3, [r3, #20]
 800f6ec:	049b      	lsls	r3, r3, #18
 800f6ee:	431a      	orrs	r2, r3
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	691b      	ldr	r3, [r3, #16]
 800f6f4:	431a      	orrs	r2, r3
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	6a1b      	ldr	r3, [r3, #32]
 800f6fa:	431a      	orrs	r2, r3
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	68db      	ldr	r3, [r3, #12]
 800f700:	431a      	orrs	r2, r3
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	69db      	ldr	r3, [r3, #28]
 800f706:	431a      	orrs	r2, r3
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	699b      	ldr	r3, [r3, #24]
 800f70c:	431a      	orrs	r2, r3
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	ea42 0103 	orr.w	r1, r2, r3
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	687a      	ldr	r2, [r7, #4]
 800f71c:	430a      	orrs	r2, r1
 800f71e:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f726:	f000 813f 	beq.w	800f9a8 <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	68ba      	ldr	r2, [r7, #8]
 800f730:	6852      	ldr	r2, [r2, #4]
 800f732:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800f734:	e138      	b.n	800f9a8 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f73e:	431a      	orrs	r2, r3
 800f740:	68bb      	ldr	r3, [r7, #8]
 800f742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f744:	431a      	orrs	r2, r3
 800f746:	68bb      	ldr	r3, [r7, #8]
 800f748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f74a:	431a      	orrs	r2, r3
 800f74c:	68bb      	ldr	r3, [r7, #8]
 800f74e:	695b      	ldr	r3, [r3, #20]
 800f750:	049b      	lsls	r3, r3, #18
 800f752:	431a      	orrs	r2, r3
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	691b      	ldr	r3, [r3, #16]
 800f758:	431a      	orrs	r2, r3
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	6a1b      	ldr	r3, [r3, #32]
 800f75e:	431a      	orrs	r2, r3
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	69db      	ldr	r3, [r3, #28]
 800f764:	431a      	orrs	r2, r3
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	699b      	ldr	r3, [r3, #24]
 800f76a:	431a      	orrs	r2, r3
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	ea42 0103 	orr.w	r1, r2, r3
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	687a      	ldr	r2, [r7, #4]
 800f77a:	430a      	orrs	r2, r1
 800f77c:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	2200      	movs	r2, #0
 800f784:	619a      	str	r2, [r3, #24]
}
 800f786:	e10f      	b.n	800f9a8 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	69db      	ldr	r3, [r3, #28]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d02e      	beq.n	800f7ee <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f798:	431a      	orrs	r2, r3
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f79e:	431a      	orrs	r2, r3
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7a4:	431a      	orrs	r2, r3
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	695b      	ldr	r3, [r3, #20]
 800f7aa:	049b      	lsls	r3, r3, #18
 800f7ac:	431a      	orrs	r2, r3
 800f7ae:	68bb      	ldr	r3, [r7, #8]
 800f7b0:	6a1b      	ldr	r3, [r3, #32]
 800f7b2:	431a      	orrs	r2, r3
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	68db      	ldr	r3, [r3, #12]
 800f7b8:	431a      	orrs	r2, r3
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	69db      	ldr	r3, [r3, #28]
 800f7be:	431a      	orrs	r2, r3
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	699b      	ldr	r3, [r3, #24]
 800f7c4:	431a      	orrs	r2, r3
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	ea42 0103 	orr.w	r1, r2, r3
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	687a      	ldr	r2, [r7, #4]
 800f7d4:	430a      	orrs	r2, r1
 800f7d6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f7de:	f000 80e3 	beq.w	800f9a8 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	68ba      	ldr	r2, [r7, #8]
 800f7e8:	6852      	ldr	r2, [r2, #4]
 800f7ea:	619a      	str	r2, [r3, #24]
}
 800f7ec:	e0dc      	b.n	800f9a8 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7f2:	68bb      	ldr	r3, [r7, #8]
 800f7f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7f6:	431a      	orrs	r2, r3
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f7fc:	431a      	orrs	r2, r3
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f802:	431a      	orrs	r2, r3
 800f804:	68bb      	ldr	r3, [r7, #8]
 800f806:	695b      	ldr	r3, [r3, #20]
 800f808:	049b      	lsls	r3, r3, #18
 800f80a:	431a      	orrs	r2, r3
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	6a1b      	ldr	r3, [r3, #32]
 800f810:	431a      	orrs	r2, r3
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	69db      	ldr	r3, [r3, #28]
 800f816:	431a      	orrs	r2, r3
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	699b      	ldr	r3, [r3, #24]
 800f81c:	431a      	orrs	r2, r3
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	ea42 0103 	orr.w	r1, r2, r3
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	687a      	ldr	r2, [r7, #4]
 800f82c:	430a      	orrs	r2, r1
 800f82e:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	2200      	movs	r2, #0
 800f836:	619a      	str	r2, [r3, #24]
}
 800f838:	e0b6      	b.n	800f9a8 <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	6a1b      	ldr	r3, [r3, #32]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d05d      	beq.n	800f8fe <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	68ba      	ldr	r2, [r7, #8]
 800f848:	6892      	ldr	r2, [r2, #8]
 800f84a:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	69db      	ldr	r3, [r3, #28]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d02e      	beq.n	800f8b2 <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f85c:	431a      	orrs	r2, r3
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f862:	431a      	orrs	r2, r3
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f868:	431a      	orrs	r2, r3
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	695b      	ldr	r3, [r3, #20]
 800f86e:	049b      	lsls	r3, r3, #18
 800f870:	431a      	orrs	r2, r3
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	691b      	ldr	r3, [r3, #16]
 800f876:	431a      	orrs	r2, r3
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	6a1b      	ldr	r3, [r3, #32]
 800f87c:	431a      	orrs	r2, r3
 800f87e:	68bb      	ldr	r3, [r7, #8]
 800f880:	68db      	ldr	r3, [r3, #12]
 800f882:	431a      	orrs	r2, r3
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	69db      	ldr	r3, [r3, #28]
 800f888:	431a      	orrs	r2, r3
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	699b      	ldr	r3, [r3, #24]
 800f88e:	ea42 0103 	orr.w	r1, r2, r3
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	687a      	ldr	r2, [r7, #4]
 800f898:	430a      	orrs	r2, r1
 800f89a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f8a2:	f000 8081 	beq.w	800f9a8 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	68ba      	ldr	r2, [r7, #8]
 800f8ac:	6852      	ldr	r2, [r2, #4]
 800f8ae:	619a      	str	r2, [r3, #24]
}
 800f8b0:	e07a      	b.n	800f9a8 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8ba:	431a      	orrs	r2, r3
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8c0:	431a      	orrs	r2, r3
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8c6:	431a      	orrs	r2, r3
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	695b      	ldr	r3, [r3, #20]
 800f8cc:	049b      	lsls	r3, r3, #18
 800f8ce:	431a      	orrs	r2, r3
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	691b      	ldr	r3, [r3, #16]
 800f8d4:	431a      	orrs	r2, r3
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	6a1b      	ldr	r3, [r3, #32]
 800f8da:	431a      	orrs	r2, r3
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	69db      	ldr	r3, [r3, #28]
 800f8e0:	431a      	orrs	r2, r3
 800f8e2:	68bb      	ldr	r3, [r7, #8]
 800f8e4:	699b      	ldr	r3, [r3, #24]
 800f8e6:	ea42 0103 	orr.w	r1, r2, r3
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	687a      	ldr	r2, [r7, #4]
 800f8f0:	430a      	orrs	r2, r1
 800f8f2:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	619a      	str	r2, [r3, #24]
}
 800f8fc:	e054      	b.n	800f9a8 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	69db      	ldr	r3, [r3, #28]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d02a      	beq.n	800f95c <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f906:	68bb      	ldr	r3, [r7, #8]
 800f908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f90a:	68bb      	ldr	r3, [r7, #8]
 800f90c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f90e:	431a      	orrs	r2, r3
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f914:	431a      	orrs	r2, r3
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f91a:	431a      	orrs	r2, r3
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	695b      	ldr	r3, [r3, #20]
 800f920:	049b      	lsls	r3, r3, #18
 800f922:	431a      	orrs	r2, r3
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	6a1b      	ldr	r3, [r3, #32]
 800f928:	431a      	orrs	r2, r3
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	68db      	ldr	r3, [r3, #12]
 800f92e:	431a      	orrs	r2, r3
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	69db      	ldr	r3, [r3, #28]
 800f934:	431a      	orrs	r2, r3
 800f936:	68bb      	ldr	r3, [r7, #8]
 800f938:	699b      	ldr	r3, [r3, #24]
 800f93a:	ea42 0103 	orr.w	r1, r2, r3
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	687a      	ldr	r2, [r7, #4]
 800f944:	430a      	orrs	r2, r1
 800f946:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f94e:	d02b      	beq.n	800f9a8 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	68ba      	ldr	r2, [r7, #8]
 800f956:	6852      	ldr	r2, [r2, #4]
 800f958:	619a      	str	r2, [r3, #24]
}
 800f95a:	e025      	b.n	800f9a8 <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f960:	2b00      	cmp	r3, #0
 800f962:	d021      	beq.n	800f9a8 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f968:	68bb      	ldr	r3, [r7, #8]
 800f96a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f96c:	431a      	orrs	r2, r3
 800f96e:	68bb      	ldr	r3, [r7, #8]
 800f970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f972:	431a      	orrs	r2, r3
 800f974:	68bb      	ldr	r3, [r7, #8]
 800f976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f978:	431a      	orrs	r2, r3
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	695b      	ldr	r3, [r3, #20]
 800f97e:	049b      	lsls	r3, r3, #18
 800f980:	431a      	orrs	r2, r3
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	6a1b      	ldr	r3, [r3, #32]
 800f986:	431a      	orrs	r2, r3
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	69db      	ldr	r3, [r3, #28]
 800f98c:	431a      	orrs	r2, r3
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	699b      	ldr	r3, [r3, #24]
 800f992:	ea42 0103 	orr.w	r1, r2, r3
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	687a      	ldr	r2, [r7, #4]
 800f99c:	430a      	orrs	r2, r1
 800f99e:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	619a      	str	r2, [r3, #24]
}
 800f9a8:	bf00      	nop
 800f9aa:	3714      	adds	r7, #20
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b2:	4770      	bx	lr

0800f9b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b088      	sub	sp, #32
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d101      	bne.n	800f9c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	e3ca      	b.n	801015c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f9c6:	4b97      	ldr	r3, [pc, #604]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800f9c8:	689b      	ldr	r3, [r3, #8]
 800f9ca:	f003 030c 	and.w	r3, r3, #12
 800f9ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f9d0:	4b94      	ldr	r3, [pc, #592]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800f9d2:	68db      	ldr	r3, [r3, #12]
 800f9d4:	f003 0303 	and.w	r3, r3, #3
 800f9d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	f003 0310 	and.w	r3, r3, #16
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	f000 80e4 	beq.w	800fbb0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800f9e8:	69bb      	ldr	r3, [r7, #24]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d007      	beq.n	800f9fe <HAL_RCC_OscConfig+0x4a>
 800f9ee:	69bb      	ldr	r3, [r7, #24]
 800f9f0:	2b0c      	cmp	r3, #12
 800f9f2:	f040 808b 	bne.w	800fb0c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	2b01      	cmp	r3, #1
 800f9fa:	f040 8087 	bne.w	800fb0c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f9fe:	4b89      	ldr	r3, [pc, #548]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	f003 0302 	and.w	r3, r3, #2
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d005      	beq.n	800fa16 <HAL_RCC_OscConfig+0x62>
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	699b      	ldr	r3, [r3, #24]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d101      	bne.n	800fa16 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800fa12:	2301      	movs	r3, #1
 800fa14:	e3a2      	b.n	801015c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6a1a      	ldr	r2, [r3, #32]
 800fa1a:	4b82      	ldr	r3, [pc, #520]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	f003 0308 	and.w	r3, r3, #8
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d004      	beq.n	800fa30 <HAL_RCC_OscConfig+0x7c>
 800fa26:	4b7f      	ldr	r3, [pc, #508]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fa2e:	e005      	b.n	800fa3c <HAL_RCC_OscConfig+0x88>
 800fa30:	4b7c      	ldr	r3, [pc, #496]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fa32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fa36:	091b      	lsrs	r3, r3, #4
 800fa38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fa3c:	4293      	cmp	r3, r2
 800fa3e:	d223      	bcs.n	800fa88 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	6a1b      	ldr	r3, [r3, #32]
 800fa44:	4618      	mov	r0, r3
 800fa46:	f000 fd55 	bl	80104f4 <RCC_SetFlashLatencyFromMSIRange>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d001      	beq.n	800fa54 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800fa50:	2301      	movs	r3, #1
 800fa52:	e383      	b.n	801015c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fa54:	4b73      	ldr	r3, [pc, #460]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	4a72      	ldr	r2, [pc, #456]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fa5a:	f043 0308 	orr.w	r3, r3, #8
 800fa5e:	6013      	str	r3, [r2, #0]
 800fa60:	4b70      	ldr	r3, [pc, #448]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6a1b      	ldr	r3, [r3, #32]
 800fa6c:	496d      	ldr	r1, [pc, #436]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fa6e:	4313      	orrs	r3, r2
 800fa70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fa72:	4b6c      	ldr	r3, [pc, #432]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fa74:	685b      	ldr	r3, [r3, #4]
 800fa76:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	69db      	ldr	r3, [r3, #28]
 800fa7e:	021b      	lsls	r3, r3, #8
 800fa80:	4968      	ldr	r1, [pc, #416]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fa82:	4313      	orrs	r3, r2
 800fa84:	604b      	str	r3, [r1, #4]
 800fa86:	e025      	b.n	800fad4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fa88:	4b66      	ldr	r3, [pc, #408]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	4a65      	ldr	r2, [pc, #404]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fa8e:	f043 0308 	orr.w	r3, r3, #8
 800fa92:	6013      	str	r3, [r2, #0]
 800fa94:	4b63      	ldr	r3, [pc, #396]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	6a1b      	ldr	r3, [r3, #32]
 800faa0:	4960      	ldr	r1, [pc, #384]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800faa2:	4313      	orrs	r3, r2
 800faa4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800faa6:	4b5f      	ldr	r3, [pc, #380]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800faa8:	685b      	ldr	r3, [r3, #4]
 800faaa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	69db      	ldr	r3, [r3, #28]
 800fab2:	021b      	lsls	r3, r3, #8
 800fab4:	495b      	ldr	r1, [pc, #364]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fab6:	4313      	orrs	r3, r2
 800fab8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800faba:	69bb      	ldr	r3, [r7, #24]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d109      	bne.n	800fad4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	6a1b      	ldr	r3, [r3, #32]
 800fac4:	4618      	mov	r0, r3
 800fac6:	f000 fd15 	bl	80104f4 <RCC_SetFlashLatencyFromMSIRange>
 800faca:	4603      	mov	r3, r0
 800facc:	2b00      	cmp	r3, #0
 800face:	d001      	beq.n	800fad4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800fad0:	2301      	movs	r3, #1
 800fad2:	e343      	b.n	801015c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800fad4:	f000 fc4a 	bl	801036c <HAL_RCC_GetSysClockFreq>
 800fad8:	4602      	mov	r2, r0
 800fada:	4b52      	ldr	r3, [pc, #328]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fadc:	689b      	ldr	r3, [r3, #8]
 800fade:	091b      	lsrs	r3, r3, #4
 800fae0:	f003 030f 	and.w	r3, r3, #15
 800fae4:	4950      	ldr	r1, [pc, #320]	@ (800fc28 <HAL_RCC_OscConfig+0x274>)
 800fae6:	5ccb      	ldrb	r3, [r1, r3]
 800fae8:	f003 031f 	and.w	r3, r3, #31
 800faec:	fa22 f303 	lsr.w	r3, r2, r3
 800faf0:	4a4e      	ldr	r2, [pc, #312]	@ (800fc2c <HAL_RCC_OscConfig+0x278>)
 800faf2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800faf4:	4b4e      	ldr	r3, [pc, #312]	@ (800fc30 <HAL_RCC_OscConfig+0x27c>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	4618      	mov	r0, r3
 800fafa:	f7fb fa67 	bl	800afcc <HAL_InitTick>
 800fafe:	4603      	mov	r3, r0
 800fb00:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800fb02:	7bfb      	ldrb	r3, [r7, #15]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d052      	beq.n	800fbae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800fb08:	7bfb      	ldrb	r3, [r7, #15]
 800fb0a:	e327      	b.n	801015c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	699b      	ldr	r3, [r3, #24]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d032      	beq.n	800fb7a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800fb14:	4b43      	ldr	r3, [pc, #268]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	4a42      	ldr	r2, [pc, #264]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fb1a:	f043 0301 	orr.w	r3, r3, #1
 800fb1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800fb20:	f7fb faa4 	bl	800b06c <HAL_GetTick>
 800fb24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800fb26:	e008      	b.n	800fb3a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fb28:	f7fb faa0 	bl	800b06c <HAL_GetTick>
 800fb2c:	4602      	mov	r2, r0
 800fb2e:	693b      	ldr	r3, [r7, #16]
 800fb30:	1ad3      	subs	r3, r2, r3
 800fb32:	2b02      	cmp	r3, #2
 800fb34:	d901      	bls.n	800fb3a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800fb36:	2303      	movs	r3, #3
 800fb38:	e310      	b.n	801015c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800fb3a:	4b3a      	ldr	r3, [pc, #232]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	f003 0302 	and.w	r3, r3, #2
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d0f0      	beq.n	800fb28 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fb46:	4b37      	ldr	r3, [pc, #220]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	4a36      	ldr	r2, [pc, #216]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fb4c:	f043 0308 	orr.w	r3, r3, #8
 800fb50:	6013      	str	r3, [r2, #0]
 800fb52:	4b34      	ldr	r3, [pc, #208]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	6a1b      	ldr	r3, [r3, #32]
 800fb5e:	4931      	ldr	r1, [pc, #196]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fb60:	4313      	orrs	r3, r2
 800fb62:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fb64:	4b2f      	ldr	r3, [pc, #188]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fb66:	685b      	ldr	r3, [r3, #4]
 800fb68:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	69db      	ldr	r3, [r3, #28]
 800fb70:	021b      	lsls	r3, r3, #8
 800fb72:	492c      	ldr	r1, [pc, #176]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fb74:	4313      	orrs	r3, r2
 800fb76:	604b      	str	r3, [r1, #4]
 800fb78:	e01a      	b.n	800fbb0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800fb7a:	4b2a      	ldr	r3, [pc, #168]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	4a29      	ldr	r2, [pc, #164]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fb80:	f023 0301 	bic.w	r3, r3, #1
 800fb84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800fb86:	f7fb fa71 	bl	800b06c <HAL_GetTick>
 800fb8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800fb8c:	e008      	b.n	800fba0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fb8e:	f7fb fa6d 	bl	800b06c <HAL_GetTick>
 800fb92:	4602      	mov	r2, r0
 800fb94:	693b      	ldr	r3, [r7, #16]
 800fb96:	1ad3      	subs	r3, r2, r3
 800fb98:	2b02      	cmp	r3, #2
 800fb9a:	d901      	bls.n	800fba0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800fb9c:	2303      	movs	r3, #3
 800fb9e:	e2dd      	b.n	801015c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800fba0:	4b20      	ldr	r3, [pc, #128]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	f003 0302 	and.w	r3, r3, #2
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d1f0      	bne.n	800fb8e <HAL_RCC_OscConfig+0x1da>
 800fbac:	e000      	b.n	800fbb0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800fbae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	f003 0301 	and.w	r3, r3, #1
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d074      	beq.n	800fca6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800fbbc:	69bb      	ldr	r3, [r7, #24]
 800fbbe:	2b08      	cmp	r3, #8
 800fbc0:	d005      	beq.n	800fbce <HAL_RCC_OscConfig+0x21a>
 800fbc2:	69bb      	ldr	r3, [r7, #24]
 800fbc4:	2b0c      	cmp	r3, #12
 800fbc6:	d10e      	bne.n	800fbe6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	2b03      	cmp	r3, #3
 800fbcc:	d10b      	bne.n	800fbe6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fbce:	4b15      	ldr	r3, [pc, #84]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d064      	beq.n	800fca4 <HAL_RCC_OscConfig+0x2f0>
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	685b      	ldr	r3, [r3, #4]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d160      	bne.n	800fca4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800fbe2:	2301      	movs	r3, #1
 800fbe4:	e2ba      	b.n	801015c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	685b      	ldr	r3, [r3, #4]
 800fbea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fbee:	d106      	bne.n	800fbfe <HAL_RCC_OscConfig+0x24a>
 800fbf0:	4b0c      	ldr	r3, [pc, #48]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	4a0b      	ldr	r2, [pc, #44]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fbf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fbfa:	6013      	str	r3, [r2, #0]
 800fbfc:	e026      	b.n	800fc4c <HAL_RCC_OscConfig+0x298>
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	685b      	ldr	r3, [r3, #4]
 800fc02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800fc06:	d115      	bne.n	800fc34 <HAL_RCC_OscConfig+0x280>
 800fc08:	4b06      	ldr	r3, [pc, #24]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	4a05      	ldr	r2, [pc, #20]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fc0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800fc12:	6013      	str	r3, [r2, #0]
 800fc14:	4b03      	ldr	r3, [pc, #12]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	4a02      	ldr	r2, [pc, #8]	@ (800fc24 <HAL_RCC_OscConfig+0x270>)
 800fc1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fc1e:	6013      	str	r3, [r2, #0]
 800fc20:	e014      	b.n	800fc4c <HAL_RCC_OscConfig+0x298>
 800fc22:	bf00      	nop
 800fc24:	40021000 	.word	0x40021000
 800fc28:	08017944 	.word	0x08017944
 800fc2c:	20000268 	.word	0x20000268
 800fc30:	20000274 	.word	0x20000274
 800fc34:	4ba0      	ldr	r3, [pc, #640]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	4a9f      	ldr	r2, [pc, #636]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fc3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fc3e:	6013      	str	r3, [r2, #0]
 800fc40:	4b9d      	ldr	r3, [pc, #628]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	4a9c      	ldr	r2, [pc, #624]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fc46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800fc4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d013      	beq.n	800fc7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fc54:	f7fb fa0a 	bl	800b06c <HAL_GetTick>
 800fc58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800fc5a:	e008      	b.n	800fc6e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fc5c:	f7fb fa06 	bl	800b06c <HAL_GetTick>
 800fc60:	4602      	mov	r2, r0
 800fc62:	693b      	ldr	r3, [r7, #16]
 800fc64:	1ad3      	subs	r3, r2, r3
 800fc66:	2b64      	cmp	r3, #100	@ 0x64
 800fc68:	d901      	bls.n	800fc6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800fc6a:	2303      	movs	r3, #3
 800fc6c:	e276      	b.n	801015c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800fc6e:	4b92      	ldr	r3, [pc, #584]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d0f0      	beq.n	800fc5c <HAL_RCC_OscConfig+0x2a8>
 800fc7a:	e014      	b.n	800fca6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fc7c:	f7fb f9f6 	bl	800b06c <HAL_GetTick>
 800fc80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800fc82:	e008      	b.n	800fc96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fc84:	f7fb f9f2 	bl	800b06c <HAL_GetTick>
 800fc88:	4602      	mov	r2, r0
 800fc8a:	693b      	ldr	r3, [r7, #16]
 800fc8c:	1ad3      	subs	r3, r2, r3
 800fc8e:	2b64      	cmp	r3, #100	@ 0x64
 800fc90:	d901      	bls.n	800fc96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800fc92:	2303      	movs	r3, #3
 800fc94:	e262      	b.n	801015c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800fc96:	4b88      	ldr	r3, [pc, #544]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d1f0      	bne.n	800fc84 <HAL_RCC_OscConfig+0x2d0>
 800fca2:	e000      	b.n	800fca6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	f003 0302 	and.w	r3, r3, #2
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d060      	beq.n	800fd74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800fcb2:	69bb      	ldr	r3, [r7, #24]
 800fcb4:	2b04      	cmp	r3, #4
 800fcb6:	d005      	beq.n	800fcc4 <HAL_RCC_OscConfig+0x310>
 800fcb8:	69bb      	ldr	r3, [r7, #24]
 800fcba:	2b0c      	cmp	r3, #12
 800fcbc:	d119      	bne.n	800fcf2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800fcbe:	697b      	ldr	r3, [r7, #20]
 800fcc0:	2b02      	cmp	r3, #2
 800fcc2:	d116      	bne.n	800fcf2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800fcc4:	4b7c      	ldr	r3, [pc, #496]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d005      	beq.n	800fcdc <HAL_RCC_OscConfig+0x328>
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	68db      	ldr	r3, [r3, #12]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d101      	bne.n	800fcdc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800fcd8:	2301      	movs	r3, #1
 800fcda:	e23f      	b.n	801015c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fcdc:	4b76      	ldr	r3, [pc, #472]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fcde:	685b      	ldr	r3, [r3, #4]
 800fce0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	691b      	ldr	r3, [r3, #16]
 800fce8:	061b      	lsls	r3, r3, #24
 800fcea:	4973      	ldr	r1, [pc, #460]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fcec:	4313      	orrs	r3, r2
 800fcee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800fcf0:	e040      	b.n	800fd74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	68db      	ldr	r3, [r3, #12]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d023      	beq.n	800fd42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800fcfa:	4b6f      	ldr	r3, [pc, #444]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	4a6e      	ldr	r2, [pc, #440]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fd00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fd04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fd06:	f7fb f9b1 	bl	800b06c <HAL_GetTick>
 800fd0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800fd0c:	e008      	b.n	800fd20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fd0e:	f7fb f9ad 	bl	800b06c <HAL_GetTick>
 800fd12:	4602      	mov	r2, r0
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	1ad3      	subs	r3, r2, r3
 800fd18:	2b02      	cmp	r3, #2
 800fd1a:	d901      	bls.n	800fd20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800fd1c:	2303      	movs	r3, #3
 800fd1e:	e21d      	b.n	801015c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800fd20:	4b65      	ldr	r3, [pc, #404]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d0f0      	beq.n	800fd0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fd2c:	4b62      	ldr	r3, [pc, #392]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fd2e:	685b      	ldr	r3, [r3, #4]
 800fd30:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	691b      	ldr	r3, [r3, #16]
 800fd38:	061b      	lsls	r3, r3, #24
 800fd3a:	495f      	ldr	r1, [pc, #380]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fd3c:	4313      	orrs	r3, r2
 800fd3e:	604b      	str	r3, [r1, #4]
 800fd40:	e018      	b.n	800fd74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800fd42:	4b5d      	ldr	r3, [pc, #372]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	4a5c      	ldr	r2, [pc, #368]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fd48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fd4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fd4e:	f7fb f98d 	bl	800b06c <HAL_GetTick>
 800fd52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800fd54:	e008      	b.n	800fd68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fd56:	f7fb f989 	bl	800b06c <HAL_GetTick>
 800fd5a:	4602      	mov	r2, r0
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	1ad3      	subs	r3, r2, r3
 800fd60:	2b02      	cmp	r3, #2
 800fd62:	d901      	bls.n	800fd68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800fd64:	2303      	movs	r3, #3
 800fd66:	e1f9      	b.n	801015c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800fd68:	4b53      	ldr	r3, [pc, #332]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d1f0      	bne.n	800fd56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	f003 0308 	and.w	r3, r3, #8
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d03c      	beq.n	800fdfa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	695b      	ldr	r3, [r3, #20]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d01c      	beq.n	800fdc2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fd88:	4b4b      	ldr	r3, [pc, #300]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fd8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fd8e:	4a4a      	ldr	r2, [pc, #296]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fd90:	f043 0301 	orr.w	r3, r3, #1
 800fd94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fd98:	f7fb f968 	bl	800b06c <HAL_GetTick>
 800fd9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800fd9e:	e008      	b.n	800fdb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fda0:	f7fb f964 	bl	800b06c <HAL_GetTick>
 800fda4:	4602      	mov	r2, r0
 800fda6:	693b      	ldr	r3, [r7, #16]
 800fda8:	1ad3      	subs	r3, r2, r3
 800fdaa:	2b02      	cmp	r3, #2
 800fdac:	d901      	bls.n	800fdb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800fdae:	2303      	movs	r3, #3
 800fdb0:	e1d4      	b.n	801015c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800fdb2:	4b41      	ldr	r3, [pc, #260]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fdb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fdb8:	f003 0302 	and.w	r3, r3, #2
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d0ef      	beq.n	800fda0 <HAL_RCC_OscConfig+0x3ec>
 800fdc0:	e01b      	b.n	800fdfa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fdc2:	4b3d      	ldr	r3, [pc, #244]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fdc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fdc8:	4a3b      	ldr	r2, [pc, #236]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fdca:	f023 0301 	bic.w	r3, r3, #1
 800fdce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fdd2:	f7fb f94b 	bl	800b06c <HAL_GetTick>
 800fdd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800fdd8:	e008      	b.n	800fdec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fdda:	f7fb f947 	bl	800b06c <HAL_GetTick>
 800fdde:	4602      	mov	r2, r0
 800fde0:	693b      	ldr	r3, [r7, #16]
 800fde2:	1ad3      	subs	r3, r2, r3
 800fde4:	2b02      	cmp	r3, #2
 800fde6:	d901      	bls.n	800fdec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800fde8:	2303      	movs	r3, #3
 800fdea:	e1b7      	b.n	801015c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800fdec:	4b32      	ldr	r3, [pc, #200]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fdee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fdf2:	f003 0302 	and.w	r3, r3, #2
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d1ef      	bne.n	800fdda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	f003 0304 	and.w	r3, r3, #4
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	f000 80a6 	beq.w	800ff54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800fe0c:	4b2a      	ldr	r3, [pc, #168]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fe0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fe10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d10d      	bne.n	800fe34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fe18:	4b27      	ldr	r3, [pc, #156]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fe1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fe1c:	4a26      	ldr	r2, [pc, #152]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fe1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fe22:	6593      	str	r3, [r2, #88]	@ 0x58
 800fe24:	4b24      	ldr	r3, [pc, #144]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fe26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fe28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fe2c:	60bb      	str	r3, [r7, #8]
 800fe2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800fe30:	2301      	movs	r3, #1
 800fe32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fe34:	4b21      	ldr	r3, [pc, #132]	@ (800febc <HAL_RCC_OscConfig+0x508>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d118      	bne.n	800fe72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fe40:	4b1e      	ldr	r3, [pc, #120]	@ (800febc <HAL_RCC_OscConfig+0x508>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	4a1d      	ldr	r2, [pc, #116]	@ (800febc <HAL_RCC_OscConfig+0x508>)
 800fe46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fe4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fe4c:	f7fb f90e 	bl	800b06c <HAL_GetTick>
 800fe50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fe52:	e008      	b.n	800fe66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fe54:	f7fb f90a 	bl	800b06c <HAL_GetTick>
 800fe58:	4602      	mov	r2, r0
 800fe5a:	693b      	ldr	r3, [r7, #16]
 800fe5c:	1ad3      	subs	r3, r2, r3
 800fe5e:	2b02      	cmp	r3, #2
 800fe60:	d901      	bls.n	800fe66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800fe62:	2303      	movs	r3, #3
 800fe64:	e17a      	b.n	801015c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fe66:	4b15      	ldr	r3, [pc, #84]	@ (800febc <HAL_RCC_OscConfig+0x508>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d0f0      	beq.n	800fe54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	689b      	ldr	r3, [r3, #8]
 800fe76:	2b01      	cmp	r3, #1
 800fe78:	d108      	bne.n	800fe8c <HAL_RCC_OscConfig+0x4d8>
 800fe7a:	4b0f      	ldr	r3, [pc, #60]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fe7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe80:	4a0d      	ldr	r2, [pc, #52]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fe82:	f043 0301 	orr.w	r3, r3, #1
 800fe86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800fe8a:	e029      	b.n	800fee0 <HAL_RCC_OscConfig+0x52c>
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	689b      	ldr	r3, [r3, #8]
 800fe90:	2b05      	cmp	r3, #5
 800fe92:	d115      	bne.n	800fec0 <HAL_RCC_OscConfig+0x50c>
 800fe94:	4b08      	ldr	r3, [pc, #32]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fe96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe9a:	4a07      	ldr	r2, [pc, #28]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fe9c:	f043 0304 	orr.w	r3, r3, #4
 800fea0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800fea4:	4b04      	ldr	r3, [pc, #16]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800fea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800feaa:	4a03      	ldr	r2, [pc, #12]	@ (800feb8 <HAL_RCC_OscConfig+0x504>)
 800feac:	f043 0301 	orr.w	r3, r3, #1
 800feb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800feb4:	e014      	b.n	800fee0 <HAL_RCC_OscConfig+0x52c>
 800feb6:	bf00      	nop
 800feb8:	40021000 	.word	0x40021000
 800febc:	40007000 	.word	0x40007000
 800fec0:	4b9c      	ldr	r3, [pc, #624]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 800fec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fec6:	4a9b      	ldr	r2, [pc, #620]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 800fec8:	f023 0301 	bic.w	r3, r3, #1
 800fecc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800fed0:	4b98      	ldr	r3, [pc, #608]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 800fed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fed6:	4a97      	ldr	r2, [pc, #604]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 800fed8:	f023 0304 	bic.w	r3, r3, #4
 800fedc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	689b      	ldr	r3, [r3, #8]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d016      	beq.n	800ff16 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fee8:	f7fb f8c0 	bl	800b06c <HAL_GetTick>
 800feec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800feee:	e00a      	b.n	800ff06 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fef0:	f7fb f8bc 	bl	800b06c <HAL_GetTick>
 800fef4:	4602      	mov	r2, r0
 800fef6:	693b      	ldr	r3, [r7, #16]
 800fef8:	1ad3      	subs	r3, r2, r3
 800fefa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fefe:	4293      	cmp	r3, r2
 800ff00:	d901      	bls.n	800ff06 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800ff02:	2303      	movs	r3, #3
 800ff04:	e12a      	b.n	801015c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ff06:	4b8b      	ldr	r3, [pc, #556]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 800ff08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff0c:	f003 0302 	and.w	r3, r3, #2
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d0ed      	beq.n	800fef0 <HAL_RCC_OscConfig+0x53c>
 800ff14:	e015      	b.n	800ff42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ff16:	f7fb f8a9 	bl	800b06c <HAL_GetTick>
 800ff1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ff1c:	e00a      	b.n	800ff34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ff1e:	f7fb f8a5 	bl	800b06c <HAL_GetTick>
 800ff22:	4602      	mov	r2, r0
 800ff24:	693b      	ldr	r3, [r7, #16]
 800ff26:	1ad3      	subs	r3, r2, r3
 800ff28:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff2c:	4293      	cmp	r3, r2
 800ff2e:	d901      	bls.n	800ff34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800ff30:	2303      	movs	r3, #3
 800ff32:	e113      	b.n	801015c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ff34:	4b7f      	ldr	r3, [pc, #508]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 800ff36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff3a:	f003 0302 	and.w	r3, r3, #2
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d1ed      	bne.n	800ff1e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ff42:	7ffb      	ldrb	r3, [r7, #31]
 800ff44:	2b01      	cmp	r3, #1
 800ff46:	d105      	bne.n	800ff54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ff48:	4b7a      	ldr	r3, [pc, #488]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 800ff4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ff4c:	4a79      	ldr	r2, [pc, #484]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 800ff4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ff52:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	f000 80fe 	beq.w	801015a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff62:	2b02      	cmp	r3, #2
 800ff64:	f040 80d0 	bne.w	8010108 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800ff68:	4b72      	ldr	r3, [pc, #456]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 800ff6a:	68db      	ldr	r3, [r3, #12]
 800ff6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	f003 0203 	and.w	r2, r3, #3
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d130      	bne.n	800ffde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff86:	3b01      	subs	r3, #1
 800ff88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ff8a:	429a      	cmp	r2, r3
 800ff8c:	d127      	bne.n	800ffde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ff8e:	697b      	ldr	r3, [r7, #20]
 800ff90:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff98:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d11f      	bne.n	800ffde <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800ff9e:	697b      	ldr	r3, [r7, #20]
 800ffa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ffa4:	687a      	ldr	r2, [r7, #4]
 800ffa6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ffa8:	2a07      	cmp	r2, #7
 800ffaa:	bf14      	ite	ne
 800ffac:	2201      	movne	r2, #1
 800ffae:	2200      	moveq	r2, #0
 800ffb0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ffb2:	4293      	cmp	r3, r2
 800ffb4:	d113      	bne.n	800ffde <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ffb6:	697b      	ldr	r3, [r7, #20]
 800ffb8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffc0:	085b      	lsrs	r3, r3, #1
 800ffc2:	3b01      	subs	r3, #1
 800ffc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d109      	bne.n	800ffde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ffca:	697b      	ldr	r3, [r7, #20]
 800ffcc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffd4:	085b      	lsrs	r3, r3, #1
 800ffd6:	3b01      	subs	r3, #1
 800ffd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ffda:	429a      	cmp	r2, r3
 800ffdc:	d06e      	beq.n	80100bc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ffde:	69bb      	ldr	r3, [r7, #24]
 800ffe0:	2b0c      	cmp	r3, #12
 800ffe2:	d069      	beq.n	80100b8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ffe4:	4b53      	ldr	r3, [pc, #332]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d105      	bne.n	800fffc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800fff0:	4b50      	ldr	r3, [pc, #320]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d001      	beq.n	8010000 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800fffc:	2301      	movs	r3, #1
 800fffe:	e0ad      	b.n	801015c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8010000:	4b4c      	ldr	r3, [pc, #304]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	4a4b      	ldr	r2, [pc, #300]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 8010006:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801000a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801000c:	f7fb f82e 	bl	800b06c <HAL_GetTick>
 8010010:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010012:	e008      	b.n	8010026 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010014:	f7fb f82a 	bl	800b06c <HAL_GetTick>
 8010018:	4602      	mov	r2, r0
 801001a:	693b      	ldr	r3, [r7, #16]
 801001c:	1ad3      	subs	r3, r2, r3
 801001e:	2b02      	cmp	r3, #2
 8010020:	d901      	bls.n	8010026 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8010022:	2303      	movs	r3, #3
 8010024:	e09a      	b.n	801015c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010026:	4b43      	ldr	r3, [pc, #268]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801002e:	2b00      	cmp	r3, #0
 8010030:	d1f0      	bne.n	8010014 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010032:	4b40      	ldr	r3, [pc, #256]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 8010034:	68da      	ldr	r2, [r3, #12]
 8010036:	4b40      	ldr	r3, [pc, #256]	@ (8010138 <HAL_RCC_OscConfig+0x784>)
 8010038:	4013      	ands	r3, r2
 801003a:	687a      	ldr	r2, [r7, #4]
 801003c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 801003e:	687a      	ldr	r2, [r7, #4]
 8010040:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010042:	3a01      	subs	r2, #1
 8010044:	0112      	lsls	r2, r2, #4
 8010046:	4311      	orrs	r1, r2
 8010048:	687a      	ldr	r2, [r7, #4]
 801004a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801004c:	0212      	lsls	r2, r2, #8
 801004e:	4311      	orrs	r1, r2
 8010050:	687a      	ldr	r2, [r7, #4]
 8010052:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8010054:	0852      	lsrs	r2, r2, #1
 8010056:	3a01      	subs	r2, #1
 8010058:	0552      	lsls	r2, r2, #21
 801005a:	4311      	orrs	r1, r2
 801005c:	687a      	ldr	r2, [r7, #4]
 801005e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8010060:	0852      	lsrs	r2, r2, #1
 8010062:	3a01      	subs	r2, #1
 8010064:	0652      	lsls	r2, r2, #25
 8010066:	4311      	orrs	r1, r2
 8010068:	687a      	ldr	r2, [r7, #4]
 801006a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 801006c:	0912      	lsrs	r2, r2, #4
 801006e:	0452      	lsls	r2, r2, #17
 8010070:	430a      	orrs	r2, r1
 8010072:	4930      	ldr	r1, [pc, #192]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 8010074:	4313      	orrs	r3, r2
 8010076:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8010078:	4b2e      	ldr	r3, [pc, #184]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	4a2d      	ldr	r2, [pc, #180]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 801007e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010082:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8010084:	4b2b      	ldr	r3, [pc, #172]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 8010086:	68db      	ldr	r3, [r3, #12]
 8010088:	4a2a      	ldr	r2, [pc, #168]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 801008a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801008e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8010090:	f7fa ffec 	bl	800b06c <HAL_GetTick>
 8010094:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010096:	e008      	b.n	80100aa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010098:	f7fa ffe8 	bl	800b06c <HAL_GetTick>
 801009c:	4602      	mov	r2, r0
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	1ad3      	subs	r3, r2, r3
 80100a2:	2b02      	cmp	r3, #2
 80100a4:	d901      	bls.n	80100aa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80100a6:	2303      	movs	r3, #3
 80100a8:	e058      	b.n	801015c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80100aa:	4b22      	ldr	r3, [pc, #136]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d0f0      	beq.n	8010098 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80100b6:	e050      	b.n	801015a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80100b8:	2301      	movs	r3, #1
 80100ba:	e04f      	b.n	801015c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80100bc:	4b1d      	ldr	r3, [pc, #116]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d148      	bne.n	801015a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80100c8:	4b1a      	ldr	r3, [pc, #104]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	4a19      	ldr	r2, [pc, #100]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 80100ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80100d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80100d4:	4b17      	ldr	r3, [pc, #92]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 80100d6:	68db      	ldr	r3, [r3, #12]
 80100d8:	4a16      	ldr	r2, [pc, #88]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 80100da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80100de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80100e0:	f7fa ffc4 	bl	800b06c <HAL_GetTick>
 80100e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80100e6:	e008      	b.n	80100fa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80100e8:	f7fa ffc0 	bl	800b06c <HAL_GetTick>
 80100ec:	4602      	mov	r2, r0
 80100ee:	693b      	ldr	r3, [r7, #16]
 80100f0:	1ad3      	subs	r3, r2, r3
 80100f2:	2b02      	cmp	r3, #2
 80100f4:	d901      	bls.n	80100fa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80100f6:	2303      	movs	r3, #3
 80100f8:	e030      	b.n	801015c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80100fa:	4b0e      	ldr	r3, [pc, #56]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010102:	2b00      	cmp	r3, #0
 8010104:	d0f0      	beq.n	80100e8 <HAL_RCC_OscConfig+0x734>
 8010106:	e028      	b.n	801015a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8010108:	69bb      	ldr	r3, [r7, #24]
 801010a:	2b0c      	cmp	r3, #12
 801010c:	d023      	beq.n	8010156 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801010e:	4b09      	ldr	r3, [pc, #36]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	4a08      	ldr	r2, [pc, #32]	@ (8010134 <HAL_RCC_OscConfig+0x780>)
 8010114:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801011a:	f7fa ffa7 	bl	800b06c <HAL_GetTick>
 801011e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010120:	e00c      	b.n	801013c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010122:	f7fa ffa3 	bl	800b06c <HAL_GetTick>
 8010126:	4602      	mov	r2, r0
 8010128:	693b      	ldr	r3, [r7, #16]
 801012a:	1ad3      	subs	r3, r2, r3
 801012c:	2b02      	cmp	r3, #2
 801012e:	d905      	bls.n	801013c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8010130:	2303      	movs	r3, #3
 8010132:	e013      	b.n	801015c <HAL_RCC_OscConfig+0x7a8>
 8010134:	40021000 	.word	0x40021000
 8010138:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801013c:	4b09      	ldr	r3, [pc, #36]	@ (8010164 <HAL_RCC_OscConfig+0x7b0>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010144:	2b00      	cmp	r3, #0
 8010146:	d1ec      	bne.n	8010122 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8010148:	4b06      	ldr	r3, [pc, #24]	@ (8010164 <HAL_RCC_OscConfig+0x7b0>)
 801014a:	68da      	ldr	r2, [r3, #12]
 801014c:	4905      	ldr	r1, [pc, #20]	@ (8010164 <HAL_RCC_OscConfig+0x7b0>)
 801014e:	4b06      	ldr	r3, [pc, #24]	@ (8010168 <HAL_RCC_OscConfig+0x7b4>)
 8010150:	4013      	ands	r3, r2
 8010152:	60cb      	str	r3, [r1, #12]
 8010154:	e001      	b.n	801015a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8010156:	2301      	movs	r3, #1
 8010158:	e000      	b.n	801015c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 801015a:	2300      	movs	r3, #0
}
 801015c:	4618      	mov	r0, r3
 801015e:	3720      	adds	r7, #32
 8010160:	46bd      	mov	sp, r7
 8010162:	bd80      	pop	{r7, pc}
 8010164:	40021000 	.word	0x40021000
 8010168:	feeefffc 	.word	0xfeeefffc

0801016c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b084      	sub	sp, #16
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
 8010174:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d101      	bne.n	8010180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801017c:	2301      	movs	r3, #1
 801017e:	e0e7      	b.n	8010350 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010180:	4b75      	ldr	r3, [pc, #468]	@ (8010358 <HAL_RCC_ClockConfig+0x1ec>)
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	f003 0307 	and.w	r3, r3, #7
 8010188:	683a      	ldr	r2, [r7, #0]
 801018a:	429a      	cmp	r2, r3
 801018c:	d910      	bls.n	80101b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801018e:	4b72      	ldr	r3, [pc, #456]	@ (8010358 <HAL_RCC_ClockConfig+0x1ec>)
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	f023 0207 	bic.w	r2, r3, #7
 8010196:	4970      	ldr	r1, [pc, #448]	@ (8010358 <HAL_RCC_ClockConfig+0x1ec>)
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	4313      	orrs	r3, r2
 801019c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801019e:	4b6e      	ldr	r3, [pc, #440]	@ (8010358 <HAL_RCC_ClockConfig+0x1ec>)
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	f003 0307 	and.w	r3, r3, #7
 80101a6:	683a      	ldr	r2, [r7, #0]
 80101a8:	429a      	cmp	r2, r3
 80101aa:	d001      	beq.n	80101b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80101ac:	2301      	movs	r3, #1
 80101ae:	e0cf      	b.n	8010350 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	f003 0302 	and.w	r3, r3, #2
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d010      	beq.n	80101de <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	689a      	ldr	r2, [r3, #8]
 80101c0:	4b66      	ldr	r3, [pc, #408]	@ (801035c <HAL_RCC_ClockConfig+0x1f0>)
 80101c2:	689b      	ldr	r3, [r3, #8]
 80101c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80101c8:	429a      	cmp	r2, r3
 80101ca:	d908      	bls.n	80101de <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80101cc:	4b63      	ldr	r3, [pc, #396]	@ (801035c <HAL_RCC_ClockConfig+0x1f0>)
 80101ce:	689b      	ldr	r3, [r3, #8]
 80101d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	689b      	ldr	r3, [r3, #8]
 80101d8:	4960      	ldr	r1, [pc, #384]	@ (801035c <HAL_RCC_ClockConfig+0x1f0>)
 80101da:	4313      	orrs	r3, r2
 80101dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	f003 0301 	and.w	r3, r3, #1
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d04c      	beq.n	8010284 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	685b      	ldr	r3, [r3, #4]
 80101ee:	2b03      	cmp	r3, #3
 80101f0:	d107      	bne.n	8010202 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80101f2:	4b5a      	ldr	r3, [pc, #360]	@ (801035c <HAL_RCC_ClockConfig+0x1f0>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d121      	bne.n	8010242 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80101fe:	2301      	movs	r3, #1
 8010200:	e0a6      	b.n	8010350 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	685b      	ldr	r3, [r3, #4]
 8010206:	2b02      	cmp	r3, #2
 8010208:	d107      	bne.n	801021a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801020a:	4b54      	ldr	r3, [pc, #336]	@ (801035c <HAL_RCC_ClockConfig+0x1f0>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010212:	2b00      	cmp	r3, #0
 8010214:	d115      	bne.n	8010242 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8010216:	2301      	movs	r3, #1
 8010218:	e09a      	b.n	8010350 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	685b      	ldr	r3, [r3, #4]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d107      	bne.n	8010232 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010222:	4b4e      	ldr	r3, [pc, #312]	@ (801035c <HAL_RCC_ClockConfig+0x1f0>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	f003 0302 	and.w	r3, r3, #2
 801022a:	2b00      	cmp	r3, #0
 801022c:	d109      	bne.n	8010242 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801022e:	2301      	movs	r3, #1
 8010230:	e08e      	b.n	8010350 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010232:	4b4a      	ldr	r3, [pc, #296]	@ (801035c <HAL_RCC_ClockConfig+0x1f0>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801023a:	2b00      	cmp	r3, #0
 801023c:	d101      	bne.n	8010242 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801023e:	2301      	movs	r3, #1
 8010240:	e086      	b.n	8010350 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010242:	4b46      	ldr	r3, [pc, #280]	@ (801035c <HAL_RCC_ClockConfig+0x1f0>)
 8010244:	689b      	ldr	r3, [r3, #8]
 8010246:	f023 0203 	bic.w	r2, r3, #3
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	685b      	ldr	r3, [r3, #4]
 801024e:	4943      	ldr	r1, [pc, #268]	@ (801035c <HAL_RCC_ClockConfig+0x1f0>)
 8010250:	4313      	orrs	r3, r2
 8010252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010254:	f7fa ff0a 	bl	800b06c <HAL_GetTick>
 8010258:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801025a:	e00a      	b.n	8010272 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801025c:	f7fa ff06 	bl	800b06c <HAL_GetTick>
 8010260:	4602      	mov	r2, r0
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	1ad3      	subs	r3, r2, r3
 8010266:	f241 3288 	movw	r2, #5000	@ 0x1388
 801026a:	4293      	cmp	r3, r2
 801026c:	d901      	bls.n	8010272 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 801026e:	2303      	movs	r3, #3
 8010270:	e06e      	b.n	8010350 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010272:	4b3a      	ldr	r3, [pc, #232]	@ (801035c <HAL_RCC_ClockConfig+0x1f0>)
 8010274:	689b      	ldr	r3, [r3, #8]
 8010276:	f003 020c 	and.w	r2, r3, #12
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	685b      	ldr	r3, [r3, #4]
 801027e:	009b      	lsls	r3, r3, #2
 8010280:	429a      	cmp	r2, r3
 8010282:	d1eb      	bne.n	801025c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	f003 0302 	and.w	r3, r3, #2
 801028c:	2b00      	cmp	r3, #0
 801028e:	d010      	beq.n	80102b2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	689a      	ldr	r2, [r3, #8]
 8010294:	4b31      	ldr	r3, [pc, #196]	@ (801035c <HAL_RCC_ClockConfig+0x1f0>)
 8010296:	689b      	ldr	r3, [r3, #8]
 8010298:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801029c:	429a      	cmp	r2, r3
 801029e:	d208      	bcs.n	80102b2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80102a0:	4b2e      	ldr	r3, [pc, #184]	@ (801035c <HAL_RCC_ClockConfig+0x1f0>)
 80102a2:	689b      	ldr	r3, [r3, #8]
 80102a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	689b      	ldr	r3, [r3, #8]
 80102ac:	492b      	ldr	r1, [pc, #172]	@ (801035c <HAL_RCC_ClockConfig+0x1f0>)
 80102ae:	4313      	orrs	r3, r2
 80102b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80102b2:	4b29      	ldr	r3, [pc, #164]	@ (8010358 <HAL_RCC_ClockConfig+0x1ec>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	f003 0307 	and.w	r3, r3, #7
 80102ba:	683a      	ldr	r2, [r7, #0]
 80102bc:	429a      	cmp	r2, r3
 80102be:	d210      	bcs.n	80102e2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80102c0:	4b25      	ldr	r3, [pc, #148]	@ (8010358 <HAL_RCC_ClockConfig+0x1ec>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	f023 0207 	bic.w	r2, r3, #7
 80102c8:	4923      	ldr	r1, [pc, #140]	@ (8010358 <HAL_RCC_ClockConfig+0x1ec>)
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	4313      	orrs	r3, r2
 80102ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80102d0:	4b21      	ldr	r3, [pc, #132]	@ (8010358 <HAL_RCC_ClockConfig+0x1ec>)
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	f003 0307 	and.w	r3, r3, #7
 80102d8:	683a      	ldr	r2, [r7, #0]
 80102da:	429a      	cmp	r2, r3
 80102dc:	d001      	beq.n	80102e2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80102de:	2301      	movs	r3, #1
 80102e0:	e036      	b.n	8010350 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	f003 0304 	and.w	r3, r3, #4
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d008      	beq.n	8010300 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80102ee:	4b1b      	ldr	r3, [pc, #108]	@ (801035c <HAL_RCC_ClockConfig+0x1f0>)
 80102f0:	689b      	ldr	r3, [r3, #8]
 80102f2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	68db      	ldr	r3, [r3, #12]
 80102fa:	4918      	ldr	r1, [pc, #96]	@ (801035c <HAL_RCC_ClockConfig+0x1f0>)
 80102fc:	4313      	orrs	r3, r2
 80102fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	f003 0308 	and.w	r3, r3, #8
 8010308:	2b00      	cmp	r3, #0
 801030a:	d009      	beq.n	8010320 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801030c:	4b13      	ldr	r3, [pc, #76]	@ (801035c <HAL_RCC_ClockConfig+0x1f0>)
 801030e:	689b      	ldr	r3, [r3, #8]
 8010310:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	691b      	ldr	r3, [r3, #16]
 8010318:	00db      	lsls	r3, r3, #3
 801031a:	4910      	ldr	r1, [pc, #64]	@ (801035c <HAL_RCC_ClockConfig+0x1f0>)
 801031c:	4313      	orrs	r3, r2
 801031e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8010320:	f000 f824 	bl	801036c <HAL_RCC_GetSysClockFreq>
 8010324:	4602      	mov	r2, r0
 8010326:	4b0d      	ldr	r3, [pc, #52]	@ (801035c <HAL_RCC_ClockConfig+0x1f0>)
 8010328:	689b      	ldr	r3, [r3, #8]
 801032a:	091b      	lsrs	r3, r3, #4
 801032c:	f003 030f 	and.w	r3, r3, #15
 8010330:	490b      	ldr	r1, [pc, #44]	@ (8010360 <HAL_RCC_ClockConfig+0x1f4>)
 8010332:	5ccb      	ldrb	r3, [r1, r3]
 8010334:	f003 031f 	and.w	r3, r3, #31
 8010338:	fa22 f303 	lsr.w	r3, r2, r3
 801033c:	4a09      	ldr	r2, [pc, #36]	@ (8010364 <HAL_RCC_ClockConfig+0x1f8>)
 801033e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8010340:	4b09      	ldr	r3, [pc, #36]	@ (8010368 <HAL_RCC_ClockConfig+0x1fc>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	4618      	mov	r0, r3
 8010346:	f7fa fe41 	bl	800afcc <HAL_InitTick>
 801034a:	4603      	mov	r3, r0
 801034c:	72fb      	strb	r3, [r7, #11]

  return status;
 801034e:	7afb      	ldrb	r3, [r7, #11]
}
 8010350:	4618      	mov	r0, r3
 8010352:	3710      	adds	r7, #16
 8010354:	46bd      	mov	sp, r7
 8010356:	bd80      	pop	{r7, pc}
 8010358:	40022000 	.word	0x40022000
 801035c:	40021000 	.word	0x40021000
 8010360:	08017944 	.word	0x08017944
 8010364:	20000268 	.word	0x20000268
 8010368:	20000274 	.word	0x20000274

0801036c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801036c:	b480      	push	{r7}
 801036e:	b089      	sub	sp, #36	@ 0x24
 8010370:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8010372:	2300      	movs	r3, #0
 8010374:	61fb      	str	r3, [r7, #28]
 8010376:	2300      	movs	r3, #0
 8010378:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801037a:	4b3e      	ldr	r3, [pc, #248]	@ (8010474 <HAL_RCC_GetSysClockFreq+0x108>)
 801037c:	689b      	ldr	r3, [r3, #8]
 801037e:	f003 030c 	and.w	r3, r3, #12
 8010382:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010384:	4b3b      	ldr	r3, [pc, #236]	@ (8010474 <HAL_RCC_GetSysClockFreq+0x108>)
 8010386:	68db      	ldr	r3, [r3, #12]
 8010388:	f003 0303 	and.w	r3, r3, #3
 801038c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801038e:	693b      	ldr	r3, [r7, #16]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d005      	beq.n	80103a0 <HAL_RCC_GetSysClockFreq+0x34>
 8010394:	693b      	ldr	r3, [r7, #16]
 8010396:	2b0c      	cmp	r3, #12
 8010398:	d121      	bne.n	80103de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	2b01      	cmp	r3, #1
 801039e:	d11e      	bne.n	80103de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80103a0:	4b34      	ldr	r3, [pc, #208]	@ (8010474 <HAL_RCC_GetSysClockFreq+0x108>)
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	f003 0308 	and.w	r3, r3, #8
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d107      	bne.n	80103bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80103ac:	4b31      	ldr	r3, [pc, #196]	@ (8010474 <HAL_RCC_GetSysClockFreq+0x108>)
 80103ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80103b2:	0a1b      	lsrs	r3, r3, #8
 80103b4:	f003 030f 	and.w	r3, r3, #15
 80103b8:	61fb      	str	r3, [r7, #28]
 80103ba:	e005      	b.n	80103c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80103bc:	4b2d      	ldr	r3, [pc, #180]	@ (8010474 <HAL_RCC_GetSysClockFreq+0x108>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	091b      	lsrs	r3, r3, #4
 80103c2:	f003 030f 	and.w	r3, r3, #15
 80103c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80103c8:	4a2b      	ldr	r2, [pc, #172]	@ (8010478 <HAL_RCC_GetSysClockFreq+0x10c>)
 80103ca:	69fb      	ldr	r3, [r7, #28]
 80103cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80103d2:	693b      	ldr	r3, [r7, #16]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d10d      	bne.n	80103f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80103d8:	69fb      	ldr	r3, [r7, #28]
 80103da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80103dc:	e00a      	b.n	80103f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80103de:	693b      	ldr	r3, [r7, #16]
 80103e0:	2b04      	cmp	r3, #4
 80103e2:	d102      	bne.n	80103ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80103e4:	4b25      	ldr	r3, [pc, #148]	@ (801047c <HAL_RCC_GetSysClockFreq+0x110>)
 80103e6:	61bb      	str	r3, [r7, #24]
 80103e8:	e004      	b.n	80103f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80103ea:	693b      	ldr	r3, [r7, #16]
 80103ec:	2b08      	cmp	r3, #8
 80103ee:	d101      	bne.n	80103f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80103f0:	4b23      	ldr	r3, [pc, #140]	@ (8010480 <HAL_RCC_GetSysClockFreq+0x114>)
 80103f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80103f4:	693b      	ldr	r3, [r7, #16]
 80103f6:	2b0c      	cmp	r3, #12
 80103f8:	d134      	bne.n	8010464 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80103fa:	4b1e      	ldr	r3, [pc, #120]	@ (8010474 <HAL_RCC_GetSysClockFreq+0x108>)
 80103fc:	68db      	ldr	r3, [r3, #12]
 80103fe:	f003 0303 	and.w	r3, r3, #3
 8010402:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	2b02      	cmp	r3, #2
 8010408:	d003      	beq.n	8010412 <HAL_RCC_GetSysClockFreq+0xa6>
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	2b03      	cmp	r3, #3
 801040e:	d003      	beq.n	8010418 <HAL_RCC_GetSysClockFreq+0xac>
 8010410:	e005      	b.n	801041e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8010412:	4b1a      	ldr	r3, [pc, #104]	@ (801047c <HAL_RCC_GetSysClockFreq+0x110>)
 8010414:	617b      	str	r3, [r7, #20]
      break;
 8010416:	e005      	b.n	8010424 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8010418:	4b19      	ldr	r3, [pc, #100]	@ (8010480 <HAL_RCC_GetSysClockFreq+0x114>)
 801041a:	617b      	str	r3, [r7, #20]
      break;
 801041c:	e002      	b.n	8010424 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 801041e:	69fb      	ldr	r3, [r7, #28]
 8010420:	617b      	str	r3, [r7, #20]
      break;
 8010422:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8010424:	4b13      	ldr	r3, [pc, #76]	@ (8010474 <HAL_RCC_GetSysClockFreq+0x108>)
 8010426:	68db      	ldr	r3, [r3, #12]
 8010428:	091b      	lsrs	r3, r3, #4
 801042a:	f003 0307 	and.w	r3, r3, #7
 801042e:	3301      	adds	r3, #1
 8010430:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8010432:	4b10      	ldr	r3, [pc, #64]	@ (8010474 <HAL_RCC_GetSysClockFreq+0x108>)
 8010434:	68db      	ldr	r3, [r3, #12]
 8010436:	0a1b      	lsrs	r3, r3, #8
 8010438:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801043c:	697a      	ldr	r2, [r7, #20]
 801043e:	fb03 f202 	mul.w	r2, r3, r2
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	fbb2 f3f3 	udiv	r3, r2, r3
 8010448:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801044a:	4b0a      	ldr	r3, [pc, #40]	@ (8010474 <HAL_RCC_GetSysClockFreq+0x108>)
 801044c:	68db      	ldr	r3, [r3, #12]
 801044e:	0e5b      	lsrs	r3, r3, #25
 8010450:	f003 0303 	and.w	r3, r3, #3
 8010454:	3301      	adds	r3, #1
 8010456:	005b      	lsls	r3, r3, #1
 8010458:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 801045a:	697a      	ldr	r2, [r7, #20]
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010462:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8010464:	69bb      	ldr	r3, [r7, #24]
}
 8010466:	4618      	mov	r0, r3
 8010468:	3724      	adds	r7, #36	@ 0x24
 801046a:	46bd      	mov	sp, r7
 801046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010470:	4770      	bx	lr
 8010472:	bf00      	nop
 8010474:	40021000 	.word	0x40021000
 8010478:	0801795c 	.word	0x0801795c
 801047c:	00f42400 	.word	0x00f42400
 8010480:	007a1200 	.word	0x007a1200

08010484 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010484:	b480      	push	{r7}
 8010486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010488:	4b03      	ldr	r3, [pc, #12]	@ (8010498 <HAL_RCC_GetHCLKFreq+0x14>)
 801048a:	681b      	ldr	r3, [r3, #0]
}
 801048c:	4618      	mov	r0, r3
 801048e:	46bd      	mov	sp, r7
 8010490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010494:	4770      	bx	lr
 8010496:	bf00      	nop
 8010498:	20000268 	.word	0x20000268

0801049c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801049c:	b580      	push	{r7, lr}
 801049e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80104a0:	f7ff fff0 	bl	8010484 <HAL_RCC_GetHCLKFreq>
 80104a4:	4602      	mov	r2, r0
 80104a6:	4b06      	ldr	r3, [pc, #24]	@ (80104c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80104a8:	689b      	ldr	r3, [r3, #8]
 80104aa:	0a1b      	lsrs	r3, r3, #8
 80104ac:	f003 0307 	and.w	r3, r3, #7
 80104b0:	4904      	ldr	r1, [pc, #16]	@ (80104c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80104b2:	5ccb      	ldrb	r3, [r1, r3]
 80104b4:	f003 031f 	and.w	r3, r3, #31
 80104b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80104bc:	4618      	mov	r0, r3
 80104be:	bd80      	pop	{r7, pc}
 80104c0:	40021000 	.word	0x40021000
 80104c4:	08017954 	.word	0x08017954

080104c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80104cc:	f7ff ffda 	bl	8010484 <HAL_RCC_GetHCLKFreq>
 80104d0:	4602      	mov	r2, r0
 80104d2:	4b06      	ldr	r3, [pc, #24]	@ (80104ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80104d4:	689b      	ldr	r3, [r3, #8]
 80104d6:	0adb      	lsrs	r3, r3, #11
 80104d8:	f003 0307 	and.w	r3, r3, #7
 80104dc:	4904      	ldr	r1, [pc, #16]	@ (80104f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80104de:	5ccb      	ldrb	r3, [r1, r3]
 80104e0:	f003 031f 	and.w	r3, r3, #31
 80104e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80104e8:	4618      	mov	r0, r3
 80104ea:	bd80      	pop	{r7, pc}
 80104ec:	40021000 	.word	0x40021000
 80104f0:	08017954 	.word	0x08017954

080104f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b086      	sub	sp, #24
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80104fc:	2300      	movs	r3, #0
 80104fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8010500:	4b2a      	ldr	r3, [pc, #168]	@ (80105ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010508:	2b00      	cmp	r3, #0
 801050a:	d003      	beq.n	8010514 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 801050c:	f7fe fd8c 	bl	800f028 <HAL_PWREx_GetVoltageRange>
 8010510:	6178      	str	r0, [r7, #20]
 8010512:	e014      	b.n	801053e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8010514:	4b25      	ldr	r3, [pc, #148]	@ (80105ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010518:	4a24      	ldr	r2, [pc, #144]	@ (80105ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801051a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801051e:	6593      	str	r3, [r2, #88]	@ 0x58
 8010520:	4b22      	ldr	r3, [pc, #136]	@ (80105ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010524:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010528:	60fb      	str	r3, [r7, #12]
 801052a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 801052c:	f7fe fd7c 	bl	800f028 <HAL_PWREx_GetVoltageRange>
 8010530:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8010532:	4b1e      	ldr	r3, [pc, #120]	@ (80105ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010536:	4a1d      	ldr	r2, [pc, #116]	@ (80105ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010538:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801053c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010544:	d10b      	bne.n	801055e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2b80      	cmp	r3, #128	@ 0x80
 801054a:	d919      	bls.n	8010580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	2ba0      	cmp	r3, #160	@ 0xa0
 8010550:	d902      	bls.n	8010558 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8010552:	2302      	movs	r3, #2
 8010554:	613b      	str	r3, [r7, #16]
 8010556:	e013      	b.n	8010580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8010558:	2301      	movs	r3, #1
 801055a:	613b      	str	r3, [r7, #16]
 801055c:	e010      	b.n	8010580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2b80      	cmp	r3, #128	@ 0x80
 8010562:	d902      	bls.n	801056a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8010564:	2303      	movs	r3, #3
 8010566:	613b      	str	r3, [r7, #16]
 8010568:	e00a      	b.n	8010580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	2b80      	cmp	r3, #128	@ 0x80
 801056e:	d102      	bne.n	8010576 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8010570:	2302      	movs	r3, #2
 8010572:	613b      	str	r3, [r7, #16]
 8010574:	e004      	b.n	8010580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2b70      	cmp	r3, #112	@ 0x70
 801057a:	d101      	bne.n	8010580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801057c:	2301      	movs	r3, #1
 801057e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8010580:	4b0b      	ldr	r3, [pc, #44]	@ (80105b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	f023 0207 	bic.w	r2, r3, #7
 8010588:	4909      	ldr	r1, [pc, #36]	@ (80105b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801058a:	693b      	ldr	r3, [r7, #16]
 801058c:	4313      	orrs	r3, r2
 801058e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8010590:	4b07      	ldr	r3, [pc, #28]	@ (80105b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	f003 0307 	and.w	r3, r3, #7
 8010598:	693a      	ldr	r2, [r7, #16]
 801059a:	429a      	cmp	r2, r3
 801059c:	d001      	beq.n	80105a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 801059e:	2301      	movs	r3, #1
 80105a0:	e000      	b.n	80105a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80105a2:	2300      	movs	r3, #0
}
 80105a4:	4618      	mov	r0, r3
 80105a6:	3718      	adds	r7, #24
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}
 80105ac:	40021000 	.word	0x40021000
 80105b0:	40022000 	.word	0x40022000

080105b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b086      	sub	sp, #24
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80105bc:	2300      	movs	r3, #0
 80105be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80105c0:	2300      	movs	r3, #0
 80105c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d041      	beq.n	8010654 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80105d4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80105d8:	d02a      	beq.n	8010630 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80105da:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80105de:	d824      	bhi.n	801062a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80105e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80105e4:	d008      	beq.n	80105f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80105e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80105ea:	d81e      	bhi.n	801062a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d00a      	beq.n	8010606 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80105f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80105f4:	d010      	beq.n	8010618 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80105f6:	e018      	b.n	801062a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80105f8:	4b86      	ldr	r3, [pc, #536]	@ (8010814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80105fa:	68db      	ldr	r3, [r3, #12]
 80105fc:	4a85      	ldr	r2, [pc, #532]	@ (8010814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80105fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010602:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8010604:	e015      	b.n	8010632 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	3304      	adds	r3, #4
 801060a:	2100      	movs	r1, #0
 801060c:	4618      	mov	r0, r3
 801060e:	f000 fabb 	bl	8010b88 <RCCEx_PLLSAI1_Config>
 8010612:	4603      	mov	r3, r0
 8010614:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8010616:	e00c      	b.n	8010632 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	3320      	adds	r3, #32
 801061c:	2100      	movs	r1, #0
 801061e:	4618      	mov	r0, r3
 8010620:	f000 fba6 	bl	8010d70 <RCCEx_PLLSAI2_Config>
 8010624:	4603      	mov	r3, r0
 8010626:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8010628:	e003      	b.n	8010632 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801062a:	2301      	movs	r3, #1
 801062c:	74fb      	strb	r3, [r7, #19]
      break;
 801062e:	e000      	b.n	8010632 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8010630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010632:	7cfb      	ldrb	r3, [r7, #19]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d10b      	bne.n	8010650 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010638:	4b76      	ldr	r3, [pc, #472]	@ (8010814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801063a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801063e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010646:	4973      	ldr	r1, [pc, #460]	@ (8010814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010648:	4313      	orrs	r3, r2
 801064a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 801064e:	e001      	b.n	8010654 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010650:	7cfb      	ldrb	r3, [r7, #19]
 8010652:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801065c:	2b00      	cmp	r3, #0
 801065e:	d041      	beq.n	80106e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010664:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010668:	d02a      	beq.n	80106c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 801066a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801066e:	d824      	bhi.n	80106ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8010670:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010674:	d008      	beq.n	8010688 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8010676:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801067a:	d81e      	bhi.n	80106ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 801067c:	2b00      	cmp	r3, #0
 801067e:	d00a      	beq.n	8010696 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8010680:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010684:	d010      	beq.n	80106a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8010686:	e018      	b.n	80106ba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8010688:	4b62      	ldr	r3, [pc, #392]	@ (8010814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801068a:	68db      	ldr	r3, [r3, #12]
 801068c:	4a61      	ldr	r2, [pc, #388]	@ (8010814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801068e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010692:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010694:	e015      	b.n	80106c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	3304      	adds	r3, #4
 801069a:	2100      	movs	r1, #0
 801069c:	4618      	mov	r0, r3
 801069e:	f000 fa73 	bl	8010b88 <RCCEx_PLLSAI1_Config>
 80106a2:	4603      	mov	r3, r0
 80106a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80106a6:	e00c      	b.n	80106c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	3320      	adds	r3, #32
 80106ac:	2100      	movs	r1, #0
 80106ae:	4618      	mov	r0, r3
 80106b0:	f000 fb5e 	bl	8010d70 <RCCEx_PLLSAI2_Config>
 80106b4:	4603      	mov	r3, r0
 80106b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80106b8:	e003      	b.n	80106c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80106ba:	2301      	movs	r3, #1
 80106bc:	74fb      	strb	r3, [r7, #19]
      break;
 80106be:	e000      	b.n	80106c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80106c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80106c2:	7cfb      	ldrb	r3, [r7, #19]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d10b      	bne.n	80106e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80106c8:	4b52      	ldr	r3, [pc, #328]	@ (8010814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80106ce:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80106d6:	494f      	ldr	r1, [pc, #316]	@ (8010814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106d8:	4313      	orrs	r3, r2
 80106da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80106de:	e001      	b.n	80106e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80106e0:	7cfb      	ldrb	r3, [r7, #19]
 80106e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	f000 80a0 	beq.w	8010832 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80106f2:	2300      	movs	r3, #0
 80106f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80106f6:	4b47      	ldr	r3, [pc, #284]	@ (8010814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80106fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d101      	bne.n	8010706 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8010702:	2301      	movs	r3, #1
 8010704:	e000      	b.n	8010708 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8010706:	2300      	movs	r3, #0
 8010708:	2b00      	cmp	r3, #0
 801070a:	d00d      	beq.n	8010728 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801070c:	4b41      	ldr	r3, [pc, #260]	@ (8010814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801070e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010710:	4a40      	ldr	r2, [pc, #256]	@ (8010814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010712:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010716:	6593      	str	r3, [r2, #88]	@ 0x58
 8010718:	4b3e      	ldr	r3, [pc, #248]	@ (8010814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801071a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801071c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010720:	60bb      	str	r3, [r7, #8]
 8010722:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010724:	2301      	movs	r3, #1
 8010726:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010728:	4b3b      	ldr	r3, [pc, #236]	@ (8010818 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	4a3a      	ldr	r2, [pc, #232]	@ (8010818 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 801072e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010732:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010734:	f7fa fc9a 	bl	800b06c <HAL_GetTick>
 8010738:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801073a:	e009      	b.n	8010750 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801073c:	f7fa fc96 	bl	800b06c <HAL_GetTick>
 8010740:	4602      	mov	r2, r0
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	1ad3      	subs	r3, r2, r3
 8010746:	2b02      	cmp	r3, #2
 8010748:	d902      	bls.n	8010750 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 801074a:	2303      	movs	r3, #3
 801074c:	74fb      	strb	r3, [r7, #19]
        break;
 801074e:	e005      	b.n	801075c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8010750:	4b31      	ldr	r3, [pc, #196]	@ (8010818 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010758:	2b00      	cmp	r3, #0
 801075a:	d0ef      	beq.n	801073c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 801075c:	7cfb      	ldrb	r3, [r7, #19]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d15c      	bne.n	801081c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8010762:	4b2c      	ldr	r3, [pc, #176]	@ (8010814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010768:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801076c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801076e:	697b      	ldr	r3, [r7, #20]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d01f      	beq.n	80107b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801077a:	697a      	ldr	r2, [r7, #20]
 801077c:	429a      	cmp	r2, r3
 801077e:	d019      	beq.n	80107b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8010780:	4b24      	ldr	r3, [pc, #144]	@ (8010814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801078a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801078c:	4b21      	ldr	r3, [pc, #132]	@ (8010814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801078e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010792:	4a20      	ldr	r2, [pc, #128]	@ (8010814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010798:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801079c:	4b1d      	ldr	r3, [pc, #116]	@ (8010814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801079e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80107a2:	4a1c      	ldr	r2, [pc, #112]	@ (8010814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80107a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80107a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80107ac:	4a19      	ldr	r2, [pc, #100]	@ (8010814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	f003 0301 	and.w	r3, r3, #1
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d016      	beq.n	80107ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80107be:	f7fa fc55 	bl	800b06c <HAL_GetTick>
 80107c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80107c4:	e00b      	b.n	80107de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80107c6:	f7fa fc51 	bl	800b06c <HAL_GetTick>
 80107ca:	4602      	mov	r2, r0
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	1ad3      	subs	r3, r2, r3
 80107d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80107d4:	4293      	cmp	r3, r2
 80107d6:	d902      	bls.n	80107de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80107d8:	2303      	movs	r3, #3
 80107da:	74fb      	strb	r3, [r7, #19]
            break;
 80107dc:	e006      	b.n	80107ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80107de:	4b0d      	ldr	r3, [pc, #52]	@ (8010814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80107e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80107e4:	f003 0302 	and.w	r3, r3, #2
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d0ec      	beq.n	80107c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80107ec:	7cfb      	ldrb	r3, [r7, #19]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d10c      	bne.n	801080c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80107f2:	4b08      	ldr	r3, [pc, #32]	@ (8010814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80107f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80107f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010802:	4904      	ldr	r1, [pc, #16]	@ (8010814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010804:	4313      	orrs	r3, r2
 8010806:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 801080a:	e009      	b.n	8010820 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801080c:	7cfb      	ldrb	r3, [r7, #19]
 801080e:	74bb      	strb	r3, [r7, #18]
 8010810:	e006      	b.n	8010820 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8010812:	bf00      	nop
 8010814:	40021000 	.word	0x40021000
 8010818:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801081c:	7cfb      	ldrb	r3, [r7, #19]
 801081e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8010820:	7c7b      	ldrb	r3, [r7, #17]
 8010822:	2b01      	cmp	r3, #1
 8010824:	d105      	bne.n	8010832 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010826:	4b9e      	ldr	r3, [pc, #632]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801082a:	4a9d      	ldr	r2, [pc, #628]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801082c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010830:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	f003 0301 	and.w	r3, r3, #1
 801083a:	2b00      	cmp	r3, #0
 801083c:	d00a      	beq.n	8010854 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801083e:	4b98      	ldr	r3, [pc, #608]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010844:	f023 0203 	bic.w	r2, r3, #3
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801084c:	4994      	ldr	r1, [pc, #592]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801084e:	4313      	orrs	r3, r2
 8010850:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	f003 0302 	and.w	r3, r3, #2
 801085c:	2b00      	cmp	r3, #0
 801085e:	d00a      	beq.n	8010876 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010860:	4b8f      	ldr	r3, [pc, #572]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010866:	f023 020c 	bic.w	r2, r3, #12
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801086e:	498c      	ldr	r1, [pc, #560]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010870:	4313      	orrs	r3, r2
 8010872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	f003 0304 	and.w	r3, r3, #4
 801087e:	2b00      	cmp	r3, #0
 8010880:	d00a      	beq.n	8010898 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8010882:	4b87      	ldr	r3, [pc, #540]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010888:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010890:	4983      	ldr	r1, [pc, #524]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010892:	4313      	orrs	r3, r2
 8010894:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	f003 0308 	and.w	r3, r3, #8
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d00a      	beq.n	80108ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80108a4:	4b7e      	ldr	r3, [pc, #504]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80108a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80108aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80108b2:	497b      	ldr	r1, [pc, #492]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80108b4:	4313      	orrs	r3, r2
 80108b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	f003 0310 	and.w	r3, r3, #16
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d00a      	beq.n	80108dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80108c6:	4b76      	ldr	r3, [pc, #472]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80108c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80108cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80108d4:	4972      	ldr	r1, [pc, #456]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80108d6:	4313      	orrs	r3, r2
 80108d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	f003 0320 	and.w	r3, r3, #32
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d00a      	beq.n	80108fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80108e8:	4b6d      	ldr	r3, [pc, #436]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80108ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80108ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80108f6:	496a      	ldr	r1, [pc, #424]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80108f8:	4313      	orrs	r3, r2
 80108fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010906:	2b00      	cmp	r3, #0
 8010908:	d00a      	beq.n	8010920 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801090a:	4b65      	ldr	r3, [pc, #404]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801090c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010910:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010918:	4961      	ldr	r1, [pc, #388]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801091a:	4313      	orrs	r3, r2
 801091c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010928:	2b00      	cmp	r3, #0
 801092a:	d00a      	beq.n	8010942 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801092c:	4b5c      	ldr	r3, [pc, #368]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010932:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801093a:	4959      	ldr	r1, [pc, #356]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801093c:	4313      	orrs	r3, r2
 801093e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801094a:	2b00      	cmp	r3, #0
 801094c:	d00a      	beq.n	8010964 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801094e:	4b54      	ldr	r3, [pc, #336]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010954:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801095c:	4950      	ldr	r1, [pc, #320]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801095e:	4313      	orrs	r3, r2
 8010960:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801096c:	2b00      	cmp	r3, #0
 801096e:	d00a      	beq.n	8010986 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8010970:	4b4b      	ldr	r3, [pc, #300]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010976:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801097e:	4948      	ldr	r1, [pc, #288]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010980:	4313      	orrs	r3, r2
 8010982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801098e:	2b00      	cmp	r3, #0
 8010990:	d00a      	beq.n	80109a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8010992:	4b43      	ldr	r3, [pc, #268]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010998:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80109a0:	493f      	ldr	r1, [pc, #252]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80109a2:	4313      	orrs	r3, r2
 80109a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d028      	beq.n	8010a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80109b4:	4b3a      	ldr	r3, [pc, #232]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80109b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80109ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80109c2:	4937      	ldr	r1, [pc, #220]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80109c4:	4313      	orrs	r3, r2
 80109c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80109ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80109d2:	d106      	bne.n	80109e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80109d4:	4b32      	ldr	r3, [pc, #200]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80109d6:	68db      	ldr	r3, [r3, #12]
 80109d8:	4a31      	ldr	r2, [pc, #196]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80109da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80109de:	60d3      	str	r3, [r2, #12]
 80109e0:	e011      	b.n	8010a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80109e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80109ea:	d10c      	bne.n	8010a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	3304      	adds	r3, #4
 80109f0:	2101      	movs	r1, #1
 80109f2:	4618      	mov	r0, r3
 80109f4:	f000 f8c8 	bl	8010b88 <RCCEx_PLLSAI1_Config>
 80109f8:	4603      	mov	r3, r0
 80109fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80109fc:	7cfb      	ldrb	r3, [r7, #19]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d001      	beq.n	8010a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8010a02:	7cfb      	ldrb	r3, [r7, #19]
 8010a04:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d028      	beq.n	8010a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8010a12:	4b23      	ldr	r3, [pc, #140]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010a18:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a20:	491f      	ldr	r1, [pc, #124]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010a22:	4313      	orrs	r3, r2
 8010a24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010a30:	d106      	bne.n	8010a40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010a32:	4b1b      	ldr	r3, [pc, #108]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010a34:	68db      	ldr	r3, [r3, #12]
 8010a36:	4a1a      	ldr	r2, [pc, #104]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010a38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010a3c:	60d3      	str	r3, [r2, #12]
 8010a3e:	e011      	b.n	8010a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010a48:	d10c      	bne.n	8010a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	3304      	adds	r3, #4
 8010a4e:	2101      	movs	r1, #1
 8010a50:	4618      	mov	r0, r3
 8010a52:	f000 f899 	bl	8010b88 <RCCEx_PLLSAI1_Config>
 8010a56:	4603      	mov	r3, r0
 8010a58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010a5a:	7cfb      	ldrb	r3, [r7, #19]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d001      	beq.n	8010a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8010a60:	7cfb      	ldrb	r3, [r7, #19]
 8010a62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d02b      	beq.n	8010ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010a70:	4b0b      	ldr	r3, [pc, #44]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010a76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a7e:	4908      	ldr	r1, [pc, #32]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010a80:	4313      	orrs	r3, r2
 8010a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010a8e:	d109      	bne.n	8010aa4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010a90:	4b03      	ldr	r3, [pc, #12]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010a92:	68db      	ldr	r3, [r3, #12]
 8010a94:	4a02      	ldr	r2, [pc, #8]	@ (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010a96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010a9a:	60d3      	str	r3, [r2, #12]
 8010a9c:	e014      	b.n	8010ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8010a9e:	bf00      	nop
 8010aa0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010aa8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010aac:	d10c      	bne.n	8010ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	3304      	adds	r3, #4
 8010ab2:	2101      	movs	r1, #1
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f000 f867 	bl	8010b88 <RCCEx_PLLSAI1_Config>
 8010aba:	4603      	mov	r3, r0
 8010abc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010abe:	7cfb      	ldrb	r3, [r7, #19]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d001      	beq.n	8010ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8010ac4:	7cfb      	ldrb	r3, [r7, #19]
 8010ac6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d02f      	beq.n	8010b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8010b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010ada:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010ae2:	4928      	ldr	r1, [pc, #160]	@ (8010b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010ae4:	4313      	orrs	r3, r2
 8010ae6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010aee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010af2:	d10d      	bne.n	8010b10 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	3304      	adds	r3, #4
 8010af8:	2102      	movs	r1, #2
 8010afa:	4618      	mov	r0, r3
 8010afc:	f000 f844 	bl	8010b88 <RCCEx_PLLSAI1_Config>
 8010b00:	4603      	mov	r3, r0
 8010b02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010b04:	7cfb      	ldrb	r3, [r7, #19]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d014      	beq.n	8010b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8010b0a:	7cfb      	ldrb	r3, [r7, #19]
 8010b0c:	74bb      	strb	r3, [r7, #18]
 8010b0e:	e011      	b.n	8010b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010b14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010b18:	d10c      	bne.n	8010b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	3320      	adds	r3, #32
 8010b1e:	2102      	movs	r1, #2
 8010b20:	4618      	mov	r0, r3
 8010b22:	f000 f925 	bl	8010d70 <RCCEx_PLLSAI2_Config>
 8010b26:	4603      	mov	r3, r0
 8010b28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010b2a:	7cfb      	ldrb	r3, [r7, #19]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d001      	beq.n	8010b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8010b30:	7cfb      	ldrb	r3, [r7, #19]
 8010b32:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d00a      	beq.n	8010b56 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010b40:	4b10      	ldr	r3, [pc, #64]	@ (8010b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010b46:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010b4e:	490d      	ldr	r1, [pc, #52]	@ (8010b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010b50:	4313      	orrs	r3, r2
 8010b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d00b      	beq.n	8010b7a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8010b62:	4b08      	ldr	r3, [pc, #32]	@ (8010b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010b68:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010b72:	4904      	ldr	r1, [pc, #16]	@ (8010b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010b74:	4313      	orrs	r3, r2
 8010b76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8010b7a:	7cbb      	ldrb	r3, [r7, #18]
}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	3718      	adds	r7, #24
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd80      	pop	{r7, pc}
 8010b84:	40021000 	.word	0x40021000

08010b88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b084      	sub	sp, #16
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
 8010b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010b92:	2300      	movs	r3, #0
 8010b94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8010b96:	4b75      	ldr	r3, [pc, #468]	@ (8010d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8010b98:	68db      	ldr	r3, [r3, #12]
 8010b9a:	f003 0303 	and.w	r3, r3, #3
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d018      	beq.n	8010bd4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8010ba2:	4b72      	ldr	r3, [pc, #456]	@ (8010d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8010ba4:	68db      	ldr	r3, [r3, #12]
 8010ba6:	f003 0203 	and.w	r2, r3, #3
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	429a      	cmp	r2, r3
 8010bb0:	d10d      	bne.n	8010bce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
       ||
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d009      	beq.n	8010bce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8010bba:	4b6c      	ldr	r3, [pc, #432]	@ (8010d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8010bbc:	68db      	ldr	r3, [r3, #12]
 8010bbe:	091b      	lsrs	r3, r3, #4
 8010bc0:	f003 0307 	and.w	r3, r3, #7
 8010bc4:	1c5a      	adds	r2, r3, #1
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	685b      	ldr	r3, [r3, #4]
       ||
 8010bca:	429a      	cmp	r2, r3
 8010bcc:	d047      	beq.n	8010c5e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8010bce:	2301      	movs	r3, #1
 8010bd0:	73fb      	strb	r3, [r7, #15]
 8010bd2:	e044      	b.n	8010c5e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	2b03      	cmp	r3, #3
 8010bda:	d018      	beq.n	8010c0e <RCCEx_PLLSAI1_Config+0x86>
 8010bdc:	2b03      	cmp	r3, #3
 8010bde:	d825      	bhi.n	8010c2c <RCCEx_PLLSAI1_Config+0xa4>
 8010be0:	2b01      	cmp	r3, #1
 8010be2:	d002      	beq.n	8010bea <RCCEx_PLLSAI1_Config+0x62>
 8010be4:	2b02      	cmp	r3, #2
 8010be6:	d009      	beq.n	8010bfc <RCCEx_PLLSAI1_Config+0x74>
 8010be8:	e020      	b.n	8010c2c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8010bea:	4b60      	ldr	r3, [pc, #384]	@ (8010d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	f003 0302 	and.w	r3, r3, #2
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d11d      	bne.n	8010c32 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8010bf6:	2301      	movs	r3, #1
 8010bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010bfa:	e01a      	b.n	8010c32 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8010bfc:	4b5b      	ldr	r3, [pc, #364]	@ (8010d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d116      	bne.n	8010c36 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8010c08:	2301      	movs	r3, #1
 8010c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010c0c:	e013      	b.n	8010c36 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8010c0e:	4b57      	ldr	r3, [pc, #348]	@ (8010d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d10f      	bne.n	8010c3a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8010c1a:	4b54      	ldr	r3, [pc, #336]	@ (8010d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d109      	bne.n	8010c3a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8010c26:	2301      	movs	r3, #1
 8010c28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010c2a:	e006      	b.n	8010c3a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8010c2c:	2301      	movs	r3, #1
 8010c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8010c30:	e004      	b.n	8010c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8010c32:	bf00      	nop
 8010c34:	e002      	b.n	8010c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8010c36:	bf00      	nop
 8010c38:	e000      	b.n	8010c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8010c3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8010c3c:	7bfb      	ldrb	r3, [r7, #15]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d10d      	bne.n	8010c5e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8010c42:	4b4a      	ldr	r3, [pc, #296]	@ (8010d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8010c44:	68db      	ldr	r3, [r3, #12]
 8010c46:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	6819      	ldr	r1, [r3, #0]
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	685b      	ldr	r3, [r3, #4]
 8010c52:	3b01      	subs	r3, #1
 8010c54:	011b      	lsls	r3, r3, #4
 8010c56:	430b      	orrs	r3, r1
 8010c58:	4944      	ldr	r1, [pc, #272]	@ (8010d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8010c5a:	4313      	orrs	r3, r2
 8010c5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8010c5e:	7bfb      	ldrb	r3, [r7, #15]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d17d      	bne.n	8010d60 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8010c64:	4b41      	ldr	r3, [pc, #260]	@ (8010d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	4a40      	ldr	r2, [pc, #256]	@ (8010d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8010c6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010c6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010c70:	f7fa f9fc 	bl	800b06c <HAL_GetTick>
 8010c74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8010c76:	e009      	b.n	8010c8c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010c78:	f7fa f9f8 	bl	800b06c <HAL_GetTick>
 8010c7c:	4602      	mov	r2, r0
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	1ad3      	subs	r3, r2, r3
 8010c82:	2b02      	cmp	r3, #2
 8010c84:	d902      	bls.n	8010c8c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8010c86:	2303      	movs	r3, #3
 8010c88:	73fb      	strb	r3, [r7, #15]
        break;
 8010c8a:	e005      	b.n	8010c98 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8010c8c:	4b37      	ldr	r3, [pc, #220]	@ (8010d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d1ef      	bne.n	8010c78 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8010c98:	7bfb      	ldrb	r3, [r7, #15]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d160      	bne.n	8010d60 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d111      	bne.n	8010cc8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010ca4:	4b31      	ldr	r3, [pc, #196]	@ (8010d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8010ca6:	691b      	ldr	r3, [r3, #16]
 8010ca8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8010cac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010cb0:	687a      	ldr	r2, [r7, #4]
 8010cb2:	6892      	ldr	r2, [r2, #8]
 8010cb4:	0211      	lsls	r1, r2, #8
 8010cb6:	687a      	ldr	r2, [r7, #4]
 8010cb8:	68d2      	ldr	r2, [r2, #12]
 8010cba:	0912      	lsrs	r2, r2, #4
 8010cbc:	0452      	lsls	r2, r2, #17
 8010cbe:	430a      	orrs	r2, r1
 8010cc0:	492a      	ldr	r1, [pc, #168]	@ (8010d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8010cc2:	4313      	orrs	r3, r2
 8010cc4:	610b      	str	r3, [r1, #16]
 8010cc6:	e027      	b.n	8010d18 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	2b01      	cmp	r3, #1
 8010ccc:	d112      	bne.n	8010cf4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010cce:	4b27      	ldr	r3, [pc, #156]	@ (8010d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8010cd0:	691b      	ldr	r3, [r3, #16]
 8010cd2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8010cd6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8010cda:	687a      	ldr	r2, [r7, #4]
 8010cdc:	6892      	ldr	r2, [r2, #8]
 8010cde:	0211      	lsls	r1, r2, #8
 8010ce0:	687a      	ldr	r2, [r7, #4]
 8010ce2:	6912      	ldr	r2, [r2, #16]
 8010ce4:	0852      	lsrs	r2, r2, #1
 8010ce6:	3a01      	subs	r2, #1
 8010ce8:	0552      	lsls	r2, r2, #21
 8010cea:	430a      	orrs	r2, r1
 8010cec:	491f      	ldr	r1, [pc, #124]	@ (8010d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8010cee:	4313      	orrs	r3, r2
 8010cf0:	610b      	str	r3, [r1, #16]
 8010cf2:	e011      	b.n	8010d18 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8010d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8010cf6:	691b      	ldr	r3, [r3, #16]
 8010cf8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8010cfc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8010d00:	687a      	ldr	r2, [r7, #4]
 8010d02:	6892      	ldr	r2, [r2, #8]
 8010d04:	0211      	lsls	r1, r2, #8
 8010d06:	687a      	ldr	r2, [r7, #4]
 8010d08:	6952      	ldr	r2, [r2, #20]
 8010d0a:	0852      	lsrs	r2, r2, #1
 8010d0c:	3a01      	subs	r2, #1
 8010d0e:	0652      	lsls	r2, r2, #25
 8010d10:	430a      	orrs	r2, r1
 8010d12:	4916      	ldr	r1, [pc, #88]	@ (8010d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8010d14:	4313      	orrs	r3, r2
 8010d16:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8010d18:	4b14      	ldr	r3, [pc, #80]	@ (8010d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	4a13      	ldr	r2, [pc, #76]	@ (8010d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8010d1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010d22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010d24:	f7fa f9a2 	bl	800b06c <HAL_GetTick>
 8010d28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8010d2a:	e009      	b.n	8010d40 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010d2c:	f7fa f99e 	bl	800b06c <HAL_GetTick>
 8010d30:	4602      	mov	r2, r0
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	1ad3      	subs	r3, r2, r3
 8010d36:	2b02      	cmp	r3, #2
 8010d38:	d902      	bls.n	8010d40 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8010d3a:	2303      	movs	r3, #3
 8010d3c:	73fb      	strb	r3, [r7, #15]
          break;
 8010d3e:	e005      	b.n	8010d4c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8010d40:	4b0a      	ldr	r3, [pc, #40]	@ (8010d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d0ef      	beq.n	8010d2c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8010d4c:	7bfb      	ldrb	r3, [r7, #15]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d106      	bne.n	8010d60 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8010d52:	4b06      	ldr	r3, [pc, #24]	@ (8010d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8010d54:	691a      	ldr	r2, [r3, #16]
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	699b      	ldr	r3, [r3, #24]
 8010d5a:	4904      	ldr	r1, [pc, #16]	@ (8010d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8010d5c:	4313      	orrs	r3, r2
 8010d5e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8010d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	3710      	adds	r7, #16
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd80      	pop	{r7, pc}
 8010d6a:	bf00      	nop
 8010d6c:	40021000 	.word	0x40021000

08010d70 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b084      	sub	sp, #16
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
 8010d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8010d7e:	4b6a      	ldr	r3, [pc, #424]	@ (8010f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010d80:	68db      	ldr	r3, [r3, #12]
 8010d82:	f003 0303 	and.w	r3, r3, #3
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d018      	beq.n	8010dbc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8010d8a:	4b67      	ldr	r3, [pc, #412]	@ (8010f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010d8c:	68db      	ldr	r3, [r3, #12]
 8010d8e:	f003 0203 	and.w	r2, r3, #3
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	429a      	cmp	r2, r3
 8010d98:	d10d      	bne.n	8010db6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	681b      	ldr	r3, [r3, #0]
       ||
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d009      	beq.n	8010db6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8010da2:	4b61      	ldr	r3, [pc, #388]	@ (8010f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010da4:	68db      	ldr	r3, [r3, #12]
 8010da6:	091b      	lsrs	r3, r3, #4
 8010da8:	f003 0307 	and.w	r3, r3, #7
 8010dac:	1c5a      	adds	r2, r3, #1
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	685b      	ldr	r3, [r3, #4]
       ||
 8010db2:	429a      	cmp	r2, r3
 8010db4:	d047      	beq.n	8010e46 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8010db6:	2301      	movs	r3, #1
 8010db8:	73fb      	strb	r3, [r7, #15]
 8010dba:	e044      	b.n	8010e46 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	2b03      	cmp	r3, #3
 8010dc2:	d018      	beq.n	8010df6 <RCCEx_PLLSAI2_Config+0x86>
 8010dc4:	2b03      	cmp	r3, #3
 8010dc6:	d825      	bhi.n	8010e14 <RCCEx_PLLSAI2_Config+0xa4>
 8010dc8:	2b01      	cmp	r3, #1
 8010dca:	d002      	beq.n	8010dd2 <RCCEx_PLLSAI2_Config+0x62>
 8010dcc:	2b02      	cmp	r3, #2
 8010dce:	d009      	beq.n	8010de4 <RCCEx_PLLSAI2_Config+0x74>
 8010dd0:	e020      	b.n	8010e14 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8010dd2:	4b55      	ldr	r3, [pc, #340]	@ (8010f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	f003 0302 	and.w	r3, r3, #2
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d11d      	bne.n	8010e1a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8010dde:	2301      	movs	r3, #1
 8010de0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010de2:	e01a      	b.n	8010e1a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8010de4:	4b50      	ldr	r3, [pc, #320]	@ (8010f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d116      	bne.n	8010e1e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8010df0:	2301      	movs	r3, #1
 8010df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010df4:	e013      	b.n	8010e1e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8010df6:	4b4c      	ldr	r3, [pc, #304]	@ (8010f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d10f      	bne.n	8010e22 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8010e02:	4b49      	ldr	r3, [pc, #292]	@ (8010f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d109      	bne.n	8010e22 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8010e0e:	2301      	movs	r3, #1
 8010e10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010e12:	e006      	b.n	8010e22 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8010e14:	2301      	movs	r3, #1
 8010e16:	73fb      	strb	r3, [r7, #15]
      break;
 8010e18:	e004      	b.n	8010e24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8010e1a:	bf00      	nop
 8010e1c:	e002      	b.n	8010e24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8010e1e:	bf00      	nop
 8010e20:	e000      	b.n	8010e24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8010e22:	bf00      	nop
    }

    if(status == HAL_OK)
 8010e24:	7bfb      	ldrb	r3, [r7, #15]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d10d      	bne.n	8010e46 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8010e2a:	4b3f      	ldr	r3, [pc, #252]	@ (8010f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010e2c:	68db      	ldr	r3, [r3, #12]
 8010e2e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	6819      	ldr	r1, [r3, #0]
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	685b      	ldr	r3, [r3, #4]
 8010e3a:	3b01      	subs	r3, #1
 8010e3c:	011b      	lsls	r3, r3, #4
 8010e3e:	430b      	orrs	r3, r1
 8010e40:	4939      	ldr	r1, [pc, #228]	@ (8010f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010e42:	4313      	orrs	r3, r2
 8010e44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8010e46:	7bfb      	ldrb	r3, [r7, #15]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d167      	bne.n	8010f1c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8010e4c:	4b36      	ldr	r3, [pc, #216]	@ (8010f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	4a35      	ldr	r2, [pc, #212]	@ (8010f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010e52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010e56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010e58:	f7fa f908 	bl	800b06c <HAL_GetTick>
 8010e5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8010e5e:	e009      	b.n	8010e74 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8010e60:	f7fa f904 	bl	800b06c <HAL_GetTick>
 8010e64:	4602      	mov	r2, r0
 8010e66:	68bb      	ldr	r3, [r7, #8]
 8010e68:	1ad3      	subs	r3, r2, r3
 8010e6a:	2b02      	cmp	r3, #2
 8010e6c:	d902      	bls.n	8010e74 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8010e6e:	2303      	movs	r3, #3
 8010e70:	73fb      	strb	r3, [r7, #15]
        break;
 8010e72:	e005      	b.n	8010e80 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8010e74:	4b2c      	ldr	r3, [pc, #176]	@ (8010f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d1ef      	bne.n	8010e60 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8010e80:	7bfb      	ldrb	r3, [r7, #15]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d14a      	bne.n	8010f1c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d111      	bne.n	8010eb0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8010e8c:	4b26      	ldr	r3, [pc, #152]	@ (8010f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010e8e:	695b      	ldr	r3, [r3, #20]
 8010e90:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8010e94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010e98:	687a      	ldr	r2, [r7, #4]
 8010e9a:	6892      	ldr	r2, [r2, #8]
 8010e9c:	0211      	lsls	r1, r2, #8
 8010e9e:	687a      	ldr	r2, [r7, #4]
 8010ea0:	68d2      	ldr	r2, [r2, #12]
 8010ea2:	0912      	lsrs	r2, r2, #4
 8010ea4:	0452      	lsls	r2, r2, #17
 8010ea6:	430a      	orrs	r2, r1
 8010ea8:	491f      	ldr	r1, [pc, #124]	@ (8010f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010eaa:	4313      	orrs	r3, r2
 8010eac:	614b      	str	r3, [r1, #20]
 8010eae:	e011      	b.n	8010ed4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8010eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8010f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010eb2:	695b      	ldr	r3, [r3, #20]
 8010eb4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8010eb8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8010ebc:	687a      	ldr	r2, [r7, #4]
 8010ebe:	6892      	ldr	r2, [r2, #8]
 8010ec0:	0211      	lsls	r1, r2, #8
 8010ec2:	687a      	ldr	r2, [r7, #4]
 8010ec4:	6912      	ldr	r2, [r2, #16]
 8010ec6:	0852      	lsrs	r2, r2, #1
 8010ec8:	3a01      	subs	r2, #1
 8010eca:	0652      	lsls	r2, r2, #25
 8010ecc:	430a      	orrs	r2, r1
 8010ece:	4916      	ldr	r1, [pc, #88]	@ (8010f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010ed0:	4313      	orrs	r3, r2
 8010ed2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8010ed4:	4b14      	ldr	r3, [pc, #80]	@ (8010f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	4a13      	ldr	r2, [pc, #76]	@ (8010f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010eda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010ede:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010ee0:	f7fa f8c4 	bl	800b06c <HAL_GetTick>
 8010ee4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8010ee6:	e009      	b.n	8010efc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8010ee8:	f7fa f8c0 	bl	800b06c <HAL_GetTick>
 8010eec:	4602      	mov	r2, r0
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	1ad3      	subs	r3, r2, r3
 8010ef2:	2b02      	cmp	r3, #2
 8010ef4:	d902      	bls.n	8010efc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8010ef6:	2303      	movs	r3, #3
 8010ef8:	73fb      	strb	r3, [r7, #15]
          break;
 8010efa:	e005      	b.n	8010f08 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8010efc:	4b0a      	ldr	r3, [pc, #40]	@ (8010f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d0ef      	beq.n	8010ee8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8010f08:	7bfb      	ldrb	r3, [r7, #15]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d106      	bne.n	8010f1c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8010f0e:	4b06      	ldr	r3, [pc, #24]	@ (8010f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010f10:	695a      	ldr	r2, [r3, #20]
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	695b      	ldr	r3, [r3, #20]
 8010f16:	4904      	ldr	r1, [pc, #16]	@ (8010f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010f18:	4313      	orrs	r3, r2
 8010f1a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8010f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f1e:	4618      	mov	r0, r3
 8010f20:	3710      	adds	r7, #16
 8010f22:	46bd      	mov	sp, r7
 8010f24:	bd80      	pop	{r7, pc}
 8010f26:	bf00      	nop
 8010f28:	40021000 	.word	0x40021000

08010f2c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b084      	sub	sp, #16
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010f34:	2301      	movs	r3, #1
 8010f36:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d079      	beq.n	8011032 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8010f44:	b2db      	uxtb	r3, r3
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d106      	bne.n	8010f58 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f7f6 fc26 	bl	80077a4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2202      	movs	r2, #2
 8010f5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	68db      	ldr	r3, [r3, #12]
 8010f66:	f003 0310 	and.w	r3, r3, #16
 8010f6a:	2b10      	cmp	r3, #16
 8010f6c:	d058      	beq.n	8011020 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	22ca      	movs	r2, #202	@ 0xca
 8010f74:	625a      	str	r2, [r3, #36]	@ 0x24
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	2253      	movs	r2, #83	@ 0x53
 8010f7c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8010f7e:	6878      	ldr	r0, [r7, #4]
 8010f80:	f000 fb82 	bl	8011688 <RTC_EnterInitMode>
 8010f84:	4603      	mov	r3, r0
 8010f86:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8010f88:	7bfb      	ldrb	r3, [r7, #15]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d127      	bne.n	8010fde <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	689b      	ldr	r3, [r3, #8]
 8010f94:	687a      	ldr	r2, [r7, #4]
 8010f96:	6812      	ldr	r2, [r2, #0]
 8010f98:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010f9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010fa0:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	6899      	ldr	r1, [r3, #8]
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	685a      	ldr	r2, [r3, #4]
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	691b      	ldr	r3, [r3, #16]
 8010fb0:	431a      	orrs	r2, r3
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	699b      	ldr	r3, [r3, #24]
 8010fb6:	431a      	orrs	r2, r3
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	430a      	orrs	r2, r1
 8010fbe:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	687a      	ldr	r2, [r7, #4]
 8010fc6:	68d2      	ldr	r2, [r2, #12]
 8010fc8:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	6919      	ldr	r1, [r3, #16]
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	689b      	ldr	r3, [r3, #8]
 8010fd4:	041a      	lsls	r2, r3, #16
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	430a      	orrs	r2, r1
 8010fdc:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8010fde:	6878      	ldr	r0, [r7, #4]
 8010fe0:	f000 fb86 	bl	80116f0 <RTC_ExitInitMode>
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8010fe8:	7bfb      	ldrb	r3, [r7, #15]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d113      	bne.n	8011016 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	f022 0203 	bic.w	r2, r2, #3
 8010ffc:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	69da      	ldr	r2, [r3, #28]
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	695b      	ldr	r3, [r3, #20]
 801100c:	431a      	orrs	r2, r3
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	430a      	orrs	r2, r1
 8011014:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	22ff      	movs	r2, #255	@ 0xff
 801101c:	625a      	str	r2, [r3, #36]	@ 0x24
 801101e:	e001      	b.n	8011024 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8011020:	2300      	movs	r3, #0
 8011022:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8011024:	7bfb      	ldrb	r3, [r7, #15]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d103      	bne.n	8011032 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2201      	movs	r2, #1
 801102e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8011032:	7bfb      	ldrb	r3, [r7, #15]
}
 8011034:	4618      	mov	r0, r3
 8011036:	3710      	adds	r7, #16
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}

0801103c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801103c:	b590      	push	{r4, r7, lr}
 801103e:	b087      	sub	sp, #28
 8011040:	af00      	add	r7, sp, #0
 8011042:	60f8      	str	r0, [r7, #12]
 8011044:	60b9      	str	r1, [r7, #8]
 8011046:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801104e:	2b01      	cmp	r3, #1
 8011050:	d101      	bne.n	8011056 <HAL_RTC_SetTime+0x1a>
 8011052:	2302      	movs	r3, #2
 8011054:	e08b      	b.n	801116e <HAL_RTC_SetTime+0x132>
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	2201      	movs	r2, #1
 801105a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	2202      	movs	r2, #2
 8011062:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	22ca      	movs	r2, #202	@ 0xca
 801106c:	625a      	str	r2, [r3, #36]	@ 0x24
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	2253      	movs	r2, #83	@ 0x53
 8011074:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011076:	68f8      	ldr	r0, [r7, #12]
 8011078:	f000 fb06 	bl	8011688 <RTC_EnterInitMode>
 801107c:	4603      	mov	r3, r0
 801107e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011080:	7cfb      	ldrb	r3, [r7, #19]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d163      	bne.n	801114e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d126      	bne.n	80110da <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	689b      	ldr	r3, [r3, #8]
 8011092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011096:	2b00      	cmp	r3, #0
 8011098:	d102      	bne.n	80110a0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 801109a:	68bb      	ldr	r3, [r7, #8]
 801109c:	2200      	movs	r2, #0
 801109e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80110a0:	68bb      	ldr	r3, [r7, #8]
 80110a2:	781b      	ldrb	r3, [r3, #0]
 80110a4:	4618      	mov	r0, r3
 80110a6:	f000 fb61 	bl	801176c <RTC_ByteToBcd2>
 80110aa:	4603      	mov	r3, r0
 80110ac:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80110ae:	68bb      	ldr	r3, [r7, #8]
 80110b0:	785b      	ldrb	r3, [r3, #1]
 80110b2:	4618      	mov	r0, r3
 80110b4:	f000 fb5a 	bl	801176c <RTC_ByteToBcd2>
 80110b8:	4603      	mov	r3, r0
 80110ba:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80110bc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80110be:	68bb      	ldr	r3, [r7, #8]
 80110c0:	789b      	ldrb	r3, [r3, #2]
 80110c2:	4618      	mov	r0, r3
 80110c4:	f000 fb52 	bl	801176c <RTC_ByteToBcd2>
 80110c8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80110ca:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80110ce:	68bb      	ldr	r3, [r7, #8]
 80110d0:	78db      	ldrb	r3, [r3, #3]
 80110d2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80110d4:	4313      	orrs	r3, r2
 80110d6:	617b      	str	r3, [r7, #20]
 80110d8:	e018      	b.n	801110c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	689b      	ldr	r3, [r3, #8]
 80110e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d102      	bne.n	80110ee <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80110e8:	68bb      	ldr	r3, [r7, #8]
 80110ea:	2200      	movs	r2, #0
 80110ec:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80110ee:	68bb      	ldr	r3, [r7, #8]
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80110f4:	68bb      	ldr	r3, [r7, #8]
 80110f6:	785b      	ldrb	r3, [r3, #1]
 80110f8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80110fa:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80110fc:	68ba      	ldr	r2, [r7, #8]
 80110fe:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011100:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011102:	68bb      	ldr	r3, [r7, #8]
 8011104:	78db      	ldrb	r3, [r3, #3]
 8011106:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011108:	4313      	orrs	r3, r2
 801110a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	681a      	ldr	r2, [r3, #0]
 8011110:	697b      	ldr	r3, [r7, #20]
 8011112:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8011116:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 801111a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	689a      	ldr	r2, [r3, #8]
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 801112a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	6899      	ldr	r1, [r3, #8]
 8011132:	68bb      	ldr	r3, [r7, #8]
 8011134:	68da      	ldr	r2, [r3, #12]
 8011136:	68bb      	ldr	r3, [r7, #8]
 8011138:	691b      	ldr	r3, [r3, #16]
 801113a:	431a      	orrs	r2, r3
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	430a      	orrs	r2, r1
 8011142:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011144:	68f8      	ldr	r0, [r7, #12]
 8011146:	f000 fad3 	bl	80116f0 <RTC_ExitInitMode>
 801114a:	4603      	mov	r3, r0
 801114c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	22ff      	movs	r2, #255	@ 0xff
 8011154:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8011156:	7cfb      	ldrb	r3, [r7, #19]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d103      	bne.n	8011164 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	2201      	movs	r2, #1
 8011160:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	2200      	movs	r2, #0
 8011168:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 801116c:	7cfb      	ldrb	r3, [r7, #19]
}
 801116e:	4618      	mov	r0, r3
 8011170:	371c      	adds	r7, #28
 8011172:	46bd      	mov	sp, r7
 8011174:	bd90      	pop	{r4, r7, pc}

08011176 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011176:	b580      	push	{r7, lr}
 8011178:	b086      	sub	sp, #24
 801117a:	af00      	add	r7, sp, #0
 801117c:	60f8      	str	r0, [r7, #12]
 801117e:	60b9      	str	r1, [r7, #8]
 8011180:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011188:	68bb      	ldr	r3, [r7, #8]
 801118a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	691b      	ldr	r3, [r3, #16]
 8011192:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8011196:	68bb      	ldr	r3, [r7, #8]
 8011198:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80111a4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80111a8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80111aa:	697b      	ldr	r3, [r7, #20]
 80111ac:	0c1b      	lsrs	r3, r3, #16
 80111ae:	b2db      	uxtb	r3, r3
 80111b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80111b4:	b2da      	uxtb	r2, r3
 80111b6:	68bb      	ldr	r3, [r7, #8]
 80111b8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80111ba:	697b      	ldr	r3, [r7, #20]
 80111bc:	0a1b      	lsrs	r3, r3, #8
 80111be:	b2db      	uxtb	r3, r3
 80111c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80111c4:	b2da      	uxtb	r2, r3
 80111c6:	68bb      	ldr	r3, [r7, #8]
 80111c8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80111ca:	697b      	ldr	r3, [r7, #20]
 80111cc:	b2db      	uxtb	r3, r3
 80111ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80111d2:	b2da      	uxtb	r2, r3
 80111d4:	68bb      	ldr	r3, [r7, #8]
 80111d6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	0d9b      	lsrs	r3, r3, #22
 80111dc:	b2db      	uxtb	r3, r3
 80111de:	f003 0301 	and.w	r3, r3, #1
 80111e2:	b2da      	uxtb	r2, r3
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d11a      	bne.n	8011224 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80111ee:	68bb      	ldr	r3, [r7, #8]
 80111f0:	781b      	ldrb	r3, [r3, #0]
 80111f2:	4618      	mov	r0, r3
 80111f4:	f000 fada 	bl	80117ac <RTC_Bcd2ToByte>
 80111f8:	4603      	mov	r3, r0
 80111fa:	461a      	mov	r2, r3
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011200:	68bb      	ldr	r3, [r7, #8]
 8011202:	785b      	ldrb	r3, [r3, #1]
 8011204:	4618      	mov	r0, r3
 8011206:	f000 fad1 	bl	80117ac <RTC_Bcd2ToByte>
 801120a:	4603      	mov	r3, r0
 801120c:	461a      	mov	r2, r3
 801120e:	68bb      	ldr	r3, [r7, #8]
 8011210:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8011212:	68bb      	ldr	r3, [r7, #8]
 8011214:	789b      	ldrb	r3, [r3, #2]
 8011216:	4618      	mov	r0, r3
 8011218:	f000 fac8 	bl	80117ac <RTC_Bcd2ToByte>
 801121c:	4603      	mov	r3, r0
 801121e:	461a      	mov	r2, r3
 8011220:	68bb      	ldr	r3, [r7, #8]
 8011222:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8011224:	2300      	movs	r3, #0
}
 8011226:	4618      	mov	r0, r3
 8011228:	3718      	adds	r7, #24
 801122a:	46bd      	mov	sp, r7
 801122c:	bd80      	pop	{r7, pc}

0801122e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801122e:	b590      	push	{r4, r7, lr}
 8011230:	b087      	sub	sp, #28
 8011232:	af00      	add	r7, sp, #0
 8011234:	60f8      	str	r0, [r7, #12]
 8011236:	60b9      	str	r1, [r7, #8]
 8011238:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011240:	2b01      	cmp	r3, #1
 8011242:	d101      	bne.n	8011248 <HAL_RTC_SetDate+0x1a>
 8011244:	2302      	movs	r3, #2
 8011246:	e075      	b.n	8011334 <HAL_RTC_SetDate+0x106>
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	2201      	movs	r2, #1
 801124c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	2202      	movs	r2, #2
 8011254:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d10e      	bne.n	801127c <HAL_RTC_SetDate+0x4e>
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	785b      	ldrb	r3, [r3, #1]
 8011262:	f003 0310 	and.w	r3, r3, #16
 8011266:	2b00      	cmp	r3, #0
 8011268:	d008      	beq.n	801127c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801126a:	68bb      	ldr	r3, [r7, #8]
 801126c:	785b      	ldrb	r3, [r3, #1]
 801126e:	f023 0310 	bic.w	r3, r3, #16
 8011272:	b2db      	uxtb	r3, r3
 8011274:	330a      	adds	r3, #10
 8011276:	b2da      	uxtb	r2, r3
 8011278:	68bb      	ldr	r3, [r7, #8]
 801127a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d11c      	bne.n	80112bc <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8011282:	68bb      	ldr	r3, [r7, #8]
 8011284:	78db      	ldrb	r3, [r3, #3]
 8011286:	4618      	mov	r0, r3
 8011288:	f000 fa70 	bl	801176c <RTC_ByteToBcd2>
 801128c:	4603      	mov	r3, r0
 801128e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	785b      	ldrb	r3, [r3, #1]
 8011294:	4618      	mov	r0, r3
 8011296:	f000 fa69 	bl	801176c <RTC_ByteToBcd2>
 801129a:	4603      	mov	r3, r0
 801129c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 801129e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80112a0:	68bb      	ldr	r3, [r7, #8]
 80112a2:	789b      	ldrb	r3, [r3, #2]
 80112a4:	4618      	mov	r0, r3
 80112a6:	f000 fa61 	bl	801176c <RTC_ByteToBcd2>
 80112aa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80112ac:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80112b0:	68bb      	ldr	r3, [r7, #8]
 80112b2:	781b      	ldrb	r3, [r3, #0]
 80112b4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80112b6:	4313      	orrs	r3, r2
 80112b8:	617b      	str	r3, [r7, #20]
 80112ba:	e00e      	b.n	80112da <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80112bc:	68bb      	ldr	r3, [r7, #8]
 80112be:	78db      	ldrb	r3, [r3, #3]
 80112c0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80112c2:	68bb      	ldr	r3, [r7, #8]
 80112c4:	785b      	ldrb	r3, [r3, #1]
 80112c6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80112c8:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80112ca:	68ba      	ldr	r2, [r7, #8]
 80112cc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80112ce:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80112d0:	68bb      	ldr	r3, [r7, #8]
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80112d6:	4313      	orrs	r3, r2
 80112d8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	22ca      	movs	r2, #202	@ 0xca
 80112e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	2253      	movs	r2, #83	@ 0x53
 80112e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80112ea:	68f8      	ldr	r0, [r7, #12]
 80112ec:	f000 f9cc 	bl	8011688 <RTC_EnterInitMode>
 80112f0:	4603      	mov	r3, r0
 80112f2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80112f4:	7cfb      	ldrb	r3, [r7, #19]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d10c      	bne.n	8011314 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	681a      	ldr	r2, [r3, #0]
 80112fe:	697b      	ldr	r3, [r7, #20]
 8011300:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8011304:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011308:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801130a:	68f8      	ldr	r0, [r7, #12]
 801130c:	f000 f9f0 	bl	80116f0 <RTC_ExitInitMode>
 8011310:	4603      	mov	r3, r0
 8011312:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	22ff      	movs	r2, #255	@ 0xff
 801131a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 801131c:	7cfb      	ldrb	r3, [r7, #19]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d103      	bne.n	801132a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	2201      	movs	r2, #1
 8011326:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	2200      	movs	r2, #0
 801132e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011332:	7cfb      	ldrb	r3, [r7, #19]
}
 8011334:	4618      	mov	r0, r3
 8011336:	371c      	adds	r7, #28
 8011338:	46bd      	mov	sp, r7
 801133a:	bd90      	pop	{r4, r7, pc}

0801133c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 801133c:	b590      	push	{r4, r7, lr}
 801133e:	b089      	sub	sp, #36	@ 0x24
 8011340:	af00      	add	r7, sp, #0
 8011342:	60f8      	str	r0, [r7, #12]
 8011344:	60b9      	str	r1, [r7, #8]
 8011346:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801134e:	2b01      	cmp	r3, #1
 8011350:	d101      	bne.n	8011356 <HAL_RTC_SetAlarm_IT+0x1a>
 8011352:	2302      	movs	r3, #2
 8011354:	e127      	b.n	80115a6 <HAL_RTC_SetAlarm_IT+0x26a>
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	2201      	movs	r2, #1
 801135a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	2202      	movs	r2, #2
 8011362:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d137      	bne.n	80113dc <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	689b      	ldr	r3, [r3, #8]
 8011372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011376:	2b00      	cmp	r3, #0
 8011378:	d102      	bne.n	8011380 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	2200      	movs	r2, #0
 801137e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011380:	68bb      	ldr	r3, [r7, #8]
 8011382:	781b      	ldrb	r3, [r3, #0]
 8011384:	4618      	mov	r0, r3
 8011386:	f000 f9f1 	bl	801176c <RTC_ByteToBcd2>
 801138a:	4603      	mov	r3, r0
 801138c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 801138e:	68bb      	ldr	r3, [r7, #8]
 8011390:	785b      	ldrb	r3, [r3, #1]
 8011392:	4618      	mov	r0, r3
 8011394:	f000 f9ea 	bl	801176c <RTC_ByteToBcd2>
 8011398:	4603      	mov	r3, r0
 801139a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 801139c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 801139e:	68bb      	ldr	r3, [r7, #8]
 80113a0:	789b      	ldrb	r3, [r3, #2]
 80113a2:	4618      	mov	r0, r3
 80113a4:	f000 f9e2 	bl	801176c <RTC_ByteToBcd2>
 80113a8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80113aa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80113ae:	68bb      	ldr	r3, [r7, #8]
 80113b0:	78db      	ldrb	r3, [r3, #3]
 80113b2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80113b4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80113b8:	68bb      	ldr	r3, [r7, #8]
 80113ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80113be:	4618      	mov	r0, r3
 80113c0:	f000 f9d4 	bl	801176c <RTC_ByteToBcd2>
 80113c4:	4603      	mov	r3, r0
 80113c6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80113c8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80113d0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80113d2:	68bb      	ldr	r3, [r7, #8]
 80113d4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80113d6:	4313      	orrs	r3, r2
 80113d8:	61fb      	str	r3, [r7, #28]
 80113da:	e023      	b.n	8011424 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	689b      	ldr	r3, [r3, #8]
 80113e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d102      	bne.n	80113f0 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80113ea:	68bb      	ldr	r3, [r7, #8]
 80113ec:	2200      	movs	r2, #0
 80113ee:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	781b      	ldrb	r3, [r3, #0]
 80113f4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	785b      	ldrb	r3, [r3, #1]
 80113fa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80113fc:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80113fe:	68ba      	ldr	r2, [r7, #8]
 8011400:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8011402:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8011404:	68bb      	ldr	r3, [r7, #8]
 8011406:	78db      	ldrb	r3, [r3, #3]
 8011408:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 801140a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 801140c:	68bb      	ldr	r3, [r7, #8]
 801140e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8011412:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8011414:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8011416:	68bb      	ldr	r3, [r7, #8]
 8011418:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 801141a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 801141c:	68bb      	ldr	r3, [r7, #8]
 801141e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011420:	4313      	orrs	r3, r2
 8011422:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	685a      	ldr	r2, [r3, #4]
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	69db      	ldr	r3, [r3, #28]
 801142c:	4313      	orrs	r3, r2
 801142e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	22ca      	movs	r2, #202	@ 0xca
 8011436:	625a      	str	r2, [r3, #36]	@ 0x24
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	2253      	movs	r2, #83	@ 0x53
 801143e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011444:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011448:	d14a      	bne.n	80114e0 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	689a      	ldr	r2, [r3, #8]
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011458:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	68db      	ldr	r3, [r3, #12]
 8011460:	b2da      	uxtb	r2, r3
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 801146a:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 801146c:	f7f9 fdfe 	bl	800b06c <HAL_GetTick>
 8011470:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8011472:	e015      	b.n	80114a0 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011474:	f7f9 fdfa 	bl	800b06c <HAL_GetTick>
 8011478:	4602      	mov	r2, r0
 801147a:	693b      	ldr	r3, [r7, #16]
 801147c:	1ad3      	subs	r3, r2, r3
 801147e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011482:	d90d      	bls.n	80114a0 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	22ff      	movs	r2, #255	@ 0xff
 801148a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	2203      	movs	r2, #3
 8011490:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	2200      	movs	r2, #0
 8011498:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 801149c:	2303      	movs	r3, #3
 801149e:	e082      	b.n	80115a6 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	68db      	ldr	r3, [r3, #12]
 80114a6:	f003 0301 	and.w	r3, r3, #1
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d0e2      	beq.n	8011474 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	69fa      	ldr	r2, [r7, #28]
 80114b4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	69ba      	ldr	r2, [r7, #24]
 80114bc:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	689a      	ldr	r2, [r3, #8]
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80114cc:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	689a      	ldr	r2, [r3, #8]
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80114dc:	609a      	str	r2, [r3, #8]
 80114de:	e049      	b.n	8011574 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	689a      	ldr	r2, [r3, #8]
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80114ee:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	68db      	ldr	r3, [r3, #12]
 80114f6:	b2da      	uxtb	r2, r3
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8011500:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8011502:	f7f9 fdb3 	bl	800b06c <HAL_GetTick>
 8011506:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8011508:	e015      	b.n	8011536 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801150a:	f7f9 fdaf 	bl	800b06c <HAL_GetTick>
 801150e:	4602      	mov	r2, r0
 8011510:	697b      	ldr	r3, [r7, #20]
 8011512:	1ad3      	subs	r3, r2, r3
 8011514:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011518:	d90d      	bls.n	8011536 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	22ff      	movs	r2, #255	@ 0xff
 8011520:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	2203      	movs	r2, #3
 8011526:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	2200      	movs	r2, #0
 801152e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8011532:	2303      	movs	r3, #3
 8011534:	e037      	b.n	80115a6 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	68db      	ldr	r3, [r3, #12]
 801153c:	f003 0302 	and.w	r3, r3, #2
 8011540:	2b00      	cmp	r3, #0
 8011542:	d0e2      	beq.n	801150a <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	69fa      	ldr	r2, [r7, #28]
 801154a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	69ba      	ldr	r2, [r7, #24]
 8011552:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	689a      	ldr	r2, [r3, #8]
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011562:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	689a      	ldr	r2, [r3, #8]
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8011572:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8011574:	4b0e      	ldr	r3, [pc, #56]	@ (80115b0 <HAL_RTC_SetAlarm_IT+0x274>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	4a0d      	ldr	r2, [pc, #52]	@ (80115b0 <HAL_RTC_SetAlarm_IT+0x274>)
 801157a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801157e:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8011580:	4b0b      	ldr	r3, [pc, #44]	@ (80115b0 <HAL_RTC_SetAlarm_IT+0x274>)
 8011582:	689b      	ldr	r3, [r3, #8]
 8011584:	4a0a      	ldr	r2, [pc, #40]	@ (80115b0 <HAL_RTC_SetAlarm_IT+0x274>)
 8011586:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801158a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	22ff      	movs	r2, #255	@ 0xff
 8011592:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	2201      	movs	r2, #1
 8011598:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	2200      	movs	r2, #0
 80115a0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80115a4:	2300      	movs	r3, #0
}
 80115a6:	4618      	mov	r0, r3
 80115a8:	3724      	adds	r7, #36	@ 0x24
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd90      	pop	{r4, r7, pc}
 80115ae:	bf00      	nop
 80115b0:	40010400 	.word	0x40010400

080115b4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b082      	sub	sp, #8
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80115bc:	4b1f      	ldr	r3, [pc, #124]	@ (801163c <HAL_RTC_AlarmIRQHandler+0x88>)
 80115be:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80115c2:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	689b      	ldr	r3, [r3, #8]
 80115ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d012      	beq.n	80115f8 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	68db      	ldr	r3, [r3, #12]
 80115d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d00b      	beq.n	80115f8 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	68db      	ldr	r3, [r3, #12]
 80115e6:	b2da      	uxtb	r2, r3
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80115f0:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80115f2:	6878      	ldr	r0, [r7, #4]
 80115f4:	f7f1 faa2 	bl	8002b3c <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	689b      	ldr	r3, [r3, #8]
 80115fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011602:	2b00      	cmp	r3, #0
 8011604:	d012      	beq.n	801162c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	68db      	ldr	r3, [r3, #12]
 801160c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011610:	2b00      	cmp	r3, #0
 8011612:	d00b      	beq.n	801162c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	68db      	ldr	r3, [r3, #12]
 801161a:	b2da      	uxtb	r2, r3
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8011624:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8011626:	6878      	ldr	r0, [r7, #4]
 8011628:	f000 f8da 	bl	80117e0 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	2201      	movs	r2, #1
 8011630:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8011634:	bf00      	nop
 8011636:	3708      	adds	r7, #8
 8011638:	46bd      	mov	sp, r7
 801163a:	bd80      	pop	{r7, pc}
 801163c:	40010400 	.word	0x40010400

08011640 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8011640:	b580      	push	{r7, lr}
 8011642:	b084      	sub	sp, #16
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	4a0d      	ldr	r2, [pc, #52]	@ (8011684 <HAL_RTC_WaitForSynchro+0x44>)
 801164e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8011650:	f7f9 fd0c 	bl	800b06c <HAL_GetTick>
 8011654:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011656:	e009      	b.n	801166c <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011658:	f7f9 fd08 	bl	800b06c <HAL_GetTick>
 801165c:	4602      	mov	r2, r0
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	1ad3      	subs	r3, r2, r3
 8011662:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011666:	d901      	bls.n	801166c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8011668:	2303      	movs	r3, #3
 801166a:	e007      	b.n	801167c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	68db      	ldr	r3, [r3, #12]
 8011672:	f003 0320 	and.w	r3, r3, #32
 8011676:	2b00      	cmp	r3, #0
 8011678:	d0ee      	beq.n	8011658 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 801167a:	2300      	movs	r3, #0
}
 801167c:	4618      	mov	r0, r3
 801167e:	3710      	adds	r7, #16
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}
 8011684:	0003ff5f 	.word	0x0003ff5f

08011688 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8011688:	b580      	push	{r7, lr}
 801168a:	b084      	sub	sp, #16
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011690:	2300      	movs	r3, #0
 8011692:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	68db      	ldr	r3, [r3, #12]
 801169a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d120      	bne.n	80116e4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	f04f 32ff 	mov.w	r2, #4294967295
 80116aa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80116ac:	f7f9 fcde 	bl	800b06c <HAL_GetTick>
 80116b0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80116b2:	e00d      	b.n	80116d0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80116b4:	f7f9 fcda 	bl	800b06c <HAL_GetTick>
 80116b8:	4602      	mov	r2, r0
 80116ba:	68bb      	ldr	r3, [r7, #8]
 80116bc:	1ad3      	subs	r3, r2, r3
 80116be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80116c2:	d905      	bls.n	80116d0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80116c4:	2303      	movs	r3, #3
 80116c6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2203      	movs	r2, #3
 80116cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	68db      	ldr	r3, [r3, #12]
 80116d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d102      	bne.n	80116e4 <RTC_EnterInitMode+0x5c>
 80116de:	7bfb      	ldrb	r3, [r7, #15]
 80116e0:	2b03      	cmp	r3, #3
 80116e2:	d1e7      	bne.n	80116b4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80116e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80116e6:	4618      	mov	r0, r3
 80116e8:	3710      	adds	r7, #16
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}
	...

080116f0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b084      	sub	sp, #16
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80116f8:	2300      	movs	r3, #0
 80116fa:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80116fc:	4b1a      	ldr	r3, [pc, #104]	@ (8011768 <RTC_ExitInitMode+0x78>)
 80116fe:	68db      	ldr	r3, [r3, #12]
 8011700:	4a19      	ldr	r2, [pc, #100]	@ (8011768 <RTC_ExitInitMode+0x78>)
 8011702:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011706:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011708:	4b17      	ldr	r3, [pc, #92]	@ (8011768 <RTC_ExitInitMode+0x78>)
 801170a:	689b      	ldr	r3, [r3, #8]
 801170c:	f003 0320 	and.w	r3, r3, #32
 8011710:	2b00      	cmp	r3, #0
 8011712:	d10c      	bne.n	801172e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011714:	6878      	ldr	r0, [r7, #4]
 8011716:	f7ff ff93 	bl	8011640 <HAL_RTC_WaitForSynchro>
 801171a:	4603      	mov	r3, r0
 801171c:	2b00      	cmp	r3, #0
 801171e:	d01e      	beq.n	801175e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	2203      	movs	r2, #3
 8011724:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8011728:	2303      	movs	r3, #3
 801172a:	73fb      	strb	r3, [r7, #15]
 801172c:	e017      	b.n	801175e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801172e:	4b0e      	ldr	r3, [pc, #56]	@ (8011768 <RTC_ExitInitMode+0x78>)
 8011730:	689b      	ldr	r3, [r3, #8]
 8011732:	4a0d      	ldr	r2, [pc, #52]	@ (8011768 <RTC_ExitInitMode+0x78>)
 8011734:	f023 0320 	bic.w	r3, r3, #32
 8011738:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801173a:	6878      	ldr	r0, [r7, #4]
 801173c:	f7ff ff80 	bl	8011640 <HAL_RTC_WaitForSynchro>
 8011740:	4603      	mov	r3, r0
 8011742:	2b00      	cmp	r3, #0
 8011744:	d005      	beq.n	8011752 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	2203      	movs	r2, #3
 801174a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 801174e:	2303      	movs	r3, #3
 8011750:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011752:	4b05      	ldr	r3, [pc, #20]	@ (8011768 <RTC_ExitInitMode+0x78>)
 8011754:	689b      	ldr	r3, [r3, #8]
 8011756:	4a04      	ldr	r2, [pc, #16]	@ (8011768 <RTC_ExitInitMode+0x78>)
 8011758:	f043 0320 	orr.w	r3, r3, #32
 801175c:	6093      	str	r3, [r2, #8]
  }

  return status;
 801175e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011760:	4618      	mov	r0, r3
 8011762:	3710      	adds	r7, #16
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}
 8011768:	40002800 	.word	0x40002800

0801176c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 801176c:	b480      	push	{r7}
 801176e:	b085      	sub	sp, #20
 8011770:	af00      	add	r7, sp, #0
 8011772:	4603      	mov	r3, r0
 8011774:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8011776:	2300      	movs	r3, #0
 8011778:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 801177a:	79fb      	ldrb	r3, [r7, #7]
 801177c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 801177e:	e005      	b.n	801178c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	3301      	adds	r3, #1
 8011784:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8011786:	7afb      	ldrb	r3, [r7, #11]
 8011788:	3b0a      	subs	r3, #10
 801178a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 801178c:	7afb      	ldrb	r3, [r7, #11]
 801178e:	2b09      	cmp	r3, #9
 8011790:	d8f6      	bhi.n	8011780 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	b2db      	uxtb	r3, r3
 8011796:	011b      	lsls	r3, r3, #4
 8011798:	b2da      	uxtb	r2, r3
 801179a:	7afb      	ldrb	r3, [r7, #11]
 801179c:	4313      	orrs	r3, r2
 801179e:	b2db      	uxtb	r3, r3
}
 80117a0:	4618      	mov	r0, r3
 80117a2:	3714      	adds	r7, #20
 80117a4:	46bd      	mov	sp, r7
 80117a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117aa:	4770      	bx	lr

080117ac <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80117ac:	b480      	push	{r7}
 80117ae:	b085      	sub	sp, #20
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	4603      	mov	r3, r0
 80117b4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80117b6:	79fb      	ldrb	r3, [r7, #7]
 80117b8:	091b      	lsrs	r3, r3, #4
 80117ba:	b2db      	uxtb	r3, r3
 80117bc:	461a      	mov	r2, r3
 80117be:	0092      	lsls	r2, r2, #2
 80117c0:	4413      	add	r3, r2
 80117c2:	005b      	lsls	r3, r3, #1
 80117c4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80117c6:	79fb      	ldrb	r3, [r7, #7]
 80117c8:	f003 030f 	and.w	r3, r3, #15
 80117cc:	b2da      	uxtb	r2, r3
 80117ce:	7bfb      	ldrb	r3, [r7, #15]
 80117d0:	4413      	add	r3, r2
 80117d2:	b2db      	uxtb	r3, r3
}
 80117d4:	4618      	mov	r0, r3
 80117d6:	3714      	adds	r7, #20
 80117d8:	46bd      	mov	sp, r7
 80117da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117de:	4770      	bx	lr

080117e0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80117e0:	b480      	push	{r7}
 80117e2:	b083      	sub	sp, #12
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80117e8:	bf00      	nop
 80117ea:	370c      	adds	r7, #12
 80117ec:	46bd      	mov	sp, r7
 80117ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f2:	4770      	bx	lr

080117f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b084      	sub	sp, #16
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d101      	bne.n	8011806 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011802:	2301      	movs	r3, #1
 8011804:	e095      	b.n	8011932 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801180a:	2b00      	cmp	r3, #0
 801180c:	d108      	bne.n	8011820 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	685b      	ldr	r3, [r3, #4]
 8011812:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011816:	d009      	beq.n	801182c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	2200      	movs	r2, #0
 801181c:	61da      	str	r2, [r3, #28]
 801181e:	e005      	b.n	801182c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2200      	movs	r2, #0
 8011824:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	2200      	movs	r2, #0
 801182a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	2200      	movs	r2, #0
 8011830:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011838:	b2db      	uxtb	r3, r3
 801183a:	2b00      	cmp	r3, #0
 801183c:	d106      	bne.n	801184c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	2200      	movs	r2, #0
 8011842:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011846:	6878      	ldr	r0, [r7, #4]
 8011848:	f7f5 ffe6 	bl	8007818 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	2202      	movs	r2, #2
 8011850:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	681a      	ldr	r2, [r3, #0]
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011862:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	68db      	ldr	r3, [r3, #12]
 8011868:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801186c:	d902      	bls.n	8011874 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801186e:	2300      	movs	r3, #0
 8011870:	60fb      	str	r3, [r7, #12]
 8011872:	e002      	b.n	801187a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8011874:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011878:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	68db      	ldr	r3, [r3, #12]
 801187e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8011882:	d007      	beq.n	8011894 <HAL_SPI_Init+0xa0>
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	68db      	ldr	r3, [r3, #12]
 8011888:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801188c:	d002      	beq.n	8011894 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	2200      	movs	r2, #0
 8011892:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	685b      	ldr	r3, [r3, #4]
 8011898:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	689b      	ldr	r3, [r3, #8]
 80118a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80118a4:	431a      	orrs	r2, r3
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	691b      	ldr	r3, [r3, #16]
 80118aa:	f003 0302 	and.w	r3, r3, #2
 80118ae:	431a      	orrs	r2, r3
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	695b      	ldr	r3, [r3, #20]
 80118b4:	f003 0301 	and.w	r3, r3, #1
 80118b8:	431a      	orrs	r2, r3
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	699b      	ldr	r3, [r3, #24]
 80118be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80118c2:	431a      	orrs	r2, r3
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	69db      	ldr	r3, [r3, #28]
 80118c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80118cc:	431a      	orrs	r2, r3
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	6a1b      	ldr	r3, [r3, #32]
 80118d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80118d6:	ea42 0103 	orr.w	r1, r2, r3
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118de:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	430a      	orrs	r2, r1
 80118e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	699b      	ldr	r3, [r3, #24]
 80118ee:	0c1b      	lsrs	r3, r3, #16
 80118f0:	f003 0204 	and.w	r2, r3, #4
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118f8:	f003 0310 	and.w	r3, r3, #16
 80118fc:	431a      	orrs	r2, r3
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011902:	f003 0308 	and.w	r3, r3, #8
 8011906:	431a      	orrs	r2, r3
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	68db      	ldr	r3, [r3, #12]
 801190c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8011910:	ea42 0103 	orr.w	r1, r2, r3
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	430a      	orrs	r2, r1
 8011920:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	2200      	movs	r2, #0
 8011926:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2201      	movs	r2, #1
 801192c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8011930:	2300      	movs	r3, #0
}
 8011932:	4618      	mov	r0, r3
 8011934:	3710      	adds	r7, #16
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}

0801193a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801193a:	b580      	push	{r7, lr}
 801193c:	b088      	sub	sp, #32
 801193e:	af00      	add	r7, sp, #0
 8011940:	60f8      	str	r0, [r7, #12]
 8011942:	60b9      	str	r1, [r7, #8]
 8011944:	603b      	str	r3, [r7, #0]
 8011946:	4613      	mov	r3, r2
 8011948:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801194a:	f7f9 fb8f 	bl	800b06c <HAL_GetTick>
 801194e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8011950:	88fb      	ldrh	r3, [r7, #6]
 8011952:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801195a:	b2db      	uxtb	r3, r3
 801195c:	2b01      	cmp	r3, #1
 801195e:	d001      	beq.n	8011964 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8011960:	2302      	movs	r3, #2
 8011962:	e15c      	b.n	8011c1e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8011964:	68bb      	ldr	r3, [r7, #8]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d002      	beq.n	8011970 <HAL_SPI_Transmit+0x36>
 801196a:	88fb      	ldrh	r3, [r7, #6]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d101      	bne.n	8011974 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8011970:	2301      	movs	r3, #1
 8011972:	e154      	b.n	8011c1e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 801197a:	2b01      	cmp	r3, #1
 801197c:	d101      	bne.n	8011982 <HAL_SPI_Transmit+0x48>
 801197e:	2302      	movs	r3, #2
 8011980:	e14d      	b.n	8011c1e <HAL_SPI_Transmit+0x2e4>
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	2201      	movs	r2, #1
 8011986:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	2203      	movs	r2, #3
 801198e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	2200      	movs	r2, #0
 8011996:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	68ba      	ldr	r2, [r7, #8]
 801199c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	88fa      	ldrh	r2, [r7, #6]
 80119a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	88fa      	ldrh	r2, [r7, #6]
 80119a8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	2200      	movs	r2, #0
 80119ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	2200      	movs	r2, #0
 80119b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	2200      	movs	r2, #0
 80119bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	2200      	movs	r2, #0
 80119c4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	2200      	movs	r2, #0
 80119ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	689b      	ldr	r3, [r3, #8]
 80119d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80119d4:	d10f      	bne.n	80119f6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	681a      	ldr	r2, [r3, #0]
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80119e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	681a      	ldr	r2, [r3, #0]
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80119f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011a00:	2b40      	cmp	r3, #64	@ 0x40
 8011a02:	d007      	beq.n	8011a14 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	681a      	ldr	r2, [r3, #0]
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011a12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	68db      	ldr	r3, [r3, #12]
 8011a18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011a1c:	d952      	bls.n	8011ac4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	685b      	ldr	r3, [r3, #4]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d002      	beq.n	8011a2c <HAL_SPI_Transmit+0xf2>
 8011a26:	8b7b      	ldrh	r3, [r7, #26]
 8011a28:	2b01      	cmp	r3, #1
 8011a2a:	d145      	bne.n	8011ab8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a30:	881a      	ldrh	r2, [r3, #0]
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a3c:	1c9a      	adds	r2, r3, #2
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011a46:	b29b      	uxth	r3, r3
 8011a48:	3b01      	subs	r3, #1
 8011a4a:	b29a      	uxth	r2, r3
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8011a50:	e032      	b.n	8011ab8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	689b      	ldr	r3, [r3, #8]
 8011a58:	f003 0302 	and.w	r3, r3, #2
 8011a5c:	2b02      	cmp	r3, #2
 8011a5e:	d112      	bne.n	8011a86 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a64:	881a      	ldrh	r2, [r3, #0]
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a70:	1c9a      	adds	r2, r3, #2
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011a7a:	b29b      	uxth	r3, r3
 8011a7c:	3b01      	subs	r3, #1
 8011a7e:	b29a      	uxth	r2, r3
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011a84:	e018      	b.n	8011ab8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011a86:	f7f9 faf1 	bl	800b06c <HAL_GetTick>
 8011a8a:	4602      	mov	r2, r0
 8011a8c:	69fb      	ldr	r3, [r7, #28]
 8011a8e:	1ad3      	subs	r3, r2, r3
 8011a90:	683a      	ldr	r2, [r7, #0]
 8011a92:	429a      	cmp	r2, r3
 8011a94:	d803      	bhi.n	8011a9e <HAL_SPI_Transmit+0x164>
 8011a96:	683b      	ldr	r3, [r7, #0]
 8011a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a9c:	d102      	bne.n	8011aa4 <HAL_SPI_Transmit+0x16a>
 8011a9e:	683b      	ldr	r3, [r7, #0]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d109      	bne.n	8011ab8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	2201      	movs	r2, #1
 8011aa8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	2200      	movs	r2, #0
 8011ab0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8011ab4:	2303      	movs	r3, #3
 8011ab6:	e0b2      	b.n	8011c1e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011abc:	b29b      	uxth	r3, r3
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d1c7      	bne.n	8011a52 <HAL_SPI_Transmit+0x118>
 8011ac2:	e083      	b.n	8011bcc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	685b      	ldr	r3, [r3, #4]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d002      	beq.n	8011ad2 <HAL_SPI_Transmit+0x198>
 8011acc:	8b7b      	ldrh	r3, [r7, #26]
 8011ace:	2b01      	cmp	r3, #1
 8011ad0:	d177      	bne.n	8011bc2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011ad6:	b29b      	uxth	r3, r3
 8011ad8:	2b01      	cmp	r3, #1
 8011ada:	d912      	bls.n	8011b02 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ae0:	881a      	ldrh	r2, [r3, #0]
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011aec:	1c9a      	adds	r2, r3, #2
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011af6:	b29b      	uxth	r3, r3
 8011af8:	3b02      	subs	r3, #2
 8011afa:	b29a      	uxth	r2, r3
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011b00:	e05f      	b.n	8011bc2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	330c      	adds	r3, #12
 8011b0c:	7812      	ldrb	r2, [r2, #0]
 8011b0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b14:	1c5a      	adds	r2, r3, #1
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011b1e:	b29b      	uxth	r3, r3
 8011b20:	3b01      	subs	r3, #1
 8011b22:	b29a      	uxth	r2, r3
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8011b28:	e04b      	b.n	8011bc2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	689b      	ldr	r3, [r3, #8]
 8011b30:	f003 0302 	and.w	r3, r3, #2
 8011b34:	2b02      	cmp	r3, #2
 8011b36:	d12b      	bne.n	8011b90 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011b3c:	b29b      	uxth	r3, r3
 8011b3e:	2b01      	cmp	r3, #1
 8011b40:	d912      	bls.n	8011b68 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b46:	881a      	ldrh	r2, [r3, #0]
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b52:	1c9a      	adds	r2, r3, #2
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011b5c:	b29b      	uxth	r3, r3
 8011b5e:	3b02      	subs	r3, #2
 8011b60:	b29a      	uxth	r2, r3
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011b66:	e02c      	b.n	8011bc2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	330c      	adds	r3, #12
 8011b72:	7812      	ldrb	r2, [r2, #0]
 8011b74:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b7a:	1c5a      	adds	r2, r3, #1
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011b84:	b29b      	uxth	r3, r3
 8011b86:	3b01      	subs	r3, #1
 8011b88:	b29a      	uxth	r2, r3
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011b8e:	e018      	b.n	8011bc2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011b90:	f7f9 fa6c 	bl	800b06c <HAL_GetTick>
 8011b94:	4602      	mov	r2, r0
 8011b96:	69fb      	ldr	r3, [r7, #28]
 8011b98:	1ad3      	subs	r3, r2, r3
 8011b9a:	683a      	ldr	r2, [r7, #0]
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d803      	bhi.n	8011ba8 <HAL_SPI_Transmit+0x26e>
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ba6:	d102      	bne.n	8011bae <HAL_SPI_Transmit+0x274>
 8011ba8:	683b      	ldr	r3, [r7, #0]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d109      	bne.n	8011bc2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	2201      	movs	r2, #1
 8011bb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	2200      	movs	r2, #0
 8011bba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8011bbe:	2303      	movs	r3, #3
 8011bc0:	e02d      	b.n	8011c1e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011bc6:	b29b      	uxth	r3, r3
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d1ae      	bne.n	8011b2a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011bcc:	69fa      	ldr	r2, [r7, #28]
 8011bce:	6839      	ldr	r1, [r7, #0]
 8011bd0:	68f8      	ldr	r0, [r7, #12]
 8011bd2:	f000 fcf5 	bl	80125c0 <SPI_EndRxTxTransaction>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d002      	beq.n	8011be2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	2220      	movs	r2, #32
 8011be0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	689b      	ldr	r3, [r3, #8]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d10a      	bne.n	8011c00 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011bea:	2300      	movs	r3, #0
 8011bec:	617b      	str	r3, [r7, #20]
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	68db      	ldr	r3, [r3, #12]
 8011bf4:	617b      	str	r3, [r7, #20]
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	689b      	ldr	r3, [r3, #8]
 8011bfc:	617b      	str	r3, [r7, #20]
 8011bfe:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	2201      	movs	r2, #1
 8011c04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d001      	beq.n	8011c1c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8011c18:	2301      	movs	r3, #1
 8011c1a:	e000      	b.n	8011c1e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8011c1c:	2300      	movs	r3, #0
  }
}
 8011c1e:	4618      	mov	r0, r3
 8011c20:	3720      	adds	r7, #32
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}

08011c26 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011c26:	b580      	push	{r7, lr}
 8011c28:	b088      	sub	sp, #32
 8011c2a:	af02      	add	r7, sp, #8
 8011c2c:	60f8      	str	r0, [r7, #12]
 8011c2e:	60b9      	str	r1, [r7, #8]
 8011c30:	603b      	str	r3, [r7, #0]
 8011c32:	4613      	mov	r3, r2
 8011c34:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011c3c:	b2db      	uxtb	r3, r3
 8011c3e:	2b01      	cmp	r3, #1
 8011c40:	d001      	beq.n	8011c46 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8011c42:	2302      	movs	r3, #2
 8011c44:	e123      	b.n	8011e8e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	685b      	ldr	r3, [r3, #4]
 8011c4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011c4e:	d112      	bne.n	8011c76 <HAL_SPI_Receive+0x50>
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	689b      	ldr	r3, [r3, #8]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d10e      	bne.n	8011c76 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	2204      	movs	r2, #4
 8011c5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8011c60:	88fa      	ldrh	r2, [r7, #6]
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	9300      	str	r3, [sp, #0]
 8011c66:	4613      	mov	r3, r2
 8011c68:	68ba      	ldr	r2, [r7, #8]
 8011c6a:	68b9      	ldr	r1, [r7, #8]
 8011c6c:	68f8      	ldr	r0, [r7, #12]
 8011c6e:	f000 f912 	bl	8011e96 <HAL_SPI_TransmitReceive>
 8011c72:	4603      	mov	r3, r0
 8011c74:	e10b      	b.n	8011e8e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011c76:	f7f9 f9f9 	bl	800b06c <HAL_GetTick>
 8011c7a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8011c7c:	68bb      	ldr	r3, [r7, #8]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d002      	beq.n	8011c88 <HAL_SPI_Receive+0x62>
 8011c82:	88fb      	ldrh	r3, [r7, #6]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d101      	bne.n	8011c8c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8011c88:	2301      	movs	r3, #1
 8011c8a:	e100      	b.n	8011e8e <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8011c92:	2b01      	cmp	r3, #1
 8011c94:	d101      	bne.n	8011c9a <HAL_SPI_Receive+0x74>
 8011c96:	2302      	movs	r3, #2
 8011c98:	e0f9      	b.n	8011e8e <HAL_SPI_Receive+0x268>
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	2201      	movs	r2, #1
 8011c9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	2204      	movs	r2, #4
 8011ca6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	2200      	movs	r2, #0
 8011cae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	68ba      	ldr	r2, [r7, #8]
 8011cb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	88fa      	ldrh	r2, [r7, #6]
 8011cba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	88fa      	ldrh	r2, [r7, #6]
 8011cc2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	2200      	movs	r2, #0
 8011cca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	2200      	movs	r2, #0
 8011cd0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	2200      	movs	r2, #0
 8011cdc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	68db      	ldr	r3, [r3, #12]
 8011ce8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011cec:	d908      	bls.n	8011d00 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	685a      	ldr	r2, [r3, #4]
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8011cfc:	605a      	str	r2, [r3, #4]
 8011cfe:	e007      	b.n	8011d10 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	685a      	ldr	r2, [r3, #4]
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011d0e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	689b      	ldr	r3, [r3, #8]
 8011d14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011d18:	d10f      	bne.n	8011d3a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	681a      	ldr	r2, [r3, #0]
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011d28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	681a      	ldr	r2, [r3, #0]
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8011d38:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011d44:	2b40      	cmp	r3, #64	@ 0x40
 8011d46:	d007      	beq.n	8011d58 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	681a      	ldr	r2, [r3, #0]
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011d56:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	68db      	ldr	r3, [r3, #12]
 8011d5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011d60:	d875      	bhi.n	8011e4e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8011d62:	e037      	b.n	8011dd4 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	689b      	ldr	r3, [r3, #8]
 8011d6a:	f003 0301 	and.w	r3, r3, #1
 8011d6e:	2b01      	cmp	r3, #1
 8011d70:	d117      	bne.n	8011da2 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	f103 020c 	add.w	r2, r3, #12
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d7e:	7812      	ldrb	r2, [r2, #0]
 8011d80:	b2d2      	uxtb	r2, r2
 8011d82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d88:	1c5a      	adds	r2, r3, #1
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011d94:	b29b      	uxth	r3, r3
 8011d96:	3b01      	subs	r3, #1
 8011d98:	b29a      	uxth	r2, r3
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8011da0:	e018      	b.n	8011dd4 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011da2:	f7f9 f963 	bl	800b06c <HAL_GetTick>
 8011da6:	4602      	mov	r2, r0
 8011da8:	697b      	ldr	r3, [r7, #20]
 8011daa:	1ad3      	subs	r3, r2, r3
 8011dac:	683a      	ldr	r2, [r7, #0]
 8011dae:	429a      	cmp	r2, r3
 8011db0:	d803      	bhi.n	8011dba <HAL_SPI_Receive+0x194>
 8011db2:	683b      	ldr	r3, [r7, #0]
 8011db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011db8:	d102      	bne.n	8011dc0 <HAL_SPI_Receive+0x19a>
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d109      	bne.n	8011dd4 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	2201      	movs	r2, #1
 8011dc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	2200      	movs	r2, #0
 8011dcc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8011dd0:	2303      	movs	r3, #3
 8011dd2:	e05c      	b.n	8011e8e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011dda:	b29b      	uxth	r3, r3
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d1c1      	bne.n	8011d64 <HAL_SPI_Receive+0x13e>
 8011de0:	e03b      	b.n	8011e5a <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	689b      	ldr	r3, [r3, #8]
 8011de8:	f003 0301 	and.w	r3, r3, #1
 8011dec:	2b01      	cmp	r3, #1
 8011dee:	d115      	bne.n	8011e1c <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	68da      	ldr	r2, [r3, #12]
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011dfa:	b292      	uxth	r2, r2
 8011dfc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e02:	1c9a      	adds	r2, r3, #2
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011e0e:	b29b      	uxth	r3, r3
 8011e10:	3b01      	subs	r3, #1
 8011e12:	b29a      	uxth	r2, r3
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8011e1a:	e018      	b.n	8011e4e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011e1c:	f7f9 f926 	bl	800b06c <HAL_GetTick>
 8011e20:	4602      	mov	r2, r0
 8011e22:	697b      	ldr	r3, [r7, #20]
 8011e24:	1ad3      	subs	r3, r2, r3
 8011e26:	683a      	ldr	r2, [r7, #0]
 8011e28:	429a      	cmp	r2, r3
 8011e2a:	d803      	bhi.n	8011e34 <HAL_SPI_Receive+0x20e>
 8011e2c:	683b      	ldr	r3, [r7, #0]
 8011e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e32:	d102      	bne.n	8011e3a <HAL_SPI_Receive+0x214>
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d109      	bne.n	8011e4e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	2201      	movs	r2, #1
 8011e3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	2200      	movs	r2, #0
 8011e46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8011e4a:	2303      	movs	r3, #3
 8011e4c:	e01f      	b.n	8011e8e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011e54:	b29b      	uxth	r3, r3
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d1c3      	bne.n	8011de2 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011e5a:	697a      	ldr	r2, [r7, #20]
 8011e5c:	6839      	ldr	r1, [r7, #0]
 8011e5e:	68f8      	ldr	r0, [r7, #12]
 8011e60:	f000 fb56 	bl	8012510 <SPI_EndRxTransaction>
 8011e64:	4603      	mov	r3, r0
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d002      	beq.n	8011e70 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	2220      	movs	r2, #32
 8011e6e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	2201      	movs	r2, #1
 8011e74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d001      	beq.n	8011e8c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8011e88:	2301      	movs	r3, #1
 8011e8a:	e000      	b.n	8011e8e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8011e8c:	2300      	movs	r3, #0
  }
}
 8011e8e:	4618      	mov	r0, r3
 8011e90:	3718      	adds	r7, #24
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}

08011e96 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8011e96:	b580      	push	{r7, lr}
 8011e98:	b08a      	sub	sp, #40	@ 0x28
 8011e9a:	af00      	add	r7, sp, #0
 8011e9c:	60f8      	str	r0, [r7, #12]
 8011e9e:	60b9      	str	r1, [r7, #8]
 8011ea0:	607a      	str	r2, [r7, #4]
 8011ea2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8011ea4:	2301      	movs	r3, #1
 8011ea6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011ea8:	f7f9 f8e0 	bl	800b06c <HAL_GetTick>
 8011eac:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011eb4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	685b      	ldr	r3, [r3, #4]
 8011eba:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8011ebc:	887b      	ldrh	r3, [r7, #2]
 8011ebe:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8011ec0:	887b      	ldrh	r3, [r7, #2]
 8011ec2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011ec4:	7ffb      	ldrb	r3, [r7, #31]
 8011ec6:	2b01      	cmp	r3, #1
 8011ec8:	d00c      	beq.n	8011ee4 <HAL_SPI_TransmitReceive+0x4e>
 8011eca:	69bb      	ldr	r3, [r7, #24]
 8011ecc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011ed0:	d106      	bne.n	8011ee0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	689b      	ldr	r3, [r3, #8]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d102      	bne.n	8011ee0 <HAL_SPI_TransmitReceive+0x4a>
 8011eda:	7ffb      	ldrb	r3, [r7, #31]
 8011edc:	2b04      	cmp	r3, #4
 8011ede:	d001      	beq.n	8011ee4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8011ee0:	2302      	movs	r3, #2
 8011ee2:	e1f3      	b.n	80122cc <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8011ee4:	68bb      	ldr	r3, [r7, #8]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d005      	beq.n	8011ef6 <HAL_SPI_TransmitReceive+0x60>
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d002      	beq.n	8011ef6 <HAL_SPI_TransmitReceive+0x60>
 8011ef0:	887b      	ldrh	r3, [r7, #2]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d101      	bne.n	8011efa <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8011ef6:	2301      	movs	r3, #1
 8011ef8:	e1e8      	b.n	80122cc <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8011f00:	2b01      	cmp	r3, #1
 8011f02:	d101      	bne.n	8011f08 <HAL_SPI_TransmitReceive+0x72>
 8011f04:	2302      	movs	r3, #2
 8011f06:	e1e1      	b.n	80122cc <HAL_SPI_TransmitReceive+0x436>
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	2201      	movs	r2, #1
 8011f0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011f16:	b2db      	uxtb	r3, r3
 8011f18:	2b04      	cmp	r3, #4
 8011f1a:	d003      	beq.n	8011f24 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	2205      	movs	r2, #5
 8011f20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	2200      	movs	r2, #0
 8011f28:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	687a      	ldr	r2, [r7, #4]
 8011f2e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	887a      	ldrh	r2, [r7, #2]
 8011f34:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	887a      	ldrh	r2, [r7, #2]
 8011f3c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	68ba      	ldr	r2, [r7, #8]
 8011f44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	887a      	ldrh	r2, [r7, #2]
 8011f4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	887a      	ldrh	r2, [r7, #2]
 8011f50:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	2200      	movs	r2, #0
 8011f56:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	68db      	ldr	r3, [r3, #12]
 8011f62:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011f66:	d802      	bhi.n	8011f6e <HAL_SPI_TransmitReceive+0xd8>
 8011f68:	8abb      	ldrh	r3, [r7, #20]
 8011f6a:	2b01      	cmp	r3, #1
 8011f6c:	d908      	bls.n	8011f80 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	685a      	ldr	r2, [r3, #4]
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8011f7c:	605a      	str	r2, [r3, #4]
 8011f7e:	e007      	b.n	8011f90 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	685a      	ldr	r2, [r3, #4]
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011f8e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f9a:	2b40      	cmp	r3, #64	@ 0x40
 8011f9c:	d007      	beq.n	8011fae <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	681a      	ldr	r2, [r3, #0]
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011fac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	68db      	ldr	r3, [r3, #12]
 8011fb2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011fb6:	f240 8083 	bls.w	80120c0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	685b      	ldr	r3, [r3, #4]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d002      	beq.n	8011fc8 <HAL_SPI_TransmitReceive+0x132>
 8011fc2:	8afb      	ldrh	r3, [r7, #22]
 8011fc4:	2b01      	cmp	r3, #1
 8011fc6:	d16f      	bne.n	80120a8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fcc:	881a      	ldrh	r2, [r3, #0]
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fd8:	1c9a      	adds	r2, r3, #2
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011fe2:	b29b      	uxth	r3, r3
 8011fe4:	3b01      	subs	r3, #1
 8011fe6:	b29a      	uxth	r2, r3
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011fec:	e05c      	b.n	80120a8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	689b      	ldr	r3, [r3, #8]
 8011ff4:	f003 0302 	and.w	r3, r3, #2
 8011ff8:	2b02      	cmp	r3, #2
 8011ffa:	d11b      	bne.n	8012034 <HAL_SPI_TransmitReceive+0x19e>
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012000:	b29b      	uxth	r3, r3
 8012002:	2b00      	cmp	r3, #0
 8012004:	d016      	beq.n	8012034 <HAL_SPI_TransmitReceive+0x19e>
 8012006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012008:	2b01      	cmp	r3, #1
 801200a:	d113      	bne.n	8012034 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012010:	881a      	ldrh	r2, [r3, #0]
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801201c:	1c9a      	adds	r2, r3, #2
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012026:	b29b      	uxth	r3, r3
 8012028:	3b01      	subs	r3, #1
 801202a:	b29a      	uxth	r2, r3
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012030:	2300      	movs	r3, #0
 8012032:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	689b      	ldr	r3, [r3, #8]
 801203a:	f003 0301 	and.w	r3, r3, #1
 801203e:	2b01      	cmp	r3, #1
 8012040:	d11c      	bne.n	801207c <HAL_SPI_TransmitReceive+0x1e6>
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8012048:	b29b      	uxth	r3, r3
 801204a:	2b00      	cmp	r3, #0
 801204c:	d016      	beq.n	801207c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	68da      	ldr	r2, [r3, #12]
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012058:	b292      	uxth	r2, r2
 801205a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012060:	1c9a      	adds	r2, r3, #2
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801206c:	b29b      	uxth	r3, r3
 801206e:	3b01      	subs	r3, #1
 8012070:	b29a      	uxth	r2, r3
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8012078:	2301      	movs	r3, #1
 801207a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801207c:	f7f8 fff6 	bl	800b06c <HAL_GetTick>
 8012080:	4602      	mov	r2, r0
 8012082:	6a3b      	ldr	r3, [r7, #32]
 8012084:	1ad3      	subs	r3, r2, r3
 8012086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012088:	429a      	cmp	r2, r3
 801208a:	d80d      	bhi.n	80120a8 <HAL_SPI_TransmitReceive+0x212>
 801208c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801208e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012092:	d009      	beq.n	80120a8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	2201      	movs	r2, #1
 8012098:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	2200      	movs	r2, #0
 80120a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80120a4:	2303      	movs	r3, #3
 80120a6:	e111      	b.n	80122cc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80120ac:	b29b      	uxth	r3, r3
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d19d      	bne.n	8011fee <HAL_SPI_TransmitReceive+0x158>
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80120b8:	b29b      	uxth	r3, r3
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d197      	bne.n	8011fee <HAL_SPI_TransmitReceive+0x158>
 80120be:	e0e5      	b.n	801228c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	685b      	ldr	r3, [r3, #4]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d003      	beq.n	80120d0 <HAL_SPI_TransmitReceive+0x23a>
 80120c8:	8afb      	ldrh	r3, [r7, #22]
 80120ca:	2b01      	cmp	r3, #1
 80120cc:	f040 80d1 	bne.w	8012272 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80120d4:	b29b      	uxth	r3, r3
 80120d6:	2b01      	cmp	r3, #1
 80120d8:	d912      	bls.n	8012100 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80120de:	881a      	ldrh	r2, [r3, #0]
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80120ea:	1c9a      	adds	r2, r3, #2
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80120f4:	b29b      	uxth	r3, r3
 80120f6:	3b02      	subs	r3, #2
 80120f8:	b29a      	uxth	r2, r3
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80120fe:	e0b8      	b.n	8012272 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	330c      	adds	r3, #12
 801210a:	7812      	ldrb	r2, [r2, #0]
 801210c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012112:	1c5a      	adds	r2, r3, #1
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801211c:	b29b      	uxth	r3, r3
 801211e:	3b01      	subs	r3, #1
 8012120:	b29a      	uxth	r2, r3
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012126:	e0a4      	b.n	8012272 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	689b      	ldr	r3, [r3, #8]
 801212e:	f003 0302 	and.w	r3, r3, #2
 8012132:	2b02      	cmp	r3, #2
 8012134:	d134      	bne.n	80121a0 <HAL_SPI_TransmitReceive+0x30a>
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801213a:	b29b      	uxth	r3, r3
 801213c:	2b00      	cmp	r3, #0
 801213e:	d02f      	beq.n	80121a0 <HAL_SPI_TransmitReceive+0x30a>
 8012140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012142:	2b01      	cmp	r3, #1
 8012144:	d12c      	bne.n	80121a0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801214a:	b29b      	uxth	r3, r3
 801214c:	2b01      	cmp	r3, #1
 801214e:	d912      	bls.n	8012176 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012154:	881a      	ldrh	r2, [r3, #0]
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012160:	1c9a      	adds	r2, r3, #2
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801216a:	b29b      	uxth	r3, r3
 801216c:	3b02      	subs	r3, #2
 801216e:	b29a      	uxth	r2, r3
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8012174:	e012      	b.n	801219c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	330c      	adds	r3, #12
 8012180:	7812      	ldrb	r2, [r2, #0]
 8012182:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012188:	1c5a      	adds	r2, r3, #1
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012192:	b29b      	uxth	r3, r3
 8012194:	3b01      	subs	r3, #1
 8012196:	b29a      	uxth	r2, r3
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801219c:	2300      	movs	r3, #0
 801219e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	689b      	ldr	r3, [r3, #8]
 80121a6:	f003 0301 	and.w	r3, r3, #1
 80121aa:	2b01      	cmp	r3, #1
 80121ac:	d148      	bne.n	8012240 <HAL_SPI_TransmitReceive+0x3aa>
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80121b4:	b29b      	uxth	r3, r3
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d042      	beq.n	8012240 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80121c0:	b29b      	uxth	r3, r3
 80121c2:	2b01      	cmp	r3, #1
 80121c4:	d923      	bls.n	801220e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	68da      	ldr	r2, [r3, #12]
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80121d0:	b292      	uxth	r2, r2
 80121d2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80121d8:	1c9a      	adds	r2, r3, #2
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80121e4:	b29b      	uxth	r3, r3
 80121e6:	3b02      	subs	r3, #2
 80121e8:	b29a      	uxth	r2, r3
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80121f6:	b29b      	uxth	r3, r3
 80121f8:	2b01      	cmp	r3, #1
 80121fa:	d81f      	bhi.n	801223c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	685a      	ldr	r2, [r3, #4]
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801220a:	605a      	str	r2, [r3, #4]
 801220c:	e016      	b.n	801223c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	f103 020c 	add.w	r2, r3, #12
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801221a:	7812      	ldrb	r2, [r2, #0]
 801221c:	b2d2      	uxtb	r2, r2
 801221e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012224:	1c5a      	adds	r2, r3, #1
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8012230:	b29b      	uxth	r3, r3
 8012232:	3b01      	subs	r3, #1
 8012234:	b29a      	uxth	r2, r3
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801223c:	2301      	movs	r3, #1
 801223e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8012240:	f7f8 ff14 	bl	800b06c <HAL_GetTick>
 8012244:	4602      	mov	r2, r0
 8012246:	6a3b      	ldr	r3, [r7, #32]
 8012248:	1ad3      	subs	r3, r2, r3
 801224a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801224c:	429a      	cmp	r2, r3
 801224e:	d803      	bhi.n	8012258 <HAL_SPI_TransmitReceive+0x3c2>
 8012250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012256:	d102      	bne.n	801225e <HAL_SPI_TransmitReceive+0x3c8>
 8012258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801225a:	2b00      	cmp	r3, #0
 801225c:	d109      	bne.n	8012272 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	2201      	movs	r2, #1
 8012262:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	2200      	movs	r2, #0
 801226a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 801226e:	2303      	movs	r3, #3
 8012270:	e02c      	b.n	80122cc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012276:	b29b      	uxth	r3, r3
 8012278:	2b00      	cmp	r3, #0
 801227a:	f47f af55 	bne.w	8012128 <HAL_SPI_TransmitReceive+0x292>
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8012284:	b29b      	uxth	r3, r3
 8012286:	2b00      	cmp	r3, #0
 8012288:	f47f af4e 	bne.w	8012128 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801228c:	6a3a      	ldr	r2, [r7, #32]
 801228e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012290:	68f8      	ldr	r0, [r7, #12]
 8012292:	f000 f995 	bl	80125c0 <SPI_EndRxTxTransaction>
 8012296:	4603      	mov	r3, r0
 8012298:	2b00      	cmp	r3, #0
 801229a:	d008      	beq.n	80122ae <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	2220      	movs	r2, #32
 80122a0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	2200      	movs	r2, #0
 80122a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80122aa:	2301      	movs	r3, #1
 80122ac:	e00e      	b.n	80122cc <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	2201      	movs	r2, #1
 80122b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	2200      	movs	r2, #0
 80122ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d001      	beq.n	80122ca <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80122c6:	2301      	movs	r3, #1
 80122c8:	e000      	b.n	80122cc <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80122ca:	2300      	movs	r3, #0
  }
}
 80122cc:	4618      	mov	r0, r3
 80122ce:	3728      	adds	r7, #40	@ 0x28
 80122d0:	46bd      	mov	sp, r7
 80122d2:	bd80      	pop	{r7, pc}

080122d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b088      	sub	sp, #32
 80122d8:	af00      	add	r7, sp, #0
 80122da:	60f8      	str	r0, [r7, #12]
 80122dc:	60b9      	str	r1, [r7, #8]
 80122de:	603b      	str	r3, [r7, #0]
 80122e0:	4613      	mov	r3, r2
 80122e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80122e4:	f7f8 fec2 	bl	800b06c <HAL_GetTick>
 80122e8:	4602      	mov	r2, r0
 80122ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122ec:	1a9b      	subs	r3, r3, r2
 80122ee:	683a      	ldr	r2, [r7, #0]
 80122f0:	4413      	add	r3, r2
 80122f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80122f4:	f7f8 feba 	bl	800b06c <HAL_GetTick>
 80122f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80122fa:	4b39      	ldr	r3, [pc, #228]	@ (80123e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	015b      	lsls	r3, r3, #5
 8012300:	0d1b      	lsrs	r3, r3, #20
 8012302:	69fa      	ldr	r2, [r7, #28]
 8012304:	fb02 f303 	mul.w	r3, r2, r3
 8012308:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801230a:	e054      	b.n	80123b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012312:	d050      	beq.n	80123b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8012314:	f7f8 feaa 	bl	800b06c <HAL_GetTick>
 8012318:	4602      	mov	r2, r0
 801231a:	69bb      	ldr	r3, [r7, #24]
 801231c:	1ad3      	subs	r3, r2, r3
 801231e:	69fa      	ldr	r2, [r7, #28]
 8012320:	429a      	cmp	r2, r3
 8012322:	d902      	bls.n	801232a <SPI_WaitFlagStateUntilTimeout+0x56>
 8012324:	69fb      	ldr	r3, [r7, #28]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d13d      	bne.n	80123a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	685a      	ldr	r2, [r3, #4]
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8012338:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	685b      	ldr	r3, [r3, #4]
 801233e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012342:	d111      	bne.n	8012368 <SPI_WaitFlagStateUntilTimeout+0x94>
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	689b      	ldr	r3, [r3, #8]
 8012348:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801234c:	d004      	beq.n	8012358 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	689b      	ldr	r3, [r3, #8]
 8012352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012356:	d107      	bne.n	8012368 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	681a      	ldr	r2, [r3, #0]
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012366:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801236c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012370:	d10f      	bne.n	8012392 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	681a      	ldr	r2, [r3, #0]
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8012380:	601a      	str	r2, [r3, #0]
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	681a      	ldr	r2, [r3, #0]
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8012390:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	2201      	movs	r2, #1
 8012396:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	2200      	movs	r2, #0
 801239e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80123a2:	2303      	movs	r3, #3
 80123a4:	e017      	b.n	80123d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80123a6:	697b      	ldr	r3, [r7, #20]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d101      	bne.n	80123b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80123ac:	2300      	movs	r3, #0
 80123ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80123b0:	697b      	ldr	r3, [r7, #20]
 80123b2:	3b01      	subs	r3, #1
 80123b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	689a      	ldr	r2, [r3, #8]
 80123bc:	68bb      	ldr	r3, [r7, #8]
 80123be:	4013      	ands	r3, r2
 80123c0:	68ba      	ldr	r2, [r7, #8]
 80123c2:	429a      	cmp	r2, r3
 80123c4:	bf0c      	ite	eq
 80123c6:	2301      	moveq	r3, #1
 80123c8:	2300      	movne	r3, #0
 80123ca:	b2db      	uxtb	r3, r3
 80123cc:	461a      	mov	r2, r3
 80123ce:	79fb      	ldrb	r3, [r7, #7]
 80123d0:	429a      	cmp	r2, r3
 80123d2:	d19b      	bne.n	801230c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80123d4:	2300      	movs	r3, #0
}
 80123d6:	4618      	mov	r0, r3
 80123d8:	3720      	adds	r7, #32
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}
 80123de:	bf00      	nop
 80123e0:	20000268 	.word	0x20000268

080123e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b08a      	sub	sp, #40	@ 0x28
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	60f8      	str	r0, [r7, #12]
 80123ec:	60b9      	str	r1, [r7, #8]
 80123ee:	607a      	str	r2, [r7, #4]
 80123f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80123f2:	2300      	movs	r3, #0
 80123f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80123f6:	f7f8 fe39 	bl	800b06c <HAL_GetTick>
 80123fa:	4602      	mov	r2, r0
 80123fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123fe:	1a9b      	subs	r3, r3, r2
 8012400:	683a      	ldr	r2, [r7, #0]
 8012402:	4413      	add	r3, r2
 8012404:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8012406:	f7f8 fe31 	bl	800b06c <HAL_GetTick>
 801240a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	330c      	adds	r3, #12
 8012412:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8012414:	4b3d      	ldr	r3, [pc, #244]	@ (801250c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8012416:	681a      	ldr	r2, [r3, #0]
 8012418:	4613      	mov	r3, r2
 801241a:	009b      	lsls	r3, r3, #2
 801241c:	4413      	add	r3, r2
 801241e:	00da      	lsls	r2, r3, #3
 8012420:	1ad3      	subs	r3, r2, r3
 8012422:	0d1b      	lsrs	r3, r3, #20
 8012424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012426:	fb02 f303 	mul.w	r3, r2, r3
 801242a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801242c:	e060      	b.n	80124f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801242e:	68bb      	ldr	r3, [r7, #8]
 8012430:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8012434:	d107      	bne.n	8012446 <SPI_WaitFifoStateUntilTimeout+0x62>
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d104      	bne.n	8012446 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801243c:	69fb      	ldr	r3, [r7, #28]
 801243e:	781b      	ldrb	r3, [r3, #0]
 8012440:	b2db      	uxtb	r3, r3
 8012442:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8012444:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8012446:	683b      	ldr	r3, [r7, #0]
 8012448:	f1b3 3fff 	cmp.w	r3, #4294967295
 801244c:	d050      	beq.n	80124f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801244e:	f7f8 fe0d 	bl	800b06c <HAL_GetTick>
 8012452:	4602      	mov	r2, r0
 8012454:	6a3b      	ldr	r3, [r7, #32]
 8012456:	1ad3      	subs	r3, r2, r3
 8012458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801245a:	429a      	cmp	r2, r3
 801245c:	d902      	bls.n	8012464 <SPI_WaitFifoStateUntilTimeout+0x80>
 801245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012460:	2b00      	cmp	r3, #0
 8012462:	d13d      	bne.n	80124e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	685a      	ldr	r2, [r3, #4]
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8012472:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	685b      	ldr	r3, [r3, #4]
 8012478:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801247c:	d111      	bne.n	80124a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	689b      	ldr	r3, [r3, #8]
 8012482:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012486:	d004      	beq.n	8012492 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	689b      	ldr	r3, [r3, #8]
 801248c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012490:	d107      	bne.n	80124a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	681a      	ldr	r2, [r3, #0]
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80124a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80124aa:	d10f      	bne.n	80124cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	681a      	ldr	r2, [r3, #0]
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80124ba:	601a      	str	r2, [r3, #0]
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	681a      	ldr	r2, [r3, #0]
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80124ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	2201      	movs	r2, #1
 80124d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	2200      	movs	r2, #0
 80124d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80124dc:	2303      	movs	r3, #3
 80124de:	e010      	b.n	8012502 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80124e0:	69bb      	ldr	r3, [r7, #24]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d101      	bne.n	80124ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80124e6:	2300      	movs	r3, #0
 80124e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80124ea:	69bb      	ldr	r3, [r7, #24]
 80124ec:	3b01      	subs	r3, #1
 80124ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	689a      	ldr	r2, [r3, #8]
 80124f6:	68bb      	ldr	r3, [r7, #8]
 80124f8:	4013      	ands	r3, r2
 80124fa:	687a      	ldr	r2, [r7, #4]
 80124fc:	429a      	cmp	r2, r3
 80124fe:	d196      	bne.n	801242e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8012500:	2300      	movs	r3, #0
}
 8012502:	4618      	mov	r0, r3
 8012504:	3728      	adds	r7, #40	@ 0x28
 8012506:	46bd      	mov	sp, r7
 8012508:	bd80      	pop	{r7, pc}
 801250a:	bf00      	nop
 801250c:	20000268 	.word	0x20000268

08012510 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b086      	sub	sp, #24
 8012514:	af02      	add	r7, sp, #8
 8012516:	60f8      	str	r0, [r7, #12]
 8012518:	60b9      	str	r1, [r7, #8]
 801251a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	685b      	ldr	r3, [r3, #4]
 8012520:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012524:	d111      	bne.n	801254a <SPI_EndRxTransaction+0x3a>
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	689b      	ldr	r3, [r3, #8]
 801252a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801252e:	d004      	beq.n	801253a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	689b      	ldr	r3, [r3, #8]
 8012534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012538:	d107      	bne.n	801254a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	681a      	ldr	r2, [r3, #0]
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012548:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	9300      	str	r3, [sp, #0]
 801254e:	68bb      	ldr	r3, [r7, #8]
 8012550:	2200      	movs	r2, #0
 8012552:	2180      	movs	r1, #128	@ 0x80
 8012554:	68f8      	ldr	r0, [r7, #12]
 8012556:	f7ff febd 	bl	80122d4 <SPI_WaitFlagStateUntilTimeout>
 801255a:	4603      	mov	r3, r0
 801255c:	2b00      	cmp	r3, #0
 801255e:	d007      	beq.n	8012570 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012564:	f043 0220 	orr.w	r2, r3, #32
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801256c:	2303      	movs	r3, #3
 801256e:	e023      	b.n	80125b8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	685b      	ldr	r3, [r3, #4]
 8012574:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012578:	d11d      	bne.n	80125b6 <SPI_EndRxTransaction+0xa6>
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	689b      	ldr	r3, [r3, #8]
 801257e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012582:	d004      	beq.n	801258e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	689b      	ldr	r3, [r3, #8]
 8012588:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801258c:	d113      	bne.n	80125b6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	9300      	str	r3, [sp, #0]
 8012592:	68bb      	ldr	r3, [r7, #8]
 8012594:	2200      	movs	r2, #0
 8012596:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 801259a:	68f8      	ldr	r0, [r7, #12]
 801259c:	f7ff ff22 	bl	80123e4 <SPI_WaitFifoStateUntilTimeout>
 80125a0:	4603      	mov	r3, r0
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d007      	beq.n	80125b6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80125aa:	f043 0220 	orr.w	r2, r3, #32
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80125b2:	2303      	movs	r3, #3
 80125b4:	e000      	b.n	80125b8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80125b6:	2300      	movs	r3, #0
}
 80125b8:	4618      	mov	r0, r3
 80125ba:	3710      	adds	r7, #16
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}

080125c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b086      	sub	sp, #24
 80125c4:	af02      	add	r7, sp, #8
 80125c6:	60f8      	str	r0, [r7, #12]
 80125c8:	60b9      	str	r1, [r7, #8]
 80125ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	9300      	str	r3, [sp, #0]
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	2200      	movs	r2, #0
 80125d4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80125d8:	68f8      	ldr	r0, [r7, #12]
 80125da:	f7ff ff03 	bl	80123e4 <SPI_WaitFifoStateUntilTimeout>
 80125de:	4603      	mov	r3, r0
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d007      	beq.n	80125f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80125e8:	f043 0220 	orr.w	r2, r3, #32
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80125f0:	2303      	movs	r3, #3
 80125f2:	e027      	b.n	8012644 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	9300      	str	r3, [sp, #0]
 80125f8:	68bb      	ldr	r3, [r7, #8]
 80125fa:	2200      	movs	r2, #0
 80125fc:	2180      	movs	r1, #128	@ 0x80
 80125fe:	68f8      	ldr	r0, [r7, #12]
 8012600:	f7ff fe68 	bl	80122d4 <SPI_WaitFlagStateUntilTimeout>
 8012604:	4603      	mov	r3, r0
 8012606:	2b00      	cmp	r3, #0
 8012608:	d007      	beq.n	801261a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801260e:	f043 0220 	orr.w	r2, r3, #32
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8012616:	2303      	movs	r3, #3
 8012618:	e014      	b.n	8012644 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	9300      	str	r3, [sp, #0]
 801261e:	68bb      	ldr	r3, [r7, #8]
 8012620:	2200      	movs	r2, #0
 8012622:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8012626:	68f8      	ldr	r0, [r7, #12]
 8012628:	f7ff fedc 	bl	80123e4 <SPI_WaitFifoStateUntilTimeout>
 801262c:	4603      	mov	r3, r0
 801262e:	2b00      	cmp	r3, #0
 8012630:	d007      	beq.n	8012642 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012636:	f043 0220 	orr.w	r2, r3, #32
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801263e:	2303      	movs	r3, #3
 8012640:	e000      	b.n	8012644 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8012642:	2300      	movs	r3, #0
}
 8012644:	4618      	mov	r0, r3
 8012646:	3710      	adds	r7, #16
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}

0801264c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b082      	sub	sp, #8
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d101      	bne.n	801265e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801265a:	2301      	movs	r3, #1
 801265c:	e049      	b.n	80126f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012664:	b2db      	uxtb	r3, r3
 8012666:	2b00      	cmp	r3, #0
 8012668:	d106      	bne.n	8012678 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	2200      	movs	r2, #0
 801266e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012672:	6878      	ldr	r0, [r7, #4]
 8012674:	f7f5 f9a8 	bl	80079c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	2202      	movs	r2, #2
 801267c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	681a      	ldr	r2, [r3, #0]
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	3304      	adds	r3, #4
 8012688:	4619      	mov	r1, r3
 801268a:	4610      	mov	r0, r2
 801268c:	f001 fa58 	bl	8013b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	2201      	movs	r2, #1
 8012694:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	2201      	movs	r2, #1
 801269c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	2201      	movs	r2, #1
 80126a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	2201      	movs	r2, #1
 80126ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	2201      	movs	r2, #1
 80126b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	2201      	movs	r2, #1
 80126bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2201      	movs	r2, #1
 80126c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	2201      	movs	r2, #1
 80126cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	2201      	movs	r2, #1
 80126d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	2201      	movs	r2, #1
 80126dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	2201      	movs	r2, #1
 80126e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	2201      	movs	r2, #1
 80126ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80126f0:	2300      	movs	r3, #0
}
 80126f2:	4618      	mov	r0, r3
 80126f4:	3708      	adds	r7, #8
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bd80      	pop	{r7, pc}

080126fa <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80126fa:	b580      	push	{r7, lr}
 80126fc:	b082      	sub	sp, #8
 80126fe:	af00      	add	r7, sp, #0
 8012700:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d101      	bne.n	801270c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8012708:	2301      	movs	r3, #1
 801270a:	e049      	b.n	80127a0 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012712:	b2db      	uxtb	r3, r3
 8012714:	2b00      	cmp	r3, #0
 8012716:	d106      	bne.n	8012726 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	2200      	movs	r2, #0
 801271c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f7f5 f8f1 	bl	8007908 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	2202      	movs	r2, #2
 801272a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	681a      	ldr	r2, [r3, #0]
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	3304      	adds	r3, #4
 8012736:	4619      	mov	r1, r3
 8012738:	4610      	mov	r0, r2
 801273a:	f001 fa01 	bl	8013b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	2201      	movs	r2, #1
 8012742:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	2201      	movs	r2, #1
 801274a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	2201      	movs	r2, #1
 8012752:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	2201      	movs	r2, #1
 801275a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	2201      	movs	r2, #1
 8012762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	2201      	movs	r2, #1
 801276a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	2201      	movs	r2, #1
 8012772:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	2201      	movs	r2, #1
 801277a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	2201      	movs	r2, #1
 8012782:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	2201      	movs	r2, #1
 801278a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	2201      	movs	r2, #1
 8012792:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	2201      	movs	r2, #1
 801279a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801279e:	2300      	movs	r3, #0
}
 80127a0:	4618      	mov	r0, r3
 80127a2:	3708      	adds	r7, #8
 80127a4:	46bd      	mov	sp, r7
 80127a6:	bd80      	pop	{r7, pc}

080127a8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b084      	sub	sp, #16
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
 80127b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80127b2:	2300      	movs	r3, #0
 80127b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80127b6:	683b      	ldr	r3, [r7, #0]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d109      	bne.n	80127d0 <HAL_TIM_OC_Start_IT+0x28>
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80127c2:	b2db      	uxtb	r3, r3
 80127c4:	2b01      	cmp	r3, #1
 80127c6:	bf14      	ite	ne
 80127c8:	2301      	movne	r3, #1
 80127ca:	2300      	moveq	r3, #0
 80127cc:	b2db      	uxtb	r3, r3
 80127ce:	e03c      	b.n	801284a <HAL_TIM_OC_Start_IT+0xa2>
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	2b04      	cmp	r3, #4
 80127d4:	d109      	bne.n	80127ea <HAL_TIM_OC_Start_IT+0x42>
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80127dc:	b2db      	uxtb	r3, r3
 80127de:	2b01      	cmp	r3, #1
 80127e0:	bf14      	ite	ne
 80127e2:	2301      	movne	r3, #1
 80127e4:	2300      	moveq	r3, #0
 80127e6:	b2db      	uxtb	r3, r3
 80127e8:	e02f      	b.n	801284a <HAL_TIM_OC_Start_IT+0xa2>
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	2b08      	cmp	r3, #8
 80127ee:	d109      	bne.n	8012804 <HAL_TIM_OC_Start_IT+0x5c>
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80127f6:	b2db      	uxtb	r3, r3
 80127f8:	2b01      	cmp	r3, #1
 80127fa:	bf14      	ite	ne
 80127fc:	2301      	movne	r3, #1
 80127fe:	2300      	moveq	r3, #0
 8012800:	b2db      	uxtb	r3, r3
 8012802:	e022      	b.n	801284a <HAL_TIM_OC_Start_IT+0xa2>
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	2b0c      	cmp	r3, #12
 8012808:	d109      	bne.n	801281e <HAL_TIM_OC_Start_IT+0x76>
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012810:	b2db      	uxtb	r3, r3
 8012812:	2b01      	cmp	r3, #1
 8012814:	bf14      	ite	ne
 8012816:	2301      	movne	r3, #1
 8012818:	2300      	moveq	r3, #0
 801281a:	b2db      	uxtb	r3, r3
 801281c:	e015      	b.n	801284a <HAL_TIM_OC_Start_IT+0xa2>
 801281e:	683b      	ldr	r3, [r7, #0]
 8012820:	2b10      	cmp	r3, #16
 8012822:	d109      	bne.n	8012838 <HAL_TIM_OC_Start_IT+0x90>
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801282a:	b2db      	uxtb	r3, r3
 801282c:	2b01      	cmp	r3, #1
 801282e:	bf14      	ite	ne
 8012830:	2301      	movne	r3, #1
 8012832:	2300      	moveq	r3, #0
 8012834:	b2db      	uxtb	r3, r3
 8012836:	e008      	b.n	801284a <HAL_TIM_OC_Start_IT+0xa2>
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801283e:	b2db      	uxtb	r3, r3
 8012840:	2b01      	cmp	r3, #1
 8012842:	bf14      	ite	ne
 8012844:	2301      	movne	r3, #1
 8012846:	2300      	moveq	r3, #0
 8012848:	b2db      	uxtb	r3, r3
 801284a:	2b00      	cmp	r3, #0
 801284c:	d001      	beq.n	8012852 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 801284e:	2301      	movs	r3, #1
 8012850:	e0e7      	b.n	8012a22 <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012852:	683b      	ldr	r3, [r7, #0]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d104      	bne.n	8012862 <HAL_TIM_OC_Start_IT+0xba>
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	2202      	movs	r2, #2
 801285c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012860:	e023      	b.n	80128aa <HAL_TIM_OC_Start_IT+0x102>
 8012862:	683b      	ldr	r3, [r7, #0]
 8012864:	2b04      	cmp	r3, #4
 8012866:	d104      	bne.n	8012872 <HAL_TIM_OC_Start_IT+0xca>
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2202      	movs	r2, #2
 801286c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012870:	e01b      	b.n	80128aa <HAL_TIM_OC_Start_IT+0x102>
 8012872:	683b      	ldr	r3, [r7, #0]
 8012874:	2b08      	cmp	r3, #8
 8012876:	d104      	bne.n	8012882 <HAL_TIM_OC_Start_IT+0xda>
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	2202      	movs	r2, #2
 801287c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012880:	e013      	b.n	80128aa <HAL_TIM_OC_Start_IT+0x102>
 8012882:	683b      	ldr	r3, [r7, #0]
 8012884:	2b0c      	cmp	r3, #12
 8012886:	d104      	bne.n	8012892 <HAL_TIM_OC_Start_IT+0xea>
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	2202      	movs	r2, #2
 801288c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012890:	e00b      	b.n	80128aa <HAL_TIM_OC_Start_IT+0x102>
 8012892:	683b      	ldr	r3, [r7, #0]
 8012894:	2b10      	cmp	r3, #16
 8012896:	d104      	bne.n	80128a2 <HAL_TIM_OC_Start_IT+0xfa>
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	2202      	movs	r2, #2
 801289c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80128a0:	e003      	b.n	80128aa <HAL_TIM_OC_Start_IT+0x102>
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	2202      	movs	r2, #2
 80128a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80128aa:	683b      	ldr	r3, [r7, #0]
 80128ac:	2b0c      	cmp	r3, #12
 80128ae:	d841      	bhi.n	8012934 <HAL_TIM_OC_Start_IT+0x18c>
 80128b0:	a201      	add	r2, pc, #4	@ (adr r2, 80128b8 <HAL_TIM_OC_Start_IT+0x110>)
 80128b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128b6:	bf00      	nop
 80128b8:	080128ed 	.word	0x080128ed
 80128bc:	08012935 	.word	0x08012935
 80128c0:	08012935 	.word	0x08012935
 80128c4:	08012935 	.word	0x08012935
 80128c8:	080128ff 	.word	0x080128ff
 80128cc:	08012935 	.word	0x08012935
 80128d0:	08012935 	.word	0x08012935
 80128d4:	08012935 	.word	0x08012935
 80128d8:	08012911 	.word	0x08012911
 80128dc:	08012935 	.word	0x08012935
 80128e0:	08012935 	.word	0x08012935
 80128e4:	08012935 	.word	0x08012935
 80128e8:	08012923 	.word	0x08012923
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	68da      	ldr	r2, [r3, #12]
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	f042 0202 	orr.w	r2, r2, #2
 80128fa:	60da      	str	r2, [r3, #12]
      break;
 80128fc:	e01d      	b.n	801293a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	68da      	ldr	r2, [r3, #12]
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	f042 0204 	orr.w	r2, r2, #4
 801290c:	60da      	str	r2, [r3, #12]
      break;
 801290e:	e014      	b.n	801293a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	68da      	ldr	r2, [r3, #12]
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	f042 0208 	orr.w	r2, r2, #8
 801291e:	60da      	str	r2, [r3, #12]
      break;
 8012920:	e00b      	b.n	801293a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	68da      	ldr	r2, [r3, #12]
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	f042 0210 	orr.w	r2, r2, #16
 8012930:	60da      	str	r2, [r3, #12]
      break;
 8012932:	e002      	b.n	801293a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8012934:	2301      	movs	r3, #1
 8012936:	73fb      	strb	r3, [r7, #15]
      break;
 8012938:	bf00      	nop
  }

  if (status == HAL_OK)
 801293a:	7bfb      	ldrb	r3, [r7, #15]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d16f      	bne.n	8012a20 <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	2201      	movs	r2, #1
 8012946:	6839      	ldr	r1, [r7, #0]
 8012948:	4618      	mov	r0, r3
 801294a:	f001 fec7 	bl	80146dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	4a36      	ldr	r2, [pc, #216]	@ (8012a2c <HAL_TIM_OC_Start_IT+0x284>)
 8012954:	4293      	cmp	r3, r2
 8012956:	d013      	beq.n	8012980 <HAL_TIM_OC_Start_IT+0x1d8>
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	4a34      	ldr	r2, [pc, #208]	@ (8012a30 <HAL_TIM_OC_Start_IT+0x288>)
 801295e:	4293      	cmp	r3, r2
 8012960:	d00e      	beq.n	8012980 <HAL_TIM_OC_Start_IT+0x1d8>
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	4a33      	ldr	r2, [pc, #204]	@ (8012a34 <HAL_TIM_OC_Start_IT+0x28c>)
 8012968:	4293      	cmp	r3, r2
 801296a:	d009      	beq.n	8012980 <HAL_TIM_OC_Start_IT+0x1d8>
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	4a31      	ldr	r2, [pc, #196]	@ (8012a38 <HAL_TIM_OC_Start_IT+0x290>)
 8012972:	4293      	cmp	r3, r2
 8012974:	d004      	beq.n	8012980 <HAL_TIM_OC_Start_IT+0x1d8>
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	4a30      	ldr	r2, [pc, #192]	@ (8012a3c <HAL_TIM_OC_Start_IT+0x294>)
 801297c:	4293      	cmp	r3, r2
 801297e:	d101      	bne.n	8012984 <HAL_TIM_OC_Start_IT+0x1dc>
 8012980:	2301      	movs	r3, #1
 8012982:	e000      	b.n	8012986 <HAL_TIM_OC_Start_IT+0x1de>
 8012984:	2300      	movs	r3, #0
 8012986:	2b00      	cmp	r3, #0
 8012988:	d007      	beq.n	801299a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012998:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	4a23      	ldr	r2, [pc, #140]	@ (8012a2c <HAL_TIM_OC_Start_IT+0x284>)
 80129a0:	4293      	cmp	r3, r2
 80129a2:	d01d      	beq.n	80129e0 <HAL_TIM_OC_Start_IT+0x238>
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80129ac:	d018      	beq.n	80129e0 <HAL_TIM_OC_Start_IT+0x238>
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	4a23      	ldr	r2, [pc, #140]	@ (8012a40 <HAL_TIM_OC_Start_IT+0x298>)
 80129b4:	4293      	cmp	r3, r2
 80129b6:	d013      	beq.n	80129e0 <HAL_TIM_OC_Start_IT+0x238>
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	4a21      	ldr	r2, [pc, #132]	@ (8012a44 <HAL_TIM_OC_Start_IT+0x29c>)
 80129be:	4293      	cmp	r3, r2
 80129c0:	d00e      	beq.n	80129e0 <HAL_TIM_OC_Start_IT+0x238>
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	4a20      	ldr	r2, [pc, #128]	@ (8012a48 <HAL_TIM_OC_Start_IT+0x2a0>)
 80129c8:	4293      	cmp	r3, r2
 80129ca:	d009      	beq.n	80129e0 <HAL_TIM_OC_Start_IT+0x238>
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	4a17      	ldr	r2, [pc, #92]	@ (8012a30 <HAL_TIM_OC_Start_IT+0x288>)
 80129d2:	4293      	cmp	r3, r2
 80129d4:	d004      	beq.n	80129e0 <HAL_TIM_OC_Start_IT+0x238>
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	4a16      	ldr	r2, [pc, #88]	@ (8012a34 <HAL_TIM_OC_Start_IT+0x28c>)
 80129dc:	4293      	cmp	r3, r2
 80129de:	d115      	bne.n	8012a0c <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	689a      	ldr	r2, [r3, #8]
 80129e6:	4b19      	ldr	r3, [pc, #100]	@ (8012a4c <HAL_TIM_OC_Start_IT+0x2a4>)
 80129e8:	4013      	ands	r3, r2
 80129ea:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80129ec:	68bb      	ldr	r3, [r7, #8]
 80129ee:	2b06      	cmp	r3, #6
 80129f0:	d015      	beq.n	8012a1e <HAL_TIM_OC_Start_IT+0x276>
 80129f2:	68bb      	ldr	r3, [r7, #8]
 80129f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80129f8:	d011      	beq.n	8012a1e <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	681a      	ldr	r2, [r3, #0]
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	f042 0201 	orr.w	r2, r2, #1
 8012a08:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a0a:	e008      	b.n	8012a1e <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	681a      	ldr	r2, [r3, #0]
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	f042 0201 	orr.w	r2, r2, #1
 8012a1a:	601a      	str	r2, [r3, #0]
 8012a1c:	e000      	b.n	8012a20 <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a1e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	3710      	adds	r7, #16
 8012a26:	46bd      	mov	sp, r7
 8012a28:	bd80      	pop	{r7, pc}
 8012a2a:	bf00      	nop
 8012a2c:	40012c00 	.word	0x40012c00
 8012a30:	40013400 	.word	0x40013400
 8012a34:	40014000 	.word	0x40014000
 8012a38:	40014400 	.word	0x40014400
 8012a3c:	40014800 	.word	0x40014800
 8012a40:	40000400 	.word	0x40000400
 8012a44:	40000800 	.word	0x40000800
 8012a48:	40000c00 	.word	0x40000c00
 8012a4c:	00010007 	.word	0x00010007

08012a50 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b084      	sub	sp, #16
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
 8012a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8012a5e:	683b      	ldr	r3, [r7, #0]
 8012a60:	2b0c      	cmp	r3, #12
 8012a62:	d841      	bhi.n	8012ae8 <HAL_TIM_OC_Stop_IT+0x98>
 8012a64:	a201      	add	r2, pc, #4	@ (adr r2, 8012a6c <HAL_TIM_OC_Stop_IT+0x1c>)
 8012a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a6a:	bf00      	nop
 8012a6c:	08012aa1 	.word	0x08012aa1
 8012a70:	08012ae9 	.word	0x08012ae9
 8012a74:	08012ae9 	.word	0x08012ae9
 8012a78:	08012ae9 	.word	0x08012ae9
 8012a7c:	08012ab3 	.word	0x08012ab3
 8012a80:	08012ae9 	.word	0x08012ae9
 8012a84:	08012ae9 	.word	0x08012ae9
 8012a88:	08012ae9 	.word	0x08012ae9
 8012a8c:	08012ac5 	.word	0x08012ac5
 8012a90:	08012ae9 	.word	0x08012ae9
 8012a94:	08012ae9 	.word	0x08012ae9
 8012a98:	08012ae9 	.word	0x08012ae9
 8012a9c:	08012ad7 	.word	0x08012ad7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	68da      	ldr	r2, [r3, #12]
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	f022 0202 	bic.w	r2, r2, #2
 8012aae:	60da      	str	r2, [r3, #12]
      break;
 8012ab0:	e01d      	b.n	8012aee <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	68da      	ldr	r2, [r3, #12]
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	f022 0204 	bic.w	r2, r2, #4
 8012ac0:	60da      	str	r2, [r3, #12]
      break;
 8012ac2:	e014      	b.n	8012aee <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	68da      	ldr	r2, [r3, #12]
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	f022 0208 	bic.w	r2, r2, #8
 8012ad2:	60da      	str	r2, [r3, #12]
      break;
 8012ad4:	e00b      	b.n	8012aee <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	68da      	ldr	r2, [r3, #12]
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	f022 0210 	bic.w	r2, r2, #16
 8012ae4:	60da      	str	r2, [r3, #12]
      break;
 8012ae6:	e002      	b.n	8012aee <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8012ae8:	2301      	movs	r3, #1
 8012aea:	73fb      	strb	r3, [r7, #15]
      break;
 8012aec:	bf00      	nop
  }

  if (status == HAL_OK)
 8012aee:	7bfb      	ldrb	r3, [r7, #15]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	f040 8081 	bne.w	8012bf8 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	2200      	movs	r2, #0
 8012afc:	6839      	ldr	r1, [r7, #0]
 8012afe:	4618      	mov	r0, r3
 8012b00:	f001 fdec 	bl	80146dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	4a3e      	ldr	r2, [pc, #248]	@ (8012c04 <HAL_TIM_OC_Stop_IT+0x1b4>)
 8012b0a:	4293      	cmp	r3, r2
 8012b0c:	d013      	beq.n	8012b36 <HAL_TIM_OC_Stop_IT+0xe6>
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	4a3d      	ldr	r2, [pc, #244]	@ (8012c08 <HAL_TIM_OC_Stop_IT+0x1b8>)
 8012b14:	4293      	cmp	r3, r2
 8012b16:	d00e      	beq.n	8012b36 <HAL_TIM_OC_Stop_IT+0xe6>
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	4a3b      	ldr	r2, [pc, #236]	@ (8012c0c <HAL_TIM_OC_Stop_IT+0x1bc>)
 8012b1e:	4293      	cmp	r3, r2
 8012b20:	d009      	beq.n	8012b36 <HAL_TIM_OC_Stop_IT+0xe6>
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	4a3a      	ldr	r2, [pc, #232]	@ (8012c10 <HAL_TIM_OC_Stop_IT+0x1c0>)
 8012b28:	4293      	cmp	r3, r2
 8012b2a:	d004      	beq.n	8012b36 <HAL_TIM_OC_Stop_IT+0xe6>
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	4a38      	ldr	r2, [pc, #224]	@ (8012c14 <HAL_TIM_OC_Stop_IT+0x1c4>)
 8012b32:	4293      	cmp	r3, r2
 8012b34:	d101      	bne.n	8012b3a <HAL_TIM_OC_Stop_IT+0xea>
 8012b36:	2301      	movs	r3, #1
 8012b38:	e000      	b.n	8012b3c <HAL_TIM_OC_Stop_IT+0xec>
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d017      	beq.n	8012b70 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	6a1a      	ldr	r2, [r3, #32]
 8012b46:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012b4a:	4013      	ands	r3, r2
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d10f      	bne.n	8012b70 <HAL_TIM_OC_Stop_IT+0x120>
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	6a1a      	ldr	r2, [r3, #32]
 8012b56:	f240 4344 	movw	r3, #1092	@ 0x444
 8012b5a:	4013      	ands	r3, r2
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d107      	bne.n	8012b70 <HAL_TIM_OC_Stop_IT+0x120>
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8012b6e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	6a1a      	ldr	r2, [r3, #32]
 8012b76:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012b7a:	4013      	ands	r3, r2
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d10f      	bne.n	8012ba0 <HAL_TIM_OC_Stop_IT+0x150>
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	6a1a      	ldr	r2, [r3, #32]
 8012b86:	f240 4344 	movw	r3, #1092	@ 0x444
 8012b8a:	4013      	ands	r3, r2
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d107      	bne.n	8012ba0 <HAL_TIM_OC_Stop_IT+0x150>
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	681a      	ldr	r2, [r3, #0]
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	f022 0201 	bic.w	r2, r2, #1
 8012b9e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012ba0:	683b      	ldr	r3, [r7, #0]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d104      	bne.n	8012bb0 <HAL_TIM_OC_Stop_IT+0x160>
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	2201      	movs	r2, #1
 8012baa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012bae:	e023      	b.n	8012bf8 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012bb0:	683b      	ldr	r3, [r7, #0]
 8012bb2:	2b04      	cmp	r3, #4
 8012bb4:	d104      	bne.n	8012bc0 <HAL_TIM_OC_Stop_IT+0x170>
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	2201      	movs	r2, #1
 8012bba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012bbe:	e01b      	b.n	8012bf8 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	2b08      	cmp	r3, #8
 8012bc4:	d104      	bne.n	8012bd0 <HAL_TIM_OC_Stop_IT+0x180>
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	2201      	movs	r2, #1
 8012bca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012bce:	e013      	b.n	8012bf8 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012bd0:	683b      	ldr	r3, [r7, #0]
 8012bd2:	2b0c      	cmp	r3, #12
 8012bd4:	d104      	bne.n	8012be0 <HAL_TIM_OC_Stop_IT+0x190>
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	2201      	movs	r2, #1
 8012bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012bde:	e00b      	b.n	8012bf8 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012be0:	683b      	ldr	r3, [r7, #0]
 8012be2:	2b10      	cmp	r3, #16
 8012be4:	d104      	bne.n	8012bf0 <HAL_TIM_OC_Stop_IT+0x1a0>
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	2201      	movs	r2, #1
 8012bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012bee:	e003      	b.n	8012bf8 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	2201      	movs	r2, #1
 8012bf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8012bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	3710      	adds	r7, #16
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}
 8012c02:	bf00      	nop
 8012c04:	40012c00 	.word	0x40012c00
 8012c08:	40013400 	.word	0x40013400
 8012c0c:	40014000 	.word	0x40014000
 8012c10:	40014400 	.word	0x40014400
 8012c14:	40014800 	.word	0x40014800

08012c18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b082      	sub	sp, #8
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d101      	bne.n	8012c2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012c26:	2301      	movs	r3, #1
 8012c28:	e049      	b.n	8012cbe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012c30:	b2db      	uxtb	r3, r3
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d106      	bne.n	8012c44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	2200      	movs	r2, #0
 8012c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012c3e:	6878      	ldr	r0, [r7, #4]
 8012c40:	f000 f841 	bl	8012cc6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	2202      	movs	r2, #2
 8012c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	681a      	ldr	r2, [r3, #0]
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	3304      	adds	r3, #4
 8012c54:	4619      	mov	r1, r3
 8012c56:	4610      	mov	r0, r2
 8012c58:	f000 ff72 	bl	8013b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	2201      	movs	r2, #1
 8012c60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2201      	movs	r2, #1
 8012c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	2201      	movs	r2, #1
 8012c70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	2201      	movs	r2, #1
 8012c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	2201      	movs	r2, #1
 8012c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	2201      	movs	r2, #1
 8012c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	2201      	movs	r2, #1
 8012c90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2201      	movs	r2, #1
 8012c98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	2201      	movs	r2, #1
 8012ca0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2201      	movs	r2, #1
 8012ca8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2201      	movs	r2, #1
 8012cb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	2201      	movs	r2, #1
 8012cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012cbc:	2300      	movs	r3, #0
}
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	3708      	adds	r7, #8
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	bd80      	pop	{r7, pc}

08012cc6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8012cc6:	b480      	push	{r7}
 8012cc8:	b083      	sub	sp, #12
 8012cca:	af00      	add	r7, sp, #0
 8012ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8012cce:	bf00      	nop
 8012cd0:	370c      	adds	r7, #12
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd8:	4770      	bx	lr
	...

08012cdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b084      	sub	sp, #16
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
 8012ce4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012ce6:	683b      	ldr	r3, [r7, #0]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d109      	bne.n	8012d00 <HAL_TIM_PWM_Start+0x24>
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012cf2:	b2db      	uxtb	r3, r3
 8012cf4:	2b01      	cmp	r3, #1
 8012cf6:	bf14      	ite	ne
 8012cf8:	2301      	movne	r3, #1
 8012cfa:	2300      	moveq	r3, #0
 8012cfc:	b2db      	uxtb	r3, r3
 8012cfe:	e03c      	b.n	8012d7a <HAL_TIM_PWM_Start+0x9e>
 8012d00:	683b      	ldr	r3, [r7, #0]
 8012d02:	2b04      	cmp	r3, #4
 8012d04:	d109      	bne.n	8012d1a <HAL_TIM_PWM_Start+0x3e>
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8012d0c:	b2db      	uxtb	r3, r3
 8012d0e:	2b01      	cmp	r3, #1
 8012d10:	bf14      	ite	ne
 8012d12:	2301      	movne	r3, #1
 8012d14:	2300      	moveq	r3, #0
 8012d16:	b2db      	uxtb	r3, r3
 8012d18:	e02f      	b.n	8012d7a <HAL_TIM_PWM_Start+0x9e>
 8012d1a:	683b      	ldr	r3, [r7, #0]
 8012d1c:	2b08      	cmp	r3, #8
 8012d1e:	d109      	bne.n	8012d34 <HAL_TIM_PWM_Start+0x58>
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012d26:	b2db      	uxtb	r3, r3
 8012d28:	2b01      	cmp	r3, #1
 8012d2a:	bf14      	ite	ne
 8012d2c:	2301      	movne	r3, #1
 8012d2e:	2300      	moveq	r3, #0
 8012d30:	b2db      	uxtb	r3, r3
 8012d32:	e022      	b.n	8012d7a <HAL_TIM_PWM_Start+0x9e>
 8012d34:	683b      	ldr	r3, [r7, #0]
 8012d36:	2b0c      	cmp	r3, #12
 8012d38:	d109      	bne.n	8012d4e <HAL_TIM_PWM_Start+0x72>
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012d40:	b2db      	uxtb	r3, r3
 8012d42:	2b01      	cmp	r3, #1
 8012d44:	bf14      	ite	ne
 8012d46:	2301      	movne	r3, #1
 8012d48:	2300      	moveq	r3, #0
 8012d4a:	b2db      	uxtb	r3, r3
 8012d4c:	e015      	b.n	8012d7a <HAL_TIM_PWM_Start+0x9e>
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	2b10      	cmp	r3, #16
 8012d52:	d109      	bne.n	8012d68 <HAL_TIM_PWM_Start+0x8c>
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012d5a:	b2db      	uxtb	r3, r3
 8012d5c:	2b01      	cmp	r3, #1
 8012d5e:	bf14      	ite	ne
 8012d60:	2301      	movne	r3, #1
 8012d62:	2300      	moveq	r3, #0
 8012d64:	b2db      	uxtb	r3, r3
 8012d66:	e008      	b.n	8012d7a <HAL_TIM_PWM_Start+0x9e>
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012d6e:	b2db      	uxtb	r3, r3
 8012d70:	2b01      	cmp	r3, #1
 8012d72:	bf14      	ite	ne
 8012d74:	2301      	movne	r3, #1
 8012d76:	2300      	moveq	r3, #0
 8012d78:	b2db      	uxtb	r3, r3
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d001      	beq.n	8012d82 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8012d7e:	2301      	movs	r3, #1
 8012d80:	e09c      	b.n	8012ebc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012d82:	683b      	ldr	r3, [r7, #0]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d104      	bne.n	8012d92 <HAL_TIM_PWM_Start+0xb6>
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	2202      	movs	r2, #2
 8012d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012d90:	e023      	b.n	8012dda <HAL_TIM_PWM_Start+0xfe>
 8012d92:	683b      	ldr	r3, [r7, #0]
 8012d94:	2b04      	cmp	r3, #4
 8012d96:	d104      	bne.n	8012da2 <HAL_TIM_PWM_Start+0xc6>
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	2202      	movs	r2, #2
 8012d9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012da0:	e01b      	b.n	8012dda <HAL_TIM_PWM_Start+0xfe>
 8012da2:	683b      	ldr	r3, [r7, #0]
 8012da4:	2b08      	cmp	r3, #8
 8012da6:	d104      	bne.n	8012db2 <HAL_TIM_PWM_Start+0xd6>
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2202      	movs	r2, #2
 8012dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012db0:	e013      	b.n	8012dda <HAL_TIM_PWM_Start+0xfe>
 8012db2:	683b      	ldr	r3, [r7, #0]
 8012db4:	2b0c      	cmp	r3, #12
 8012db6:	d104      	bne.n	8012dc2 <HAL_TIM_PWM_Start+0xe6>
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	2202      	movs	r2, #2
 8012dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012dc0:	e00b      	b.n	8012dda <HAL_TIM_PWM_Start+0xfe>
 8012dc2:	683b      	ldr	r3, [r7, #0]
 8012dc4:	2b10      	cmp	r3, #16
 8012dc6:	d104      	bne.n	8012dd2 <HAL_TIM_PWM_Start+0xf6>
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	2202      	movs	r2, #2
 8012dcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012dd0:	e003      	b.n	8012dda <HAL_TIM_PWM_Start+0xfe>
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	2202      	movs	r2, #2
 8012dd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	2201      	movs	r2, #1
 8012de0:	6839      	ldr	r1, [r7, #0]
 8012de2:	4618      	mov	r0, r3
 8012de4:	f001 fc7a 	bl	80146dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	4a35      	ldr	r2, [pc, #212]	@ (8012ec4 <HAL_TIM_PWM_Start+0x1e8>)
 8012dee:	4293      	cmp	r3, r2
 8012df0:	d013      	beq.n	8012e1a <HAL_TIM_PWM_Start+0x13e>
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	4a34      	ldr	r2, [pc, #208]	@ (8012ec8 <HAL_TIM_PWM_Start+0x1ec>)
 8012df8:	4293      	cmp	r3, r2
 8012dfa:	d00e      	beq.n	8012e1a <HAL_TIM_PWM_Start+0x13e>
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	4a32      	ldr	r2, [pc, #200]	@ (8012ecc <HAL_TIM_PWM_Start+0x1f0>)
 8012e02:	4293      	cmp	r3, r2
 8012e04:	d009      	beq.n	8012e1a <HAL_TIM_PWM_Start+0x13e>
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	4a31      	ldr	r2, [pc, #196]	@ (8012ed0 <HAL_TIM_PWM_Start+0x1f4>)
 8012e0c:	4293      	cmp	r3, r2
 8012e0e:	d004      	beq.n	8012e1a <HAL_TIM_PWM_Start+0x13e>
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	4a2f      	ldr	r2, [pc, #188]	@ (8012ed4 <HAL_TIM_PWM_Start+0x1f8>)
 8012e16:	4293      	cmp	r3, r2
 8012e18:	d101      	bne.n	8012e1e <HAL_TIM_PWM_Start+0x142>
 8012e1a:	2301      	movs	r3, #1
 8012e1c:	e000      	b.n	8012e20 <HAL_TIM_PWM_Start+0x144>
 8012e1e:	2300      	movs	r3, #0
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d007      	beq.n	8012e34 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012e32:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	4a22      	ldr	r2, [pc, #136]	@ (8012ec4 <HAL_TIM_PWM_Start+0x1e8>)
 8012e3a:	4293      	cmp	r3, r2
 8012e3c:	d01d      	beq.n	8012e7a <HAL_TIM_PWM_Start+0x19e>
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012e46:	d018      	beq.n	8012e7a <HAL_TIM_PWM_Start+0x19e>
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	4a22      	ldr	r2, [pc, #136]	@ (8012ed8 <HAL_TIM_PWM_Start+0x1fc>)
 8012e4e:	4293      	cmp	r3, r2
 8012e50:	d013      	beq.n	8012e7a <HAL_TIM_PWM_Start+0x19e>
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	4a21      	ldr	r2, [pc, #132]	@ (8012edc <HAL_TIM_PWM_Start+0x200>)
 8012e58:	4293      	cmp	r3, r2
 8012e5a:	d00e      	beq.n	8012e7a <HAL_TIM_PWM_Start+0x19e>
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	4a1f      	ldr	r2, [pc, #124]	@ (8012ee0 <HAL_TIM_PWM_Start+0x204>)
 8012e62:	4293      	cmp	r3, r2
 8012e64:	d009      	beq.n	8012e7a <HAL_TIM_PWM_Start+0x19e>
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	4a17      	ldr	r2, [pc, #92]	@ (8012ec8 <HAL_TIM_PWM_Start+0x1ec>)
 8012e6c:	4293      	cmp	r3, r2
 8012e6e:	d004      	beq.n	8012e7a <HAL_TIM_PWM_Start+0x19e>
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	4a15      	ldr	r2, [pc, #84]	@ (8012ecc <HAL_TIM_PWM_Start+0x1f0>)
 8012e76:	4293      	cmp	r3, r2
 8012e78:	d115      	bne.n	8012ea6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	689a      	ldr	r2, [r3, #8]
 8012e80:	4b18      	ldr	r3, [pc, #96]	@ (8012ee4 <HAL_TIM_PWM_Start+0x208>)
 8012e82:	4013      	ands	r3, r2
 8012e84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	2b06      	cmp	r3, #6
 8012e8a:	d015      	beq.n	8012eb8 <HAL_TIM_PWM_Start+0x1dc>
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012e92:	d011      	beq.n	8012eb8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	681a      	ldr	r2, [r3, #0]
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	f042 0201 	orr.w	r2, r2, #1
 8012ea2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012ea4:	e008      	b.n	8012eb8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	681a      	ldr	r2, [r3, #0]
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	f042 0201 	orr.w	r2, r2, #1
 8012eb4:	601a      	str	r2, [r3, #0]
 8012eb6:	e000      	b.n	8012eba <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012eb8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012eba:	2300      	movs	r3, #0
}
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	3710      	adds	r7, #16
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	bd80      	pop	{r7, pc}
 8012ec4:	40012c00 	.word	0x40012c00
 8012ec8:	40013400 	.word	0x40013400
 8012ecc:	40014000 	.word	0x40014000
 8012ed0:	40014400 	.word	0x40014400
 8012ed4:	40014800 	.word	0x40014800
 8012ed8:	40000400 	.word	0x40000400
 8012edc:	40000800 	.word	0x40000800
 8012ee0:	40000c00 	.word	0x40000c00
 8012ee4:	00010007 	.word	0x00010007

08012ee8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b082      	sub	sp, #8
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
 8012ef0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	6839      	ldr	r1, [r7, #0]
 8012efa:	4618      	mov	r0, r3
 8012efc:	f001 fbee 	bl	80146dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	4a3e      	ldr	r2, [pc, #248]	@ (8013000 <HAL_TIM_PWM_Stop+0x118>)
 8012f06:	4293      	cmp	r3, r2
 8012f08:	d013      	beq.n	8012f32 <HAL_TIM_PWM_Stop+0x4a>
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	4a3d      	ldr	r2, [pc, #244]	@ (8013004 <HAL_TIM_PWM_Stop+0x11c>)
 8012f10:	4293      	cmp	r3, r2
 8012f12:	d00e      	beq.n	8012f32 <HAL_TIM_PWM_Stop+0x4a>
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	4a3b      	ldr	r2, [pc, #236]	@ (8013008 <HAL_TIM_PWM_Stop+0x120>)
 8012f1a:	4293      	cmp	r3, r2
 8012f1c:	d009      	beq.n	8012f32 <HAL_TIM_PWM_Stop+0x4a>
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	4a3a      	ldr	r2, [pc, #232]	@ (801300c <HAL_TIM_PWM_Stop+0x124>)
 8012f24:	4293      	cmp	r3, r2
 8012f26:	d004      	beq.n	8012f32 <HAL_TIM_PWM_Stop+0x4a>
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	4a38      	ldr	r2, [pc, #224]	@ (8013010 <HAL_TIM_PWM_Stop+0x128>)
 8012f2e:	4293      	cmp	r3, r2
 8012f30:	d101      	bne.n	8012f36 <HAL_TIM_PWM_Stop+0x4e>
 8012f32:	2301      	movs	r3, #1
 8012f34:	e000      	b.n	8012f38 <HAL_TIM_PWM_Stop+0x50>
 8012f36:	2300      	movs	r3, #0
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d017      	beq.n	8012f6c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	6a1a      	ldr	r2, [r3, #32]
 8012f42:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012f46:	4013      	ands	r3, r2
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d10f      	bne.n	8012f6c <HAL_TIM_PWM_Stop+0x84>
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	6a1a      	ldr	r2, [r3, #32]
 8012f52:	f240 4344 	movw	r3, #1092	@ 0x444
 8012f56:	4013      	ands	r3, r2
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d107      	bne.n	8012f6c <HAL_TIM_PWM_Stop+0x84>
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8012f6a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	6a1a      	ldr	r2, [r3, #32]
 8012f72:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012f76:	4013      	ands	r3, r2
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d10f      	bne.n	8012f9c <HAL_TIM_PWM_Stop+0xb4>
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	6a1a      	ldr	r2, [r3, #32]
 8012f82:	f240 4344 	movw	r3, #1092	@ 0x444
 8012f86:	4013      	ands	r3, r2
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d107      	bne.n	8012f9c <HAL_TIM_PWM_Stop+0xb4>
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	681a      	ldr	r2, [r3, #0]
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	f022 0201 	bic.w	r2, r2, #1
 8012f9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012f9c:	683b      	ldr	r3, [r7, #0]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d104      	bne.n	8012fac <HAL_TIM_PWM_Stop+0xc4>
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	2201      	movs	r2, #1
 8012fa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012faa:	e023      	b.n	8012ff4 <HAL_TIM_PWM_Stop+0x10c>
 8012fac:	683b      	ldr	r3, [r7, #0]
 8012fae:	2b04      	cmp	r3, #4
 8012fb0:	d104      	bne.n	8012fbc <HAL_TIM_PWM_Stop+0xd4>
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	2201      	movs	r2, #1
 8012fb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012fba:	e01b      	b.n	8012ff4 <HAL_TIM_PWM_Stop+0x10c>
 8012fbc:	683b      	ldr	r3, [r7, #0]
 8012fbe:	2b08      	cmp	r3, #8
 8012fc0:	d104      	bne.n	8012fcc <HAL_TIM_PWM_Stop+0xe4>
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	2201      	movs	r2, #1
 8012fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012fca:	e013      	b.n	8012ff4 <HAL_TIM_PWM_Stop+0x10c>
 8012fcc:	683b      	ldr	r3, [r7, #0]
 8012fce:	2b0c      	cmp	r3, #12
 8012fd0:	d104      	bne.n	8012fdc <HAL_TIM_PWM_Stop+0xf4>
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	2201      	movs	r2, #1
 8012fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012fda:	e00b      	b.n	8012ff4 <HAL_TIM_PWM_Stop+0x10c>
 8012fdc:	683b      	ldr	r3, [r7, #0]
 8012fde:	2b10      	cmp	r3, #16
 8012fe0:	d104      	bne.n	8012fec <HAL_TIM_PWM_Stop+0x104>
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	2201      	movs	r2, #1
 8012fe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012fea:	e003      	b.n	8012ff4 <HAL_TIM_PWM_Stop+0x10c>
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	2201      	movs	r2, #1
 8012ff0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8012ff4:	2300      	movs	r3, #0
}
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	3708      	adds	r7, #8
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}
 8012ffe:	bf00      	nop
 8013000:	40012c00 	.word	0x40012c00
 8013004:	40013400 	.word	0x40013400
 8013008:	40014000 	.word	0x40014000
 801300c:	40014400 	.word	0x40014400
 8013010:	40014800 	.word	0x40014800

08013014 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b082      	sub	sp, #8
 8013018:	af00      	add	r7, sp, #0
 801301a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d101      	bne.n	8013026 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8013022:	2301      	movs	r3, #1
 8013024:	e049      	b.n	80130ba <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801302c:	b2db      	uxtb	r3, r3
 801302e:	2b00      	cmp	r3, #0
 8013030:	d106      	bne.n	8013040 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	2200      	movs	r2, #0
 8013036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801303a:	6878      	ldr	r0, [r7, #4]
 801303c:	f7f4 fc84 	bl	8007948 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	2202      	movs	r2, #2
 8013044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	681a      	ldr	r2, [r3, #0]
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	3304      	adds	r3, #4
 8013050:	4619      	mov	r1, r3
 8013052:	4610      	mov	r0, r2
 8013054:	f000 fd74 	bl	8013b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	2201      	movs	r2, #1
 801305c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	2201      	movs	r2, #1
 8013064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2201      	movs	r2, #1
 801306c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	2201      	movs	r2, #1
 8013074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	2201      	movs	r2, #1
 801307c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	2201      	movs	r2, #1
 8013084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	2201      	movs	r2, #1
 801308c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2201      	movs	r2, #1
 8013094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	2201      	movs	r2, #1
 801309c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2201      	movs	r2, #1
 80130a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2201      	movs	r2, #1
 80130ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	2201      	movs	r2, #1
 80130b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80130b8:	2300      	movs	r3, #0
}
 80130ba:	4618      	mov	r0, r3
 80130bc:	3708      	adds	r7, #8
 80130be:	46bd      	mov	sp, r7
 80130c0:	bd80      	pop	{r7, pc}
	...

080130c4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b084      	sub	sp, #16
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
 80130cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80130ce:	2300      	movs	r3, #0
 80130d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80130d2:	683b      	ldr	r3, [r7, #0]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d104      	bne.n	80130e2 <HAL_TIM_IC_Start_IT+0x1e>
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80130de:	b2db      	uxtb	r3, r3
 80130e0:	e023      	b.n	801312a <HAL_TIM_IC_Start_IT+0x66>
 80130e2:	683b      	ldr	r3, [r7, #0]
 80130e4:	2b04      	cmp	r3, #4
 80130e6:	d104      	bne.n	80130f2 <HAL_TIM_IC_Start_IT+0x2e>
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80130ee:	b2db      	uxtb	r3, r3
 80130f0:	e01b      	b.n	801312a <HAL_TIM_IC_Start_IT+0x66>
 80130f2:	683b      	ldr	r3, [r7, #0]
 80130f4:	2b08      	cmp	r3, #8
 80130f6:	d104      	bne.n	8013102 <HAL_TIM_IC_Start_IT+0x3e>
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80130fe:	b2db      	uxtb	r3, r3
 8013100:	e013      	b.n	801312a <HAL_TIM_IC_Start_IT+0x66>
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	2b0c      	cmp	r3, #12
 8013106:	d104      	bne.n	8013112 <HAL_TIM_IC_Start_IT+0x4e>
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801310e:	b2db      	uxtb	r3, r3
 8013110:	e00b      	b.n	801312a <HAL_TIM_IC_Start_IT+0x66>
 8013112:	683b      	ldr	r3, [r7, #0]
 8013114:	2b10      	cmp	r3, #16
 8013116:	d104      	bne.n	8013122 <HAL_TIM_IC_Start_IT+0x5e>
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801311e:	b2db      	uxtb	r3, r3
 8013120:	e003      	b.n	801312a <HAL_TIM_IC_Start_IT+0x66>
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013128:	b2db      	uxtb	r3, r3
 801312a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801312c:	683b      	ldr	r3, [r7, #0]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d104      	bne.n	801313c <HAL_TIM_IC_Start_IT+0x78>
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013138:	b2db      	uxtb	r3, r3
 801313a:	e013      	b.n	8013164 <HAL_TIM_IC_Start_IT+0xa0>
 801313c:	683b      	ldr	r3, [r7, #0]
 801313e:	2b04      	cmp	r3, #4
 8013140:	d104      	bne.n	801314c <HAL_TIM_IC_Start_IT+0x88>
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013148:	b2db      	uxtb	r3, r3
 801314a:	e00b      	b.n	8013164 <HAL_TIM_IC_Start_IT+0xa0>
 801314c:	683b      	ldr	r3, [r7, #0]
 801314e:	2b08      	cmp	r3, #8
 8013150:	d104      	bne.n	801315c <HAL_TIM_IC_Start_IT+0x98>
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8013158:	b2db      	uxtb	r3, r3
 801315a:	e003      	b.n	8013164 <HAL_TIM_IC_Start_IT+0xa0>
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8013162:	b2db      	uxtb	r3, r3
 8013164:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8013166:	7bbb      	ldrb	r3, [r7, #14]
 8013168:	2b01      	cmp	r3, #1
 801316a:	d102      	bne.n	8013172 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 801316c:	7b7b      	ldrb	r3, [r7, #13]
 801316e:	2b01      	cmp	r3, #1
 8013170:	d001      	beq.n	8013176 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8013172:	2301      	movs	r3, #1
 8013174:	e0dd      	b.n	8013332 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013176:	683b      	ldr	r3, [r7, #0]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d104      	bne.n	8013186 <HAL_TIM_IC_Start_IT+0xc2>
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	2202      	movs	r2, #2
 8013180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013184:	e023      	b.n	80131ce <HAL_TIM_IC_Start_IT+0x10a>
 8013186:	683b      	ldr	r3, [r7, #0]
 8013188:	2b04      	cmp	r3, #4
 801318a:	d104      	bne.n	8013196 <HAL_TIM_IC_Start_IT+0xd2>
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	2202      	movs	r2, #2
 8013190:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013194:	e01b      	b.n	80131ce <HAL_TIM_IC_Start_IT+0x10a>
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	2b08      	cmp	r3, #8
 801319a:	d104      	bne.n	80131a6 <HAL_TIM_IC_Start_IT+0xe2>
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	2202      	movs	r2, #2
 80131a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80131a4:	e013      	b.n	80131ce <HAL_TIM_IC_Start_IT+0x10a>
 80131a6:	683b      	ldr	r3, [r7, #0]
 80131a8:	2b0c      	cmp	r3, #12
 80131aa:	d104      	bne.n	80131b6 <HAL_TIM_IC_Start_IT+0xf2>
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	2202      	movs	r2, #2
 80131b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80131b4:	e00b      	b.n	80131ce <HAL_TIM_IC_Start_IT+0x10a>
 80131b6:	683b      	ldr	r3, [r7, #0]
 80131b8:	2b10      	cmp	r3, #16
 80131ba:	d104      	bne.n	80131c6 <HAL_TIM_IC_Start_IT+0x102>
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	2202      	movs	r2, #2
 80131c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80131c4:	e003      	b.n	80131ce <HAL_TIM_IC_Start_IT+0x10a>
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	2202      	movs	r2, #2
 80131ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80131ce:	683b      	ldr	r3, [r7, #0]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d104      	bne.n	80131de <HAL_TIM_IC_Start_IT+0x11a>
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2202      	movs	r2, #2
 80131d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80131dc:	e013      	b.n	8013206 <HAL_TIM_IC_Start_IT+0x142>
 80131de:	683b      	ldr	r3, [r7, #0]
 80131e0:	2b04      	cmp	r3, #4
 80131e2:	d104      	bne.n	80131ee <HAL_TIM_IC_Start_IT+0x12a>
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	2202      	movs	r2, #2
 80131e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80131ec:	e00b      	b.n	8013206 <HAL_TIM_IC_Start_IT+0x142>
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	2b08      	cmp	r3, #8
 80131f2:	d104      	bne.n	80131fe <HAL_TIM_IC_Start_IT+0x13a>
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	2202      	movs	r2, #2
 80131f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80131fc:	e003      	b.n	8013206 <HAL_TIM_IC_Start_IT+0x142>
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	2202      	movs	r2, #2
 8013202:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8013206:	683b      	ldr	r3, [r7, #0]
 8013208:	2b0c      	cmp	r3, #12
 801320a:	d841      	bhi.n	8013290 <HAL_TIM_IC_Start_IT+0x1cc>
 801320c:	a201      	add	r2, pc, #4	@ (adr r2, 8013214 <HAL_TIM_IC_Start_IT+0x150>)
 801320e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013212:	bf00      	nop
 8013214:	08013249 	.word	0x08013249
 8013218:	08013291 	.word	0x08013291
 801321c:	08013291 	.word	0x08013291
 8013220:	08013291 	.word	0x08013291
 8013224:	0801325b 	.word	0x0801325b
 8013228:	08013291 	.word	0x08013291
 801322c:	08013291 	.word	0x08013291
 8013230:	08013291 	.word	0x08013291
 8013234:	0801326d 	.word	0x0801326d
 8013238:	08013291 	.word	0x08013291
 801323c:	08013291 	.word	0x08013291
 8013240:	08013291 	.word	0x08013291
 8013244:	0801327f 	.word	0x0801327f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	68da      	ldr	r2, [r3, #12]
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	f042 0202 	orr.w	r2, r2, #2
 8013256:	60da      	str	r2, [r3, #12]
      break;
 8013258:	e01d      	b.n	8013296 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	68da      	ldr	r2, [r3, #12]
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	f042 0204 	orr.w	r2, r2, #4
 8013268:	60da      	str	r2, [r3, #12]
      break;
 801326a:	e014      	b.n	8013296 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	68da      	ldr	r2, [r3, #12]
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	f042 0208 	orr.w	r2, r2, #8
 801327a:	60da      	str	r2, [r3, #12]
      break;
 801327c:	e00b      	b.n	8013296 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	68da      	ldr	r2, [r3, #12]
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	f042 0210 	orr.w	r2, r2, #16
 801328c:	60da      	str	r2, [r3, #12]
      break;
 801328e:	e002      	b.n	8013296 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8013290:	2301      	movs	r3, #1
 8013292:	73fb      	strb	r3, [r7, #15]
      break;
 8013294:	bf00      	nop
  }

  if (status == HAL_OK)
 8013296:	7bfb      	ldrb	r3, [r7, #15]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d149      	bne.n	8013330 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	2201      	movs	r2, #1
 80132a2:	6839      	ldr	r1, [r7, #0]
 80132a4:	4618      	mov	r0, r3
 80132a6:	f001 fa19 	bl	80146dc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	4a23      	ldr	r2, [pc, #140]	@ (801333c <HAL_TIM_IC_Start_IT+0x278>)
 80132b0:	4293      	cmp	r3, r2
 80132b2:	d01d      	beq.n	80132f0 <HAL_TIM_IC_Start_IT+0x22c>
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80132bc:	d018      	beq.n	80132f0 <HAL_TIM_IC_Start_IT+0x22c>
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	4a1f      	ldr	r2, [pc, #124]	@ (8013340 <HAL_TIM_IC_Start_IT+0x27c>)
 80132c4:	4293      	cmp	r3, r2
 80132c6:	d013      	beq.n	80132f0 <HAL_TIM_IC_Start_IT+0x22c>
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	4a1d      	ldr	r2, [pc, #116]	@ (8013344 <HAL_TIM_IC_Start_IT+0x280>)
 80132ce:	4293      	cmp	r3, r2
 80132d0:	d00e      	beq.n	80132f0 <HAL_TIM_IC_Start_IT+0x22c>
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	4a1c      	ldr	r2, [pc, #112]	@ (8013348 <HAL_TIM_IC_Start_IT+0x284>)
 80132d8:	4293      	cmp	r3, r2
 80132da:	d009      	beq.n	80132f0 <HAL_TIM_IC_Start_IT+0x22c>
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	4a1a      	ldr	r2, [pc, #104]	@ (801334c <HAL_TIM_IC_Start_IT+0x288>)
 80132e2:	4293      	cmp	r3, r2
 80132e4:	d004      	beq.n	80132f0 <HAL_TIM_IC_Start_IT+0x22c>
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	4a19      	ldr	r2, [pc, #100]	@ (8013350 <HAL_TIM_IC_Start_IT+0x28c>)
 80132ec:	4293      	cmp	r3, r2
 80132ee:	d115      	bne.n	801331c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	689a      	ldr	r2, [r3, #8]
 80132f6:	4b17      	ldr	r3, [pc, #92]	@ (8013354 <HAL_TIM_IC_Start_IT+0x290>)
 80132f8:	4013      	ands	r3, r2
 80132fa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80132fc:	68bb      	ldr	r3, [r7, #8]
 80132fe:	2b06      	cmp	r3, #6
 8013300:	d015      	beq.n	801332e <HAL_TIM_IC_Start_IT+0x26a>
 8013302:	68bb      	ldr	r3, [r7, #8]
 8013304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013308:	d011      	beq.n	801332e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	681a      	ldr	r2, [r3, #0]
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	f042 0201 	orr.w	r2, r2, #1
 8013318:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801331a:	e008      	b.n	801332e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	681a      	ldr	r2, [r3, #0]
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	f042 0201 	orr.w	r2, r2, #1
 801332a:	601a      	str	r2, [r3, #0]
 801332c:	e000      	b.n	8013330 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801332e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8013330:	7bfb      	ldrb	r3, [r7, #15]
}
 8013332:	4618      	mov	r0, r3
 8013334:	3710      	adds	r7, #16
 8013336:	46bd      	mov	sp, r7
 8013338:	bd80      	pop	{r7, pc}
 801333a:	bf00      	nop
 801333c:	40012c00 	.word	0x40012c00
 8013340:	40000400 	.word	0x40000400
 8013344:	40000800 	.word	0x40000800
 8013348:	40000c00 	.word	0x40000c00
 801334c:	40013400 	.word	0x40013400
 8013350:	40014000 	.word	0x40014000
 8013354:	00010007 	.word	0x00010007

08013358 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b084      	sub	sp, #16
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
 8013360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013362:	2300      	movs	r3, #0
 8013364:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8013366:	683b      	ldr	r3, [r7, #0]
 8013368:	2b0c      	cmp	r3, #12
 801336a:	d841      	bhi.n	80133f0 <HAL_TIM_IC_Stop_IT+0x98>
 801336c:	a201      	add	r2, pc, #4	@ (adr r2, 8013374 <HAL_TIM_IC_Stop_IT+0x1c>)
 801336e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013372:	bf00      	nop
 8013374:	080133a9 	.word	0x080133a9
 8013378:	080133f1 	.word	0x080133f1
 801337c:	080133f1 	.word	0x080133f1
 8013380:	080133f1 	.word	0x080133f1
 8013384:	080133bb 	.word	0x080133bb
 8013388:	080133f1 	.word	0x080133f1
 801338c:	080133f1 	.word	0x080133f1
 8013390:	080133f1 	.word	0x080133f1
 8013394:	080133cd 	.word	0x080133cd
 8013398:	080133f1 	.word	0x080133f1
 801339c:	080133f1 	.word	0x080133f1
 80133a0:	080133f1 	.word	0x080133f1
 80133a4:	080133df 	.word	0x080133df
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	68da      	ldr	r2, [r3, #12]
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	f022 0202 	bic.w	r2, r2, #2
 80133b6:	60da      	str	r2, [r3, #12]
      break;
 80133b8:	e01d      	b.n	80133f6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	68da      	ldr	r2, [r3, #12]
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	f022 0204 	bic.w	r2, r2, #4
 80133c8:	60da      	str	r2, [r3, #12]
      break;
 80133ca:	e014      	b.n	80133f6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	68da      	ldr	r2, [r3, #12]
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	f022 0208 	bic.w	r2, r2, #8
 80133da:	60da      	str	r2, [r3, #12]
      break;
 80133dc:	e00b      	b.n	80133f6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	68da      	ldr	r2, [r3, #12]
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	f022 0210 	bic.w	r2, r2, #16
 80133ec:	60da      	str	r2, [r3, #12]
      break;
 80133ee:	e002      	b.n	80133f6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80133f0:	2301      	movs	r3, #1
 80133f2:	73fb      	strb	r3, [r7, #15]
      break;
 80133f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80133f6:	7bfb      	ldrb	r3, [r7, #15]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d166      	bne.n	80134ca <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	2200      	movs	r2, #0
 8013402:	6839      	ldr	r1, [r7, #0]
 8013404:	4618      	mov	r0, r3
 8013406:	f001 f969 	bl	80146dc <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	6a1a      	ldr	r2, [r3, #32]
 8013410:	f241 1311 	movw	r3, #4369	@ 0x1111
 8013414:	4013      	ands	r3, r2
 8013416:	2b00      	cmp	r3, #0
 8013418:	d10f      	bne.n	801343a <HAL_TIM_IC_Stop_IT+0xe2>
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	6a1a      	ldr	r2, [r3, #32]
 8013420:	f240 4344 	movw	r3, #1092	@ 0x444
 8013424:	4013      	ands	r3, r2
 8013426:	2b00      	cmp	r3, #0
 8013428:	d107      	bne.n	801343a <HAL_TIM_IC_Stop_IT+0xe2>
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	681a      	ldr	r2, [r3, #0]
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	f022 0201 	bic.w	r2, r2, #1
 8013438:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801343a:	683b      	ldr	r3, [r7, #0]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d104      	bne.n	801344a <HAL_TIM_IC_Stop_IT+0xf2>
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	2201      	movs	r2, #1
 8013444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013448:	e023      	b.n	8013492 <HAL_TIM_IC_Stop_IT+0x13a>
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	2b04      	cmp	r3, #4
 801344e:	d104      	bne.n	801345a <HAL_TIM_IC_Stop_IT+0x102>
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	2201      	movs	r2, #1
 8013454:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013458:	e01b      	b.n	8013492 <HAL_TIM_IC_Stop_IT+0x13a>
 801345a:	683b      	ldr	r3, [r7, #0]
 801345c:	2b08      	cmp	r3, #8
 801345e:	d104      	bne.n	801346a <HAL_TIM_IC_Stop_IT+0x112>
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	2201      	movs	r2, #1
 8013464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013468:	e013      	b.n	8013492 <HAL_TIM_IC_Stop_IT+0x13a>
 801346a:	683b      	ldr	r3, [r7, #0]
 801346c:	2b0c      	cmp	r3, #12
 801346e:	d104      	bne.n	801347a <HAL_TIM_IC_Stop_IT+0x122>
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	2201      	movs	r2, #1
 8013474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013478:	e00b      	b.n	8013492 <HAL_TIM_IC_Stop_IT+0x13a>
 801347a:	683b      	ldr	r3, [r7, #0]
 801347c:	2b10      	cmp	r3, #16
 801347e:	d104      	bne.n	801348a <HAL_TIM_IC_Stop_IT+0x132>
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	2201      	movs	r2, #1
 8013484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013488:	e003      	b.n	8013492 <HAL_TIM_IC_Stop_IT+0x13a>
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	2201      	movs	r2, #1
 801348e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8013492:	683b      	ldr	r3, [r7, #0]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d104      	bne.n	80134a2 <HAL_TIM_IC_Stop_IT+0x14a>
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	2201      	movs	r2, #1
 801349c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80134a0:	e013      	b.n	80134ca <HAL_TIM_IC_Stop_IT+0x172>
 80134a2:	683b      	ldr	r3, [r7, #0]
 80134a4:	2b04      	cmp	r3, #4
 80134a6:	d104      	bne.n	80134b2 <HAL_TIM_IC_Stop_IT+0x15a>
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	2201      	movs	r2, #1
 80134ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80134b0:	e00b      	b.n	80134ca <HAL_TIM_IC_Stop_IT+0x172>
 80134b2:	683b      	ldr	r3, [r7, #0]
 80134b4:	2b08      	cmp	r3, #8
 80134b6:	d104      	bne.n	80134c2 <HAL_TIM_IC_Stop_IT+0x16a>
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	2201      	movs	r2, #1
 80134bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80134c0:	e003      	b.n	80134ca <HAL_TIM_IC_Stop_IT+0x172>
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	2201      	movs	r2, #1
 80134c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 80134ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80134cc:	4618      	mov	r0, r3
 80134ce:	3710      	adds	r7, #16
 80134d0:	46bd      	mov	sp, r7
 80134d2:	bd80      	pop	{r7, pc}

080134d4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b086      	sub	sp, #24
 80134d8:	af00      	add	r7, sp, #0
 80134da:	60f8      	str	r0, [r7, #12]
 80134dc:	60b9      	str	r1, [r7, #8]
 80134de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80134e0:	2300      	movs	r3, #0
 80134e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80134ea:	2b01      	cmp	r3, #1
 80134ec:	d101      	bne.n	80134f2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80134ee:	2302      	movs	r3, #2
 80134f0:	e066      	b.n	80135c0 <HAL_TIM_OC_ConfigChannel+0xec>
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	2201      	movs	r2, #1
 80134f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	2b14      	cmp	r3, #20
 80134fe:	d857      	bhi.n	80135b0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8013500:	a201      	add	r2, pc, #4	@ (adr r2, 8013508 <HAL_TIM_OC_ConfigChannel+0x34>)
 8013502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013506:	bf00      	nop
 8013508:	0801355d 	.word	0x0801355d
 801350c:	080135b1 	.word	0x080135b1
 8013510:	080135b1 	.word	0x080135b1
 8013514:	080135b1 	.word	0x080135b1
 8013518:	0801356b 	.word	0x0801356b
 801351c:	080135b1 	.word	0x080135b1
 8013520:	080135b1 	.word	0x080135b1
 8013524:	080135b1 	.word	0x080135b1
 8013528:	08013579 	.word	0x08013579
 801352c:	080135b1 	.word	0x080135b1
 8013530:	080135b1 	.word	0x080135b1
 8013534:	080135b1 	.word	0x080135b1
 8013538:	08013587 	.word	0x08013587
 801353c:	080135b1 	.word	0x080135b1
 8013540:	080135b1 	.word	0x080135b1
 8013544:	080135b1 	.word	0x080135b1
 8013548:	08013595 	.word	0x08013595
 801354c:	080135b1 	.word	0x080135b1
 8013550:	080135b1 	.word	0x080135b1
 8013554:	080135b1 	.word	0x080135b1
 8013558:	080135a3 	.word	0x080135a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	68b9      	ldr	r1, [r7, #8]
 8013562:	4618      	mov	r0, r3
 8013564:	f000 fb92 	bl	8013c8c <TIM_OC1_SetConfig>
      break;
 8013568:	e025      	b.n	80135b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	68b9      	ldr	r1, [r7, #8]
 8013570:	4618      	mov	r0, r3
 8013572:	f000 fc1b 	bl	8013dac <TIM_OC2_SetConfig>
      break;
 8013576:	e01e      	b.n	80135b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	68b9      	ldr	r1, [r7, #8]
 801357e:	4618      	mov	r0, r3
 8013580:	f000 fc9e 	bl	8013ec0 <TIM_OC3_SetConfig>
      break;
 8013584:	e017      	b.n	80135b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	68b9      	ldr	r1, [r7, #8]
 801358c:	4618      	mov	r0, r3
 801358e:	f000 fd1f 	bl	8013fd0 <TIM_OC4_SetConfig>
      break;
 8013592:	e010      	b.n	80135b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	68b9      	ldr	r1, [r7, #8]
 801359a:	4618      	mov	r0, r3
 801359c:	f000 fd82 	bl	80140a4 <TIM_OC5_SetConfig>
      break;
 80135a0:	e009      	b.n	80135b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	68b9      	ldr	r1, [r7, #8]
 80135a8:	4618      	mov	r0, r3
 80135aa:	f000 fddf 	bl	801416c <TIM_OC6_SetConfig>
      break;
 80135ae:	e002      	b.n	80135b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80135b0:	2301      	movs	r3, #1
 80135b2:	75fb      	strb	r3, [r7, #23]
      break;
 80135b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	2200      	movs	r2, #0
 80135ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80135be:	7dfb      	ldrb	r3, [r7, #23]
}
 80135c0:	4618      	mov	r0, r3
 80135c2:	3718      	adds	r7, #24
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd80      	pop	{r7, pc}

080135c8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b086      	sub	sp, #24
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	60f8      	str	r0, [r7, #12]
 80135d0:	60b9      	str	r1, [r7, #8]
 80135d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80135d4:	2300      	movs	r3, #0
 80135d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80135de:	2b01      	cmp	r3, #1
 80135e0:	d101      	bne.n	80135e6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80135e2:	2302      	movs	r3, #2
 80135e4:	e088      	b.n	80136f8 <HAL_TIM_IC_ConfigChannel+0x130>
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	2201      	movs	r2, #1
 80135ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d11b      	bne.n	801362c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80135f8:	68bb      	ldr	r3, [r7, #8]
 80135fa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80135fc:	68bb      	ldr	r3, [r7, #8]
 80135fe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8013604:	f000 feac 	bl	8014360 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	699a      	ldr	r2, [r3, #24]
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	f022 020c 	bic.w	r2, r2, #12
 8013616:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	6999      	ldr	r1, [r3, #24]
 801361e:	68bb      	ldr	r3, [r7, #8]
 8013620:	689a      	ldr	r2, [r3, #8]
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	430a      	orrs	r2, r1
 8013628:	619a      	str	r2, [r3, #24]
 801362a:	e060      	b.n	80136ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	2b04      	cmp	r3, #4
 8013630:	d11c      	bne.n	801366c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8013636:	68bb      	ldr	r3, [r7, #8]
 8013638:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801363a:	68bb      	ldr	r3, [r7, #8]
 801363c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801363e:	68bb      	ldr	r3, [r7, #8]
 8013640:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8013642:	f000 ff2a 	bl	801449a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	699a      	ldr	r2, [r3, #24]
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8013654:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	6999      	ldr	r1, [r3, #24]
 801365c:	68bb      	ldr	r3, [r7, #8]
 801365e:	689b      	ldr	r3, [r3, #8]
 8013660:	021a      	lsls	r2, r3, #8
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	430a      	orrs	r2, r1
 8013668:	619a      	str	r2, [r3, #24]
 801366a:	e040      	b.n	80136ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	2b08      	cmp	r3, #8
 8013670:	d11b      	bne.n	80136aa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8013676:	68bb      	ldr	r3, [r7, #8]
 8013678:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801367a:	68bb      	ldr	r3, [r7, #8]
 801367c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801367e:	68bb      	ldr	r3, [r7, #8]
 8013680:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8013682:	f000 ff77 	bl	8014574 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	69da      	ldr	r2, [r3, #28]
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	f022 020c 	bic.w	r2, r2, #12
 8013694:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	69d9      	ldr	r1, [r3, #28]
 801369c:	68bb      	ldr	r3, [r7, #8]
 801369e:	689a      	ldr	r2, [r3, #8]
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	430a      	orrs	r2, r1
 80136a6:	61da      	str	r2, [r3, #28]
 80136a8:	e021      	b.n	80136ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	2b0c      	cmp	r3, #12
 80136ae:	d11c      	bne.n	80136ea <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80136b4:	68bb      	ldr	r3, [r7, #8]
 80136b6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80136b8:	68bb      	ldr	r3, [r7, #8]
 80136ba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80136bc:	68bb      	ldr	r3, [r7, #8]
 80136be:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80136c0:	f000 ff94 	bl	80145ec <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	69da      	ldr	r2, [r3, #28]
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80136d2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	69d9      	ldr	r1, [r3, #28]
 80136da:	68bb      	ldr	r3, [r7, #8]
 80136dc:	689b      	ldr	r3, [r3, #8]
 80136de:	021a      	lsls	r2, r3, #8
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	430a      	orrs	r2, r1
 80136e6:	61da      	str	r2, [r3, #28]
 80136e8:	e001      	b.n	80136ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80136ea:	2301      	movs	r3, #1
 80136ec:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	2200      	movs	r2, #0
 80136f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80136f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80136f8:	4618      	mov	r0, r3
 80136fa:	3718      	adds	r7, #24
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}

08013700 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b086      	sub	sp, #24
 8013704:	af00      	add	r7, sp, #0
 8013706:	60f8      	str	r0, [r7, #12]
 8013708:	60b9      	str	r1, [r7, #8]
 801370a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801370c:	2300      	movs	r3, #0
 801370e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013716:	2b01      	cmp	r3, #1
 8013718:	d101      	bne.n	801371e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801371a:	2302      	movs	r3, #2
 801371c:	e0ff      	b.n	801391e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	2201      	movs	r2, #1
 8013722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	2b14      	cmp	r3, #20
 801372a:	f200 80f0 	bhi.w	801390e <HAL_TIM_PWM_ConfigChannel+0x20e>
 801372e:	a201      	add	r2, pc, #4	@ (adr r2, 8013734 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8013730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013734:	08013789 	.word	0x08013789
 8013738:	0801390f 	.word	0x0801390f
 801373c:	0801390f 	.word	0x0801390f
 8013740:	0801390f 	.word	0x0801390f
 8013744:	080137c9 	.word	0x080137c9
 8013748:	0801390f 	.word	0x0801390f
 801374c:	0801390f 	.word	0x0801390f
 8013750:	0801390f 	.word	0x0801390f
 8013754:	0801380b 	.word	0x0801380b
 8013758:	0801390f 	.word	0x0801390f
 801375c:	0801390f 	.word	0x0801390f
 8013760:	0801390f 	.word	0x0801390f
 8013764:	0801384b 	.word	0x0801384b
 8013768:	0801390f 	.word	0x0801390f
 801376c:	0801390f 	.word	0x0801390f
 8013770:	0801390f 	.word	0x0801390f
 8013774:	0801388d 	.word	0x0801388d
 8013778:	0801390f 	.word	0x0801390f
 801377c:	0801390f 	.word	0x0801390f
 8013780:	0801390f 	.word	0x0801390f
 8013784:	080138cd 	.word	0x080138cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	68b9      	ldr	r1, [r7, #8]
 801378e:	4618      	mov	r0, r3
 8013790:	f000 fa7c 	bl	8013c8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	699a      	ldr	r2, [r3, #24]
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	f042 0208 	orr.w	r2, r2, #8
 80137a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	699a      	ldr	r2, [r3, #24]
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	f022 0204 	bic.w	r2, r2, #4
 80137b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	6999      	ldr	r1, [r3, #24]
 80137ba:	68bb      	ldr	r3, [r7, #8]
 80137bc:	691a      	ldr	r2, [r3, #16]
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	430a      	orrs	r2, r1
 80137c4:	619a      	str	r2, [r3, #24]
      break;
 80137c6:	e0a5      	b.n	8013914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	68b9      	ldr	r1, [r7, #8]
 80137ce:	4618      	mov	r0, r3
 80137d0:	f000 faec 	bl	8013dac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	699a      	ldr	r2, [r3, #24]
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80137e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	699a      	ldr	r2, [r3, #24]
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80137f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	6999      	ldr	r1, [r3, #24]
 80137fa:	68bb      	ldr	r3, [r7, #8]
 80137fc:	691b      	ldr	r3, [r3, #16]
 80137fe:	021a      	lsls	r2, r3, #8
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	430a      	orrs	r2, r1
 8013806:	619a      	str	r2, [r3, #24]
      break;
 8013808:	e084      	b.n	8013914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	68b9      	ldr	r1, [r7, #8]
 8013810:	4618      	mov	r0, r3
 8013812:	f000 fb55 	bl	8013ec0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	69da      	ldr	r2, [r3, #28]
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	f042 0208 	orr.w	r2, r2, #8
 8013824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	69da      	ldr	r2, [r3, #28]
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	f022 0204 	bic.w	r2, r2, #4
 8013834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	69d9      	ldr	r1, [r3, #28]
 801383c:	68bb      	ldr	r3, [r7, #8]
 801383e:	691a      	ldr	r2, [r3, #16]
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	430a      	orrs	r2, r1
 8013846:	61da      	str	r2, [r3, #28]
      break;
 8013848:	e064      	b.n	8013914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	68b9      	ldr	r1, [r7, #8]
 8013850:	4618      	mov	r0, r3
 8013852:	f000 fbbd 	bl	8013fd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	69da      	ldr	r2, [r3, #28]
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8013864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	69da      	ldr	r2, [r3, #28]
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8013874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	69d9      	ldr	r1, [r3, #28]
 801387c:	68bb      	ldr	r3, [r7, #8]
 801387e:	691b      	ldr	r3, [r3, #16]
 8013880:	021a      	lsls	r2, r3, #8
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	430a      	orrs	r2, r1
 8013888:	61da      	str	r2, [r3, #28]
      break;
 801388a:	e043      	b.n	8013914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	68b9      	ldr	r1, [r7, #8]
 8013892:	4618      	mov	r0, r3
 8013894:	f000 fc06 	bl	80140a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	f042 0208 	orr.w	r2, r2, #8
 80138a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	f022 0204 	bic.w	r2, r2, #4
 80138b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80138be:	68bb      	ldr	r3, [r7, #8]
 80138c0:	691a      	ldr	r2, [r3, #16]
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	430a      	orrs	r2, r1
 80138c8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80138ca:	e023      	b.n	8013914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	68b9      	ldr	r1, [r7, #8]
 80138d2:	4618      	mov	r0, r3
 80138d4:	f000 fc4a 	bl	801416c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80138e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80138f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80138fe:	68bb      	ldr	r3, [r7, #8]
 8013900:	691b      	ldr	r3, [r3, #16]
 8013902:	021a      	lsls	r2, r3, #8
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	430a      	orrs	r2, r1
 801390a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801390c:	e002      	b.n	8013914 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801390e:	2301      	movs	r3, #1
 8013910:	75fb      	strb	r3, [r7, #23]
      break;
 8013912:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	2200      	movs	r2, #0
 8013918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801391c:	7dfb      	ldrb	r3, [r7, #23]
}
 801391e:	4618      	mov	r0, r3
 8013920:	3718      	adds	r7, #24
 8013922:	46bd      	mov	sp, r7
 8013924:	bd80      	pop	{r7, pc}
 8013926:	bf00      	nop

08013928 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b084      	sub	sp, #16
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
 8013930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013932:	2300      	movs	r3, #0
 8013934:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801393c:	2b01      	cmp	r3, #1
 801393e:	d101      	bne.n	8013944 <HAL_TIM_ConfigClockSource+0x1c>
 8013940:	2302      	movs	r3, #2
 8013942:	e0b6      	b.n	8013ab2 <HAL_TIM_ConfigClockSource+0x18a>
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	2201      	movs	r2, #1
 8013948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	2202      	movs	r2, #2
 8013950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	689b      	ldr	r3, [r3, #8]
 801395a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801395c:	68bb      	ldr	r3, [r7, #8]
 801395e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013962:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8013966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013968:	68bb      	ldr	r3, [r7, #8]
 801396a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801396e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	68ba      	ldr	r2, [r7, #8]
 8013976:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013978:	683b      	ldr	r3, [r7, #0]
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013980:	d03e      	beq.n	8013a00 <HAL_TIM_ConfigClockSource+0xd8>
 8013982:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013986:	f200 8087 	bhi.w	8013a98 <HAL_TIM_ConfigClockSource+0x170>
 801398a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801398e:	f000 8086 	beq.w	8013a9e <HAL_TIM_ConfigClockSource+0x176>
 8013992:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013996:	d87f      	bhi.n	8013a98 <HAL_TIM_ConfigClockSource+0x170>
 8013998:	2b70      	cmp	r3, #112	@ 0x70
 801399a:	d01a      	beq.n	80139d2 <HAL_TIM_ConfigClockSource+0xaa>
 801399c:	2b70      	cmp	r3, #112	@ 0x70
 801399e:	d87b      	bhi.n	8013a98 <HAL_TIM_ConfigClockSource+0x170>
 80139a0:	2b60      	cmp	r3, #96	@ 0x60
 80139a2:	d050      	beq.n	8013a46 <HAL_TIM_ConfigClockSource+0x11e>
 80139a4:	2b60      	cmp	r3, #96	@ 0x60
 80139a6:	d877      	bhi.n	8013a98 <HAL_TIM_ConfigClockSource+0x170>
 80139a8:	2b50      	cmp	r3, #80	@ 0x50
 80139aa:	d03c      	beq.n	8013a26 <HAL_TIM_ConfigClockSource+0xfe>
 80139ac:	2b50      	cmp	r3, #80	@ 0x50
 80139ae:	d873      	bhi.n	8013a98 <HAL_TIM_ConfigClockSource+0x170>
 80139b0:	2b40      	cmp	r3, #64	@ 0x40
 80139b2:	d058      	beq.n	8013a66 <HAL_TIM_ConfigClockSource+0x13e>
 80139b4:	2b40      	cmp	r3, #64	@ 0x40
 80139b6:	d86f      	bhi.n	8013a98 <HAL_TIM_ConfigClockSource+0x170>
 80139b8:	2b30      	cmp	r3, #48	@ 0x30
 80139ba:	d064      	beq.n	8013a86 <HAL_TIM_ConfigClockSource+0x15e>
 80139bc:	2b30      	cmp	r3, #48	@ 0x30
 80139be:	d86b      	bhi.n	8013a98 <HAL_TIM_ConfigClockSource+0x170>
 80139c0:	2b20      	cmp	r3, #32
 80139c2:	d060      	beq.n	8013a86 <HAL_TIM_ConfigClockSource+0x15e>
 80139c4:	2b20      	cmp	r3, #32
 80139c6:	d867      	bhi.n	8013a98 <HAL_TIM_ConfigClockSource+0x170>
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d05c      	beq.n	8013a86 <HAL_TIM_ConfigClockSource+0x15e>
 80139cc:	2b10      	cmp	r3, #16
 80139ce:	d05a      	beq.n	8013a86 <HAL_TIM_ConfigClockSource+0x15e>
 80139d0:	e062      	b.n	8013a98 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80139d6:	683b      	ldr	r3, [r7, #0]
 80139d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80139da:	683b      	ldr	r3, [r7, #0]
 80139dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80139de:	683b      	ldr	r3, [r7, #0]
 80139e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80139e2:	f000 fe5b 	bl	801469c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	689b      	ldr	r3, [r3, #8]
 80139ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80139ee:	68bb      	ldr	r3, [r7, #8]
 80139f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80139f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	68ba      	ldr	r2, [r7, #8]
 80139fc:	609a      	str	r2, [r3, #8]
      break;
 80139fe:	e04f      	b.n	8013aa0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8013a04:	683b      	ldr	r3, [r7, #0]
 8013a06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8013a08:	683b      	ldr	r3, [r7, #0]
 8013a0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8013a0c:	683b      	ldr	r3, [r7, #0]
 8013a0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8013a10:	f000 fe44 	bl	801469c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	689a      	ldr	r2, [r3, #8]
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8013a22:	609a      	str	r2, [r3, #8]
      break;
 8013a24:	e03c      	b.n	8013aa0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013a2a:	683b      	ldr	r3, [r7, #0]
 8013a2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013a2e:	683b      	ldr	r3, [r7, #0]
 8013a30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013a32:	461a      	mov	r2, r3
 8013a34:	f000 fd02 	bl	801443c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	2150      	movs	r1, #80	@ 0x50
 8013a3e:	4618      	mov	r0, r3
 8013a40:	f000 fe11 	bl	8014666 <TIM_ITRx_SetConfig>
      break;
 8013a44:	e02c      	b.n	8013aa0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013a4a:	683b      	ldr	r3, [r7, #0]
 8013a4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013a4e:	683b      	ldr	r3, [r7, #0]
 8013a50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013a52:	461a      	mov	r2, r3
 8013a54:	f000 fd5e 	bl	8014514 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	2160      	movs	r1, #96	@ 0x60
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f000 fe01 	bl	8014666 <TIM_ITRx_SetConfig>
      break;
 8013a64:	e01c      	b.n	8013aa0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013a6a:	683b      	ldr	r3, [r7, #0]
 8013a6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013a6e:	683b      	ldr	r3, [r7, #0]
 8013a70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013a72:	461a      	mov	r2, r3
 8013a74:	f000 fce2 	bl	801443c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	2140      	movs	r1, #64	@ 0x40
 8013a7e:	4618      	mov	r0, r3
 8013a80:	f000 fdf1 	bl	8014666 <TIM_ITRx_SetConfig>
      break;
 8013a84:	e00c      	b.n	8013aa0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	681a      	ldr	r2, [r3, #0]
 8013a8a:	683b      	ldr	r3, [r7, #0]
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	4619      	mov	r1, r3
 8013a90:	4610      	mov	r0, r2
 8013a92:	f000 fde8 	bl	8014666 <TIM_ITRx_SetConfig>
      break;
 8013a96:	e003      	b.n	8013aa0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8013a98:	2301      	movs	r3, #1
 8013a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8013a9c:	e000      	b.n	8013aa0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8013a9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	2201      	movs	r2, #1
 8013aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	2200      	movs	r2, #0
 8013aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8013ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	3710      	adds	r7, #16
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	bd80      	pop	{r7, pc}

08013aba <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8013aba:	b580      	push	{r7, lr}
 8013abc:	b082      	sub	sp, #8
 8013abe:	af00      	add	r7, sp, #0
 8013ac0:	6078      	str	r0, [r7, #4]
 8013ac2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013aca:	2b01      	cmp	r3, #1
 8013acc:	d101      	bne.n	8013ad2 <HAL_TIM_SlaveConfigSynchro+0x18>
 8013ace:	2302      	movs	r3, #2
 8013ad0:	e031      	b.n	8013b36 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	2201      	movs	r2, #1
 8013ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	2202      	movs	r2, #2
 8013ade:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8013ae2:	6839      	ldr	r1, [r7, #0]
 8013ae4:	6878      	ldr	r0, [r7, #4]
 8013ae6:	f000 fba7 	bl	8014238 <TIM_SlaveTimer_SetConfig>
 8013aea:	4603      	mov	r3, r0
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d009      	beq.n	8013b04 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	2201      	movs	r2, #1
 8013af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	2200      	movs	r2, #0
 8013afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8013b00:	2301      	movs	r3, #1
 8013b02:	e018      	b.n	8013b36 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	68da      	ldr	r2, [r3, #12]
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8013b12:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	68da      	ldr	r2, [r3, #12]
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8013b22:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	2201      	movs	r2, #1
 8013b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	2200      	movs	r2, #0
 8013b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8013b34:	2300      	movs	r3, #0
}
 8013b36:	4618      	mov	r0, r3
 8013b38:	3708      	adds	r7, #8
 8013b3a:	46bd      	mov	sp, r7
 8013b3c:	bd80      	pop	{r7, pc}
	...

08013b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013b40:	b480      	push	{r7}
 8013b42:	b085      	sub	sp, #20
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
 8013b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	4a46      	ldr	r2, [pc, #280]	@ (8013c6c <TIM_Base_SetConfig+0x12c>)
 8013b54:	4293      	cmp	r3, r2
 8013b56:	d013      	beq.n	8013b80 <TIM_Base_SetConfig+0x40>
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013b5e:	d00f      	beq.n	8013b80 <TIM_Base_SetConfig+0x40>
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	4a43      	ldr	r2, [pc, #268]	@ (8013c70 <TIM_Base_SetConfig+0x130>)
 8013b64:	4293      	cmp	r3, r2
 8013b66:	d00b      	beq.n	8013b80 <TIM_Base_SetConfig+0x40>
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	4a42      	ldr	r2, [pc, #264]	@ (8013c74 <TIM_Base_SetConfig+0x134>)
 8013b6c:	4293      	cmp	r3, r2
 8013b6e:	d007      	beq.n	8013b80 <TIM_Base_SetConfig+0x40>
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	4a41      	ldr	r2, [pc, #260]	@ (8013c78 <TIM_Base_SetConfig+0x138>)
 8013b74:	4293      	cmp	r3, r2
 8013b76:	d003      	beq.n	8013b80 <TIM_Base_SetConfig+0x40>
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	4a40      	ldr	r2, [pc, #256]	@ (8013c7c <TIM_Base_SetConfig+0x13c>)
 8013b7c:	4293      	cmp	r3, r2
 8013b7e:	d108      	bne.n	8013b92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013b88:	683b      	ldr	r3, [r7, #0]
 8013b8a:	685b      	ldr	r3, [r3, #4]
 8013b8c:	68fa      	ldr	r2, [r7, #12]
 8013b8e:	4313      	orrs	r3, r2
 8013b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	4a35      	ldr	r2, [pc, #212]	@ (8013c6c <TIM_Base_SetConfig+0x12c>)
 8013b96:	4293      	cmp	r3, r2
 8013b98:	d01f      	beq.n	8013bda <TIM_Base_SetConfig+0x9a>
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013ba0:	d01b      	beq.n	8013bda <TIM_Base_SetConfig+0x9a>
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	4a32      	ldr	r2, [pc, #200]	@ (8013c70 <TIM_Base_SetConfig+0x130>)
 8013ba6:	4293      	cmp	r3, r2
 8013ba8:	d017      	beq.n	8013bda <TIM_Base_SetConfig+0x9a>
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	4a31      	ldr	r2, [pc, #196]	@ (8013c74 <TIM_Base_SetConfig+0x134>)
 8013bae:	4293      	cmp	r3, r2
 8013bb0:	d013      	beq.n	8013bda <TIM_Base_SetConfig+0x9a>
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	4a30      	ldr	r2, [pc, #192]	@ (8013c78 <TIM_Base_SetConfig+0x138>)
 8013bb6:	4293      	cmp	r3, r2
 8013bb8:	d00f      	beq.n	8013bda <TIM_Base_SetConfig+0x9a>
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	4a2f      	ldr	r2, [pc, #188]	@ (8013c7c <TIM_Base_SetConfig+0x13c>)
 8013bbe:	4293      	cmp	r3, r2
 8013bc0:	d00b      	beq.n	8013bda <TIM_Base_SetConfig+0x9a>
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	4a2e      	ldr	r2, [pc, #184]	@ (8013c80 <TIM_Base_SetConfig+0x140>)
 8013bc6:	4293      	cmp	r3, r2
 8013bc8:	d007      	beq.n	8013bda <TIM_Base_SetConfig+0x9a>
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	4a2d      	ldr	r2, [pc, #180]	@ (8013c84 <TIM_Base_SetConfig+0x144>)
 8013bce:	4293      	cmp	r3, r2
 8013bd0:	d003      	beq.n	8013bda <TIM_Base_SetConfig+0x9a>
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	4a2c      	ldr	r2, [pc, #176]	@ (8013c88 <TIM_Base_SetConfig+0x148>)
 8013bd6:	4293      	cmp	r3, r2
 8013bd8:	d108      	bne.n	8013bec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	68db      	ldr	r3, [r3, #12]
 8013be6:	68fa      	ldr	r2, [r7, #12]
 8013be8:	4313      	orrs	r3, r2
 8013bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8013bf2:	683b      	ldr	r3, [r7, #0]
 8013bf4:	695b      	ldr	r3, [r3, #20]
 8013bf6:	4313      	orrs	r3, r2
 8013bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	68fa      	ldr	r2, [r7, #12]
 8013bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013c00:	683b      	ldr	r3, [r7, #0]
 8013c02:	689a      	ldr	r2, [r3, #8]
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013c08:	683b      	ldr	r3, [r7, #0]
 8013c0a:	681a      	ldr	r2, [r3, #0]
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	4a16      	ldr	r2, [pc, #88]	@ (8013c6c <TIM_Base_SetConfig+0x12c>)
 8013c14:	4293      	cmp	r3, r2
 8013c16:	d00f      	beq.n	8013c38 <TIM_Base_SetConfig+0xf8>
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	4a18      	ldr	r2, [pc, #96]	@ (8013c7c <TIM_Base_SetConfig+0x13c>)
 8013c1c:	4293      	cmp	r3, r2
 8013c1e:	d00b      	beq.n	8013c38 <TIM_Base_SetConfig+0xf8>
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	4a17      	ldr	r2, [pc, #92]	@ (8013c80 <TIM_Base_SetConfig+0x140>)
 8013c24:	4293      	cmp	r3, r2
 8013c26:	d007      	beq.n	8013c38 <TIM_Base_SetConfig+0xf8>
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	4a16      	ldr	r2, [pc, #88]	@ (8013c84 <TIM_Base_SetConfig+0x144>)
 8013c2c:	4293      	cmp	r3, r2
 8013c2e:	d003      	beq.n	8013c38 <TIM_Base_SetConfig+0xf8>
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	4a15      	ldr	r2, [pc, #84]	@ (8013c88 <TIM_Base_SetConfig+0x148>)
 8013c34:	4293      	cmp	r3, r2
 8013c36:	d103      	bne.n	8013c40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013c38:	683b      	ldr	r3, [r7, #0]
 8013c3a:	691a      	ldr	r2, [r3, #16]
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	2201      	movs	r2, #1
 8013c44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	691b      	ldr	r3, [r3, #16]
 8013c4a:	f003 0301 	and.w	r3, r3, #1
 8013c4e:	2b01      	cmp	r3, #1
 8013c50:	d105      	bne.n	8013c5e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	691b      	ldr	r3, [r3, #16]
 8013c56:	f023 0201 	bic.w	r2, r3, #1
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	611a      	str	r2, [r3, #16]
  }
}
 8013c5e:	bf00      	nop
 8013c60:	3714      	adds	r7, #20
 8013c62:	46bd      	mov	sp, r7
 8013c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c68:	4770      	bx	lr
 8013c6a:	bf00      	nop
 8013c6c:	40012c00 	.word	0x40012c00
 8013c70:	40000400 	.word	0x40000400
 8013c74:	40000800 	.word	0x40000800
 8013c78:	40000c00 	.word	0x40000c00
 8013c7c:	40013400 	.word	0x40013400
 8013c80:	40014000 	.word	0x40014000
 8013c84:	40014400 	.word	0x40014400
 8013c88:	40014800 	.word	0x40014800

08013c8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013c8c:	b480      	push	{r7}
 8013c8e:	b087      	sub	sp, #28
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
 8013c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	6a1b      	ldr	r3, [r3, #32]
 8013c9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	6a1b      	ldr	r3, [r3, #32]
 8013ca0:	f023 0201 	bic.w	r2, r3, #1
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	685b      	ldr	r3, [r3, #4]
 8013cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	699b      	ldr	r3, [r3, #24]
 8013cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	f023 0303 	bic.w	r3, r3, #3
 8013cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013cc8:	683b      	ldr	r3, [r7, #0]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	68fa      	ldr	r2, [r7, #12]
 8013cce:	4313      	orrs	r3, r2
 8013cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013cd2:	697b      	ldr	r3, [r7, #20]
 8013cd4:	f023 0302 	bic.w	r3, r3, #2
 8013cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013cda:	683b      	ldr	r3, [r7, #0]
 8013cdc:	689b      	ldr	r3, [r3, #8]
 8013cde:	697a      	ldr	r2, [r7, #20]
 8013ce0:	4313      	orrs	r3, r2
 8013ce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	4a2c      	ldr	r2, [pc, #176]	@ (8013d98 <TIM_OC1_SetConfig+0x10c>)
 8013ce8:	4293      	cmp	r3, r2
 8013cea:	d00f      	beq.n	8013d0c <TIM_OC1_SetConfig+0x80>
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	4a2b      	ldr	r2, [pc, #172]	@ (8013d9c <TIM_OC1_SetConfig+0x110>)
 8013cf0:	4293      	cmp	r3, r2
 8013cf2:	d00b      	beq.n	8013d0c <TIM_OC1_SetConfig+0x80>
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	4a2a      	ldr	r2, [pc, #168]	@ (8013da0 <TIM_OC1_SetConfig+0x114>)
 8013cf8:	4293      	cmp	r3, r2
 8013cfa:	d007      	beq.n	8013d0c <TIM_OC1_SetConfig+0x80>
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	4a29      	ldr	r2, [pc, #164]	@ (8013da4 <TIM_OC1_SetConfig+0x118>)
 8013d00:	4293      	cmp	r3, r2
 8013d02:	d003      	beq.n	8013d0c <TIM_OC1_SetConfig+0x80>
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	4a28      	ldr	r2, [pc, #160]	@ (8013da8 <TIM_OC1_SetConfig+0x11c>)
 8013d08:	4293      	cmp	r3, r2
 8013d0a:	d10c      	bne.n	8013d26 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013d0c:	697b      	ldr	r3, [r7, #20]
 8013d0e:	f023 0308 	bic.w	r3, r3, #8
 8013d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013d14:	683b      	ldr	r3, [r7, #0]
 8013d16:	68db      	ldr	r3, [r3, #12]
 8013d18:	697a      	ldr	r2, [r7, #20]
 8013d1a:	4313      	orrs	r3, r2
 8013d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013d1e:	697b      	ldr	r3, [r7, #20]
 8013d20:	f023 0304 	bic.w	r3, r3, #4
 8013d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	4a1b      	ldr	r2, [pc, #108]	@ (8013d98 <TIM_OC1_SetConfig+0x10c>)
 8013d2a:	4293      	cmp	r3, r2
 8013d2c:	d00f      	beq.n	8013d4e <TIM_OC1_SetConfig+0xc2>
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	4a1a      	ldr	r2, [pc, #104]	@ (8013d9c <TIM_OC1_SetConfig+0x110>)
 8013d32:	4293      	cmp	r3, r2
 8013d34:	d00b      	beq.n	8013d4e <TIM_OC1_SetConfig+0xc2>
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	4a19      	ldr	r2, [pc, #100]	@ (8013da0 <TIM_OC1_SetConfig+0x114>)
 8013d3a:	4293      	cmp	r3, r2
 8013d3c:	d007      	beq.n	8013d4e <TIM_OC1_SetConfig+0xc2>
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	4a18      	ldr	r2, [pc, #96]	@ (8013da4 <TIM_OC1_SetConfig+0x118>)
 8013d42:	4293      	cmp	r3, r2
 8013d44:	d003      	beq.n	8013d4e <TIM_OC1_SetConfig+0xc2>
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	4a17      	ldr	r2, [pc, #92]	@ (8013da8 <TIM_OC1_SetConfig+0x11c>)
 8013d4a:	4293      	cmp	r3, r2
 8013d4c:	d111      	bne.n	8013d72 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013d4e:	693b      	ldr	r3, [r7, #16]
 8013d50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013d56:	693b      	ldr	r3, [r7, #16]
 8013d58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8013d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013d5e:	683b      	ldr	r3, [r7, #0]
 8013d60:	695b      	ldr	r3, [r3, #20]
 8013d62:	693a      	ldr	r2, [r7, #16]
 8013d64:	4313      	orrs	r3, r2
 8013d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013d68:	683b      	ldr	r3, [r7, #0]
 8013d6a:	699b      	ldr	r3, [r3, #24]
 8013d6c:	693a      	ldr	r2, [r7, #16]
 8013d6e:	4313      	orrs	r3, r2
 8013d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	693a      	ldr	r2, [r7, #16]
 8013d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	68fa      	ldr	r2, [r7, #12]
 8013d7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013d7e:	683b      	ldr	r3, [r7, #0]
 8013d80:	685a      	ldr	r2, [r3, #4]
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	697a      	ldr	r2, [r7, #20]
 8013d8a:	621a      	str	r2, [r3, #32]
}
 8013d8c:	bf00      	nop
 8013d8e:	371c      	adds	r7, #28
 8013d90:	46bd      	mov	sp, r7
 8013d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d96:	4770      	bx	lr
 8013d98:	40012c00 	.word	0x40012c00
 8013d9c:	40013400 	.word	0x40013400
 8013da0:	40014000 	.word	0x40014000
 8013da4:	40014400 	.word	0x40014400
 8013da8:	40014800 	.word	0x40014800

08013dac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013dac:	b480      	push	{r7}
 8013dae:	b087      	sub	sp, #28
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
 8013db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	6a1b      	ldr	r3, [r3, #32]
 8013dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	6a1b      	ldr	r3, [r3, #32]
 8013dc0:	f023 0210 	bic.w	r2, r3, #16
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	685b      	ldr	r3, [r3, #4]
 8013dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	699b      	ldr	r3, [r3, #24]
 8013dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8013dda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013de8:	683b      	ldr	r3, [r7, #0]
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	021b      	lsls	r3, r3, #8
 8013dee:	68fa      	ldr	r2, [r7, #12]
 8013df0:	4313      	orrs	r3, r2
 8013df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013df4:	697b      	ldr	r3, [r7, #20]
 8013df6:	f023 0320 	bic.w	r3, r3, #32
 8013dfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013dfc:	683b      	ldr	r3, [r7, #0]
 8013dfe:	689b      	ldr	r3, [r3, #8]
 8013e00:	011b      	lsls	r3, r3, #4
 8013e02:	697a      	ldr	r2, [r7, #20]
 8013e04:	4313      	orrs	r3, r2
 8013e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	4a28      	ldr	r2, [pc, #160]	@ (8013eac <TIM_OC2_SetConfig+0x100>)
 8013e0c:	4293      	cmp	r3, r2
 8013e0e:	d003      	beq.n	8013e18 <TIM_OC2_SetConfig+0x6c>
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	4a27      	ldr	r2, [pc, #156]	@ (8013eb0 <TIM_OC2_SetConfig+0x104>)
 8013e14:	4293      	cmp	r3, r2
 8013e16:	d10d      	bne.n	8013e34 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013e18:	697b      	ldr	r3, [r7, #20]
 8013e1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013e20:	683b      	ldr	r3, [r7, #0]
 8013e22:	68db      	ldr	r3, [r3, #12]
 8013e24:	011b      	lsls	r3, r3, #4
 8013e26:	697a      	ldr	r2, [r7, #20]
 8013e28:	4313      	orrs	r3, r2
 8013e2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013e2c:	697b      	ldr	r3, [r7, #20]
 8013e2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013e32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	4a1d      	ldr	r2, [pc, #116]	@ (8013eac <TIM_OC2_SetConfig+0x100>)
 8013e38:	4293      	cmp	r3, r2
 8013e3a:	d00f      	beq.n	8013e5c <TIM_OC2_SetConfig+0xb0>
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8013eb0 <TIM_OC2_SetConfig+0x104>)
 8013e40:	4293      	cmp	r3, r2
 8013e42:	d00b      	beq.n	8013e5c <TIM_OC2_SetConfig+0xb0>
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	4a1b      	ldr	r2, [pc, #108]	@ (8013eb4 <TIM_OC2_SetConfig+0x108>)
 8013e48:	4293      	cmp	r3, r2
 8013e4a:	d007      	beq.n	8013e5c <TIM_OC2_SetConfig+0xb0>
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	4a1a      	ldr	r2, [pc, #104]	@ (8013eb8 <TIM_OC2_SetConfig+0x10c>)
 8013e50:	4293      	cmp	r3, r2
 8013e52:	d003      	beq.n	8013e5c <TIM_OC2_SetConfig+0xb0>
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	4a19      	ldr	r2, [pc, #100]	@ (8013ebc <TIM_OC2_SetConfig+0x110>)
 8013e58:	4293      	cmp	r3, r2
 8013e5a:	d113      	bne.n	8013e84 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013e5c:	693b      	ldr	r3, [r7, #16]
 8013e5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8013e62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013e64:	693b      	ldr	r3, [r7, #16]
 8013e66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013e6c:	683b      	ldr	r3, [r7, #0]
 8013e6e:	695b      	ldr	r3, [r3, #20]
 8013e70:	009b      	lsls	r3, r3, #2
 8013e72:	693a      	ldr	r2, [r7, #16]
 8013e74:	4313      	orrs	r3, r2
 8013e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013e78:	683b      	ldr	r3, [r7, #0]
 8013e7a:	699b      	ldr	r3, [r3, #24]
 8013e7c:	009b      	lsls	r3, r3, #2
 8013e7e:	693a      	ldr	r2, [r7, #16]
 8013e80:	4313      	orrs	r3, r2
 8013e82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	693a      	ldr	r2, [r7, #16]
 8013e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	68fa      	ldr	r2, [r7, #12]
 8013e8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013e90:	683b      	ldr	r3, [r7, #0]
 8013e92:	685a      	ldr	r2, [r3, #4]
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	697a      	ldr	r2, [r7, #20]
 8013e9c:	621a      	str	r2, [r3, #32]
}
 8013e9e:	bf00      	nop
 8013ea0:	371c      	adds	r7, #28
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea8:	4770      	bx	lr
 8013eaa:	bf00      	nop
 8013eac:	40012c00 	.word	0x40012c00
 8013eb0:	40013400 	.word	0x40013400
 8013eb4:	40014000 	.word	0x40014000
 8013eb8:	40014400 	.word	0x40014400
 8013ebc:	40014800 	.word	0x40014800

08013ec0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013ec0:	b480      	push	{r7}
 8013ec2:	b087      	sub	sp, #28
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	6078      	str	r0, [r7, #4]
 8013ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	6a1b      	ldr	r3, [r3, #32]
 8013ece:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	6a1b      	ldr	r3, [r3, #32]
 8013ed4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	685b      	ldr	r3, [r3, #4]
 8013ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	69db      	ldr	r3, [r3, #28]
 8013ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	f023 0303 	bic.w	r3, r3, #3
 8013efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013efc:	683b      	ldr	r3, [r7, #0]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	68fa      	ldr	r2, [r7, #12]
 8013f02:	4313      	orrs	r3, r2
 8013f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013f06:	697b      	ldr	r3, [r7, #20]
 8013f08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8013f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013f0e:	683b      	ldr	r3, [r7, #0]
 8013f10:	689b      	ldr	r3, [r3, #8]
 8013f12:	021b      	lsls	r3, r3, #8
 8013f14:	697a      	ldr	r2, [r7, #20]
 8013f16:	4313      	orrs	r3, r2
 8013f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	4a27      	ldr	r2, [pc, #156]	@ (8013fbc <TIM_OC3_SetConfig+0xfc>)
 8013f1e:	4293      	cmp	r3, r2
 8013f20:	d003      	beq.n	8013f2a <TIM_OC3_SetConfig+0x6a>
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	4a26      	ldr	r2, [pc, #152]	@ (8013fc0 <TIM_OC3_SetConfig+0x100>)
 8013f26:	4293      	cmp	r3, r2
 8013f28:	d10d      	bne.n	8013f46 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013f2a:	697b      	ldr	r3, [r7, #20]
 8013f2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013f32:	683b      	ldr	r3, [r7, #0]
 8013f34:	68db      	ldr	r3, [r3, #12]
 8013f36:	021b      	lsls	r3, r3, #8
 8013f38:	697a      	ldr	r2, [r7, #20]
 8013f3a:	4313      	orrs	r3, r2
 8013f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013f3e:	697b      	ldr	r3, [r7, #20]
 8013f40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8013f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	4a1c      	ldr	r2, [pc, #112]	@ (8013fbc <TIM_OC3_SetConfig+0xfc>)
 8013f4a:	4293      	cmp	r3, r2
 8013f4c:	d00f      	beq.n	8013f6e <TIM_OC3_SetConfig+0xae>
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	4a1b      	ldr	r2, [pc, #108]	@ (8013fc0 <TIM_OC3_SetConfig+0x100>)
 8013f52:	4293      	cmp	r3, r2
 8013f54:	d00b      	beq.n	8013f6e <TIM_OC3_SetConfig+0xae>
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	4a1a      	ldr	r2, [pc, #104]	@ (8013fc4 <TIM_OC3_SetConfig+0x104>)
 8013f5a:	4293      	cmp	r3, r2
 8013f5c:	d007      	beq.n	8013f6e <TIM_OC3_SetConfig+0xae>
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	4a19      	ldr	r2, [pc, #100]	@ (8013fc8 <TIM_OC3_SetConfig+0x108>)
 8013f62:	4293      	cmp	r3, r2
 8013f64:	d003      	beq.n	8013f6e <TIM_OC3_SetConfig+0xae>
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	4a18      	ldr	r2, [pc, #96]	@ (8013fcc <TIM_OC3_SetConfig+0x10c>)
 8013f6a:	4293      	cmp	r3, r2
 8013f6c:	d113      	bne.n	8013f96 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013f6e:	693b      	ldr	r3, [r7, #16]
 8013f70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013f74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013f76:	693b      	ldr	r3, [r7, #16]
 8013f78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013f7e:	683b      	ldr	r3, [r7, #0]
 8013f80:	695b      	ldr	r3, [r3, #20]
 8013f82:	011b      	lsls	r3, r3, #4
 8013f84:	693a      	ldr	r2, [r7, #16]
 8013f86:	4313      	orrs	r3, r2
 8013f88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013f8a:	683b      	ldr	r3, [r7, #0]
 8013f8c:	699b      	ldr	r3, [r3, #24]
 8013f8e:	011b      	lsls	r3, r3, #4
 8013f90:	693a      	ldr	r2, [r7, #16]
 8013f92:	4313      	orrs	r3, r2
 8013f94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	693a      	ldr	r2, [r7, #16]
 8013f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	68fa      	ldr	r2, [r7, #12]
 8013fa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013fa2:	683b      	ldr	r3, [r7, #0]
 8013fa4:	685a      	ldr	r2, [r3, #4]
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	697a      	ldr	r2, [r7, #20]
 8013fae:	621a      	str	r2, [r3, #32]
}
 8013fb0:	bf00      	nop
 8013fb2:	371c      	adds	r7, #28
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fba:	4770      	bx	lr
 8013fbc:	40012c00 	.word	0x40012c00
 8013fc0:	40013400 	.word	0x40013400
 8013fc4:	40014000 	.word	0x40014000
 8013fc8:	40014400 	.word	0x40014400
 8013fcc:	40014800 	.word	0x40014800

08013fd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013fd0:	b480      	push	{r7}
 8013fd2:	b087      	sub	sp, #28
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
 8013fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	6a1b      	ldr	r3, [r3, #32]
 8013fde:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	6a1b      	ldr	r3, [r3, #32]
 8013fe4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	685b      	ldr	r3, [r3, #4]
 8013ff0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	69db      	ldr	r3, [r3, #28]
 8013ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8013ffe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8014002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801400a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801400c:	683b      	ldr	r3, [r7, #0]
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	021b      	lsls	r3, r3, #8
 8014012:	68fa      	ldr	r2, [r7, #12]
 8014014:	4313      	orrs	r3, r2
 8014016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014018:	693b      	ldr	r3, [r7, #16]
 801401a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801401e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014020:	683b      	ldr	r3, [r7, #0]
 8014022:	689b      	ldr	r3, [r3, #8]
 8014024:	031b      	lsls	r3, r3, #12
 8014026:	693a      	ldr	r2, [r7, #16]
 8014028:	4313      	orrs	r3, r2
 801402a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	4a18      	ldr	r2, [pc, #96]	@ (8014090 <TIM_OC4_SetConfig+0xc0>)
 8014030:	4293      	cmp	r3, r2
 8014032:	d00f      	beq.n	8014054 <TIM_OC4_SetConfig+0x84>
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	4a17      	ldr	r2, [pc, #92]	@ (8014094 <TIM_OC4_SetConfig+0xc4>)
 8014038:	4293      	cmp	r3, r2
 801403a:	d00b      	beq.n	8014054 <TIM_OC4_SetConfig+0x84>
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	4a16      	ldr	r2, [pc, #88]	@ (8014098 <TIM_OC4_SetConfig+0xc8>)
 8014040:	4293      	cmp	r3, r2
 8014042:	d007      	beq.n	8014054 <TIM_OC4_SetConfig+0x84>
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	4a15      	ldr	r2, [pc, #84]	@ (801409c <TIM_OC4_SetConfig+0xcc>)
 8014048:	4293      	cmp	r3, r2
 801404a:	d003      	beq.n	8014054 <TIM_OC4_SetConfig+0x84>
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	4a14      	ldr	r2, [pc, #80]	@ (80140a0 <TIM_OC4_SetConfig+0xd0>)
 8014050:	4293      	cmp	r3, r2
 8014052:	d109      	bne.n	8014068 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014054:	697b      	ldr	r3, [r7, #20]
 8014056:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801405a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801405c:	683b      	ldr	r3, [r7, #0]
 801405e:	695b      	ldr	r3, [r3, #20]
 8014060:	019b      	lsls	r3, r3, #6
 8014062:	697a      	ldr	r2, [r7, #20]
 8014064:	4313      	orrs	r3, r2
 8014066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	697a      	ldr	r2, [r7, #20]
 801406c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	68fa      	ldr	r2, [r7, #12]
 8014072:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014074:	683b      	ldr	r3, [r7, #0]
 8014076:	685a      	ldr	r2, [r3, #4]
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	693a      	ldr	r2, [r7, #16]
 8014080:	621a      	str	r2, [r3, #32]
}
 8014082:	bf00      	nop
 8014084:	371c      	adds	r7, #28
 8014086:	46bd      	mov	sp, r7
 8014088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408c:	4770      	bx	lr
 801408e:	bf00      	nop
 8014090:	40012c00 	.word	0x40012c00
 8014094:	40013400 	.word	0x40013400
 8014098:	40014000 	.word	0x40014000
 801409c:	40014400 	.word	0x40014400
 80140a0:	40014800 	.word	0x40014800

080140a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80140a4:	b480      	push	{r7}
 80140a6:	b087      	sub	sp, #28
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
 80140ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	6a1b      	ldr	r3, [r3, #32]
 80140b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	6a1b      	ldr	r3, [r3, #32]
 80140b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	685b      	ldr	r3, [r3, #4]
 80140c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80140ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80140d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80140d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80140d8:	683b      	ldr	r3, [r7, #0]
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	68fa      	ldr	r2, [r7, #12]
 80140de:	4313      	orrs	r3, r2
 80140e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80140e2:	693b      	ldr	r3, [r7, #16]
 80140e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80140e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80140ea:	683b      	ldr	r3, [r7, #0]
 80140ec:	689b      	ldr	r3, [r3, #8]
 80140ee:	041b      	lsls	r3, r3, #16
 80140f0:	693a      	ldr	r2, [r7, #16]
 80140f2:	4313      	orrs	r3, r2
 80140f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	4a17      	ldr	r2, [pc, #92]	@ (8014158 <TIM_OC5_SetConfig+0xb4>)
 80140fa:	4293      	cmp	r3, r2
 80140fc:	d00f      	beq.n	801411e <TIM_OC5_SetConfig+0x7a>
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	4a16      	ldr	r2, [pc, #88]	@ (801415c <TIM_OC5_SetConfig+0xb8>)
 8014102:	4293      	cmp	r3, r2
 8014104:	d00b      	beq.n	801411e <TIM_OC5_SetConfig+0x7a>
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	4a15      	ldr	r2, [pc, #84]	@ (8014160 <TIM_OC5_SetConfig+0xbc>)
 801410a:	4293      	cmp	r3, r2
 801410c:	d007      	beq.n	801411e <TIM_OC5_SetConfig+0x7a>
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	4a14      	ldr	r2, [pc, #80]	@ (8014164 <TIM_OC5_SetConfig+0xc0>)
 8014112:	4293      	cmp	r3, r2
 8014114:	d003      	beq.n	801411e <TIM_OC5_SetConfig+0x7a>
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	4a13      	ldr	r2, [pc, #76]	@ (8014168 <TIM_OC5_SetConfig+0xc4>)
 801411a:	4293      	cmp	r3, r2
 801411c:	d109      	bne.n	8014132 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801411e:	697b      	ldr	r3, [r7, #20]
 8014120:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8014124:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8014126:	683b      	ldr	r3, [r7, #0]
 8014128:	695b      	ldr	r3, [r3, #20]
 801412a:	021b      	lsls	r3, r3, #8
 801412c:	697a      	ldr	r2, [r7, #20]
 801412e:	4313      	orrs	r3, r2
 8014130:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	697a      	ldr	r2, [r7, #20]
 8014136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	68fa      	ldr	r2, [r7, #12]
 801413c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801413e:	683b      	ldr	r3, [r7, #0]
 8014140:	685a      	ldr	r2, [r3, #4]
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	693a      	ldr	r2, [r7, #16]
 801414a:	621a      	str	r2, [r3, #32]
}
 801414c:	bf00      	nop
 801414e:	371c      	adds	r7, #28
 8014150:	46bd      	mov	sp, r7
 8014152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014156:	4770      	bx	lr
 8014158:	40012c00 	.word	0x40012c00
 801415c:	40013400 	.word	0x40013400
 8014160:	40014000 	.word	0x40014000
 8014164:	40014400 	.word	0x40014400
 8014168:	40014800 	.word	0x40014800

0801416c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801416c:	b480      	push	{r7}
 801416e:	b087      	sub	sp, #28
 8014170:	af00      	add	r7, sp, #0
 8014172:	6078      	str	r0, [r7, #4]
 8014174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	6a1b      	ldr	r3, [r3, #32]
 801417a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	6a1b      	ldr	r3, [r3, #32]
 8014180:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	685b      	ldr	r3, [r3, #4]
 801418c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801419a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801419e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80141a0:	683b      	ldr	r3, [r7, #0]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	021b      	lsls	r3, r3, #8
 80141a6:	68fa      	ldr	r2, [r7, #12]
 80141a8:	4313      	orrs	r3, r2
 80141aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80141ac:	693b      	ldr	r3, [r7, #16]
 80141ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80141b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80141b4:	683b      	ldr	r3, [r7, #0]
 80141b6:	689b      	ldr	r3, [r3, #8]
 80141b8:	051b      	lsls	r3, r3, #20
 80141ba:	693a      	ldr	r2, [r7, #16]
 80141bc:	4313      	orrs	r3, r2
 80141be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	4a18      	ldr	r2, [pc, #96]	@ (8014224 <TIM_OC6_SetConfig+0xb8>)
 80141c4:	4293      	cmp	r3, r2
 80141c6:	d00f      	beq.n	80141e8 <TIM_OC6_SetConfig+0x7c>
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	4a17      	ldr	r2, [pc, #92]	@ (8014228 <TIM_OC6_SetConfig+0xbc>)
 80141cc:	4293      	cmp	r3, r2
 80141ce:	d00b      	beq.n	80141e8 <TIM_OC6_SetConfig+0x7c>
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	4a16      	ldr	r2, [pc, #88]	@ (801422c <TIM_OC6_SetConfig+0xc0>)
 80141d4:	4293      	cmp	r3, r2
 80141d6:	d007      	beq.n	80141e8 <TIM_OC6_SetConfig+0x7c>
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	4a15      	ldr	r2, [pc, #84]	@ (8014230 <TIM_OC6_SetConfig+0xc4>)
 80141dc:	4293      	cmp	r3, r2
 80141de:	d003      	beq.n	80141e8 <TIM_OC6_SetConfig+0x7c>
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	4a14      	ldr	r2, [pc, #80]	@ (8014234 <TIM_OC6_SetConfig+0xc8>)
 80141e4:	4293      	cmp	r3, r2
 80141e6:	d109      	bne.n	80141fc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80141e8:	697b      	ldr	r3, [r7, #20]
 80141ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80141ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80141f0:	683b      	ldr	r3, [r7, #0]
 80141f2:	695b      	ldr	r3, [r3, #20]
 80141f4:	029b      	lsls	r3, r3, #10
 80141f6:	697a      	ldr	r2, [r7, #20]
 80141f8:	4313      	orrs	r3, r2
 80141fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	697a      	ldr	r2, [r7, #20]
 8014200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	68fa      	ldr	r2, [r7, #12]
 8014206:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8014208:	683b      	ldr	r3, [r7, #0]
 801420a:	685a      	ldr	r2, [r3, #4]
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	693a      	ldr	r2, [r7, #16]
 8014214:	621a      	str	r2, [r3, #32]
}
 8014216:	bf00      	nop
 8014218:	371c      	adds	r7, #28
 801421a:	46bd      	mov	sp, r7
 801421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014220:	4770      	bx	lr
 8014222:	bf00      	nop
 8014224:	40012c00 	.word	0x40012c00
 8014228:	40013400 	.word	0x40013400
 801422c:	40014000 	.word	0x40014000
 8014230:	40014400 	.word	0x40014400
 8014234:	40014800 	.word	0x40014800

08014238 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b086      	sub	sp, #24
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
 8014240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014242:	2300      	movs	r3, #0
 8014244:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	689b      	ldr	r3, [r3, #8]
 801424c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801424e:	693b      	ldr	r3, [r7, #16]
 8014250:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014254:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8014256:	683b      	ldr	r3, [r7, #0]
 8014258:	685b      	ldr	r3, [r3, #4]
 801425a:	693a      	ldr	r2, [r7, #16]
 801425c:	4313      	orrs	r3, r2
 801425e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8014260:	693b      	ldr	r3, [r7, #16]
 8014262:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8014266:	f023 0307 	bic.w	r3, r3, #7
 801426a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 801426c:	683b      	ldr	r3, [r7, #0]
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	693a      	ldr	r2, [r7, #16]
 8014272:	4313      	orrs	r3, r2
 8014274:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	693a      	ldr	r2, [r7, #16]
 801427c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 801427e:	683b      	ldr	r3, [r7, #0]
 8014280:	685b      	ldr	r3, [r3, #4]
 8014282:	2b70      	cmp	r3, #112	@ 0x70
 8014284:	d01a      	beq.n	80142bc <TIM_SlaveTimer_SetConfig+0x84>
 8014286:	2b70      	cmp	r3, #112	@ 0x70
 8014288:	d860      	bhi.n	801434c <TIM_SlaveTimer_SetConfig+0x114>
 801428a:	2b60      	cmp	r3, #96	@ 0x60
 801428c:	d054      	beq.n	8014338 <TIM_SlaveTimer_SetConfig+0x100>
 801428e:	2b60      	cmp	r3, #96	@ 0x60
 8014290:	d85c      	bhi.n	801434c <TIM_SlaveTimer_SetConfig+0x114>
 8014292:	2b50      	cmp	r3, #80	@ 0x50
 8014294:	d046      	beq.n	8014324 <TIM_SlaveTimer_SetConfig+0xec>
 8014296:	2b50      	cmp	r3, #80	@ 0x50
 8014298:	d858      	bhi.n	801434c <TIM_SlaveTimer_SetConfig+0x114>
 801429a:	2b40      	cmp	r3, #64	@ 0x40
 801429c:	d019      	beq.n	80142d2 <TIM_SlaveTimer_SetConfig+0x9a>
 801429e:	2b40      	cmp	r3, #64	@ 0x40
 80142a0:	d854      	bhi.n	801434c <TIM_SlaveTimer_SetConfig+0x114>
 80142a2:	2b30      	cmp	r3, #48	@ 0x30
 80142a4:	d055      	beq.n	8014352 <TIM_SlaveTimer_SetConfig+0x11a>
 80142a6:	2b30      	cmp	r3, #48	@ 0x30
 80142a8:	d850      	bhi.n	801434c <TIM_SlaveTimer_SetConfig+0x114>
 80142aa:	2b20      	cmp	r3, #32
 80142ac:	d051      	beq.n	8014352 <TIM_SlaveTimer_SetConfig+0x11a>
 80142ae:	2b20      	cmp	r3, #32
 80142b0:	d84c      	bhi.n	801434c <TIM_SlaveTimer_SetConfig+0x114>
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d04d      	beq.n	8014352 <TIM_SlaveTimer_SetConfig+0x11a>
 80142b6:	2b10      	cmp	r3, #16
 80142b8:	d04b      	beq.n	8014352 <TIM_SlaveTimer_SetConfig+0x11a>
 80142ba:	e047      	b.n	801434c <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80142c0:	683b      	ldr	r3, [r7, #0]
 80142c2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80142c4:	683b      	ldr	r3, [r7, #0]
 80142c6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80142c8:	683b      	ldr	r3, [r7, #0]
 80142ca:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80142cc:	f000 f9e6 	bl	801469c <TIM_ETR_SetConfig>
      break;
 80142d0:	e040      	b.n	8014354 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80142d2:	683b      	ldr	r3, [r7, #0]
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	2b05      	cmp	r3, #5
 80142d8:	d101      	bne.n	80142de <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80142da:	2301      	movs	r3, #1
 80142dc:	e03b      	b.n	8014356 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	6a1b      	ldr	r3, [r3, #32]
 80142e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	6a1a      	ldr	r2, [r3, #32]
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	f022 0201 	bic.w	r2, r2, #1
 80142f4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	699b      	ldr	r3, [r3, #24]
 80142fc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80142fe:	68bb      	ldr	r3, [r7, #8]
 8014300:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8014304:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8014306:	683b      	ldr	r3, [r7, #0]
 8014308:	691b      	ldr	r3, [r3, #16]
 801430a:	011b      	lsls	r3, r3, #4
 801430c:	68ba      	ldr	r2, [r7, #8]
 801430e:	4313      	orrs	r3, r2
 8014310:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	68ba      	ldr	r2, [r7, #8]
 8014318:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	68fa      	ldr	r2, [r7, #12]
 8014320:	621a      	str	r2, [r3, #32]
      break;
 8014322:	e017      	b.n	8014354 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8014328:	683b      	ldr	r3, [r7, #0]
 801432a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 801432c:	683b      	ldr	r3, [r7, #0]
 801432e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014330:	461a      	mov	r2, r3
 8014332:	f000 f883 	bl	801443c <TIM_TI1_ConfigInputStage>
      break;
 8014336:	e00d      	b.n	8014354 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 801433c:	683b      	ldr	r3, [r7, #0]
 801433e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8014340:	683b      	ldr	r3, [r7, #0]
 8014342:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8014344:	461a      	mov	r2, r3
 8014346:	f000 f8e5 	bl	8014514 <TIM_TI2_ConfigInputStage>
      break;
 801434a:	e003      	b.n	8014354 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 801434c:	2301      	movs	r3, #1
 801434e:	75fb      	strb	r3, [r7, #23]
      break;
 8014350:	e000      	b.n	8014354 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8014352:	bf00      	nop
  }

  return status;
 8014354:	7dfb      	ldrb	r3, [r7, #23]
}
 8014356:	4618      	mov	r0, r3
 8014358:	3718      	adds	r7, #24
 801435a:	46bd      	mov	sp, r7
 801435c:	bd80      	pop	{r7, pc}
	...

08014360 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8014360:	b480      	push	{r7}
 8014362:	b087      	sub	sp, #28
 8014364:	af00      	add	r7, sp, #0
 8014366:	60f8      	str	r0, [r7, #12]
 8014368:	60b9      	str	r1, [r7, #8]
 801436a:	607a      	str	r2, [r7, #4]
 801436c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	6a1b      	ldr	r3, [r3, #32]
 8014372:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	6a1b      	ldr	r3, [r3, #32]
 8014378:	f023 0201 	bic.w	r2, r3, #1
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	699b      	ldr	r3, [r3, #24]
 8014384:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	4a26      	ldr	r2, [pc, #152]	@ (8014424 <TIM_TI1_SetConfig+0xc4>)
 801438a:	4293      	cmp	r3, r2
 801438c:	d017      	beq.n	80143be <TIM_TI1_SetConfig+0x5e>
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014394:	d013      	beq.n	80143be <TIM_TI1_SetConfig+0x5e>
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	4a23      	ldr	r2, [pc, #140]	@ (8014428 <TIM_TI1_SetConfig+0xc8>)
 801439a:	4293      	cmp	r3, r2
 801439c:	d00f      	beq.n	80143be <TIM_TI1_SetConfig+0x5e>
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	4a22      	ldr	r2, [pc, #136]	@ (801442c <TIM_TI1_SetConfig+0xcc>)
 80143a2:	4293      	cmp	r3, r2
 80143a4:	d00b      	beq.n	80143be <TIM_TI1_SetConfig+0x5e>
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	4a21      	ldr	r2, [pc, #132]	@ (8014430 <TIM_TI1_SetConfig+0xd0>)
 80143aa:	4293      	cmp	r3, r2
 80143ac:	d007      	beq.n	80143be <TIM_TI1_SetConfig+0x5e>
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	4a20      	ldr	r2, [pc, #128]	@ (8014434 <TIM_TI1_SetConfig+0xd4>)
 80143b2:	4293      	cmp	r3, r2
 80143b4:	d003      	beq.n	80143be <TIM_TI1_SetConfig+0x5e>
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	4a1f      	ldr	r2, [pc, #124]	@ (8014438 <TIM_TI1_SetConfig+0xd8>)
 80143ba:	4293      	cmp	r3, r2
 80143bc:	d101      	bne.n	80143c2 <TIM_TI1_SetConfig+0x62>
 80143be:	2301      	movs	r3, #1
 80143c0:	e000      	b.n	80143c4 <TIM_TI1_SetConfig+0x64>
 80143c2:	2300      	movs	r3, #0
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d008      	beq.n	80143da <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80143c8:	697b      	ldr	r3, [r7, #20]
 80143ca:	f023 0303 	bic.w	r3, r3, #3
 80143ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80143d0:	697a      	ldr	r2, [r7, #20]
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	4313      	orrs	r3, r2
 80143d6:	617b      	str	r3, [r7, #20]
 80143d8:	e003      	b.n	80143e2 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80143da:	697b      	ldr	r3, [r7, #20]
 80143dc:	f043 0301 	orr.w	r3, r3, #1
 80143e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80143e2:	697b      	ldr	r3, [r7, #20]
 80143e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80143e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80143ea:	683b      	ldr	r3, [r7, #0]
 80143ec:	011b      	lsls	r3, r3, #4
 80143ee:	b2db      	uxtb	r3, r3
 80143f0:	697a      	ldr	r2, [r7, #20]
 80143f2:	4313      	orrs	r3, r2
 80143f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80143f6:	693b      	ldr	r3, [r7, #16]
 80143f8:	f023 030a 	bic.w	r3, r3, #10
 80143fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80143fe:	68bb      	ldr	r3, [r7, #8]
 8014400:	f003 030a 	and.w	r3, r3, #10
 8014404:	693a      	ldr	r2, [r7, #16]
 8014406:	4313      	orrs	r3, r2
 8014408:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	697a      	ldr	r2, [r7, #20]
 801440e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	693a      	ldr	r2, [r7, #16]
 8014414:	621a      	str	r2, [r3, #32]
}
 8014416:	bf00      	nop
 8014418:	371c      	adds	r7, #28
 801441a:	46bd      	mov	sp, r7
 801441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014420:	4770      	bx	lr
 8014422:	bf00      	nop
 8014424:	40012c00 	.word	0x40012c00
 8014428:	40000400 	.word	0x40000400
 801442c:	40000800 	.word	0x40000800
 8014430:	40000c00 	.word	0x40000c00
 8014434:	40013400 	.word	0x40013400
 8014438:	40014000 	.word	0x40014000

0801443c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801443c:	b480      	push	{r7}
 801443e:	b087      	sub	sp, #28
 8014440:	af00      	add	r7, sp, #0
 8014442:	60f8      	str	r0, [r7, #12]
 8014444:	60b9      	str	r1, [r7, #8]
 8014446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	6a1b      	ldr	r3, [r3, #32]
 801444c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	6a1b      	ldr	r3, [r3, #32]
 8014452:	f023 0201 	bic.w	r2, r3, #1
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	699b      	ldr	r3, [r3, #24]
 801445e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014460:	693b      	ldr	r3, [r7, #16]
 8014462:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8014466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	011b      	lsls	r3, r3, #4
 801446c:	693a      	ldr	r2, [r7, #16]
 801446e:	4313      	orrs	r3, r2
 8014470:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014472:	697b      	ldr	r3, [r7, #20]
 8014474:	f023 030a 	bic.w	r3, r3, #10
 8014478:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801447a:	697a      	ldr	r2, [r7, #20]
 801447c:	68bb      	ldr	r3, [r7, #8]
 801447e:	4313      	orrs	r3, r2
 8014480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	693a      	ldr	r2, [r7, #16]
 8014486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	697a      	ldr	r2, [r7, #20]
 801448c:	621a      	str	r2, [r3, #32]
}
 801448e:	bf00      	nop
 8014490:	371c      	adds	r7, #28
 8014492:	46bd      	mov	sp, r7
 8014494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014498:	4770      	bx	lr

0801449a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801449a:	b480      	push	{r7}
 801449c:	b087      	sub	sp, #28
 801449e:	af00      	add	r7, sp, #0
 80144a0:	60f8      	str	r0, [r7, #12]
 80144a2:	60b9      	str	r1, [r7, #8]
 80144a4:	607a      	str	r2, [r7, #4]
 80144a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	6a1b      	ldr	r3, [r3, #32]
 80144ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	6a1b      	ldr	r3, [r3, #32]
 80144b2:	f023 0210 	bic.w	r2, r3, #16
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	699b      	ldr	r3, [r3, #24]
 80144be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80144c0:	693b      	ldr	r3, [r7, #16]
 80144c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80144c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	021b      	lsls	r3, r3, #8
 80144cc:	693a      	ldr	r2, [r7, #16]
 80144ce:	4313      	orrs	r3, r2
 80144d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80144d2:	693b      	ldr	r3, [r7, #16]
 80144d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80144d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80144da:	683b      	ldr	r3, [r7, #0]
 80144dc:	031b      	lsls	r3, r3, #12
 80144de:	b29b      	uxth	r3, r3
 80144e0:	693a      	ldr	r2, [r7, #16]
 80144e2:	4313      	orrs	r3, r2
 80144e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80144e6:	697b      	ldr	r3, [r7, #20]
 80144e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80144ec:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80144ee:	68bb      	ldr	r3, [r7, #8]
 80144f0:	011b      	lsls	r3, r3, #4
 80144f2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80144f6:	697a      	ldr	r2, [r7, #20]
 80144f8:	4313      	orrs	r3, r2
 80144fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	693a      	ldr	r2, [r7, #16]
 8014500:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	697a      	ldr	r2, [r7, #20]
 8014506:	621a      	str	r2, [r3, #32]
}
 8014508:	bf00      	nop
 801450a:	371c      	adds	r7, #28
 801450c:	46bd      	mov	sp, r7
 801450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014512:	4770      	bx	lr

08014514 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014514:	b480      	push	{r7}
 8014516:	b087      	sub	sp, #28
 8014518:	af00      	add	r7, sp, #0
 801451a:	60f8      	str	r0, [r7, #12]
 801451c:	60b9      	str	r1, [r7, #8]
 801451e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	6a1b      	ldr	r3, [r3, #32]
 8014524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	6a1b      	ldr	r3, [r3, #32]
 801452a:	f023 0210 	bic.w	r2, r3, #16
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	699b      	ldr	r3, [r3, #24]
 8014536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014538:	693b      	ldr	r3, [r7, #16]
 801453a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801453e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	031b      	lsls	r3, r3, #12
 8014544:	693a      	ldr	r2, [r7, #16]
 8014546:	4313      	orrs	r3, r2
 8014548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801454a:	697b      	ldr	r3, [r7, #20]
 801454c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8014550:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8014552:	68bb      	ldr	r3, [r7, #8]
 8014554:	011b      	lsls	r3, r3, #4
 8014556:	697a      	ldr	r2, [r7, #20]
 8014558:	4313      	orrs	r3, r2
 801455a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	693a      	ldr	r2, [r7, #16]
 8014560:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	697a      	ldr	r2, [r7, #20]
 8014566:	621a      	str	r2, [r3, #32]
}
 8014568:	bf00      	nop
 801456a:	371c      	adds	r7, #28
 801456c:	46bd      	mov	sp, r7
 801456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014572:	4770      	bx	lr

08014574 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8014574:	b480      	push	{r7}
 8014576:	b087      	sub	sp, #28
 8014578:	af00      	add	r7, sp, #0
 801457a:	60f8      	str	r0, [r7, #12]
 801457c:	60b9      	str	r1, [r7, #8]
 801457e:	607a      	str	r2, [r7, #4]
 8014580:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	6a1b      	ldr	r3, [r3, #32]
 8014586:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	6a1b      	ldr	r3, [r3, #32]
 801458c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	69db      	ldr	r3, [r3, #28]
 8014598:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 801459a:	693b      	ldr	r3, [r7, #16]
 801459c:	f023 0303 	bic.w	r3, r3, #3
 80145a0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80145a2:	693a      	ldr	r2, [r7, #16]
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	4313      	orrs	r3, r2
 80145a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80145aa:	693b      	ldr	r3, [r7, #16]
 80145ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80145b0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80145b2:	683b      	ldr	r3, [r7, #0]
 80145b4:	011b      	lsls	r3, r3, #4
 80145b6:	b2db      	uxtb	r3, r3
 80145b8:	693a      	ldr	r2, [r7, #16]
 80145ba:	4313      	orrs	r3, r2
 80145bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80145be:	697b      	ldr	r3, [r7, #20]
 80145c0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80145c4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80145c6:	68bb      	ldr	r3, [r7, #8]
 80145c8:	021b      	lsls	r3, r3, #8
 80145ca:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80145ce:	697a      	ldr	r2, [r7, #20]
 80145d0:	4313      	orrs	r3, r2
 80145d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	693a      	ldr	r2, [r7, #16]
 80145d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	697a      	ldr	r2, [r7, #20]
 80145de:	621a      	str	r2, [r3, #32]
}
 80145e0:	bf00      	nop
 80145e2:	371c      	adds	r7, #28
 80145e4:	46bd      	mov	sp, r7
 80145e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ea:	4770      	bx	lr

080145ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80145ec:	b480      	push	{r7}
 80145ee:	b087      	sub	sp, #28
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	60f8      	str	r0, [r7, #12]
 80145f4:	60b9      	str	r1, [r7, #8]
 80145f6:	607a      	str	r2, [r7, #4]
 80145f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	6a1b      	ldr	r3, [r3, #32]
 80145fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	6a1b      	ldr	r3, [r3, #32]
 8014604:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	69db      	ldr	r3, [r3, #28]
 8014610:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8014612:	693b      	ldr	r3, [r7, #16]
 8014614:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014618:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	021b      	lsls	r3, r3, #8
 801461e:	693a      	ldr	r2, [r7, #16]
 8014620:	4313      	orrs	r3, r2
 8014622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8014624:	693b      	ldr	r3, [r7, #16]
 8014626:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801462a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 801462c:	683b      	ldr	r3, [r7, #0]
 801462e:	031b      	lsls	r3, r3, #12
 8014630:	b29b      	uxth	r3, r3
 8014632:	693a      	ldr	r2, [r7, #16]
 8014634:	4313      	orrs	r3, r2
 8014636:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8014638:	697b      	ldr	r3, [r7, #20]
 801463a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 801463e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8014640:	68bb      	ldr	r3, [r7, #8]
 8014642:	031b      	lsls	r3, r3, #12
 8014644:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8014648:	697a      	ldr	r2, [r7, #20]
 801464a:	4313      	orrs	r3, r2
 801464c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	693a      	ldr	r2, [r7, #16]
 8014652:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	697a      	ldr	r2, [r7, #20]
 8014658:	621a      	str	r2, [r3, #32]
}
 801465a:	bf00      	nop
 801465c:	371c      	adds	r7, #28
 801465e:	46bd      	mov	sp, r7
 8014660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014664:	4770      	bx	lr

08014666 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8014666:	b480      	push	{r7}
 8014668:	b085      	sub	sp, #20
 801466a:	af00      	add	r7, sp, #0
 801466c:	6078      	str	r0, [r7, #4]
 801466e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	689b      	ldr	r3, [r3, #8]
 8014674:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801467c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801467e:	683a      	ldr	r2, [r7, #0]
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	4313      	orrs	r3, r2
 8014684:	f043 0307 	orr.w	r3, r3, #7
 8014688:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	68fa      	ldr	r2, [r7, #12]
 801468e:	609a      	str	r2, [r3, #8]
}
 8014690:	bf00      	nop
 8014692:	3714      	adds	r7, #20
 8014694:	46bd      	mov	sp, r7
 8014696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801469a:	4770      	bx	lr

0801469c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801469c:	b480      	push	{r7}
 801469e:	b087      	sub	sp, #28
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	60f8      	str	r0, [r7, #12]
 80146a4:	60b9      	str	r1, [r7, #8]
 80146a6:	607a      	str	r2, [r7, #4]
 80146a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	689b      	ldr	r3, [r3, #8]
 80146ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80146b0:	697b      	ldr	r3, [r7, #20]
 80146b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80146b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80146b8:	683b      	ldr	r3, [r7, #0]
 80146ba:	021a      	lsls	r2, r3, #8
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	431a      	orrs	r2, r3
 80146c0:	68bb      	ldr	r3, [r7, #8]
 80146c2:	4313      	orrs	r3, r2
 80146c4:	697a      	ldr	r2, [r7, #20]
 80146c6:	4313      	orrs	r3, r2
 80146c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	697a      	ldr	r2, [r7, #20]
 80146ce:	609a      	str	r2, [r3, #8]
}
 80146d0:	bf00      	nop
 80146d2:	371c      	adds	r7, #28
 80146d4:	46bd      	mov	sp, r7
 80146d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146da:	4770      	bx	lr

080146dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80146dc:	b480      	push	{r7}
 80146de:	b087      	sub	sp, #28
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	60f8      	str	r0, [r7, #12]
 80146e4:	60b9      	str	r1, [r7, #8]
 80146e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80146e8:	68bb      	ldr	r3, [r7, #8]
 80146ea:	f003 031f 	and.w	r3, r3, #31
 80146ee:	2201      	movs	r2, #1
 80146f0:	fa02 f303 	lsl.w	r3, r2, r3
 80146f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	6a1a      	ldr	r2, [r3, #32]
 80146fa:	697b      	ldr	r3, [r7, #20]
 80146fc:	43db      	mvns	r3, r3
 80146fe:	401a      	ands	r2, r3
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	6a1a      	ldr	r2, [r3, #32]
 8014708:	68bb      	ldr	r3, [r7, #8]
 801470a:	f003 031f 	and.w	r3, r3, #31
 801470e:	6879      	ldr	r1, [r7, #4]
 8014710:	fa01 f303 	lsl.w	r3, r1, r3
 8014714:	431a      	orrs	r2, r3
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	621a      	str	r2, [r3, #32]
}
 801471a:	bf00      	nop
 801471c:	371c      	adds	r7, #28
 801471e:	46bd      	mov	sp, r7
 8014720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014724:	4770      	bx	lr
	...

08014728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8014728:	b480      	push	{r7}
 801472a:	b085      	sub	sp, #20
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
 8014730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014738:	2b01      	cmp	r3, #1
 801473a:	d101      	bne.n	8014740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801473c:	2302      	movs	r3, #2
 801473e:	e068      	b.n	8014812 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	2201      	movs	r2, #1
 8014744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	2202      	movs	r2, #2
 801474c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	685b      	ldr	r3, [r3, #4]
 8014756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	689b      	ldr	r3, [r3, #8]
 801475e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	4a2e      	ldr	r2, [pc, #184]	@ (8014820 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8014766:	4293      	cmp	r3, r2
 8014768:	d004      	beq.n	8014774 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	4a2d      	ldr	r2, [pc, #180]	@ (8014824 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8014770:	4293      	cmp	r3, r2
 8014772:	d108      	bne.n	8014786 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801477a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801477c:	683b      	ldr	r3, [r7, #0]
 801477e:	685b      	ldr	r3, [r3, #4]
 8014780:	68fa      	ldr	r2, [r7, #12]
 8014782:	4313      	orrs	r3, r2
 8014784:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801478c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801478e:	683b      	ldr	r3, [r7, #0]
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	68fa      	ldr	r2, [r7, #12]
 8014794:	4313      	orrs	r3, r2
 8014796:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	68fa      	ldr	r2, [r7, #12]
 801479e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	4a1e      	ldr	r2, [pc, #120]	@ (8014820 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80147a6:	4293      	cmp	r3, r2
 80147a8:	d01d      	beq.n	80147e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80147b2:	d018      	beq.n	80147e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	4a1b      	ldr	r2, [pc, #108]	@ (8014828 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80147ba:	4293      	cmp	r3, r2
 80147bc:	d013      	beq.n	80147e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	4a1a      	ldr	r2, [pc, #104]	@ (801482c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80147c4:	4293      	cmp	r3, r2
 80147c6:	d00e      	beq.n	80147e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	4a18      	ldr	r2, [pc, #96]	@ (8014830 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80147ce:	4293      	cmp	r3, r2
 80147d0:	d009      	beq.n	80147e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	4a13      	ldr	r2, [pc, #76]	@ (8014824 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80147d8:	4293      	cmp	r3, r2
 80147da:	d004      	beq.n	80147e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	4a14      	ldr	r2, [pc, #80]	@ (8014834 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80147e2:	4293      	cmp	r3, r2
 80147e4:	d10c      	bne.n	8014800 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80147e6:	68bb      	ldr	r3, [r7, #8]
 80147e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80147ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80147ee:	683b      	ldr	r3, [r7, #0]
 80147f0:	689b      	ldr	r3, [r3, #8]
 80147f2:	68ba      	ldr	r2, [r7, #8]
 80147f4:	4313      	orrs	r3, r2
 80147f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	68ba      	ldr	r2, [r7, #8]
 80147fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	2201      	movs	r2, #1
 8014804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	2200      	movs	r2, #0
 801480c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8014810:	2300      	movs	r3, #0
}
 8014812:	4618      	mov	r0, r3
 8014814:	3714      	adds	r7, #20
 8014816:	46bd      	mov	sp, r7
 8014818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801481c:	4770      	bx	lr
 801481e:	bf00      	nop
 8014820:	40012c00 	.word	0x40012c00
 8014824:	40013400 	.word	0x40013400
 8014828:	40000400 	.word	0x40000400
 801482c:	40000800 	.word	0x40000800
 8014830:	40000c00 	.word	0x40000c00
 8014834:	40014000 	.word	0x40014000

08014838 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8014838:	b480      	push	{r7}
 801483a:	b085      	sub	sp, #20
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]
 8014840:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8014842:	2300      	movs	r3, #0
 8014844:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801484c:	2b01      	cmp	r3, #1
 801484e:	d101      	bne.n	8014854 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8014850:	2302      	movs	r3, #2
 8014852:	e065      	b.n	8014920 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	2201      	movs	r2, #1
 8014858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8014862:	683b      	ldr	r3, [r7, #0]
 8014864:	68db      	ldr	r3, [r3, #12]
 8014866:	4313      	orrs	r3, r2
 8014868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8014870:	683b      	ldr	r3, [r7, #0]
 8014872:	689b      	ldr	r3, [r3, #8]
 8014874:	4313      	orrs	r3, r2
 8014876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801487e:	683b      	ldr	r3, [r7, #0]
 8014880:	685b      	ldr	r3, [r3, #4]
 8014882:	4313      	orrs	r3, r2
 8014884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801488c:	683b      	ldr	r3, [r7, #0]
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	4313      	orrs	r3, r2
 8014892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801489a:	683b      	ldr	r3, [r7, #0]
 801489c:	691b      	ldr	r3, [r3, #16]
 801489e:	4313      	orrs	r3, r2
 80148a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80148a8:	683b      	ldr	r3, [r7, #0]
 80148aa:	695b      	ldr	r3, [r3, #20]
 80148ac:	4313      	orrs	r3, r2
 80148ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80148b6:	683b      	ldr	r3, [r7, #0]
 80148b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80148ba:	4313      	orrs	r3, r2
 80148bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80148c4:	683b      	ldr	r3, [r7, #0]
 80148c6:	699b      	ldr	r3, [r3, #24]
 80148c8:	041b      	lsls	r3, r3, #16
 80148ca:	4313      	orrs	r3, r2
 80148cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	4a16      	ldr	r2, [pc, #88]	@ (801492c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80148d4:	4293      	cmp	r3, r2
 80148d6:	d004      	beq.n	80148e2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	4a14      	ldr	r2, [pc, #80]	@ (8014930 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80148de:	4293      	cmp	r3, r2
 80148e0:	d115      	bne.n	801490e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80148e8:	683b      	ldr	r3, [r7, #0]
 80148ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148ec:	051b      	lsls	r3, r3, #20
 80148ee:	4313      	orrs	r3, r2
 80148f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80148f8:	683b      	ldr	r3, [r7, #0]
 80148fa:	69db      	ldr	r3, [r3, #28]
 80148fc:	4313      	orrs	r3, r2
 80148fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8014906:	683b      	ldr	r3, [r7, #0]
 8014908:	6a1b      	ldr	r3, [r3, #32]
 801490a:	4313      	orrs	r3, r2
 801490c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	68fa      	ldr	r2, [r7, #12]
 8014914:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	2200      	movs	r2, #0
 801491a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801491e:	2300      	movs	r3, #0
}
 8014920:	4618      	mov	r0, r3
 8014922:	3714      	adds	r7, #20
 8014924:	46bd      	mov	sp, r7
 8014926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801492a:	4770      	bx	lr
 801492c:	40012c00 	.word	0x40012c00
 8014930:	40013400 	.word	0x40013400

08014934 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014934:	b580      	push	{r7, lr}
 8014936:	b082      	sub	sp, #8
 8014938:	af00      	add	r7, sp, #0
 801493a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	2b00      	cmp	r3, #0
 8014940:	d101      	bne.n	8014946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014942:	2301      	movs	r3, #1
 8014944:	e040      	b.n	80149c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801494a:	2b00      	cmp	r3, #0
 801494c:	d106      	bne.n	801495c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	2200      	movs	r2, #0
 8014952:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014956:	6878      	ldr	r0, [r7, #4]
 8014958:	f7f3 f8c8 	bl	8007aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	2224      	movs	r2, #36	@ 0x24
 8014960:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	681a      	ldr	r2, [r3, #0]
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	f022 0201 	bic.w	r2, r2, #1
 8014970:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014976:	2b00      	cmp	r3, #0
 8014978:	d002      	beq.n	8014980 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 801497a:	6878      	ldr	r0, [r7, #4]
 801497c:	f000 fdb4 	bl	80154e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014980:	6878      	ldr	r0, [r7, #4]
 8014982:	f000 faf9 	bl	8014f78 <UART_SetConfig>
 8014986:	4603      	mov	r3, r0
 8014988:	2b01      	cmp	r3, #1
 801498a:	d101      	bne.n	8014990 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 801498c:	2301      	movs	r3, #1
 801498e:	e01b      	b.n	80149c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	685a      	ldr	r2, [r3, #4]
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801499e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	689a      	ldr	r2, [r3, #8]
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80149ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	681a      	ldr	r2, [r3, #0]
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	f042 0201 	orr.w	r2, r2, #1
 80149be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80149c0:	6878      	ldr	r0, [r7, #4]
 80149c2:	f000 fe33 	bl	801562c <UART_CheckIdleState>
 80149c6:	4603      	mov	r3, r0
}
 80149c8:	4618      	mov	r0, r3
 80149ca:	3708      	adds	r7, #8
 80149cc:	46bd      	mov	sp, r7
 80149ce:	bd80      	pop	{r7, pc}

080149d0 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80149d0:	b580      	push	{r7, lr}
 80149d2:	b082      	sub	sp, #8
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d101      	bne.n	80149e2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80149de:	2301      	movs	r3, #1
 80149e0:	e048      	b.n	8014a74 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d106      	bne.n	80149f8 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	2200      	movs	r2, #0
 80149ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80149f2:	6878      	ldr	r0, [r7, #4]
 80149f4:	f7f3 f87a 	bl	8007aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	2224      	movs	r2, #36	@ 0x24
 80149fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	681a      	ldr	r2, [r3, #0]
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	f022 0201 	bic.w	r2, r2, #1
 8014a0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d002      	beq.n	8014a1c <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8014a16:	6878      	ldr	r0, [r7, #4]
 8014a18:	f000 fd66 	bl	80154e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014a1c:	6878      	ldr	r0, [r7, #4]
 8014a1e:	f000 faab 	bl	8014f78 <UART_SetConfig>
 8014a22:	4603      	mov	r3, r0
 8014a24:	2b01      	cmp	r3, #1
 8014a26:	d101      	bne.n	8014a2c <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 8014a28:	2301      	movs	r3, #1
 8014a2a:	e023      	b.n	8014a74 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	685a      	ldr	r2, [r3, #4]
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8014a3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	689a      	ldr	r2, [r3, #8]
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8014a4a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	689a      	ldr	r2, [r3, #8]
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	f042 0208 	orr.w	r2, r2, #8
 8014a5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	681a      	ldr	r2, [r3, #0]
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	f042 0201 	orr.w	r2, r2, #1
 8014a6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8014a6c:	6878      	ldr	r0, [r7, #4]
 8014a6e:	f000 fddd 	bl	801562c <UART_CheckIdleState>
 8014a72:	4603      	mov	r3, r0
}
 8014a74:	4618      	mov	r0, r3
 8014a76:	3708      	adds	r7, #8
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	bd80      	pop	{r7, pc}

08014a7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b08a      	sub	sp, #40	@ 0x28
 8014a80:	af02      	add	r7, sp, #8
 8014a82:	60f8      	str	r0, [r7, #12]
 8014a84:	60b9      	str	r1, [r7, #8]
 8014a86:	603b      	str	r3, [r7, #0]
 8014a88:	4613      	mov	r3, r2
 8014a8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014a90:	2b20      	cmp	r3, #32
 8014a92:	d177      	bne.n	8014b84 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8014a94:	68bb      	ldr	r3, [r7, #8]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d002      	beq.n	8014aa0 <HAL_UART_Transmit+0x24>
 8014a9a:	88fb      	ldrh	r3, [r7, #6]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d101      	bne.n	8014aa4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8014aa0:	2301      	movs	r3, #1
 8014aa2:	e070      	b.n	8014b86 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	2221      	movs	r2, #33	@ 0x21
 8014ab0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014ab2:	f7f6 fadb 	bl	800b06c <HAL_GetTick>
 8014ab6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	88fa      	ldrh	r2, [r7, #6]
 8014abc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	88fa      	ldrh	r2, [r7, #6]
 8014ac4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	689b      	ldr	r3, [r3, #8]
 8014acc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014ad0:	d108      	bne.n	8014ae4 <HAL_UART_Transmit+0x68>
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	691b      	ldr	r3, [r3, #16]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d104      	bne.n	8014ae4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8014ada:	2300      	movs	r3, #0
 8014adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8014ade:	68bb      	ldr	r3, [r7, #8]
 8014ae0:	61bb      	str	r3, [r7, #24]
 8014ae2:	e003      	b.n	8014aec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8014ae4:	68bb      	ldr	r3, [r7, #8]
 8014ae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014ae8:	2300      	movs	r3, #0
 8014aea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8014aec:	e02f      	b.n	8014b4e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014aee:	683b      	ldr	r3, [r7, #0]
 8014af0:	9300      	str	r3, [sp, #0]
 8014af2:	697b      	ldr	r3, [r7, #20]
 8014af4:	2200      	movs	r2, #0
 8014af6:	2180      	movs	r1, #128	@ 0x80
 8014af8:	68f8      	ldr	r0, [r7, #12]
 8014afa:	f000 fe3f 	bl	801577c <UART_WaitOnFlagUntilTimeout>
 8014afe:	4603      	mov	r3, r0
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d004      	beq.n	8014b0e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	2220      	movs	r2, #32
 8014b08:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8014b0a:	2303      	movs	r3, #3
 8014b0c:	e03b      	b.n	8014b86 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8014b0e:	69fb      	ldr	r3, [r7, #28]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d10b      	bne.n	8014b2c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8014b14:	69bb      	ldr	r3, [r7, #24]
 8014b16:	881a      	ldrh	r2, [r3, #0]
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014b20:	b292      	uxth	r2, r2
 8014b22:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8014b24:	69bb      	ldr	r3, [r7, #24]
 8014b26:	3302      	adds	r3, #2
 8014b28:	61bb      	str	r3, [r7, #24]
 8014b2a:	e007      	b.n	8014b3c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8014b2c:	69fb      	ldr	r3, [r7, #28]
 8014b2e:	781a      	ldrb	r2, [r3, #0]
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8014b36:	69fb      	ldr	r3, [r7, #28]
 8014b38:	3301      	adds	r3, #1
 8014b3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8014b42:	b29b      	uxth	r3, r3
 8014b44:	3b01      	subs	r3, #1
 8014b46:	b29a      	uxth	r2, r3
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8014b54:	b29b      	uxth	r3, r3
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d1c9      	bne.n	8014aee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014b5a:	683b      	ldr	r3, [r7, #0]
 8014b5c:	9300      	str	r3, [sp, #0]
 8014b5e:	697b      	ldr	r3, [r7, #20]
 8014b60:	2200      	movs	r2, #0
 8014b62:	2140      	movs	r1, #64	@ 0x40
 8014b64:	68f8      	ldr	r0, [r7, #12]
 8014b66:	f000 fe09 	bl	801577c <UART_WaitOnFlagUntilTimeout>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d004      	beq.n	8014b7a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	2220      	movs	r2, #32
 8014b74:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8014b76:	2303      	movs	r3, #3
 8014b78:	e005      	b.n	8014b86 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	2220      	movs	r2, #32
 8014b7e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8014b80:	2300      	movs	r3, #0
 8014b82:	e000      	b.n	8014b86 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8014b84:	2302      	movs	r3, #2
  }
}
 8014b86:	4618      	mov	r0, r3
 8014b88:	3720      	adds	r7, #32
 8014b8a:	46bd      	mov	sp, r7
 8014b8c:	bd80      	pop	{r7, pc}

08014b8e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014b8e:	b580      	push	{r7, lr}
 8014b90:	b08a      	sub	sp, #40	@ 0x28
 8014b92:	af02      	add	r7, sp, #8
 8014b94:	60f8      	str	r0, [r7, #12]
 8014b96:	60b9      	str	r1, [r7, #8]
 8014b98:	603b      	str	r3, [r7, #0]
 8014b9a:	4613      	mov	r3, r2
 8014b9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014ba4:	2b20      	cmp	r3, #32
 8014ba6:	f040 80b6 	bne.w	8014d16 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8014baa:	68bb      	ldr	r3, [r7, #8]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d002      	beq.n	8014bb6 <HAL_UART_Receive+0x28>
 8014bb0:	88fb      	ldrh	r3, [r7, #6]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d101      	bne.n	8014bba <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8014bb6:	2301      	movs	r3, #1
 8014bb8:	e0ae      	b.n	8014d18 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	2200      	movs	r2, #0
 8014bbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	2222      	movs	r2, #34	@ 0x22
 8014bc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	2200      	movs	r2, #0
 8014bce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014bd0:	f7f6 fa4c 	bl	800b06c <HAL_GetTick>
 8014bd4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	88fa      	ldrh	r2, [r7, #6]
 8014bda:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	88fa      	ldrh	r2, [r7, #6]
 8014be2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	689b      	ldr	r3, [r3, #8]
 8014bea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014bee:	d10e      	bne.n	8014c0e <HAL_UART_Receive+0x80>
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	691b      	ldr	r3, [r3, #16]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d105      	bne.n	8014c04 <HAL_UART_Receive+0x76>
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8014bfe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014c02:	e02d      	b.n	8014c60 <HAL_UART_Receive+0xd2>
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	22ff      	movs	r2, #255	@ 0xff
 8014c08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014c0c:	e028      	b.n	8014c60 <HAL_UART_Receive+0xd2>
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	689b      	ldr	r3, [r3, #8]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d10d      	bne.n	8014c32 <HAL_UART_Receive+0xa4>
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	691b      	ldr	r3, [r3, #16]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d104      	bne.n	8014c28 <HAL_UART_Receive+0x9a>
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	22ff      	movs	r2, #255	@ 0xff
 8014c22:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014c26:	e01b      	b.n	8014c60 <HAL_UART_Receive+0xd2>
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	227f      	movs	r2, #127	@ 0x7f
 8014c2c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014c30:	e016      	b.n	8014c60 <HAL_UART_Receive+0xd2>
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	689b      	ldr	r3, [r3, #8]
 8014c36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014c3a:	d10d      	bne.n	8014c58 <HAL_UART_Receive+0xca>
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	691b      	ldr	r3, [r3, #16]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d104      	bne.n	8014c4e <HAL_UART_Receive+0xc0>
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	227f      	movs	r2, #127	@ 0x7f
 8014c48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014c4c:	e008      	b.n	8014c60 <HAL_UART_Receive+0xd2>
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	223f      	movs	r2, #63	@ 0x3f
 8014c52:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014c56:	e003      	b.n	8014c60 <HAL_UART_Receive+0xd2>
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	2200      	movs	r2, #0
 8014c5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8014c66:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	689b      	ldr	r3, [r3, #8]
 8014c6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014c70:	d108      	bne.n	8014c84 <HAL_UART_Receive+0xf6>
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	691b      	ldr	r3, [r3, #16]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d104      	bne.n	8014c84 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8014c7e:	68bb      	ldr	r3, [r7, #8]
 8014c80:	61bb      	str	r3, [r7, #24]
 8014c82:	e003      	b.n	8014c8c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8014c84:	68bb      	ldr	r3, [r7, #8]
 8014c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014c88:	2300      	movs	r3, #0
 8014c8a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8014c8c:	e037      	b.n	8014cfe <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8014c8e:	683b      	ldr	r3, [r7, #0]
 8014c90:	9300      	str	r3, [sp, #0]
 8014c92:	697b      	ldr	r3, [r7, #20]
 8014c94:	2200      	movs	r2, #0
 8014c96:	2120      	movs	r1, #32
 8014c98:	68f8      	ldr	r0, [r7, #12]
 8014c9a:	f000 fd6f 	bl	801577c <UART_WaitOnFlagUntilTimeout>
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d005      	beq.n	8014cb0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	2220      	movs	r2, #32
 8014ca8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8014cac:	2303      	movs	r3, #3
 8014cae:	e033      	b.n	8014d18 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8014cb0:	69fb      	ldr	r3, [r7, #28]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d10c      	bne.n	8014cd0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014cbc:	b29a      	uxth	r2, r3
 8014cbe:	8a7b      	ldrh	r3, [r7, #18]
 8014cc0:	4013      	ands	r3, r2
 8014cc2:	b29a      	uxth	r2, r3
 8014cc4:	69bb      	ldr	r3, [r7, #24]
 8014cc6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8014cc8:	69bb      	ldr	r3, [r7, #24]
 8014cca:	3302      	adds	r3, #2
 8014ccc:	61bb      	str	r3, [r7, #24]
 8014cce:	e00d      	b.n	8014cec <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014cd6:	b29b      	uxth	r3, r3
 8014cd8:	b2da      	uxtb	r2, r3
 8014cda:	8a7b      	ldrh	r3, [r7, #18]
 8014cdc:	b2db      	uxtb	r3, r3
 8014cde:	4013      	ands	r3, r2
 8014ce0:	b2da      	uxtb	r2, r3
 8014ce2:	69fb      	ldr	r3, [r7, #28]
 8014ce4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8014ce6:	69fb      	ldr	r3, [r7, #28]
 8014ce8:	3301      	adds	r3, #1
 8014cea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8014cf2:	b29b      	uxth	r3, r3
 8014cf4:	3b01      	subs	r3, #1
 8014cf6:	b29a      	uxth	r2, r3
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8014d04:	b29b      	uxth	r3, r3
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d1c1      	bne.n	8014c8e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	2220      	movs	r2, #32
 8014d0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8014d12:	2300      	movs	r3, #0
 8014d14:	e000      	b.n	8014d18 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8014d16:	2302      	movs	r3, #2
  }
}
 8014d18:	4618      	mov	r0, r3
 8014d1a:	3720      	adds	r7, #32
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	bd80      	pop	{r7, pc}

08014d20 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8014d20:	b580      	push	{r7, lr}
 8014d22:	b08a      	sub	sp, #40	@ 0x28
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	60f8      	str	r0, [r7, #12]
 8014d28:	60b9      	str	r1, [r7, #8]
 8014d2a:	4613      	mov	r3, r2
 8014d2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014d32:	2b20      	cmp	r3, #32
 8014d34:	d165      	bne.n	8014e02 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8014d36:	68bb      	ldr	r3, [r7, #8]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d002      	beq.n	8014d42 <HAL_UART_Transmit_DMA+0x22>
 8014d3c:	88fb      	ldrh	r3, [r7, #6]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d101      	bne.n	8014d46 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8014d42:	2301      	movs	r3, #1
 8014d44:	e05e      	b.n	8014e04 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	68ba      	ldr	r2, [r7, #8]
 8014d4a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	88fa      	ldrh	r2, [r7, #6]
 8014d50:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	88fa      	ldrh	r2, [r7, #6]
 8014d58:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	2200      	movs	r2, #0
 8014d60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	2221      	movs	r2, #33	@ 0x21
 8014d68:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d027      	beq.n	8014dc2 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014d76:	4a25      	ldr	r2, [pc, #148]	@ (8014e0c <HAL_UART_Transmit_DMA+0xec>)
 8014d78:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014d7e:	4a24      	ldr	r2, [pc, #144]	@ (8014e10 <HAL_UART_Transmit_DMA+0xf0>)
 8014d80:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014d86:	4a23      	ldr	r2, [pc, #140]	@ (8014e14 <HAL_UART_Transmit_DMA+0xf4>)
 8014d88:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014d8e:	2200      	movs	r2, #0
 8014d90:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014d9a:	4619      	mov	r1, r3
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	3328      	adds	r3, #40	@ 0x28
 8014da2:	461a      	mov	r2, r3
 8014da4:	88fb      	ldrh	r3, [r7, #6]
 8014da6:	f7f8 f947 	bl	800d038 <HAL_DMA_Start_IT>
 8014daa:	4603      	mov	r3, r0
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d008      	beq.n	8014dc2 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	2210      	movs	r2, #16
 8014db4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	2220      	movs	r2, #32
 8014dbc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8014dbe:	2301      	movs	r3, #1
 8014dc0:	e020      	b.n	8014e04 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	2240      	movs	r2, #64	@ 0x40
 8014dc8:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	3308      	adds	r3, #8
 8014dd0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014dd2:	697b      	ldr	r3, [r7, #20]
 8014dd4:	e853 3f00 	ldrex	r3, [r3]
 8014dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8014dda:	693b      	ldr	r3, [r7, #16]
 8014ddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	3308      	adds	r3, #8
 8014de8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014dea:	623a      	str	r2, [r7, #32]
 8014dec:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014dee:	69f9      	ldr	r1, [r7, #28]
 8014df0:	6a3a      	ldr	r2, [r7, #32]
 8014df2:	e841 2300 	strex	r3, r2, [r1]
 8014df6:	61bb      	str	r3, [r7, #24]
   return(result);
 8014df8:	69bb      	ldr	r3, [r7, #24]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d1e5      	bne.n	8014dca <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8014dfe:	2300      	movs	r3, #0
 8014e00:	e000      	b.n	8014e04 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8014e02:	2302      	movs	r3, #2
  }
}
 8014e04:	4618      	mov	r0, r3
 8014e06:	3728      	adds	r7, #40	@ 0x28
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	bd80      	pop	{r7, pc}
 8014e0c:	08015aad 	.word	0x08015aad
 8014e10:	08015b47 	.word	0x08015b47
 8014e14:	08015ccd 	.word	0x08015ccd

08014e18 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8014e18:	b580      	push	{r7, lr}
 8014e1a:	b090      	sub	sp, #64	@ 0x40
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014e2c:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	689b      	ldr	r3, [r3, #8]
 8014e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014e38:	2b80      	cmp	r3, #128	@ 0x80
 8014e3a:	d139      	bne.n	8014eb0 <HAL_UART_DMAStop+0x98>
 8014e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014e3e:	2b21      	cmp	r3, #33	@ 0x21
 8014e40:	d136      	bne.n	8014eb0 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	3308      	adds	r3, #8
 8014e48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e4a:	6a3b      	ldr	r3, [r7, #32]
 8014e4c:	e853 3f00 	ldrex	r3, [r3]
 8014e50:	61fb      	str	r3, [r7, #28]
   return(result);
 8014e52:	69fb      	ldr	r3, [r7, #28]
 8014e54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	3308      	adds	r3, #8
 8014e60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014e62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8014e64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014e68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014e6a:	e841 2300 	strex	r3, r2, [r1]
 8014e6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d1e5      	bne.n	8014e42 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d015      	beq.n	8014eaa <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014e82:	4618      	mov	r0, r3
 8014e84:	f7f8 f938 	bl	800d0f8 <HAL_DMA_Abort>
 8014e88:	4603      	mov	r3, r0
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d00d      	beq.n	8014eaa <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014e92:	4618      	mov	r0, r3
 8014e94:	f7f8 fa1d 	bl	800d2d2 <HAL_DMA_GetError>
 8014e98:	4603      	mov	r3, r0
 8014e9a:	2b20      	cmp	r3, #32
 8014e9c:	d105      	bne.n	8014eaa <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	2210      	movs	r2, #16
 8014ea2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8014ea6:	2303      	movs	r3, #3
 8014ea8:	e044      	b.n	8014f34 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8014eaa:	6878      	ldr	r0, [r7, #4]
 8014eac:	f000 fd74 	bl	8015998 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	689b      	ldr	r3, [r3, #8]
 8014eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014eba:	2b40      	cmp	r3, #64	@ 0x40
 8014ebc:	d139      	bne.n	8014f32 <HAL_UART_DMAStop+0x11a>
 8014ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ec0:	2b22      	cmp	r3, #34	@ 0x22
 8014ec2:	d136      	bne.n	8014f32 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	3308      	adds	r3, #8
 8014eca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	e853 3f00 	ldrex	r3, [r3]
 8014ed2:	60bb      	str	r3, [r7, #8]
   return(result);
 8014ed4:	68bb      	ldr	r3, [r7, #8]
 8014ed6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014eda:	633b      	str	r3, [r7, #48]	@ 0x30
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	3308      	adds	r3, #8
 8014ee2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014ee4:	61ba      	str	r2, [r7, #24]
 8014ee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ee8:	6979      	ldr	r1, [r7, #20]
 8014eea:	69ba      	ldr	r2, [r7, #24]
 8014eec:	e841 2300 	strex	r3, r2, [r1]
 8014ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8014ef2:	693b      	ldr	r3, [r7, #16]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d1e5      	bne.n	8014ec4 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d015      	beq.n	8014f2c <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014f04:	4618      	mov	r0, r3
 8014f06:	f7f8 f8f7 	bl	800d0f8 <HAL_DMA_Abort>
 8014f0a:	4603      	mov	r3, r0
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d00d      	beq.n	8014f2c <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014f14:	4618      	mov	r0, r3
 8014f16:	f7f8 f9dc 	bl	800d2d2 <HAL_DMA_GetError>
 8014f1a:	4603      	mov	r3, r0
 8014f1c:	2b20      	cmp	r3, #32
 8014f1e:	d105      	bne.n	8014f2c <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	2210      	movs	r2, #16
 8014f24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8014f28:	2303      	movs	r3, #3
 8014f2a:	e003      	b.n	8014f34 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8014f2c:	6878      	ldr	r0, [r7, #4]
 8014f2e:	f000 fd59 	bl	80159e4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8014f32:	2300      	movs	r3, #0
}
 8014f34:	4618      	mov	r0, r3
 8014f36:	3740      	adds	r7, #64	@ 0x40
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	bd80      	pop	{r7, pc}

08014f3c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8014f3c:	b480      	push	{r7}
 8014f3e:	b083      	sub	sp, #12
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8014f44:	bf00      	nop
 8014f46:	370c      	adds	r7, #12
 8014f48:	46bd      	mov	sp, r7
 8014f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f4e:	4770      	bx	lr

08014f50 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8014f50:	b480      	push	{r7}
 8014f52:	b083      	sub	sp, #12
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8014f58:	bf00      	nop
 8014f5a:	370c      	adds	r7, #12
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f62:	4770      	bx	lr

08014f64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014f64:	b480      	push	{r7}
 8014f66:	b083      	sub	sp, #12
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8014f6c:	bf00      	nop
 8014f6e:	370c      	adds	r7, #12
 8014f70:	46bd      	mov	sp, r7
 8014f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f76:	4770      	bx	lr

08014f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014f7c:	b08a      	sub	sp, #40	@ 0x28
 8014f7e:	af00      	add	r7, sp, #0
 8014f80:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014f82:	2300      	movs	r3, #0
 8014f84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	689a      	ldr	r2, [r3, #8]
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	691b      	ldr	r3, [r3, #16]
 8014f90:	431a      	orrs	r2, r3
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	695b      	ldr	r3, [r3, #20]
 8014f96:	431a      	orrs	r2, r3
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	69db      	ldr	r3, [r3, #28]
 8014f9c:	4313      	orrs	r3, r2
 8014f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	681a      	ldr	r2, [r3, #0]
 8014fa6:	4ba4      	ldr	r3, [pc, #656]	@ (8015238 <UART_SetConfig+0x2c0>)
 8014fa8:	4013      	ands	r3, r2
 8014faa:	68fa      	ldr	r2, [r7, #12]
 8014fac:	6812      	ldr	r2, [r2, #0]
 8014fae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014fb0:	430b      	orrs	r3, r1
 8014fb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	685b      	ldr	r3, [r3, #4]
 8014fba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	68da      	ldr	r2, [r3, #12]
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	430a      	orrs	r2, r1
 8014fc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	699b      	ldr	r3, [r3, #24]
 8014fce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	4a99      	ldr	r2, [pc, #612]	@ (801523c <UART_SetConfig+0x2c4>)
 8014fd6:	4293      	cmp	r3, r2
 8014fd8:	d004      	beq.n	8014fe4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	6a1b      	ldr	r3, [r3, #32]
 8014fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014fe0:	4313      	orrs	r3, r2
 8014fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	689b      	ldr	r3, [r3, #8]
 8014fea:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014ff4:	430a      	orrs	r2, r1
 8014ff6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	4a90      	ldr	r2, [pc, #576]	@ (8015240 <UART_SetConfig+0x2c8>)
 8014ffe:	4293      	cmp	r3, r2
 8015000:	d126      	bne.n	8015050 <UART_SetConfig+0xd8>
 8015002:	4b90      	ldr	r3, [pc, #576]	@ (8015244 <UART_SetConfig+0x2cc>)
 8015004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015008:	f003 0303 	and.w	r3, r3, #3
 801500c:	2b03      	cmp	r3, #3
 801500e:	d81b      	bhi.n	8015048 <UART_SetConfig+0xd0>
 8015010:	a201      	add	r2, pc, #4	@ (adr r2, 8015018 <UART_SetConfig+0xa0>)
 8015012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015016:	bf00      	nop
 8015018:	08015029 	.word	0x08015029
 801501c:	08015039 	.word	0x08015039
 8015020:	08015031 	.word	0x08015031
 8015024:	08015041 	.word	0x08015041
 8015028:	2301      	movs	r3, #1
 801502a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801502e:	e116      	b.n	801525e <UART_SetConfig+0x2e6>
 8015030:	2302      	movs	r3, #2
 8015032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015036:	e112      	b.n	801525e <UART_SetConfig+0x2e6>
 8015038:	2304      	movs	r3, #4
 801503a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801503e:	e10e      	b.n	801525e <UART_SetConfig+0x2e6>
 8015040:	2308      	movs	r3, #8
 8015042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015046:	e10a      	b.n	801525e <UART_SetConfig+0x2e6>
 8015048:	2310      	movs	r3, #16
 801504a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801504e:	e106      	b.n	801525e <UART_SetConfig+0x2e6>
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	4a7c      	ldr	r2, [pc, #496]	@ (8015248 <UART_SetConfig+0x2d0>)
 8015056:	4293      	cmp	r3, r2
 8015058:	d138      	bne.n	80150cc <UART_SetConfig+0x154>
 801505a:	4b7a      	ldr	r3, [pc, #488]	@ (8015244 <UART_SetConfig+0x2cc>)
 801505c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015060:	f003 030c 	and.w	r3, r3, #12
 8015064:	2b0c      	cmp	r3, #12
 8015066:	d82d      	bhi.n	80150c4 <UART_SetConfig+0x14c>
 8015068:	a201      	add	r2, pc, #4	@ (adr r2, 8015070 <UART_SetConfig+0xf8>)
 801506a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801506e:	bf00      	nop
 8015070:	080150a5 	.word	0x080150a5
 8015074:	080150c5 	.word	0x080150c5
 8015078:	080150c5 	.word	0x080150c5
 801507c:	080150c5 	.word	0x080150c5
 8015080:	080150b5 	.word	0x080150b5
 8015084:	080150c5 	.word	0x080150c5
 8015088:	080150c5 	.word	0x080150c5
 801508c:	080150c5 	.word	0x080150c5
 8015090:	080150ad 	.word	0x080150ad
 8015094:	080150c5 	.word	0x080150c5
 8015098:	080150c5 	.word	0x080150c5
 801509c:	080150c5 	.word	0x080150c5
 80150a0:	080150bd 	.word	0x080150bd
 80150a4:	2300      	movs	r3, #0
 80150a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80150aa:	e0d8      	b.n	801525e <UART_SetConfig+0x2e6>
 80150ac:	2302      	movs	r3, #2
 80150ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80150b2:	e0d4      	b.n	801525e <UART_SetConfig+0x2e6>
 80150b4:	2304      	movs	r3, #4
 80150b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80150ba:	e0d0      	b.n	801525e <UART_SetConfig+0x2e6>
 80150bc:	2308      	movs	r3, #8
 80150be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80150c2:	e0cc      	b.n	801525e <UART_SetConfig+0x2e6>
 80150c4:	2310      	movs	r3, #16
 80150c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80150ca:	e0c8      	b.n	801525e <UART_SetConfig+0x2e6>
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	4a5e      	ldr	r2, [pc, #376]	@ (801524c <UART_SetConfig+0x2d4>)
 80150d2:	4293      	cmp	r3, r2
 80150d4:	d125      	bne.n	8015122 <UART_SetConfig+0x1aa>
 80150d6:	4b5b      	ldr	r3, [pc, #364]	@ (8015244 <UART_SetConfig+0x2cc>)
 80150d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80150dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80150e0:	2b30      	cmp	r3, #48	@ 0x30
 80150e2:	d016      	beq.n	8015112 <UART_SetConfig+0x19a>
 80150e4:	2b30      	cmp	r3, #48	@ 0x30
 80150e6:	d818      	bhi.n	801511a <UART_SetConfig+0x1a2>
 80150e8:	2b20      	cmp	r3, #32
 80150ea:	d00a      	beq.n	8015102 <UART_SetConfig+0x18a>
 80150ec:	2b20      	cmp	r3, #32
 80150ee:	d814      	bhi.n	801511a <UART_SetConfig+0x1a2>
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d002      	beq.n	80150fa <UART_SetConfig+0x182>
 80150f4:	2b10      	cmp	r3, #16
 80150f6:	d008      	beq.n	801510a <UART_SetConfig+0x192>
 80150f8:	e00f      	b.n	801511a <UART_SetConfig+0x1a2>
 80150fa:	2300      	movs	r3, #0
 80150fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015100:	e0ad      	b.n	801525e <UART_SetConfig+0x2e6>
 8015102:	2302      	movs	r3, #2
 8015104:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015108:	e0a9      	b.n	801525e <UART_SetConfig+0x2e6>
 801510a:	2304      	movs	r3, #4
 801510c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015110:	e0a5      	b.n	801525e <UART_SetConfig+0x2e6>
 8015112:	2308      	movs	r3, #8
 8015114:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015118:	e0a1      	b.n	801525e <UART_SetConfig+0x2e6>
 801511a:	2310      	movs	r3, #16
 801511c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015120:	e09d      	b.n	801525e <UART_SetConfig+0x2e6>
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	4a4a      	ldr	r2, [pc, #296]	@ (8015250 <UART_SetConfig+0x2d8>)
 8015128:	4293      	cmp	r3, r2
 801512a:	d125      	bne.n	8015178 <UART_SetConfig+0x200>
 801512c:	4b45      	ldr	r3, [pc, #276]	@ (8015244 <UART_SetConfig+0x2cc>)
 801512e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015132:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8015136:	2bc0      	cmp	r3, #192	@ 0xc0
 8015138:	d016      	beq.n	8015168 <UART_SetConfig+0x1f0>
 801513a:	2bc0      	cmp	r3, #192	@ 0xc0
 801513c:	d818      	bhi.n	8015170 <UART_SetConfig+0x1f8>
 801513e:	2b80      	cmp	r3, #128	@ 0x80
 8015140:	d00a      	beq.n	8015158 <UART_SetConfig+0x1e0>
 8015142:	2b80      	cmp	r3, #128	@ 0x80
 8015144:	d814      	bhi.n	8015170 <UART_SetConfig+0x1f8>
 8015146:	2b00      	cmp	r3, #0
 8015148:	d002      	beq.n	8015150 <UART_SetConfig+0x1d8>
 801514a:	2b40      	cmp	r3, #64	@ 0x40
 801514c:	d008      	beq.n	8015160 <UART_SetConfig+0x1e8>
 801514e:	e00f      	b.n	8015170 <UART_SetConfig+0x1f8>
 8015150:	2300      	movs	r3, #0
 8015152:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015156:	e082      	b.n	801525e <UART_SetConfig+0x2e6>
 8015158:	2302      	movs	r3, #2
 801515a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801515e:	e07e      	b.n	801525e <UART_SetConfig+0x2e6>
 8015160:	2304      	movs	r3, #4
 8015162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015166:	e07a      	b.n	801525e <UART_SetConfig+0x2e6>
 8015168:	2308      	movs	r3, #8
 801516a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801516e:	e076      	b.n	801525e <UART_SetConfig+0x2e6>
 8015170:	2310      	movs	r3, #16
 8015172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015176:	e072      	b.n	801525e <UART_SetConfig+0x2e6>
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	4a35      	ldr	r2, [pc, #212]	@ (8015254 <UART_SetConfig+0x2dc>)
 801517e:	4293      	cmp	r3, r2
 8015180:	d12a      	bne.n	80151d8 <UART_SetConfig+0x260>
 8015182:	4b30      	ldr	r3, [pc, #192]	@ (8015244 <UART_SetConfig+0x2cc>)
 8015184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015188:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801518c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015190:	d01a      	beq.n	80151c8 <UART_SetConfig+0x250>
 8015192:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015196:	d81b      	bhi.n	80151d0 <UART_SetConfig+0x258>
 8015198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801519c:	d00c      	beq.n	80151b8 <UART_SetConfig+0x240>
 801519e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80151a2:	d815      	bhi.n	80151d0 <UART_SetConfig+0x258>
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d003      	beq.n	80151b0 <UART_SetConfig+0x238>
 80151a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80151ac:	d008      	beq.n	80151c0 <UART_SetConfig+0x248>
 80151ae:	e00f      	b.n	80151d0 <UART_SetConfig+0x258>
 80151b0:	2300      	movs	r3, #0
 80151b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80151b6:	e052      	b.n	801525e <UART_SetConfig+0x2e6>
 80151b8:	2302      	movs	r3, #2
 80151ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80151be:	e04e      	b.n	801525e <UART_SetConfig+0x2e6>
 80151c0:	2304      	movs	r3, #4
 80151c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80151c6:	e04a      	b.n	801525e <UART_SetConfig+0x2e6>
 80151c8:	2308      	movs	r3, #8
 80151ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80151ce:	e046      	b.n	801525e <UART_SetConfig+0x2e6>
 80151d0:	2310      	movs	r3, #16
 80151d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80151d6:	e042      	b.n	801525e <UART_SetConfig+0x2e6>
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	4a17      	ldr	r2, [pc, #92]	@ (801523c <UART_SetConfig+0x2c4>)
 80151de:	4293      	cmp	r3, r2
 80151e0:	d13a      	bne.n	8015258 <UART_SetConfig+0x2e0>
 80151e2:	4b18      	ldr	r3, [pc, #96]	@ (8015244 <UART_SetConfig+0x2cc>)
 80151e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80151e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80151ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80151f0:	d01a      	beq.n	8015228 <UART_SetConfig+0x2b0>
 80151f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80151f6:	d81b      	bhi.n	8015230 <UART_SetConfig+0x2b8>
 80151f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80151fc:	d00c      	beq.n	8015218 <UART_SetConfig+0x2a0>
 80151fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015202:	d815      	bhi.n	8015230 <UART_SetConfig+0x2b8>
 8015204:	2b00      	cmp	r3, #0
 8015206:	d003      	beq.n	8015210 <UART_SetConfig+0x298>
 8015208:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801520c:	d008      	beq.n	8015220 <UART_SetConfig+0x2a8>
 801520e:	e00f      	b.n	8015230 <UART_SetConfig+0x2b8>
 8015210:	2300      	movs	r3, #0
 8015212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015216:	e022      	b.n	801525e <UART_SetConfig+0x2e6>
 8015218:	2302      	movs	r3, #2
 801521a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801521e:	e01e      	b.n	801525e <UART_SetConfig+0x2e6>
 8015220:	2304      	movs	r3, #4
 8015222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015226:	e01a      	b.n	801525e <UART_SetConfig+0x2e6>
 8015228:	2308      	movs	r3, #8
 801522a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801522e:	e016      	b.n	801525e <UART_SetConfig+0x2e6>
 8015230:	2310      	movs	r3, #16
 8015232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015236:	e012      	b.n	801525e <UART_SetConfig+0x2e6>
 8015238:	efff69f3 	.word	0xefff69f3
 801523c:	40008000 	.word	0x40008000
 8015240:	40013800 	.word	0x40013800
 8015244:	40021000 	.word	0x40021000
 8015248:	40004400 	.word	0x40004400
 801524c:	40004800 	.word	0x40004800
 8015250:	40004c00 	.word	0x40004c00
 8015254:	40005000 	.word	0x40005000
 8015258:	2310      	movs	r3, #16
 801525a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	4a9f      	ldr	r2, [pc, #636]	@ (80154e0 <UART_SetConfig+0x568>)
 8015264:	4293      	cmp	r3, r2
 8015266:	d17a      	bne.n	801535e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8015268:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801526c:	2b08      	cmp	r3, #8
 801526e:	d824      	bhi.n	80152ba <UART_SetConfig+0x342>
 8015270:	a201      	add	r2, pc, #4	@ (adr r2, 8015278 <UART_SetConfig+0x300>)
 8015272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015276:	bf00      	nop
 8015278:	0801529d 	.word	0x0801529d
 801527c:	080152bb 	.word	0x080152bb
 8015280:	080152a5 	.word	0x080152a5
 8015284:	080152bb 	.word	0x080152bb
 8015288:	080152ab 	.word	0x080152ab
 801528c:	080152bb 	.word	0x080152bb
 8015290:	080152bb 	.word	0x080152bb
 8015294:	080152bb 	.word	0x080152bb
 8015298:	080152b3 	.word	0x080152b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801529c:	f7fb f8fe 	bl	801049c <HAL_RCC_GetPCLK1Freq>
 80152a0:	61f8      	str	r0, [r7, #28]
        break;
 80152a2:	e010      	b.n	80152c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80152a4:	4b8f      	ldr	r3, [pc, #572]	@ (80154e4 <UART_SetConfig+0x56c>)
 80152a6:	61fb      	str	r3, [r7, #28]
        break;
 80152a8:	e00d      	b.n	80152c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80152aa:	f7fb f85f 	bl	801036c <HAL_RCC_GetSysClockFreq>
 80152ae:	61f8      	str	r0, [r7, #28]
        break;
 80152b0:	e009      	b.n	80152c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80152b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80152b6:	61fb      	str	r3, [r7, #28]
        break;
 80152b8:	e005      	b.n	80152c6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80152ba:	2300      	movs	r3, #0
 80152bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80152be:	2301      	movs	r3, #1
 80152c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80152c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80152c6:	69fb      	ldr	r3, [r7, #28]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	f000 80fb 	beq.w	80154c4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	685a      	ldr	r2, [r3, #4]
 80152d2:	4613      	mov	r3, r2
 80152d4:	005b      	lsls	r3, r3, #1
 80152d6:	4413      	add	r3, r2
 80152d8:	69fa      	ldr	r2, [r7, #28]
 80152da:	429a      	cmp	r2, r3
 80152dc:	d305      	bcc.n	80152ea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	685b      	ldr	r3, [r3, #4]
 80152e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80152e4:	69fa      	ldr	r2, [r7, #28]
 80152e6:	429a      	cmp	r2, r3
 80152e8:	d903      	bls.n	80152f2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80152ea:	2301      	movs	r3, #1
 80152ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80152f0:	e0e8      	b.n	80154c4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80152f2:	69fb      	ldr	r3, [r7, #28]
 80152f4:	2200      	movs	r2, #0
 80152f6:	461c      	mov	r4, r3
 80152f8:	4615      	mov	r5, r2
 80152fa:	f04f 0200 	mov.w	r2, #0
 80152fe:	f04f 0300 	mov.w	r3, #0
 8015302:	022b      	lsls	r3, r5, #8
 8015304:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8015308:	0222      	lsls	r2, r4, #8
 801530a:	68f9      	ldr	r1, [r7, #12]
 801530c:	6849      	ldr	r1, [r1, #4]
 801530e:	0849      	lsrs	r1, r1, #1
 8015310:	2000      	movs	r0, #0
 8015312:	4688      	mov	r8, r1
 8015314:	4681      	mov	r9, r0
 8015316:	eb12 0a08 	adds.w	sl, r2, r8
 801531a:	eb43 0b09 	adc.w	fp, r3, r9
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	685b      	ldr	r3, [r3, #4]
 8015322:	2200      	movs	r2, #0
 8015324:	603b      	str	r3, [r7, #0]
 8015326:	607a      	str	r2, [r7, #4]
 8015328:	e9d7 2300 	ldrd	r2, r3, [r7]
 801532c:	4650      	mov	r0, sl
 801532e:	4659      	mov	r1, fp
 8015330:	f7eb fba4 	bl	8000a7c <__aeabi_uldivmod>
 8015334:	4602      	mov	r2, r0
 8015336:	460b      	mov	r3, r1
 8015338:	4613      	mov	r3, r2
 801533a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801533c:	69bb      	ldr	r3, [r7, #24]
 801533e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015342:	d308      	bcc.n	8015356 <UART_SetConfig+0x3de>
 8015344:	69bb      	ldr	r3, [r7, #24]
 8015346:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801534a:	d204      	bcs.n	8015356 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	69ba      	ldr	r2, [r7, #24]
 8015352:	60da      	str	r2, [r3, #12]
 8015354:	e0b6      	b.n	80154c4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8015356:	2301      	movs	r3, #1
 8015358:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801535c:	e0b2      	b.n	80154c4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	69db      	ldr	r3, [r3, #28]
 8015362:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015366:	d15e      	bne.n	8015426 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8015368:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801536c:	2b08      	cmp	r3, #8
 801536e:	d828      	bhi.n	80153c2 <UART_SetConfig+0x44a>
 8015370:	a201      	add	r2, pc, #4	@ (adr r2, 8015378 <UART_SetConfig+0x400>)
 8015372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015376:	bf00      	nop
 8015378:	0801539d 	.word	0x0801539d
 801537c:	080153a5 	.word	0x080153a5
 8015380:	080153ad 	.word	0x080153ad
 8015384:	080153c3 	.word	0x080153c3
 8015388:	080153b3 	.word	0x080153b3
 801538c:	080153c3 	.word	0x080153c3
 8015390:	080153c3 	.word	0x080153c3
 8015394:	080153c3 	.word	0x080153c3
 8015398:	080153bb 	.word	0x080153bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801539c:	f7fb f87e 	bl	801049c <HAL_RCC_GetPCLK1Freq>
 80153a0:	61f8      	str	r0, [r7, #28]
        break;
 80153a2:	e014      	b.n	80153ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80153a4:	f7fb f890 	bl	80104c8 <HAL_RCC_GetPCLK2Freq>
 80153a8:	61f8      	str	r0, [r7, #28]
        break;
 80153aa:	e010      	b.n	80153ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80153ac:	4b4d      	ldr	r3, [pc, #308]	@ (80154e4 <UART_SetConfig+0x56c>)
 80153ae:	61fb      	str	r3, [r7, #28]
        break;
 80153b0:	e00d      	b.n	80153ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80153b2:	f7fa ffdb 	bl	801036c <HAL_RCC_GetSysClockFreq>
 80153b6:	61f8      	str	r0, [r7, #28]
        break;
 80153b8:	e009      	b.n	80153ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80153ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80153be:	61fb      	str	r3, [r7, #28]
        break;
 80153c0:	e005      	b.n	80153ce <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80153c2:	2300      	movs	r3, #0
 80153c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80153c6:	2301      	movs	r3, #1
 80153c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80153cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80153ce:	69fb      	ldr	r3, [r7, #28]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d077      	beq.n	80154c4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80153d4:	69fb      	ldr	r3, [r7, #28]
 80153d6:	005a      	lsls	r2, r3, #1
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	685b      	ldr	r3, [r3, #4]
 80153dc:	085b      	lsrs	r3, r3, #1
 80153de:	441a      	add	r2, r3
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	685b      	ldr	r3, [r3, #4]
 80153e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80153e8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80153ea:	69bb      	ldr	r3, [r7, #24]
 80153ec:	2b0f      	cmp	r3, #15
 80153ee:	d916      	bls.n	801541e <UART_SetConfig+0x4a6>
 80153f0:	69bb      	ldr	r3, [r7, #24]
 80153f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80153f6:	d212      	bcs.n	801541e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80153f8:	69bb      	ldr	r3, [r7, #24]
 80153fa:	b29b      	uxth	r3, r3
 80153fc:	f023 030f 	bic.w	r3, r3, #15
 8015400:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015402:	69bb      	ldr	r3, [r7, #24]
 8015404:	085b      	lsrs	r3, r3, #1
 8015406:	b29b      	uxth	r3, r3
 8015408:	f003 0307 	and.w	r3, r3, #7
 801540c:	b29a      	uxth	r2, r3
 801540e:	8afb      	ldrh	r3, [r7, #22]
 8015410:	4313      	orrs	r3, r2
 8015412:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	8afa      	ldrh	r2, [r7, #22]
 801541a:	60da      	str	r2, [r3, #12]
 801541c:	e052      	b.n	80154c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 801541e:	2301      	movs	r3, #1
 8015420:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8015424:	e04e      	b.n	80154c4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8015426:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801542a:	2b08      	cmp	r3, #8
 801542c:	d827      	bhi.n	801547e <UART_SetConfig+0x506>
 801542e:	a201      	add	r2, pc, #4	@ (adr r2, 8015434 <UART_SetConfig+0x4bc>)
 8015430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015434:	08015459 	.word	0x08015459
 8015438:	08015461 	.word	0x08015461
 801543c:	08015469 	.word	0x08015469
 8015440:	0801547f 	.word	0x0801547f
 8015444:	0801546f 	.word	0x0801546f
 8015448:	0801547f 	.word	0x0801547f
 801544c:	0801547f 	.word	0x0801547f
 8015450:	0801547f 	.word	0x0801547f
 8015454:	08015477 	.word	0x08015477
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015458:	f7fb f820 	bl	801049c <HAL_RCC_GetPCLK1Freq>
 801545c:	61f8      	str	r0, [r7, #28]
        break;
 801545e:	e014      	b.n	801548a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015460:	f7fb f832 	bl	80104c8 <HAL_RCC_GetPCLK2Freq>
 8015464:	61f8      	str	r0, [r7, #28]
        break;
 8015466:	e010      	b.n	801548a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015468:	4b1e      	ldr	r3, [pc, #120]	@ (80154e4 <UART_SetConfig+0x56c>)
 801546a:	61fb      	str	r3, [r7, #28]
        break;
 801546c:	e00d      	b.n	801548a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801546e:	f7fa ff7d 	bl	801036c <HAL_RCC_GetSysClockFreq>
 8015472:	61f8      	str	r0, [r7, #28]
        break;
 8015474:	e009      	b.n	801548a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015476:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801547a:	61fb      	str	r3, [r7, #28]
        break;
 801547c:	e005      	b.n	801548a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 801547e:	2300      	movs	r3, #0
 8015480:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8015482:	2301      	movs	r3, #1
 8015484:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8015488:	bf00      	nop
    }

    if (pclk != 0U)
 801548a:	69fb      	ldr	r3, [r7, #28]
 801548c:	2b00      	cmp	r3, #0
 801548e:	d019      	beq.n	80154c4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	685b      	ldr	r3, [r3, #4]
 8015494:	085a      	lsrs	r2, r3, #1
 8015496:	69fb      	ldr	r3, [r7, #28]
 8015498:	441a      	add	r2, r3
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	685b      	ldr	r3, [r3, #4]
 801549e:	fbb2 f3f3 	udiv	r3, r2, r3
 80154a2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80154a4:	69bb      	ldr	r3, [r7, #24]
 80154a6:	2b0f      	cmp	r3, #15
 80154a8:	d909      	bls.n	80154be <UART_SetConfig+0x546>
 80154aa:	69bb      	ldr	r3, [r7, #24]
 80154ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80154b0:	d205      	bcs.n	80154be <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80154b2:	69bb      	ldr	r3, [r7, #24]
 80154b4:	b29a      	uxth	r2, r3
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	60da      	str	r2, [r3, #12]
 80154bc:	e002      	b.n	80154c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80154be:	2301      	movs	r3, #1
 80154c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	2200      	movs	r2, #0
 80154c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	2200      	movs	r2, #0
 80154ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80154d0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80154d4:	4618      	mov	r0, r3
 80154d6:	3728      	adds	r7, #40	@ 0x28
 80154d8:	46bd      	mov	sp, r7
 80154da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80154de:	bf00      	nop
 80154e0:	40008000 	.word	0x40008000
 80154e4:	00f42400 	.word	0x00f42400

080154e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80154e8:	b480      	push	{r7}
 80154ea:	b083      	sub	sp, #12
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154f4:	f003 0308 	and.w	r3, r3, #8
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d00a      	beq.n	8015512 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	685b      	ldr	r3, [r3, #4]
 8015502:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	430a      	orrs	r2, r1
 8015510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015516:	f003 0301 	and.w	r3, r3, #1
 801551a:	2b00      	cmp	r3, #0
 801551c:	d00a      	beq.n	8015534 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	685b      	ldr	r3, [r3, #4]
 8015524:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	430a      	orrs	r2, r1
 8015532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015538:	f003 0302 	and.w	r3, r3, #2
 801553c:	2b00      	cmp	r3, #0
 801553e:	d00a      	beq.n	8015556 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	685b      	ldr	r3, [r3, #4]
 8015546:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	430a      	orrs	r2, r1
 8015554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801555a:	f003 0304 	and.w	r3, r3, #4
 801555e:	2b00      	cmp	r3, #0
 8015560:	d00a      	beq.n	8015578 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	685b      	ldr	r3, [r3, #4]
 8015568:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	430a      	orrs	r2, r1
 8015576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801557c:	f003 0310 	and.w	r3, r3, #16
 8015580:	2b00      	cmp	r3, #0
 8015582:	d00a      	beq.n	801559a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	689b      	ldr	r3, [r3, #8]
 801558a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	430a      	orrs	r2, r1
 8015598:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801559e:	f003 0320 	and.w	r3, r3, #32
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d00a      	beq.n	80155bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	689b      	ldr	r3, [r3, #8]
 80155ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	430a      	orrs	r2, r1
 80155ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80155c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d01a      	beq.n	80155fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	685b      	ldr	r3, [r3, #4]
 80155ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	430a      	orrs	r2, r1
 80155dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80155e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80155e6:	d10a      	bne.n	80155fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	685b      	ldr	r3, [r3, #4]
 80155ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	430a      	orrs	r2, r1
 80155fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015606:	2b00      	cmp	r3, #0
 8015608:	d00a      	beq.n	8015620 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	685b      	ldr	r3, [r3, #4]
 8015610:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	430a      	orrs	r2, r1
 801561e:	605a      	str	r2, [r3, #4]
  }
}
 8015620:	bf00      	nop
 8015622:	370c      	adds	r7, #12
 8015624:	46bd      	mov	sp, r7
 8015626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801562a:	4770      	bx	lr

0801562c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801562c:	b580      	push	{r7, lr}
 801562e:	b098      	sub	sp, #96	@ 0x60
 8015630:	af02      	add	r7, sp, #8
 8015632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	2200      	movs	r2, #0
 8015638:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801563c:	f7f5 fd16 	bl	800b06c <HAL_GetTick>
 8015640:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	f003 0308 	and.w	r3, r3, #8
 801564c:	2b08      	cmp	r3, #8
 801564e:	d12e      	bne.n	80156ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015650:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8015654:	9300      	str	r3, [sp, #0]
 8015656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015658:	2200      	movs	r2, #0
 801565a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801565e:	6878      	ldr	r0, [r7, #4]
 8015660:	f000 f88c 	bl	801577c <UART_WaitOnFlagUntilTimeout>
 8015664:	4603      	mov	r3, r0
 8015666:	2b00      	cmp	r3, #0
 8015668:	d021      	beq.n	80156ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015672:	e853 3f00 	ldrex	r3, [r3]
 8015676:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8015678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801567a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801567e:	653b      	str	r3, [r7, #80]	@ 0x50
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	461a      	mov	r2, r3
 8015686:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015688:	647b      	str	r3, [r7, #68]	@ 0x44
 801568a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801568c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801568e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015690:	e841 2300 	strex	r3, r2, [r1]
 8015694:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8015696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015698:	2b00      	cmp	r3, #0
 801569a:	d1e6      	bne.n	801566a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	2220      	movs	r2, #32
 80156a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	2200      	movs	r2, #0
 80156a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80156aa:	2303      	movs	r3, #3
 80156ac:	e062      	b.n	8015774 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	f003 0304 	and.w	r3, r3, #4
 80156b8:	2b04      	cmp	r3, #4
 80156ba:	d149      	bne.n	8015750 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80156bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80156c0:	9300      	str	r3, [sp, #0]
 80156c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80156c4:	2200      	movs	r2, #0
 80156c6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80156ca:	6878      	ldr	r0, [r7, #4]
 80156cc:	f000 f856 	bl	801577c <UART_WaitOnFlagUntilTimeout>
 80156d0:	4603      	mov	r3, r0
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d03c      	beq.n	8015750 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156de:	e853 3f00 	ldrex	r3, [r3]
 80156e2:	623b      	str	r3, [r7, #32]
   return(result);
 80156e4:	6a3b      	ldr	r3, [r7, #32]
 80156e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80156ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	461a      	mov	r2, r3
 80156f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80156f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80156f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80156fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80156fc:	e841 2300 	strex	r3, r2, [r1]
 8015700:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015704:	2b00      	cmp	r3, #0
 8015706:	d1e6      	bne.n	80156d6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	3308      	adds	r3, #8
 801570e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015710:	693b      	ldr	r3, [r7, #16]
 8015712:	e853 3f00 	ldrex	r3, [r3]
 8015716:	60fb      	str	r3, [r7, #12]
   return(result);
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	f023 0301 	bic.w	r3, r3, #1
 801571e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	3308      	adds	r3, #8
 8015726:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015728:	61fa      	str	r2, [r7, #28]
 801572a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801572c:	69b9      	ldr	r1, [r7, #24]
 801572e:	69fa      	ldr	r2, [r7, #28]
 8015730:	e841 2300 	strex	r3, r2, [r1]
 8015734:	617b      	str	r3, [r7, #20]
   return(result);
 8015736:	697b      	ldr	r3, [r7, #20]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d1e5      	bne.n	8015708 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	2220      	movs	r2, #32
 8015740:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	2200      	movs	r2, #0
 8015748:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801574c:	2303      	movs	r3, #3
 801574e:	e011      	b.n	8015774 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	2220      	movs	r2, #32
 8015754:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	2220      	movs	r2, #32
 801575a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	2200      	movs	r2, #0
 8015762:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	2200      	movs	r2, #0
 8015768:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	2200      	movs	r2, #0
 801576e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8015772:	2300      	movs	r3, #0
}
 8015774:	4618      	mov	r0, r3
 8015776:	3758      	adds	r7, #88	@ 0x58
 8015778:	46bd      	mov	sp, r7
 801577a:	bd80      	pop	{r7, pc}

0801577c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801577c:	b580      	push	{r7, lr}
 801577e:	b084      	sub	sp, #16
 8015780:	af00      	add	r7, sp, #0
 8015782:	60f8      	str	r0, [r7, #12]
 8015784:	60b9      	str	r1, [r7, #8]
 8015786:	603b      	str	r3, [r7, #0]
 8015788:	4613      	mov	r3, r2
 801578a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801578c:	e04f      	b.n	801582e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801578e:	69bb      	ldr	r3, [r7, #24]
 8015790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015794:	d04b      	beq.n	801582e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015796:	f7f5 fc69 	bl	800b06c <HAL_GetTick>
 801579a:	4602      	mov	r2, r0
 801579c:	683b      	ldr	r3, [r7, #0]
 801579e:	1ad3      	subs	r3, r2, r3
 80157a0:	69ba      	ldr	r2, [r7, #24]
 80157a2:	429a      	cmp	r2, r3
 80157a4:	d302      	bcc.n	80157ac <UART_WaitOnFlagUntilTimeout+0x30>
 80157a6:	69bb      	ldr	r3, [r7, #24]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d101      	bne.n	80157b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80157ac:	2303      	movs	r3, #3
 80157ae:	e04e      	b.n	801584e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	f003 0304 	and.w	r3, r3, #4
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d037      	beq.n	801582e <UART_WaitOnFlagUntilTimeout+0xb2>
 80157be:	68bb      	ldr	r3, [r7, #8]
 80157c0:	2b80      	cmp	r3, #128	@ 0x80
 80157c2:	d034      	beq.n	801582e <UART_WaitOnFlagUntilTimeout+0xb2>
 80157c4:	68bb      	ldr	r3, [r7, #8]
 80157c6:	2b40      	cmp	r3, #64	@ 0x40
 80157c8:	d031      	beq.n	801582e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	69db      	ldr	r3, [r3, #28]
 80157d0:	f003 0308 	and.w	r3, r3, #8
 80157d4:	2b08      	cmp	r3, #8
 80157d6:	d110      	bne.n	80157fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	2208      	movs	r2, #8
 80157de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80157e0:	68f8      	ldr	r0, [r7, #12]
 80157e2:	f000 f8ff 	bl	80159e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	2208      	movs	r2, #8
 80157ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	2200      	movs	r2, #0
 80157f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80157f6:	2301      	movs	r3, #1
 80157f8:	e029      	b.n	801584e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	69db      	ldr	r3, [r3, #28]
 8015800:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015804:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015808:	d111      	bne.n	801582e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015812:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015814:	68f8      	ldr	r0, [r7, #12]
 8015816:	f000 f8e5 	bl	80159e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	2220      	movs	r2, #32
 801581e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	2200      	movs	r2, #0
 8015826:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 801582a:	2303      	movs	r3, #3
 801582c:	e00f      	b.n	801584e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	69da      	ldr	r2, [r3, #28]
 8015834:	68bb      	ldr	r3, [r7, #8]
 8015836:	4013      	ands	r3, r2
 8015838:	68ba      	ldr	r2, [r7, #8]
 801583a:	429a      	cmp	r2, r3
 801583c:	bf0c      	ite	eq
 801583e:	2301      	moveq	r3, #1
 8015840:	2300      	movne	r3, #0
 8015842:	b2db      	uxtb	r3, r3
 8015844:	461a      	mov	r2, r3
 8015846:	79fb      	ldrb	r3, [r7, #7]
 8015848:	429a      	cmp	r2, r3
 801584a:	d0a0      	beq.n	801578e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801584c:	2300      	movs	r3, #0
}
 801584e:	4618      	mov	r0, r3
 8015850:	3710      	adds	r7, #16
 8015852:	46bd      	mov	sp, r7
 8015854:	bd80      	pop	{r7, pc}
	...

08015858 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b096      	sub	sp, #88	@ 0x58
 801585c:	af00      	add	r7, sp, #0
 801585e:	60f8      	str	r0, [r7, #12]
 8015860:	60b9      	str	r1, [r7, #8]
 8015862:	4613      	mov	r3, r2
 8015864:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	68ba      	ldr	r2, [r7, #8]
 801586a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	88fa      	ldrh	r2, [r7, #6]
 8015870:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	2200      	movs	r2, #0
 8015878:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	2222      	movs	r2, #34	@ 0x22
 8015880:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015888:	2b00      	cmp	r3, #0
 801588a:	d028      	beq.n	80158de <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015890:	4a3e      	ldr	r2, [pc, #248]	@ (801598c <UART_Start_Receive_DMA+0x134>)
 8015892:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015898:	4a3d      	ldr	r2, [pc, #244]	@ (8015990 <UART_Start_Receive_DMA+0x138>)
 801589a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80158a0:	4a3c      	ldr	r2, [pc, #240]	@ (8015994 <UART_Start_Receive_DMA+0x13c>)
 80158a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80158a8:	2200      	movs	r2, #0
 80158aa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	3324      	adds	r3, #36	@ 0x24
 80158b6:	4619      	mov	r1, r3
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80158bc:	461a      	mov	r2, r3
 80158be:	88fb      	ldrh	r3, [r7, #6]
 80158c0:	f7f7 fbba 	bl	800d038 <HAL_DMA_Start_IT>
 80158c4:	4603      	mov	r3, r0
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d009      	beq.n	80158de <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	2210      	movs	r2, #16
 80158ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	2220      	movs	r2, #32
 80158d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80158da:	2301      	movs	r3, #1
 80158dc:	e051      	b.n	8015982 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	691b      	ldr	r3, [r3, #16]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d018      	beq.n	8015918 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80158ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158ee:	e853 3f00 	ldrex	r3, [r3]
 80158f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80158f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80158fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	461a      	mov	r2, r3
 8015902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015904:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015906:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015908:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801590a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801590c:	e841 2300 	strex	r3, r2, [r1]
 8015910:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8015912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015914:	2b00      	cmp	r3, #0
 8015916:	d1e6      	bne.n	80158e6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	3308      	adds	r3, #8
 801591e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015922:	e853 3f00 	ldrex	r3, [r3]
 8015926:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801592a:	f043 0301 	orr.w	r3, r3, #1
 801592e:	653b      	str	r3, [r7, #80]	@ 0x50
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	3308      	adds	r3, #8
 8015936:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015938:	637a      	str	r2, [r7, #52]	@ 0x34
 801593a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801593c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801593e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015940:	e841 2300 	strex	r3, r2, [r1]
 8015944:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8015946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015948:	2b00      	cmp	r3, #0
 801594a:	d1e5      	bne.n	8015918 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	3308      	adds	r3, #8
 8015952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015954:	697b      	ldr	r3, [r7, #20]
 8015956:	e853 3f00 	ldrex	r3, [r3]
 801595a:	613b      	str	r3, [r7, #16]
   return(result);
 801595c:	693b      	ldr	r3, [r7, #16]
 801595e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015962:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	3308      	adds	r3, #8
 801596a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801596c:	623a      	str	r2, [r7, #32]
 801596e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015970:	69f9      	ldr	r1, [r7, #28]
 8015972:	6a3a      	ldr	r2, [r7, #32]
 8015974:	e841 2300 	strex	r3, r2, [r1]
 8015978:	61bb      	str	r3, [r7, #24]
   return(result);
 801597a:	69bb      	ldr	r3, [r7, #24]
 801597c:	2b00      	cmp	r3, #0
 801597e:	d1e5      	bne.n	801594c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8015980:	2300      	movs	r3, #0
}
 8015982:	4618      	mov	r0, r3
 8015984:	3758      	adds	r7, #88	@ 0x58
 8015986:	46bd      	mov	sp, r7
 8015988:	bd80      	pop	{r7, pc}
 801598a:	bf00      	nop
 801598c:	08015b63 	.word	0x08015b63
 8015990:	08015c8f 	.word	0x08015c8f
 8015994:	08015ccd 	.word	0x08015ccd

08015998 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8015998:	b480      	push	{r7}
 801599a:	b089      	sub	sp, #36	@ 0x24
 801599c:	af00      	add	r7, sp, #0
 801599e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	e853 3f00 	ldrex	r3, [r3]
 80159ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80159ae:	68bb      	ldr	r3, [r7, #8]
 80159b0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80159b4:	61fb      	str	r3, [r7, #28]
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	461a      	mov	r2, r3
 80159bc:	69fb      	ldr	r3, [r7, #28]
 80159be:	61bb      	str	r3, [r7, #24]
 80159c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159c2:	6979      	ldr	r1, [r7, #20]
 80159c4:	69ba      	ldr	r2, [r7, #24]
 80159c6:	e841 2300 	strex	r3, r2, [r1]
 80159ca:	613b      	str	r3, [r7, #16]
   return(result);
 80159cc:	693b      	ldr	r3, [r7, #16]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d1e6      	bne.n	80159a0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	2220      	movs	r2, #32
 80159d6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80159d8:	bf00      	nop
 80159da:	3724      	adds	r7, #36	@ 0x24
 80159dc:	46bd      	mov	sp, r7
 80159de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e2:	4770      	bx	lr

080159e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80159e4:	b480      	push	{r7}
 80159e6:	b095      	sub	sp, #84	@ 0x54
 80159e8:	af00      	add	r7, sp, #0
 80159ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80159f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80159f4:	e853 3f00 	ldrex	r3, [r3]
 80159f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80159fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8015a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	461a      	mov	r2, r3
 8015a08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015a0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8015a0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015a10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015a12:	e841 2300 	strex	r3, r2, [r1]
 8015a16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8015a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d1e6      	bne.n	80159ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	3308      	adds	r3, #8
 8015a24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a26:	6a3b      	ldr	r3, [r7, #32]
 8015a28:	e853 3f00 	ldrex	r3, [r3]
 8015a2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8015a2e:	69fb      	ldr	r3, [r7, #28]
 8015a30:	f023 0301 	bic.w	r3, r3, #1
 8015a34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	3308      	adds	r3, #8
 8015a3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015a3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8015a40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015a44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015a46:	e841 2300 	strex	r3, r2, [r1]
 8015a4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d1e5      	bne.n	8015a1e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015a56:	2b01      	cmp	r3, #1
 8015a58:	d118      	bne.n	8015a8c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	e853 3f00 	ldrex	r3, [r3]
 8015a66:	60bb      	str	r3, [r7, #8]
   return(result);
 8015a68:	68bb      	ldr	r3, [r7, #8]
 8015a6a:	f023 0310 	bic.w	r3, r3, #16
 8015a6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	461a      	mov	r2, r3
 8015a76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015a78:	61bb      	str	r3, [r7, #24]
 8015a7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a7c:	6979      	ldr	r1, [r7, #20]
 8015a7e:	69ba      	ldr	r2, [r7, #24]
 8015a80:	e841 2300 	strex	r3, r2, [r1]
 8015a84:	613b      	str	r3, [r7, #16]
   return(result);
 8015a86:	693b      	ldr	r3, [r7, #16]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d1e6      	bne.n	8015a5a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	2220      	movs	r2, #32
 8015a90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	2200      	movs	r2, #0
 8015a98:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	2200      	movs	r2, #0
 8015a9e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8015aa0:	bf00      	nop
 8015aa2:	3754      	adds	r7, #84	@ 0x54
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aaa:	4770      	bx	lr

08015aac <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015aac:	b580      	push	{r7, lr}
 8015aae:	b090      	sub	sp, #64	@ 0x40
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	f003 0320 	and.w	r3, r3, #32
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d137      	bne.n	8015b38 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8015ac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015aca:	2200      	movs	r2, #0
 8015acc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	3308      	adds	r3, #8
 8015ad6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ada:	e853 3f00 	ldrex	r3, [r3]
 8015ade:	623b      	str	r3, [r7, #32]
   return(result);
 8015ae0:	6a3b      	ldr	r3, [r7, #32]
 8015ae2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	3308      	adds	r3, #8
 8015aee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015af0:	633a      	str	r2, [r7, #48]	@ 0x30
 8015af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015af4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015af6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015af8:	e841 2300 	strex	r3, r2, [r1]
 8015afc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d1e5      	bne.n	8015ad0 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b0a:	693b      	ldr	r3, [r7, #16]
 8015b0c:	e853 3f00 	ldrex	r3, [r3]
 8015b10:	60fb      	str	r3, [r7, #12]
   return(result);
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015b18:	637b      	str	r3, [r7, #52]	@ 0x34
 8015b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	461a      	mov	r2, r3
 8015b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015b22:	61fb      	str	r3, [r7, #28]
 8015b24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b26:	69b9      	ldr	r1, [r7, #24]
 8015b28:	69fa      	ldr	r2, [r7, #28]
 8015b2a:	e841 2300 	strex	r3, r2, [r1]
 8015b2e:	617b      	str	r3, [r7, #20]
   return(result);
 8015b30:	697b      	ldr	r3, [r7, #20]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d1e6      	bne.n	8015b04 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015b36:	e002      	b.n	8015b3e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8015b38:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015b3a:	f7ec ffbd 	bl	8002ab8 <HAL_UART_TxCpltCallback>
}
 8015b3e:	bf00      	nop
 8015b40:	3740      	adds	r7, #64	@ 0x40
 8015b42:	46bd      	mov	sp, r7
 8015b44:	bd80      	pop	{r7, pc}

08015b46 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8015b46:	b580      	push	{r7, lr}
 8015b48:	b084      	sub	sp, #16
 8015b4a:	af00      	add	r7, sp, #0
 8015b4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b52:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8015b54:	68f8      	ldr	r0, [r7, #12]
 8015b56:	f7ff f9f1 	bl	8014f3c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015b5a:	bf00      	nop
 8015b5c:	3710      	adds	r7, #16
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	bd80      	pop	{r7, pc}

08015b62 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015b62:	b580      	push	{r7, lr}
 8015b64:	b09c      	sub	sp, #112	@ 0x70
 8015b66:	af00      	add	r7, sp, #0
 8015b68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b6e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	f003 0320 	and.w	r3, r3, #32
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d171      	bne.n	8015c62 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8015b7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015b80:	2200      	movs	r2, #0
 8015b82:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015b86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015b8e:	e853 3f00 	ldrex	r3, [r3]
 8015b92:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8015b94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015b96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8015b9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015b9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	461a      	mov	r2, r3
 8015ba2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015ba4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015ba6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ba8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8015baa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015bac:	e841 2300 	strex	r3, r2, [r1]
 8015bb0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8015bb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d1e6      	bne.n	8015b86 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015bb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	3308      	adds	r3, #8
 8015bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015bc2:	e853 3f00 	ldrex	r3, [r3]
 8015bc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8015bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015bca:	f023 0301 	bic.w	r3, r3, #1
 8015bce:	667b      	str	r3, [r7, #100]	@ 0x64
 8015bd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	3308      	adds	r3, #8
 8015bd6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8015bd8:	647a      	str	r2, [r7, #68]	@ 0x44
 8015bda:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015bdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015bde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015be0:	e841 2300 	strex	r3, r2, [r1]
 8015be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8015be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d1e5      	bne.n	8015bb8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015bec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	3308      	adds	r3, #8
 8015bf2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bf6:	e853 3f00 	ldrex	r3, [r3]
 8015bfa:	623b      	str	r3, [r7, #32]
   return(result);
 8015bfc:	6a3b      	ldr	r3, [r7, #32]
 8015bfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8015c02:	663b      	str	r3, [r7, #96]	@ 0x60
 8015c04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	3308      	adds	r3, #8
 8015c0a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8015c0c:	633a      	str	r2, [r7, #48]	@ 0x30
 8015c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015c12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015c14:	e841 2300 	strex	r3, r2, [r1]
 8015c18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d1e5      	bne.n	8015bec <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015c20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015c22:	2220      	movs	r2, #32
 8015c24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015c28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015c2c:	2b01      	cmp	r3, #1
 8015c2e:	d118      	bne.n	8015c62 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015c30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c36:	693b      	ldr	r3, [r7, #16]
 8015c38:	e853 3f00 	ldrex	r3, [r3]
 8015c3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	f023 0310 	bic.w	r3, r3, #16
 8015c44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015c46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	461a      	mov	r2, r3
 8015c4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015c4e:	61fb      	str	r3, [r7, #28]
 8015c50:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c52:	69b9      	ldr	r1, [r7, #24]
 8015c54:	69fa      	ldr	r2, [r7, #28]
 8015c56:	e841 2300 	strex	r3, r2, [r1]
 8015c5a:	617b      	str	r3, [r7, #20]
   return(result);
 8015c5c:	697b      	ldr	r3, [r7, #20]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d1e6      	bne.n	8015c30 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015c62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015c64:	2200      	movs	r2, #0
 8015c66:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015c68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015c6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015c6c:	2b01      	cmp	r3, #1
 8015c6e:	d107      	bne.n	8015c80 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015c70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015c72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8015c76:	4619      	mov	r1, r3
 8015c78:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015c7a:	f7ec fe95 	bl	80029a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015c7e:	e002      	b.n	8015c86 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8015c80:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015c82:	f7ec ff0f 	bl	8002aa4 <HAL_UART_RxCpltCallback>
}
 8015c86:	bf00      	nop
 8015c88:	3770      	adds	r7, #112	@ 0x70
 8015c8a:	46bd      	mov	sp, r7
 8015c8c:	bd80      	pop	{r7, pc}

08015c8e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8015c8e:	b580      	push	{r7, lr}
 8015c90:	b084      	sub	sp, #16
 8015c92:	af00      	add	r7, sp, #0
 8015c94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c9a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	2201      	movs	r2, #1
 8015ca0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015ca6:	2b01      	cmp	r3, #1
 8015ca8:	d109      	bne.n	8015cbe <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8015cb0:	085b      	lsrs	r3, r3, #1
 8015cb2:	b29b      	uxth	r3, r3
 8015cb4:	4619      	mov	r1, r3
 8015cb6:	68f8      	ldr	r0, [r7, #12]
 8015cb8:	f7ec fe76 	bl	80029a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015cbc:	e002      	b.n	8015cc4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8015cbe:	68f8      	ldr	r0, [r7, #12]
 8015cc0:	f7ff f946 	bl	8014f50 <HAL_UART_RxHalfCpltCallback>
}
 8015cc4:	bf00      	nop
 8015cc6:	3710      	adds	r7, #16
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	bd80      	pop	{r7, pc}

08015ccc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8015ccc:	b580      	push	{r7, lr}
 8015cce:	b086      	sub	sp, #24
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015cd8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8015cda:	697b      	ldr	r3, [r7, #20]
 8015cdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015cde:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8015ce0:	697b      	ldr	r3, [r7, #20]
 8015ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015ce6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8015ce8:	697b      	ldr	r3, [r7, #20]
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	689b      	ldr	r3, [r3, #8]
 8015cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015cf2:	2b80      	cmp	r3, #128	@ 0x80
 8015cf4:	d109      	bne.n	8015d0a <UART_DMAError+0x3e>
 8015cf6:	693b      	ldr	r3, [r7, #16]
 8015cf8:	2b21      	cmp	r3, #33	@ 0x21
 8015cfa:	d106      	bne.n	8015d0a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8015cfc:	697b      	ldr	r3, [r7, #20]
 8015cfe:	2200      	movs	r2, #0
 8015d00:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8015d04:	6978      	ldr	r0, [r7, #20]
 8015d06:	f7ff fe47 	bl	8015998 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8015d0a:	697b      	ldr	r3, [r7, #20]
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	689b      	ldr	r3, [r3, #8]
 8015d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015d14:	2b40      	cmp	r3, #64	@ 0x40
 8015d16:	d109      	bne.n	8015d2c <UART_DMAError+0x60>
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	2b22      	cmp	r3, #34	@ 0x22
 8015d1c:	d106      	bne.n	8015d2c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8015d1e:	697b      	ldr	r3, [r7, #20]
 8015d20:	2200      	movs	r2, #0
 8015d22:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8015d26:	6978      	ldr	r0, [r7, #20]
 8015d28:	f7ff fe5c 	bl	80159e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8015d2c:	697b      	ldr	r3, [r7, #20]
 8015d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015d32:	f043 0210 	orr.w	r2, r3, #16
 8015d36:	697b      	ldr	r3, [r7, #20]
 8015d38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015d3c:	6978      	ldr	r0, [r7, #20]
 8015d3e:	f7ff f911 	bl	8014f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015d42:	bf00      	nop
 8015d44:	3718      	adds	r7, #24
 8015d46:	46bd      	mov	sp, r7
 8015d48:	bd80      	pop	{r7, pc}

08015d4a <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8015d4a:	b580      	push	{r7, lr}
 8015d4c:	b088      	sub	sp, #32
 8015d4e:	af00      	add	r7, sp, #0
 8015d50:	60f8      	str	r0, [r7, #12]
 8015d52:	60b9      	str	r1, [r7, #8]
 8015d54:	603b      	str	r3, [r7, #0]
 8015d56:	4613      	mov	r3, r2
 8015d58:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015d60:	2b20      	cmp	r3, #32
 8015d62:	f040 80f0 	bne.w	8015f46 <HAL_UARTEx_ReceiveToIdle+0x1fc>
  {
    if ((pData == NULL) || (Size == 0U))
 8015d66:	68bb      	ldr	r3, [r7, #8]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d002      	beq.n	8015d72 <HAL_UARTEx_ReceiveToIdle+0x28>
 8015d6c:	88fb      	ldrh	r3, [r7, #6]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d101      	bne.n	8015d76 <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 8015d72:	2301      	movs	r3, #1
 8015d74:	e0e8      	b.n	8015f48 <HAL_UARTEx_ReceiveToIdle+0x1fe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	2200      	movs	r2, #0
 8015d7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	2222      	movs	r2, #34	@ 0x22
 8015d82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	2201      	movs	r2, #1
 8015d8a:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	2200      	movs	r2, #0
 8015d90:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015d92:	f7f5 f96b 	bl	800b06c <HAL_GetTick>
 8015d96:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	88fa      	ldrh	r2, [r7, #6]
 8015d9c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	88fa      	ldrh	r2, [r7, #6]
 8015da4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	689b      	ldr	r3, [r3, #8]
 8015dac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015db0:	d10e      	bne.n	8015dd0 <HAL_UARTEx_ReceiveToIdle+0x86>
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	691b      	ldr	r3, [r3, #16]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d105      	bne.n	8015dc6 <HAL_UARTEx_ReceiveToIdle+0x7c>
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8015dc0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015dc4:	e02d      	b.n	8015e22 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	22ff      	movs	r2, #255	@ 0xff
 8015dca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015dce:	e028      	b.n	8015e22 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	689b      	ldr	r3, [r3, #8]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d10d      	bne.n	8015df4 <HAL_UARTEx_ReceiveToIdle+0xaa>
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	691b      	ldr	r3, [r3, #16]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d104      	bne.n	8015dea <HAL_UARTEx_ReceiveToIdle+0xa0>
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	22ff      	movs	r2, #255	@ 0xff
 8015de4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015de8:	e01b      	b.n	8015e22 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	227f      	movs	r2, #127	@ 0x7f
 8015dee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015df2:	e016      	b.n	8015e22 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	689b      	ldr	r3, [r3, #8]
 8015df8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015dfc:	d10d      	bne.n	8015e1a <HAL_UARTEx_ReceiveToIdle+0xd0>
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	691b      	ldr	r3, [r3, #16]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d104      	bne.n	8015e10 <HAL_UARTEx_ReceiveToIdle+0xc6>
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	227f      	movs	r2, #127	@ 0x7f
 8015e0a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015e0e:	e008      	b.n	8015e22 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	223f      	movs	r2, #63	@ 0x3f
 8015e14:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015e18:	e003      	b.n	8015e22 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	2200      	movs	r2, #0
 8015e1e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8015e28:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	689b      	ldr	r3, [r3, #8]
 8015e2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015e32:	d108      	bne.n	8015e46 <HAL_UARTEx_ReceiveToIdle+0xfc>
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	691b      	ldr	r3, [r3, #16]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d104      	bne.n	8015e46 <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015e40:	68bb      	ldr	r3, [r7, #8]
 8015e42:	61bb      	str	r3, [r7, #24]
 8015e44:	e003      	b.n	8015e4e <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 8015e46:	68bb      	ldr	r3, [r7, #8]
 8015e48:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8015e4e:	683b      	ldr	r3, [r7, #0]
 8015e50:	2200      	movs	r2, #0
 8015e52:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8015e54:	e060      	b.n	8015f18 <HAL_UARTEx_ReceiveToIdle+0x1ce>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	69db      	ldr	r3, [r3, #28]
 8015e5c:	f003 0310 	and.w	r3, r3, #16
 8015e60:	2b10      	cmp	r3, #16
 8015e62:	d110      	bne.n	8015e86 <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	2210      	movs	r2, #16
 8015e6a:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8015e6c:	683b      	ldr	r3, [r7, #0]
 8015e6e:	881b      	ldrh	r3, [r3, #0]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d008      	beq.n	8015e86 <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	2202      	movs	r2, #2
 8015e78:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	2220      	movs	r2, #32
 8015e7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_OK;
 8015e82:	2300      	movs	r3, #0
 8015e84:	e060      	b.n	8015f48 <HAL_UARTEx_ReceiveToIdle+0x1fe>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	69db      	ldr	r3, [r3, #28]
 8015e8c:	f003 0320 	and.w	r3, r3, #32
 8015e90:	2b20      	cmp	r3, #32
 8015e92:	d12c      	bne.n	8015eee <HAL_UARTEx_ReceiveToIdle+0x1a4>
      {
        if (pdata8bits == NULL)
 8015e94:	69fb      	ldr	r3, [r7, #28]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d10c      	bne.n	8015eb4 <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015ea0:	b29a      	uxth	r2, r3
 8015ea2:	8a7b      	ldrh	r3, [r7, #18]
 8015ea4:	4013      	ands	r3, r2
 8015ea6:	b29a      	uxth	r2, r3
 8015ea8:	69bb      	ldr	r3, [r7, #24]
 8015eaa:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8015eac:	69bb      	ldr	r3, [r7, #24]
 8015eae:	3302      	adds	r3, #2
 8015eb0:	61bb      	str	r3, [r7, #24]
 8015eb2:	e00d      	b.n	8015ed0 <HAL_UARTEx_ReceiveToIdle+0x186>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015eba:	b29b      	uxth	r3, r3
 8015ebc:	b2da      	uxtb	r2, r3
 8015ebe:	8a7b      	ldrh	r3, [r7, #18]
 8015ec0:	b2db      	uxtb	r3, r3
 8015ec2:	4013      	ands	r3, r2
 8015ec4:	b2da      	uxtb	r2, r3
 8015ec6:	69fb      	ldr	r3, [r7, #28]
 8015ec8:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 8015eca:	69fb      	ldr	r3, [r7, #28]
 8015ecc:	3301      	adds	r3, #1
 8015ece:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8015ed0:	683b      	ldr	r3, [r7, #0]
 8015ed2:	881b      	ldrh	r3, [r3, #0]
 8015ed4:	3301      	adds	r3, #1
 8015ed6:	b29a      	uxth	r2, r3
 8015ed8:	683b      	ldr	r3, [r7, #0]
 8015eda:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015ee2:	b29b      	uxth	r3, r3
 8015ee4:	3b01      	subs	r3, #1
 8015ee6:	b29a      	uxth	r2, r3
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8015eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ef4:	d010      	beq.n	8015f18 <HAL_UARTEx_ReceiveToIdle+0x1ce>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8015ef6:	f7f5 f8b9 	bl	800b06c <HAL_GetTick>
 8015efa:	4602      	mov	r2, r0
 8015efc:	697b      	ldr	r3, [r7, #20]
 8015efe:	1ad3      	subs	r3, r2, r3
 8015f00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015f02:	429a      	cmp	r2, r3
 8015f04:	d302      	bcc.n	8015f0c <HAL_UARTEx_ReceiveToIdle+0x1c2>
 8015f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d105      	bne.n	8015f18 <HAL_UARTEx_ReceiveToIdle+0x1ce>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	2220      	movs	r2, #32
 8015f10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8015f14:	2303      	movs	r3, #3
 8015f16:	e017      	b.n	8015f48 <HAL_UARTEx_ReceiveToIdle+0x1fe>
    while (huart->RxXferCount > 0U)
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015f1e:	b29b      	uxth	r3, r3
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d198      	bne.n	8015e56 <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015f30:	b29b      	uxth	r3, r3
 8015f32:	1ad3      	subs	r3, r2, r3
 8015f34:	b29a      	uxth	r2, r3
 8015f36:	683b      	ldr	r3, [r7, #0]
 8015f38:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	2220      	movs	r2, #32
 8015f3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8015f42:	2300      	movs	r3, #0
 8015f44:	e000      	b.n	8015f48 <HAL_UARTEx_ReceiveToIdle+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8015f46:	2302      	movs	r3, #2
  }
}
 8015f48:	4618      	mov	r0, r3
 8015f4a:	3720      	adds	r7, #32
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	bd80      	pop	{r7, pc}

08015f50 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015f50:	b580      	push	{r7, lr}
 8015f52:	b08c      	sub	sp, #48	@ 0x30
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	60f8      	str	r0, [r7, #12]
 8015f58:	60b9      	str	r1, [r7, #8]
 8015f5a:	4613      	mov	r3, r2
 8015f5c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015f64:	2b20      	cmp	r3, #32
 8015f66:	d142      	bne.n	8015fee <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8015f68:	68bb      	ldr	r3, [r7, #8]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d002      	beq.n	8015f74 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8015f6e:	88fb      	ldrh	r3, [r7, #6]
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d101      	bne.n	8015f78 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8015f74:	2301      	movs	r3, #1
 8015f76:	e03b      	b.n	8015ff0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	2201      	movs	r2, #1
 8015f7c:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	2200      	movs	r2, #0
 8015f82:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8015f84:	88fb      	ldrh	r3, [r7, #6]
 8015f86:	461a      	mov	r2, r3
 8015f88:	68b9      	ldr	r1, [r7, #8]
 8015f8a:	68f8      	ldr	r0, [r7, #12]
 8015f8c:	f7ff fc64 	bl	8015858 <UART_Start_Receive_DMA>
 8015f90:	4603      	mov	r3, r0
 8015f92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8015f96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d124      	bne.n	8015fe8 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015fa2:	2b01      	cmp	r3, #1
 8015fa4:	d11d      	bne.n	8015fe2 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	2210      	movs	r2, #16
 8015fac:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015fae:	68fb      	ldr	r3, [r7, #12]
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fb4:	69bb      	ldr	r3, [r7, #24]
 8015fb6:	e853 3f00 	ldrex	r3, [r3]
 8015fba:	617b      	str	r3, [r7, #20]
   return(result);
 8015fbc:	697b      	ldr	r3, [r7, #20]
 8015fbe:	f043 0310 	orr.w	r3, r3, #16
 8015fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	461a      	mov	r2, r3
 8015fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8015fce:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fd0:	6a39      	ldr	r1, [r7, #32]
 8015fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015fd4:	e841 2300 	strex	r3, r2, [r1]
 8015fd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8015fda:	69fb      	ldr	r3, [r7, #28]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d1e6      	bne.n	8015fae <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8015fe0:	e002      	b.n	8015fe8 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8015fe2:	2301      	movs	r3, #1
 8015fe4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8015fe8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015fec:	e000      	b.n	8015ff0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8015fee:	2302      	movs	r3, #2
  }
}
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	3730      	adds	r7, #48	@ 0x30
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	bd80      	pop	{r7, pc}

08015ff8 <atoi>:
 8015ff8:	220a      	movs	r2, #10
 8015ffa:	2100      	movs	r1, #0
 8015ffc:	f000 b87c 	b.w	80160f8 <strtol>

08016000 <_strtol_l.isra.0>:
 8016000:	2b24      	cmp	r3, #36	@ 0x24
 8016002:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016006:	4686      	mov	lr, r0
 8016008:	4690      	mov	r8, r2
 801600a:	d801      	bhi.n	8016010 <_strtol_l.isra.0+0x10>
 801600c:	2b01      	cmp	r3, #1
 801600e:	d106      	bne.n	801601e <_strtol_l.isra.0+0x1e>
 8016010:	f000 f92c 	bl	801626c <__errno>
 8016014:	2316      	movs	r3, #22
 8016016:	6003      	str	r3, [r0, #0]
 8016018:	2000      	movs	r0, #0
 801601a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801601e:	4834      	ldr	r0, [pc, #208]	@ (80160f0 <_strtol_l.isra.0+0xf0>)
 8016020:	460d      	mov	r5, r1
 8016022:	462a      	mov	r2, r5
 8016024:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016028:	5d06      	ldrb	r6, [r0, r4]
 801602a:	f016 0608 	ands.w	r6, r6, #8
 801602e:	d1f8      	bne.n	8016022 <_strtol_l.isra.0+0x22>
 8016030:	2c2d      	cmp	r4, #45	@ 0x2d
 8016032:	d110      	bne.n	8016056 <_strtol_l.isra.0+0x56>
 8016034:	782c      	ldrb	r4, [r5, #0]
 8016036:	2601      	movs	r6, #1
 8016038:	1c95      	adds	r5, r2, #2
 801603a:	f033 0210 	bics.w	r2, r3, #16
 801603e:	d115      	bne.n	801606c <_strtol_l.isra.0+0x6c>
 8016040:	2c30      	cmp	r4, #48	@ 0x30
 8016042:	d10d      	bne.n	8016060 <_strtol_l.isra.0+0x60>
 8016044:	782a      	ldrb	r2, [r5, #0]
 8016046:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801604a:	2a58      	cmp	r2, #88	@ 0x58
 801604c:	d108      	bne.n	8016060 <_strtol_l.isra.0+0x60>
 801604e:	786c      	ldrb	r4, [r5, #1]
 8016050:	3502      	adds	r5, #2
 8016052:	2310      	movs	r3, #16
 8016054:	e00a      	b.n	801606c <_strtol_l.isra.0+0x6c>
 8016056:	2c2b      	cmp	r4, #43	@ 0x2b
 8016058:	bf04      	itt	eq
 801605a:	782c      	ldrbeq	r4, [r5, #0]
 801605c:	1c95      	addeq	r5, r2, #2
 801605e:	e7ec      	b.n	801603a <_strtol_l.isra.0+0x3a>
 8016060:	2b00      	cmp	r3, #0
 8016062:	d1f6      	bne.n	8016052 <_strtol_l.isra.0+0x52>
 8016064:	2c30      	cmp	r4, #48	@ 0x30
 8016066:	bf14      	ite	ne
 8016068:	230a      	movne	r3, #10
 801606a:	2308      	moveq	r3, #8
 801606c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016070:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016074:	2200      	movs	r2, #0
 8016076:	fbbc f9f3 	udiv	r9, ip, r3
 801607a:	4610      	mov	r0, r2
 801607c:	fb03 ca19 	mls	sl, r3, r9, ip
 8016080:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8016084:	2f09      	cmp	r7, #9
 8016086:	d80f      	bhi.n	80160a8 <_strtol_l.isra.0+0xa8>
 8016088:	463c      	mov	r4, r7
 801608a:	42a3      	cmp	r3, r4
 801608c:	dd1b      	ble.n	80160c6 <_strtol_l.isra.0+0xc6>
 801608e:	1c57      	adds	r7, r2, #1
 8016090:	d007      	beq.n	80160a2 <_strtol_l.isra.0+0xa2>
 8016092:	4581      	cmp	r9, r0
 8016094:	d314      	bcc.n	80160c0 <_strtol_l.isra.0+0xc0>
 8016096:	d101      	bne.n	801609c <_strtol_l.isra.0+0x9c>
 8016098:	45a2      	cmp	sl, r4
 801609a:	db11      	blt.n	80160c0 <_strtol_l.isra.0+0xc0>
 801609c:	fb00 4003 	mla	r0, r0, r3, r4
 80160a0:	2201      	movs	r2, #1
 80160a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80160a6:	e7eb      	b.n	8016080 <_strtol_l.isra.0+0x80>
 80160a8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80160ac:	2f19      	cmp	r7, #25
 80160ae:	d801      	bhi.n	80160b4 <_strtol_l.isra.0+0xb4>
 80160b0:	3c37      	subs	r4, #55	@ 0x37
 80160b2:	e7ea      	b.n	801608a <_strtol_l.isra.0+0x8a>
 80160b4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80160b8:	2f19      	cmp	r7, #25
 80160ba:	d804      	bhi.n	80160c6 <_strtol_l.isra.0+0xc6>
 80160bc:	3c57      	subs	r4, #87	@ 0x57
 80160be:	e7e4      	b.n	801608a <_strtol_l.isra.0+0x8a>
 80160c0:	f04f 32ff 	mov.w	r2, #4294967295
 80160c4:	e7ed      	b.n	80160a2 <_strtol_l.isra.0+0xa2>
 80160c6:	1c53      	adds	r3, r2, #1
 80160c8:	d108      	bne.n	80160dc <_strtol_l.isra.0+0xdc>
 80160ca:	2322      	movs	r3, #34	@ 0x22
 80160cc:	f8ce 3000 	str.w	r3, [lr]
 80160d0:	4660      	mov	r0, ip
 80160d2:	f1b8 0f00 	cmp.w	r8, #0
 80160d6:	d0a0      	beq.n	801601a <_strtol_l.isra.0+0x1a>
 80160d8:	1e69      	subs	r1, r5, #1
 80160da:	e006      	b.n	80160ea <_strtol_l.isra.0+0xea>
 80160dc:	b106      	cbz	r6, 80160e0 <_strtol_l.isra.0+0xe0>
 80160de:	4240      	negs	r0, r0
 80160e0:	f1b8 0f00 	cmp.w	r8, #0
 80160e4:	d099      	beq.n	801601a <_strtol_l.isra.0+0x1a>
 80160e6:	2a00      	cmp	r2, #0
 80160e8:	d1f6      	bne.n	80160d8 <_strtol_l.isra.0+0xd8>
 80160ea:	f8c8 1000 	str.w	r1, [r8]
 80160ee:	e794      	b.n	801601a <_strtol_l.isra.0+0x1a>
 80160f0:	08017a3b 	.word	0x08017a3b

080160f4 <_strtol_r>:
 80160f4:	f7ff bf84 	b.w	8016000 <_strtol_l.isra.0>

080160f8 <strtol>:
 80160f8:	4613      	mov	r3, r2
 80160fa:	460a      	mov	r2, r1
 80160fc:	4601      	mov	r1, r0
 80160fe:	4802      	ldr	r0, [pc, #8]	@ (8016108 <strtol+0x10>)
 8016100:	6800      	ldr	r0, [r0, #0]
 8016102:	f7ff bf7d 	b.w	8016000 <_strtol_l.isra.0>
 8016106:	bf00      	nop
 8016108:	2000029c 	.word	0x2000029c

0801610c <siprintf>:
 801610c:	b40e      	push	{r1, r2, r3}
 801610e:	b510      	push	{r4, lr}
 8016110:	b09d      	sub	sp, #116	@ 0x74
 8016112:	ab1f      	add	r3, sp, #124	@ 0x7c
 8016114:	9002      	str	r0, [sp, #8]
 8016116:	9006      	str	r0, [sp, #24]
 8016118:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801611c:	480a      	ldr	r0, [pc, #40]	@ (8016148 <siprintf+0x3c>)
 801611e:	9107      	str	r1, [sp, #28]
 8016120:	9104      	str	r1, [sp, #16]
 8016122:	490a      	ldr	r1, [pc, #40]	@ (801614c <siprintf+0x40>)
 8016124:	f853 2b04 	ldr.w	r2, [r3], #4
 8016128:	9105      	str	r1, [sp, #20]
 801612a:	2400      	movs	r4, #0
 801612c:	a902      	add	r1, sp, #8
 801612e:	6800      	ldr	r0, [r0, #0]
 8016130:	9301      	str	r3, [sp, #4]
 8016132:	941b      	str	r4, [sp, #108]	@ 0x6c
 8016134:	f000 fa30 	bl	8016598 <_svfiprintf_r>
 8016138:	9b02      	ldr	r3, [sp, #8]
 801613a:	701c      	strb	r4, [r3, #0]
 801613c:	b01d      	add	sp, #116	@ 0x74
 801613e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016142:	b003      	add	sp, #12
 8016144:	4770      	bx	lr
 8016146:	bf00      	nop
 8016148:	2000029c 	.word	0x2000029c
 801614c:	ffff0208 	.word	0xffff0208

08016150 <siscanf>:
 8016150:	b40e      	push	{r1, r2, r3}
 8016152:	b570      	push	{r4, r5, r6, lr}
 8016154:	b09d      	sub	sp, #116	@ 0x74
 8016156:	ac21      	add	r4, sp, #132	@ 0x84
 8016158:	2500      	movs	r5, #0
 801615a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801615e:	f854 6b04 	ldr.w	r6, [r4], #4
 8016162:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016166:	951b      	str	r5, [sp, #108]	@ 0x6c
 8016168:	9002      	str	r0, [sp, #8]
 801616a:	9006      	str	r0, [sp, #24]
 801616c:	f7ea f83a 	bl	80001e4 <strlen>
 8016170:	4b0b      	ldr	r3, [pc, #44]	@ (80161a0 <siscanf+0x50>)
 8016172:	9003      	str	r0, [sp, #12]
 8016174:	9007      	str	r0, [sp, #28]
 8016176:	480b      	ldr	r0, [pc, #44]	@ (80161a4 <siscanf+0x54>)
 8016178:	930b      	str	r3, [sp, #44]	@ 0x2c
 801617a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801617e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016182:	4632      	mov	r2, r6
 8016184:	4623      	mov	r3, r4
 8016186:	a902      	add	r1, sp, #8
 8016188:	6800      	ldr	r0, [r0, #0]
 801618a:	950f      	str	r5, [sp, #60]	@ 0x3c
 801618c:	9514      	str	r5, [sp, #80]	@ 0x50
 801618e:	9401      	str	r4, [sp, #4]
 8016190:	f000 fb58 	bl	8016844 <__ssvfiscanf_r>
 8016194:	b01d      	add	sp, #116	@ 0x74
 8016196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801619a:	b003      	add	sp, #12
 801619c:	4770      	bx	lr
 801619e:	bf00      	nop
 80161a0:	080161a9 	.word	0x080161a9
 80161a4:	2000029c 	.word	0x2000029c

080161a8 <__seofread>:
 80161a8:	2000      	movs	r0, #0
 80161aa:	4770      	bx	lr

080161ac <memcmp>:
 80161ac:	b510      	push	{r4, lr}
 80161ae:	3901      	subs	r1, #1
 80161b0:	4402      	add	r2, r0
 80161b2:	4290      	cmp	r0, r2
 80161b4:	d101      	bne.n	80161ba <memcmp+0xe>
 80161b6:	2000      	movs	r0, #0
 80161b8:	e005      	b.n	80161c6 <memcmp+0x1a>
 80161ba:	7803      	ldrb	r3, [r0, #0]
 80161bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80161c0:	42a3      	cmp	r3, r4
 80161c2:	d001      	beq.n	80161c8 <memcmp+0x1c>
 80161c4:	1b18      	subs	r0, r3, r4
 80161c6:	bd10      	pop	{r4, pc}
 80161c8:	3001      	adds	r0, #1
 80161ca:	e7f2      	b.n	80161b2 <memcmp+0x6>

080161cc <memset>:
 80161cc:	4402      	add	r2, r0
 80161ce:	4603      	mov	r3, r0
 80161d0:	4293      	cmp	r3, r2
 80161d2:	d100      	bne.n	80161d6 <memset+0xa>
 80161d4:	4770      	bx	lr
 80161d6:	f803 1b01 	strb.w	r1, [r3], #1
 80161da:	e7f9      	b.n	80161d0 <memset+0x4>

080161dc <strchr>:
 80161dc:	b2c9      	uxtb	r1, r1
 80161de:	4603      	mov	r3, r0
 80161e0:	4618      	mov	r0, r3
 80161e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80161e6:	b112      	cbz	r2, 80161ee <strchr+0x12>
 80161e8:	428a      	cmp	r2, r1
 80161ea:	d1f9      	bne.n	80161e0 <strchr+0x4>
 80161ec:	4770      	bx	lr
 80161ee:	2900      	cmp	r1, #0
 80161f0:	bf18      	it	ne
 80161f2:	2000      	movne	r0, #0
 80161f4:	4770      	bx	lr

080161f6 <strncmp>:
 80161f6:	b510      	push	{r4, lr}
 80161f8:	b16a      	cbz	r2, 8016216 <strncmp+0x20>
 80161fa:	3901      	subs	r1, #1
 80161fc:	1884      	adds	r4, r0, r2
 80161fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016202:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016206:	429a      	cmp	r2, r3
 8016208:	d103      	bne.n	8016212 <strncmp+0x1c>
 801620a:	42a0      	cmp	r0, r4
 801620c:	d001      	beq.n	8016212 <strncmp+0x1c>
 801620e:	2a00      	cmp	r2, #0
 8016210:	d1f5      	bne.n	80161fe <strncmp+0x8>
 8016212:	1ad0      	subs	r0, r2, r3
 8016214:	bd10      	pop	{r4, pc}
 8016216:	4610      	mov	r0, r2
 8016218:	e7fc      	b.n	8016214 <strncmp+0x1e>

0801621a <strncpy>:
 801621a:	b510      	push	{r4, lr}
 801621c:	3901      	subs	r1, #1
 801621e:	4603      	mov	r3, r0
 8016220:	b132      	cbz	r2, 8016230 <strncpy+0x16>
 8016222:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016226:	f803 4b01 	strb.w	r4, [r3], #1
 801622a:	3a01      	subs	r2, #1
 801622c:	2c00      	cmp	r4, #0
 801622e:	d1f7      	bne.n	8016220 <strncpy+0x6>
 8016230:	441a      	add	r2, r3
 8016232:	2100      	movs	r1, #0
 8016234:	4293      	cmp	r3, r2
 8016236:	d100      	bne.n	801623a <strncpy+0x20>
 8016238:	bd10      	pop	{r4, pc}
 801623a:	f803 1b01 	strb.w	r1, [r3], #1
 801623e:	e7f9      	b.n	8016234 <strncpy+0x1a>

08016240 <strstr>:
 8016240:	780a      	ldrb	r2, [r1, #0]
 8016242:	b570      	push	{r4, r5, r6, lr}
 8016244:	b96a      	cbnz	r2, 8016262 <strstr+0x22>
 8016246:	bd70      	pop	{r4, r5, r6, pc}
 8016248:	429a      	cmp	r2, r3
 801624a:	d109      	bne.n	8016260 <strstr+0x20>
 801624c:	460c      	mov	r4, r1
 801624e:	4605      	mov	r5, r0
 8016250:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016254:	2b00      	cmp	r3, #0
 8016256:	d0f6      	beq.n	8016246 <strstr+0x6>
 8016258:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801625c:	429e      	cmp	r6, r3
 801625e:	d0f7      	beq.n	8016250 <strstr+0x10>
 8016260:	3001      	adds	r0, #1
 8016262:	7803      	ldrb	r3, [r0, #0]
 8016264:	2b00      	cmp	r3, #0
 8016266:	d1ef      	bne.n	8016248 <strstr+0x8>
 8016268:	4618      	mov	r0, r3
 801626a:	e7ec      	b.n	8016246 <strstr+0x6>

0801626c <__errno>:
 801626c:	4b01      	ldr	r3, [pc, #4]	@ (8016274 <__errno+0x8>)
 801626e:	6818      	ldr	r0, [r3, #0]
 8016270:	4770      	bx	lr
 8016272:	bf00      	nop
 8016274:	2000029c 	.word	0x2000029c

08016278 <__libc_init_array>:
 8016278:	b570      	push	{r4, r5, r6, lr}
 801627a:	4d0d      	ldr	r5, [pc, #52]	@ (80162b0 <__libc_init_array+0x38>)
 801627c:	4c0d      	ldr	r4, [pc, #52]	@ (80162b4 <__libc_init_array+0x3c>)
 801627e:	1b64      	subs	r4, r4, r5
 8016280:	10a4      	asrs	r4, r4, #2
 8016282:	2600      	movs	r6, #0
 8016284:	42a6      	cmp	r6, r4
 8016286:	d109      	bne.n	801629c <__libc_init_array+0x24>
 8016288:	4d0b      	ldr	r5, [pc, #44]	@ (80162b8 <__libc_init_array+0x40>)
 801628a:	4c0c      	ldr	r4, [pc, #48]	@ (80162bc <__libc_init_array+0x44>)
 801628c:	f001 f86e 	bl	801736c <_init>
 8016290:	1b64      	subs	r4, r4, r5
 8016292:	10a4      	asrs	r4, r4, #2
 8016294:	2600      	movs	r6, #0
 8016296:	42a6      	cmp	r6, r4
 8016298:	d105      	bne.n	80162a6 <__libc_init_array+0x2e>
 801629a:	bd70      	pop	{r4, r5, r6, pc}
 801629c:	f855 3b04 	ldr.w	r3, [r5], #4
 80162a0:	4798      	blx	r3
 80162a2:	3601      	adds	r6, #1
 80162a4:	e7ee      	b.n	8016284 <__libc_init_array+0xc>
 80162a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80162aa:	4798      	blx	r3
 80162ac:	3601      	adds	r6, #1
 80162ae:	e7f2      	b.n	8016296 <__libc_init_array+0x1e>
 80162b0:	08017b94 	.word	0x08017b94
 80162b4:	08017b94 	.word	0x08017b94
 80162b8:	08017b94 	.word	0x08017b94
 80162bc:	08017b98 	.word	0x08017b98

080162c0 <__retarget_lock_acquire_recursive>:
 80162c0:	4770      	bx	lr

080162c2 <__retarget_lock_release_recursive>:
 80162c2:	4770      	bx	lr

080162c4 <strcpy>:
 80162c4:	4603      	mov	r3, r0
 80162c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80162ca:	f803 2b01 	strb.w	r2, [r3], #1
 80162ce:	2a00      	cmp	r2, #0
 80162d0:	d1f9      	bne.n	80162c6 <strcpy+0x2>
 80162d2:	4770      	bx	lr

080162d4 <memcpy>:
 80162d4:	440a      	add	r2, r1
 80162d6:	4291      	cmp	r1, r2
 80162d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80162dc:	d100      	bne.n	80162e0 <memcpy+0xc>
 80162de:	4770      	bx	lr
 80162e0:	b510      	push	{r4, lr}
 80162e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80162e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80162ea:	4291      	cmp	r1, r2
 80162ec:	d1f9      	bne.n	80162e2 <memcpy+0xe>
 80162ee:	bd10      	pop	{r4, pc}

080162f0 <_free_r>:
 80162f0:	b538      	push	{r3, r4, r5, lr}
 80162f2:	4605      	mov	r5, r0
 80162f4:	2900      	cmp	r1, #0
 80162f6:	d041      	beq.n	801637c <_free_r+0x8c>
 80162f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80162fc:	1f0c      	subs	r4, r1, #4
 80162fe:	2b00      	cmp	r3, #0
 8016300:	bfb8      	it	lt
 8016302:	18e4      	addlt	r4, r4, r3
 8016304:	f000 f8e0 	bl	80164c8 <__malloc_lock>
 8016308:	4a1d      	ldr	r2, [pc, #116]	@ (8016380 <_free_r+0x90>)
 801630a:	6813      	ldr	r3, [r2, #0]
 801630c:	b933      	cbnz	r3, 801631c <_free_r+0x2c>
 801630e:	6063      	str	r3, [r4, #4]
 8016310:	6014      	str	r4, [r2, #0]
 8016312:	4628      	mov	r0, r5
 8016314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016318:	f000 b8dc 	b.w	80164d4 <__malloc_unlock>
 801631c:	42a3      	cmp	r3, r4
 801631e:	d908      	bls.n	8016332 <_free_r+0x42>
 8016320:	6820      	ldr	r0, [r4, #0]
 8016322:	1821      	adds	r1, r4, r0
 8016324:	428b      	cmp	r3, r1
 8016326:	bf01      	itttt	eq
 8016328:	6819      	ldreq	r1, [r3, #0]
 801632a:	685b      	ldreq	r3, [r3, #4]
 801632c:	1809      	addeq	r1, r1, r0
 801632e:	6021      	streq	r1, [r4, #0]
 8016330:	e7ed      	b.n	801630e <_free_r+0x1e>
 8016332:	461a      	mov	r2, r3
 8016334:	685b      	ldr	r3, [r3, #4]
 8016336:	b10b      	cbz	r3, 801633c <_free_r+0x4c>
 8016338:	42a3      	cmp	r3, r4
 801633a:	d9fa      	bls.n	8016332 <_free_r+0x42>
 801633c:	6811      	ldr	r1, [r2, #0]
 801633e:	1850      	adds	r0, r2, r1
 8016340:	42a0      	cmp	r0, r4
 8016342:	d10b      	bne.n	801635c <_free_r+0x6c>
 8016344:	6820      	ldr	r0, [r4, #0]
 8016346:	4401      	add	r1, r0
 8016348:	1850      	adds	r0, r2, r1
 801634a:	4283      	cmp	r3, r0
 801634c:	6011      	str	r1, [r2, #0]
 801634e:	d1e0      	bne.n	8016312 <_free_r+0x22>
 8016350:	6818      	ldr	r0, [r3, #0]
 8016352:	685b      	ldr	r3, [r3, #4]
 8016354:	6053      	str	r3, [r2, #4]
 8016356:	4408      	add	r0, r1
 8016358:	6010      	str	r0, [r2, #0]
 801635a:	e7da      	b.n	8016312 <_free_r+0x22>
 801635c:	d902      	bls.n	8016364 <_free_r+0x74>
 801635e:	230c      	movs	r3, #12
 8016360:	602b      	str	r3, [r5, #0]
 8016362:	e7d6      	b.n	8016312 <_free_r+0x22>
 8016364:	6820      	ldr	r0, [r4, #0]
 8016366:	1821      	adds	r1, r4, r0
 8016368:	428b      	cmp	r3, r1
 801636a:	bf04      	itt	eq
 801636c:	6819      	ldreq	r1, [r3, #0]
 801636e:	685b      	ldreq	r3, [r3, #4]
 8016370:	6063      	str	r3, [r4, #4]
 8016372:	bf04      	itt	eq
 8016374:	1809      	addeq	r1, r1, r0
 8016376:	6021      	streq	r1, [r4, #0]
 8016378:	6054      	str	r4, [r2, #4]
 801637a:	e7ca      	b.n	8016312 <_free_r+0x22>
 801637c:	bd38      	pop	{r3, r4, r5, pc}
 801637e:	bf00      	nop
 8016380:	20005f54 	.word	0x20005f54

08016384 <sbrk_aligned>:
 8016384:	b570      	push	{r4, r5, r6, lr}
 8016386:	4e0f      	ldr	r6, [pc, #60]	@ (80163c4 <sbrk_aligned+0x40>)
 8016388:	460c      	mov	r4, r1
 801638a:	6831      	ldr	r1, [r6, #0]
 801638c:	4605      	mov	r5, r0
 801638e:	b911      	cbnz	r1, 8016396 <sbrk_aligned+0x12>
 8016390:	f000 ff36 	bl	8017200 <_sbrk_r>
 8016394:	6030      	str	r0, [r6, #0]
 8016396:	4621      	mov	r1, r4
 8016398:	4628      	mov	r0, r5
 801639a:	f000 ff31 	bl	8017200 <_sbrk_r>
 801639e:	1c43      	adds	r3, r0, #1
 80163a0:	d103      	bne.n	80163aa <sbrk_aligned+0x26>
 80163a2:	f04f 34ff 	mov.w	r4, #4294967295
 80163a6:	4620      	mov	r0, r4
 80163a8:	bd70      	pop	{r4, r5, r6, pc}
 80163aa:	1cc4      	adds	r4, r0, #3
 80163ac:	f024 0403 	bic.w	r4, r4, #3
 80163b0:	42a0      	cmp	r0, r4
 80163b2:	d0f8      	beq.n	80163a6 <sbrk_aligned+0x22>
 80163b4:	1a21      	subs	r1, r4, r0
 80163b6:	4628      	mov	r0, r5
 80163b8:	f000 ff22 	bl	8017200 <_sbrk_r>
 80163bc:	3001      	adds	r0, #1
 80163be:	d1f2      	bne.n	80163a6 <sbrk_aligned+0x22>
 80163c0:	e7ef      	b.n	80163a2 <sbrk_aligned+0x1e>
 80163c2:	bf00      	nop
 80163c4:	20005f50 	.word	0x20005f50

080163c8 <_malloc_r>:
 80163c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163cc:	1ccd      	adds	r5, r1, #3
 80163ce:	f025 0503 	bic.w	r5, r5, #3
 80163d2:	3508      	adds	r5, #8
 80163d4:	2d0c      	cmp	r5, #12
 80163d6:	bf38      	it	cc
 80163d8:	250c      	movcc	r5, #12
 80163da:	2d00      	cmp	r5, #0
 80163dc:	4606      	mov	r6, r0
 80163de:	db01      	blt.n	80163e4 <_malloc_r+0x1c>
 80163e0:	42a9      	cmp	r1, r5
 80163e2:	d904      	bls.n	80163ee <_malloc_r+0x26>
 80163e4:	230c      	movs	r3, #12
 80163e6:	6033      	str	r3, [r6, #0]
 80163e8:	2000      	movs	r0, #0
 80163ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80163ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80164c4 <_malloc_r+0xfc>
 80163f2:	f000 f869 	bl	80164c8 <__malloc_lock>
 80163f6:	f8d8 3000 	ldr.w	r3, [r8]
 80163fa:	461c      	mov	r4, r3
 80163fc:	bb44      	cbnz	r4, 8016450 <_malloc_r+0x88>
 80163fe:	4629      	mov	r1, r5
 8016400:	4630      	mov	r0, r6
 8016402:	f7ff ffbf 	bl	8016384 <sbrk_aligned>
 8016406:	1c43      	adds	r3, r0, #1
 8016408:	4604      	mov	r4, r0
 801640a:	d158      	bne.n	80164be <_malloc_r+0xf6>
 801640c:	f8d8 4000 	ldr.w	r4, [r8]
 8016410:	4627      	mov	r7, r4
 8016412:	2f00      	cmp	r7, #0
 8016414:	d143      	bne.n	801649e <_malloc_r+0xd6>
 8016416:	2c00      	cmp	r4, #0
 8016418:	d04b      	beq.n	80164b2 <_malloc_r+0xea>
 801641a:	6823      	ldr	r3, [r4, #0]
 801641c:	4639      	mov	r1, r7
 801641e:	4630      	mov	r0, r6
 8016420:	eb04 0903 	add.w	r9, r4, r3
 8016424:	f000 feec 	bl	8017200 <_sbrk_r>
 8016428:	4581      	cmp	r9, r0
 801642a:	d142      	bne.n	80164b2 <_malloc_r+0xea>
 801642c:	6821      	ldr	r1, [r4, #0]
 801642e:	1a6d      	subs	r5, r5, r1
 8016430:	4629      	mov	r1, r5
 8016432:	4630      	mov	r0, r6
 8016434:	f7ff ffa6 	bl	8016384 <sbrk_aligned>
 8016438:	3001      	adds	r0, #1
 801643a:	d03a      	beq.n	80164b2 <_malloc_r+0xea>
 801643c:	6823      	ldr	r3, [r4, #0]
 801643e:	442b      	add	r3, r5
 8016440:	6023      	str	r3, [r4, #0]
 8016442:	f8d8 3000 	ldr.w	r3, [r8]
 8016446:	685a      	ldr	r2, [r3, #4]
 8016448:	bb62      	cbnz	r2, 80164a4 <_malloc_r+0xdc>
 801644a:	f8c8 7000 	str.w	r7, [r8]
 801644e:	e00f      	b.n	8016470 <_malloc_r+0xa8>
 8016450:	6822      	ldr	r2, [r4, #0]
 8016452:	1b52      	subs	r2, r2, r5
 8016454:	d420      	bmi.n	8016498 <_malloc_r+0xd0>
 8016456:	2a0b      	cmp	r2, #11
 8016458:	d917      	bls.n	801648a <_malloc_r+0xc2>
 801645a:	1961      	adds	r1, r4, r5
 801645c:	42a3      	cmp	r3, r4
 801645e:	6025      	str	r5, [r4, #0]
 8016460:	bf18      	it	ne
 8016462:	6059      	strne	r1, [r3, #4]
 8016464:	6863      	ldr	r3, [r4, #4]
 8016466:	bf08      	it	eq
 8016468:	f8c8 1000 	streq.w	r1, [r8]
 801646c:	5162      	str	r2, [r4, r5]
 801646e:	604b      	str	r3, [r1, #4]
 8016470:	4630      	mov	r0, r6
 8016472:	f000 f82f 	bl	80164d4 <__malloc_unlock>
 8016476:	f104 000b 	add.w	r0, r4, #11
 801647a:	1d23      	adds	r3, r4, #4
 801647c:	f020 0007 	bic.w	r0, r0, #7
 8016480:	1ac2      	subs	r2, r0, r3
 8016482:	bf1c      	itt	ne
 8016484:	1a1b      	subne	r3, r3, r0
 8016486:	50a3      	strne	r3, [r4, r2]
 8016488:	e7af      	b.n	80163ea <_malloc_r+0x22>
 801648a:	6862      	ldr	r2, [r4, #4]
 801648c:	42a3      	cmp	r3, r4
 801648e:	bf0c      	ite	eq
 8016490:	f8c8 2000 	streq.w	r2, [r8]
 8016494:	605a      	strne	r2, [r3, #4]
 8016496:	e7eb      	b.n	8016470 <_malloc_r+0xa8>
 8016498:	4623      	mov	r3, r4
 801649a:	6864      	ldr	r4, [r4, #4]
 801649c:	e7ae      	b.n	80163fc <_malloc_r+0x34>
 801649e:	463c      	mov	r4, r7
 80164a0:	687f      	ldr	r7, [r7, #4]
 80164a2:	e7b6      	b.n	8016412 <_malloc_r+0x4a>
 80164a4:	461a      	mov	r2, r3
 80164a6:	685b      	ldr	r3, [r3, #4]
 80164a8:	42a3      	cmp	r3, r4
 80164aa:	d1fb      	bne.n	80164a4 <_malloc_r+0xdc>
 80164ac:	2300      	movs	r3, #0
 80164ae:	6053      	str	r3, [r2, #4]
 80164b0:	e7de      	b.n	8016470 <_malloc_r+0xa8>
 80164b2:	230c      	movs	r3, #12
 80164b4:	6033      	str	r3, [r6, #0]
 80164b6:	4630      	mov	r0, r6
 80164b8:	f000 f80c 	bl	80164d4 <__malloc_unlock>
 80164bc:	e794      	b.n	80163e8 <_malloc_r+0x20>
 80164be:	6005      	str	r5, [r0, #0]
 80164c0:	e7d6      	b.n	8016470 <_malloc_r+0xa8>
 80164c2:	bf00      	nop
 80164c4:	20005f54 	.word	0x20005f54

080164c8 <__malloc_lock>:
 80164c8:	4801      	ldr	r0, [pc, #4]	@ (80164d0 <__malloc_lock+0x8>)
 80164ca:	f7ff bef9 	b.w	80162c0 <__retarget_lock_acquire_recursive>
 80164ce:	bf00      	nop
 80164d0:	20005f4c 	.word	0x20005f4c

080164d4 <__malloc_unlock>:
 80164d4:	4801      	ldr	r0, [pc, #4]	@ (80164dc <__malloc_unlock+0x8>)
 80164d6:	f7ff bef4 	b.w	80162c2 <__retarget_lock_release_recursive>
 80164da:	bf00      	nop
 80164dc:	20005f4c 	.word	0x20005f4c

080164e0 <__ssputs_r>:
 80164e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164e4:	688e      	ldr	r6, [r1, #8]
 80164e6:	461f      	mov	r7, r3
 80164e8:	42be      	cmp	r6, r7
 80164ea:	680b      	ldr	r3, [r1, #0]
 80164ec:	4682      	mov	sl, r0
 80164ee:	460c      	mov	r4, r1
 80164f0:	4690      	mov	r8, r2
 80164f2:	d82d      	bhi.n	8016550 <__ssputs_r+0x70>
 80164f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80164f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80164fc:	d026      	beq.n	801654c <__ssputs_r+0x6c>
 80164fe:	6965      	ldr	r5, [r4, #20]
 8016500:	6909      	ldr	r1, [r1, #16]
 8016502:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016506:	eba3 0901 	sub.w	r9, r3, r1
 801650a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801650e:	1c7b      	adds	r3, r7, #1
 8016510:	444b      	add	r3, r9
 8016512:	106d      	asrs	r5, r5, #1
 8016514:	429d      	cmp	r5, r3
 8016516:	bf38      	it	cc
 8016518:	461d      	movcc	r5, r3
 801651a:	0553      	lsls	r3, r2, #21
 801651c:	d527      	bpl.n	801656e <__ssputs_r+0x8e>
 801651e:	4629      	mov	r1, r5
 8016520:	f7ff ff52 	bl	80163c8 <_malloc_r>
 8016524:	4606      	mov	r6, r0
 8016526:	b360      	cbz	r0, 8016582 <__ssputs_r+0xa2>
 8016528:	6921      	ldr	r1, [r4, #16]
 801652a:	464a      	mov	r2, r9
 801652c:	f7ff fed2 	bl	80162d4 <memcpy>
 8016530:	89a3      	ldrh	r3, [r4, #12]
 8016532:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801653a:	81a3      	strh	r3, [r4, #12]
 801653c:	6126      	str	r6, [r4, #16]
 801653e:	6165      	str	r5, [r4, #20]
 8016540:	444e      	add	r6, r9
 8016542:	eba5 0509 	sub.w	r5, r5, r9
 8016546:	6026      	str	r6, [r4, #0]
 8016548:	60a5      	str	r5, [r4, #8]
 801654a:	463e      	mov	r6, r7
 801654c:	42be      	cmp	r6, r7
 801654e:	d900      	bls.n	8016552 <__ssputs_r+0x72>
 8016550:	463e      	mov	r6, r7
 8016552:	6820      	ldr	r0, [r4, #0]
 8016554:	4632      	mov	r2, r6
 8016556:	4641      	mov	r1, r8
 8016558:	f000 fe37 	bl	80171ca <memmove>
 801655c:	68a3      	ldr	r3, [r4, #8]
 801655e:	1b9b      	subs	r3, r3, r6
 8016560:	60a3      	str	r3, [r4, #8]
 8016562:	6823      	ldr	r3, [r4, #0]
 8016564:	4433      	add	r3, r6
 8016566:	6023      	str	r3, [r4, #0]
 8016568:	2000      	movs	r0, #0
 801656a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801656e:	462a      	mov	r2, r5
 8016570:	f000 fe56 	bl	8017220 <_realloc_r>
 8016574:	4606      	mov	r6, r0
 8016576:	2800      	cmp	r0, #0
 8016578:	d1e0      	bne.n	801653c <__ssputs_r+0x5c>
 801657a:	6921      	ldr	r1, [r4, #16]
 801657c:	4650      	mov	r0, sl
 801657e:	f7ff feb7 	bl	80162f0 <_free_r>
 8016582:	230c      	movs	r3, #12
 8016584:	f8ca 3000 	str.w	r3, [sl]
 8016588:	89a3      	ldrh	r3, [r4, #12]
 801658a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801658e:	81a3      	strh	r3, [r4, #12]
 8016590:	f04f 30ff 	mov.w	r0, #4294967295
 8016594:	e7e9      	b.n	801656a <__ssputs_r+0x8a>
	...

08016598 <_svfiprintf_r>:
 8016598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801659c:	4698      	mov	r8, r3
 801659e:	898b      	ldrh	r3, [r1, #12]
 80165a0:	061b      	lsls	r3, r3, #24
 80165a2:	b09d      	sub	sp, #116	@ 0x74
 80165a4:	4607      	mov	r7, r0
 80165a6:	460d      	mov	r5, r1
 80165a8:	4614      	mov	r4, r2
 80165aa:	d510      	bpl.n	80165ce <_svfiprintf_r+0x36>
 80165ac:	690b      	ldr	r3, [r1, #16]
 80165ae:	b973      	cbnz	r3, 80165ce <_svfiprintf_r+0x36>
 80165b0:	2140      	movs	r1, #64	@ 0x40
 80165b2:	f7ff ff09 	bl	80163c8 <_malloc_r>
 80165b6:	6028      	str	r0, [r5, #0]
 80165b8:	6128      	str	r0, [r5, #16]
 80165ba:	b930      	cbnz	r0, 80165ca <_svfiprintf_r+0x32>
 80165bc:	230c      	movs	r3, #12
 80165be:	603b      	str	r3, [r7, #0]
 80165c0:	f04f 30ff 	mov.w	r0, #4294967295
 80165c4:	b01d      	add	sp, #116	@ 0x74
 80165c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165ca:	2340      	movs	r3, #64	@ 0x40
 80165cc:	616b      	str	r3, [r5, #20]
 80165ce:	2300      	movs	r3, #0
 80165d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80165d2:	2320      	movs	r3, #32
 80165d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80165d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80165dc:	2330      	movs	r3, #48	@ 0x30
 80165de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801677c <_svfiprintf_r+0x1e4>
 80165e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80165e6:	f04f 0901 	mov.w	r9, #1
 80165ea:	4623      	mov	r3, r4
 80165ec:	469a      	mov	sl, r3
 80165ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80165f2:	b10a      	cbz	r2, 80165f8 <_svfiprintf_r+0x60>
 80165f4:	2a25      	cmp	r2, #37	@ 0x25
 80165f6:	d1f9      	bne.n	80165ec <_svfiprintf_r+0x54>
 80165f8:	ebba 0b04 	subs.w	fp, sl, r4
 80165fc:	d00b      	beq.n	8016616 <_svfiprintf_r+0x7e>
 80165fe:	465b      	mov	r3, fp
 8016600:	4622      	mov	r2, r4
 8016602:	4629      	mov	r1, r5
 8016604:	4638      	mov	r0, r7
 8016606:	f7ff ff6b 	bl	80164e0 <__ssputs_r>
 801660a:	3001      	adds	r0, #1
 801660c:	f000 80a7 	beq.w	801675e <_svfiprintf_r+0x1c6>
 8016610:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016612:	445a      	add	r2, fp
 8016614:	9209      	str	r2, [sp, #36]	@ 0x24
 8016616:	f89a 3000 	ldrb.w	r3, [sl]
 801661a:	2b00      	cmp	r3, #0
 801661c:	f000 809f 	beq.w	801675e <_svfiprintf_r+0x1c6>
 8016620:	2300      	movs	r3, #0
 8016622:	f04f 32ff 	mov.w	r2, #4294967295
 8016626:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801662a:	f10a 0a01 	add.w	sl, sl, #1
 801662e:	9304      	str	r3, [sp, #16]
 8016630:	9307      	str	r3, [sp, #28]
 8016632:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016636:	931a      	str	r3, [sp, #104]	@ 0x68
 8016638:	4654      	mov	r4, sl
 801663a:	2205      	movs	r2, #5
 801663c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016640:	484e      	ldr	r0, [pc, #312]	@ (801677c <_svfiprintf_r+0x1e4>)
 8016642:	f7e9 fddd 	bl	8000200 <memchr>
 8016646:	9a04      	ldr	r2, [sp, #16]
 8016648:	b9d8      	cbnz	r0, 8016682 <_svfiprintf_r+0xea>
 801664a:	06d0      	lsls	r0, r2, #27
 801664c:	bf44      	itt	mi
 801664e:	2320      	movmi	r3, #32
 8016650:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016654:	0711      	lsls	r1, r2, #28
 8016656:	bf44      	itt	mi
 8016658:	232b      	movmi	r3, #43	@ 0x2b
 801665a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801665e:	f89a 3000 	ldrb.w	r3, [sl]
 8016662:	2b2a      	cmp	r3, #42	@ 0x2a
 8016664:	d015      	beq.n	8016692 <_svfiprintf_r+0xfa>
 8016666:	9a07      	ldr	r2, [sp, #28]
 8016668:	4654      	mov	r4, sl
 801666a:	2000      	movs	r0, #0
 801666c:	f04f 0c0a 	mov.w	ip, #10
 8016670:	4621      	mov	r1, r4
 8016672:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016676:	3b30      	subs	r3, #48	@ 0x30
 8016678:	2b09      	cmp	r3, #9
 801667a:	d94b      	bls.n	8016714 <_svfiprintf_r+0x17c>
 801667c:	b1b0      	cbz	r0, 80166ac <_svfiprintf_r+0x114>
 801667e:	9207      	str	r2, [sp, #28]
 8016680:	e014      	b.n	80166ac <_svfiprintf_r+0x114>
 8016682:	eba0 0308 	sub.w	r3, r0, r8
 8016686:	fa09 f303 	lsl.w	r3, r9, r3
 801668a:	4313      	orrs	r3, r2
 801668c:	9304      	str	r3, [sp, #16]
 801668e:	46a2      	mov	sl, r4
 8016690:	e7d2      	b.n	8016638 <_svfiprintf_r+0xa0>
 8016692:	9b03      	ldr	r3, [sp, #12]
 8016694:	1d19      	adds	r1, r3, #4
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	9103      	str	r1, [sp, #12]
 801669a:	2b00      	cmp	r3, #0
 801669c:	bfbb      	ittet	lt
 801669e:	425b      	neglt	r3, r3
 80166a0:	f042 0202 	orrlt.w	r2, r2, #2
 80166a4:	9307      	strge	r3, [sp, #28]
 80166a6:	9307      	strlt	r3, [sp, #28]
 80166a8:	bfb8      	it	lt
 80166aa:	9204      	strlt	r2, [sp, #16]
 80166ac:	7823      	ldrb	r3, [r4, #0]
 80166ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80166b0:	d10a      	bne.n	80166c8 <_svfiprintf_r+0x130>
 80166b2:	7863      	ldrb	r3, [r4, #1]
 80166b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80166b6:	d132      	bne.n	801671e <_svfiprintf_r+0x186>
 80166b8:	9b03      	ldr	r3, [sp, #12]
 80166ba:	1d1a      	adds	r2, r3, #4
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	9203      	str	r2, [sp, #12]
 80166c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80166c4:	3402      	adds	r4, #2
 80166c6:	9305      	str	r3, [sp, #20]
 80166c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801678c <_svfiprintf_r+0x1f4>
 80166cc:	7821      	ldrb	r1, [r4, #0]
 80166ce:	2203      	movs	r2, #3
 80166d0:	4650      	mov	r0, sl
 80166d2:	f7e9 fd95 	bl	8000200 <memchr>
 80166d6:	b138      	cbz	r0, 80166e8 <_svfiprintf_r+0x150>
 80166d8:	9b04      	ldr	r3, [sp, #16]
 80166da:	eba0 000a 	sub.w	r0, r0, sl
 80166de:	2240      	movs	r2, #64	@ 0x40
 80166e0:	4082      	lsls	r2, r0
 80166e2:	4313      	orrs	r3, r2
 80166e4:	3401      	adds	r4, #1
 80166e6:	9304      	str	r3, [sp, #16]
 80166e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80166ec:	4824      	ldr	r0, [pc, #144]	@ (8016780 <_svfiprintf_r+0x1e8>)
 80166ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80166f2:	2206      	movs	r2, #6
 80166f4:	f7e9 fd84 	bl	8000200 <memchr>
 80166f8:	2800      	cmp	r0, #0
 80166fa:	d036      	beq.n	801676a <_svfiprintf_r+0x1d2>
 80166fc:	4b21      	ldr	r3, [pc, #132]	@ (8016784 <_svfiprintf_r+0x1ec>)
 80166fe:	bb1b      	cbnz	r3, 8016748 <_svfiprintf_r+0x1b0>
 8016700:	9b03      	ldr	r3, [sp, #12]
 8016702:	3307      	adds	r3, #7
 8016704:	f023 0307 	bic.w	r3, r3, #7
 8016708:	3308      	adds	r3, #8
 801670a:	9303      	str	r3, [sp, #12]
 801670c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801670e:	4433      	add	r3, r6
 8016710:	9309      	str	r3, [sp, #36]	@ 0x24
 8016712:	e76a      	b.n	80165ea <_svfiprintf_r+0x52>
 8016714:	fb0c 3202 	mla	r2, ip, r2, r3
 8016718:	460c      	mov	r4, r1
 801671a:	2001      	movs	r0, #1
 801671c:	e7a8      	b.n	8016670 <_svfiprintf_r+0xd8>
 801671e:	2300      	movs	r3, #0
 8016720:	3401      	adds	r4, #1
 8016722:	9305      	str	r3, [sp, #20]
 8016724:	4619      	mov	r1, r3
 8016726:	f04f 0c0a 	mov.w	ip, #10
 801672a:	4620      	mov	r0, r4
 801672c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016730:	3a30      	subs	r2, #48	@ 0x30
 8016732:	2a09      	cmp	r2, #9
 8016734:	d903      	bls.n	801673e <_svfiprintf_r+0x1a6>
 8016736:	2b00      	cmp	r3, #0
 8016738:	d0c6      	beq.n	80166c8 <_svfiprintf_r+0x130>
 801673a:	9105      	str	r1, [sp, #20]
 801673c:	e7c4      	b.n	80166c8 <_svfiprintf_r+0x130>
 801673e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016742:	4604      	mov	r4, r0
 8016744:	2301      	movs	r3, #1
 8016746:	e7f0      	b.n	801672a <_svfiprintf_r+0x192>
 8016748:	ab03      	add	r3, sp, #12
 801674a:	9300      	str	r3, [sp, #0]
 801674c:	462a      	mov	r2, r5
 801674e:	4b0e      	ldr	r3, [pc, #56]	@ (8016788 <_svfiprintf_r+0x1f0>)
 8016750:	a904      	add	r1, sp, #16
 8016752:	4638      	mov	r0, r7
 8016754:	f3af 8000 	nop.w
 8016758:	1c42      	adds	r2, r0, #1
 801675a:	4606      	mov	r6, r0
 801675c:	d1d6      	bne.n	801670c <_svfiprintf_r+0x174>
 801675e:	89ab      	ldrh	r3, [r5, #12]
 8016760:	065b      	lsls	r3, r3, #25
 8016762:	f53f af2d 	bmi.w	80165c0 <_svfiprintf_r+0x28>
 8016766:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016768:	e72c      	b.n	80165c4 <_svfiprintf_r+0x2c>
 801676a:	ab03      	add	r3, sp, #12
 801676c:	9300      	str	r3, [sp, #0]
 801676e:	462a      	mov	r2, r5
 8016770:	4b05      	ldr	r3, [pc, #20]	@ (8016788 <_svfiprintf_r+0x1f0>)
 8016772:	a904      	add	r1, sp, #16
 8016774:	4638      	mov	r0, r7
 8016776:	f000 fa49 	bl	8016c0c <_printf_i>
 801677a:	e7ed      	b.n	8016758 <_svfiprintf_r+0x1c0>
 801677c:	08017b3b 	.word	0x08017b3b
 8016780:	08017b45 	.word	0x08017b45
 8016784:	00000000 	.word	0x00000000
 8016788:	080164e1 	.word	0x080164e1
 801678c:	08017b41 	.word	0x08017b41

08016790 <_sungetc_r>:
 8016790:	b538      	push	{r3, r4, r5, lr}
 8016792:	1c4b      	adds	r3, r1, #1
 8016794:	4614      	mov	r4, r2
 8016796:	d103      	bne.n	80167a0 <_sungetc_r+0x10>
 8016798:	f04f 35ff 	mov.w	r5, #4294967295
 801679c:	4628      	mov	r0, r5
 801679e:	bd38      	pop	{r3, r4, r5, pc}
 80167a0:	8993      	ldrh	r3, [r2, #12]
 80167a2:	f023 0320 	bic.w	r3, r3, #32
 80167a6:	8193      	strh	r3, [r2, #12]
 80167a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80167aa:	6852      	ldr	r2, [r2, #4]
 80167ac:	b2cd      	uxtb	r5, r1
 80167ae:	b18b      	cbz	r3, 80167d4 <_sungetc_r+0x44>
 80167b0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80167b2:	4293      	cmp	r3, r2
 80167b4:	dd08      	ble.n	80167c8 <_sungetc_r+0x38>
 80167b6:	6823      	ldr	r3, [r4, #0]
 80167b8:	1e5a      	subs	r2, r3, #1
 80167ba:	6022      	str	r2, [r4, #0]
 80167bc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80167c0:	6863      	ldr	r3, [r4, #4]
 80167c2:	3301      	adds	r3, #1
 80167c4:	6063      	str	r3, [r4, #4]
 80167c6:	e7e9      	b.n	801679c <_sungetc_r+0xc>
 80167c8:	4621      	mov	r1, r4
 80167ca:	f000 fcc4 	bl	8017156 <__submore>
 80167ce:	2800      	cmp	r0, #0
 80167d0:	d0f1      	beq.n	80167b6 <_sungetc_r+0x26>
 80167d2:	e7e1      	b.n	8016798 <_sungetc_r+0x8>
 80167d4:	6921      	ldr	r1, [r4, #16]
 80167d6:	6823      	ldr	r3, [r4, #0]
 80167d8:	b151      	cbz	r1, 80167f0 <_sungetc_r+0x60>
 80167da:	4299      	cmp	r1, r3
 80167dc:	d208      	bcs.n	80167f0 <_sungetc_r+0x60>
 80167de:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80167e2:	42a9      	cmp	r1, r5
 80167e4:	d104      	bne.n	80167f0 <_sungetc_r+0x60>
 80167e6:	3b01      	subs	r3, #1
 80167e8:	3201      	adds	r2, #1
 80167ea:	6023      	str	r3, [r4, #0]
 80167ec:	6062      	str	r2, [r4, #4]
 80167ee:	e7d5      	b.n	801679c <_sungetc_r+0xc>
 80167f0:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80167f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80167f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80167fa:	2303      	movs	r3, #3
 80167fc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80167fe:	4623      	mov	r3, r4
 8016800:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016804:	6023      	str	r3, [r4, #0]
 8016806:	2301      	movs	r3, #1
 8016808:	e7dc      	b.n	80167c4 <_sungetc_r+0x34>

0801680a <__ssrefill_r>:
 801680a:	b510      	push	{r4, lr}
 801680c:	460c      	mov	r4, r1
 801680e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8016810:	b169      	cbz	r1, 801682e <__ssrefill_r+0x24>
 8016812:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016816:	4299      	cmp	r1, r3
 8016818:	d001      	beq.n	801681e <__ssrefill_r+0x14>
 801681a:	f7ff fd69 	bl	80162f0 <_free_r>
 801681e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016820:	6063      	str	r3, [r4, #4]
 8016822:	2000      	movs	r0, #0
 8016824:	6360      	str	r0, [r4, #52]	@ 0x34
 8016826:	b113      	cbz	r3, 801682e <__ssrefill_r+0x24>
 8016828:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801682a:	6023      	str	r3, [r4, #0]
 801682c:	bd10      	pop	{r4, pc}
 801682e:	6923      	ldr	r3, [r4, #16]
 8016830:	6023      	str	r3, [r4, #0]
 8016832:	2300      	movs	r3, #0
 8016834:	6063      	str	r3, [r4, #4]
 8016836:	89a3      	ldrh	r3, [r4, #12]
 8016838:	f043 0320 	orr.w	r3, r3, #32
 801683c:	81a3      	strh	r3, [r4, #12]
 801683e:	f04f 30ff 	mov.w	r0, #4294967295
 8016842:	e7f3      	b.n	801682c <__ssrefill_r+0x22>

08016844 <__ssvfiscanf_r>:
 8016844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016848:	460c      	mov	r4, r1
 801684a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801684e:	2100      	movs	r1, #0
 8016850:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8016854:	49a6      	ldr	r1, [pc, #664]	@ (8016af0 <__ssvfiscanf_r+0x2ac>)
 8016856:	91a0      	str	r1, [sp, #640]	@ 0x280
 8016858:	f10d 0804 	add.w	r8, sp, #4
 801685c:	49a5      	ldr	r1, [pc, #660]	@ (8016af4 <__ssvfiscanf_r+0x2b0>)
 801685e:	4fa6      	ldr	r7, [pc, #664]	@ (8016af8 <__ssvfiscanf_r+0x2b4>)
 8016860:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8016864:	4606      	mov	r6, r0
 8016866:	91a1      	str	r1, [sp, #644]	@ 0x284
 8016868:	9300      	str	r3, [sp, #0]
 801686a:	f892 9000 	ldrb.w	r9, [r2]
 801686e:	f1b9 0f00 	cmp.w	r9, #0
 8016872:	f000 8158 	beq.w	8016b26 <__ssvfiscanf_r+0x2e2>
 8016876:	f817 3009 	ldrb.w	r3, [r7, r9]
 801687a:	f013 0308 	ands.w	r3, r3, #8
 801687e:	f102 0501 	add.w	r5, r2, #1
 8016882:	d019      	beq.n	80168b8 <__ssvfiscanf_r+0x74>
 8016884:	6863      	ldr	r3, [r4, #4]
 8016886:	2b00      	cmp	r3, #0
 8016888:	dd0f      	ble.n	80168aa <__ssvfiscanf_r+0x66>
 801688a:	6823      	ldr	r3, [r4, #0]
 801688c:	781a      	ldrb	r2, [r3, #0]
 801688e:	5cba      	ldrb	r2, [r7, r2]
 8016890:	0712      	lsls	r2, r2, #28
 8016892:	d401      	bmi.n	8016898 <__ssvfiscanf_r+0x54>
 8016894:	462a      	mov	r2, r5
 8016896:	e7e8      	b.n	801686a <__ssvfiscanf_r+0x26>
 8016898:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801689a:	3201      	adds	r2, #1
 801689c:	9245      	str	r2, [sp, #276]	@ 0x114
 801689e:	6862      	ldr	r2, [r4, #4]
 80168a0:	3301      	adds	r3, #1
 80168a2:	3a01      	subs	r2, #1
 80168a4:	6062      	str	r2, [r4, #4]
 80168a6:	6023      	str	r3, [r4, #0]
 80168a8:	e7ec      	b.n	8016884 <__ssvfiscanf_r+0x40>
 80168aa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80168ac:	4621      	mov	r1, r4
 80168ae:	4630      	mov	r0, r6
 80168b0:	4798      	blx	r3
 80168b2:	2800      	cmp	r0, #0
 80168b4:	d0e9      	beq.n	801688a <__ssvfiscanf_r+0x46>
 80168b6:	e7ed      	b.n	8016894 <__ssvfiscanf_r+0x50>
 80168b8:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80168bc:	f040 8085 	bne.w	80169ca <__ssvfiscanf_r+0x186>
 80168c0:	9341      	str	r3, [sp, #260]	@ 0x104
 80168c2:	9343      	str	r3, [sp, #268]	@ 0x10c
 80168c4:	7853      	ldrb	r3, [r2, #1]
 80168c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80168c8:	bf02      	ittt	eq
 80168ca:	2310      	moveq	r3, #16
 80168cc:	1c95      	addeq	r5, r2, #2
 80168ce:	9341      	streq	r3, [sp, #260]	@ 0x104
 80168d0:	220a      	movs	r2, #10
 80168d2:	46aa      	mov	sl, r5
 80168d4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80168d8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80168dc:	2b09      	cmp	r3, #9
 80168de:	d91e      	bls.n	801691e <__ssvfiscanf_r+0xda>
 80168e0:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8016afc <__ssvfiscanf_r+0x2b8>
 80168e4:	2203      	movs	r2, #3
 80168e6:	4658      	mov	r0, fp
 80168e8:	f7e9 fc8a 	bl	8000200 <memchr>
 80168ec:	b138      	cbz	r0, 80168fe <__ssvfiscanf_r+0xba>
 80168ee:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80168f0:	eba0 000b 	sub.w	r0, r0, fp
 80168f4:	2301      	movs	r3, #1
 80168f6:	4083      	lsls	r3, r0
 80168f8:	4313      	orrs	r3, r2
 80168fa:	9341      	str	r3, [sp, #260]	@ 0x104
 80168fc:	4655      	mov	r5, sl
 80168fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016902:	2b78      	cmp	r3, #120	@ 0x78
 8016904:	d806      	bhi.n	8016914 <__ssvfiscanf_r+0xd0>
 8016906:	2b57      	cmp	r3, #87	@ 0x57
 8016908:	d810      	bhi.n	801692c <__ssvfiscanf_r+0xe8>
 801690a:	2b25      	cmp	r3, #37	@ 0x25
 801690c:	d05d      	beq.n	80169ca <__ssvfiscanf_r+0x186>
 801690e:	d857      	bhi.n	80169c0 <__ssvfiscanf_r+0x17c>
 8016910:	2b00      	cmp	r3, #0
 8016912:	d075      	beq.n	8016a00 <__ssvfiscanf_r+0x1bc>
 8016914:	2303      	movs	r3, #3
 8016916:	9347      	str	r3, [sp, #284]	@ 0x11c
 8016918:	230a      	movs	r3, #10
 801691a:	9342      	str	r3, [sp, #264]	@ 0x108
 801691c:	e088      	b.n	8016a30 <__ssvfiscanf_r+0x1ec>
 801691e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8016920:	fb02 1103 	mla	r1, r2, r3, r1
 8016924:	3930      	subs	r1, #48	@ 0x30
 8016926:	9143      	str	r1, [sp, #268]	@ 0x10c
 8016928:	4655      	mov	r5, sl
 801692a:	e7d2      	b.n	80168d2 <__ssvfiscanf_r+0x8e>
 801692c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8016930:	2a20      	cmp	r2, #32
 8016932:	d8ef      	bhi.n	8016914 <__ssvfiscanf_r+0xd0>
 8016934:	a101      	add	r1, pc, #4	@ (adr r1, 801693c <__ssvfiscanf_r+0xf8>)
 8016936:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801693a:	bf00      	nop
 801693c:	08016a0f 	.word	0x08016a0f
 8016940:	08016915 	.word	0x08016915
 8016944:	08016915 	.word	0x08016915
 8016948:	08016a69 	.word	0x08016a69
 801694c:	08016915 	.word	0x08016915
 8016950:	08016915 	.word	0x08016915
 8016954:	08016915 	.word	0x08016915
 8016958:	08016915 	.word	0x08016915
 801695c:	08016915 	.word	0x08016915
 8016960:	08016915 	.word	0x08016915
 8016964:	08016915 	.word	0x08016915
 8016968:	08016a7f 	.word	0x08016a7f
 801696c:	08016a65 	.word	0x08016a65
 8016970:	080169c7 	.word	0x080169c7
 8016974:	080169c7 	.word	0x080169c7
 8016978:	080169c7 	.word	0x080169c7
 801697c:	08016915 	.word	0x08016915
 8016980:	08016a21 	.word	0x08016a21
 8016984:	08016915 	.word	0x08016915
 8016988:	08016915 	.word	0x08016915
 801698c:	08016915 	.word	0x08016915
 8016990:	08016915 	.word	0x08016915
 8016994:	08016a8f 	.word	0x08016a8f
 8016998:	08016a29 	.word	0x08016a29
 801699c:	08016a07 	.word	0x08016a07
 80169a0:	08016915 	.word	0x08016915
 80169a4:	08016915 	.word	0x08016915
 80169a8:	08016a8b 	.word	0x08016a8b
 80169ac:	08016915 	.word	0x08016915
 80169b0:	08016a65 	.word	0x08016a65
 80169b4:	08016915 	.word	0x08016915
 80169b8:	08016915 	.word	0x08016915
 80169bc:	08016a0f 	.word	0x08016a0f
 80169c0:	3b45      	subs	r3, #69	@ 0x45
 80169c2:	2b02      	cmp	r3, #2
 80169c4:	d8a6      	bhi.n	8016914 <__ssvfiscanf_r+0xd0>
 80169c6:	2305      	movs	r3, #5
 80169c8:	e031      	b.n	8016a2e <__ssvfiscanf_r+0x1ea>
 80169ca:	6863      	ldr	r3, [r4, #4]
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	dd0d      	ble.n	80169ec <__ssvfiscanf_r+0x1a8>
 80169d0:	6823      	ldr	r3, [r4, #0]
 80169d2:	781a      	ldrb	r2, [r3, #0]
 80169d4:	454a      	cmp	r2, r9
 80169d6:	f040 80a6 	bne.w	8016b26 <__ssvfiscanf_r+0x2e2>
 80169da:	3301      	adds	r3, #1
 80169dc:	6862      	ldr	r2, [r4, #4]
 80169de:	6023      	str	r3, [r4, #0]
 80169e0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80169e2:	3a01      	subs	r2, #1
 80169e4:	3301      	adds	r3, #1
 80169e6:	6062      	str	r2, [r4, #4]
 80169e8:	9345      	str	r3, [sp, #276]	@ 0x114
 80169ea:	e753      	b.n	8016894 <__ssvfiscanf_r+0x50>
 80169ec:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80169ee:	4621      	mov	r1, r4
 80169f0:	4630      	mov	r0, r6
 80169f2:	4798      	blx	r3
 80169f4:	2800      	cmp	r0, #0
 80169f6:	d0eb      	beq.n	80169d0 <__ssvfiscanf_r+0x18c>
 80169f8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80169fa:	2800      	cmp	r0, #0
 80169fc:	f040 808b 	bne.w	8016b16 <__ssvfiscanf_r+0x2d2>
 8016a00:	f04f 30ff 	mov.w	r0, #4294967295
 8016a04:	e08b      	b.n	8016b1e <__ssvfiscanf_r+0x2da>
 8016a06:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8016a08:	f042 0220 	orr.w	r2, r2, #32
 8016a0c:	9241      	str	r2, [sp, #260]	@ 0x104
 8016a0e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8016a10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016a14:	9241      	str	r2, [sp, #260]	@ 0x104
 8016a16:	2210      	movs	r2, #16
 8016a18:	2b6e      	cmp	r3, #110	@ 0x6e
 8016a1a:	9242      	str	r2, [sp, #264]	@ 0x108
 8016a1c:	d902      	bls.n	8016a24 <__ssvfiscanf_r+0x1e0>
 8016a1e:	e005      	b.n	8016a2c <__ssvfiscanf_r+0x1e8>
 8016a20:	2300      	movs	r3, #0
 8016a22:	9342      	str	r3, [sp, #264]	@ 0x108
 8016a24:	2303      	movs	r3, #3
 8016a26:	e002      	b.n	8016a2e <__ssvfiscanf_r+0x1ea>
 8016a28:	2308      	movs	r3, #8
 8016a2a:	9342      	str	r3, [sp, #264]	@ 0x108
 8016a2c:	2304      	movs	r3, #4
 8016a2e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8016a30:	6863      	ldr	r3, [r4, #4]
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	dd39      	ble.n	8016aaa <__ssvfiscanf_r+0x266>
 8016a36:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8016a38:	0659      	lsls	r1, r3, #25
 8016a3a:	d404      	bmi.n	8016a46 <__ssvfiscanf_r+0x202>
 8016a3c:	6823      	ldr	r3, [r4, #0]
 8016a3e:	781a      	ldrb	r2, [r3, #0]
 8016a40:	5cba      	ldrb	r2, [r7, r2]
 8016a42:	0712      	lsls	r2, r2, #28
 8016a44:	d438      	bmi.n	8016ab8 <__ssvfiscanf_r+0x274>
 8016a46:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8016a48:	2b02      	cmp	r3, #2
 8016a4a:	dc47      	bgt.n	8016adc <__ssvfiscanf_r+0x298>
 8016a4c:	466b      	mov	r3, sp
 8016a4e:	4622      	mov	r2, r4
 8016a50:	a941      	add	r1, sp, #260	@ 0x104
 8016a52:	4630      	mov	r0, r6
 8016a54:	f000 f9f8 	bl	8016e48 <_scanf_chars>
 8016a58:	2801      	cmp	r0, #1
 8016a5a:	d064      	beq.n	8016b26 <__ssvfiscanf_r+0x2e2>
 8016a5c:	2802      	cmp	r0, #2
 8016a5e:	f47f af19 	bne.w	8016894 <__ssvfiscanf_r+0x50>
 8016a62:	e7c9      	b.n	80169f8 <__ssvfiscanf_r+0x1b4>
 8016a64:	220a      	movs	r2, #10
 8016a66:	e7d7      	b.n	8016a18 <__ssvfiscanf_r+0x1d4>
 8016a68:	4629      	mov	r1, r5
 8016a6a:	4640      	mov	r0, r8
 8016a6c:	f000 fb3a 	bl	80170e4 <__sccl>
 8016a70:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8016a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016a76:	9341      	str	r3, [sp, #260]	@ 0x104
 8016a78:	4605      	mov	r5, r0
 8016a7a:	2301      	movs	r3, #1
 8016a7c:	e7d7      	b.n	8016a2e <__ssvfiscanf_r+0x1ea>
 8016a7e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8016a80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016a84:	9341      	str	r3, [sp, #260]	@ 0x104
 8016a86:	2300      	movs	r3, #0
 8016a88:	e7d1      	b.n	8016a2e <__ssvfiscanf_r+0x1ea>
 8016a8a:	2302      	movs	r3, #2
 8016a8c:	e7cf      	b.n	8016a2e <__ssvfiscanf_r+0x1ea>
 8016a8e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8016a90:	06c3      	lsls	r3, r0, #27
 8016a92:	f53f aeff 	bmi.w	8016894 <__ssvfiscanf_r+0x50>
 8016a96:	9b00      	ldr	r3, [sp, #0]
 8016a98:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8016a9a:	1d19      	adds	r1, r3, #4
 8016a9c:	9100      	str	r1, [sp, #0]
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	07c0      	lsls	r0, r0, #31
 8016aa2:	bf4c      	ite	mi
 8016aa4:	801a      	strhmi	r2, [r3, #0]
 8016aa6:	601a      	strpl	r2, [r3, #0]
 8016aa8:	e6f4      	b.n	8016894 <__ssvfiscanf_r+0x50>
 8016aaa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016aac:	4621      	mov	r1, r4
 8016aae:	4630      	mov	r0, r6
 8016ab0:	4798      	blx	r3
 8016ab2:	2800      	cmp	r0, #0
 8016ab4:	d0bf      	beq.n	8016a36 <__ssvfiscanf_r+0x1f2>
 8016ab6:	e79f      	b.n	80169f8 <__ssvfiscanf_r+0x1b4>
 8016ab8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8016aba:	3201      	adds	r2, #1
 8016abc:	9245      	str	r2, [sp, #276]	@ 0x114
 8016abe:	6862      	ldr	r2, [r4, #4]
 8016ac0:	3a01      	subs	r2, #1
 8016ac2:	2a00      	cmp	r2, #0
 8016ac4:	6062      	str	r2, [r4, #4]
 8016ac6:	dd02      	ble.n	8016ace <__ssvfiscanf_r+0x28a>
 8016ac8:	3301      	adds	r3, #1
 8016aca:	6023      	str	r3, [r4, #0]
 8016acc:	e7b6      	b.n	8016a3c <__ssvfiscanf_r+0x1f8>
 8016ace:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016ad0:	4621      	mov	r1, r4
 8016ad2:	4630      	mov	r0, r6
 8016ad4:	4798      	blx	r3
 8016ad6:	2800      	cmp	r0, #0
 8016ad8:	d0b0      	beq.n	8016a3c <__ssvfiscanf_r+0x1f8>
 8016ada:	e78d      	b.n	80169f8 <__ssvfiscanf_r+0x1b4>
 8016adc:	2b04      	cmp	r3, #4
 8016ade:	dc0f      	bgt.n	8016b00 <__ssvfiscanf_r+0x2bc>
 8016ae0:	466b      	mov	r3, sp
 8016ae2:	4622      	mov	r2, r4
 8016ae4:	a941      	add	r1, sp, #260	@ 0x104
 8016ae6:	4630      	mov	r0, r6
 8016ae8:	f000 fa08 	bl	8016efc <_scanf_i>
 8016aec:	e7b4      	b.n	8016a58 <__ssvfiscanf_r+0x214>
 8016aee:	bf00      	nop
 8016af0:	08016791 	.word	0x08016791
 8016af4:	0801680b 	.word	0x0801680b
 8016af8:	08017a3b 	.word	0x08017a3b
 8016afc:	08017b41 	.word	0x08017b41
 8016b00:	4b0a      	ldr	r3, [pc, #40]	@ (8016b2c <__ssvfiscanf_r+0x2e8>)
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	f43f aec6 	beq.w	8016894 <__ssvfiscanf_r+0x50>
 8016b08:	466b      	mov	r3, sp
 8016b0a:	4622      	mov	r2, r4
 8016b0c:	a941      	add	r1, sp, #260	@ 0x104
 8016b0e:	4630      	mov	r0, r6
 8016b10:	f3af 8000 	nop.w
 8016b14:	e7a0      	b.n	8016a58 <__ssvfiscanf_r+0x214>
 8016b16:	89a3      	ldrh	r3, [r4, #12]
 8016b18:	065b      	lsls	r3, r3, #25
 8016b1a:	f53f af71 	bmi.w	8016a00 <__ssvfiscanf_r+0x1bc>
 8016b1e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8016b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b26:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8016b28:	e7f9      	b.n	8016b1e <__ssvfiscanf_r+0x2da>
 8016b2a:	bf00      	nop
 8016b2c:	00000000 	.word	0x00000000

08016b30 <_printf_common>:
 8016b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b34:	4616      	mov	r6, r2
 8016b36:	4698      	mov	r8, r3
 8016b38:	688a      	ldr	r2, [r1, #8]
 8016b3a:	690b      	ldr	r3, [r1, #16]
 8016b3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016b40:	4293      	cmp	r3, r2
 8016b42:	bfb8      	it	lt
 8016b44:	4613      	movlt	r3, r2
 8016b46:	6033      	str	r3, [r6, #0]
 8016b48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016b4c:	4607      	mov	r7, r0
 8016b4e:	460c      	mov	r4, r1
 8016b50:	b10a      	cbz	r2, 8016b56 <_printf_common+0x26>
 8016b52:	3301      	adds	r3, #1
 8016b54:	6033      	str	r3, [r6, #0]
 8016b56:	6823      	ldr	r3, [r4, #0]
 8016b58:	0699      	lsls	r1, r3, #26
 8016b5a:	bf42      	ittt	mi
 8016b5c:	6833      	ldrmi	r3, [r6, #0]
 8016b5e:	3302      	addmi	r3, #2
 8016b60:	6033      	strmi	r3, [r6, #0]
 8016b62:	6825      	ldr	r5, [r4, #0]
 8016b64:	f015 0506 	ands.w	r5, r5, #6
 8016b68:	d106      	bne.n	8016b78 <_printf_common+0x48>
 8016b6a:	f104 0a19 	add.w	sl, r4, #25
 8016b6e:	68e3      	ldr	r3, [r4, #12]
 8016b70:	6832      	ldr	r2, [r6, #0]
 8016b72:	1a9b      	subs	r3, r3, r2
 8016b74:	42ab      	cmp	r3, r5
 8016b76:	dc26      	bgt.n	8016bc6 <_printf_common+0x96>
 8016b78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016b7c:	6822      	ldr	r2, [r4, #0]
 8016b7e:	3b00      	subs	r3, #0
 8016b80:	bf18      	it	ne
 8016b82:	2301      	movne	r3, #1
 8016b84:	0692      	lsls	r2, r2, #26
 8016b86:	d42b      	bmi.n	8016be0 <_printf_common+0xb0>
 8016b88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016b8c:	4641      	mov	r1, r8
 8016b8e:	4638      	mov	r0, r7
 8016b90:	47c8      	blx	r9
 8016b92:	3001      	adds	r0, #1
 8016b94:	d01e      	beq.n	8016bd4 <_printf_common+0xa4>
 8016b96:	6823      	ldr	r3, [r4, #0]
 8016b98:	6922      	ldr	r2, [r4, #16]
 8016b9a:	f003 0306 	and.w	r3, r3, #6
 8016b9e:	2b04      	cmp	r3, #4
 8016ba0:	bf02      	ittt	eq
 8016ba2:	68e5      	ldreq	r5, [r4, #12]
 8016ba4:	6833      	ldreq	r3, [r6, #0]
 8016ba6:	1aed      	subeq	r5, r5, r3
 8016ba8:	68a3      	ldr	r3, [r4, #8]
 8016baa:	bf0c      	ite	eq
 8016bac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016bb0:	2500      	movne	r5, #0
 8016bb2:	4293      	cmp	r3, r2
 8016bb4:	bfc4      	itt	gt
 8016bb6:	1a9b      	subgt	r3, r3, r2
 8016bb8:	18ed      	addgt	r5, r5, r3
 8016bba:	2600      	movs	r6, #0
 8016bbc:	341a      	adds	r4, #26
 8016bbe:	42b5      	cmp	r5, r6
 8016bc0:	d11a      	bne.n	8016bf8 <_printf_common+0xc8>
 8016bc2:	2000      	movs	r0, #0
 8016bc4:	e008      	b.n	8016bd8 <_printf_common+0xa8>
 8016bc6:	2301      	movs	r3, #1
 8016bc8:	4652      	mov	r2, sl
 8016bca:	4641      	mov	r1, r8
 8016bcc:	4638      	mov	r0, r7
 8016bce:	47c8      	blx	r9
 8016bd0:	3001      	adds	r0, #1
 8016bd2:	d103      	bne.n	8016bdc <_printf_common+0xac>
 8016bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8016bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bdc:	3501      	adds	r5, #1
 8016bde:	e7c6      	b.n	8016b6e <_printf_common+0x3e>
 8016be0:	18e1      	adds	r1, r4, r3
 8016be2:	1c5a      	adds	r2, r3, #1
 8016be4:	2030      	movs	r0, #48	@ 0x30
 8016be6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016bea:	4422      	add	r2, r4
 8016bec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016bf0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016bf4:	3302      	adds	r3, #2
 8016bf6:	e7c7      	b.n	8016b88 <_printf_common+0x58>
 8016bf8:	2301      	movs	r3, #1
 8016bfa:	4622      	mov	r2, r4
 8016bfc:	4641      	mov	r1, r8
 8016bfe:	4638      	mov	r0, r7
 8016c00:	47c8      	blx	r9
 8016c02:	3001      	adds	r0, #1
 8016c04:	d0e6      	beq.n	8016bd4 <_printf_common+0xa4>
 8016c06:	3601      	adds	r6, #1
 8016c08:	e7d9      	b.n	8016bbe <_printf_common+0x8e>
	...

08016c0c <_printf_i>:
 8016c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016c10:	7e0f      	ldrb	r7, [r1, #24]
 8016c12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016c14:	2f78      	cmp	r7, #120	@ 0x78
 8016c16:	4691      	mov	r9, r2
 8016c18:	4680      	mov	r8, r0
 8016c1a:	460c      	mov	r4, r1
 8016c1c:	469a      	mov	sl, r3
 8016c1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016c22:	d807      	bhi.n	8016c34 <_printf_i+0x28>
 8016c24:	2f62      	cmp	r7, #98	@ 0x62
 8016c26:	d80a      	bhi.n	8016c3e <_printf_i+0x32>
 8016c28:	2f00      	cmp	r7, #0
 8016c2a:	f000 80d1 	beq.w	8016dd0 <_printf_i+0x1c4>
 8016c2e:	2f58      	cmp	r7, #88	@ 0x58
 8016c30:	f000 80b8 	beq.w	8016da4 <_printf_i+0x198>
 8016c34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016c38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016c3c:	e03a      	b.n	8016cb4 <_printf_i+0xa8>
 8016c3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016c42:	2b15      	cmp	r3, #21
 8016c44:	d8f6      	bhi.n	8016c34 <_printf_i+0x28>
 8016c46:	a101      	add	r1, pc, #4	@ (adr r1, 8016c4c <_printf_i+0x40>)
 8016c48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016c4c:	08016ca5 	.word	0x08016ca5
 8016c50:	08016cb9 	.word	0x08016cb9
 8016c54:	08016c35 	.word	0x08016c35
 8016c58:	08016c35 	.word	0x08016c35
 8016c5c:	08016c35 	.word	0x08016c35
 8016c60:	08016c35 	.word	0x08016c35
 8016c64:	08016cb9 	.word	0x08016cb9
 8016c68:	08016c35 	.word	0x08016c35
 8016c6c:	08016c35 	.word	0x08016c35
 8016c70:	08016c35 	.word	0x08016c35
 8016c74:	08016c35 	.word	0x08016c35
 8016c78:	08016db7 	.word	0x08016db7
 8016c7c:	08016ce3 	.word	0x08016ce3
 8016c80:	08016d71 	.word	0x08016d71
 8016c84:	08016c35 	.word	0x08016c35
 8016c88:	08016c35 	.word	0x08016c35
 8016c8c:	08016dd9 	.word	0x08016dd9
 8016c90:	08016c35 	.word	0x08016c35
 8016c94:	08016ce3 	.word	0x08016ce3
 8016c98:	08016c35 	.word	0x08016c35
 8016c9c:	08016c35 	.word	0x08016c35
 8016ca0:	08016d79 	.word	0x08016d79
 8016ca4:	6833      	ldr	r3, [r6, #0]
 8016ca6:	1d1a      	adds	r2, r3, #4
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	6032      	str	r2, [r6, #0]
 8016cac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016cb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016cb4:	2301      	movs	r3, #1
 8016cb6:	e09c      	b.n	8016df2 <_printf_i+0x1e6>
 8016cb8:	6833      	ldr	r3, [r6, #0]
 8016cba:	6820      	ldr	r0, [r4, #0]
 8016cbc:	1d19      	adds	r1, r3, #4
 8016cbe:	6031      	str	r1, [r6, #0]
 8016cc0:	0606      	lsls	r6, r0, #24
 8016cc2:	d501      	bpl.n	8016cc8 <_printf_i+0xbc>
 8016cc4:	681d      	ldr	r5, [r3, #0]
 8016cc6:	e003      	b.n	8016cd0 <_printf_i+0xc4>
 8016cc8:	0645      	lsls	r5, r0, #25
 8016cca:	d5fb      	bpl.n	8016cc4 <_printf_i+0xb8>
 8016ccc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016cd0:	2d00      	cmp	r5, #0
 8016cd2:	da03      	bge.n	8016cdc <_printf_i+0xd0>
 8016cd4:	232d      	movs	r3, #45	@ 0x2d
 8016cd6:	426d      	negs	r5, r5
 8016cd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016cdc:	4858      	ldr	r0, [pc, #352]	@ (8016e40 <_printf_i+0x234>)
 8016cde:	230a      	movs	r3, #10
 8016ce0:	e011      	b.n	8016d06 <_printf_i+0xfa>
 8016ce2:	6821      	ldr	r1, [r4, #0]
 8016ce4:	6833      	ldr	r3, [r6, #0]
 8016ce6:	0608      	lsls	r0, r1, #24
 8016ce8:	f853 5b04 	ldr.w	r5, [r3], #4
 8016cec:	d402      	bmi.n	8016cf4 <_printf_i+0xe8>
 8016cee:	0649      	lsls	r1, r1, #25
 8016cf0:	bf48      	it	mi
 8016cf2:	b2ad      	uxthmi	r5, r5
 8016cf4:	2f6f      	cmp	r7, #111	@ 0x6f
 8016cf6:	4852      	ldr	r0, [pc, #328]	@ (8016e40 <_printf_i+0x234>)
 8016cf8:	6033      	str	r3, [r6, #0]
 8016cfa:	bf14      	ite	ne
 8016cfc:	230a      	movne	r3, #10
 8016cfe:	2308      	moveq	r3, #8
 8016d00:	2100      	movs	r1, #0
 8016d02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016d06:	6866      	ldr	r6, [r4, #4]
 8016d08:	60a6      	str	r6, [r4, #8]
 8016d0a:	2e00      	cmp	r6, #0
 8016d0c:	db05      	blt.n	8016d1a <_printf_i+0x10e>
 8016d0e:	6821      	ldr	r1, [r4, #0]
 8016d10:	432e      	orrs	r6, r5
 8016d12:	f021 0104 	bic.w	r1, r1, #4
 8016d16:	6021      	str	r1, [r4, #0]
 8016d18:	d04b      	beq.n	8016db2 <_printf_i+0x1a6>
 8016d1a:	4616      	mov	r6, r2
 8016d1c:	fbb5 f1f3 	udiv	r1, r5, r3
 8016d20:	fb03 5711 	mls	r7, r3, r1, r5
 8016d24:	5dc7      	ldrb	r7, [r0, r7]
 8016d26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016d2a:	462f      	mov	r7, r5
 8016d2c:	42bb      	cmp	r3, r7
 8016d2e:	460d      	mov	r5, r1
 8016d30:	d9f4      	bls.n	8016d1c <_printf_i+0x110>
 8016d32:	2b08      	cmp	r3, #8
 8016d34:	d10b      	bne.n	8016d4e <_printf_i+0x142>
 8016d36:	6823      	ldr	r3, [r4, #0]
 8016d38:	07df      	lsls	r7, r3, #31
 8016d3a:	d508      	bpl.n	8016d4e <_printf_i+0x142>
 8016d3c:	6923      	ldr	r3, [r4, #16]
 8016d3e:	6861      	ldr	r1, [r4, #4]
 8016d40:	4299      	cmp	r1, r3
 8016d42:	bfde      	ittt	le
 8016d44:	2330      	movle	r3, #48	@ 0x30
 8016d46:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016d4a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016d4e:	1b92      	subs	r2, r2, r6
 8016d50:	6122      	str	r2, [r4, #16]
 8016d52:	f8cd a000 	str.w	sl, [sp]
 8016d56:	464b      	mov	r3, r9
 8016d58:	aa03      	add	r2, sp, #12
 8016d5a:	4621      	mov	r1, r4
 8016d5c:	4640      	mov	r0, r8
 8016d5e:	f7ff fee7 	bl	8016b30 <_printf_common>
 8016d62:	3001      	adds	r0, #1
 8016d64:	d14a      	bne.n	8016dfc <_printf_i+0x1f0>
 8016d66:	f04f 30ff 	mov.w	r0, #4294967295
 8016d6a:	b004      	add	sp, #16
 8016d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d70:	6823      	ldr	r3, [r4, #0]
 8016d72:	f043 0320 	orr.w	r3, r3, #32
 8016d76:	6023      	str	r3, [r4, #0]
 8016d78:	4832      	ldr	r0, [pc, #200]	@ (8016e44 <_printf_i+0x238>)
 8016d7a:	2778      	movs	r7, #120	@ 0x78
 8016d7c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016d80:	6823      	ldr	r3, [r4, #0]
 8016d82:	6831      	ldr	r1, [r6, #0]
 8016d84:	061f      	lsls	r7, r3, #24
 8016d86:	f851 5b04 	ldr.w	r5, [r1], #4
 8016d8a:	d402      	bmi.n	8016d92 <_printf_i+0x186>
 8016d8c:	065f      	lsls	r7, r3, #25
 8016d8e:	bf48      	it	mi
 8016d90:	b2ad      	uxthmi	r5, r5
 8016d92:	6031      	str	r1, [r6, #0]
 8016d94:	07d9      	lsls	r1, r3, #31
 8016d96:	bf44      	itt	mi
 8016d98:	f043 0320 	orrmi.w	r3, r3, #32
 8016d9c:	6023      	strmi	r3, [r4, #0]
 8016d9e:	b11d      	cbz	r5, 8016da8 <_printf_i+0x19c>
 8016da0:	2310      	movs	r3, #16
 8016da2:	e7ad      	b.n	8016d00 <_printf_i+0xf4>
 8016da4:	4826      	ldr	r0, [pc, #152]	@ (8016e40 <_printf_i+0x234>)
 8016da6:	e7e9      	b.n	8016d7c <_printf_i+0x170>
 8016da8:	6823      	ldr	r3, [r4, #0]
 8016daa:	f023 0320 	bic.w	r3, r3, #32
 8016dae:	6023      	str	r3, [r4, #0]
 8016db0:	e7f6      	b.n	8016da0 <_printf_i+0x194>
 8016db2:	4616      	mov	r6, r2
 8016db4:	e7bd      	b.n	8016d32 <_printf_i+0x126>
 8016db6:	6833      	ldr	r3, [r6, #0]
 8016db8:	6825      	ldr	r5, [r4, #0]
 8016dba:	6961      	ldr	r1, [r4, #20]
 8016dbc:	1d18      	adds	r0, r3, #4
 8016dbe:	6030      	str	r0, [r6, #0]
 8016dc0:	062e      	lsls	r6, r5, #24
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	d501      	bpl.n	8016dca <_printf_i+0x1be>
 8016dc6:	6019      	str	r1, [r3, #0]
 8016dc8:	e002      	b.n	8016dd0 <_printf_i+0x1c4>
 8016dca:	0668      	lsls	r0, r5, #25
 8016dcc:	d5fb      	bpl.n	8016dc6 <_printf_i+0x1ba>
 8016dce:	8019      	strh	r1, [r3, #0]
 8016dd0:	2300      	movs	r3, #0
 8016dd2:	6123      	str	r3, [r4, #16]
 8016dd4:	4616      	mov	r6, r2
 8016dd6:	e7bc      	b.n	8016d52 <_printf_i+0x146>
 8016dd8:	6833      	ldr	r3, [r6, #0]
 8016dda:	1d1a      	adds	r2, r3, #4
 8016ddc:	6032      	str	r2, [r6, #0]
 8016dde:	681e      	ldr	r6, [r3, #0]
 8016de0:	6862      	ldr	r2, [r4, #4]
 8016de2:	2100      	movs	r1, #0
 8016de4:	4630      	mov	r0, r6
 8016de6:	f7e9 fa0b 	bl	8000200 <memchr>
 8016dea:	b108      	cbz	r0, 8016df0 <_printf_i+0x1e4>
 8016dec:	1b80      	subs	r0, r0, r6
 8016dee:	6060      	str	r0, [r4, #4]
 8016df0:	6863      	ldr	r3, [r4, #4]
 8016df2:	6123      	str	r3, [r4, #16]
 8016df4:	2300      	movs	r3, #0
 8016df6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016dfa:	e7aa      	b.n	8016d52 <_printf_i+0x146>
 8016dfc:	6923      	ldr	r3, [r4, #16]
 8016dfe:	4632      	mov	r2, r6
 8016e00:	4649      	mov	r1, r9
 8016e02:	4640      	mov	r0, r8
 8016e04:	47d0      	blx	sl
 8016e06:	3001      	adds	r0, #1
 8016e08:	d0ad      	beq.n	8016d66 <_printf_i+0x15a>
 8016e0a:	6823      	ldr	r3, [r4, #0]
 8016e0c:	079b      	lsls	r3, r3, #30
 8016e0e:	d413      	bmi.n	8016e38 <_printf_i+0x22c>
 8016e10:	68e0      	ldr	r0, [r4, #12]
 8016e12:	9b03      	ldr	r3, [sp, #12]
 8016e14:	4298      	cmp	r0, r3
 8016e16:	bfb8      	it	lt
 8016e18:	4618      	movlt	r0, r3
 8016e1a:	e7a6      	b.n	8016d6a <_printf_i+0x15e>
 8016e1c:	2301      	movs	r3, #1
 8016e1e:	4632      	mov	r2, r6
 8016e20:	4649      	mov	r1, r9
 8016e22:	4640      	mov	r0, r8
 8016e24:	47d0      	blx	sl
 8016e26:	3001      	adds	r0, #1
 8016e28:	d09d      	beq.n	8016d66 <_printf_i+0x15a>
 8016e2a:	3501      	adds	r5, #1
 8016e2c:	68e3      	ldr	r3, [r4, #12]
 8016e2e:	9903      	ldr	r1, [sp, #12]
 8016e30:	1a5b      	subs	r3, r3, r1
 8016e32:	42ab      	cmp	r3, r5
 8016e34:	dcf2      	bgt.n	8016e1c <_printf_i+0x210>
 8016e36:	e7eb      	b.n	8016e10 <_printf_i+0x204>
 8016e38:	2500      	movs	r5, #0
 8016e3a:	f104 0619 	add.w	r6, r4, #25
 8016e3e:	e7f5      	b.n	8016e2c <_printf_i+0x220>
 8016e40:	08017b4c 	.word	0x08017b4c
 8016e44:	08017b5d 	.word	0x08017b5d

08016e48 <_scanf_chars>:
 8016e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e4c:	4615      	mov	r5, r2
 8016e4e:	688a      	ldr	r2, [r1, #8]
 8016e50:	4680      	mov	r8, r0
 8016e52:	460c      	mov	r4, r1
 8016e54:	b932      	cbnz	r2, 8016e64 <_scanf_chars+0x1c>
 8016e56:	698a      	ldr	r2, [r1, #24]
 8016e58:	2a00      	cmp	r2, #0
 8016e5a:	bf14      	ite	ne
 8016e5c:	f04f 32ff 	movne.w	r2, #4294967295
 8016e60:	2201      	moveq	r2, #1
 8016e62:	608a      	str	r2, [r1, #8]
 8016e64:	6822      	ldr	r2, [r4, #0]
 8016e66:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8016ef8 <_scanf_chars+0xb0>
 8016e6a:	06d1      	lsls	r1, r2, #27
 8016e6c:	bf5f      	itttt	pl
 8016e6e:	681a      	ldrpl	r2, [r3, #0]
 8016e70:	1d11      	addpl	r1, r2, #4
 8016e72:	6019      	strpl	r1, [r3, #0]
 8016e74:	6816      	ldrpl	r6, [r2, #0]
 8016e76:	2700      	movs	r7, #0
 8016e78:	69a0      	ldr	r0, [r4, #24]
 8016e7a:	b188      	cbz	r0, 8016ea0 <_scanf_chars+0x58>
 8016e7c:	2801      	cmp	r0, #1
 8016e7e:	d107      	bne.n	8016e90 <_scanf_chars+0x48>
 8016e80:	682b      	ldr	r3, [r5, #0]
 8016e82:	781a      	ldrb	r2, [r3, #0]
 8016e84:	6963      	ldr	r3, [r4, #20]
 8016e86:	5c9b      	ldrb	r3, [r3, r2]
 8016e88:	b953      	cbnz	r3, 8016ea0 <_scanf_chars+0x58>
 8016e8a:	2f00      	cmp	r7, #0
 8016e8c:	d031      	beq.n	8016ef2 <_scanf_chars+0xaa>
 8016e8e:	e022      	b.n	8016ed6 <_scanf_chars+0x8e>
 8016e90:	2802      	cmp	r0, #2
 8016e92:	d120      	bne.n	8016ed6 <_scanf_chars+0x8e>
 8016e94:	682b      	ldr	r3, [r5, #0]
 8016e96:	781b      	ldrb	r3, [r3, #0]
 8016e98:	f819 3003 	ldrb.w	r3, [r9, r3]
 8016e9c:	071b      	lsls	r3, r3, #28
 8016e9e:	d41a      	bmi.n	8016ed6 <_scanf_chars+0x8e>
 8016ea0:	6823      	ldr	r3, [r4, #0]
 8016ea2:	06da      	lsls	r2, r3, #27
 8016ea4:	bf5e      	ittt	pl
 8016ea6:	682b      	ldrpl	r3, [r5, #0]
 8016ea8:	781b      	ldrbpl	r3, [r3, #0]
 8016eaa:	f806 3b01 	strbpl.w	r3, [r6], #1
 8016eae:	682a      	ldr	r2, [r5, #0]
 8016eb0:	686b      	ldr	r3, [r5, #4]
 8016eb2:	3201      	adds	r2, #1
 8016eb4:	602a      	str	r2, [r5, #0]
 8016eb6:	68a2      	ldr	r2, [r4, #8]
 8016eb8:	3b01      	subs	r3, #1
 8016eba:	3a01      	subs	r2, #1
 8016ebc:	606b      	str	r3, [r5, #4]
 8016ebe:	3701      	adds	r7, #1
 8016ec0:	60a2      	str	r2, [r4, #8]
 8016ec2:	b142      	cbz	r2, 8016ed6 <_scanf_chars+0x8e>
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	dcd7      	bgt.n	8016e78 <_scanf_chars+0x30>
 8016ec8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8016ecc:	4629      	mov	r1, r5
 8016ece:	4640      	mov	r0, r8
 8016ed0:	4798      	blx	r3
 8016ed2:	2800      	cmp	r0, #0
 8016ed4:	d0d0      	beq.n	8016e78 <_scanf_chars+0x30>
 8016ed6:	6823      	ldr	r3, [r4, #0]
 8016ed8:	f013 0310 	ands.w	r3, r3, #16
 8016edc:	d105      	bne.n	8016eea <_scanf_chars+0xa2>
 8016ede:	68e2      	ldr	r2, [r4, #12]
 8016ee0:	3201      	adds	r2, #1
 8016ee2:	60e2      	str	r2, [r4, #12]
 8016ee4:	69a2      	ldr	r2, [r4, #24]
 8016ee6:	b102      	cbz	r2, 8016eea <_scanf_chars+0xa2>
 8016ee8:	7033      	strb	r3, [r6, #0]
 8016eea:	6923      	ldr	r3, [r4, #16]
 8016eec:	443b      	add	r3, r7
 8016eee:	6123      	str	r3, [r4, #16]
 8016ef0:	2000      	movs	r0, #0
 8016ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ef6:	bf00      	nop
 8016ef8:	08017a3b 	.word	0x08017a3b

08016efc <_scanf_i>:
 8016efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f00:	4698      	mov	r8, r3
 8016f02:	4b74      	ldr	r3, [pc, #464]	@ (80170d4 <_scanf_i+0x1d8>)
 8016f04:	460c      	mov	r4, r1
 8016f06:	4682      	mov	sl, r0
 8016f08:	4616      	mov	r6, r2
 8016f0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016f0e:	b087      	sub	sp, #28
 8016f10:	ab03      	add	r3, sp, #12
 8016f12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016f16:	4b70      	ldr	r3, [pc, #448]	@ (80170d8 <_scanf_i+0x1dc>)
 8016f18:	69a1      	ldr	r1, [r4, #24]
 8016f1a:	4a70      	ldr	r2, [pc, #448]	@ (80170dc <_scanf_i+0x1e0>)
 8016f1c:	2903      	cmp	r1, #3
 8016f1e:	bf08      	it	eq
 8016f20:	461a      	moveq	r2, r3
 8016f22:	68a3      	ldr	r3, [r4, #8]
 8016f24:	9201      	str	r2, [sp, #4]
 8016f26:	1e5a      	subs	r2, r3, #1
 8016f28:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8016f2c:	bf88      	it	hi
 8016f2e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8016f32:	4627      	mov	r7, r4
 8016f34:	bf82      	ittt	hi
 8016f36:	eb03 0905 	addhi.w	r9, r3, r5
 8016f3a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8016f3e:	60a3      	strhi	r3, [r4, #8]
 8016f40:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016f44:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8016f48:	bf98      	it	ls
 8016f4a:	f04f 0900 	movls.w	r9, #0
 8016f4e:	6023      	str	r3, [r4, #0]
 8016f50:	463d      	mov	r5, r7
 8016f52:	f04f 0b00 	mov.w	fp, #0
 8016f56:	6831      	ldr	r1, [r6, #0]
 8016f58:	ab03      	add	r3, sp, #12
 8016f5a:	7809      	ldrb	r1, [r1, #0]
 8016f5c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016f60:	2202      	movs	r2, #2
 8016f62:	f7e9 f94d 	bl	8000200 <memchr>
 8016f66:	b328      	cbz	r0, 8016fb4 <_scanf_i+0xb8>
 8016f68:	f1bb 0f01 	cmp.w	fp, #1
 8016f6c:	d159      	bne.n	8017022 <_scanf_i+0x126>
 8016f6e:	6862      	ldr	r2, [r4, #4]
 8016f70:	b92a      	cbnz	r2, 8016f7e <_scanf_i+0x82>
 8016f72:	6822      	ldr	r2, [r4, #0]
 8016f74:	2108      	movs	r1, #8
 8016f76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016f7a:	6061      	str	r1, [r4, #4]
 8016f7c:	6022      	str	r2, [r4, #0]
 8016f7e:	6822      	ldr	r2, [r4, #0]
 8016f80:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8016f84:	6022      	str	r2, [r4, #0]
 8016f86:	68a2      	ldr	r2, [r4, #8]
 8016f88:	1e51      	subs	r1, r2, #1
 8016f8a:	60a1      	str	r1, [r4, #8]
 8016f8c:	b192      	cbz	r2, 8016fb4 <_scanf_i+0xb8>
 8016f8e:	6832      	ldr	r2, [r6, #0]
 8016f90:	1c51      	adds	r1, r2, #1
 8016f92:	6031      	str	r1, [r6, #0]
 8016f94:	7812      	ldrb	r2, [r2, #0]
 8016f96:	f805 2b01 	strb.w	r2, [r5], #1
 8016f9a:	6872      	ldr	r2, [r6, #4]
 8016f9c:	3a01      	subs	r2, #1
 8016f9e:	2a00      	cmp	r2, #0
 8016fa0:	6072      	str	r2, [r6, #4]
 8016fa2:	dc07      	bgt.n	8016fb4 <_scanf_i+0xb8>
 8016fa4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8016fa8:	4631      	mov	r1, r6
 8016faa:	4650      	mov	r0, sl
 8016fac:	4790      	blx	r2
 8016fae:	2800      	cmp	r0, #0
 8016fb0:	f040 8085 	bne.w	80170be <_scanf_i+0x1c2>
 8016fb4:	f10b 0b01 	add.w	fp, fp, #1
 8016fb8:	f1bb 0f03 	cmp.w	fp, #3
 8016fbc:	d1cb      	bne.n	8016f56 <_scanf_i+0x5a>
 8016fbe:	6863      	ldr	r3, [r4, #4]
 8016fc0:	b90b      	cbnz	r3, 8016fc6 <_scanf_i+0xca>
 8016fc2:	230a      	movs	r3, #10
 8016fc4:	6063      	str	r3, [r4, #4]
 8016fc6:	6863      	ldr	r3, [r4, #4]
 8016fc8:	4945      	ldr	r1, [pc, #276]	@ (80170e0 <_scanf_i+0x1e4>)
 8016fca:	6960      	ldr	r0, [r4, #20]
 8016fcc:	1ac9      	subs	r1, r1, r3
 8016fce:	f000 f889 	bl	80170e4 <__sccl>
 8016fd2:	f04f 0b00 	mov.w	fp, #0
 8016fd6:	68a3      	ldr	r3, [r4, #8]
 8016fd8:	6822      	ldr	r2, [r4, #0]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d03d      	beq.n	801705a <_scanf_i+0x15e>
 8016fde:	6831      	ldr	r1, [r6, #0]
 8016fe0:	6960      	ldr	r0, [r4, #20]
 8016fe2:	f891 c000 	ldrb.w	ip, [r1]
 8016fe6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016fea:	2800      	cmp	r0, #0
 8016fec:	d035      	beq.n	801705a <_scanf_i+0x15e>
 8016fee:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8016ff2:	d124      	bne.n	801703e <_scanf_i+0x142>
 8016ff4:	0510      	lsls	r0, r2, #20
 8016ff6:	d522      	bpl.n	801703e <_scanf_i+0x142>
 8016ff8:	f10b 0b01 	add.w	fp, fp, #1
 8016ffc:	f1b9 0f00 	cmp.w	r9, #0
 8017000:	d003      	beq.n	801700a <_scanf_i+0x10e>
 8017002:	3301      	adds	r3, #1
 8017004:	f109 39ff 	add.w	r9, r9, #4294967295
 8017008:	60a3      	str	r3, [r4, #8]
 801700a:	6873      	ldr	r3, [r6, #4]
 801700c:	3b01      	subs	r3, #1
 801700e:	2b00      	cmp	r3, #0
 8017010:	6073      	str	r3, [r6, #4]
 8017012:	dd1b      	ble.n	801704c <_scanf_i+0x150>
 8017014:	6833      	ldr	r3, [r6, #0]
 8017016:	3301      	adds	r3, #1
 8017018:	6033      	str	r3, [r6, #0]
 801701a:	68a3      	ldr	r3, [r4, #8]
 801701c:	3b01      	subs	r3, #1
 801701e:	60a3      	str	r3, [r4, #8]
 8017020:	e7d9      	b.n	8016fd6 <_scanf_i+0xda>
 8017022:	f1bb 0f02 	cmp.w	fp, #2
 8017026:	d1ae      	bne.n	8016f86 <_scanf_i+0x8a>
 8017028:	6822      	ldr	r2, [r4, #0]
 801702a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801702e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8017032:	d1c4      	bne.n	8016fbe <_scanf_i+0xc2>
 8017034:	2110      	movs	r1, #16
 8017036:	6061      	str	r1, [r4, #4]
 8017038:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801703c:	e7a2      	b.n	8016f84 <_scanf_i+0x88>
 801703e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8017042:	6022      	str	r2, [r4, #0]
 8017044:	780b      	ldrb	r3, [r1, #0]
 8017046:	f805 3b01 	strb.w	r3, [r5], #1
 801704a:	e7de      	b.n	801700a <_scanf_i+0x10e>
 801704c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8017050:	4631      	mov	r1, r6
 8017052:	4650      	mov	r0, sl
 8017054:	4798      	blx	r3
 8017056:	2800      	cmp	r0, #0
 8017058:	d0df      	beq.n	801701a <_scanf_i+0x11e>
 801705a:	6823      	ldr	r3, [r4, #0]
 801705c:	05d9      	lsls	r1, r3, #23
 801705e:	d50d      	bpl.n	801707c <_scanf_i+0x180>
 8017060:	42bd      	cmp	r5, r7
 8017062:	d909      	bls.n	8017078 <_scanf_i+0x17c>
 8017064:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017068:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801706c:	4632      	mov	r2, r6
 801706e:	4650      	mov	r0, sl
 8017070:	4798      	blx	r3
 8017072:	f105 39ff 	add.w	r9, r5, #4294967295
 8017076:	464d      	mov	r5, r9
 8017078:	42bd      	cmp	r5, r7
 801707a:	d028      	beq.n	80170ce <_scanf_i+0x1d2>
 801707c:	6822      	ldr	r2, [r4, #0]
 801707e:	f012 0210 	ands.w	r2, r2, #16
 8017082:	d113      	bne.n	80170ac <_scanf_i+0x1b0>
 8017084:	702a      	strb	r2, [r5, #0]
 8017086:	6863      	ldr	r3, [r4, #4]
 8017088:	9e01      	ldr	r6, [sp, #4]
 801708a:	4639      	mov	r1, r7
 801708c:	4650      	mov	r0, sl
 801708e:	47b0      	blx	r6
 8017090:	f8d8 3000 	ldr.w	r3, [r8]
 8017094:	6821      	ldr	r1, [r4, #0]
 8017096:	1d1a      	adds	r2, r3, #4
 8017098:	f8c8 2000 	str.w	r2, [r8]
 801709c:	f011 0f20 	tst.w	r1, #32
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	d00f      	beq.n	80170c4 <_scanf_i+0x1c8>
 80170a4:	6018      	str	r0, [r3, #0]
 80170a6:	68e3      	ldr	r3, [r4, #12]
 80170a8:	3301      	adds	r3, #1
 80170aa:	60e3      	str	r3, [r4, #12]
 80170ac:	6923      	ldr	r3, [r4, #16]
 80170ae:	1bed      	subs	r5, r5, r7
 80170b0:	445d      	add	r5, fp
 80170b2:	442b      	add	r3, r5
 80170b4:	6123      	str	r3, [r4, #16]
 80170b6:	2000      	movs	r0, #0
 80170b8:	b007      	add	sp, #28
 80170ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170be:	f04f 0b00 	mov.w	fp, #0
 80170c2:	e7ca      	b.n	801705a <_scanf_i+0x15e>
 80170c4:	07ca      	lsls	r2, r1, #31
 80170c6:	bf4c      	ite	mi
 80170c8:	8018      	strhmi	r0, [r3, #0]
 80170ca:	6018      	strpl	r0, [r3, #0]
 80170cc:	e7eb      	b.n	80170a6 <_scanf_i+0x1aa>
 80170ce:	2001      	movs	r0, #1
 80170d0:	e7f2      	b.n	80170b8 <_scanf_i+0x1bc>
 80170d2:	bf00      	nop
 80170d4:	080178f8 	.word	0x080178f8
 80170d8:	080160f5 	.word	0x080160f5
 80170dc:	08017359 	.word	0x08017359
 80170e0:	08017b7e 	.word	0x08017b7e

080170e4 <__sccl>:
 80170e4:	b570      	push	{r4, r5, r6, lr}
 80170e6:	780b      	ldrb	r3, [r1, #0]
 80170e8:	4604      	mov	r4, r0
 80170ea:	2b5e      	cmp	r3, #94	@ 0x5e
 80170ec:	bf0b      	itete	eq
 80170ee:	784b      	ldrbeq	r3, [r1, #1]
 80170f0:	1c4a      	addne	r2, r1, #1
 80170f2:	1c8a      	addeq	r2, r1, #2
 80170f4:	2100      	movne	r1, #0
 80170f6:	bf08      	it	eq
 80170f8:	2101      	moveq	r1, #1
 80170fa:	3801      	subs	r0, #1
 80170fc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8017100:	f800 1f01 	strb.w	r1, [r0, #1]!
 8017104:	42a8      	cmp	r0, r5
 8017106:	d1fb      	bne.n	8017100 <__sccl+0x1c>
 8017108:	b90b      	cbnz	r3, 801710e <__sccl+0x2a>
 801710a:	1e50      	subs	r0, r2, #1
 801710c:	bd70      	pop	{r4, r5, r6, pc}
 801710e:	f081 0101 	eor.w	r1, r1, #1
 8017112:	54e1      	strb	r1, [r4, r3]
 8017114:	4610      	mov	r0, r2
 8017116:	4602      	mov	r2, r0
 8017118:	f812 5b01 	ldrb.w	r5, [r2], #1
 801711c:	2d2d      	cmp	r5, #45	@ 0x2d
 801711e:	d005      	beq.n	801712c <__sccl+0x48>
 8017120:	2d5d      	cmp	r5, #93	@ 0x5d
 8017122:	d016      	beq.n	8017152 <__sccl+0x6e>
 8017124:	2d00      	cmp	r5, #0
 8017126:	d0f1      	beq.n	801710c <__sccl+0x28>
 8017128:	462b      	mov	r3, r5
 801712a:	e7f2      	b.n	8017112 <__sccl+0x2e>
 801712c:	7846      	ldrb	r6, [r0, #1]
 801712e:	2e5d      	cmp	r6, #93	@ 0x5d
 8017130:	d0fa      	beq.n	8017128 <__sccl+0x44>
 8017132:	42b3      	cmp	r3, r6
 8017134:	dcf8      	bgt.n	8017128 <__sccl+0x44>
 8017136:	3002      	adds	r0, #2
 8017138:	461a      	mov	r2, r3
 801713a:	3201      	adds	r2, #1
 801713c:	4296      	cmp	r6, r2
 801713e:	54a1      	strb	r1, [r4, r2]
 8017140:	dcfb      	bgt.n	801713a <__sccl+0x56>
 8017142:	1af2      	subs	r2, r6, r3
 8017144:	3a01      	subs	r2, #1
 8017146:	1c5d      	adds	r5, r3, #1
 8017148:	42b3      	cmp	r3, r6
 801714a:	bfa8      	it	ge
 801714c:	2200      	movge	r2, #0
 801714e:	18ab      	adds	r3, r5, r2
 8017150:	e7e1      	b.n	8017116 <__sccl+0x32>
 8017152:	4610      	mov	r0, r2
 8017154:	e7da      	b.n	801710c <__sccl+0x28>

08017156 <__submore>:
 8017156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801715a:	460c      	mov	r4, r1
 801715c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801715e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017162:	4299      	cmp	r1, r3
 8017164:	d11d      	bne.n	80171a2 <__submore+0x4c>
 8017166:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801716a:	f7ff f92d 	bl	80163c8 <_malloc_r>
 801716e:	b918      	cbnz	r0, 8017178 <__submore+0x22>
 8017170:	f04f 30ff 	mov.w	r0, #4294967295
 8017174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017178:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801717c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801717e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8017182:	6360      	str	r0, [r4, #52]	@ 0x34
 8017184:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8017188:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801718c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8017190:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8017194:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8017198:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801719c:	6020      	str	r0, [r4, #0]
 801719e:	2000      	movs	r0, #0
 80171a0:	e7e8      	b.n	8017174 <__submore+0x1e>
 80171a2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80171a4:	0077      	lsls	r7, r6, #1
 80171a6:	463a      	mov	r2, r7
 80171a8:	f000 f83a 	bl	8017220 <_realloc_r>
 80171ac:	4605      	mov	r5, r0
 80171ae:	2800      	cmp	r0, #0
 80171b0:	d0de      	beq.n	8017170 <__submore+0x1a>
 80171b2:	eb00 0806 	add.w	r8, r0, r6
 80171b6:	4601      	mov	r1, r0
 80171b8:	4632      	mov	r2, r6
 80171ba:	4640      	mov	r0, r8
 80171bc:	f7ff f88a 	bl	80162d4 <memcpy>
 80171c0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80171c4:	f8c4 8000 	str.w	r8, [r4]
 80171c8:	e7e9      	b.n	801719e <__submore+0x48>

080171ca <memmove>:
 80171ca:	4288      	cmp	r0, r1
 80171cc:	b510      	push	{r4, lr}
 80171ce:	eb01 0402 	add.w	r4, r1, r2
 80171d2:	d902      	bls.n	80171da <memmove+0x10>
 80171d4:	4284      	cmp	r4, r0
 80171d6:	4623      	mov	r3, r4
 80171d8:	d807      	bhi.n	80171ea <memmove+0x20>
 80171da:	1e43      	subs	r3, r0, #1
 80171dc:	42a1      	cmp	r1, r4
 80171de:	d008      	beq.n	80171f2 <memmove+0x28>
 80171e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80171e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80171e8:	e7f8      	b.n	80171dc <memmove+0x12>
 80171ea:	4402      	add	r2, r0
 80171ec:	4601      	mov	r1, r0
 80171ee:	428a      	cmp	r2, r1
 80171f0:	d100      	bne.n	80171f4 <memmove+0x2a>
 80171f2:	bd10      	pop	{r4, pc}
 80171f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80171f8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80171fc:	e7f7      	b.n	80171ee <memmove+0x24>
	...

08017200 <_sbrk_r>:
 8017200:	b538      	push	{r3, r4, r5, lr}
 8017202:	4d06      	ldr	r5, [pc, #24]	@ (801721c <_sbrk_r+0x1c>)
 8017204:	2300      	movs	r3, #0
 8017206:	4604      	mov	r4, r0
 8017208:	4608      	mov	r0, r1
 801720a:	602b      	str	r3, [r5, #0]
 801720c:	f7f0 fdc2 	bl	8007d94 <_sbrk>
 8017210:	1c43      	adds	r3, r0, #1
 8017212:	d102      	bne.n	801721a <_sbrk_r+0x1a>
 8017214:	682b      	ldr	r3, [r5, #0]
 8017216:	b103      	cbz	r3, 801721a <_sbrk_r+0x1a>
 8017218:	6023      	str	r3, [r4, #0]
 801721a:	bd38      	pop	{r3, r4, r5, pc}
 801721c:	20005f48 	.word	0x20005f48

08017220 <_realloc_r>:
 8017220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017224:	4607      	mov	r7, r0
 8017226:	4614      	mov	r4, r2
 8017228:	460d      	mov	r5, r1
 801722a:	b921      	cbnz	r1, 8017236 <_realloc_r+0x16>
 801722c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017230:	4611      	mov	r1, r2
 8017232:	f7ff b8c9 	b.w	80163c8 <_malloc_r>
 8017236:	b92a      	cbnz	r2, 8017244 <_realloc_r+0x24>
 8017238:	f7ff f85a 	bl	80162f0 <_free_r>
 801723c:	4625      	mov	r5, r4
 801723e:	4628      	mov	r0, r5
 8017240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017244:	f000 f88a 	bl	801735c <_malloc_usable_size_r>
 8017248:	4284      	cmp	r4, r0
 801724a:	4606      	mov	r6, r0
 801724c:	d802      	bhi.n	8017254 <_realloc_r+0x34>
 801724e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017252:	d8f4      	bhi.n	801723e <_realloc_r+0x1e>
 8017254:	4621      	mov	r1, r4
 8017256:	4638      	mov	r0, r7
 8017258:	f7ff f8b6 	bl	80163c8 <_malloc_r>
 801725c:	4680      	mov	r8, r0
 801725e:	b908      	cbnz	r0, 8017264 <_realloc_r+0x44>
 8017260:	4645      	mov	r5, r8
 8017262:	e7ec      	b.n	801723e <_realloc_r+0x1e>
 8017264:	42b4      	cmp	r4, r6
 8017266:	4622      	mov	r2, r4
 8017268:	4629      	mov	r1, r5
 801726a:	bf28      	it	cs
 801726c:	4632      	movcs	r2, r6
 801726e:	f7ff f831 	bl	80162d4 <memcpy>
 8017272:	4629      	mov	r1, r5
 8017274:	4638      	mov	r0, r7
 8017276:	f7ff f83b 	bl	80162f0 <_free_r>
 801727a:	e7f1      	b.n	8017260 <_realloc_r+0x40>

0801727c <_strtoul_l.isra.0>:
 801727c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017280:	4e34      	ldr	r6, [pc, #208]	@ (8017354 <_strtoul_l.isra.0+0xd8>)
 8017282:	4686      	mov	lr, r0
 8017284:	460d      	mov	r5, r1
 8017286:	4628      	mov	r0, r5
 8017288:	f815 4b01 	ldrb.w	r4, [r5], #1
 801728c:	5d37      	ldrb	r7, [r6, r4]
 801728e:	f017 0708 	ands.w	r7, r7, #8
 8017292:	d1f8      	bne.n	8017286 <_strtoul_l.isra.0+0xa>
 8017294:	2c2d      	cmp	r4, #45	@ 0x2d
 8017296:	d110      	bne.n	80172ba <_strtoul_l.isra.0+0x3e>
 8017298:	782c      	ldrb	r4, [r5, #0]
 801729a:	2701      	movs	r7, #1
 801729c:	1c85      	adds	r5, r0, #2
 801729e:	f033 0010 	bics.w	r0, r3, #16
 80172a2:	d115      	bne.n	80172d0 <_strtoul_l.isra.0+0x54>
 80172a4:	2c30      	cmp	r4, #48	@ 0x30
 80172a6:	d10d      	bne.n	80172c4 <_strtoul_l.isra.0+0x48>
 80172a8:	7828      	ldrb	r0, [r5, #0]
 80172aa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80172ae:	2858      	cmp	r0, #88	@ 0x58
 80172b0:	d108      	bne.n	80172c4 <_strtoul_l.isra.0+0x48>
 80172b2:	786c      	ldrb	r4, [r5, #1]
 80172b4:	3502      	adds	r5, #2
 80172b6:	2310      	movs	r3, #16
 80172b8:	e00a      	b.n	80172d0 <_strtoul_l.isra.0+0x54>
 80172ba:	2c2b      	cmp	r4, #43	@ 0x2b
 80172bc:	bf04      	itt	eq
 80172be:	782c      	ldrbeq	r4, [r5, #0]
 80172c0:	1c85      	addeq	r5, r0, #2
 80172c2:	e7ec      	b.n	801729e <_strtoul_l.isra.0+0x22>
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d1f6      	bne.n	80172b6 <_strtoul_l.isra.0+0x3a>
 80172c8:	2c30      	cmp	r4, #48	@ 0x30
 80172ca:	bf14      	ite	ne
 80172cc:	230a      	movne	r3, #10
 80172ce:	2308      	moveq	r3, #8
 80172d0:	f04f 38ff 	mov.w	r8, #4294967295
 80172d4:	2600      	movs	r6, #0
 80172d6:	fbb8 f8f3 	udiv	r8, r8, r3
 80172da:	fb03 f908 	mul.w	r9, r3, r8
 80172de:	ea6f 0909 	mvn.w	r9, r9
 80172e2:	4630      	mov	r0, r6
 80172e4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80172e8:	f1bc 0f09 	cmp.w	ip, #9
 80172ec:	d810      	bhi.n	8017310 <_strtoul_l.isra.0+0x94>
 80172ee:	4664      	mov	r4, ip
 80172f0:	42a3      	cmp	r3, r4
 80172f2:	dd1e      	ble.n	8017332 <_strtoul_l.isra.0+0xb6>
 80172f4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80172f8:	d007      	beq.n	801730a <_strtoul_l.isra.0+0x8e>
 80172fa:	4580      	cmp	r8, r0
 80172fc:	d316      	bcc.n	801732c <_strtoul_l.isra.0+0xb0>
 80172fe:	d101      	bne.n	8017304 <_strtoul_l.isra.0+0x88>
 8017300:	45a1      	cmp	r9, r4
 8017302:	db13      	blt.n	801732c <_strtoul_l.isra.0+0xb0>
 8017304:	fb00 4003 	mla	r0, r0, r3, r4
 8017308:	2601      	movs	r6, #1
 801730a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801730e:	e7e9      	b.n	80172e4 <_strtoul_l.isra.0+0x68>
 8017310:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8017314:	f1bc 0f19 	cmp.w	ip, #25
 8017318:	d801      	bhi.n	801731e <_strtoul_l.isra.0+0xa2>
 801731a:	3c37      	subs	r4, #55	@ 0x37
 801731c:	e7e8      	b.n	80172f0 <_strtoul_l.isra.0+0x74>
 801731e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8017322:	f1bc 0f19 	cmp.w	ip, #25
 8017326:	d804      	bhi.n	8017332 <_strtoul_l.isra.0+0xb6>
 8017328:	3c57      	subs	r4, #87	@ 0x57
 801732a:	e7e1      	b.n	80172f0 <_strtoul_l.isra.0+0x74>
 801732c:	f04f 36ff 	mov.w	r6, #4294967295
 8017330:	e7eb      	b.n	801730a <_strtoul_l.isra.0+0x8e>
 8017332:	1c73      	adds	r3, r6, #1
 8017334:	d106      	bne.n	8017344 <_strtoul_l.isra.0+0xc8>
 8017336:	2322      	movs	r3, #34	@ 0x22
 8017338:	f8ce 3000 	str.w	r3, [lr]
 801733c:	4630      	mov	r0, r6
 801733e:	b932      	cbnz	r2, 801734e <_strtoul_l.isra.0+0xd2>
 8017340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017344:	b107      	cbz	r7, 8017348 <_strtoul_l.isra.0+0xcc>
 8017346:	4240      	negs	r0, r0
 8017348:	2a00      	cmp	r2, #0
 801734a:	d0f9      	beq.n	8017340 <_strtoul_l.isra.0+0xc4>
 801734c:	b106      	cbz	r6, 8017350 <_strtoul_l.isra.0+0xd4>
 801734e:	1e69      	subs	r1, r5, #1
 8017350:	6011      	str	r1, [r2, #0]
 8017352:	e7f5      	b.n	8017340 <_strtoul_l.isra.0+0xc4>
 8017354:	08017a3b 	.word	0x08017a3b

08017358 <_strtoul_r>:
 8017358:	f7ff bf90 	b.w	801727c <_strtoul_l.isra.0>

0801735c <_malloc_usable_size_r>:
 801735c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017360:	1f18      	subs	r0, r3, #4
 8017362:	2b00      	cmp	r3, #0
 8017364:	bfbc      	itt	lt
 8017366:	580b      	ldrlt	r3, [r1, r0]
 8017368:	18c0      	addlt	r0, r0, r3
 801736a:	4770      	bx	lr

0801736c <_init>:
 801736c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801736e:	bf00      	nop
 8017370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017372:	bc08      	pop	{r3}
 8017374:	469e      	mov	lr, r3
 8017376:	4770      	bx	lr

08017378 <_fini>:
 8017378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801737a:	bf00      	nop
 801737c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801737e:	bc08      	pop	{r3}
 8017380:	469e      	mov	lr, r3
 8017382:	4770      	bx	lr
