
Smart_Joint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000188c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab8  08018a58  08018a58  00019a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019510  08019510  0001b084  2**0
                  CONTENTS
  4 .ARM          00000008  08019510  08019510  0001a510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019518  08019518  0001b084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019518  08019518  0001a518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801951c  0801951c  0001a51c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08019520  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d40  20000088  080195a4  0001b088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005dc8  080195a4  0001bdc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003adfa  00000000  00000000  0001b0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006979  00000000  00000000  00055eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ed8  00000000  00000000  0005c828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000024d5  00000000  00000000  0005f700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000315db  00000000  00000000  00061bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003913a  00000000  00000000  000931b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124d3d  00000000  00000000  000cc2ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f1027  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d2e4  00000000  00000000  001f106c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001fe350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018a40 	.word	0x08018a40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08018a40 	.word	0x08018a40

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b988 	b.w	8000da4 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	468e      	mov	lr, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	4688      	mov	r8, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d962      	bls.n	8000b88 <__udivmoddi4+0xdc>
 8000ac2:	fab2 f682 	clz	r6, r2
 8000ac6:	b14e      	cbz	r6, 8000adc <__udivmoddi4+0x30>
 8000ac8:	f1c6 0320 	rsb	r3, r6, #32
 8000acc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ad0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad4:	40b7      	lsls	r7, r6
 8000ad6:	ea43 0808 	orr.w	r8, r3, r8
 8000ada:	40b4      	lsls	r4, r6
 8000adc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae0:	fa1f fc87 	uxth.w	ip, r7
 8000ae4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	fb0e 8811 	mls	r8, lr, r1, r8
 8000aee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af2:	fb01 f20c 	mul.w	r2, r1, ip
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b00:	f080 80ea 	bcs.w	8000cd8 <__udivmoddi4+0x22c>
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f240 80e7 	bls.w	8000cd8 <__udivmoddi4+0x22c>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	1a9a      	subs	r2, r3, r2
 8000b10:	b2a3      	uxth	r3, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b22:	459c      	cmp	ip, r3
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0x8e>
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2c:	f080 80d6 	bcs.w	8000cdc <__udivmoddi4+0x230>
 8000b30:	459c      	cmp	ip, r3
 8000b32:	f240 80d3 	bls.w	8000cdc <__udivmoddi4+0x230>
 8000b36:	443b      	add	r3, r7
 8000b38:	3802      	subs	r0, #2
 8000b3a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b3e:	eba3 030c 	sub.w	r3, r3, ip
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11d      	cbz	r5, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40f3      	lsrs	r3, r6
 8000b48:	2200      	movs	r2, #0
 8000b4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d905      	bls.n	8000b62 <__udivmoddi4+0xb6>
 8000b56:	b10d      	cbz	r5, 8000b5c <__udivmoddi4+0xb0>
 8000b58:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e7f5      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b62:	fab3 f183 	clz	r1, r3
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d146      	bne.n	8000bf8 <__udivmoddi4+0x14c>
 8000b6a:	4573      	cmp	r3, lr
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0xc8>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 8105 	bhi.w	8000d7e <__udivmoddi4+0x2d2>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0e5      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b82:	e9c5 4800 	strd	r4, r8, [r5]
 8000b86:	e7e2      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f000 8090 	beq.w	8000cae <__udivmoddi4+0x202>
 8000b8e:	fab2 f682 	clz	r6, r2
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	f040 80a4 	bne.w	8000ce0 <__udivmoddi4+0x234>
 8000b98:	1a8a      	subs	r2, r1, r2
 8000b9a:	0c03      	lsrs	r3, r0, #16
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	b280      	uxth	r0, r0
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000baa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb2:	fb04 f20c 	mul.w	r2, r4, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <__udivmoddi4+0x11e>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x11c>
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f200 80e0 	bhi.w	8000d88 <__udivmoddi4+0x2dc>
 8000bc8:	46c4      	mov	ip, r8
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bd0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bd4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bd8:	fb02 f404 	mul.w	r4, r2, r4
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x144>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x142>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f200 80ca 	bhi.w	8000d82 <__udivmoddi4+0x2d6>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	1b1b      	subs	r3, r3, r4
 8000bf2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bf6:	e7a5      	b.n	8000b44 <__udivmoddi4+0x98>
 8000bf8:	f1c1 0620 	rsb	r6, r1, #32
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000c02:	431f      	orrs	r7, r3
 8000c04:	fa0e f401 	lsl.w	r4, lr, r1
 8000c08:	fa20 f306 	lsr.w	r3, r0, r6
 8000c0c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c10:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c14:	4323      	orrs	r3, r4
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	fa1f fc87 	uxth.w	ip, r7
 8000c1e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c22:	0c1c      	lsrs	r4, r3, #16
 8000c24:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c2c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	fa02 f201 	lsl.w	r2, r2, r1
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x1a0>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c3e:	f080 809c 	bcs.w	8000d7a <__udivmoddi4+0x2ce>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8099 	bls.w	8000d7a <__udivmoddi4+0x2ce>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	fa1f fe83 	uxth.w	lr, r3
 8000c54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c58:	fb09 4413 	mls	r4, r9, r3, r4
 8000c5c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c60:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c64:	45a4      	cmp	ip, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x1ce>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c6e:	f080 8082 	bcs.w	8000d76 <__udivmoddi4+0x2ca>
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	d97f      	bls.n	8000d76 <__udivmoddi4+0x2ca>
 8000c76:	3b02      	subs	r3, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c7e:	eba4 040c 	sub.w	r4, r4, ip
 8000c82:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c86:	4564      	cmp	r4, ip
 8000c88:	4673      	mov	r3, lr
 8000c8a:	46e1      	mov	r9, ip
 8000c8c:	d362      	bcc.n	8000d54 <__udivmoddi4+0x2a8>
 8000c8e:	d05f      	beq.n	8000d50 <__udivmoddi4+0x2a4>
 8000c90:	b15d      	cbz	r5, 8000caa <__udivmoddi4+0x1fe>
 8000c92:	ebb8 0203 	subs.w	r2, r8, r3
 8000c96:	eb64 0409 	sbc.w	r4, r4, r9
 8000c9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000ca2:	431e      	orrs	r6, r3
 8000ca4:	40cc      	lsrs	r4, r1
 8000ca6:	e9c5 6400 	strd	r6, r4, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	e74f      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000cae:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cb2:	0c01      	lsrs	r1, r0, #16
 8000cb4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cb8:	b280      	uxth	r0, r0
 8000cba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	463c      	mov	r4, r7
 8000cc4:	46b8      	mov	r8, r7
 8000cc6:	46be      	mov	lr, r7
 8000cc8:	2620      	movs	r6, #32
 8000cca:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cce:	eba2 0208 	sub.w	r2, r2, r8
 8000cd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cd6:	e766      	b.n	8000ba6 <__udivmoddi4+0xfa>
 8000cd8:	4601      	mov	r1, r0
 8000cda:	e718      	b.n	8000b0e <__udivmoddi4+0x62>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	e72c      	b.n	8000b3a <__udivmoddi4+0x8e>
 8000ce0:	f1c6 0220 	rsb	r2, r6, #32
 8000ce4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ce8:	40b7      	lsls	r7, r6
 8000cea:	40b1      	lsls	r1, r6
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cfa:	b2bc      	uxth	r4, r7
 8000cfc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb08 f904 	mul.w	r9, r8, r4
 8000d0a:	40b0      	lsls	r0, r6
 8000d0c:	4589      	cmp	r9, r1
 8000d0e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d12:	b280      	uxth	r0, r0
 8000d14:	d93e      	bls.n	8000d94 <__udivmoddi4+0x2e8>
 8000d16:	1879      	adds	r1, r7, r1
 8000d18:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d1c:	d201      	bcs.n	8000d22 <__udivmoddi4+0x276>
 8000d1e:	4589      	cmp	r9, r1
 8000d20:	d81f      	bhi.n	8000d62 <__udivmoddi4+0x2b6>
 8000d22:	eba1 0109 	sub.w	r1, r1, r9
 8000d26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2a:	fb09 f804 	mul.w	r8, r9, r4
 8000d2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d32:	b292      	uxth	r2, r2
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	4542      	cmp	r2, r8
 8000d3a:	d229      	bcs.n	8000d90 <__udivmoddi4+0x2e4>
 8000d3c:	18ba      	adds	r2, r7, r2
 8000d3e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d42:	d2c4      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d44:	4542      	cmp	r2, r8
 8000d46:	d2c2      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d48:	f1a9 0102 	sub.w	r1, r9, #2
 8000d4c:	443a      	add	r2, r7
 8000d4e:	e7be      	b.n	8000cce <__udivmoddi4+0x222>
 8000d50:	45f0      	cmp	r8, lr
 8000d52:	d29d      	bcs.n	8000c90 <__udivmoddi4+0x1e4>
 8000d54:	ebbe 0302 	subs.w	r3, lr, r2
 8000d58:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	46e1      	mov	r9, ip
 8000d60:	e796      	b.n	8000c90 <__udivmoddi4+0x1e4>
 8000d62:	eba7 0909 	sub.w	r9, r7, r9
 8000d66:	4449      	add	r1, r9
 8000d68:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d6c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d70:	fb09 f804 	mul.w	r8, r9, r4
 8000d74:	e7db      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d76:	4673      	mov	r3, lr
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1ce>
 8000d7a:	4650      	mov	r0, sl
 8000d7c:	e766      	b.n	8000c4c <__udivmoddi4+0x1a0>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e6fd      	b.n	8000b7e <__udivmoddi4+0xd2>
 8000d82:	443b      	add	r3, r7
 8000d84:	3a02      	subs	r2, #2
 8000d86:	e733      	b.n	8000bf0 <__udivmoddi4+0x144>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	e71c      	b.n	8000bca <__udivmoddi4+0x11e>
 8000d90:	4649      	mov	r1, r9
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x222>
 8000d94:	eba1 0109 	sub.w	r1, r1, r9
 8000d98:	46c4      	mov	ip, r8
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fb09 f804 	mul.w	r8, r9, r4
 8000da2:	e7c4      	b.n	8000d2e <__udivmoddi4+0x282>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
 8000da8:	b480      	push	{r7}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	603b      	str	r3, [r7, #0]
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
#else
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000dbc:	d11a      	bne.n	8000df4 <LL_USART_SetBaudRate+0x4c>
#endif /* USART_PRESC_PRESCALER */
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	005a      	lsls	r2, r3, #1
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	085b      	lsrs	r3, r3, #1
 8000dc6:	441a      	add	r2, r3
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
    brrtemp = usartdiv & 0xFFF0U;
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	085b      	lsrs	r3, r3, #1
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	60da      	str	r2, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif /* USART_PRESC_PRESCALER */
  }
}
 8000df2:	e00a      	b.n	8000e0a <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	085a      	lsrs	r2, r3, #1
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	441a      	add	r2, r3
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	461a      	mov	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	60da      	str	r2, [r3, #12]
}
 8000e0a:	bf00      	nop
 8000e0c:	371c      	adds	r7, #28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <Temp_Sensor_Init>:
#include "main.h"


/*------INIZIALIZZAZIONE SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Init(void)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
	uint8_t data = 0xF0;
 8000e1e:	23f0      	movs	r3, #240	@ 0xf0
 8000e20:	71fb      	strb	r3, [r7, #7]

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK1Freq(), UART_OVERSAMPLING_16, 9600);
 8000e22:	4b18      	ldr	r3, [pc, #96]	@ (8000e84 <Temp_Sensor_Init+0x6c>)
 8000e24:	681c      	ldr	r4, [r3, #0]
 8000e26:	f010 fbad 	bl	8011584 <HAL_RCC_GetPCLK1Freq>
 8000e2a:	4601      	mov	r1, r0
 8000e2c:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000e30:	2200      	movs	r2, #0
 8000e32:	4620      	mov	r0, r4
 8000e34:	f7ff ffb8 	bl	8000da8 <LL_USART_SetBaudRate>
//	UART4->CR1 &= ~(USART_CR1_UE);  // Disabilita UART
//	UART4->BRR = 9600;       // Imposta nuovo baud rate
//	UART4->CR1 |= USART_CR1_UE;      // Riabilita UART

	HAL_UART_Transmit(TEMP_UART, &data, 1, 100);  // low for 500+us
 8000e38:	1df9      	adds	r1, r7, #7
 8000e3a:	2364      	movs	r3, #100	@ 0x64
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	4811      	ldr	r0, [pc, #68]	@ (8000e84 <Temp_Sensor_Init+0x6c>)
 8000e40:	f014 fe36 	bl	8015ab0 <HAL_UART_Transmit>
	if (HAL_UART_Receive(TEMP_UART, &data, 1, 1000) != HAL_OK)
 8000e44:	1df9      	adds	r1, r7, #7
 8000e46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	480d      	ldr	r0, [pc, #52]	@ (8000e84 <Temp_Sensor_Init+0x6c>)
 8000e4e:	f014 feb8 	bl	8015bc2 <HAL_UART_Receive>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <Temp_Sensor_Init+0x44>
		while(1);
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <Temp_Sensor_Init+0x40>

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK1Freq(), UART_OVERSAMPLING_16, 115200);
 8000e5c:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <Temp_Sensor_Init+0x6c>)
 8000e5e:	681c      	ldr	r4, [r3, #0]
 8000e60:	f010 fb90 	bl	8011584 <HAL_RCC_GetPCLK1Freq>
 8000e64:	4601      	mov	r1, r0
 8000e66:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	f7ff ff9b 	bl	8000da8 <LL_USART_SetBaudRate>
//	UART4->CR1 &= ~(USART_CR1_UE);  // Disabilita UART
//	UART4->BRR = 115200;       // Imposta nuovo baud rate
//	UART4->CR1 |= USART_CR1_UE;      // Riabilita UART

	if (data == 0xF0)
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2bf0      	cmp	r3, #240	@ 0xf0
 8000e76:	d101      	bne.n	8000e7c <Temp_Sensor_Init+0x64>
		while(1);
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <Temp_Sensor_Init+0x60>
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd90      	pop	{r4, r7, pc}
 8000e84:	20000434 	.word	0x20000434

08000e88 <Temp_Sensor_Write>:

/*------SCRITTURA SU SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Write(uint8_t data)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[8];

	for (int i=0; i<8; i++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e017      	b.n	8000ec8 <Temp_Sensor_Write+0x40>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 8000e98:	79fa      	ldrb	r2, [r7, #7]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	fa42 f303 	asr.w	r3, r2, r3
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d006      	beq.n	8000eb6 <Temp_Sensor_Write+0x2e>
		{
			buffer[i] = 0xFF;  // write 1
 8000ea8:	f107 020c 	add.w	r2, r7, #12
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	4413      	add	r3, r2
 8000eb0:	22ff      	movs	r2, #255	@ 0xff
 8000eb2:	701a      	strb	r2, [r3, #0]
 8000eb4:	e005      	b.n	8000ec2 <Temp_Sensor_Write+0x3a>
		}
		else  // if the bit is low
		{
			buffer[i] = 0;  // write 0
 8000eb6:	f107 020c 	add.w	r2, r7, #12
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<8; i++)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	2b07      	cmp	r3, #7
 8000ecc:	dde4      	ble.n	8000e98 <Temp_Sensor_Write+0x10>
		}
	}

	HAL_UART_Transmit(TEMP_UART, buffer, 8, 100);
 8000ece:	f107 010c 	add.w	r1, r7, #12
 8000ed2:	2364      	movs	r3, #100	@ 0x64
 8000ed4:	2208      	movs	r2, #8
 8000ed6:	4803      	ldr	r0, [pc, #12]	@ (8000ee4 <Temp_Sensor_Write+0x5c>)
 8000ed8:	f014 fdea 	bl	8015ab0 <HAL_UART_Transmit>
}
 8000edc:	bf00      	nop
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000434 	.word	0x20000434

08000ee8 <Temp_Sensor_ReadByte>:

/*------LETTURA BYTE DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadByte(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
	uint8_t RxByte = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	71bb      	strb	r3, [r7, #6]
 8000ef6:	e00e      	b.n	8000f16 <Temp_Sensor_ReadByte+0x2e>
	{
		RxByte >>= 1;
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	085b      	lsrs	r3, r3, #1
 8000efc:	71fb      	strb	r3, [r7, #7]
		if (Temp_Sensor_ReadBit())
 8000efe:	f000 f813 	bl	8000f28 <Temp_Sensor_ReadBit>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <Temp_Sensor_ReadByte+0x28>
		{
			RxByte |= 0x80;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f0e:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	3301      	adds	r3, #1
 8000f14:	71bb      	strb	r3, [r7, #6]
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	2b07      	cmp	r3, #7
 8000f1a:	d9ed      	bls.n	8000ef8 <Temp_Sensor_ReadByte+0x10>
		}
	}
	return RxByte;
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <Temp_Sensor_ReadBit>:

/*------LETTURA BIT DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadBit(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
    uint8_t ReadBitCMD = 0xFF;
 8000f2e:	23ff      	movs	r3, #255	@ 0xff
 8000f30:	71fb      	strb	r3, [r7, #7]
    uint8_t RxBit;

    // Send Read Bit CMD
    HAL_UART_Transmit(TEMP_UART, &ReadBitCMD, 1, 100);
 8000f32:	1df9      	adds	r1, r7, #7
 8000f34:	2364      	movs	r3, #100	@ 0x64
 8000f36:	2201      	movs	r2, #1
 8000f38:	4808      	ldr	r0, [pc, #32]	@ (8000f5c <Temp_Sensor_ReadBit+0x34>)
 8000f3a:	f014 fdb9 	bl	8015ab0 <HAL_UART_Transmit>
    // Receive The Bit
    HAL_UART_Receive(TEMP_UART, &RxBit, 1, 1000);
 8000f3e:	1db9      	adds	r1, r7, #6
 8000f40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f44:	2201      	movs	r2, #1
 8000f46:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <Temp_Sensor_ReadBit+0x34>)
 8000f48:	f014 fe3b 	bl	8015bc2 <HAL_UART_Receive>

    return (RxBit & 0x01);
 8000f4c:	79bb      	ldrb	r3, [r7, #6]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	b2db      	uxtb	r3, r3
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000434 	.word	0x20000434

08000f60 <Temp_Start_Conversion>:

/*-----INIZIO CONVERSIONE-----*/
void Temp_Start_Conversion(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	Temp_Sensor_Init();
 8000f64:	f7ff ff58 	bl	8000e18 <Temp_Sensor_Init>
	Temp_Sensor_Write(0xCC);  // skip ROM
 8000f68:	20cc      	movs	r0, #204	@ 0xcc
 8000f6a:	f7ff ff8d 	bl	8000e88 <Temp_Sensor_Write>
	Temp_Sensor_Write(0x44);  // convert T
 8000f6e:	2044      	movs	r0, #68	@ 0x44
 8000f70:	f7ff ff8a 	bl	8000e88 <Temp_Sensor_Write>
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <Temperature_Init>:

/*------INIZIALIZZAZIONE E LETTURA TEMPERATURA------*/
uint16_t Temperature_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	Temp_Start_Conversion();
 8000f7c:	f7ff fff0 	bl	8000f60 <Temp_Start_Conversion>
	HAL_Delay(2000);
 8000f80:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f84:	f00b f882 	bl	800c08c <HAL_Delay>
	return Read_Temperature();
 8000f88:	f000 f803 	bl	8000f92 <Read_Temperature>
 8000f8c:	4603      	mov	r3, r0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <Read_Temperature>:



/*------LETTURA TEMPERATURA------*/
uint16_t Read_Temperature(void)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
	uint8_t Temp_LSB = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_MSB = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	71bb      	strb	r3, [r7, #6]
	uint16_t Temp = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	80bb      	strh	r3, [r7, #4]

	Temp_Sensor_Init();
 8000fa4:	f7ff ff38 	bl	8000e18 <Temp_Sensor_Init>
	Temp_Sensor_Write(0xCC);  // skip ROM
 8000fa8:	20cc      	movs	r0, #204	@ 0xcc
 8000faa:	f7ff ff6d 	bl	8000e88 <Temp_Sensor_Write>
	Temp_Sensor_Write(0xBE);         // read Scratch-pad
 8000fae:	20be      	movs	r0, #190	@ 0xbe
 8000fb0:	f7ff ff6a 	bl	8000e88 <Temp_Sensor_Write>
	Temp_LSB = Temp_Sensor_ReadByte();
 8000fb4:	f7ff ff98 	bl	8000ee8 <Temp_Sensor_ReadByte>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	71fb      	strb	r3, [r7, #7]
	Temp_MSB = Temp_Sensor_ReadByte();
 8000fbc:	f7ff ff94 	bl	8000ee8 <Temp_Sensor_ReadByte>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	71bb      	strb	r3, [r7, #6]
	Temp = ((Temp_MSB << 8)) | Temp_LSB;
 8000fc4:	79bb      	ldrb	r3, [r7, #6]
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	80bb      	strh	r3, [r7, #4]
	if (Temp != 0x0550 && Temp != 0x0000 && Temp != 0xFFFF)
 8000fd6:	88bb      	ldrh	r3, [r7, #4]
 8000fd8:	f5b3 6faa 	cmp.w	r3, #1360	@ 0x550
 8000fdc:	d00b      	beq.n	8000ff6 <Read_Temperature+0x64>
 8000fde:	88bb      	ldrh	r3, [r7, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d008      	beq.n	8000ff6 <Read_Temperature+0x64>
 8000fe4:	88bb      	ldrh	r3, [r7, #4]
 8000fe6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d003      	beq.n	8000ff6 <Read_Temperature+0x64>
	{
		Temp_Start_Conversion();
 8000fee:	f7ff ffb7 	bl	8000f60 <Temp_Start_Conversion>
		return Temp;
 8000ff2:	88bb      	ldrh	r3, [r7, #4]
 8000ff4:	e000      	b.n	8000ff8 <Read_Temperature+0x66>
	}

	return 0;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <INA3221_Init>:
#include "INA3221_reg.h"
#include "peripherals.h"
#include "global_variables.h"

void INA3221_Init()
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
	uint16_t rcheck = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	80fb      	strh	r3, [r7, #6]

	INA3221_write_reg(INA3221_REG_CONFIG, 0x8000);   //RESET
 800100a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800100e:	2000      	movs	r0, #0
 8001010:	f000 f880 	bl	8001114 <INA3221_write_reg>

	HAL_Delay(100);
 8001014:	2064      	movs	r0, #100	@ 0x64
 8001016:	f00b f839 	bl	800c08c <HAL_Delay>

	INA3221_read_reg(INA3221_REG_MID, &rcheck);
 800101a:	1dbb      	adds	r3, r7, #6
 800101c:	4619      	mov	r1, r3
 800101e:	20fe      	movs	r0, #254	@ 0xfe
 8001020:	f000 f842 	bl	80010a8 <INA3221_read_reg>

	if(rcheck != INA3221_DEFAULT_MID)
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	f245 4249 	movw	r2, #21577	@ 0x5449
 800102a:	4293      	cmp	r3, r2
 800102c:	d001      	beq.n	8001032 <INA3221_Init+0x32>
		while(1);
 800102e:	bf00      	nop
 8001030:	e7fd      	b.n	800102e <INA3221_Init+0x2e>

	INA3221_write_reg(INA3221_REG_CONFIG, 0x7D27);   //CH1 CH2 CH3 Enabled, 512 AVG, 1.1ms conv time, continous mode
 8001032:	f647 5127 	movw	r1, #32039	@ 0x7d27
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f86c 	bl	8001114 <INA3221_write_reg>
	INA3221_Read_Measure(&Supply);
 800103c:	4803      	ldr	r0, [pc, #12]	@ (800104c <INA3221_Init+0x4c>)
 800103e:	f000 f807 	bl	8001050 <INA3221_Read_Measure>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200038fc 	.word	0x200038fc

08001050 <INA3221_Read_Measure>:

void INA3221_Read_Measure(supply_bus_t *measure)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_1, (uint16_t *)&(measure->v1));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4619      	mov	r1, r3
 800105c:	2002      	movs	r0, #2
 800105e:	f000 f823 	bl	80010a8 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_2, (uint16_t *)&(measure->v2));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3302      	adds	r3, #2
 8001066:	4619      	mov	r1, r3
 8001068:	2004      	movs	r0, #4
 800106a:	f000 f81d 	bl	80010a8 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_3, (uint16_t *)&(measure->v3));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3304      	adds	r3, #4
 8001072:	4619      	mov	r1, r3
 8001074:	2006      	movs	r0, #6
 8001076:	f000 f817 	bl	80010a8 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_1, (uint16_t *)&(measure->i1));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3306      	adds	r3, #6
 800107e:	4619      	mov	r1, r3
 8001080:	2001      	movs	r0, #1
 8001082:	f000 f811 	bl	80010a8 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_2, (uint16_t *)&(measure->i2));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3308      	adds	r3, #8
 800108a:	4619      	mov	r1, r3
 800108c:	2003      	movs	r0, #3
 800108e:	f000 f80b 	bl	80010a8 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_3, (uint16_t *)&(measure->i3));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	330a      	adds	r3, #10
 8001096:	4619      	mov	r1, r3
 8001098:	2005      	movs	r0, #5
 800109a:	f000 f805 	bl	80010a8 <INA3221_read_reg>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <INA3221_read_reg>:


int INA3221_read_reg(uint8_t reg, uint16_t *rdata)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
 80010b8:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 80010ba:	2300      	movs	r3, #0
 80010bc:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, &reg, 1, 100) == HAL_OK)
 80010be:	1dfa      	adds	r2, r7, #7
 80010c0:	2364      	movs	r3, #100	@ 0x64
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2301      	movs	r3, #1
 80010c6:	2180      	movs	r1, #128	@ 0x80
 80010c8:	4811      	ldr	r0, [pc, #68]	@ (8001110 <INA3221_read_reg+0x68>)
 80010ca:	f00e fad5 	bl	800f678 <HAL_I2C_Master_Transmit>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d118      	bne.n	8001106 <INA3221_read_reg+0x5e>
	{

		if(HAL_I2C_Master_Receive(I2C,  INA3221_ADDR_0 << 1, data, 2, 100) == HAL_OK)
 80010d4:	f107 0208 	add.w	r2, r7, #8
 80010d8:	2364      	movs	r3, #100	@ 0x64
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2302      	movs	r3, #2
 80010de:	2180      	movs	r1, #128	@ 0x80
 80010e0:	480b      	ldr	r0, [pc, #44]	@ (8001110 <INA3221_read_reg+0x68>)
 80010e2:	f00e fbe1 	bl	800f8a8 <HAL_I2C_Master_Receive>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10c      	bne.n	8001106 <INA3221_read_reg+0x5e>
		{
			result = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 80010f0:	7a3b      	ldrb	r3, [r7, #8]
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	7a7b      	ldrb	r3, [r7, #9]
 80010fa:	b21b      	sxth	r3, r3
 80010fc:	4313      	orrs	r3, r2
 80010fe:	b21b      	sxth	r3, r3
 8001100:	b29a      	uxth	r2, r3
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000180 	.word	0x20000180

08001114 <INA3221_write_reg>:


int INA3221_write_reg(uint8_t reg, uint16_t wdata)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af02      	add	r7, sp, #8
 800111a:	4603      	mov	r3, r0
 800111c:	460a      	mov	r2, r1
 800111e:	71fb      	strb	r3, [r7, #7]
 8001120:	4613      	mov	r3, r2
 8001122:	80bb      	strh	r3, [r7, #4]
    int result = -1;
 8001124:	f04f 33ff 	mov.w	r3, #4294967295
 8001128:	60fb      	str	r3, [r7, #12]
    uint8_t data[3];
    
    data[0] = reg;                    
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	723b      	strb	r3, [r7, #8]
    data[1] = (wdata >> 8);          
 800112e:	88bb      	ldrh	r3, [r7, #4]
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	b29b      	uxth	r3, r3
 8001134:	b2db      	uxtb	r3, r3
 8001136:	727b      	strb	r3, [r7, #9]
    data[2] = (wdata & 0xFF);        
 8001138:	88bb      	ldrh	r3, [r7, #4]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	72bb      	strb	r3, [r7, #10]

    if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, data, 3, 100) == HAL_OK)
 800113e:	f107 0208 	add.w	r2, r7, #8
 8001142:	2364      	movs	r3, #100	@ 0x64
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2303      	movs	r3, #3
 8001148:	2180      	movs	r1, #128	@ 0x80
 800114a:	4806      	ldr	r0, [pc, #24]	@ (8001164 <INA3221_write_reg+0x50>)
 800114c:	f00e fa94 	bl	800f678 <HAL_I2C_Master_Transmit>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <INA3221_write_reg+0x46>
    {
        result = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
    }
    
    return result;
 800115a:	68fb      	ldr	r3, [r7, #12]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000180 	.word	0x20000180

08001168 <RTC_Init>:
#include "RTC.h"


/*-----INIZiALIZZAZIONE ORA RTC-----*/
void RTC_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
	for (int retry = 0; retry < 3; retry++)
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	e00b      	b.n	800118c <RTC_Init+0x24>
	{
		if (Get_DateTime_From_Network())
 8001174:	f000 f814 	bl	80011a0 <Get_DateTime_From_Network>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10c      	bne.n	8001198 <RTC_Init+0x30>
		{
			return;
		}
		HAL_Delay(1000);
 800117e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001182:	f00a ff83 	bl	800c08c <HAL_Delay>
	for (int retry = 0; retry < 3; retry++)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3301      	adds	r3, #1
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b02      	cmp	r3, #2
 8001190:	ddf0      	ble.n	8001174 <RTC_Init+0xc>
	}
	Set_Default_DateTime();
 8001192:	f000 f95f 	bl	8001454 <Set_Default_DateTime>
 8001196:	e000      	b.n	800119a <RTC_Init+0x32>
			return;
 8001198:	bf00      	nop
}
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <Get_DateTime_From_Network>:

/*-----SINCRONIZZAZIONE RTC DA RETE-----*/
int Get_DateTime_From_Network(void)
{
 80011a0:	b5b0      	push	{r4, r5, r7, lr}
 80011a2:	b0a4      	sub	sp, #144	@ 0x90
 80011a4:	af00      	add	r7, sp, #0
	char response[100] = {0};
 80011a6:	f107 0318 	add.w	r3, r7, #24
 80011aa:	2264      	movs	r2, #100	@ 0x64
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f016 fb76 	bl	80178a0 <memset>
	RTC_DateTypeDef sDate = {0};
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
	RTC_TimeTypeDef sTime = {0};
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]

	SIM_Send_Command("AT+CCLK?\r");
 80011c6:	489f      	ldr	r0, [pc, #636]	@ (8001444 <Get_DateTime_From_Network+0x2a4>)
 80011c8:	f001 f802 	bl	80021d0 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 80011cc:	f107 0318 	add.w	r3, r7, #24
 80011d0:	f241 3188 	movw	r1, #5000	@ 0x1388
 80011d4:	4618      	mov	r0, r3
 80011d6:	f001 f827 	bl	8002228 <SIM_Receive_Response>

    char* cclk_pos = strstr(response, "+CCLK: \"");
 80011da:	f107 0318 	add.w	r3, r7, #24
 80011de:	499a      	ldr	r1, [pc, #616]	@ (8001448 <Get_DateTime_From_Network+0x2a8>)
 80011e0:	4618      	mov	r0, r3
 80011e2:	f016 fb97 	bl	8017914 <strstr>
 80011e6:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
    if (cclk_pos == NULL)
 80011ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <Get_DateTime_From_Network+0x56>
	{
        return 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e121      	b.n	800143a <Get_DateTime_From_Network+0x29a>
    }

    char* time_start = cclk_pos + 8;
 80011f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80011fa:	3308      	adds	r3, #8
 80011fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    if (strlen(time_start) < 20)
 8001200:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001204:	f7fe ffee 	bl	80001e4 <strlen>
 8001208:	4603      	mov	r3, r0
 800120a:	2b13      	cmp	r3, #19
 800120c:	d801      	bhi.n	8001212 <Get_DateTime_From_Network+0x72>
	{
		return 0;
 800120e:	2300      	movs	r3, #0
 8001210:	e113      	b.n	800143a <Get_DateTime_From_Network+0x29a>
	}

	sDate.Year = (time_start[0] - '0') * 10 + (time_start[1] - '0');
 8001212:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	3b30      	subs	r3, #48	@ 0x30
 800121a:	b2db      	uxtb	r3, r3
 800121c:	461a      	mov	r2, r3
 800121e:	0092      	lsls	r2, r2, #2
 8001220:	4413      	add	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	b2da      	uxtb	r2, r3
 8001226:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800122a:	3301      	adds	r3, #1
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	b2db      	uxtb	r3, r3
 8001232:	3b30      	subs	r3, #48	@ 0x30
 8001234:	b2db      	uxtb	r3, r3
 8001236:	75fb      	strb	r3, [r7, #23]
	sDate.Month = (time_start[3] - '0') * 10 + (time_start[4] - '0');
 8001238:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800123c:	3303      	adds	r3, #3
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	3b30      	subs	r3, #48	@ 0x30
 8001242:	b2db      	uxtb	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	0092      	lsls	r2, r2, #2
 8001248:	4413      	add	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	b2da      	uxtb	r2, r3
 800124e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001252:	3304      	adds	r3, #4
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	b2db      	uxtb	r3, r3
 800125a:	3b30      	subs	r3, #48	@ 0x30
 800125c:	b2db      	uxtb	r3, r3
 800125e:	757b      	strb	r3, [r7, #21]
	sDate.Date = (time_start[6] - '0') * 10 + (time_start[7] - '0');
 8001260:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001264:	3306      	adds	r3, #6
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	3b30      	subs	r3, #48	@ 0x30
 800126a:	b2db      	uxtb	r3, r3
 800126c:	461a      	mov	r2, r3
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	4413      	add	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	b2da      	uxtb	r2, r3
 8001276:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800127a:	3307      	adds	r3, #7
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
 8001280:	b2db      	uxtb	r3, r3
 8001282:	3b30      	subs	r3, #48	@ 0x30
 8001284:	b2db      	uxtb	r3, r3
 8001286:	75bb      	strb	r3, [r7, #22]

	sTime.Hours = (time_start[9] - '0') * 10 + (time_start[10] - '0');
 8001288:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800128c:	3309      	adds	r3, #9
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	3b30      	subs	r3, #48	@ 0x30
 8001292:	b2db      	uxtb	r3, r3
 8001294:	461a      	mov	r2, r3
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	4413      	add	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	b2da      	uxtb	r2, r3
 800129e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012a2:	330a      	adds	r3, #10
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	3b30      	subs	r3, #48	@ 0x30
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	703b      	strb	r3, [r7, #0]
	sTime.Minutes = (time_start[12] - '0') * 10 + (time_start[13] - '0');
 80012b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012b4:	330c      	adds	r3, #12
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	3b30      	subs	r3, #48	@ 0x30
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	0092      	lsls	r2, r2, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012ca:	330d      	adds	r3, #13
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	3b30      	subs	r3, #48	@ 0x30
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	707b      	strb	r3, [r7, #1]
	sTime.Seconds = (time_start[15] - '0') * 10 + (time_start[16] - '0');
 80012d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012dc:	330f      	adds	r3, #15
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	3b30      	subs	r3, #48	@ 0x30
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	0092      	lsls	r2, r2, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012f2:	3310      	adds	r3, #16
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	3b30      	subs	r3, #48	@ 0x30
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	70bb      	strb	r3, [r7, #2]

    int8_t timezone_quarters = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    if (time_start[17] == '+' || time_start[17] == '-')
 8001306:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800130a:	3311      	adds	r3, #17
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b2b      	cmp	r3, #43	@ 0x2b
 8001310:	d005      	beq.n	800131e <Get_DateTime_From_Network+0x17e>
 8001312:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001316:	3311      	adds	r3, #17
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b2d      	cmp	r3, #45	@ 0x2d
 800131c:	d124      	bne.n	8001368 <Get_DateTime_From_Network+0x1c8>
    {
        int8_t sign = (time_start[17] == '+') ? 1 : -1;
 800131e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001322:	3311      	adds	r3, #17
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b2b      	cmp	r3, #43	@ 0x2b
 8001328:	d101      	bne.n	800132e <Get_DateTime_From_Network+0x18e>
 800132a:	2301      	movs	r3, #1
 800132c:	e001      	b.n	8001332 <Get_DateTime_From_Network+0x192>
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
        timezone_quarters = sign * ((time_start[18] - '0') * 10 + (time_start[19] - '0'));
 8001336:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800133a:	3312      	adds	r3, #18
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001342:	4613      	mov	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	461a      	mov	r2, r3
 800134c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001350:	3313      	adds	r3, #19
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	3b30      	subs	r3, #48	@ 0x30
 8001356:	4413      	add	r3, r2
 8001358:	b2da      	uxtb	r2, r3
 800135a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800135e:	fb12 f303 	smulbb	r3, r2, r3
 8001362:	b2db      	uxtb	r3, r3
 8001364:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    }
    int8_t italy_timezone_quarters = Calculate_Italy_Timezone(sDate.Year + 2000, sDate.Month, sDate.Date);
 8001368:	7dfb      	ldrb	r3, [r7, #23]
 800136a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800136e:	b29b      	uxth	r3, r3
 8001370:	7d79      	ldrb	r1, [r7, #21]
 8001372:	7dba      	ldrb	r2, [r7, #22]
 8001374:	4618      	mov	r0, r3
 8001376:	f000 f911 	bl	800159c <Calculate_Italy_Timezone>
 800137a:	4603      	mov	r3, r0
 800137c:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
    int8_t timezone_diff = italy_timezone_quarters - timezone_quarters;
 8001380:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8001384:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
    int16_t correction_minutes = timezone_diff * 15;
 8001390:	f997 3081 	ldrsb.w	r3, [r7, #129]	@ 0x81
 8001394:	b29b      	uxth	r3, r3
 8001396:	461a      	mov	r2, r3
 8001398:	0112      	lsls	r2, r2, #4
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	b29b      	uxth	r3, r3
 800139e:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    Apply_Timezone_Correction(&sDate, &sTime, correction_minutes);
 80013a2:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	@ 0x7e
 80013a6:	4639      	mov	r1, r7
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 f957 	bl	8001660 <Apply_Timezone_Correction>

	if (sDate.Month < 1 || sDate.Month > 12 ||
 80013b2:	7d7b      	ldrb	r3, [r7, #21]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d011      	beq.n	80013dc <Get_DateTime_From_Network+0x23c>
 80013b8:	7d7b      	ldrb	r3, [r7, #21]
 80013ba:	2b0c      	cmp	r3, #12
 80013bc:	d80e      	bhi.n	80013dc <Get_DateTime_From_Network+0x23c>
        sDate.Date < 1 || sDate.Date > 31 ||
 80013be:	7dbb      	ldrb	r3, [r7, #22]
	if (sDate.Month < 1 || sDate.Month > 12 ||
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d00b      	beq.n	80013dc <Get_DateTime_From_Network+0x23c>
        sDate.Date < 1 || sDate.Date > 31 ||
 80013c4:	7dbb      	ldrb	r3, [r7, #22]
 80013c6:	2b1f      	cmp	r3, #31
 80013c8:	d808      	bhi.n	80013dc <Get_DateTime_From_Network+0x23c>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 80013ca:	783b      	ldrb	r3, [r7, #0]
        sDate.Date < 1 || sDate.Date > 31 ||
 80013cc:	2b17      	cmp	r3, #23
 80013ce:	d805      	bhi.n	80013dc <Get_DateTime_From_Network+0x23c>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 80013d0:	787b      	ldrb	r3, [r7, #1]
 80013d2:	2b3b      	cmp	r3, #59	@ 0x3b
 80013d4:	d802      	bhi.n	80013dc <Get_DateTime_From_Network+0x23c>
 80013d6:	78bb      	ldrb	r3, [r7, #2]
 80013d8:	2b3b      	cmp	r3, #59	@ 0x3b
 80013da:	d901      	bls.n	80013e0 <Get_DateTime_From_Network+0x240>
        return 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	e02c      	b.n	800143a <Get_DateTime_From_Network+0x29a>
    }

	sDate.WeekDay = Calculate_Weekday(sDate.Year + 2000, sDate.Month, sDate.Date);
 80013e0:	7dfb      	ldrb	r3, [r7, #23]
 80013e2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	7d79      	ldrb	r1, [r7, #21]
 80013ea:	7dba      	ldrb	r2, [r7, #22]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 f875 	bl	80014dc <Calculate_Weekday>
 80013f2:	4603      	mov	r3, r0
 80013f4:	753b      	strb	r3, [r7, #20]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	2200      	movs	r2, #0
 8001404:	4619      	mov	r1, r3
 8001406:	4811      	ldr	r0, [pc, #68]	@ (800144c <Get_DateTime_From_Network+0x2ac>)
 8001408:	f010 ff85 	bl	8012316 <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800140c:	463b      	mov	r3, r7
 800140e:	2200      	movs	r2, #0
 8001410:	4619      	mov	r1, r3
 8001412:	480e      	ldr	r0, [pc, #56]	@ (800144c <Get_DateTime_From_Network+0x2ac>)
 8001414:	f010 fe86 	bl	8012124 <HAL_RTC_SetTime>

    sys.onDate = sDate;
 8001418:	4b0d      	ldr	r3, [pc, #52]	@ (8001450 <Get_DateTime_From_Network+0x2b0>)
 800141a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800141e:	461a      	mov	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	6413      	str	r3, [r2, #64]	@ 0x40
    sys.onTime = sTime;
 8001424:	4b0a      	ldr	r3, [pc, #40]	@ (8001450 <Get_DateTime_From_Network+0x2b0>)
 8001426:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800142a:	f103 0444 	add.w	r4, r3, #68	@ 0x44
 800142e:	463d      	mov	r5, r7
 8001430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	6023      	str	r3, [r4, #0]
    
	return 1;
 8001438:	2301      	movs	r3, #1
}
 800143a:	4618      	mov	r0, r3
 800143c:	3790      	adds	r7, #144	@ 0x90
 800143e:	46bd      	mov	sp, r7
 8001440:	bdb0      	pop	{r4, r5, r7, pc}
 8001442:	bf00      	nop
 8001444:	08018a58 	.word	0x08018a58
 8001448:	08018a64 	.word	0x08018a64
 800144c:	20000218 	.word	0x20000218
 8001450:	200005d8 	.word	0x200005d8

08001454 <Set_Default_DateTime>:

/*-----DATA E ORA DI DEFAULT 1/1/2020 00:00:00-----*/
void Set_Default_DateTime(void)
{
 8001454:	b5b0      	push	{r4, r5, r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
    RTC_DateTypeDef sDate = {0};
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
    RTC_TimeTypeDef sTime = {0};
 800145e:	463b      	mov	r3, r7
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]

    // Default: 01/01/2020 00:00:00
    sDate.Year = 20;  // 2020
 800146c:	2314      	movs	r3, #20
 800146e:	75fb      	strb	r3, [r7, #23]
    sDate.Month = RTC_MONTH_JANUARY;
 8001470:	2301      	movs	r3, #1
 8001472:	757b      	strb	r3, [r7, #21]
    sDate.Date = 1;
 8001474:	2301      	movs	r3, #1
 8001476:	75bb      	strb	r3, [r7, #22]
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY; // 1 Jan 2020 era mercoledì
 8001478:	2303      	movs	r3, #3
 800147a:	753b      	strb	r3, [r7, #20]

    sTime.Hours = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	703b      	strb	r3, [r7, #0]
    sTime.Minutes = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	707b      	strb	r3, [r7, #1]
    sTime.Seconds = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	70bb      	strb	r3, [r7, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	613b      	str	r3, [r7, #16]

    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2200      	movs	r2, #0
 8001496:	4619      	mov	r1, r3
 8001498:	480e      	ldr	r0, [pc, #56]	@ (80014d4 <Set_Default_DateTime+0x80>)
 800149a:	f010 ff3c 	bl	8012316 <HAL_RTC_SetDate>
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800149e:	463b      	mov	r3, r7
 80014a0:	2200      	movs	r2, #0
 80014a2:	4619      	mov	r1, r3
 80014a4:	480b      	ldr	r0, [pc, #44]	@ (80014d4 <Set_Default_DateTime+0x80>)
 80014a6:	f010 fe3d 	bl	8012124 <HAL_RTC_SetTime>

    sys.onDate = sDate;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <Set_Default_DateTime+0x84>)
 80014ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014b0:	461a      	mov	r2, r3
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	6413      	str	r3, [r2, #64]	@ 0x40
    sys.onTime = sTime;
 80014b6:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <Set_Default_DateTime+0x84>)
 80014b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014bc:	f103 0444 	add.w	r4, r3, #68	@ 0x44
 80014c0:	463d      	mov	r5, r7
 80014c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014c6:	682b      	ldr	r3, [r5, #0]
 80014c8:	6023      	str	r3, [r4, #0]
}
 80014ca:	bf00      	nop
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bdb0      	pop	{r4, r5, r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000218 	.word	0x20000218
 80014d8:	200005d8 	.word	0x200005d8

080014dc <Calculate_Weekday>:

/*-----CALCOLO GIORNO SETTIMANA-----*/
uint8_t Calculate_Weekday(uint16_t year, uint8_t month, uint8_t day)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	80fb      	strh	r3, [r7, #6]
 80014e6:	460b      	mov	r3, r1
 80014e8:	717b      	strb	r3, [r7, #5]
 80014ea:	4613      	mov	r3, r2
 80014ec:	713b      	strb	r3, [r7, #4]
    // Algoritmo di Zeller per calcolo giorno settimana
    if (month < 3) {
 80014ee:	797b      	ldrb	r3, [r7, #5]
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d805      	bhi.n	8001500 <Calculate_Weekday+0x24>
        month += 12;
 80014f4:	797b      	ldrb	r3, [r7, #5]
 80014f6:	330c      	adds	r3, #12
 80014f8:	717b      	strb	r3, [r7, #5]
        year--;
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	80fb      	strh	r3, [r7, #6]
    }
    uint8_t zeller_day = (day + ((13 * (month + 1)) / 5) + year + (year / 4) - (year / 100) + (year / 400)) % 7;
 8001500:	7939      	ldrb	r1, [r7, #4]
 8001502:	797b      	ldrb	r3, [r7, #5]
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	4613      	mov	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4413      	add	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	4a1e      	ldr	r2, [pc, #120]	@ (800158c <Calculate_Weekday+0xb0>)
 8001512:	fb82 0203 	smull	r0, r2, r2, r3
 8001516:	1052      	asrs	r2, r2, #1
 8001518:	17db      	asrs	r3, r3, #31
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	18ca      	adds	r2, r1, r3
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	4413      	add	r3, r2
 8001522:	88fa      	ldrh	r2, [r7, #6]
 8001524:	0892      	lsrs	r2, r2, #2
 8001526:	b292      	uxth	r2, r2
 8001528:	4413      	add	r3, r2
 800152a:	88fa      	ldrh	r2, [r7, #6]
 800152c:	4918      	ldr	r1, [pc, #96]	@ (8001590 <Calculate_Weekday+0xb4>)
 800152e:	fba1 1202 	umull	r1, r2, r1, r2
 8001532:	0952      	lsrs	r2, r2, #5
 8001534:	b292      	uxth	r2, r2
 8001536:	1a9b      	subs	r3, r3, r2
 8001538:	88fa      	ldrh	r2, [r7, #6]
 800153a:	4915      	ldr	r1, [pc, #84]	@ (8001590 <Calculate_Weekday+0xb4>)
 800153c:	fba1 1202 	umull	r1, r2, r1, r2
 8001540:	09d2      	lsrs	r2, r2, #7
 8001542:	b292      	uxth	r2, r2
 8001544:	441a      	add	r2, r3
 8001546:	4b13      	ldr	r3, [pc, #76]	@ (8001594 <Calculate_Weekday+0xb8>)
 8001548:	fb83 1302 	smull	r1, r3, r3, r2
 800154c:	4413      	add	r3, r2
 800154e:	1099      	asrs	r1, r3, #2
 8001550:	17d3      	asrs	r3, r2, #31
 8001552:	1ac9      	subs	r1, r1, r3
 8001554:	460b      	mov	r3, r1
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	1a5b      	subs	r3, r3, r1
 800155a:	1ad1      	subs	r1, r2, r3
 800155c:	460b      	mov	r3, r1
 800155e:	73fb      	strb	r3, [r7, #15]

    uint8_t hal_weekday_map[] = {RTC_WEEKDAY_SATURDAY, RTC_WEEKDAY_SUNDAY, RTC_WEEKDAY_MONDAY,
 8001560:	4a0d      	ldr	r2, [pc, #52]	@ (8001598 <Calculate_Weekday+0xbc>)
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	e892 0003 	ldmia.w	r2, {r0, r1}
 800156a:	6018      	str	r0, [r3, #0]
 800156c:	3304      	adds	r3, #4
 800156e:	8019      	strh	r1, [r3, #0]
 8001570:	3302      	adds	r3, #2
 8001572:	0c0a      	lsrs	r2, r1, #16
 8001574:	701a      	strb	r2, [r3, #0]
                                 RTC_WEEKDAY_TUESDAY, RTC_WEEKDAY_WEDNESDAY, RTC_WEEKDAY_THURSDAY, RTC_WEEKDAY_FRIDAY};

    return hal_weekday_map[zeller_day];
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	3310      	adds	r3, #16
 800157a:	443b      	add	r3, r7
 800157c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	66666667 	.word	0x66666667
 8001590:	51eb851f 	.word	0x51eb851f
 8001594:	92492493 	.word	0x92492493
 8001598:	08018a70 	.word	0x08018a70

0800159c <Calculate_Italy_Timezone>:

/*-----CALCOLA FUSO ORARIO ITALIA (CET/CEST)-----*/
int8_t Calculate_Italy_Timezone(uint16_t year, uint8_t month, uint8_t day)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	80fb      	strh	r3, [r7, #6]
 80015a6:	460b      	mov	r3, r1
 80015a8:	717b      	strb	r3, [r7, #5]
 80015aa:	4613      	mov	r3, r2
 80015ac:	713b      	strb	r3, [r7, #4]
    // CET: GMT+1 (4 quarti d'ora)
    // CEST: GMT+2 (8 quarti d'ora) - ultima domenica marzo → ultima domenica ottobre
    
    if (month < 3 || month > 10)
 80015ae:	797b      	ldrb	r3, [r7, #5]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d902      	bls.n	80015ba <Calculate_Italy_Timezone+0x1e>
 80015b4:	797b      	ldrb	r3, [r7, #5]
 80015b6:	2b0a      	cmp	r3, #10
 80015b8:	d901      	bls.n	80015be <Calculate_Italy_Timezone+0x22>
    {
        return 4;  // CET (inverno)
 80015ba:	2304      	movs	r3, #4
 80015bc:	e027      	b.n	800160e <Calculate_Italy_Timezone+0x72>
    }
    else if (month > 3 && month < 10)
 80015be:	797b      	ldrb	r3, [r7, #5]
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d904      	bls.n	80015ce <Calculate_Italy_Timezone+0x32>
 80015c4:	797b      	ldrb	r3, [r7, #5]
 80015c6:	2b09      	cmp	r3, #9
 80015c8:	d801      	bhi.n	80015ce <Calculate_Italy_Timezone+0x32>
    {
        return 8;  // CEST (estate)
 80015ca:	2308      	movs	r3, #8
 80015cc:	e01f      	b.n	800160e <Calculate_Italy_Timezone+0x72>
    }
    else
    {
        // Marzo o Ottobre - calcola ultima domenica
        if (month == 3)
 80015ce:	797b      	ldrb	r3, [r7, #5]
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d10e      	bne.n	80015f2 <Calculate_Italy_Timezone+0x56>
        {
            uint8_t last_sunday_march = Calculate_Last_Sunday(year, 3);
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	2103      	movs	r1, #3
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 f81c 	bl	8001616 <Calculate_Last_Sunday>
 80015de:	4603      	mov	r3, r0
 80015e0:	73bb      	strb	r3, [r7, #14]
            return (day >= last_sunday_march) ? 8 : 4;
 80015e2:	793a      	ldrb	r2, [r7, #4]
 80015e4:	7bbb      	ldrb	r3, [r7, #14]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d301      	bcc.n	80015ee <Calculate_Italy_Timezone+0x52>
 80015ea:	2308      	movs	r3, #8
 80015ec:	e00f      	b.n	800160e <Calculate_Italy_Timezone+0x72>
 80015ee:	2304      	movs	r3, #4
 80015f0:	e00d      	b.n	800160e <Calculate_Italy_Timezone+0x72>
        }
        else  // month == 10
        {
            uint8_t last_sunday_october = Calculate_Last_Sunday(year, 10);
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	210a      	movs	r1, #10
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 f80d 	bl	8001616 <Calculate_Last_Sunday>
 80015fc:	4603      	mov	r3, r0
 80015fe:	73fb      	strb	r3, [r7, #15]
            return (day < last_sunday_october) ? 8 : 4;
 8001600:	793a      	ldrb	r2, [r7, #4]
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	429a      	cmp	r2, r3
 8001606:	d201      	bcs.n	800160c <Calculate_Italy_Timezone+0x70>
 8001608:	2308      	movs	r3, #8
 800160a:	e000      	b.n	800160e <Calculate_Italy_Timezone+0x72>
 800160c:	2304      	movs	r3, #4
        }
    }
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <Calculate_Last_Sunday>:

/*-----CALCOLA ULTIMA DOMENICA DEL MESE-----*/
uint8_t Calculate_Last_Sunday(uint16_t year, uint8_t month)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b084      	sub	sp, #16
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	460a      	mov	r2, r1
 8001620:	80fb      	strh	r3, [r7, #6]
 8001622:	4613      	mov	r3, r2
 8001624:	717b      	strb	r3, [r7, #5]
    uint8_t days_in_month = (month == 3) ? 31 : 31;  // Marzo e Ottobre hanno 31 giorni
 8001626:	231f      	movs	r3, #31
 8001628:	73bb      	strb	r3, [r7, #14]
    
    for (uint8_t day = days_in_month; day >= 25; day--)
 800162a:	7bbb      	ldrb	r3, [r7, #14]
 800162c:	73fb      	strb	r3, [r7, #15]
 800162e:	e00f      	b.n	8001650 <Calculate_Last_Sunday+0x3a>
    {
        uint8_t weekday = Calculate_Weekday(year, month, day);
 8001630:	7bfa      	ldrb	r2, [r7, #15]
 8001632:	7979      	ldrb	r1, [r7, #5]
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ff50 	bl	80014dc <Calculate_Weekday>
 800163c:	4603      	mov	r3, r0
 800163e:	737b      	strb	r3, [r7, #13]
        if (weekday == RTC_WEEKDAY_SUNDAY)
 8001640:	7b7b      	ldrb	r3, [r7, #13]
 8001642:	2b07      	cmp	r3, #7
 8001644:	d101      	bne.n	800164a <Calculate_Last_Sunday+0x34>
        {
            return day;
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	e006      	b.n	8001658 <Calculate_Last_Sunday+0x42>
    for (uint8_t day = days_in_month; day >= 25; day--)
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	3b01      	subs	r3, #1
 800164e:	73fb      	strb	r3, [r7, #15]
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	2b18      	cmp	r3, #24
 8001654:	d8ec      	bhi.n	8001630 <Calculate_Last_Sunday+0x1a>
        }
    }
    return 31;  // Fallback
 8001656:	231f      	movs	r3, #31
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <Apply_Timezone_Correction>:

/*-----APPLICA CORREZIONE TIMEZONE-----*/
void Apply_Timezone_Correction(RTC_DateTypeDef* sDate, RTC_TimeTypeDef* sTime, int16_t correction_minutes)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	4613      	mov	r3, r2
 800166c:	80fb      	strh	r3, [r7, #6]
    if (correction_minutes == 0) return;
 800166e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d053      	beq.n	800171e <Apply_Timezone_Correction+0xbe>
    
    // Converti tutto in minuti totali
    int32_t total_minutes = sTime->Hours * 60 + sTime->Minutes + correction_minutes;
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	4613      	mov	r3, r2
 800167e:	011b      	lsls	r3, r3, #4
 8001680:	1a9b      	subs	r3, r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	461a      	mov	r2, r3
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	785b      	ldrb	r3, [r3, #1]
 800168a:	441a      	add	r2, r3
 800168c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001690:	4413      	add	r3, r2
 8001692:	617b      	str	r3, [r7, #20]
    int16_t day_correction = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	827b      	strh	r3, [r7, #18]
    
    // Gestisci overflow/underflow giorni
    while (total_minutes >= 1440)  // 24 ore = 1440 minuti
 8001698:	e009      	b.n	80016ae <Apply_Timezone_Correction+0x4e>
    {
        total_minutes -= 1440;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f5a3 63b4 	sub.w	r3, r3, #1440	@ 0x5a0
 80016a0:	617b      	str	r3, [r7, #20]
        day_correction++;
 80016a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	3301      	adds	r3, #1
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	827b      	strh	r3, [r7, #18]
    while (total_minutes >= 1440)  // 24 ore = 1440 minuti
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 80016b4:	daf1      	bge.n	800169a <Apply_Timezone_Correction+0x3a>
    }
    while (total_minutes < 0)
 80016b6:	e009      	b.n	80016cc <Apply_Timezone_Correction+0x6c>
    {
        total_minutes += 1440;
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 80016be:	617b      	str	r3, [r7, #20]
        day_correction--;
 80016c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	3b01      	subs	r3, #1
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	827b      	strh	r3, [r7, #18]
    while (total_minutes < 0)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	dbf2      	blt.n	80016b8 <Apply_Timezone_Correction+0x58>
    }
    
    // Aggiorna ora
    sTime->Hours = total_minutes / 60;
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	4a14      	ldr	r2, [pc, #80]	@ (8001728 <Apply_Timezone_Correction+0xc8>)
 80016d6:	fb82 1203 	smull	r1, r2, r2, r3
 80016da:	441a      	add	r2, r3
 80016dc:	1152      	asrs	r2, r2, #5
 80016de:	17db      	asrs	r3, r3, #31
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = total_minutes % 60;
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001728 <Apply_Timezone_Correction+0xc8>)
 80016ec:	fb83 1302 	smull	r1, r3, r3, r2
 80016f0:	4413      	add	r3, r2
 80016f2:	1159      	asrs	r1, r3, #5
 80016f4:	17d3      	asrs	r3, r2, #31
 80016f6:	1ac9      	subs	r1, r1, r3
 80016f8:	460b      	mov	r3, r1
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	1a5b      	subs	r3, r3, r1
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	1ad1      	subs	r1, r2, r3
 8001702:	b2ca      	uxtb	r2, r1
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	705a      	strb	r2, [r3, #1]
    
    // Aggiorna data se necessario
    if (day_correction != 0)
 8001708:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d007      	beq.n	8001720 <Apply_Timezone_Correction+0xc0>
    {
        Adjust_Date(sDate, day_correction);
 8001710:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001714:	4619      	mov	r1, r3
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f000 f808 	bl	800172c <Adjust_Date>
 800171c:	e000      	b.n	8001720 <Apply_Timezone_Correction+0xc0>
    if (correction_minutes == 0) return;
 800171e:	bf00      	nop
    }
}
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	88888889 	.word	0x88888889

0800172c <Adjust_Date>:

/*-----AGGIUSTA DATA CON CORREZIONE GIORNI-----*/
void Adjust_Date(RTC_DateTypeDef* sDate, int16_t day_correction)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	807b      	strh	r3, [r7, #2]
    uint8_t days_in_month[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 8001738:	4a73      	ldr	r2, [pc, #460]	@ (8001908 <Adjust_Date+0x1dc>)
 800173a:	f107 0308 	add.w	r3, r7, #8
 800173e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001740:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint16_t full_year = sDate->Year + 2000;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	78db      	ldrb	r3, [r3, #3]
 8001748:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800174c:	82fb      	strh	r3, [r7, #22]
    
    // Anno bisestile
    if ((full_year % 4 == 0 && full_year % 100 != 0) || (full_year % 400 == 0))
 800174e:	8afb      	ldrh	r3, [r7, #22]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	b29b      	uxth	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d10b      	bne.n	8001772 <Adjust_Date+0x46>
 800175a:	8afb      	ldrh	r3, [r7, #22]
 800175c:	4a6b      	ldr	r2, [pc, #428]	@ (800190c <Adjust_Date+0x1e0>)
 800175e:	fba2 1203 	umull	r1, r2, r2, r3
 8001762:	0952      	lsrs	r2, r2, #5
 8001764:	2164      	movs	r1, #100	@ 0x64
 8001766:	fb01 f202 	mul.w	r2, r1, r2
 800176a:	1a9b      	subs	r3, r3, r2
 800176c:	b29b      	uxth	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10c      	bne.n	800178c <Adjust_Date+0x60>
 8001772:	8afb      	ldrh	r3, [r7, #22]
 8001774:	4a65      	ldr	r2, [pc, #404]	@ (800190c <Adjust_Date+0x1e0>)
 8001776:	fba2 1203 	umull	r1, r2, r2, r3
 800177a:	09d2      	lsrs	r2, r2, #7
 800177c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001780:	fb01 f202 	mul.w	r2, r1, r2
 8001784:	1a9b      	subs	r3, r3, r2
 8001786:	b29b      	uxth	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <Adjust_Date+0x64>
    {
        days_in_month[1] = 29;
 800178c:	231d      	movs	r3, #29
 800178e:	727b      	strb	r3, [r7, #9]
    }
    
    sDate->Date += day_correction;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	789a      	ldrb	r2, [r3, #2]
 8001794:	887b      	ldrh	r3, [r7, #2]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	4413      	add	r3, r2
 800179a:	b2da      	uxtb	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	709a      	strb	r2, [r3, #2]
    
    // Gestisci overflow mese
    while (sDate->Date > days_in_month[sDate->Month - 1])
 80017a0:	e046      	b.n	8001830 <Adjust_Date+0x104>
    {
        sDate->Date -= days_in_month[sDate->Month - 1];
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	789a      	ldrb	r2, [r3, #2]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	785b      	ldrb	r3, [r3, #1]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	3318      	adds	r3, #24
 80017ae:	443b      	add	r3, r7
 80017b0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	709a      	strb	r2, [r3, #2]
        sDate->Month++;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	785b      	ldrb	r3, [r3, #1]
 80017c0:	3301      	adds	r3, #1
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	705a      	strb	r2, [r3, #1]
        if (sDate->Month > 12)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	785b      	ldrb	r3, [r3, #1]
 80017cc:	2b0c      	cmp	r3, #12
 80017ce:	d92f      	bls.n	8001830 <Adjust_Date+0x104>
        {
            sDate->Month = 1;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	705a      	strb	r2, [r3, #1]
            sDate->Year++;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	78db      	ldrb	r3, [r3, #3]
 80017da:	3301      	adds	r3, #1
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	70da      	strb	r2, [r3, #3]
            full_year++;
 80017e2:	8afb      	ldrh	r3, [r7, #22]
 80017e4:	3301      	adds	r3, #1
 80017e6:	82fb      	strh	r3, [r7, #22]
            // Ricalcola giorni per anno bisestile
            if ((full_year % 4 == 0 && full_year % 100 != 0) || (full_year % 400 == 0))
 80017e8:	8afb      	ldrh	r3, [r7, #22]
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10b      	bne.n	800180c <Adjust_Date+0xe0>
 80017f4:	8afb      	ldrh	r3, [r7, #22]
 80017f6:	4a45      	ldr	r2, [pc, #276]	@ (800190c <Adjust_Date+0x1e0>)
 80017f8:	fba2 1203 	umull	r1, r2, r2, r3
 80017fc:	0952      	lsrs	r2, r2, #5
 80017fe:	2164      	movs	r1, #100	@ 0x64
 8001800:	fb01 f202 	mul.w	r2, r1, r2
 8001804:	1a9b      	subs	r3, r3, r2
 8001806:	b29b      	uxth	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10c      	bne.n	8001826 <Adjust_Date+0xfa>
 800180c:	8afb      	ldrh	r3, [r7, #22]
 800180e:	4a3f      	ldr	r2, [pc, #252]	@ (800190c <Adjust_Date+0x1e0>)
 8001810:	fba2 1203 	umull	r1, r2, r2, r3
 8001814:	09d2      	lsrs	r2, r2, #7
 8001816:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800181a:	fb01 f202 	mul.w	r2, r1, r2
 800181e:	1a9b      	subs	r3, r3, r2
 8001820:	b29b      	uxth	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d102      	bne.n	800182c <Adjust_Date+0x100>
            {
                days_in_month[1] = 29;
 8001826:	231d      	movs	r3, #29
 8001828:	727b      	strb	r3, [r7, #9]
 800182a:	e001      	b.n	8001830 <Adjust_Date+0x104>
            }
            else
            {
                days_in_month[1] = 28;
 800182c:	231c      	movs	r3, #28
 800182e:	727b      	strb	r3, [r7, #9]
    while (sDate->Date > days_in_month[sDate->Month - 1])
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	789a      	ldrb	r2, [r3, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	785b      	ldrb	r3, [r3, #1]
 8001838:	3b01      	subs	r3, #1
 800183a:	3318      	adds	r3, #24
 800183c:	443b      	add	r3, r7
 800183e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001842:	429a      	cmp	r2, r3
 8001844:	d8ad      	bhi.n	80017a2 <Adjust_Date+0x76>
            }
        }
    }
    
    // Gestisci underflow mese
    while (sDate->Date < 1)
 8001846:	e046      	b.n	80018d6 <Adjust_Date+0x1aa>
    {
        sDate->Month--;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	785b      	ldrb	r3, [r3, #1]
 800184c:	3b01      	subs	r3, #1
 800184e:	b2da      	uxtb	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	705a      	strb	r2, [r3, #1]
        if (sDate->Month < 1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	785b      	ldrb	r3, [r3, #1]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d12f      	bne.n	80018bc <Adjust_Date+0x190>
        {
            sDate->Month = 12;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	220c      	movs	r2, #12
 8001860:	705a      	strb	r2, [r3, #1]
            sDate->Year--;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	78db      	ldrb	r3, [r3, #3]
 8001866:	3b01      	subs	r3, #1
 8001868:	b2da      	uxtb	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	70da      	strb	r2, [r3, #3]
            full_year--;
 800186e:	8afb      	ldrh	r3, [r7, #22]
 8001870:	3b01      	subs	r3, #1
 8001872:	82fb      	strh	r3, [r7, #22]
            // Ricalcola giorni per anno bisestile
            if ((full_year % 4 == 0 && full_year % 100 != 0) || (full_year % 400 == 0))
 8001874:	8afb      	ldrh	r3, [r7, #22]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	b29b      	uxth	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10b      	bne.n	8001898 <Adjust_Date+0x16c>
 8001880:	8afb      	ldrh	r3, [r7, #22]
 8001882:	4a22      	ldr	r2, [pc, #136]	@ (800190c <Adjust_Date+0x1e0>)
 8001884:	fba2 1203 	umull	r1, r2, r2, r3
 8001888:	0952      	lsrs	r2, r2, #5
 800188a:	2164      	movs	r1, #100	@ 0x64
 800188c:	fb01 f202 	mul.w	r2, r1, r2
 8001890:	1a9b      	subs	r3, r3, r2
 8001892:	b29b      	uxth	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10c      	bne.n	80018b2 <Adjust_Date+0x186>
 8001898:	8afb      	ldrh	r3, [r7, #22]
 800189a:	4a1c      	ldr	r2, [pc, #112]	@ (800190c <Adjust_Date+0x1e0>)
 800189c:	fba2 1203 	umull	r1, r2, r2, r3
 80018a0:	09d2      	lsrs	r2, r2, #7
 80018a2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80018a6:	fb01 f202 	mul.w	r2, r1, r2
 80018aa:	1a9b      	subs	r3, r3, r2
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d102      	bne.n	80018b8 <Adjust_Date+0x18c>
            {
                days_in_month[1] = 29;
 80018b2:	231d      	movs	r3, #29
 80018b4:	727b      	strb	r3, [r7, #9]
 80018b6:	e001      	b.n	80018bc <Adjust_Date+0x190>
            }
            else
            {
                days_in_month[1] = 28;
 80018b8:	231c      	movs	r3, #28
 80018ba:	727b      	strb	r3, [r7, #9]
            }
        }
        sDate->Date += days_in_month[sDate->Month - 1];
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	789a      	ldrb	r2, [r3, #2]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	785b      	ldrb	r3, [r3, #1]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	3318      	adds	r3, #24
 80018c8:	443b      	add	r3, r7
 80018ca:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80018ce:	4413      	add	r3, r2
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	709a      	strb	r2, [r3, #2]
    while (sDate->Date < 1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	789b      	ldrb	r3, [r3, #2]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0b4      	beq.n	8001848 <Adjust_Date+0x11c>
    }
    
    // Ricalcola giorno settimana
    sDate->WeekDay = Calculate_Weekday(sDate->Year + 2000, sDate->Month, sDate->Date);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	78db      	ldrb	r3, [r3, #3]
 80018e2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80018e6:	b298      	uxth	r0, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7859      	ldrb	r1, [r3, #1]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	789b      	ldrb	r3, [r3, #2]
 80018f0:	461a      	mov	r2, r3
 80018f2:	f7ff fdf3 	bl	80014dc <Calculate_Weekday>
 80018f6:	4603      	mov	r3, r0
 80018f8:	461a      	mov	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	701a      	strb	r2, [r3, #0]
}
 80018fe:	bf00      	nop
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	08018a78 	.word	0x08018a78
 800190c:	51eb851f 	.word	0x51eb851f

08001910 <SIM_Init>:
#include "process.h"
#include "leds.h"

/*------INIZIALIZZAZIONE DEL MODULO LTE------*/
int SIM_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	f5ad 7d10 	sub.w	sp, sp, #576	@ 0x240
 8001916:	af00      	add	r7, sp, #0
	char command[256];
	char response[256];
	sprintf(sys.apn, "sensor.net");
 8001918:	496a      	ldr	r1, [pc, #424]	@ (8001ac4 <SIM_Init+0x1b4>)
 800191a:	486b      	ldr	r0, [pc, #428]	@ (8001ac8 <SIM_Init+0x1b8>)
 800191c:	f015 ff60 	bl	80177e0 <siprintf>
	strcpy(sys.TCP.IP_address, config.tcp_IPaddress);
 8001920:	496a      	ldr	r1, [pc, #424]	@ (8001acc <SIM_Init+0x1bc>)
 8001922:	486b      	ldr	r0, [pc, #428]	@ (8001ad0 <SIM_Init+0x1c0>)
 8001924:	f016 f838 	bl	8017998 <strcpy>
	strcpy(sys.TCP.Port, config.tcp_Port);
 8001928:	496a      	ldr	r1, [pc, #424]	@ (8001ad4 <SIM_Init+0x1c4>)
 800192a:	486b      	ldr	r0, [pc, #428]	@ (8001ad8 <SIM_Init+0x1c8>)
 800192c:	f016 f834 	bl	8017998 <strcpy>
//	sprintf(sys.TCP.IP_address, "a");
//	sprintf(sys.TCP.Port, "a");

	memset(response, 0, sizeof(response));
 8001930:	f107 031c 	add.w	r3, r7, #28
 8001934:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001938:	2100      	movs	r1, #0
 800193a:	4618      	mov	r0, r3
 800193c:	f015 ffb0 	bl	80178a0 <memset>

	if(HAL_GPIO_ReadPin(LTE_STATUS_GPIO_Port, LTE_STATUS_Pin) != GPIO_PIN_SET)
 8001940:	2108      	movs	r1, #8
 8001942:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001946:	f00d fdb3 	bl	800f4b0 <HAL_GPIO_ReadPin>
 800194a:	4603      	mov	r3, r0
 800194c:	2b01      	cmp	r3, #1
 800194e:	d00a      	beq.n	8001966 <SIM_Init+0x56>
	{
		SIM_Power_On();
 8001950:	f000 fb9a 	bl	8002088 <SIM_Power_On>
		while(HAL_GPIO_ReadPin(LTE_STATUS_GPIO_Port, LTE_STATUS_Pin) != GPIO_PIN_SET);            //Attesa accensione modulo
 8001954:	bf00      	nop
 8001956:	2108      	movs	r1, #8
 8001958:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800195c:	f00d fda8 	bl	800f4b0 <HAL_GPIO_ReadPin>
 8001960:	4603      	mov	r3, r0
 8001962:	2b01      	cmp	r3, #1
 8001964:	d1f7      	bne.n	8001956 <SIM_Init+0x46>
	}

	SIM_Send_Command("AT\r");                                                                     //Verifica comunicazione
 8001966:	485d      	ldr	r0, [pc, #372]	@ (8001adc <SIM_Init+0x1cc>)
 8001968:	f000 fc32 	bl	80021d0 <SIM_Send_Command>
	SIM_Receive_Response(response, 2000);
 800196c:	f107 031c 	add.w	r3, r7, #28
 8001970:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001974:	4618      	mov	r0, r3
 8001976:	f000 fc57 	bl	8002228 <SIM_Receive_Response>
	if(strstr(response, "OK") == NULL)
 800197a:	f107 031c 	add.w	r3, r7, #28
 800197e:	4958      	ldr	r1, [pc, #352]	@ (8001ae0 <SIM_Init+0x1d0>)
 8001980:	4618      	mov	r0, r3
 8001982:	f015 ffc7 	bl	8017914 <strstr>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d11c      	bne.n	80019c6 <SIM_Init+0xb6>
	{
		if(huart1.Init.BaudRate != 921600)
 800198c:	4b55      	ldr	r3, [pc, #340]	@ (8001ae4 <SIM_Init+0x1d4>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f5b3 2f61 	cmp.w	r3, #921600	@ 0xe1000
 8001994:	d00d      	beq.n	80019b2 <SIM_Init+0xa2>
		{
			huart1.Init.BaudRate = 921600;
 8001996:	4b53      	ldr	r3, [pc, #332]	@ (8001ae4 <SIM_Init+0x1d4>)
 8001998:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800199c:	605a      	str	r2, [r3, #4]
			HAL_UART_Init(SIM_UART);
 800199e:	4851      	ldr	r0, [pc, #324]	@ (8001ae4 <SIM_Init+0x1d4>)
 80019a0:	f013 ffe2 	bl	8015968 <HAL_UART_Init>
			SIM_Send_Command("AT+IPR=921600\r");               						              //Baudrate a 921600
 80019a4:	4850      	ldr	r0, [pc, #320]	@ (8001ae8 <SIM_Init+0x1d8>)
 80019a6:	f000 fc13 	bl	80021d0 <SIM_Send_Command>
			SIM_Wait_Response("OK");
 80019aa:	484d      	ldr	r0, [pc, #308]	@ (8001ae0 <SIM_Init+0x1d0>)
 80019ac:	f000 ff88 	bl	80028c0 <SIM_Wait_Response>
 80019b0:	e009      	b.n	80019c6 <SIM_Init+0xb6>
		}
		else
		{
			huart1.Init.BaudRate = 38400;
 80019b2:	4b4c      	ldr	r3, [pc, #304]	@ (8001ae4 <SIM_Init+0x1d4>)
 80019b4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80019b8:	605a      	str	r2, [r3, #4]
			HAL_UART_Init(SIM_UART);
 80019ba:	484a      	ldr	r0, [pc, #296]	@ (8001ae4 <SIM_Init+0x1d4>)
 80019bc:	f013 ffd4 	bl	8015968 <HAL_UART_Init>
			return -1;
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295
 80019c4:	e338      	b.n	8002038 <SIM_Init+0x728>
		}

	}

	huart1.Init.BaudRate = 921600;
 80019c6:	4b47      	ldr	r3, [pc, #284]	@ (8001ae4 <SIM_Init+0x1d4>)
 80019c8:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80019cc:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(SIM_UART);
 80019ce:	4845      	ldr	r0, [pc, #276]	@ (8001ae4 <SIM_Init+0x1d4>)
 80019d0:	f013 ffca 	bl	8015968 <HAL_UART_Init>

	SIM_Send_Command("ATE0\r");                                                                   //Non verbose mode
 80019d4:	4845      	ldr	r0, [pc, #276]	@ (8001aec <SIM_Init+0x1dc>)
 80019d6:	f000 fbfb 	bl	80021d0 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80019da:	4841      	ldr	r0, [pc, #260]	@ (8001ae0 <SIM_Init+0x1d0>)
 80019dc:	f000 ff70 	bl	80028c0 <SIM_Wait_Response>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <SIM_Init+0xdc>
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	e325      	b.n	8002038 <SIM_Init+0x728>

	SIM_Send_Command("AT+CPSMS?\r");
 80019ec:	4840      	ldr	r0, [pc, #256]	@ (8001af0 <SIM_Init+0x1e0>)
 80019ee:	f000 fbef 	bl	80021d0 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 fc14 	bl	8002228 <SIM_Receive_Response>

	SIM_Send_Command("AT+CFUN=1\r");                                                              //Full functionality
 8001a00:	483c      	ldr	r0, [pc, #240]	@ (8001af4 <SIM_Init+0x1e4>)
 8001a02:	f000 fbe5 	bl	80021d0 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001a06:	4836      	ldr	r0, [pc, #216]	@ (8001ae0 <SIM_Init+0x1d0>)
 8001a08:	f000 ff5a 	bl	80028c0 <SIM_Wait_Response>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <SIM_Init+0x108>
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295
 8001a16:	e30f      	b.n	8002038 <SIM_Init+0x728>

	SIM_Send_Command("AT+CNMP=38\r");                                                             //Modalità solo LTE o NB-IoT
 8001a18:	4837      	ldr	r0, [pc, #220]	@ (8001af8 <SIM_Init+0x1e8>)
 8001a1a:	f000 fbd9 	bl	80021d0 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001a1e:	4830      	ldr	r0, [pc, #192]	@ (8001ae0 <SIM_Init+0x1d0>)
 8001a20:	f000 ff4e 	bl	80028c0 <SIM_Wait_Response>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <SIM_Init+0x120>
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2e:	e303      	b.n	8002038 <SIM_Init+0x728>

	SIM_Send_Command("AT+CMNB=2\r");                                                              //1=CAT-M, 2=NB-IoT, 3=Automatico
 8001a30:	4832      	ldr	r0, [pc, #200]	@ (8001afc <SIM_Init+0x1ec>)
 8001a32:	f000 fbcd 	bl	80021d0 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001a36:	482a      	ldr	r0, [pc, #168]	@ (8001ae0 <SIM_Init+0x1d0>)
 8001a38:	f000 ff42 	bl	80028c0 <SIM_Wait_Response>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <SIM_Init+0x138>
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	e2f7      	b.n	8002038 <SIM_Init+0x728>

	SIM_Send_Command("AT+CLTS=1\r");                                                              //Abilitazione sincronizzazione orologio
 8001a48:	482d      	ldr	r0, [pc, #180]	@ (8001b00 <SIM_Init+0x1f0>)
 8001a4a:	f000 fbc1 	bl	80021d0 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001a4e:	4824      	ldr	r0, [pc, #144]	@ (8001ae0 <SIM_Init+0x1d0>)
 8001a50:	f000 ff36 	bl	80028c0 <SIM_Wait_Response>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d002      	beq.n	8001a60 <SIM_Init+0x150>
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5e:	e2eb      	b.n	8002038 <SIM_Init+0x728>

	SIM_Send_Command("AT+CPIN?\r");																  //Controllo PIN
 8001a60:	4828      	ldr	r0, [pc, #160]	@ (8001b04 <SIM_Init+0x1f4>)
 8001a62:	f000 fbb5 	bl	80021d0 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001a66:	f107 031c 	add.w	r3, r7, #28
 8001a6a:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 fbda 	bl	8002228 <SIM_Receive_Response>
	if(strstr(response, "READY") == NULL)
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	4923      	ldr	r1, [pc, #140]	@ (8001b08 <SIM_Init+0x1f8>)
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f015 ff4a 	bl	8017914 <strstr>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d146      	bne.n	8001b14 <SIM_Init+0x204>
	{
		if(strstr(response, "SIM PIN") != NULL)
 8001a86:	f107 031c 	add.w	r3, r7, #28
 8001a8a:	4920      	ldr	r1, [pc, #128]	@ (8001b0c <SIM_Init+0x1fc>)
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f015 ff41 	bl	8017914 <strstr>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d012      	beq.n	8001abe <SIM_Init+0x1ae>
		{
			SIM_Send_Command("AT+CPIN=0000\r");
 8001a98:	481d      	ldr	r0, [pc, #116]	@ (8001b10 <SIM_Init+0x200>)
 8001a9a:	f000 fb99 	bl	80021d0 <SIM_Send_Command>
			SIM_Receive_Response(response, 5000);
 8001a9e:	f107 031c 	add.w	r3, r7, #28
 8001aa2:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 fbbe 	bl	8002228 <SIM_Receive_Response>
			if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001aac:	480c      	ldr	r0, [pc, #48]	@ (8001ae0 <SIM_Init+0x1d0>)
 8001aae:	f000 ff07 	bl	80028c0 <SIM_Wait_Response>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d02d      	beq.n	8001b14 <SIM_Init+0x204>
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8001abc:	e2bc      	b.n	8002038 <SIM_Init+0x728>
		}
		else
		{
			return -1;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	e2b9      	b.n	8002038 <SIM_Init+0x728>
 8001ac4:	08018a84 	.word	0x08018a84
 8001ac8:	20001630 	.word	0x20001630
 8001acc:	20001806 	.word	0x20001806
 8001ad0:	200016c1 	.word	0x200016c1
 8001ad4:	20001846 	.word	0x20001846
 8001ad8:	20001725 	.word	0x20001725
 8001adc:	08018a90 	.word	0x08018a90
 8001ae0:	08018a94 	.word	0x08018a94
 8001ae4:	200004bc 	.word	0x200004bc
 8001ae8:	08018a98 	.word	0x08018a98
 8001aec:	08018aa8 	.word	0x08018aa8
 8001af0:	08018ab0 	.word	0x08018ab0
 8001af4:	08018abc 	.word	0x08018abc
 8001af8:	08018ac8 	.word	0x08018ac8
 8001afc:	08018ad4 	.word	0x08018ad4
 8001b00:	08018ae0 	.word	0x08018ae0
 8001b04:	08018aec 	.word	0x08018aec
 8001b08:	08018af8 	.word	0x08018af8
 8001b0c:	08018b00 	.word	0x08018b00
 8001b10:	08018b08 	.word	0x08018b08
		}
	}

	SIM_Send_Command("AT+CCID\r");                                                                // Verifica SIM card
 8001b14:	48d1      	ldr	r0, [pc, #836]	@ (8001e5c <SIM_Init+0x54c>)
 8001b16:	f000 fb5b 	bl	80021d0 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001b1a:	f107 031c 	add.w	r3, r7, #28
 8001b1e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 fb80 	bl	8002228 <SIM_Receive_Response>

	SIM_Send_Command("AT+CGDCONT?\r");
 8001b28:	48cd      	ldr	r0, [pc, #820]	@ (8001e60 <SIM_Init+0x550>)
 8001b2a:	f000 fb51 	bl	80021d0 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001b2e:	f107 031c 	add.w	r3, r7, #28
 8001b32:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 fb76 	bl	8002228 <SIM_Receive_Response>
	if(strstr(response, sys.apn) == NULL || strstr(response, "IPV4V6") != NULL)
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	49c8      	ldr	r1, [pc, #800]	@ (8001e64 <SIM_Init+0x554>)
 8001b42:	4618      	mov	r0, r3
 8001b44:	f015 fee6 	bl	8017914 <strstr>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d008      	beq.n	8001b60 <SIM_Init+0x250>
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	49c5      	ldr	r1, [pc, #788]	@ (8001e68 <SIM_Init+0x558>)
 8001b54:	4618      	mov	r0, r3
 8001b56:	f015 fedd 	bl	8017914 <strstr>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d012      	beq.n	8001b86 <SIM_Init+0x276>
	{
		sprintf(command, "AT+CGDCONT=1,\"IP\",\"%s\"\r", sys.apn);                                //Configurazione APN
 8001b60:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001b64:	4abf      	ldr	r2, [pc, #764]	@ (8001e64 <SIM_Init+0x554>)
 8001b66:	49c1      	ldr	r1, [pc, #772]	@ (8001e6c <SIM_Init+0x55c>)
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f015 fe39 	bl	80177e0 <siprintf>
		SIM_Send_Command(command);
 8001b6e:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 fb2c 	bl	80021d0 <SIM_Send_Command>
		SIM_Receive_Response(response, 5000);
 8001b78:	f107 031c 	add.w	r3, r7, #28
 8001b7c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001b80:	4618      	mov	r0, r3
 8001b82:	f000 fb51 	bl	8002228 <SIM_Receive_Response>
	}

	SIM_Send_Command("AT+CEREG?\r");                                                              //Controllo registrazione alla rete
 8001b86:	48ba      	ldr	r0, [pc, #744]	@ (8001e70 <SIM_Init+0x560>)
 8001b88:	f000 fb22 	bl	80021d0 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001b8c:	f107 031c 	add.w	r3, r7, #28
 8001b90:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 fb47 	bl	8002228 <SIM_Receive_Response>
	char* cereg_ptr = strstr(response, "+CEREG:");
 8001b9a:	f107 031c 	add.w	r3, r7, #28
 8001b9e:	49b5      	ldr	r1, [pc, #724]	@ (8001e74 <SIM_Init+0x564>)
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f015 feb7 	bl	8017914 <strstr>
 8001ba6:	f8c7 0230 	str.w	r0, [r7, #560]	@ 0x230
	int n = 0, stat_value = 0;
 8001baa:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001bae:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001bba:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
	if(cereg_ptr && sscanf(cereg_ptr, "+CEREG: %d,%d", &n, &stat_value) >= 2)
 8001bc2:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d01b      	beq.n	8001c02 <SIM_Init+0x2f2>
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	f107 0218 	add.w	r2, r7, #24
 8001bd2:	49a9      	ldr	r1, [pc, #676]	@ (8001e78 <SIM_Init+0x568>)
 8001bd4:	f8d7 0230 	ldr.w	r0, [r7, #560]	@ 0x230
 8001bd8:	f015 fe24 	bl	8017824 <siscanf>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	dd0f      	ble.n	8001c02 <SIM_Init+0x2f2>
	{
		if(stat_value == 1 || stat_value == 5)
 8001be2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001be6:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	f000 80d8 	beq.w	8001da2 <SIM_Init+0x492>
 8001bf2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001bf6:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b05      	cmp	r3, #5
 8001bfe:	f000 80d0 	beq.w	8001da2 <SIM_Init+0x492>
		{
			goto CSQ_PDP;
		}
	}

	SIM_Send_Command("AT+COPS?\r");                                                               //Operatore attuale
 8001c02:	489e      	ldr	r0, [pc, #632]	@ (8001e7c <SIM_Init+0x56c>)
 8001c04:	f000 fae4 	bl	80021d0 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001c08:	f107 031c 	add.w	r3, r7, #28
 8001c0c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001c10:	4618      	mov	r0, r3
 8001c12:	f000 fb09 	bl	8002228 <SIM_Receive_Response>
	char* cops_ptr = strstr(response, "+COPS:");
 8001c16:	f107 031c 	add.w	r3, r7, #28
 8001c1a:	4999      	ldr	r1, [pc, #612]	@ (8001e80 <SIM_Init+0x570>)
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f015 fe79 	bl	8017914 <strstr>
 8001c22:	f8c7 022c 	str.w	r0, [r7, #556]	@ 0x22c
	int mode = 0, format = 0;
 8001c26:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001c2a:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001c36:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
	if(cops_ptr && sscanf(cops_ptr, "+COPS: %d,%d", &mode, &format) >= 2)
 8001c3e:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d01d      	beq.n	8001c82 <SIM_Init+0x372>
 8001c46:	f107 030c 	add.w	r3, r7, #12
 8001c4a:	f107 0210 	add.w	r2, r7, #16
 8001c4e:	498d      	ldr	r1, [pc, #564]	@ (8001e84 <SIM_Init+0x574>)
 8001c50:	f8d7 022c 	ldr.w	r0, [r7, #556]	@ 0x22c
 8001c54:	f015 fde6 	bl	8017824 <siscanf>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	dd11      	ble.n	8001c82 <SIM_Init+0x372>
	{
		if(strstr(cops_ptr, "vodafone") == NULL)
 8001c5e:	498a      	ldr	r1, [pc, #552]	@ (8001e88 <SIM_Init+0x578>)
 8001c60:	f8d7 022c 	ldr.w	r0, [r7, #556]	@ 0x22c
 8001c64:	f015 fe56 	bl	8017914 <strstr>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d109      	bne.n	8001c82 <SIM_Init+0x372>
		{
			SIM_Send_Command("AT+COPS=2\r");                                                          // Deregistra dalla rete
 8001c6e:	4887      	ldr	r0, [pc, #540]	@ (8001e8c <SIM_Init+0x57c>)
 8001c70:	f000 faae 	bl	80021d0 <SIM_Send_Command>
			SIM_Wait_Response("OK");
 8001c74:	4886      	ldr	r0, [pc, #536]	@ (8001e90 <SIM_Init+0x580>)
 8001c76:	f000 fe23 	bl	80028c0 <SIM_Wait_Response>
			HAL_Delay(20000);
 8001c7a:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8001c7e:	f00a fa05 	bl	800c08c <HAL_Delay>
		}
	}

	SIM_Send_Command("AT+COPS=0\r");
 8001c82:	4884      	ldr	r0, [pc, #528]	@ (8001e94 <SIM_Init+0x584>)
 8001c84:	f000 faa4 	bl	80021d0 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8001c88:	4881      	ldr	r0, [pc, #516]	@ (8001e90 <SIM_Init+0x580>)
 8001c8a:	f000 fe19 	bl	80028c0 <SIM_Wait_Response>

	SIM_Send_Command("AT+CEREG?\r");                                                              //Controllo registrazione alla rete
 8001c8e:	4878      	ldr	r0, [pc, #480]	@ (8001e70 <SIM_Init+0x560>)
 8001c90:	f000 fa9e 	bl	80021d0 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 fac3 	bl	8002228 <SIM_Receive_Response>
	int stat = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
	uint32_t cereg_start = HAL_GetTick();
 8001ca8:	f00a f9e4 	bl	800c074 <HAL_GetTick>
 8001cac:	f8c7 0228 	str.w	r0, [r7, #552]	@ 0x228
	const uint32_t CEREG_TIMEOUT = 30000;
 8001cb0:	f247 5330 	movw	r3, #30000	@ 0x7530
 8001cb4:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
	while(stat != 1 && (HAL_GetTick() - cereg_start) < CEREG_TIMEOUT)
 8001cb8:	e051      	b.n	8001d5e <SIM_Init+0x44e>
	{
		char* cereg_ptr = strstr(response, "+CEREG:");
 8001cba:	f107 031c 	add.w	r3, r7, #28
 8001cbe:	496d      	ldr	r1, [pc, #436]	@ (8001e74 <SIM_Init+0x564>)
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f015 fe27 	bl	8017914 <strstr>
 8001cc6:	f8c7 0220 	str.w	r0, [r7, #544]	@ 0x220
		int n = 0, stat_value = 0;
 8001cca:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001cce:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001cda:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
		if(cereg_ptr && sscanf(cereg_ptr, "+CEREG: %d,%d", &n, &stat_value) >= 2)
 8001ce2:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d02b      	beq.n	8001d42 <SIM_Init+0x432>
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	f107 0208 	add.w	r2, r7, #8
 8001cf0:	4961      	ldr	r1, [pc, #388]	@ (8001e78 <SIM_Init+0x568>)
 8001cf2:	f8d7 0220 	ldr.w	r0, [r7, #544]	@ 0x220
 8001cf6:	f015 fd95 	bl	8017824 <siscanf>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	dd20      	ble.n	8001d42 <SIM_Init+0x432>
		{
			if(stat_value == 1 || stat_value == 5)
 8001d00:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001d04:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d006      	beq.n	8001d1c <SIM_Init+0x40c>
 8001d0e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001d12:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b05      	cmp	r3, #5
 8001d1a:	d103      	bne.n	8001d24 <SIM_Init+0x414>
			{
				stat = 1;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
			if(stat_value == 1 || stat_value == 5)
 8001d22:	e01c      	b.n	8001d5e <SIM_Init+0x44e>
			}
			else
			{
				SIM_Send_Command("AT+CEREG?\r");
 8001d24:	4852      	ldr	r0, [pc, #328]	@ (8001e70 <SIM_Init+0x560>)
 8001d26:	f000 fa53 	bl	80021d0 <SIM_Send_Command>
				SIM_Receive_Response(response, 5000);
 8001d2a:	f107 031c 	add.w	r3, r7, #28
 8001d2e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 fa78 	bl	8002228 <SIM_Receive_Response>
				HAL_Delay(1000);
 8001d38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d3c:	f00a f9a6 	bl	800c08c <HAL_Delay>
			if(stat_value == 1 || stat_value == 5)
 8001d40:	e00d      	b.n	8001d5e <SIM_Init+0x44e>
			}
		}
		else
		{
			SIM_Send_Command("AT+CEREG?\r");
 8001d42:	484b      	ldr	r0, [pc, #300]	@ (8001e70 <SIM_Init+0x560>)
 8001d44:	f000 fa44 	bl	80021d0 <SIM_Send_Command>
			SIM_Receive_Response(response, 5000);
 8001d48:	f107 031c 	add.w	r3, r7, #28
 8001d4c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 fa69 	bl	8002228 <SIM_Receive_Response>
			HAL_Delay(1000);
 8001d56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d5a:	f00a f997 	bl	800c08c <HAL_Delay>
	while(stat != 1 && (HAL_GetTick() - cereg_start) < CEREG_TIMEOUT)
 8001d5e:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d009      	beq.n	8001d7a <SIM_Init+0x46a>
 8001d66:	f00a f985 	bl	800c074 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d89f      	bhi.n	8001cba <SIM_Init+0x3aa>
		}
	}
	if(stat != 1)
 8001d7a:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d004      	beq.n	8001d8c <SIM_Init+0x47c>
	{
		SIM_Power_Off();
 8001d82:	f000 f9b8 	bl	80020f6 <SIM_Power_Off>
		return -1;  
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8a:	e155      	b.n	8002038 <SIM_Init+0x728>
	}

	SIM_Send_Command("AT+COPS?\r");                                                               //Operatore attuale
 8001d8c:	483b      	ldr	r0, [pc, #236]	@ (8001e7c <SIM_Init+0x56c>)
 8001d8e:	f000 fa1f 	bl	80021d0 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001d92:	f107 031c 	add.w	r3, r7, #28
 8001d96:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 fa44 	bl	8002228 <SIM_Receive_Response>
 8001da0:	e000      	b.n	8001da4 <SIM_Init+0x494>
			goto CSQ_PDP;
 8001da2:	bf00      	nop

	CSQ_PDP:
	SIM_Send_Command("AT+CSQ\r");																  //Controllo qualità connessione
 8001da4:	483c      	ldr	r0, [pc, #240]	@ (8001e98 <SIM_Init+0x588>)
 8001da6:	f000 fa13 	bl	80021d0 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001daa:	f107 031c 	add.w	r3, r7, #28
 8001dae:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 fa38 	bl	8002228 <SIM_Receive_Response>
	if(strstr(response, "+CSQ: 99") != NULL)
 8001db8:	f107 031c 	add.w	r3, r7, #28
 8001dbc:	4937      	ldr	r1, [pc, #220]	@ (8001e9c <SIM_Init+0x58c>)
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f015 fda8 	bl	8017914 <strstr>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d02b      	beq.n	8001e22 <SIM_Init+0x512>
	{
		SIM_Send_Command("AT+CFUN=0\r");     //Reset RF
 8001dca:	4835      	ldr	r0, [pc, #212]	@ (8001ea0 <SIM_Init+0x590>)
 8001dcc:	f000 fa00 	bl	80021d0 <SIM_Send_Command>
		SIM_Wait_Response("OK");
 8001dd0:	482f      	ldr	r0, [pc, #188]	@ (8001e90 <SIM_Init+0x580>)
 8001dd2:	f000 fd75 	bl	80028c0 <SIM_Wait_Response>
		HAL_Delay(2000);
 8001dd6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001dda:	f00a f957 	bl	800c08c <HAL_Delay>
		SIM_Send_Command("AT+CFUN=1\r");
 8001dde:	4831      	ldr	r0, [pc, #196]	@ (8001ea4 <SIM_Init+0x594>)
 8001de0:	f000 f9f6 	bl	80021d0 <SIM_Send_Command>
		SIM_Wait_Response("OK");
 8001de4:	482a      	ldr	r0, [pc, #168]	@ (8001e90 <SIM_Init+0x580>)
 8001de6:	f000 fd6b 	bl	80028c0 <SIM_Wait_Response>
		HAL_Delay(3000);
 8001dea:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001dee:	f00a f94d 	bl	800c08c <HAL_Delay>

		SIM_Send_Command("AT+CSQ\r");
 8001df2:	4829      	ldr	r0, [pc, #164]	@ (8001e98 <SIM_Init+0x588>)
 8001df4:	f000 f9ec 	bl	80021d0 <SIM_Send_Command>
		SIM_Receive_Response(response, 5000);
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001e00:	4618      	mov	r0, r3
 8001e02:	f000 fa11 	bl	8002228 <SIM_Receive_Response>

		if(strstr(response, "+CSQ: 99") != NULL)
 8001e06:	f107 031c 	add.w	r3, r7, #28
 8001e0a:	4924      	ldr	r1, [pc, #144]	@ (8001e9c <SIM_Init+0x58c>)
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f015 fd81 	bl	8017914 <strstr>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d004      	beq.n	8001e22 <SIM_Init+0x512>
		{
			SIM_Power_Off();                 //Power cycle fisico
 8001e18:	f000 f96d 	bl	80020f6 <SIM_Power_Off>
			return -1;
 8001e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e20:	e10a      	b.n	8002038 <SIM_Init+0x728>
		}
	}

	SIM_Send_Command("AT+CNACT?\r");                                                              //Verifica indirizzo IP
 8001e22:	4821      	ldr	r0, [pc, #132]	@ (8001ea8 <SIM_Init+0x598>)
 8001e24:	f000 f9d4 	bl	80021d0 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001e28:	f107 031c 	add.w	r3, r7, #28
 8001e2c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001e30:	4618      	mov	r0, r3
 8001e32:	f000 f9f9 	bl	8002228 <SIM_Receive_Response>
	if(SIM_Check_IP(response))
 8001e36:	f107 031c 	add.w	r3, r7, #28
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 fa1e 	bl	800227c <SIM_Check_IP>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d134      	bne.n	8001eb0 <SIM_Init+0x5a0>
	{
		goto TCP;
	}

	SIM_Send_Command("AT+CIPSHUT\r");
 8001e46:	4819      	ldr	r0, [pc, #100]	@ (8001eac <SIM_Init+0x59c>)
 8001e48:	f000 f9c2 	bl	80021d0 <SIM_Send_Command>
	SIM_Receive_Response(response, 65000);
 8001e4c:	f107 031c 	add.w	r3, r7, #28
 8001e50:	f64f 51e8 	movw	r1, #65000	@ 0xfde8
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 f9e7 	bl	8002228 <SIM_Receive_Response>
 8001e5a:	e02a      	b.n	8001eb2 <SIM_Init+0x5a2>
 8001e5c:	08018b18 	.word	0x08018b18
 8001e60:	08018b24 	.word	0x08018b24
 8001e64:	20001630 	.word	0x20001630
 8001e68:	08018b34 	.word	0x08018b34
 8001e6c:	08018b3c 	.word	0x08018b3c
 8001e70:	08018b54 	.word	0x08018b54
 8001e74:	08018b60 	.word	0x08018b60
 8001e78:	08018b68 	.word	0x08018b68
 8001e7c:	08018b78 	.word	0x08018b78
 8001e80:	08018b84 	.word	0x08018b84
 8001e84:	08018b8c 	.word	0x08018b8c
 8001e88:	08018b9c 	.word	0x08018b9c
 8001e8c:	08018ba8 	.word	0x08018ba8
 8001e90:	08018a94 	.word	0x08018a94
 8001e94:	08018bb4 	.word	0x08018bb4
 8001e98:	08018bc0 	.word	0x08018bc0
 8001e9c:	08018bc8 	.word	0x08018bc8
 8001ea0:	08018bd4 	.word	0x08018bd4
 8001ea4:	08018abc 	.word	0x08018abc
 8001ea8:	08018be0 	.word	0x08018be0
 8001eac:	08018bec 	.word	0x08018bec
		goto TCP;
 8001eb0:	bf00      	nop
//	{
//		return -1;
//	}
	
	TCP:
	SIM_Send_Command("AT+CIPRXGET=0\r");                                                         //Impostazione ricezione automatica da server TCP
 8001eb2:	4864      	ldr	r0, [pc, #400]	@ (8002044 <SIM_Init+0x734>)
 8001eb4:	f000 f98c 	bl	80021d0 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001eb8:	4863      	ldr	r0, [pc, #396]	@ (8002048 <SIM_Init+0x738>)
 8001eba:	f000 fd01 	bl	80028c0 <SIM_Wait_Response>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <SIM_Init+0x5ba>
 8001ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec8:	e0b6      	b.n	8002038 <SIM_Init+0x728>

	sprintf(command, "AT+CSTT=\"%s\",\"\",\"\"\r", sys.apn);
 8001eca:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001ece:	4a5f      	ldr	r2, [pc, #380]	@ (800204c <SIM_Init+0x73c>)
 8001ed0:	495f      	ldr	r1, [pc, #380]	@ (8002050 <SIM_Init+0x740>)
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f015 fc84 	bl	80177e0 <siprintf>
	SIM_Send_Command(command);
 8001ed8:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 f977 	bl	80021d0 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001ee2:	4859      	ldr	r0, [pc, #356]	@ (8002048 <SIM_Init+0x738>)
 8001ee4:	f000 fcec 	bl	80028c0 <SIM_Wait_Response>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <SIM_Init+0x5e4>
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef2:	e0a1      	b.n	8002038 <SIM_Init+0x728>

	SIM_Send_Command("AT+CIICR\r");
 8001ef4:	4857      	ldr	r0, [pc, #348]	@ (8002054 <SIM_Init+0x744>)
 8001ef6:	f000 f96b 	bl	80021d0 <SIM_Send_Command>
	SIM_Receive_Response(response, 65000);
 8001efa:	f107 031c 	add.w	r3, r7, #28
 8001efe:	f64f 51e8 	movw	r1, #65000	@ 0xfde8
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 f990 	bl	8002228 <SIM_Receive_Response>

	SIM_Send_Command("AT+CIFSR\r");
 8001f08:	4853      	ldr	r0, [pc, #332]	@ (8002058 <SIM_Init+0x748>)
 8001f0a:	f000 f961 	bl	80021d0 <SIM_Send_Command>
	SIM_Receive_Response(response, 65000);
 8001f0e:	f107 031c 	add.w	r3, r7, #28
 8001f12:	f64f 51e8 	movw	r1, #65000	@ 0xfde8
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 f986 	bl	8002228 <SIM_Receive_Response>

	const uint32_t MAX_TCP_RETRIES = 3;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
	uint32_t retry_count = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
	int tcp_connected = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
	while(!tcp_connected && retry_count < MAX_TCP_RETRIES)
 8001f2e:	e071      	b.n	8002014 <SIM_Init+0x704>
	{
		sprintf(command, "AT+CIPSTART=\"TCP\",\"%s\",%s\r", sys.TCP.IP_address, sys.TCP.Port);   //Connessione al server TCP
 8001f30:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 8001f34:	4b49      	ldr	r3, [pc, #292]	@ (800205c <SIM_Init+0x74c>)
 8001f36:	4a4a      	ldr	r2, [pc, #296]	@ (8002060 <SIM_Init+0x750>)
 8001f38:	494a      	ldr	r1, [pc, #296]	@ (8002064 <SIM_Init+0x754>)
 8001f3a:	f015 fc51 	bl	80177e0 <siprintf>
		SIM_Send_Command(command);
 8001f3e:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 f944 	bl	80021d0 <SIM_Send_Command>
		SIM_Wait_Response("OK");
 8001f48:	483f      	ldr	r0, [pc, #252]	@ (8002048 <SIM_Init+0x738>)
 8001f4a:	f000 fcb9 	bl	80028c0 <SIM_Wait_Response>
		SIM_Receive_Response(response, 180000);
 8001f4e:	f107 031c 	add.w	r3, r7, #28
 8001f52:	4945      	ldr	r1, [pc, #276]	@ (8002068 <SIM_Init+0x758>)
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 f967 	bl	8002228 <SIM_Receive_Response>
		
		if(strstr(response, "CONNECT OK") != NULL || strstr(response, "ALREADY CONNECT") != NULL)
 8001f5a:	f107 031c 	add.w	r3, r7, #28
 8001f5e:	4943      	ldr	r1, [pc, #268]	@ (800206c <SIM_Init+0x75c>)
 8001f60:	4618      	mov	r0, r3
 8001f62:	f015 fcd7 	bl	8017914 <strstr>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d108      	bne.n	8001f7e <SIM_Init+0x66e>
 8001f6c:	f107 031c 	add.w	r3, r7, #28
 8001f70:	493f      	ldr	r1, [pc, #252]	@ (8002070 <SIM_Init+0x760>)
 8001f72:	4618      	mov	r0, r3
 8001f74:	f015 fcce 	bl	8017914 <strstr>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <SIM_Init+0x676>
		{
			tcp_connected = 1;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
			break;
 8001f84:	e050      	b.n	8002028 <SIM_Init+0x718>
		}
		else if(strstr(response, "CONNECT FAIL") != NULL)
 8001f86:	f107 031c 	add.w	r3, r7, #28
 8001f8a:	493a      	ldr	r1, [pc, #232]	@ (8002074 <SIM_Init+0x764>)
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f015 fcc1 	bl	8017914 <strstr>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d03d      	beq.n	8002014 <SIM_Init+0x704>
		{
			if(strstr(response, "PDP DEACT") != NULL)
 8001f98:	f107 031c 	add.w	r3, r7, #28
 8001f9c:	4936      	ldr	r1, [pc, #216]	@ (8002078 <SIM_Init+0x768>)
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f015 fcb8 	bl	8017914 <strstr>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00a      	beq.n	8001fc0 <SIM_Init+0x6b0>
			{
				SIM_Send_Command("AT+CIPSHUT\r");
 8001faa:	4834      	ldr	r0, [pc, #208]	@ (800207c <SIM_Init+0x76c>)
 8001fac:	f000 f910 	bl	80021d0 <SIM_Send_Command>
				SIM_Receive_Response(response, 65000);
 8001fb0:	f107 031c 	add.w	r3, r7, #28
 8001fb4:	f64f 51e8 	movw	r1, #65000	@ 0xfde8
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 f935 	bl	8002228 <SIM_Receive_Response>
 8001fbe:	e020      	b.n	8002002 <SIM_Init+0x6f2>
			}
			else if(strstr(response, "TCP CLOSED") != NULL)
 8001fc0:	f107 031c 	add.w	r3, r7, #28
 8001fc4:	492e      	ldr	r1, [pc, #184]	@ (8002080 <SIM_Init+0x770>)
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f015 fca4 	bl	8017914 <strstr>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d002      	beq.n	8001fd8 <SIM_Init+0x6c8>
			{
				return -1;
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd6:	e02f      	b.n	8002038 <SIM_Init+0x728>
			}
			else
			{
				SIM_Send_Command("AT+CNACT?\r");
 8001fd8:	482a      	ldr	r0, [pc, #168]	@ (8002084 <SIM_Init+0x774>)
 8001fda:	f000 f8f9 	bl	80021d0 <SIM_Send_Command>
				SIM_Receive_Response(response, 5000);
 8001fde:	f107 031c 	add.w	r3, r7, #28
 8001fe2:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 f91e 	bl	8002228 <SIM_Receive_Response>
				if(!SIM_Check_IP(response))
 8001fec:	f107 031c 	add.w	r3, r7, #28
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 f943 	bl	800227c <SIM_Check_IP>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <SIM_Init+0x6f2>
				{
					return -1;  
 8001ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8002000:	e01a      	b.n	8002038 <SIM_Init+0x728>
				}
			}
			
			HAL_Delay(5000);  
 8002002:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002006:	f00a f841 	bl	800c08c <HAL_Delay>
			retry_count++;
 800200a:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800200e:	3301      	adds	r3, #1
 8002010:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
	while(!tcp_connected && retry_count < MAX_TCP_RETRIES)
 8002014:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8002018:	2b00      	cmp	r3, #0
 800201a:	d105      	bne.n	8002028 <SIM_Init+0x718>
 800201c:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8002020:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002024:	429a      	cmp	r2, r3
 8002026:	d383      	bcc.n	8001f30 <SIM_Init+0x620>
		}
	}

	if(!tcp_connected)
 8002028:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800202c:	2b00      	cmp	r3, #0
 800202e:	d102      	bne.n	8002036 <SIM_Init+0x726>
	{
		return -1;  
 8002030:	f04f 33ff 	mov.w	r3, #4294967295
 8002034:	e000      	b.n	8002038 <SIM_Init+0x728>
//	if(!SIM_Check_TCP_State(response))
//	{
//		return -1;
//	}

	return 0;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	f507 7710 	add.w	r7, r7, #576	@ 0x240
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	08018bf8 	.word	0x08018bf8
 8002048:	08018a94 	.word	0x08018a94
 800204c:	20001630 	.word	0x20001630
 8002050:	08018c08 	.word	0x08018c08
 8002054:	08018c1c 	.word	0x08018c1c
 8002058:	08018c28 	.word	0x08018c28
 800205c:	20001725 	.word	0x20001725
 8002060:	200016c1 	.word	0x200016c1
 8002064:	08018c34 	.word	0x08018c34
 8002068:	0002bf20 	.word	0x0002bf20
 800206c:	08018c50 	.word	0x08018c50
 8002070:	08018c5c 	.word	0x08018c5c
 8002074:	08018c6c 	.word	0x08018c6c
 8002078:	08018c7c 	.word	0x08018c7c
 800207c:	08018bec 	.word	0x08018bec
 8002080:	08018c88 	.word	0x08018c88
 8002084:	08018be0 	.word	0x08018be0

08002088 <SIM_Power_On>:

/*------ACCENSIONE DEL MODULO LTE------*/
void SIM_Power_On(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_SET);
 800208e:	2201      	movs	r2, #1
 8002090:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002094:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002098:	f00d fa22 	bl	800f4e0 <HAL_GPIO_WritePin>
	HAL_Delay(1500);
 800209c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80020a0:	f009 fff4 	bl	800c08c <HAL_Delay>
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_RESET);
 80020a4:	2200      	movs	r2, #0
 80020a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ae:	f00d fa17 	bl	800f4e0 <HAL_GPIO_WritePin>
	uint32_t timeout = HAL_GetTick();
 80020b2:	f009 ffdf 	bl	800c074 <HAL_GetTick>
 80020b6:	6078      	str	r0, [r7, #4]
    while(HAL_GPIO_ReadPin(LTE_STATUS_GPIO_Port, LTE_STATUS_Pin) != GPIO_PIN_SET)
 80020b8:	e00b      	b.n	80020d2 <SIM_Power_On+0x4a>
    {
        if(HAL_GetTick() - timeout > 5000) break; 
 80020ba:	f009 ffdb 	bl	800c074 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d80b      	bhi.n	80020e4 <SIM_Power_On+0x5c>
        HAL_Delay(100);
 80020cc:	2064      	movs	r0, #100	@ 0x64
 80020ce:	f009 ffdd 	bl	800c08c <HAL_Delay>
    while(HAL_GPIO_ReadPin(LTE_STATUS_GPIO_Port, LTE_STATUS_Pin) != GPIO_PIN_SET)
 80020d2:	2108      	movs	r1, #8
 80020d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020d8:	f00d f9ea 	bl	800f4b0 <HAL_GPIO_ReadPin>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d1eb      	bne.n	80020ba <SIM_Power_On+0x32>
 80020e2:	e000      	b.n	80020e6 <SIM_Power_On+0x5e>
        if(HAL_GetTick() - timeout > 5000) break; 
 80020e4:	bf00      	nop
    }
    HAL_Delay(2000); 
 80020e6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80020ea:	f009 ffcf 	bl	800c08c <HAL_Delay>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <SIM_Power_Off>:

/*------SPEGNIMENTO DEL MODULO LTE------*/
void SIM_Power_Off(void)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_SET);
 80020fc:	2201      	movs	r2, #1
 80020fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002102:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002106:	f00d f9eb 	bl	800f4e0 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 800210a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800210e:	f009 ffbd 	bl	800c08c <HAL_Delay>
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_RESET);
 8002112:	2200      	movs	r2, #0
 8002114:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002118:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800211c:	f00d f9e0 	bl	800f4e0 <HAL_GPIO_WritePin>
	uint32_t timeout = HAL_GetTick();
 8002120:	f009 ffa8 	bl	800c074 <HAL_GetTick>
 8002124:	6078      	str	r0, [r7, #4]
    while(HAL_GPIO_ReadPin(LTE_STATUS_GPIO_Port, LTE_STATUS_Pin) != GPIO_PIN_RESET)
 8002126:	e00b      	b.n	8002140 <SIM_Power_Off+0x4a>
    {
        if(HAL_GetTick() - timeout > 5000) break; 
 8002128:	f009 ffa4 	bl	800c074 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d80b      	bhi.n	8002152 <SIM_Power_Off+0x5c>
        HAL_Delay(100);
 800213a:	2064      	movs	r0, #100	@ 0x64
 800213c:	f009 ffa6 	bl	800c08c <HAL_Delay>
    while(HAL_GPIO_ReadPin(LTE_STATUS_GPIO_Port, LTE_STATUS_Pin) != GPIO_PIN_RESET)
 8002140:	2108      	movs	r1, #8
 8002142:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002146:	f00d f9b3 	bl	800f4b0 <HAL_GPIO_ReadPin>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1eb      	bne.n	8002128 <SIM_Power_Off+0x32>
    }
}
 8002150:	e000      	b.n	8002154 <SIM_Power_Off+0x5e>
        if(HAL_GetTick() - timeout > 5000) break; 
 8002152:	bf00      	nop
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <SIM_Reset>:

/*------RESET DEL MODULO LTE------*/
void SIM_Reset(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTE_RESET_GPIO_Port, LTE_RESET_Pin, GPIO_PIN_SET);
 8002160:	2201      	movs	r2, #1
 8002162:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002166:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800216a:	f00d f9b9 	bl	800f4e0 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 800216e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002172:	f009 ff8b 	bl	800c08c <HAL_Delay>
	HAL_GPIO_WritePin(LTE_RESET_GPIO_Port, LTE_RESET_Pin, GPIO_PIN_RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800217c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002180:	f00d f9ae 	bl	800f4e0 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(LTE_STATUS_GPIO_Port, LTE_STATUS_Pin) != GPIO_PIN_SET);
 8002184:	bf00      	nop
 8002186:	2108      	movs	r1, #8
 8002188:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800218c:	f00d f990 	bl	800f4b0 <HAL_GPIO_ReadPin>
 8002190:	4603      	mov	r3, r0
 8002192:	2b01      	cmp	r3, #1
 8002194:	d1f7      	bne.n	8002186 <SIM_Reset+0x2a>
}
 8002196:	bf00      	nop
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}

0800219c <SIM_Startup_Seq>:

/*-----SEQUENZA DI ACCENSIONE-----*/
void SIM_Startup_Seq(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(LTE_STATUS_GPIO_Port, LTE_STATUS_Pin) != GPIO_PIN_SET)
 80021a0:	2108      	movs	r1, #8
 80021a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021a6:	f00d f983 	bl	800f4b0 <HAL_GPIO_ReadPin>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d00a      	beq.n	80021c6 <SIM_Startup_Seq+0x2a>
	{
		SIM_Power_On();
 80021b0:	f7ff ff6a 	bl	8002088 <SIM_Power_On>
		while(HAL_GPIO_ReadPin(LTE_STATUS_GPIO_Port, LTE_STATUS_Pin) != GPIO_PIN_SET);            //Attesa accensione modulo
 80021b4:	bf00      	nop
 80021b6:	2108      	movs	r1, #8
 80021b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021bc:	f00d f978 	bl	800f4b0 <HAL_GPIO_ReadPin>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d1f7      	bne.n	80021b6 <SIM_Startup_Seq+0x1a>

	}
	SIM_Reset();
 80021c6:	f7ff ffc9 	bl	800215c <SIM_Reset>
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <SIM_Send_Command>:

/*------INVIO COMANDO AL MODULO LTE------*/
void SIM_Send_Command(char* command)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7fe f803 	bl	80001e4 <strlen>
 80021de:	4603      	mov	r3, r0
 80021e0:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(SIM_UART, (uint8_t*)command, len, 100);
 80021e2:	89fa      	ldrh	r2, [r7, #14]
 80021e4:	2364      	movs	r3, #100	@ 0x64
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4803      	ldr	r0, [pc, #12]	@ (80021f8 <SIM_Send_Command+0x28>)
 80021ea:	f013 fc61 	bl	8015ab0 <HAL_UART_Transmit>
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	200004bc 	.word	0x200004bc

080021fc <SIM_Send_Command_DMA>:

/*------INVIO COMANDO AL MODULO LTE (DMA)------*/
void SIM_Send_Command_DMA(char* command)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7fd ffed 	bl	80001e4 <strlen>
 800220a:	4603      	mov	r3, r0
 800220c:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit_DMA(SIM_UART, (uint8_t*)command, len);
 800220e:	89fb      	ldrh	r3, [r7, #14]
 8002210:	461a      	mov	r2, r3
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	4803      	ldr	r0, [pc, #12]	@ (8002224 <SIM_Send_Command_DMA+0x28>)
 8002216:	f013 fd9d 	bl	8015d54 <HAL_UART_Transmit_DMA>
}
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200004bc 	.word	0x200004bc

08002228 <SIM_Receive_Response>:

/*------RICEZIONE RISPOSTA DAL MODULO LTE------*/
uint16_t SIM_Receive_Response(char* rx, uint32_t timeout_ms)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af02      	add	r7, sp, #8
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
	uint16_t RxLen = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	817b      	strh	r3, [r7, #10]
	uint32_t start_time = HAL_GetTick();
 8002236:	f009 ff1d 	bl	800c074 <HAL_GetTick>
 800223a:	60f8      	str	r0, [r7, #12]

	while ((HAL_GetTick() - start_time) < timeout_ms)
 800223c:	e00d      	b.n	800225a <SIM_Receive_Response+0x32>
	{
		HAL_UARTEx_ReceiveToIdle(SIM_UART, (uint8_t *)rx, 256, &RxLen, 500);
 800223e:	f107 030a 	add.w	r3, r7, #10
 8002242:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002246:	9200      	str	r2, [sp, #0]
 8002248:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	480a      	ldr	r0, [pc, #40]	@ (8002278 <SIM_Receive_Response+0x50>)
 8002250:	f015 f8e5 	bl	801741e <HAL_UARTEx_ReceiveToIdle>
		if (RxLen > 0)
 8002254:	897b      	ldrh	r3, [r7, #10]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d108      	bne.n	800226c <SIM_Receive_Response+0x44>
	while ((HAL_GetTick() - start_time) < timeout_ms)
 800225a:	f009 ff0b 	bl	800c074 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d8e9      	bhi.n	800223e <SIM_Receive_Response+0x16>
 800226a:	e000      	b.n	800226e <SIM_Receive_Response+0x46>
			break;
 800226c:	bf00      	nop
	}
	return RxLen;
 800226e:	897b      	ldrh	r3, [r7, #10]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	200004bc 	.word	0x200004bc

0800227c <SIM_Check_IP>:

/*------CONTROLLO INDIRIZZO IP------*/
int SIM_Check_IP(const char* response)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08c      	sub	sp, #48	@ 0x30
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
	char* cnact_pos = strstr(response, "+CNACT:");
 8002284:	4915      	ldr	r1, [pc, #84]	@ (80022dc <SIM_Check_IP+0x60>)
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f015 fb44 	bl	8017914 <strstr>
 800228c:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if(cnact_pos != NULL) 
 800228e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01d      	beq.n	80022d0 <SIM_Check_IP+0x54>
	{
		int status;
		char ip_addr[32] = {0};
 8002294:	f107 0308 	add.w	r3, r7, #8
 8002298:	2220      	movs	r2, #32
 800229a:	2100      	movs	r1, #0
 800229c:	4618      	mov	r0, r3
 800229e:	f015 faff 	bl	80178a0 <memset>
		if(sscanf(cnact_pos, "+CNACT: %d,%31s", &status, ip_addr) == 2)
 80022a2:	f107 0308 	add.w	r3, r7, #8
 80022a6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80022aa:	490d      	ldr	r1, [pc, #52]	@ (80022e0 <SIM_Check_IP+0x64>)
 80022ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80022ae:	f015 fab9 	bl	8017824 <siscanf>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d10b      	bne.n	80022d0 <SIM_Check_IP+0x54>
		{
			return (status == 1 && strlen(ip_addr) > 0) ? 1 : 0;
 80022b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d106      	bne.n	80022cc <SIM_Check_IP+0x50>
 80022be:	f107 0308 	add.w	r3, r7, #8
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <SIM_Check_IP+0x50>
 80022c8:	2301      	movs	r3, #1
 80022ca:	e002      	b.n	80022d2 <SIM_Check_IP+0x56>
 80022cc:	2300      	movs	r3, #0
 80022ce:	e000      	b.n	80022d2 <SIM_Check_IP+0x56>
		}
	}
	return 0;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3730      	adds	r7, #48	@ 0x30
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	08018c94 	.word	0x08018c94
 80022e0:	08018c9c 	.word	0x08018c9c

080022e4 <SIM_Parse_Command>:
    return 0;
}

/*------PARSING MESSAGGIO MQTT------*/
void SIM_Parse_Command(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
	char* buf = (char*)sim_rx_buffer;
 80022ea:	4b81      	ldr	r3, [pc, #516]	@ (80024f0 <SIM_Parse_Command+0x20c>)
 80022ec:	60fb      	str	r3, [r7, #12]

	if(strncmp(buf, "+CMD,", 5) == 0)
 80022ee:	2205      	movs	r2, #5
 80022f0:	4980      	ldr	r1, [pc, #512]	@ (80024f4 <SIM_Parse_Command+0x210>)
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f015 fae9 	bl	80178ca <strncmp>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f040 80f4 	bne.w	80024e8 <SIM_Parse_Command+0x204>
	{
		char* pos = buf + 5;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	3305      	adds	r3, #5
 8002304:	60bb      	str	r3, [r7, #8]
		// Estrai il valore del comando (cmd_val) come stringa
		char cmd_str[8] = {0};
 8002306:	463b      	mov	r3, r7
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
		int i = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
		while(pos[i] != ',' && pos[i] != '\0' && i < 3)
 8002312:	e00b      	b.n	800232c <SIM_Parse_Command+0x48>
		{
			cmd_str[i] = pos[i];
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	4413      	add	r3, r2
 800231a:	7819      	ldrb	r1, [r3, #0]
 800231c:	463a      	mov	r2, r7
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	4413      	add	r3, r2
 8002322:	460a      	mov	r2, r1
 8002324:	701a      	strb	r2, [r3, #0]
			i++;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	3301      	adds	r3, #1
 800232a:	617b      	str	r3, [r7, #20]
		while(pos[i] != ',' && pos[i] != '\0' && i < 3)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	4413      	add	r3, r2
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b2c      	cmp	r3, #44	@ 0x2c
 8002336:	d008      	beq.n	800234a <SIM_Parse_Command+0x66>
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	4413      	add	r3, r2
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <SIM_Parse_Command+0x66>
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	2b02      	cmp	r3, #2
 8002348:	dde4      	ble.n	8002314 <SIM_Parse_Command+0x30>
		}
		cmd_str[i] = '\0';
 800234a:	463a      	mov	r2, r7
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	4413      	add	r3, r2
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]

		// Avanza oltre la virgola per eventuale parsing successivo
		char* data_pos = pos + i;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	4413      	add	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
		if(*data_pos == ',') data_pos++;
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b2c      	cmp	r3, #44	@ 0x2c
 8002362:	d102      	bne.n	800236a <SIM_Parse_Command+0x86>
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	3301      	adds	r3, #1
 8002368:	613b      	str	r3, [r7, #16]

		if(strcmp(cmd_str, "IDL") == 0)
 800236a:	463b      	mov	r3, r7
 800236c:	4962      	ldr	r1, [pc, #392]	@ (80024f8 <SIM_Parse_Command+0x214>)
 800236e:	4618      	mov	r0, r3
 8002370:	f7fd ff2e 	bl	80001d0 <strcmp>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d105      	bne.n	8002386 <SIM_Parse_Command+0xa2>
		{
			flags.CMD.Idle = 1;
 800237a:	4a60      	ldr	r2, [pc, #384]	@ (80024fc <SIM_Parse_Command+0x218>)
 800237c:	7893      	ldrb	r3, [r2, #2]
 800237e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002382:	7093      	strb	r3, [r2, #2]
		else if(strcmp(cmd_str, "RST") == 0) 
		{
			HAL_NVIC_SystemReset();
		}
	}
}
 8002384:	e0b0      	b.n	80024e8 <SIM_Parse_Command+0x204>
		else if(strcmp(cmd_str, "SRT") == 0) 
 8002386:	463b      	mov	r3, r7
 8002388:	495d      	ldr	r1, [pc, #372]	@ (8002500 <SIM_Parse_Command+0x21c>)
 800238a:	4618      	mov	r0, r3
 800238c:	f7fd ff20 	bl	80001d0 <strcmp>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d105      	bne.n	80023a2 <SIM_Parse_Command+0xbe>
			flags.CMD.Start_Meas = 1;
 8002396:	4a59      	ldr	r2, [pc, #356]	@ (80024fc <SIM_Parse_Command+0x218>)
 8002398:	7893      	ldrb	r3, [r2, #2]
 800239a:	f043 0320 	orr.w	r3, r3, #32
 800239e:	7093      	strb	r3, [r2, #2]
}
 80023a0:	e0a2      	b.n	80024e8 <SIM_Parse_Command+0x204>
		else if(strcmp(cmd_str, "PNG") == 0) 
 80023a2:	463b      	mov	r3, r7
 80023a4:	4957      	ldr	r1, [pc, #348]	@ (8002504 <SIM_Parse_Command+0x220>)
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fd ff12 	bl	80001d0 <strcmp>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d105      	bne.n	80023be <SIM_Parse_Command+0xda>
			flags.CMD.Ping = 1;
 80023b2:	4a52      	ldr	r2, [pc, #328]	@ (80024fc <SIM_Parse_Command+0x218>)
 80023b4:	7893      	ldrb	r3, [r2, #2]
 80023b6:	f043 0304 	orr.w	r3, r3, #4
 80023ba:	7093      	strb	r3, [r2, #2]
}
 80023bc:	e094      	b.n	80024e8 <SIM_Parse_Command+0x204>
		else if(strcmp(cmd_str, "SND") == 0) 
 80023be:	463b      	mov	r3, r7
 80023c0:	4951      	ldr	r1, [pc, #324]	@ (8002508 <SIM_Parse_Command+0x224>)
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fd ff04 	bl	80001d0 <strcmp>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d123      	bne.n	8002416 <SIM_Parse_Command+0x132>
			if(strcmp(data_pos, "1") == 0)
 80023ce:	494f      	ldr	r1, [pc, #316]	@ (800250c <SIM_Parse_Command+0x228>)
 80023d0:	6938      	ldr	r0, [r7, #16]
 80023d2:	f7fd fefd 	bl	80001d0 <strcmp>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10a      	bne.n	80023f2 <SIM_Parse_Command+0x10e>
				sys.Log_Request = 1;
 80023dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002510 <SIM_Parse_Command+0x22c>)
 80023de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023e2:	461a      	mov	r2, r3
 80023e4:	f892 30e8 	ldrb.w	r3, [r2, #232]	@ 0xe8
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	f882 30e8 	strb.w	r3, [r2, #232]	@ 0xe8
}
 80023f0:	e07a      	b.n	80024e8 <SIM_Parse_Command+0x204>
			else if(strcmp(data_pos, "0") == 0)
 80023f2:	4948      	ldr	r1, [pc, #288]	@ (8002514 <SIM_Parse_Command+0x230>)
 80023f4:	6938      	ldr	r0, [r7, #16]
 80023f6:	f7fd feeb 	bl	80001d0 <strcmp>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d173      	bne.n	80024e8 <SIM_Parse_Command+0x204>
				sys.Log_Request = 0;
 8002400:	4b43      	ldr	r3, [pc, #268]	@ (8002510 <SIM_Parse_Command+0x22c>)
 8002402:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002406:	461a      	mov	r2, r3
 8002408:	f892 30e8 	ldrb.w	r3, [r2, #232]	@ 0xe8
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	f882 30e8 	strb.w	r3, [r2, #232]	@ 0xe8
}
 8002414:	e068      	b.n	80024e8 <SIM_Parse_Command+0x204>
		else if(strcmp(cmd_str, "MSR") == 0) 
 8002416:	463b      	mov	r3, r7
 8002418:	493f      	ldr	r1, [pc, #252]	@ (8002518 <SIM_Parse_Command+0x234>)
 800241a:	4618      	mov	r0, r3
 800241c:	f7fd fed8 	bl	80001d0 <strcmp>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d11a      	bne.n	800245c <SIM_Parse_Command+0x178>
			if(!flags.CMD.Measure_Request) 
 8002426:	4b35      	ldr	r3, [pc, #212]	@ (80024fc <SIM_Parse_Command+0x218>)
 8002428:	789b      	ldrb	r3, [r3, #2]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d159      	bne.n	80024e8 <SIM_Parse_Command+0x204>
				LED_Start(RED_LED, FAST, LOW);
 8002434:	2207      	movs	r2, #7
 8002436:	2100      	movs	r1, #0
 8002438:	2004      	movs	r0, #4
 800243a:	f001 fe25 	bl	8004088 <LED_Start>
				Send_Measure_Addr = sys.Current_RAM_Address;
 800243e:	4b34      	ldr	r3, [pc, #208]	@ (8002510 <SIM_Parse_Command+0x22c>)
 8002440:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002444:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8002448:	4a34      	ldr	r2, [pc, #208]	@ (800251c <SIM_Parse_Command+0x238>)
 800244a:	6013      	str	r3, [r2, #0]
				flags.CMD.Measure_Request = 1;
 800244c:	4a2b      	ldr	r2, [pc, #172]	@ (80024fc <SIM_Parse_Command+0x218>)
 800244e:	7893      	ldrb	r3, [r2, #2]
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	7093      	strb	r3, [r2, #2]
				Switch_Buffer();
 8002456:	f004 fa67 	bl	8006928 <Switch_Buffer>
}
 800245a:	e045      	b.n	80024e8 <SIM_Parse_Command+0x204>
		else if(strcmp(cmd_str, "OTA") == 0) 
 800245c:	463b      	mov	r3, r7
 800245e:	4930      	ldr	r1, [pc, #192]	@ (8002520 <SIM_Parse_Command+0x23c>)
 8002460:	4618      	mov	r0, r3
 8002462:	f7fd feb5 	bl	80001d0 <strcmp>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d109      	bne.n	8002480 <SIM_Parse_Command+0x19c>
			if(state == IDLE) 
 800246c:	4b2d      	ldr	r3, [pc, #180]	@ (8002524 <SIM_Parse_Command+0x240>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d139      	bne.n	80024e8 <SIM_Parse_Command+0x204>
				flags.CMD.Start_OTA = 1;
 8002474:	4a21      	ldr	r2, [pc, #132]	@ (80024fc <SIM_Parse_Command+0x218>)
 8002476:	7893      	ldrb	r3, [r2, #2]
 8002478:	f043 0302 	orr.w	r3, r3, #2
 800247c:	7093      	strb	r3, [r2, #2]
}
 800247e:	e033      	b.n	80024e8 <SIM_Parse_Command+0x204>
		else if(strcmp(cmd_str, "SET") == 0) 
 8002480:	463b      	mov	r3, r7
 8002482:	4929      	ldr	r1, [pc, #164]	@ (8002528 <SIM_Parse_Command+0x244>)
 8002484:	4618      	mov	r0, r3
 8002486:	f7fd fea3 	bl	80001d0 <strcmp>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10c      	bne.n	80024aa <SIM_Parse_Command+0x1c6>
			if(state == IDLE) 
 8002490:	4b24      	ldr	r3, [pc, #144]	@ (8002524 <SIM_Parse_Command+0x240>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d127      	bne.n	80024e8 <SIM_Parse_Command+0x204>
				flags.CMD.Set_Config = 1;
 8002498:	4a18      	ldr	r2, [pc, #96]	@ (80024fc <SIM_Parse_Command+0x218>)
 800249a:	7893      	ldrb	r3, [r2, #2]
 800249c:	f043 0308 	orr.w	r3, r3, #8
 80024a0:	7093      	strb	r3, [r2, #2]
				SIM_Parse_Cfg(data_pos); 
 80024a2:	6938      	ldr	r0, [r7, #16]
 80024a4:	f000 f846 	bl	8002534 <SIM_Parse_Cfg>
}
 80024a8:	e01e      	b.n	80024e8 <SIM_Parse_Command+0x204>
		else if(strcmp(cmd_str, "GET") == 0) 
 80024aa:	463b      	mov	r3, r7
 80024ac:	491f      	ldr	r1, [pc, #124]	@ (800252c <SIM_Parse_Command+0x248>)
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fd fe8e 	bl	80001d0 <strcmp>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10c      	bne.n	80024d4 <SIM_Parse_Command+0x1f0>
			if(state == IDLE) 
 80024ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002524 <SIM_Parse_Command+0x240>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d112      	bne.n	80024e8 <SIM_Parse_Command+0x204>
				flags.CMD.Get_Config = 1;
 80024c2:	4a0e      	ldr	r2, [pc, #56]	@ (80024fc <SIM_Parse_Command+0x218>)
 80024c4:	7893      	ldrb	r3, [r2, #2]
 80024c6:	f043 0310 	orr.w	r3, r3, #16
 80024ca:	7093      	strb	r3, [r2, #2]
				SIM_Get_Cfg(data_pos);
 80024cc:	6938      	ldr	r0, [r7, #16]
 80024ce:	f000 f897 	bl	8002600 <SIM_Get_Cfg>
}
 80024d2:	e009      	b.n	80024e8 <SIM_Parse_Command+0x204>
		else if(strcmp(cmd_str, "RST") == 0) 
 80024d4:	463b      	mov	r3, r7
 80024d6:	4916      	ldr	r1, [pc, #88]	@ (8002530 <SIM_Parse_Command+0x24c>)
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fd fe79 	bl	80001d0 <strcmp>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <SIM_Parse_Command+0x204>
			HAL_NVIC_SystemReset();
 80024e4:	f00b faab 	bl	800da3e <HAL_NVIC_SystemReset>
}
 80024e8:	bf00      	nop
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20004fb4 	.word	0x20004fb4
 80024f4:	08018cd8 	.word	0x08018cd8
 80024f8:	08018ce0 	.word	0x08018ce0
 80024fc:	20001790 	.word	0x20001790
 8002500:	08018ce4 	.word	0x08018ce4
 8002504:	08018ce8 	.word	0x08018ce8
 8002508:	08018cec 	.word	0x08018cec
 800250c:	08018cf0 	.word	0x08018cf0
 8002510:	200005d8 	.word	0x200005d8
 8002514:	08018cf4 	.word	0x08018cf4
 8002518:	08018cf8 	.word	0x08018cf8
 800251c:	20004984 	.word	0x20004984
 8002520:	08018cfc 	.word	0x08018cfc
 8002524:	200005d4 	.word	0x200005d4
 8002528:	08018d00 	.word	0x08018d00
 800252c:	08018d04 	.word	0x08018d04
 8002530:	08018d08 	.word	0x08018d08

08002534 <SIM_Parse_Cfg>:

/*-----PARSING CONFIGURAZIONE-----*/
void SIM_Parse_Cfg(char* cmd_start)
{   
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
    memset(cfg_var, 0, sizeof(cfg_var));
 800253c:	2214      	movs	r2, #20
 800253e:	2100      	movs	r1, #0
 8002540:	482c      	ldr	r0, [pc, #176]	@ (80025f4 <SIM_Parse_Cfg+0xc0>)
 8002542:	f015 f9ad 	bl	80178a0 <memset>
    memset(new_cfg_val, 0, sizeof(new_cfg_val));
 8002546:	220a      	movs	r2, #10
 8002548:	2100      	movs	r1, #0
 800254a:	482b      	ldr	r0, [pc, #172]	@ (80025f8 <SIM_Parse_Cfg+0xc4>)
 800254c:	f015 f9a8 	bl	80178a0 <memset>
    
    char* pos = cmd_start; // cmd_start arriva già dopo "SET,"
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	61fb      	str	r3, [r7, #28]

    // Prima virgola
    char* comma1 = strchr(pos, ',');
 8002554:	212c      	movs	r1, #44	@ 0x2c
 8002556:	69f8      	ldr	r0, [r7, #28]
 8002558:	f015 f9aa 	bl	80178b0 <strchr>
 800255c:	61b8      	str	r0, [r7, #24]
    if(!comma1) return;
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d040      	beq.n	80025e6 <SIM_Parse_Cfg+0xb2>

    // Seconda virgola
    char* comma2 = strchr(comma1 + 1, ',');
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	3301      	adds	r3, #1
 8002568:	212c      	movs	r1, #44	@ 0x2c
 800256a:	4618      	mov	r0, r3
 800256c:	f015 f9a0 	bl	80178b0 <strchr>
 8002570:	6178      	str	r0, [r7, #20]
    if(!comma2) return;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d038      	beq.n	80025ea <SIM_Parse_Cfg+0xb6>

    // Estrai cfg_var (dall'inizio alla prima virgola)
    int var_len = comma1 - pos;
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	613b      	str	r3, [r7, #16]
    if(var_len > 0 && var_len < sizeof(cfg_var)) 
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	dd0d      	ble.n	80025a2 <SIM_Parse_Cfg+0x6e>
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	2b13      	cmp	r3, #19
 800258a:	d80a      	bhi.n	80025a2 <SIM_Parse_Cfg+0x6e>
    {
        strncpy(cfg_var, pos, var_len);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	461a      	mov	r2, r3
 8002590:	69f9      	ldr	r1, [r7, #28]
 8002592:	4818      	ldr	r0, [pc, #96]	@ (80025f4 <SIM_Parse_Cfg+0xc0>)
 8002594:	f015 f9ab 	bl	80178ee <strncpy>
        cfg_var[var_len] = '\0';
 8002598:	4a16      	ldr	r2, [pc, #88]	@ (80025f4 <SIM_Parse_Cfg+0xc0>)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4413      	add	r3, r2
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
    }

    // Estrai cfg_idx (dalla prima virgola alla seconda)
    cfg_idx = atoi(comma1 + 1);
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	3301      	adds	r3, #1
 80025a6:	4618      	mov	r0, r3
 80025a8:	f015 f890 	bl	80176cc <atoi>
 80025ac:	4603      	mov	r3, r0
 80025ae:	4a13      	ldr	r2, [pc, #76]	@ (80025fc <SIM_Parse_Cfg+0xc8>)
 80025b0:	6013      	str	r3, [r2, #0]

    // Estrai new_cfg_val (dalla seconda virgola in poi)
    int val_len = strlen(comma2 + 1);
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3301      	adds	r3, #1
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fd fe14 	bl	80001e4 <strlen>
 80025bc:	4603      	mov	r3, r0
 80025be:	60fb      	str	r3, [r7, #12]
    if(val_len > 0 && val_len < sizeof(new_cfg_val)) 
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	dd12      	ble.n	80025ec <SIM_Parse_Cfg+0xb8>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2b09      	cmp	r3, #9
 80025ca:	d80f      	bhi.n	80025ec <SIM_Parse_Cfg+0xb8>
    {
        strncpy(new_cfg_val, comma2 + 1, val_len);
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	3301      	adds	r3, #1
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4619      	mov	r1, r3
 80025d4:	4808      	ldr	r0, [pc, #32]	@ (80025f8 <SIM_Parse_Cfg+0xc4>)
 80025d6:	f015 f98a 	bl	80178ee <strncpy>
        new_cfg_val[val_len] = '\0';
 80025da:	4a07      	ldr	r2, [pc, #28]	@ (80025f8 <SIM_Parse_Cfg+0xc4>)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4413      	add	r3, r2
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
 80025e4:	e002      	b.n	80025ec <SIM_Parse_Cfg+0xb8>
    if(!comma1) return;
 80025e6:	bf00      	nop
 80025e8:	e000      	b.n	80025ec <SIM_Parse_Cfg+0xb8>
    if(!comma2) return;
 80025ea:	bf00      	nop
    }
}
 80025ec:	3720      	adds	r7, #32
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20005784 	.word	0x20005784
 80025f8:	2000579c 	.word	0x2000579c
 80025fc:	20005798 	.word	0x20005798

08002600 <SIM_Get_Cfg>:

/*-----RECUPERO VALORE DI CONFIGURAZIONE-----*/
void SIM_Get_Cfg(char* cmd_start)
{   
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
	memset(cfg_var, 0, sizeof(cfg_var));
 8002608:	2214      	movs	r2, #20
 800260a:	2100      	movs	r1, #0
 800260c:	481f      	ldr	r0, [pc, #124]	@ (800268c <SIM_Get_Cfg+0x8c>)
 800260e:	f015 f947 	bl	80178a0 <memset>
	memset(new_cfg_val, 0, sizeof(new_cfg_val));
 8002612:	220a      	movs	r2, #10
 8002614:	2100      	movs	r1, #0
 8002616:	481e      	ldr	r0, [pc, #120]	@ (8002690 <SIM_Get_Cfg+0x90>)
 8002618:	f015 f942 	bl	80178a0 <memset>
	
	char* pos = cmd_start;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	617b      	str	r3, [r7, #20]

	// Prima virgola (dopo GET)
	char* comma1 = strchr(pos, ',');
 8002620:	212c      	movs	r1, #44	@ 0x2c
 8002622:	6978      	ldr	r0, [r7, #20]
 8002624:	f015 f944 	bl	80178b0 <strchr>
 8002628:	6138      	str	r0, [r7, #16]
	if(!comma1) return;
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d027      	beq.n	8002680 <SIM_Get_Cfg+0x80>

	// Seconda virgola
	char* comma2 = strchr(comma1 + 1, ',');
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	3301      	adds	r3, #1
 8002634:	212c      	movs	r1, #44	@ 0x2c
 8002636:	4618      	mov	r0, r3
 8002638:	f015 f93a 	bl	80178b0 <strchr>
 800263c:	60f8      	str	r0, [r7, #12]
	if(!comma2) return;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d01f      	beq.n	8002684 <SIM_Get_Cfg+0x84>

	// Estrai cfg_var (tra GET, e prima virgola)
	int var_len = comma1 - pos;
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	60bb      	str	r3, [r7, #8]
	if(var_len > 0 && var_len < sizeof(cfg_var)) 
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	dd0d      	ble.n	800266e <SIM_Get_Cfg+0x6e>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b13      	cmp	r3, #19
 8002656:	d80a      	bhi.n	800266e <SIM_Get_Cfg+0x6e>
	{
		strncpy(cfg_var, pos, var_len);
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	461a      	mov	r2, r3
 800265c:	6979      	ldr	r1, [r7, #20]
 800265e:	480b      	ldr	r0, [pc, #44]	@ (800268c <SIM_Get_Cfg+0x8c>)
 8002660:	f015 f945 	bl	80178ee <strncpy>
		cfg_var[var_len] = '\0';
 8002664:	4a09      	ldr	r2, [pc, #36]	@ (800268c <SIM_Get_Cfg+0x8c>)
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	4413      	add	r3, r2
 800266a:	2200      	movs	r2, #0
 800266c:	701a      	strb	r2, [r3, #0]
	}

	// Estrai cfg_idx
	cfg_idx = atoi(comma2 + 1);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	3301      	adds	r3, #1
 8002672:	4618      	mov	r0, r3
 8002674:	f015 f82a 	bl	80176cc <atoi>
 8002678:	4603      	mov	r3, r0
 800267a:	4a06      	ldr	r2, [pc, #24]	@ (8002694 <SIM_Get_Cfg+0x94>)
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e002      	b.n	8002686 <SIM_Get_Cfg+0x86>
	if(!comma1) return;
 8002680:	bf00      	nop
 8002682:	e000      	b.n	8002686 <SIM_Get_Cfg+0x86>
	if(!comma2) return;
 8002684:	bf00      	nop
}
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20005784 	.word	0x20005784
 8002690:	2000579c 	.word	0x2000579c
 8002694:	20005798 	.word	0x20005798

08002698 <SIM_Send_TCP>:
    SIM_Wait_Response("OK");
}

/*-----INVIO DATI AL SERVER TCP-----*/
void SIM_Send_TCP(char* data)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b090      	sub	sp, #64	@ 0x40
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
    char cmd[50];
	uint16_t size = (uint16_t)strlen(data);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7fd fd9f 	bl	80001e4 <strlen>
 80026a6:	4603      	mov	r3, r0
 80026a8:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    sprintf(cmd, "AT+CIPSEND=%u\r", size);
 80026aa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80026ac:	f107 030c 	add.w	r3, r7, #12
 80026b0:	490c      	ldr	r1, [pc, #48]	@ (80026e4 <SIM_Send_TCP+0x4c>)
 80026b2:	4618      	mov	r0, r3
 80026b4:	f015 f894 	bl	80177e0 <siprintf>
    SIM_Send_Command(cmd);
 80026b8:	f107 030c 	add.w	r3, r7, #12
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff fd87 	bl	80021d0 <SIM_Send_Command>

    SIM_Wait_Response(">");
 80026c2:	4809      	ldr	r0, [pc, #36]	@ (80026e8 <SIM_Send_TCP+0x50>)
 80026c4:	f000 f8fc 	bl	80028c0 <SIM_Wait_Response>

    HAL_UART_Transmit(SIM_UART, (uint8_t*)data, size, 1000);
 80026c8:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80026ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4806      	ldr	r0, [pc, #24]	@ (80026ec <SIM_Send_TCP+0x54>)
 80026d2:	f013 f9ed 	bl	8015ab0 <HAL_UART_Transmit>
    
    SIM_Wait_Response("SEND OK");
 80026d6:	4806      	ldr	r0, [pc, #24]	@ (80026f0 <SIM_Send_TCP+0x58>)
 80026d8:	f000 f8f2 	bl	80028c0 <SIM_Wait_Response>
}
 80026dc:	bf00      	nop
 80026de:	3740      	adds	r7, #64	@ 0x40
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	08018d38 	.word	0x08018d38
 80026e8:	08018d34 	.word	0x08018d34
 80026ec:	200004bc 	.word	0x200004bc
 80026f0:	08018d48 	.word	0x08018d48

080026f4 <SIM_Send_TCP_Chunk>:
    SIM_Send_Command_DMA(cmd);
}

/*-----INVIO DATI AL SERVER TCP SENZA DMA-----*/
void SIM_Send_TCP_Chunk(uint16_t size)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	80fb      	strh	r3, [r7, #6]
    char cmd[18];

    sprintf(cmd, "AT+CIPSEND=%u\r", size);
 80026fe:	88fa      	ldrh	r2, [r7, #6]
 8002700:	f107 030c 	add.w	r3, r7, #12
 8002704:	4906      	ldr	r1, [pc, #24]	@ (8002720 <SIM_Send_TCP_Chunk+0x2c>)
 8002706:	4618      	mov	r0, r3
 8002708:	f015 f86a 	bl	80177e0 <siprintf>
    SIM_Send_Command(cmd);
 800270c:	f107 030c 	add.w	r3, r7, #12
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fd5d 	bl	80021d0 <SIM_Send_Command>
}
 8002716:	bf00      	nop
 8002718:	3720      	adds	r7, #32
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	08018d38 	.word	0x08018d38

08002724 <SIM_Send_Infos>:

/*-----INVIO INFORMAZIONI AL SERVER MQTT-----*/
void SIM_Send_Infos(void)
{
 8002724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002726:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800272a:	af10      	add	r7, sp, #64	@ 0x40
	uint16_t len = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	f8a7 3246 	strh.w	r3, [r7, #582]	@ 0x246
	char command[18];
	char infos[512];
	uint16_t new_temp = 0;
 8002732:	2300      	movs	r3, #0
 8002734:	f8a7 3244 	strh.w	r3, [r7, #580]	@ 0x244

	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 8002738:	4956      	ldr	r1, [pc, #344]	@ (8002894 <SIM_Send_Infos+0x170>)
 800273a:	203b      	movs	r0, #59	@ 0x3b
 800273c:	f000 fba0 	bl	8002e80 <BC_MultiRead_Reg>
	INA3221_Read_Measure(&Supply);
 8002740:	4855      	ldr	r0, [pc, #340]	@ (8002898 <SIM_Send_Infos+0x174>)
 8002742:	f7fe fc85 	bl	8001050 <INA3221_Read_Measure>
	if((new_temp = Read_Temperature()) != 0)
 8002746:	f7fe fc24 	bl	8000f92 <Read_Temperature>
 800274a:	4603      	mov	r3, r0
 800274c:	f8a7 3244 	strh.w	r3, [r7, #580]	@ 0x244
 8002750:	f8b7 3244 	ldrh.w	r3, [r7, #580]	@ 0x244
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <SIM_Send_Infos+0x3c>
	{
		Temperature = new_temp;
 8002758:	4a50      	ldr	r2, [pc, #320]	@ (800289c <SIM_Send_Infos+0x178>)
 800275a:	f8b7 3244 	ldrh.w	r3, [r7, #580]	@ 0x244
 800275e:	8013      	strh	r3, [r2, #0]
	}
	uint16_t fw_ver = FW_VERSION;
 8002760:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002764:	f8a7 3242 	strh.w	r3, [r7, #578]	@ 0x242

	sprintf(infos, "R:%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", config.device_id, fw_ver, sys.onDate.Year, sys.onDate.Month, sys.onDate.Date, sys.onTime.Hours, sys.onTime.Minutes, sys.onTime.Seconds, Vbatt, config.samp_freq, config.buffering_secs, Supply.v1, Supply.v2, Supply.v3, Supply.i1, Supply.i2, Supply.i3, Temperature);
 8002768:	4b4d      	ldr	r3, [pc, #308]	@ (80028a0 <SIM_Send_Infos+0x17c>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	469c      	mov	ip, r3
 800276e:	f8b7 4242 	ldrh.w	r4, [r7, #578]	@ 0x242
 8002772:	4b4c      	ldr	r3, [pc, #304]	@ (80028a4 <SIM_Send_Infos+0x180>)
 8002774:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002778:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800277c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800277e:	4b49      	ldr	r3, [pc, #292]	@ (80028a4 <SIM_Send_Infos+0x180>)
 8002780:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002784:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002788:	62bb      	str	r3, [r7, #40]	@ 0x28
 800278a:	4b46      	ldr	r3, [pc, #280]	@ (80028a4 <SIM_Send_Infos+0x180>)
 800278c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002790:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002794:	627b      	str	r3, [r7, #36]	@ 0x24
 8002796:	4b43      	ldr	r3, [pc, #268]	@ (80028a4 <SIM_Send_Infos+0x180>)
 8002798:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800279c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027a0:	623b      	str	r3, [r7, #32]
 80027a2:	4b40      	ldr	r3, [pc, #256]	@ (80028a4 <SIM_Send_Infos+0x180>)
 80027a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	4b3d      	ldr	r3, [pc, #244]	@ (80028a4 <SIM_Send_Infos+0x180>)
 80027b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027b4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80027b8:	61bb      	str	r3, [r7, #24]
 80027ba:	4b36      	ldr	r3, [pc, #216]	@ (8002894 <SIM_Send_Infos+0x170>)
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	4b37      	ldr	r3, [pc, #220]	@ (80028a0 <SIM_Send_Infos+0x17c>)
 80027c2:	885b      	ldrh	r3, [r3, #2]
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	4b36      	ldr	r3, [pc, #216]	@ (80028a0 <SIM_Send_Infos+0x17c>)
 80027c8:	791b      	ldrb	r3, [r3, #4]
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	4b32      	ldr	r3, [pc, #200]	@ (8002898 <SIM_Send_Infos+0x174>)
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	4b31      	ldr	r3, [pc, #196]	@ (8002898 <SIM_Send_Infos+0x174>)
 80027d4:	885b      	ldrh	r3, [r3, #2]
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002898 <SIM_Send_Infos+0x174>)
 80027da:	889b      	ldrh	r3, [r3, #4]
 80027dc:	461e      	mov	r6, r3
 80027de:	4b2e      	ldr	r3, [pc, #184]	@ (8002898 <SIM_Send_Infos+0x174>)
 80027e0:	88db      	ldrh	r3, [r3, #6]
 80027e2:	461d      	mov	r5, r3
 80027e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002898 <SIM_Send_Infos+0x174>)
 80027e6:	891b      	ldrh	r3, [r3, #8]
 80027e8:	4619      	mov	r1, r3
 80027ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002898 <SIM_Send_Infos+0x174>)
 80027ec:	895b      	ldrh	r3, [r3, #10]
 80027ee:	461a      	mov	r2, r3
 80027f0:	4b2a      	ldr	r3, [pc, #168]	@ (800289c <SIM_Send_Infos+0x178>)
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80027f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80027fa:	920e      	str	r2, [sp, #56]	@ 0x38
 80027fc:	910d      	str	r1, [sp, #52]	@ 0x34
 80027fe:	950c      	str	r5, [sp, #48]	@ 0x30
 8002800:	960b      	str	r6, [sp, #44]	@ 0x2c
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	920a      	str	r2, [sp, #40]	@ 0x28
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	9209      	str	r2, [sp, #36]	@ 0x24
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	9208      	str	r2, [sp, #32]
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	9207      	str	r2, [sp, #28]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	9206      	str	r2, [sp, #24]
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	9205      	str	r2, [sp, #20]
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	9204      	str	r2, [sp, #16]
 800281e:	6a3a      	ldr	r2, [r7, #32]
 8002820:	9203      	str	r2, [sp, #12]
 8002822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002824:	9202      	str	r2, [sp, #8]
 8002826:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002828:	9201      	str	r2, [sp, #4]
 800282a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	4623      	mov	r3, r4
 8002830:	4662      	mov	r2, ip
 8002832:	491d      	ldr	r1, [pc, #116]	@ (80028a8 <SIM_Send_Infos+0x184>)
 8002834:	f014 ffd4 	bl	80177e0 <siprintf>
	len = (uint16_t)strlen(infos);
 8002838:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800283c:	4618      	mov	r0, r3
 800283e:	f7fd fcd1 	bl	80001e4 <strlen>
 8002842:	4603      	mov	r3, r0
 8002844:	f8a7 3246 	strh.w	r3, [r7, #582]	@ 0x246

	sprintf(command, "AT+CIPSEND=%u\r",len);
 8002848:	f8b7 2246 	ldrh.w	r2, [r7, #582]	@ 0x246
 800284c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8002850:	4916      	ldr	r1, [pc, #88]	@ (80028ac <SIM_Send_Infos+0x188>)
 8002852:	4618      	mov	r0, r3
 8002854:	f014 ffc4 	bl	80177e0 <siprintf>
	SIM_Send_Command(command);
 8002858:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fcb7 	bl	80021d0 <SIM_Send_Command>
	SIM_Wait_Response(">");
 8002862:	4813      	ldr	r0, [pc, #76]	@ (80028b0 <SIM_Send_Infos+0x18c>)
 8002864:	f000 f82c 	bl	80028c0 <SIM_Wait_Response>
	HAL_UART_Transmit(SIM_UART, (uint8_t*)infos, len, 100);
 8002868:	f8b7 2246 	ldrh.w	r2, [r7, #582]	@ 0x246
 800286c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8002870:	2364      	movs	r3, #100	@ 0x64
 8002872:	4810      	ldr	r0, [pc, #64]	@ (80028b4 <SIM_Send_Infos+0x190>)
 8002874:	f013 f91c 	bl	8015ab0 <HAL_UART_Transmit>
	SIM_Wait_Response("OK");
 8002878:	480f      	ldr	r0, [pc, #60]	@ (80028b8 <SIM_Send_Infos+0x194>)
 800287a:	f000 f821 	bl	80028c0 <SIM_Wait_Response>
	memset(sim_rx_buffer, 0, sizeof(sim_rx_buffer));
 800287e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002882:	2100      	movs	r1, #0
 8002884:	480d      	ldr	r0, [pc, #52]	@ (80028bc <SIM_Send_Infos+0x198>)
 8002886:	f015 f80b 	bl	80178a0 <memset>
}
 800288a:	bf00      	nop
 800288c:	f507 7713 	add.w	r7, r7, #588	@ 0x24c
 8002890:	46bd      	mov	sp, r7
 8002892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002894:	200041de 	.word	0x200041de
 8002898:	200038fc 	.word	0x200038fc
 800289c:	200041dc 	.word	0x200041dc
 80028a0:	20001794 	.word	0x20001794
 80028a4:	200005d8 	.word	0x200005d8
 80028a8:	08018d50 	.word	0x08018d50
 80028ac:	08018d38 	.word	0x08018d38
 80028b0:	08018d34 	.word	0x08018d34
 80028b4:	200004bc 	.word	0x200004bc
 80028b8:	08018a94 	.word	0x08018a94
 80028bc:	20004fb4 	.word	0x20004fb4

080028c0 <SIM_Wait_Response>:

/*-----ATTESA RISPOSTA-----*/
int SIM_Wait_Response(const char* expected)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b0c8      	sub	sp, #288	@ 0x120
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80028ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80028ce:	6018      	str	r0, [r3, #0]
    char rx[256];
    memset(rx, 0, sizeof(rx));
 80028d0:	f107 0310 	add.w	r3, r7, #16
 80028d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028d8:	2100      	movs	r1, #0
 80028da:	4618      	mov	r0, r3
 80028dc:	f014 ffe0 	bl	80178a0 <memset>
    uint16_t timeout = 2000; // 2 secondi
 80028e0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80028e4:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    uint32_t start_time = HAL_GetTick();
 80028e8:	f009 fbc4 	bl	800c074 <HAL_GetTick>
 80028ec:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while((HAL_GetTick() - start_time) < timeout)
 80028f0:	e02a      	b.n	8002948 <SIM_Wait_Response+0x88>
    {
        uint16_t RxLen = 0;
 80028f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80028f6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80028fa:	2200      	movs	r2, #0
 80028fc:	801a      	strh	r2, [r3, #0]
        HAL_UARTEx_ReceiveToIdle(SIM_UART, (uint8_t*)rx, sizeof(rx), &RxLen, 500);
 80028fe:	f107 030e 	add.w	r3, r7, #14
 8002902:	f107 0110 	add.w	r1, r7, #16
 8002906:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800290a:	9200      	str	r2, [sp, #0]
 800290c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002910:	4816      	ldr	r0, [pc, #88]	@ (800296c <SIM_Wait_Response+0xac>)
 8002912:	f014 fd84 	bl	801741e <HAL_UARTEx_ReceiveToIdle>
        
        if(RxLen > 0)
 8002916:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800291a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00e      	beq.n	8002942 <SIM_Wait_Response+0x82>
        {
        	if(strstr(rx, expected))
 8002924:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002928:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800292c:	f107 0210 	add.w	r2, r7, #16
 8002930:	6819      	ldr	r1, [r3, #0]
 8002932:	4610      	mov	r0, r2
 8002934:	f014 ffee 	bl	8017914 <strstr>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <SIM_Wait_Response+0x82>
        	{
        		return 0;
 800293e:	2300      	movs	r3, #0
 8002940:	e00e      	b.n	8002960 <SIM_Wait_Response+0xa0>
        	}
        }
        
        HAL_Delay(10);
 8002942:	200a      	movs	r0, #10
 8002944:	f009 fba2 	bl	800c08c <HAL_Delay>
    while((HAL_GetTick() - start_time) < timeout)
 8002948:	f009 fb94 	bl	800c074 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002952:	1ad2      	subs	r2, r2, r3
 8002954:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8002958:	429a      	cmp	r2, r3
 800295a:	d3ca      	bcc.n	80028f2 <SIM_Wait_Response+0x32>
    }
	return -1;
 800295c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002960:	4618      	mov	r0, r3
 8002962:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	200004bc 	.word	0x200004bc

08002970 <SIM_Check_Connection>:

/*-----CONTROLLA STATO CONNESSIONE-----*/
void SIM_Check_Connection(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b0cc      	sub	sp, #304	@ 0x130
 8002974:	af00      	add	r7, sp, #0
	char command[6];
	char response_sim[256];
	uint32_t start_time;
    const uint32_t CEREG_TIMEOUT = 180000;  
 8002976:	4b68      	ldr	r3, [pc, #416]	@ (8002b18 <SIM_Check_Connection+0x1a8>)
 8002978:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    const uint32_t TCP_TIMEOUT = 120000;     
 800297c:	4b67      	ldr	r3, [pc, #412]	@ (8002b1c <SIM_Check_Connection+0x1ac>)
 800297e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    const uint32_t MAX_TCP_ATTEMPTS = 5;    
 8002982:	2305      	movs	r3, #5
 8002984:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118


    HAL_UART_DMAStop(SIM_UART);
 8002988:	4865      	ldr	r0, [pc, #404]	@ (8002b20 <SIM_Check_Connection+0x1b0>)
 800298a:	f013 fa5f 	bl	8015e4c <HAL_UART_DMAStop>
	memset(sim_rx_buffer, 0, sizeof(sim_rx_buffer));
 800298e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002992:	2100      	movs	r1, #0
 8002994:	4863      	ldr	r0, [pc, #396]	@ (8002b24 <SIM_Check_Connection+0x1b4>)
 8002996:	f014 ff83 	bl	80178a0 <memset>

	int registered = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	start_time = HAL_GetTick();
 80029a0:	f009 fb68 	bl	800c074 <HAL_GetTick>
 80029a4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    while(!registered && (HAL_GetTick() - start_time) < CEREG_TIMEOUT)
 80029a8:	e041      	b.n	8002a2e <SIM_Check_Connection+0xbe>
    {
        SIM_Send_Command("AT+CEREG?\r");
 80029aa:	485f      	ldr	r0, [pc, #380]	@ (8002b28 <SIM_Check_Connection+0x1b8>)
 80029ac:	f7ff fc10 	bl	80021d0 <SIM_Send_Command>
        SIM_Receive_Response(response_sim, 5000);
 80029b0:	f107 0308 	add.w	r3, r7, #8
 80029b4:	f241 3188 	movw	r1, #5000	@ 0x1388
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fc35 	bl	8002228 <SIM_Receive_Response>
        int n = 0, stat_value = 0;
 80029be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80029c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80029ce:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
        char* cereg_ptr = strstr(response_sim, "+CEREG:");
 80029d6:	f107 0308 	add.w	r3, r7, #8
 80029da:	4954      	ldr	r1, [pc, #336]	@ (8002b2c <SIM_Check_Connection+0x1bc>)
 80029dc:	4618      	mov	r0, r3
 80029de:	f014 ff99 	bl	8017914 <strstr>
 80029e2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
        if(cereg_ptr && sscanf(cereg_ptr, "+CEREG: %d,%d", &n, &stat_value) >= 2 && (stat_value == 1 || stat_value == 5))
 80029e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d01b      	beq.n	8002a26 <SIM_Check_Connection+0xb6>
 80029ee:	463b      	mov	r3, r7
 80029f0:	1d3a      	adds	r2, r7, #4
 80029f2:	494f      	ldr	r1, [pc, #316]	@ (8002b30 <SIM_Check_Connection+0x1c0>)
 80029f4:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80029f8:	f014 ff14 	bl	8017824 <siscanf>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	dd11      	ble.n	8002a26 <SIM_Check_Connection+0xb6>
 8002a02:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002a06:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d006      	beq.n	8002a1e <SIM_Check_Connection+0xae>
 8002a10:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002a14:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b05      	cmp	r3, #5
 8002a1c:	d103      	bne.n	8002a26 <SIM_Check_Connection+0xb6>
        {
            registered = 1;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002a24:	e003      	b.n	8002a2e <SIM_Check_Connection+0xbe>
        }
        else
        {
            HAL_Delay(2000);
 8002a26:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002a2a:	f009 fb2f 	bl	800c08c <HAL_Delay>
    while(!registered && (HAL_GetTick() - start_time) < CEREG_TIMEOUT)
 8002a2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d109      	bne.n	8002a4a <SIM_Check_Connection+0xda>
 8002a36:	f009 fb1d 	bl	800c074 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d8af      	bhi.n	80029aa <SIM_Check_Connection+0x3a>
        }
    }

	if(!registered) 
 8002a4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <SIM_Check_Connection+0xe6>
	{
        HAL_NVIC_SystemReset(); 
 8002a52:	f00a fff4 	bl	800da3e <HAL_NVIC_SystemReset>
    }

	int connected = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	start_time = HAL_GetTick();
 8002a5c:	f009 fb0a 	bl	800c074 <HAL_GetTick>
 8002a60:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    uint32_t tcp_attempts = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    sprintf(command, "H:%u", config.device_id);
 8002a6a:	4b32      	ldr	r3, [pc, #200]	@ (8002b34 <SIM_Check_Connection+0x1c4>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002a74:	4930      	ldr	r1, [pc, #192]	@ (8002b38 <SIM_Check_Connection+0x1c8>)
 8002a76:	4618      	mov	r0, r3
 8002a78:	f014 feb2 	bl	80177e0 <siprintf>
	while(!connected && (HAL_GetTick() - start_time) < TCP_TIMEOUT && tcp_attempts < MAX_TCP_ATTEMPTS)
 8002a7c:	e027      	b.n	8002ace <SIM_Check_Connection+0x15e>
	{
		SIM_Send_Command("AT+CIPSEND=3\r");
 8002a7e:	482f      	ldr	r0, [pc, #188]	@ (8002b3c <SIM_Check_Connection+0x1cc>)
 8002a80:	f7ff fba6 	bl	80021d0 <SIM_Send_Command>
		SIM_Wait_Response(">");
 8002a84:	482e      	ldr	r0, [pc, #184]	@ (8002b40 <SIM_Check_Connection+0x1d0>)
 8002a86:	f7ff ff1b 	bl	80028c0 <SIM_Wait_Response>
		SIM_Send_Command(command);
 8002a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fb9e 	bl	80021d0 <SIM_Send_Command>
		SIM_Receive_Response(response_sim, 5000);
 8002a94:	f107 0308 	add.w	r3, r7, #8
 8002a98:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fbc3 	bl	8002228 <SIM_Receive_Response>

		if(strstr(response_sim, "SEND OK") != NULL)
 8002aa2:	f107 0308 	add.w	r3, r7, #8
 8002aa6:	4927      	ldr	r1, [pc, #156]	@ (8002b44 <SIM_Check_Connection+0x1d4>)
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f014 ff33 	bl	8017914 <strstr>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <SIM_Check_Connection+0x14c>
		{
			connected = 1;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002aba:	e008      	b.n	8002ace <SIM_Check_Connection+0x15e>
		}
		else
		{
			tcp_attempts++;
 8002abc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
			HAL_Delay(2000);
 8002ac6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002aca:	f009 fadf 	bl	800c08c <HAL_Delay>
	while(!connected && (HAL_GetTick() - start_time) < TCP_TIMEOUT && tcp_attempts < MAX_TCP_ATTEMPTS)
 8002ace:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10f      	bne.n	8002af6 <SIM_Check_Connection+0x186>
 8002ad6:	f009 facd 	bl	800c074 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d905      	bls.n	8002af6 <SIM_Check_Connection+0x186>
 8002aea:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8002aee:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d3c3      	bcc.n	8002a7e <SIM_Check_Connection+0x10e>
		}
	}

	if(!connected)
 8002af6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <SIM_Check_Connection+0x192>
	{
        HAL_NVIC_SystemReset();
 8002afe:	f00a ff9e 	bl	800da3e <HAL_NVIC_SystemReset>
    }

	HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8002b02:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002b06:	4907      	ldr	r1, [pc, #28]	@ (8002b24 <SIM_Check_Connection+0x1b4>)
 8002b08:	4805      	ldr	r0, [pc, #20]	@ (8002b20 <SIM_Check_Connection+0x1b0>)
 8002b0a:	f014 fd8b 	bl	8017624 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8002b0e:	bf00      	nop
 8002b10:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	0002bf20 	.word	0x0002bf20
 8002b1c:	0001d4c0 	.word	0x0001d4c0
 8002b20:	200004bc 	.word	0x200004bc
 8002b24:	20004fb4 	.word	0x20004fb4
 8002b28:	08018b54 	.word	0x08018b54
 8002b2c:	08018b60 	.word	0x08018b60
 8002b30:	08018b68 	.word	0x08018b68
 8002b34:	20001794 	.word	0x20001794
 8002b38:	08018d88 	.word	0x08018d88
 8002b3c:	08018d90 	.word	0x08018d90
 8002b40:	08018d34 	.word	0x08018d34
 8002b44:	08018d48 	.word	0x08018d48

08002b48 <Base64_Decode>:
#include "global_variables.h"


/*-----DECODIFICA BASE64-----*/
size_t Base64_Decode(const char *in, uint8_t *out, size_t out_len)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b08b      	sub	sp, #44	@ 0x2c
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
    size_t i = 0, j = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b58:	2300      	movs	r3, #0
 8002b5a:	623b      	str	r3, [r7, #32]
    int v = 0, val = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61fb      	str	r3, [r7, #28]
 8002b60:	2300      	movs	r3, #0
 8002b62:	61bb      	str	r3, [r7, #24]
    while (in[i] && in[i] != '\n' && in[i] != '\r')
 8002b64:	e02b      	b.n	8002bbe <Base64_Decode+0x76>
    {
        unsigned char c = base64_table[(unsigned char)in[i++]];
 8002b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b68:	1c5a      	adds	r2, r3, #1
 8002b6a:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4413      	add	r3, r2
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf0 <Base64_Decode+0xa8>)
 8002b76:	5c9b      	ldrb	r3, [r3, r2]
 8002b78:	75fb      	strb	r3, [r7, #23]
        if (c == 0x80) continue; // carattere non valido
 8002b7a:	7dfb      	ldrb	r3, [r7, #23]
 8002b7c:	2b80      	cmp	r3, #128	@ 0x80
 8002b7e:	d01d      	beq.n	8002bbc <Base64_Decode+0x74>
        val = (val << 6) | c;
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	019a      	lsls	r2, r3, #6
 8002b84:	7dfb      	ldrb	r3, [r7, #23]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        v += 6;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3306      	adds	r3, #6
 8002b8e:	61fb      	str	r3, [r7, #28]
        if (v >= 8)
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	2b07      	cmp	r3, #7
 8002b94:	dd13      	ble.n	8002bbe <Base64_Decode+0x76>
        {
            v -= 8;
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3b08      	subs	r3, #8
 8002b9a:	61fb      	str	r3, [r7, #28]
            if (j < out_len) out[j++] = (val >> v) & 0xFF;
 8002b9c:	6a3a      	ldr	r2, [r7, #32]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d20c      	bcs.n	8002bbe <Base64_Decode+0x76>
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	fa42 f103 	asr.w	r1, r2, r3
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	623a      	str	r2, [r7, #32]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	b2ca      	uxtb	r2, r1
 8002bb8:	701a      	strb	r2, [r3, #0]
 8002bba:	e000      	b.n	8002bbe <Base64_Decode+0x76>
        if (c == 0x80) continue; // carattere non valido
 8002bbc:	bf00      	nop
    while (in[i] && in[i] != '\n' && in[i] != '\r')
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc2:	4413      	add	r3, r2
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00b      	beq.n	8002be2 <Base64_Decode+0x9a>
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bce:	4413      	add	r3, r2
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b0a      	cmp	r3, #10
 8002bd4:	d005      	beq.n	8002be2 <Base64_Decode+0x9a>
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bda:	4413      	add	r3, r2
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b0d      	cmp	r3, #13
 8002be0:	d1c1      	bne.n	8002b66 <Base64_Decode+0x1e>
        }
    }
    return j; // numero di byte decodificati
 8002be2:	6a3b      	ldr	r3, [r7, #32]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	372c      	adds	r7, #44	@ 0x2c
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	08019188 	.word	0x08019188

08002bf4 <Base64_Encode>:

/*-----CODIFICA BASE64-----*/
size_t Base64_Encode(const uint8_t *in, size_t in_len, char *out, size_t out_size)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b08b      	sub	sp, #44	@ 0x2c
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
    size_t i = 0, j = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c06:	2300      	movs	r3, #0
 8002c08:	623b      	str	r3, [r7, #32]
    while (i < in_len && (j + 4) <= out_size)
 8002c0a:	e06c      	b.n	8002ce6 <Base64_Encode+0xf2>
    {
        uint32_t octet_a = i < in_len ? in[i++] : 0;
 8002c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d206      	bcs.n	8002c22 <Base64_Encode+0x2e>
 8002c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	e000      	b.n	8002c24 <Base64_Encode+0x30>
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
        uint32_t octet_b = i < in_len ? in[i++] : 0;
 8002c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d206      	bcs.n	8002c3c <Base64_Encode+0x48>
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4413      	add	r3, r2
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	e000      	b.n	8002c3e <Base64_Encode+0x4a>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61bb      	str	r3, [r7, #24]
        uint32_t octet_c = i < in_len ? in[i++] : 0;
 8002c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d206      	bcs.n	8002c56 <Base64_Encode+0x62>
 8002c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4413      	add	r3, r2
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	e000      	b.n	8002c58 <Base64_Encode+0x64>
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
        uint32_t triple = (octet_a << 16) | (octet_b << 8) | octet_c;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	041a      	lsls	r2, r3, #16
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	021b      	lsls	r3, r3, #8
 8002c62:	4313      	orrs	r3, r2
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]

        out[j++] = base64_enc_table[(triple >> 18) & 0x3F];
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	0c9b      	lsrs	r3, r3, #18
 8002c6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	1c59      	adds	r1, r3, #1
 8002c76:	6239      	str	r1, [r7, #32]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	440b      	add	r3, r1
 8002c7c:	4926      	ldr	r1, [pc, #152]	@ (8002d18 <Base64_Encode+0x124>)
 8002c7e:	5c8a      	ldrb	r2, [r1, r2]
 8002c80:	701a      	strb	r2, [r3, #0]
        out[j++] = base64_enc_table[(triple >> 12) & 0x3F];
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	0b1b      	lsrs	r3, r3, #12
 8002c86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	1c59      	adds	r1, r3, #1
 8002c8e:	6239      	str	r1, [r7, #32]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	440b      	add	r3, r1
 8002c94:	4920      	ldr	r1, [pc, #128]	@ (8002d18 <Base64_Encode+0x124>)
 8002c96:	5c8a      	ldrb	r2, [r1, r2]
 8002c98:	701a      	strb	r2, [r3, #0]
        out[j++] = (i > in_len + 1) ? '=' : base64_enc_table[(triple >> 6) & 0x3F];
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d806      	bhi.n	8002cb2 <Base64_Encode+0xbe>
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	099b      	lsrs	r3, r3, #6
 8002ca8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cac:	4a1a      	ldr	r2, [pc, #104]	@ (8002d18 <Base64_Encode+0x124>)
 8002cae:	5cd1      	ldrb	r1, [r2, r3]
 8002cb0:	e000      	b.n	8002cb4 <Base64_Encode+0xc0>
 8002cb2:	213d      	movs	r1, #61	@ 0x3d
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	623a      	str	r2, [r7, #32]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	460a      	mov	r2, r1
 8002cc0:	701a      	strb	r2, [r3, #0]
        out[j++] = (i > in_len) ? '=' : base64_enc_table[triple & 0x3F];
 8002cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d805      	bhi.n	8002cd6 <Base64_Encode+0xe2>
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cd0:	4a11      	ldr	r2, [pc, #68]	@ (8002d18 <Base64_Encode+0x124>)
 8002cd2:	5cd1      	ldrb	r1, [r2, r3]
 8002cd4:	e000      	b.n	8002cd8 <Base64_Encode+0xe4>
 8002cd6:	213d      	movs	r1, #61	@ 0x3d
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	623a      	str	r2, [r7, #32]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	460a      	mov	r2, r1
 8002ce4:	701a      	strb	r2, [r3, #0]
    while (i < in_len && (j + 4) <= out_size)
 8002ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d204      	bcs.n	8002cf8 <Base64_Encode+0x104>
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d289      	bcs.n	8002c0c <Base64_Encode+0x18>
    }
    if (j < out_size) out[j] = '\0'; // null-terminate se vuoi una stringa
 8002cf8:	6a3a      	ldr	r2, [r7, #32]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d204      	bcs.n	8002d0a <Base64_Encode+0x116>
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	4413      	add	r3, r2
 8002d06:	2200      	movs	r2, #0
 8002d08:	701a      	strb	r2, [r3, #0]
    return j; // lunghezza della stringa base64 prodotta (senza null)
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	372c      	adds	r7, #44	@ 0x2c
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	08019288 	.word	0x08019288

08002d1c <BC_Init>:
#include "global_variables.h"


/*------INIZIALIZZAZIONE BATTERY CHARGER------*/
void BC_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
	BC_Write_Reg(REG00_MINIMAL_SYSTEM_VOLTAGE, 0x1A);           //Tensione minima di uscita con 3 celle = 9V   <----- Senza Batteria il sistema fornisce questa tensione
 8002d20:	211a      	movs	r1, #26
 8002d22:	2000      	movs	r0, #0
 8002d24:	f000 f836 	bl	8002d94 <BC_Write_Reg>
	BC_MultiWrite_Reg(REG01_CHARGE_VOLTAGE_LIMIT, 0x04EC);      //Limite tensione di carica con 3 celle = 12.6V
 8002d28:	f240 41ec 	movw	r1, #1260	@ 0x4ec
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	f000 f87d 	bl	8002e2c <BC_MultiWrite_Reg>
	BC_MultiWrite_Reg(REG03_CHARGE_CURRENT_LIMIT, 0x0064);      //Limite corrente di carica con 3 celle = 1A
 8002d32:	2164      	movs	r1, #100	@ 0x64
 8002d34:	2003      	movs	r0, #3
 8002d36:	f000 f879 	bl	8002e2c <BC_MultiWrite_Reg>
	BC_Write_Reg(REG10_CHARGER_CONTROL_1, 0x85);                //Tensione di OVP in ingresso = 26V
 8002d3a:	2185      	movs	r1, #133	@ 0x85
 8002d3c:	2010      	movs	r0, #16
 8002d3e:	f000 f829 	bl	8002d94 <BC_Write_Reg>
	BC_Write_Reg(REG14_CHARGER_CONTROL_5, 0x96);                //Informazione sulla presenza dello Ship-FET
 8002d42:	2196      	movs	r1, #150	@ 0x96
 8002d44:	2014      	movs	r0, #20
 8002d46:	f000 f825 	bl	8002d94 <BC_Write_Reg>
	BC_Write_Reg(REG15_MPPT_CONTROL, 0xAB);                     //MPPT attivato, tensione di MPP = 0.875*Vin, misura di 300ms ogni 2 minuti della Vin
 8002d4a:	21ab      	movs	r1, #171	@ 0xab
 8002d4c:	2015      	movs	r0, #21
 8002d4e:	f000 f821 	bl	8002d94 <BC_Write_Reg>
	BC_Write_Reg(REG28_CHARGER_MASK_0, 0xE1);                   //Interrupt attivati: Poor source, Power good, VAC2 present, VAC1 present
 8002d52:	21e1      	movs	r1, #225	@ 0xe1
 8002d54:	2028      	movs	r0, #40	@ 0x28
 8002d56:	f000 f81d 	bl	8002d94 <BC_Write_Reg>
	BC_Write_Reg(REG29_CHARGER_MASK_1, 0xD7);                   //Interrupt attivati: nessuno
 8002d5a:	21d7      	movs	r1, #215	@ 0xd7
 8002d5c:	2029      	movs	r0, #41	@ 0x29
 8002d5e:	f000 f819 	bl	8002d94 <BC_Write_Reg>
	BC_Write_Reg(REG2A_CHARGER_MASK_2, 0x7F);                   //Interrupt attivati: nessuno
 8002d62:	217f      	movs	r1, #127	@ 0x7f
 8002d64:	202a      	movs	r0, #42	@ 0x2a
 8002d66:	f000 f815 	bl	8002d94 <BC_Write_Reg>
	BC_Write_Reg(REG2B_CHARGER_MASK_3, 0x1F);                   //Interrupt attivati: nessuno
 8002d6a:	211f      	movs	r1, #31
 8002d6c:	202b      	movs	r0, #43	@ 0x2b
 8002d6e:	f000 f811 	bl	8002d94 <BC_Write_Reg>
	BC_Write_Reg(REG2C_FAULT_MASK_0, 0xFC);                     //Interrupt attivati: VAC2 over-voltage, VAC1 over-voltage
 8002d72:	21fc      	movs	r1, #252	@ 0xfc
 8002d74:	202c      	movs	r0, #44	@ 0x2c
 8002d76:	f000 f80d 	bl	8002d94 <BC_Write_Reg>
	BC_Write_Reg(REG2D_FAULT_MASK_1, 0xF4);                     //Interrupt attivati: nessuno
 8002d7a:	21f4      	movs	r1, #244	@ 0xf4
 8002d7c:	202d      	movs	r0, #45	@ 0x2d
 8002d7e:	f000 f809 	bl	8002d94 <BC_Write_Reg>

	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 8002d82:	4903      	ldr	r1, [pc, #12]	@ (8002d90 <BC_Init+0x74>)
 8002d84:	203b      	movs	r0, #59	@ 0x3b
 8002d86:	f000 f87b 	bl	8002e80 <BC_MultiRead_Reg>
}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	200041de 	.word	0x200041de

08002d94 <BC_Write_Reg>:

/*------SCRITTURA REGISTRO 8 BIT------*/
int BC_Write_Reg(uint8_t reg, uint8_t wdata)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af02      	add	r7, sp, #8
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	460a      	mov	r2, r1
 8002d9e:	71fb      	strb	r3, [r7, #7]
 8002da0:	4613      	mov	r3, r2
 8002da2:	71bb      	strb	r3, [r7, #6]
	int result = -1;
 8002da4:	f04f 33ff 	mov.w	r3, #4294967295
 8002da8:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[2];
	toSend[0] = reg;
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	723b      	strb	r3, [r7, #8]
	toSend[1] = wdata;
 8002dae:	79bb      	ldrb	r3, [r7, #6]
 8002db0:	727b      	strb	r3, [r7, #9]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 2, 100) == HAL_OK)
 8002db2:	f107 0208 	add.w	r2, r7, #8
 8002db6:	2364      	movs	r3, #100	@ 0x64
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	2302      	movs	r3, #2
 8002dbc:	21d6      	movs	r1, #214	@ 0xd6
 8002dbe:	4806      	ldr	r0, [pc, #24]	@ (8002dd8 <BC_Write_Reg+0x44>)
 8002dc0:	f00c fc5a 	bl	800f678 <HAL_I2C_Master_Transmit>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <BC_Write_Reg+0x3a>
	{
		result = 0;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8002dce:	68fb      	ldr	r3, [r7, #12]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	20000180 	.word	0x20000180

08002ddc <BC_Read_Reg>:

/*------LETTURA REGISTRO 8 BIT------*/
int BC_Read_Reg(uint8_t reg, uint8_t *rdata)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	4603      	mov	r3, r0
 8002de4:	6039      	str	r1, [r7, #0]
 8002de6:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8002de8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dec:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8002dee:	1dfa      	adds	r2, r7, #7
 8002df0:	2364      	movs	r3, #100	@ 0x64
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	2301      	movs	r3, #1
 8002df6:	21d6      	movs	r1, #214	@ 0xd6
 8002df8:	480b      	ldr	r0, [pc, #44]	@ (8002e28 <BC_Read_Reg+0x4c>)
 8002dfa:	f00c fc3d 	bl	800f678 <HAL_I2C_Master_Transmit>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10c      	bne.n	8002e1e <BC_Read_Reg+0x42>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, rdata, 1, 100) == HAL_OK)
 8002e04:	2364      	movs	r3, #100	@ 0x64
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	2301      	movs	r3, #1
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	21d6      	movs	r1, #214	@ 0xd6
 8002e0e:	4806      	ldr	r0, [pc, #24]	@ (8002e28 <BC_Read_Reg+0x4c>)
 8002e10:	f00c fd4a 	bl	800f8a8 <HAL_I2C_Master_Receive>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <BC_Read_Reg+0x42>
		{
			result = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
		}
	}

	return result;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	20000180 	.word	0x20000180

08002e2c <BC_MultiWrite_Reg>:

/*------SCRITTURA REGISTRO 16 BIT------*/
int BC_MultiWrite_Reg(uint8_t reg, uint16_t wdata)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	4603      	mov	r3, r0
 8002e34:	460a      	mov	r2, r1
 8002e36:	71fb      	strb	r3, [r7, #7]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	80bb      	strh	r3, [r7, #4]
	int result = -1;
 8002e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e40:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[3];
	toSend[0] = reg;
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	723b      	strb	r3, [r7, #8]
	toSend[1] = (wdata & 0xFF00) >> 8;
 8002e46:	88bb      	ldrh	r3, [r7, #4]
 8002e48:	0a1b      	lsrs	r3, r3, #8
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	727b      	strb	r3, [r7, #9]
	toSend[2] = wdata & 0x00FF;
 8002e50:	88bb      	ldrh	r3, [r7, #4]
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 3, 100) == HAL_OK)
 8002e56:	f107 0208 	add.w	r2, r7, #8
 8002e5a:	2364      	movs	r3, #100	@ 0x64
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	2303      	movs	r3, #3
 8002e60:	21d6      	movs	r1, #214	@ 0xd6
 8002e62:	4806      	ldr	r0, [pc, #24]	@ (8002e7c <BC_MultiWrite_Reg+0x50>)
 8002e64:	f00c fc08 	bl	800f678 <HAL_I2C_Master_Transmit>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <BC_MultiWrite_Reg+0x46>
	{
		result = 0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8002e72:	68fb      	ldr	r3, [r7, #12]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20000180 	.word	0x20000180

08002e80 <BC_MultiRead_Reg>:

/*------LETTURA REGISTRO 16 BIT------*/
int BC_MultiRead_Reg(uint8_t reg, uint16_t *rdata)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	4603      	mov	r3, r0
 8002e88:	6039      	str	r1, [r7, #0]
 8002e8a:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8002e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e90:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 8002e92:	2300      	movs	r3, #0
 8002e94:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8002e96:	1dfa      	adds	r2, r7, #7
 8002e98:	2364      	movs	r3, #100	@ 0x64
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	21d6      	movs	r1, #214	@ 0xd6
 8002ea0:	4811      	ldr	r0, [pc, #68]	@ (8002ee8 <BC_MultiRead_Reg+0x68>)
 8002ea2:	f00c fbe9 	bl	800f678 <HAL_I2C_Master_Transmit>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d118      	bne.n	8002ede <BC_MultiRead_Reg+0x5e>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, data, 2, 100) == HAL_OK)
 8002eac:	f107 0208 	add.w	r2, r7, #8
 8002eb0:	2364      	movs	r3, #100	@ 0x64
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	21d6      	movs	r1, #214	@ 0xd6
 8002eb8:	480b      	ldr	r0, [pc, #44]	@ (8002ee8 <BC_MultiRead_Reg+0x68>)
 8002eba:	f00c fcf5 	bl	800f8a8 <HAL_I2C_Master_Receive>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10c      	bne.n	8002ede <BC_MultiRead_Reg+0x5e>
		{
			result = 0;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 8002ec8:	7a3b      	ldrb	r3, [r7, #8]
 8002eca:	b21b      	sxth	r3, r3
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	b21a      	sxth	r2, r3
 8002ed0:	7a7b      	ldrb	r3, [r7, #9]
 8002ed2:	b21b      	sxth	r3, r3
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	b21b      	sxth	r3, r3
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 8002ede:	68fb      	ldr	r3, [r7, #12]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000180 	.word	0x20000180

08002eec <BC_Read_Flags>:

/*------LETTURA FLAGS DI INTERRUZIONE------*/
int BC_Read_Flags(uint64_t *flags)
{
 8002eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ef0:	b09b      	sub	sp, #108	@ 0x6c
 8002ef2:	af02      	add	r7, sp, #8
 8002ef4:	64f8      	str	r0, [r7, #76]	@ 0x4c
	int result = -1;
 8002ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8002efa:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint8_t data[6] = {0};
 8002efc:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002f00:	2300      	movs	r3, #0
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	8093      	strh	r3, [r2, #4]
	uint8_t reg = REG22_CHARGER_FLAG_0;
 8002f06:	2322      	movs	r3, #34	@ 0x22
 8002f08:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8002f0c:	f107 0253 	add.w	r2, r7, #83	@ 0x53
 8002f10:	2364      	movs	r3, #100	@ 0x64
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	2301      	movs	r3, #1
 8002f16:	21d6      	movs	r1, #214	@ 0xd6
 8002f18:	484a      	ldr	r0, [pc, #296]	@ (8003044 <BC_Read_Flags+0x158>)
 8002f1a:	f00c fbad 	bl	800f678 <HAL_I2C_Master_Transmit>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f040 8089 	bne.w	8003038 <BC_Read_Flags+0x14c>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1 , (uint8_t *)data, 6, 100) == HAL_OK)
 8002f26:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002f2a:	2364      	movs	r3, #100	@ 0x64
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	2306      	movs	r3, #6
 8002f30:	21d6      	movs	r1, #214	@ 0xd6
 8002f32:	4844      	ldr	r0, [pc, #272]	@ (8003044 <BC_Read_Flags+0x158>)
 8002f34:	f00c fcb8 	bl	800f8a8 <HAL_I2C_Master_Receive>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d17c      	bne.n	8003038 <BC_Read_Flags+0x14c>
		{
			result = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	65fb      	str	r3, [r7, #92]	@ 0x5c
			*flags = ((uint64_t)data[0] << 40) | ((uint64_t)data[1] << 32) | ((uint64_t)data[2] << 24) | ((uint64_t)data[3] << 16) | ((uint64_t)data[4] << 8) | (uint64_t)data[5];
 8002f42:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2200      	movs	r2, #0
 8002f4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f4c:	647a      	str	r2, [r7, #68]	@ 0x44
 8002f4e:	f04f 0000 	mov.w	r0, #0
 8002f52:	f04f 0100 	mov.w	r1, #0
 8002f56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f58:	0219      	lsls	r1, r3, #8
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2200      	movs	r2, #0
 8002f64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f66:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8002f72:	0033      	movs	r3, r6
 8002f74:	2200      	movs	r2, #0
 8002f76:	ea40 0802 	orr.w	r8, r0, r2
 8002f7a:	ea41 0903 	orr.w	r9, r1, r3
 8002f7e:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2200      	movs	r2, #0
 8002f86:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f88:	637a      	str	r2, [r7, #52]	@ 0x34
 8002f8a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8002f8e:	460b      	mov	r3, r1
 8002f90:	0a1d      	lsrs	r5, r3, #8
 8002f92:	460b      	mov	r3, r1
 8002f94:	061c      	lsls	r4, r3, #24
 8002f96:	ea48 0304 	orr.w	r3, r8, r4
 8002f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f9c:	ea49 0305 	orr.w	r3, r9, r5
 8002fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fa2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2200      	movs	r2, #0
 8002faa:	623b      	str	r3, [r7, #32]
 8002fac:	627a      	str	r2, [r7, #36]	@ 0x24
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002fba:	4629      	mov	r1, r5
 8002fbc:	040b      	lsls	r3, r1, #16
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8002fc4:	4621      	mov	r1, r4
 8002fc6:	040a      	lsls	r2, r1, #16
 8002fc8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002fcc:	4621      	mov	r1, r4
 8002fce:	4311      	orrs	r1, r2
 8002fd0:	61b9      	str	r1, [r7, #24]
 8002fd2:	4629      	mov	r1, r5
 8002fd4:	4319      	orrs	r1, r3
 8002fd6:	61f9      	str	r1, [r7, #28]
 8002fd8:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2200      	movs	r2, #0
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	617a      	str	r2, [r7, #20]
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ff0:	4629      	mov	r1, r5
 8002ff2:	020b      	lsls	r3, r1, #8
 8002ff4:	4621      	mov	r1, r4
 8002ff6:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	020a      	lsls	r2, r1, #8
 8002ffe:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8003002:	4621      	mov	r1, r4
 8003004:	ea41 0a02 	orr.w	sl, r1, r2
 8003008:	4629      	mov	r1, r5
 800300a:	ea41 0b03 	orr.w	fp, r1, r3
 800300e:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2200      	movs	r2, #0
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	60fa      	str	r2, [r7, #12]
 800301a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800301e:	460b      	mov	r3, r1
 8003020:	ea4a 0303 	orr.w	r3, sl, r3
 8003024:	603b      	str	r3, [r7, #0]
 8003026:	4613      	mov	r3, r2
 8003028:	ea4b 0303 	orr.w	r3, fp, r3
 800302c:	607b      	str	r3, [r7, #4]
 800302e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003030:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003034:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}

	return result;
 8003038:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 800303a:	4618      	mov	r0, r3
 800303c:	3764      	adds	r7, #100	@ 0x64
 800303e:	46bd      	mov	sp, r7
 8003040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003044:	20000180 	.word	0x20000180

08003048 <BC_Manage_Interrupts>:

/*------GESTIONE DELLE INTERRUZIONI------*/
void BC_Manage_Interrupts(uint64_t flags)
{
 8003048:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	af00      	add	r7, sp, #0
 8003050:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t status = 0;
 8003054:	2100      	movs	r1, #0
 8003056:	73f9      	strb	r1, [r7, #15]

	if((flags & POOR_SOURCE_MASK) != 0)   //INGRESSO NON BUONO
 8003058:	e9d7 0100 	ldrd	r0, r1, [r7]
 800305c:	2200      	movs	r2, #0
 800305e:	f401 5380 	and.w	r3, r1, #4096	@ 0x1000
 8003062:	4313      	orrs	r3, r2
 8003064:	d00c      	beq.n	8003080 <BC_Manage_Interrupts+0x38>
	{
		// ...gestione evento...
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 8003066:	e9d7 0100 	ldrd	r0, r1, [r7]
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	0a0a      	lsrs	r2, r1, #8
 8003074:	2300      	movs	r3, #0
 8003076:	b2d3      	uxtb	r3, r2
 8003078:	4619      	mov	r1, r3
 800307a:	2022      	movs	r0, #34	@ 0x22
 800307c:	f7ff fe8a 	bl	8002d94 <BC_Write_Reg>
	}

	if((flags & VAC2_CHANGE_MASK) != 0)  //PANNELLO INSERITO O RIMOSSO
 8003080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003084:	f04f 0800 	mov.w	r8, #0
 8003088:	f403 6980 	and.w	r9, r3, #1024	@ 0x400
 800308c:	ea58 0309 	orrs.w	r3, r8, r9
 8003090:	d020      	beq.n	80030d4 <BC_Manage_Interrupts+0x8c>
	{
		BC_Read_Reg(REG1B_CHARGER_STATUS_0, &status);
 8003092:	f107 030f 	add.w	r3, r7, #15
 8003096:	4619      	mov	r1, r3
 8003098:	201b      	movs	r0, #27
 800309a:	f7ff fe9f 	bl	8002ddc <BC_Read_Reg>
		if((status & VAC2_PRESENT_MASK) != 0)
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d004      	beq.n	80030b2 <BC_Manage_Interrupts+0x6a>
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x80);                //Usa Pannello
 80030a8:	2180      	movs	r1, #128	@ 0x80
 80030aa:	2013      	movs	r0, #19
 80030ac:	f7ff fe72 	bl	8002d94 <BC_Write_Reg>
 80030b0:	e003      	b.n	80030ba <BC_Manage_Interrupts+0x72>
		}
		else
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x40);                //Usa Turbina
 80030b2:	2140      	movs	r1, #64	@ 0x40
 80030b4:	2013      	movs	r0, #19
 80030b6:	f7ff fe6d 	bl	8002d94 <BC_Write_Reg>
		}
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 80030ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	0a0a      	lsrs	r2, r1, #8
 80030c8:	2300      	movs	r3, #0
 80030ca:	b2d3      	uxtb	r3, r2
 80030cc:	4619      	mov	r1, r3
 80030ce:	2022      	movs	r0, #34	@ 0x22
 80030d0:	f7ff fe60 	bl	8002d94 <BC_Write_Reg>
	}

	if((flags & VAC1_CHANGE_MASK) != 0)  //TURBINA INSERITA O RIMOSSA
 80030d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030d8:	2400      	movs	r4, #0
 80030da:	f403 7500 	and.w	r5, r3, #512	@ 0x200
 80030de:	ea54 0305 	orrs.w	r3, r4, r5
 80030e2:	d00c      	beq.n	80030fe <BC_Manage_Interrupts+0xb6>
	{
		// ...gestione evento...
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 80030e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	0a0a      	lsrs	r2, r1, #8
 80030f2:	2300      	movs	r3, #0
 80030f4:	b2d3      	uxtb	r3, r2
 80030f6:	4619      	mov	r1, r3
 80030f8:	2022      	movs	r0, #34	@ 0x22
 80030fa:	f7ff fe4b 	bl	8002d94 <BC_Write_Reg>
	}

	flags = 0;
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	e9c7 2300 	strd	r2, r3, [r7]
}
 800310a:	bf00      	nop
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003114 <HAL_TIM_IC_CaptureCallback>:
#include "peripherals.h"
#include "string.h"

/* ------CALLBACK TIMER FLUSSO------*/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
	T_current = TIM2->CCR1;
 800311c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003122:	4a1b      	ldr	r2, [pc, #108]	@ (8003190 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8003124:	6013      	str	r3, [r2, #0]
	V_Period = T_current - T_prev;
 8003126:	4b1a      	ldr	r3, [pc, #104]	@ (8003190 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4b1a      	ldr	r3, [pc, #104]	@ (8003194 <HAL_TIM_IC_CaptureCallback+0x80>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	4a19      	ldr	r2, [pc, #100]	@ (8003198 <HAL_TIM_IC_CaptureCallback+0x84>)
 8003132:	6013      	str	r3, [r2, #0]

	if(T_current < T_prev)
 8003134:	4b16      	ldr	r3, [pc, #88]	@ (8003190 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b16      	ldr	r3, [pc, #88]	@ (8003194 <HAL_TIM_IC_CaptureCallback+0x80>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d207      	bcs.n	8003150 <HAL_TIM_IC_CaptureCallback+0x3c>
	{
		V_Period = 4294967295 - T_prev + T_current;
 8003140:	4b13      	ldr	r3, [pc, #76]	@ (8003190 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4b13      	ldr	r3, [pc, #76]	@ (8003194 <HAL_TIM_IC_CaptureCallback+0x80>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	3b01      	subs	r3, #1
 800314c:	4a12      	ldr	r2, [pc, #72]	@ (8003198 <HAL_TIM_IC_CaptureCallback+0x84>)
 800314e:	6013      	str	r3, [r2, #0]
	}

	Volume_Period[Period_cnt] = V_Period;
 8003150:	4b12      	ldr	r3, [pc, #72]	@ (800319c <HAL_TIM_IC_CaptureCallback+0x88>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	4619      	mov	r1, r3
 8003156:	4b10      	ldr	r3, [pc, #64]	@ (8003198 <HAL_TIM_IC_CaptureCallback+0x84>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a11      	ldr	r2, [pc, #68]	@ (80031a0 <HAL_TIM_IC_CaptureCallback+0x8c>)
 800315c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	T_prev = T_current;
 8003160:	4b0b      	ldr	r3, [pc, #44]	@ (8003190 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a0b      	ldr	r2, [pc, #44]	@ (8003194 <HAL_TIM_IC_CaptureCallback+0x80>)
 8003166:	6013      	str	r3, [r2, #0]
	Period_cnt++;
 8003168:	4b0c      	ldr	r3, [pc, #48]	@ (800319c <HAL_TIM_IC_CaptureCallback+0x88>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	3301      	adds	r3, #1
 800316e:	b2da      	uxtb	r2, r3
 8003170:	4b0a      	ldr	r3, [pc, #40]	@ (800319c <HAL_TIM_IC_CaptureCallback+0x88>)
 8003172:	701a      	strb	r2, [r3, #0]
	
	if(Period_cnt >= MAX_VOLUME_SAMPLES)
 8003174:	4b09      	ldr	r3, [pc, #36]	@ (800319c <HAL_TIM_IC_CaptureCallback+0x88>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b09      	cmp	r3, #9
 800317a:	d902      	bls.n	8003182 <HAL_TIM_IC_CaptureCallback+0x6e>
	{
		Period_cnt = 0;
 800317c:	4b07      	ldr	r3, [pc, #28]	@ (800319c <HAL_TIM_IC_CaptureCallback+0x88>)
 800317e:	2200      	movs	r2, #0
 8003180:	701a      	strb	r2, [r3, #0]
	}
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	200038f0 	.word	0x200038f0
 8003194:	200038f4 	.word	0x200038f4
 8003198:	200038f8 	.word	0x200038f8
 800319c:	20003908 	.word	0x20003908
 80031a0:	20003c2c 	.word	0x20003c2c

080031a4 <HAL_GPIO_EXTI_Callback>:

/* ------CALLBACK GPIO------*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 80031ae:	88fb      	ldrh	r3, [r7, #6]
 80031b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031b4:	d037      	beq.n	8003226 <HAL_GPIO_EXTI_Callback+0x82>
 80031b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031ba:	dc36      	bgt.n	800322a <HAL_GPIO_EXTI_Callback+0x86>
 80031bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031c0:	d035      	beq.n	800322e <HAL_GPIO_EXTI_Callback+0x8a>
 80031c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031c6:	dc30      	bgt.n	800322a <HAL_GPIO_EXTI_Callback+0x86>
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d008      	beq.n	80031de <HAL_GPIO_EXTI_Callback+0x3a>
 80031cc:	2b10      	cmp	r3, #16
 80031ce:	d000      	beq.n	80031d2 <HAL_GPIO_EXTI_Callback+0x2e>
		break;
	case RI_INTERRUPT:

		break;
	default:
		break;
 80031d0:	e02b      	b.n	800322a <HAL_GPIO_EXTI_Callback+0x86>
		flags.BC_Interrupt = 1;
 80031d2:	4a19      	ldr	r2, [pc, #100]	@ (8003238 <HAL_GPIO_EXTI_Callback+0x94>)
 80031d4:	7813      	ldrb	r3, [r2, #0]
 80031d6:	f043 0320 	orr.w	r3, r3, #32
 80031da:	7013      	strb	r3, [r2, #0]
		break;
 80031dc:	e028      	b.n	8003230 <HAL_GPIO_EXTI_Callback+0x8c>
		lsm6dsv16x_fifo_status_get(&acc, &fifo_status);
 80031de:	4917      	ldr	r1, [pc, #92]	@ (800323c <HAL_GPIO_EXTI_Callback+0x98>)
 80031e0:	4817      	ldr	r0, [pc, #92]	@ (8003240 <HAL_GPIO_EXTI_Callback+0x9c>)
 80031e2:	f001 fc38 	bl	8004a56 <lsm6dsv16x_fifo_status_get>
		num = fifo_status.fifo_level;
 80031e6:	4b15      	ldr	r3, [pc, #84]	@ (800323c <HAL_GPIO_EXTI_Callback+0x98>)
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	461a      	mov	r2, r3
 80031f2:	4b14      	ldr	r3, [pc, #80]	@ (8003244 <HAL_GPIO_EXTI_Callback+0xa0>)
 80031f4:	801a      	strh	r2, [r3, #0]
		if (num > ACC_FIFO_WATERMARK)
 80031f6:	4b13      	ldr	r3, [pc, #76]	@ (8003244 <HAL_GPIO_EXTI_Callback+0xa0>)
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	2bc8      	cmp	r3, #200	@ 0xc8
 80031fc:	d902      	bls.n	8003204 <HAL_GPIO_EXTI_Callback+0x60>
			num = ACC_FIFO_WATERMARK;
 80031fe:	4b11      	ldr	r3, [pc, #68]	@ (8003244 <HAL_GPIO_EXTI_Callback+0xa0>)
 8003200:	22c8      	movs	r2, #200	@ 0xc8
 8003202:	801a      	strh	r2, [r3, #0]
		lsm6dsv16x_read_reg(&acc, LSM6DSV16X_FIFO_DATA_OUT_TAG, (uint8_t*)&Acceleration, 7*num);
 8003204:	4b0f      	ldr	r3, [pc, #60]	@ (8003244 <HAL_GPIO_EXTI_Callback+0xa0>)
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	00d2      	lsls	r2, r2, #3
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	b29b      	uxth	r3, r3
 8003210:	4a0d      	ldr	r2, [pc, #52]	@ (8003248 <HAL_GPIO_EXTI_Callback+0xa4>)
 8003212:	2178      	movs	r1, #120	@ 0x78
 8003214:	480a      	ldr	r0, [pc, #40]	@ (8003240 <HAL_GPIO_EXTI_Callback+0x9c>)
 8003216:	f001 f82b 	bl	8004270 <lsm6dsv16x_read_reg>
		flags.ACC_Complete=1;
 800321a:	4a07      	ldr	r2, [pc, #28]	@ (8003238 <HAL_GPIO_EXTI_Callback+0x94>)
 800321c:	7813      	ldrb	r3, [r2, #0]
 800321e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003222:	7013      	strb	r3, [r2, #0]
		break;
 8003224:	e004      	b.n	8003230 <HAL_GPIO_EXTI_Callback+0x8c>
		break;
 8003226:	bf00      	nop
 8003228:	e002      	b.n	8003230 <HAL_GPIO_EXTI_Callback+0x8c>
		break;
 800322a:	bf00      	nop
 800322c:	e000      	b.n	8003230 <HAL_GPIO_EXTI_Callback+0x8c>
		break;
 800322e:	bf00      	nop
	}
}
 8003230:	bf00      	nop
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20001790 	.word	0x20001790
 800323c:	20004fb0 	.word	0x20004fb0
 8003240:	20004fa0 	.word	0x20004fa0
 8003244:	20004fb2 	.word	0x20004fb2
 8003248:	20003c54 	.word	0x20003c54

0800324c <HAL_UARTEx_RxEventCallback>:

/* ------CALLBACK UART RX IDLE------*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	807b      	strh	r3, [r7, #2]
	if(huart == SIM_UART)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a43      	ldr	r2, [pc, #268]	@ (8003368 <HAL_UARTEx_RxEventCallback+0x11c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d178      	bne.n	8003352 <HAL_UARTEx_RxEventCallback+0x106>
	{
		if(*(uint32_t*)sim_rx_buffer == PROMPT)
 8003260:	4b42      	ldr	r3, [pc, #264]	@ (800336c <HAL_UARTEx_RxEventCallback+0x120>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a42      	ldr	r2, [pc, #264]	@ (8003370 <HAL_UARTEx_RxEventCallback+0x124>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d127      	bne.n	80032ba <HAL_UARTEx_RxEventCallback+0x6e>
		{
			if(flags.Log_TransferInProgress)
 800326a:	4b42      	ldr	r3, [pc, #264]	@ (8003374 <HAL_UARTEx_RxEventCallback+0x128>)
 800326c:	785b      	ldrb	r3, [r3, #1]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00c      	beq.n	8003292 <HAL_UARTEx_RxEventCallback+0x46>
			{
				flags.Log_ReadytoSend = 1;
 8003278:	4a3e      	ldr	r2, [pc, #248]	@ (8003374 <HAL_UARTEx_RxEventCallback+0x128>)
 800327a:	7853      	ldrb	r3, [r2, #1]
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	7053      	strb	r3, [r2, #1]
				sys.SIM_Prompt_Status = 0;
 8003282:	4b3d      	ldr	r3, [pc, #244]	@ (8003378 <HAL_UARTEx_RxEventCallback+0x12c>)
 8003284:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003288:	461a      	mov	r2, r3
 800328a:	2300      	movs	r3, #0
 800328c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003290:	e05f      	b.n	8003352 <HAL_UARTEx_RxEventCallback+0x106>
			}
			else if(flags.CMD.Measure_Request)
 8003292:	4b38      	ldr	r3, [pc, #224]	@ (8003374 <HAL_UARTEx_RxEventCallback+0x128>)
 8003294:	789b      	ldrb	r3, [r3, #2]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d058      	beq.n	8003352 <HAL_UARTEx_RxEventCallback+0x106>
			{
				flags.Measure_ReadytoSend = 1;
 80032a0:	4a34      	ldr	r2, [pc, #208]	@ (8003374 <HAL_UARTEx_RxEventCallback+0x128>)
 80032a2:	7853      	ldrb	r3, [r2, #1]
 80032a4:	f043 0302 	orr.w	r3, r3, #2
 80032a8:	7053      	strb	r3, [r2, #1]
				sys.SIM_Prompt_Status = 0;
 80032aa:	4b33      	ldr	r3, [pc, #204]	@ (8003378 <HAL_UARTEx_RxEventCallback+0x12c>)
 80032ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032b0:	461a      	mov	r2, r3
 80032b2:	2300      	movs	r3, #0
 80032b4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80032b8:	e04b      	b.n	8003352 <HAL_UARTEx_RxEventCallback+0x106>
			}
		}

		else if(*(uint32_t*)sim_rx_buffer == SENDOK_H &&
 80032ba:	4b2c      	ldr	r3, [pc, #176]	@ (800336c <HAL_UARTEx_RxEventCallback+0x120>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a2f      	ldr	r2, [pc, #188]	@ (800337c <HAL_UARTEx_RxEventCallback+0x130>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d11e      	bne.n	8003302 <HAL_UARTEx_RxEventCallback+0xb6>
				   *(uint32_t*)(sim_rx_buffer + 4) == SENDOK_L)
 80032c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003380 <HAL_UARTEx_RxEventCallback+0x134>)
 80032c6:	681b      	ldr	r3, [r3, #0]
		else if(*(uint32_t*)sim_rx_buffer == SENDOK_H &&
 80032c8:	4a2e      	ldr	r2, [pc, #184]	@ (8003384 <HAL_UARTEx_RxEventCallback+0x138>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d119      	bne.n	8003302 <HAL_UARTEx_RxEventCallback+0xb6>
		{
			if(flags.Log_TransferInProgress)
 80032ce:	4b29      	ldr	r3, [pc, #164]	@ (8003374 <HAL_UARTEx_RxEventCallback+0x128>)
 80032d0:	785b      	ldrb	r3, [r3, #1]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_UARTEx_RxEventCallback+0x9c>
			{
				flags.Log_TransferInProgress = 0;
 80032dc:	4a25      	ldr	r2, [pc, #148]	@ (8003374 <HAL_UARTEx_RxEventCallback+0x128>)
 80032de:	7853      	ldrb	r3, [r2, #1]
 80032e0:	f023 0308 	bic.w	r3, r3, #8
 80032e4:	7053      	strb	r3, [r2, #1]
			if(flags.Log_TransferInProgress)
 80032e6:	e033      	b.n	8003350 <HAL_UARTEx_RxEventCallback+0x104>
			}
			else if(flags.Meas_TransferInProgress)
 80032e8:	4b22      	ldr	r3, [pc, #136]	@ (8003374 <HAL_UARTEx_RxEventCallback+0x128>)
 80032ea:	785b      	ldrb	r3, [r3, #1]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d02c      	beq.n	8003350 <HAL_UARTEx_RxEventCallback+0x104>
			{
				flags.Meas_TransferInProgress = 0;
 80032f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003374 <HAL_UARTEx_RxEventCallback+0x128>)
 80032f8:	7853      	ldrb	r3, [r2, #1]
 80032fa:	f023 0304 	bic.w	r3, r3, #4
 80032fe:	7053      	strb	r3, [r2, #1]
			if(flags.Log_TransferInProgress)
 8003300:	e026      	b.n	8003350 <HAL_UARTEx_RxEventCallback+0x104>
			}
		}

		else if(*(uint32_t*)sim_rx_buffer == ERROR)
 8003302:	4b1a      	ldr	r3, [pc, #104]	@ (800336c <HAL_UARTEx_RxEventCallback+0x120>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a20      	ldr	r2, [pc, #128]	@ (8003388 <HAL_UARTEx_RxEventCallback+0x13c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d10c      	bne.n	8003326 <HAL_UARTEx_RxEventCallback+0xda>
		{
			flags.Log_ReadytoSend = 0;
 800330c:	4a19      	ldr	r2, [pc, #100]	@ (8003374 <HAL_UARTEx_RxEventCallback+0x128>)
 800330e:	7853      	ldrb	r3, [r2, #1]
 8003310:	f023 0301 	bic.w	r3, r3, #1
 8003314:	7053      	strb	r3, [r2, #1]
			sys.SIM_Prompt_Status = 0;
 8003316:	4b18      	ldr	r3, [pc, #96]	@ (8003378 <HAL_UARTEx_RxEventCallback+0x12c>)
 8003318:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800331c:	461a      	mov	r2, r3
 800331e:	2300      	movs	r3, #0
 8003320:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003324:	e015      	b.n	8003352 <HAL_UARTEx_RxEventCallback+0x106>
		}

		else if(*(uint32_t*)sim_rx_buffer == COMMAND)
 8003326:	4b11      	ldr	r3, [pc, #68]	@ (800336c <HAL_UARTEx_RxEventCallback+0x120>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a18      	ldr	r2, [pc, #96]	@ (800338c <HAL_UARTEx_RxEventCallback+0x140>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d105      	bne.n	800333c <HAL_UARTEx_RxEventCallback+0xf0>
		{     
			flags.Message_Rx = 1;
 8003330:	4a10      	ldr	r2, [pc, #64]	@ (8003374 <HAL_UARTEx_RxEventCallback+0x128>)
 8003332:	7813      	ldrb	r3, [r2, #0]
 8003334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003338:	7013      	strb	r3, [r2, #0]
 800333a:	e00a      	b.n	8003352 <HAL_UARTEx_RxEventCallback+0x106>
		}

		else if(strstr(sim_rx_buffer, "CLOSED") != NULL)
 800333c:	4914      	ldr	r1, [pc, #80]	@ (8003390 <HAL_UARTEx_RxEventCallback+0x144>)
 800333e:	480b      	ldr	r0, [pc, #44]	@ (800336c <HAL_UARTEx_RxEventCallback+0x120>)
 8003340:	f014 fae8 	bl	8017914 <strstr>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_UARTEx_RxEventCallback+0x106>
		{
			HAL_NVIC_SystemReset();
 800334a:	f00a fb78 	bl	800da3e <HAL_NVIC_SystemReset>
 800334e:	e000      	b.n	8003352 <HAL_UARTEx_RxEventCallback+0x106>
			if(flags.Log_TransferInProgress)
 8003350:	bf00      	nop
		}


	}
	
	HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8003352:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003356:	4905      	ldr	r1, [pc, #20]	@ (800336c <HAL_UARTEx_RxEventCallback+0x120>)
 8003358:	4803      	ldr	r0, [pc, #12]	@ (8003368 <HAL_UARTEx_RxEventCallback+0x11c>)
 800335a:	f014 f963 	bl	8017624 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	200004bc 	.word	0x200004bc
 800336c:	20004fb4 	.word	0x20004fb4
 8003370:	203e0a0d 	.word	0x203e0a0d
 8003374:	20001790 	.word	0x20001790
 8003378:	200005d8 	.word	0x200005d8
 800337c:	45530a0d 	.word	0x45530a0d
 8003380:	20004fb8 	.word	0x20004fb8
 8003384:	4f20444e 	.word	0x4f20444e
 8003388:	4f525245 	.word	0x4f525245
 800338c:	444d432b 	.word	0x444d432b
 8003390:	08018da0 	.word	0x08018da0

08003394 <HAL_UART_RxCpltCallback>:

/* ------CALLBACK UART RX COMPLETE------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
	if (huart == SIM_UART)
	{

	}

}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_UART_TxCpltCallback>:

/* ------CALLBACK UART TX COMPLETE------*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	if (huart == SIM_UART)
	{

	}

}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_ADC_ConvHalfCpltCallback>:

/* ------CALLBACK HALF ADC------*/
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a09      	ldr	r2, [pc, #36]	@ (80033ec <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d109      	bne.n	80033e0 <HAL_ADC_ConvHalfCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 80033cc:	4a08      	ldr	r2, [pc, #32]	@ (80033f0 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80033ce:	7813      	ldrb	r3, [r2, #0]
 80033d0:	f043 0301 	orr.w	r3, r3, #1
 80033d4:	7013      	strb	r3, [r2, #0]
		flags.ADC_Half_Buffer = 1;
 80033d6:	4a06      	ldr	r2, [pc, #24]	@ (80033f0 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80033d8:	7813      	ldrb	r3, [r2, #0]
 80033da:	f043 0302 	orr.w	r3, r3, #2
 80033de:	7013      	strb	r3, [r2, #0]
	}
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	200000b0 	.word	0x200000b0
 80033f0:	20001790 	.word	0x20001790

080033f4 <HAL_ADC_ConvCpltCallback>:

/*------CALLBACK FULL ADC------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a09      	ldr	r2, [pc, #36]	@ (8003424 <HAL_ADC_ConvCpltCallback+0x30>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d109      	bne.n	8003418 <HAL_ADC_ConvCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8003404:	4a08      	ldr	r2, [pc, #32]	@ (8003428 <HAL_ADC_ConvCpltCallback+0x34>)
 8003406:	7813      	ldrb	r3, [r2, #0]
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	7013      	strb	r3, [r2, #0]
		flags.ADC_Full_Buffer = 1;
 800340e:	4a06      	ldr	r2, [pc, #24]	@ (8003428 <HAL_ADC_ConvCpltCallback+0x34>)
 8003410:	7813      	ldrb	r3, [r2, #0]
 8003412:	f043 0304 	orr.w	r3, r3, #4
 8003416:	7013      	strb	r3, [r2, #0]
	}
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	200000b0 	.word	0x200000b0
 8003428:	20001790 	.word	0x20001790

0800342c <HAL_RTC_AlarmAEventCallback>:

/*------CALLBACK RTC CAMBIO ORA------*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b092      	sub	sp, #72	@ 0x48
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef gTime;
	RTC_AlarmTypeDef sAlarm = {0};
 8003434:	f107 0308 	add.w	r3, r7, #8
 8003438:	222c      	movs	r2, #44	@ 0x2c
 800343a:	2100      	movs	r1, #0
 800343c:	4618      	mov	r0, r3
 800343e:	f014 fa2f 	bl	80178a0 <memset>

	HAL_RTC_GetTime(hrtc, &gTime, RTC_FORMAT_BIN);
 8003442:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003446:	2200      	movs	r2, #0
 8003448:	4619      	mov	r1, r3
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f00e ff07 	bl	801225e <HAL_RTC_GetTime>

	sys.Low_th = Low_TH_Array[gTime.Hours];
 8003450:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003454:	461a      	mov	r2, r3
 8003456:	4b17      	ldr	r3, [pc, #92]	@ (80034b4 <HAL_RTC_AlarmAEventCallback+0x88>)
 8003458:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800345c:	4b16      	ldr	r3, [pc, #88]	@ (80034b8 <HAL_RTC_AlarmAEventCallback+0x8c>)
 800345e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003462:	85da      	strh	r2, [r3, #46]	@ 0x2e
	sys.High_th = High_TH_Array[gTime.Hours];
 8003464:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003468:	461a      	mov	r2, r3
 800346a:	4b14      	ldr	r3, [pc, #80]	@ (80034bc <HAL_RTC_AlarmAEventCallback+0x90>)
 800346c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003470:	4b11      	ldr	r3, [pc, #68]	@ (80034b8 <HAL_RTC_AlarmAEventCallback+0x8c>)
 8003472:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003476:	861a      	strh	r2, [r3, #48]	@ 0x30

	sAlarm.AlarmTime.Hours = 0;
 8003478:	2300      	movs	r3, #0
 800347a:	723b      	strb	r3, [r7, #8]
    sAlarm.AlarmTime.Minutes = 0;
 800347c:	2300      	movs	r3, #0
 800347e:	727b      	strb	r3, [r7, #9]
    sAlarm.AlarmTime.Seconds = 0;
 8003480:	2300      	movs	r3, #0
 8003482:	72bb      	strb	r3, [r7, #10]
    sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS | RTC_ALARMMASK_SECONDS;
 8003484:	4b0e      	ldr	r3, [pc, #56]	@ (80034c0 <HAL_RTC_AlarmAEventCallback+0x94>)
 8003486:	61fb      	str	r3, [r7, #28]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003488:	2300      	movs	r3, #0
 800348a:	627b      	str	r3, [r7, #36]	@ 0x24
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800348c:	2300      	movs	r3, #0
 800348e:	62bb      	str	r3, [r7, #40]	@ 0x28
    sAlarm.AlarmDateWeekDay = 1;
 8003490:	2301      	movs	r3, #1
 8003492:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    sAlarm.Alarm = RTC_ALARM_A;
 8003496:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800349a:	633b      	str	r3, [r7, #48]	@ 0x30
    
    HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BIN);
 800349c:	f107 0308 	add.w	r3, r7, #8
 80034a0:	2200      	movs	r2, #0
 80034a2:	4619      	mov	r1, r3
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f00e ffbd 	bl	8012424 <HAL_RTC_SetAlarm_IT>
}
 80034aa:	bf00      	nop
 80034ac:	3748      	adds	r7, #72	@ 0x48
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20004f70 	.word	0x20004f70
 80034b8:	200005d8 	.word	0x200005d8
 80034bc:	20004f40 	.word	0x20004f40
 80034c0:	80800080 	.word	0x80800080

080034c4 <extflash_cs_set>:
uint32_t	exflashNumSectors = 0;
uint8_t		exflashInitDone = 0;


void extflash_cs_set()
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_RESET);
 80034c8:	2200      	movs	r2, #0
 80034ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80034ce:	4802      	ldr	r0, [pc, #8]	@ (80034d8 <extflash_cs_set+0x14>)
 80034d0:	f00c f806 	bl	800f4e0 <HAL_GPIO_WritePin>
}
 80034d4:	bf00      	nop
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	48000400 	.word	0x48000400

080034dc <extflash_cs_reset>:

void extflash_cs_reset()
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 80034e0:	2201      	movs	r2, #1
 80034e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80034e6:	4802      	ldr	r0, [pc, #8]	@ (80034f0 <extflash_cs_reset+0x14>)
 80034e8:	f00b fffa 	bl	800f4e0 <HAL_GPIO_WritePin>
}
 80034ec:	bf00      	nop
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	48000400 	.word	0x48000400

080034f4 <extflash_wp_reset>:
{
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_RESET);
}

void extflash_wp_reset()
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_SET);
 80034f8:	2201      	movs	r2, #1
 80034fa:	2140      	movs	r1, #64	@ 0x40
 80034fc:	4802      	ldr	r0, [pc, #8]	@ (8003508 <extflash_wp_reset+0x14>)
 80034fe:	f00b ffef 	bl	800f4e0 <HAL_GPIO_WritePin>
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	48000800 	.word	0x48000800

0800350c <extflash_hard_reset>:


void extflash_hard_reset()
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_RESET);
 8003510:	2200      	movs	r2, #0
 8003512:	2180      	movs	r1, #128	@ 0x80
 8003514:	4806      	ldr	r0, [pc, #24]	@ (8003530 <extflash_hard_reset+0x24>)
 8003516:	f00b ffe3 	bl	800f4e0 <HAL_GPIO_WritePin>

	HAL_Delay(50);
 800351a:	2032      	movs	r0, #50	@ 0x32
 800351c:	f008 fdb6 	bl	800c08c <HAL_Delay>

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_SET);
 8003520:	2201      	movs	r2, #1
 8003522:	2180      	movs	r1, #128	@ 0x80
 8003524:	4802      	ldr	r0, [pc, #8]	@ (8003530 <extflash_hard_reset+0x24>)
 8003526:	f00b ffdb 	bl	800f4e0 <HAL_GPIO_WritePin>

	return;
 800352a:	bf00      	nop
}
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	48000800 	.word	0x48000800

08003534 <extflash_send_cmd>:


int32_t extflash_send_cmd(extflash_cmd_t command)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]

	uint8_t addr_bytes[4] = {0};
 800353c:	2300      	movs	r3, #0
 800353e:	61bb      	str	r3, [r7, #24]
	uint8_t dummy_bytes[8] = {0};
 8003540:	f107 0310 	add.w	r3, r7, #16
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	605a      	str	r2, [r3, #4]
	uint8_t dummy = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	77fb      	strb	r3, [r7, #31]
	uint8_t cmd_data = command->cmd;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	73fb      	strb	r3, [r7, #15]

	if(command->address_en != 0)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	785b      	ldrb	r3, [r3, #1]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00d      	beq.n	8003578 <extflash_send_cmd+0x44>
	{
		addr_bytes[0] = (command->address >> 16) & 0xFF;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	0c1b      	lsrs	r3, r3, #16
 8003562:	b2db      	uxtb	r3, r3
 8003564:	763b      	strb	r3, [r7, #24]
		addr_bytes[1] = (command->address >> 8) & 0xFF;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	0a1b      	lsrs	r3, r3, #8
 800356c:	b2db      	uxtb	r3, r3
 800356e:	767b      	strb	r3, [r7, #25]
		addr_bytes[2] = (command->address) & 0xFF;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	76bb      	strb	r3, [r7, #26]
	}

	extflash_cs_set();
 8003578:	f7ff ffa4 	bl	80034c4 <extflash_cs_set>

	HAL_SPI_Transmit(EXTFLASH_SPI, &cmd_data, 1, FLASH_SPI_DEF_TIMEOUT);
 800357c:	f107 010f 	add.w	r1, r7, #15
 8003580:	2364      	movs	r3, #100	@ 0x64
 8003582:	2201      	movs	r2, #1
 8003584:	4823      	ldr	r0, [pc, #140]	@ (8003614 <extflash_send_cmd+0xe0>)
 8003586:	f00f fa4c 	bl	8012a22 <HAL_SPI_Transmit>

	if(command->address_en != 0)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	785b      	ldrb	r3, [r3, #1]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d006      	beq.n	80035a0 <extflash_send_cmd+0x6c>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, addr_bytes, 3, FLASH_SPI_DEF_TIMEOUT);
 8003592:	f107 0118 	add.w	r1, r7, #24
 8003596:	2364      	movs	r3, #100	@ 0x64
 8003598:	2203      	movs	r2, #3
 800359a:	481e      	ldr	r0, [pc, #120]	@ (8003614 <extflash_send_cmd+0xe0>)
 800359c:	f00f fa41 	bl	8012a22 <HAL_SPI_Transmit>
	}

	if(command->dummy_nb > 0)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	88db      	ldrh	r3, [r3, #6]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00e      	beq.n	80035c6 <extflash_send_cmd+0x92>
	{
		dummy = command->dummy_nb > sizeof(dummy_bytes) ? sizeof(dummy_bytes) : command->dummy_nb;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	88db      	ldrh	r3, [r3, #6]
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	bf28      	it	cs
 80035b0:	2308      	movcs	r3, #8
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	77fb      	strb	r3, [r7, #31]
		HAL_SPI_Transmit(EXTFLASH_SPI, dummy_bytes, dummy, FLASH_SPI_DEF_TIMEOUT);
 80035b6:	7ffb      	ldrb	r3, [r7, #31]
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	f107 0110 	add.w	r1, r7, #16
 80035be:	2364      	movs	r3, #100	@ 0x64
 80035c0:	4814      	ldr	r0, [pc, #80]	@ (8003614 <extflash_send_cmd+0xe0>)
 80035c2:	f00f fa2e 	bl	8012a22 <HAL_SPI_Transmit>
	}

	if(command->tx_nb > 0 && command->tx_data != NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	885b      	ldrh	r3, [r3, #2]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00b      	beq.n	80035e6 <extflash_send_cmd+0xb2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d007      	beq.n	80035e6 <extflash_send_cmd+0xb2>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, command->tx_data, command->tx_nb, FLASH_SPI_DEF_TIMEOUT);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68d9      	ldr	r1, [r3, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	885a      	ldrh	r2, [r3, #2]
 80035de:	2364      	movs	r3, #100	@ 0x64
 80035e0:	480c      	ldr	r0, [pc, #48]	@ (8003614 <extflash_send_cmd+0xe0>)
 80035e2:	f00f fa1e 	bl	8012a22 <HAL_SPI_Transmit>
	}

	if(command->rx_nb > 0 && command->rx_data != NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	889b      	ldrh	r3, [r3, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00b      	beq.n	8003606 <extflash_send_cmd+0xd2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d007      	beq.n	8003606 <extflash_send_cmd+0xd2>
	{
		HAL_SPI_Receive(EXTFLASH_SPI, command->rx_data, command->rx_nb, FLASH_SPI_DEF_TIMEOUT);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6919      	ldr	r1, [r3, #16]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	889a      	ldrh	r2, [r3, #4]
 80035fe:	2364      	movs	r3, #100	@ 0x64
 8003600:	4804      	ldr	r0, [pc, #16]	@ (8003614 <extflash_send_cmd+0xe0>)
 8003602:	f00f fb84 	bl	8012d0e <HAL_SPI_Receive>
	}

	extflash_cs_reset();
 8003606:	f7ff ff69 	bl	80034dc <extflash_cs_reset>

	return 0;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3720      	adds	r7, #32
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	2000023c 	.word	0x2000023c

08003618 <extflash_read_extended_read_reg>:

}


int extflash_read_extended_read_reg(uint8_t *ereg)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 8003620:	f107 030c 	add.w	r3, r7, #12
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	60da      	str	r2, [r3, #12]
 800362e:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDERP;
 8003630:	2381      	movs	r3, #129	@ 0x81
 8003632:	733b      	strb	r3, [r7, #12]
	command.address_en = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	737b      	strb	r3, [r7, #13]
	command.address = 0;
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]
	command.rx_nb = 1;
 800363c:	2301      	movs	r3, #1
 800363e:	823b      	strh	r3, [r7, #16]
	command.rx_data = ereg;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	61fb      	str	r3, [r7, #28]

	return extflash_send_cmd(&command);
 8003644:	f107 030c 	add.w	r3, r7, #12
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff ff73 	bl	8003534 <extflash_send_cmd>
 800364e:	4603      	mov	r3, r0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3720      	adds	r7, #32
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <extflash_clear_extended_read_reg>:


int extflash_clear_extended_read_reg()
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
	extflash_cmd command = {0};
 800365e:	1d3b      	adds	r3, r7, #4
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	60da      	str	r2, [r3, #12]
 800366a:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_CLERP;
 800366c:	2382      	movs	r3, #130	@ 0x82
 800366e:	713b      	strb	r3, [r7, #4]

	return extflash_send_cmd(&command);
 8003670:	1d3b      	adds	r3, r7, #4
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff ff5e 	bl	8003534 <extflash_send_cmd>
 8003678:	4603      	mov	r3, r0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <extflash_set_write_protection>:
	return extflash_send_cmd(&command);

}

int extflash_set_write_protection(uint8_t enable)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b088      	sub	sp, #32
 8003686:	af00      	add	r7, sp, #0
 8003688:	4603      	mov	r3, r0
 800368a:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 800368c:	f107 030c 	add.w	r3, r7, #12
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	60da      	str	r2, [r3, #12]
 800369a:	611a      	str	r2, [r3, #16]
	command.cmd = enable==0 ? EFLASH_CMD_WREN : EFLASH_CMD_WRDI;
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <extflash_set_write_protection+0x24>
 80036a2:	2306      	movs	r3, #6
 80036a4:	e000      	b.n	80036a8 <extflash_set_write_protection+0x26>
 80036a6:	2304      	movs	r3, #4
 80036a8:	733b      	strb	r3, [r7, #12]

	return extflash_send_cmd(&command);
 80036aa:	f107 030c 	add.w	r3, r7, #12
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff ff40 	bl	8003534 <extflash_send_cmd>
 80036b4:	4603      	mov	r3, r0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3720      	adds	r7, #32
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <extflash_read_sfdp>:

int extflash_read_sfdp(uint32_t regaddr, uint8_t *reg, uint8_t nregs)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b08a      	sub	sp, #40	@ 0x28
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	60f8      	str	r0, [r7, #12]
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	4613      	mov	r3, r2
 80036ca:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 80036cc:	f107 0314 	add.w	r3, r7, #20
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	60da      	str	r2, [r3, #12]
 80036da:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDSFDP;
 80036dc:	235a      	movs	r3, #90	@ 0x5a
 80036de:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 80036e0:	2301      	movs	r3, #1
 80036e2:	757b      	strb	r3, [r7, #21]
	command.address = regaddr;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 80036e8:	2301      	movs	r3, #1
 80036ea:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nregs;
 80036ec:	79fb      	ldrb	r3, [r7, #7]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	833b      	strh	r3, [r7, #24]
	command.rx_data = reg;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 80036f6:	f107 0314 	add.w	r3, r7, #20
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff ff1a 	bl	8003534 <extflash_send_cmd>
 8003700:	4603      	mov	r3, r0

}
 8003702:	4618      	mov	r0, r3
 8003704:	3728      	adds	r7, #40	@ 0x28
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <extflash_raw_read>:

int extflash_raw_read(uint32_t address, uint8_t *pBuffer, uint16_t nbytes)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b08a      	sub	sp, #40	@ 0x28
 800370e:	af00      	add	r7, sp, #0
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	4613      	mov	r3, r2
 8003716:	80fb      	strh	r3, [r7, #6]

	extflash_cmd command = {0};
 8003718:	f107 0314 	add.w	r3, r7, #20
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	60da      	str	r2, [r3, #12]
 8003726:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_FRD;
 8003728:	230b      	movs	r3, #11
 800372a:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 800372c:	2301      	movs	r3, #1
 800372e:	757b      	strb	r3, [r7, #21]
	command.address = address;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8003734:	2301      	movs	r3, #1
 8003736:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nbytes;
 8003738:	88fb      	ldrh	r3, [r7, #6]
 800373a:	833b      	strh	r3, [r7, #24]
	command.rx_data = pBuffer;
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8003740:	f107 0314 	add.w	r3, r7, #20
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff fef5 	bl	8003534 <extflash_send_cmd>
 800374a:	4603      	mov	r3, r0

}
 800374c:	4618      	mov	r0, r3
 800374e:	3728      	adds	r7, #40	@ 0x28
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <extflash_raw_erase>:

int extflash_raw_erase(uint32_t address)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 800375c:	f107 030c 	add.w	r3, r7, #12
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_SER;
 800376c:	23d7      	movs	r3, #215	@ 0xd7
 800376e:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 8003770:	2301      	movs	r3, #1
 8003772:	737b      	strb	r3, [r7, #13]
	command.address = address;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	617b      	str	r3, [r7, #20]

	return extflash_send_cmd(&command);
 8003778:	f107 030c 	add.w	r3, r7, #12
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff fed9 	bl	8003534 <extflash_send_cmd>
 8003782:	4603      	mov	r3, r0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3720      	adds	r7, #32
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <extflash_raw_page_write>:

int extflash_raw_page_write(uint32_t address, const uint8_t *pBuffer)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]

	extflash_cmd command = {0};
 8003796:	f107 030c 	add.w	r3, r7, #12
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	605a      	str	r2, [r3, #4]
 80037a0:	609a      	str	r2, [r3, #8]
 80037a2:	60da      	str	r2, [r3, #12]
 80037a4:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_PP;
 80037a6:	2302      	movs	r3, #2
 80037a8:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 80037aa:	2301      	movs	r3, #1
 80037ac:	737b      	strb	r3, [r7, #13]
	command.address = address;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	617b      	str	r3, [r7, #20]
	command.tx_nb = EFLASH_DEF_PAGE_SIZE;
 80037b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80037b6:	81fb      	strh	r3, [r7, #14]
	command.tx_data = pBuffer;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	61bb      	str	r3, [r7, #24]

	return extflash_send_cmd(&command);
 80037bc:	f107 030c 	add.w	r3, r7, #12
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff feb7 	bl	8003534 <extflash_send_cmd>
 80037c6:	4603      	mov	r3, r0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3720      	adds	r7, #32
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <extflash_sector_read>:


int extflash_sector_read(uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08a      	sub	sp, #40	@ 0x28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
	int result = 0;
 80037dc:	2300      	movs	r3, #0
 80037de:	61fb      	str	r3, [r7, #28]
	uint8_t ereg = 0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	75fb      	strb	r3, [r7, #23]
	uint32_t tmo = HAL_GetTick();
 80037e4:	f008 fc46 	bl	800c074 <HAL_GetTick>
 80037e8:	61b8      	str	r0, [r7, #24]
	uint8_t *wPtr = pBuffer;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	031b      	lsls	r3, r3, #12
 80037f2:	623b      	str	r3, [r7, #32]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 80037f4:	f107 0317 	add.w	r3, r7, #23
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff ff0d 	bl	8003618 <extflash_read_extended_read_reg>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	da10      	bge.n	8003826 <extflash_sector_read+0x56>
 8003804:	f04f 33ff 	mov.w	r3, #4294967295
 8003808:	e037      	b.n	800387a <extflash_sector_read+0xaa>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 800380a:	f107 0317 	add.w	r3, r7, #23
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff ff02 	bl	8003618 <extflash_read_extended_read_reg>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	da02      	bge.n	8003820 <extflash_sector_read+0x50>
 800381a:	f04f 33ff 	mov.w	r3, #4294967295
 800381e:	e02c      	b.n	800387a <extflash_sector_read+0xaa>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8003820:	2001      	movs	r0, #1
 8003822:	f008 fc33 	bl	800c08c <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
 8003826:	7dfb      	ldrb	r3, [r7, #23]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d020      	beq.n	8003872 <extflash_sector_read+0xa2>
 8003830:	f008 fc20 	bl	800c074 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800383e:	d3e4      	bcc.n	800380a <extflash_sector_read+0x3a>
	}

	while(nsectors > 0)
 8003840:	e017      	b.n	8003872 <extflash_sector_read+0xa2>
	{
		result = extflash_raw_read(address, wPtr, EFLASH_DEF_SECTOR_SIZE);
 8003842:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003846:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003848:	6a38      	ldr	r0, [r7, #32]
 800384a:	f7ff ff5e 	bl	800370a <extflash_raw_read>
 800384e:	61f8      	str	r0, [r7, #28]
		if(result < 0)return -1;
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	2b00      	cmp	r3, #0
 8003854:	da02      	bge.n	800385c <extflash_sector_read+0x8c>
 8003856:	f04f 33ff 	mov.w	r3, #4294967295
 800385a:	e00e      	b.n	800387a <extflash_sector_read+0xaa>

		address += EFLASH_DEF_SECTOR_SIZE;
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003862:	623b      	str	r3, [r7, #32]
		wPtr += EFLASH_DEF_SECTOR_SIZE;
 8003864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800386a:	627b      	str	r3, [r7, #36]	@ 0x24
		nsectors--;
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	3b01      	subs	r3, #1
 8003870:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1e4      	bne.n	8003842 <extflash_sector_read+0x72>
	}

	return 0;
 8003878:	2300      	movs	r3, #0

}
 800387a:	4618      	mov	r0, r3
 800387c:	3728      	adds	r7, #40	@ 0x28
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <extflash_wait_for_wop>:

int extflash_wait_for_wop(uint32_t timeout)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b084      	sub	sp, #16
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
	uint8_t ereg = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	72fb      	strb	r3, [r7, #11]
	uint32_t tmo = HAL_GetTick();
 800388e:	f008 fbf1 	bl	800c074 <HAL_GetTick>
 8003892:	60f8      	str	r0, [r7, #12]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8003894:	f107 030b 	add.w	r3, r7, #11
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff febd 	bl	8003618 <extflash_read_extended_read_reg>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	da10      	bge.n	80038c6 <extflash_wait_for_wop+0x44>
 80038a4:	f04f 33ff 	mov.w	r3, #4294967295
 80038a8:	e023      	b.n	80038f2 <extflash_wait_for_wop+0x70>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 80038aa:	f107 030b 	add.w	r3, r7, #11
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff feb2 	bl	8003618 <extflash_read_extended_read_reg>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	da02      	bge.n	80038c0 <extflash_wait_for_wop+0x3e>
 80038ba:	f04f 33ff 	mov.w	r3, #4294967295
 80038be:	e018      	b.n	80038f2 <extflash_wait_for_wop+0x70>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 80038c0:	2001      	movs	r0, #1
 80038c2:	f008 fbe3 	bl	800c08c <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
 80038c6:	7afb      	ldrb	r3, [r7, #11]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <extflash_wait_for_wop+0x5e>
 80038d0:	f008 fbd0 	bl	800c074 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d8e4      	bhi.n	80038aa <extflash_wait_for_wop+0x28>
	}

	if(ereg & (ESTATUS_PROT_ERR | ESTATUS_P_ERR | ESTATUS_E_ERR))
 80038e0:	7afb      	ldrb	r3, [r7, #11]
 80038e2:	f003 030e 	and.w	r3, r3, #14
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <extflash_wait_for_wop+0x6e>
	{
		return -2; //Erase o write error
 80038ea:	f06f 0301 	mvn.w	r3, #1
 80038ee:	e000      	b.n	80038f2 <extflash_wait_for_wop+0x70>
	}

	return 0;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <extflash_sector_write>:

int extflash_sector_write(uint32_t sector, uint32_t nsectors, const uint8_t *pBuffer)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b088      	sub	sp, #32
 80038fe:	af00      	add	r7, sp, #0
 8003900:	60f8      	str	r0, [r7, #12]
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	607a      	str	r2, [r7, #4]
	int result = 0;
 8003906:	2300      	movs	r3, #0
 8003908:	613b      	str	r3, [r7, #16]
	const uint8_t *wPtr = pBuffer;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	031b      	lsls	r3, r3, #12
 8003912:	61bb      	str	r3, [r7, #24]

	extflash_clear_extended_read_reg();
 8003914:	f7ff fea0 	bl	8003658 <extflash_clear_extended_read_reg>

	while(nsectors > 0)
 8003918:	e04e      	b.n	80039b8 <extflash_sector_write+0xbe>
	{
		//Controllo operazioni in corso
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 800391a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800391e:	f7ff ffb0 	bl	8003882 <extflash_wait_for_wop>
 8003922:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	db4a      	blt.n	80039c0 <extflash_sector_write+0xc6>

		//Erase del settore
		result = extflash_set_write_protection(0);
 800392a:	2000      	movs	r0, #0
 800392c:	f7ff fea9 	bl	8003682 <extflash_set_write_protection>
 8003930:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2b00      	cmp	r3, #0
 8003936:	db45      	blt.n	80039c4 <extflash_sector_write+0xca>
		result = extflash_raw_erase(address);
 8003938:	69b8      	ldr	r0, [r7, #24]
 800393a:	f7ff ff0b 	bl	8003754 <extflash_raw_erase>
 800393e:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	2b00      	cmp	r3, #0
 8003944:	db40      	blt.n	80039c8 <extflash_sector_write+0xce>

		//Attesa ERASE
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8003946:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800394a:	f7ff ff9a 	bl	8003882 <extflash_wait_for_wop>
 800394e:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	db3a      	blt.n	80039cc <extflash_sector_write+0xd2>

		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
 800395a:	e021      	b.n	80039a0 <extflash_sector_write+0xa6>
		{
			result = extflash_set_write_protection(0);
 800395c:	2000      	movs	r0, #0
 800395e:	f7ff fe90 	bl	8003682 <extflash_set_write_protection>
 8003962:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	db1e      	blt.n	80039a8 <extflash_sector_write+0xae>
			result = extflash_raw_page_write(address, wPtr);
 800396a:	69f9      	ldr	r1, [r7, #28]
 800396c:	69b8      	ldr	r0, [r7, #24]
 800396e:	f7ff ff0d 	bl	800378c <extflash_raw_page_write>
 8003972:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	db18      	blt.n	80039ac <extflash_sector_write+0xb2>

			address += EFLASH_DEF_PAGE_SIZE;
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003980:	61bb      	str	r3, [r7, #24]
			wPtr += EFLASH_DEF_PAGE_SIZE;
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003988:	61fb      	str	r3, [r7, #28]
			//Attesa write
			result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 800398a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800398e:	f7ff ff78 	bl	8003882 <extflash_wait_for_wop>
 8003992:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	2b00      	cmp	r3, #0
 8003998:	db0a      	blt.n	80039b0 <extflash_sector_write+0xb6>
		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	3301      	adds	r3, #1
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	2b0f      	cmp	r3, #15
 80039a4:	ddda      	ble.n	800395c <extflash_sector_write+0x62>
 80039a6:	e004      	b.n	80039b2 <extflash_sector_write+0xb8>
			if(result < 0)break;
 80039a8:	bf00      	nop
 80039aa:	e002      	b.n	80039b2 <extflash_sector_write+0xb8>
			if(result < 0)break;
 80039ac:	bf00      	nop
 80039ae:	e000      	b.n	80039b2 <extflash_sector_write+0xb8>
			if(result < 0)break;
 80039b0:	bf00      	nop
		}

		nsectors--;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1ad      	bne.n	800391a <extflash_sector_write+0x20>
 80039be:	e006      	b.n	80039ce <extflash_sector_write+0xd4>
		if(result < 0)break;
 80039c0:	bf00      	nop
 80039c2:	e004      	b.n	80039ce <extflash_sector_write+0xd4>
		if(result < 0)break;
 80039c4:	bf00      	nop
 80039c6:	e002      	b.n	80039ce <extflash_sector_write+0xd4>
		if(result < 0)break;
 80039c8:	bf00      	nop
 80039ca:	e000      	b.n	80039ce <extflash_sector_write+0xd4>
		if(result < 0)break;
 80039cc:	bf00      	nop
	}

	extflash_set_write_protection(1);
 80039ce:	2001      	movs	r0, #1
 80039d0:	f7ff fe57 	bl	8003682 <extflash_set_write_protection>

	return 0;
 80039d4:	2300      	movs	r3, #0

}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3720      	adds	r7, #32
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <extflash_get_sector_size>:


unsigned int extflash_get_sector_size()
{
 80039de:	b480      	push	{r7}
 80039e0:	af00      	add	r7, sp, #0
	return EFLASH_DEF_SECTOR_SIZE;
 80039e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <extflash_get_sector_count>:

unsigned int extflash_get_sector_count()
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
	return exflashNumSectors;
 80039f4:	4b03      	ldr	r3, [pc, #12]	@ (8003a04 <extflash_get_sector_count+0x14>)
 80039f6:	681b      	ldr	r3, [r3, #0]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	200000a8 	.word	0x200000a8

08003a08 <extflash_is_initialized>:
{
	return exflashSize;
}

int extflash_is_initialized()
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
	return exflashInitDone;
 8003a0c:	4b03      	ldr	r3, [pc, #12]	@ (8003a1c <extflash_is_initialized+0x14>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	200000ac 	.word	0x200000ac

08003a20 <extflash_init>:

int extflash_init()
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af00      	add	r7, sp, #0
	uint8_t manufacturer_id[2] = {0};
 8003a26:	2300      	movs	r3, #0
 8003a28:	83bb      	strh	r3, [r7, #28]
	extflash_cmd command = {0};
 8003a2a:	f107 0308 	add.w	r3, r7, #8
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	605a      	str	r2, [r3, #4]
 8003a34:	609a      	str	r2, [r3, #8]
 8003a36:	60da      	str	r2, [r3, #12]
 8003a38:	611a      	str	r2, [r3, #16]
	uint8_t density[4] = {0};
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	607b      	str	r3, [r7, #4]

	exflashInitDone = 0;
 8003a3e:	4b26      	ldr	r3, [pc, #152]	@ (8003ad8 <extflash_init+0xb8>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	701a      	strb	r2, [r3, #0]
	exflashNumSectors = 0;
 8003a44:	4b25      	ldr	r3, [pc, #148]	@ (8003adc <extflash_init+0xbc>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]

	extflash_hard_reset();
 8003a4a:	f7ff fd5f 	bl	800350c <extflash_hard_reset>
	extflash_cs_reset();
 8003a4e:	f7ff fd45 	bl	80034dc <extflash_cs_reset>
	extflash_wp_reset();
 8003a52:	f7ff fd4f 	bl	80034f4 <extflash_wp_reset>

	command.cmd = EFLASH_CMD_RDMDID;
 8003a56:	2390      	movs	r3, #144	@ 0x90
 8003a58:	723b      	strb	r3, [r7, #8]
	command.address_en = 1;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	727b      	strb	r3, [r7, #9]
	command.address = 0;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	613b      	str	r3, [r7, #16]
	command.rx_nb = 2;
 8003a62:	2302      	movs	r3, #2
 8003a64:	81bb      	strh	r3, [r7, #12]
	command.rx_data = manufacturer_id;
 8003a66:	f107 031c 	add.w	r3, r7, #28
 8003a6a:	61bb      	str	r3, [r7, #24]

	extflash_send_cmd(&command);
 8003a6c:	f107 0308 	add.w	r3, r7, #8
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff fd5f 	bl	8003534 <extflash_send_cmd>

	if(manufacturer_id[0] != EFLASH_DEF_MANIFACTURER || manufacturer_id[1] != EFLASH_DEF_DEVID)
 8003a76:	7f3b      	ldrb	r3, [r7, #28]
 8003a78:	2b9d      	cmp	r3, #157	@ 0x9d
 8003a7a:	d102      	bne.n	8003a82 <extflash_init+0x62>
 8003a7c:	7f7b      	ldrb	r3, [r7, #29]
 8003a7e:	2b17      	cmp	r3, #23
 8003a80:	d002      	beq.n	8003a88 <extflash_init+0x68>
	{
		return -1;
 8003a82:	f04f 33ff 	mov.w	r3, #4294967295
 8003a86:	e022      	b.n	8003ace <extflash_init+0xae>
	}

	memset((void *)&command, 0, sizeof(command));
 8003a88:	f107 0308 	add.w	r3, r7, #8
 8003a8c:	2214      	movs	r2, #20
 8003a8e:	2100      	movs	r1, #0
 8003a90:	4618      	mov	r0, r3
 8003a92:	f013 ff05 	bl	80178a0 <memset>

	extflash_read_sfdp(SFDP_FLASH_DENSITY, density, sizeof(density));
 8003a96:	1d3b      	adds	r3, r7, #4
 8003a98:	2204      	movs	r2, #4
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	2034      	movs	r0, #52	@ 0x34
 8003a9e:	f7ff fe0e 	bl	80036be <extflash_read_sfdp>

	memcpy(&exflashSize, density, sizeof(uint32_t));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a0e      	ldr	r2, [pc, #56]	@ (8003ae0 <extflash_init+0xc0>)
 8003aa6:	6013      	str	r3, [r2, #0]

	exflashSize += 1;
 8003aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae0 <extflash_init+0xc0>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3301      	adds	r3, #1
 8003aae:	4a0c      	ldr	r2, [pc, #48]	@ (8003ae0 <extflash_init+0xc0>)
 8003ab0:	6013      	str	r3, [r2, #0]
	exflashSize >>= 3;
 8003ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae0 <extflash_init+0xc0>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	08db      	lsrs	r3, r3, #3
 8003ab8:	4a09      	ldr	r2, [pc, #36]	@ (8003ae0 <extflash_init+0xc0>)
 8003aba:	6013      	str	r3, [r2, #0]

	exflashNumSectors = exflashSize / EFLASH_DEF_SECTOR_SIZE;
 8003abc:	4b08      	ldr	r3, [pc, #32]	@ (8003ae0 <extflash_init+0xc0>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	0b1b      	lsrs	r3, r3, #12
 8003ac2:	4a06      	ldr	r2, [pc, #24]	@ (8003adc <extflash_init+0xbc>)
 8003ac4:	6013      	str	r3, [r2, #0]

	exflashInitDone = 1;
 8003ac6:	4b04      	ldr	r3, [pc, #16]	@ (8003ad8 <extflash_init+0xb8>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	701a      	strb	r2, [r3, #0]

	return 0;
 8003acc:	2300      	movs	r3, #0

}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3720      	adds	r7, #32
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	200000ac 	.word	0x200000ac
 8003adc:	200000a8 	.word	0x200000a8
 8003ae0:	200000a4 	.word	0x200000a4

08003ae4 <System_Init>:
#include "lsm6dsv16x_rw.h"
#include "DS18B20.h"

/*-----INIZiALIZZAZIONE SISTEMA-----*/
void System_Init(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
	acc.write_reg = acc_write;
 8003ae8:	4b2f      	ldr	r3, [pc, #188]	@ (8003ba8 <System_Init+0xc4>)
 8003aea:	4a30      	ldr	r2, [pc, #192]	@ (8003bac <System_Init+0xc8>)
 8003aec:	601a      	str	r2, [r3, #0]
	acc.read_reg = acc_read;
 8003aee:	4b2e      	ldr	r3, [pc, #184]	@ (8003ba8 <System_Init+0xc4>)
 8003af0:	4a2f      	ldr	r2, [pc, #188]	@ (8003bb0 <System_Init+0xcc>)
 8003af2:	605a      	str	r2, [r3, #4]
	acc.handle = &hspi3;
 8003af4:	4b2c      	ldr	r3, [pc, #176]	@ (8003ba8 <System_Init+0xc4>)
 8003af6:	4a2f      	ldr	r2, [pc, #188]	@ (8003bb4 <System_Init+0xd0>)
 8003af8:	60da      	str	r2, [r3, #12]

	LED_Init();	
 8003afa:	f000 faa5 	bl	8004048 <LED_Init>
	LED_Start(GRN_LED, FAST, HIGH);
 8003afe:	2205      	movs	r2, #5
 8003b00:	2100      	movs	r1, #0
 8003b02:	2008      	movs	r0, #8
 8003b04:	f000 fac0 	bl	8004088 <LED_Start>

	BC_Init();
 8003b08:	f7ff f908 	bl	8002d1c <BC_Init>
	INA3221_Init();
 8003b0c:	f7fd fa78 	bl	8001000 <INA3221_Init>
	FatFS_Init();
 8003b10:	f000 f85c 	bl	8003bcc <FatFS_Init>
	Config_Init();
 8003b14:	f000 f9ca 	bl	8003eac <Config_Init>
	Acc_Init(&acc, config.samp_freq);
 8003b18:	4b27      	ldr	r3, [pc, #156]	@ (8003bb8 <System_Init+0xd4>)
 8003b1a:	885b      	ldrh	r3, [r3, #2]
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4822      	ldr	r0, [pc, #136]	@ (8003ba8 <System_Init+0xc4>)
 8003b20:	f000 f8f0 	bl	8003d04 <Acc_Init>
	Temperature = Temperature_Init();
 8003b24:	f7fd fa28 	bl	8000f78 <Temperature_Init>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	4b23      	ldr	r3, [pc, #140]	@ (8003bbc <System_Init+0xd8>)
 8003b2e:	801a      	strh	r2, [r3, #0]

	LED_Start(ORG_LED, FAST, HALF);
 8003b30:	2206      	movs	r2, #6
 8003b32:	2100      	movs	r1, #0
 8003b34:	2000      	movs	r0, #0
 8003b36:	f000 faa7 	bl	8004088 <LED_Start>
	SIM_Startup_Seq();
 8003b3a:	f7fe fb2f 	bl	800219c <SIM_Startup_Seq>
	while(SIM_Init() != HAL_OK);
 8003b3e:	bf00      	nop
 8003b40:	f7fd fee6 	bl	8001910 <SIM_Init>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1fa      	bne.n	8003b40 <System_Init+0x5c>
	LED_Stop(ORG_LED);
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	f000 fb68 	bl	8004220 <LED_Stop>

	RTC_Init();
 8003b50:	f7fd fb0a 	bl	8001168 <RTC_Init>

	HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8003b54:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003b58:	4919      	ldr	r1, [pc, #100]	@ (8003bc0 <System_Init+0xdc>)
 8003b5a:	481a      	ldr	r0, [pc, #104]	@ (8003bc4 <System_Init+0xe0>)
 8003b5c:	f013 fd62 	bl	8017624 <HAL_UARTEx_ReceiveToIdle_DMA>
	LED_Start(GRN_LED, MEDIUM, HALF);
 8003b60:	2206      	movs	r2, #6
 8003b62:	2101      	movs	r1, #1
 8003b64:	2008      	movs	r0, #8
 8003b66:	f000 fa8f 	bl	8004088 <LED_Start>
	sys.SIM_Connection_Status = HAL_GetTick();
 8003b6a:	f008 fa83 	bl	800c074 <HAL_GetTick>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	4a15      	ldr	r2, [pc, #84]	@ (8003bc8 <System_Init+0xe4>)
 8003b72:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003b76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
	sys.Log_Request = 1;
 8003b7a:	4b13      	ldr	r3, [pc, #76]	@ (8003bc8 <System_Init+0xe4>)
 8003b7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b80:	461a      	mov	r2, r3
 8003b82:	f892 30e8 	ldrb.w	r3, [r2, #232]	@ 0xe8
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	f882 30e8 	strb.w	r3, [r2, #232]	@ 0xe8
	sys.Low_th = 0;
 8003b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003bc8 <System_Init+0xe4>)
 8003b90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b94:	2200      	movs	r2, #0
 8003b96:	85da      	strh	r2, [r3, #46]	@ 0x2e
	sys.High_th = 4096;
 8003b98:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc8 <System_Init+0xe4>)
 8003b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b9e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003ba2:	861a      	strh	r2, [r3, #48]	@ 0x30
}
 8003ba4:	bf00      	nop
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20004fa0 	.word	0x20004fa0
 8003bac:	08004b67 	.word	0x08004b67
 8003bb0:	08004bbf 	.word	0x08004bbf
 8003bb4:	200002a0 	.word	0x200002a0
 8003bb8:	20001794 	.word	0x20001794
 8003bbc:	200041dc 	.word	0x200041dc
 8003bc0:	20004fb4 	.word	0x20004fb4
 8003bc4:	200004bc 	.word	0x200004bc
 8003bc8:	200005d8 	.word	0x200005d8

08003bcc <FatFS_Init>:

/*-----INIZiALIZZAZIONE MEMORIE-----*/
void FatFS_Init(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	75fb      	strb	r3, [r7, #23]
	MKFS_PARM mkfs_opt = {0};
 8003bd6:	1d3b      	adds	r3, r7, #4
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	609a      	str	r2, [r3, #8]
 8003be0:	60da      	str	r2, [r3, #12]

	do
	{
		sys.RAM_Mounted = 0;
 8003be2:	4b41      	ldr	r3, [pc, #260]	@ (8003ce8 <FatFS_Init+0x11c>)
 8003be4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003be8:	461a      	mov	r2, r3
 8003bea:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003bee:	f023 0302 	bic.w	r3, r3, #2
 8003bf2:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		
		mkfs_opt.fmt = FM_FAT;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	713b      	strb	r3, [r7, #4]
		mkfs_opt.au_size = 1024;
 8003bfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bfe:	613b      	str	r3, [r7, #16]
		mkfs_opt.n_fat = 1;
 8003c00:	2301      	movs	r3, #1
 8003c02:	717b      	strb	r3, [r7, #5]
		mkfs_opt.align = 1;
 8003c04:	2301      	movs	r3, #1
 8003c06:	60bb      	str	r3, [r7, #8]

		fRes = f_mkfs("/ram", &mkfs_opt, psram_fs.win, sizeof(psram_fs.win));
 8003c08:	1d39      	adds	r1, r7, #4
 8003c0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c0e:	4a37      	ldr	r2, [pc, #220]	@ (8003cec <FatFS_Init+0x120>)
 8003c10:	4837      	ldr	r0, [pc, #220]	@ (8003cf0 <FatFS_Init+0x124>)
 8003c12:	f007 fd4d 	bl	800b6b0 <f_mkfs>
 8003c16:	4603      	mov	r3, r0
 8003c18:	75fb      	strb	r3, [r7, #23]
		if (fRes != FR_OK)
 8003c1a:	7dfb      	ldrb	r3, [r7, #23]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d114      	bne.n	8003c4a <FatFS_Init+0x7e>
		{
			break;
		}

		fRes = f_mount(&psram_fs, "/ram", 1);
 8003c20:	2201      	movs	r2, #1
 8003c22:	4933      	ldr	r1, [pc, #204]	@ (8003cf0 <FatFS_Init+0x124>)
 8003c24:	4833      	ldr	r0, [pc, #204]	@ (8003cf4 <FatFS_Init+0x128>)
 8003c26:	f006 fe23 	bl	800a870 <f_mount>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	75fb      	strb	r3, [r7, #23]

		if (fRes != FR_OK)
 8003c2e:	7dfb      	ldrb	r3, [r7, #23]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10c      	bne.n	8003c4e <FatFS_Init+0x82>
		{
			break;
		}

		sys.RAM_Mounted = 1;
 8003c34:	4b2c      	ldr	r3, [pc, #176]	@ (8003ce8 <FatFS_Init+0x11c>)
 8003c36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003c40:	f043 0302 	orr.w	r3, r3, #2
 8003c44:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 8003c48:	e002      	b.n	8003c50 <FatFS_Init+0x84>
			break;
 8003c4a:	bf00      	nop
 8003c4c:	e000      	b.n	8003c50 <FatFS_Init+0x84>
			break;
 8003c4e:	bf00      	nop
	} while (1);

	do
	{
		sys.FLASH_Mounted = 0;
 8003c50:	4b25      	ldr	r3, [pc, #148]	@ (8003ce8 <FatFS_Init+0x11c>)
 8003c52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c56:	461a      	mov	r2, r3
 8003c58:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003c5c:	f023 0304 	bic.w	r3, r3, #4
 8003c60:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		fRes = f_mount(&flash_fs, "/flash", 1);
 8003c64:	2201      	movs	r2, #1
 8003c66:	4924      	ldr	r1, [pc, #144]	@ (8003cf8 <FatFS_Init+0x12c>)
 8003c68:	4824      	ldr	r0, [pc, #144]	@ (8003cfc <FatFS_Init+0x130>)
 8003c6a:	f006 fe01 	bl	800a870 <f_mount>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	75fb      	strb	r3, [r7, #23]

		if (fRes == FR_NO_FILESYSTEM)
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
 8003c74:	2b0d      	cmp	r3, #13
 8003c76:	d124      	bne.n	8003cc2 <FatFS_Init+0xf6>
		{
			memset((void *)&mkfs_opt, 0, sizeof(mkfs_opt));
 8003c78:	1d3b      	adds	r3, r7, #4
 8003c7a:	2210      	movs	r2, #16
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f013 fe0e 	bl	80178a0 <memset>
			mkfs_opt.fmt = FM_FAT;
 8003c84:	2301      	movs	r3, #1
 8003c86:	713b      	strb	r3, [r7, #4]
			mkfs_opt.au_size = 4096;    
 8003c88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c8c:	613b      	str	r3, [r7, #16]
			mkfs_opt.n_fat = 1;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	717b      	strb	r3, [r7, #5]
			mkfs_opt.align = 1;
 8003c92:	2301      	movs	r3, #1
 8003c94:	60bb      	str	r3, [r7, #8]

			fRes = f_mkfs("/flash", &mkfs_opt, flash_fs.win, sizeof(flash_fs.win));
 8003c96:	1d39      	adds	r1, r7, #4
 8003c98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c9c:	4a18      	ldr	r2, [pc, #96]	@ (8003d00 <FatFS_Init+0x134>)
 8003c9e:	4816      	ldr	r0, [pc, #88]	@ (8003cf8 <FatFS_Init+0x12c>)
 8003ca0:	f007 fd06 	bl	800b6b0 <f_mkfs>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 8003ca8:	7dfb      	ldrb	r3, [r7, #23]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d114      	bne.n	8003cd8 <FatFS_Init+0x10c>
			{
				break;
			}

			fRes = f_mount(&flash_fs, "/flash", 1);
 8003cae:	2201      	movs	r2, #1
 8003cb0:	4911      	ldr	r1, [pc, #68]	@ (8003cf8 <FatFS_Init+0x12c>)
 8003cb2:	4812      	ldr	r0, [pc, #72]	@ (8003cfc <FatFS_Init+0x130>)
 8003cb4:	f006 fddc 	bl	800a870 <f_mount>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 8003cbc:	7dfb      	ldrb	r3, [r7, #23]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10c      	bne.n	8003cdc <FatFS_Init+0x110>
			{
				break;
			}
		}

		sys.FLASH_Mounted = 1;
 8003cc2:	4b09      	ldr	r3, [pc, #36]	@ (8003ce8 <FatFS_Init+0x11c>)
 8003cc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cc8:	461a      	mov	r2, r3
 8003cca:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003cce:	f043 0304 	orr.w	r3, r3, #4
 8003cd2:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 8003cd6:	e002      	b.n	8003cde <FatFS_Init+0x112>
				break;
 8003cd8:	bf00      	nop
 8003cda:	e000      	b.n	8003cde <FatFS_Init+0x112>
				break;
 8003cdc:	bf00      	nop
	} while (1);


}
 8003cde:	bf00      	nop
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	200005d8 	.word	0x200005d8
 8003cec:	200018bc 	.word	0x200018bc
 8003cf0:	08018da8 	.word	0x08018da8
 8003cf4:	20001888 	.word	0x20001888
 8003cf8:	08018db0 	.word	0x08018db0
 8003cfc:	200028bc 	.word	0x200028bc
 8003d00:	200028f0 	.word	0x200028f0

08003d04 <Acc_Init>:

/*-----INIZiALIZZAZIONE ACCELEROMETRO-----*/
int Acc_Init(stmdev_ctx_t* acc, uint16_t fs)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	807b      	strh	r3, [r7, #2]
	lsm6dsv16x_reset_t rst;
	lsm6dsv16x_pin_int_route_t pin_int = {0};
 8003d10:	f107 0310 	add.w	r3, r7, #16
 8003d14:	2100      	movs	r1, #0
 8003d16:	460a      	mov	r2, r1
 8003d18:	801a      	strh	r2, [r3, #0]
 8003d1a:	460a      	mov	r2, r1
 8003d1c:	709a      	strb	r2, [r3, #2]
	uint8_t acc_whoamI = 0;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	73fb      	strb	r3, [r7, #15]
	uint8_t wmi_cnt = 0;
 8003d22:	2300      	movs	r3, #0
 8003d24:	75fb      	strb	r3, [r7, #23]

	pin_int.fifo_th = PROPERTY_ENABLE;
 8003d26:	7c3b      	ldrb	r3, [r7, #16]
 8003d28:	f043 0308 	orr.w	r3, r3, #8
 8003d2c:	743b      	strb	r3, [r7, #16]


	lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 8003d2e:	f107 030f 	add.w	r3, r7, #15
 8003d32:	4619      	mov	r1, r3
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 fb87 	bl	8004448 <lsm6dsv16x_device_id_get>
	if (acc_whoamI != LSM6DSV16X_ID)
 8003d3a:	7bfb      	ldrb	r3, [r7, #15]
 8003d3c:	2b70      	cmp	r3, #112	@ 0x70
 8003d3e:	d020      	beq.n	8003d82 <Acc_Init+0x7e>
		while (acc_whoamI != LSM6DSV16X_ID)
 8003d40:	e01c      	b.n	8003d7c <Acc_Init+0x78>
		{
			lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 8003d42:	f107 030f 	add.w	r3, r7, #15
 8003d46:	4619      	mov	r1, r3
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 fb7d 	bl	8004448 <lsm6dsv16x_device_id_get>
			wmi_cnt++;
 8003d4e:	7dfb      	ldrb	r3, [r7, #23]
 8003d50:	3301      	adds	r3, #1
 8003d52:	75fb      	strb	r3, [r7, #23]
			if (wmi_cnt == 3)
 8003d54:	7dfb      	ldrb	r3, [r7, #23]
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d110      	bne.n	8003d7c <Acc_Init+0x78>
			{
				sys.ACC_Present = 0;
 8003d5a:	4b51      	ldr	r3, [pc, #324]	@ (8003ea0 <Acc_Init+0x19c>)
 8003d5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d60:	461a      	mov	r2, r3
 8003d62:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003d66:	f023 0301 	bic.w	r3, r3, #1
 8003d6a:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
				flags.ACC_Complete = 1;
 8003d6e:	4a4d      	ldr	r2, [pc, #308]	@ (8003ea4 <Acc_Init+0x1a0>)
 8003d70:	7813      	ldrb	r3, [r2, #0]
 8003d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d76:	7013      	strb	r3, [r2, #0]
				return 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	e08c      	b.n	8003e96 <Acc_Init+0x192>
		while (acc_whoamI != LSM6DSV16X_ID)
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	2b70      	cmp	r3, #112	@ 0x70
 8003d80:	d1df      	bne.n	8003d42 <Acc_Init+0x3e>
			}
		}
	sys.ACC_Present = 1;
 8003d82:	4b47      	ldr	r3, [pc, #284]	@ (8003ea0 <Acc_Init+0x19c>)
 8003d84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d88:	461a      	mov	r2, r3
 8003d8a:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
	lsm6dsv16x_reset_set(acc, LSM6DSV16X_GLOBAL_RST);
 8003d96:	2101      	movs	r1, #1
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 faae 	bl	80042fa <lsm6dsv16x_reset_set>
	do {
		lsm6dsv16x_reset_get(acc, &rst);
 8003d9e:	f107 0316 	add.w	r3, r7, #22
 8003da2:	4619      	mov	r1, r3
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 faf9 	bl	800439c <lsm6dsv16x_reset_get>
		HAL_Delay(10);
 8003daa:	200a      	movs	r0, #10
 8003dac:	f008 f96e 	bl	800c08c <HAL_Delay>
	} while (rst != LSM6DSV16X_READY);
 8003db0:	7dbb      	ldrb	r3, [r7, #22]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f3      	bne.n	8003d9e <Acc_Init+0x9a>

	lsm6dsv16x_block_data_update_set(acc, PROPERTY_ENABLE);
 8003db6:	2101      	movs	r1, #1
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fc42 	bl	8004642 <lsm6dsv16x_block_data_update_set>
	lsm6dsv16x_ui_i2c_i3c_mode_set(acc, LSM6DSV16X_I2C_I3C_DISABLE);
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 feaa 	bl	8004b1a <lsm6dsv16x_ui_i2c_i3c_mode_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_HIGH_PERFORMANCE_MD);
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 fb9f 	bl	800450c <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_HIGH_PERFORMANCE_MD);
 8003dce:	2100      	movs	r1, #0
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 fc10 	bl	80045f6 <lsm6dsv16x_gy_mode_set>
	if(fs == 1600)
 8003dd6:	887b      	ldrh	r3, [r7, #2]
 8003dd8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003ddc:	d104      	bne.n	8003de8 <Acc_Init+0xe4>
	{
		lsm6dsv16x_fifo_xl_batch_set(acc, LSM6DSV16X_XL_BATCHED_AT_1920Hz);
 8003dde:	210a      	movs	r1, #10
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fdc6 	bl	8004972 <lsm6dsv16x_fifo_xl_batch_set>
 8003de6:	e00b      	b.n	8003e00 <Acc_Init+0xfc>
	}
	else if(fs == 800)
 8003de8:	887b      	ldrh	r3, [r7, #2]
 8003dea:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8003dee:	d104      	bne.n	8003dfa <Acc_Init+0xf6>
	{
		lsm6dsv16x_fifo_xl_batch_set(acc, LSM6DSV16X_XL_BATCHED_AT_960Hz);
 8003df0:	2109      	movs	r1, #9
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fdbd 	bl	8004972 <lsm6dsv16x_fifo_xl_batch_set>
 8003df8:	e002      	b.n	8003e00 <Acc_Init+0xfc>
	}
	else
	{
		return -1;
 8003dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfe:	e04a      	b.n	8003e96 <Acc_Init+0x192>
	}
	lsm6dsv16x_fifo_gy_batch_set(acc, LSM6DSV16X_GY_NOT_BATCHED);
 8003e00:	2100      	movs	r1, #0
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fddb 	bl	80049be <lsm6dsv16x_fifo_gy_batch_set>
	lsm6dsv16x_fifo_mode_set(acc, LSM6DSV16X_BYPASS_MODE);
 8003e08:	2100      	movs	r1, #0
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fdfd 	bl	8004a0a <lsm6dsv16x_fifo_mode_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 8003e10:	2100      	movs	r1, #0
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fb29 	bl	800446a <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_gy_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 8003e18:	2100      	movs	r1, #0
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 fb9c 	bl	8004558 <lsm6dsv16x_gy_data_rate_set>
	if(fs == 1600)
 8003e20:	887b      	ldrh	r3, [r7, #2]
 8003e22:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003e26:	d104      	bne.n	8003e32 <Acc_Init+0x12e>
	{
		lsm6dsv16x_odr_trig_cfg_set(acc, 32);  //800SPS
 8003e28:	2120      	movs	r1, #32
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 fc2f 	bl	800468e <lsm6dsv16x_odr_trig_cfg_set>
 8003e30:	e00b      	b.n	8003e4a <Acc_Init+0x146>
	}
	else if(fs == 800)
 8003e32:	887b      	ldrh	r3, [r7, #2]
 8003e34:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8003e38:	d104      	bne.n	8003e44 <Acc_Init+0x140>
	{
		lsm6dsv16x_odr_trig_cfg_set(acc, 16);  //800SPS
 8003e3a:	2110      	movs	r1, #16
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fc26 	bl	800468e <lsm6dsv16x_odr_trig_cfg_set>
 8003e42:	e002      	b.n	8003e4a <Acc_Init+0x146>
	}
	else
	{
		return -1;
 8003e44:	f04f 33ff 	mov.w	r3, #4294967295
 8003e48:	e025      	b.n	8003e96 <Acc_Init+0x192>
	}
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_ODR_TRIGGERED_MD);
 8003e4a:	2103      	movs	r1, #3
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 fb5d 	bl	800450c <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_ODR_TRIGGERED_MD);
 8003e52:	2103      	movs	r1, #3
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 fbce 	bl	80045f6 <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_den_polarity_set(acc, LSM6DSV16X_DEN_ACT_HIGH);
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 fd42 	bl	80048e6 <lsm6dsv16x_den_polarity_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_AT_960Hz);
 8003e62:	2109      	movs	r1, #9
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 fb00 	bl	800446a <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_xl_full_scale_set(acc, LSM6DSV16X_2g);
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fc5d 	bl	800472c <lsm6dsv16x_xl_full_scale_set>
	lsm6dsv16x_gy_full_scale_set(acc, LSM6DSV16X_2000dps);
 8003e72:	2104      	movs	r1, #4
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 fc33 	bl	80046e0 <lsm6dsv16x_gy_full_scale_set>
	lsm6dsv16x_fifo_watermark_set(acc, ACC_FIFO_WATERMARK);
 8003e7a:	21c8      	movs	r1, #200	@ 0xc8
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 fd58 	bl	8004932 <lsm6dsv16x_fifo_watermark_set>
	lsm6dsv16x_pin_int1_route_set(acc, &pin_int);
 8003e82:	f107 0310 	add.w	r3, r7, #16
 8003e86:	4619      	mov	r1, r3
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 fc75 	bl	8004778 <lsm6dsv16x_pin_int1_route_set>


	__HAL_GPIO_EXTI_CLEAR_IT(ACC_INTERRUPT);
 8003e8e:	4b06      	ldr	r3, [pc, #24]	@ (8003ea8 <Acc_Init+0x1a4>)
 8003e90:	2204      	movs	r2, #4
 8003e92:	615a      	str	r2, [r3, #20]
	return 0;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	200005d8 	.word	0x200005d8
 8003ea4:	20001790 	.word	0x20001790
 8003ea8:	40010400 	.word	0x40010400

08003eac <Config_Init>:

/*-----INIZiALIZZAZIONE CONFIGURAZIONE-----*/
void Config_Init(void)
{
 8003eac:	b5b0      	push	{r4, r5, r7, lr}
 8003eae:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
    FIL config_file;
    UINT bytes_read;
    UINT bytes_written;

	f_unlink(CONFIG_FILE); //DA RIMUOVERE DOPO I TEST
 8003eb6:	485e      	ldr	r0, [pc, #376]	@ (8004030 <Config_Init+0x184>)
 8003eb8:	f007 fa38 	bl	800b32c <f_unlink>
    if (f_open(&config_file, CONFIG_FILE, FA_READ) == FR_OK) 
 8003ebc:	f107 0318 	add.w	r3, r7, #24
 8003ec0:	3b0c      	subs	r3, #12
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	495a      	ldr	r1, [pc, #360]	@ (8004030 <Config_Init+0x184>)
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f006 fd1c 	bl	800a904 <f_open>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d11f      	bne.n	8003f12 <Config_Init+0x66>
	{
        if (f_read(&config_file, &config, sizeof(config), &bytes_read) == FR_OK && bytes_read == sizeof(config))
 8003ed2:	f107 0318 	add.w	r3, r7, #24
 8003ed6:	3b10      	subs	r3, #16
 8003ed8:	f107 0018 	add.w	r0, r7, #24
 8003edc:	380c      	subs	r0, #12
 8003ede:	22f4      	movs	r2, #244	@ 0xf4
 8003ee0:	4954      	ldr	r1, [pc, #336]	@ (8004034 <Config_Init+0x188>)
 8003ee2:	f006 fea7 	bl	800ac34 <f_read>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10c      	bne.n	8003f06 <Config_Init+0x5a>
 8003eec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003ef0:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8003ef4:	2bf4      	cmp	r3, #244	@ 0xf4
 8003ef6:	d106      	bne.n	8003f06 <Config_Init+0x5a>
		{
			f_close(&config_file);
 8003ef8:	f107 0318 	add.w	r3, r7, #24
 8003efc:	3b0c      	subs	r3, #12
 8003efe:	4618      	mov	r0, r3
 8003f00:	f007 f9f4 	bl	800b2ec <f_close>
			return;
 8003f04:	e08f      	b.n	8004026 <Config_Init+0x17a>
        }
        f_close(&config_file);
 8003f06:	f107 0318 	add.w	r3, r7, #24
 8003f0a:	3b0c      	subs	r3, #12
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f007 f9ed 	bl	800b2ec <f_close>
    }

    config.device_id = 1;
 8003f12:	4b48      	ldr	r3, [pc, #288]	@ (8004034 <Config_Init+0x188>)
 8003f14:	2201      	movs	r2, #1
 8003f16:	701a      	strb	r2, [r3, #0]
	config.samp_freq = 800;
 8003f18:	4b46      	ldr	r3, [pc, #280]	@ (8004034 <Config_Init+0x188>)
 8003f1a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003f1e:	805a      	strh	r2, [r3, #2]
	config.buffering_secs = 10;
 8003f20:	4b44      	ldr	r3, [pc, #272]	@ (8004034 <Config_Init+0x188>)
 8003f22:	220a      	movs	r2, #10
 8003f24:	711a      	strb	r2, [r3, #4]
	config.connection_timeout_ms = 60000;
 8003f26:	4b43      	ldr	r3, [pc, #268]	@ (8004034 <Config_Init+0x188>)
 8003f28:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8003f2c:	609a      	str	r2, [r3, #8]
	config.log_period_ms = 10000;
 8003f2e:	4b41      	ldr	r3, [pc, #260]	@ (8004034 <Config_Init+0x188>)
 8003f30:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003f34:	60da      	str	r2, [r3, #12]
	config.hammer_th = 4096;
 8003f36:	4b3f      	ldr	r3, [pc, #252]	@ (8004034 <Config_Init+0x188>)
 8003f38:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003f3c:	821a      	strh	r2, [r3, #16]
    for(int i = 0; i < 24; i++) 
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8003f44:	f102 0214 	add.w	r2, r2, #20
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	e021      	b.n	8003f90 <Config_Init+0xe4>
	{
        config.low_th[i] = 0;
 8003f4c:	4a39      	ldr	r2, [pc, #228]	@ (8004034 <Config_Init+0x188>)
 8003f4e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8003f52:	f103 0314 	add.w	r3, r3, #20
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3308      	adds	r3, #8
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	4413      	add	r3, r2
 8003f5e:	2200      	movs	r2, #0
 8003f60:	805a      	strh	r2, [r3, #2]
        config.high_th[i] = 4096;
 8003f62:	4a34      	ldr	r2, [pc, #208]	@ (8004034 <Config_Init+0x188>)
 8003f64:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8003f68:	f103 0314 	add.w	r3, r3, #20
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3320      	adds	r3, #32
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	4413      	add	r3, r2
 8003f74:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003f78:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < 24; i++) 
 8003f7a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8003f7e:	f103 0314 	add.w	r3, r3, #20
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3301      	adds	r3, #1
 8003f86:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8003f8a:	f102 0214 	add.w	r2, r2, #20
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8003f94:	f103 0314 	add.w	r3, r3, #20
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b17      	cmp	r3, #23
 8003f9c:	ddd6      	ble.n	8003f4c <Config_Init+0xa0>
    }
    strcpy(config.tcp_IPaddress, "esdplab.unipa.it");
 8003f9e:	4a26      	ldr	r2, [pc, #152]	@ (8004038 <Config_Init+0x18c>)
 8003fa0:	4b26      	ldr	r3, [pc, #152]	@ (800403c <Config_Init+0x190>)
 8003fa2:	4615      	mov	r5, r2
 8003fa4:	461c      	mov	r4, r3
 8003fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fa8:	6028      	str	r0, [r5, #0]
 8003faa:	6069      	str	r1, [r5, #4]
 8003fac:	60aa      	str	r2, [r5, #8]
 8003fae:	60eb      	str	r3, [r5, #12]
 8003fb0:	7823      	ldrb	r3, [r4, #0]
 8003fb2:	742b      	strb	r3, [r5, #16]
    strcpy(config.tcp_Port, "21001");
 8003fb4:	4b22      	ldr	r3, [pc, #136]	@ (8004040 <Config_Init+0x194>)
 8003fb6:	4a23      	ldr	r2, [pc, #140]	@ (8004044 <Config_Init+0x198>)
 8003fb8:	6810      	ldr	r0, [r2, #0]
 8003fba:	6018      	str	r0, [r3, #0]
 8003fbc:	8892      	ldrh	r2, [r2, #4]
 8003fbe:	809a      	strh	r2, [r3, #4]

    if (f_open(&config_file, CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8003fc0:	f107 0318 	add.w	r3, r7, #24
 8003fc4:	3b0c      	subs	r3, #12
 8003fc6:	220a      	movs	r2, #10
 8003fc8:	4919      	ldr	r1, [pc, #100]	@ (8004030 <Config_Init+0x184>)
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f006 fc9a 	bl	800a904 <f_open>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d126      	bne.n	8004024 <Config_Init+0x178>
    {
        return;
    }

    if (f_write(&config_file, &config, sizeof(Config_Typedef), &bytes_written) != FR_OK || bytes_written != sizeof(Config_Typedef)) 
 8003fd6:	f107 0318 	add.w	r3, r7, #24
 8003fda:	3b14      	subs	r3, #20
 8003fdc:	f107 0018 	add.w	r0, r7, #24
 8003fe0:	380c      	subs	r0, #12
 8003fe2:	22f4      	movs	r2, #244	@ 0xf4
 8003fe4:	4913      	ldr	r1, [pc, #76]	@ (8004034 <Config_Init+0x188>)
 8003fe6:	f006 ff78 	bl	800aeda <f_write>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d105      	bne.n	8003ffc <Config_Init+0x150>
 8003ff0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003ff4:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8003ff8:	2bf4      	cmp	r3, #244	@ 0xf4
 8003ffa:	d006      	beq.n	800400a <Config_Init+0x15e>
	{
        f_close(&config_file);
 8003ffc:	f107 0318 	add.w	r3, r7, #24
 8004000:	3b0c      	subs	r3, #12
 8004002:	4618      	mov	r0, r3
 8004004:	f007 f972 	bl	800b2ec <f_close>
        return;
 8004008:	e00d      	b.n	8004026 <Config_Init+0x17a>
    }
    
    f_sync(&config_file);
 800400a:	f107 0318 	add.w	r3, r7, #24
 800400e:	3b0c      	subs	r3, #12
 8004010:	4618      	mov	r0, r3
 8004012:	f007 f8eb 	bl	800b1ec <f_sync>
    f_close(&config_file);
 8004016:	f107 0318 	add.w	r3, r7, #24
 800401a:	3b0c      	subs	r3, #12
 800401c:	4618      	mov	r0, r3
 800401e:	f007 f965 	bl	800b2ec <f_close>
 8004022:	e000      	b.n	8004026 <Config_Init+0x17a>
        return;
 8004024:	bf00      	nop
}
 8004026:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bdb0      	pop	{r4, r5, r7, pc}
 8004030:	08018db8 	.word	0x08018db8
 8004034:	20001794 	.word	0x20001794
 8004038:	20001806 	.word	0x20001806
 800403c:	08018dcc 	.word	0x08018dcc
 8004040:	20001846 	.word	0x20001846
 8004044:	08018de0 	.word	0x08018de0

08004048 <LED_Init>:
#include "peripherals.h"


/*-----INIZIALIZZAZIONE LEDs-----*/
void LED_Init(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
    LED_TIMER->Instance->CCR1 = 0;
 800404c:	4b0c      	ldr	r3, [pc, #48]	@ (8004080 <LED_Init+0x38>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2200      	movs	r2, #0
 8004052:	635a      	str	r2, [r3, #52]	@ 0x34
    LED_TIMER->Instance->CCR2 = 0;
 8004054:	4b0a      	ldr	r3, [pc, #40]	@ (8004080 <LED_Init+0x38>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2200      	movs	r2, #0
 800405a:	639a      	str	r2, [r3, #56]	@ 0x38
    LED_TIMER->Instance->CCR3 = 0;
 800405c:	4b08      	ldr	r3, [pc, #32]	@ (8004080 <LED_Init+0x38>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2200      	movs	r2, #0
 8004062:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(LED_TIMER, GRN_LED);
 8004064:	2108      	movs	r1, #8
 8004066:	4806      	ldr	r0, [pc, #24]	@ (8004080 <LED_Init+0x38>)
 8004068:	f00f fd04 	bl	8013a74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(LED_TIMER, ORG_LED);
 800406c:	2100      	movs	r1, #0
 800406e:	4804      	ldr	r0, [pc, #16]	@ (8004080 <LED_Init+0x38>)
 8004070:	f00f fd00 	bl	8013a74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(LED_TIMER, RED_LED);
 8004074:	2104      	movs	r1, #4
 8004076:	4802      	ldr	r0, [pc, #8]	@ (8004080 <LED_Init+0x38>)
 8004078:	f00f fcfc 	bl	8013a74 <HAL_TIM_PWM_Start>
}
 800407c:	bf00      	nop
 800407e:	bd80      	pop	{r7, pc}
 8004080:	20000304 	.word	0x20000304
 8004084:	00000000 	.word	0x00000000

08004088 <LED_Start>:

/*------ACCENSIONE LED------*/
void LED_Start(uint32_t LED, uint8_t freq, uint8_t duty)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	70fb      	strb	r3, [r7, #3]
 8004094:	4613      	mov	r3, r2
 8004096:	70bb      	strb	r3, [r7, #2]
    TIM_HandleTypeDef *htim = LED_TIMER;
 8004098:	4b5d      	ldr	r3, [pc, #372]	@ (8004210 <LED_Start+0x188>)
 800409a:	613b      	str	r3, [r7, #16]
	uint16_t pulse = 0;
 800409c:	2300      	movs	r3, #0
 800409e:	82fb      	strh	r3, [r7, #22]

    uint16_t prescaler = (uint16_t)(80000000 / 5000 - 1);
 80040a0:	f643 637f 	movw	r3, #15999	@ 0x3e7f
 80040a4:	81fb      	strh	r3, [r7, #14]
    uint16_t period = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	82bb      	strh	r3, [r7, #20]

    switch(freq)
 80040aa:	78fb      	ldrb	r3, [r7, #3]
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	f200 80a4 	bhi.w	80041fa <LED_Start+0x172>
 80040b2:	a201      	add	r2, pc, #4	@ (adr r2, 80040b8 <LED_Start+0x30>)
 80040b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b8:	080040c9 	.word	0x080040c9
 80040bc:	080040e1 	.word	0x080040e1
 80040c0:	080040f1 	.word	0x080040f1
 80040c4:	0800412d 	.word	0x0800412d
    {
        case FAST:  
            period = (uint16_t)((80000000 / prescaler / 4) - 1);
 80040c8:	89fb      	ldrh	r3, [r7, #14]
 80040ca:	4a52      	ldr	r2, [pc, #328]	@ (8004214 <LED_Start+0x18c>)
 80040cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	da00      	bge.n	80040d6 <LED_Start+0x4e>
 80040d4:	3303      	adds	r3, #3
 80040d6:	109b      	asrs	r3, r3, #2
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	82bb      	strh	r3, [r7, #20]
            break;
 80040de:	e043      	b.n	8004168 <LED_Start+0xe0>
        case MEDIUM:
            period = (uint16_t)((80000000 / prescaler / 1) - 1);
 80040e0:	89fb      	ldrh	r3, [r7, #14]
 80040e2:	4a4c      	ldr	r2, [pc, #304]	@ (8004214 <LED_Start+0x18c>)
 80040e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	82bb      	strh	r3, [r7, #20]
            break;
 80040ee:	e03b      	b.n	8004168 <LED_Start+0xe0>
        case SLOW:
            period = (uint16_t)((80000000 / prescaler / 0.5) - 1);
 80040f0:	89fb      	ldrh	r3, [r7, #14]
 80040f2:	4a48      	ldr	r2, [pc, #288]	@ (8004214 <LED_Start+0x18c>)
 80040f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fc fa23 	bl	8000544 <__aeabi_i2d>
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	4b45      	ldr	r3, [pc, #276]	@ (8004218 <LED_Start+0x190>)
 8004104:	f7fc fbb2 	bl	800086c <__aeabi_ddiv>
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	4610      	mov	r0, r2
 800410e:	4619      	mov	r1, r3
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	4b41      	ldr	r3, [pc, #260]	@ (800421c <LED_Start+0x194>)
 8004116:	f7fc f8c7 	bl	80002a8 <__aeabi_dsub>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4610      	mov	r0, r2
 8004120:	4619      	mov	r1, r3
 8004122:	f7fc fc8b 	bl	8000a3c <__aeabi_d2uiz>
 8004126:	4603      	mov	r3, r0
 8004128:	82bb      	strh	r3, [r7, #20]
            break;
 800412a:	e01d      	b.n	8004168 <LED_Start+0xe0>
        case VERY_SLOW:
            period = (uint16_t)((80000000 / prescaler / 0.1) - 1);
 800412c:	89fb      	ldrh	r3, [r7, #14]
 800412e:	4a39      	ldr	r2, [pc, #228]	@ (8004214 <LED_Start+0x18c>)
 8004130:	fb92 f3f3 	sdiv	r3, r2, r3
 8004134:	4618      	mov	r0, r3
 8004136:	f7fc fa05 	bl	8000544 <__aeabi_i2d>
 800413a:	a333      	add	r3, pc, #204	@ (adr r3, 8004208 <LED_Start+0x180>)
 800413c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004140:	f7fc fb94 	bl	800086c <__aeabi_ddiv>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4610      	mov	r0, r2
 800414a:	4619      	mov	r1, r3
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	4b32      	ldr	r3, [pc, #200]	@ (800421c <LED_Start+0x194>)
 8004152:	f7fc f8a9 	bl	80002a8 <__aeabi_dsub>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	4610      	mov	r0, r2
 800415c:	4619      	mov	r1, r3
 800415e:	f7fc fc6d 	bl	8000a3c <__aeabi_d2uiz>
 8004162:	4603      	mov	r3, r0
 8004164:	82bb      	strh	r3, [r7, #20]
            break;
 8004166:	bf00      	nop
        default:
            return;
    }

	switch(duty)
 8004168:	78bb      	ldrb	r3, [r7, #2]
 800416a:	3b04      	subs	r3, #4
 800416c:	2b03      	cmp	r3, #3
 800416e:	d846      	bhi.n	80041fe <LED_Start+0x176>
 8004170:	a201      	add	r2, pc, #4	@ (adr r2, 8004178 <LED_Start+0xf0>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	08004189 	.word	0x08004189
 800417c:	0800418f 	.word	0x0800418f
 8004180:	080041a3 	.word	0x080041a3
 8004184:	080041ab 	.word	0x080041ab
	{
		case FULL:
			pulse = period; 
 8004188:	8abb      	ldrh	r3, [r7, #20]
 800418a:	82fb      	strh	r3, [r7, #22]
		    break;
 800418c:	e011      	b.n	80041b2 <LED_Start+0x12a>
        case HIGH:
			pulse = period * 3 / 4;
 800418e:	8aba      	ldrh	r2, [r7, #20]
 8004190:	4613      	mov	r3, r2
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	4413      	add	r3, r2
 8004196:	2b00      	cmp	r3, #0
 8004198:	da00      	bge.n	800419c <LED_Start+0x114>
 800419a:	3303      	adds	r3, #3
 800419c:	109b      	asrs	r3, r3, #2
 800419e:	82fb      	strh	r3, [r7, #22]
			break;
 80041a0:	e007      	b.n	80041b2 <LED_Start+0x12a>
		case HALF:
			pulse = period / 2;
 80041a2:	8abb      	ldrh	r3, [r7, #20]
 80041a4:	085b      	lsrs	r3, r3, #1
 80041a6:	82fb      	strh	r3, [r7, #22]
			break;
 80041a8:	e003      	b.n	80041b2 <LED_Start+0x12a>
		case LOW:
			pulse = period / 4;
 80041aa:	8abb      	ldrh	r3, [r7, #20]
 80041ac:	089b      	lsrs	r3, r3, #2
 80041ae:	82fb      	strh	r3, [r7, #22]
			break;
 80041b0:	bf00      	nop
        default:
            return;
	}

    // Imposta periodo e prescaler
    htim->Instance->PSC = prescaler;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	89fa      	ldrh	r2, [r7, #14]
 80041b8:	629a      	str	r2, [r3, #40]	@ 0x28
    htim->Instance->ARR = period;
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	8aba      	ldrh	r2, [r7, #20]
 80041c0:	62da      	str	r2, [r3, #44]	@ 0x2c
	switch(LED)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d009      	beq.n	80041dc <LED_Start+0x154>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d818      	bhi.n	8004200 <LED_Start+0x178>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d008      	beq.n	80041e6 <LED_Start+0x15e>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d00a      	beq.n	80041f0 <LED_Start+0x168>
 80041da:	e011      	b.n	8004200 <LED_Start+0x178>
    {
    case GRN_LED:
        LED_TIMER->Instance->CCR3 = pulse;
 80041dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004210 <LED_Start+0x188>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	8afa      	ldrh	r2, [r7, #22]
 80041e2:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 80041e4:	e00c      	b.n	8004200 <LED_Start+0x178>
    case ORG_LED:
        LED_TIMER->Instance->CCR1 = pulse;
 80041e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004210 <LED_Start+0x188>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	8afa      	ldrh	r2, [r7, #22]
 80041ec:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 80041ee:	e007      	b.n	8004200 <LED_Start+0x178>
    case RED_LED:
        LED_TIMER->Instance->CCR2 = pulse;
 80041f0:	4b07      	ldr	r3, [pc, #28]	@ (8004210 <LED_Start+0x188>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	8afa      	ldrh	r2, [r7, #22]
 80041f6:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80041f8:	e002      	b.n	8004200 <LED_Start+0x178>
            return;
 80041fa:	bf00      	nop
 80041fc:	e000      	b.n	8004200 <LED_Start+0x178>
            return;
 80041fe:	bf00      	nop
    }
}
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	9999999a 	.word	0x9999999a
 800420c:	3fb99999 	.word	0x3fb99999
 8004210:	20000304 	.word	0x20000304
 8004214:	04c4b400 	.word	0x04c4b400
 8004218:	3fe00000 	.word	0x3fe00000
 800421c:	3ff00000 	.word	0x3ff00000

08004220 <LED_Stop>:

/*------SPEGNIMENTO LED------*/
void LED_Stop(uint32_t LED)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
	switch(LED)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b08      	cmp	r3, #8
 800422c:	d009      	beq.n	8004242 <LED_Stop+0x22>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b08      	cmp	r3, #8
 8004232:	d815      	bhi.n	8004260 <LED_Stop+0x40>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d008      	beq.n	800424c <LED_Stop+0x2c>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b04      	cmp	r3, #4
 800423e:	d00a      	beq.n	8004256 <LED_Stop+0x36>
        break;
    case RED_LED:
        LED_TIMER->Instance->CCR2 = 0;
        break;
    }
}
 8004240:	e00e      	b.n	8004260 <LED_Stop+0x40>
        LED_TIMER->Instance->CCR3 = 0;
 8004242:	4b0a      	ldr	r3, [pc, #40]	@ (800426c <LED_Stop+0x4c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2200      	movs	r2, #0
 8004248:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 800424a:	e009      	b.n	8004260 <LED_Stop+0x40>
        LED_TIMER->Instance->CCR1 = 0;
 800424c:	4b07      	ldr	r3, [pc, #28]	@ (800426c <LED_Stop+0x4c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2200      	movs	r2, #0
 8004252:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8004254:	e004      	b.n	8004260 <LED_Stop+0x40>
        LED_TIMER->Instance->CCR2 = 0;
 8004256:	4b05      	ldr	r3, [pc, #20]	@ (800426c <LED_Stop+0x4c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2200      	movs	r2, #0
 800425c:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 800425e:	bf00      	nop
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	20000304 	.word	0x20000304

08004270 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8004270:	b590      	push	{r4, r7, lr}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	607a      	str	r2, [r7, #4]
 800427a:	461a      	mov	r2, r3
 800427c:	460b      	mov	r3, r1
 800427e:	72fb      	strb	r3, [r7, #11]
 8004280:	4613      	mov	r3, r2
 8004282:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	685c      	ldr	r4, [r3, #4]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	68d8      	ldr	r0, [r3, #12]
 800428c:	893b      	ldrh	r3, [r7, #8]
 800428e:	7af9      	ldrb	r1, [r7, #11]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	47a0      	blx	r4
 8004294:	6178      	str	r0, [r7, #20]

  return ret;
 8004296:	697b      	ldr	r3, [r7, #20]
}
 8004298:	4618      	mov	r0, r3
 800429a:	371c      	adds	r7, #28
 800429c:	46bd      	mov	sp, r7
 800429e:	bd90      	pop	{r4, r7, pc}

080042a0 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 80042a0:	b590      	push	{r4, r7, lr}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	607a      	str	r2, [r7, #4]
 80042aa:	461a      	mov	r2, r3
 80042ac:	460b      	mov	r3, r1
 80042ae:	72fb      	strb	r3, [r7, #11]
 80042b0:	4613      	mov	r3, r2
 80042b2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681c      	ldr	r4, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	68d8      	ldr	r0, [r3, #12]
 80042bc:	893b      	ldrh	r3, [r7, #8]
 80042be:	7af9      	ldrb	r1, [r7, #11]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	47a0      	blx	r4
 80042c4:	6178      	str	r0, [r7, #20]

  return ret;
 80042c6:	697b      	ldr	r3, [r7, #20]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	371c      	adds	r7, #28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd90      	pop	{r4, r7, pc}

080042d0 <bytecpy>:
  * @{
  *
  */

static void bytecpy(uint8_t *target, uint8_t *source)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  if ((target != NULL) && (source != NULL))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d006      	beq.n	80042ee <bytecpy+0x1e>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <bytecpy+0x1e>
  {
    *target = *source;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	781a      	ldrb	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	701a      	strb	r2, [r3, #0]
  }
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <lsm6dsv16x_reset_set>:
  * @param  val      Reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_set(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t val)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b086      	sub	sp, #24
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	460b      	mov	r3, r1
 8004304:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8004306:	f107 020c 	add.w	r2, r7, #12
 800430a:	2301      	movs	r3, #1
 800430c:	2112      	movs	r1, #18
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff ffae 	bl	8004270 <lsm6dsv16x_read_reg>
 8004314:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8004316:	f107 0210 	add.w	r2, r7, #16
 800431a:	2301      	movs	r3, #1
 800431c:	2101      	movs	r1, #1
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7ff ffa6 	bl	8004270 <lsm6dsv16x_read_reg>
 8004324:	4602      	mov	r2, r0
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	4413      	add	r3, r2
 800432a:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <lsm6dsv16x_reset_set+0x3c>
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	e02d      	b.n	8004392 <lsm6dsv16x_reset_set+0x98>

  ctrl3.boot = ((uint8_t)val & 0x04U) >> 2;
 8004336:	78fb      	ldrb	r3, [r7, #3]
 8004338:	089b      	lsrs	r3, r3, #2
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	b2da      	uxtb	r2, r3
 8004340:	7b3b      	ldrb	r3, [r7, #12]
 8004342:	f362 13c7 	bfi	r3, r2, #7, #1
 8004346:	733b      	strb	r3, [r7, #12]
  ctrl3.sw_reset = ((uint8_t)val & 0x02U) >> 1;
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	085b      	lsrs	r3, r3, #1
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	b2da      	uxtb	r2, r3
 8004352:	7b3b      	ldrb	r3, [r7, #12]
 8004354:	f362 0300 	bfi	r3, r2, #0, #1
 8004358:	733b      	strb	r3, [r7, #12]
  func_cfg_access.sw_por = (uint8_t)val & 0x01U;
 800435a:	78fb      	ldrb	r3, [r7, #3]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	b2da      	uxtb	r2, r3
 8004362:	7c3b      	ldrb	r3, [r7, #16]
 8004364:	f362 0382 	bfi	r3, r2, #2, #1
 8004368:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800436a:	f107 020c 	add.w	r2, r7, #12
 800436e:	2301      	movs	r3, #1
 8004370:	2112      	movs	r1, #18
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff ff94 	bl	80042a0 <lsm6dsv16x_write_reg>
 8004378:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 800437a:	f107 0210 	add.w	r2, r7, #16
 800437e:	2301      	movs	r3, #1
 8004380:	2101      	movs	r1, #1
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7ff ff8c 	bl	80042a0 <lsm6dsv16x_write_reg>
 8004388:	4602      	mov	r2, r0
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	4413      	add	r3, r2
 800438e:	617b      	str	r3, [r7, #20]

  return ret;
 8004390:	697b      	ldr	r3, [r7, #20]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <lsm6dsv16x_reset_get>:
  * @param  val      Global reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_get(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t *val)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80043a6:	f107 020c 	add.w	r2, r7, #12
 80043aa:	2301      	movs	r3, #1
 80043ac:	2112      	movs	r1, #18
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7ff ff5e 	bl	8004270 <lsm6dsv16x_read_reg>
 80043b4:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80043b6:	f107 0210 	add.w	r2, r7, #16
 80043ba:	2301      	movs	r3, #1
 80043bc:	2101      	movs	r1, #1
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7ff ff56 	bl	8004270 <lsm6dsv16x_read_reg>
 80043c4:	4602      	mov	r2, r0
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	4413      	add	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <lsm6dsv16x_reset_get+0x3a>
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	e033      	b.n	800443e <lsm6dsv16x_reset_get+0xa2>

  switch ((ctrl3.sw_reset << 2) + (ctrl3.boot << 1) + func_cfg_access.sw_por)
 80043d6:	7b3b      	ldrb	r3, [r7, #12]
 80043d8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	009a      	lsls	r2, r3, #2
 80043e0:	7b3b      	ldrb	r3, [r7, #12]
 80043e2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	4413      	add	r3, r2
 80043ec:	7c3a      	ldrb	r2, [r7, #16]
 80043ee:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	4413      	add	r3, r2
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d81c      	bhi.n	8004434 <lsm6dsv16x_reset_get+0x98>
 80043fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004400 <lsm6dsv16x_reset_get+0x64>)
 80043fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004400:	08004415 	.word	0x08004415
 8004404:	0800441d 	.word	0x0800441d
 8004408:	08004425 	.word	0x08004425
 800440c:	08004435 	.word	0x08004435
 8004410:	0800442d 	.word	0x0800442d
  {
    case LSM6DSV16X_READY:
      *val = LSM6DSV16X_READY;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2200      	movs	r2, #0
 8004418:	701a      	strb	r2, [r3, #0]
      break;
 800441a:	e00f      	b.n	800443c <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_GLOBAL_RST:
      *val = LSM6DSV16X_GLOBAL_RST;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	2201      	movs	r2, #1
 8004420:	701a      	strb	r2, [r3, #0]
      break;
 8004422:	e00b      	b.n	800443c <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CAL_PARAM:
      *val = LSM6DSV16X_RESTORE_CAL_PARAM;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	2202      	movs	r2, #2
 8004428:	701a      	strb	r2, [r3, #0]
      break;
 800442a:	e007      	b.n	800443c <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CTRL_REGS:
      *val = LSM6DSV16X_RESTORE_CTRL_REGS;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	2204      	movs	r2, #4
 8004430:	701a      	strb	r2, [r3, #0]
      break;
 8004432:	e003      	b.n	800443c <lsm6dsv16x_reset_get+0xa0>

    default:
      *val = LSM6DSV16X_GLOBAL_RST;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2201      	movs	r2, #1
 8004438:	701a      	strb	r2, [r3, #0]
      break;
 800443a:	bf00      	nop
  }

  return ret;
 800443c:	697b      	ldr	r3, [r7, #20]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop

08004448 <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 8004452:	2301      	movs	r3, #1
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	210f      	movs	r1, #15
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7ff ff09 	bl	8004270 <lsm6dsv16x_read_reg>
 800445e:	60f8      	str	r0, [r7, #12]

  return ret;
 8004460:	68fb      	ldr	r3, [r7, #12]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b086      	sub	sp, #24
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
 8004472:	460b      	mov	r3, r1
 8004474:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8004476:	f107 0210 	add.w	r2, r7, #16
 800447a:	2301      	movs	r3, #1
 800447c:	2110      	movs	r1, #16
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7ff fef6 	bl	8004270 <lsm6dsv16x_read_reg>
 8004484:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <lsm6dsv16x_xl_data_rate_set+0x26>
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	e039      	b.n	8004504 <lsm6dsv16x_xl_data_rate_set+0x9a>

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 8004490:	78fb      	ldrb	r3, [r7, #3]
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	b2da      	uxtb	r2, r3
 8004498:	7c3b      	ldrb	r3, [r7, #16]
 800449a:	f362 0303 	bfi	r3, r2, #0, #4
 800449e:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80044a0:	f107 0210 	add.w	r2, r7, #16
 80044a4:	2301      	movs	r3, #1
 80044a6:	2110      	movs	r1, #16
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff fef9 	bl	80042a0 <lsm6dsv16x_write_reg>
 80044ae:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <lsm6dsv16x_xl_data_rate_set+0x50>
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	e024      	b.n	8004504 <lsm6dsv16x_xl_data_rate_set+0x9a>

  sel = ((uint8_t)val >> 4) & 0xFU;
 80044ba:	78fb      	ldrb	r3, [r7, #3]
 80044bc:	091b      	lsrs	r3, r3, #4
 80044be:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 80044c0:	7cfb      	ldrb	r3, [r7, #19]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d01d      	beq.n	8004502 <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80044c6:	f107 020c 	add.w	r2, r7, #12
 80044ca:	2301      	movs	r3, #1
 80044cc:	2162      	movs	r1, #98	@ 0x62
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff fece 	bl	8004270 <lsm6dsv16x_read_reg>
 80044d4:	4602      	mov	r2, r0
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	4413      	add	r3, r2
 80044da:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 80044dc:	7cfb      	ldrb	r3, [r7, #19]
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	7b3b      	ldrb	r3, [r7, #12]
 80044e6:	f362 0301 	bfi	r3, r2, #0, #2
 80044ea:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80044ec:	f107 020c 	add.w	r2, r7, #12
 80044f0:	2301      	movs	r3, #1
 80044f2:	2162      	movs	r1, #98	@ 0x62
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff fed3 	bl	80042a0 <lsm6dsv16x_write_reg>
 80044fa:	4602      	mov	r2, r0
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	4413      	add	r3, r2
 8004500:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004502:	697b      	ldr	r3, [r7, #20]
}
 8004504:	4618      	mov	r0, r3
 8004506:	3718      	adds	r7, #24
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <lsm6dsv16x_xl_mode_set>:
  * @param  val      XL_HIGH_PERFORMANCE_MD, XL_HIGH_ACCURACY_ODR_MD, XL_LOW_POWER_2_AVG_MD, XL_LOW_POWER_4_AVG_MD, XL_LOW_POWER_8_AVG_MD, XL_NORMAL_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_xl_mode_t val)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8004518:	f107 0208 	add.w	r2, r7, #8
 800451c:	2301      	movs	r3, #1
 800451e:	2110      	movs	r1, #16
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff fea5 	bl	8004270 <lsm6dsv16x_read_reg>
 8004526:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10f      	bne.n	800454e <lsm6dsv16x_xl_mode_set+0x42>
  {
    ctrl1.op_mode_xl = (uint8_t)val & 0x07U;
 800452e:	78fb      	ldrb	r3, [r7, #3]
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	b2da      	uxtb	r2, r3
 8004536:	7a3b      	ldrb	r3, [r7, #8]
 8004538:	f362 1306 	bfi	r3, r2, #4, #3
 800453c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 800453e:	f107 0208 	add.w	r2, r7, #8
 8004542:	2301      	movs	r3, #1
 8004544:	2110      	movs	r1, #16
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7ff feaa 	bl	80042a0 <lsm6dsv16x_write_reg>
 800454c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800454e:	68fb      	ldr	r3, [r7, #12]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8004564:	f107 0210 	add.w	r2, r7, #16
 8004568:	2301      	movs	r3, #1
 800456a:	2111      	movs	r1, #17
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff fe7f 	bl	8004270 <lsm6dsv16x_read_reg>
 8004572:	6178      	str	r0, [r7, #20]
  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8004574:	78fb      	ldrb	r3, [r7, #3]
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	b2da      	uxtb	r2, r3
 800457c:	7c3b      	ldrb	r3, [r7, #16]
 800457e:	f362 0303 	bfi	r3, r2, #0, #4
 8004582:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8004584:	f107 0210 	add.w	r2, r7, #16
 8004588:	2301      	movs	r3, #1
 800458a:	2111      	movs	r1, #17
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7ff fe87 	bl	80042a0 <lsm6dsv16x_write_reg>
 8004592:	4602      	mov	r2, r0
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	4413      	add	r3, r2
 8004598:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <lsm6dsv16x_gy_data_rate_set+0x4c>
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	e024      	b.n	80045ee <lsm6dsv16x_gy_data_rate_set+0x96>

  sel = ((uint8_t)val >> 4) & 0xFU;
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	091b      	lsrs	r3, r3, #4
 80045a8:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 80045aa:	7cfb      	ldrb	r3, [r7, #19]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01d      	beq.n	80045ec <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80045b0:	f107 020c 	add.w	r2, r7, #12
 80045b4:	2301      	movs	r3, #1
 80045b6:	2162      	movs	r1, #98	@ 0x62
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff fe59 	bl	8004270 <lsm6dsv16x_read_reg>
 80045be:	4602      	mov	r2, r0
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	4413      	add	r3, r2
 80045c4:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 80045c6:	7cfb      	ldrb	r3, [r7, #19]
 80045c8:	f003 0303 	and.w	r3, r3, #3
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	7b3b      	ldrb	r3, [r7, #12]
 80045d0:	f362 0301 	bfi	r3, r2, #0, #2
 80045d4:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80045d6:	f107 020c 	add.w	r2, r7, #12
 80045da:	2301      	movs	r3, #1
 80045dc:	2162      	movs	r1, #98	@ 0x62
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff fe5e 	bl	80042a0 <lsm6dsv16x_write_reg>
 80045e4:	4602      	mov	r2, r0
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	4413      	add	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80045ec:	697b      	ldr	r3, [r7, #20]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <lsm6dsv16x_gy_mode_set>:
  * @param  val      GY_HIGH_PERFORMANCE_MD, GY_HIGH_ACCURACY_ODR_MD, GY_SLEEP_MD, GY_LOW_POWER_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_gy_mode_t val)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b084      	sub	sp, #16
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	460b      	mov	r3, r1
 8004600:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8004602:	f107 0208 	add.w	r2, r7, #8
 8004606:	2301      	movs	r3, #1
 8004608:	2111      	movs	r1, #17
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff fe30 	bl	8004270 <lsm6dsv16x_read_reg>
 8004610:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10f      	bne.n	8004638 <lsm6dsv16x_gy_mode_set+0x42>
  {
    ctrl2.op_mode_g = (uint8_t)val & 0x07U;
 8004618:	78fb      	ldrb	r3, [r7, #3]
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	b2da      	uxtb	r2, r3
 8004620:	7a3b      	ldrb	r3, [r7, #8]
 8004622:	f362 1306 	bfi	r3, r2, #4, #3
 8004626:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8004628:	f107 0208 	add.w	r2, r7, #8
 800462c:	2301      	movs	r3, #1
 800462e:	2111      	movs	r1, #17
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff fe35 	bl	80042a0 <lsm6dsv16x_write_reg>
 8004636:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004638:	68fb      	ldr	r3, [r7, #12]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b084      	sub	sp, #16
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	460b      	mov	r3, r1
 800464c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800464e:	f107 0208 	add.w	r2, r7, #8
 8004652:	2301      	movs	r3, #1
 8004654:	2112      	movs	r1, #18
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7ff fe0a 	bl	8004270 <lsm6dsv16x_read_reg>
 800465c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10f      	bne.n	8004684 <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8004664:	78fb      	ldrb	r3, [r7, #3]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	b2da      	uxtb	r2, r3
 800466c:	7a3b      	ldrb	r3, [r7, #8]
 800466e:	f362 1386 	bfi	r3, r2, #6, #1
 8004672:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8004674:	f107 0208 	add.w	r2, r7, #8
 8004678:	2301      	movs	r3, #1
 800467a:	2112      	movs	r1, #18
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7ff fe0f 	bl	80042a0 <lsm6dsv16x_write_reg>
 8004682:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004684:	68fb      	ldr	r3, [r7, #12]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <lsm6dsv16x_odr_trig_cfg_set>:
  * @param  val      number of data in the reference period.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_odr_trig_cfg_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b084      	sub	sp, #16
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	460b      	mov	r3, r1
 8004698:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_odr_trig_cfg_t odr_trig;
  int32_t ret;

  if (val >= 1U && val <= 3U) {
 800469a:	78fb      	ldrb	r3, [r7, #3]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d005      	beq.n	80046ac <lsm6dsv16x_odr_trig_cfg_set+0x1e>
 80046a0:	78fb      	ldrb	r3, [r7, #3]
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	d802      	bhi.n	80046ac <lsm6dsv16x_odr_trig_cfg_set+0x1e>
    return -1;
 80046a6:	f04f 33ff 	mov.w	r3, #4294967295
 80046aa:	e015      	b.n	80046d8 <lsm6dsv16x_odr_trig_cfg_set+0x4a>
  }

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 80046ac:	f107 0208 	add.w	r2, r7, #8
 80046b0:	2301      	movs	r3, #1
 80046b2:	2106      	movs	r1, #6
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff fddb 	bl	8004270 <lsm6dsv16x_read_reg>
 80046ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d109      	bne.n	80046d6 <lsm6dsv16x_odr_trig_cfg_set+0x48>
  {
    odr_trig.odr_trig_nodr = val;
 80046c2:	78fb      	ldrb	r3, [r7, #3]
 80046c4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 80046c6:	f107 0208 	add.w	r2, r7, #8
 80046ca:	2301      	movs	r3, #1
 80046cc:	2106      	movs	r1, #6
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff fde6 	bl	80042a0 <lsm6dsv16x_write_reg>
 80046d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80046d6:	68fb      	ldr	r3, [r7, #12]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	460b      	mov	r3, r1
 80046ea:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 80046ec:	f107 0208 	add.w	r2, r7, #8
 80046f0:	2301      	movs	r3, #1
 80046f2:	2115      	movs	r1, #21
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7ff fdbb 	bl	8004270 <lsm6dsv16x_read_reg>
 80046fa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10f      	bne.n	8004722 <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 8004702:	78fb      	ldrb	r3, [r7, #3]
 8004704:	f003 030f 	and.w	r3, r3, #15
 8004708:	b2da      	uxtb	r2, r3
 800470a:	7a3b      	ldrb	r3, [r7, #8]
 800470c:	f362 0303 	bfi	r3, r2, #0, #4
 8004710:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8004712:	f107 0208 	add.w	r2, r7, #8
 8004716:	2301      	movs	r3, #1
 8004718:	2115      	movs	r1, #21
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7ff fdc0 	bl	80042a0 <lsm6dsv16x_write_reg>
 8004720:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004722:	68fb      	ldr	r3, [r7, #12]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8004738:	f107 0208 	add.w	r2, r7, #8
 800473c:	2301      	movs	r3, #1
 800473e:	2117      	movs	r1, #23
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff fd95 	bl	8004270 <lsm6dsv16x_read_reg>
 8004746:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10f      	bne.n	800476e <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	f003 0303 	and.w	r3, r3, #3
 8004754:	b2da      	uxtb	r2, r3
 8004756:	7a3b      	ldrb	r3, [r7, #8]
 8004758:	f362 0301 	bfi	r3, r2, #0, #2
 800475c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 800475e:	f107 0208 	add.w	r2, r7, #8
 8004762:	2301      	movs	r3, #1
 8004764:	2117      	movs	r1, #23
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7ff fd9a 	bl	80042a0 <lsm6dsv16x_write_reg>
 800476c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800476e:	68fb      	ldr	r3, [r7, #12]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <lsm6dsv16x_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsv16x_pin_int1_route_set(stmdev_ctx_t *ctx,
                                      lsm6dsv16x_pin_int_route_t *val)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_int1_ctrl_t          int1_ctrl;
  lsm6dsv16x_md1_cfg_t            md1_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8004782:	f107 0210 	add.w	r2, r7, #16
 8004786:	2301      	movs	r3, #1
 8004788:	210d      	movs	r1, #13
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff fd70 	bl	8004270 <lsm6dsv16x_read_reg>
 8004790:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <lsm6dsv16x_pin_int1_route_set+0x24>
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	e0a0      	b.n	80048de <lsm6dsv16x_pin_int1_route_set+0x166>

  int1_ctrl.int1_drdy_xl       = val->drdy_xl;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	7c3b      	ldrb	r3, [r7, #16]
 80047a8:	f362 0300 	bfi	r3, r2, #0, #1
 80047ac:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_drdy_g        = val->drdy_g;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	7c3b      	ldrb	r3, [r7, #16]
 80047ba:	f362 0341 	bfi	r3, r2, #1, #1
 80047be:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_th       = val->fifo_th;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	7c3b      	ldrb	r3, [r7, #16]
 80047cc:	f362 03c3 	bfi	r3, r2, #3, #1
 80047d0:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_ovr      = val->fifo_ovr;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	7c3b      	ldrb	r3, [r7, #16]
 80047de:	f362 1304 	bfi	r3, r2, #4, #1
 80047e2:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_full     = val->fifo_full;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	7c3b      	ldrb	r3, [r7, #16]
 80047f0:	f362 1345 	bfi	r3, r2, #5, #1
 80047f4:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_cnt_bdr       = val->cnt_bdr;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	7c3b      	ldrb	r3, [r7, #16]
 8004802:	f362 1386 	bfi	r3, r2, #6, #1
 8004806:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8004808:	f107 0210 	add.w	r2, r7, #16
 800480c:	2301      	movs	r3, #1
 800480e:	210d      	movs	r1, #13
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7ff fd45 	bl	80042a0 <lsm6dsv16x_write_reg>
 8004816:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <lsm6dsv16x_pin_int1_route_set+0xaa>
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	e05d      	b.n	80048de <lsm6dsv16x_pin_int1_route_set+0x166>

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8004822:	f107 020c 	add.w	r2, r7, #12
 8004826:	2301      	movs	r3, #1
 8004828:	215e      	movs	r1, #94	@ 0x5e
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7ff fd20 	bl	8004270 <lsm6dsv16x_read_reg>
 8004830:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <lsm6dsv16x_pin_int1_route_set+0xc4>
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	e050      	b.n	80048de <lsm6dsv16x_pin_int1_route_set+0x166>

  md1_cfg.int1_shub            = val->shub;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	785b      	ldrb	r3, [r3, #1]
 8004840:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004844:	b2da      	uxtb	r2, r3
 8004846:	7b3b      	ldrb	r3, [r7, #12]
 8004848:	f362 0300 	bfi	r3, r2, #0, #1
 800484c:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_emb_func        = val->emb_func;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	785b      	ldrb	r3, [r3, #1]
 8004852:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004856:	b2da      	uxtb	r2, r3
 8004858:	7b3b      	ldrb	r3, [r7, #12]
 800485a:	f362 0341 	bfi	r3, r2, #1, #1
 800485e:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_6d              = val->sixd;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	785b      	ldrb	r3, [r3, #1]
 8004864:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004868:	b2da      	uxtb	r2, r3
 800486a:	7b3b      	ldrb	r3, [r7, #12]
 800486c:	f362 0382 	bfi	r3, r2, #2, #1
 8004870:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_single_tap      = val->single_tap;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	785b      	ldrb	r3, [r3, #1]
 8004876:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800487a:	b2da      	uxtb	r2, r3
 800487c:	7b3b      	ldrb	r3, [r7, #12]
 800487e:	f362 1386 	bfi	r3, r2, #6, #1
 8004882:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_double_tap      = val->double_tap;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	785b      	ldrb	r3, [r3, #1]
 8004888:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800488c:	b2da      	uxtb	r2, r3
 800488e:	7b3b      	ldrb	r3, [r7, #12]
 8004890:	f362 03c3 	bfi	r3, r2, #3, #1
 8004894:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_wu              = val->wakeup;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	785b      	ldrb	r3, [r3, #1]
 800489a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	7b3b      	ldrb	r3, [r7, #12]
 80048a2:	f362 1345 	bfi	r3, r2, #5, #1
 80048a6:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_ff              = val->freefall;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	785b      	ldrb	r3, [r3, #1]
 80048ac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	7b3b      	ldrb	r3, [r7, #12]
 80048b4:	f362 1304 	bfi	r3, r2, #4, #1
 80048b8:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_sleep_change    = val->sleep_change;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	789b      	ldrb	r3, [r3, #2]
 80048be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	7b3b      	ldrb	r3, [r7, #12]
 80048c6:	f362 13c7 	bfi	r3, r2, #7, #1
 80048ca:	733b      	strb	r3, [r7, #12]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80048cc:	f107 020c 	add.w	r2, r7, #12
 80048d0:	2301      	movs	r3, #1
 80048d2:	215e      	movs	r1, #94	@ 0x5e
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff fce3 	bl	80042a0 <lsm6dsv16x_write_reg>
 80048da:	6178      	str	r0, [r7, #20]

  return ret;
 80048dc:	697b      	ldr	r3, [r7, #20]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <lsm6dsv16x_den_polarity_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_den_polarity_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_den_polarity_t val)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b084      	sub	sp, #16
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	460b      	mov	r3, r1
 80048f0:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl4_t ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 80048f2:	f107 0208 	add.w	r2, r7, #8
 80048f6:	2301      	movs	r3, #1
 80048f8:	2113      	movs	r1, #19
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff fcb8 	bl	8004270 <lsm6dsv16x_read_reg>
 8004900:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10f      	bne.n	8004928 <lsm6dsv16x_den_polarity_set+0x42>
  {
    ctrl4.int2_in_lh = (uint8_t)val & 0x1U;
 8004908:	78fb      	ldrb	r3, [r7, #3]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	b2da      	uxtb	r2, r3
 8004910:	7a3b      	ldrb	r3, [r7, #8]
 8004912:	f362 0300 	bfi	r3, r2, #0, #1
 8004916:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 8004918:	f107 0208 	add.w	r2, r7, #8
 800491c:	2301      	movs	r3, #1
 800491e:	2113      	movs	r1, #19
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff fcbd 	bl	80042a0 <lsm6dsv16x_write_reg>
 8004926:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004928:	68fb      	ldr	r3, [r7, #12]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <lsm6dsv16x_fifo_watermark_set>:
  * @param  val      FIFO watermark threshold (1 LSb = TAG (1 Byte) + 1 sensor (6 Bytes) written in FIFO).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_watermark_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b084      	sub	sp, #16
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
 800493a:	460b      	mov	r3, r1
 800493c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl1_t fifo_ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 800493e:	f107 0208 	add.w	r2, r7, #8
 8004942:	2301      	movs	r3, #1
 8004944:	2107      	movs	r1, #7
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7ff fc92 	bl	8004270 <lsm6dsv16x_read_reg>
 800494c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d109      	bne.n	8004968 <lsm6dsv16x_fifo_watermark_set+0x36>
  {
    fifo_ctrl1.wtm = val;
 8004954:	78fb      	ldrb	r3, [r7, #3]
 8004956:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8004958:	f107 0208 	add.w	r2, r7, #8
 800495c:	2301      	movs	r3, #1
 800495e:	2107      	movs	r1, #7
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7ff fc9d 	bl	80042a0 <lsm6dsv16x_write_reg>
 8004966:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004968:	68fb      	ldr	r3, [r7, #12]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <lsm6dsv16x_fifo_xl_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_xl_batch_t val)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b084      	sub	sp, #16
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	460b      	mov	r3, r1
 800497c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 800497e:	f107 0208 	add.w	r2, r7, #8
 8004982:	2301      	movs	r3, #1
 8004984:	2109      	movs	r1, #9
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff fc72 	bl	8004270 <lsm6dsv16x_read_reg>
 800498c:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10f      	bne.n	80049b4 <lsm6dsv16x_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val & 0xFu;
 8004994:	78fb      	ldrb	r3, [r7, #3]
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	b2da      	uxtb	r2, r3
 800499c:	7a3b      	ldrb	r3, [r7, #8]
 800499e:	f362 0303 	bfi	r3, r2, #0, #4
 80049a2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 80049a4:	f107 0208 	add.w	r2, r7, #8
 80049a8:	2301      	movs	r3, #1
 80049aa:	2109      	movs	r1, #9
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7ff fc77 	bl	80042a0 <lsm6dsv16x_write_reg>
 80049b2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80049b4:	68fb      	ldr	r3, [r7, #12]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <lsm6dsv16x_fifo_gy_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_gy_batch_t val)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b084      	sub	sp, #16
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	460b      	mov	r3, r1
 80049c8:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 80049ca:	f107 0208 	add.w	r2, r7, #8
 80049ce:	2301      	movs	r3, #1
 80049d0:	2109      	movs	r1, #9
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7ff fc4c 	bl	8004270 <lsm6dsv16x_read_reg>
 80049d8:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10f      	bne.n	8004a00 <lsm6dsv16x_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val & 0x0Fu;
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	7a3b      	ldrb	r3, [r7, #8]
 80049ea:	f362 1307 	bfi	r3, r2, #4, #4
 80049ee:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 80049f0:	f107 0208 	add.w	r2, r7, #8
 80049f4:	2301      	movs	r3, #1
 80049f6:	2109      	movs	r1, #9
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7ff fc51 	bl	80042a0 <lsm6dsv16x_write_reg>
 80049fe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004a00:	68fb      	ldr	r3, [r7, #12]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	460b      	mov	r3, r1
 8004a14:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8004a16:	f107 0208 	add.w	r2, r7, #8
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	210a      	movs	r1, #10
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7ff fc26 	bl	8004270 <lsm6dsv16x_read_reg>
 8004a24:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10f      	bne.n	8004a4c <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 8004a2c:	78fb      	ldrb	r3, [r7, #3]
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	7a3b      	ldrb	r3, [r7, #8]
 8004a36:	f362 0302 	bfi	r3, r2, #0, #3
 8004a3a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8004a3c:	f107 0208 	add.w	r2, r7, #8
 8004a40:	2301      	movs	r3, #1
 8004a42:	210a      	movs	r1, #10
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7ff fc2b 	bl	80042a0 <lsm6dsv16x_write_reg>
 8004a4a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <lsm6dsv16x_fifo_status_get>:
  return ret;
}

int32_t lsm6dsv16x_fifo_status_get(stmdev_ctx_t *ctx,
                                   lsm6dsv16x_fifo_status_t *val)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b086      	sub	sp, #24
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  lsm6dsv16x_fifo_status2_t status;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_STATUS1, (uint8_t *)&buff[0], 2);
 8004a60:	f107 0210 	add.w	r2, r7, #16
 8004a64:	2302      	movs	r3, #2
 8004a66:	211b      	movs	r1, #27
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7ff fc01 	bl	8004270 <lsm6dsv16x_read_reg>
 8004a6e:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <lsm6dsv16x_fifo_status_get+0x24>
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	e04b      	b.n	8004b12 <lsm6dsv16x_fifo_status_get+0xbc>

  bytecpy((uint8_t *)&status, &buff[1]);
 8004a7a:	f107 0310 	add.w	r3, r7, #16
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	f107 030c 	add.w	r3, r7, #12
 8004a84:	4611      	mov	r1, r2
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7ff fc22 	bl	80042d0 <bytecpy>

  val->fifo_bdr = status.counter_bdr_ia;
 8004a8c:	7b3b      	ldrb	r3, [r7, #12]
 8004a8e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004a92:	b2d9      	uxtb	r1, r3
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	7853      	ldrb	r3, [r2, #1]
 8004a98:	f361 0341 	bfi	r3, r1, #1, #1
 8004a9c:	7053      	strb	r3, [r2, #1]
  val->fifo_ovr = status.fifo_ovr_ia;
 8004a9e:	7b3b      	ldrb	r3, [r7, #12]
 8004aa0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004aa4:	b2d9      	uxtb	r1, r3
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	7853      	ldrb	r3, [r2, #1]
 8004aaa:	f361 03c3 	bfi	r3, r1, #3, #1
 8004aae:	7053      	strb	r3, [r2, #1]
  val->fifo_full = status.fifo_full_ia;
 8004ab0:	7b3b      	ldrb	r3, [r7, #12]
 8004ab2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004ab6:	b2d9      	uxtb	r1, r3
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	7853      	ldrb	r3, [r2, #1]
 8004abc:	f361 0382 	bfi	r3, r1, #2, #1
 8004ac0:	7053      	strb	r3, [r2, #1]
  val->fifo_th = status.fifo_wtm_ia;
 8004ac2:	7b3b      	ldrb	r3, [r7, #12]
 8004ac4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004ac8:	b2d9      	uxtb	r1, r3
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	7853      	ldrb	r3, [r2, #1]
 8004ace:	f361 1304 	bfi	r3, r1, #4, #1
 8004ad2:	7053      	strb	r3, [r2, #1]

  val->fifo_level = (uint16_t)buff[1] & 0x01U;
 8004ad4:	7c7b      	ldrb	r3, [r7, #17]
 8004ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	b299      	uxth	r1, r3
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	8813      	ldrh	r3, [r2, #0]
 8004ae6:	f361 0308 	bfi	r3, r1, #0, #9
 8004aea:	8013      	strh	r3, [r2, #0]
  val->fifo_level = (val->fifo_level * 256U) + buff[0];
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	021b      	lsls	r3, r3, #8
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	7c3a      	ldrb	r2, [r7, #16]
 8004afc:	4413      	add	r3, r2
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b04:	b299      	uxth	r1, r3
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	8813      	ldrh	r3, [r2, #0]
 8004b0a:	f361 0308 	bfi	r3, r1, #0, #9
 8004b0e:	8013      	strh	r3, [r2, #0]

  return ret;
 8004b10:	697b      	ldr	r3, [r7, #20]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <lsm6dsv16x_ui_i2c_i3c_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ui_i2c_i3c_mode_set(stmdev_ctx_t *ctx,
                                       lsm6dsv16x_ui_i2c_i3c_mode_t val)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b084      	sub	sp, #16
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	460b      	mov	r3, r1
 8004b24:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_if_cfg_t if_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 8004b26:	f107 0208 	add.w	r2, r7, #8
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	2103      	movs	r1, #3
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7ff fb9e 	bl	8004270 <lsm6dsv16x_read_reg>
 8004b34:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10f      	bne.n	8004b5c <lsm6dsv16x_ui_i2c_i3c_mode_set+0x42>
  {
    if_cfg.i2c_i3c_disable = (uint8_t)val & 0x1U;
 8004b3c:	78fb      	ldrb	r3, [r7, #3]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	7a3b      	ldrb	r3, [r7, #8]
 8004b46:	f362 0300 	bfi	r3, r2, #0, #1
 8004b4a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 8004b4c:	f107 0208 	add.w	r2, r7, #8
 8004b50:	2301      	movs	r3, #1
 8004b52:	2103      	movs	r1, #3
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7ff fba3 	bl	80042a0 <lsm6dsv16x_write_reg>
 8004b5a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <acc_write>:
#include "global_variables.h"
#include "peripherals.h"

/* -------------SCRITTURA ACCELEROMETRO-------------*/
int32_t acc_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	461a      	mov	r2, r3
 8004b72:	460b      	mov	r3, r1
 8004b74:	72fb      	strb	r3, [r7, #11]
 8004b76:	4613      	mov	r3, r2
 8004b78:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b84:	f00a fcac 	bl	800f4e0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8004b88:	f107 010b 	add.w	r1, r7, #11
 8004b8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b90:	2201      	movs	r2, #1
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f00d ff45 	bl	8012a22 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 8004b98:	893a      	ldrh	r2, [r7, #8]
 8004b9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f00d ff3e 	bl	8012a22 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004bac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004bb0:	f00a fc96 	bl	800f4e0 <HAL_GPIO_WritePin>
	return 0;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <acc_read>:

/* -------------LETTURA ACCELEROMETRO-------------*/
int32_t acc_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b084      	sub	sp, #16
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	460b      	mov	r3, r1
 8004bcc:	72fb      	strb	r3, [r7, #11]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	813b      	strh	r3, [r7, #8]
	reg |= 0x80;
 8004bd2:	7afb      	ldrb	r3, [r7, #11]
 8004bd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004be2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004be6:	f00a fc7b 	bl	800f4e0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8004bea:	f107 010b 	add.w	r1, r7, #11
 8004bee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f00d ff14 	bl	8012a22 <HAL_SPI_Transmit>
	HAL_SPI_Receive(handle, bufp, len, 1000);
 8004bfa:	893a      	ldrh	r2, [r7, #8]
 8004bfc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f00e f883 	bl	8012d0e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c12:	f00a fc65 	bl	800f4e0 <HAL_GPIO_WritePin>
	return 0;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004c24:	f3bf 8f4f 	dsb	sy
}
 8004c28:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004c2a:	4b06      	ldr	r3, [pc, #24]	@ (8004c44 <__NVIC_SystemReset+0x24>)
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004c32:	4904      	ldr	r1, [pc, #16]	@ (8004c44 <__NVIC_SystemReset+0x24>)
 8004c34:	4b04      	ldr	r3, [pc, #16]	@ (8004c48 <__NVIC_SystemReset+0x28>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c3a:	f3bf 8f4f 	dsb	sy
}
 8004c3e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004c40:	bf00      	nop
 8004c42:	e7fd      	b.n	8004c40 <__NVIC_SystemReset+0x20>
 8004c44:	e000ed00 	.word	0xe000ed00
 8004c48:	05fa0004 	.word	0x05fa0004

08004c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c4e:	b0d5      	sub	sp, #340	@ 0x154
 8004c50:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004c52:	f007 f9a6 	bl	800bfa2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004c56:	f000 fc33 	bl	80054c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004c5a:	f001 f907 	bl	8005e6c <MX_GPIO_Init>
  MX_DMA_Init();
 8004c5e:	f001 f8d7 	bl	8005e10 <MX_DMA_Init>
  MX_QUADSPI_Init();
 8004c62:	f000 fd59 	bl	8005718 <MX_QUADSPI_Init>
  MX_SPI2_Init();
 8004c66:	f000 fe0f 	bl	8005888 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8004c6a:	f001 f8a1 	bl	8005db0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8004c6e:	f000 fc79 	bl	8005564 <MX_ADC1_Init>
  MX_I2C3_Init();
 8004c72:	f000 fd11 	bl	8005698 <MX_I2C3_Init>
  MX_TIM2_Init();
 8004c76:	f000 ff2b 	bl	8005ad0 <MX_TIM2_Init>
  MX_UART4_Init();
 8004c7a:	f001 f869 	bl	8005d50 <MX_UART4_Init>
  MX_TIM1_Init();
 8004c7e:	f000 fe7f 	bl	8005980 <MX_TIM1_Init>
  MX_CRC_Init();
 8004c82:	f000 fce7 	bl	8005654 <MX_CRC_Init>
  MX_TIM4_Init();
 8004c86:	f000 ffef 	bl	8005c68 <MX_TIM4_Init>
  MX_RTC_Init();
 8004c8a:	f000 fd6b 	bl	8005764 <MX_RTC_Init>
  MX_SPI3_Init();
 8004c8e:	f000 fe39 	bl	8005904 <MX_SPI3_Init>
  MX_TIM3_Init();
 8004c92:	f000 ff71 	bl	8005b78 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	System_Init();
 8004c96:	f7fe ff25 	bl	8003ae4 <System_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		switch(state)
 8004c9a:	4bbd      	ldr	r3, [pc, #756]	@ (8004f90 <main+0x344>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	f200 83e3 	bhi.w	800546a <main+0x81e>
 8004ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8004cac <main+0x60>)
 8004ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004caa:	bf00      	nop
 8004cac:	08004cbd 	.word	0x08004cbd
 8004cb0:	08004ea9 	.word	0x08004ea9
 8004cb4:	08004ebf 	.word	0x08004ebf
 8004cb8:	0800534d 	.word	0x0800534d
		{
		case IDLE:
			if(flags.Message_Rx)
 8004cbc:	4bb5      	ldr	r3, [pc, #724]	@ (8004f94 <main+0x348>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 80cd 	beq.w	8004e66 <main+0x21a>
			{
				LED_Start(RED_LED, MEDIUM, HIGH);
 8004ccc:	2205      	movs	r2, #5
 8004cce:	2101      	movs	r1, #1
 8004cd0:	2004      	movs	r0, #4
 8004cd2:	f7ff f9d9 	bl	8004088 <LED_Start>
				SIM_Parse_Command();
 8004cd6:	f7fd fb05 	bl	80022e4 <SIM_Parse_Command>
				flags.Message_Rx = 0;
 8004cda:	4aae      	ldr	r2, [pc, #696]	@ (8004f94 <main+0x348>)
 8004cdc:	7813      	ldrb	r3, [r2, #0]
 8004cde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ce2:	7013      	strb	r3, [r2, #0]
				if(flags.CMD.Start_Meas)
 8004ce4:	4bab      	ldr	r3, [pc, #684]	@ (8004f94 <main+0x348>)
 8004ce6:	789b      	ldrb	r3, [r3, #2]
 8004ce8:	f003 0320 	and.w	r3, r3, #32
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d008      	beq.n	8004d04 <main+0xb8>
				{
					state = MEASURE_INIT_STATE;
 8004cf2:	4ba7      	ldr	r3, [pc, #668]	@ (8004f90 <main+0x344>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	701a      	strb	r2, [r3, #0]
					flags.CMD.Start_Meas = 0;
 8004cf8:	4aa6      	ldr	r2, [pc, #664]	@ (8004f94 <main+0x348>)
 8004cfa:	7893      	ldrb	r3, [r2, #2]
 8004cfc:	f023 0320 	bic.w	r3, r3, #32
 8004d00:	7093      	strb	r3, [r2, #2]
 8004d02:	e0a4      	b.n	8004e4e <main+0x202>
				}
				else if(flags.CMD.Set_Config)
 8004d04:	4ba3      	ldr	r3, [pc, #652]	@ (8004f94 <main+0x348>)
 8004d06:	789b      	ldrb	r3, [r3, #2]
 8004d08:	f003 0308 	and.w	r3, r3, #8
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d007      	beq.n	8004d22 <main+0xd6>
				{
					Apply_Config();
 8004d12:	f002 fcad 	bl	8007670 <Apply_Config>
					flags.CMD.Set_Config = 0;
 8004d16:	4a9f      	ldr	r2, [pc, #636]	@ (8004f94 <main+0x348>)
 8004d18:	7893      	ldrb	r3, [r2, #2]
 8004d1a:	f023 0308 	bic.w	r3, r3, #8
 8004d1e:	7093      	strb	r3, [r2, #2]
 8004d20:	e095      	b.n	8004e4e <main+0x202>
				}
				else if(flags.CMD.Get_Config)
 8004d22:	4b9c      	ldr	r3, [pc, #624]	@ (8004f94 <main+0x348>)
 8004d24:	789b      	ldrb	r3, [r3, #2]
 8004d26:	f003 0310 	and.w	r3, r3, #16
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d007      	beq.n	8004d40 <main+0xf4>
				{
					Send_Config();
 8004d30:	f002 fe48 	bl	80079c4 <Send_Config>
					flags.CMD.Get_Config = 0;
 8004d34:	4a97      	ldr	r2, [pc, #604]	@ (8004f94 <main+0x348>)
 8004d36:	7893      	ldrb	r3, [r2, #2]
 8004d38:	f023 0310 	bic.w	r3, r3, #16
 8004d3c:	7093      	strb	r3, [r2, #2]
 8004d3e:	e086      	b.n	8004e4e <main+0x202>
				}
				else if(flags.CMD.Start_OTA)
 8004d40:	4b94      	ldr	r3, [pc, #592]	@ (8004f94 <main+0x348>)
 8004d42:	789b      	ldrb	r3, [r3, #2]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d015      	beq.n	8004d7a <main+0x12e>
				{
					LED_Stop(GRN_LED);
 8004d4e:	2008      	movs	r0, #8
 8004d50:	f7ff fa66 	bl	8004220 <LED_Stop>
					LED_Start(ORG_LED, FAST, FULL);
 8004d54:	2204      	movs	r2, #4
 8004d56:	2100      	movs	r1, #0
 8004d58:	2000      	movs	r0, #0
 8004d5a:	f7ff f995 	bl	8004088 <LED_Start>
					LED_Start(RED_LED, FAST, HIGH);
 8004d5e:	2205      	movs	r2, #5
 8004d60:	2100      	movs	r1, #0
 8004d62:	2004      	movs	r0, #4
 8004d64:	f7ff f990 	bl	8004088 <LED_Start>
					state = OTA_STATE;
 8004d68:	4b89      	ldr	r3, [pc, #548]	@ (8004f90 <main+0x344>)
 8004d6a:	2203      	movs	r2, #3
 8004d6c:	701a      	strb	r2, [r3, #0]
					flags.CMD.Start_OTA = 0;
 8004d6e:	4a89      	ldr	r2, [pc, #548]	@ (8004f94 <main+0x348>)
 8004d70:	7893      	ldrb	r3, [r2, #2]
 8004d72:	f023 0302 	bic.w	r3, r3, #2
 8004d76:	7093      	strb	r3, [r2, #2]
 8004d78:	e069      	b.n	8004e4e <main+0x202>
				}
				else if(flags.CMD.Ping)
 8004d7a:	4b86      	ldr	r3, [pc, #536]	@ (8004f94 <main+0x348>)
 8004d7c:	789b      	ldrb	r3, [r3, #2]
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d007      	beq.n	8004d98 <main+0x14c>
				{
					SIM_Send_Infos();
 8004d88:	f7fd fccc 	bl	8002724 <SIM_Send_Infos>
					flags.CMD.Ping = 0;
 8004d8c:	4a81      	ldr	r2, [pc, #516]	@ (8004f94 <main+0x348>)
 8004d8e:	7893      	ldrb	r3, [r2, #2]
 8004d90:	f023 0304 	bic.w	r3, r3, #4
 8004d94:	7093      	strb	r3, [r2, #2]
 8004d96:	e05a      	b.n	8004e4e <main+0x202>
				}
				else if(flags.TCP_Parameter_Changed)
 8004d98:	4b7e      	ldr	r3, [pc, #504]	@ (8004f94 <main+0x348>)
 8004d9a:	785b      	ldrb	r3, [r3, #1]
 8004d9c:	f003 0320 	and.w	r3, r3, #32
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d053      	beq.n	8004e4e <main+0x202>
				{
				  char response[256];
				  LED_Start(ORG_LED, MEDIUM, HALF);
 8004da6:	2206      	movs	r2, #6
 8004da8:	2101      	movs	r1, #1
 8004daa:	2000      	movs	r0, #0
 8004dac:	f7ff f96c 	bl	8004088 <LED_Start>
				  SIM_Send_Command("AT+CIPCLOSE\n");
 8004db0:	4879      	ldr	r0, [pc, #484]	@ (8004f98 <main+0x34c>)
 8004db2:	f7fd fa0d 	bl	80021d0 <SIM_Send_Command>
				  SIM_Receive_Response(response, 2000);
 8004db6:	f107 031c 	add.w	r3, r7, #28
 8004dba:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fd fa32 	bl	8002228 <SIM_Receive_Response>
				  if(strstr(response, "CLOSE OK") == NULL && strstr(response, "ERROR") == NULL)
 8004dc4:	f107 031c 	add.w	r3, r7, #28
 8004dc8:	4974      	ldr	r1, [pc, #464]	@ (8004f9c <main+0x350>)
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f012 fda2 	bl	8017914 <strstr>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d131      	bne.n	8004e3a <main+0x1ee>
 8004dd6:	f107 031c 	add.w	r3, r7, #28
 8004dda:	4971      	ldr	r1, [pc, #452]	@ (8004fa0 <main+0x354>)
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f012 fd99 	bl	8017914 <strstr>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d128      	bne.n	8004e3a <main+0x1ee>
				  {
					  memset(response, 0, sizeof(response));
 8004de8:	f107 031c 	add.w	r3, r7, #28
 8004dec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004df0:	2100      	movs	r1, #0
 8004df2:	4618      	mov	r0, r3
 8004df4:	f012 fd54 	bl	80178a0 <memset>
					  SIM_Send_Command("AT+CIPSHUT\n");
 8004df8:	486a      	ldr	r0, [pc, #424]	@ (8004fa4 <main+0x358>)
 8004dfa:	f7fd f9e9 	bl	80021d0 <SIM_Send_Command>
					  SIM_Receive_Response(response, 70000);
 8004dfe:	f107 031c 	add.w	r3, r7, #28
 8004e02:	4969      	ldr	r1, [pc, #420]	@ (8004fa8 <main+0x35c>)
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fd fa0f 	bl	8002228 <SIM_Receive_Response>
					  if(strstr(response, "SHUT OK") == NULL && strstr(response, "ERROR") == NULL)
 8004e0a:	f107 031c 	add.w	r3, r7, #28
 8004e0e:	4967      	ldr	r1, [pc, #412]	@ (8004fac <main+0x360>)
 8004e10:	4618      	mov	r0, r3
 8004e12:	f012 fd7f 	bl	8017914 <strstr>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10a      	bne.n	8004e32 <main+0x1e6>
 8004e1c:	f107 031c 	add.w	r3, r7, #28
 8004e20:	495f      	ldr	r1, [pc, #380]	@ (8004fa0 <main+0x354>)
 8004e22:	4618      	mov	r0, r3
 8004e24:	f012 fd76 	bl	8017914 <strstr>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <main+0x1e6>
					  {
						HAL_NVIC_SystemReset();
 8004e2e:	f008 fe06 	bl	800da3e <HAL_NVIC_SystemReset>
					  }
					  HAL_Delay(1000);
 8004e32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004e36:	f007 f929 	bl	800c08c <HAL_Delay>
				  }
				  SIM_Check_Connection();
 8004e3a:	f7fd fd99 	bl	8002970 <SIM_Check_Connection>
				  LED_Stop(ORG_LED);
 8004e3e:	2000      	movs	r0, #0
 8004e40:	f7ff f9ee 	bl	8004220 <LED_Stop>
				  flags.TCP_Parameter_Changed = 0;
 8004e44:	4a53      	ldr	r2, [pc, #332]	@ (8004f94 <main+0x348>)
 8004e46:	7853      	ldrb	r3, [r2, #1]
 8004e48:	f023 0320 	bic.w	r3, r3, #32
 8004e4c:	7053      	strb	r3, [r2, #1]
				}
				sys.SIM_Connection_Status = HAL_GetTick();
 8004e4e:	f007 f911 	bl	800c074 <HAL_GetTick>
 8004e52:	4603      	mov	r3, r0
 8004e54:	4a56      	ldr	r2, [pc, #344]	@ (8004fb0 <main+0x364>)
 8004e56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
				LED_Stop(RED_LED);
 8004e5e:	2004      	movs	r0, #4
 8004e60:	f7ff f9de 	bl	8004220 <LED_Stop>
				LED_Start(ORG_LED, MEDIUM, HALF);
				SIM_Check_Connection();
				sys.SIM_Connection_Status = HAL_GetTick();
				LED_Stop(ORG_LED);
			}
			break;
 8004e64:	e303      	b.n	800546e <main+0x822>
			else if(HAL_GetTick() - sys.SIM_Connection_Status > config.connection_timeout_ms)                  // Controllo connessione al server TCP ogni config.connection_timeout_ms millisecondi
 8004e66:	f007 f905 	bl	800c074 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	4b50      	ldr	r3, [pc, #320]	@ (8004fb0 <main+0x364>)
 8004e6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e76:	1ad2      	subs	r2, r2, r3
 8004e78:	4b4e      	ldr	r3, [pc, #312]	@ (8004fb4 <main+0x368>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	f240 82f6 	bls.w	800546e <main+0x822>
				LED_Start(ORG_LED, MEDIUM, HALF);
 8004e82:	2206      	movs	r2, #6
 8004e84:	2101      	movs	r1, #1
 8004e86:	2000      	movs	r0, #0
 8004e88:	f7ff f8fe 	bl	8004088 <LED_Start>
				SIM_Check_Connection();
 8004e8c:	f7fd fd70 	bl	8002970 <SIM_Check_Connection>
				sys.SIM_Connection_Status = HAL_GetTick();
 8004e90:	f007 f8f0 	bl	800c074 <HAL_GetTick>
 8004e94:	4603      	mov	r3, r0
 8004e96:	4a46      	ldr	r2, [pc, #280]	@ (8004fb0 <main+0x364>)
 8004e98:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
				LED_Stop(ORG_LED);
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	f7ff f9bd 	bl	8004220 <LED_Stop>
			break;
 8004ea6:	e2e2      	b.n	800546e <main+0x822>

		case MEASURE_INIT_STATE:
			Start_Measure();
 8004ea8:	f001 fdd4 	bl	8006a54 <Start_Measure>
			LED_Start(GRN_LED, FAST, FULL);
 8004eac:	2204      	movs	r2, #4
 8004eae:	2100      	movs	r1, #0
 8004eb0:	2008      	movs	r0, #8
 8004eb2:	f7ff f8e9 	bl	8004088 <LED_Start>
			state = MEASURING_STATE;
 8004eb6:	4b36      	ldr	r3, [pc, #216]	@ (8004f90 <main+0x344>)
 8004eb8:	2202      	movs	r2, #2
 8004eba:	701a      	strb	r2, [r3, #0]
			break;
 8004ebc:	e2da      	b.n	8005474 <main+0x828>

		case MEASURING_STATE:
			if(flags.ADC_Complete && flags.ACC_Complete)
 8004ebe:	4b35      	ldr	r3, [pc, #212]	@ (8004f94 <main+0x348>)
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 82d2 	beq.w	8005472 <main+0x826>
 8004ece:	4b31      	ldr	r3, [pc, #196]	@ (8004f94 <main+0x348>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 82ca 	beq.w	8005472 <main+0x826>
			{
				Save_Data();
 8004ede:	f001 fb2d 	bl	800653c <Save_Data>
				if(flags.BC_Interrupt)
 8004ee2:	4b2c      	ldr	r3, [pc, #176]	@ (8004f94 <main+0x348>)
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	f003 0320 	and.w	r3, r3, #32
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d010      	beq.n	8004f12 <main+0x2c6>
				{
					BC_Read_Flags(&sys.BC_Flags);
 8004ef0:	4831      	ldr	r0, [pc, #196]	@ (8004fb8 <main+0x36c>)
 8004ef2:	f7fd fffb 	bl	8002eec <BC_Read_Flags>
					BC_Manage_Interrupts(sys.BC_Flags);
 8004ef6:	4b2e      	ldr	r3, [pc, #184]	@ (8004fb0 <main+0x364>)
 8004ef8:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8004efc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004f00:	4610      	mov	r0, r2
 8004f02:	4619      	mov	r1, r3
 8004f04:	f7fe f8a0 	bl	8003048 <BC_Manage_Interrupts>
					flags.BC_Interrupt = 0;
 8004f08:	4a22      	ldr	r2, [pc, #136]	@ (8004f94 <main+0x348>)
 8004f0a:	7813      	ldrb	r3, [r2, #0]
 8004f0c:	f023 0320 	bic.w	r3, r3, #32
 8004f10:	7013      	strb	r3, [r2, #0]
				}
				if(flags.Message_Rx)
 8004f12:	4b20      	ldr	r3, [pc, #128]	@ (8004f94 <main+0x348>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00b      	beq.n	8004f38 <main+0x2ec>
				{
					SIM_Parse_Command();
 8004f20:	f7fd f9e0 	bl	80022e4 <SIM_Parse_Command>
					flags.SIM_isConnected = 1;
 8004f24:	4a1b      	ldr	r2, [pc, #108]	@ (8004f94 <main+0x348>)
 8004f26:	7853      	ldrb	r3, [r2, #1]
 8004f28:	f043 0310 	orr.w	r3, r3, #16
 8004f2c:	7053      	strb	r3, [r2, #1]
					flags.Message_Rx = 0;
 8004f2e:	4a19      	ldr	r2, [pc, #100]	@ (8004f94 <main+0x348>)
 8004f30:	7813      	ldrb	r3, [r2, #0]
 8004f32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f36:	7013      	strb	r3, [r2, #0]
				}
				if(flags.CMD.Idle)
 8004f38:	4b16      	ldr	r3, [pc, #88]	@ (8004f94 <main+0x348>)
 8004f3a:	789b      	ldrb	r3, [r3, #2]
 8004f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d03a      	beq.n	8004fbc <main+0x370>
				{
					if(!flags.Log_TransferInProgress && !flags.Meas_TransferInProgress)
 8004f46:	4b13      	ldr	r3, [pc, #76]	@ (8004f94 <main+0x348>)
 8004f48:	785b      	ldrb	r3, [r3, #1]
 8004f4a:	f003 0308 	and.w	r3, r3, #8
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d133      	bne.n	8004fbc <main+0x370>
 8004f54:	4b0f      	ldr	r3, [pc, #60]	@ (8004f94 <main+0x348>)
 8004f56:	785b      	ldrb	r3, [r3, #1]
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d12c      	bne.n	8004fbc <main+0x370>
					{
						Stop_Measure();
 8004f62:	f001 fe4d 	bl	8006c00 <Stop_Measure>
						LED_Stop(ORG_LED);
 8004f66:	2000      	movs	r0, #0
 8004f68:	f7ff f95a 	bl	8004220 <LED_Stop>
						LED_Stop(RED_LED);
 8004f6c:	2004      	movs	r0, #4
 8004f6e:	f7ff f957 	bl	8004220 <LED_Stop>
						LED_Start(GRN_LED, MEDIUM, HALF);
 8004f72:	2206      	movs	r2, #6
 8004f74:	2101      	movs	r1, #1
 8004f76:	2008      	movs	r0, #8
 8004f78:	f7ff f886 	bl	8004088 <LED_Start>
						state = IDLE;
 8004f7c:	4b04      	ldr	r3, [pc, #16]	@ (8004f90 <main+0x344>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	701a      	strb	r2, [r3, #0]
						flags.CMD.Idle = 0;
 8004f82:	4a04      	ldr	r2, [pc, #16]	@ (8004f94 <main+0x348>)
 8004f84:	7893      	ldrb	r3, [r2, #2]
 8004f86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f8a:	7093      	strb	r3, [r2, #2]
						break;
 8004f8c:	e272      	b.n	8005474 <main+0x828>
 8004f8e:	bf00      	nop
 8004f90:	200005d4 	.word	0x200005d4
 8004f94:	20001790 	.word	0x20001790
 8004f98:	08018de8 	.word	0x08018de8
 8004f9c:	08018df8 	.word	0x08018df8
 8004fa0:	08018e04 	.word	0x08018e04
 8004fa4:	08018e0c 	.word	0x08018e0c
 8004fa8:	00011170 	.word	0x00011170
 8004fac:	08018e18 	.word	0x08018e18
 8004fb0:	200005d8 	.word	0x200005d8
 8004fb4:	20001794 	.word	0x20001794
 8004fb8:	20001610 	.word	0x20001610
					}
				}
				if(sys.Log_Request)
 8004fbc:	4b87      	ldr	r3, [pc, #540]	@ (80051dc <main+0x590>)
 8004fbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fc2:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 8095 	beq.w	80050fc <main+0x4b0>
				{
					if(HAL_GetTick() - sys.Log_Status > config.log_period_ms && !flags.Log_TransferInProgress && !flags.Meas_TransferInProgress)
 8004fd2:	f007 f84f 	bl	800c074 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	4b80      	ldr	r3, [pc, #512]	@ (80051dc <main+0x590>)
 8004fda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fde:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004fe2:	1ad2      	subs	r2, r2, r3
 8004fe4:	4b7e      	ldr	r3, [pc, #504]	@ (80051e0 <main+0x594>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d970      	bls.n	80050ce <main+0x482>
 8004fec:	4b7d      	ldr	r3, [pc, #500]	@ (80051e4 <main+0x598>)
 8004fee:	785b      	ldrb	r3, [r3, #1]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d169      	bne.n	80050ce <main+0x482>
 8004ffa:	4b7a      	ldr	r3, [pc, #488]	@ (80051e4 <main+0x598>)
 8004ffc:	785b      	ldrb	r3, [r3, #1]
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d162      	bne.n	80050ce <main+0x482>
					{
						LED_Start(ORG_LED, FAST, HIGH);
 8005008:	2205      	movs	r2, #5
 800500a:	2100      	movs	r1, #0
 800500c:	2000      	movs	r0, #0
 800500e:	f7ff f83b 	bl	8004088 <LED_Start>
						sprintf(Data_Logging, "L:%u,%u,%lu,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", config.device_id, Last_Pressure, Last_Volume, Last_Acceleration.x, Last_Acceleration.y, Last_Acceleration.z, Vbatt, Supply.i1, Supply.i2, Supply.i3, Supply.v1, Supply.v2, Supply.v3, Temperature);
 8005012:	4b73      	ldr	r3, [pc, #460]	@ (80051e0 <main+0x594>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	469c      	mov	ip, r3
 8005018:	4b73      	ldr	r3, [pc, #460]	@ (80051e8 <main+0x59c>)
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	469e      	mov	lr, r3
 800501e:	4b73      	ldr	r3, [pc, #460]	@ (80051ec <main+0x5a0>)
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	4b73      	ldr	r3, [pc, #460]	@ (80051f0 <main+0x5a4>)
 8005024:	885b      	ldrh	r3, [r3, #2]
 8005026:	4619      	mov	r1, r3
 8005028:	4b71      	ldr	r3, [pc, #452]	@ (80051f0 <main+0x5a4>)
 800502a:	889b      	ldrh	r3, [r3, #4]
 800502c:	4618      	mov	r0, r3
 800502e:	4b70      	ldr	r3, [pc, #448]	@ (80051f0 <main+0x5a4>)
 8005030:	88db      	ldrh	r3, [r3, #6]
 8005032:	461c      	mov	r4, r3
 8005034:	4b6f      	ldr	r3, [pc, #444]	@ (80051f4 <main+0x5a8>)
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	461d      	mov	r5, r3
 800503a:	4b6f      	ldr	r3, [pc, #444]	@ (80051f8 <main+0x5ac>)
 800503c:	88db      	ldrh	r3, [r3, #6]
 800503e:	461e      	mov	r6, r3
 8005040:	4b6d      	ldr	r3, [pc, #436]	@ (80051f8 <main+0x5ac>)
 8005042:	891b      	ldrh	r3, [r3, #8]
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	4b6c      	ldr	r3, [pc, #432]	@ (80051f8 <main+0x5ac>)
 8005048:	895b      	ldrh	r3, [r3, #10]
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	4b6a      	ldr	r3, [pc, #424]	@ (80051f8 <main+0x5ac>)
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	4b69      	ldr	r3, [pc, #420]	@ (80051f8 <main+0x5ac>)
 8005054:	885b      	ldrh	r3, [r3, #2]
 8005056:	60bb      	str	r3, [r7, #8]
 8005058:	4b67      	ldr	r3, [pc, #412]	@ (80051f8 <main+0x5ac>)
 800505a:	889b      	ldrh	r3, [r3, #4]
 800505c:	607b      	str	r3, [r7, #4]
 800505e:	4b67      	ldr	r3, [pc, #412]	@ (80051fc <main+0x5b0>)
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	930a      	str	r3, [sp, #40]	@ 0x28
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	9309      	str	r3, [sp, #36]	@ 0x24
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	9308      	str	r3, [sp, #32]
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	9307      	str	r3, [sp, #28]
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	9306      	str	r3, [sp, #24]
 8005078:	9605      	str	r6, [sp, #20]
 800507a:	9504      	str	r5, [sp, #16]
 800507c:	9403      	str	r4, [sp, #12]
 800507e:	9002      	str	r0, [sp, #8]
 8005080:	9101      	str	r1, [sp, #4]
 8005082:	9200      	str	r2, [sp, #0]
 8005084:	4673      	mov	r3, lr
 8005086:	4662      	mov	r2, ip
 8005088:	495d      	ldr	r1, [pc, #372]	@ (8005200 <main+0x5b4>)
 800508a:	485e      	ldr	r0, [pc, #376]	@ (8005204 <main+0x5b8>)
 800508c:	f012 fba8 	bl	80177e0 <siprintf>
						SIM_Send_TCP_Chunk((uint16_t)strlen(Data_Logging));
 8005090:	485c      	ldr	r0, [pc, #368]	@ (8005204 <main+0x5b8>)
 8005092:	f7fb f8a7 	bl	80001e4 <strlen>
 8005096:	4603      	mov	r3, r0
 8005098:	b29b      	uxth	r3, r3
 800509a:	4618      	mov	r0, r3
 800509c:	f7fd fb2a 	bl	80026f4 <SIM_Send_TCP_Chunk>
						sys.SIM_Prompt_Status = HAL_GetTick();
 80050a0:	f006 ffe8 	bl	800c074 <HAL_GetTick>
 80050a4:	4603      	mov	r3, r0
 80050a6:	4a4d      	ldr	r2, [pc, #308]	@ (80051dc <main+0x590>)
 80050a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80050ac:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
						sys.Log_Status = sys.SIM_Prompt_Status;
 80050b0:	4b4a      	ldr	r3, [pc, #296]	@ (80051dc <main+0x590>)
 80050b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050b6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80050ba:	4a48      	ldr	r2, [pc, #288]	@ (80051dc <main+0x590>)
 80050bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80050c0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
						flags.Log_TransferInProgress = 1;
 80050c4:	4a47      	ldr	r2, [pc, #284]	@ (80051e4 <main+0x598>)
 80050c6:	7853      	ldrb	r3, [r2, #1]
 80050c8:	f043 0308 	orr.w	r3, r3, #8
 80050cc:	7053      	strb	r3, [r2, #1]
					}
					if(flags.Log_ReadytoSend)
 80050ce:	4b45      	ldr	r3, [pc, #276]	@ (80051e4 <main+0x598>)
 80050d0:	785b      	ldrb	r3, [r3, #1]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00f      	beq.n	80050fc <main+0x4b0>
					{
						SIM_Send_Command_DMA(Data_Logging);
 80050dc:	4849      	ldr	r0, [pc, #292]	@ (8005204 <main+0x5b8>)
 80050de:	f7fd f88d 	bl	80021fc <SIM_Send_Command_DMA>
						LED_Stop(ORG_LED);
 80050e2:	2000      	movs	r0, #0
 80050e4:	f7ff f89c 	bl	8004220 <LED_Stop>
						flags.SIM_isConnected = 1;
 80050e8:	4a3e      	ldr	r2, [pc, #248]	@ (80051e4 <main+0x598>)
 80050ea:	7853      	ldrb	r3, [r2, #1]
 80050ec:	f043 0310 	orr.w	r3, r3, #16
 80050f0:	7053      	strb	r3, [r2, #1]
						flags.Log_ReadytoSend = 0;
 80050f2:	4a3c      	ldr	r2, [pc, #240]	@ (80051e4 <main+0x598>)
 80050f4:	7853      	ldrb	r3, [r2, #1]
 80050f6:	f023 0301 	bic.w	r3, r3, #1
 80050fa:	7053      	strb	r3, [r2, #1]
					}
				}
				if(flags.CMD.Measure_Request)
 80050fc:	4b39      	ldr	r3, [pc, #228]	@ (80051e4 <main+0x598>)
 80050fe:	789b      	ldrb	r3, [r3, #2]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 80bb 	beq.w	8005282 <main+0x636>
				{
					if(!flags.Meas_TransferInProgress && !flags.Log_TransferInProgress && !flags.Measure_ReadytoSend)
 800510c:	4b35      	ldr	r3, [pc, #212]	@ (80051e4 <main+0x598>)
 800510e:	785b      	ldrb	r3, [r3, #1]
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	f040 80a4 	bne.w	8005264 <main+0x618>
 800511c:	4b31      	ldr	r3, [pc, #196]	@ (80051e4 <main+0x598>)
 800511e:	785b      	ldrb	r3, [r3, #1]
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	f040 809c 	bne.w	8005264 <main+0x618>
 800512c:	4b2d      	ldr	r3, [pc, #180]	@ (80051e4 <main+0x598>)
 800512e:	785b      	ldrb	r3, [r3, #1]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	f040 8094 	bne.w	8005264 <main+0x618>
					{
						if (Send_Measure_Addr == (uint32_t)-1 || Measure_Bytes_Sent >= sys.Inactive_RAM_Len)
 800513c:	4b32      	ldr	r3, [pc, #200]	@ (8005208 <main+0x5bc>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005144:	d008      	beq.n	8005158 <main+0x50c>
 8005146:	4b25      	ldr	r3, [pc, #148]	@ (80051dc <main+0x590>)
 8005148:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800514c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005150:	4b2e      	ldr	r3, [pc, #184]	@ (800520c <main+0x5c0>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	429a      	cmp	r2, r3
 8005156:	d814      	bhi.n	8005182 <main+0x536>
						{
							memset(tcp_chunk, 0, 1460);
 8005158:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800515c:	2100      	movs	r1, #0
 800515e:	482c      	ldr	r0, [pc, #176]	@ (8005210 <main+0x5c4>)
 8005160:	f012 fb9e 	bl	80178a0 <memset>
							LED_Stop(RED_LED);
 8005164:	2004      	movs	r0, #4
 8005166:	f7ff f85b 	bl	8004220 <LED_Stop>
							flags.CMD.Measure_Request = 0;
 800516a:	4a1e      	ldr	r2, [pc, #120]	@ (80051e4 <main+0x598>)
 800516c:	7893      	ldrb	r3, [r2, #2]
 800516e:	f023 0301 	bic.w	r3, r3, #1
 8005172:	7093      	strb	r3, [r2, #2]
							Measure_Bytes_Sent = 0;
 8005174:	4b25      	ldr	r3, [pc, #148]	@ (800520c <main+0x5c0>)
 8005176:	2200      	movs	r2, #0
 8005178:	601a      	str	r2, [r3, #0]
							Send_Measure_Addr = 0;
 800517a:	4b23      	ldr	r3, [pc, #140]	@ (8005208 <main+0x5bc>)
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	e070      	b.n	8005264 <main+0x618>
						}
						else
						{
							uint32_t old_addr = Send_Measure_Addr;
 8005182:	4b21      	ldr	r3, [pc, #132]	@ (8005208 <main+0x5bc>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
							Send_Measure_Addr = Send_Measure_Chunk(sys.Inactive_RAM_Base, sys.Inactive_RAM_Len, Send_Measure_Addr);
 800518a:	4b14      	ldr	r3, [pc, #80]	@ (80051dc <main+0x590>)
 800518c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005190:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005194:	4a11      	ldr	r2, [pc, #68]	@ (80051dc <main+0x590>)
 8005196:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800519a:	f8d2 10d4 	ldr.w	r1, [r2, #212]	@ 0xd4
 800519e:	4a1a      	ldr	r2, [pc, #104]	@ (8005208 <main+0x5bc>)
 80051a0:	6812      	ldr	r2, [r2, #0]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f001 fea2 	bl	8006eec <Send_Measure_Chunk>
 80051a8:	4603      	mov	r3, r0
 80051aa:	4a17      	ldr	r2, [pc, #92]	@ (8005208 <main+0x5bc>)
 80051ac:	6013      	str	r3, [r2, #0]
							if (Send_Measure_Addr != (uint32_t)-1 && Send_Measure_Addr > old_addr)
 80051ae:	4b16      	ldr	r3, [pc, #88]	@ (8005208 <main+0x5bc>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b6:	d02d      	beq.n	8005214 <main+0x5c8>
 80051b8:	4b13      	ldr	r3, [pc, #76]	@ (8005208 <main+0x5bc>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d227      	bcs.n	8005214 <main+0x5c8>
							{
								Measure_Bytes_Sent += (Send_Measure_Addr - old_addr);
 80051c4:	4b10      	ldr	r3, [pc, #64]	@ (8005208 <main+0x5bc>)
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051cc:	1ad2      	subs	r2, r2, r3
 80051ce:	4b0f      	ldr	r3, [pc, #60]	@ (800520c <main+0x5c0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4413      	add	r3, r2
 80051d4:	4a0d      	ldr	r2, [pc, #52]	@ (800520c <main+0x5c0>)
 80051d6:	6013      	str	r3, [r2, #0]
 80051d8:	e037      	b.n	800524a <main+0x5fe>
 80051da:	bf00      	nop
 80051dc:	200005d8 	.word	0x200005d8
 80051e0:	20001794 	.word	0x20001794
 80051e4:	20001790 	.word	0x20001790
 80051e8:	200041cc 	.word	0x200041cc
 80051ec:	200041d0 	.word	0x200041d0
 80051f0:	200041d4 	.word	0x200041d4
 80051f4:	200041de 	.word	0x200041de
 80051f8:	200038fc 	.word	0x200038fc
 80051fc:	200041dc 	.word	0x200041dc
 8005200:	08018e20 	.word	0x08018e20
 8005204:	200041e0 	.word	0x200041e0
 8005208:	20004984 	.word	0x20004984
 800520c:	20004f3c 	.word	0x20004f3c
 8005210:	20004988 	.word	0x20004988
							}
							else if (Send_Measure_Addr != (uint32_t)-1 && Send_Measure_Addr < old_addr)
 8005214:	4b98      	ldr	r3, [pc, #608]	@ (8005478 <main+0x82c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521c:	d015      	beq.n	800524a <main+0x5fe>
 800521e:	4b96      	ldr	r3, [pc, #600]	@ (8005478 <main+0x82c>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8005226:	429a      	cmp	r2, r3
 8005228:	d90f      	bls.n	800524a <main+0x5fe>
							{
								Measure_Bytes_Sent += (Send_Measure_Addr + sys.Inactive_RAM_Len) - old_addr;
 800522a:	4b94      	ldr	r3, [pc, #592]	@ (800547c <main+0x830>)
 800522c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005230:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005234:	4b90      	ldr	r3, [pc, #576]	@ (8005478 <main+0x82c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	441a      	add	r2, r3
 800523a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800523e:	1ad2      	subs	r2, r2, r3
 8005240:	4b8f      	ldr	r3, [pc, #572]	@ (8005480 <main+0x834>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4413      	add	r3, r2
 8005246:	4a8e      	ldr	r2, [pc, #568]	@ (8005480 <main+0x834>)
 8005248:	6013      	str	r3, [r2, #0]
							}
							sys.SIM_Prompt_Status = HAL_GetTick();
 800524a:	f006 ff13 	bl	800c074 <HAL_GetTick>
 800524e:	4603      	mov	r3, r0
 8005250:	4a8a      	ldr	r2, [pc, #552]	@ (800547c <main+0x830>)
 8005252:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005256:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
							flags.Meas_TransferInProgress = 1;
 800525a:	4a8a      	ldr	r2, [pc, #552]	@ (8005484 <main+0x838>)
 800525c:	7853      	ldrb	r3, [r2, #1]
 800525e:	f043 0304 	orr.w	r3, r3, #4
 8005262:	7053      	strb	r3, [r2, #1]
						}
					}
					if(flags.Measure_ReadytoSend)
 8005264:	4b87      	ldr	r3, [pc, #540]	@ (8005484 <main+0x838>)
 8005266:	785b      	ldrb	r3, [r3, #1]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d007      	beq.n	8005282 <main+0x636>
					{
						SIM_Send_Command_DMA((char*)tcp_chunk);
 8005272:	4885      	ldr	r0, [pc, #532]	@ (8005488 <main+0x83c>)
 8005274:	f7fc ffc2 	bl	80021fc <SIM_Send_Command_DMA>
						flags.Measure_ReadytoSend = 0;
 8005278:	4a82      	ldr	r2, [pc, #520]	@ (8005484 <main+0x838>)
 800527a:	7853      	ldrb	r3, [r2, #1]
 800527c:	f023 0302 	bic.w	r3, r3, #2
 8005280:	7053      	strb	r3, [r2, #1]
					}
				}
				if(sys.SIM_Prompt_Status > 0 && (HAL_GetTick() - sys.SIM_Prompt_Status) > SIM_PROMPT_TIMEOUT_MS)
 8005282:	4b7e      	ldr	r3, [pc, #504]	@ (800547c <main+0x830>)
 8005284:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005288:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800528c:	2b00      	cmp	r3, #0
 800528e:	d02a      	beq.n	80052e6 <main+0x69a>
 8005290:	f006 fef0 	bl	800c074 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	4b79      	ldr	r3, [pc, #484]	@ (800547c <main+0x830>)
 8005298:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800529c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d91d      	bls.n	80052e6 <main+0x69a>
				{
					  SIM_Send_Command_DMA("\x1A");
 80052aa:	4878      	ldr	r0, [pc, #480]	@ (800548c <main+0x840>)
 80052ac:	f7fc ffa6 	bl	80021fc <SIM_Send_Command_DMA>
					  flags.Log_TransferInProgress = 0;
 80052b0:	4a74      	ldr	r2, [pc, #464]	@ (8005484 <main+0x838>)
 80052b2:	7853      	ldrb	r3, [r2, #1]
 80052b4:	f023 0308 	bic.w	r3, r3, #8
 80052b8:	7053      	strb	r3, [r2, #1]
					  flags.Meas_TransferInProgress = 0;
 80052ba:	4a72      	ldr	r2, [pc, #456]	@ (8005484 <main+0x838>)
 80052bc:	7853      	ldrb	r3, [r2, #1]
 80052be:	f023 0304 	bic.w	r3, r3, #4
 80052c2:	7053      	strb	r3, [r2, #1]
					  flags.Measure_ReadytoSend = 0;
 80052c4:	4a6f      	ldr	r2, [pc, #444]	@ (8005484 <main+0x838>)
 80052c6:	7853      	ldrb	r3, [r2, #1]
 80052c8:	f023 0302 	bic.w	r3, r3, #2
 80052cc:	7053      	strb	r3, [r2, #1]
					  flags.Log_ReadytoSend = 0;
 80052ce:	4a6d      	ldr	r2, [pc, #436]	@ (8005484 <main+0x838>)
 80052d0:	7853      	ldrb	r3, [r2, #1]
 80052d2:	f023 0301 	bic.w	r3, r3, #1
 80052d6:	7053      	strb	r3, [r2, #1]
					  sys.SIM_Prompt_Status = 0;
 80052d8:	4b68      	ldr	r3, [pc, #416]	@ (800547c <main+0x830>)
 80052da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052de:	461a      	mov	r2, r3
 80052e0:	2300      	movs	r3, #0
 80052e2:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
				}
				if(HAL_GetTick() - sys.SIM_Connection_Status > config.connection_timeout_ms)
 80052e6:	f006 fec5 	bl	800c074 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	4b63      	ldr	r3, [pc, #396]	@ (800547c <main+0x830>)
 80052ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052f6:	1ad2      	subs	r2, r2, r3
 80052f8:	4b65      	ldr	r3, [pc, #404]	@ (8005490 <main+0x844>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	f240 80b8 	bls.w	8005472 <main+0x826>
				{
					sys.SIM_Connection_Status = HAL_GetTick();
 8005302:	f006 feb7 	bl	800c074 <HAL_GetTick>
 8005306:	4603      	mov	r3, r0
 8005308:	4a5c      	ldr	r2, [pc, #368]	@ (800547c <main+0x830>)
 800530a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800530e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
					if(flags.SIM_isConnected)
 8005312:	4b5c      	ldr	r3, [pc, #368]	@ (8005484 <main+0x838>)
 8005314:	785b      	ldrb	r3, [r3, #1]
 8005316:	f003 0310 	and.w	r3, r3, #16
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d005      	beq.n	800532c <main+0x6e0>
					{
						flags.SIM_isConnected = 0;
 8005320:	4a58      	ldr	r2, [pc, #352]	@ (8005484 <main+0x838>)
 8005322:	7853      	ldrb	r3, [r2, #1]
 8005324:	f023 0310 	bic.w	r3, r3, #16
 8005328:	7053      	strb	r3, [r2, #1]
						flags.Meas_TransferInProgress = 0;
						flags.CMD.Idle = 1;
					}
				}
			}
			break;
 800532a:	e0a2      	b.n	8005472 <main+0x826>
						flags.Log_TransferInProgress = 0;
 800532c:	4a55      	ldr	r2, [pc, #340]	@ (8005484 <main+0x838>)
 800532e:	7853      	ldrb	r3, [r2, #1]
 8005330:	f023 0308 	bic.w	r3, r3, #8
 8005334:	7053      	strb	r3, [r2, #1]
						flags.Meas_TransferInProgress = 0;
 8005336:	4a53      	ldr	r2, [pc, #332]	@ (8005484 <main+0x838>)
 8005338:	7853      	ldrb	r3, [r2, #1]
 800533a:	f023 0304 	bic.w	r3, r3, #4
 800533e:	7053      	strb	r3, [r2, #1]
						flags.CMD.Idle = 1;
 8005340:	4a50      	ldr	r2, [pc, #320]	@ (8005484 <main+0x838>)
 8005342:	7893      	ldrb	r3, [r2, #2]
 8005344:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005348:	7093      	strb	r3, [r2, #2]
			break;
 800534a:	e092      	b.n	8005472 <main+0x826>

		case OTA_STATE:
			if(OTA_Init() == HAL_OK)
 800534c:	f000 fe94 	bl	8006078 <OTA_Init>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d171      	bne.n	800543a <main+0x7ee>
			{
				HAL_UART_DMAStop(SIM_UART);
 8005356:	484f      	ldr	r0, [pc, #316]	@ (8005494 <main+0x848>)
 8005358:	f010 fd78 	bl	8015e4c <HAL_UART_DMAStop>
				memset(sim_rx_buffer, 0, sizeof(sim_rx_buffer));
 800535c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005360:	2100      	movs	r1, #0
 8005362:	484d      	ldr	r0, [pc, #308]	@ (8005498 <main+0x84c>)
 8005364:	f012 fa9c 	bl	80178a0 <memset>

				SIM_Send_TCP("R:OTA_READY");
 8005368:	484c      	ldr	r0, [pc, #304]	@ (800549c <main+0x850>)
 800536a:	f7fd f995 	bl	8002698 <SIM_Send_TCP>
				if(OTA_Receive() == HAL_OK)
 800536e:	f000 feaf 	bl	80060d0 <OTA_Receive>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d148      	bne.n	800540a <main+0x7be>
				{
					SIM_Send_TCP("R:OTA_RECEIVED");
 8005378:	4849      	ldr	r0, [pc, #292]	@ (80054a0 <main+0x854>)
 800537a:	f7fd f98d 	bl	8002698 <SIM_Send_TCP>
					if(OTA_CRC_Check() == HAL_OK)
 800537e:	f000 ff2b 	bl	80061d8 <OTA_CRC_Check>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d128      	bne.n	80053da <main+0x78e>
					{
						SIM_Send_TCP("R:OTA_CRC_OK");
 8005388:	4846      	ldr	r0, [pc, #280]	@ (80054a4 <main+0x858>)
 800538a:	f7fd f985 	bl	8002698 <SIM_Send_TCP>
						if(OTA_Apply() == HAL_OK)
 800538e:	f000 ffd7 	bl	8006340 <OTA_Apply>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d108      	bne.n	80053aa <main+0x75e>
						{
							SIM_Send_TCP("R:OTA_SUCCESS");
 8005398:	4843      	ldr	r0, [pc, #268]	@ (80054a8 <main+0x85c>)
 800539a:	f7fd f97d 	bl	8002698 <SIM_Send_TCP>
							HAL_Delay(500);
 800539e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80053a2:	f006 fe73 	bl	800c08c <HAL_Delay>
							NVIC_SystemReset();
 80053a6:	f7ff fc3b 	bl	8004c20 <__NVIC_SystemReset>
						}
						else
						{
							SIM_Send_TCP("R:OTA_APPLY_ERROR");
 80053aa:	4840      	ldr	r0, [pc, #256]	@ (80054ac <main+0x860>)
 80053ac:	f7fd f974 	bl	8002698 <SIM_Send_TCP>
							HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 80053b0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80053b4:	4938      	ldr	r1, [pc, #224]	@ (8005498 <main+0x84c>)
 80053b6:	4837      	ldr	r0, [pc, #220]	@ (8005494 <main+0x848>)
 80053b8:	f012 f934 	bl	8017624 <HAL_UARTEx_ReceiveToIdle_DMA>
							LED_Stop(ORG_LED);
 80053bc:	2000      	movs	r0, #0
 80053be:	f7fe ff2f 	bl	8004220 <LED_Stop>
							LED_Stop(RED_LED);
 80053c2:	2004      	movs	r0, #4
 80053c4:	f7fe ff2c 	bl	8004220 <LED_Stop>
							LED_Start(GRN_LED, MEDIUM, HALF);
 80053c8:	2206      	movs	r2, #6
 80053ca:	2101      	movs	r1, #1
 80053cc:	2008      	movs	r0, #8
 80053ce:	f7fe fe5b 	bl	8004088 <LED_Start>
							state = IDLE;
 80053d2:	4b37      	ldr	r3, [pc, #220]	@ (80054b0 <main+0x864>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	701a      	strb	r2, [r3, #0]
				LED_Stop(ORG_LED);
				LED_Stop(RED_LED);
				LED_Start(GRN_LED, MEDIUM, HALF);
				state = IDLE;
			}
			break;
 80053d8:	e04c      	b.n	8005474 <main+0x828>
						SIM_Send_TCP("R:OTA_CRC_ERROR");
 80053da:	4836      	ldr	r0, [pc, #216]	@ (80054b4 <main+0x868>)
 80053dc:	f7fd f95c 	bl	8002698 <SIM_Send_TCP>
						HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 80053e0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80053e4:	492c      	ldr	r1, [pc, #176]	@ (8005498 <main+0x84c>)
 80053e6:	482b      	ldr	r0, [pc, #172]	@ (8005494 <main+0x848>)
 80053e8:	f012 f91c 	bl	8017624 <HAL_UARTEx_ReceiveToIdle_DMA>
						LED_Stop(ORG_LED);
 80053ec:	2000      	movs	r0, #0
 80053ee:	f7fe ff17 	bl	8004220 <LED_Stop>
						LED_Stop(RED_LED);
 80053f2:	2004      	movs	r0, #4
 80053f4:	f7fe ff14 	bl	8004220 <LED_Stop>
						LED_Start(GRN_LED, MEDIUM, HALF);
 80053f8:	2206      	movs	r2, #6
 80053fa:	2101      	movs	r1, #1
 80053fc:	2008      	movs	r0, #8
 80053fe:	f7fe fe43 	bl	8004088 <LED_Start>
						state = IDLE;
 8005402:	4b2b      	ldr	r3, [pc, #172]	@ (80054b0 <main+0x864>)
 8005404:	2200      	movs	r2, #0
 8005406:	701a      	strb	r2, [r3, #0]
						break;
 8005408:	e034      	b.n	8005474 <main+0x828>
					SIM_Send_TCP("R:OTA_RECEIVE_ERROR");
 800540a:	482b      	ldr	r0, [pc, #172]	@ (80054b8 <main+0x86c>)
 800540c:	f7fd f944 	bl	8002698 <SIM_Send_TCP>
					HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8005410:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005414:	4920      	ldr	r1, [pc, #128]	@ (8005498 <main+0x84c>)
 8005416:	481f      	ldr	r0, [pc, #124]	@ (8005494 <main+0x848>)
 8005418:	f012 f904 	bl	8017624 <HAL_UARTEx_ReceiveToIdle_DMA>
					LED_Stop(ORG_LED);
 800541c:	2000      	movs	r0, #0
 800541e:	f7fe feff 	bl	8004220 <LED_Stop>
					LED_Stop(RED_LED);
 8005422:	2004      	movs	r0, #4
 8005424:	f7fe fefc 	bl	8004220 <LED_Stop>
					LED_Start(GRN_LED, MEDIUM, HALF);
 8005428:	2206      	movs	r2, #6
 800542a:	2101      	movs	r1, #1
 800542c:	2008      	movs	r0, #8
 800542e:	f7fe fe2b 	bl	8004088 <LED_Start>
					state = IDLE;
 8005432:	4b1f      	ldr	r3, [pc, #124]	@ (80054b0 <main+0x864>)
 8005434:	2200      	movs	r2, #0
 8005436:	701a      	strb	r2, [r3, #0]
			break;
 8005438:	e01c      	b.n	8005474 <main+0x828>
				SIM_Send_TCP("R:OTA_INIT_ERROR");
 800543a:	4820      	ldr	r0, [pc, #128]	@ (80054bc <main+0x870>)
 800543c:	f7fd f92c 	bl	8002698 <SIM_Send_TCP>
				HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8005440:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005444:	4914      	ldr	r1, [pc, #80]	@ (8005498 <main+0x84c>)
 8005446:	4813      	ldr	r0, [pc, #76]	@ (8005494 <main+0x848>)
 8005448:	f012 f8ec 	bl	8017624 <HAL_UARTEx_ReceiveToIdle_DMA>
				LED_Stop(ORG_LED);
 800544c:	2000      	movs	r0, #0
 800544e:	f7fe fee7 	bl	8004220 <LED_Stop>
				LED_Stop(RED_LED);
 8005452:	2004      	movs	r0, #4
 8005454:	f7fe fee4 	bl	8004220 <LED_Stop>
				LED_Start(GRN_LED, MEDIUM, HALF);
 8005458:	2206      	movs	r2, #6
 800545a:	2101      	movs	r1, #1
 800545c:	2008      	movs	r0, #8
 800545e:	f7fe fe13 	bl	8004088 <LED_Start>
				state = IDLE;
 8005462:	4b13      	ldr	r3, [pc, #76]	@ (80054b0 <main+0x864>)
 8005464:	2200      	movs	r2, #0
 8005466:	701a      	strb	r2, [r3, #0]
			break;
 8005468:	e004      	b.n	8005474 <main+0x828>

		default:
			break;
 800546a:	bf00      	nop
 800546c:	e415      	b.n	8004c9a <main+0x4e>
			break;
 800546e:	bf00      	nop
 8005470:	e413      	b.n	8004c9a <main+0x4e>
			break;
 8005472:	bf00      	nop
		switch(state)
 8005474:	e411      	b.n	8004c9a <main+0x4e>
 8005476:	bf00      	nop
 8005478:	20004984 	.word	0x20004984
 800547c:	200005d8 	.word	0x200005d8
 8005480:	20004f3c 	.word	0x20004f3c
 8005484:	20001790 	.word	0x20001790
 8005488:	20004988 	.word	0x20004988
 800548c:	08018e50 	.word	0x08018e50
 8005490:	20001794 	.word	0x20001794
 8005494:	200004bc 	.word	0x200004bc
 8005498:	20004fb4 	.word	0x20004fb4
 800549c:	08018e54 	.word	0x08018e54
 80054a0:	08018e60 	.word	0x08018e60
 80054a4:	08018e70 	.word	0x08018e70
 80054a8:	08018e80 	.word	0x08018e80
 80054ac:	08018e90 	.word	0x08018e90
 80054b0:	200005d4 	.word	0x200005d4
 80054b4:	08018ea4 	.word	0x08018ea4
 80054b8:	08018eb4 	.word	0x08018eb4
 80054bc:	08018ec8 	.word	0x08018ec8

080054c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b096      	sub	sp, #88	@ 0x58
 80054c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80054c6:	f107 0314 	add.w	r3, r7, #20
 80054ca:	2244      	movs	r2, #68	@ 0x44
 80054cc:	2100      	movs	r1, #0
 80054ce:	4618      	mov	r0, r3
 80054d0:	f012 f9e6 	bl	80178a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80054d4:	463b      	mov	r3, r7
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	605a      	str	r2, [r3, #4]
 80054dc:	609a      	str	r2, [r3, #8]
 80054de:	60da      	str	r2, [r3, #12]
 80054e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80054e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80054e6:	f00a fe21 	bl	801012c <HAL_PWREx_ControlVoltageScaling>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80054f0:	f000 fdbc 	bl	800606c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80054f4:	2309      	movs	r3, #9
 80054f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80054f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80054fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80054fe:	2301      	movs	r3, #1
 8005500:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005502:	2302      	movs	r3, #2
 8005504:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005506:	2303      	movs	r3, #3
 8005508:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800550a:	2301      	movs	r3, #1
 800550c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800550e:	2314      	movs	r3, #20
 8005510:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005512:	2307      	movs	r3, #7
 8005514:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005516:	2302      	movs	r3, #2
 8005518:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800551a:	2302      	movs	r3, #2
 800551c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800551e:	f107 0314 	add.w	r3, r7, #20
 8005522:	4618      	mov	r0, r3
 8005524:	f00b faba 	bl	8010a9c <HAL_RCC_OscConfig>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800552e:	f000 fd9d 	bl	800606c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005532:	230f      	movs	r3, #15
 8005534:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005536:	2303      	movs	r3, #3
 8005538:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800553a:	2300      	movs	r3, #0
 800553c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800553e:	2300      	movs	r3, #0
 8005540:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005542:	2300      	movs	r3, #0
 8005544:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005546:	463b      	mov	r3, r7
 8005548:	2104      	movs	r1, #4
 800554a:	4618      	mov	r0, r3
 800554c:	f00b fe82 	bl	8011254 <HAL_RCC_ClockConfig>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005556:	f000 fd89 	bl	800606c <Error_Handler>
  }
}
 800555a:	bf00      	nop
 800555c:	3758      	adds	r7, #88	@ 0x58
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
	...

08005564 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08a      	sub	sp, #40	@ 0x28
 8005568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800556a:	f107 031c 	add.w	r3, r7, #28
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	605a      	str	r2, [r3, #4]
 8005574:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005576:	1d3b      	adds	r3, r7, #4
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	605a      	str	r2, [r3, #4]
 800557e:	609a      	str	r2, [r3, #8]
 8005580:	60da      	str	r2, [r3, #12]
 8005582:	611a      	str	r2, [r3, #16]
 8005584:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8005586:	4b30      	ldr	r3, [pc, #192]	@ (8005648 <MX_ADC1_Init+0xe4>)
 8005588:	4a30      	ldr	r2, [pc, #192]	@ (800564c <MX_ADC1_Init+0xe8>)
 800558a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800558c:	4b2e      	ldr	r3, [pc, #184]	@ (8005648 <MX_ADC1_Init+0xe4>)
 800558e:	2200      	movs	r2, #0
 8005590:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005592:	4b2d      	ldr	r3, [pc, #180]	@ (8005648 <MX_ADC1_Init+0xe4>)
 8005594:	2200      	movs	r2, #0
 8005596:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005598:	4b2b      	ldr	r3, [pc, #172]	@ (8005648 <MX_ADC1_Init+0xe4>)
 800559a:	2200      	movs	r2, #0
 800559c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800559e:	4b2a      	ldr	r3, [pc, #168]	@ (8005648 <MX_ADC1_Init+0xe4>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80055a4:	4b28      	ldr	r3, [pc, #160]	@ (8005648 <MX_ADC1_Init+0xe4>)
 80055a6:	2208      	movs	r2, #8
 80055a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80055aa:	4b27      	ldr	r3, [pc, #156]	@ (8005648 <MX_ADC1_Init+0xe4>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80055b0:	4b25      	ldr	r3, [pc, #148]	@ (8005648 <MX_ADC1_Init+0xe4>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80055b6:	4b24      	ldr	r3, [pc, #144]	@ (8005648 <MX_ADC1_Init+0xe4>)
 80055b8:	2201      	movs	r2, #1
 80055ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80055bc:	4b22      	ldr	r3, [pc, #136]	@ (8005648 <MX_ADC1_Init+0xe4>)
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 80055c4:	4b20      	ldr	r3, [pc, #128]	@ (8005648 <MX_ADC1_Init+0xe4>)
 80055c6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80055ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80055cc:	4b1e      	ldr	r3, [pc, #120]	@ (8005648 <MX_ADC1_Init+0xe4>)
 80055ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80055d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80055d4:	4b1c      	ldr	r3, [pc, #112]	@ (8005648 <MX_ADC1_Init+0xe4>)
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80055dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005648 <MX_ADC1_Init+0xe4>)
 80055de:	2200      	movs	r2, #0
 80055e0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80055e2:	4b19      	ldr	r3, [pc, #100]	@ (8005648 <MX_ADC1_Init+0xe4>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80055ea:	4817      	ldr	r0, [pc, #92]	@ (8005648 <MX_ADC1_Init+0xe4>)
 80055ec:	f006 ff96 	bl	800c51c <HAL_ADC_Init>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80055f6:	f000 fd39 	bl	800606c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80055fa:	2300      	movs	r3, #0
 80055fc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80055fe:	f107 031c 	add.w	r3, r7, #28
 8005602:	4619      	mov	r1, r3
 8005604:	4810      	ldr	r0, [pc, #64]	@ (8005648 <MX_ADC1_Init+0xe4>)
 8005606:	f008 f84f 	bl	800d6a8 <HAL_ADCEx_MultiModeConfigChannel>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8005610:	f000 fd2c 	bl	800606c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005614:	4b0e      	ldr	r3, [pc, #56]	@ (8005650 <MX_ADC1_Init+0xec>)
 8005616:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005618:	2306      	movs	r3, #6
 800561a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800561c:	2300      	movs	r3, #0
 800561e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005620:	237f      	movs	r3, #127	@ 0x7f
 8005622:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005624:	2304      	movs	r3, #4
 8005626:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8005628:	2300      	movs	r3, #0
 800562a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800562c:	1d3b      	adds	r3, r7, #4
 800562e:	4619      	mov	r1, r3
 8005630:	4805      	ldr	r0, [pc, #20]	@ (8005648 <MX_ADC1_Init+0xe4>)
 8005632:	f007 f9eb 	bl	800ca0c <HAL_ADC_ConfigChannel>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800563c:	f000 fd16 	bl	800606c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005640:	bf00      	nop
 8005642:	3728      	adds	r7, #40	@ 0x28
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	200000b0 	.word	0x200000b0
 800564c:	50040000 	.word	0x50040000
 8005650:	25b00200 	.word	0x25b00200

08005654 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8005658:	4b0d      	ldr	r3, [pc, #52]	@ (8005690 <MX_CRC_Init+0x3c>)
 800565a:	4a0e      	ldr	r2, [pc, #56]	@ (8005694 <MX_CRC_Init+0x40>)
 800565c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800565e:	4b0c      	ldr	r3, [pc, #48]	@ (8005690 <MX_CRC_Init+0x3c>)
 8005660:	2200      	movs	r2, #0
 8005662:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8005664:	4b0a      	ldr	r3, [pc, #40]	@ (8005690 <MX_CRC_Init+0x3c>)
 8005666:	2200      	movs	r2, #0
 8005668:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800566a:	4b09      	ldr	r3, [pc, #36]	@ (8005690 <MX_CRC_Init+0x3c>)
 800566c:	2200      	movs	r2, #0
 800566e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8005670:	4b07      	ldr	r3, [pc, #28]	@ (8005690 <MX_CRC_Init+0x3c>)
 8005672:	2200      	movs	r2, #0
 8005674:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8005676:	4b06      	ldr	r3, [pc, #24]	@ (8005690 <MX_CRC_Init+0x3c>)
 8005678:	2201      	movs	r2, #1
 800567a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800567c:	4804      	ldr	r0, [pc, #16]	@ (8005690 <MX_CRC_Init+0x3c>)
 800567e:	f008 f9ef 	bl	800da60 <HAL_CRC_Init>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8005688:	f000 fcf0 	bl	800606c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800568c:	bf00      	nop
 800568e:	bd80      	pop	{r7, pc}
 8005690:	2000015c 	.word	0x2000015c
 8005694:	40023000 	.word	0x40023000

08005698 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800569c:	4b1b      	ldr	r3, [pc, #108]	@ (800570c <MX_I2C3_Init+0x74>)
 800569e:	4a1c      	ldr	r2, [pc, #112]	@ (8005710 <MX_I2C3_Init+0x78>)
 80056a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 80056a2:	4b1a      	ldr	r3, [pc, #104]	@ (800570c <MX_I2C3_Init+0x74>)
 80056a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005714 <MX_I2C3_Init+0x7c>)
 80056a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80056a8:	4b18      	ldr	r3, [pc, #96]	@ (800570c <MX_I2C3_Init+0x74>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80056ae:	4b17      	ldr	r3, [pc, #92]	@ (800570c <MX_I2C3_Init+0x74>)
 80056b0:	2201      	movs	r2, #1
 80056b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80056b4:	4b15      	ldr	r3, [pc, #84]	@ (800570c <MX_I2C3_Init+0x74>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80056ba:	4b14      	ldr	r3, [pc, #80]	@ (800570c <MX_I2C3_Init+0x74>)
 80056bc:	2200      	movs	r2, #0
 80056be:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80056c0:	4b12      	ldr	r3, [pc, #72]	@ (800570c <MX_I2C3_Init+0x74>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80056c6:	4b11      	ldr	r3, [pc, #68]	@ (800570c <MX_I2C3_Init+0x74>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80056cc:	4b0f      	ldr	r3, [pc, #60]	@ (800570c <MX_I2C3_Init+0x74>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80056d2:	480e      	ldr	r0, [pc, #56]	@ (800570c <MX_I2C3_Init+0x74>)
 80056d4:	f009 ff34 	bl	800f540 <HAL_I2C_Init>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80056de:	f000 fcc5 	bl	800606c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80056e2:	2100      	movs	r1, #0
 80056e4:	4809      	ldr	r0, [pc, #36]	@ (800570c <MX_I2C3_Init+0x74>)
 80056e6:	f00a fc7b 	bl	800ffe0 <HAL_I2CEx_ConfigAnalogFilter>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80056f0:	f000 fcbc 	bl	800606c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80056f4:	2100      	movs	r1, #0
 80056f6:	4805      	ldr	r0, [pc, #20]	@ (800570c <MX_I2C3_Init+0x74>)
 80056f8:	f00a fcbd 	bl	8010076 <HAL_I2CEx_ConfigDigitalFilter>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8005702:	f000 fcb3 	bl	800606c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005706:	bf00      	nop
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20000180 	.word	0x20000180
 8005710:	40005c00 	.word	0x40005c00
 8005714:	10d19ce4 	.word	0x10d19ce4

08005718 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800571c:	4b0f      	ldr	r3, [pc, #60]	@ (800575c <MX_QUADSPI_Init+0x44>)
 800571e:	4a10      	ldr	r2, [pc, #64]	@ (8005760 <MX_QUADSPI_Init+0x48>)
 8005720:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8005722:	4b0e      	ldr	r3, [pc, #56]	@ (800575c <MX_QUADSPI_Init+0x44>)
 8005724:	2201      	movs	r2, #1
 8005726:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8005728:	4b0c      	ldr	r3, [pc, #48]	@ (800575c <MX_QUADSPI_Init+0x44>)
 800572a:	2201      	movs	r2, #1
 800572c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800572e:	4b0b      	ldr	r3, [pc, #44]	@ (800575c <MX_QUADSPI_Init+0x44>)
 8005730:	2200      	movs	r2, #0
 8005732:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8005734:	4b09      	ldr	r3, [pc, #36]	@ (800575c <MX_QUADSPI_Init+0x44>)
 8005736:	2218      	movs	r2, #24
 8005738:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800573a:	4b08      	ldr	r3, [pc, #32]	@ (800575c <MX_QUADSPI_Init+0x44>)
 800573c:	2200      	movs	r2, #0
 800573e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8005740:	4b06      	ldr	r3, [pc, #24]	@ (800575c <MX_QUADSPI_Init+0x44>)
 8005742:	2200      	movs	r2, #0
 8005744:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8005746:	4805      	ldr	r0, [pc, #20]	@ (800575c <MX_QUADSPI_Init+0x44>)
 8005748:	f00a fd46 	bl	80101d8 <HAL_QSPI_Init>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8005752:	f000 fc8b 	bl	800606c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8005756:	bf00      	nop
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	200001d4 	.word	0x200001d4
 8005760:	a0001000 	.word	0xa0001000

08005764 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b092      	sub	sp, #72	@ 0x48
 8005768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800576a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	605a      	str	r2, [r3, #4]
 8005774:	609a      	str	r2, [r3, #8]
 8005776:	60da      	str	r2, [r3, #12]
 8005778:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800577a:	2300      	movs	r3, #0
 800577c:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800577e:	1d3b      	adds	r3, r7, #4
 8005780:	222c      	movs	r2, #44	@ 0x2c
 8005782:	2100      	movs	r1, #0
 8005784:	4618      	mov	r0, r3
 8005786:	f012 f88b 	bl	80178a0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800578a:	4b3c      	ldr	r3, [pc, #240]	@ (800587c <MX_RTC_Init+0x118>)
 800578c:	4a3c      	ldr	r2, [pc, #240]	@ (8005880 <MX_RTC_Init+0x11c>)
 800578e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005790:	4b3a      	ldr	r3, [pc, #232]	@ (800587c <MX_RTC_Init+0x118>)
 8005792:	2200      	movs	r2, #0
 8005794:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005796:	4b39      	ldr	r3, [pc, #228]	@ (800587c <MX_RTC_Init+0x118>)
 8005798:	227f      	movs	r2, #127	@ 0x7f
 800579a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800579c:	4b37      	ldr	r3, [pc, #220]	@ (800587c <MX_RTC_Init+0x118>)
 800579e:	22ff      	movs	r2, #255	@ 0xff
 80057a0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80057a2:	4b36      	ldr	r3, [pc, #216]	@ (800587c <MX_RTC_Init+0x118>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80057a8:	4b34      	ldr	r3, [pc, #208]	@ (800587c <MX_RTC_Init+0x118>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80057ae:	4b33      	ldr	r3, [pc, #204]	@ (800587c <MX_RTC_Init+0x118>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80057b4:	4b31      	ldr	r3, [pc, #196]	@ (800587c <MX_RTC_Init+0x118>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80057ba:	4830      	ldr	r0, [pc, #192]	@ (800587c <MX_RTC_Init+0x118>)
 80057bc:	f00c fc2a 	bl	8012014 <HAL_RTC_Init>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80057c6:	f000 fc51 	bl	800606c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80057ca:	2300      	movs	r3, #0
 80057cc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0;
 80057d0:	2300      	movs	r3, #0
 80057d2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0;
 80057d6:	2300      	movs	r3, #0
 80057d8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80057dc:	2300      	movs	r3, #0
 80057de:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80057e0:	2300      	movs	r3, #0
 80057e2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80057e4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80057e8:	2200      	movs	r2, #0
 80057ea:	4619      	mov	r1, r3
 80057ec:	4823      	ldr	r0, [pc, #140]	@ (800587c <MX_RTC_Init+0x118>)
 80057ee:	f00c fc99 	bl	8012124 <HAL_RTC_SetTime>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80057f8:	f000 fc38 	bl	800606c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80057fc:	2301      	movs	r3, #1
 80057fe:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8005802:	2301      	movs	r3, #1
 8005804:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 1;
 8005808:	2301      	movs	r3, #1
 800580a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0;
 800580e:	2300      	movs	r3, #0
 8005810:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8005814:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005818:	2200      	movs	r2, #0
 800581a:	4619      	mov	r1, r3
 800581c:	4817      	ldr	r0, [pc, #92]	@ (800587c <MX_RTC_Init+0x118>)
 800581e:	f00c fd7a 	bl	8012316 <HAL_RTC_SetDate>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d001      	beq.n	800582c <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8005828:	f000 fc20 	bl	800606c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 800582c:	2300      	movs	r3, #0
 800582e:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8005830:	2300      	movs	r3, #0
 8005832:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8005834:	2300      	movs	r3, #0
 8005836:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8005838:	2300      	movs	r3, #0
 800583a:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800583c:	2300      	movs	r3, #0
 800583e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005840:	2300      	movs	r3, #0
 8005842:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8005844:	4b0f      	ldr	r3, [pc, #60]	@ (8005884 <MX_RTC_Init+0x120>)
 8005846:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8005848:	2300      	movs	r3, #0
 800584a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800584c:	2300      	movs	r3, #0
 800584e:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8005850:	2301      	movs	r3, #1
 8005852:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8005856:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800585a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800585c:	1d3b      	adds	r3, r7, #4
 800585e:	2200      	movs	r2, #0
 8005860:	4619      	mov	r1, r3
 8005862:	4806      	ldr	r0, [pc, #24]	@ (800587c <MX_RTC_Init+0x118>)
 8005864:	f00c fdde 	bl	8012424 <HAL_RTC_SetAlarm_IT>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 800586e:	f000 fbfd 	bl	800606c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005872:	bf00      	nop
 8005874:	3748      	adds	r7, #72	@ 0x48
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	20000218 	.word	0x20000218
 8005880:	40002800 	.word	0x40002800
 8005884:	80800080 	.word	0x80800080

08005888 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800588c:	4b1b      	ldr	r3, [pc, #108]	@ (80058fc <MX_SPI2_Init+0x74>)
 800588e:	4a1c      	ldr	r2, [pc, #112]	@ (8005900 <MX_SPI2_Init+0x78>)
 8005890:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005892:	4b1a      	ldr	r3, [pc, #104]	@ (80058fc <MX_SPI2_Init+0x74>)
 8005894:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005898:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800589a:	4b18      	ldr	r3, [pc, #96]	@ (80058fc <MX_SPI2_Init+0x74>)
 800589c:	2200      	movs	r2, #0
 800589e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80058a0:	4b16      	ldr	r3, [pc, #88]	@ (80058fc <MX_SPI2_Init+0x74>)
 80058a2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80058a6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80058a8:	4b14      	ldr	r3, [pc, #80]	@ (80058fc <MX_SPI2_Init+0x74>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80058ae:	4b13      	ldr	r3, [pc, #76]	@ (80058fc <MX_SPI2_Init+0x74>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80058b4:	4b11      	ldr	r3, [pc, #68]	@ (80058fc <MX_SPI2_Init+0x74>)
 80058b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058ba:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058bc:	4b0f      	ldr	r3, [pc, #60]	@ (80058fc <MX_SPI2_Init+0x74>)
 80058be:	2200      	movs	r2, #0
 80058c0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80058c2:	4b0e      	ldr	r3, [pc, #56]	@ (80058fc <MX_SPI2_Init+0x74>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80058c8:	4b0c      	ldr	r3, [pc, #48]	@ (80058fc <MX_SPI2_Init+0x74>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058ce:	4b0b      	ldr	r3, [pc, #44]	@ (80058fc <MX_SPI2_Init+0x74>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80058d4:	4b09      	ldr	r3, [pc, #36]	@ (80058fc <MX_SPI2_Init+0x74>)
 80058d6:	2207      	movs	r2, #7
 80058d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80058da:	4b08      	ldr	r3, [pc, #32]	@ (80058fc <MX_SPI2_Init+0x74>)
 80058dc:	2200      	movs	r2, #0
 80058de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80058e0:	4b06      	ldr	r3, [pc, #24]	@ (80058fc <MX_SPI2_Init+0x74>)
 80058e2:	2208      	movs	r2, #8
 80058e4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80058e6:	4805      	ldr	r0, [pc, #20]	@ (80058fc <MX_SPI2_Init+0x74>)
 80058e8:	f00c fff8 	bl	80128dc <HAL_SPI_Init>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80058f2:	f000 fbbb 	bl	800606c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80058f6:	bf00      	nop
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	2000023c 	.word	0x2000023c
 8005900:	40003800 	.word	0x40003800

08005904 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8005908:	4b1b      	ldr	r3, [pc, #108]	@ (8005978 <MX_SPI3_Init+0x74>)
 800590a:	4a1c      	ldr	r2, [pc, #112]	@ (800597c <MX_SPI3_Init+0x78>)
 800590c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800590e:	4b1a      	ldr	r3, [pc, #104]	@ (8005978 <MX_SPI3_Init+0x74>)
 8005910:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005914:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005916:	4b18      	ldr	r3, [pc, #96]	@ (8005978 <MX_SPI3_Init+0x74>)
 8005918:	2200      	movs	r2, #0
 800591a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800591c:	4b16      	ldr	r3, [pc, #88]	@ (8005978 <MX_SPI3_Init+0x74>)
 800591e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005922:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005924:	4b14      	ldr	r3, [pc, #80]	@ (8005978 <MX_SPI3_Init+0x74>)
 8005926:	2200      	movs	r2, #0
 8005928:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800592a:	4b13      	ldr	r3, [pc, #76]	@ (8005978 <MX_SPI3_Init+0x74>)
 800592c:	2200      	movs	r2, #0
 800592e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005930:	4b11      	ldr	r3, [pc, #68]	@ (8005978 <MX_SPI3_Init+0x74>)
 8005932:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005936:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8005938:	4b0f      	ldr	r3, [pc, #60]	@ (8005978 <MX_SPI3_Init+0x74>)
 800593a:	2218      	movs	r2, #24
 800593c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800593e:	4b0e      	ldr	r3, [pc, #56]	@ (8005978 <MX_SPI3_Init+0x74>)
 8005940:	2200      	movs	r2, #0
 8005942:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005944:	4b0c      	ldr	r3, [pc, #48]	@ (8005978 <MX_SPI3_Init+0x74>)
 8005946:	2200      	movs	r2, #0
 8005948:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800594a:	4b0b      	ldr	r3, [pc, #44]	@ (8005978 <MX_SPI3_Init+0x74>)
 800594c:	2200      	movs	r2, #0
 800594e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8005950:	4b09      	ldr	r3, [pc, #36]	@ (8005978 <MX_SPI3_Init+0x74>)
 8005952:	2207      	movs	r2, #7
 8005954:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005956:	4b08      	ldr	r3, [pc, #32]	@ (8005978 <MX_SPI3_Init+0x74>)
 8005958:	2200      	movs	r2, #0
 800595a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800595c:	4b06      	ldr	r3, [pc, #24]	@ (8005978 <MX_SPI3_Init+0x74>)
 800595e:	2208      	movs	r2, #8
 8005960:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005962:	4805      	ldr	r0, [pc, #20]	@ (8005978 <MX_SPI3_Init+0x74>)
 8005964:	f00c ffba 	bl	80128dc <HAL_SPI_Init>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800596e:	f000 fb7d 	bl	800606c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005972:	bf00      	nop
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	200002a0 	.word	0x200002a0
 800597c:	40003c00 	.word	0x40003c00

08005980 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b096      	sub	sp, #88	@ 0x58
 8005984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005986:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800598a:	2200      	movs	r2, #0
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	605a      	str	r2, [r3, #4]
 8005990:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005992:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005996:	2200      	movs	r2, #0
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	605a      	str	r2, [r3, #4]
 800599c:	609a      	str	r2, [r3, #8]
 800599e:	60da      	str	r2, [r3, #12]
 80059a0:	611a      	str	r2, [r3, #16]
 80059a2:	615a      	str	r2, [r3, #20]
 80059a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80059a6:	1d3b      	adds	r3, r7, #4
 80059a8:	222c      	movs	r2, #44	@ 0x2c
 80059aa:	2100      	movs	r1, #0
 80059ac:	4618      	mov	r0, r3
 80059ae:	f011 ff77 	bl	80178a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80059b2:	4b45      	ldr	r3, [pc, #276]	@ (8005ac8 <MX_TIM1_Init+0x148>)
 80059b4:	4a45      	ldr	r2, [pc, #276]	@ (8005acc <MX_TIM1_Init+0x14c>)
 80059b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1599;
 80059b8:	4b43      	ldr	r3, [pc, #268]	@ (8005ac8 <MX_TIM1_Init+0x148>)
 80059ba:	f240 623f 	movw	r2, #1599	@ 0x63f
 80059be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059c0:	4b41      	ldr	r3, [pc, #260]	@ (8005ac8 <MX_TIM1_Init+0x148>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 80059c6:	4b40      	ldr	r3, [pc, #256]	@ (8005ac8 <MX_TIM1_Init+0x148>)
 80059c8:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80059cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059ce:	4b3e      	ldr	r3, [pc, #248]	@ (8005ac8 <MX_TIM1_Init+0x148>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80059d4:	4b3c      	ldr	r3, [pc, #240]	@ (8005ac8 <MX_TIM1_Init+0x148>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80059da:	4b3b      	ldr	r3, [pc, #236]	@ (8005ac8 <MX_TIM1_Init+0x148>)
 80059dc:	2200      	movs	r2, #0
 80059de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80059e0:	4839      	ldr	r0, [pc, #228]	@ (8005ac8 <MX_TIM1_Init+0x148>)
 80059e2:	f00d ffef 	bl	80139c4 <HAL_TIM_PWM_Init>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80059ec:	f000 fb3e 	bl	800606c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059f0:	2300      	movs	r3, #0
 80059f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80059f4:	2300      	movs	r3, #0
 80059f6:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059f8:	2300      	movs	r3, #0
 80059fa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80059fc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005a00:	4619      	mov	r1, r3
 8005a02:	4831      	ldr	r0, [pc, #196]	@ (8005ac8 <MX_TIM1_Init+0x148>)
 8005a04:	f00f fe8c 	bl	8015720 <HAL_TIMEx_MasterConfigSynchronization>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8005a0e:	f000 fb2d 	bl	800606c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a12:	2360      	movs	r3, #96	@ 0x60
 8005a14:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8005a16:	2300      	movs	r3, #0
 8005a18:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a22:	2300      	movs	r3, #0
 8005a24:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005a26:	2300      	movs	r3, #0
 8005a28:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005a2e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005a32:	2200      	movs	r2, #0
 8005a34:	4619      	mov	r1, r3
 8005a36:	4824      	ldr	r0, [pc, #144]	@ (8005ac8 <MX_TIM1_Init+0x148>)
 8005a38:	f00e fe36 	bl	80146a8 <HAL_TIM_PWM_ConfigChannel>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8005a42:	f000 fb13 	bl	800606c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005a46:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005a4a:	2204      	movs	r2, #4
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	481e      	ldr	r0, [pc, #120]	@ (8005ac8 <MX_TIM1_Init+0x148>)
 8005a50:	f00e fe2a 	bl	80146a8 <HAL_TIM_PWM_ConfigChannel>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8005a5a:	f000 fb07 	bl	800606c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005a5e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005a62:	2208      	movs	r2, #8
 8005a64:	4619      	mov	r1, r3
 8005a66:	4818      	ldr	r0, [pc, #96]	@ (8005ac8 <MX_TIM1_Init+0x148>)
 8005a68:	f00e fe1e 	bl	80146a8 <HAL_TIM_PWM_ConfigChannel>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8005a72:	f000 fafb 	bl	800606c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005a76:	2300      	movs	r3, #0
 8005a78:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005a82:	2300      	movs	r3, #0
 8005a84:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005a86:	2300      	movs	r3, #0
 8005a88:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005a8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005a8e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005a94:	2300      	movs	r3, #0
 8005a96:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005a98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005aa6:	1d3b      	adds	r3, r7, #4
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4807      	ldr	r0, [pc, #28]	@ (8005ac8 <MX_TIM1_Init+0x148>)
 8005aac:	f00f fec0 	bl	8015830 <HAL_TIMEx_ConfigBreakDeadTime>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8005ab6:	f000 fad9 	bl	800606c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005aba:	4803      	ldr	r0, [pc, #12]	@ (8005ac8 <MX_TIM1_Init+0x148>)
 8005abc:	f002 fe66 	bl	800878c <HAL_TIM_MspPostInit>

}
 8005ac0:	bf00      	nop
 8005ac2:	3758      	adds	r7, #88	@ 0x58
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	20000304 	.word	0x20000304
 8005acc:	40012c00 	.word	0x40012c00

08005ad0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b088      	sub	sp, #32
 8005ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ad6:	f107 0314 	add.w	r3, r7, #20
 8005ada:	2200      	movs	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	605a      	str	r2, [r3, #4]
 8005ae0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005ae2:	1d3b      	adds	r3, r7, #4
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]
 8005ae8:	605a      	str	r2, [r3, #4]
 8005aea:	609a      	str	r2, [r3, #8]
 8005aec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005aee:	4b21      	ldr	r3, [pc, #132]	@ (8005b74 <MX_TIM2_Init+0xa4>)
 8005af0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005af4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005af6:	4b1f      	ldr	r3, [pc, #124]	@ (8005b74 <MX_TIM2_Init+0xa4>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005afc:	4b1d      	ldr	r3, [pc, #116]	@ (8005b74 <MX_TIM2_Init+0xa4>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8005b02:	4b1c      	ldr	r3, [pc, #112]	@ (8005b74 <MX_TIM2_Init+0xa4>)
 8005b04:	f04f 32ff 	mov.w	r2, #4294967295
 8005b08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8005b74 <MX_TIM2_Init+0xa4>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b10:	4b18      	ldr	r3, [pc, #96]	@ (8005b74 <MX_TIM2_Init+0xa4>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8005b16:	4817      	ldr	r0, [pc, #92]	@ (8005b74 <MX_TIM2_Init+0xa4>)
 8005b18:	f00e f948 	bl	8013dac <HAL_TIM_IC_Init>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005b22:	f000 faa3 	bl	800606c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b26:	2300      	movs	r3, #0
 8005b28:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005b2e:	f107 0314 	add.w	r3, r7, #20
 8005b32:	4619      	mov	r1, r3
 8005b34:	480f      	ldr	r0, [pc, #60]	@ (8005b74 <MX_TIM2_Init+0xa4>)
 8005b36:	f00f fdf3 	bl	8015720 <HAL_TIMEx_MasterConfigSynchronization>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8005b40:	f000 fa94 	bl	800606c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005b44:	2300      	movs	r3, #0
 8005b46:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005b54:	1d3b      	adds	r3, r7, #4
 8005b56:	2200      	movs	r2, #0
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4806      	ldr	r0, [pc, #24]	@ (8005b74 <MX_TIM2_Init+0xa4>)
 8005b5c:	f00e fd08 	bl	8014570 <HAL_TIM_IC_ConfigChannel>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d001      	beq.n	8005b6a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8005b66:	f000 fa81 	bl	800606c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005b6a:	bf00      	nop
 8005b6c:	3720      	adds	r7, #32
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20000350 	.word	0x20000350

08005b78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b090      	sub	sp, #64	@ 0x40
 8005b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8005b7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	605a      	str	r2, [r3, #4]
 8005b88:	609a      	str	r2, [r3, #8]
 8005b8a:	60da      	str	r2, [r3, #12]
 8005b8c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b8e:	f107 0320 	add.w	r3, r7, #32
 8005b92:	2200      	movs	r2, #0
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	605a      	str	r2, [r3, #4]
 8005b98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b9a:	1d3b      	adds	r3, r7, #4
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	605a      	str	r2, [r3, #4]
 8005ba2:	609a      	str	r2, [r3, #8]
 8005ba4:	60da      	str	r2, [r3, #12]
 8005ba6:	611a      	str	r2, [r3, #16]
 8005ba8:	615a      	str	r2, [r3, #20]
 8005baa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005bac:	4b2c      	ldr	r3, [pc, #176]	@ (8005c60 <MX_TIM3_Init+0xe8>)
 8005bae:	4a2d      	ldr	r2, [pc, #180]	@ (8005c64 <MX_TIM3_Init+0xec>)
 8005bb0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8005c60 <MX_TIM3_Init+0xe8>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bb8:	4b29      	ldr	r3, [pc, #164]	@ (8005c60 <MX_TIM3_Init+0xe8>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 31;
 8005bbe:	4b28      	ldr	r3, [pc, #160]	@ (8005c60 <MX_TIM3_Init+0xe8>)
 8005bc0:	221f      	movs	r2, #31
 8005bc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bc4:	4b26      	ldr	r3, [pc, #152]	@ (8005c60 <MX_TIM3_Init+0xe8>)
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005bca:	4b25      	ldr	r3, [pc, #148]	@ (8005c60 <MX_TIM3_Init+0xe8>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005bd0:	4823      	ldr	r0, [pc, #140]	@ (8005c60 <MX_TIM3_Init+0xe8>)
 8005bd2:	f00d fdaf 	bl	8013734 <HAL_TIM_Base_Init>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8005bdc:	f000 fa46 	bl	800606c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005be0:	481f      	ldr	r0, [pc, #124]	@ (8005c60 <MX_TIM3_Init+0xe8>)
 8005be2:	f00d feef 	bl	80139c4 <HAL_TIM_PWM_Init>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8005bec:	f000 fa3e 	bl	800606c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8005bf0:	2307      	movs	r3, #7
 8005bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8005bf4:	2330      	movs	r3, #48	@ 0x30
 8005bf6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8005bf8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	4818      	ldr	r0, [pc, #96]	@ (8005c60 <MX_TIM3_Init+0xe8>)
 8005c00:	f00e ff2f 	bl	8014a62 <HAL_TIM_SlaveConfigSynchro>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8005c0a:	f000 fa2f 	bl	800606c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c12:	2300      	movs	r3, #0
 8005c14:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005c16:	f107 0320 	add.w	r3, r7, #32
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	4810      	ldr	r0, [pc, #64]	@ (8005c60 <MX_TIM3_Init+0xe8>)
 8005c1e:	f00f fd7f 	bl	8015720 <HAL_TIMEx_MasterConfigSynchronization>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8005c28:	f000 fa20 	bl	800606c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005c2c:	2360      	movs	r3, #96	@ 0x60
 8005c2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 15;
 8005c30:	230f      	movs	r3, #15
 8005c32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005c34:	2300      	movs	r3, #0
 8005c36:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005c3c:	1d3b      	adds	r3, r7, #4
 8005c3e:	2208      	movs	r2, #8
 8005c40:	4619      	mov	r1, r3
 8005c42:	4807      	ldr	r0, [pc, #28]	@ (8005c60 <MX_TIM3_Init+0xe8>)
 8005c44:	f00e fd30 	bl	80146a8 <HAL_TIM_PWM_ConfigChannel>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8005c4e:	f000 fa0d 	bl	800606c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005c52:	4803      	ldr	r0, [pc, #12]	@ (8005c60 <MX_TIM3_Init+0xe8>)
 8005c54:	f002 fd9a 	bl	800878c <HAL_TIM_MspPostInit>

}
 8005c58:	bf00      	nop
 8005c5a:	3740      	adds	r7, #64	@ 0x40
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	2000039c 	.word	0x2000039c
 8005c64:	40000400 	.word	0x40000400

08005c68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08e      	sub	sp, #56	@ 0x38
 8005c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	605a      	str	r2, [r3, #4]
 8005c78:	609a      	str	r2, [r3, #8]
 8005c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c7c:	f107 031c 	add.w	r3, r7, #28
 8005c80:	2200      	movs	r2, #0
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	605a      	str	r2, [r3, #4]
 8005c86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c88:	463b      	mov	r3, r7
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	605a      	str	r2, [r3, #4]
 8005c90:	609a      	str	r2, [r3, #8]
 8005c92:	60da      	str	r2, [r3, #12]
 8005c94:	611a      	str	r2, [r3, #16]
 8005c96:	615a      	str	r2, [r3, #20]
 8005c98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005c9a:	4b2b      	ldr	r3, [pc, #172]	@ (8005d48 <MX_TIM4_Init+0xe0>)
 8005c9c:	4a2b      	ldr	r2, [pc, #172]	@ (8005d4c <MX_TIM4_Init+0xe4>)
 8005c9e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8005ca0:	4b29      	ldr	r3, [pc, #164]	@ (8005d48 <MX_TIM4_Init+0xe0>)
 8005ca2:	2263      	movs	r2, #99	@ 0x63
 8005ca4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ca6:	4b28      	ldr	r3, [pc, #160]	@ (8005d48 <MX_TIM4_Init+0xe0>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8005cac:	4b26      	ldr	r3, [pc, #152]	@ (8005d48 <MX_TIM4_Init+0xe0>)
 8005cae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005cb2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cb4:	4b24      	ldr	r3, [pc, #144]	@ (8005d48 <MX_TIM4_Init+0xe0>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005cba:	4b23      	ldr	r3, [pc, #140]	@ (8005d48 <MX_TIM4_Init+0xe0>)
 8005cbc:	2280      	movs	r2, #128	@ 0x80
 8005cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005cc0:	4821      	ldr	r0, [pc, #132]	@ (8005d48 <MX_TIM4_Init+0xe0>)
 8005cc2:	f00d fd37 	bl	8013734 <HAL_TIM_Base_Init>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8005ccc:	f000 f9ce 	bl	800606c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005cd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005cd6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005cda:	4619      	mov	r1, r3
 8005cdc:	481a      	ldr	r0, [pc, #104]	@ (8005d48 <MX_TIM4_Init+0xe0>)
 8005cde:	f00e fdf7 	bl	80148d0 <HAL_TIM_ConfigClockSource>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8005ce8:	f000 f9c0 	bl	800606c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8005cec:	4816      	ldr	r0, [pc, #88]	@ (8005d48 <MX_TIM4_Init+0xe0>)
 8005cee:	f00d fe08 	bl	8013902 <HAL_TIM_OC_Init>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8005cf8:	f000 f9b8 	bl	800606c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005cfc:	2320      	movs	r3, #32
 8005cfe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d00:	2300      	movs	r3, #0
 8005d02:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005d04:	f107 031c 	add.w	r3, r7, #28
 8005d08:	4619      	mov	r1, r3
 8005d0a:	480f      	ldr	r0, [pc, #60]	@ (8005d48 <MX_TIM4_Init+0xe0>)
 8005d0c:	f00f fd08 	bl	8015720 <HAL_TIMEx_MasterConfigSynchronization>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005d16:	f000 f9a9 	bl	800606c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d26:	2300      	movs	r3, #0
 8005d28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005d2a:	463b      	mov	r3, r7
 8005d2c:	2208      	movs	r2, #8
 8005d2e:	4619      	mov	r1, r3
 8005d30:	4805      	ldr	r0, [pc, #20]	@ (8005d48 <MX_TIM4_Init+0xe0>)
 8005d32:	f00e fba3 	bl	801447c <HAL_TIM_OC_ConfigChannel>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8005d3c:	f000 f996 	bl	800606c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005d40:	bf00      	nop
 8005d42:	3738      	adds	r7, #56	@ 0x38
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	200003e8 	.word	0x200003e8
 8005d4c:	40000800 	.word	0x40000800

08005d50 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005d54:	4b14      	ldr	r3, [pc, #80]	@ (8005da8 <MX_UART4_Init+0x58>)
 8005d56:	4a15      	ldr	r2, [pc, #84]	@ (8005dac <MX_UART4_Init+0x5c>)
 8005d58:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8005d5a:	4b13      	ldr	r3, [pc, #76]	@ (8005da8 <MX_UART4_Init+0x58>)
 8005d5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005d60:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005d62:	4b11      	ldr	r3, [pc, #68]	@ (8005da8 <MX_UART4_Init+0x58>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005d68:	4b0f      	ldr	r3, [pc, #60]	@ (8005da8 <MX_UART4_Init+0x58>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8005da8 <MX_UART4_Init+0x58>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005d74:	4b0c      	ldr	r3, [pc, #48]	@ (8005da8 <MX_UART4_Init+0x58>)
 8005d76:	220c      	movs	r2, #12
 8005d78:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005da8 <MX_UART4_Init+0x58>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d80:	4b09      	ldr	r3, [pc, #36]	@ (8005da8 <MX_UART4_Init+0x58>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d86:	4b08      	ldr	r3, [pc, #32]	@ (8005da8 <MX_UART4_Init+0x58>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d8c:	4b06      	ldr	r3, [pc, #24]	@ (8005da8 <MX_UART4_Init+0x58>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8005d92:	4805      	ldr	r0, [pc, #20]	@ (8005da8 <MX_UART4_Init+0x58>)
 8005d94:	f00f fe36 	bl	8015a04 <HAL_HalfDuplex_Init>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8005d9e:	f000 f965 	bl	800606c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005da2:	bf00      	nop
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000434 	.word	0x20000434
 8005dac:	40004c00 	.word	0x40004c00

08005db0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005db4:	4b14      	ldr	r3, [pc, #80]	@ (8005e08 <MX_USART1_UART_Init+0x58>)
 8005db6:	4a15      	ldr	r2, [pc, #84]	@ (8005e0c <MX_USART1_UART_Init+0x5c>)
 8005db8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8005dba:	4b13      	ldr	r3, [pc, #76]	@ (8005e08 <MX_USART1_UART_Init+0x58>)
 8005dbc:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8005dc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005dc2:	4b11      	ldr	r3, [pc, #68]	@ (8005e08 <MX_USART1_UART_Init+0x58>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8005e08 <MX_USART1_UART_Init+0x58>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005dce:	4b0e      	ldr	r3, [pc, #56]	@ (8005e08 <MX_USART1_UART_Init+0x58>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8005e08 <MX_USART1_UART_Init+0x58>)
 8005dd6:	220c      	movs	r2, #12
 8005dd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005dda:	4b0b      	ldr	r3, [pc, #44]	@ (8005e08 <MX_USART1_UART_Init+0x58>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005de0:	4b09      	ldr	r3, [pc, #36]	@ (8005e08 <MX_USART1_UART_Init+0x58>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005de6:	4b08      	ldr	r3, [pc, #32]	@ (8005e08 <MX_USART1_UART_Init+0x58>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005dec:	4b06      	ldr	r3, [pc, #24]	@ (8005e08 <MX_USART1_UART_Init+0x58>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005df2:	4805      	ldr	r0, [pc, #20]	@ (8005e08 <MX_USART1_UART_Init+0x58>)
 8005df4:	f00f fdb8 	bl	8015968 <HAL_UART_Init>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005dfe:	f000 f935 	bl	800606c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005e02:	bf00      	nop
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	200004bc 	.word	0x200004bc
 8005e0c:	40013800 	.word	0x40013800

08005e10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005e16:	4b14      	ldr	r3, [pc, #80]	@ (8005e68 <MX_DMA_Init+0x58>)
 8005e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e1a:	4a13      	ldr	r2, [pc, #76]	@ (8005e68 <MX_DMA_Init+0x58>)
 8005e1c:	f043 0301 	orr.w	r3, r3, #1
 8005e20:	6493      	str	r3, [r2, #72]	@ 0x48
 8005e22:	4b11      	ldr	r3, [pc, #68]	@ (8005e68 <MX_DMA_Init+0x58>)
 8005e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	607b      	str	r3, [r7, #4]
 8005e2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005e2e:	2200      	movs	r2, #0
 8005e30:	2100      	movs	r1, #0
 8005e32:	200b      	movs	r0, #11
 8005e34:	f007 fdd9 	bl	800d9ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005e38:	200b      	movs	r0, #11
 8005e3a:	f007 fdf2 	bl	800da22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8005e3e:	2200      	movs	r2, #0
 8005e40:	2100      	movs	r1, #0
 8005e42:	200e      	movs	r0, #14
 8005e44:	f007 fdd1 	bl	800d9ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8005e48:	200e      	movs	r0, #14
 8005e4a:	f007 fdea 	bl	800da22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005e4e:	2200      	movs	r2, #0
 8005e50:	2100      	movs	r1, #0
 8005e52:	200f      	movs	r0, #15
 8005e54:	f007 fdc9 	bl	800d9ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8005e58:	200f      	movs	r0, #15
 8005e5a:	f007 fde2 	bl	800da22 <HAL_NVIC_EnableIRQ>

}
 8005e5e:	bf00      	nop
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	40021000 	.word	0x40021000

08005e6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08a      	sub	sp, #40	@ 0x28
 8005e70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e72:	f107 0314 	add.w	r3, r7, #20
 8005e76:	2200      	movs	r2, #0
 8005e78:	601a      	str	r2, [r3, #0]
 8005e7a:	605a      	str	r2, [r3, #4]
 8005e7c:	609a      	str	r2, [r3, #8]
 8005e7e:	60da      	str	r2, [r3, #12]
 8005e80:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e82:	4b76      	ldr	r3, [pc, #472]	@ (800605c <MX_GPIO_Init+0x1f0>)
 8005e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e86:	4a75      	ldr	r2, [pc, #468]	@ (800605c <MX_GPIO_Init+0x1f0>)
 8005e88:	f043 0304 	orr.w	r3, r3, #4
 8005e8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e8e:	4b73      	ldr	r3, [pc, #460]	@ (800605c <MX_GPIO_Init+0x1f0>)
 8005e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e92:	f003 0304 	and.w	r3, r3, #4
 8005e96:	613b      	str	r3, [r7, #16]
 8005e98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005e9a:	4b70      	ldr	r3, [pc, #448]	@ (800605c <MX_GPIO_Init+0x1f0>)
 8005e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e9e:	4a6f      	ldr	r2, [pc, #444]	@ (800605c <MX_GPIO_Init+0x1f0>)
 8005ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ea6:	4b6d      	ldr	r3, [pc, #436]	@ (800605c <MX_GPIO_Init+0x1f0>)
 8005ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005eb2:	4b6a      	ldr	r3, [pc, #424]	@ (800605c <MX_GPIO_Init+0x1f0>)
 8005eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eb6:	4a69      	ldr	r2, [pc, #420]	@ (800605c <MX_GPIO_Init+0x1f0>)
 8005eb8:	f043 0301 	orr.w	r3, r3, #1
 8005ebc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ebe:	4b67      	ldr	r3, [pc, #412]	@ (800605c <MX_GPIO_Init+0x1f0>)
 8005ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	60bb      	str	r3, [r7, #8]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005eca:	4b64      	ldr	r3, [pc, #400]	@ (800605c <MX_GPIO_Init+0x1f0>)
 8005ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ece:	4a63      	ldr	r2, [pc, #396]	@ (800605c <MX_GPIO_Init+0x1f0>)
 8005ed0:	f043 0302 	orr.w	r3, r3, #2
 8005ed4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ed6:	4b61      	ldr	r3, [pc, #388]	@ (800605c <MX_GPIO_Init+0x1f0>)
 8005ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	607b      	str	r3, [r7, #4]
 8005ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ee2:	4b5e      	ldr	r3, [pc, #376]	@ (800605c <MX_GPIO_Init+0x1f0>)
 8005ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ee6:	4a5d      	ldr	r2, [pc, #372]	@ (800605c <MX_GPIO_Init+0x1f0>)
 8005ee8:	f043 0308 	orr.w	r3, r3, #8
 8005eec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005eee:	4b5b      	ldr	r3, [pc, #364]	@ (800605c <MX_GPIO_Init+0x1f0>)
 8005ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ef2:	f003 0308 	and.w	r3, r3, #8
 8005ef6:	603b      	str	r3, [r7, #0]
 8005ef8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DBG_GPIO_Port, DBG_Pin, GPIO_PIN_RESET);
 8005efa:	2200      	movs	r2, #0
 8005efc:	2108      	movs	r1, #8
 8005efe:	4858      	ldr	r0, [pc, #352]	@ (8006060 <MX_GPIO_Init+0x1f4>)
 8005f00:	f009 faee 	bl	800f4e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 8005f04:	2201      	movs	r2, #1
 8005f06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f0a:	4856      	ldr	r0, [pc, #344]	@ (8006064 <MX_GPIO_Init+0x1f8>)
 8005f0c:	f009 fae8 	bl	800f4e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH_nWP_Pin|FLASH_nRESET_Pin, GPIO_PIN_SET);
 8005f10:	2201      	movs	r2, #1
 8005f12:	21c0      	movs	r1, #192	@ 0xc0
 8005f14:	4852      	ldr	r0, [pc, #328]	@ (8006060 <MX_GPIO_Init+0x1f4>)
 8005f16:	f009 fae3 	bl	800f4e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LTE_POWER_ON_Pin|LTE_RESET_Pin|ACC_nCS_Pin, GPIO_PIN_RESET);
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 8005f20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005f24:	f009 fadc 	bl	800f4e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DTR_GPIO_Port, DTR_Pin, GPIO_PIN_RESET);
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005f2e:	484d      	ldr	r0, [pc, #308]	@ (8006064 <MX_GPIO_Init+0x1f8>)
 8005f30:	f009 fad6 	bl	800f4e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USR_BTN_Pin PC4 */
  GPIO_InitStruct.Pin = USR_BTN_Pin|GPIO_PIN_4;
 8005f34:	f242 0310 	movw	r3, #8208	@ 0x2010
 8005f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005f3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005f3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f40:	2300      	movs	r3, #0
 8005f42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f44:	f107 0314 	add.w	r3, r7, #20
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4845      	ldr	r0, [pc, #276]	@ (8006060 <MX_GPIO_Init+0x1f4>)
 8005f4c:	f009 f906 	bl	800f15c <HAL_GPIO_Init>

  /*Configure GPIO pins : DBG_Pin FLASH_nWP_Pin FLASH_nRESET_Pin */
  GPIO_InitStruct.Pin = DBG_Pin|FLASH_nWP_Pin|FLASH_nRESET_Pin;
 8005f50:	23c8      	movs	r3, #200	@ 0xc8
 8005f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f54:	2301      	movs	r3, #1
 8005f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f60:	f107 0314 	add.w	r3, r7, #20
 8005f64:	4619      	mov	r1, r3
 8005f66:	483e      	ldr	r0, [pc, #248]	@ (8006060 <MX_GPIO_Init+0x1f4>)
 8005f68:	f009 f8f8 	bl	800f15c <HAL_GPIO_Init>

  /*Configure GPIO pin : LTE_STATUS_Pin */
  GPIO_InitStruct.Pin = LTE_STATUS_Pin;
 8005f6c:	2308      	movs	r3, #8
 8005f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f70:	2300      	movs	r3, #0
 8005f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f74:	2300      	movs	r3, #0
 8005f76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTE_STATUS_GPIO_Port, &GPIO_InitStruct);
 8005f78:	f107 0314 	add.w	r3, r7, #20
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005f82:	f009 f8eb 	bl	800f15c <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_nCS_Pin DTR_Pin */
  GPIO_InitStruct.Pin = FLASH_nCS_Pin|DTR_Pin;
 8005f86:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8005f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f90:	2300      	movs	r3, #0
 8005f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f94:	2300      	movs	r3, #0
 8005f96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f98:	f107 0314 	add.w	r3, r7, #20
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4831      	ldr	r0, [pc, #196]	@ (8006064 <MX_GPIO_Init+0x1f8>)
 8005fa0:	f009 f8dc 	bl	800f15c <HAL_GPIO_Init>

  /*Configure GPIO pins : LTE_POWER_ON_Pin LTE_RESET_Pin ACC_nCS_Pin */
  GPIO_InitStruct.Pin = LTE_POWER_ON_Pin|LTE_RESET_Pin|ACC_nCS_Pin;
 8005fa4:	f44f 4318 	mov.w	r3, #38912	@ 0x9800
 8005fa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005faa:	2301      	movs	r3, #1
 8005fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fb6:	f107 0314 	add.w	r3, r7, #20
 8005fba:	4619      	mov	r1, r3
 8005fbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005fc0:	f009 f8cc 	bl	800f15c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005fc4:	2304      	movs	r3, #4
 8005fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005fc8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005fd2:	f107 0314 	add.w	r3, r7, #20
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	4823      	ldr	r0, [pc, #140]	@ (8006068 <MX_GPIO_Init+0x1fc>)
 8005fda:	f009 f8bf 	bl	800f15c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCD_Pin */
  GPIO_InitStruct.Pin = DCD_Pin;
 8005fde:	2320      	movs	r3, #32
 8005fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DCD_GPIO_Port, &GPIO_InitStruct);
 8005fea:	f107 0314 	add.w	r3, r7, #20
 8005fee:	4619      	mov	r1, r3
 8005ff0:	481c      	ldr	r0, [pc, #112]	@ (8006064 <MX_GPIO_Init+0x1f8>)
 8005ff2:	f009 f8b3 	bl	800f15c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005ff6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005ffc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8006000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006002:	2300      	movs	r3, #0
 8006004:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006006:	f107 0314 	add.w	r3, r7, #20
 800600a:	4619      	mov	r1, r3
 800600c:	4815      	ldr	r0, [pc, #84]	@ (8006064 <MX_GPIO_Init+0x1f8>)
 800600e:	f009 f8a5 	bl	800f15c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8006012:	2200      	movs	r2, #0
 8006014:	2100      	movs	r1, #0
 8006016:	2008      	movs	r0, #8
 8006018:	f007 fce7 	bl	800d9ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800601c:	2008      	movs	r0, #8
 800601e:	f007 fd00 	bl	800da22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8006022:	2200      	movs	r2, #0
 8006024:	2101      	movs	r1, #1
 8006026:	200a      	movs	r0, #10
 8006028:	f007 fcdf 	bl	800d9ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800602c:	200a      	movs	r0, #10
 800602e:	f007 fcf8 	bl	800da22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8006032:	2200      	movs	r2, #0
 8006034:	2103      	movs	r1, #3
 8006036:	2017      	movs	r0, #23
 8006038:	f007 fcd7 	bl	800d9ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800603c:	2017      	movs	r0, #23
 800603e:	f007 fcf0 	bl	800da22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8006042:	2200      	movs	r2, #0
 8006044:	2102      	movs	r1, #2
 8006046:	2028      	movs	r0, #40	@ 0x28
 8006048:	f007 fccf 	bl	800d9ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800604c:	2028      	movs	r0, #40	@ 0x28
 800604e:	f007 fce8 	bl	800da22 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8006052:	bf00      	nop
 8006054:	3728      	adds	r7, #40	@ 0x28
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	40021000 	.word	0x40021000
 8006060:	48000800 	.word	0x48000800
 8006064:	48000400 	.word	0x48000400
 8006068:	48000c00 	.word	0x48000c00

0800606c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006070:	b672      	cpsid	i
}
 8006072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 8006074:	bf00      	nop
 8006076:	e7fd      	b.n	8006074 <Error_Handler+0x8>

08006078 <OTA_Init>:
#include "base64.h"


/*-----INIZIALIZZAZIONE OTA-----*/
int OTA_Init(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 800607e:	2300      	movs	r3, #0
 8006080:	71fb      	strb	r3, [r7, #7]

	if (sys.OTA_File_isOpen)
 8006082:	4b10      	ldr	r3, [pc, #64]	@ (80060c4 <OTA_Init+0x4c>)
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	d002      	beq.n	8006096 <OTA_Init+0x1e>
	{
		f_close(&sys.OTA_File);
 8006090:	480d      	ldr	r0, [pc, #52]	@ (80060c8 <OTA_Init+0x50>)
 8006092:	f005 f92b 	bl	800b2ec <f_close>
	}

	sys.OTA_File_isOpen = 0;
 8006096:	4a0b      	ldr	r2, [pc, #44]	@ (80060c4 <OTA_Init+0x4c>)
 8006098:	7813      	ldrb	r3, [r2, #0]
 800609a:	f023 0301 	bic.w	r3, r3, #1
 800609e:	7013      	strb	r3, [r2, #0]

	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ | FA_WRITE | FA_CREATE_ALWAYS);
 80060a0:	220b      	movs	r2, #11
 80060a2:	490a      	ldr	r1, [pc, #40]	@ (80060cc <OTA_Init+0x54>)
 80060a4:	4808      	ldr	r0, [pc, #32]	@ (80060c8 <OTA_Init+0x50>)
 80060a6:	f004 fc2d 	bl	800a904 <f_open>
 80060aa:	4603      	mov	r3, r0
 80060ac:	71fb      	strb	r3, [r7, #7]

	if (fRes != FR_OK)
 80060ae:	79fb      	ldrb	r3, [r7, #7]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <OTA_Init+0x42>
	{
		return -1;
 80060b4:	f04f 33ff 	mov.w	r3, #4294967295
 80060b8:	e000      	b.n	80060bc <OTA_Init+0x44>
	}

	return 0;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	200005d8 	.word	0x200005d8
 80060c8:	200005dc 	.word	0x200005dc
 80060cc:	08018edc 	.word	0x08018edc

080060d0 <OTA_Receive>:

/*-----RICEZIONE FILE OTA-----*/
int OTA_Receive(void)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	f6ad 3dc8 	subw	sp, sp, #3016	@ 0xbc8
 80060d6:	af00      	add	r7, sp, #0
	uint8_t rx_buffer[1500];
	UINT bytes_written = 0;
 80060d8:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 80060dc:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]
	uint8_t bin_buffer[1500];
	uint16_t Rx_Len = 0;
 80060e4:	2300      	movs	r3, #0
 80060e6:	f8a7 3bc6 	strh.w	r3, [r7, #3014]	@ 0xbc6

	while (1)
	{
		Rx_Len = SIM_Receive_Response((char*)rx_buffer, 5000);
 80060ea:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80060ee:	f241 3188 	movw	r1, #5000	@ 0x1388
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fc f898 	bl	8002228 <SIM_Receive_Response>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f8a7 3bc6 	strh.w	r3, [r7, #3014]	@ 0xbc6
		if (rx_buffer[0] == '\0' || (rx_buffer[0] == '\r' && rx_buffer[1] == '\n'))
 80060fe:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 8006102:	f5a3 63bd 	sub.w	r3, r3, #1512	@ 0x5e8
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d04e      	beq.n	80061aa <OTA_Receive+0xda>
 800610c:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 8006110:	f5a3 63bd 	sub.w	r3, r3, #1512	@ 0x5e8
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	2b0d      	cmp	r3, #13
 8006118:	d106      	bne.n	8006128 <OTA_Receive+0x58>
 800611a:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 800611e:	f5a3 63bd 	sub.w	r3, r3, #1512	@ 0x5e8
 8006122:	785b      	ldrb	r3, [r3, #1]
 8006124:	2b0a      	cmp	r3, #10
 8006126:	d040      	beq.n	80061aa <OTA_Receive+0xda>
		{
			break;
		}
		if(strncmp((char*)rx_buffer, "EOF", 3) == 0)
 8006128:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 800612c:	2203      	movs	r2, #3
 800612e:	4926      	ldr	r1, [pc, #152]	@ (80061c8 <OTA_Receive+0xf8>)
 8006130:	4618      	mov	r0, r3
 8006132:	f011 fbca 	bl	80178ca <strncmp>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d035      	beq.n	80061a8 <OTA_Receive+0xd8>
		{
			break;
		}
		if (Rx_Len == 0)
 800613c:	f8b7 3bc6 	ldrh.w	r3, [r7, #3014]	@ 0xbc6
 8006140:	2b00      	cmp	r3, #0
 8006142:	d105      	bne.n	8006150 <OTA_Receive+0x80>
		{
			f_close(&sys.OTA_File);
 8006144:	4821      	ldr	r0, [pc, #132]	@ (80061cc <OTA_Receive+0xfc>)
 8006146:	f005 f8d1 	bl	800b2ec <f_close>
			return -1;
 800614a:	f04f 33ff 	mov.w	r3, #4294967295
 800614e:	e035      	b.n	80061bc <OTA_Receive+0xec>
		}
		size_t base64_len = strlen((char*)rx_buffer);
 8006150:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8006154:	4618      	mov	r0, r3
 8006156:	f7fa f845 	bl	80001e4 <strlen>
 800615a:	f8c7 0bc0 	str.w	r0, [r7, #3008]	@ 0xbc0
		size_t bin_len = Base64_Decode((char*)rx_buffer, bin_buffer, base64_len);
 800615e:	4639      	mov	r1, r7
 8006160:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8006164:	f8d7 2bc0 	ldr.w	r2, [r7, #3008]	@ 0xbc0
 8006168:	4618      	mov	r0, r3
 800616a:	f7fc fced 	bl	8002b48 <Base64_Decode>
 800616e:	f8c7 0bbc 	str.w	r0, [r7, #3004]	@ 0xbbc
		f_write(&sys.OTA_File, bin_buffer, bin_len, &bytes_written);
 8006172:	f207 53dc 	addw	r3, r7, #1500	@ 0x5dc
 8006176:	4639      	mov	r1, r7
 8006178:	f8d7 2bbc 	ldr.w	r2, [r7, #3004]	@ 0xbbc
 800617c:	4813      	ldr	r0, [pc, #76]	@ (80061cc <OTA_Receive+0xfc>)
 800617e:	f004 feac 	bl	800aeda <f_write>
		if (bytes_written != bin_len)
 8006182:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 8006186:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f8d7 2bbc 	ldr.w	r2, [r7, #3004]	@ 0xbbc
 8006190:	429a      	cmp	r2, r3
 8006192:	d005      	beq.n	80061a0 <OTA_Receive+0xd0>
		{
			f_close(&sys.OTA_File);
 8006194:	480d      	ldr	r0, [pc, #52]	@ (80061cc <OTA_Receive+0xfc>)
 8006196:	f005 f8a9 	bl	800b2ec <f_close>
			return -1;
 800619a:	f04f 33ff 	mov.w	r3, #4294967295
 800619e:	e00d      	b.n	80061bc <OTA_Receive+0xec>
		}
		SIM_Send_TCP("ACK");
 80061a0:	480b      	ldr	r0, [pc, #44]	@ (80061d0 <OTA_Receive+0x100>)
 80061a2:	f7fc fa79 	bl	8002698 <SIM_Send_TCP>
	{
 80061a6:	e7a0      	b.n	80060ea <OTA_Receive+0x1a>
			break;
 80061a8:	bf00      	nop
	}

	f_close(&sys.OTA_File);
 80061aa:	4808      	ldr	r0, [pc, #32]	@ (80061cc <OTA_Receive+0xfc>)
 80061ac:	f005 f89e 	bl	800b2ec <f_close>
    sys.OTA_File_isOpen = 0;
 80061b0:	4a08      	ldr	r2, [pc, #32]	@ (80061d4 <OTA_Receive+0x104>)
 80061b2:	7813      	ldrb	r3, [r2, #0]
 80061b4:	f023 0301 	bic.w	r3, r3, #1
 80061b8:	7013      	strb	r3, [r2, #0]
	return 0;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	f607 37c8 	addw	r7, r7, #3016	@ 0xbc8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	08018eec 	.word	0x08018eec
 80061cc:	200005dc 	.word	0x200005dc
 80061d0:	08018ef0 	.word	0x08018ef0
 80061d4:	200005d8 	.word	0x200005d8

080061d8 <OTA_CRC_Check>:

int OTA_CRC_Check(void)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	f5ad 6d8c 	sub.w	sp, sp, #1120	@ 0x460
 80061de:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 80061e0:	2300      	movs	r3, #0
 80061e2:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
	UINT read = 0;
 80061e6:	2300      	movs	r3, #0
 80061e8:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
	uint16_t ota_crc = 0;
 80061ec:	2300      	movs	r3, #0
 80061ee:	f8a7 3454 	strh.w	r3, [r7, #1108]	@ 0x454
	uint8_t rx_buffer[64];
	uint32_t calc_crc = 0;
 80061f2:	2300      	movs	r3, #0
 80061f4:	f8c7 345c 	str.w	r3, [r7, #1116]	@ 0x45c

	SIM_Receive_Response((char*)rx_buffer, 5000);
 80061f8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80061fc:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006200:	4618      	mov	r0, r3
 8006202:	f7fc f811 	bl	8002228 <SIM_Receive_Response>
	uint8_t crc_bin[8];
	size_t crc_len = Base64_Decode((char*)rx_buffer, crc_bin, sizeof(crc_bin));
 8006206:	f507 6180 	add.w	r1, r7, #1024	@ 0x400
 800620a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800620e:	2208      	movs	r2, #8
 8006210:	4618      	mov	r0, r3
 8006212:	f7fc fc99 	bl	8002b48 <Base64_Decode>
 8006216:	f8c7 0450 	str.w	r0, [r7, #1104]	@ 0x450
	if (crc_len == 4)
 800621a:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800621e:	2b04      	cmp	r3, #4
 8006220:	d118      	bne.n	8006254 <OTA_CRC_Check+0x7c>
	{
		ota_crc = (crc_bin[0] << 24) | (crc_bin[1] << 16) | (crc_bin[2] << 8) | crc_bin[3];
 8006222:	f897 3402 	ldrb.w	r3, [r7, #1026]	@ 0x402
 8006226:	b21b      	sxth	r3, r3
 8006228:	021b      	lsls	r3, r3, #8
 800622a:	b21a      	sxth	r2, r3
 800622c:	f897 3403 	ldrb.w	r3, [r7, #1027]	@ 0x403
 8006230:	b21b      	sxth	r3, r3
 8006232:	4313      	orrs	r3, r2
 8006234:	b21b      	sxth	r3, r3
 8006236:	f8a7 3454 	strh.w	r3, [r7, #1108]	@ 0x454
	else
	{
		return -1;
	}

	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ);
 800623a:	2201      	movs	r2, #1
 800623c:	493b      	ldr	r1, [pc, #236]	@ (800632c <OTA_CRC_Check+0x154>)
 800623e:	483c      	ldr	r0, [pc, #240]	@ (8006330 <OTA_CRC_Check+0x158>)
 8006240:	f004 fb60 	bl	800a904 <f_open>
 8006244:	4603      	mov	r3, r0
 8006246:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
	if (fRes != FR_OK)
 800624a:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800624e:	2b00      	cmp	r3, #0
 8006250:	d006      	beq.n	8006260 <OTA_CRC_Check+0x88>
 8006252:	e002      	b.n	800625a <OTA_CRC_Check+0x82>
		return -1;
 8006254:	f04f 33ff 	mov.w	r3, #4294967295
 8006258:	e063      	b.n	8006322 <OTA_CRC_Check+0x14a>
	{
		return -1;
 800625a:	f04f 33ff 	mov.w	r3, #4294967295
 800625e:	e060      	b.n	8006322 <OTA_CRC_Check+0x14a>
	}

	uint32_t size = f_size(&sys.OTA_File);
 8006260:	4b34      	ldr	r3, [pc, #208]	@ (8006334 <OTA_CRC_Check+0x15c>)
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
    HAL_CRCEx_Input_Data_Reverse(HCRC, CRC_INPUTDATA_INVERSION_BYTE);
 8006268:	2120      	movs	r1, #32
 800626a:	4833      	ldr	r0, [pc, #204]	@ (8006338 <OTA_CRC_Check+0x160>)
 800626c:	f007 fdf8 	bl	800de60 <HAL_CRCEx_Input_Data_Reverse>
    HAL_CRCEx_Output_Data_Reverse(HCRC, CRC_OUTPUTDATA_INVERSION_ENABLE);
 8006270:	2180      	movs	r1, #128	@ 0x80
 8006272:	4831      	ldr	r0, [pc, #196]	@ (8006338 <OTA_CRC_Check+0x160>)
 8006274:	f007 fe10 	bl	800de98 <HAL_CRCEx_Output_Data_Reverse>
    HCRC->Instance->INIT = 0xFFFFFFFF;
 8006278:	4b2f      	ldr	r3, [pc, #188]	@ (8006338 <OTA_CRC_Check+0x160>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f04f 32ff 	mov.w	r2, #4294967295
 8006280:	611a      	str	r2, [r3, #16]
    HAL_CRCEx_Polynomial_Set(HCRC, 0x04c11db7, CRC_POLYLENGTH_32B);
 8006282:	2200      	movs	r2, #0
 8006284:	492d      	ldr	r1, [pc, #180]	@ (800633c <OTA_CRC_Check+0x164>)
 8006286:	482c      	ldr	r0, [pc, #176]	@ (8006338 <OTA_CRC_Check+0x160>)
 8006288:	f007 fd5c 	bl	800dd44 <HAL_CRCEx_Polynomial_Set>

	while (size > 0)
 800628c:	e038      	b.n	8006300 <OTA_CRC_Check+0x128>
	{
		uint8_t buffer[1024];
		UINT to_read = (size > sizeof(buffer)) ? sizeof(buffer) : size;
 800628e:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 8006292:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006296:	bf28      	it	cs
 8006298:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 800629c:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
		if (f_read(&sys.OTA_File, buffer, to_read, &read) != FR_OK || read == 0)
 80062a0:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80062a4:	4639      	mov	r1, r7
 80062a6:	f8d7 244c 	ldr.w	r2, [r7, #1100]	@ 0x44c
 80062aa:	4821      	ldr	r0, [pc, #132]	@ (8006330 <OTA_CRC_Check+0x158>)
 80062ac:	f004 fcc2 	bl	800ac34 <f_read>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d103      	bne.n	80062be <OTA_CRC_Check+0xe6>
 80062b6:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d105      	bne.n	80062ca <OTA_CRC_Check+0xf2>
		{
			f_close(&sys.OTA_File);
 80062be:	481c      	ldr	r0, [pc, #112]	@ (8006330 <OTA_CRC_Check+0x158>)
 80062c0:	f005 f814 	bl	800b2ec <f_close>
			return -1;
 80062c4:	f04f 33ff 	mov.w	r3, #4294967295
 80062c8:	e02b      	b.n	8006322 <OTA_CRC_Check+0x14a>
		}
		calc_crc = HAL_CRC_Accumulate(HCRC, (uint32_t *)buffer, read / 4 + (read % 4 != 0));
 80062ca:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 80062ce:	089b      	lsrs	r3, r3, #2
 80062d0:	f8d7 2448 	ldr.w	r2, [r7, #1096]	@ 0x448
 80062d4:	f002 0203 	and.w	r2, r2, #3
 80062d8:	2a00      	cmp	r2, #0
 80062da:	bf14      	ite	ne
 80062dc:	2201      	movne	r2, #1
 80062de:	2200      	moveq	r2, #0
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	441a      	add	r2, r3
 80062e4:	463b      	mov	r3, r7
 80062e6:	4619      	mov	r1, r3
 80062e8:	4813      	ldr	r0, [pc, #76]	@ (8006338 <OTA_CRC_Check+0x160>)
 80062ea:	f007 fc1d 	bl	800db28 <HAL_CRC_Accumulate>
 80062ee:	f8c7 045c 	str.w	r0, [r7, #1116]	@ 0x45c
		size -= read;
 80062f2:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 80062f6:	f8d7 2458 	ldr.w	r2, [r7, #1112]	@ 0x458
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
	while (size > 0)
 8006300:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1c2      	bne.n	800628e <OTA_CRC_Check+0xb6>
	}

	f_close(&sys.OTA_File);
 8006308:	4809      	ldr	r0, [pc, #36]	@ (8006330 <OTA_CRC_Check+0x158>)
 800630a:	f004 ffef 	bl	800b2ec <f_close>

	if (calc_crc != ota_crc)
 800630e:	f8b7 3454 	ldrh.w	r3, [r7, #1108]	@ 0x454
 8006312:	f8d7 245c 	ldr.w	r2, [r7, #1116]	@ 0x45c
 8006316:	429a      	cmp	r2, r3
 8006318:	d002      	beq.n	8006320 <OTA_CRC_Check+0x148>
	{
		return -1; // CRC non corrisponde
 800631a:	f04f 33ff 	mov.w	r3, #4294967295
 800631e:	e000      	b.n	8006322 <OTA_CRC_Check+0x14a>
	}
	
	return 0; // CRC OK
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	f507 678c 	add.w	r7, r7, #1120	@ 0x460
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	08018edc 	.word	0x08018edc
 8006330:	200005dc 	.word	0x200005dc
 8006334:	200005d8 	.word	0x200005d8
 8006338:	2000015c 	.word	0x2000015c
 800633c:	04c11db7 	.word	0x04c11db7

08006340 <OTA_Apply>:


/*-----APPLICAZIONE UPDATE-----*/
int OTA_Apply(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b098      	sub	sp, #96	@ 0x60
 8006344:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 8006346:	2300      	movs	r3, #0
 8006348:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	int32_t result = 0;
 800634c:	2300      	movs	r3, #0
 800634e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint8_t ota_bank = 0;
 8006350:	2300      	movs	r3, #0
 8006352:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
	uint32_t faddr = 0;
 8006356:	2300      	movs	r3, #0
 8006358:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t size = 0;
 800635a:	2300      	movs	r3, #0
 800635c:	65bb      	str	r3, [r7, #88]	@ 0x58
	uint64_t pword = 0;
 800635e:	f04f 0200 	mov.w	r2, #0
 8006362:	f04f 0300 	mov.w	r3, #0
 8006366:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	uint32_t faddr_off = 0;
 800636a:	2300      	movs	r3, #0
 800636c:	657b      	str	r3, [r7, #84]	@ 0x54
	UINT read = 0;
 800636e:	2300      	movs	r3, #0
 8006370:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t PageError = 0;
 8006372:	2300      	movs	r3, #0
 8006374:	63bb      	str	r3, [r7, #56]	@ 0x38
	FLASH_EraseInitTypeDef erase_cfg = {0};
 8006376:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800637a:	2200      	movs	r2, #0
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	605a      	str	r2, [r3, #4]
 8006380:	609a      	str	r2, [r3, #8]
 8006382:	60da      	str	r2, [r3, #12]

	const uint32_t BANKSIZE = FLASH_SIZE >> 1;
 8006384:	4b68      	ldr	r3, [pc, #416]	@ (8006528 <OTA_Apply+0x1e8>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	b29b      	uxth	r3, r3
 800638a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800638e:	4293      	cmp	r3, r2
 8006390:	d006      	beq.n	80063a0 <OTA_Apply+0x60>
 8006392:	4b65      	ldr	r3, [pc, #404]	@ (8006528 <OTA_Apply+0x1e8>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	029b      	lsls	r3, r3, #10
 8006398:	085a      	lsrs	r2, r3, #1
 800639a:	4b64      	ldr	r3, [pc, #400]	@ (800652c <OTA_Apply+0x1ec>)
 800639c:	4013      	ands	r3, r2
 800639e:	e001      	b.n	80063a4 <OTA_Apply+0x64>
 80063a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80063a4:	64bb      	str	r3, [r7, #72]	@ 0x48

	FLASH_OBProgramInitTypeDef ob = {0};
 80063a6:	463b      	mov	r3, r7
 80063a8:	2228      	movs	r2, #40	@ 0x28
 80063aa:	2100      	movs	r1, #0
 80063ac:	4618      	mov	r0, r3
 80063ae:	f011 fa77 	bl	80178a0 <memset>

	HAL_FLASHEx_OBGetConfig(&ob);
 80063b2:	463b      	mov	r3, r7
 80063b4:	4618      	mov	r0, r3
 80063b6:	f008 faa5 	bl	800e904 <HAL_FLASHEx_OBGetConfig>

	if ((ob.USERConfig & FLASH_OPTR_DUALBANK) == 0)
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d102      	bne.n	80063ca <OTA_Apply+0x8a>
	{
		return -1;
 80063c4:	f04f 33ff 	mov.w	r3, #4294967295
 80063c8:	e0aa      	b.n	8006520 <OTA_Apply+0x1e0>
	}

	ota_bank = (ob.USERConfig & FLASH_OPTR_BFB2) ? FLASH_BANK_1 : FLASH_BANK_2;
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <OTA_Apply+0x98>
 80063d4:	2301      	movs	r3, #1
 80063d6:	e000      	b.n	80063da <OTA_Apply+0x9a>
 80063d8:	2302      	movs	r3, #2
 80063da:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

	// L'indirizzo deve essere sempre quello del banco 2 (se fa il boot da BANK2 il BANK1 viene rimappato)
	faddr = FLASH_BASE + BANKSIZE;
 80063de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063e0:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80063e4:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_FLASH_Unlock() != HAL_OK)
 80063e6:	f008 f861 	bl	800e4ac <HAL_FLASH_Unlock>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <OTA_Apply+0xb6>
	{
		return -1;
 80063f0:	f04f 33ff 	mov.w	r3, #4294967295
 80063f4:	e094      	b.n	8006520 <OTA_Apply+0x1e0>
	}

	f_close(&sys.OTA_File);
 80063f6:	484e      	ldr	r0, [pc, #312]	@ (8006530 <OTA_Apply+0x1f0>)
 80063f8:	f004 ff78 	bl	800b2ec <f_close>
	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ);
 80063fc:	2201      	movs	r2, #1
 80063fe:	494d      	ldr	r1, [pc, #308]	@ (8006534 <OTA_Apply+0x1f4>)
 8006400:	484b      	ldr	r0, [pc, #300]	@ (8006530 <OTA_Apply+0x1f0>)
 8006402:	f004 fa7f 	bl	800a904 <f_open>
 8006406:	4603      	mov	r3, r0
 8006408:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	if (fRes != FR_OK)
 800640c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8006410:	2b00      	cmp	r3, #0
 8006412:	d003      	beq.n	800641c <OTA_Apply+0xdc>
	{
		result = -1;
 8006414:	f04f 33ff 	mov.w	r3, #4294967295
 8006418:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 800641a:	e07b      	b.n	8006514 <OTA_Apply+0x1d4>
	}

	if ((size = f_size(&sys.OTA_File)) > BANKSIZE)
 800641c:	4b46      	ldr	r3, [pc, #280]	@ (8006538 <OTA_Apply+0x1f8>)
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006422:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006424:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006426:	429a      	cmp	r2, r3
 8006428:	d903      	bls.n	8006432 <OTA_Apply+0xf2>
	{
		result = -1;
 800642a:	f04f 33ff 	mov.w	r3, #4294967295
 800642e:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 8006430:	e070      	b.n	8006514 <OTA_Apply+0x1d4>
	}

	erase_cfg.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8006432:	2301      	movs	r3, #1
 8006434:	62bb      	str	r3, [r7, #40]	@ 0x28
	erase_cfg.Banks = ota_bank;
 8006436:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800643a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_FLASHEx_Erase(&erase_cfg, &PageError) != HAL_OK)
 800643c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8006440:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006444:	4611      	mov	r1, r2
 8006446:	4618      	mov	r0, r3
 8006448:	f008 f952 	bl	800e6f0 <HAL_FLASHEx_Erase>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d026      	beq.n	80064a0 <OTA_Apply+0x160>
	{
		result = -1;
 8006452:	f04f 33ff 	mov.w	r3, #4294967295
 8006456:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 8006458:	e05c      	b.n	8006514 <OTA_Apply+0x1d4>
	}

	while (size > 0)
	{
		pword = 0;
 800645a:	f04f 0200 	mov.w	r2, #0
 800645e:	f04f 0300 	mov.w	r3, #0
 8006462:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		if (f_read(&sys.OTA_File, (uint8_t *)&pword, sizeof(pword), &read) < 0)
 8006466:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800646a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800646e:	2208      	movs	r2, #8
 8006470:	482f      	ldr	r0, [pc, #188]	@ (8006530 <OTA_Apply+0x1f0>)
 8006472:	f004 fbdf 	bl	800ac34 <f_read>
			break;
		if (read == 0)
 8006476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006478:	2b00      	cmp	r3, #0
 800647a:	d015      	beq.n	80064a8 <OTA_Apply+0x168>
			break;
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, faddr + faddr_off, pword) != HAL_OK)
 800647c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800647e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006480:	18d1      	adds	r1, r2, r3
 8006482:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006486:	2000      	movs	r0, #0
 8006488:	f007 ffa4 	bl	800e3d4 <HAL_FLASH_Program>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10c      	bne.n	80064ac <OTA_Apply+0x16c>
			break;
		faddr_off += sizeof(pword);
 8006492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006494:	3308      	adds	r3, #8
 8006496:	657b      	str	r3, [r7, #84]	@ 0x54
		size -= read;
 8006498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800649a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	65bb      	str	r3, [r7, #88]	@ 0x58
	while (size > 0)
 80064a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1d9      	bne.n	800645a <OTA_Apply+0x11a>
 80064a6:	e002      	b.n	80064ae <OTA_Apply+0x16e>
			break;
 80064a8:	bf00      	nop
 80064aa:	e000      	b.n	80064ae <OTA_Apply+0x16e>
			break;
 80064ac:	bf00      	nop
	}

	if (size > 0)
 80064ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d003      	beq.n	80064bc <OTA_Apply+0x17c>
	{
		result = -1;
 80064b4:	f04f 33ff 	mov.w	r3, #4294967295
 80064b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 80064ba:	e02b      	b.n	8006514 <OTA_Apply+0x1d4>
	}

	HAL_FLASH_Lock();
 80064bc:	f008 f818 	bl	800e4f0 <HAL_FLASH_Lock>

	HAL_FLASHEx_OBGetConfig(&ob);
 80064c0:	463b      	mov	r3, r7
 80064c2:	4618      	mov	r0, r3
 80064c4:	f008 fa1e 	bl	800e904 <HAL_FLASHEx_OBGetConfig>
	HAL_FLASH_Unlock();
 80064c8:	f007 fff0 	bl	800e4ac <HAL_FLASH_Unlock>
	HAL_FLASH_OB_Unlock();
 80064cc:	f008 f820 	bl	800e510 <HAL_FLASH_OB_Unlock>

	ob.OptionType = OPTIONBYTE_USER;
 80064d0:	2304      	movs	r3, #4
 80064d2:	603b      	str	r3, [r7, #0]
	ob.USERType = OB_USER_BFB2;
 80064d4:	2380      	movs	r3, #128	@ 0x80
 80064d6:	617b      	str	r3, [r7, #20]
	ob.USERConfig = (ota_bank == FLASH_BANK_2) ? FLASH_OPTR_BFB2 : 0;
 80064d8:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d102      	bne.n	80064e6 <OTA_Apply+0x1a6>
 80064e0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80064e4:	e000      	b.n	80064e8 <OTA_Apply+0x1a8>
 80064e6:	2300      	movs	r3, #0
 80064e8:	61bb      	str	r3, [r7, #24]

	if (HAL_FLASHEx_OBProgram(&ob) != HAL_OK)
 80064ea:	463b      	mov	r3, r7
 80064ec:	4618      	mov	r0, r3
 80064ee:	f008 f99b 	bl	800e828 <HAL_FLASHEx_OBProgram>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d007      	beq.n	8006508 <OTA_Apply+0x1c8>
	{
		HAL_FLASH_OB_Lock();
 80064f8:	f008 f826 	bl	800e548 <HAL_FLASH_OB_Lock>
		HAL_FLASH_Lock();
 80064fc:	f007 fff8 	bl	800e4f0 <HAL_FLASH_Lock>
		result = -1;
 8006500:	f04f 33ff 	mov.w	r3, #4294967295
 8006504:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 8006506:	e005      	b.n	8006514 <OTA_Apply+0x1d4>
	}

	HAL_FLASH_OB_Launch();
 8006508:	f008 f82e 	bl	800e568 <HAL_FLASH_OB_Launch>
	HAL_FLASH_OB_Lock();
 800650c:	f008 f81c 	bl	800e548 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 8006510:	f007 ffee 	bl	800e4f0 <HAL_FLASH_Lock>

	DONE:

	f_close(&sys.OTA_File);
 8006514:	4806      	ldr	r0, [pc, #24]	@ (8006530 <OTA_Apply+0x1f0>)
 8006516:	f004 fee9 	bl	800b2ec <f_close>

	HAL_FLASH_Lock();
 800651a:	f007 ffe9 	bl	800e4f0 <HAL_FLASH_Lock>

	return result;
 800651e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8006520:	4618      	mov	r0, r3
 8006522:	3760      	adds	r7, #96	@ 0x60
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	1fff75e0 	.word	0x1fff75e0
 800652c:	01fffe00 	.word	0x01fffe00
 8006530:	200005dc 	.word	0x200005dc
 8006534:	08018edc 	.word	0x08018edc
 8006538:	200005d8 	.word	0x200005d8

0800653c <Save_Data>:
#include "init.h"


/*-----ACQUISIZIONE MISURE E LOG DEI DATI-----*/
void Save_Data(void)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b08c      	sub	sp, #48	@ 0x30
 8006540:	af00      	add	r7, sp, #0
	if(flags.ADC_Half_Buffer)
 8006542:	4b6d      	ldr	r3, [pc, #436]	@ (80066f8 <Save_Data+0x1bc>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	d032      	beq.n	80065b6 <Save_Data+0x7a>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[0], PRESS_HALF_LEN);
 8006550:	4b6a      	ldr	r3, [pc, #424]	@ (80066fc <Save_Data+0x1c0>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	461a      	mov	r2, r3
 8006556:	4b6a      	ldr	r3, [pc, #424]	@ (8006700 <Save_Data+0x1c4>)
 8006558:	4413      	add	r3, r2
 800655a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800655e:	4969      	ldr	r1, [pc, #420]	@ (8006704 <Save_Data+0x1c8>)
 8006560:	4618      	mov	r0, r3
 8006562:	f011 fa21 	bl	80179a8 <memcpy>
		Last_Pressure = 0;
 8006566:	4b68      	ldr	r3, [pc, #416]	@ (8006708 <Save_Data+0x1cc>)
 8006568:	2200      	movs	r2, #0
 800656a:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 800656c:	2300      	movs	r3, #0
 800656e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006570:	e00c      	b.n	800658c <Save_Data+0x50>
		{
			Last_Pressure += Pressure[i];
 8006572:	4a64      	ldr	r2, [pc, #400]	@ (8006704 <Save_Data+0x1c8>)
 8006574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006576:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800657a:	4b63      	ldr	r3, [pc, #396]	@ (8006708 <Save_Data+0x1cc>)
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	4413      	add	r3, r2
 8006580:	b29a      	uxth	r2, r3
 8006582:	4b61      	ldr	r3, [pc, #388]	@ (8006708 <Save_Data+0x1cc>)
 8006584:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 8006586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006588:	3301      	adds	r3, #1
 800658a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800658c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800658e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006590:	ddef      	ble.n	8006572 <Save_Data+0x36>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 8006592:	4b5d      	ldr	r3, [pc, #372]	@ (8006708 <Save_Data+0x1cc>)
 8006594:	881b      	ldrh	r3, [r3, #0]
 8006596:	4a5d      	ldr	r2, [pc, #372]	@ (800670c <Save_Data+0x1d0>)
 8006598:	fba2 2303 	umull	r2, r3, r2, r3
 800659c:	099b      	lsrs	r3, r3, #6
 800659e:	b29a      	uxth	r2, r3
 80065a0:	4b59      	ldr	r3, [pc, #356]	@ (8006708 <Save_Data+0x1cc>)
 80065a2:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[0]);
 80065a4:	4857      	ldr	r0, [pc, #348]	@ (8006704 <Save_Data+0x1c8>)
 80065a6:	f000 fb4f 	bl	8006c48 <Warning_Detection>
		flags.ADC_Half_Buffer = 0;
 80065aa:	4a53      	ldr	r2, [pc, #332]	@ (80066f8 <Save_Data+0x1bc>)
 80065ac:	7813      	ldrb	r3, [r2, #0]
 80065ae:	f023 0302 	bic.w	r3, r3, #2
 80065b2:	7013      	strb	r3, [r2, #0]
 80065b4:	e039      	b.n	800662a <Save_Data+0xee>
	}
	else if(flags.ADC_Full_Buffer)
 80065b6:	4b50      	ldr	r3, [pc, #320]	@ (80066f8 <Save_Data+0x1bc>)
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	f003 0304 	and.w	r3, r3, #4
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d032      	beq.n	800662a <Save_Data+0xee>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[PRESS_HALF_SAMPLES], PRESS_HALF_LEN);
 80065c4:	4b4d      	ldr	r3, [pc, #308]	@ (80066fc <Save_Data+0x1c0>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	461a      	mov	r2, r3
 80065ca:	4b4d      	ldr	r3, [pc, #308]	@ (8006700 <Save_Data+0x1c4>)
 80065cc:	4413      	add	r3, r2
 80065ce:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80065d2:	494f      	ldr	r1, [pc, #316]	@ (8006710 <Save_Data+0x1d4>)
 80065d4:	4618      	mov	r0, r3
 80065d6:	f011 f9e7 	bl	80179a8 <memcpy>
		Last_Pressure = 0;
 80065da:	4b4b      	ldr	r3, [pc, #300]	@ (8006708 <Save_Data+0x1cc>)
 80065dc:	2200      	movs	r2, #0
 80065de:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 80065e0:	23c8      	movs	r3, #200	@ 0xc8
 80065e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065e4:	e00c      	b.n	8006600 <Save_Data+0xc4>
		{
			Last_Pressure += Pressure[i];
 80065e6:	4a47      	ldr	r2, [pc, #284]	@ (8006704 <Save_Data+0x1c8>)
 80065e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80065ee:	4b46      	ldr	r3, [pc, #280]	@ (8006708 <Save_Data+0x1cc>)
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	4413      	add	r3, r2
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	4b44      	ldr	r3, [pc, #272]	@ (8006708 <Save_Data+0x1cc>)
 80065f8:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 80065fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fc:	3301      	adds	r3, #1
 80065fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006602:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8006606:	dbee      	blt.n	80065e6 <Save_Data+0xaa>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 8006608:	4b3f      	ldr	r3, [pc, #252]	@ (8006708 <Save_Data+0x1cc>)
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	4a3f      	ldr	r2, [pc, #252]	@ (800670c <Save_Data+0x1d0>)
 800660e:	fba2 2303 	umull	r2, r3, r2, r3
 8006612:	099b      	lsrs	r3, r3, #6
 8006614:	b29a      	uxth	r2, r3
 8006616:	4b3c      	ldr	r3, [pc, #240]	@ (8006708 <Save_Data+0x1cc>)
 8006618:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[PRESS_HALF_SAMPLES]);
 800661a:	483d      	ldr	r0, [pc, #244]	@ (8006710 <Save_Data+0x1d4>)
 800661c:	f000 fb14 	bl	8006c48 <Warning_Detection>
		flags.ADC_Full_Buffer = 0;
 8006620:	4a35      	ldr	r2, [pc, #212]	@ (80066f8 <Save_Data+0x1bc>)
 8006622:	7813      	ldrb	r3, [r2, #0]
 8006624:	f023 0304 	bic.w	r3, r3, #4
 8006628:	7013      	strb	r3, [r2, #0]
	}
	flags.ADC_Complete = 0;
 800662a:	4a33      	ldr	r2, [pc, #204]	@ (80066f8 <Save_Data+0x1bc>)
 800662c:	7813      	ldrb	r3, [r2, #0]
 800662e:	f023 0301 	bic.w	r3, r3, #1
 8006632:	7013      	strb	r3, [r2, #0]
	Address_Offset += PRESS_HALF_LEN;
 8006634:	4b31      	ldr	r3, [pc, #196]	@ (80066fc <Save_Data+0x1c0>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800663c:	4a2f      	ldr	r2, [pc, #188]	@ (80066fc <Save_Data+0x1c0>)
 800663e:	6013      	str	r3, [r2, #0]

	memcpy(Saving_Buffer + Address_Offset, Volume_Period, MAX_VOLUME_LEN);
 8006640:	4b2e      	ldr	r3, [pc, #184]	@ (80066fc <Save_Data+0x1c0>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	461a      	mov	r2, r3
 8006646:	4b2e      	ldr	r3, [pc, #184]	@ (8006700 <Save_Data+0x1c4>)
 8006648:	4413      	add	r3, r2
 800664a:	2228      	movs	r2, #40	@ 0x28
 800664c:	4931      	ldr	r1, [pc, #196]	@ (8006714 <Save_Data+0x1d8>)
 800664e:	4618      	mov	r0, r3
 8006650:	f011 f9aa 	bl	80179a8 <memcpy>
	uint8_t current_period_cnt = Period_cnt;
 8006654:	4b30      	ldr	r3, [pc, #192]	@ (8006718 <Save_Data+0x1dc>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	74fb      	strb	r3, [r7, #19]
	Last_Volume = 0;
 800665a:	4b30      	ldr	r3, [pc, #192]	@ (800671c <Save_Data+0x1e0>)
 800665c:	2200      	movs	r2, #0
 800665e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < current_period_cnt; i++)
 8006660:	2300      	movs	r3, #0
 8006662:	627b      	str	r3, [r7, #36]	@ 0x24
 8006664:	e00b      	b.n	800667e <Save_Data+0x142>
	{
		Last_Volume += Volume_Period[i];
 8006666:	4a2b      	ldr	r2, [pc, #172]	@ (8006714 <Save_Data+0x1d8>)
 8006668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800666e:	4b2b      	ldr	r3, [pc, #172]	@ (800671c <Save_Data+0x1e0>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4413      	add	r3, r2
 8006674:	4a29      	ldr	r2, [pc, #164]	@ (800671c <Save_Data+0x1e0>)
 8006676:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < current_period_cnt; i++)
 8006678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667a:	3301      	adds	r3, #1
 800667c:	627b      	str	r3, [r7, #36]	@ 0x24
 800667e:	7cfb      	ldrb	r3, [r7, #19]
 8006680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006682:	429a      	cmp	r2, r3
 8006684:	dbef      	blt.n	8006666 <Save_Data+0x12a>
	}
	if(current_period_cnt != 0)
 8006686:	7cfb      	ldrb	r3, [r7, #19]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d006      	beq.n	800669a <Save_Data+0x15e>
	{
		Last_Volume = (uint32_t)(Last_Volume / current_period_cnt);
 800668c:	4b23      	ldr	r3, [pc, #140]	@ (800671c <Save_Data+0x1e0>)
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	7cfb      	ldrb	r3, [r7, #19]
 8006692:	fbb2 f3f3 	udiv	r3, r2, r3
 8006696:	4a21      	ldr	r2, [pc, #132]	@ (800671c <Save_Data+0x1e0>)
 8006698:	6013      	str	r3, [r2, #0]
	}
	memset(Volume_Period, 0, sizeof(Volume_Period));
 800669a:	2228      	movs	r2, #40	@ 0x28
 800669c:	2100      	movs	r1, #0
 800669e:	481d      	ldr	r0, [pc, #116]	@ (8006714 <Save_Data+0x1d8>)
 80066a0:	f011 f8fe 	bl	80178a0 <memset>
	Period_cnt = 0;
 80066a4:	4b1c      	ldr	r3, [pc, #112]	@ (8006718 <Save_Data+0x1dc>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	701a      	strb	r2, [r3, #0]
	Address_Offset += MAX_VOLUME_LEN;
 80066aa:	4b14      	ldr	r3, [pc, #80]	@ (80066fc <Save_Data+0x1c0>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3328      	adds	r3, #40	@ 0x28
 80066b0:	4a12      	ldr	r2, [pc, #72]	@ (80066fc <Save_Data+0x1c0>)
 80066b2:	6013      	str	r3, [r2, #0]

	if(sys.ACC_Present)
 80066b4:	4b1a      	ldr	r3, [pc, #104]	@ (8006720 <Save_Data+0x1e4>)
 80066b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 8083 	beq.w	80067d0 <Save_Data+0x294>
	{
		memcpy(Saving_Buffer + Address_Offset, Acceleration, ACCELERATION_LEN);
 80066ca:	4b0c      	ldr	r3, [pc, #48]	@ (80066fc <Save_Data+0x1c0>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	461a      	mov	r2, r3
 80066d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006700 <Save_Data+0x1c4>)
 80066d2:	4413      	add	r3, r2
 80066d4:	4a13      	ldr	r2, [pc, #76]	@ (8006724 <Save_Data+0x1e8>)
 80066d6:	4618      	mov	r0, r3
 80066d8:	4611      	mov	r1, r2
 80066da:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 80066de:	461a      	mov	r2, r3
 80066e0:	f011 f962 	bl	80179a8 <memcpy>
		int32_t temp_x = 0;
 80066e4:	2300      	movs	r3, #0
 80066e6:	623b      	str	r3, [r7, #32]
		int32_t temp_y = 0;
 80066e8:	2300      	movs	r3, #0
 80066ea:	61fb      	str	r3, [r7, #28]
		int32_t temp_z = 0;
 80066ec:	2300      	movs	r3, #0
 80066ee:	61bb      	str	r3, [r7, #24]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 80066f0:	2300      	movs	r3, #0
 80066f2:	617b      	str	r3, [r7, #20]
 80066f4:	e045      	b.n	8006782 <Save_Data+0x246>
 80066f6:	bf00      	nop
 80066f8:	20001790 	.word	0x20001790
 80066fc:	20004974 	.word	0x20004974
 8006700:	20004244 	.word	0x20004244
 8006704:	2000390c 	.word	0x2000390c
 8006708:	200041cc 	.word	0x200041cc
 800670c:	51eb851f 	.word	0x51eb851f
 8006710:	20003a9c 	.word	0x20003a9c
 8006714:	20003c2c 	.word	0x20003c2c
 8006718:	20003908 	.word	0x20003908
 800671c:	200041d0 	.word	0x200041d0
 8006720:	200005d8 	.word	0x200005d8
 8006724:	20003c54 	.word	0x20003c54
		{
			temp_x += Acceleration[i+1] | (Acceleration[i+2] << 8); 
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	3301      	adds	r3, #1
 800672c:	4a71      	ldr	r2, [pc, #452]	@ (80068f4 <Save_Data+0x3b8>)
 800672e:	5cd3      	ldrb	r3, [r2, r3]
 8006730:	4619      	mov	r1, r3
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	3302      	adds	r3, #2
 8006736:	4a6f      	ldr	r2, [pc, #444]	@ (80068f4 <Save_Data+0x3b8>)
 8006738:	5cd3      	ldrb	r3, [r2, r3]
 800673a:	021b      	lsls	r3, r3, #8
 800673c:	430b      	orrs	r3, r1
 800673e:	6a3a      	ldr	r2, [r7, #32]
 8006740:	4413      	add	r3, r2
 8006742:	623b      	str	r3, [r7, #32]
			temp_y += Acceleration[i+3] | (Acceleration[i+4] << 8);
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	3303      	adds	r3, #3
 8006748:	4a6a      	ldr	r2, [pc, #424]	@ (80068f4 <Save_Data+0x3b8>)
 800674a:	5cd3      	ldrb	r3, [r2, r3]
 800674c:	4619      	mov	r1, r3
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	3304      	adds	r3, #4
 8006752:	4a68      	ldr	r2, [pc, #416]	@ (80068f4 <Save_Data+0x3b8>)
 8006754:	5cd3      	ldrb	r3, [r2, r3]
 8006756:	021b      	lsls	r3, r3, #8
 8006758:	430b      	orrs	r3, r1
 800675a:	69fa      	ldr	r2, [r7, #28]
 800675c:	4413      	add	r3, r2
 800675e:	61fb      	str	r3, [r7, #28]
			temp_z += Acceleration[i+5] | (Acceleration[i+6] << 8);
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	3305      	adds	r3, #5
 8006764:	4a63      	ldr	r2, [pc, #396]	@ (80068f4 <Save_Data+0x3b8>)
 8006766:	5cd3      	ldrb	r3, [r2, r3]
 8006768:	4619      	mov	r1, r3
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	3306      	adds	r3, #6
 800676e:	4a61      	ldr	r2, [pc, #388]	@ (80068f4 <Save_Data+0x3b8>)
 8006770:	5cd3      	ldrb	r3, [r2, r3]
 8006772:	021b      	lsls	r3, r3, #8
 8006774:	430b      	orrs	r3, r1
 8006776:	69ba      	ldr	r2, [r7, #24]
 8006778:	4413      	add	r3, r2
 800677a:	61bb      	str	r3, [r7, #24]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	3307      	adds	r3, #7
 8006780:	617b      	str	r3, [r7, #20]
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 8006788:	dbce      	blt.n	8006728 <Save_Data+0x1ec>
		}
		Last_Acceleration.x = (uint16_t)(temp_x / ACC_FIFO_WATERMARK);
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	4a5a      	ldr	r2, [pc, #360]	@ (80068f8 <Save_Data+0x3bc>)
 800678e:	fb82 1203 	smull	r1, r2, r2, r3
 8006792:	1192      	asrs	r2, r2, #6
 8006794:	17db      	asrs	r3, r3, #31
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	b29a      	uxth	r2, r3
 800679a:	4b58      	ldr	r3, [pc, #352]	@ (80068fc <Save_Data+0x3c0>)
 800679c:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = (uint16_t)(temp_y / ACC_FIFO_WATERMARK);
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	4a55      	ldr	r2, [pc, #340]	@ (80068f8 <Save_Data+0x3bc>)
 80067a2:	fb82 1203 	smull	r1, r2, r2, r3
 80067a6:	1192      	asrs	r2, r2, #6
 80067a8:	17db      	asrs	r3, r3, #31
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	4b53      	ldr	r3, [pc, #332]	@ (80068fc <Save_Data+0x3c0>)
 80067b0:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = (uint16_t)(temp_z / ACC_FIFO_WATERMARK);
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	4a50      	ldr	r2, [pc, #320]	@ (80068f8 <Save_Data+0x3bc>)
 80067b6:	fb82 1203 	smull	r1, r2, r2, r3
 80067ba:	1192      	asrs	r2, r2, #6
 80067bc:	17db      	asrs	r3, r3, #31
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	4b4e      	ldr	r3, [pc, #312]	@ (80068fc <Save_Data+0x3c0>)
 80067c4:	80da      	strh	r2, [r3, #6]
		flags.ACC_Complete = 0;
 80067c6:	4a4e      	ldr	r2, [pc, #312]	@ (8006900 <Save_Data+0x3c4>)
 80067c8:	7813      	ldrb	r3, [r2, #0]
 80067ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ce:	7013      	strb	r3, [r2, #0]
	}
	Address_Offset += ACCELERATION_LEN;
 80067d0:	4b4c      	ldr	r3, [pc, #304]	@ (8006904 <Save_Data+0x3c8>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 80067d8:	4a4a      	ldr	r2, [pc, #296]	@ (8006904 <Save_Data+0x3c8>)
 80067da:	6013      	str	r3, [r2, #0]

	INA3221_Read_Measure(&Supply);
 80067dc:	484a      	ldr	r0, [pc, #296]	@ (8006908 <Save_Data+0x3cc>)
 80067de:	f7fa fc37 	bl	8001050 <INA3221_Read_Measure>
	uint16_t new_temp = 0;
 80067e2:	2300      	movs	r3, #0
 80067e4:	823b      	strh	r3, [r7, #16]
	if((new_temp = Read_Temperature()) != 0)
 80067e6:	f7fa fbd4 	bl	8000f92 <Read_Temperature>
 80067ea:	4603      	mov	r3, r0
 80067ec:	823b      	strh	r3, [r7, #16]
 80067ee:	8a3b      	ldrh	r3, [r7, #16]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d002      	beq.n	80067fa <Save_Data+0x2be>
	{
		Temperature = new_temp;
 80067f4:	4a45      	ldr	r2, [pc, #276]	@ (800690c <Save_Data+0x3d0>)
 80067f6:	8a3b      	ldrh	r3, [r7, #16]
 80067f8:	8013      	strh	r3, [r2, #0]
	}
	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 80067fa:	4945      	ldr	r1, [pc, #276]	@ (8006910 <Save_Data+0x3d4>)
 80067fc:	203b      	movs	r0, #59	@ 0x3b
 80067fe:	f7fc fb3f 	bl	8002e80 <BC_MultiRead_Reg>

//	__disable_irq();
	Compressed_Sample_Typedef sample;
    sample.compressed_size = Compress_Sample(Saving_Buffer, SAVING_BUFFER_LEN, compressed_data);
 8006802:	4638      	mov	r0, r7
 8006804:	4b43      	ldr	r3, [pc, #268]	@ (8006914 <Save_Data+0x3d8>)
 8006806:	f44f 62e6 	mov.w	r2, #1840	@ 0x730
 800680a:	4943      	ldr	r1, [pc, #268]	@ (8006918 <Save_Data+0x3dc>)
 800680c:	f000 fc5a 	bl	80070c4 <Compress_Sample>
 8006810:	f107 0308 	add.w	r3, r7, #8
 8006814:	463a      	mov	r2, r7
 8006816:	6810      	ldr	r0, [r2, #0]
 8006818:	6018      	str	r0, [r3, #0]
 800681a:	8892      	ldrh	r2, [r2, #4]
 800681c:	809a      	strh	r2, [r3, #4]
	RAM_Save_Measure(&sample, compressed_data);
 800681e:	f107 0308 	add.w	r3, r7, #8
 8006822:	493c      	ldr	r1, [pc, #240]	@ (8006914 <Save_Data+0x3d8>)
 8006824:	4618      	mov	r0, r3
 8006826:	f000 fa73 	bl	8006d10 <RAM_Save_Measure>
//	__enable_irq();

	Address_Offset = 0;
 800682a:	4b36      	ldr	r3, [pc, #216]	@ (8006904 <Save_Data+0x3c8>)
 800682c:	2200      	movs	r2, #0
 800682e:	601a      	str	r2, [r3, #0]

	if(flags.Hammer_Detected || flags.Threshold_Detected)
 8006830:	4b33      	ldr	r3, [pc, #204]	@ (8006900 <Save_Data+0x3c4>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	f003 0308 	and.w	r3, r3, #8
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d106      	bne.n	800684c <Save_Data+0x310>
 800683e:	4b30      	ldr	r3, [pc, #192]	@ (8006900 <Save_Data+0x3c4>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	f003 0310 	and.w	r3, r3, #16
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b00      	cmp	r3, #0
 800684a:	d04e      	beq.n	80068ea <Save_Data+0x3ae>
	{
		Cycles_After_Warning++;
 800684c:	4b33      	ldr	r3, [pc, #204]	@ (800691c <Save_Data+0x3e0>)
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	3301      	adds	r3, #1
 8006852:	b29a      	uxth	r2, r3
 8006854:	4b31      	ldr	r3, [pc, #196]	@ (800691c <Save_Data+0x3e0>)
 8006856:	801a      	strh	r2, [r3, #0]
		if(Cycles_After_Warning >= config.buffering_secs * (config.samp_freq / ACC_FIFO_WATERMARK))
 8006858:	4b30      	ldr	r3, [pc, #192]	@ (800691c <Save_Data+0x3e0>)
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	4619      	mov	r1, r3
 800685e:	4b30      	ldr	r3, [pc, #192]	@ (8006920 <Save_Data+0x3e4>)
 8006860:	791b      	ldrb	r3, [r3, #4]
 8006862:	4618      	mov	r0, r3
 8006864:	4b2e      	ldr	r3, [pc, #184]	@ (8006920 <Save_Data+0x3e4>)
 8006866:	885b      	ldrh	r3, [r3, #2]
 8006868:	4a23      	ldr	r2, [pc, #140]	@ (80068f8 <Save_Data+0x3bc>)
 800686a:	fba2 2303 	umull	r2, r3, r2, r3
 800686e:	099b      	lsrs	r3, r3, #6
 8006870:	b29b      	uxth	r3, r3
 8006872:	fb00 f303 	mul.w	r3, r0, r3
 8006876:	4299      	cmp	r1, r3
 8006878:	db37      	blt.n	80068ea <Save_Data+0x3ae>
		{
			if(!flags.CMD.Measure_Request)
 800687a:	4b21      	ldr	r3, [pc, #132]	@ (8006900 <Save_Data+0x3c4>)
 800687c:	789b      	ldrb	r3, [r3, #2]
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d130      	bne.n	80068ea <Save_Data+0x3ae>
			{
				if (!flags.Meas_TransferInProgress)
 8006888:	4b1d      	ldr	r3, [pc, #116]	@ (8006900 <Save_Data+0x3c4>)
 800688a:	785b      	ldrb	r3, [r3, #1]
 800688c:	f003 0304 	and.w	r3, r3, #4
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d129      	bne.n	80068ea <Save_Data+0x3ae>
				{
					LED_Start(RED_LED, FAST, LOW);
 8006896:	2207      	movs	r2, #7
 8006898:	2100      	movs	r1, #0
 800689a:	2004      	movs	r0, #4
 800689c:	f7fd fbf4 	bl	8004088 <LED_Start>
					Switch_Buffer();
 80068a0:	f000 f842 	bl	8006928 <Switch_Buffer>
					flags.CMD.Measure_Request = 1;
 80068a4:	4a16      	ldr	r2, [pc, #88]	@ (8006900 <Save_Data+0x3c4>)
 80068a6:	7893      	ldrb	r3, [r2, #2]
 80068a8:	f043 0301 	orr.w	r3, r3, #1
 80068ac:	7093      	strb	r3, [r2, #2]
					Send_Measure_Addr = 0;
 80068ae:	4b1d      	ldr	r3, [pc, #116]	@ (8006924 <Save_Data+0x3e8>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	601a      	str	r2, [r3, #0]
					Cycles_After_Warning = 0;
 80068b4:	4b19      	ldr	r3, [pc, #100]	@ (800691c <Save_Data+0x3e0>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	801a      	strh	r2, [r3, #0]
					if(flags.Hammer_Detected)
 80068ba:	4b11      	ldr	r3, [pc, #68]	@ (8006900 <Save_Data+0x3c4>)
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	f003 0308 	and.w	r3, r3, #8
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d004      	beq.n	80068d2 <Save_Data+0x396>
					{
						flags.Hammer_Detected = 0;
 80068c8:	4a0d      	ldr	r2, [pc, #52]	@ (8006900 <Save_Data+0x3c4>)
 80068ca:	7813      	ldrb	r3, [r2, #0]
 80068cc:	f023 0308 	bic.w	r3, r3, #8
 80068d0:	7013      	strb	r3, [r2, #0]
					}
					if(flags.Threshold_Detected)
 80068d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006900 <Save_Data+0x3c4>)
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	f003 0310 	and.w	r3, r3, #16
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d004      	beq.n	80068ea <Save_Data+0x3ae>
					{
						flags.Threshold_Detected = 0;
 80068e0:	4a07      	ldr	r2, [pc, #28]	@ (8006900 <Save_Data+0x3c4>)
 80068e2:	7813      	ldrb	r3, [r2, #0]
 80068e4:	f023 0310 	bic.w	r3, r3, #16
 80068e8:	7013      	strb	r3, [r2, #0]
				
			}
		}
	}

}
 80068ea:	bf00      	nop
 80068ec:	3730      	adds	r7, #48	@ 0x30
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	20003c54 	.word	0x20003c54
 80068f8:	51eb851f 	.word	0x51eb851f
 80068fc:	200041d4 	.word	0x200041d4
 8006900:	20001790 	.word	0x20001790
 8006904:	20004974 	.word	0x20004974
 8006908:	200038fc 	.word	0x200038fc
 800690c:	200041dc 	.word	0x200041dc
 8006910:	200041de 	.word	0x200041de
 8006914:	200057a8 	.word	0x200057a8
 8006918:	20004244 	.word	0x20004244
 800691c:	20004978 	.word	0x20004978
 8006920:	20001794 	.word	0x20001794
 8006924:	20004984 	.word	0x20004984

08006928 <Switch_Buffer>:

/*-----CAMBIO BUFFER-----*/
void Switch_Buffer(void)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800692e:	b672      	cpsid	i
}
 8006930:	bf00      	nop
	__disable_irq();
    uint32_t temp_add = sys.Current_RAM_Address;
 8006932:	4b31      	ldr	r3, [pc, #196]	@ (80069f8 <Switch_Buffer+0xd0>)
 8006934:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006938:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800693c:	607b      	str	r3, [r7, #4]
    uint32_t temp_len = sys. Current_RAM_Len;
 800693e:	4b2e      	ldr	r3, [pc, #184]	@ (80069f8 <Switch_Buffer+0xd0>)
 8006940:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006944:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006948:	603b      	str	r3, [r7, #0]
    sys.Inactive_RAM_Address = temp_add;
 800694a:	4b2b      	ldr	r3, [pc, #172]	@ (80069f8 <Switch_Buffer+0xd0>)
 800694c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006950:	461a      	mov	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
    sys.Inactive_RAM_Len = temp_len;
 8006958:	4b27      	ldr	r3, [pc, #156]	@ (80069f8 <Switch_Buffer+0xd0>)
 800695a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800695e:	461a      	mov	r2, r3
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4

    if (sys.Active_RAM_Buffer == 0) 
 8006966:	4b24      	ldr	r3, [pc, #144]	@ (80069f8 <Switch_Buffer+0xd0>)
 8006968:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800696c:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d115      	bne.n	80069a0 <Switch_Buffer+0x78>
	{
		sys.Inactive_RAM_Base = RAM_FIRST_BUFFER_ADD;
 8006974:	4b20      	ldr	r3, [pc, #128]	@ (80069f8 <Switch_Buffer+0xd0>)
 8006976:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800697a:	461a      	mov	r2, r3
 800697c:	2300      	movs	r3, #0
 800697e:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
        sys.Active_RAM_Buffer = 1;
 8006982:	4b1d      	ldr	r3, [pc, #116]	@ (80069f8 <Switch_Buffer+0xd0>)
 8006984:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006988:	2201      	movs	r2, #1
 800698a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        sys.Current_RAM_Base = RAM_SECOND_BUFFER_ADD;
 800698e:	4b1a      	ldr	r3, [pc, #104]	@ (80069f8 <Switch_Buffer+0xd0>)
 8006990:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006994:	461a      	mov	r2, r3
 8006996:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800699a:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
 800699e:	e014      	b.n	80069ca <Switch_Buffer+0xa2>
    } 
	else 
	{
		sys.Inactive_RAM_Base = RAM_SECOND_BUFFER_ADD;
 80069a0:	4b15      	ldr	r3, [pc, #84]	@ (80069f8 <Switch_Buffer+0xd0>)
 80069a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069a6:	461a      	mov	r2, r3
 80069a8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80069ac:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
        sys.Active_RAM_Buffer = 0;
 80069b0:	4b11      	ldr	r3, [pc, #68]	@ (80069f8 <Switch_Buffer+0xd0>)
 80069b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        sys.Current_RAM_Base = RAM_FIRST_BUFFER_ADD;
 80069bc:	4b0e      	ldr	r3, [pc, #56]	@ (80069f8 <Switch_Buffer+0xd0>)
 80069be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069c2:	461a      	mov	r2, r3
 80069c4:	2300      	movs	r3, #0
 80069c6:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
    }

    sys.Current_RAM_Address = 0;
 80069ca:	4b0b      	ldr	r3, [pc, #44]	@ (80069f8 <Switch_Buffer+0xd0>)
 80069cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069d0:	461a      	mov	r2, r3
 80069d2:	2300      	movs	r3, #0
 80069d4:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
    sys.Current_RAM_Len = 0;
 80069d8:	4b07      	ldr	r3, [pc, #28]	@ (80069f8 <Switch_Buffer+0xd0>)
 80069da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069de:	461a      	mov	r2, r3
 80069e0:	2300      	movs	r3, #0
 80069e2:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
  __ASM volatile ("cpsie i" : : : "memory");
 80069e6:	b662      	cpsie	i
}
 80069e8:	bf00      	nop
	__enable_irq();
}
 80069ea:	bf00      	nop
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	200005d8 	.word	0x200005d8

080069fc <Erase_RAM_Data>:

/*-----CANCELLAZIONE DATI RAM-----*/
void Erase_RAM_Data(void)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8006a02:	af00      	add	r7, sp, #0
	uint8_t zero_buffer[1024] = {0};
 8006a04:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8006a08:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a12:	461a      	mov	r2, r3
 8006a14:	2100      	movs	r1, #0
 8006a16:	f010 ff43 	bl	80178a0 <memset>
	for (uint32_t addr = 0; addr < 0x800000; addr += sizeof(zero_buffer)) 
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8006a20:	e00d      	b.n	8006a3e <Erase_RAM_Data+0x42>
	{
		RAM_Write(addr, sizeof(zero_buffer), zero_buffer);
 8006a22:	1d3b      	adds	r3, r7, #4
 8006a24:	461a      	mov	r2, r3
 8006a26:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006a2a:	f8d7 0404 	ldr.w	r0, [r7, #1028]	@ 0x404
 8006a2e:	f001 fb25 	bl	800807c <RAM_Write>
	for (uint32_t addr = 0; addr < 0x800000; addr += sizeof(zero_buffer)) 
 8006a32:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8006a36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a3a:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8006a3e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8006a42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a46:	d3ec      	bcc.n	8006a22 <Erase_RAM_Data+0x26>
	}
}
 8006a48:	bf00      	nop
 8006a4a:	bf00      	nop
 8006a4c:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <Start_Measure>:


/*-----AVVIO MISURA-----*/
void Start_Measure(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	af00      	add	r7, sp, #0
	Erase_RAM_Data();
 8006a58:	f7ff ffd0 	bl	80069fc <Erase_RAM_Data>
	sys.RAM_Samples_Number = (config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * 2;
 8006a5c:	4b53      	ldr	r3, [pc, #332]	@ (8006bac <Start_Measure+0x158>)
 8006a5e:	885b      	ldrh	r3, [r3, #2]
 8006a60:	4a53      	ldr	r2, [pc, #332]	@ (8006bb0 <Start_Measure+0x15c>)
 8006a62:	fba2 2303 	umull	r2, r3, r2, r3
 8006a66:	099b      	lsrs	r3, r3, #6
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	4b4f      	ldr	r3, [pc, #316]	@ (8006bac <Start_Measure+0x158>)
 8006a6e:	791b      	ldrb	r3, [r3, #4]
 8006a70:	fb02 f303 	mul.w	r3, r2, r3
 8006a74:	005b      	lsls	r3, r3, #1
 8006a76:	461a      	mov	r2, r3
 8006a78:	4b4e      	ldr	r3, [pc, #312]	@ (8006bb4 <Start_Measure+0x160>)
 8006a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a7e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	sys.Active_RAM_Buffer = 0;
 8006a82:	4b4c      	ldr	r3, [pc, #304]	@ (8006bb4 <Start_Measure+0x160>)
 8006a84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
	sys.Inactive_RAM_Address = 0;
 8006a8e:	4b49      	ldr	r3, [pc, #292]	@ (8006bb4 <Start_Measure+0x160>)
 8006a90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a94:	461a      	mov	r2, r3
 8006a96:	2300      	movs	r3, #0
 8006a98:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
	sys.Current_RAM_Base = RAM_FIRST_BUFFER_ADD;
 8006a9c:	4b45      	ldr	r3, [pc, #276]	@ (8006bb4 <Start_Measure+0x160>)
 8006a9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
	sys.Current_RAM_Address = 0;
 8006aaa:	4b42      	ldr	r3, [pc, #264]	@ (8006bb4 <Start_Measure+0x160>)
 8006aac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
	flags.SIM_isConnected = 1;
 8006ab8:	4a3f      	ldr	r2, [pc, #252]	@ (8006bb8 <Start_Measure+0x164>)
 8006aba:	7853      	ldrb	r3, [r2, #1]
 8006abc:	f043 0310 	orr.w	r3, r3, #16
 8006ac0:	7053      	strb	r3, [r2, #1]
	memset(Pressure, 0, sizeof(Pressure));
 8006ac2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	483c      	ldr	r0, [pc, #240]	@ (8006bbc <Start_Measure+0x168>)
 8006aca:	f010 fee9 	bl	80178a0 <memset>
	memset(Volume_Period, 0, sizeof(Volume_Period));
 8006ace:	2228      	movs	r2, #40	@ 0x28
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	483b      	ldr	r0, [pc, #236]	@ (8006bc0 <Start_Measure+0x16c>)
 8006ad4:	f010 fee4 	bl	80178a0 <memset>
	memset(Acceleration, 0, sizeof(Acceleration));
 8006ad8:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8006adc:	2100      	movs	r1, #0
 8006ade:	4839      	ldr	r0, [pc, #228]	@ (8006bc4 <Start_Measure+0x170>)
 8006ae0:	f010 fede 	bl	80178a0 <memset>
	memset(&Supply, 0, sizeof(Supply));
 8006ae4:	220c      	movs	r2, #12
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	4837      	ldr	r0, [pc, #220]	@ (8006bc8 <Start_Measure+0x174>)
 8006aea:	f010 fed9 	bl	80178a0 <memset>
	Temperature = 0;
 8006aee:	4b37      	ldr	r3, [pc, #220]	@ (8006bcc <Start_Measure+0x178>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	801a      	strh	r2, [r3, #0]
	Saved_Bytes = 0;
 8006af4:	4b36      	ldr	r3, [pc, #216]	@ (8006bd0 <Start_Measure+0x17c>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	601a      	str	r2, [r3, #0]
	Saved_Samples = 0;
 8006afa:	4b36      	ldr	r3, [pc, #216]	@ (8006bd4 <Start_Measure+0x180>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	801a      	strh	r2, [r3, #0]
	Address_Offset = 0;
 8006b00:	4b35      	ldr	r3, [pc, #212]	@ (8006bd8 <Start_Measure+0x184>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
	Cycles_After_Warning = 0;
 8006b06:	4b35      	ldr	r3, [pc, #212]	@ (8006bdc <Start_Measure+0x188>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	801a      	strh	r2, [r3, #0]
	Measure_Bytes_Sent = 0;
 8006b0c:	4b34      	ldr	r3, [pc, #208]	@ (8006be0 <Start_Measure+0x18c>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	601a      	str	r2, [r3, #0]
	Clear_Flags();
 8006b12:	f001 f857 	bl	8007bc4 <Clear_Flags>

	ADC_TIMER->Instance->PSC = 100 - 1;
 8006b16:	4b33      	ldr	r3, [pc, #204]	@ (8006be4 <Start_Measure+0x190>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2263      	movs	r2, #99	@ 0x63
 8006b1c:	629a      	str	r2, [r3, #40]	@ 0x28
	ADC_TIMER->Instance->ARR = (uint32_t)(SystemCoreClock / ((ADC_TIMER->Instance->PSC + 1) * config.samp_freq)) - 1;
 8006b1e:	4b32      	ldr	r3, [pc, #200]	@ (8006be8 <Start_Measure+0x194>)
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	4b30      	ldr	r3, [pc, #192]	@ (8006be4 <Start_Measure+0x190>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b28:	3301      	adds	r3, #1
 8006b2a:	4920      	ldr	r1, [pc, #128]	@ (8006bac <Start_Measure+0x158>)
 8006b2c:	8849      	ldrh	r1, [r1, #2]
 8006b2e:	fb01 f303 	mul.w	r3, r1, r3
 8006b32:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b36:	4b2b      	ldr	r3, [pc, #172]	@ (8006be4 <Start_Measure+0x190>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3a01      	subs	r2, #1
 8006b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->ARR = (uint32_t)(config.samp_freq / 25) - 1;
 8006b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8006bac <Start_Measure+0x158>)
 8006b40:	885b      	ldrh	r3, [r3, #2]
 8006b42:	4a1b      	ldr	r2, [pc, #108]	@ (8006bb0 <Start_Measure+0x15c>)
 8006b44:	fba2 2303 	umull	r2, r3, r2, r3
 8006b48:	08db      	lsrs	r3, r3, #3
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	4b27      	ldr	r3, [pc, #156]	@ (8006bec <Start_Measure+0x198>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	3a01      	subs	r2, #1
 8006b54:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->CCR3 = (uint32_t)((ACC_TIMER->Instance->ARR + 1) / 2);
 8006b56:	4b25      	ldr	r3, [pc, #148]	@ (8006bec <Start_Measure+0x198>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5c:	1c5a      	adds	r2, r3, #1
 8006b5e:	4b23      	ldr	r3, [pc, #140]	@ (8006bec <Start_Measure+0x198>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	0852      	lsrs	r2, r2, #1
 8006b64:	63da      	str	r2, [r3, #60]	@ 0x3c
	if(Acc_Init(&acc, config.samp_freq) != HAL_OK)
 8006b66:	4b11      	ldr	r3, [pc, #68]	@ (8006bac <Start_Measure+0x158>)
 8006b68:	885b      	ldrh	r3, [r3, #2]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	4820      	ldr	r0, [pc, #128]	@ (8006bf0 <Start_Measure+0x19c>)
 8006b6e:	f7fd f8c9 	bl	8003d04 <Acc_Init>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d003      	beq.n	8006b80 <Start_Measure+0x12c>
	{
		state = IDLE;
 8006b78:	4b1e      	ldr	r3, [pc, #120]	@ (8006bf4 <Start_Measure+0x1a0>)
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	701a      	strb	r2, [r3, #0]
		return;
 8006b7e:	e014      	b.n	8006baa <Start_Measure+0x156>
	}

	lsm6dsv16x_fifo_mode_set(&acc, LSM6DSV16X_STREAM_MODE);
 8006b80:	2106      	movs	r1, #6
 8006b82:	481b      	ldr	r0, [pc, #108]	@ (8006bf0 <Start_Measure+0x19c>)
 8006b84:	f7fd ff41 	bl	8004a0a <lsm6dsv16x_fifo_mode_set>
	HAL_ADC_Start_DMA(PRESSURE_ADC, (uint32_t*)&Pressure, PRESS_FULL_SAMPLES);
 8006b88:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006b8c:	490b      	ldr	r1, [pc, #44]	@ (8006bbc <Start_Measure+0x168>)
 8006b8e:	481a      	ldr	r0, [pc, #104]	@ (8006bf8 <Start_Measure+0x1a4>)
 8006b90:	f005 fe14 	bl	800c7bc <HAL_ADC_Start_DMA>
	HAL_TIM_IC_Start_IT(VOLUME_TIMER, TIM_CHANNEL_1);
 8006b94:	2100      	movs	r1, #0
 8006b96:	4819      	ldr	r0, [pc, #100]	@ (8006bfc <Start_Measure+0x1a8>)
 8006b98:	f00d f960 	bl	8013e5c <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(ACC_TIMER, TIM_CHANNEL_3);
 8006b9c:	2108      	movs	r1, #8
 8006b9e:	4813      	ldr	r0, [pc, #76]	@ (8006bec <Start_Measure+0x198>)
 8006ba0:	f00c ff68 	bl	8013a74 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(ADC_TIMER);
 8006ba4:	480f      	ldr	r0, [pc, #60]	@ (8006be4 <Start_Measure+0x190>)
 8006ba6:	f00c fe1d 	bl	80137e4 <HAL_TIM_Base_Start>
}
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	20001794 	.word	0x20001794
 8006bb0:	51eb851f 	.word	0x51eb851f
 8006bb4:	200005d8 	.word	0x200005d8
 8006bb8:	20001790 	.word	0x20001790
 8006bbc:	2000390c 	.word	0x2000390c
 8006bc0:	20003c2c 	.word	0x20003c2c
 8006bc4:	20003c54 	.word	0x20003c54
 8006bc8:	200038fc 	.word	0x200038fc
 8006bcc:	200041dc 	.word	0x200041dc
 8006bd0:	2000497c 	.word	0x2000497c
 8006bd4:	20004980 	.word	0x20004980
 8006bd8:	20004974 	.word	0x20004974
 8006bdc:	20004978 	.word	0x20004978
 8006be0:	20004f3c 	.word	0x20004f3c
 8006be4:	200003e8 	.word	0x200003e8
 8006be8:	20000000 	.word	0x20000000
 8006bec:	2000039c 	.word	0x2000039c
 8006bf0:	20004fa0 	.word	0x20004fa0
 8006bf4:	200005d4 	.word	0x200005d4
 8006bf8:	200000b0 	.word	0x200000b0
 8006bfc:	20000350 	.word	0x20000350

08006c00 <Stop_Measure>:

/*-----FINE MISURA-----*/
void Stop_Measure(void)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006c04:	b672      	cpsid	i
}
 8006c06:	bf00      	nop
	__disable_irq();
	HAL_ADC_Stop_DMA(PRESSURE_ADC);
 8006c08:	480a      	ldr	r0, [pc, #40]	@ (8006c34 <Stop_Measure+0x34>)
 8006c0a:	f005 fe93 	bl	800c934 <HAL_ADC_Stop_DMA>
	HAL_TIM_Base_Stop(ADC_TIMER);
 8006c0e:	480a      	ldr	r0, [pc, #40]	@ (8006c38 <Stop_Measure+0x38>)
 8006c10:	f00c fe50 	bl	80138b4 <HAL_TIM_Base_Stop>
	HAL_TIM_PWM_Stop(ACC_TIMER, TIM_CHANNEL_3);
 8006c14:	2108      	movs	r1, #8
 8006c16:	4809      	ldr	r0, [pc, #36]	@ (8006c3c <Stop_Measure+0x3c>)
 8006c18:	f00d f832 	bl	8013c80 <HAL_TIM_PWM_Stop>
	HAL_TIM_IC_Stop_IT(VOLUME_TIMER, TIM_CHANNEL_1);
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	4808      	ldr	r0, [pc, #32]	@ (8006c40 <Stop_Measure+0x40>)
 8006c20:	f00d fa66 	bl	80140f0 <HAL_TIM_IC_Stop_IT>
	lsm6dsv16x_fifo_mode_set(&acc, LSM6DSV16X_BYPASS_MODE);
 8006c24:	2100      	movs	r1, #0
 8006c26:	4807      	ldr	r0, [pc, #28]	@ (8006c44 <Stop_Measure+0x44>)
 8006c28:	f7fd feef 	bl	8004a0a <lsm6dsv16x_fifo_mode_set>
  __ASM volatile ("cpsie i" : : : "memory");
 8006c2c:	b662      	cpsie	i
}
 8006c2e:	bf00      	nop
	__enable_irq();
}
 8006c30:	bf00      	nop
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	200000b0 	.word	0x200000b0
 8006c38:	200003e8 	.word	0x200003e8
 8006c3c:	2000039c 	.word	0x2000039c
 8006c40:	20000350 	.word	0x20000350
 8006c44:	20004fa0 	.word	0x20004fa0

08006c48 <Warning_Detection>:

/*-----DETECTION COLPO D'ARIETE-----*/
void Warning_Detection(uint16_t* Data)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
	uint16_t max = Data[0];
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	881b      	ldrh	r3, [r3, #0]
 8006c54:	81fb      	strh	r3, [r7, #14]
	uint16_t min = Data[0];
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	81bb      	strh	r3, [r7, #12]

	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	60bb      	str	r3, [r7, #8]
 8006c60:	e03a      	b.n	8006cd8 <Warning_Detection+0x90>
	{
		if(Data[i] > max)
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	4413      	add	r3, r2
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	89fa      	ldrh	r2, [r7, #14]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d206      	bcs.n	8006c80 <Warning_Detection+0x38>
		{
			max = Data[i];
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	4413      	add	r3, r2
 8006c7a:	881b      	ldrh	r3, [r3, #0]
 8006c7c:	81fb      	strh	r3, [r7, #14]
 8006c7e:	e00d      	b.n	8006c9c <Warning_Detection+0x54>
		}
		else if(Data[i] < min)
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	005b      	lsls	r3, r3, #1
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	4413      	add	r3, r2
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	89ba      	ldrh	r2, [r7, #12]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d905      	bls.n	8006c9c <Warning_Detection+0x54>
		{
			min = Data[i];
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	005b      	lsls	r3, r3, #1
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	4413      	add	r3, r2
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	81bb      	strh	r3, [r7, #12]
		}

		if(Data[i] < sys.Low_th || Data[i] > sys.High_th)
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	005b      	lsls	r3, r3, #1
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	881a      	ldrh	r2, [r3, #0]
 8006ca6:	4b17      	ldr	r3, [pc, #92]	@ (8006d04 <Warning_Detection+0xbc>)
 8006ca8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d30a      	bcc.n	8006cc8 <Warning_Detection+0x80>
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	4413      	add	r3, r2
 8006cba:	881a      	ldrh	r2, [r3, #0]
 8006cbc:	4b11      	ldr	r3, [pc, #68]	@ (8006d04 <Warning_Detection+0xbc>)
 8006cbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cc2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d904      	bls.n	8006cd2 <Warning_Detection+0x8a>
		{
			flags.Threshold_Detected= 1;
 8006cc8:	4a0f      	ldr	r2, [pc, #60]	@ (8006d08 <Warning_Detection+0xc0>)
 8006cca:	7813      	ldrb	r3, [r2, #0]
 8006ccc:	f043 0310 	orr.w	r3, r3, #16
 8006cd0:	7013      	strb	r3, [r2, #0]
	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	60bb      	str	r3, [r7, #8]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2bc7      	cmp	r3, #199	@ 0xc7
 8006cdc:	ddc1      	ble.n	8006c62 <Warning_Detection+0x1a>
		}
	}

	if(max - min >= config.hammer_th)
 8006cde:	89fa      	ldrh	r2, [r7, #14]
 8006ce0:	89bb      	ldrh	r3, [r7, #12]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	4a09      	ldr	r2, [pc, #36]	@ (8006d0c <Warning_Detection+0xc4>)
 8006ce6:	8a12      	ldrh	r2, [r2, #16]
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	db04      	blt.n	8006cf6 <Warning_Detection+0xae>
	{
		flags.Hammer_Detected = 1;
 8006cec:	4a06      	ldr	r2, [pc, #24]	@ (8006d08 <Warning_Detection+0xc0>)
 8006cee:	7813      	ldrb	r3, [r2, #0]
 8006cf0:	f043 0308 	orr.w	r3, r3, #8
 8006cf4:	7013      	strb	r3, [r2, #0]
	}

}
 8006cf6:	bf00      	nop
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	200005d8 	.word	0x200005d8
 8006d08:	20001790 	.word	0x20001790
 8006d0c:	20001794 	.word	0x20001794

08006d10 <RAM_Save_Measure>:

/*-----SALVATAGGIO MISURA IN RAM-----*/
void RAM_Save_Measure(Compressed_Sample_Typedef* sample, uint8_t* compressed_data)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b088      	sub	sp, #32
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
    uint32_t samples_size = sample->compressed_size.pressure_size +
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	461a      	mov	r2, r3
                            sample->compressed_size.volume_size +
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	885b      	ldrh	r3, [r3, #2]
 8006d26:	b29b      	uxth	r3, r3
    uint32_t samples_size = sample->compressed_size.pressure_size +
 8006d28:	4413      	add	r3, r2
                            sample->compressed_size.acceleration_size;
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	8892      	ldrh	r2, [r2, #4]
 8006d2e:	b292      	uxth	r2, r2
                            sample->compressed_size.volume_size +
 8006d30:	4413      	add	r3, r2
    uint32_t samples_size = sample->compressed_size.pressure_size +
 8006d32:	61fb      	str	r3, [r7, #28]
    uint32_t total_size = METADATA_SIZE + samples_size;
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	3306      	adds	r3, #6
 8006d38:	61bb      	str	r3, [r7, #24]
	uint8_t aligned_metadata[8] __attribute__((aligned(4))) = {0};
 8006d3a:	f107 0308 	add.w	r3, r7, #8
 8006d3e:	2200      	movs	r2, #0
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	605a      	str	r2, [r3, #4]

    // Copia SOLO i 6 bytes necessari
    aligned_metadata[0] = sample->compressed_size.pressure_size & 0xFF;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	881b      	ldrh	r3, [r3, #0]
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	723b      	strb	r3, [r7, #8]
    aligned_metadata[1] = sample->compressed_size.pressure_size >> 8;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	0a1b      	lsrs	r3, r3, #8
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	727b      	strb	r3, [r7, #9]
    aligned_metadata[2] = sample->compressed_size.volume_size & 0xFF;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	885b      	ldrh	r3, [r3, #2]
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	72bb      	strb	r3, [r7, #10]
    aligned_metadata[3] = sample->compressed_size.volume_size >> 8;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	885b      	ldrh	r3, [r3, #2]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	0a1b      	lsrs	r3, r3, #8
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	72fb      	strb	r3, [r7, #11]
    aligned_metadata[4] = sample->compressed_size.acceleration_size & 0xFF;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	889b      	ldrh	r3, [r3, #4]
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	733b      	strb	r3, [r7, #12]
    aligned_metadata[5] = sample->compressed_size.acceleration_size >> 8;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	889b      	ldrh	r3, [r3, #4]
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	0a1b      	lsrs	r3, r3, #8
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	737b      	strb	r3, [r7, #13]

    // Controllo corruzione
    if (sys.Current_RAM_Address >= (RAM_SECOND_BUFFER_ADD - RAM_FIRST_BUFFER_ADD)) 
 8006d8c:	4b54      	ldr	r3, [pc, #336]	@ (8006ee0 <RAM_Save_Measure+0x1d0>)
 8006d8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d92:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006d96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d9a:	d316      	bcc.n	8006dca <RAM_Save_Measure+0xba>
	{
    	sys.Current_RAM_Len = sys.Current_RAM_Address;
 8006d9c:	4b50      	ldr	r3, [pc, #320]	@ (8006ee0 <RAM_Save_Measure+0x1d0>)
 8006d9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006da2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006da6:	4a4e      	ldr	r2, [pc, #312]	@ (8006ee0 <RAM_Save_Measure+0x1d0>)
 8006da8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006dac:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
        sys.Current_RAM_Address = 0;
 8006db0:	4b4b      	ldr	r3, [pc, #300]	@ (8006ee0 <RAM_Save_Measure+0x1d0>)
 8006db2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006db6:	461a      	mov	r2, r3
 8006db8:	2300      	movs	r3, #0
 8006dba:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
        Saved_Bytes = 0;
 8006dbe:	4b49      	ldr	r3, [pc, #292]	@ (8006ee4 <RAM_Save_Measure+0x1d4>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	601a      	str	r2, [r3, #0]
        Saved_Samples = 0;
 8006dc4:	4b48      	ldr	r3, [pc, #288]	@ (8006ee8 <RAM_Save_Measure+0x1d8>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	801a      	strh	r2, [r3, #0]
    }

    // ========= LOGICA CIRCOLARE (PRIORITARIA) =========
    if(Saved_Samples >= sys.RAM_Samples_Number) 
 8006dca:	4b47      	ldr	r3, [pc, #284]	@ (8006ee8 <RAM_Save_Measure+0x1d8>)
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	4b43      	ldr	r3, [pc, #268]	@ (8006ee0 <RAM_Save_Measure+0x1d0>)
 8006dd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dd6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d316      	bcc.n	8006e0c <RAM_Save_Measure+0xfc>
	{
        // RESET CIRCOLARE - riparti dall'inizio dello stesso buffer
    	sys.Current_RAM_Len = sys.Current_RAM_Address;
 8006dde:	4b40      	ldr	r3, [pc, #256]	@ (8006ee0 <RAM_Save_Measure+0x1d0>)
 8006de0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006de4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006de8:	4a3d      	ldr	r2, [pc, #244]	@ (8006ee0 <RAM_Save_Measure+0x1d0>)
 8006dea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006dee:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
        sys.Current_RAM_Address = 0;
 8006df2:	4b3b      	ldr	r3, [pc, #236]	@ (8006ee0 <RAM_Save_Measure+0x1d0>)
 8006df4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006df8:	461a      	mov	r2, r3
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
        Saved_Bytes = 0;
 8006e00:	4b38      	ldr	r3, [pc, #224]	@ (8006ee4 <RAM_Save_Measure+0x1d4>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	601a      	str	r2, [r3, #0]
        Saved_Samples = 0;
 8006e06:	4b38      	ldr	r3, [pc, #224]	@ (8006ee8 <RAM_Save_Measure+0x1d8>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	801a      	strh	r2, [r3, #0]
    }

    uint32_t address = sys.Current_RAM_Base + sys.Current_RAM_Address;
 8006e0c:	4b34      	ldr	r3, [pc, #208]	@ (8006ee0 <RAM_Save_Measure+0x1d0>)
 8006e0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e12:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8006e16:	4b32      	ldr	r3, [pc, #200]	@ (8006ee0 <RAM_Save_Measure+0x1d0>)
 8006e18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e1c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006e20:	4413      	add	r3, r2
 8006e22:	617b      	str	r3, [r7, #20]

    // Controllo overflow SOLO se non siamo in modalità circolare
    if (sys.Current_RAM_Address + total_size > (RAM_SECOND_BUFFER_ADD - RAM_FIRST_BUFFER_ADD)) 
 8006e24:	4b2e      	ldr	r3, [pc, #184]	@ (8006ee0 <RAM_Save_Measure+0x1d0>)
 8006e26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e2a:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	4413      	add	r3, r2
 8006e32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e36:	d90c      	bls.n	8006e52 <RAM_Save_Measure+0x142>
	{
    	sys.Current_RAM_Address = 0;
 8006e38:	4b29      	ldr	r3, [pc, #164]	@ (8006ee0 <RAM_Save_Measure+0x1d0>)
 8006e3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e3e:	461a      	mov	r2, r3
 8006e40:	2300      	movs	r3, #0
 8006e42:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
		Saved_Bytes = 0;
 8006e46:	4b27      	ldr	r3, [pc, #156]	@ (8006ee4 <RAM_Save_Measure+0x1d4>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	601a      	str	r2, [r3, #0]
		Saved_Samples = 0;
 8006e4c:	4b26      	ldr	r3, [pc, #152]	@ (8006ee8 <RAM_Save_Measure+0x1d8>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	801a      	strh	r2, [r3, #0]
    }

    // Salvataggio normale
    RAM_Write(address, METADATA_SIZE + 2, aligned_metadata);
 8006e52:	f107 0308 	add.w	r3, r7, #8
 8006e56:	461a      	mov	r2, r3
 8006e58:	2108      	movs	r1, #8
 8006e5a:	6978      	ldr	r0, [r7, #20]
 8006e5c:	f001 f90e 	bl	800807c <RAM_Write>
    address += METADATA_SIZE;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	3306      	adds	r3, #6
 8006e64:	617b      	str	r3, [r7, #20]
	if(samples_size % 4 != 0)
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	f003 0303 	and.w	r3, r3, #3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d015      	beq.n	8006e9c <RAM_Save_Measure+0x18c>
	{
		uint32_t padding_size = 4 - (samples_size % 4);
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	f003 0303 	and.w	r3, r3, #3
 8006e76:	f1c3 0304 	rsb	r3, r3, #4
 8006e7a:	613b      	str	r3, [r7, #16]
		memset(compressed_data + samples_size, 0xFF, padding_size);
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	4413      	add	r3, r2
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	21ff      	movs	r1, #255	@ 0xff
 8006e86:	4618      	mov	r0, r3
 8006e88:	f010 fd0a 	bl	80178a0 <memset>
		samples_size += padding_size;
 8006e8c:	69fa      	ldr	r2, [r7, #28]
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	4413      	add	r3, r2
 8006e92:	61fb      	str	r3, [r7, #28]
		total_size += padding_size;
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	4413      	add	r3, r2
 8006e9a:	61bb      	str	r3, [r7, #24]
	}
    RAM_Write(address, samples_size, compressed_data);
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	69f9      	ldr	r1, [r7, #28]
 8006ea0:	6978      	ldr	r0, [r7, #20]
 8006ea2:	f001 f8eb 	bl	800807c <RAM_Write>
    
    Saved_Bytes += total_size;
 8006ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8006ee4 <RAM_Save_Measure+0x1d4>)
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	4413      	add	r3, r2
 8006eae:	4a0d      	ldr	r2, [pc, #52]	@ (8006ee4 <RAM_Save_Measure+0x1d4>)
 8006eb0:	6013      	str	r3, [r2, #0]
    sys.Current_RAM_Address += (METADATA_SIZE + SAVING_SAMPLE_SIZE);
 8006eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee0 <RAM_Save_Measure+0x1d0>)
 8006eb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eb8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006ebc:	f203 2322 	addw	r3, r3, #546	@ 0x222
 8006ec0:	4a07      	ldr	r2, [pc, #28]	@ (8006ee0 <RAM_Save_Measure+0x1d0>)
 8006ec2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006ec6:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
    Saved_Samples++;
 8006eca:	4b07      	ldr	r3, [pc, #28]	@ (8006ee8 <RAM_Save_Measure+0x1d8>)
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	4b05      	ldr	r3, [pc, #20]	@ (8006ee8 <RAM_Save_Measure+0x1d8>)
 8006ed4:	801a      	strh	r2, [r3, #0]
}
 8006ed6:	bf00      	nop
 8006ed8:	3720      	adds	r7, #32
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	200005d8 	.word	0x200005d8
 8006ee4:	2000497c 	.word	0x2000497c
 8006ee8:	20004980 	.word	0x20004980

08006eec <Send_Measure_Chunk>:

/*-----INVIO CHUNK MISURA-----*/
uint32_t Send_Measure_Chunk(uint32_t buffer_base, uint32_t buffer_len, uint32_t start_address)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	f5ad 6d8f 	sub.w	sp, sp, #1144	@ 0x478
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8006ef8:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8006efc:	6018      	str	r0, [r3, #0]
 8006efe:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8006f02:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 8006f06:	6019      	str	r1, [r3, #0]
 8006f08:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8006f0c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006f10:	601a      	str	r2, [r3, #0]
    uint32_t raw_fill = 0;
 8006f12:	2300      	movs	r3, #0
 8006f14:	f8c7 3474 	str.w	r3, [r7, #1140]	@ 0x474
    uint8_t raw_buffer[1100];
    uint32_t address = buffer_base + start_address;
 8006f18:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8006f1c:	f2a3 426c 	subw	r2, r3, #1132	@ 0x46c
 8006f20:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8006f24:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006f28:	6812      	ldr	r2, [r2, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f8c7 3470 	str.w	r3, [r7, #1136]	@ 0x470

    // Controllo base
    if (start_address >= (RAM_SECOND_BUFFER_ADD - RAM_FIRST_BUFFER_ADD))
 8006f32:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8006f36:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f40:	d302      	bcc.n	8006f48 <Send_Measure_Chunk+0x5c>
    {
        return (uint32_t)-1;  // Parametri non validi
 8006f42:	f04f 33ff 	mov.w	r3, #4294967295
 8006f46:	e0b6      	b.n	80070b6 <Send_Measure_Chunk+0x1ca>
    }

    do 
    {
        // Chunk pieno per metadata
        if ((raw_fill + METADATA_SIZE) > sizeof(raw_buffer)) 
 8006f48:	f8d7 3474 	ldr.w	r3, [r7, #1140]	@ 0x474
 8006f4c:	3306      	adds	r3, #6
 8006f4e:	f240 424c 	movw	r2, #1100	@ 0x44c
 8006f52:	4293      	cmp	r3, r2
 8006f54:	f200 8092 	bhi.w	800707c <Send_Measure_Chunk+0x190>
        {
            break;  // Chunk pieno, invia
        }

        if(address == buffer_base + buffer_len)
 8006f58:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8006f5c:	f2a3 426c 	subw	r2, r3, #1132	@ 0x46c
 8006f60:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8006f64:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 8006f68:	6812      	ldr	r2, [r2, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f8d7 2470 	ldr.w	r2, [r7, #1136]	@ 0x470
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d106      	bne.n	8006f84 <Send_Measure_Chunk+0x98>
        {
        	address = buffer_base;
 8006f76:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8006f7a:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f8c7 3470 	str.w	r3, [r7, #1136]	@ 0x470
        }

        // ========= LETTURA METADATA =========
        Compressed_Sample_Typedef sample_header;
        RAM_Read(address, METADATA_SIZE, (uint8_t*)&sample_header);
 8006f84:	f107 0310 	add.w	r3, r7, #16
 8006f88:	461a      	mov	r2, r3
 8006f8a:	2106      	movs	r1, #6
 8006f8c:	f8d7 0470 	ldr.w	r0, [r7, #1136]	@ 0x470
 8006f90:	f001 f885 	bl	800809e <RAM_Read>

        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 8006f94:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8006f98:	f5a3 638d 	sub.w	r3, r3, #1128	@ 0x468
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	461a      	mov	r2, r3
                               sample_header.compressed_size.volume_size +
 8006fa0:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8006fa4:	f5a3 638d 	sub.w	r3, r3, #1128	@ 0x468
 8006fa8:	885b      	ldrh	r3, [r3, #2]
        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 8006faa:	4413      	add	r3, r2
                               sample_header.compressed_size.acceleration_size;
 8006fac:	f507 628f 	add.w	r2, r7, #1144	@ 0x478
 8006fb0:	f5a2 628d 	sub.w	r2, r2, #1128	@ 0x468
 8006fb4:	8892      	ldrh	r2, [r2, #4]
                               sample_header.compressed_size.volume_size +
 8006fb6:	4413      	add	r3, r2
        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 8006fb8:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c

        // ========= VALIDAZIONE SAMPLE =========
        if (sample_size == 0 || sample_size > MAX_COMPRESSED_SIZE ||
 8006fbc:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d05e      	beq.n	8007082 <Send_Measure_Chunk+0x196>
 8006fc4:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 8006fc8:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8006fcc:	d859      	bhi.n	8007082 <Send_Measure_Chunk+0x196>
            sample_header.compressed_size.pressure_size > 500 ||
 8006fce:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8006fd2:	f5a3 638d 	sub.w	r3, r3, #1128	@ 0x468
 8006fd6:	881b      	ldrh	r3, [r3, #0]
        if (sample_size == 0 || sample_size > MAX_COMPRESSED_SIZE ||
 8006fd8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006fdc:	d851      	bhi.n	8007082 <Send_Measure_Chunk+0x196>
            sample_header.compressed_size.volume_size > 100 ||
 8006fde:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8006fe2:	f5a3 638d 	sub.w	r3, r3, #1128	@ 0x468
 8006fe6:	885b      	ldrh	r3, [r3, #2]
            sample_header.compressed_size.pressure_size > 500 ||
 8006fe8:	2b64      	cmp	r3, #100	@ 0x64
 8006fea:	d84a      	bhi.n	8007082 <Send_Measure_Chunk+0x196>
            sample_header.compressed_size.acceleration_size > 1000) 
 8006fec:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8006ff0:	f5a3 638d 	sub.w	r3, r3, #1128	@ 0x468
 8006ff4:	889b      	ldrh	r3, [r3, #4]
            sample_header.compressed_size.volume_size > 100 ||
 8006ff6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ffa:	d842      	bhi.n	8007082 <Send_Measure_Chunk+0x196>
        { 
            break;
        }

        uint32_t sample_total_size = METADATA_SIZE + sample_size;
 8006ffc:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 8007000:	3306      	adds	r3, #6
 8007002:	f8c7 3468 	str.w	r3, [r7, #1128]	@ 0x468

        // Chunk non può contenere questo sample
        if ((raw_fill + sample_total_size) > sizeof(raw_buffer)) 
 8007006:	f8d7 2474 	ldr.w	r2, [r7, #1140]	@ 0x474
 800700a:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800700e:	4413      	add	r3, r2
 8007010:	f240 424c 	movw	r2, #1100	@ 0x44c
 8007014:	4293      	cmp	r3, r2
 8007016:	d833      	bhi.n	8007080 <Send_Measure_Chunk+0x194>
        {
            break;  // Invia chunk corrente
        }

        // ========= COPIA METADATA =========
        memcpy(raw_buffer + raw_fill, (uint8_t*)&sample_header, METADATA_SIZE);
 8007018:	f107 0218 	add.w	r2, r7, #24
 800701c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	@ 0x474
 8007020:	18d1      	adds	r1, r2, r3
 8007022:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8007026:	f5a3 628d 	sub.w	r2, r3, #1128	@ 0x468
 800702a:	460b      	mov	r3, r1
 800702c:	6810      	ldr	r0, [r2, #0]
 800702e:	6018      	str	r0, [r3, #0]
 8007030:	8892      	ldrh	r2, [r2, #4]
 8007032:	809a      	strh	r2, [r3, #4]
        raw_fill += METADATA_SIZE;
 8007034:	f8d7 3474 	ldr.w	r3, [r7, #1140]	@ 0x474
 8007038:	3306      	adds	r3, #6
 800703a:	f8c7 3474 	str.w	r3, [r7, #1140]	@ 0x474
        address += METADATA_SIZE;
 800703e:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 8007042:	3306      	adds	r3, #6
 8007044:	f8c7 3470 	str.w	r3, [r7, #1136]	@ 0x470

        // ========= COPIA DATI SAMPLE =========
        RAM_Read(address, sample_size, raw_buffer + raw_fill);
 8007048:	f107 0218 	add.w	r2, r7, #24
 800704c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	@ 0x474
 8007050:	4413      	add	r3, r2
 8007052:	461a      	mov	r2, r3
 8007054:	f8d7 146c 	ldr.w	r1, [r7, #1132]	@ 0x46c
 8007058:	f8d7 0470 	ldr.w	r0, [r7, #1136]	@ 0x470
 800705c:	f001 f81f 	bl	800809e <RAM_Read>
        raw_fill += sample_size;
 8007060:	f8d7 2474 	ldr.w	r2, [r7, #1140]	@ 0x474
 8007064:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 8007068:	4413      	add	r3, r2
 800706a:	f8c7 3474 	str.w	r3, [r7, #1140]	@ 0x474
        address += SAVING_SAMPLE_SIZE;
 800706e:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 8007072:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8007076:	f8c7 3470 	str.w	r3, [r7, #1136]	@ 0x470
    {
 800707a:	e765      	b.n	8006f48 <Send_Measure_Chunk+0x5c>
            break;  // Chunk pieno, invia
 800707c:	bf00      	nop
 800707e:	e000      	b.n	8007082 <Send_Measure_Chunk+0x196>
            break;  // Invia chunk corrente
 8007080:	bf00      	nop

    } while (1);

    //  INVIO CHUNK (se contiene dati)
    if (raw_fill > 0) 
 8007082:	f8d7 3474 	ldr.w	r3, [r7, #1140]	@ 0x474
 8007086:	2b00      	cmp	r3, #0
 8007088:	d013      	beq.n	80070b2 <Send_Measure_Chunk+0x1c6>
    {
        size_t b64_len = Base64_Encode(raw_buffer, raw_fill, (char*)tcp_chunk, sizeof(tcp_chunk));
 800708a:	f107 0018 	add.w	r0, r7, #24
 800708e:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8007092:	4a0b      	ldr	r2, [pc, #44]	@ (80070c0 <Send_Measure_Chunk+0x1d4>)
 8007094:	f8d7 1474 	ldr.w	r1, [r7, #1140]	@ 0x474
 8007098:	f7fb fdac 	bl	8002bf4 <Base64_Encode>
 800709c:	f8c7 0464 	str.w	r0, [r7, #1124]	@ 0x464
        SIM_Send_TCP_Chunk(b64_len);
 80070a0:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fb fb24 	bl	80026f4 <SIM_Send_TCP_Chunk>
        return address;  // Prossimo indirizzo
 80070ac:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 80070b0:	e001      	b.n	80070b6 <Send_Measure_Chunk+0x1ca>
    }

    // Nessun dato processato
    return (uint32_t)-1;
 80070b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	f507 678f 	add.w	r7, r7, #1144	@ 0x478
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	20004988 	.word	0x20004988

080070c4 <Compress_Sample>:

/*-----COMPRESSIONE DATI-----*/
Compressed_Sizes_Typedef Compress_Sample(uint8_t *input, uint16_t input_len, uint8_t *output)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b09a      	sub	sp, #104	@ 0x68
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	603b      	str	r3, [r7, #0]
 80070d0:	4613      	mov	r3, r2
 80070d2:	80fb      	strh	r3, [r7, #6]
	uint16_t out_idx = 0;
 80070d4:	2300      	movs	r3, #0
 80070d6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	uint8_t packed_byte = 0;
 80070da:	2300      	movs	r3, #0
 80070dc:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	Compressed_Sizes_Typedef sizes = {0, 0, 0};
 80070e0:	2300      	movs	r3, #0
 80070e2:	843b      	strh	r3, [r7, #32]
 80070e4:	2300      	movs	r3, #0
 80070e6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80070e8:	2300      	movs	r3, #0
 80070ea:	84bb      	strh	r3, [r7, #36]	@ 0x24

    AdpcmState_Typedef press_state = {0, 0};
 80070ec:	2300      	movs	r3, #0
 80070ee:	83bb      	strh	r3, [r7, #28]
 80070f0:	2300      	movs	r3, #0
 80070f2:	77bb      	strb	r3, [r7, #30]
    AdpcmState_Typedef acc_x_state = {0, 0}, acc_y_state = {0, 0}, acc_z_state = {0, 0};
 80070f4:	2300      	movs	r3, #0
 80070f6:	833b      	strh	r3, [r7, #24]
 80070f8:	2300      	movs	r3, #0
 80070fa:	76bb      	strb	r3, [r7, #26]
 80070fc:	2300      	movs	r3, #0
 80070fe:	82bb      	strh	r3, [r7, #20]
 8007100:	2300      	movs	r3, #0
 8007102:	75bb      	strb	r3, [r7, #22]
 8007104:	2300      	movs	r3, #0
 8007106:	823b      	strh	r3, [r7, #16]
 8007108:	2300      	movs	r3, #0
 800710a:	74bb      	strb	r3, [r7, #18]

	// --- 1. Pressione ---
	uint16_t *adc = (uint16_t*)input;
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint16_t pressure_start = out_idx;
 8007110:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007114:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	output[out_idx++] = adc[0] & 0xFF;
 8007118:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800711a:	881a      	ldrh	r2, [r3, #0]
 800711c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007120:	1c59      	adds	r1, r3, #1
 8007122:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8007126:	4619      	mov	r1, r3
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	440b      	add	r3, r1
 800712c:	b2d2      	uxtb	r2, r2
 800712e:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = adc[0] >> 8;
 8007130:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	0a1b      	lsrs	r3, r3, #8
 8007136:	b29a      	uxth	r2, r3
 8007138:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800713c:	1c59      	adds	r1, r3, #1
 800713e:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8007142:	4619      	mov	r1, r3
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	440b      	add	r3, r1
 8007148:	b2d2      	uxtb	r2, r2
 800714a:	701a      	strb	r2, [r3, #0]
	press_state.previous_value = adc[0];
 800714c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	b21b      	sxth	r3, r3
 8007152:	83bb      	strh	r3, [r7, #28]
	for (int i = 1; i < PRESS_HALF_SAMPLES; i++) 
 8007154:	2301      	movs	r3, #1
 8007156:	663b      	str	r3, [r7, #96]	@ 0x60
 8007158:	e033      	b.n	80071c2 <Compress_Sample+0xfe>
	{
		uint8_t nibble = ADPCM_Compression(adc[i], &press_state, step_size_table_12bit);
 800715a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800715c:	005b      	lsls	r3, r3, #1
 800715e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007160:	4413      	add	r3, r2
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	b21b      	sxth	r3, r3
 8007166:	f107 011c 	add.w	r1, r7, #28
 800716a:	4aa0      	ldr	r2, [pc, #640]	@ (80073ec <Compress_Sample+0x328>)
 800716c:	4618      	mov	r0, r3
 800716e:	f000 f9dd 	bl	800752c <ADPCM_Compression>
 8007172:	4603      	mov	r3, r0
 8007174:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (i % 2 != 0) 
 8007178:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800717a:	f003 0301 	and.w	r3, r3, #1
 800717e:	2b00      	cmp	r3, #0
 8007180:	d004      	beq.n	800718c <Compress_Sample+0xc8>
		{
			packed_byte = nibble;
 8007182:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007186:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 800718a:	e017      	b.n	80071bc <Compress_Sample+0xf8>
		} else 
		{
			packed_byte |= (nibble << 4);
 800718c:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8007190:	011b      	lsls	r3, r3, #4
 8007192:	b25a      	sxtb	r2, r3
 8007194:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8007198:	4313      	orrs	r3, r2
 800719a:	b25b      	sxtb	r3, r3
 800719c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
			output[out_idx++] = packed_byte;
 80071a0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80071a4:	1c5a      	adds	r2, r3, #1
 80071a6:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 80071aa:	461a      	mov	r2, r3
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	4413      	add	r3, r2
 80071b0:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 80071b4:	701a      	strb	r2, [r3, #0]
			packed_byte = 0;
 80071b6:	2300      	movs	r3, #0
 80071b8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	for (int i = 1; i < PRESS_HALF_SAMPLES; i++) 
 80071bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071be:	3301      	adds	r3, #1
 80071c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80071c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071c4:	2bc7      	cmp	r3, #199	@ 0xc7
 80071c6:	ddc8      	ble.n	800715a <Compress_Sample+0x96>
		}
	}

	if ((PRESS_HALF_SAMPLES - 1) % 2 != 0) 
	{
		output[out_idx++] = packed_byte;
 80071c8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80071cc:	1c5a      	adds	r2, r3, #1
 80071ce:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 80071d2:	461a      	mov	r2, r3
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	4413      	add	r3, r2
 80071d8:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 80071dc:	701a      	strb	r2, [r3, #0]
		packed_byte = 0;
 80071de:	2300      	movs	r3, #0
 80071e0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	}
	sizes.pressure_size = out_idx - pressure_start;
 80071e4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 80071e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	843b      	strh	r3, [r7, #32]

	// --- 2. Flusso (RLE) ---
	uint32_t *counter = (uint32_t*)(input + PRESS_HALF_LEN);
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80071f8:	643b      	str	r3, [r7, #64]	@ 0x40
	uint16_t volume_start = out_idx;
 80071fa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80071fe:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	uint32_t prev = counter[0];
 8007200:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint16_t run_len = 1;
 8007206:	2301      	movs	r3, #1
 8007208:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

	for (int i = 1; i < MAX_VOLUME_SAMPLES; i++) {
 800720c:	2301      	movs	r3, #1
 800720e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007210:	e058      	b.n	80072c4 <Compress_Sample+0x200>
		if (counter[i] == prev && run_len < 255) {
 8007212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007218:	4413      	add	r3, r2
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800721e:	429a      	cmp	r2, r3
 8007220:	d109      	bne.n	8007236 <Compress_Sample+0x172>
 8007222:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8007226:	2bfe      	cmp	r3, #254	@ 0xfe
 8007228:	d805      	bhi.n	8007236 <Compress_Sample+0x172>
			run_len++;
 800722a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800722e:	3301      	adds	r3, #1
 8007230:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8007234:	e043      	b.n	80072be <Compress_Sample+0x1fa>
		} else {
			// Scrivi valore e run_len (4 byte valore + 1 byte run_len)
			output[out_idx++] = prev & 0xFF;
 8007236:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8007240:	461a      	mov	r2, r3
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	4413      	add	r3, r2
 8007246:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007248:	b2d2      	uxtb	r2, r2
 800724a:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 8) & 0xFF;
 800724c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800724e:	0a1a      	lsrs	r2, r3, #8
 8007250:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007254:	1c59      	adds	r1, r3, #1
 8007256:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800725a:	4619      	mov	r1, r3
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	440b      	add	r3, r1
 8007260:	b2d2      	uxtb	r2, r2
 8007262:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 16) & 0xFF;
 8007264:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007266:	0c1a      	lsrs	r2, r3, #16
 8007268:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800726c:	1c59      	adds	r1, r3, #1
 800726e:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8007272:	4619      	mov	r1, r3
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	440b      	add	r3, r1
 8007278:	b2d2      	uxtb	r2, r2
 800727a:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 24) & 0xFF;
 800727c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800727e:	0e1a      	lsrs	r2, r3, #24
 8007280:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007284:	1c59      	adds	r1, r3, #1
 8007286:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800728a:	4619      	mov	r1, r3
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	440b      	add	r3, r1
 8007290:	b2d2      	uxtb	r2, r2
 8007292:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = run_len;
 8007294:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 800729e:	461a      	mov	r2, r3
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	4413      	add	r3, r2
 80072a4:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 80072a8:	b2d2      	uxtb	r2, r2
 80072aa:	701a      	strb	r2, [r3, #0]
			prev = counter[i];
 80072ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072b2:	4413      	add	r3, r2
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
			run_len = 1;
 80072b8:	2301      	movs	r3, #1
 80072ba:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	for (int i = 1; i < MAX_VOLUME_SAMPLES; i++) {
 80072be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072c0:	3301      	adds	r3, #1
 80072c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80072c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072c6:	2b09      	cmp	r3, #9
 80072c8:	dda3      	ble.n	8007212 <Compress_Sample+0x14e>
		}
	}
	// Scrivi l'ultimo run
	output[out_idx++] = prev & 0xFF;
 80072ca:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 80072d4:	461a      	mov	r2, r3
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	4413      	add	r3, r2
 80072da:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80072dc:	b2d2      	uxtb	r2, r2
 80072de:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 8) & 0xFF;
 80072e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072e2:	0a1a      	lsrs	r2, r3, #8
 80072e4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80072e8:	1c59      	adds	r1, r3, #1
 80072ea:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80072ee:	4619      	mov	r1, r3
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	440b      	add	r3, r1
 80072f4:	b2d2      	uxtb	r2, r2
 80072f6:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 16) & 0xFF;
 80072f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072fa:	0c1a      	lsrs	r2, r3, #16
 80072fc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007300:	1c59      	adds	r1, r3, #1
 8007302:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8007306:	4619      	mov	r1, r3
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	440b      	add	r3, r1
 800730c:	b2d2      	uxtb	r2, r2
 800730e:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 24) & 0xFF;
 8007310:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007312:	0e1a      	lsrs	r2, r3, #24
 8007314:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007318:	1c59      	adds	r1, r3, #1
 800731a:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800731e:	4619      	mov	r1, r3
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	440b      	add	r3, r1
 8007324:	b2d2      	uxtb	r2, r2
 8007326:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = run_len;
 8007328:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800732c:	1c5a      	adds	r2, r3, #1
 800732e:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8007332:	461a      	mov	r2, r3
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	4413      	add	r3, r2
 8007338:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800733c:	b2d2      	uxtb	r2, r2
 800733e:	701a      	strb	r2, [r3, #0]

	sizes.volume_size = out_idx - volume_start;
 8007340:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8007344:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	b29b      	uxth	r3, r3
 800734a:	847b      	strh	r3, [r7, #34]	@ 0x22

	// --- 3. Accelerometro (3 canali separati) ---
	uint8_t *accel = input + PRESS_HALF_LEN + MAX_VOLUME_LEN;
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007352:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint16_t accel_start = out_idx;
 8007354:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007358:	86fb      	strh	r3, [r7, #54]	@ 0x36

	uint16_t x0 = accel[1] | (accel[2] << 8);
 800735a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735c:	3301      	adds	r3, #1
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	b21a      	sxth	r2, r3
 8007362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007364:	3302      	adds	r3, #2
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	b21b      	sxth	r3, r3
 800736a:	021b      	lsls	r3, r3, #8
 800736c:	b21b      	sxth	r3, r3
 800736e:	4313      	orrs	r3, r2
 8007370:	b21b      	sxth	r3, r3
 8007372:	86bb      	strh	r3, [r7, #52]	@ 0x34
	uint16_t y0 = accel[3] | (accel[4] << 8);
 8007374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007376:	3303      	adds	r3, #3
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	b21a      	sxth	r2, r3
 800737c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800737e:	3304      	adds	r3, #4
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	b21b      	sxth	r3, r3
 8007384:	021b      	lsls	r3, r3, #8
 8007386:	b21b      	sxth	r3, r3
 8007388:	4313      	orrs	r3, r2
 800738a:	b21b      	sxth	r3, r3
 800738c:	867b      	strh	r3, [r7, #50]	@ 0x32
	uint16_t z0 = accel[5] | (accel[6] << 8);
 800738e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007390:	3305      	adds	r3, #5
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	b21a      	sxth	r2, r3
 8007396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007398:	3306      	adds	r3, #6
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	b21b      	sxth	r3, r3
 800739e:	021b      	lsls	r3, r3, #8
 80073a0:	b21b      	sxth	r3, r3
 80073a2:	4313      	orrs	r3, r2
 80073a4:	b21b      	sxth	r3, r3
 80073a6:	863b      	strh	r3, [r7, #48]	@ 0x30
	acc_x_state.previous_value = x0;
 80073a8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80073ac:	833b      	strh	r3, [r7, #24]
	acc_y_state.previous_value = y0;
 80073ae:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80073b2:	82bb      	strh	r3, [r7, #20]
	acc_z_state.previous_value = z0;
 80073b4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80073b8:	823b      	strh	r3, [r7, #16]
	for(int k=0; k<7; ++k) output[out_idx++] = accel[k];
 80073ba:	2300      	movs	r3, #0
 80073bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80073be:	e00f      	b.n	80073e0 <Compress_Sample+0x31c>
 80073c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073c4:	441a      	add	r2, r3
 80073c6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80073ca:	1c59      	adds	r1, r3, #1
 80073cc:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80073d0:	4619      	mov	r1, r3
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	440b      	add	r3, r1
 80073d6:	7812      	ldrb	r2, [r2, #0]
 80073d8:	701a      	strb	r2, [r3, #0]
 80073da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073dc:	3301      	adds	r3, #1
 80073de:	653b      	str	r3, [r7, #80]	@ 0x50
 80073e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073e2:	2b06      	cmp	r3, #6
 80073e4:	ddec      	ble.n	80073c0 <Compress_Sample+0x2fc>
	for (int i = 1; i < ACC_FIFO_WATERMARK; i++) 
 80073e6:	2301      	movs	r3, #1
 80073e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073ea:	e087      	b.n	80074fc <Compress_Sample+0x438>
 80073ec:	080190d0 	.word	0x080190d0
	{
		uint16_t x = accel[i*7+1] | (accel[i*7+2] << 8);
 80073f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073f2:	4613      	mov	r3, r2
 80073f4:	00db      	lsls	r3, r3, #3
 80073f6:	1a9b      	subs	r3, r3, r2
 80073f8:	3301      	adds	r3, #1
 80073fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073fc:	4413      	add	r3, r2
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	b219      	sxth	r1, r3
 8007402:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007404:	4613      	mov	r3, r2
 8007406:	00db      	lsls	r3, r3, #3
 8007408:	1a9b      	subs	r3, r3, r2
 800740a:	3302      	adds	r3, #2
 800740c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800740e:	4413      	add	r3, r2
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	b21b      	sxth	r3, r3
 8007414:	021b      	lsls	r3, r3, #8
 8007416:	b21b      	sxth	r3, r3
 8007418:	430b      	orrs	r3, r1
 800741a:	b21b      	sxth	r3, r3
 800741c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		uint16_t y = accel[i*7+3] | (accel[i*7+4] << 8);
 800741e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007420:	4613      	mov	r3, r2
 8007422:	00db      	lsls	r3, r3, #3
 8007424:	1a9b      	subs	r3, r3, r2
 8007426:	3303      	adds	r3, #3
 8007428:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800742a:	4413      	add	r3, r2
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	b219      	sxth	r1, r3
 8007430:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007432:	4613      	mov	r3, r2
 8007434:	00db      	lsls	r3, r3, #3
 8007436:	1a9b      	subs	r3, r3, r2
 8007438:	3304      	adds	r3, #4
 800743a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800743c:	4413      	add	r3, r2
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	b21b      	sxth	r3, r3
 8007442:	021b      	lsls	r3, r3, #8
 8007444:	b21b      	sxth	r3, r3
 8007446:	430b      	orrs	r3, r1
 8007448:	b21b      	sxth	r3, r3
 800744a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		uint16_t z = accel[i*7+5] | (accel[i*7+6] << 8);
 800744c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800744e:	4613      	mov	r3, r2
 8007450:	00db      	lsls	r3, r3, #3
 8007452:	1a9b      	subs	r3, r3, r2
 8007454:	3305      	adds	r3, #5
 8007456:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007458:	4413      	add	r3, r2
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	b219      	sxth	r1, r3
 800745e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007460:	4613      	mov	r3, r2
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	1a9b      	subs	r3, r3, r2
 8007466:	3306      	adds	r3, #6
 8007468:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800746a:	4413      	add	r3, r2
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	b21b      	sxth	r3, r3
 8007470:	021b      	lsls	r3, r3, #8
 8007472:	b21b      	sxth	r3, r3
 8007474:	430b      	orrs	r3, r1
 8007476:	b21b      	sxth	r3, r3
 8007478:	857b      	strh	r3, [r7, #42]	@ 0x2a
		uint8_t nibble_x = ADPCM_Compression(x, &acc_x_state, step_size_table_16bit);
 800747a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800747e:	f107 0118 	add.w	r1, r7, #24
 8007482:	4a29      	ldr	r2, [pc, #164]	@ (8007528 <Compress_Sample+0x464>)
 8007484:	4618      	mov	r0, r3
 8007486:	f000 f851 	bl	800752c <ADPCM_Compression>
 800748a:	4603      	mov	r3, r0
 800748c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		uint8_t nibble_y = ADPCM_Compression(y, &acc_y_state, step_size_table_16bit);
 8007490:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8007494:	f107 0114 	add.w	r1, r7, #20
 8007498:	4a23      	ldr	r2, [pc, #140]	@ (8007528 <Compress_Sample+0x464>)
 800749a:	4618      	mov	r0, r3
 800749c:	f000 f846 	bl	800752c <ADPCM_Compression>
 80074a0:	4603      	mov	r3, r0
 80074a2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		uint8_t nibble_z = ADPCM_Compression(z, &acc_z_state, step_size_table_16bit);
 80074a6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80074aa:	f107 0110 	add.w	r1, r7, #16
 80074ae:	4a1e      	ldr	r2, [pc, #120]	@ (8007528 <Compress_Sample+0x464>)
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 f83b 	bl	800752c <ADPCM_Compression>
 80074b6:	4603      	mov	r3, r0
 80074b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		output[out_idx++] = nibble_x | (nibble_y << 4);
 80074bc:	f997 3028 	ldrsb.w	r3, [r7, #40]	@ 0x28
 80074c0:	011b      	lsls	r3, r3, #4
 80074c2:	b25a      	sxtb	r2, r3
 80074c4:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 80074c8:	4313      	orrs	r3, r2
 80074ca:	b25a      	sxtb	r2, r3
 80074cc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80074d0:	1c59      	adds	r1, r3, #1
 80074d2:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80074d6:	4619      	mov	r1, r3
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	440b      	add	r3, r1
 80074dc:	b2d2      	uxtb	r2, r2
 80074de:	701a      	strb	r2, [r3, #0]
		output[out_idx++] = nibble_z;
 80074e0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80074e4:	1c5a      	adds	r2, r3, #1
 80074e6:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 80074ea:	461a      	mov	r2, r3
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	4413      	add	r3, r2
 80074f0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80074f4:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < ACC_FIFO_WATERMARK; i++) 
 80074f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074f8:	3301      	adds	r3, #1
 80074fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074fe:	2bc7      	cmp	r3, #199	@ 0xc7
 8007500:	f77f af76 	ble.w	80073f0 <Compress_Sample+0x32c>
	}
	sizes.acceleration_size = out_idx - accel_start;
 8007504:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8007508:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	b29b      	uxth	r3, r3
 800750e:	84bb      	strh	r3, [r7, #36]	@ 0x24

	return sizes;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	461a      	mov	r2, r3
 8007514:	f107 0320 	add.w	r3, r7, #32
 8007518:	6818      	ldr	r0, [r3, #0]
 800751a:	6010      	str	r0, [r2, #0]
 800751c:	889b      	ldrh	r3, [r3, #4]
 800751e:	8093      	strh	r3, [r2, #4]
}
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	3768      	adds	r7, #104	@ 0x68
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	08019020 	.word	0x08019020

0800752c <ADPCM_Compression>:

/*-----FUNZIONE DI COMPRESSIONE ADPCM-----*/
uint8_t ADPCM_Compression(int16_t sample, AdpcmState_Typedef* state, const uint16_t* step_size_table) 
{
 800752c:	b480      	push	{r7}
 800752e:	b089      	sub	sp, #36	@ 0x24
 8007530:	af00      	add	r7, sp, #0
 8007532:	4603      	mov	r3, r0
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
 8007538:	81fb      	strh	r3, [r7, #14]
    int32_t diff = (int32_t)sample - state->previous_value;
 800753a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	f9b2 2000 	ldrsh.w	r2, [r2]
 8007544:	1a9b      	subs	r3, r3, r2
 8007546:	61fb      	str	r3, [r7, #28]
    uint16_t step = step_size_table[state->step_index];
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800754e:	005b      	lsls	r3, r3, #1
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	4413      	add	r3, r2
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	837b      	strh	r3, [r7, #26]
    uint8_t nibble = 0;
 8007558:	2300      	movs	r3, #0
 800755a:	767b      	strb	r3, [r7, #25]

    if (diff < 0) 
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	2b00      	cmp	r3, #0
 8007560:	da04      	bge.n	800756c <ADPCM_Compression+0x40>
	{
        nibble = 8; // Bit di segno
 8007562:	2308      	movs	r3, #8
 8007564:	767b      	strb	r3, [r7, #25]
        diff = -diff;
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	425b      	negs	r3, r3
 800756a:	61fb      	str	r3, [r7, #28]
    }

	if (step == 0) step = 1;
 800756c:	8b7b      	ldrh	r3, [r7, #26]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <ADPCM_Compression+0x4a>
 8007572:	2301      	movs	r3, #1
 8007574:	837b      	strh	r3, [r7, #26]
    // Calcola il nibble quantizzato
    uint32_t temp = (uint32_t)diff * 4;
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	613b      	str	r3, [r7, #16]
    if (temp < step) 
 800757c:	8b7b      	ldrh	r3, [r7, #26]
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	429a      	cmp	r2, r3
 8007582:	d311      	bcc.n	80075a8 <ADPCM_Compression+0x7c>
	{
        nibble |= 0;
    } 
	else 
	{
        nibble |= (uint8_t)((temp / step > 7) ? 7 : (temp / step));
 8007584:	8b7b      	ldrh	r3, [r7, #26]
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	fbb2 f3f3 	udiv	r3, r2, r3
 800758c:	2b07      	cmp	r3, #7
 800758e:	d805      	bhi.n	800759c <ADPCM_Compression+0x70>
 8007590:	8b7b      	ldrh	r3, [r7, #26]
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	fbb2 f3f3 	udiv	r3, r2, r3
 8007598:	b25b      	sxtb	r3, r3
 800759a:	e000      	b.n	800759e <ADPCM_Compression+0x72>
 800759c:	2307      	movs	r3, #7
 800759e:	f997 2019 	ldrsb.w	r2, [r7, #25]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	b25b      	sxtb	r3, r3
 80075a6:	767b      	strb	r3, [r7, #25]
    }

    // Ricostruisci il valore per la predizione successiva (usando solo il nibble)
    int32_t reconstructed_diff = (step * (nibble & 7)) / 4 + step / 8;
 80075a8:	8b7b      	ldrh	r3, [r7, #26]
 80075aa:	7e7a      	ldrb	r2, [r7, #25]
 80075ac:	f002 0207 	and.w	r2, r2, #7
 80075b0:	fb02 f303 	mul.w	r3, r2, r3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	da00      	bge.n	80075ba <ADPCM_Compression+0x8e>
 80075b8:	3303      	adds	r3, #3
 80075ba:	109b      	asrs	r3, r3, #2
 80075bc:	461a      	mov	r2, r3
 80075be:	8b7b      	ldrh	r3, [r7, #26]
 80075c0:	08db      	lsrs	r3, r3, #3
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	4413      	add	r3, r2
 80075c6:	617b      	str	r3, [r7, #20]
    if (nibble & 8) {
 80075c8:	7e7b      	ldrb	r3, [r7, #25]
 80075ca:	f003 0308 	and.w	r3, r3, #8
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d002      	beq.n	80075d8 <ADPCM_Compression+0xac>
        reconstructed_diff = -reconstructed_diff;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	425b      	negs	r3, r3
 80075d6:	617b      	str	r3, [r7, #20]
    }
    
    state->previous_value += reconstructed_diff;
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075de:	b29a      	uxth	r2, r3
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	4413      	add	r3, r2
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	b21a      	sxth	r2, r3
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	801a      	strh	r2, [r3, #0]

    // CLAMP DINAMICO BASATO SULLA LUT
    if (step_size_table == step_size_table_12bit) 
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007668 <ADPCM_Compression+0x13c>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d111      	bne.n	800761a <ADPCM_Compression+0xee>
    {
        // Dati 12-bit ADC: unsigned 0-4095
        if (state->previous_value > 4095) state->previous_value = 4095;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007600:	db03      	blt.n	800760a <ADPCM_Compression+0xde>
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8007608:	801a      	strh	r2, [r3, #0]
        if (state->previous_value < 0) state->previous_value = 0;
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007610:	2b00      	cmp	r3, #0
 8007612:	da02      	bge.n	800761a <ADPCM_Compression+0xee>
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	2200      	movs	r2, #0
 8007618:	801a      	strh	r2, [r3, #0]
        if (state->previous_value > 32767) state->previous_value = 32767;
        if (state->previous_value < -32768) state->previous_value = -32768;
    }

    // Aggiorna l'indice dello step
    state->step_index += index_adjustment_table[nibble & 7];
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8007620:	b2da      	uxtb	r2, r3
 8007622:	7e7b      	ldrb	r3, [r7, #25]
 8007624:	f003 0307 	and.w	r3, r3, #7
 8007628:	4910      	ldr	r1, [pc, #64]	@ (800766c <ADPCM_Compression+0x140>)
 800762a:	56cb      	ldrsb	r3, [r1, r3]
 800762c:	b2db      	uxtb	r3, r3
 800762e:	4413      	add	r3, r2
 8007630:	b2db      	uxtb	r3, r3
 8007632:	b25a      	sxtb	r2, r3
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	709a      	strb	r2, [r3, #2]
    if (state->step_index < 0) state->step_index = 0;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800763e:	2b00      	cmp	r3, #0
 8007640:	da02      	bge.n	8007648 <ADPCM_Compression+0x11c>
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	2200      	movs	r2, #0
 8007646:	709a      	strb	r2, [r3, #2]
    if (state->step_index > 87) state->step_index = 87;
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800764e:	2b57      	cmp	r3, #87	@ 0x57
 8007650:	dd02      	ble.n	8007658 <ADPCM_Compression+0x12c>
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	2257      	movs	r2, #87	@ 0x57
 8007656:	709a      	strb	r2, [r3, #2]

    return nibble;
 8007658:	7e7b      	ldrb	r3, [r7, #25]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3724      	adds	r7, #36	@ 0x24
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	080190d0 	.word	0x080190d0
 800766c:	08019180 	.word	0x08019180

08007670 <Apply_Config>:


/*-----APPLICA VALORI CONFIGURAZIONE-----*/
void Apply_Config(void)
{
 8007670:	b590      	push	{r4, r7, lr}
 8007672:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
	FIL config_file;
	UINT bytes_written;
	
	if(strcmp(cfg_var, "DEVICE_ID") == 0) 
 800767a:	499a      	ldr	r1, [pc, #616]	@ (80078e4 <Apply_Config+0x274>)
 800767c:	489a      	ldr	r0, [pc, #616]	@ (80078e8 <Apply_Config+0x278>)
 800767e:	f7f8 fda7 	bl	80001d0 <strcmp>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d107      	bne.n	8007698 <Apply_Config+0x28>
	{
		config.device_id = (uint8_t)atoi(new_cfg_val);
 8007688:	4898      	ldr	r0, [pc, #608]	@ (80078ec <Apply_Config+0x27c>)
 800768a:	f010 f81f 	bl	80176cc <atoi>
 800768e:	4603      	mov	r3, r0
 8007690:	b2da      	uxtb	r2, r3
 8007692:	4b97      	ldr	r3, [pc, #604]	@ (80078f0 <Apply_Config+0x280>)
 8007694:	701a      	strb	r2, [r3, #0]
 8007696:	e151      	b.n	800793c <Apply_Config+0x2cc>
    }
	else if(strcmp(cfg_var, "SAMP_FREQ") == 0)
 8007698:	4996      	ldr	r1, [pc, #600]	@ (80078f4 <Apply_Config+0x284>)
 800769a:	4893      	ldr	r0, [pc, #588]	@ (80078e8 <Apply_Config+0x278>)
 800769c:	f7f8 fd98 	bl	80001d0 <strcmp>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d138      	bne.n	8007718 <Apply_Config+0xa8>
	{
		if((uint16_t)atoi(new_cfg_val) != 800 && (uint16_t)atoi(new_cfg_val) != 1600)
 80076a6:	4891      	ldr	r0, [pc, #580]	@ (80078ec <Apply_Config+0x27c>)
 80076a8:	f010 f810 	bl	80176cc <atoi>
 80076ac:	4603      	mov	r3, r0
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80076b4:	d00b      	beq.n	80076ce <Apply_Config+0x5e>
 80076b6:	488d      	ldr	r0, [pc, #564]	@ (80078ec <Apply_Config+0x27c>)
 80076b8:	f010 f808 	bl	80176cc <atoi>
 80076bc:	4603      	mov	r3, r0
 80076be:	b29b      	uxth	r3, r3
 80076c0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80076c4:	d003      	beq.n	80076ce <Apply_Config+0x5e>
		{
			SIM_Send_TCP("R:ERR");
 80076c6:	488c      	ldr	r0, [pc, #560]	@ (80078f8 <Apply_Config+0x288>)
 80076c8:	f7fa ffe6 	bl	8002698 <SIM_Send_TCP>
			return;
 80076cc:	e166      	b.n	800799c <Apply_Config+0x32c>
		}
		else
		{
			if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 80076ce:	4b88      	ldr	r3, [pc, #544]	@ (80078f0 <Apply_Config+0x280>)
 80076d0:	885b      	ldrh	r3, [r3, #2]
 80076d2:	4a8a      	ldr	r2, [pc, #552]	@ (80078fc <Apply_Config+0x28c>)
 80076d4:	fba2 2303 	umull	r2, r3, r2, r3
 80076d8:	099b      	lsrs	r3, r3, #6
 80076da:	b29b      	uxth	r3, r3
 80076dc:	461a      	mov	r2, r3
 80076de:	4b84      	ldr	r3, [pc, #528]	@ (80078f0 <Apply_Config+0x280>)
 80076e0:	791b      	ldrb	r3, [r3, #4]
 80076e2:	fb02 f303 	mul.w	r3, r2, r3
 80076e6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80076ea:	fb02 f303 	mul.w	r3, r2, r3
 80076ee:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 80076f2:	005b      	lsls	r3, r3, #1
 80076f4:	461c      	mov	r4, r3
 80076f6:	f000 fd05 	bl	8008104 <psram_get_size>
 80076fa:	4603      	mov	r3, r0
 80076fc:	429c      	cmp	r4, r3
 80076fe:	d907      	bls.n	8007710 <Apply_Config+0xa0>
			{
				config.samp_freq = (uint16_t)atoi(new_cfg_val);
 8007700:	487a      	ldr	r0, [pc, #488]	@ (80078ec <Apply_Config+0x27c>)
 8007702:	f00f ffe3 	bl	80176cc <atoi>
 8007706:	4603      	mov	r3, r0
 8007708:	b29a      	uxth	r2, r3
 800770a:	4b79      	ldr	r3, [pc, #484]	@ (80078f0 <Apply_Config+0x280>)
 800770c:	805a      	strh	r2, [r3, #2]
 800770e:	e115      	b.n	800793c <Apply_Config+0x2cc>
			}
			else
			{
				SIM_Send_TCP("R:ERR");
 8007710:	4879      	ldr	r0, [pc, #484]	@ (80078f8 <Apply_Config+0x288>)
 8007712:	f7fa ffc1 	bl	8002698 <SIM_Send_TCP>
				return;
 8007716:	e141      	b.n	800799c <Apply_Config+0x32c>
			}
		}
	}
	else if(strcmp(cfg_var, "BUFFER_SECS") == 0)
 8007718:	4979      	ldr	r1, [pc, #484]	@ (8007900 <Apply_Config+0x290>)
 800771a:	4873      	ldr	r0, [pc, #460]	@ (80078e8 <Apply_Config+0x278>)
 800771c:	f7f8 fd58 	bl	80001d0 <strcmp>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d136      	bne.n	8007794 <Apply_Config+0x124>
	{
		if((uint8_t)atoi(new_cfg_val) < 5 || (uint8_t)atoi(new_cfg_val) > 30)
 8007726:	4871      	ldr	r0, [pc, #452]	@ (80078ec <Apply_Config+0x27c>)
 8007728:	f00f ffd0 	bl	80176cc <atoi>
 800772c:	4603      	mov	r3, r0
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b04      	cmp	r3, #4
 8007732:	d906      	bls.n	8007742 <Apply_Config+0xd2>
 8007734:	486d      	ldr	r0, [pc, #436]	@ (80078ec <Apply_Config+0x27c>)
 8007736:	f00f ffc9 	bl	80176cc <atoi>
 800773a:	4603      	mov	r3, r0
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b1e      	cmp	r3, #30
 8007740:	d903      	bls.n	800774a <Apply_Config+0xda>
		{
			SIM_Send_TCP("R:ERR");
 8007742:	486d      	ldr	r0, [pc, #436]	@ (80078f8 <Apply_Config+0x288>)
 8007744:	f7fa ffa8 	bl	8002698 <SIM_Send_TCP>
			return;
 8007748:	e128      	b.n	800799c <Apply_Config+0x32c>
		}
		else
		{
			if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 800774a:	4b69      	ldr	r3, [pc, #420]	@ (80078f0 <Apply_Config+0x280>)
 800774c:	885b      	ldrh	r3, [r3, #2]
 800774e:	4a6b      	ldr	r2, [pc, #428]	@ (80078fc <Apply_Config+0x28c>)
 8007750:	fba2 2303 	umull	r2, r3, r2, r3
 8007754:	099b      	lsrs	r3, r3, #6
 8007756:	b29b      	uxth	r3, r3
 8007758:	461a      	mov	r2, r3
 800775a:	4b65      	ldr	r3, [pc, #404]	@ (80078f0 <Apply_Config+0x280>)
 800775c:	791b      	ldrb	r3, [r3, #4]
 800775e:	fb02 f303 	mul.w	r3, r2, r3
 8007762:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8007766:	fb02 f303 	mul.w	r3, r2, r3
 800776a:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 800776e:	005b      	lsls	r3, r3, #1
 8007770:	461c      	mov	r4, r3
 8007772:	f000 fcc7 	bl	8008104 <psram_get_size>
 8007776:	4603      	mov	r3, r0
 8007778:	429c      	cmp	r4, r3
 800777a:	d907      	bls.n	800778c <Apply_Config+0x11c>
			{
				config.buffering_secs = (uint8_t)atoi(new_cfg_val);
 800777c:	485b      	ldr	r0, [pc, #364]	@ (80078ec <Apply_Config+0x27c>)
 800777e:	f00f ffa5 	bl	80176cc <atoi>
 8007782:	4603      	mov	r3, r0
 8007784:	b2da      	uxtb	r2, r3
 8007786:	4b5a      	ldr	r3, [pc, #360]	@ (80078f0 <Apply_Config+0x280>)
 8007788:	711a      	strb	r2, [r3, #4]
 800778a:	e0d7      	b.n	800793c <Apply_Config+0x2cc>
			}
			else
			{
				SIM_Send_TCP("R:ERR");
 800778c:	485a      	ldr	r0, [pc, #360]	@ (80078f8 <Apply_Config+0x288>)
 800778e:	f7fa ff83 	bl	8002698 <SIM_Send_TCP>
				return;
 8007792:	e103      	b.n	800799c <Apply_Config+0x32c>
			}
		}
	}
	else if(strcmp(cfg_var, "CONN_TIMEOUT") == 0)
 8007794:	495b      	ldr	r1, [pc, #364]	@ (8007904 <Apply_Config+0x294>)
 8007796:	4854      	ldr	r0, [pc, #336]	@ (80078e8 <Apply_Config+0x278>)
 8007798:	f7f8 fd1a 	bl	80001d0 <strcmp>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d107      	bne.n	80077b2 <Apply_Config+0x142>
	{
		config.connection_timeout_ms = (uint32_t)atoi(new_cfg_val);
 80077a2:	4852      	ldr	r0, [pc, #328]	@ (80078ec <Apply_Config+0x27c>)
 80077a4:	f00f ff92 	bl	80176cc <atoi>
 80077a8:	4603      	mov	r3, r0
 80077aa:	461a      	mov	r2, r3
 80077ac:	4b50      	ldr	r3, [pc, #320]	@ (80078f0 <Apply_Config+0x280>)
 80077ae:	609a      	str	r2, [r3, #8]
 80077b0:	e0c4      	b.n	800793c <Apply_Config+0x2cc>
	}
	else if(strcmp(cfg_var, "LOG_PERIOD") == 0)
 80077b2:	4955      	ldr	r1, [pc, #340]	@ (8007908 <Apply_Config+0x298>)
 80077b4:	484c      	ldr	r0, [pc, #304]	@ (80078e8 <Apply_Config+0x278>)
 80077b6:	f7f8 fd0b 	bl	80001d0 <strcmp>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d107      	bne.n	80077d0 <Apply_Config+0x160>
	{
		config.log_period_ms = (uint32_t)atoi(new_cfg_val);
 80077c0:	484a      	ldr	r0, [pc, #296]	@ (80078ec <Apply_Config+0x27c>)
 80077c2:	f00f ff83 	bl	80176cc <atoi>
 80077c6:	4603      	mov	r3, r0
 80077c8:	461a      	mov	r2, r3
 80077ca:	4b49      	ldr	r3, [pc, #292]	@ (80078f0 <Apply_Config+0x280>)
 80077cc:	60da      	str	r2, [r3, #12]
 80077ce:	e0b5      	b.n	800793c <Apply_Config+0x2cc>
	}
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 80077d0:	494e      	ldr	r1, [pc, #312]	@ (800790c <Apply_Config+0x29c>)
 80077d2:	4845      	ldr	r0, [pc, #276]	@ (80078e8 <Apply_Config+0x278>)
 80077d4:	f7f8 fcfc 	bl	80001d0 <strcmp>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d107      	bne.n	80077ee <Apply_Config+0x17e>
	{
		config.hammer_th = (uint16_t)atoi(new_cfg_val);
 80077de:	4843      	ldr	r0, [pc, #268]	@ (80078ec <Apply_Config+0x27c>)
 80077e0:	f00f ff74 	bl	80176cc <atoi>
 80077e4:	4603      	mov	r3, r0
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	4b41      	ldr	r3, [pc, #260]	@ (80078f0 <Apply_Config+0x280>)
 80077ea:	821a      	strh	r2, [r3, #16]
 80077ec:	e0a6      	b.n	800793c <Apply_Config+0x2cc>
	}
    else if(strcmp(cfg_var, "HIGH_TH") == 0) 
 80077ee:	4948      	ldr	r1, [pc, #288]	@ (8007910 <Apply_Config+0x2a0>)
 80077f0:	483d      	ldr	r0, [pc, #244]	@ (80078e8 <Apply_Config+0x278>)
 80077f2:	f7f8 fced 	bl	80001d0 <strcmp>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d119      	bne.n	8007830 <Apply_Config+0x1c0>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 80077fc:	4b45      	ldr	r3, [pc, #276]	@ (8007914 <Apply_Config+0x2a4>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	db11      	blt.n	8007828 <Apply_Config+0x1b8>
 8007804:	4b43      	ldr	r3, [pc, #268]	@ (8007914 <Apply_Config+0x2a4>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b17      	cmp	r3, #23
 800780a:	dc0d      	bgt.n	8007828 <Apply_Config+0x1b8>
		{
            config.high_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 800780c:	4837      	ldr	r0, [pc, #220]	@ (80078ec <Apply_Config+0x27c>)
 800780e:	f00f ff5d 	bl	80176cc <atoi>
 8007812:	4602      	mov	r2, r0
 8007814:	4b3f      	ldr	r3, [pc, #252]	@ (8007914 <Apply_Config+0x2a4>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	b291      	uxth	r1, r2
 800781a:	4a35      	ldr	r2, [pc, #212]	@ (80078f0 <Apply_Config+0x280>)
 800781c:	3320      	adds	r3, #32
 800781e:	005b      	lsls	r3, r3, #1
 8007820:	4413      	add	r3, r2
 8007822:	460a      	mov	r2, r1
 8007824:	805a      	strh	r2, [r3, #2]
 8007826:	e089      	b.n	800793c <Apply_Config+0x2cc>
        }
		else
		{
			SIM_Send_TCP("R:ERR");
 8007828:	4833      	ldr	r0, [pc, #204]	@ (80078f8 <Apply_Config+0x288>)
 800782a:	f7fa ff35 	bl	8002698 <SIM_Send_TCP>
			return;
 800782e:	e0b5      	b.n	800799c <Apply_Config+0x32c>
		}
    }
    else if(strcmp(cfg_var, "LOW_TH") == 0) 
 8007830:	4939      	ldr	r1, [pc, #228]	@ (8007918 <Apply_Config+0x2a8>)
 8007832:	482d      	ldr	r0, [pc, #180]	@ (80078e8 <Apply_Config+0x278>)
 8007834:	f7f8 fccc 	bl	80001d0 <strcmp>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d119      	bne.n	8007872 <Apply_Config+0x202>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 800783e:	4b35      	ldr	r3, [pc, #212]	@ (8007914 <Apply_Config+0x2a4>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	db11      	blt.n	800786a <Apply_Config+0x1fa>
 8007846:	4b33      	ldr	r3, [pc, #204]	@ (8007914 <Apply_Config+0x2a4>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2b17      	cmp	r3, #23
 800784c:	dc0d      	bgt.n	800786a <Apply_Config+0x1fa>
		{
            config.low_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 800784e:	4827      	ldr	r0, [pc, #156]	@ (80078ec <Apply_Config+0x27c>)
 8007850:	f00f ff3c 	bl	80176cc <atoi>
 8007854:	4602      	mov	r2, r0
 8007856:	4b2f      	ldr	r3, [pc, #188]	@ (8007914 <Apply_Config+0x2a4>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	b291      	uxth	r1, r2
 800785c:	4a24      	ldr	r2, [pc, #144]	@ (80078f0 <Apply_Config+0x280>)
 800785e:	3308      	adds	r3, #8
 8007860:	005b      	lsls	r3, r3, #1
 8007862:	4413      	add	r3, r2
 8007864:	460a      	mov	r2, r1
 8007866:	805a      	strh	r2, [r3, #2]
 8007868:	e068      	b.n	800793c <Apply_Config+0x2cc>
        }
		else
		{
			SIM_Send_TCP("R:ERR");
 800786a:	4823      	ldr	r0, [pc, #140]	@ (80078f8 <Apply_Config+0x288>)
 800786c:	f7fa ff14 	bl	8002698 <SIM_Send_TCP>
			return;
 8007870:	e094      	b.n	800799c <Apply_Config+0x32c>
		}
    }
    else if(strcmp(cfg_var, "TCP_IP") == 0)
 8007872:	492a      	ldr	r1, [pc, #168]	@ (800791c <Apply_Config+0x2ac>)
 8007874:	481c      	ldr	r0, [pc, #112]	@ (80078e8 <Apply_Config+0x278>)
 8007876:	f7f8 fcab 	bl	80001d0 <strcmp>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d112      	bne.n	80078a6 <Apply_Config+0x236>
	{
        strncpy(config.tcp_IPaddress, new_cfg_val, sizeof(config.tcp_IPaddress) - 1);
 8007880:	223f      	movs	r2, #63	@ 0x3f
 8007882:	491a      	ldr	r1, [pc, #104]	@ (80078ec <Apply_Config+0x27c>)
 8007884:	4826      	ldr	r0, [pc, #152]	@ (8007920 <Apply_Config+0x2b0>)
 8007886:	f010 f832 	bl	80178ee <strncpy>
        config.tcp_IPaddress[sizeof(config.tcp_IPaddress) - 1] = '\0';
 800788a:	4b19      	ldr	r3, [pc, #100]	@ (80078f0 <Apply_Config+0x280>)
 800788c:	2200      	movs	r2, #0
 800788e:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
		strcpy(sys.TCP.IP_address, config.tcp_IPaddress);
 8007892:	4923      	ldr	r1, [pc, #140]	@ (8007920 <Apply_Config+0x2b0>)
 8007894:	4823      	ldr	r0, [pc, #140]	@ (8007924 <Apply_Config+0x2b4>)
 8007896:	f010 f87f 	bl	8017998 <strcpy>
		flags.TCP_Parameter_Changed = 1;
 800789a:	4a23      	ldr	r2, [pc, #140]	@ (8007928 <Apply_Config+0x2b8>)
 800789c:	7853      	ldrb	r3, [r2, #1]
 800789e:	f043 0320 	orr.w	r3, r3, #32
 80078a2:	7053      	strb	r3, [r2, #1]
 80078a4:	e04a      	b.n	800793c <Apply_Config+0x2cc>
    }
    else if(strcmp(cfg_var, "TCP_PORT") == 0)
 80078a6:	4921      	ldr	r1, [pc, #132]	@ (800792c <Apply_Config+0x2bc>)
 80078a8:	480f      	ldr	r0, [pc, #60]	@ (80078e8 <Apply_Config+0x278>)
 80078aa:	f7f8 fc91 	bl	80001d0 <strcmp>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d112      	bne.n	80078da <Apply_Config+0x26a>
	{
        strncpy(config.tcp_Port, new_cfg_val, sizeof(config.tcp_Port) - 1);
 80078b4:	223f      	movs	r2, #63	@ 0x3f
 80078b6:	490d      	ldr	r1, [pc, #52]	@ (80078ec <Apply_Config+0x27c>)
 80078b8:	481d      	ldr	r0, [pc, #116]	@ (8007930 <Apply_Config+0x2c0>)
 80078ba:	f010 f818 	bl	80178ee <strncpy>
        config.tcp_Port[sizeof(config.tcp_Port) - 1] = '\0';
 80078be:	4b0c      	ldr	r3, [pc, #48]	@ (80078f0 <Apply_Config+0x280>)
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
		strcpy(sys.TCP.Port, config.tcp_Port);
 80078c6:	491a      	ldr	r1, [pc, #104]	@ (8007930 <Apply_Config+0x2c0>)
 80078c8:	481a      	ldr	r0, [pc, #104]	@ (8007934 <Apply_Config+0x2c4>)
 80078ca:	f010 f865 	bl	8017998 <strcpy>
		flags.TCP_Parameter_Changed = 1;
 80078ce:	4a16      	ldr	r2, [pc, #88]	@ (8007928 <Apply_Config+0x2b8>)
 80078d0:	7853      	ldrb	r3, [r2, #1]
 80078d2:	f043 0320 	orr.w	r3, r3, #32
 80078d6:	7053      	strb	r3, [r2, #1]
 80078d8:	e030      	b.n	800793c <Apply_Config+0x2cc>
    }
	else
	{
		SIM_Send_TCP("R:VAR_ERR");
 80078da:	4817      	ldr	r0, [pc, #92]	@ (8007938 <Apply_Config+0x2c8>)
 80078dc:	f7fa fedc 	bl	8002698 <SIM_Send_TCP>
		return;
 80078e0:	e05c      	b.n	800799c <Apply_Config+0x32c>
 80078e2:	bf00      	nop
 80078e4:	08018ef4 	.word	0x08018ef4
 80078e8:	20005784 	.word	0x20005784
 80078ec:	2000579c 	.word	0x2000579c
 80078f0:	20001794 	.word	0x20001794
 80078f4:	08018f00 	.word	0x08018f00
 80078f8:	08018f0c 	.word	0x08018f0c
 80078fc:	51eb851f 	.word	0x51eb851f
 8007900:	08018f14 	.word	0x08018f14
 8007904:	08018f20 	.word	0x08018f20
 8007908:	08018f30 	.word	0x08018f30
 800790c:	08018f3c 	.word	0x08018f3c
 8007910:	08018f48 	.word	0x08018f48
 8007914:	20005798 	.word	0x20005798
 8007918:	08018f50 	.word	0x08018f50
 800791c:	08018f58 	.word	0x08018f58
 8007920:	20001806 	.word	0x20001806
 8007924:	200016c1 	.word	0x200016c1
 8007928:	20001790 	.word	0x20001790
 800792c:	08018f60 	.word	0x08018f60
 8007930:	20001846 	.word	0x20001846
 8007934:	20001725 	.word	0x20001725
 8007938:	08018f6c 	.word	0x08018f6c
	}

	if (f_open(&config_file, CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) == FR_OK)
 800793c:	f107 0310 	add.w	r3, r7, #16
 8007940:	3b08      	subs	r3, #8
 8007942:	220a      	movs	r2, #10
 8007944:	4918      	ldr	r1, [pc, #96]	@ (80079a8 <Apply_Config+0x338>)
 8007946:	4618      	mov	r0, r3
 8007948:	f002 ffdc 	bl	800a904 <f_open>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d120      	bne.n	8007994 <Apply_Config+0x324>
	{
		f_write(&config_file, &config, sizeof(config), &bytes_written);
 8007952:	f107 0310 	add.w	r3, r7, #16
 8007956:	3b0c      	subs	r3, #12
 8007958:	f107 0010 	add.w	r0, r7, #16
 800795c:	3808      	subs	r0, #8
 800795e:	22f4      	movs	r2, #244	@ 0xf4
 8007960:	4912      	ldr	r1, [pc, #72]	@ (80079ac <Apply_Config+0x33c>)
 8007962:	f003 faba 	bl	800aeda <f_write>
		f_close(&config_file);
 8007966:	f107 0310 	add.w	r3, r7, #16
 800796a:	3b08      	subs	r3, #8
 800796c:	4618      	mov	r0, r3
 800796e:	f003 fcbd 	bl	800b2ec <f_close>
	{
		SIM_Send_TCP("R:SAV_ERR");
		return;
	}
	
	memset(cfg_var, 0, sizeof(cfg_var));
 8007972:	2214      	movs	r2, #20
 8007974:	2100      	movs	r1, #0
 8007976:	480e      	ldr	r0, [pc, #56]	@ (80079b0 <Apply_Config+0x340>)
 8007978:	f00f ff92 	bl	80178a0 <memset>
	cfg_idx = 0;
 800797c:	4b0d      	ldr	r3, [pc, #52]	@ (80079b4 <Apply_Config+0x344>)
 800797e:	2200      	movs	r2, #0
 8007980:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 8007982:	220a      	movs	r2, #10
 8007984:	2100      	movs	r1, #0
 8007986:	480c      	ldr	r0, [pc, #48]	@ (80079b8 <Apply_Config+0x348>)
 8007988:	f00f ff8a 	bl	80178a0 <memset>
	SIM_Send_TCP("R:OK");
 800798c:	480b      	ldr	r0, [pc, #44]	@ (80079bc <Apply_Config+0x34c>)
 800798e:	f7fa fe83 	bl	8002698 <SIM_Send_TCP>
 8007992:	e003      	b.n	800799c <Apply_Config+0x32c>
		SIM_Send_TCP("R:SAV_ERR");
 8007994:	480a      	ldr	r0, [pc, #40]	@ (80079c0 <Apply_Config+0x350>)
 8007996:	f7fa fe7f 	bl	8002698 <SIM_Send_TCP>
		return;
 800799a:	bf00      	nop
}
 800799c:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd90      	pop	{r4, r7, pc}
 80079a6:	bf00      	nop
 80079a8:	08018f78 	.word	0x08018f78
 80079ac:	20001794 	.word	0x20001794
 80079b0:	20005784 	.word	0x20005784
 80079b4:	20005798 	.word	0x20005798
 80079b8:	2000579c 	.word	0x2000579c
 80079bc:	08018f98 	.word	0x08018f98
 80079c0:	08018f8c 	.word	0x08018f8c

080079c4 <Send_Config>:

/*-----RECUPERO E INVIO VALORE DI CONFIGURAZIONE-----*/
void Send_Config(void)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b0a0      	sub	sp, #128	@ 0x80
 80079c8:	af00      	add	r7, sp, #0
	char value_str[128] = {0};
 80079ca:	463b      	mov	r3, r7
 80079cc:	2280      	movs	r2, #128	@ 0x80
 80079ce:	2100      	movs	r1, #0
 80079d0:	4618      	mov	r0, r3
 80079d2:	f00f ff65 	bl	80178a0 <memset>

	if(strcmp(cfg_var, "DEVICE_ID") == 0)
 80079d6:	4967      	ldr	r1, [pc, #412]	@ (8007b74 <Send_Config+0x1b0>)
 80079d8:	4867      	ldr	r0, [pc, #412]	@ (8007b78 <Send_Config+0x1b4>)
 80079da:	f7f8 fbf9 	bl	80001d0 <strcmp>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d108      	bne.n	80079f6 <Send_Config+0x32>
	{
		sprintf(value_str, "R:%u", config.device_id);
 80079e4:	4b65      	ldr	r3, [pc, #404]	@ (8007b7c <Send_Config+0x1b8>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	461a      	mov	r2, r3
 80079ea:	463b      	mov	r3, r7
 80079ec:	4964      	ldr	r1, [pc, #400]	@ (8007b80 <Send_Config+0x1bc>)
 80079ee:	4618      	mov	r0, r3
 80079f0:	f00f fef6 	bl	80177e0 <siprintf>
 80079f4:	e0a9      	b.n	8007b4a <Send_Config+0x186>
	}
	else if(strcmp(cfg_var, "SAMP_FREQ") == 0)
 80079f6:	4963      	ldr	r1, [pc, #396]	@ (8007b84 <Send_Config+0x1c0>)
 80079f8:	485f      	ldr	r0, [pc, #380]	@ (8007b78 <Send_Config+0x1b4>)
 80079fa:	f7f8 fbe9 	bl	80001d0 <strcmp>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d108      	bne.n	8007a16 <Send_Config+0x52>
	{
		sprintf(value_str, "R:%u", config.samp_freq);
 8007a04:	4b5d      	ldr	r3, [pc, #372]	@ (8007b7c <Send_Config+0x1b8>)
 8007a06:	885b      	ldrh	r3, [r3, #2]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	463b      	mov	r3, r7
 8007a0c:	495c      	ldr	r1, [pc, #368]	@ (8007b80 <Send_Config+0x1bc>)
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f00f fee6 	bl	80177e0 <siprintf>
 8007a14:	e099      	b.n	8007b4a <Send_Config+0x186>
	}
	else if(strcmp(cfg_var, "BUFFER_SECS") == 0)
 8007a16:	495c      	ldr	r1, [pc, #368]	@ (8007b88 <Send_Config+0x1c4>)
 8007a18:	4857      	ldr	r0, [pc, #348]	@ (8007b78 <Send_Config+0x1b4>)
 8007a1a:	f7f8 fbd9 	bl	80001d0 <strcmp>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d108      	bne.n	8007a36 <Send_Config+0x72>
	{
		sprintf(value_str, "R:%u", config.buffering_secs);
 8007a24:	4b55      	ldr	r3, [pc, #340]	@ (8007b7c <Send_Config+0x1b8>)
 8007a26:	791b      	ldrb	r3, [r3, #4]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	463b      	mov	r3, r7
 8007a2c:	4954      	ldr	r1, [pc, #336]	@ (8007b80 <Send_Config+0x1bc>)
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f00f fed6 	bl	80177e0 <siprintf>
 8007a34:	e089      	b.n	8007b4a <Send_Config+0x186>
	}
	else if(strcmp(cfg_var, "CONN_TIMEOUT") == 0)
 8007a36:	4955      	ldr	r1, [pc, #340]	@ (8007b8c <Send_Config+0x1c8>)
 8007a38:	484f      	ldr	r0, [pc, #316]	@ (8007b78 <Send_Config+0x1b4>)
 8007a3a:	f7f8 fbc9 	bl	80001d0 <strcmp>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d107      	bne.n	8007a54 <Send_Config+0x90>
	{
		sprintf(value_str, "R:%lu", config.connection_timeout_ms);
 8007a44:	4b4d      	ldr	r3, [pc, #308]	@ (8007b7c <Send_Config+0x1b8>)
 8007a46:	689a      	ldr	r2, [r3, #8]
 8007a48:	463b      	mov	r3, r7
 8007a4a:	4951      	ldr	r1, [pc, #324]	@ (8007b90 <Send_Config+0x1cc>)
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f00f fec7 	bl	80177e0 <siprintf>
 8007a52:	e07a      	b.n	8007b4a <Send_Config+0x186>
	}
	else if(strcmp(cfg_var, "LOG_PERIOD") == 0)
 8007a54:	494f      	ldr	r1, [pc, #316]	@ (8007b94 <Send_Config+0x1d0>)
 8007a56:	4848      	ldr	r0, [pc, #288]	@ (8007b78 <Send_Config+0x1b4>)
 8007a58:	f7f8 fbba 	bl	80001d0 <strcmp>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d107      	bne.n	8007a72 <Send_Config+0xae>
	{
		sprintf(value_str, "R:%lu", config.log_period_ms);
 8007a62:	4b46      	ldr	r3, [pc, #280]	@ (8007b7c <Send_Config+0x1b8>)
 8007a64:	68da      	ldr	r2, [r3, #12]
 8007a66:	463b      	mov	r3, r7
 8007a68:	4949      	ldr	r1, [pc, #292]	@ (8007b90 <Send_Config+0x1cc>)
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f00f feb8 	bl	80177e0 <siprintf>
 8007a70:	e06b      	b.n	8007b4a <Send_Config+0x186>
	}
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 8007a72:	4949      	ldr	r1, [pc, #292]	@ (8007b98 <Send_Config+0x1d4>)
 8007a74:	4840      	ldr	r0, [pc, #256]	@ (8007b78 <Send_Config+0x1b4>)
 8007a76:	f7f8 fbab 	bl	80001d0 <strcmp>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d108      	bne.n	8007a92 <Send_Config+0xce>
	{
		sprintf(value_str, "R:%u", config.hammer_th);
 8007a80:	4b3e      	ldr	r3, [pc, #248]	@ (8007b7c <Send_Config+0x1b8>)
 8007a82:	8a1b      	ldrh	r3, [r3, #16]
 8007a84:	461a      	mov	r2, r3
 8007a86:	463b      	mov	r3, r7
 8007a88:	493d      	ldr	r1, [pc, #244]	@ (8007b80 <Send_Config+0x1bc>)
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f00f fea8 	bl	80177e0 <siprintf>
 8007a90:	e05b      	b.n	8007b4a <Send_Config+0x186>
	}
	else if(strcmp(cfg_var, "HIGH_TH") == 0 && cfg_idx >= 0 && cfg_idx < 24)
 8007a92:	4942      	ldr	r1, [pc, #264]	@ (8007b9c <Send_Config+0x1d8>)
 8007a94:	4838      	ldr	r0, [pc, #224]	@ (8007b78 <Send_Config+0x1b4>)
 8007a96:	f7f8 fb9b 	bl	80001d0 <strcmp>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d115      	bne.n	8007acc <Send_Config+0x108>
 8007aa0:	4b3f      	ldr	r3, [pc, #252]	@ (8007ba0 <Send_Config+0x1dc>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	db11      	blt.n	8007acc <Send_Config+0x108>
 8007aa8:	4b3d      	ldr	r3, [pc, #244]	@ (8007ba0 <Send_Config+0x1dc>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b17      	cmp	r3, #23
 8007aae:	dc0d      	bgt.n	8007acc <Send_Config+0x108>
	{
		sprintf(value_str, "R:%u", config.high_th[cfg_idx]);
 8007ab0:	4b3b      	ldr	r3, [pc, #236]	@ (8007ba0 <Send_Config+0x1dc>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a31      	ldr	r2, [pc, #196]	@ (8007b7c <Send_Config+0x1b8>)
 8007ab6:	3320      	adds	r3, #32
 8007ab8:	005b      	lsls	r3, r3, #1
 8007aba:	4413      	add	r3, r2
 8007abc:	885b      	ldrh	r3, [r3, #2]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	463b      	mov	r3, r7
 8007ac2:	492f      	ldr	r1, [pc, #188]	@ (8007b80 <Send_Config+0x1bc>)
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f00f fe8b 	bl	80177e0 <siprintf>
 8007aca:	e03e      	b.n	8007b4a <Send_Config+0x186>
	}
	else if(strcmp(cfg_var, "LOW_TH") == 0 && cfg_idx >= 0 && cfg_idx < 24)
 8007acc:	4935      	ldr	r1, [pc, #212]	@ (8007ba4 <Send_Config+0x1e0>)
 8007ace:	482a      	ldr	r0, [pc, #168]	@ (8007b78 <Send_Config+0x1b4>)
 8007ad0:	f7f8 fb7e 	bl	80001d0 <strcmp>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d115      	bne.n	8007b06 <Send_Config+0x142>
 8007ada:	4b31      	ldr	r3, [pc, #196]	@ (8007ba0 <Send_Config+0x1dc>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	db11      	blt.n	8007b06 <Send_Config+0x142>
 8007ae2:	4b2f      	ldr	r3, [pc, #188]	@ (8007ba0 <Send_Config+0x1dc>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b17      	cmp	r3, #23
 8007ae8:	dc0d      	bgt.n	8007b06 <Send_Config+0x142>
	{
		sprintf(value_str, "R:%u", config.low_th[cfg_idx]);
 8007aea:	4b2d      	ldr	r3, [pc, #180]	@ (8007ba0 <Send_Config+0x1dc>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a23      	ldr	r2, [pc, #140]	@ (8007b7c <Send_Config+0x1b8>)
 8007af0:	3308      	adds	r3, #8
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	4413      	add	r3, r2
 8007af6:	885b      	ldrh	r3, [r3, #2]
 8007af8:	461a      	mov	r2, r3
 8007afa:	463b      	mov	r3, r7
 8007afc:	4920      	ldr	r1, [pc, #128]	@ (8007b80 <Send_Config+0x1bc>)
 8007afe:	4618      	mov	r0, r3
 8007b00:	f00f fe6e 	bl	80177e0 <siprintf>
 8007b04:	e021      	b.n	8007b4a <Send_Config+0x186>
	}
	else if(strcmp(cfg_var, "TCP_IP") == 0)
 8007b06:	4928      	ldr	r1, [pc, #160]	@ (8007ba8 <Send_Config+0x1e4>)
 8007b08:	481b      	ldr	r0, [pc, #108]	@ (8007b78 <Send_Config+0x1b4>)
 8007b0a:	f7f8 fb61 	bl	80001d0 <strcmp>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d106      	bne.n	8007b22 <Send_Config+0x15e>
	{
		sprintf(value_str, "R:%s", config.tcp_IPaddress);
 8007b14:	463b      	mov	r3, r7
 8007b16:	4a25      	ldr	r2, [pc, #148]	@ (8007bac <Send_Config+0x1e8>)
 8007b18:	4925      	ldr	r1, [pc, #148]	@ (8007bb0 <Send_Config+0x1ec>)
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f00f fe60 	bl	80177e0 <siprintf>
 8007b20:	e013      	b.n	8007b4a <Send_Config+0x186>
	}
	else if(strcmp(cfg_var, "TCP_PORT") == 0)
 8007b22:	4924      	ldr	r1, [pc, #144]	@ (8007bb4 <Send_Config+0x1f0>)
 8007b24:	4814      	ldr	r0, [pc, #80]	@ (8007b78 <Send_Config+0x1b4>)
 8007b26:	f7f8 fb53 	bl	80001d0 <strcmp>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d106      	bne.n	8007b3e <Send_Config+0x17a>
	{
		sprintf(value_str, "R:%s", config.tcp_Port);
 8007b30:	463b      	mov	r3, r7
 8007b32:	4a21      	ldr	r2, [pc, #132]	@ (8007bb8 <Send_Config+0x1f4>)
 8007b34:	491e      	ldr	r1, [pc, #120]	@ (8007bb0 <Send_Config+0x1ec>)
 8007b36:	4618      	mov	r0, r3
 8007b38:	f00f fe52 	bl	80177e0 <siprintf>
 8007b3c:	e005      	b.n	8007b4a <Send_Config+0x186>
	}
	else
	{
		strncpy(value_str, "R:ERR", sizeof(value_str)-1);
 8007b3e:	463b      	mov	r3, r7
 8007b40:	227f      	movs	r2, #127	@ 0x7f
 8007b42:	491e      	ldr	r1, [pc, #120]	@ (8007bbc <Send_Config+0x1f8>)
 8007b44:	4618      	mov	r0, r3
 8007b46:	f00f fed2 	bl	80178ee <strncpy>
	}

	memset(cfg_var, 0, sizeof(cfg_var));
 8007b4a:	2214      	movs	r2, #20
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	480a      	ldr	r0, [pc, #40]	@ (8007b78 <Send_Config+0x1b4>)
 8007b50:	f00f fea6 	bl	80178a0 <memset>
	cfg_idx = 0;
 8007b54:	4b12      	ldr	r3, [pc, #72]	@ (8007ba0 <Send_Config+0x1dc>)
 8007b56:	2200      	movs	r2, #0
 8007b58:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 8007b5a:	220a      	movs	r2, #10
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	4818      	ldr	r0, [pc, #96]	@ (8007bc0 <Send_Config+0x1fc>)
 8007b60:	f00f fe9e 	bl	80178a0 <memset>

	SIM_Send_TCP(value_str);
 8007b64:	463b      	mov	r3, r7
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fa fd96 	bl	8002698 <SIM_Send_TCP>
}
 8007b6c:	bf00      	nop
 8007b6e:	3780      	adds	r7, #128	@ 0x80
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	08018ef4 	.word	0x08018ef4
 8007b78:	20005784 	.word	0x20005784
 8007b7c:	20001794 	.word	0x20001794
 8007b80:	08018fa0 	.word	0x08018fa0
 8007b84:	08018f00 	.word	0x08018f00
 8007b88:	08018f14 	.word	0x08018f14
 8007b8c:	08018f20 	.word	0x08018f20
 8007b90:	08018fa8 	.word	0x08018fa8
 8007b94:	08018f30 	.word	0x08018f30
 8007b98:	08018f3c 	.word	0x08018f3c
 8007b9c:	08018f48 	.word	0x08018f48
 8007ba0:	20005798 	.word	0x20005798
 8007ba4:	08018f50 	.word	0x08018f50
 8007ba8:	08018f58 	.word	0x08018f58
 8007bac:	20001806 	.word	0x20001806
 8007bb0:	08018fb0 	.word	0x08018fb0
 8007bb4:	08018f60 	.word	0x08018f60
 8007bb8:	20001846 	.word	0x20001846
 8007bbc:	08018f0c 	.word	0x08018f0c
 8007bc0:	2000579c 	.word	0x2000579c

08007bc4 <Clear_Flags>:

/*-----AZZERAMENTO FLAG-----*/
void Clear_Flags(void)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	af00      	add	r7, sp, #0
	if(!sys.ACC_Present)
 8007bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8007c00 <Clear_Flags+0x3c>)
 8007bca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10a      	bne.n	8007bf2 <Clear_Flags+0x2e>
	{
		memset(&flags, 0, sizeof(flags));
 8007bdc:	2203      	movs	r2, #3
 8007bde:	2100      	movs	r1, #0
 8007be0:	4808      	ldr	r0, [pc, #32]	@ (8007c04 <Clear_Flags+0x40>)
 8007be2:	f00f fe5d 	bl	80178a0 <memset>
		flags.ACC_Complete = 1;
 8007be6:	4a07      	ldr	r2, [pc, #28]	@ (8007c04 <Clear_Flags+0x40>)
 8007be8:	7813      	ldrb	r3, [r2, #0]
 8007bea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bee:	7013      	strb	r3, [r2, #0]
	}
	else
	{
		memset(&flags, 0, sizeof(flags));
	}
}
 8007bf0:	e004      	b.n	8007bfc <Clear_Flags+0x38>
		memset(&flags, 0, sizeof(flags));
 8007bf2:	2203      	movs	r2, #3
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	4803      	ldr	r0, [pc, #12]	@ (8007c04 <Clear_Flags+0x40>)
 8007bf8:	f00f fe52 	bl	80178a0 <memset>
}
 8007bfc:	bf00      	nop
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	200005d8 	.word	0x200005d8
 8007c04:	20001790 	.word	0x20001790

08007c08 <psram_reset>:
uint32_t	psramSize = 0;
uint32_t	psramNumPages = 0;


int psram_reset()
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08e      	sub	sp, #56	@ 0x38
 8007c0c:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = {0};
 8007c0e:	463b      	mov	r3, r7
 8007c10:	2238      	movs	r2, #56	@ 0x38
 8007c12:	2100      	movs	r1, #0
 8007c14:	4618      	mov	r0, r3
 8007c16:	f00f fe43 	bl	80178a0 <memset>

	sCommand.Instruction = 0x66;
 8007c1a:	2366      	movs	r3, #102	@ 0x66
 8007c1c:	603b      	str	r3, [r7, #0]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8007c1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007c22:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_NONE;
 8007c24:	2300      	movs	r3, #0
 8007c26:	60fb      	str	r3, [r7, #12]
	sCommand.NbData = 0;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007c2c:	463b      	mov	r3, r7
 8007c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c32:	4619      	mov	r1, r3
 8007c34:	480e      	ldr	r0, [pc, #56]	@ (8007c70 <psram_reset+0x68>)
 8007c36:	f008 fb45 	bl	80102c4 <HAL_QSPI_Command>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d002      	beq.n	8007c46 <psram_reset+0x3e>
	{
		return -1;
 8007c40:	f04f 33ff 	mov.w	r3, #4294967295
 8007c44:	e00f      	b.n	8007c66 <psram_reset+0x5e>
	}

	sCommand.Instruction = 0x99;
 8007c46:	2399      	movs	r3, #153	@ 0x99
 8007c48:	603b      	str	r3, [r7, #0]

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007c4a:	463b      	mov	r3, r7
 8007c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c50:	4619      	mov	r1, r3
 8007c52:	4807      	ldr	r0, [pc, #28]	@ (8007c70 <psram_reset+0x68>)
 8007c54:	f008 fb36 	bl	80102c4 <HAL_QSPI_Command>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d002      	beq.n	8007c64 <psram_reset+0x5c>
	{
		return -1;
 8007c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c62:	e000      	b.n	8007c66 <psram_reset+0x5e>
	}

	return 0;
 8007c64:	2300      	movs	r3, #0

}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3738      	adds	r7, #56	@ 0x38
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	200001d4 	.word	0x200001d4

08007c74 <psram_qpi_mode>:
{
	return psramQSPI;
}

int psram_qpi_mode(uint8_t enable)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b090      	sub	sp, #64	@ 0x40
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	71fb      	strb	r3, [r7, #7]

	QSPI_CommandTypeDef sCommand = {0};
 8007c7e:	f107 0308 	add.w	r3, r7, #8
 8007c82:	2238      	movs	r2, #56	@ 0x38
 8007c84:	2100      	movs	r1, #0
 8007c86:	4618      	mov	r0, r3
 8007c88:	f00f fe0a 	bl	80178a0 <memset>

	if(!psramInitDone)return -1;
 8007c8c:	4b1c      	ldr	r3, [pc, #112]	@ (8007d00 <psram_qpi_mode+0x8c>)
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d102      	bne.n	8007c9a <psram_qpi_mode+0x26>
 8007c94:	f04f 33ff 	mov.w	r3, #4294967295
 8007c98:	e02d      	b.n	8007cf6 <psram_qpi_mode+0x82>

	if(psramQSPI==1 && enable == 0)
 8007c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8007d04 <psram_qpi_mode+0x90>)
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d108      	bne.n	8007cb4 <psram_qpi_mode+0x40>
 8007ca2:	79fb      	ldrb	r3, [r7, #7]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d105      	bne.n	8007cb4 <psram_qpi_mode+0x40>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_DISABLE;
 8007ca8:	23f5      	movs	r3, #245	@ 0xf5
 8007caa:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8007cac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007cb0:	623b      	str	r3, [r7, #32]
 8007cb2:	e00e      	b.n	8007cd2 <psram_qpi_mode+0x5e>

	}else if(psramQSPI==0 && enable == 1)
 8007cb4:	4b13      	ldr	r3, [pc, #76]	@ (8007d04 <psram_qpi_mode+0x90>)
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d108      	bne.n	8007cce <psram_qpi_mode+0x5a>
 8007cbc:	79fb      	ldrb	r3, [r7, #7]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d105      	bne.n	8007cce <psram_qpi_mode+0x5a>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_ENABLE;
 8007cc2:	2335      	movs	r3, #53	@ 0x35
 8007cc4:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8007cc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007cca:	623b      	str	r3, [r7, #32]
 8007ccc:	e001      	b.n	8007cd2 <psram_qpi_mode+0x5e>

	}else{

		return 0;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	e011      	b.n	8007cf6 <psram_qpi_mode+0x82>

	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007cd2:	f107 0308 	add.w	r3, r7, #8
 8007cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cda:	4619      	mov	r1, r3
 8007cdc:	480a      	ldr	r0, [pc, #40]	@ (8007d08 <psram_qpi_mode+0x94>)
 8007cde:	f008 faf1 	bl	80102c4 <HAL_QSPI_Command>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d002      	beq.n	8007cee <psram_qpi_mode+0x7a>
	{
		return -1;
 8007ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cec:	e003      	b.n	8007cf6 <psram_qpi_mode+0x82>
	}

	psramQSPI = enable;
 8007cee:	4a05      	ldr	r2, [pc, #20]	@ (8007d04 <psram_qpi_mode+0x90>)
 8007cf0:	79fb      	ldrb	r3, [r7, #7]
 8007cf2:	7013      	strb	r3, [r2, #0]

	return 0;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3740      	adds	r7, #64	@ 0x40
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	20005c58 	.word	0x20005c58
 8007d04:	20005c59 	.word	0x20005c59
 8007d08:	200001d4 	.word	0x200001d4

08007d0c <psram_read_id>:

int psram_read_id(uint8_t *id_data, int id_data_size)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b090      	sub	sp, #64	@ 0x40
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef sCommand = {0};
 8007d16:	f107 0308 	add.w	r3, r7, #8
 8007d1a:	2238      	movs	r2, #56	@ 0x38
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f00f fdbe 	bl	80178a0 <memset>

	if(id_data == NULL || id_data_size < 8)return -2;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d002      	beq.n	8007d30 <psram_read_id+0x24>
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2b07      	cmp	r3, #7
 8007d2e:	dc02      	bgt.n	8007d36 <psram_read_id+0x2a>
 8007d30:	f06f 0301 	mvn.w	r3, #1
 8007d34:	e034      	b.n	8007da0 <psram_read_id+0x94>

	sCommand.Instruction = 0x9F;
 8007d36:	239f      	movs	r3, #159	@ 0x9f
 8007d38:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8007d3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007d3e:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8007d40:	2300      	movs	r3, #0
 8007d42:	60fb      	str	r3, [r7, #12]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8007d44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007d48:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8007d4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d4e:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode    = QSPI_DATA_1_LINE;
 8007d50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.NbData = 8;
 8007d56:	2308      	movs	r3, #8
 8007d58:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007d62:	2300      	movs	r3, #0
 8007d64:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007d66:	2300      	movs	r3, #0
 8007d68:	63fb      	str	r3, [r7, #60]	@ 0x3c

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007d6a:	f107 0308 	add.w	r3, r7, #8
 8007d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d72:	4619      	mov	r1, r3
 8007d74:	480c      	ldr	r0, [pc, #48]	@ (8007da8 <psram_read_id+0x9c>)
 8007d76:	f008 faa5 	bl	80102c4 <HAL_QSPI_Command>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d002      	beq.n	8007d86 <psram_read_id+0x7a>
	{
		return -1;
 8007d80:	f04f 33ff 	mov.w	r3, #4294967295
 8007d84:	e00c      	b.n	8007da0 <psram_read_id+0x94>
	}

	if (HAL_QSPI_Receive(PSRAM_SPI, id_data, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d8a:	6879      	ldr	r1, [r7, #4]
 8007d8c:	4806      	ldr	r0, [pc, #24]	@ (8007da8 <psram_read_id+0x9c>)
 8007d8e:	f008 fb8e 	bl	80104ae <HAL_QSPI_Receive>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d002      	beq.n	8007d9e <psram_read_id+0x92>
	{
		return -1;
 8007d98:	f04f 33ff 	mov.w	r3, #4294967295
 8007d9c:	e000      	b.n	8007da0 <psram_read_id+0x94>
	}


	return 0;
 8007d9e:	2300      	movs	r3, #0

}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3740      	adds	r7, #64	@ 0x40
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	200001d4 	.word	0x200001d4

08007dac <psram_internal_read_write>:

int psram_internal_read_write(uint8_t write, uint32_t address, uint16_t nbytes, uint8_t *pBuffer)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b092      	sub	sp, #72	@ 0x48
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60b9      	str	r1, [r7, #8]
 8007db4:	607b      	str	r3, [r7, #4]
 8007db6:	4603      	mov	r3, r0
 8007db8:	73fb      	strb	r3, [r7, #15]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	81bb      	strh	r3, [r7, #12]

	QSPI_CommandTypeDef sCommand = {0};
 8007dbe:	f107 0310 	add.w	r3, r7, #16
 8007dc2:	2238      	movs	r2, #56	@ 0x38
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f00f fd6a 	bl	80178a0 <memset>

	sCommand.Address = address;
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.NbData = nbytes;
 8007de0:	89bb      	ldrh	r3, [r7, #12]
 8007de2:	63bb      	str	r3, [r7, #56]	@ 0x38

	if(psramQSPI)
 8007de4:	4b33      	ldr	r3, [pc, #204]	@ (8007eb4 <psram_internal_read_write+0x108>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d01a      	beq.n	8007e22 <psram_internal_read_write+0x76>
	{
		//QSPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE_QUAD : PSRAM_CMD_READ_FAST_QIO;
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <psram_internal_read_write+0x4a>
 8007df2:	2338      	movs	r3, #56	@ 0x38
 8007df4:	e000      	b.n	8007df8 <psram_internal_read_write+0x4c>
 8007df6:	23eb      	movs	r3, #235	@ 0xeb
 8007df8:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8007dfa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8007e00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007e04:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 8007e06:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_4_LINES;
 8007e0c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8007e10:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_QPI_READ_FAST_QIO_WAIT;
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <psram_internal_read_write+0x70>
 8007e18:	2300      	movs	r3, #0
 8007e1a:	e000      	b.n	8007e1e <psram_internal_read_write+0x72>
 8007e1c:	2306      	movs	r3, #6
 8007e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e20:	e019      	b.n	8007e56 <psram_internal_read_write+0xaa>
	}else{
		//SPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE : PSRAM_CMD_READ_FAST;
 8007e22:	7bfb      	ldrb	r3, [r7, #15]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <psram_internal_read_write+0x80>
 8007e28:	2302      	movs	r3, #2
 8007e2a:	e000      	b.n	8007e2e <psram_internal_read_write+0x82>
 8007e2c:	230b      	movs	r3, #11
 8007e2e:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8007e30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007e34:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8007e36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007e3a:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8007e3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_1_LINE;
 8007e42:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007e46:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_READ_FAST_WAIT;
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <psram_internal_read_write+0xa6>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	e000      	b.n	8007e54 <psram_internal_read_write+0xa8>
 8007e52:	2308      	movs	r3, #8
 8007e54:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007e56:	f107 0310 	add.w	r3, r7, #16
 8007e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e5e:	4619      	mov	r1, r3
 8007e60:	4815      	ldr	r0, [pc, #84]	@ (8007eb8 <psram_internal_read_write+0x10c>)
 8007e62:	f008 fa2f 	bl	80102c4 <HAL_QSPI_Command>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d002      	beq.n	8007e72 <psram_internal_read_write+0xc6>
	{
		return -1;
 8007e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e70:	e01b      	b.n	8007eaa <psram_internal_read_write+0xfe>
	}

	if(write)
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00b      	beq.n	8007e90 <psram_internal_read_write+0xe4>
	{
		if (HAL_QSPI_Transmit(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e7c:	6879      	ldr	r1, [r7, #4]
 8007e7e:	480e      	ldr	r0, [pc, #56]	@ (8007eb8 <psram_internal_read_write+0x10c>)
 8007e80:	f008 fa7e 	bl	8010380 <HAL_QSPI_Transmit>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00e      	beq.n	8007ea8 <psram_internal_read_write+0xfc>
		{
			return -1;
 8007e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e8e:	e00c      	b.n	8007eaa <psram_internal_read_write+0xfe>
		}

	}else{

		if (HAL_QSPI_Receive(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007e90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e94:	6879      	ldr	r1, [r7, #4]
 8007e96:	4808      	ldr	r0, [pc, #32]	@ (8007eb8 <psram_internal_read_write+0x10c>)
 8007e98:	f008 fb09 	bl	80104ae <HAL_QSPI_Receive>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d002      	beq.n	8007ea8 <psram_internal_read_write+0xfc>
		{
			return -1;
 8007ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea6:	e000      	b.n	8007eaa <psram_internal_read_write+0xfe>
		}

	}

	return 0;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3748      	adds	r7, #72	@ 0x48
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	20005c59 	.word	0x20005c59
 8007eb8:	200001d4 	.word	0x200001d4

08007ebc <psram_sector_read_write>:


//Funzione usata da FatFs
int psram_sector_read_write(uint8_t write, uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b088      	sub	sp, #32
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60b9      	str	r1, [r7, #8]
 8007ec4:	607a      	str	r2, [r7, #4]
 8007ec6:	603b      	str	r3, [r7, #0]
 8007ec8:	4603      	mov	r3, r0
 8007eca:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * PSRAM_PAGE_SIZE;
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	029b      	lsls	r3, r3, #10
 8007ed8:	61bb      	str	r3, [r7, #24]

	while(nsectors > 0)
 8007eda:	e018      	b.n	8007f0e <psram_sector_read_write+0x52>
	{
		result = psram_internal_read_write(write, address, PSRAM_PAGE_SIZE, wPtr);
 8007edc:	7bf8      	ldrb	r0, [r7, #15]
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007ee4:	69b9      	ldr	r1, [r7, #24]
 8007ee6:	f7ff ff61 	bl	8007dac <psram_internal_read_write>
 8007eea:	6178      	str	r0, [r7, #20]
		if(result < 0)return -1;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	da02      	bge.n	8007ef8 <psram_sector_read_write+0x3c>
 8007ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef6:	e00e      	b.n	8007f16 <psram_sector_read_write+0x5a>
		address += PSRAM_PAGE_SIZE;
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007efe:	61bb      	str	r3, [r7, #24]
		wPtr += PSRAM_PAGE_SIZE;
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f06:	61fb      	str	r3, [r7, #28]
		nsectors--;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	607b      	str	r3, [r7, #4]
	while(nsectors > 0)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1e3      	bne.n	8007edc <psram_sector_read_write+0x20>
	}

	return 0;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3720      	adds	r7, #32
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
	...

08007f20 <psram_read_write>:



int psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b088      	sub	sp, #32
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60b9      	str	r1, [r7, #8]
 8007f28:	607a      	str	r2, [r7, #4]
 8007f2a:	603b      	str	r3, [r7, #0]
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8007f30:	2300      	movs	r3, #0
 8007f32:	61bb      	str	r3, [r7, #24]
	uint32_t trBytes = 0;
 8007f34:	2300      	movs	r3, #0
 8007f36:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	61fb      	str	r3, [r7, #28]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 8007f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8007fb8 <psram_read_write+0x98>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d002      	beq.n	8007f4a <psram_read_write+0x2a>
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d102      	bne.n	8007f50 <psram_read_write+0x30>
 8007f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f4e:	e02e      	b.n	8007fae <psram_read_write+0x8e>
	if(address + nbytes >= psramSize)return -2;
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	441a      	add	r2, r3
 8007f56:	4b19      	ldr	r3, [pc, #100]	@ (8007fbc <psram_read_write+0x9c>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d323      	bcc.n	8007fa6 <psram_read_write+0x86>
 8007f5e:	f06f 0301 	mvn.w	r3, #1
 8007f62:	e024      	b.n	8007fae <psram_read_write+0x8e>

	while(nbytes > 0)
	{
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f6a:	bf28      	it	cs
 8007f6c:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8007f70:	617b      	str	r3, [r7, #20]
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	7bf8      	ldrb	r0, [r7, #15]
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	68b9      	ldr	r1, [r7, #8]
 8007f7c:	f7ff ff16 	bl	8007dac <psram_internal_read_write>
 8007f80:	61b8      	str	r0, [r7, #24]

		if(result < 0)return -1;
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	da02      	bge.n	8007f8e <psram_read_write+0x6e>
 8007f88:	f04f 33ff 	mov.w	r3, #4294967295
 8007f8c:	e00f      	b.n	8007fae <psram_read_write+0x8e>

		address += trBytes;
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	4413      	add	r3, r2
 8007f94:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 8007f96:	69fa      	ldr	r2, [r7, #28]
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	61fb      	str	r3, [r7, #28]
		nbytes -= trBytes;
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	607b      	str	r3, [r7, #4]
	while(nbytes > 0)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1db      	bne.n	8007f64 <psram_read_write+0x44>
	}

	return 0;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3720      	adds	r7, #32
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20005c58 	.word	0x20005c58
 8007fbc:	20005c64 	.word	0x20005c64

08007fc0 <raw_psram_read_write>:

int raw_psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b088      	sub	sp, #32
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60b9      	str	r1, [r7, #8]
 8007fc8:	607a      	str	r2, [r7, #4]
 8007fca:	603b      	str	r3, [r7, #0]
 8007fcc:	4603      	mov	r3, r0
 8007fce:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	617b      	str	r3, [r7, #20]
	uint32_t trBytes = 0;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	61fb      	str	r3, [r7, #28]
	uint8_t *wPtr = pBuffer;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	61bb      	str	r3, [r7, #24]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 8007fdc:	4b25      	ldr	r3, [pc, #148]	@ (8008074 <raw_psram_read_write+0xb4>)
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d002      	beq.n	8007fea <raw_psram_read_write+0x2a>
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d102      	bne.n	8007ff0 <raw_psram_read_write+0x30>
 8007fea:	f04f 33ff 	mov.w	r3, #4294967295
 8007fee:	e03c      	b.n	800806a <raw_psram_read_write+0xaa>
	if(address + nbytes >= psramSize)return -2;
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	441a      	add	r2, r3
 8007ff6:	4b20      	ldr	r3, [pc, #128]	@ (8008078 <raw_psram_read_write+0xb8>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d302      	bcc.n	8008004 <raw_psram_read_write+0x44>
 8007ffe:	f06f 0301 	mvn.w	r3, #1
 8008002:	e032      	b.n	800806a <raw_psram_read_write+0xaa>

	if(nbytes > 1024)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800800a:	d906      	bls.n	800801a <raw_psram_read_write+0x5a>
	{
		trBytes = 1024 - address % 1024;
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008012:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8008016:	61fb      	str	r3, [r7, #28]
 8008018:	e023      	b.n	8008062 <raw_psram_read_write+0xa2>
	}
	else
	{
		trBytes = nbytes;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	61fb      	str	r3, [r7, #28]
	}

	while(nbytes > 0)
 800801e:	e020      	b.n	8008062 <raw_psram_read_write+0xa2>
	{
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	b29a      	uxth	r2, r3
 8008024:	7bf8      	ldrb	r0, [r7, #15]
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	68b9      	ldr	r1, [r7, #8]
 800802a:	f7ff febf 	bl	8007dac <psram_internal_read_write>
 800802e:	6178      	str	r0, [r7, #20]

		if(result < 0)return -1;
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	2b00      	cmp	r3, #0
 8008034:	da02      	bge.n	800803c <raw_psram_read_write+0x7c>
 8008036:	f04f 33ff 	mov.w	r3, #4294967295
 800803a:	e016      	b.n	800806a <raw_psram_read_write+0xaa>

		address += trBytes;
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	4413      	add	r3, r2
 8008042:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 8008044:	69ba      	ldr	r2, [r7, #24]
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	4413      	add	r3, r2
 800804a:	61bb      	str	r3, [r7, #24]
		nbytes -= trBytes;
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	607b      	str	r3, [r7, #4]
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800805a:	bf28      	it	cs
 800805c:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8008060:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1db      	bne.n	8008020 <raw_psram_read_write+0x60>
	}

	return 0;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3720      	adds	r7, #32
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	20005c58 	.word	0x20005c58
 8008078:	20005c64 	.word	0x20005c64

0800807c <RAM_Write>:
{
	return psram_read_write(1, address, nbytes, pBuffer);
}

int RAM_Write(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
	return raw_psram_read_write(1, address, nbytes, pBuffer);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	68f9      	ldr	r1, [r7, #12]
 800808e:	2001      	movs	r0, #1
 8008090:	f7ff ff96 	bl	8007fc0 <raw_psram_read_write>
 8008094:	4603      	mov	r3, r0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <RAM_Read>:

int RAM_Read(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b084      	sub	sp, #16
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	60f8      	str	r0, [r7, #12]
 80080a6:	60b9      	str	r1, [r7, #8]
 80080a8:	607a      	str	r2, [r7, #4]
	return psram_read_write(0, address, nbytes, pBuffer);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	68f9      	ldr	r1, [r7, #12]
 80080b0:	2000      	movs	r0, #0
 80080b2:	f7ff ff35 	bl	8007f20 <psram_read_write>
 80080b6:	4603      	mov	r3, r0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <psram_is_initialized>:


int psram_is_initialized()
{
 80080c0:	b480      	push	{r7}
 80080c2:	af00      	add	r7, sp, #0
	return psramInitDone;
 80080c4:	4b03      	ldr	r3, [pc, #12]	@ (80080d4 <psram_is_initialized+0x14>)
 80080c6:	781b      	ldrb	r3, [r3, #0]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	20005c58 	.word	0x20005c58

080080d8 <psram_get_sector_size>:

unsigned int psram_get_sector_size()
{
 80080d8:	b480      	push	{r7}
 80080da:	af00      	add	r7, sp, #0
	return PSRAM_PAGE_SIZE;
 80080dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
	...

080080ec <psram_get_sector_count>:

unsigned int psram_get_sector_count()
{
 80080ec:	b480      	push	{r7}
 80080ee:	af00      	add	r7, sp, #0
	return psramNumPages;
 80080f0:	4b03      	ldr	r3, [pc, #12]	@ (8008100 <psram_get_sector_count+0x14>)
 80080f2:	681b      	ldr	r3, [r3, #0]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	20005c68 	.word	0x20005c68

08008104 <psram_get_size>:

unsigned int psram_get_size()
{
 8008104:	b480      	push	{r7}
 8008106:	af00      	add	r7, sp, #0
	return psramSize;
 8008108:	4b03      	ldr	r3, [pc, #12]	@ (8008118 <psram_get_size+0x14>)
 800810a:	681b      	ldr	r3, [r3, #0]
}
 800810c:	4618      	mov	r0, r3
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	20005c64 	.word	0x20005c64

0800811c <psram_init>:

int psram_init()
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0

	uint8_t density = 0xFF;
 8008122:	23ff      	movs	r3, #255	@ 0xff
 8008124:	71fb      	strb	r3, [r7, #7]

	psramInitDone = 0;
 8008126:	4b20      	ldr	r3, [pc, #128]	@ (80081a8 <psram_init+0x8c>)
 8008128:	2200      	movs	r2, #0
 800812a:	701a      	strb	r2, [r3, #0]

	if(psram_reset() < 0)return -1;
 800812c:	f7ff fd6c 	bl	8007c08 <psram_reset>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	da02      	bge.n	800813c <psram_init+0x20>
 8008136:	f04f 33ff 	mov.w	r3, #4294967295
 800813a:	e030      	b.n	800819e <psram_init+0x82>

	memset(psramId, 0xFF, sizeof(psramId));
 800813c:	2208      	movs	r2, #8
 800813e:	21ff      	movs	r1, #255	@ 0xff
 8008140:	481a      	ldr	r0, [pc, #104]	@ (80081ac <psram_init+0x90>)
 8008142:	f00f fbad 	bl	80178a0 <memset>

	if(psram_read_id(psramId, sizeof(psramId)) < 0)return -1;
 8008146:	2108      	movs	r1, #8
 8008148:	4818      	ldr	r0, [pc, #96]	@ (80081ac <psram_init+0x90>)
 800814a:	f7ff fddf 	bl	8007d0c <psram_read_id>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	da02      	bge.n	800815a <psram_init+0x3e>
 8008154:	f04f 33ff 	mov.w	r3, #4294967295
 8008158:	e021      	b.n	800819e <psram_init+0x82>

	density = psramId[2] >> 5;
 800815a:	4b14      	ldr	r3, [pc, #80]	@ (80081ac <psram_init+0x90>)
 800815c:	789b      	ldrb	r3, [r3, #2]
 800815e:	095b      	lsrs	r3, r3, #5
 8008160:	71fb      	strb	r3, [r7, #7]

	if(psramId[0] == PSRAM_MANUFACTURER && psramId[1] == PSRAM_KGD && density <= PSRAM_DENSITY_64MB)
 8008162:	4b12      	ldr	r3, [pc, #72]	@ (80081ac <psram_init+0x90>)
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	2b0d      	cmp	r3, #13
 8008168:	d117      	bne.n	800819a <psram_init+0x7e>
 800816a:	4b10      	ldr	r3, [pc, #64]	@ (80081ac <psram_init+0x90>)
 800816c:	785b      	ldrb	r3, [r3, #1]
 800816e:	2b5d      	cmp	r3, #93	@ 0x5d
 8008170:	d113      	bne.n	800819a <psram_init+0x7e>
 8008172:	79fb      	ldrb	r3, [r7, #7]
 8008174:	2b03      	cmp	r3, #3
 8008176:	d810      	bhi.n	800819a <psram_init+0x7e>
	{
		psramSize = PSRAM_DENSITY_64MB_EADDR;
 8008178:	4b0d      	ldr	r3, [pc, #52]	@ (80081b0 <psram_init+0x94>)
 800817a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800817e:	601a      	str	r2, [r3, #0]
		psramNumPages = psramSize / PSRAM_PAGE_SIZE;
 8008180:	4b0b      	ldr	r3, [pc, #44]	@ (80081b0 <psram_init+0x94>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	0a9b      	lsrs	r3, r3, #10
 8008186:	4a0b      	ldr	r2, [pc, #44]	@ (80081b4 <psram_init+0x98>)
 8008188:	6013      	str	r3, [r2, #0]

		psram_qpi_mode(1);
 800818a:	2001      	movs	r0, #1
 800818c:	f7ff fd72 	bl	8007c74 <psram_qpi_mode>

		psramInitDone = 1;
 8008190:	4b05      	ldr	r3, [pc, #20]	@ (80081a8 <psram_init+0x8c>)
 8008192:	2201      	movs	r2, #1
 8008194:	701a      	strb	r2, [r3, #0]
		return 0;
 8008196:	2300      	movs	r3, #0
 8008198:	e001      	b.n	800819e <psram_init+0x82>
	}else{
		return -1;
 800819a:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 800819e:	4618      	mov	r0, r3
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	20005c58 	.word	0x20005c58
 80081ac:	20005c5c 	.word	0x20005c5c
 80081b0:	20005c64 	.word	0x20005c64
 80081b4:	20005c68 	.word	0x20005c68

080081b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081be:	4b0f      	ldr	r3, [pc, #60]	@ (80081fc <HAL_MspInit+0x44>)
 80081c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081c2:	4a0e      	ldr	r2, [pc, #56]	@ (80081fc <HAL_MspInit+0x44>)
 80081c4:	f043 0301 	orr.w	r3, r3, #1
 80081c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80081ca:	4b0c      	ldr	r3, [pc, #48]	@ (80081fc <HAL_MspInit+0x44>)
 80081cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081ce:	f003 0301 	and.w	r3, r3, #1
 80081d2:	607b      	str	r3, [r7, #4]
 80081d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80081d6:	4b09      	ldr	r3, [pc, #36]	@ (80081fc <HAL_MspInit+0x44>)
 80081d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081da:	4a08      	ldr	r2, [pc, #32]	@ (80081fc <HAL_MspInit+0x44>)
 80081dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80081e2:	4b06      	ldr	r3, [pc, #24]	@ (80081fc <HAL_MspInit+0x44>)
 80081e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081ea:	603b      	str	r3, [r7, #0]
 80081ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80081ee:	bf00      	nop
 80081f0:	370c      	adds	r7, #12
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	40021000 	.word	0x40021000

08008200 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b0ac      	sub	sp, #176	@ 0xb0
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008208:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800820c:	2200      	movs	r2, #0
 800820e:	601a      	str	r2, [r3, #0]
 8008210:	605a      	str	r2, [r3, #4]
 8008212:	609a      	str	r2, [r3, #8]
 8008214:	60da      	str	r2, [r3, #12]
 8008216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008218:	f107 0314 	add.w	r3, r7, #20
 800821c:	2288      	movs	r2, #136	@ 0x88
 800821e:	2100      	movs	r1, #0
 8008220:	4618      	mov	r0, r3
 8008222:	f00f fb3d 	bl	80178a0 <memset>
  if(hadc->Instance==ADC1)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a3d      	ldr	r2, [pc, #244]	@ (8008320 <HAL_ADC_MspInit+0x120>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d173      	bne.n	8008318 <HAL_ADC_MspInit+0x118>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8008230:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008234:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8008236:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800823a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800823e:	2303      	movs	r3, #3
 8008240:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008242:	2301      	movs	r3, #1
 8008244:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8008246:	2308      	movs	r3, #8
 8008248:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800824a:	2307      	movs	r3, #7
 800824c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800824e:	2302      	movs	r3, #2
 8008250:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008252:	2302      	movs	r3, #2
 8008254:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8008256:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800825a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800825c:	f107 0314 	add.w	r3, r7, #20
 8008260:	4618      	mov	r0, r3
 8008262:	f009 fa1b 	bl	801169c <HAL_RCCEx_PeriphCLKConfig>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d001      	beq.n	8008270 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800826c:	f7fd fefe 	bl	800606c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8008270:	4b2c      	ldr	r3, [pc, #176]	@ (8008324 <HAL_ADC_MspInit+0x124>)
 8008272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008274:	4a2b      	ldr	r2, [pc, #172]	@ (8008324 <HAL_ADC_MspInit+0x124>)
 8008276:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800827a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800827c:	4b29      	ldr	r3, [pc, #164]	@ (8008324 <HAL_ADC_MspInit+0x124>)
 800827e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008280:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008284:	613b      	str	r3, [r7, #16]
 8008286:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008288:	4b26      	ldr	r3, [pc, #152]	@ (8008324 <HAL_ADC_MspInit+0x124>)
 800828a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800828c:	4a25      	ldr	r2, [pc, #148]	@ (8008324 <HAL_ADC_MspInit+0x124>)
 800828e:	f043 0301 	orr.w	r3, r3, #1
 8008292:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008294:	4b23      	ldr	r3, [pc, #140]	@ (8008324 <HAL_ADC_MspInit+0x124>)
 8008296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	60fb      	str	r3, [r7, #12]
 800829e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80082a0:	2310      	movs	r3, #16
 80082a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80082a6:	230b      	movs	r3, #11
 80082a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ac:	2300      	movs	r3, #0
 80082ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082b2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80082b6:	4619      	mov	r1, r3
 80082b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80082bc:	f006 ff4e 	bl	800f15c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80082c0:	4b19      	ldr	r3, [pc, #100]	@ (8008328 <HAL_ADC_MspInit+0x128>)
 80082c2:	4a1a      	ldr	r2, [pc, #104]	@ (800832c <HAL_ADC_MspInit+0x12c>)
 80082c4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80082c6:	4b18      	ldr	r3, [pc, #96]	@ (8008328 <HAL_ADC_MspInit+0x128>)
 80082c8:	2200      	movs	r2, #0
 80082ca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80082cc:	4b16      	ldr	r3, [pc, #88]	@ (8008328 <HAL_ADC_MspInit+0x128>)
 80082ce:	2200      	movs	r2, #0
 80082d0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80082d2:	4b15      	ldr	r3, [pc, #84]	@ (8008328 <HAL_ADC_MspInit+0x128>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80082d8:	4b13      	ldr	r3, [pc, #76]	@ (8008328 <HAL_ADC_MspInit+0x128>)
 80082da:	2280      	movs	r2, #128	@ 0x80
 80082dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80082de:	4b12      	ldr	r3, [pc, #72]	@ (8008328 <HAL_ADC_MspInit+0x128>)
 80082e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80082e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80082e6:	4b10      	ldr	r3, [pc, #64]	@ (8008328 <HAL_ADC_MspInit+0x128>)
 80082e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80082ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80082ee:	4b0e      	ldr	r3, [pc, #56]	@ (8008328 <HAL_ADC_MspInit+0x128>)
 80082f0:	2220      	movs	r2, #32
 80082f2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80082f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008328 <HAL_ADC_MspInit+0x128>)
 80082f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80082fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80082fc:	480a      	ldr	r0, [pc, #40]	@ (8008328 <HAL_ADC_MspInit+0x128>)
 80082fe:	f005 fde7 	bl	800ded0 <HAL_DMA_Init>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d001      	beq.n	800830c <HAL_ADC_MspInit+0x10c>
    {
      Error_Handler();
 8008308:	f7fd feb0 	bl	800606c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a06      	ldr	r2, [pc, #24]	@ (8008328 <HAL_ADC_MspInit+0x128>)
 8008310:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008312:	4a05      	ldr	r2, [pc, #20]	@ (8008328 <HAL_ADC_MspInit+0x128>)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8008318:	bf00      	nop
 800831a:	37b0      	adds	r7, #176	@ 0xb0
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	50040000 	.word	0x50040000
 8008324:	40021000 	.word	0x40021000
 8008328:	20000114 	.word	0x20000114
 800832c:	40020008 	.word	0x40020008

08008330 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a0a      	ldr	r2, [pc, #40]	@ (8008368 <HAL_CRC_MspInit+0x38>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d10b      	bne.n	800835a <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008342:	4b0a      	ldr	r3, [pc, #40]	@ (800836c <HAL_CRC_MspInit+0x3c>)
 8008344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008346:	4a09      	ldr	r2, [pc, #36]	@ (800836c <HAL_CRC_MspInit+0x3c>)
 8008348:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800834c:	6493      	str	r3, [r2, #72]	@ 0x48
 800834e:	4b07      	ldr	r3, [pc, #28]	@ (800836c <HAL_CRC_MspInit+0x3c>)
 8008350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008352:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008356:	60fb      	str	r3, [r7, #12]
 8008358:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 800835a:	bf00      	nop
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	40023000 	.word	0x40023000
 800836c:	40021000 	.word	0x40021000

08008370 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b0ac      	sub	sp, #176	@ 0xb0
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008378:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800837c:	2200      	movs	r2, #0
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	605a      	str	r2, [r3, #4]
 8008382:	609a      	str	r2, [r3, #8]
 8008384:	60da      	str	r2, [r3, #12]
 8008386:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008388:	f107 0314 	add.w	r3, r7, #20
 800838c:	2288      	movs	r2, #136	@ 0x88
 800838e:	2100      	movs	r1, #0
 8008390:	4618      	mov	r0, r3
 8008392:	f00f fa85 	bl	80178a0 <memset>
  if(hi2c->Instance==I2C3)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a21      	ldr	r2, [pc, #132]	@ (8008420 <HAL_I2C_MspInit+0xb0>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d13b      	bne.n	8008418 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80083a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80083a4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80083a6:	2300      	movs	r3, #0
 80083a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80083aa:	f107 0314 	add.w	r3, r7, #20
 80083ae:	4618      	mov	r0, r3
 80083b0:	f009 f974 	bl	801169c <HAL_RCCEx_PeriphCLKConfig>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80083ba:	f7fd fe57 	bl	800606c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80083be:	4b19      	ldr	r3, [pc, #100]	@ (8008424 <HAL_I2C_MspInit+0xb4>)
 80083c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083c2:	4a18      	ldr	r2, [pc, #96]	@ (8008424 <HAL_I2C_MspInit+0xb4>)
 80083c4:	f043 0304 	orr.w	r3, r3, #4
 80083c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80083ca:	4b16      	ldr	r3, [pc, #88]	@ (8008424 <HAL_I2C_MspInit+0xb4>)
 80083cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083ce:	f003 0304 	and.w	r3, r3, #4
 80083d2:	613b      	str	r3, [r7, #16]
 80083d4:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80083d6:	2303      	movs	r3, #3
 80083d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80083dc:	2312      	movs	r3, #18
 80083de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083e2:	2300      	movs	r3, #0
 80083e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083e8:	2303      	movs	r3, #3
 80083ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80083ee:	2304      	movs	r3, #4
 80083f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80083f4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80083f8:	4619      	mov	r1, r3
 80083fa:	480b      	ldr	r0, [pc, #44]	@ (8008428 <HAL_I2C_MspInit+0xb8>)
 80083fc:	f006 feae 	bl	800f15c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8008400:	4b08      	ldr	r3, [pc, #32]	@ (8008424 <HAL_I2C_MspInit+0xb4>)
 8008402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008404:	4a07      	ldr	r2, [pc, #28]	@ (8008424 <HAL_I2C_MspInit+0xb4>)
 8008406:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800840a:	6593      	str	r3, [r2, #88]	@ 0x58
 800840c:	4b05      	ldr	r3, [pc, #20]	@ (8008424 <HAL_I2C_MspInit+0xb4>)
 800840e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008410:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008414:	60fb      	str	r3, [r7, #12]
 8008416:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8008418:	bf00      	nop
 800841a:	37b0      	adds	r7, #176	@ 0xb0
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	40005c00 	.word	0x40005c00
 8008424:	40021000 	.word	0x40021000
 8008428:	48000800 	.word	0x48000800

0800842c <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b08a      	sub	sp, #40	@ 0x28
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008434:	f107 0314 	add.w	r3, r7, #20
 8008438:	2200      	movs	r2, #0
 800843a:	601a      	str	r2, [r3, #0]
 800843c:	605a      	str	r2, [r3, #4]
 800843e:	609a      	str	r2, [r3, #8]
 8008440:	60da      	str	r2, [r3, #12]
 8008442:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a26      	ldr	r2, [pc, #152]	@ (80084e4 <HAL_QSPI_MspInit+0xb8>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d145      	bne.n	80084da <HAL_QSPI_MspInit+0xae>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800844e:	4b26      	ldr	r3, [pc, #152]	@ (80084e8 <HAL_QSPI_MspInit+0xbc>)
 8008450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008452:	4a25      	ldr	r2, [pc, #148]	@ (80084e8 <HAL_QSPI_MspInit+0xbc>)
 8008454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008458:	6513      	str	r3, [r2, #80]	@ 0x50
 800845a:	4b23      	ldr	r3, [pc, #140]	@ (80084e8 <HAL_QSPI_MspInit+0xbc>)
 800845c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800845e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008462:	613b      	str	r3, [r7, #16]
 8008464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008466:	4b20      	ldr	r3, [pc, #128]	@ (80084e8 <HAL_QSPI_MspInit+0xbc>)
 8008468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800846a:	4a1f      	ldr	r2, [pc, #124]	@ (80084e8 <HAL_QSPI_MspInit+0xbc>)
 800846c:	f043 0301 	orr.w	r3, r3, #1
 8008470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008472:	4b1d      	ldr	r3, [pc, #116]	@ (80084e8 <HAL_QSPI_MspInit+0xbc>)
 8008474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008476:	f003 0301 	and.w	r3, r3, #1
 800847a:	60fb      	str	r3, [r7, #12]
 800847c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800847e:	4b1a      	ldr	r3, [pc, #104]	@ (80084e8 <HAL_QSPI_MspInit+0xbc>)
 8008480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008482:	4a19      	ldr	r2, [pc, #100]	@ (80084e8 <HAL_QSPI_MspInit+0xbc>)
 8008484:	f043 0302 	orr.w	r3, r3, #2
 8008488:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800848a:	4b17      	ldr	r3, [pc, #92]	@ (80084e8 <HAL_QSPI_MspInit+0xbc>)
 800848c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800848e:	f003 0302 	and.w	r3, r3, #2
 8008492:	60bb      	str	r3, [r7, #8]
 8008494:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008496:	23c0      	movs	r3, #192	@ 0xc0
 8008498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800849a:	2302      	movs	r3, #2
 800849c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800849e:	2300      	movs	r3, #0
 80084a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084a2:	2303      	movs	r3, #3
 80084a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80084a6:	230a      	movs	r3, #10
 80084a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084aa:	f107 0314 	add.w	r3, r7, #20
 80084ae:	4619      	mov	r1, r3
 80084b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80084b4:	f006 fe52 	bl	800f15c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 80084b8:	f640 4303 	movw	r3, #3075	@ 0xc03
 80084bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084be:	2302      	movs	r3, #2
 80084c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084c2:	2300      	movs	r3, #0
 80084c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084c6:	2303      	movs	r3, #3
 80084c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80084ca:	230a      	movs	r3, #10
 80084cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084ce:	f107 0314 	add.w	r3, r7, #20
 80084d2:	4619      	mov	r1, r3
 80084d4:	4805      	ldr	r0, [pc, #20]	@ (80084ec <HAL_QSPI_MspInit+0xc0>)
 80084d6:	f006 fe41 	bl	800f15c <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80084da:	bf00      	nop
 80084dc:	3728      	adds	r7, #40	@ 0x28
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	a0001000 	.word	0xa0001000
 80084e8:	40021000 	.word	0x40021000
 80084ec:	48000400 	.word	0x48000400

080084f0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b0a4      	sub	sp, #144	@ 0x90
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80084f8:	f107 0308 	add.w	r3, r7, #8
 80084fc:	2288      	movs	r2, #136	@ 0x88
 80084fe:	2100      	movs	r1, #0
 8008500:	4618      	mov	r0, r3
 8008502:	f00f f9cd 	bl	80178a0 <memset>
  if(hrtc->Instance==RTC)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a14      	ldr	r2, [pc, #80]	@ (800855c <HAL_RTC_MspInit+0x6c>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d120      	bne.n	8008552 <HAL_RTC_MspInit+0x62>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8008510:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008514:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8008516:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800851a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800851e:	f107 0308 	add.w	r3, r7, #8
 8008522:	4618      	mov	r0, r3
 8008524:	f009 f8ba 	bl	801169c <HAL_RCCEx_PeriphCLKConfig>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800852e:	f7fd fd9d 	bl	800606c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008532:	4b0b      	ldr	r3, [pc, #44]	@ (8008560 <HAL_RTC_MspInit+0x70>)
 8008534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008538:	4a09      	ldr	r2, [pc, #36]	@ (8008560 <HAL_RTC_MspInit+0x70>)
 800853a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800853e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 2, 0);
 8008542:	2200      	movs	r2, #0
 8008544:	2102      	movs	r1, #2
 8008546:	2029      	movs	r0, #41	@ 0x29
 8008548:	f005 fa4f 	bl	800d9ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800854c:	2029      	movs	r0, #41	@ 0x29
 800854e:	f005 fa68 	bl	800da22 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8008552:	bf00      	nop
 8008554:	3790      	adds	r7, #144	@ 0x90
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	40002800 	.word	0x40002800
 8008560:	40021000 	.word	0x40021000

08008564 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b08c      	sub	sp, #48	@ 0x30
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800856c:	f107 031c 	add.w	r3, r7, #28
 8008570:	2200      	movs	r2, #0
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	605a      	str	r2, [r3, #4]
 8008576:	609a      	str	r2, [r3, #8]
 8008578:	60da      	str	r2, [r3, #12]
 800857a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a2f      	ldr	r2, [pc, #188]	@ (8008640 <HAL_SPI_MspInit+0xdc>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d129      	bne.n	80085da <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008586:	4b2f      	ldr	r3, [pc, #188]	@ (8008644 <HAL_SPI_MspInit+0xe0>)
 8008588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800858a:	4a2e      	ldr	r2, [pc, #184]	@ (8008644 <HAL_SPI_MspInit+0xe0>)
 800858c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008590:	6593      	str	r3, [r2, #88]	@ 0x58
 8008592:	4b2c      	ldr	r3, [pc, #176]	@ (8008644 <HAL_SPI_MspInit+0xe0>)
 8008594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008596:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800859a:	61bb      	str	r3, [r7, #24]
 800859c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800859e:	4b29      	ldr	r3, [pc, #164]	@ (8008644 <HAL_SPI_MspInit+0xe0>)
 80085a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085a2:	4a28      	ldr	r2, [pc, #160]	@ (8008644 <HAL_SPI_MspInit+0xe0>)
 80085a4:	f043 0302 	orr.w	r3, r3, #2
 80085a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80085aa:	4b26      	ldr	r3, [pc, #152]	@ (8008644 <HAL_SPI_MspInit+0xe0>)
 80085ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085ae:	f003 0302 	and.w	r3, r3, #2
 80085b2:	617b      	str	r3, [r7, #20]
 80085b4:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80085b6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80085ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085bc:	2302      	movs	r3, #2
 80085be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085c0:	2300      	movs	r3, #0
 80085c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085c4:	2303      	movs	r3, #3
 80085c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80085c8:	2305      	movs	r3, #5
 80085ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80085cc:	f107 031c 	add.w	r3, r7, #28
 80085d0:	4619      	mov	r1, r3
 80085d2:	481d      	ldr	r0, [pc, #116]	@ (8008648 <HAL_SPI_MspInit+0xe4>)
 80085d4:	f006 fdc2 	bl	800f15c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 80085d8:	e02d      	b.n	8008636 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a1b      	ldr	r2, [pc, #108]	@ (800864c <HAL_SPI_MspInit+0xe8>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d128      	bne.n	8008636 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80085e4:	4b17      	ldr	r3, [pc, #92]	@ (8008644 <HAL_SPI_MspInit+0xe0>)
 80085e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085e8:	4a16      	ldr	r2, [pc, #88]	@ (8008644 <HAL_SPI_MspInit+0xe0>)
 80085ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80085f0:	4b14      	ldr	r3, [pc, #80]	@ (8008644 <HAL_SPI_MspInit+0xe0>)
 80085f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80085f8:	613b      	str	r3, [r7, #16]
 80085fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80085fc:	4b11      	ldr	r3, [pc, #68]	@ (8008644 <HAL_SPI_MspInit+0xe0>)
 80085fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008600:	4a10      	ldr	r2, [pc, #64]	@ (8008644 <HAL_SPI_MspInit+0xe0>)
 8008602:	f043 0304 	orr.w	r3, r3, #4
 8008606:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008608:	4b0e      	ldr	r3, [pc, #56]	@ (8008644 <HAL_SPI_MspInit+0xe0>)
 800860a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800860c:	f003 0304 	and.w	r3, r3, #4
 8008610:	60fb      	str	r3, [r7, #12]
 8008612:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8008614:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800861a:	2302      	movs	r3, #2
 800861c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800861e:	2300      	movs	r3, #0
 8008620:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008622:	2303      	movs	r3, #3
 8008624:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008626:	2306      	movs	r3, #6
 8008628:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800862a:	f107 031c 	add.w	r3, r7, #28
 800862e:	4619      	mov	r1, r3
 8008630:	4807      	ldr	r0, [pc, #28]	@ (8008650 <HAL_SPI_MspInit+0xec>)
 8008632:	f006 fd93 	bl	800f15c <HAL_GPIO_Init>
}
 8008636:	bf00      	nop
 8008638:	3730      	adds	r7, #48	@ 0x30
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	40003800 	.word	0x40003800
 8008644:	40021000 	.word	0x40021000
 8008648:	48000400 	.word	0x48000400
 800864c:	40003c00 	.word	0x40003c00
 8008650:	48000800 	.word	0x48000800

08008654 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a0a      	ldr	r2, [pc, #40]	@ (800868c <HAL_TIM_PWM_MspInit+0x38>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d10b      	bne.n	800867e <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008666:	4b0a      	ldr	r3, [pc, #40]	@ (8008690 <HAL_TIM_PWM_MspInit+0x3c>)
 8008668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800866a:	4a09      	ldr	r2, [pc, #36]	@ (8008690 <HAL_TIM_PWM_MspInit+0x3c>)
 800866c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008670:	6613      	str	r3, [r2, #96]	@ 0x60
 8008672:	4b07      	ldr	r3, [pc, #28]	@ (8008690 <HAL_TIM_PWM_MspInit+0x3c>)
 8008674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008676:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800867a:	60fb      	str	r3, [r7, #12]
 800867c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800867e:	bf00      	nop
 8008680:	3714      	adds	r7, #20
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	40012c00 	.word	0x40012c00
 8008690:	40021000 	.word	0x40021000

08008694 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b08a      	sub	sp, #40	@ 0x28
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800869c:	f107 0314 	add.w	r3, r7, #20
 80086a0:	2200      	movs	r2, #0
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	605a      	str	r2, [r3, #4]
 80086a6:	609a      	str	r2, [r3, #8]
 80086a8:	60da      	str	r2, [r3, #12]
 80086aa:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086b4:	d130      	bne.n	8008718 <HAL_TIM_IC_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80086b6:	4b1a      	ldr	r3, [pc, #104]	@ (8008720 <HAL_TIM_IC_MspInit+0x8c>)
 80086b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086ba:	4a19      	ldr	r2, [pc, #100]	@ (8008720 <HAL_TIM_IC_MspInit+0x8c>)
 80086bc:	f043 0301 	orr.w	r3, r3, #1
 80086c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80086c2:	4b17      	ldr	r3, [pc, #92]	@ (8008720 <HAL_TIM_IC_MspInit+0x8c>)
 80086c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086c6:	f003 0301 	and.w	r3, r3, #1
 80086ca:	613b      	str	r3, [r7, #16]
 80086cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086ce:	4b14      	ldr	r3, [pc, #80]	@ (8008720 <HAL_TIM_IC_MspInit+0x8c>)
 80086d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086d2:	4a13      	ldr	r2, [pc, #76]	@ (8008720 <HAL_TIM_IC_MspInit+0x8c>)
 80086d4:	f043 0301 	orr.w	r3, r3, #1
 80086d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80086da:	4b11      	ldr	r3, [pc, #68]	@ (8008720 <HAL_TIM_IC_MspInit+0x8c>)
 80086dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086de:	f003 0301 	and.w	r3, r3, #1
 80086e2:	60fb      	str	r3, [r7, #12]
 80086e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80086e6:	2320      	movs	r3, #32
 80086e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086ea:	2302      	movs	r3, #2
 80086ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80086ee:	2301      	movs	r3, #1
 80086f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086f2:	2300      	movs	r3, #0
 80086f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80086f6:	2301      	movs	r3, #1
 80086f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086fa:	f107 0314 	add.w	r3, r7, #20
 80086fe:	4619      	mov	r1, r3
 8008700:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008704:	f006 fd2a 	bl	800f15c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8008708:	2200      	movs	r2, #0
 800870a:	2100      	movs	r1, #0
 800870c:	201c      	movs	r0, #28
 800870e:	f005 f96c 	bl	800d9ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008712:	201c      	movs	r0, #28
 8008714:	f005 f985 	bl	800da22 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8008718:	bf00      	nop
 800871a:	3728      	adds	r7, #40	@ 0x28
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	40021000 	.word	0x40021000

08008724 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a13      	ldr	r2, [pc, #76]	@ (8008780 <HAL_TIM_Base_MspInit+0x5c>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d10c      	bne.n	8008750 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008736:	4b13      	ldr	r3, [pc, #76]	@ (8008784 <HAL_TIM_Base_MspInit+0x60>)
 8008738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800873a:	4a12      	ldr	r2, [pc, #72]	@ (8008784 <HAL_TIM_Base_MspInit+0x60>)
 800873c:	f043 0302 	orr.w	r3, r3, #2
 8008740:	6593      	str	r3, [r2, #88]	@ 0x58
 8008742:	4b10      	ldr	r3, [pc, #64]	@ (8008784 <HAL_TIM_Base_MspInit+0x60>)
 8008744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008746:	f003 0302 	and.w	r3, r3, #2
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800874e:	e010      	b.n	8008772 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a0c      	ldr	r2, [pc, #48]	@ (8008788 <HAL_TIM_Base_MspInit+0x64>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d10b      	bne.n	8008772 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800875a:	4b0a      	ldr	r3, [pc, #40]	@ (8008784 <HAL_TIM_Base_MspInit+0x60>)
 800875c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800875e:	4a09      	ldr	r2, [pc, #36]	@ (8008784 <HAL_TIM_Base_MspInit+0x60>)
 8008760:	f043 0304 	orr.w	r3, r3, #4
 8008764:	6593      	str	r3, [r2, #88]	@ 0x58
 8008766:	4b07      	ldr	r3, [pc, #28]	@ (8008784 <HAL_TIM_Base_MspInit+0x60>)
 8008768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800876a:	f003 0304 	and.w	r3, r3, #4
 800876e:	60bb      	str	r3, [r7, #8]
 8008770:	68bb      	ldr	r3, [r7, #8]
}
 8008772:	bf00      	nop
 8008774:	3714      	adds	r7, #20
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	40000400 	.word	0x40000400
 8008784:	40021000 	.word	0x40021000
 8008788:	40000800 	.word	0x40000800

0800878c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b08a      	sub	sp, #40	@ 0x28
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008794:	f107 0314 	add.w	r3, r7, #20
 8008798:	2200      	movs	r2, #0
 800879a:	601a      	str	r2, [r3, #0]
 800879c:	605a      	str	r2, [r3, #4]
 800879e:	609a      	str	r2, [r3, #8]
 80087a0:	60da      	str	r2, [r3, #12]
 80087a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a23      	ldr	r2, [pc, #140]	@ (8008838 <HAL_TIM_MspPostInit+0xac>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d11e      	bne.n	80087ec <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087ae:	4b23      	ldr	r3, [pc, #140]	@ (800883c <HAL_TIM_MspPostInit+0xb0>)
 80087b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087b2:	4a22      	ldr	r2, [pc, #136]	@ (800883c <HAL_TIM_MspPostInit+0xb0>)
 80087b4:	f043 0301 	orr.w	r3, r3, #1
 80087b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80087ba:	4b20      	ldr	r3, [pc, #128]	@ (800883c <HAL_TIM_MspPostInit+0xb0>)
 80087bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087be:	f003 0301 	and.w	r3, r3, #1
 80087c2:	613b      	str	r3, [r7, #16]
 80087c4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80087c6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80087ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087cc:	2302      	movs	r3, #2
 80087ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087d0:	2300      	movs	r3, #0
 80087d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087d4:	2300      	movs	r3, #0
 80087d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80087d8:	2301      	movs	r3, #1
 80087da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087dc:	f107 0314 	add.w	r3, r7, #20
 80087e0:	4619      	mov	r1, r3
 80087e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80087e6:	f006 fcb9 	bl	800f15c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80087ea:	e021      	b.n	8008830 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a13      	ldr	r2, [pc, #76]	@ (8008840 <HAL_TIM_MspPostInit+0xb4>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d11c      	bne.n	8008830 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80087f6:	4b11      	ldr	r3, [pc, #68]	@ (800883c <HAL_TIM_MspPostInit+0xb0>)
 80087f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087fa:	4a10      	ldr	r2, [pc, #64]	@ (800883c <HAL_TIM_MspPostInit+0xb0>)
 80087fc:	f043 0304 	orr.w	r3, r3, #4
 8008800:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008802:	4b0e      	ldr	r3, [pc, #56]	@ (800883c <HAL_TIM_MspPostInit+0xb0>)
 8008804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008806:	f003 0304 	and.w	r3, r3, #4
 800880a:	60fb      	str	r3, [r7, #12]
 800880c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800880e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008814:	2302      	movs	r3, #2
 8008816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008818:	2300      	movs	r3, #0
 800881a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800881c:	2300      	movs	r3, #0
 800881e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008820:	2302      	movs	r3, #2
 8008822:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008824:	f107 0314 	add.w	r3, r7, #20
 8008828:	4619      	mov	r1, r3
 800882a:	4806      	ldr	r0, [pc, #24]	@ (8008844 <HAL_TIM_MspPostInit+0xb8>)
 800882c:	f006 fc96 	bl	800f15c <HAL_GPIO_Init>
}
 8008830:	bf00      	nop
 8008832:	3728      	adds	r7, #40	@ 0x28
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	40012c00 	.word	0x40012c00
 800883c:	40021000 	.word	0x40021000
 8008840:	40000400 	.word	0x40000400
 8008844:	48000800 	.word	0x48000800

08008848 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b0ae      	sub	sp, #184	@ 0xb8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008850:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8008854:	2200      	movs	r2, #0
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	605a      	str	r2, [r3, #4]
 800885a:	609a      	str	r2, [r3, #8]
 800885c:	60da      	str	r2, [r3, #12]
 800885e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008860:	f107 031c 	add.w	r3, r7, #28
 8008864:	2288      	movs	r2, #136	@ 0x88
 8008866:	2100      	movs	r1, #0
 8008868:	4618      	mov	r0, r3
 800886a:	f00f f819 	bl	80178a0 <memset>
  if(huart->Instance==UART4)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a70      	ldr	r2, [pc, #448]	@ (8008a34 <HAL_UART_MspInit+0x1ec>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d13c      	bne.n	80088f2 <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8008878:	2308      	movs	r3, #8
 800887a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800887c:	2300      	movs	r3, #0
 800887e:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008880:	f107 031c 	add.w	r3, r7, #28
 8008884:	4618      	mov	r0, r3
 8008886:	f008 ff09 	bl	801169c <HAL_RCCEx_PeriphCLKConfig>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d001      	beq.n	8008894 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8008890:	f7fd fbec 	bl	800606c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8008894:	4b68      	ldr	r3, [pc, #416]	@ (8008a38 <HAL_UART_MspInit+0x1f0>)
 8008896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008898:	4a67      	ldr	r2, [pc, #412]	@ (8008a38 <HAL_UART_MspInit+0x1f0>)
 800889a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800889e:	6593      	str	r3, [r2, #88]	@ 0x58
 80088a0:	4b65      	ldr	r3, [pc, #404]	@ (8008a38 <HAL_UART_MspInit+0x1f0>)
 80088a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80088a8:	61bb      	str	r3, [r7, #24]
 80088aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088ac:	4b62      	ldr	r3, [pc, #392]	@ (8008a38 <HAL_UART_MspInit+0x1f0>)
 80088ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088b0:	4a61      	ldr	r2, [pc, #388]	@ (8008a38 <HAL_UART_MspInit+0x1f0>)
 80088b2:	f043 0301 	orr.w	r3, r3, #1
 80088b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80088b8:	4b5f      	ldr	r3, [pc, #380]	@ (8008a38 <HAL_UART_MspInit+0x1f0>)
 80088ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088bc:	f003 0301 	and.w	r3, r3, #1
 80088c0:	617b      	str	r3, [r7, #20]
 80088c2:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80088c4:	2301      	movs	r3, #1
 80088c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80088ca:	2312      	movs	r3, #18
 80088cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088d0:	2300      	movs	r3, #0
 80088d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088d6:	2303      	movs	r3, #3
 80088d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80088dc:	2308      	movs	r3, #8
 80088de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088e2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80088e6:	4619      	mov	r1, r3
 80088e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80088ec:	f006 fc36 	bl	800f15c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 80088f0:	e09b      	b.n	8008a2a <HAL_UART_MspInit+0x1e2>
  else if(huart->Instance==USART1)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a51      	ldr	r2, [pc, #324]	@ (8008a3c <HAL_UART_MspInit+0x1f4>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	f040 8096 	bne.w	8008a2a <HAL_UART_MspInit+0x1e2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80088fe:	2301      	movs	r3, #1
 8008900:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008902:	2300      	movs	r3, #0
 8008904:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008906:	f107 031c 	add.w	r3, r7, #28
 800890a:	4618      	mov	r0, r3
 800890c:	f008 fec6 	bl	801169c <HAL_RCCEx_PeriphCLKConfig>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d001      	beq.n	800891a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8008916:	f7fd fba9 	bl	800606c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800891a:	4b47      	ldr	r3, [pc, #284]	@ (8008a38 <HAL_UART_MspInit+0x1f0>)
 800891c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800891e:	4a46      	ldr	r2, [pc, #280]	@ (8008a38 <HAL_UART_MspInit+0x1f0>)
 8008920:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008924:	6613      	str	r3, [r2, #96]	@ 0x60
 8008926:	4b44      	ldr	r3, [pc, #272]	@ (8008a38 <HAL_UART_MspInit+0x1f0>)
 8008928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800892a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800892e:	613b      	str	r3, [r7, #16]
 8008930:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008932:	4b41      	ldr	r3, [pc, #260]	@ (8008a38 <HAL_UART_MspInit+0x1f0>)
 8008934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008936:	4a40      	ldr	r2, [pc, #256]	@ (8008a38 <HAL_UART_MspInit+0x1f0>)
 8008938:	f043 0302 	orr.w	r3, r3, #2
 800893c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800893e:	4b3e      	ldr	r3, [pc, #248]	@ (8008a38 <HAL_UART_MspInit+0x1f0>)
 8008940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008942:	f003 0302 	and.w	r3, r3, #2
 8008946:	60fb      	str	r3, [r7, #12]
 8008948:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 800894a:	23d8      	movs	r3, #216	@ 0xd8
 800894c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008950:	2302      	movs	r3, #2
 8008952:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008956:	2300      	movs	r3, #0
 8008958:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800895c:	2303      	movs	r3, #3
 800895e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008962:	2307      	movs	r3, #7
 8008964:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008968:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800896c:	4619      	mov	r1, r3
 800896e:	4834      	ldr	r0, [pc, #208]	@ (8008a40 <HAL_UART_MspInit+0x1f8>)
 8008970:	f006 fbf4 	bl	800f15c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8008974:	4b33      	ldr	r3, [pc, #204]	@ (8008a44 <HAL_UART_MspInit+0x1fc>)
 8008976:	4a34      	ldr	r2, [pc, #208]	@ (8008a48 <HAL_UART_MspInit+0x200>)
 8008978:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800897a:	4b32      	ldr	r3, [pc, #200]	@ (8008a44 <HAL_UART_MspInit+0x1fc>)
 800897c:	2202      	movs	r2, #2
 800897e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008980:	4b30      	ldr	r3, [pc, #192]	@ (8008a44 <HAL_UART_MspInit+0x1fc>)
 8008982:	2200      	movs	r2, #0
 8008984:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008986:	4b2f      	ldr	r3, [pc, #188]	@ (8008a44 <HAL_UART_MspInit+0x1fc>)
 8008988:	2200      	movs	r2, #0
 800898a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800898c:	4b2d      	ldr	r3, [pc, #180]	@ (8008a44 <HAL_UART_MspInit+0x1fc>)
 800898e:	2280      	movs	r2, #128	@ 0x80
 8008990:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008992:	4b2c      	ldr	r3, [pc, #176]	@ (8008a44 <HAL_UART_MspInit+0x1fc>)
 8008994:	2200      	movs	r2, #0
 8008996:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008998:	4b2a      	ldr	r3, [pc, #168]	@ (8008a44 <HAL_UART_MspInit+0x1fc>)
 800899a:	2200      	movs	r2, #0
 800899c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800899e:	4b29      	ldr	r3, [pc, #164]	@ (8008a44 <HAL_UART_MspInit+0x1fc>)
 80089a0:	2200      	movs	r2, #0
 80089a2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80089a4:	4b27      	ldr	r3, [pc, #156]	@ (8008a44 <HAL_UART_MspInit+0x1fc>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80089aa:	4826      	ldr	r0, [pc, #152]	@ (8008a44 <HAL_UART_MspInit+0x1fc>)
 80089ac:	f005 fa90 	bl	800ded0 <HAL_DMA_Init>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <HAL_UART_MspInit+0x172>
      Error_Handler();
 80089b6:	f7fd fb59 	bl	800606c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a21      	ldr	r2, [pc, #132]	@ (8008a44 <HAL_UART_MspInit+0x1fc>)
 80089be:	675a      	str	r2, [r3, #116]	@ 0x74
 80089c0:	4a20      	ldr	r2, [pc, #128]	@ (8008a44 <HAL_UART_MspInit+0x1fc>)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80089c6:	4b21      	ldr	r3, [pc, #132]	@ (8008a4c <HAL_UART_MspInit+0x204>)
 80089c8:	4a21      	ldr	r2, [pc, #132]	@ (8008a50 <HAL_UART_MspInit+0x208>)
 80089ca:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 80089cc:	4b1f      	ldr	r3, [pc, #124]	@ (8008a4c <HAL_UART_MspInit+0x204>)
 80089ce:	2202      	movs	r2, #2
 80089d0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80089d2:	4b1e      	ldr	r3, [pc, #120]	@ (8008a4c <HAL_UART_MspInit+0x204>)
 80089d4:	2210      	movs	r2, #16
 80089d6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80089d8:	4b1c      	ldr	r3, [pc, #112]	@ (8008a4c <HAL_UART_MspInit+0x204>)
 80089da:	2200      	movs	r2, #0
 80089dc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80089de:	4b1b      	ldr	r3, [pc, #108]	@ (8008a4c <HAL_UART_MspInit+0x204>)
 80089e0:	2280      	movs	r2, #128	@ 0x80
 80089e2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80089e4:	4b19      	ldr	r3, [pc, #100]	@ (8008a4c <HAL_UART_MspInit+0x204>)
 80089e6:	2200      	movs	r2, #0
 80089e8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80089ea:	4b18      	ldr	r3, [pc, #96]	@ (8008a4c <HAL_UART_MspInit+0x204>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80089f0:	4b16      	ldr	r3, [pc, #88]	@ (8008a4c <HAL_UART_MspInit+0x204>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80089f6:	4b15      	ldr	r3, [pc, #84]	@ (8008a4c <HAL_UART_MspInit+0x204>)
 80089f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80089fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80089fe:	4813      	ldr	r0, [pc, #76]	@ (8008a4c <HAL_UART_MspInit+0x204>)
 8008a00:	f005 fa66 	bl	800ded0 <HAL_DMA_Init>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d001      	beq.n	8008a0e <HAL_UART_MspInit+0x1c6>
      Error_Handler();
 8008a0a:	f7fd fb2f 	bl	800606c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a0e      	ldr	r2, [pc, #56]	@ (8008a4c <HAL_UART_MspInit+0x204>)
 8008a12:	671a      	str	r2, [r3, #112]	@ 0x70
 8008a14:	4a0d      	ldr	r2, [pc, #52]	@ (8008a4c <HAL_UART_MspInit+0x204>)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	2025      	movs	r0, #37	@ 0x25
 8008a20:	f004 ffe3 	bl	800d9ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008a24:	2025      	movs	r0, #37	@ 0x25
 8008a26:	f004 fffc 	bl	800da22 <HAL_NVIC_EnableIRQ>
}
 8008a2a:	bf00      	nop
 8008a2c:	37b8      	adds	r7, #184	@ 0xb8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	40004c00 	.word	0x40004c00
 8008a38:	40021000 	.word	0x40021000
 8008a3c:	40013800 	.word	0x40013800
 8008a40:	48000400 	.word	0x48000400
 8008a44:	20000544 	.word	0x20000544
 8008a48:	40020058 	.word	0x40020058
 8008a4c:	2000058c 	.word	0x2000058c
 8008a50:	40020044 	.word	0x40020044

08008a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008a54:	b480      	push	{r7}
 8008a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008a58:	bf00      	nop
 8008a5a:	e7fd      	b.n	8008a58 <NMI_Handler+0x4>

08008a5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008a60:	bf00      	nop
 8008a62:	e7fd      	b.n	8008a60 <HardFault_Handler+0x4>

08008a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008a64:	b480      	push	{r7}
 8008a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008a68:	bf00      	nop
 8008a6a:	e7fd      	b.n	8008a68 <MemManage_Handler+0x4>

08008a6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008a70:	bf00      	nop
 8008a72:	e7fd      	b.n	8008a70 <BusFault_Handler+0x4>

08008a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008a74:	b480      	push	{r7}
 8008a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008a78:	bf00      	nop
 8008a7a:	e7fd      	b.n	8008a78 <UsageFault_Handler+0x4>

08008a7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008a80:	bf00      	nop
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr

08008a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008a8e:	bf00      	nop
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008a9c:	bf00      	nop
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr

08008aa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008aaa:	f003 facf 	bl	800c04c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008aae:	bf00      	nop
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8008ab6:	2004      	movs	r0, #4
 8008ab8:	f006 fd2a 	bl	800f510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8008abc:	bf00      	nop
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8008ac4:	2010      	movs	r0, #16
 8008ac6:	f006 fd23 	bl	800f510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8008aca:	bf00      	nop
 8008acc:	bd80      	pop	{r7, pc}
	...

08008ad0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008ad4:	4802      	ldr	r0, [pc, #8]	@ (8008ae0 <DMA1_Channel1_IRQHandler+0x10>)
 8008ad6:	f005 fb92 	bl	800e1fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008ada:	bf00      	nop
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	20000114 	.word	0x20000114

08008ae4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8008ae8:	4802      	ldr	r0, [pc, #8]	@ (8008af4 <DMA1_Channel4_IRQHandler+0x10>)
 8008aea:	f005 fb88 	bl	800e1fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8008aee:	bf00      	nop
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	2000058c 	.word	0x2000058c

08008af8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8008afc:	4802      	ldr	r0, [pc, #8]	@ (8008b08 <DMA1_Channel5_IRQHandler+0x10>)
 8008afe:	f005 fb7e 	bl	800e1fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8008b02:	bf00      	nop
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	20000544 	.word	0x20000544

08008b0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8008b10:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008b14:	f006 fcfc 	bl	800f510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8008b18:	bf00      	nop
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008b20:	4802      	ldr	r0, [pc, #8]	@ (8008b2c <TIM2_IRQHandler+0x10>)
 8008b22:	f00b fba3 	bl	801426c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008b26:	bf00      	nop
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	20000350 	.word	0x20000350

08008b30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008b34:	4802      	ldr	r0, [pc, #8]	@ (8008b40 <USART1_IRQHandler+0x10>)
 8008b36:	f00d fa1b 	bl	8015f70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008b3a:	bf00      	nop
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	200004bc 	.word	0x200004bc

08008b44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8008b48:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8008b4c:	f006 fce0 	bl	800f510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008b50:	bf00      	nop
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8008b58:	4802      	ldr	r0, [pc, #8]	@ (8008b64 <RTC_Alarm_IRQHandler+0x10>)
 8008b5a:	f009 fd9f 	bl	801269c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8008b5e:	bf00      	nop
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	20000218 	.word	0x20000218

08008b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008b70:	4a14      	ldr	r2, [pc, #80]	@ (8008bc4 <_sbrk+0x5c>)
 8008b72:	4b15      	ldr	r3, [pc, #84]	@ (8008bc8 <_sbrk+0x60>)
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008b7c:	4b13      	ldr	r3, [pc, #76]	@ (8008bcc <_sbrk+0x64>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d102      	bne.n	8008b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008b84:	4b11      	ldr	r3, [pc, #68]	@ (8008bcc <_sbrk+0x64>)
 8008b86:	4a12      	ldr	r2, [pc, #72]	@ (8008bd0 <_sbrk+0x68>)
 8008b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008b8a:	4b10      	ldr	r3, [pc, #64]	@ (8008bcc <_sbrk+0x64>)
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4413      	add	r3, r2
 8008b92:	693a      	ldr	r2, [r7, #16]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d207      	bcs.n	8008ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008b98:	f00e fed2 	bl	8017940 <__errno>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	220c      	movs	r2, #12
 8008ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba6:	e009      	b.n	8008bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008ba8:	4b08      	ldr	r3, [pc, #32]	@ (8008bcc <_sbrk+0x64>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008bae:	4b07      	ldr	r3, [pc, #28]	@ (8008bcc <_sbrk+0x64>)
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	4a05      	ldr	r2, [pc, #20]	@ (8008bcc <_sbrk+0x64>)
 8008bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008bba:	68fb      	ldr	r3, [r7, #12]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3718      	adds	r7, #24
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	20018000 	.word	0x20018000
 8008bc8:	00000400 	.word	0x00000400
 8008bcc:	20005c6c 	.word	0x20005c6c
 8008bd0:	20005dc8 	.word	0x20005dc8

08008bd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8008bd8:	4b06      	ldr	r3, [pc, #24]	@ (8008bf4 <SystemInit+0x20>)
 8008bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bde:	4a05      	ldr	r2, [pc, #20]	@ (8008bf4 <SystemInit+0x20>)
 8008be0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008be4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8008be8:	bf00      	nop
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	e000ed00 	.word	0xe000ed00

08008bf8 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	4603      	mov	r3, r0
 8008c00:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;

	switch (pdrv) {
 8008c02:	79fb      	ldrb	r3, [r7, #7]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d002      	beq.n	8008c0e <disk_status+0x16>
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d00c      	beq.n	8008c26 <disk_status+0x2e>
 8008c0c:	e017      	b.n	8008c3e <disk_status+0x46>
	case DEV_RAM :

		if(!psram_is_initialized())
 8008c0e:	f7ff fa57 	bl	80080c0 <psram_is_initialized>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d102      	bne.n	8008c1e <disk_status+0x26>
		{
			stat = STA_NOINIT;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	73fb      	strb	r3, [r7, #15]
 8008c1c:	e001      	b.n	8008c22 <disk_status+0x2a>
		}else{
			stat = 0;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8008c22:	7bfb      	ldrb	r3, [r7, #15]
 8008c24:	e00c      	b.n	8008c40 <disk_status+0x48>

	case DEV_MMC :

		if(!extflash_is_initialized())
 8008c26:	f7fa feef 	bl	8003a08 <extflash_is_initialized>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d102      	bne.n	8008c36 <disk_status+0x3e>
		{
			stat = STA_NOINIT;
 8008c30:	2301      	movs	r3, #1
 8008c32:	73fb      	strb	r3, [r7, #15]
 8008c34:	e001      	b.n	8008c3a <disk_status+0x42>
		}else{
			stat = 0;
 8008c36:	2300      	movs	r3, #0
 8008c38:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8008c3a:	7bfb      	ldrb	r3, [r7, #15]
 8008c3c:	e000      	b.n	8008c40 <disk_status+0x48>

	}
	return STA_NOINIT;
 8008c3e:	2301      	movs	r3, #1
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	4603      	mov	r3, r0
 8008c50:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;
	switch (pdrv) {
 8008c52:	79fb      	ldrb	r3, [r7, #7]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d002      	beq.n	8008c5e <disk_initialize+0x16>
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d00c      	beq.n	8008c76 <disk_initialize+0x2e>
 8008c5c:	e017      	b.n	8008c8e <disk_initialize+0x46>
	case DEV_RAM :

		if(psram_init() < 0)
 8008c5e:	f7ff fa5d 	bl	800811c <psram_init>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	da02      	bge.n	8008c6e <disk_initialize+0x26>
		{
			stat = STA_NODISK;
 8008c68:	2302      	movs	r3, #2
 8008c6a:	73fb      	strb	r3, [r7, #15]
 8008c6c:	e001      	b.n	8008c72 <disk_initialize+0x2a>
		}else{
			stat = 0;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8008c72:	7bfb      	ldrb	r3, [r7, #15]
 8008c74:	e00c      	b.n	8008c90 <disk_initialize+0x48>

	case DEV_MMC :

		if(extflash_init() < 0)
 8008c76:	f7fa fed3 	bl	8003a20 <extflash_init>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	da02      	bge.n	8008c86 <disk_initialize+0x3e>
		{
			stat = STA_NODISK;
 8008c80:	2302      	movs	r3, #2
 8008c82:	73fb      	strb	r3, [r7, #15]
 8008c84:	e001      	b.n	8008c8a <disk_initialize+0x42>
		}else{
			stat = 0;
 8008c86:	2300      	movs	r3, #0
 8008c88:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
 8008c8c:	e000      	b.n	8008c90 <disk_initialize+0x48>

	}
	return STA_NOINIT;
 8008c8e:	2301      	movs	r3, #1
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b086      	sub	sp, #24
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60b9      	str	r1, [r7, #8]
 8008ca0:	607a      	str	r2, [r7, #4]
 8008ca2:	603b      	str	r3, [r7, #0]
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	73fb      	strb	r3, [r7, #15]
	DRESULT res;
	int result;

	switch (pdrv) {
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d002      	beq.n	8008cb4 <disk_read+0x1c>
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d010      	beq.n	8008cd4 <disk_read+0x3c>
 8008cb2:	e01e      	b.n	8008cf2 <disk_read+0x5a>
	case DEV_RAM :

		if(psram_sector_read_write(0, sector, count, buff) < 0)
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	6879      	ldr	r1, [r7, #4]
 8008cba:	2000      	movs	r0, #0
 8008cbc:	f7ff f8fe 	bl	8007ebc <psram_sector_read_write>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	da02      	bge.n	8008ccc <disk_read+0x34>
		{
			res = RES_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	75fb      	strb	r3, [r7, #23]
 8008cca:	e001      	b.n	8008cd0 <disk_read+0x38>
		}else{

			res = 0;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8008cd0:	7dfb      	ldrb	r3, [r7, #23]
 8008cd2:	e00f      	b.n	8008cf4 <disk_read+0x5c>

	case DEV_MMC :

		if(extflash_sector_read(sector, count, buff) < 0)
 8008cd4:	68ba      	ldr	r2, [r7, #8]
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7fa fd79 	bl	80037d0 <extflash_sector_read>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	da02      	bge.n	8008cea <disk_read+0x52>
		{
			res = RES_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	75fb      	strb	r3, [r7, #23]
 8008ce8:	e001      	b.n	8008cee <disk_read+0x56>
		}else{

			res = 0;
 8008cea:	2300      	movs	r3, #0
 8008cec:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8008cee:	7dfb      	ldrb	r3, [r7, #23]
 8008cf0:	e000      	b.n	8008cf4 <disk_read+0x5c>

	}

	return RES_PARERR;
 8008cf2:	2304      	movs	r3, #4
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3718      	adds	r7, #24
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b086      	sub	sp, #24
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60b9      	str	r1, [r7, #8]
 8008d04:	607a      	str	r2, [r7, #4]
 8008d06:	603b      	str	r3, [r7, #0]
 8008d08:	4603      	mov	r3, r0
 8008d0a:	73fb      	strb	r3, [r7, #15]
	DRESULT res = RES_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	75fb      	strb	r3, [r7, #23]

	switch (pdrv) {
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d002      	beq.n	8008d1c <disk_write+0x20>
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d010      	beq.n	8008d3c <disk_write+0x40>
 8008d1a:	e01e      	b.n	8008d5a <disk_write+0x5e>
	case DEV_RAM :

		if(psram_sector_read_write(1, sector, count, (const uint8_t *)buff) < 0)
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	6879      	ldr	r1, [r7, #4]
 8008d22:	2001      	movs	r0, #1
 8008d24:	f7ff f8ca 	bl	8007ebc <psram_sector_read_write>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	da02      	bge.n	8008d34 <disk_write+0x38>
		{
			res = RES_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	75fb      	strb	r3, [r7, #23]
 8008d32:	e001      	b.n	8008d38 <disk_write+0x3c>
		}else{

			res = 0;
 8008d34:	2300      	movs	r3, #0
 8008d36:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8008d38:	7dfb      	ldrb	r3, [r7, #23]
 8008d3a:	e00f      	b.n	8008d5c <disk_write+0x60>

	case DEV_MMC :

		if(extflash_sector_write(sector, count, buff) < 0)
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f7fa fdda 	bl	80038fa <extflash_sector_write>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	da02      	bge.n	8008d52 <disk_write+0x56>
		{
			res = RES_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	75fb      	strb	r3, [r7, #23]
 8008d50:	e001      	b.n	8008d56 <disk_write+0x5a>
		}else{

			res = 0;
 8008d52:	2300      	movs	r3, #0
 8008d54:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8008d56:	7dfb      	ldrb	r3, [r7, #23]
 8008d58:	e000      	b.n	8008d5c <disk_write+0x60>

	}

	return RES_PARERR;
 8008d5a:	2304      	movs	r3, #4
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3718      	adds	r7, #24
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	603a      	str	r2, [r7, #0]
 8008d6e:	71fb      	strb	r3, [r7, #7]
 8008d70:	460b      	mov	r3, r1
 8008d72:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_PARERR;
 8008d74:	2304      	movs	r3, #4
 8008d76:	73fb      	strb	r3, [r7, #15]

	switch (pdrv) {
 8008d78:	79fb      	ldrb	r3, [r7, #7]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d002      	beq.n	8008d84 <disk_ioctl+0x20>
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d036      	beq.n	8008df0 <disk_ioctl+0x8c>
 8008d82:	e06b      	b.n	8008e5c <disk_ioctl+0xf8>
	case DEV_RAM :

		if(!psram_is_initialized())return RES_NOTRDY;
 8008d84:	f7ff f99c 	bl	80080c0 <psram_is_initialized>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <disk_ioctl+0x2e>
 8008d8e:	2303      	movs	r3, #3
 8008d90:	e065      	b.n	8008e5e <disk_ioctl+0xfa>

		switch(cmd)
 8008d92:	79bb      	ldrb	r3, [r7, #6]
 8008d94:	2b04      	cmp	r3, #4
 8008d96:	d826      	bhi.n	8008de6 <disk_ioctl+0x82>
 8008d98:	a201      	add	r2, pc, #4	@ (adr r2, 8008da0 <disk_ioctl+0x3c>)
 8008d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9e:	bf00      	nop
 8008da0:	08008de1 	.word	0x08008de1
 8008da4:	08008db5 	.word	0x08008db5
 8008da8:	08008dc5 	.word	0x08008dc5
 8008dac:	08008dd5 	.word	0x08008dd5
 8008db0:	08008de1 	.word	0x08008de1
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = psram_get_sector_count();
 8008db4:	f7ff f99a 	bl	80080ec <psram_get_sector_count>
 8008db8:	4602      	mov	r2, r0
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	601a      	str	r2, [r3, #0]
				res = 0;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	73fb      	strb	r3, [r7, #15]
				break;
 8008dc2:	e013      	b.n	8008dec <disk_ioctl+0x88>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = psram_get_sector_size();
 8008dc4:	f7ff f988 	bl	80080d8 <psram_get_sector_size>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	601a      	str	r2, [r3, #0]
				res = 0;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	73fb      	strb	r3, [r7, #15]
				break;
 8008dd2:	e00b      	b.n	8008dec <disk_ioctl+0x88>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	601a      	str	r2, [r3, #0]
				res = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	73fb      	strb	r3, [r7, #15]
				break;
 8008dde:	e005      	b.n	8008dec <disk_ioctl+0x88>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 8008de0:	2300      	movs	r3, #0
 8008de2:	73fb      	strb	r3, [r7, #15]
				break;
 8008de4:	e002      	b.n	8008dec <disk_ioctl+0x88>

			default:
				res = RES_PARERR;
 8008de6:	2304      	movs	r3, #4
 8008de8:	73fb      	strb	r3, [r7, #15]
				break;
 8008dea:	bf00      	nop
		}

		return res;
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
 8008dee:	e036      	b.n	8008e5e <disk_ioctl+0xfa>

	case DEV_MMC :

		if(!extflash_is_initialized())return RES_NOTRDY;
 8008df0:	f7fa fe0a 	bl	8003a08 <extflash_is_initialized>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d101      	bne.n	8008dfe <disk_ioctl+0x9a>
 8008dfa:	2303      	movs	r3, #3
 8008dfc:	e02f      	b.n	8008e5e <disk_ioctl+0xfa>

		switch(cmd)
 8008dfe:	79bb      	ldrb	r3, [r7, #6]
 8008e00:	2b04      	cmp	r3, #4
 8008e02:	d826      	bhi.n	8008e52 <disk_ioctl+0xee>
 8008e04:	a201      	add	r2, pc, #4	@ (adr r2, 8008e0c <disk_ioctl+0xa8>)
 8008e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0a:	bf00      	nop
 8008e0c:	08008e4d 	.word	0x08008e4d
 8008e10:	08008e21 	.word	0x08008e21
 8008e14:	08008e31 	.word	0x08008e31
 8008e18:	08008e41 	.word	0x08008e41
 8008e1c:	08008e4d 	.word	0x08008e4d
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = extflash_get_sector_count();
 8008e20:	f7fa fde6 	bl	80039f0 <extflash_get_sector_count>
 8008e24:	4602      	mov	r2, r0
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	601a      	str	r2, [r3, #0]
				res = 0;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	73fb      	strb	r3, [r7, #15]
				break;
 8008e2e:	e013      	b.n	8008e58 <disk_ioctl+0xf4>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = extflash_get_sector_size();
 8008e30:	f7fa fdd5 	bl	80039de <extflash_get_sector_size>
 8008e34:	4602      	mov	r2, r0
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	601a      	str	r2, [r3, #0]
				res = 0;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	73fb      	strb	r3, [r7, #15]
				break;
 8008e3e:	e00b      	b.n	8008e58 <disk_ioctl+0xf4>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	2201      	movs	r2, #1
 8008e44:	601a      	str	r2, [r3, #0]
				res = 0;
 8008e46:	2300      	movs	r3, #0
 8008e48:	73fb      	strb	r3, [r7, #15]
				break;
 8008e4a:	e005      	b.n	8008e58 <disk_ioctl+0xf4>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	73fb      	strb	r3, [r7, #15]
				break;
 8008e50:	e002      	b.n	8008e58 <disk_ioctl+0xf4>

			default:
				res = RES_PARERR;
 8008e52:	2304      	movs	r3, #4
 8008e54:	73fb      	strb	r3, [r7, #15]
				break;
 8008e56:	bf00      	nop
		}

		return res;
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
 8008e5a:	e000      	b.n	8008e5e <disk_ioctl+0xfa>

	}

	return RES_PARERR;
 8008e5c:	2304      	movs	r3, #4
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop

08008e68 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3301      	adds	r3, #1
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008e78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008e7c:	021b      	lsls	r3, r3, #8
 8008e7e:	b21a      	sxth	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	b21b      	sxth	r3, r3
 8008e86:	4313      	orrs	r3, r2
 8008e88:	b21b      	sxth	r3, r3
 8008e8a:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008e8c:	89fb      	ldrh	r3, [r7, #14]
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3714      	adds	r7, #20
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b085      	sub	sp, #20
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	3303      	adds	r3, #3
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	021b      	lsls	r3, r3, #8
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	3202      	adds	r2, #2
 8008eb2:	7812      	ldrb	r2, [r2, #0]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	021b      	lsls	r3, r3, #8
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	3201      	adds	r2, #1
 8008ec0:	7812      	ldrb	r2, [r2, #0]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	021b      	lsls	r3, r3, #8
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	7812      	ldrb	r2, [r2, #0]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	60fb      	str	r3, [r7, #12]
	return rv;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3714      	adds	r7, #20
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	1c5a      	adds	r2, r3, #1
 8008ef0:	607a      	str	r2, [r7, #4]
 8008ef2:	887a      	ldrh	r2, [r7, #2]
 8008ef4:	b2d2      	uxtb	r2, r2
 8008ef6:	701a      	strb	r2, [r3, #0]
 8008ef8:	887b      	ldrh	r3, [r7, #2]
 8008efa:	0a1b      	lsrs	r3, r3, #8
 8008efc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	1c5a      	adds	r2, r3, #1
 8008f02:	607a      	str	r2, [r7, #4]
 8008f04:	887a      	ldrh	r2, [r7, #2]
 8008f06:	b2d2      	uxtb	r2, r2
 8008f08:	701a      	strb	r2, [r3, #0]
}
 8008f0a:	bf00      	nop
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008f16:	b480      	push	{r7}
 8008f18:	b083      	sub	sp, #12
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
 8008f1e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	1c5a      	adds	r2, r3, #1
 8008f24:	607a      	str	r2, [r7, #4]
 8008f26:	683a      	ldr	r2, [r7, #0]
 8008f28:	b2d2      	uxtb	r2, r2
 8008f2a:	701a      	strb	r2, [r3, #0]
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	0a1b      	lsrs	r3, r3, #8
 8008f30:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	1c5a      	adds	r2, r3, #1
 8008f36:	607a      	str	r2, [r7, #4]
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	b2d2      	uxtb	r2, r2
 8008f3c:	701a      	strb	r2, [r3, #0]
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	0a1b      	lsrs	r3, r3, #8
 8008f42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	1c5a      	adds	r2, r3, #1
 8008f48:	607a      	str	r2, [r7, #4]
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	b2d2      	uxtb	r2, r2
 8008f4e:	701a      	strb	r2, [r3, #0]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	0a1b      	lsrs	r3, r3, #8
 8008f54:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	1c5a      	adds	r2, r3, #1
 8008f5a:	607a      	str	r2, [r7, #4]
 8008f5c:	683a      	ldr	r2, [r7, #0]
 8008f5e:	b2d2      	uxtb	r2, r2
 8008f60:	701a      	strb	r2, [r3, #0]
}
 8008f62:	bf00      	nop
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b083      	sub	sp, #12
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	4603      	mov	r3, r0
 8008f76:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8008f78:	79fb      	ldrb	r3, [r7, #7]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d001      	beq.n	8008f82 <dbc_1st+0x14>
 8008f7e:	2300      	movs	r3, #0
 8008f80:	e000      	b.n	8008f84 <dbc_1st+0x16>
#endif
	return 0;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	4603      	mov	r3, r0
 8008f98:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8008f9a:	79fb      	ldrb	r3, [r7, #7]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d001      	beq.n	8008fa4 <dbc_2nd+0x14>
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	e000      	b.n	8008fa6 <dbc_2nd+0x16>
#endif
	return 0;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	370c      	adds	r7, #12
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b084      	sub	sp, #16
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	791b      	ldrb	r3, [r3, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d02c      	beq.n	8009020 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	7858      	ldrb	r0, [r3, #1]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	f7ff fe91 	bl	8008cfc <disk_write>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d11d      	bne.n	800901c <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fee:	1ad2      	subs	r2, r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	69db      	ldr	r3, [r3, #28]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d213      	bcs.n	8009020 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	78db      	ldrb	r3, [r3, #3]
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d10f      	bne.n	8009020 <sync_window+0x6e>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	7858      	ldrb	r0, [r3, #1]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	69db      	ldr	r3, [r3, #28]
 8009012:	441a      	add	r2, r3
 8009014:	2301      	movs	r3, #1
 8009016:	f7ff fe71 	bl	8008cfc <disk_write>
 800901a:	e001      	b.n	8009020 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 800901c:	2301      	movs	r3, #1
 800901e:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8009020:	7bfb      	ldrb	r3, [r7, #15]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b084      	sub	sp, #16
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009034:	2300      	movs	r3, #0
 8009036:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800903c:	683a      	ldr	r2, [r7, #0]
 800903e:	429a      	cmp	r2, r3
 8009040:	d01b      	beq.n	800907a <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f7ff ffb5 	bl	8008fb2 <sync_window>
 8009048:	4603      	mov	r3, r0
 800904a:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800904c:	7bfb      	ldrb	r3, [r7, #15]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d113      	bne.n	800907a <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	7858      	ldrb	r0, [r3, #1]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800905c:	2301      	movs	r3, #1
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	f7ff fe1a 	bl	8008c98 <disk_read>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d004      	beq.n	8009074 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 800906a:	f04f 33ff 	mov.w	r3, #4294967295
 800906e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009070:	2301      	movs	r3, #1
 8009072:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	683a      	ldr	r2, [r7, #0]
 8009078:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800907a:	7bfb      	ldrb	r3, [r7, #15]
}
 800907c:	4618      	mov	r0, r3
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7ff ff90 	bl	8008fb2 <sync_window>
 8009092:	4603      	mov	r3, r0
 8009094:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009096:	7bfb      	ldrb	r3, [r7, #15]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d158      	bne.n	800914e <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	2b03      	cmp	r3, #3
 80090a2:	d148      	bne.n	8009136 <sync_fs+0xb2>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	795b      	ldrb	r3, [r3, #5]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d144      	bne.n	8009136 <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	3334      	adds	r3, #52	@ 0x34
 80090b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80090b4:	2100      	movs	r1, #0
 80090b6:	4618      	mov	r0, r3
 80090b8:	f00e fbf2 	bl	80178a0 <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	3334      	adds	r3, #52	@ 0x34
 80090c0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80090c4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7ff ff09 	bl	8008ee0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	3334      	adds	r3, #52	@ 0x34
 80090d2:	4921      	ldr	r1, [pc, #132]	@ (8009158 <sync_fs+0xd4>)
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7ff ff1e 	bl	8008f16 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	3334      	adds	r3, #52	@ 0x34
 80090de:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80090e2:	491e      	ldr	r1, [pc, #120]	@ (800915c <sync_fs+0xd8>)
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7ff ff16 	bl	8008f16 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	3334      	adds	r3, #52	@ 0x34
 80090ee:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	4619      	mov	r1, r3
 80090f8:	4610      	mov	r0, r2
 80090fa:	f7ff ff0c 	bl	8008f16 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	3334      	adds	r3, #52	@ 0x34
 8009102:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	4619      	mov	r1, r3
 800910c:	4610      	mov	r0, r2
 800910e:	f7ff ff02 	bl	8008f16 <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a1b      	ldr	r3, [r3, #32]
 8009116:	1c5a      	adds	r2, r3, #1
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	7858      	ldrb	r0, [r3, #1]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800912a:	2301      	movs	r3, #1
 800912c:	f7ff fde6 	bl	8008cfc <disk_write>
			fs->fsi_flag = 0;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	785b      	ldrb	r3, [r3, #1]
 800913a:	2200      	movs	r2, #0
 800913c:	2100      	movs	r1, #0
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff fe10 	bl	8008d64 <disk_ioctl>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <sync_fs+0xca>
 800914a:	2301      	movs	r3, #1
 800914c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800914e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009150:	4618      	mov	r0, r3
 8009152:	3710      	adds	r7, #16
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	41615252 	.word	0x41615252
 800915c:	61417272 	.word	0x61417272

08009160 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	3b02      	subs	r3, #2
 800916e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	699b      	ldr	r3, [r3, #24]
 8009174:	3b02      	subs	r3, #2
 8009176:	683a      	ldr	r2, [r7, #0]
 8009178:	429a      	cmp	r2, r3
 800917a:	d301      	bcc.n	8009180 <clst2sect+0x20>
 800917c:	2300      	movs	r3, #0
 800917e:	e008      	b.n	8009192 <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	895b      	ldrh	r3, [r3, #10]
 8009188:	4619      	mov	r1, r3
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	fb01 f303 	mul.w	r3, r1, r3
 8009190:	4413      	add	r3, r2
}
 8009192:	4618      	mov	r0, r3
 8009194:	370c      	adds	r7, #12
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr

0800919e <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b086      	sub	sp, #24
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d904      	bls.n	80091be <get_fat+0x20>
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	699b      	ldr	r3, [r3, #24]
 80091b8:	683a      	ldr	r2, [r7, #0]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d302      	bcc.n	80091c4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80091be:	2301      	movs	r3, #1
 80091c0:	617b      	str	r3, [r7, #20]
 80091c2:	e0ba      	b.n	800933a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80091c4:	f04f 33ff 	mov.w	r3, #4294967295
 80091c8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	2b03      	cmp	r3, #3
 80091d0:	f000 8082 	beq.w	80092d8 <get_fat+0x13a>
 80091d4:	2b03      	cmp	r3, #3
 80091d6:	f300 80a6 	bgt.w	8009326 <get_fat+0x188>
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d002      	beq.n	80091e4 <get_fat+0x46>
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d055      	beq.n	800928e <get_fat+0xf0>
 80091e2:	e0a0      	b.n	8009326 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	60fb      	str	r3, [r7, #12]
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	085b      	lsrs	r3, r3, #1
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	4413      	add	r3, r2
 80091f0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	899b      	ldrh	r3, [r3, #12]
 80091fa:	4619      	mov	r1, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8009202:	4413      	add	r3, r2
 8009204:	4619      	mov	r1, r3
 8009206:	6938      	ldr	r0, [r7, #16]
 8009208:	f7ff ff0f 	bl	800902a <move_window>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	f040 808c 	bne.w	800932c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	1c5a      	adds	r2, r3, #1
 8009218:	60fa      	str	r2, [r7, #12]
 800921a:	693a      	ldr	r2, [r7, #16]
 800921c:	8992      	ldrh	r2, [r2, #12]
 800921e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009222:	fb01 f202 	mul.w	r2, r1, r2
 8009226:	1a9b      	subs	r3, r3, r2
 8009228:	693a      	ldr	r2, [r7, #16]
 800922a:	4413      	add	r3, r2
 800922c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009230:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	899b      	ldrh	r3, [r3, #12]
 800923a:	4619      	mov	r1, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009242:	4413      	add	r3, r2
 8009244:	4619      	mov	r1, r3
 8009246:	6938      	ldr	r0, [r7, #16]
 8009248:	f7ff feef 	bl	800902a <move_window>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d16e      	bne.n	8009330 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	899b      	ldrh	r3, [r3, #12]
 8009256:	461a      	mov	r2, r3
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	fbb3 f1f2 	udiv	r1, r3, r2
 800925e:	fb01 f202 	mul.w	r2, r1, r2
 8009262:	1a9b      	subs	r3, r3, r2
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	4413      	add	r3, r2
 8009268:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800926c:	021b      	lsls	r3, r3, #8
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	4313      	orrs	r3, r2
 8009272:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	f003 0301 	and.w	r3, r3, #1
 800927a:	2b00      	cmp	r3, #0
 800927c:	d002      	beq.n	8009284 <get_fat+0xe6>
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	091b      	lsrs	r3, r3, #4
 8009282:	e002      	b.n	800928a <get_fat+0xec>
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800928a:	617b      	str	r3, [r7, #20]
			break;
 800928c:	e055      	b.n	800933a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	899b      	ldrh	r3, [r3, #12]
 8009296:	085b      	lsrs	r3, r3, #1
 8009298:	b29b      	uxth	r3, r3
 800929a:	4619      	mov	r1, r3
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	fbb3 f3f1 	udiv	r3, r3, r1
 80092a2:	4413      	add	r3, r2
 80092a4:	4619      	mov	r1, r3
 80092a6:	6938      	ldr	r0, [r7, #16]
 80092a8:	f7ff febf 	bl	800902a <move_window>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d140      	bne.n	8009334 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	005b      	lsls	r3, r3, #1
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	8992      	ldrh	r2, [r2, #12]
 80092c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80092c4:	fb00 f202 	mul.w	r2, r0, r2
 80092c8:	1a9b      	subs	r3, r3, r2
 80092ca:	440b      	add	r3, r1
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7ff fdcb 	bl	8008e68 <ld_word>
 80092d2:	4603      	mov	r3, r0
 80092d4:	617b      	str	r3, [r7, #20]
			break;
 80092d6:	e030      	b.n	800933a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	899b      	ldrh	r3, [r3, #12]
 80092e0:	089b      	lsrs	r3, r3, #2
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	4619      	mov	r1, r3
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80092ec:	4413      	add	r3, r2
 80092ee:	4619      	mov	r1, r3
 80092f0:	6938      	ldr	r0, [r7, #16]
 80092f2:	f7ff fe9a 	bl	800902a <move_window>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d11d      	bne.n	8009338 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	693a      	ldr	r2, [r7, #16]
 8009308:	8992      	ldrh	r2, [r2, #12]
 800930a:	fbb3 f0f2 	udiv	r0, r3, r2
 800930e:	fb00 f202 	mul.w	r2, r0, r2
 8009312:	1a9b      	subs	r3, r3, r2
 8009314:	440b      	add	r3, r1
 8009316:	4618      	mov	r0, r3
 8009318:	f7ff fdbf 	bl	8008e9a <ld_dword>
 800931c:	4603      	mov	r3, r0
 800931e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009322:	617b      	str	r3, [r7, #20]
			break;
 8009324:	e009      	b.n	800933a <get_fat+0x19c>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 8009326:	2301      	movs	r3, #1
 8009328:	617b      	str	r3, [r7, #20]
 800932a:	e006      	b.n	800933a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800932c:	bf00      	nop
 800932e:	e004      	b.n	800933a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009330:	bf00      	nop
 8009332:	e002      	b.n	800933a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009334:	bf00      	nop
 8009336:	e000      	b.n	800933a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009338:	bf00      	nop
		}
	}

	return val;
 800933a:	697b      	ldr	r3, [r7, #20]
}
 800933c:	4618      	mov	r0, r3
 800933e:	3718      	adds	r7, #24
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009344:	b590      	push	{r4, r7, lr}
 8009346:	b089      	sub	sp, #36	@ 0x24
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009350:	2302      	movs	r3, #2
 8009352:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	2b01      	cmp	r3, #1
 8009358:	f240 8109 	bls.w	800956e <put_fat+0x22a>
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	429a      	cmp	r2, r3
 8009364:	f080 8103 	bcs.w	800956e <put_fat+0x22a>
		switch (fs->fs_type) {
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	2b03      	cmp	r3, #3
 800936e:	f000 80b6 	beq.w	80094de <put_fat+0x19a>
 8009372:	2b03      	cmp	r3, #3
 8009374:	f300 80fb 	bgt.w	800956e <put_fat+0x22a>
 8009378:	2b01      	cmp	r3, #1
 800937a:	d003      	beq.n	8009384 <put_fat+0x40>
 800937c:	2b02      	cmp	r3, #2
 800937e:	f000 8083 	beq.w	8009488 <put_fat+0x144>
 8009382:	e0f4      	b.n	800956e <put_fat+0x22a>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	61bb      	str	r3, [r7, #24]
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	085b      	lsrs	r3, r3, #1
 800938c:	69ba      	ldr	r2, [r7, #24]
 800938e:	4413      	add	r3, r2
 8009390:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	899b      	ldrh	r3, [r3, #12]
 800939a:	4619      	mov	r1, r3
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	fbb3 f3f1 	udiv	r3, r3, r1
 80093a2:	4413      	add	r3, r2
 80093a4:	4619      	mov	r1, r3
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f7ff fe3f 	bl	800902a <move_window>
 80093ac:	4603      	mov	r3, r0
 80093ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80093b0:	7ffb      	ldrb	r3, [r7, #31]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f040 80d4 	bne.w	8009560 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	1c5a      	adds	r2, r3, #1
 80093c2:	61ba      	str	r2, [r7, #24]
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	8992      	ldrh	r2, [r2, #12]
 80093c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80093cc:	fb00 f202 	mul.w	r2, r0, r2
 80093d0:	1a9b      	subs	r3, r3, r2
 80093d2:	440b      	add	r3, r1
 80093d4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	f003 0301 	and.w	r3, r3, #1
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00d      	beq.n	80093fc <put_fat+0xb8>
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	b25b      	sxtb	r3, r3
 80093e6:	f003 030f 	and.w	r3, r3, #15
 80093ea:	b25a      	sxtb	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	b25b      	sxtb	r3, r3
 80093f0:	011b      	lsls	r3, r3, #4
 80093f2:	b25b      	sxtb	r3, r3
 80093f4:	4313      	orrs	r3, r2
 80093f6:	b25b      	sxtb	r3, r3
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	e001      	b.n	8009400 <put_fat+0xbc>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	697a      	ldr	r2, [r7, #20]
 8009402:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2201      	movs	r2, #1
 8009408:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	899b      	ldrh	r3, [r3, #12]
 8009412:	4619      	mov	r1, r3
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	fbb3 f3f1 	udiv	r3, r3, r1
 800941a:	4413      	add	r3, r2
 800941c:	4619      	mov	r1, r3
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f7ff fe03 	bl	800902a <move_window>
 8009424:	4603      	mov	r3, r0
 8009426:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009428:	7ffb      	ldrb	r3, [r7, #31]
 800942a:	2b00      	cmp	r3, #0
 800942c:	f040 809a 	bne.w	8009564 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	899b      	ldrh	r3, [r3, #12]
 800943a:	461a      	mov	r2, r3
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009442:	fb00 f202 	mul.w	r2, r0, r2
 8009446:	1a9b      	subs	r3, r3, r2
 8009448:	440b      	add	r3, r1
 800944a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	f003 0301 	and.w	r3, r3, #1
 8009452:	2b00      	cmp	r3, #0
 8009454:	d003      	beq.n	800945e <put_fat+0x11a>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	091b      	lsrs	r3, r3, #4
 800945a:	b2db      	uxtb	r3, r3
 800945c:	e00e      	b.n	800947c <put_fat+0x138>
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	b25b      	sxtb	r3, r3
 8009464:	f023 030f 	bic.w	r3, r3, #15
 8009468:	b25a      	sxtb	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	0a1b      	lsrs	r3, r3, #8
 800946e:	b25b      	sxtb	r3, r3
 8009470:	f003 030f 	and.w	r3, r3, #15
 8009474:	b25b      	sxtb	r3, r3
 8009476:	4313      	orrs	r3, r2
 8009478:	b25b      	sxtb	r3, r3
 800947a:	b2db      	uxtb	r3, r3
 800947c:	697a      	ldr	r2, [r7, #20]
 800947e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2201      	movs	r2, #1
 8009484:	711a      	strb	r2, [r3, #4]
			break;
 8009486:	e072      	b.n	800956e <put_fat+0x22a>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	899b      	ldrh	r3, [r3, #12]
 8009490:	085b      	lsrs	r3, r3, #1
 8009492:	b29b      	uxth	r3, r3
 8009494:	4619      	mov	r1, r3
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	fbb3 f3f1 	udiv	r3, r3, r1
 800949c:	4413      	add	r3, r2
 800949e:	4619      	mov	r1, r3
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f7ff fdc2 	bl	800902a <move_window>
 80094a6:	4603      	mov	r3, r0
 80094a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80094aa:	7ffb      	ldrb	r3, [r7, #31]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d15b      	bne.n	8009568 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	005b      	lsls	r3, r3, #1
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	8992      	ldrh	r2, [r2, #12]
 80094be:	fbb3 f0f2 	udiv	r0, r3, r2
 80094c2:	fb00 f202 	mul.w	r2, r0, r2
 80094c6:	1a9b      	subs	r3, r3, r2
 80094c8:	440b      	add	r3, r1
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	b292      	uxth	r2, r2
 80094ce:	4611      	mov	r1, r2
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7ff fd05 	bl	8008ee0 <st_word>
			fs->wflag = 1;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2201      	movs	r2, #1
 80094da:	711a      	strb	r2, [r3, #4]
			break;
 80094dc:	e047      	b.n	800956e <put_fat+0x22a>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	899b      	ldrh	r3, [r3, #12]
 80094e6:	089b      	lsrs	r3, r3, #2
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	4619      	mov	r1, r3
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80094f2:	4413      	add	r3, r2
 80094f4:	4619      	mov	r1, r3
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f7ff fd97 	bl	800902a <move_window>
 80094fc:	4603      	mov	r3, r0
 80094fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009500:	7ffb      	ldrb	r3, [r7, #31]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d132      	bne.n	800956c <put_fat+0x228>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	8992      	ldrh	r2, [r2, #12]
 800951a:	fbb3 f0f2 	udiv	r0, r3, r2
 800951e:	fb00 f202 	mul.w	r2, r0, r2
 8009522:	1a9b      	subs	r3, r3, r2
 8009524:	440b      	add	r3, r1
 8009526:	4618      	mov	r0, r3
 8009528:	f7ff fcb7 	bl	8008e9a <ld_dword>
 800952c:	4603      	mov	r3, r0
 800952e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009532:	4323      	orrs	r3, r4
 8009534:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	8992      	ldrh	r2, [r2, #12]
 8009544:	fbb3 f0f2 	udiv	r0, r3, r2
 8009548:	fb00 f202 	mul.w	r2, r0, r2
 800954c:	1a9b      	subs	r3, r3, r2
 800954e:	440b      	add	r3, r1
 8009550:	6879      	ldr	r1, [r7, #4]
 8009552:	4618      	mov	r0, r3
 8009554:	f7ff fcdf 	bl	8008f16 <st_dword>
			fs->wflag = 1;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2201      	movs	r2, #1
 800955c:	711a      	strb	r2, [r3, #4]
			break;
 800955e:	e006      	b.n	800956e <put_fat+0x22a>
			if (res != FR_OK) break;
 8009560:	bf00      	nop
 8009562:	e004      	b.n	800956e <put_fat+0x22a>
			if (res != FR_OK) break;
 8009564:	bf00      	nop
 8009566:	e002      	b.n	800956e <put_fat+0x22a>
			if (res != FR_OK) break;
 8009568:	bf00      	nop
 800956a:	e000      	b.n	800956e <put_fat+0x22a>
			if (res != FR_OK) break;
 800956c:	bf00      	nop
		}
	}
	return res;
 800956e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3724      	adds	r7, #36	@ 0x24
 8009574:	46bd      	mov	sp, r7
 8009576:	bd90      	pop	{r4, r7, pc}

08009578 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b088      	sub	sp, #32
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d904      	bls.n	800959e <remove_chain+0x26>
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	429a      	cmp	r2, r3
 800959c:	d301      	bcc.n	80095a2 <remove_chain+0x2a>
 800959e:	2302      	movs	r3, #2
 80095a0:	e04b      	b.n	800963a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00c      	beq.n	80095c2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80095a8:	f04f 32ff 	mov.w	r2, #4294967295
 80095ac:	6879      	ldr	r1, [r7, #4]
 80095ae:	69b8      	ldr	r0, [r7, #24]
 80095b0:	f7ff fec8 	bl	8009344 <put_fat>
 80095b4:	4603      	mov	r3, r0
 80095b6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80095b8:	7ffb      	ldrb	r3, [r7, #31]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d001      	beq.n	80095c2 <remove_chain+0x4a>
 80095be:	7ffb      	ldrb	r3, [r7, #31]
 80095c0:	e03b      	b.n	800963a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80095c2:	68b9      	ldr	r1, [r7, #8]
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f7ff fdea 	bl	800919e <get_fat>
 80095ca:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d031      	beq.n	8009636 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d101      	bne.n	80095dc <remove_chain+0x64>
 80095d8:	2302      	movs	r3, #2
 80095da:	e02e      	b.n	800963a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e2:	d101      	bne.n	80095e8 <remove_chain+0x70>
 80095e4:	2301      	movs	r3, #1
 80095e6:	e028      	b.n	800963a <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80095e8:	2200      	movs	r2, #0
 80095ea:	68b9      	ldr	r1, [r7, #8]
 80095ec:	69b8      	ldr	r0, [r7, #24]
 80095ee:	f7ff fea9 	bl	8009344 <put_fat>
 80095f2:	4603      	mov	r3, r0
 80095f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80095f6:	7ffb      	ldrb	r3, [r7, #31]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <remove_chain+0x88>
 80095fc:	7ffb      	ldrb	r3, [r7, #31]
 80095fe:	e01c      	b.n	800963a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	695a      	ldr	r2, [r3, #20]
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	699b      	ldr	r3, [r3, #24]
 8009608:	3b02      	subs	r3, #2
 800960a:	429a      	cmp	r2, r3
 800960c:	d20b      	bcs.n	8009626 <remove_chain+0xae>
			fs->free_clst++;
 800960e:	69bb      	ldr	r3, [r7, #24]
 8009610:	695b      	ldr	r3, [r3, #20]
 8009612:	1c5a      	adds	r2, r3, #1
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	795b      	ldrb	r3, [r3, #5]
 800961c:	f043 0301 	orr.w	r3, r3, #1
 8009620:	b2da      	uxtb	r2, r3
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	715a      	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	699b      	ldr	r3, [r3, #24]
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	429a      	cmp	r2, r3
 8009632:	d3c6      	bcc.n	80095c2 <remove_chain+0x4a>
 8009634:	e000      	b.n	8009638 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009636:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3720      	adds	r7, #32
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b088      	sub	sp, #32
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
 800964a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10d      	bne.n	8009674 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	691b      	ldr	r3, [r3, #16]
 800965c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d004      	beq.n	800966e <create_chain+0x2c>
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	69ba      	ldr	r2, [r7, #24]
 800966a:	429a      	cmp	r2, r3
 800966c:	d31b      	bcc.n	80096a6 <create_chain+0x64>
 800966e:	2301      	movs	r3, #1
 8009670:	61bb      	str	r3, [r7, #24]
 8009672:	e018      	b.n	80096a6 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009674:	6839      	ldr	r1, [r7, #0]
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f7ff fd91 	bl	800919e <get_fat>
 800967c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d801      	bhi.n	8009688 <create_chain+0x46>
 8009684:	2301      	movs	r3, #1
 8009686:	e0a9      	b.n	80097dc <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968e:	d101      	bne.n	8009694 <create_chain+0x52>
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	e0a3      	b.n	80097dc <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	699b      	ldr	r3, [r3, #24]
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	429a      	cmp	r2, r3
 800969c:	d201      	bcs.n	80096a2 <create_chain+0x60>
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	e09c      	b.n	80097dc <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	695b      	ldr	r3, [r3, #20]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d101      	bne.n	80096b2 <create_chain+0x70>
 80096ae:	2300      	movs	r3, #0
 80096b0:	e094      	b.n	80097dc <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 80096b2:	2300      	movs	r3, #0
 80096b4:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 80096b6:	69ba      	ldr	r2, [r7, #24]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d129      	bne.n	8009712 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	3301      	adds	r3, #1
 80096c2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	699b      	ldr	r3, [r3, #24]
 80096c8:	69fa      	ldr	r2, [r7, #28]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d301      	bcc.n	80096d2 <create_chain+0x90>
 80096ce:	2302      	movs	r3, #2
 80096d0:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 80096d2:	69f9      	ldr	r1, [r7, #28]
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f7ff fd62 	bl	800919e <get_fat>
 80096da:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d003      	beq.n	80096ea <create_chain+0xa8>
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e8:	d101      	bne.n	80096ee <create_chain+0xac>
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	e076      	b.n	80097dc <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00e      	beq.n	8009712 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d906      	bls.n	800970e <create_chain+0xcc>
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	429a      	cmp	r2, r3
 8009708:	d201      	bcs.n	800970e <create_chain+0xcc>
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 800970e:	2300      	movs	r3, #0
 8009710:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d129      	bne.n	800976c <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	3301      	adds	r3, #1
 8009720:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	699b      	ldr	r3, [r3, #24]
 8009726:	69fa      	ldr	r2, [r7, #28]
 8009728:	429a      	cmp	r2, r3
 800972a:	d307      	bcc.n	800973c <create_chain+0xfa>
					ncl = 2;
 800972c:	2302      	movs	r3, #2
 800972e:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8009730:	69fa      	ldr	r2, [r7, #28]
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	429a      	cmp	r2, r3
 8009736:	d901      	bls.n	800973c <create_chain+0xfa>
 8009738:	2300      	movs	r3, #0
 800973a:	e04f      	b.n	80097dc <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 800973c:	69f9      	ldr	r1, [r7, #28]
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f7ff fd2d 	bl	800919e <get_fat>
 8009744:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00e      	beq.n	800976a <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2b01      	cmp	r3, #1
 8009750:	d003      	beq.n	800975a <create_chain+0x118>
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009758:	d101      	bne.n	800975e <create_chain+0x11c>
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	e03e      	b.n	80097dc <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800975e:	69fa      	ldr	r2, [r7, #28]
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	429a      	cmp	r2, r3
 8009764:	d1da      	bne.n	800971c <create_chain+0xda>
 8009766:	2300      	movs	r3, #0
 8009768:	e038      	b.n	80097dc <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 800976a:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 800976c:	f04f 32ff 	mov.w	r2, #4294967295
 8009770:	69f9      	ldr	r1, [r7, #28]
 8009772:	6938      	ldr	r0, [r7, #16]
 8009774:	f7ff fde6 	bl	8009344 <put_fat>
 8009778:	4603      	mov	r3, r0
 800977a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800977c:	7dfb      	ldrb	r3, [r7, #23]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d109      	bne.n	8009796 <create_chain+0x154>
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d006      	beq.n	8009796 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8009788:	69fa      	ldr	r2, [r7, #28]
 800978a:	6839      	ldr	r1, [r7, #0]
 800978c:	6938      	ldr	r0, [r7, #16]
 800978e:	f7ff fdd9 	bl	8009344 <put_fat>
 8009792:	4603      	mov	r3, r0
 8009794:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009796:	7dfb      	ldrb	r3, [r7, #23]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d116      	bne.n	80097ca <create_chain+0x188>
		fs->last_clst = ncl;
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	69fa      	ldr	r2, [r7, #28]
 80097a0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	695a      	ldr	r2, [r3, #20]
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	3b02      	subs	r3, #2
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d804      	bhi.n	80097ba <create_chain+0x178>
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	695b      	ldr	r3, [r3, #20]
 80097b4:	1e5a      	subs	r2, r3, #1
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	795b      	ldrb	r3, [r3, #5]
 80097be:	f043 0301 	orr.w	r3, r3, #1
 80097c2:	b2da      	uxtb	r2, r3
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	715a      	strb	r2, [r3, #5]
 80097c8:	e007      	b.n	80097da <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80097ca:	7dfb      	ldrb	r3, [r7, #23]
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d102      	bne.n	80097d6 <create_chain+0x194>
 80097d0:	f04f 33ff 	mov.w	r3, #4294967295
 80097d4:	e000      	b.n	80097d8 <create_chain+0x196>
 80097d6:	2301      	movs	r3, #1
 80097d8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80097da:	69fb      	ldr	r3, [r7, #28]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3720      	adds	r7, #32
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f7ff fbdf 	bl	8008fb2 <sync_window>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d001      	beq.n	80097fe <dir_clear+0x1a>
 80097fa:	2301      	movs	r3, #1
 80097fc:	e036      	b.n	800986c <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80097fe:	6839      	ldr	r1, [r7, #0]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f7ff fcad 	bl	8009160 <clst2sect>
 8009806:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	693a      	ldr	r2, [r7, #16]
 800980c:	631a      	str	r2, [r3, #48]	@ 0x30
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	3334      	adds	r3, #52	@ 0x34
 8009812:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009816:	2100      	movs	r1, #0
 8009818:	4618      	mov	r0, r3
 800981a:	f00e f841 	bl	80178a0 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	3334      	adds	r3, #52	@ 0x34
 8009822:	60fb      	str	r3, [r7, #12]
 8009824:	2301      	movs	r3, #1
 8009826:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8009828:	2300      	movs	r3, #0
 800982a:	617b      	str	r3, [r7, #20]
 800982c:	e003      	b.n	8009836 <dir_clear+0x52>
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	4413      	add	r3, r2
 8009834:	617b      	str	r3, [r7, #20]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	895b      	ldrh	r3, [r3, #10]
 800983a:	461a      	mov	r2, r3
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	4293      	cmp	r3, r2
 8009840:	d20b      	bcs.n	800985a <dir_clear+0x76>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	7858      	ldrb	r0, [r3, #1]
 8009846:	693a      	ldr	r2, [r7, #16]
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	441a      	add	r2, r3
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	68f9      	ldr	r1, [r7, #12]
 8009850:	f7ff fa54 	bl	8008cfc <disk_write>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d0e9      	beq.n	800982e <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	895b      	ldrh	r3, [r3, #10]
 800985e:	461a      	mov	r2, r3
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	4293      	cmp	r3, r2
 8009864:	bf14      	ite	ne
 8009866:	2301      	movne	r3, #1
 8009868:	2300      	moveq	r3, #0
 800986a:	b2db      	uxtb	r3, r3
}
 800986c:	4618      	mov	r0, r3
 800986e:	3718      	adds	r7, #24
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b086      	sub	sp, #24
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800988a:	d204      	bcs.n	8009896 <dir_sdi+0x22>
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	f003 031f 	and.w	r3, r3, #31
 8009892:	2b00      	cmp	r3, #0
 8009894:	d001      	beq.n	800989a <dir_sdi+0x26>
		return FR_INT_ERR;
 8009896:	2302      	movs	r3, #2
 8009898:	e071      	b.n	800997e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	683a      	ldr	r2, [r7, #0]
 800989e:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d106      	bne.n	80098ba <dir_sdi+0x46>
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	d902      	bls.n	80098ba <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b8:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d10c      	bne.n	80098da <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	095b      	lsrs	r3, r3, #5
 80098c4:	693a      	ldr	r2, [r7, #16]
 80098c6:	8912      	ldrh	r2, [r2, #8]
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d301      	bcc.n	80098d0 <dir_sdi+0x5c>
 80098cc:	2302      	movs	r3, #2
 80098ce:	e056      	b.n	800997e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	619a      	str	r2, [r3, #24]
 80098d8:	e02d      	b.n	8009936 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	895b      	ldrh	r3, [r3, #10]
 80098de:	461a      	mov	r2, r3
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	899b      	ldrh	r3, [r3, #12]
 80098e4:	fb02 f303 	mul.w	r3, r2, r3
 80098e8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80098ea:	e019      	b.n	8009920 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6979      	ldr	r1, [r7, #20]
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7ff fc54 	bl	800919e <get_fat>
 80098f6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098fe:	d101      	bne.n	8009904 <dir_sdi+0x90>
 8009900:	2301      	movs	r3, #1
 8009902:	e03c      	b.n	800997e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d904      	bls.n	8009914 <dir_sdi+0xa0>
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	697a      	ldr	r2, [r7, #20]
 8009910:	429a      	cmp	r2, r3
 8009912:	d301      	bcc.n	8009918 <dir_sdi+0xa4>
 8009914:	2302      	movs	r3, #2
 8009916:	e032      	b.n	800997e <dir_sdi+0x10a>
			ofs -= csz;
 8009918:	683a      	ldr	r2, [r7, #0]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009920:	683a      	ldr	r2, [r7, #0]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	429a      	cmp	r2, r3
 8009926:	d2e1      	bcs.n	80098ec <dir_sdi+0x78>
		}
		dp->sect = clst2sect(fs, clst);
 8009928:	6979      	ldr	r1, [r7, #20]
 800992a:	6938      	ldr	r0, [r7, #16]
 800992c:	f7ff fc18 	bl	8009160 <clst2sect>
 8009930:	4602      	mov	r2, r0
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	697a      	ldr	r2, [r7, #20]
 800993a:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d101      	bne.n	8009948 <dir_sdi+0xd4>
 8009944:	2302      	movs	r3, #2
 8009946:	e01a      	b.n	800997e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	699a      	ldr	r2, [r3, #24]
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	899b      	ldrh	r3, [r3, #12]
 8009950:	4619      	mov	r1, r3
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	fbb3 f3f1 	udiv	r3, r3, r1
 8009958:	441a      	add	r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	899b      	ldrh	r3, [r3, #12]
 8009968:	461a      	mov	r2, r3
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009970:	fb00 f202 	mul.w	r2, r0, r2
 8009974:	1a9b      	subs	r3, r3, r2
 8009976:	18ca      	adds	r2, r1, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3718      	adds	r7, #24
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b086      	sub	sp, #24
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
 800998e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	691b      	ldr	r3, [r3, #16]
 800999a:	3320      	adds	r3, #32
 800999c:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80099a4:	d302      	bcc.n	80099ac <dir_next+0x26>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d101      	bne.n	80099b8 <dir_next+0x32>
 80099b4:	2304      	movs	r3, #4
 80099b6:	e088      	b.n	8009aca <dir_next+0x144>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	899b      	ldrh	r3, [r3, #12]
 80099bc:	461a      	mov	r2, r3
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80099c4:	fb01 f202 	mul.w	r2, r1, r2
 80099c8:	1a9b      	subs	r3, r3, r2
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d16a      	bne.n	8009aa4 <dir_next+0x11e>
		dp->sect++;				/* Next sector */
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	1c5a      	adds	r2, r3, #1
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	695b      	ldr	r3, [r3, #20]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10a      	bne.n	80099f6 <dir_next+0x70>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	095b      	lsrs	r3, r3, #5
 80099e4:	693a      	ldr	r2, [r7, #16]
 80099e6:	8912      	ldrh	r2, [r2, #8]
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d35b      	bcc.n	8009aa4 <dir_next+0x11e>
				dp->sect = 0; return FR_NO_FILE;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	619a      	str	r2, [r3, #24]
 80099f2:	2304      	movs	r3, #4
 80099f4:	e069      	b.n	8009aca <dir_next+0x144>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	899b      	ldrh	r3, [r3, #12]
 80099fa:	461a      	mov	r2, r3
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a02:	693a      	ldr	r2, [r7, #16]
 8009a04:	8952      	ldrh	r2, [r2, #10]
 8009a06:	3a01      	subs	r2, #1
 8009a08:	4013      	ands	r3, r2
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d14a      	bne.n	8009aa4 <dir_next+0x11e>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	695b      	ldr	r3, [r3, #20]
 8009a14:	4619      	mov	r1, r3
 8009a16:	4610      	mov	r0, r2
 8009a18:	f7ff fbc1 	bl	800919e <get_fat>
 8009a1c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d801      	bhi.n	8009a28 <dir_next+0xa2>
 8009a24:	2302      	movs	r3, #2
 8009a26:	e050      	b.n	8009aca <dir_next+0x144>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a2e:	d101      	bne.n	8009a34 <dir_next+0xae>
 8009a30:	2301      	movs	r3, #1
 8009a32:	e04a      	b.n	8009aca <dir_next+0x144>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	699b      	ldr	r3, [r3, #24]
 8009a38:	697a      	ldr	r2, [r7, #20]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d328      	bcc.n	8009a90 <dir_next+0x10a>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d104      	bne.n	8009a4e <dir_next+0xc8>
						dp->sect = 0; return FR_NO_FILE;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	619a      	str	r2, [r3, #24]
 8009a4a:	2304      	movs	r3, #4
 8009a4c:	e03d      	b.n	8009aca <dir_next+0x144>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	695b      	ldr	r3, [r3, #20]
 8009a54:	4619      	mov	r1, r3
 8009a56:	4610      	mov	r0, r2
 8009a58:	f7ff fdf3 	bl	8009642 <create_chain>
 8009a5c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d101      	bne.n	8009a68 <dir_next+0xe2>
 8009a64:	2307      	movs	r3, #7
 8009a66:	e030      	b.n	8009aca <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d101      	bne.n	8009a72 <dir_next+0xec>
 8009a6e:	2302      	movs	r3, #2
 8009a70:	e02b      	b.n	8009aca <dir_next+0x144>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a78:	d101      	bne.n	8009a7e <dir_next+0xf8>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e025      	b.n	8009aca <dir_next+0x144>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8009a7e:	6979      	ldr	r1, [r7, #20]
 8009a80:	6938      	ldr	r0, [r7, #16]
 8009a82:	f7ff feaf 	bl	80097e4 <dir_clear>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d001      	beq.n	8009a90 <dir_next+0x10a>
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e01c      	b.n	8009aca <dir_next+0x144>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	697a      	ldr	r2, [r7, #20]
 8009a94:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8009a96:	6979      	ldr	r1, [r7, #20]
 8009a98:	6938      	ldr	r0, [r7, #16]
 8009a9a:	f7ff fb61 	bl	8009160 <clst2sect>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	68fa      	ldr	r2, [r7, #12]
 8009aa8:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	899b      	ldrh	r3, [r3, #12]
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	fbb3 f0f2 	udiv	r0, r3, r2
 8009abc:	fb00 f202 	mul.w	r2, r0, r2
 8009ac0:	1a9b      	subs	r3, r3, r2
 8009ac2:	18ca      	adds	r2, r1, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3718      	adds	r7, #24
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b086      	sub	sp, #24
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f7ff fec5 	bl	8009874 <dir_sdi>
 8009aea:	4603      	mov	r3, r0
 8009aec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009aee:	7dfb      	ldrb	r3, [r7, #23]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d12b      	bne.n	8009b4c <dir_alloc+0x7a>
		n = 0;
 8009af4:	2300      	movs	r3, #0
 8009af6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	4619      	mov	r1, r3
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	f7ff fa93 	bl	800902a <move_window>
 8009b04:	4603      	mov	r3, r0
 8009b06:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009b08:	7dfb      	ldrb	r3, [r7, #23]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d11d      	bne.n	8009b4a <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	69db      	ldr	r3, [r3, #28]
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	2be5      	cmp	r3, #229	@ 0xe5
 8009b16:	d004      	beq.n	8009b22 <dir_alloc+0x50>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	69db      	ldr	r3, [r3, #28]
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d107      	bne.n	8009b32 <dir_alloc+0x60>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	3301      	adds	r3, #1
 8009b26:	613b      	str	r3, [r7, #16]
 8009b28:	693a      	ldr	r2, [r7, #16]
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d102      	bne.n	8009b36 <dir_alloc+0x64>
 8009b30:	e00c      	b.n	8009b4c <dir_alloc+0x7a>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 8009b32:	2300      	movs	r3, #0
 8009b34:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8009b36:	2101      	movs	r1, #1
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7ff ff24 	bl	8009986 <dir_next>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8009b42:	7dfb      	ldrb	r3, [r7, #23]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d0d7      	beq.n	8009af8 <dir_alloc+0x26>
 8009b48:	e000      	b.n	8009b4c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009b4a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009b4c:	7dfb      	ldrb	r3, [r7, #23]
 8009b4e:	2b04      	cmp	r3, #4
 8009b50:	d101      	bne.n	8009b56 <dir_alloc+0x84>
 8009b52:	2307      	movs	r3, #7
 8009b54:	75fb      	strb	r3, [r7, #23]
	return res;
 8009b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3718      	adds	r7, #24
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	331a      	adds	r3, #26
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7ff f97a 	bl	8008e68 <ld_word>
 8009b74:	4603      	mov	r3, r0
 8009b76:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	2b03      	cmp	r3, #3
 8009b7e:	d109      	bne.n	8009b94 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	3314      	adds	r3, #20
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7ff f96f 	bl	8008e68 <ld_word>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	041b      	lsls	r3, r3, #16
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009b94:	68fb      	ldr	r3, [r7, #12]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3710      	adds	r7, #16
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b084      	sub	sp, #16
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	60f8      	str	r0, [r7, #12]
 8009ba6:	60b9      	str	r1, [r7, #8]
 8009ba8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	331a      	adds	r3, #26
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	b292      	uxth	r2, r2
 8009bb2:	4611      	mov	r1, r2
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f7ff f993 	bl	8008ee0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	2b03      	cmp	r3, #3
 8009bc0:	d109      	bne.n	8009bd6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	f103 0214 	add.w	r2, r3, #20
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	0c1b      	lsrs	r3, r3, #16
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	4619      	mov	r1, r3
 8009bd0:	4610      	mov	r0, r2
 8009bd2:	f7ff f985 	bl	8008ee0 <st_word>
	}
}
 8009bd6:	bf00      	nop
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b086      	sub	sp, #24
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8009be8:	2304      	movs	r3, #4
 8009bea:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	613b      	str	r3, [r7, #16]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8009bf2:	e03c      	b.n	8009c6e <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	699b      	ldr	r3, [r3, #24]
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	6938      	ldr	r0, [r7, #16]
 8009bfc:	f7ff fa15 	bl	800902a <move_window>
 8009c00:	4603      	mov	r3, r0
 8009c02:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009c04:	7dfb      	ldrb	r3, [r7, #23]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d136      	bne.n	8009c78 <dir_read+0x9a>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	69db      	ldr	r3, [r3, #28]
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	73fb      	strb	r3, [r7, #15]
		if (b == 0) {
 8009c12:	7bfb      	ldrb	r3, [r7, #15]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d102      	bne.n	8009c1e <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009c18:	2304      	movs	r3, #4
 8009c1a:	75fb      	strb	r3, [r7, #23]
 8009c1c:	e031      	b.n	8009c82 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	69db      	ldr	r3, [r3, #28]
 8009c22:	330b      	adds	r3, #11
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c2a:	73bb      	strb	r3, [r7, #14]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	7bba      	ldrb	r2, [r7, #14]
 8009c30:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
 8009c34:	2be5      	cmp	r3, #229	@ 0xe5
 8009c36:	d011      	beq.n	8009c5c <dir_read+0x7e>
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
 8009c3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c3c:	d00e      	beq.n	8009c5c <dir_read+0x7e>
 8009c3e:	7bbb      	ldrb	r3, [r7, #14]
 8009c40:	2b0f      	cmp	r3, #15
 8009c42:	d00b      	beq.n	8009c5c <dir_read+0x7e>
 8009c44:	7bbb      	ldrb	r3, [r7, #14]
 8009c46:	f023 0320 	bic.w	r3, r3, #32
 8009c4a:	2b08      	cmp	r3, #8
 8009c4c:	bf0c      	ite	eq
 8009c4e:	2301      	moveq	r3, #1
 8009c50:	2300      	movne	r3, #0
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	461a      	mov	r2, r3
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d00f      	beq.n	8009c7c <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8009c5c:	2100      	movs	r1, #0
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7ff fe91 	bl	8009986 <dir_next>
 8009c64:	4603      	mov	r3, r0
 8009c66:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009c68:	7dfb      	ldrb	r3, [r7, #23]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d108      	bne.n	8009c80 <dir_read+0xa2>
	while (dp->sect) {
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	699b      	ldr	r3, [r3, #24]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1be      	bne.n	8009bf4 <dir_read+0x16>
 8009c76:	e004      	b.n	8009c82 <dir_read+0xa4>
		if (res != FR_OK) break;
 8009c78:	bf00      	nop
 8009c7a:	e002      	b.n	8009c82 <dir_read+0xa4>
				break;
 8009c7c:	bf00      	nop
 8009c7e:	e000      	b.n	8009c82 <dir_read+0xa4>
		if (res != FR_OK) break;
 8009c80:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009c82:	7dfb      	ldrb	r3, [r7, #23]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d002      	beq.n	8009c8e <dir_read+0xb0>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	619a      	str	r2, [r3, #24]
	return res;
 8009c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3718      	adds	r7, #24
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b086      	sub	sp, #24
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f7ff fde3 	bl	8009874 <dir_sdi>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009cb2:	7dfb      	ldrb	r3, [r7, #23]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d001      	beq.n	8009cbc <dir_find+0x24>
 8009cb8:	7dfb      	ldrb	r3, [r7, #23]
 8009cba:	e03e      	b.n	8009d3a <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	699b      	ldr	r3, [r3, #24]
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	6938      	ldr	r0, [r7, #16]
 8009cc4:	f7ff f9b1 	bl	800902a <move_window>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009ccc:	7dfb      	ldrb	r3, [r7, #23]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d12f      	bne.n	8009d32 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	69db      	ldr	r3, [r3, #28]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d102      	bne.n	8009ce6 <dir_find+0x4e>
 8009ce0:	2304      	movs	r3, #4
 8009ce2:	75fb      	strb	r3, [r7, #23]
 8009ce4:	e028      	b.n	8009d38 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	69db      	ldr	r3, [r3, #28]
 8009cea:	330b      	adds	r3, #11
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009cf2:	b2da      	uxtb	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	69db      	ldr	r3, [r3, #28]
 8009cfc:	330b      	adds	r3, #11
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	f003 0308 	and.w	r3, r3, #8
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d10a      	bne.n	8009d1e <dir_find+0x86>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	69d8      	ldr	r0, [r3, #28]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	3320      	adds	r3, #32
 8009d10:	220b      	movs	r2, #11
 8009d12:	4619      	mov	r1, r3
 8009d14:	f00d fdb4 	bl	8017880 <memcmp>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00b      	beq.n	8009d36 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009d1e:	2100      	movs	r1, #0
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f7ff fe30 	bl	8009986 <dir_next>
 8009d26:	4603      	mov	r3, r0
 8009d28:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009d2a:	7dfb      	ldrb	r3, [r7, #23]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d0c5      	beq.n	8009cbc <dir_find+0x24>
 8009d30:	e002      	b.n	8009d38 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009d32:	bf00      	nop
 8009d34:	e000      	b.n	8009d38 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009d36:	bf00      	nop

	return res;
 8009d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3718      	adds	r7, #24
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b084      	sub	sp, #16
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --n_ent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009d50:	2101      	movs	r1, #1
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f7ff febd 	bl	8009ad2 <dir_alloc>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009d5c:	7bfb      	ldrb	r3, [r7, #15]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d11c      	bne.n	8009d9c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	699b      	ldr	r3, [r3, #24]
 8009d66:	4619      	mov	r1, r3
 8009d68:	68b8      	ldr	r0, [r7, #8]
 8009d6a:	f7ff f95e 	bl	800902a <move_window>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009d72:	7bfb      	ldrb	r3, [r7, #15]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d111      	bne.n	8009d9c <dir_register+0x5a>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	69db      	ldr	r3, [r3, #28]
 8009d7c:	2220      	movs	r2, #32
 8009d7e:	2100      	movs	r1, #0
 8009d80:	4618      	mov	r0, r3
 8009d82:	f00d fd8d 	bl	80178a0 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	69d8      	ldr	r0, [r3, #28]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	3320      	adds	r3, #32
 8009d8e:	220b      	movs	r2, #11
 8009d90:	4619      	mov	r1, r3
 8009d92:	f00d fe09 	bl	80179a8 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8009d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <dir_remove>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp					/* Directory object pointing the entry to be removed */
)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b084      	sub	sp, #16
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	699b      	ldr	r3, [r3, #24]
 8009db8:	4619      	mov	r1, r3
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f7ff f935 	bl	800902a <move_window>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8009dc4:	7afb      	ldrb	r3, [r7, #11]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d106      	bne.n	8009dd8 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	69db      	ldr	r3, [r3, #28]
 8009dce:	22e5      	movs	r2, #229	@ 0xe5
 8009dd0:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	711a      	strb	r2, [r3, #4]
	}
#endif

	return res;
 8009dd8:	7afb      	ldrb	r3, [r7, #11]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
	...

08009de4 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b08a      	sub	sp, #40	@ 0x28
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
	BYTE *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	617b      	str	r3, [r7, #20]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	3320      	adds	r3, #32
 8009df8:	613b      	str	r3, [r7, #16]
	memset(sfn, ' ', 11);
 8009dfa:	220b      	movs	r2, #11
 8009dfc:	2120      	movs	r1, #32
 8009dfe:	6938      	ldr	r0, [r7, #16]
 8009e00:	f00d fd4e 	bl	80178a0 <memset>
	si = i = 0; ni = 8;
 8009e04:	2300      	movs	r3, #0
 8009e06:	61bb      	str	r3, [r7, #24]
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	61fb      	str	r3, [r7, #28]
 8009e0c:	2308      	movs	r3, #8
 8009e0e:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	1c5a      	adds	r2, r3, #1
 8009e14:	61fa      	str	r2, [r7, #28]
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	4413      	add	r3, r2
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009e20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e24:	2b20      	cmp	r3, #32
 8009e26:	f240 8089 	bls.w	8009f3c <create_name+0x158>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 8009e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e2e:	2b2f      	cmp	r3, #47	@ 0x2f
 8009e30:	d007      	beq.n	8009e42 <create_name+0x5e>
 8009e32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e36:	2b5c      	cmp	r3, #92	@ 0x5c
 8009e38:	d110      	bne.n	8009e5c <create_name+0x78>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 8009e3a:	e002      	b.n	8009e42 <create_name+0x5e>
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	61fb      	str	r3, [r7, #28]
 8009e42:	697a      	ldr	r2, [r7, #20]
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	4413      	add	r3, r2
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	2b2f      	cmp	r3, #47	@ 0x2f
 8009e4c:	d0f6      	beq.n	8009e3c <create_name+0x58>
 8009e4e:	697a      	ldr	r2, [r7, #20]
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	4413      	add	r3, r2
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	2b5c      	cmp	r3, #92	@ 0x5c
 8009e58:	d0f0      	beq.n	8009e3c <create_name+0x58>
			break;
 8009e5a:	e070      	b.n	8009f3e <create_name+0x15a>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8009e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e60:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e62:	d003      	beq.n	8009e6c <create_name+0x88>
 8009e64:	69ba      	ldr	r2, [r7, #24]
 8009e66:	6a3b      	ldr	r3, [r7, #32]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d30d      	bcc.n	8009e88 <create_name+0xa4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8009e6c:	6a3b      	ldr	r3, [r7, #32]
 8009e6e:	2b0b      	cmp	r3, #11
 8009e70:	d003      	beq.n	8009e7a <create_name+0x96>
 8009e72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e76:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e78:	d001      	beq.n	8009e7e <create_name+0x9a>
 8009e7a:	2306      	movs	r3, #6
 8009e7c:	e081      	b.n	8009f82 <create_name+0x19e>
			i = 8; ni = 11;				/* Enter file extension field */
 8009e7e:	2308      	movs	r3, #8
 8009e80:	61bb      	str	r3, [r7, #24]
 8009e82:	230b      	movs	r3, #11
 8009e84:	623b      	str	r3, [r7, #32]
			continue;
 8009e86:	e058      	b.n	8009f3a <create_name+0x156>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
 8009e88:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	da07      	bge.n	8009ea0 <create_name+0xbc>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 8009e90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e98:	4a3c      	ldr	r2, [pc, #240]	@ (8009f8c <create_name+0x1a8>)
 8009e9a:	5cd3      	ldrb	r3, [r2, r3]
 8009e9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 8009ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7ff f862 	bl	8008f6e <dbc_1st>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d024      	beq.n	8009efa <create_name+0x116>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	1c5a      	adds	r2, r3, #1
 8009eb4:	61fa      	str	r2, [r7, #28]
 8009eb6:	697a      	ldr	r2, [r7, #20]
 8009eb8:	4413      	add	r3, r2
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8009ebe:	7bfb      	ldrb	r3, [r7, #15]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7ff f865 	bl	8008f90 <dbc_2nd>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d004      	beq.n	8009ed6 <create_name+0xf2>
 8009ecc:	6a3b      	ldr	r3, [r7, #32]
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	69ba      	ldr	r2, [r7, #24]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d301      	bcc.n	8009eda <create_name+0xf6>
 8009ed6:	2306      	movs	r3, #6
 8009ed8:	e053      	b.n	8009f82 <create_name+0x19e>
			sfn[i++] = c;
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	1c5a      	adds	r2, r3, #1
 8009ede:	61ba      	str	r2, [r7, #24]
 8009ee0:	693a      	ldr	r2, [r7, #16]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009ee8:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	1c5a      	adds	r2, r3, #1
 8009eee:	61ba      	str	r2, [r7, #24]
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	7bfa      	ldrb	r2, [r7, #15]
 8009ef6:	701a      	strb	r2, [r3, #0]
 8009ef8:	e78a      	b.n	8009e10 <create_name+0x2c>
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009efa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009efe:	4619      	mov	r1, r3
 8009f00:	4823      	ldr	r0, [pc, #140]	@ (8009f90 <create_name+0x1ac>)
 8009f02:	f00d fcd5 	bl	80178b0 <strchr>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d001      	beq.n	8009f10 <create_name+0x12c>
 8009f0c:	2306      	movs	r3, #6
 8009f0e:	e038      	b.n	8009f82 <create_name+0x19e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009f10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f14:	2b60      	cmp	r3, #96	@ 0x60
 8009f16:	d908      	bls.n	8009f2a <create_name+0x146>
 8009f18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f1c:	2b7a      	cmp	r3, #122	@ 0x7a
 8009f1e:	d804      	bhi.n	8009f2a <create_name+0x146>
 8009f20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f24:	3b20      	subs	r3, #32
 8009f26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			sfn[i++] = c;
 8009f2a:	69bb      	ldr	r3, [r7, #24]
 8009f2c:	1c5a      	adds	r2, r3, #1
 8009f2e:	61ba      	str	r2, [r7, #24]
 8009f30:	693a      	ldr	r2, [r7, #16]
 8009f32:	4413      	add	r3, r2
 8009f34:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009f38:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 8009f3a:	e769      	b.n	8009e10 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009f3c:	bf00      	nop
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009f3e:	697a      	ldr	r2, [r7, #20]
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	441a      	add	r2, r3
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <create_name+0x16e>
 8009f4e:	2306      	movs	r3, #6
 8009f50:	e017      	b.n	8009f82 <create_name+0x19e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	2be5      	cmp	r3, #229	@ 0xe5
 8009f58:	d102      	bne.n	8009f60 <create_name+0x17c>
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	2205      	movs	r2, #5
 8009f5e:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 8009f60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f64:	2b20      	cmp	r3, #32
 8009f66:	d905      	bls.n	8009f74 <create_name+0x190>
 8009f68:	697a      	ldr	r2, [r7, #20]
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	2b20      	cmp	r3, #32
 8009f72:	d801      	bhi.n	8009f78 <create_name+0x194>
 8009f74:	2204      	movs	r2, #4
 8009f76:	e000      	b.n	8009f7a <create_name+0x196>
 8009f78:	2200      	movs	r2, #0
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	330b      	adds	r3, #11
 8009f7e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009f80:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3728      	adds	r7, #40	@ 0x28
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	08019310 	.word	0x08019310
 8009f90:	08018fc4 	.word	0x08018fc4

08009f94 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b086      	sub	sp, #24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 8009fa4:	e002      	b.n	8009fac <follow_path+0x18>
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	603b      	str	r3, [r7, #0]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	2b2f      	cmp	r3, #47	@ 0x2f
 8009fb2:	d0f8      	beq.n	8009fa6 <follow_path+0x12>
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	2b5c      	cmp	r3, #92	@ 0x5c
 8009fba:	d0f4      	beq.n	8009fa6 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	2b1f      	cmp	r3, #31
 8009fc8:	d80a      	bhi.n	8009fe0 <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2280      	movs	r2, #128	@ 0x80
 8009fce:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 8009fd2:	2100      	movs	r1, #0
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f7ff fc4d 	bl	8009874 <dir_sdi>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	75fb      	strb	r3, [r7, #23]
 8009fde:	e048      	b.n	800a072 <follow_path+0xde>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009fe0:	463b      	mov	r3, r7
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f7ff fefd 	bl	8009de4 <create_name>
 8009fea:	4603      	mov	r3, r0
 8009fec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009fee:	7dfb      	ldrb	r3, [r7, #23]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d139      	bne.n	800a068 <follow_path+0xd4>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f7ff fe4f 	bl	8009c98 <dir_find>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800a004:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 800a006:	7dfb      	ldrb	r3, [r7, #23]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d00a      	beq.n	800a022 <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a00c:	7dfb      	ldrb	r3, [r7, #23]
 800a00e:	2b04      	cmp	r3, #4
 800a010:	d12c      	bne.n	800a06c <follow_path+0xd8>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a012:	7bfb      	ldrb	r3, [r7, #15]
 800a014:	f003 0304 	and.w	r3, r3, #4
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d127      	bne.n	800a06c <follow_path+0xd8>
 800a01c:	2305      	movs	r3, #5
 800a01e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a020:	e024      	b.n	800a06c <follow_path+0xd8>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800a022:	7bfb      	ldrb	r3, [r7, #15]
 800a024:	f003 0304 	and.w	r3, r3, #4
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d121      	bne.n	800a070 <follow_path+0xdc>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	799b      	ldrb	r3, [r3, #6]
 800a030:	f003 0310 	and.w	r3, r3, #16
 800a034:	2b00      	cmp	r3, #0
 800a036:	d102      	bne.n	800a03e <follow_path+0xaa>
				res = FR_NO_PATH; break;
 800a038:	2305      	movs	r3, #5
 800a03a:	75fb      	strb	r3, [r7, #23]
 800a03c:	e019      	b.n	800a072 <follow_path+0xde>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	693a      	ldr	r2, [r7, #16]
 800a04a:	8992      	ldrh	r2, [r2, #12]
 800a04c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a050:	fb00 f202 	mul.w	r2, r0, r2
 800a054:	1a9b      	subs	r3, r3, r2
 800a056:	440b      	add	r3, r1
 800a058:	4619      	mov	r1, r3
 800a05a:	6938      	ldr	r0, [r7, #16]
 800a05c:	f7ff fd80 	bl	8009b60 <ld_clust>
 800a060:	4602      	mov	r2, r0
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a066:	e7bb      	b.n	8009fe0 <follow_path+0x4c>
			if (res != FR_OK) break;
 800a068:	bf00      	nop
 800a06a:	e002      	b.n	800a072 <follow_path+0xde>
				break;
 800a06c:	bf00      	nop
 800a06e:	e000      	b.n	800a072 <follow_path+0xde>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800a070:	bf00      	nop
			}
		}
	}

	return res;
 800a072:	7dfb      	ldrb	r3, [r7, #23]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3718      	adds	r7, #24
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b08b      	sub	sp, #44	@ 0x2c
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 800a084:	f04f 33ff 	mov.w	r3, #4294967295
 800a088:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a092:	623b      	str	r3, [r7, #32]
	if (!tp) return vol;	/* Invalid path name? */
 800a094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a096:	2b00      	cmp	r3, #0
 800a098:	d101      	bne.n	800a09e <get_ldnumber+0x22>
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	e080      	b.n	800a1a0 <get_ldnumber+0x124>
	do {					/* Find a colon in the path */
		tc = *tt++;
 800a09e:	6a3b      	ldr	r3, [r7, #32]
 800a0a0:	1c5a      	adds	r2, r3, #1
 800a0a2:	623a      	str	r2, [r7, #32]
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	77fb      	strb	r3, [r7, #31]
	} while (!IsTerminator(tc) && tc != ':');
 800a0a8:	7ffb      	ldrb	r3, [r7, #31]
 800a0aa:	2b20      	cmp	r3, #32
 800a0ac:	d902      	bls.n	800a0b4 <get_ldnumber+0x38>
 800a0ae:	7ffb      	ldrb	r3, [r7, #31]
 800a0b0:	2b3a      	cmp	r3, #58	@ 0x3a
 800a0b2:	d1f4      	bne.n	800a09e <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 800a0b4:	7ffb      	ldrb	r3, [r7, #31]
 800a0b6:	2b3a      	cmp	r3, #58	@ 0x3a
 800a0b8:	d11c      	bne.n	800a0f4 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 800a0ba:	2302      	movs	r3, #2
 800a0bc:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800a0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	2b2f      	cmp	r3, #47	@ 0x2f
 800a0c4:	d90c      	bls.n	800a0e0 <get_ldnumber+0x64>
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	2b39      	cmp	r3, #57	@ 0x39
 800a0cc:	d808      	bhi.n	800a0e0 <get_ldnumber+0x64>
 800a0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d0:	3302      	adds	r3, #2
 800a0d2:	6a3a      	ldr	r2, [r7, #32]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d103      	bne.n	800a0e0 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	3b30      	subs	r3, #48	@ 0x30
 800a0de:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	dc04      	bgt.n	800a0f0 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6a3a      	ldr	r2, [r7, #32]
 800a0ee:	601a      	str	r2, [r3, #0]
		}
		return vol;
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	e055      	b.n	800a1a0 <get_ldnumber+0x124>
	}
#if FF_STR_VOLUME_ID == 2		/* Unix style volume ID is enabled */
	if (*tp == '/') {			/* Is there a volume ID? */
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	2b2f      	cmp	r3, #47	@ 0x2f
 800a0fa:	d14e      	bne.n	800a19a <get_ldnumber+0x11e>
		while (*(tp + 1) == '/') tp++;	/* Skip duplicated separator */
 800a0fc:	e002      	b.n	800a104 <get_ldnumber+0x88>
 800a0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a100:	3301      	adds	r3, #1
 800a102:	627b      	str	r3, [r7, #36]	@ 0x24
 800a104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a106:	3301      	adds	r3, #1
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	2b2f      	cmp	r3, #47	@ 0x2f
 800a10c:	d0f7      	beq.n	800a0fe <get_ldnumber+0x82>
		i = 0;
 800a10e:	2300      	movs	r3, #0
 800a110:	61bb      	str	r3, [r7, #24]
		do {
			tt = tp; sp = VolumeStr[i]; /* Path name and this string volume ID */
 800a112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a114:	623b      	str	r3, [r7, #32]
 800a116:	4a25      	ldr	r2, [pc, #148]	@ (800a1ac <get_ldnumber+0x130>)
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a11e:	613b      	str	r3, [r7, #16]
			do {	/* Compare the volume ID with path name */
				c = *sp++; tc = *(++tt);
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	1c5a      	adds	r2, r3, #1
 800a124:	613a      	str	r2, [r7, #16]
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	73fb      	strb	r3, [r7, #15]
 800a12a:	6a3b      	ldr	r3, [r7, #32]
 800a12c:	3301      	adds	r3, #1
 800a12e:	623b      	str	r3, [r7, #32]
 800a130:	6a3b      	ldr	r3, [r7, #32]
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	77fb      	strb	r3, [r7, #31]
				if (IsLower(c)) c -= 0x20;
 800a136:	7bfb      	ldrb	r3, [r7, #15]
 800a138:	2b60      	cmp	r3, #96	@ 0x60
 800a13a:	d905      	bls.n	800a148 <get_ldnumber+0xcc>
 800a13c:	7bfb      	ldrb	r3, [r7, #15]
 800a13e:	2b7a      	cmp	r3, #122	@ 0x7a
 800a140:	d802      	bhi.n	800a148 <get_ldnumber+0xcc>
 800a142:	7bfb      	ldrb	r3, [r7, #15]
 800a144:	3b20      	subs	r3, #32
 800a146:	73fb      	strb	r3, [r7, #15]
				if (IsLower(tc)) tc -= 0x20;
 800a148:	7ffb      	ldrb	r3, [r7, #31]
 800a14a:	2b60      	cmp	r3, #96	@ 0x60
 800a14c:	d905      	bls.n	800a15a <get_ldnumber+0xde>
 800a14e:	7ffb      	ldrb	r3, [r7, #31]
 800a150:	2b7a      	cmp	r3, #122	@ 0x7a
 800a152:	d802      	bhi.n	800a15a <get_ldnumber+0xde>
 800a154:	7ffb      	ldrb	r3, [r7, #31]
 800a156:	3b20      	subs	r3, #32
 800a158:	77fb      	strb	r3, [r7, #31]
			} while (c && (TCHAR)c == tc);
 800a15a:	7bfb      	ldrb	r3, [r7, #15]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d003      	beq.n	800a168 <get_ldnumber+0xec>
 800a160:	7bfa      	ldrb	r2, [r7, #15]
 800a162:	7ffb      	ldrb	r3, [r7, #31]
 800a164:	429a      	cmp	r2, r3
 800a166:	d0db      	beq.n	800a120 <get_ldnumber+0xa4>
		} while ((c || (tc != '/' && !IsTerminator(tc))) && ++i < FF_VOLUMES);	/* Repeat for each ID until pattern match */
 800a168:	7bfb      	ldrb	r3, [r7, #15]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d105      	bne.n	800a17a <get_ldnumber+0xfe>
 800a16e:	7ffb      	ldrb	r3, [r7, #31]
 800a170:	2b2f      	cmp	r3, #47	@ 0x2f
 800a172:	d008      	beq.n	800a186 <get_ldnumber+0x10a>
 800a174:	7ffb      	ldrb	r3, [r7, #31]
 800a176:	2b20      	cmp	r3, #32
 800a178:	d905      	bls.n	800a186 <get_ldnumber+0x10a>
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	3301      	adds	r3, #1
 800a17e:	61bb      	str	r3, [r7, #24]
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	2b01      	cmp	r3, #1
 800a184:	ddc5      	ble.n	800a112 <get_ldnumber+0x96>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	dc04      	bgt.n	800a196 <get_ldnumber+0x11a>
			vol = i;		/* Drive number */
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a3a      	ldr	r2, [r7, #32]
 800a194:	601a      	str	r2, [r3, #0]
		}
		return vol;
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	e002      	b.n	800a1a0 <get_ldnumber+0x124>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 800a19a:	2300      	movs	r3, #0
 800a19c:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 800a19e:	697b      	ldr	r3, [r7, #20]
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	372c      	adds	r7, #44	@ 0x2c
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr
 800a1ac:	20000004 	.word	0x20000004

0800a1b0 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	711a      	strb	r2, [r3, #4]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a1c6:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 800a1c8:	6839      	ldr	r1, [r7, #0]
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f7fe ff2d 	bl	800902a <move_window>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d001      	beq.n	800a1da <check_fs+0x2a>
 800a1d6:	2304      	movs	r3, #4
 800a1d8:	e088      	b.n	800a2ec <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	3334      	adds	r3, #52	@ 0x34
 800a1de:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7fe fe40 	bl	8008e68 <ld_word>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a1f2:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 800a1f4:	7b7b      	ldrb	r3, [r7, #13]
 800a1f6:	2beb      	cmp	r3, #235	@ 0xeb
 800a1f8:	d005      	beq.n	800a206 <check_fs+0x56>
 800a1fa:	7b7b      	ldrb	r3, [r7, #13]
 800a1fc:	2be9      	cmp	r3, #233	@ 0xe9
 800a1fe:	d002      	beq.n	800a206 <check_fs+0x56>
 800a200:	7b7b      	ldrb	r3, [r7, #13]
 800a202:	2be8      	cmp	r3, #232	@ 0xe8
 800a204:	d16a      	bne.n	800a2dc <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 800a206:	89fb      	ldrh	r3, [r7, #14]
 800a208:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d10c      	bne.n	800a22a <check_fs+0x7a>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	3334      	adds	r3, #52	@ 0x34
 800a214:	3352      	adds	r3, #82	@ 0x52
 800a216:	2208      	movs	r2, #8
 800a218:	4936      	ldr	r1, [pc, #216]	@ (800a2f4 <check_fs+0x144>)
 800a21a:	4618      	mov	r0, r3
 800a21c:	f00d fb30 	bl	8017880 <memcmp>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d101      	bne.n	800a22a <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 800a226:	2300      	movs	r3, #0
 800a228:	e060      	b.n	800a2ec <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	3334      	adds	r3, #52	@ 0x34
 800a22e:	330b      	adds	r3, #11
 800a230:	4618      	mov	r0, r3
 800a232:	f7fe fe19 	bl	8008e68 <ld_word>
 800a236:	4603      	mov	r3, r0
 800a238:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a240:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 800a242:	897a      	ldrh	r2, [r7, #10]
 800a244:	897b      	ldrh	r3, [r7, #10]
 800a246:	3b01      	subs	r3, #1
 800a248:	4013      	ands	r3, r2
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d146      	bne.n	800a2dc <check_fs+0x12c>
 800a24e:	897b      	ldrh	r3, [r7, #10]
 800a250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a254:	d342      	bcc.n	800a2dc <check_fs+0x12c>
 800a256:	897b      	ldrh	r3, [r7, #10]
 800a258:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a25c:	d83e      	bhi.n	800a2dc <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800a25e:	7b7b      	ldrb	r3, [r7, #13]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d03b      	beq.n	800a2dc <check_fs+0x12c>
 800a264:	7b7a      	ldrb	r2, [r7, #13]
 800a266:	7b7b      	ldrb	r3, [r7, #13]
 800a268:	3b01      	subs	r3, #1
 800a26a:	4013      	ands	r3, r2
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d135      	bne.n	800a2dc <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	3334      	adds	r3, #52	@ 0x34
 800a274:	330e      	adds	r3, #14
 800a276:	4618      	mov	r0, r3
 800a278:	f7fe fdf6 	bl	8008e68 <ld_word>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d02c      	beq.n	800a2dc <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a288:	3b01      	subs	r3, #1
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d826      	bhi.n	800a2dc <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	3334      	adds	r3, #52	@ 0x34
 800a292:	3311      	adds	r3, #17
 800a294:	4618      	mov	r0, r3
 800a296:	f7fe fde7 	bl	8008e68 <ld_word>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d01d      	beq.n	800a2dc <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	3334      	adds	r3, #52	@ 0x34
 800a2a4:	3313      	adds	r3, #19
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7fe fdde 	bl	8008e68 <ld_word>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b7f      	cmp	r3, #127	@ 0x7f
 800a2b0:	d809      	bhi.n	800a2c6 <check_fs+0x116>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	3334      	adds	r3, #52	@ 0x34
 800a2b6:	3320      	adds	r3, #32
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7fe fdee 	bl	8008e9a <ld_dword>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2c4:	d30a      	bcc.n	800a2dc <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	3334      	adds	r3, #52	@ 0x34
 800a2ca:	3316      	adds	r3, #22
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7fe fdcb 	bl	8008e68 <ld_word>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d001      	beq.n	800a2dc <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 800a2d8:	2300      	movs	r3, #0
 800a2da:	e007      	b.n	800a2ec <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 800a2dc:	89fb      	ldrh	r3, [r7, #14]
 800a2de:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d101      	bne.n	800a2ea <check_fs+0x13a>
 800a2e6:	2302      	movs	r3, #2
 800a2e8:	e000      	b.n	800a2ec <check_fs+0x13c>
 800a2ea:	2303      	movs	r3, #3
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	08018fd4 	.word	0x08018fd4

0800a2f8 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b088      	sub	sp, #32
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 800a302:	2100      	movs	r1, #0
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f7ff ff53 	bl	800a1b0 <check_fs>
 800a30a:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	2b02      	cmp	r3, #2
 800a310:	d007      	beq.n	800a322 <find_volume+0x2a>
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	2b02      	cmp	r3, #2
 800a316:	d802      	bhi.n	800a31e <find_volume+0x26>
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d101      	bne.n	800a322 <find_volume+0x2a>
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	e045      	b.n	800a3ae <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800a322:	2300      	movs	r3, #0
 800a324:	61fb      	str	r3, [r7, #28]
 800a326:	e014      	b.n	800a352 <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	011b      	lsls	r3, r3, #4
 800a332:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 800a336:	4413      	add	r3, r2
 800a338:	4618      	mov	r0, r3
 800a33a:	f7fe fdae 	bl	8008e9a <ld_dword>
 800a33e:	4602      	mov	r2, r0
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	3320      	adds	r3, #32
 800a346:	443b      	add	r3, r7
 800a348:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800a34c:	69fb      	ldr	r3, [r7, #28]
 800a34e:	3301      	adds	r3, #1
 800a350:	61fb      	str	r3, [r7, #28]
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	2b03      	cmp	r3, #3
 800a356:	d9e7      	bls.n	800a328 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d002      	beq.n	800a364 <find_volume+0x6c>
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	3b01      	subs	r3, #1
 800a362:	e000      	b.n	800a366 <find_volume+0x6e>
 800a364:	2300      	movs	r3, #0
 800a366:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	3320      	adds	r3, #32
 800a36e:	443b      	add	r3, r7
 800a370:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00b      	beq.n	800a390 <find_volume+0x98>
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	3320      	adds	r3, #32
 800a37e:	443b      	add	r3, r7
 800a380:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800a384:	4619      	mov	r1, r3
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f7ff ff12 	bl	800a1b0 <check_fs>
 800a38c:	4603      	mov	r3, r0
 800a38e:	e000      	b.n	800a392 <find_volume+0x9a>
 800a390:	2303      	movs	r3, #3
 800a392:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d108      	bne.n	800a3ac <find_volume+0xb4>
 800a39a:	69bb      	ldr	r3, [r7, #24]
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d905      	bls.n	800a3ac <find_volume+0xb4>
 800a3a0:	69fb      	ldr	r3, [r7, #28]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	61fb      	str	r3, [r7, #28]
 800a3a6:	69fb      	ldr	r3, [r7, #28]
 800a3a8:	2b03      	cmp	r3, #3
 800a3aa:	d9dd      	bls.n	800a368 <find_volume+0x70>
	return fmt;
 800a3ac:	69bb      	ldr	r3, [r7, #24]
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3720      	adds	r7, #32
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
	...

0800a3b8 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b090      	sub	sp, #64	@ 0x40
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a3cc:	68f8      	ldr	r0, [r7, #12]
 800a3ce:	f7ff fe55 	bl	800a07c <get_ldnumber>
 800a3d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	da01      	bge.n	800a3de <mount_volume+0x26>
 800a3da:	230b      	movs	r3, #11
 800a3dc:	e207      	b.n	800a7ee <mount_volume+0x436>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800a3de:	4aa2      	ldr	r2, [pc, #648]	@ (800a668 <mount_volume+0x2b0>)
 800a3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800a3e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d101      	bne.n	800a3f2 <mount_volume+0x3a>
 800a3ee:	230c      	movs	r3, #12
 800a3f0:	e1fd      	b.n	800a7ee <mount_volume+0x436>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a3f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a3f8:	79fb      	ldrb	r3, [r7, #7]
 800a3fa:	f023 0301 	bic.w	r3, r3, #1
 800a3fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800a400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d01a      	beq.n	800a43e <mount_volume+0x86>
		stat = disk_status(fs->pdrv);
 800a408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a40a:	785b      	ldrb	r3, [r3, #1]
 800a40c:	4618      	mov	r0, r3
 800a40e:	f7fe fbf3 	bl	8008bf8 <disk_status>
 800a412:	4603      	mov	r3, r0
 800a414:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a418:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a41c:	f003 0301 	and.w	r3, r3, #1
 800a420:	2b00      	cmp	r3, #0
 800a422:	d10c      	bne.n	800a43e <mount_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a424:	79fb      	ldrb	r3, [r7, #7]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d007      	beq.n	800a43a <mount_volume+0x82>
 800a42a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a42e:	f003 0304 	and.w	r3, r3, #4
 800a432:	2b00      	cmp	r3, #0
 800a434:	d001      	beq.n	800a43a <mount_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a436:	230a      	movs	r3, #10
 800a438:	e1d9      	b.n	800a7ee <mount_volume+0x436>
			}
			return FR_OK;				/* The filesystem object is already valid */
 800a43a:	2300      	movs	r3, #0
 800a43c:	e1d7      	b.n	800a7ee <mount_volume+0x436>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 800a43e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a440:	2200      	movs	r2, #0
 800a442:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 800a444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a446:	785b      	ldrb	r3, [r3, #1]
 800a448:	4618      	mov	r0, r3
 800a44a:	f7fe fbfd 	bl	8008c48 <disk_initialize>
 800a44e:	4603      	mov	r3, r0
 800a450:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a454:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a458:	f003 0301 	and.w	r3, r3, #1
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d001      	beq.n	800a464 <mount_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a460:	2303      	movs	r3, #3
 800a462:	e1c4      	b.n	800a7ee <mount_volume+0x436>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a464:	79fb      	ldrb	r3, [r7, #7]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d007      	beq.n	800a47a <mount_volume+0xc2>
 800a46a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a46e:	f003 0304 	and.w	r3, r3, #4
 800a472:	2b00      	cmp	r3, #0
 800a474:	d001      	beq.n	800a47a <mount_volume+0xc2>
		return FR_WRITE_PROTECTED;
 800a476:	230a      	movs	r3, #10
 800a478:	e1b9      	b.n	800a7ee <mount_volume+0x436>
	}
#if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a47c:	7858      	ldrb	r0, [r3, #1]
 800a47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a480:	330c      	adds	r3, #12
 800a482:	461a      	mov	r2, r3
 800a484:	2102      	movs	r1, #2
 800a486:	f7fe fc6d 	bl	8008d64 <disk_ioctl>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d001      	beq.n	800a494 <mount_volume+0xdc>
 800a490:	2301      	movs	r3, #1
 800a492:	e1ac      	b.n	800a7ee <mount_volume+0x436>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a496:	899b      	ldrh	r3, [r3, #12]
 800a498:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a49c:	d80d      	bhi.n	800a4ba <mount_volume+0x102>
 800a49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a0:	899b      	ldrh	r3, [r3, #12]
 800a4a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4a6:	d308      	bcc.n	800a4ba <mount_volume+0x102>
 800a4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4aa:	899b      	ldrh	r3, [r3, #12]
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4b0:	899b      	ldrh	r3, [r3, #12]
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	4013      	ands	r3, r2
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d001      	beq.n	800a4be <mount_volume+0x106>
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	e197      	b.n	800a7ee <mount_volume+0x436>
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 800a4be:	2100      	movs	r1, #0
 800a4c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4c2:	f7ff ff19 	bl	800a2f8 <find_volume>
 800a4c6:	6338      	str	r0, [r7, #48]	@ 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 800a4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ca:	2b04      	cmp	r3, #4
 800a4cc:	d101      	bne.n	800a4d2 <mount_volume+0x11a>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e18d      	b.n	800a7ee <mount_volume+0x436>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d901      	bls.n	800a4dc <mount_volume+0x124>
 800a4d8:	230d      	movs	r3, #13
 800a4da:	e188      	b.n	800a7ee <mount_volume+0x436>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 800a4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4e0:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e4:	3334      	adds	r3, #52	@ 0x34
 800a4e6:	330b      	adds	r3, #11
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7fe fcbd 	bl	8008e68 <ld_word>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f4:	899b      	ldrh	r3, [r3, #12]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d001      	beq.n	800a4fe <mount_volume+0x146>
 800a4fa:	230d      	movs	r3, #13
 800a4fc:	e177      	b.n	800a7ee <mount_volume+0x436>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a500:	3334      	adds	r3, #52	@ 0x34
 800a502:	3316      	adds	r3, #22
 800a504:	4618      	mov	r0, r3
 800a506:	f7fe fcaf 	bl	8008e68 <ld_word>
 800a50a:	4603      	mov	r3, r0
 800a50c:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a510:	2b00      	cmp	r3, #0
 800a512:	d106      	bne.n	800a522 <mount_volume+0x16a>
 800a514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a516:	3334      	adds	r3, #52	@ 0x34
 800a518:	3324      	adds	r3, #36	@ 0x24
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fe fcbd 	bl	8008e9a <ld_dword>
 800a520:	63b8      	str	r0, [r7, #56]	@ 0x38
		fs->fsize = fasize;
 800a522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a524:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a526:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a52a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800a52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a530:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a534:	78db      	ldrb	r3, [r3, #3]
 800a536:	2b01      	cmp	r3, #1
 800a538:	d005      	beq.n	800a546 <mount_volume+0x18e>
 800a53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a53c:	78db      	ldrb	r3, [r3, #3]
 800a53e:	2b02      	cmp	r3, #2
 800a540:	d001      	beq.n	800a546 <mount_volume+0x18e>
 800a542:	230d      	movs	r3, #13
 800a544:	e153      	b.n	800a7ee <mount_volume+0x436>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a548:	78db      	ldrb	r3, [r3, #3]
 800a54a:	461a      	mov	r2, r3
 800a54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a54e:	fb02 f303 	mul.w	r3, r2, r3
 800a552:	63bb      	str	r3, [r7, #56]	@ 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a556:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a55a:	461a      	mov	r2, r3
 800a55c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a55e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a562:	895b      	ldrh	r3, [r3, #10]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d008      	beq.n	800a57a <mount_volume+0x1c2>
 800a568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a56a:	895b      	ldrh	r3, [r3, #10]
 800a56c:	461a      	mov	r2, r3
 800a56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a570:	895b      	ldrh	r3, [r3, #10]
 800a572:	3b01      	subs	r3, #1
 800a574:	4013      	ands	r3, r2
 800a576:	2b00      	cmp	r3, #0
 800a578:	d001      	beq.n	800a57e <mount_volume+0x1c6>
 800a57a:	230d      	movs	r3, #13
 800a57c:	e137      	b.n	800a7ee <mount_volume+0x436>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a580:	3334      	adds	r3, #52	@ 0x34
 800a582:	3311      	adds	r3, #17
 800a584:	4618      	mov	r0, r3
 800a586:	f7fe fc6f 	bl	8008e68 <ld_word>
 800a58a:	4603      	mov	r3, r0
 800a58c:	461a      	mov	r2, r3
 800a58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a590:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a594:	891b      	ldrh	r3, [r3, #8]
 800a596:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a598:	8992      	ldrh	r2, [r2, #12]
 800a59a:	0952      	lsrs	r2, r2, #5
 800a59c:	b292      	uxth	r2, r2
 800a59e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5a2:	fb01 f202 	mul.w	r2, r1, r2
 800a5a6:	1a9b      	subs	r3, r3, r2
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d001      	beq.n	800a5b2 <mount_volume+0x1fa>
 800a5ae:	230d      	movs	r3, #13
 800a5b0:	e11d      	b.n	800a7ee <mount_volume+0x436>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b4:	3334      	adds	r3, #52	@ 0x34
 800a5b6:	3313      	adds	r3, #19
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7fe fc55 	bl	8008e68 <ld_word>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a5c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d106      	bne.n	800a5d6 <mount_volume+0x21e>
 800a5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ca:	3334      	adds	r3, #52	@ 0x34
 800a5cc:	3320      	adds	r3, #32
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7fe fc63 	bl	8008e9a <ld_dword>
 800a5d4:	63f8      	str	r0, [r7, #60]	@ 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a5d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d8:	3334      	adds	r3, #52	@ 0x34
 800a5da:	330e      	adds	r3, #14
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7fe fc43 	bl	8008e68 <ld_word>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a5e6:	8bfb      	ldrh	r3, [r7, #30]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d101      	bne.n	800a5f0 <mount_volume+0x238>
 800a5ec:	230d      	movs	r3, #13
 800a5ee:	e0fe      	b.n	800a7ee <mount_volume+0x436>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a5f0:	8bfa      	ldrh	r2, [r7, #30]
 800a5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f4:	4413      	add	r3, r2
 800a5f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a5f8:	8911      	ldrh	r1, [r2, #8]
 800a5fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a5fc:	8992      	ldrh	r2, [r2, #12]
 800a5fe:	0952      	lsrs	r2, r2, #5
 800a600:	b292      	uxth	r2, r2
 800a602:	fbb1 f2f2 	udiv	r2, r1, r2
 800a606:	b292      	uxth	r2, r2
 800a608:	4413      	add	r3, r2
 800a60a:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a60c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	429a      	cmp	r2, r3
 800a612:	d201      	bcs.n	800a618 <mount_volume+0x260>
 800a614:	230d      	movs	r3, #13
 800a616:	e0ea      	b.n	800a7ee <mount_volume+0x436>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a618:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	1ad3      	subs	r3, r2, r3
 800a61e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a620:	8952      	ldrh	r2, [r2, #10]
 800a622:	fbb3 f3f2 	udiv	r3, r3, r2
 800a626:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d101      	bne.n	800a632 <mount_volume+0x27a>
 800a62e:	230d      	movs	r3, #13
 800a630:	e0dd      	b.n	800a7ee <mount_volume+0x436>
		fmt = 0;
 800a632:	2300      	movs	r3, #0
 800a634:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	4a0c      	ldr	r2, [pc, #48]	@ (800a66c <mount_volume+0x2b4>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d801      	bhi.n	800a642 <mount_volume+0x28a>
 800a63e:	2303      	movs	r3, #3
 800a640:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a648:	4293      	cmp	r3, r2
 800a64a:	d801      	bhi.n	800a650 <mount_volume+0x298>
 800a64c:	2302      	movs	r3, #2
 800a64e:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a656:	4293      	cmp	r3, r2
 800a658:	d801      	bhi.n	800a65e <mount_volume+0x2a6>
 800a65a:	2301      	movs	r3, #1
 800a65c:	633b      	str	r3, [r7, #48]	@ 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 800a65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a660:	2b00      	cmp	r3, #0
 800a662:	d105      	bne.n	800a670 <mount_volume+0x2b8>
 800a664:	230d      	movs	r3, #13
 800a666:	e0c2      	b.n	800a7ee <mount_volume+0x436>
 800a668:	20005c70 	.word	0x20005c70
 800a66c:	0ffffff5 	.word	0x0ffffff5

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	1c9a      	adds	r2, r3, #2
 800a674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a676:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a67a:	6a3a      	ldr	r2, [r7, #32]
 800a67c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a67e:	8bfa      	ldrh	r2, [r7, #30]
 800a680:	6a3b      	ldr	r3, [r7, #32]
 800a682:	441a      	add	r2, r3
 800a684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a686:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a688:	6a3a      	ldr	r2, [r7, #32]
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	441a      	add	r2, r3
 800a68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a690:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800a692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a694:	2b03      	cmp	r3, #3
 800a696:	d11e      	bne.n	800a6d6 <mount_volume+0x31e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a69a:	3334      	adds	r3, #52	@ 0x34
 800a69c:	332a      	adds	r3, #42	@ 0x2a
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7fe fbe2 	bl	8008e68 <ld_word>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d001      	beq.n	800a6ae <mount_volume+0x2f6>
 800a6aa:	230d      	movs	r3, #13
 800a6ac:	e09f      	b.n	800a7ee <mount_volume+0x436>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a6ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b0:	891b      	ldrh	r3, [r3, #8]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d001      	beq.n	800a6ba <mount_volume+0x302>
 800a6b6:	230d      	movs	r3, #13
 800a6b8:	e099      	b.n	800a7ee <mount_volume+0x436>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6bc:	3334      	adds	r3, #52	@ 0x34
 800a6be:	332c      	adds	r3, #44	@ 0x2c
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7fe fbea 	bl	8008e9a <ld_dword>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ca:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a6cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ce:	699b      	ldr	r3, [r3, #24]
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6d4:	e01e      	b.n	800a714 <mount_volume+0x35c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800a6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d8:	891b      	ldrh	r3, [r3, #8]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d101      	bne.n	800a6e2 <mount_volume+0x32a>
 800a6de:	230d      	movs	r3, #13
 800a6e0:	e085      	b.n	800a7ee <mount_volume+0x436>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6e8:	441a      	add	r2, r3
 800a6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ec:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f0:	2b02      	cmp	r3, #2
 800a6f2:	d103      	bne.n	800a6fc <mount_volume+0x344>
 800a6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	005b      	lsls	r3, r3, #1
 800a6fa:	e00a      	b.n	800a712 <mount_volume+0x35a>
 800a6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6fe:	699a      	ldr	r2, [r3, #24]
 800a700:	4613      	mov	r3, r2
 800a702:	005b      	lsls	r3, r3, #1
 800a704:	4413      	add	r3, r2
 800a706:	085a      	lsrs	r2, r3, #1
 800a708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a70a:	699b      	ldr	r3, [r3, #24]
 800a70c:	f003 0301 	and.w	r3, r3, #1
 800a710:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a712:	637b      	str	r3, [r7, #52]	@ 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a716:	69da      	ldr	r2, [r3, #28]
 800a718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a71a:	899b      	ldrh	r3, [r3, #12]
 800a71c:	4619      	mov	r1, r3
 800a71e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a720:	440b      	add	r3, r1
 800a722:	3b01      	subs	r3, #1
 800a724:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a726:	8989      	ldrh	r1, [r1, #12]
 800a728:	fbb3 f3f1 	udiv	r3, r3, r1
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d201      	bcs.n	800a734 <mount_volume+0x37c>
 800a730:	230d      	movs	r3, #13
 800a732:	e05c      	b.n	800a7ee <mount_volume+0x436>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a736:	f04f 32ff 	mov.w	r2, #4294967295
 800a73a:	615a      	str	r2, [r3, #20]
 800a73c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a73e:	695a      	ldr	r2, [r3, #20]
 800a740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a742:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a746:	2280      	movs	r2, #128	@ 0x80
 800a748:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800a74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a74c:	2b03      	cmp	r3, #3
 800a74e:	d13f      	bne.n	800a7d0 <mount_volume+0x418>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a752:	3334      	adds	r3, #52	@ 0x34
 800a754:	3330      	adds	r3, #48	@ 0x30
 800a756:	4618      	mov	r0, r3
 800a758:	f7fe fb86 	bl	8008e68 <ld_word>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d136      	bne.n	800a7d0 <mount_volume+0x418>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a762:	6a3b      	ldr	r3, [r7, #32]
 800a764:	3301      	adds	r3, #1
 800a766:	4619      	mov	r1, r3
 800a768:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a76a:	f7fe fc5e 	bl	800902a <move_window>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d12d      	bne.n	800a7d0 <mount_volume+0x418>
		{
			fs->fsi_flag = 0;
 800a774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a776:	2200      	movs	r2, #0
 800a778:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800a77a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77c:	3334      	adds	r3, #52	@ 0x34
 800a77e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a782:	4618      	mov	r0, r3
 800a784:	f7fe fb70 	bl	8008e68 <ld_word>
 800a788:	4603      	mov	r3, r0
 800a78a:	461a      	mov	r2, r3
 800a78c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a790:	429a      	cmp	r2, r3
 800a792:	d11d      	bne.n	800a7d0 <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a796:	3334      	adds	r3, #52	@ 0x34
 800a798:	4618      	mov	r0, r3
 800a79a:	f7fe fb7e 	bl	8008e9a <ld_dword>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	4a15      	ldr	r2, [pc, #84]	@ (800a7f8 <mount_volume+0x440>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d114      	bne.n	800a7d0 <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a7a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7a8:	3334      	adds	r3, #52	@ 0x34
 800a7aa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7fe fb73 	bl	8008e9a <ld_dword>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	4a11      	ldr	r2, [pc, #68]	@ (800a7fc <mount_volume+0x444>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d109      	bne.n	800a7d0 <mount_volume+0x418>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a7bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7be:	3334      	adds	r3, #52	@ 0x34
 800a7c0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7fe fb68 	bl	8008e9a <ld_dword>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ce:	611a      	str	r2, [r3, #16]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 800a7d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800a7d8:	4b09      	ldr	r3, [pc, #36]	@ (800a800 <mount_volume+0x448>)
 800a7da:	881b      	ldrh	r3, [r3, #0]
 800a7dc:	3301      	adds	r3, #1
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	4b07      	ldr	r3, [pc, #28]	@ (800a800 <mount_volume+0x448>)
 800a7e2:	801a      	strh	r2, [r3, #0]
 800a7e4:	4b06      	ldr	r3, [pc, #24]	@ (800a800 <mount_volume+0x448>)
 800a7e6:	881a      	ldrh	r2, [r3, #0]
 800a7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ea:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3740      	adds	r7, #64	@ 0x40
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	41615252 	.word	0x41615252
 800a7fc:	61417272 	.word	0x61417272
 800a800:	20005c78 	.word	0x20005c78

0800a804 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a80e:	2309      	movs	r3, #9
 800a810:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d01c      	beq.n	800a852 <validate+0x4e>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d018      	beq.n	800a852 <validate+0x4e>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d013      	beq.n	800a852 <validate+0x4e>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	889a      	ldrh	r2, [r3, #4]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	88db      	ldrh	r3, [r3, #6]
 800a834:	429a      	cmp	r2, r3
 800a836:	d10c      	bne.n	800a852 <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	785b      	ldrb	r3, [r3, #1]
 800a83e:	4618      	mov	r0, r3
 800a840:	f7fe f9da 	bl	8008bf8 <disk_status>
 800a844:	4603      	mov	r3, r0
 800a846:	f003 0301 	and.w	r3, r3, #1
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d101      	bne.n	800a852 <validate+0x4e>
			res = FR_OK;
 800a84e:	2300      	movs	r3, #0
 800a850:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 800a852:	7bfb      	ldrb	r3, [r7, #15]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d102      	bne.n	800a85e <validate+0x5a>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	e000      	b.n	800a860 <validate+0x5c>
 800a85e:	2300      	movs	r3, #0
 800a860:	683a      	ldr	r2, [r7, #0]
 800a862:	6013      	str	r3, [r2, #0]
	return res;
 800a864:	7bfb      	ldrb	r3, [r7, #15]
}
 800a866:	4618      	mov	r0, r3
 800a868:	3710      	adds	r7, #16
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
	...

0800a870 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b088      	sub	sp, #32
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	4613      	mov	r3, r2
 800a87c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 800a882:	f107 0310 	add.w	r3, r7, #16
 800a886:	4618      	mov	r0, r3
 800a888:	f7ff fbf8 	bl	800a07c <get_ldnumber>
 800a88c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	2b00      	cmp	r3, #0
 800a892:	da01      	bge.n	800a898 <f_mount+0x28>
 800a894:	230b      	movs	r3, #11
 800a896:	e02e      	b.n	800a8f6 <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 800a898:	4a19      	ldr	r2, [pc, #100]	@ (800a900 <f_mount+0x90>)
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8a0:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d007      	beq.n	800a8b8 <f_mount+0x48>
		FatFs[vol] = 0;
 800a8a8:	4a15      	ldr	r2, [pc, #84]	@ (800a900 <f_mount+0x90>)
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 800a8b2:	69bb      	ldr	r3, [r7, #24]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d00b      	beq.n	800a8d6 <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	69fa      	ldr	r2, [r7, #28]
 800a8c2:	b2d2      	uxtb	r2, r2
 800a8c4:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 800a8cc:	68fa      	ldr	r2, [r7, #12]
 800a8ce:	490c      	ldr	r1, [pc, #48]	@ (800a900 <f_mount+0x90>)
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 800a8d6:	79fb      	ldrb	r3, [r7, #7]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d101      	bne.n	800a8e0 <f_mount+0x70>
 800a8dc:	2300      	movs	r3, #0
 800a8de:	e00a      	b.n	800a8f6 <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a8e0:	f107 010c 	add.w	r1, r7, #12
 800a8e4:	f107 0308 	add.w	r3, r7, #8
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7ff fd64 	bl	800a3b8 <mount_volume>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a8f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3720      	adds	r7, #32
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	20005c70 	.word	0x20005c70

0800a904 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b098      	sub	sp, #96	@ 0x60
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	4613      	mov	r3, r2
 800a910:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d101      	bne.n	800a91c <f_open+0x18>
 800a918:	2309      	movs	r3, #9
 800a91a:	e184      	b.n	800ac26 <f_open+0x322>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 800a91c:	79fb      	ldrb	r3, [r7, #7]
 800a91e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a922:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 800a924:	79fa      	ldrb	r2, [r7, #7]
 800a926:	f107 0114 	add.w	r1, r7, #20
 800a92a:	f107 0308 	add.w	r3, r7, #8
 800a92e:	4618      	mov	r0, r3
 800a930:	f7ff fd42 	bl	800a3b8 <mount_volume>
 800a934:	4603      	mov	r3, r0
 800a936:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800a93a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f040 8168 	bne.w	800ac14 <f_open+0x310>
		dj.obj.fs = fs;
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a948:	68ba      	ldr	r2, [r7, #8]
 800a94a:	f107 0318 	add.w	r3, r7, #24
 800a94e:	4611      	mov	r1, r2
 800a950:	4618      	mov	r0, r3
 800a952:	f7ff fb1f 	bl	8009f94 <follow_path>
 800a956:	4603      	mov	r3, r0
 800a958:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 800a95c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a960:	2b00      	cmp	r3, #0
 800a962:	d107      	bne.n	800a974 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a964:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a968:	b25b      	sxtb	r3, r3
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	da02      	bge.n	800a974 <f_open+0x70>
				res = FR_INVALID_NAME;
 800a96e:	2306      	movs	r3, #6
 800a970:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a974:	79fb      	ldrb	r3, [r7, #7]
 800a976:	f003 031c 	and.w	r3, r3, #28
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d077      	beq.n	800aa6e <f_open+0x16a>
			if (res != FR_OK) {					/* No file, create new */
 800a97e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a982:	2b00      	cmp	r3, #0
 800a984:	d010      	beq.n	800a9a8 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a986:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a98a:	2b04      	cmp	r3, #4
 800a98c:	d107      	bne.n	800a99e <f_open+0x9a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800a98e:	f107 0318 	add.w	r3, r7, #24
 800a992:	4618      	mov	r0, r3
 800a994:	f7ff f9d5 	bl	8009d42 <dir_register>
 800a998:	4603      	mov	r3, r0
 800a99a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a99e:	79fb      	ldrb	r3, [r7, #7]
 800a9a0:	f043 0308 	orr.w	r3, r3, #8
 800a9a4:	71fb      	strb	r3, [r7, #7]
 800a9a6:	e010      	b.n	800a9ca <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a9a8:	7fbb      	ldrb	r3, [r7, #30]
 800a9aa:	f003 0311 	and.w	r3, r3, #17
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d003      	beq.n	800a9ba <f_open+0xb6>
					res = FR_DENIED;
 800a9b2:	2307      	movs	r3, #7
 800a9b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a9b8:	e007      	b.n	800a9ca <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a9ba:	79fb      	ldrb	r3, [r7, #7]
 800a9bc:	f003 0304 	and.w	r3, r3, #4
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d002      	beq.n	800a9ca <f_open+0xc6>
 800a9c4:	2308      	movs	r3, #8
 800a9c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800a9ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d167      	bne.n	800aaa2 <f_open+0x19e>
 800a9d2:	79fb      	ldrb	r3, [r7, #7]
 800a9d4:	f003 0308 	and.w	r3, r3, #8
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d062      	beq.n	800aaa2 <f_open+0x19e>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 800a9dc:	4b94      	ldr	r3, [pc, #592]	@ (800ac30 <f_open+0x32c>)
 800a9de:	653b      	str	r3, [r7, #80]	@ 0x50
					st_dword(dj.dir + DIR_CrtTime, tm);
 800a9e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9e2:	330e      	adds	r3, #14
 800a9e4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7fe fa95 	bl	8008f16 <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 800a9ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9ee:	3316      	adds	r3, #22
 800a9f0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7fe fa8f 	bl	8008f16 <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9fc:	4611      	mov	r1, r2
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7ff f8ae 	bl	8009b60 <ld_clust>
 800aa04:	64f8      	str	r0, [r7, #76]	@ 0x4c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800aa06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa08:	330b      	adds	r3, #11
 800aa0a:	2220      	movs	r2, #32
 800aa0c:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800aa12:	2200      	movs	r2, #0
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7ff f8c2 	bl	8009b9e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800aa1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa1c:	331c      	adds	r3, #28
 800aa1e:	2100      	movs	r1, #0
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7fe fa78 	bl	8008f16 <st_dword>
					fs->wflag = 1;
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	2201      	movs	r2, #1
 800aa2a:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 800aa2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d037      	beq.n	800aaa2 <f_open+0x19e>
						sc = fs->winsect;
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa36:	64bb      	str	r3, [r7, #72]	@ 0x48
						res = remove_chain(&dj.obj, cl, 0);
 800aa38:	f107 0318 	add.w	r3, r7, #24
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7fe fd99 	bl	8009578 <remove_chain>
 800aa46:	4603      	mov	r3, r0
 800aa48:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800aa4c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d126      	bne.n	800aaa2 <f_open+0x19e>
							res = move_window(fs, sc);
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7fe fae6 	bl	800902a <move_window>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aa68:	3a01      	subs	r2, #1
 800aa6a:	611a      	str	r2, [r3, #16]
 800aa6c:	e019      	b.n	800aaa2 <f_open+0x19e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 800aa6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d115      	bne.n	800aaa2 <f_open+0x19e>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 800aa76:	7fbb      	ldrb	r3, [r7, #30]
 800aa78:	f003 0310 	and.w	r3, r3, #16
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d003      	beq.n	800aa88 <f_open+0x184>
					res = FR_NO_FILE;
 800aa80:	2304      	movs	r3, #4
 800aa82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800aa86:	e00c      	b.n	800aaa2 <f_open+0x19e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 800aa88:	79fb      	ldrb	r3, [r7, #7]
 800aa8a:	f003 0302 	and.w	r3, r3, #2
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d007      	beq.n	800aaa2 <f_open+0x19e>
 800aa92:	7fbb      	ldrb	r3, [r7, #30]
 800aa94:	f003 0301 	and.w	r3, r3, #1
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d002      	beq.n	800aaa2 <f_open+0x19e>
						res = FR_DENIED;
 800aa9c:	2307      	movs	r3, #7
 800aa9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800aaa2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d10f      	bne.n	800aaca <f_open+0x1c6>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800aaaa:	79fb      	ldrb	r3, [r7, #7]
 800aaac:	f003 0308 	and.w	r3, r3, #8
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d003      	beq.n	800aabc <f_open+0x1b8>
 800aab4:	79fb      	ldrb	r3, [r7, #7]
 800aab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aaba:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 800aac4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 800aaca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aace:	2b00      	cmp	r3, #0
 800aad0:	f040 80a0 	bne.w	800ac14 <f_open+0x310>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aad8:	4611      	mov	r1, r2
 800aada:	4618      	mov	r0, r3
 800aadc:	f7ff f840 	bl	8009b60 <ld_clust>
 800aae0:	4602      	mov	r2, r0
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800aae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aae8:	331c      	adds	r3, #28
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fe f9d5 	bl	8008e9a <ld_dword>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 800aaf6:	697a      	ldr	r2, [r7, #20]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	88da      	ldrh	r2, [r3, #6]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	79fa      	ldrb	r2, [r7, #7]
 800ab08:	741a      	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2200      	movs	r2, #0
 800ab14:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	3328      	adds	r3, #40	@ 0x28
 800ab20:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800ab24:	2100      	movs	r1, #0
 800ab26:	4618      	mov	r0, r3
 800ab28:	f00c feba 	bl	80178a0 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ab2c:	79fb      	ldrb	r3, [r7, #7]
 800ab2e:	f003 0320 	and.w	r3, r3, #32
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d06e      	beq.n	800ac14 <f_open+0x310>
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d06a      	beq.n	800ac14 <f_open+0x310>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	68da      	ldr	r2, [r3, #12]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	895b      	ldrh	r3, [r3, #10]
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	899b      	ldrh	r3, [r3, #12]
 800ab50:	fb02 f303 	mul.w	r3, r2, r3
 800ab54:	647b      	str	r3, [r7, #68]	@ 0x44
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	657b      	str	r3, [r7, #84]	@ 0x54
 800ab62:	e016      	b.n	800ab92 <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7fe fb18 	bl	800919e <get_fat>
 800ab6e:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ab70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d802      	bhi.n	800ab7c <f_open+0x278>
 800ab76:	2302      	movs	r3, #2
 800ab78:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ab7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ab7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab82:	d102      	bne.n	800ab8a <f_open+0x286>
 800ab84:	2301      	movs	r3, #1
 800ab86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ab8a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ab8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab8e:	1ad3      	subs	r3, r2, r3
 800ab90:	657b      	str	r3, [r7, #84]	@ 0x54
 800ab92:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d103      	bne.n	800aba2 <f_open+0x29e>
 800ab9a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ab9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d8e0      	bhi.n	800ab64 <f_open+0x260>
				}
				fp->clust = clst;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aba6:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800aba8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800abac:	2b00      	cmp	r3, #0
 800abae:	d131      	bne.n	800ac14 <f_open+0x310>
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	899b      	ldrh	r3, [r3, #12]
 800abb4:	461a      	mov	r2, r3
 800abb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abb8:	fbb3 f1f2 	udiv	r1, r3, r2
 800abbc:	fb01 f202 	mul.w	r2, r1, r2
 800abc0:	1a9b      	subs	r3, r3, r2
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d026      	beq.n	800ac14 <f_open+0x310>
					sc = clst2sect(fs, clst);
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800abca:	4618      	mov	r0, r3
 800abcc:	f7fe fac8 	bl	8009160 <clst2sect>
 800abd0:	64b8      	str	r0, [r7, #72]	@ 0x48
					if (sc == 0) {
 800abd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d103      	bne.n	800abe0 <f_open+0x2dc>
						res = FR_INT_ERR;
 800abd8:	2302      	movs	r3, #2
 800abda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800abde:	e019      	b.n	800ac14 <f_open+0x310>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	899b      	ldrh	r3, [r3, #12]
 800abe4:	461a      	mov	r2, r3
 800abe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abe8:	fbb3 f2f2 	udiv	r2, r3, r2
 800abec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abee:	441a      	add	r2, r3
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	7858      	ldrb	r0, [r3, #1]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	69da      	ldr	r2, [r3, #28]
 800ac02:	2301      	movs	r3, #1
 800ac04:	f7fe f848 	bl	8008c98 <disk_read>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d002      	beq.n	800ac14 <f_open+0x310>
 800ac0e:	2301      	movs	r3, #1
 800ac10:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ac14:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d002      	beq.n	800ac22 <f_open+0x31e>
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ac22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3760      	adds	r7, #96	@ 0x60
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	54210000 	.word	0x54210000

0800ac34 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b08e      	sub	sp, #56	@ 0x38
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	60f8      	str	r0, [r7, #12]
 800ac3c:	60b9      	str	r1, [r7, #8]
 800ac3e:	607a      	str	r2, [r7, #4]
 800ac40:	603b      	str	r3, [r7, #0]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f107 0214 	add.w	r2, r7, #20
 800ac52:	4611      	mov	r1, r2
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7ff fdd5 	bl	800a804 <validate>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ac60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d107      	bne.n	800ac78 <f_read+0x44>
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	7c5b      	ldrb	r3, [r3, #17]
 800ac6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ac70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d002      	beq.n	800ac7e <f_read+0x4a>
 800ac78:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ac7c:	e129      	b.n	800aed2 <f_read+0x29e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	7c1b      	ldrb	r3, [r3, #16]
 800ac82:	f003 0301 	and.w	r3, r3, #1
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d101      	bne.n	800ac8e <f_read+0x5a>
 800ac8a:	2307      	movs	r3, #7
 800ac8c:	e121      	b.n	800aed2 <f_read+0x29e>
	remain = fp->obj.objsize - fp->fptr;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	68da      	ldr	r2, [r3, #12]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	695b      	ldr	r3, [r3, #20]
 800ac96:	1ad3      	subs	r3, r2, r3
 800ac98:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	6a3b      	ldr	r3, [r7, #32]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	f240 8112 	bls.w	800aec8 <f_read+0x294>
 800aca4:	6a3b      	ldr	r3, [r7, #32]
 800aca6:	607b      	str	r3, [r7, #4]

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800aca8:	e10e      	b.n	800aec8 <f_read+0x294>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	695b      	ldr	r3, [r3, #20]
 800acae:	697a      	ldr	r2, [r7, #20]
 800acb0:	8992      	ldrh	r2, [r2, #12]
 800acb2:	fbb3 f1f2 	udiv	r1, r3, r2
 800acb6:	fb01 f202 	mul.w	r2, r1, r2
 800acba:	1a9b      	subs	r3, r3, r2
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	f040 80c9 	bne.w	800ae54 <f_read+0x220>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	695b      	ldr	r3, [r3, #20]
 800acc6:	697a      	ldr	r2, [r7, #20]
 800acc8:	8992      	ldrh	r2, [r2, #12]
 800acca:	fbb3 f3f2 	udiv	r3, r3, r2
 800acce:	697a      	ldr	r2, [r7, #20]
 800acd0:	8952      	ldrh	r2, [r2, #10]
 800acd2:	3a01      	subs	r2, #1
 800acd4:	4013      	ands	r3, r2
 800acd6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800acd8:	69fb      	ldr	r3, [r7, #28]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d123      	bne.n	800ad26 <f_read+0xf2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	695b      	ldr	r3, [r3, #20]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d103      	bne.n	800acee <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	633b      	str	r3, [r7, #48]	@ 0x30
 800acec:	e007      	b.n	800acfe <f_read+0xca>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	699b      	ldr	r3, [r3, #24]
 800acf4:	4619      	mov	r1, r3
 800acf6:	4610      	mov	r0, r2
 800acf8:	f7fe fa51 	bl	800919e <get_fat>
 800acfc:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800acfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d804      	bhi.n	800ad0e <f_read+0xda>
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2202      	movs	r2, #2
 800ad08:	745a      	strb	r2, [r3, #17]
 800ad0a:	2302      	movs	r3, #2
 800ad0c:	e0e1      	b.n	800aed2 <f_read+0x29e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ad0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad14:	d104      	bne.n	800ad20 <f_read+0xec>
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	745a      	strb	r2, [r3, #17]
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e0d8      	b.n	800aed2 <f_read+0x29e>
				fp->clust = clst;				/* Update current cluster */
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad24:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800ad26:	697a      	ldr	r2, [r7, #20]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	699b      	ldr	r3, [r3, #24]
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	4610      	mov	r0, r2
 800ad30:	f7fe fa16 	bl	8009160 <clst2sect>
 800ad34:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d104      	bne.n	800ad46 <f_read+0x112>
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2202      	movs	r2, #2
 800ad40:	745a      	strb	r2, [r3, #17]
 800ad42:	2302      	movs	r3, #2
 800ad44:	e0c5      	b.n	800aed2 <f_read+0x29e>
			sect += csect;
 800ad46:	69ba      	ldr	r2, [r7, #24]
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	899b      	ldrh	r3, [r3, #12]
 800ad52:	461a      	mov	r2, r3
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad5a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 800ad5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d041      	beq.n	800ade6 <f_read+0x1b2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ad62:	69fa      	ldr	r2, [r7, #28]
 800ad64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad66:	4413      	add	r3, r2
 800ad68:	697a      	ldr	r2, [r7, #20]
 800ad6a:	8952      	ldrh	r2, [r2, #10]
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d905      	bls.n	800ad7c <f_read+0x148>
					cc = fs->csize - csect;
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	895b      	ldrh	r3, [r3, #10]
 800ad74:	461a      	mov	r2, r3
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	1ad3      	subs	r3, r2, r3
 800ad7a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	7858      	ldrb	r0, [r3, #1]
 800ad80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad82:	69ba      	ldr	r2, [r7, #24]
 800ad84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ad86:	f7fd ff87 	bl	8008c98 <disk_read>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d004      	beq.n	800ad9a <f_read+0x166>
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2201      	movs	r2, #1
 800ad94:	745a      	strb	r2, [r3, #17]
 800ad96:	2301      	movs	r3, #1
 800ad98:	e09b      	b.n	800aed2 <f_read+0x29e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	7c1b      	ldrb	r3, [r3, #16]
 800ad9e:	b25b      	sxtb	r3, r3
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	da18      	bge.n	800add6 <f_read+0x1a2>
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	69da      	ldr	r2, [r3, #28]
 800ada8:	69bb      	ldr	r3, [r7, #24]
 800adaa:	1ad3      	subs	r3, r2, r3
 800adac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800adae:	429a      	cmp	r2, r3
 800adb0:	d911      	bls.n	800add6 <f_read+0x1a2>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	69da      	ldr	r2, [r3, #28]
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	1ad3      	subs	r3, r2, r3
 800adba:	697a      	ldr	r2, [r7, #20]
 800adbc:	8992      	ldrh	r2, [r2, #12]
 800adbe:	fb02 f303 	mul.w	r3, r2, r3
 800adc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adc4:	18d0      	adds	r0, r2, r3
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	899b      	ldrh	r3, [r3, #12]
 800add0:	461a      	mov	r2, r3
 800add2:	f00c fde9 	bl	80179a8 <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	899b      	ldrh	r3, [r3, #12]
 800adda:	461a      	mov	r2, r3
 800addc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adde:	fb02 f303 	mul.w	r3, r2, r3
 800ade2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800ade4:	e05c      	b.n	800aea0 <f_read+0x26c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	69db      	ldr	r3, [r3, #28]
 800adea:	69ba      	ldr	r2, [r7, #24]
 800adec:	429a      	cmp	r2, r3
 800adee:	d02e      	beq.n	800ae4e <f_read+0x21a>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	7c1b      	ldrb	r3, [r3, #16]
 800adf4:	b25b      	sxtb	r3, r3
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	da18      	bge.n	800ae2c <f_read+0x1f8>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	7858      	ldrb	r0, [r3, #1]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	69da      	ldr	r2, [r3, #28]
 800ae08:	2301      	movs	r3, #1
 800ae0a:	f7fd ff77 	bl	8008cfc <disk_write>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d004      	beq.n	800ae1e <f_read+0x1ea>
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2201      	movs	r2, #1
 800ae18:	745a      	strb	r2, [r3, #17]
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e059      	b.n	800aed2 <f_read+0x29e>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	7c1b      	ldrb	r3, [r3, #16]
 800ae22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae26:	b2da      	uxtb	r2, r3
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	7858      	ldrb	r0, [r3, #1]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800ae36:	2301      	movs	r3, #1
 800ae38:	69ba      	ldr	r2, [r7, #24]
 800ae3a:	f7fd ff2d 	bl	8008c98 <disk_read>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d004      	beq.n	800ae4e <f_read+0x21a>
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2201      	movs	r2, #1
 800ae48:	745a      	strb	r2, [r3, #17]
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e041      	b.n	800aed2 <f_read+0x29e>
			}
#endif
			fp->sect = sect;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	69ba      	ldr	r2, [r7, #24]
 800ae52:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	899b      	ldrh	r3, [r3, #12]
 800ae58:	4618      	mov	r0, r3
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	695b      	ldr	r3, [r3, #20]
 800ae5e:	697a      	ldr	r2, [r7, #20]
 800ae60:	8992      	ldrh	r2, [r2, #12]
 800ae62:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae66:	fb01 f202 	mul.w	r2, r1, r2
 800ae6a:	1a9b      	subs	r3, r3, r2
 800ae6c:	1ac3      	subs	r3, r0, r3
 800ae6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ae70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d901      	bls.n	800ae7c <f_read+0x248>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	695b      	ldr	r3, [r3, #20]
 800ae86:	697a      	ldr	r2, [r7, #20]
 800ae88:	8992      	ldrh	r2, [r2, #12]
 800ae8a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae8e:	fb00 f202 	mul.w	r2, r0, r2
 800ae92:	1a9b      	subs	r3, r3, r2
 800ae94:	440b      	add	r3, r1
 800ae96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae98:	4619      	mov	r1, r3
 800ae9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ae9c:	f00c fd84 	bl	80179a8 <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aea4:	1ad3      	subs	r3, r2, r3
 800aea6:	607b      	str	r3, [r7, #4]
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeae:	441a      	add	r2, r3
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	601a      	str	r2, [r3, #0]
 800aeb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aeb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeb8:	4413      	add	r3, r2
 800aeba:	627b      	str	r3, [r7, #36]	@ 0x24
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	695a      	ldr	r2, [r3, #20]
 800aec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aec2:	441a      	add	r2, r3
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	615a      	str	r2, [r3, #20]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f47f aeed 	bne.w	800acaa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3738      	adds	r7, #56	@ 0x38
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b08c      	sub	sp, #48	@ 0x30
 800aede:	af00      	add	r7, sp, #0
 800aee0:	60f8      	str	r0, [r7, #12]
 800aee2:	60b9      	str	r1, [r7, #8]
 800aee4:	607a      	str	r2, [r7, #4]
 800aee6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	2200      	movs	r2, #0
 800aef0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	f107 0210 	add.w	r2, r7, #16
 800aef8:	4611      	mov	r1, r2
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7ff fc82 	bl	800a804 <validate>
 800af00:	4603      	mov	r3, r0
 800af02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800af06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d107      	bne.n	800af1e <f_write+0x44>
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	7c5b      	ldrb	r3, [r3, #17]
 800af12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800af16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d002      	beq.n	800af24 <f_write+0x4a>
 800af1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800af22:	e15e      	b.n	800b1e2 <f_write+0x308>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	7c1b      	ldrb	r3, [r3, #16]
 800af28:	f003 0302 	and.w	r3, r3, #2
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d101      	bne.n	800af34 <f_write+0x5a>
 800af30:	2307      	movs	r3, #7
 800af32:	e156      	b.n	800b1e2 <f_write+0x308>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	695a      	ldr	r2, [r3, #20]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	441a      	add	r2, r3
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	695b      	ldr	r3, [r3, #20]
 800af40:	429a      	cmp	r2, r3
 800af42:	f080 8140 	bcs.w	800b1c6 <f_write+0x2ec>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	695b      	ldr	r3, [r3, #20]
 800af4a:	43db      	mvns	r3, r3
 800af4c:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800af4e:	e13a      	b.n	800b1c6 <f_write+0x2ec>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	695b      	ldr	r3, [r3, #20]
 800af54:	693a      	ldr	r2, [r7, #16]
 800af56:	8992      	ldrh	r2, [r2, #12]
 800af58:	fbb3 f1f2 	udiv	r1, r3, r2
 800af5c:	fb01 f202 	mul.w	r2, r1, r2
 800af60:	1a9b      	subs	r3, r3, r2
 800af62:	2b00      	cmp	r3, #0
 800af64:	f040 80e5 	bne.w	800b132 <f_write+0x258>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	695b      	ldr	r3, [r3, #20]
 800af6c:	693a      	ldr	r2, [r7, #16]
 800af6e:	8992      	ldrh	r2, [r2, #12]
 800af70:	fbb3 f3f2 	udiv	r3, r3, r2
 800af74:	693a      	ldr	r2, [r7, #16]
 800af76:	8952      	ldrh	r2, [r2, #10]
 800af78:	3a01      	subs	r2, #1
 800af7a:	4013      	ands	r3, r2
 800af7c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800af7e:	69bb      	ldr	r3, [r7, #24]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d137      	bne.n	800aff4 <f_write+0x11a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	695b      	ldr	r3, [r3, #20]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d10c      	bne.n	800afa6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800af92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af94:	2b00      	cmp	r3, #0
 800af96:	d10e      	bne.n	800afb6 <f_write+0xdc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2100      	movs	r1, #0
 800af9c:	4618      	mov	r0, r3
 800af9e:	f7fe fb50 	bl	8009642 <create_chain>
 800afa2:	62b8      	str	r0, [r7, #40]	@ 0x28
 800afa4:	e007      	b.n	800afb6 <f_write+0xdc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	699b      	ldr	r3, [r3, #24]
 800afac:	4619      	mov	r1, r3
 800afae:	4610      	mov	r0, r2
 800afb0:	f7fe fb47 	bl	8009642 <create_chain>
 800afb4:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800afb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f000 8109 	beq.w	800b1d0 <f_write+0x2f6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800afbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d104      	bne.n	800afce <f_write+0xf4>
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2202      	movs	r2, #2
 800afc8:	745a      	strb	r2, [r3, #17]
 800afca:	2302      	movs	r3, #2
 800afcc:	e109      	b.n	800b1e2 <f_write+0x308>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800afce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd4:	d104      	bne.n	800afe0 <f_write+0x106>
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2201      	movs	r2, #1
 800afda:	745a      	strb	r2, [r3, #17]
 800afdc:	2301      	movs	r3, #1
 800afde:	e100      	b.n	800b1e2 <f_write+0x308>
				fp->clust = clst;			/* Update current cluster */
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800afe4:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d102      	bne.n	800aff4 <f_write+0x11a>
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aff2:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	7c1b      	ldrb	r3, [r3, #16]
 800aff8:	b25b      	sxtb	r3, r3
 800affa:	2b00      	cmp	r3, #0
 800affc:	da18      	bge.n	800b030 <f_write+0x156>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	7858      	ldrb	r0, [r3, #1]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	69da      	ldr	r2, [r3, #28]
 800b00c:	2301      	movs	r3, #1
 800b00e:	f7fd fe75 	bl	8008cfc <disk_write>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d004      	beq.n	800b022 <f_write+0x148>
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2201      	movs	r2, #1
 800b01c:	745a      	strb	r2, [r3, #17]
 800b01e:	2301      	movs	r3, #1
 800b020:	e0df      	b.n	800b1e2 <f_write+0x308>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	7c1b      	ldrb	r3, [r3, #16]
 800b026:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b02a:	b2da      	uxtb	r2, r3
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800b030:	693a      	ldr	r2, [r7, #16]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	699b      	ldr	r3, [r3, #24]
 800b036:	4619      	mov	r1, r3
 800b038:	4610      	mov	r0, r2
 800b03a:	f7fe f891 	bl	8009160 <clst2sect>
 800b03e:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d104      	bne.n	800b050 <f_write+0x176>
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2202      	movs	r2, #2
 800b04a:	745a      	strb	r2, [r3, #17]
 800b04c:	2302      	movs	r3, #2
 800b04e:	e0c8      	b.n	800b1e2 <f_write+0x308>
			sect += csect;
 800b050:	697a      	ldr	r2, [r7, #20]
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	4413      	add	r3, r2
 800b056:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	899b      	ldrh	r3, [r3, #12]
 800b05c:	461a      	mov	r2, r3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	fbb3 f3f2 	udiv	r3, r3, r2
 800b064:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 800b066:	6a3b      	ldr	r3, [r7, #32]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d043      	beq.n	800b0f4 <f_write+0x21a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b06c:	69ba      	ldr	r2, [r7, #24]
 800b06e:	6a3b      	ldr	r3, [r7, #32]
 800b070:	4413      	add	r3, r2
 800b072:	693a      	ldr	r2, [r7, #16]
 800b074:	8952      	ldrh	r2, [r2, #10]
 800b076:	4293      	cmp	r3, r2
 800b078:	d905      	bls.n	800b086 <f_write+0x1ac>
					cc = fs->csize - csect;
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	895b      	ldrh	r3, [r3, #10]
 800b07e:	461a      	mov	r2, r3
 800b080:	69bb      	ldr	r3, [r7, #24]
 800b082:	1ad3      	subs	r3, r2, r3
 800b084:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	7858      	ldrb	r0, [r3, #1]
 800b08a:	6a3b      	ldr	r3, [r7, #32]
 800b08c:	697a      	ldr	r2, [r7, #20]
 800b08e:	69f9      	ldr	r1, [r7, #28]
 800b090:	f7fd fe34 	bl	8008cfc <disk_write>
 800b094:	4603      	mov	r3, r0
 800b096:	2b00      	cmp	r3, #0
 800b098:	d004      	beq.n	800b0a4 <f_write+0x1ca>
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2201      	movs	r2, #1
 800b09e:	745a      	strb	r2, [r3, #17]
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	e09e      	b.n	800b1e2 <f_write+0x308>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	69da      	ldr	r2, [r3, #28]
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	6a3a      	ldr	r2, [r7, #32]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d918      	bls.n	800b0e4 <f_write+0x20a>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	69da      	ldr	r2, [r3, #28]
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	1ad3      	subs	r3, r2, r3
 800b0c0:	693a      	ldr	r2, [r7, #16]
 800b0c2:	8992      	ldrh	r2, [r2, #12]
 800b0c4:	fb02 f303 	mul.w	r3, r2, r3
 800b0c8:	69fa      	ldr	r2, [r7, #28]
 800b0ca:	18d1      	adds	r1, r2, r3
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	899b      	ldrh	r3, [r3, #12]
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	f00c fc69 	bl	80179a8 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	7c1b      	ldrb	r3, [r3, #16]
 800b0da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0de:	b2da      	uxtb	r2, r3
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	899b      	ldrh	r3, [r3, #12]
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	6a3b      	ldr	r3, [r7, #32]
 800b0ec:	fb02 f303 	mul.w	r3, r2, r3
 800b0f0:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800b0f2:	e04b      	b.n	800b18c <f_write+0x2b2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	69db      	ldr	r3, [r3, #28]
 800b0f8:	697a      	ldr	r2, [r7, #20]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d016      	beq.n	800b12c <f_write+0x252>
				fp->fptr < fp->obj.objsize &&
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	695a      	ldr	r2, [r3, #20]
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b106:	429a      	cmp	r2, r3
 800b108:	d210      	bcs.n	800b12c <f_write+0x252>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	7858      	ldrb	r0, [r3, #1]
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800b114:	2301      	movs	r3, #1
 800b116:	697a      	ldr	r2, [r7, #20]
 800b118:	f7fd fdbe 	bl	8008c98 <disk_read>
 800b11c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d004      	beq.n	800b12c <f_write+0x252>
					ABORT(fs, FR_DISK_ERR);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2201      	movs	r2, #1
 800b126:	745a      	strb	r2, [r3, #17]
 800b128:	2301      	movs	r3, #1
 800b12a:	e05a      	b.n	800b1e2 <f_write+0x308>
			}
#endif
			fp->sect = sect;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	697a      	ldr	r2, [r7, #20]
 800b130:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	899b      	ldrh	r3, [r3, #12]
 800b136:	4618      	mov	r0, r3
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	695b      	ldr	r3, [r3, #20]
 800b13c:	693a      	ldr	r2, [r7, #16]
 800b13e:	8992      	ldrh	r2, [r2, #12]
 800b140:	fbb3 f1f2 	udiv	r1, r3, r2
 800b144:	fb01 f202 	mul.w	r2, r1, r2
 800b148:	1a9b      	subs	r3, r3, r2
 800b14a:	1ac3      	subs	r3, r0, r3
 800b14c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b14e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	429a      	cmp	r2, r3
 800b154:	d901      	bls.n	800b15a <f_write+0x280>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	627b      	str	r3, [r7, #36]	@ 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	695b      	ldr	r3, [r3, #20]
 800b164:	693a      	ldr	r2, [r7, #16]
 800b166:	8992      	ldrh	r2, [r2, #12]
 800b168:	fbb3 f0f2 	udiv	r0, r3, r2
 800b16c:	fb00 f202 	mul.w	r2, r0, r2
 800b170:	1a9b      	subs	r3, r3, r2
 800b172:	440b      	add	r3, r1
 800b174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b176:	69f9      	ldr	r1, [r7, #28]
 800b178:	4618      	mov	r0, r3
 800b17a:	f00c fc15 	bl	80179a8 <memcpy>
		fp->flag |= FA_DIRTY;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	7c1b      	ldrb	r3, [r3, #16]
 800b182:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b186:	b2da      	uxtb	r2, r3
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	741a      	strb	r2, [r3, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b190:	1ad3      	subs	r3, r2, r3
 800b192:	607b      	str	r3, [r7, #4]
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b19a:	441a      	add	r2, r3
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	601a      	str	r2, [r3, #0]
 800b1a0:	69fa      	ldr	r2, [r7, #28]
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a4:	4413      	add	r3, r2
 800b1a6:	61fb      	str	r3, [r7, #28]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	695a      	ldr	r2, [r3, #20]
 800b1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ae:	441a      	add	r2, r3
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	615a      	str	r2, [r3, #20]
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	68da      	ldr	r2, [r3, #12]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	695b      	ldr	r3, [r3, #20]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	bf38      	it	cc
 800b1c0:	461a      	movcc	r2, r3
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	60da      	str	r2, [r3, #12]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	f47f aec1 	bne.w	800af50 <f_write+0x76>
 800b1ce:	e000      	b.n	800b1d2 <f_write+0x2f8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b1d0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	7c1b      	ldrb	r3, [r3, #16]
 800b1d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1da:	b2da      	uxtb	r2, r3
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 800b1e0:	2300      	movs	r3, #0
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3730      	adds	r7, #48	@ 0x30
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
	...

0800b1ec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b086      	sub	sp, #24
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f107 0208 	add.w	r2, r7, #8
 800b1fa:	4611      	mov	r1, r2
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7ff fb01 	bl	800a804 <validate>
 800b202:	4603      	mov	r3, r0
 800b204:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b206:	7dfb      	ldrb	r3, [r7, #23]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d167      	bne.n	800b2dc <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	7c1b      	ldrb	r3, [r3, #16]
 800b210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b214:	2b00      	cmp	r3, #0
 800b216:	d061      	beq.n	800b2dc <f_sync+0xf0>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	7c1b      	ldrb	r3, [r3, #16]
 800b21c:	b25b      	sxtb	r3, r3
 800b21e:	2b00      	cmp	r3, #0
 800b220:	da15      	bge.n	800b24e <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	7858      	ldrb	r0, [r3, #1]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	69da      	ldr	r2, [r3, #28]
 800b230:	2301      	movs	r3, #1
 800b232:	f7fd fd63 	bl	8008cfc <disk_write>
 800b236:	4603      	mov	r3, r0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d001      	beq.n	800b240 <f_sync+0x54>
 800b23c:	2301      	movs	r3, #1
 800b23e:	e04e      	b.n	800b2de <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	7c1b      	ldrb	r3, [r3, #16]
 800b244:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b248:	b2da      	uxtb	r2, r3
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b24e:	4b26      	ldr	r3, [pc, #152]	@ (800b2e8 <f_sync+0xfc>)
 800b250:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b252:	68ba      	ldr	r2, [r7, #8]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6a1b      	ldr	r3, [r3, #32]
 800b258:	4619      	mov	r1, r3
 800b25a:	4610      	mov	r0, r2
 800b25c:	f7fd fee5 	bl	800902a <move_window>
 800b260:	4603      	mov	r3, r0
 800b262:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b264:	7dfb      	ldrb	r3, [r7, #23]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d138      	bne.n	800b2dc <f_sync+0xf0>
					dir = fp->dir_ptr;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b26e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	330b      	adds	r3, #11
 800b274:	781a      	ldrb	r2, [r3, #0]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	330b      	adds	r3, #11
 800b27a:	f042 0220 	orr.w	r2, r2, #32
 800b27e:	b2d2      	uxtb	r2, r2
 800b280:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6818      	ldr	r0, [r3, #0]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	689b      	ldr	r3, [r3, #8]
 800b28a:	461a      	mov	r2, r3
 800b28c:	68f9      	ldr	r1, [r7, #12]
 800b28e:	f7fe fc86 	bl	8009b9e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f103 021c 	add.w	r2, r3, #28
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	4619      	mov	r1, r3
 800b29e:	4610      	mov	r0, r2
 800b2a0:	f7fd fe39 	bl	8008f16 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	3316      	adds	r3, #22
 800b2a8:	6939      	ldr	r1, [r7, #16]
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f7fd fe33 	bl	8008f16 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	3312      	adds	r3, #18
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7fd fe12 	bl	8008ee0 <st_word>
					fs->wflag = 1;
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7fd fedd 	bl	8009084 <sync_fs>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	7c1b      	ldrb	r3, [r3, #16]
 800b2d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b2d6:	b2da      	uxtb	r2, r3
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b2dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3718      	adds	r7, #24
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	54210000 	.word	0x54210000

0800b2ec <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f7ff ff79 	bl	800b1ec <f_sync>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b2fe:	7bfb      	ldrb	r3, [r7, #15]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d10e      	bne.n	800b322 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f107 0208 	add.w	r2, r7, #8
 800b30a:	4611      	mov	r1, r2
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7ff fa79 	bl	800a804 <validate>
 800b312:	4603      	mov	r3, r0
 800b314:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b316:	7bfb      	ldrb	r3, [r7, #15]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d102      	bne.n	800b322 <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b322:	7bfb      	ldrb	r3, [r7, #15]
}
 800b324:	4618      	mov	r0, r3
 800b326:	3710      	adds	r7, #16
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b09c      	sub	sp, #112	@ 0x70
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;
	DIR dj, sdj;
	DWORD dclst = 0;
 800b334:	2300      	movs	r3, #0
 800b336:	66bb      	str	r3, [r7, #104]	@ 0x68
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
 800b338:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 800b33c:	1d3b      	adds	r3, r7, #4
 800b33e:	2202      	movs	r2, #2
 800b340:	4618      	mov	r0, r3
 800b342:	f7ff f839 	bl	800a3b8 <mount_volume>
 800b346:	4603      	mov	r3, r0
 800b348:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (res == FR_OK) {
 800b34c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800b350:	2b00      	cmp	r3, #0
 800b352:	f040 8083 	bne.w	800b45c <f_unlink+0x130>
		dj.obj.fs = fs;
 800b356:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b358:	63bb      	str	r3, [r7, #56]	@ 0x38
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800b360:	4611      	mov	r1, r2
 800b362:	4618      	mov	r0, r3
 800b364:	f7fe fe16 	bl	8009f94 <follow_path>
 800b368:	4603      	mov	r3, r0
 800b36a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if FF_FS_LOCK
		if (res == FR_OK) res = chk_share(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800b36e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800b372:	2b00      	cmp	r3, #0
 800b374:	d172      	bne.n	800b45c <f_unlink+0x130>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800b376:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800b37a:	b25b      	sxtb	r3, r3
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	da03      	bge.n	800b388 <f_unlink+0x5c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800b380:	2306      	movs	r3, #6
 800b382:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800b386:	e008      	b.n	800b39a <f_unlink+0x6e>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800b388:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800b38c:	f003 0301 	and.w	r3, r3, #1
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <f_unlink+0x6e>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800b394:	2307      	movs	r3, #7
 800b396:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				}
			}
			if (res == FR_OK) {
 800b39a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d134      	bne.n	800b40c <f_unlink+0xe0>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800b3a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b3a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b3a6:	4611      	mov	r1, r2
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7fe fbd9 	bl	8009b60 <ld_clust>
 800b3ae:	66b8      	str	r0, [r7, #104]	@ 0x68
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800b3b0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800b3b4:	f003 0310 	and.w	r3, r3, #16
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d027      	beq.n	800b40c <f_unlink+0xe0>
					if (dclst == fs->cdir) {	 	/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;			/* Open the sub-directory */
 800b3bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b3be:	60fb      	str	r3, [r7, #12]
						sdj.obj.sclust = dclst;
 800b3c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b3c2:	617b      	str	r3, [r7, #20]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800b3c4:	f107 030c 	add.w	r3, r7, #12
 800b3c8:	2100      	movs	r1, #0
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7fe fa52 	bl	8009874 <dir_sdi>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
						if (res == FR_OK) {
 800b3d6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d116      	bne.n	800b40c <f_unlink+0xe0>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
 800b3de:	f107 030c 	add.w	r3, r7, #12
 800b3e2:	2100      	movs	r1, #0
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7fe fbfa 	bl	8009bde <dir_read>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800b3f0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d102      	bne.n	800b3fe <f_unlink+0xd2>
 800b3f8:	2307      	movs	r3, #7
 800b3fa:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800b3fe:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800b402:	2b04      	cmp	r3, #4
 800b404:	d102      	bne.n	800b40c <f_unlink+0xe0>
 800b406:	2300      	movs	r3, #0
 800b408:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
						}
					}
				}
			}
			if (res == FR_OK) {
 800b40c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800b410:	2b00      	cmp	r3, #0
 800b412:	d123      	bne.n	800b45c <f_unlink+0x130>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800b414:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800b418:	4618      	mov	r0, r3
 800b41a:	f7fe fcc4 	bl	8009da6 <dir_remove>
 800b41e:	4603      	mov	r3, r0
 800b420:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
 800b424:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d10c      	bne.n	800b446 <f_unlink+0x11a>
 800b42c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d009      	beq.n	800b446 <f_unlink+0x11a>
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800b432:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800b436:	2200      	movs	r2, #0
 800b438:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7fe f89c 	bl	8009578 <remove_chain>
 800b440:	4603      	mov	r3, r0
 800b442:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800b446:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d106      	bne.n	800b45c <f_unlink+0x130>
 800b44e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b450:	4618      	mov	r0, r3
 800b452:	f7fd fe17 	bl	8009084 <sync_fs>
 800b456:	4603      	mov	r3, r0
 800b458:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b45c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800b460:	4618      	mov	r0, r3
 800b462:	3770      	adds	r7, #112	@ 0x70
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID for each partition (for only MBR) */
	BYTE *buf			/* Working buffer for a sector */
)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b08e      	sub	sp, #56	@ 0x38
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60b9      	str	r1, [r7, #8]
 800b470:	607b      	str	r3, [r7, #4]
 800b472:	4603      	mov	r3, r0
 800b474:	73fb      	strb	r3, [r7, #15]
 800b476:	4613      	mov	r3, r2
 800b478:	73bb      	strb	r3, [r7, #14]
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 800b47a:	f107 0210 	add.w	r2, r7, #16
 800b47e:	7bfb      	ldrb	r3, [r7, #15]
 800b480:	2101      	movs	r1, #1
 800b482:	4618      	mov	r0, r3
 800b484:	f7fd fc6e 	bl	8008d64 <disk_ioctl>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d001      	beq.n	800b492 <create_partition+0x2a>
 800b48e:	2301      	movs	r3, #1
 800b490:	e108      	b.n	800b6a4 <create_partition+0x23c>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	623b      	str	r3, [r7, #32]
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
 800b496:	233f      	movs	r3, #63	@ 0x3f
 800b498:	77fb      	strb	r3, [r7, #31]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 800b49a:	2308      	movs	r3, #8
 800b49c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b4a0:	e004      	b.n	800b4ac <create_partition+0x44>
 800b4a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4a6:	005b      	lsls	r3, r3, #1
 800b4a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b4ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d00a      	beq.n	800b4ca <create_partition+0x62>
 800b4b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4b8:	6a3a      	ldr	r2, [r7, #32]
 800b4ba:	fbb2 f2f3 	udiv	r2, r2, r3
 800b4be:	7ffb      	ldrb	r3, [r7, #31]
 800b4c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4c8:	d8eb      	bhi.n	800b4a2 <create_partition+0x3a>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 800b4ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d102      	bne.n	800b4d8 <create_partition+0x70>
 800b4d2:	23ff      	movs	r3, #255	@ 0xff
 800b4d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 800b4d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b4dc:	2100      	movs	r1, #0
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f00c f9de 	bl	80178a0 <memset>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b4ea:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4f0:	7ffb      	ldrb	r3, [r7, #31]
 800b4f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4f4:	e0b5      	b.n	800b662 <create_partition+0x1fa>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 800b4f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	68ba      	ldr	r2, [r7, #8]
 800b4fc:	4413      	add	r3, r2
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 800b502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b504:	2b64      	cmp	r3, #100	@ 0x64
 800b506:	d80d      	bhi.n	800b524 <create_partition+0xbc>
 800b508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b50a:	2b64      	cmp	r3, #100	@ 0x64
 800b50c:	d008      	beq.n	800b520 <create_partition+0xb8>
 800b50e:	6a3b      	ldr	r3, [r7, #32]
 800b510:	4a66      	ldr	r2, [pc, #408]	@ (800b6ac <create_partition+0x244>)
 800b512:	fba2 2303 	umull	r2, r3, r2, r3
 800b516:	095b      	lsrs	r3, r3, #5
 800b518:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b51a:	fb02 f303 	mul.w	r3, r2, r3
 800b51e:	e000      	b.n	800b522 <create_partition+0xba>
 800b520:	6a3b      	ldr	r3, [r7, #32]
 800b522:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 800b524:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b528:	4413      	add	r3, r2
 800b52a:	6a3a      	ldr	r2, [r7, #32]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d305      	bcc.n	800b53c <create_partition+0xd4>
 800b530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b534:	4413      	add	r3, r2
 800b536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b538:	429a      	cmp	r2, r3
 800b53a:	d903      	bls.n	800b544 <create_partition+0xdc>
 800b53c:	6a3a      	ldr	r2, [r7, #32]
 800b53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b540:	1ad3      	subs	r3, r2, r3
 800b542:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800b544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b546:	2b00      	cmp	r3, #0
 800b548:	f000 8097 	beq.w	800b67a <create_partition+0x212>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 800b54c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b54e:	3308      	adds	r3, #8
 800b550:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b552:	4618      	mov	r0, r3
 800b554:	f7fd fcdf 	bl	8008f16 <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 800b558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b55a:	330c      	adds	r3, #12
 800b55c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b55e:	4618      	mov	r0, r3
 800b560:	f7fd fcd9 	bl	8008f16 <st_dword>
			pte[PTE_System] = sys;					/* System type */
 800b564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b566:	3304      	adds	r3, #4
 800b568:	7bba      	ldrb	r2, [r7, #14]
 800b56a:	701a      	strb	r2, [r3, #0]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 800b56c:	7ffb      	ldrb	r3, [r7, #31]
 800b56e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b570:	fbb2 f2f3 	udiv	r2, r2, r3
 800b574:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b578:	fbb2 f3f3 	udiv	r3, r2, r3
 800b57c:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 800b57e:	7ffb      	ldrb	r3, [r7, #31]
 800b580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b582:	fbb2 f3f3 	udiv	r3, r2, r3
 800b586:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b58a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b58e:	fb01 f202 	mul.w	r2, r1, r2
 800b592:	1a9b      	subs	r3, r3, r2
 800b594:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 800b596:	7ffa      	ldrb	r2, [r7, #31]
 800b598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b59a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b59e:	fb01 f202 	mul.w	r2, r1, r2
 800b5a2:	1a9b      	subs	r3, r3, r2
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	75bb      	strb	r3, [r7, #22]
			pte[PTE_StHead] = hd;
 800b5aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	7dfa      	ldrb	r2, [r7, #23]
 800b5b0:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800b5b2:	69bb      	ldr	r3, [r7, #24]
 800b5b4:	089b      	lsrs	r3, r3, #2
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b5bc:	b2d9      	uxtb	r1, r3
 800b5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5c0:	3302      	adds	r3, #2
 800b5c2:	7dba      	ldrb	r2, [r7, #22]
 800b5c4:	430a      	orrs	r2, r1
 800b5c6:	b2d2      	uxtb	r2, r2
 800b5c8:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = (BYTE)cy;
 800b5ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5cc:	3303      	adds	r3, #3
 800b5ce:	69ba      	ldr	r2, [r7, #24]
 800b5d0:	b2d2      	uxtb	r2, r2
 800b5d2:	701a      	strb	r2, [r3, #0]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 800b5d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5d8:	4413      	add	r3, r2
 800b5da:	1e5a      	subs	r2, r3, #1
 800b5dc:	7ffb      	ldrb	r3, [r7, #31]
 800b5de:	fbb2 f2f3 	udiv	r2, r2, r3
 800b5e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5ea:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 800b5ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5f0:	4413      	add	r3, r2
 800b5f2:	1e5a      	subs	r2, r3, #1
 800b5f4:	7ffb      	ldrb	r3, [r7, #31]
 800b5f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5fa:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b5fe:	fbb3 f1f2 	udiv	r1, r3, r2
 800b602:	fb01 f202 	mul.w	r2, r1, r2
 800b606:	1a9b      	subs	r3, r3, r2
 800b608:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 800b60a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b60e:	4413      	add	r3, r2
 800b610:	3b01      	subs	r3, #1
 800b612:	7ffa      	ldrb	r2, [r7, #31]
 800b614:	fbb3 f1f2 	udiv	r1, r3, r2
 800b618:	fb01 f202 	mul.w	r2, r1, r2
 800b61c:	1a9b      	subs	r3, r3, r2
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	3301      	adds	r3, #1
 800b622:	75bb      	strb	r3, [r7, #22]
			pte[PTE_EdHead] = hd;
 800b624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b626:	3305      	adds	r3, #5
 800b628:	7dfa      	ldrb	r2, [r7, #23]
 800b62a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800b62c:	69bb      	ldr	r3, [r7, #24]
 800b62e:	089b      	lsrs	r3, r3, #2
 800b630:	b2db      	uxtb	r3, r3
 800b632:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b636:	b2d9      	uxtb	r1, r3
 800b638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b63a:	3306      	adds	r3, #6
 800b63c:	7dba      	ldrb	r2, [r7, #22]
 800b63e:	430a      	orrs	r2, r1
 800b640:	b2d2      	uxtb	r2, r2
 800b642:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)cy;
 800b644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b646:	3307      	adds	r3, #7
 800b648:	69ba      	ldr	r2, [r7, #24]
 800b64a:	b2d2      	uxtb	r2, r2
 800b64c:	701a      	strb	r2, [r3, #0]

			pte += SZ_PTE;		/* Next entry */
 800b64e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b650:	3310      	adds	r3, #16
 800b652:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800b654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b656:	3301      	adds	r3, #1
 800b658:	637b      	str	r3, [r7, #52]	@ 0x34
 800b65a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b65c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b65e:	4413      	add	r3, r2
 800b660:	633b      	str	r3, [r7, #48]	@ 0x30
 800b662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b664:	2b03      	cmp	r3, #3
 800b666:	d809      	bhi.n	800b67c <create_partition+0x214>
 800b668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d006      	beq.n	800b67c <create_partition+0x214>
 800b66e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b670:	6a3b      	ldr	r3, [r7, #32]
 800b672:	429a      	cmp	r2, r3
 800b674:	f4ff af3f 	bcc.w	800b4f6 <create_partition+0x8e>
 800b678:	e000      	b.n	800b67c <create_partition+0x214>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800b67a:	bf00      	nop
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b682:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b686:	4618      	mov	r0, r3
 800b688:	f7fd fc2a 	bl	8008ee0 <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800b68c:	7bf8      	ldrb	r0, [r7, #15]
 800b68e:	2301      	movs	r3, #1
 800b690:	2200      	movs	r2, #0
 800b692:	6879      	ldr	r1, [r7, #4]
 800b694:	f7fd fb32 	bl	8008cfc <disk_write>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d001      	beq.n	800b6a2 <create_partition+0x23a>
 800b69e:	2301      	movs	r3, #1
 800b6a0:	e000      	b.n	800b6a4 <create_partition+0x23c>
	}

	return FR_OK;
 800b6a2:	2300      	movs	r3, #0
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3738      	adds	r7, #56	@ 0x38
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	51eb851f 	.word	0x51eb851f

0800b6b0 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b09e      	sub	sp, #120	@ 0x78
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	607a      	str	r2, [r7, #4]
 800b6bc:	603b      	str	r3, [r7, #0]
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800b6be:	f107 030c 	add.w	r3, r7, #12
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7fe fcda 	bl	800a07c <get_ldnumber>
 800b6c8:	6478      	str	r0, [r7, #68]	@ 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800b6ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	da02      	bge.n	800b6d6 <f_mkfs+0x26>
 800b6d0:	230b      	movs	r3, #11
 800b6d2:	f000 bc39 	b.w	800bf48 <f_mkfs+0x898>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 800b6d6:	4a90      	ldr	r2, [pc, #576]	@ (800b918 <f_mkfs+0x268>)
 800b6d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d005      	beq.n	800b6ee <f_mkfs+0x3e>
 800b6e2:	4a8d      	ldr	r2, [pc, #564]	@ (800b918 <f_mkfs+0x268>)
 800b6e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 800b6ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6f0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 800b6fa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7fd faa2 	bl	8008c48 <disk_initialize>
 800b704:	4603      	mov	r3, r0
 800b706:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	if (ds & STA_NOINIT) return FR_NOT_READY;
 800b70a:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800b70e:	f003 0301 	and.w	r3, r3, #1
 800b712:	2b00      	cmp	r3, #0
 800b714:	d002      	beq.n	800b71c <f_mkfs+0x6c>
 800b716:	2303      	movs	r3, #3
 800b718:	f000 bc16 	b.w	800bf48 <f_mkfs+0x898>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 800b71c:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800b720:	f003 0304 	and.w	r3, r3, #4
 800b724:	2b00      	cmp	r3, #0
 800b726:	d002      	beq.n	800b72e <f_mkfs+0x7e>
 800b728:	230a      	movs	r3, #10
 800b72a:	f000 bc0d 	b.w	800bf48 <f_mkfs+0x898>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d101      	bne.n	800b738 <f_mkfs+0x88>
 800b734:	4b79      	ldr	r3, [pc, #484]	@ (800b91c <f_mkfs+0x26c>)
 800b736:	60bb      	str	r3, [r7, #8]
	sz_blk = opt->align;
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	61fb      	str	r3, [r7, #28]
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the paramter or lower layer */
 800b73e:	69fb      	ldr	r3, [r7, #28]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d107      	bne.n	800b754 <f_mkfs+0xa4>
 800b744:	f107 021c 	add.w	r2, r7, #28
 800b748:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b74c:	2103      	movs	r1, #3
 800b74e:	4618      	mov	r0, r3
 800b750:	f7fd fb08 	bl	8008d64 <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d009      	beq.n	800b76e <f_mkfs+0xbe>
 800b75a:	69fb      	ldr	r3, [r7, #28]
 800b75c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b760:	d805      	bhi.n	800b76e <f_mkfs+0xbe>
 800b762:	69fb      	ldr	r3, [r7, #28]
 800b764:	1e5a      	subs	r2, r3, #1
 800b766:	69fb      	ldr	r3, [r7, #28]
 800b768:	4013      	ands	r3, r2
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d001      	beq.n	800b772 <f_mkfs+0xc2>
 800b76e:	2301      	movs	r3, #1
 800b770:	61fb      	str	r3, [r7, #28]
#if FF_MAX_SS != FF_MIN_SS
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 800b772:	f107 0220 	add.w	r2, r7, #32
 800b776:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b77a:	2102      	movs	r1, #2
 800b77c:	4618      	mov	r0, r3
 800b77e:	f7fd faf1 	bl	8008d64 <disk_ioctl>
 800b782:	4603      	mov	r3, r0
 800b784:	2b00      	cmp	r3, #0
 800b786:	d001      	beq.n	800b78c <f_mkfs+0xdc>
 800b788:	2301      	movs	r3, #1
 800b78a:	e3dd      	b.n	800bf48 <f_mkfs+0x898>
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 800b78c:	8c3b      	ldrh	r3, [r7, #32]
 800b78e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b792:	d80a      	bhi.n	800b7aa <f_mkfs+0xfa>
 800b794:	8c3b      	ldrh	r3, [r7, #32]
 800b796:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b79a:	d306      	bcc.n	800b7aa <f_mkfs+0xfa>
 800b79c:	8c3b      	ldrh	r3, [r7, #32]
 800b79e:	461a      	mov	r2, r3
 800b7a0:	8c3b      	ldrh	r3, [r7, #32]
 800b7a2:	3b01      	subs	r3, #1
 800b7a4:	4013      	ands	r3, r2
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d001      	beq.n	800b7ae <f_mkfs+0xfe>
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e3cc      	b.n	800bf48 <f_mkfs+0x898>
#else
	ss = FF_MAX_SS;
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	f003 030f 	and.w	r3, r3, #15
 800b7b6:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	785b      	ldrb	r3, [r3, #1]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d006      	beq.n	800b7d0 <f_mkfs+0x120>
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	785b      	ldrb	r3, [r3, #1]
 800b7c6:	2b02      	cmp	r3, #2
 800b7c8:	d802      	bhi.n	800b7d0 <f_mkfs+0x120>
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	785b      	ldrb	r3, [r3, #1]
 800b7ce:	e000      	b.n	800b7d2 <f_mkfs+0x122>
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	689b      	ldr	r3, [r3, #8]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d013      	beq.n	800b804 <f_mkfs+0x154>
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b7e4:	d80e      	bhi.n	800b804 <f_mkfs+0x154>
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	8c3a      	ldrh	r2, [r7, #32]
 800b7ec:	0952      	lsrs	r2, r2, #5
 800b7ee:	b292      	uxth	r2, r2
 800b7f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7f4:	fb01 f202 	mul.w	r2, r1, r2
 800b7f8:	1a9b      	subs	r3, r3, r2
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d102      	bne.n	800b804 <f_mkfs+0x154>
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	e001      	b.n	800b808 <f_mkfs+0x158>
 800b804:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b808:	63bb      	str	r3, [r7, #56]	@ 0x38
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	68db      	ldr	r3, [r3, #12]
 800b80e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b812:	d80a      	bhi.n	800b82a <f_mkfs+0x17a>
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	68da      	ldr	r2, [r3, #12]
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	3b01      	subs	r3, #1
 800b81e:	4013      	ands	r3, r2
 800b820:	2b00      	cmp	r3, #0
 800b822:	d102      	bne.n	800b82a <f_mkfs+0x17a>
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	68db      	ldr	r3, [r3, #12]
 800b828:	e000      	b.n	800b82c <f_mkfs+0x17c>
 800b82a:	2300      	movs	r3, #0
 800b82c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sz_au /= ss;	/* Byte --> Sector */
 800b82e:	8c3b      	ldrh	r3, [r7, #32]
 800b830:	461a      	mov	r2, r3
 800b832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b834:	fbb3 f3f2 	udiv	r3, r3, r2
 800b838:	64fb      	str	r3, [r7, #76]	@ 0x4c

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 800b83a:	8c3b      	ldrh	r3, [r7, #32]
 800b83c:	461a      	mov	r2, r3
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	fbb3 f3f2 	udiv	r3, r3, r2
 800b844:	637b      	str	r3, [r7, #52]	@ 0x34
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 800b846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d101      	bne.n	800b850 <f_mkfs+0x1a0>
 800b84c:	2311      	movs	r3, #17
 800b84e:	e37b      	b.n	800bf48 <f_mkfs+0x898>
	buf = (BYTE*)work;		/* Working buffer */
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	633b      	str	r3, [r7, #48]	@ 0x30
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 800b854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b856:	2b00      	cmp	r3, #0
 800b858:	d101      	bne.n	800b85e <f_mkfs+0x1ae>
 800b85a:	2311      	movs	r3, #17
 800b85c:	e374      	b.n	800bf48 <f_mkfs+0x898>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 800b85e:	2300      	movs	r3, #0
 800b860:	61bb      	str	r3, [r7, #24]
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	66fb      	str	r3, [r7, #108]	@ 0x6c
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800b866:	f107 0218 	add.w	r2, r7, #24
 800b86a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b86e:	2101      	movs	r1, #1
 800b870:	4618      	mov	r0, r3
 800b872:	f7fd fa77 	bl	8008d64 <disk_ioctl>
 800b876:	4603      	mov	r3, r0
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d001      	beq.n	800b880 <f_mkfs+0x1d0>
 800b87c:	2301      	movs	r3, #1
 800b87e:	e363      	b.n	800bf48 <f_mkfs+0x898>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 800b880:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800b884:	f003 0308 	and.w	r3, r3, #8
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d108      	bne.n	800b89e <f_mkfs+0x1ee>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	2b3f      	cmp	r3, #63	@ 0x3f
 800b890:	d905      	bls.n	800b89e <f_mkfs+0x1ee>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 800b892:	233f      	movs	r3, #63	@ 0x3f
 800b894:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b896:	69ba      	ldr	r2, [r7, #24]
 800b898:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b89a:	1ad3      	subs	r3, r2, r3
 800b89c:	61bb      	str	r3, [r7, #24]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 800b89e:	69bb      	ldr	r3, [r7, #24]
 800b8a0:	2b7f      	cmp	r3, #127	@ 0x7f
 800b8a2:	d801      	bhi.n	800b8a8 <f_mkfs+0x1f8>
 800b8a4:	230e      	movs	r3, #14
 800b8a6:	e34f      	b.n	800bf48 <f_mkfs+0x898>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 800b8a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8aa:	2b80      	cmp	r3, #128	@ 0x80
 800b8ac:	d901      	bls.n	800b8b2 <f_mkfs+0x202>
 800b8ae:	2380      	movs	r3, #128	@ 0x80
 800b8b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 800b8b2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800b8b6:	f003 0302 	and.w	r3, r3, #2
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d009      	beq.n	800b8d2 <f_mkfs+0x222>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 800b8be:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800b8c2:	f003 0301 	and.w	r3, r3, #1
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d103      	bne.n	800b8d2 <f_mkfs+0x222>
				fsty = FS_FAT32; break;
 800b8ca:	2303      	movs	r3, #3
 800b8cc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800b8d0:	e00a      	b.n	800b8e8 <f_mkfs+0x238>
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 800b8d2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800b8d6:	f003 0301 	and.w	r3, r3, #1
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d101      	bne.n	800b8e2 <f_mkfs+0x232>
 800b8de:	2313      	movs	r3, #19
 800b8e0:	e332      	b.n	800bf48 <f_mkfs+0x898>
		fsty = FS_FAT16;
 800b8e2:	2302      	movs	r3, #2
 800b8e4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	f103 43a8 	add.w	r3, r3, #1409286144	@ 0x54000000
 800b8ee:	f503 1304 	add.w	r3, r3, #2162688	@ 0x210000
 800b8f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
 800b8f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8f6:	663b      	str	r3, [r7, #96]	@ 0x60
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 800b8f8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b8fc:	2b03      	cmp	r3, #3
 800b8fe:	d141      	bne.n	800b984 <f_mkfs+0x2d4>
				if (pau == 0) {	/* AU auto-selection */
 800b900:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b902:	2b00      	cmp	r3, #0
 800b904:	d120      	bne.n	800b948 <f_mkfs+0x298>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800b906:	69bb      	ldr	r3, [r7, #24]
 800b908:	0c5b      	lsrs	r3, r3, #17
 800b90a:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b90c:	2300      	movs	r3, #0
 800b90e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b910:	2301      	movs	r3, #1
 800b912:	663b      	str	r3, [r7, #96]	@ 0x60
 800b914:	e00a      	b.n	800b92c <f_mkfs+0x27c>
 800b916:	bf00      	nop
 800b918:	20005c70 	.word	0x20005c70
 800b91c:	08019390 	.word	0x08019390
 800b920:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b922:	3301      	adds	r3, #1
 800b924:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b926:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b928:	005b      	lsls	r3, r3, #1
 800b92a:	663b      	str	r3, [r7, #96]	@ 0x60
 800b92c:	4a95      	ldr	r2, [pc, #596]	@ (800bb84 <f_mkfs+0x4d4>)
 800b92e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d007      	beq.n	800b948 <f_mkfs+0x298>
 800b938:	4a92      	ldr	r2, [pc, #584]	@ (800bb84 <f_mkfs+0x4d4>)
 800b93a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b93c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b940:	461a      	mov	r2, r3
 800b942:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b944:	4293      	cmp	r3, r2
 800b946:	d2eb      	bcs.n	800b920 <f_mkfs+0x270>
				}
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 800b948:	69ba      	ldr	r2, [r7, #24]
 800b94a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b94c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b950:	62bb      	str	r3, [r7, #40]	@ 0x28
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800b952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b954:	3302      	adds	r3, #2
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	8c3a      	ldrh	r2, [r7, #32]
 800b95a:	4413      	add	r3, r2
 800b95c:	3b01      	subs	r3, #1
 800b95e:	8c3a      	ldrh	r2, [r7, #32]
 800b960:	fbb3 f3f2 	udiv	r3, r3, r2
 800b964:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 800b966:	2320      	movs	r3, #32
 800b968:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = 0;		/* No static directory */
 800b96a:	2300      	movs	r3, #0
 800b96c:	653b      	str	r3, [r7, #80]	@ 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800b96e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b970:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b974:	4293      	cmp	r3, r2
 800b976:	d903      	bls.n	800b980 <f_mkfs+0x2d0>
 800b978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b97a:	4a83      	ldr	r2, [pc, #524]	@ (800bb88 <f_mkfs+0x4d8>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d94b      	bls.n	800ba18 <f_mkfs+0x368>
 800b980:	230e      	movs	r3, #14
 800b982:	e2e1      	b.n	800bf48 <f_mkfs+0x898>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 800b984:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b986:	2b00      	cmp	r3, #0
 800b988:	d11b      	bne.n	800b9c2 <f_mkfs+0x312>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800b98a:	69bb      	ldr	r3, [r7, #24]
 800b98c:	0b1b      	lsrs	r3, r3, #12
 800b98e:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b990:	2300      	movs	r3, #0
 800b992:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b994:	2301      	movs	r3, #1
 800b996:	663b      	str	r3, [r7, #96]	@ 0x60
 800b998:	e005      	b.n	800b9a6 <f_mkfs+0x2f6>
 800b99a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b99c:	3301      	adds	r3, #1
 800b99e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b9a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b9a2:	005b      	lsls	r3, r3, #1
 800b9a4:	663b      	str	r3, [r7, #96]	@ 0x60
 800b9a6:	4a79      	ldr	r2, [pc, #484]	@ (800bb8c <f_mkfs+0x4dc>)
 800b9a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d007      	beq.n	800b9c2 <f_mkfs+0x312>
 800b9b2:	4a76      	ldr	r2, [pc, #472]	@ (800bb8c <f_mkfs+0x4dc>)
 800b9b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d2eb      	bcs.n	800b99a <f_mkfs+0x2ea>
				}
				n_clst = (DWORD)sz_vol / pau;
 800b9c2:	69ba      	ldr	r2, [r7, #24]
 800b9c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b9c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9ca:	62bb      	str	r3, [r7, #40]	@ 0x28
				if (n_clst > MAX_FAT12) {
 800b9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9ce:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d904      	bls.n	800b9e0 <f_mkfs+0x330>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800b9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9d8:	3302      	adds	r3, #2
 800b9da:	005b      	lsls	r3, r3, #1
 800b9dc:	667b      	str	r3, [r7, #100]	@ 0x64
 800b9de:	e00a      	b.n	800b9f6 <f_mkfs+0x346>
				} else {
					fsty = FS_FAT12;
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800b9e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9e8:	4613      	mov	r3, r2
 800b9ea:	005b      	lsls	r3, r3, #1
 800b9ec:	4413      	add	r3, r2
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	085b      	lsrs	r3, r3, #1
 800b9f2:	3303      	adds	r3, #3
 800b9f4:	667b      	str	r3, [r7, #100]	@ 0x64
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800b9f6:	8c3b      	ldrh	r3, [r7, #32]
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b9fc:	4413      	add	r3, r2
 800b9fe:	3b01      	subs	r3, #1
 800ba00:	8c3a      	ldrh	r2, [r7, #32]
 800ba02:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba06:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 800ba08:	2301      	movs	r3, #1
 800ba0a:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 800ba0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba0e:	015b      	lsls	r3, r3, #5
 800ba10:	8c3a      	ldrh	r2, [r7, #32]
 800ba12:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba16:	653b      	str	r3, [r7, #80]	@ 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800ba18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ba1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba1c:	4413      	add	r3, r2
 800ba1e:	66bb      	str	r3, [r7, #104]	@ 0x68
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800ba20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba22:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ba24:	fb03 f202 	mul.w	r2, r3, r2
 800ba28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba2a:	4413      	add	r3, r2
 800ba2c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ba2e:	4413      	add	r3, r2
 800ba30:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 800ba32:	69fa      	ldr	r2, [r7, #28]
 800ba34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba36:	4413      	add	r3, r2
 800ba38:	1e5a      	subs	r2, r3, #1
 800ba3a:	69fb      	ldr	r3, [r7, #28]
 800ba3c:	425b      	negs	r3, r3
 800ba3e:	401a      	ands	r2, r3
 800ba40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba42:	1ad3      	subs	r3, r2, r3
 800ba44:	667b      	str	r3, [r7, #100]	@ 0x64
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 800ba46:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ba4a:	2b03      	cmp	r3, #3
 800ba4c:	d108      	bne.n	800ba60 <f_mkfs+0x3b0>
				sz_rsv += n; b_fat += n;
 800ba4e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800ba50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba52:	4413      	add	r3, r2
 800ba54:	677b      	str	r3, [r7, #116]	@ 0x74
 800ba56:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ba58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba5a:	4413      	add	r3, r2
 800ba5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ba5e:	e019      	b.n	800ba94 <f_mkfs+0x3e4>
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
 800ba60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba62:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ba64:	fbb3 f2f2 	udiv	r2, r3, r2
 800ba68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ba6a:	fb01 f202 	mul.w	r2, r1, r2
 800ba6e:	1a9b      	subs	r3, r3, r2
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d008      	beq.n	800ba86 <f_mkfs+0x3d6>
					n--; sz_rsv++; b_fat++;
 800ba74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba76:	3b01      	subs	r3, #1
 800ba78:	667b      	str	r3, [r7, #100]	@ 0x64
 800ba7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	677b      	str	r3, [r7, #116]	@ 0x74
 800ba80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba82:	3301      	adds	r3, #1
 800ba84:	66bb      	str	r3, [r7, #104]	@ 0x68
				}
				sz_fat += n / n_fat;
 800ba86:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ba88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba8e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ba90:	4413      	add	r3, r2
 800ba92:	657b      	str	r3, [r7, #84]	@ 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 800ba94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba96:	011a      	lsls	r2, r3, #4
 800ba98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba9a:	441a      	add	r2, r3
 800ba9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba9e:	1ad2      	subs	r2, r2, r3
 800baa0:	69bb      	ldr	r3, [r7, #24]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d901      	bls.n	800baaa <f_mkfs+0x3fa>
 800baa6:	230e      	movs	r3, #14
 800baa8:	e24e      	b.n	800bf48 <f_mkfs+0x898>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 800baaa:	69ba      	ldr	r2, [r7, #24]
 800baac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800baae:	1ad2      	subs	r2, r2, r3
 800bab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bab2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bab4:	fb01 f303 	mul.w	r3, r1, r3
 800bab8:	1ad2      	subs	r2, r2, r3
 800baba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800babc:	1ad2      	subs	r2, r2, r3
 800babe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bac0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bac4:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (fsty == FS_FAT32) {
 800bac6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800baca:	2b03      	cmp	r3, #3
 800bacc:	d10f      	bne.n	800baee <f_mkfs+0x43e>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 800bace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bad0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d80a      	bhi.n	800baee <f_mkfs+0x43e>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800bad8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bada:	2b00      	cmp	r3, #0
 800badc:	d105      	bne.n	800baea <f_mkfs+0x43a>
 800bade:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bae0:	085b      	lsrs	r3, r3, #1
 800bae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d145      	bne.n	800bb76 <f_mkfs+0x4c6>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800baea:	230e      	movs	r3, #14
 800baec:	e22c      	b.n	800bf48 <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT16) {
 800baee:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800baf2:	2b02      	cmp	r3, #2
 800baf4:	d134      	bne.n	800bb60 <f_mkfs+0x4b0>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800baf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baf8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d91f      	bls.n	800bb40 <f_mkfs+0x490>
					if (sz_au == 0 && (pau * 2) <= 64) {
 800bb00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d107      	bne.n	800bb16 <f_mkfs+0x466>
 800bb06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bb08:	005b      	lsls	r3, r3, #1
 800bb0a:	2b40      	cmp	r3, #64	@ 0x40
 800bb0c:	d803      	bhi.n	800bb16 <f_mkfs+0x466>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 800bb0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bb10:	005b      	lsls	r3, r3, #1
 800bb12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb14:	e034      	b.n	800bb80 <f_mkfs+0x4d0>
					}
					if ((fsopt & FM_FAT32)) {
 800bb16:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800bb1a:	f003 0302 	and.w	r3, r3, #2
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d003      	beq.n	800bb2a <f_mkfs+0x47a>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800bb22:	2303      	movs	r3, #3
 800bb24:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800bb28:	e02a      	b.n	800bb80 <f_mkfs+0x4d0>
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bb2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d105      	bne.n	800bb3c <f_mkfs+0x48c>
 800bb30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bb32:	005b      	lsls	r3, r3, #1
 800bb34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb38:	2b80      	cmp	r3, #128	@ 0x80
 800bb3a:	d91e      	bls.n	800bb7a <f_mkfs+0x4ca>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800bb3c:	230e      	movs	r3, #14
 800bb3e:	e203      	b.n	800bf48 <f_mkfs+0x898>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800bb40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb42:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d80a      	bhi.n	800bb60 <f_mkfs+0x4b0>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bb4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d105      	bne.n	800bb5c <f_mkfs+0x4ac>
 800bb50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bb52:	005b      	lsls	r3, r3, #1
 800bb54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb58:	2b80      	cmp	r3, #128	@ 0x80
 800bb5a:	d910      	bls.n	800bb7e <f_mkfs+0x4ce>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800bb5c:	230e      	movs	r3, #14
 800bb5e:	e1f3      	b.n	800bf48 <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 800bb60:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d113      	bne.n	800bb90 <f_mkfs+0x4e0>
 800bb68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb6a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d90e      	bls.n	800bb90 <f_mkfs+0x4e0>
 800bb72:	230e      	movs	r3, #14
 800bb74:	e1e8      	b.n	800bf48 <f_mkfs+0x898>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800bb76:	bf00      	nop
 800bb78:	e6bc      	b.n	800b8f4 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bb7a:	bf00      	nop
 800bb7c:	e6ba      	b.n	800b8f4 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bb7e:	bf00      	nop
			pau = sz_au;
 800bb80:	e6b8      	b.n	800b8f4 <f_mkfs+0x244>
 800bb82:	bf00      	nop
 800bb84:	080193a0 	.word	0x080193a0
 800bb88:	0ffffff5 	.word	0x0ffffff5
 800bb8c:	080193b0 	.word	0x080193b0

			/* Ok, it is the valid cluster configuration */
			break;
 800bb90:	bf00      	nop
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
 800bb92:	8c3b      	ldrh	r3, [r7, #32]
 800bb94:	461a      	mov	r2, r3
 800bb96:	2100      	movs	r1, #0
 800bb98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bb9a:	f00b fe81 	bl	80178a0 <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 800bb9e:	220b      	movs	r2, #11
 800bba0:	49b1      	ldr	r1, [pc, #708]	@ (800be68 <f_mkfs+0x7b8>)
 800bba2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bba4:	f00b ff00 	bl	80179a8 <memcpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800bba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbaa:	330b      	adds	r3, #11
 800bbac:	8c3a      	ldrh	r2, [r7, #32]
 800bbae:	4611      	mov	r1, r2
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f7fd f995 	bl	8008ee0 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800bbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbb8:	330d      	adds	r3, #13
 800bbba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bbbc:	b2d2      	uxtb	r2, r2
 800bbbe:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800bbc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbc2:	330e      	adds	r3, #14
 800bbc4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800bbc6:	b292      	uxth	r2, r2
 800bbc8:	4611      	mov	r1, r2
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7fd f988 	bl	8008ee0 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 800bbd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbd2:	3310      	adds	r3, #16
 800bbd4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bbd6:	b2d2      	uxtb	r2, r2
 800bbd8:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 800bbda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbdc:	f103 0211 	add.w	r2, r3, #17
 800bbe0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800bbe4:	2b03      	cmp	r3, #3
 800bbe6:	d002      	beq.n	800bbee <f_mkfs+0x53e>
 800bbe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbea:	b29b      	uxth	r3, r3
 800bbec:	e000      	b.n	800bbf0 <f_mkfs+0x540>
 800bbee:	2300      	movs	r3, #0
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	4610      	mov	r0, r2
 800bbf4:	f7fd f974 	bl	8008ee0 <st_word>
		if (sz_vol < 0x10000) {
 800bbf8:	69bb      	ldr	r3, [r7, #24]
 800bbfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bbfe:	d208      	bcs.n	800bc12 <f_mkfs+0x562>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800bc00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc02:	3313      	adds	r3, #19
 800bc04:	69ba      	ldr	r2, [r7, #24]
 800bc06:	b292      	uxth	r2, r2
 800bc08:	4611      	mov	r1, r2
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7fd f968 	bl	8008ee0 <st_word>
 800bc10:	e006      	b.n	800bc20 <f_mkfs+0x570>
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 800bc12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc14:	3320      	adds	r3, #32
 800bc16:	69ba      	ldr	r2, [r7, #24]
 800bc18:	4611      	mov	r1, r2
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7fd f97b 	bl	8008f16 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800bc20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc22:	3315      	adds	r3, #21
 800bc24:	22f8      	movs	r2, #248	@ 0xf8
 800bc26:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800bc28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc2a:	3318      	adds	r3, #24
 800bc2c:	213f      	movs	r1, #63	@ 0x3f
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7fd f956 	bl	8008ee0 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800bc34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc36:	331a      	adds	r3, #26
 800bc38:	21ff      	movs	r1, #255	@ 0xff
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7fd f950 	bl	8008ee0 <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 800bc40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc42:	331c      	adds	r3, #28
 800bc44:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fd f965 	bl	8008f16 <st_dword>
		if (fsty == FS_FAT32) {
 800bc4c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800bc50:	2b03      	cmp	r3, #3
 800bc52:	d12d      	bne.n	800bcb0 <f_mkfs+0x600>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 800bc54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc56:	3343      	adds	r3, #67	@ 0x43
 800bc58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fd f95b 	bl	8008f16 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800bc60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc62:	3324      	adds	r3, #36	@ 0x24
 800bc64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bc66:	4618      	mov	r0, r3
 800bc68:	f7fd f955 	bl	8008f16 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800bc6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc6e:	332c      	adds	r3, #44	@ 0x2c
 800bc70:	2102      	movs	r1, #2
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7fd f94f 	bl	8008f16 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800bc78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc7a:	3330      	adds	r3, #48	@ 0x30
 800bc7c:	2101      	movs	r1, #1
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7fd f92e 	bl	8008ee0 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800bc84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc86:	3332      	adds	r3, #50	@ 0x32
 800bc88:	2106      	movs	r1, #6
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7fd f928 	bl	8008ee0 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800bc90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc92:	3340      	adds	r3, #64	@ 0x40
 800bc94:	2280      	movs	r2, #128	@ 0x80
 800bc96:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800bc98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc9a:	3342      	adds	r3, #66	@ 0x42
 800bc9c:	2229      	movs	r2, #41	@ 0x29
 800bc9e:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800bca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bca2:	3347      	adds	r3, #71	@ 0x47
 800bca4:	2213      	movs	r2, #19
 800bca6:	4971      	ldr	r1, [pc, #452]	@ (800be6c <f_mkfs+0x7bc>)
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f00b fe7d 	bl	80179a8 <memcpy>
 800bcae:	e01c      	b.n	800bcea <f_mkfs+0x63a>
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 800bcb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcb2:	3327      	adds	r3, #39	@ 0x27
 800bcb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7fd f92d 	bl	8008f16 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800bcbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcbe:	3316      	adds	r3, #22
 800bcc0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bcc2:	b292      	uxth	r2, r2
 800bcc4:	4611      	mov	r1, r2
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7fd f90a 	bl	8008ee0 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800bccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcce:	3324      	adds	r3, #36	@ 0x24
 800bcd0:	2280      	movs	r2, #128	@ 0x80
 800bcd2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800bcd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd6:	3326      	adds	r3, #38	@ 0x26
 800bcd8:	2229      	movs	r2, #41	@ 0x29
 800bcda:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800bcdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcde:	332b      	adds	r3, #43	@ 0x2b
 800bce0:	2213      	movs	r2, #19
 800bce2:	4963      	ldr	r1, [pc, #396]	@ (800be70 <f_mkfs+0x7c0>)
 800bce4:	4618      	mov	r0, r3
 800bce6:	f00b fe5f 	bl	80179a8 <memcpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800bcea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcec:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bcf0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f7fd f8f3 	bl	8008ee0 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 800bcfa:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800bcfe:	2301      	movs	r3, #1
 800bd00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bd02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bd04:	f7fc fffa 	bl	8008cfc <disk_write>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d001      	beq.n	800bd12 <f_mkfs+0x662>
 800bd0e:	2301      	movs	r3, #1
 800bd10:	e11a      	b.n	800bf48 <f_mkfs+0x898>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 800bd12:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800bd16:	2b03      	cmp	r3, #3
 800bd18:	d140      	bne.n	800bd9c <f_mkfs+0x6ec>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800bd1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd1c:	1d9a      	adds	r2, r3, #6
 800bd1e:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800bd22:	2301      	movs	r3, #1
 800bd24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bd26:	f7fc ffe9 	bl	8008cfc <disk_write>
			memset(buf, 0, ss);
 800bd2a:	8c3b      	ldrh	r3, [r7, #32]
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	2100      	movs	r1, #0
 800bd30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bd32:	f00b fdb5 	bl	80178a0 <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800bd36:	494f      	ldr	r1, [pc, #316]	@ (800be74 <f_mkfs+0x7c4>)
 800bd38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bd3a:	f7fd f8ec 	bl	8008f16 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800bd3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd40:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bd44:	494c      	ldr	r1, [pc, #304]	@ (800be78 <f_mkfs+0x7c8>)
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7fd f8e5 	bl	8008f16 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800bd4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd4e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800bd52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd54:	3b01      	subs	r3, #1
 800bd56:	4619      	mov	r1, r3
 800bd58:	4610      	mov	r0, r2
 800bd5a:	f7fd f8dc 	bl	8008f16 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800bd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd60:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800bd64:	2102      	movs	r1, #2
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7fd f8d5 	bl	8008f16 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800bd6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd6e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bd72:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7fd f8b2 	bl	8008ee0 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800bd7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd7e:	1dda      	adds	r2, r3, #7
 800bd80:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800bd84:	2301      	movs	r3, #1
 800bd86:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bd88:	f7fc ffb8 	bl	8008cfc <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800bd8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd8e:	1c5a      	adds	r2, r3, #1
 800bd90:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800bd94:	2301      	movs	r3, #1
 800bd96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bd98:	f7fc ffb0 	bl	8008cfc <disk_write>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
 800bd9c:	8c3b      	ldrh	r3, [r7, #32]
 800bd9e:	461a      	mov	r2, r3
 800bda0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bda2:	fb02 f303 	mul.w	r3, r2, r3
 800bda6:	461a      	mov	r2, r3
 800bda8:	2100      	movs	r1, #0
 800bdaa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bdac:	f00b fd78 	bl	80178a0 <memset>
		sect = b_fat;		/* FAT start sector */
 800bdb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bdb2:	673b      	str	r3, [r7, #112]	@ 0x70
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bdb8:	e04b      	b.n	800be52 <f_mkfs+0x7a2>
			if (fsty == FS_FAT32) {
 800bdba:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800bdbe:	2b03      	cmp	r3, #3
 800bdc0:	d113      	bne.n	800bdea <f_mkfs+0x73a>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
 800bdc2:	f06f 0107 	mvn.w	r1, #7
 800bdc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bdc8:	f7fd f8a5 	bl	8008f16 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
 800bdcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdce:	3304      	adds	r3, #4
 800bdd0:	f04f 31ff 	mov.w	r1, #4294967295
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fd f89e 	bl	8008f16 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
 800bdda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bddc:	3308      	adds	r3, #8
 800bdde:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7fd f897 	bl	8008f16 <st_dword>
 800bde8:	e00b      	b.n	800be02 <f_mkfs+0x752>
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 800bdea:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800bdee:	2b01      	cmp	r3, #1
 800bdf0:	d101      	bne.n	800bdf6 <f_mkfs+0x746>
 800bdf2:	4b22      	ldr	r3, [pc, #136]	@ (800be7c <f_mkfs+0x7cc>)
 800bdf4:	e001      	b.n	800bdfa <f_mkfs+0x74a>
 800bdf6:	f06f 0307 	mvn.w	r3, #7
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bdfe:	f7fd f88a 	bl	8008f16 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800be02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be04:	65fb      	str	r3, [r7, #92]	@ 0x5c
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800be06:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800be08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be0a:	4293      	cmp	r3, r2
 800be0c:	bf28      	it	cs
 800be0e:	4613      	movcs	r3, r2
 800be10:	667b      	str	r3, [r7, #100]	@ 0x64
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800be12:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800be16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be18:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800be1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800be1c:	f7fc ff6e 	bl	8008cfc <disk_write>
 800be20:	4603      	mov	r3, r0
 800be22:	2b00      	cmp	r3, #0
 800be24:	d001      	beq.n	800be2a <f_mkfs+0x77a>
 800be26:	2301      	movs	r3, #1
 800be28:	e08e      	b.n	800bf48 <f_mkfs+0x898>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
 800be2a:	8c3b      	ldrh	r3, [r7, #32]
 800be2c:	461a      	mov	r2, r3
 800be2e:	2100      	movs	r1, #0
 800be30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800be32:	f00b fd35 	bl	80178a0 <memset>
				sect += n; nsect -= n;
 800be36:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800be38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be3a:	4413      	add	r3, r2
 800be3c:	673b      	str	r3, [r7, #112]	@ 0x70
 800be3e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800be40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be42:	1ad3      	subs	r3, r2, r3
 800be44:	65fb      	str	r3, [r7, #92]	@ 0x5c
			} while (nsect);
 800be46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d1dc      	bne.n	800be06 <f_mkfs+0x756>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800be4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be4e:	3301      	adds	r3, #1
 800be50:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be56:	429a      	cmp	r2, r3
 800be58:	d3af      	bcc.n	800bdba <f_mkfs+0x70a>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800be5a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800be5e:	2b03      	cmp	r3, #3
 800be60:	d10e      	bne.n	800be80 <f_mkfs+0x7d0>
 800be62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800be64:	e00d      	b.n	800be82 <f_mkfs+0x7d2>
 800be66:	bf00      	nop
 800be68:	08018fe0 	.word	0x08018fe0
 800be6c:	08018fec 	.word	0x08018fec
 800be70:	08019000 	.word	0x08019000
 800be74:	41615252 	.word	0x41615252
 800be78:	61417272 	.word	0x61417272
 800be7c:	00fffff8 	.word	0x00fffff8
 800be80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be82:	65fb      	str	r3, [r7, #92]	@ 0x5c
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800be84:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800be86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be88:	4293      	cmp	r3, r2
 800be8a:	bf28      	it	cs
 800be8c:	4613      	movcs	r3, r2
 800be8e:	667b      	str	r3, [r7, #100]	@ 0x64
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800be90:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800be94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be96:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800be98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800be9a:	f7fc ff2f 	bl	8008cfc <disk_write>
 800be9e:	4603      	mov	r3, r0
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d001      	beq.n	800bea8 <f_mkfs+0x7f8>
 800bea4:	2301      	movs	r3, #1
 800bea6:	e04f      	b.n	800bf48 <f_mkfs+0x898>
			sect += n; nsect -= n;
 800bea8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800beaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800beac:	4413      	add	r3, r2
 800beae:	673b      	str	r3, [r7, #112]	@ 0x70
 800beb0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800beb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800beb4:	1ad3      	subs	r3, r2, r3
 800beb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
		} while (nsect);
 800beb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d1e2      	bne.n	800be84 <f_mkfs+0x7d4>
	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;		/* exFAT */
	} else if (fsty == FS_FAT32) {
 800bebe:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800bec2:	2b03      	cmp	r3, #3
 800bec4:	d103      	bne.n	800bece <f_mkfs+0x81e>
		sys = 0x0C;		/* FAT32X */
 800bec6:	230c      	movs	r3, #12
 800bec8:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800becc:	e012      	b.n	800bef4 <f_mkfs+0x844>
	} else if (sz_vol >= 0x10000) {
 800bece:	69bb      	ldr	r3, [r7, #24]
 800bed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bed4:	d303      	bcc.n	800bede <f_mkfs+0x82e>
		sys = 0x06;		/* FAT12/16 (large) */
 800bed6:	2306      	movs	r3, #6
 800bed8:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800bedc:	e00a      	b.n	800bef4 <f_mkfs+0x844>
	} else if (fsty == FS_FAT16) {
 800bede:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800bee2:	2b02      	cmp	r3, #2
 800bee4:	d103      	bne.n	800beee <f_mkfs+0x83e>
		sys = 0x04;		/* FAT16 */
 800bee6:	2304      	movs	r3, #4
 800bee8:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800beec:	e002      	b.n	800bef4 <f_mkfs+0x844>
	} else {
		sys = 0x01;		/* FAT12 */
 800beee:	2301      	movs	r3, #1
 800bef0:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 800bef4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800bef8:	f003 0308 	and.w	r3, r3, #8
 800befc:	2b00      	cmp	r3, #0
 800befe:	d116      	bne.n	800bf2e <f_mkfs+0x87e>
			lba[0] = sz_vol; lba[1] = 0;
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	613b      	str	r3, [r7, #16]
 800bf04:	2300      	movs	r3, #0
 800bf06:	617b      	str	r3, [r7, #20]
			res = create_partition(pdrv, lba, sys, buf);
 800bf08:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 800bf0c:	f107 0110 	add.w	r1, r7, #16
 800bf10:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800bf14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf16:	f7ff faa7 	bl	800b468 <create_partition>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			if (res != FR_OK) LEAVE_MKFS(res);
 800bf20:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d002      	beq.n	800bf2e <f_mkfs+0x87e>
 800bf28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bf2c:	e00c      	b.n	800bf48 <f_mkfs+0x898>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800bf2e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bf32:	2200      	movs	r2, #0
 800bf34:	2100      	movs	r1, #0
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7fc ff14 	bl	8008d64 <disk_ioctl>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d001      	beq.n	800bf46 <f_mkfs+0x896>
 800bf42:	2301      	movs	r3, #1
 800bf44:	e000      	b.n	800bf48 <f_mkfs+0x898>

	LEAVE_MKFS(FR_OK);
 800bf46:	2300      	movs	r3, #0
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3778      	adds	r7, #120	@ 0x78
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800bf50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800bf88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800bf54:	f7fc fe3e 	bl	8008bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800bf58:	480c      	ldr	r0, [pc, #48]	@ (800bf8c <LoopForever+0x6>)
  ldr r1, =_edata
 800bf5a:	490d      	ldr	r1, [pc, #52]	@ (800bf90 <LoopForever+0xa>)
  ldr r2, =_sidata
 800bf5c:	4a0d      	ldr	r2, [pc, #52]	@ (800bf94 <LoopForever+0xe>)
  movs r3, #0
 800bf5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800bf60:	e002      	b.n	800bf68 <LoopCopyDataInit>

0800bf62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800bf62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800bf64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800bf66:	3304      	adds	r3, #4

0800bf68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800bf68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800bf6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800bf6c:	d3f9      	bcc.n	800bf62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800bf6e:	4a0a      	ldr	r2, [pc, #40]	@ (800bf98 <LoopForever+0x12>)
  ldr r4, =_ebss
 800bf70:	4c0a      	ldr	r4, [pc, #40]	@ (800bf9c <LoopForever+0x16>)
  movs r3, #0
 800bf72:	2300      	movs	r3, #0
  b LoopFillZerobss
 800bf74:	e001      	b.n	800bf7a <LoopFillZerobss>

0800bf76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800bf76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800bf78:	3204      	adds	r2, #4

0800bf7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800bf7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800bf7c:	d3fb      	bcc.n	800bf76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800bf7e:	f00b fce5 	bl	801794c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800bf82:	f7f8 fe63 	bl	8004c4c <main>

0800bf86 <LoopForever>:

LoopForever:
    b LoopForever
 800bf86:	e7fe      	b.n	800bf86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800bf88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800bf8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800bf90:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800bf94:	08019520 	.word	0x08019520
  ldr r2, =_sbss
 800bf98:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800bf9c:	20005dc8 	.word	0x20005dc8

0800bfa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800bfa0:	e7fe      	b.n	800bfa0 <ADC1_2_IRQHandler>

0800bfa2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b082      	sub	sp, #8
 800bfa6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bfac:	2003      	movs	r0, #3
 800bfae:	f001 fd11 	bl	800d9d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800bfb2:	200f      	movs	r0, #15
 800bfb4:	f000 f80e 	bl	800bfd4 <HAL_InitTick>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d002      	beq.n	800bfc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	71fb      	strb	r3, [r7, #7]
 800bfc2:	e001      	b.n	800bfc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800bfc4:	f7fc f8f8 	bl	80081b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800bfc8:	79fb      	ldrb	r3, [r7, #7]
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3708      	adds	r7, #8
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
	...

0800bfd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800bfe0:	4b17      	ldr	r3, [pc, #92]	@ (800c040 <HAL_InitTick+0x6c>)
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d023      	beq.n	800c030 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800bfe8:	4b16      	ldr	r3, [pc, #88]	@ (800c044 <HAL_InitTick+0x70>)
 800bfea:	681a      	ldr	r2, [r3, #0]
 800bfec:	4b14      	ldr	r3, [pc, #80]	@ (800c040 <HAL_InitTick+0x6c>)
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	4619      	mov	r1, r3
 800bff2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bff6:	fbb3 f3f1 	udiv	r3, r3, r1
 800bffa:	fbb2 f3f3 	udiv	r3, r2, r3
 800bffe:	4618      	mov	r0, r3
 800c000:	f001 fd21 	bl	800da46 <HAL_SYSTICK_Config>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d10f      	bne.n	800c02a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2b0f      	cmp	r3, #15
 800c00e:	d809      	bhi.n	800c024 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c010:	2200      	movs	r2, #0
 800c012:	6879      	ldr	r1, [r7, #4]
 800c014:	f04f 30ff 	mov.w	r0, #4294967295
 800c018:	f001 fce7 	bl	800d9ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800c01c:	4a0a      	ldr	r2, [pc, #40]	@ (800c048 <HAL_InitTick+0x74>)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6013      	str	r3, [r2, #0]
 800c022:	e007      	b.n	800c034 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800c024:	2301      	movs	r3, #1
 800c026:	73fb      	strb	r3, [r7, #15]
 800c028:	e004      	b.n	800c034 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800c02a:	2301      	movs	r3, #1
 800c02c:	73fb      	strb	r3, [r7, #15]
 800c02e:	e001      	b.n	800c034 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800c030:	2301      	movs	r3, #1
 800c032:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800c034:	7bfb      	ldrb	r3, [r7, #15]
}
 800c036:	4618      	mov	r0, r3
 800c038:	3710      	adds	r7, #16
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	20000010 	.word	0x20000010
 800c044:	20000000 	.word	0x20000000
 800c048:	2000000c 	.word	0x2000000c

0800c04c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c04c:	b480      	push	{r7}
 800c04e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800c050:	4b06      	ldr	r3, [pc, #24]	@ (800c06c <HAL_IncTick+0x20>)
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	461a      	mov	r2, r3
 800c056:	4b06      	ldr	r3, [pc, #24]	@ (800c070 <HAL_IncTick+0x24>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4413      	add	r3, r2
 800c05c:	4a04      	ldr	r2, [pc, #16]	@ (800c070 <HAL_IncTick+0x24>)
 800c05e:	6013      	str	r3, [r2, #0]
}
 800c060:	bf00      	nop
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr
 800c06a:	bf00      	nop
 800c06c:	20000010 	.word	0x20000010
 800c070:	20005c7c 	.word	0x20005c7c

0800c074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c074:	b480      	push	{r7}
 800c076:	af00      	add	r7, sp, #0
  return uwTick;
 800c078:	4b03      	ldr	r3, [pc, #12]	@ (800c088 <HAL_GetTick+0x14>)
 800c07a:	681b      	ldr	r3, [r3, #0]
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr
 800c086:	bf00      	nop
 800c088:	20005c7c 	.word	0x20005c7c

0800c08c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c094:	f7ff ffee 	bl	800c074 <HAL_GetTick>
 800c098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0a4:	d005      	beq.n	800c0b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800c0a6:	4b0a      	ldr	r3, [pc, #40]	@ (800c0d0 <HAL_Delay+0x44>)
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	4413      	add	r3, r2
 800c0b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800c0b2:	bf00      	nop
 800c0b4:	f7ff ffde 	bl	800c074 <HAL_GetTick>
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	1ad3      	subs	r3, r2, r3
 800c0be:	68fa      	ldr	r2, [r7, #12]
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d8f7      	bhi.n	800c0b4 <HAL_Delay+0x28>
  {
  }
}
 800c0c4:	bf00      	nop
 800c0c6:	bf00      	nop
 800c0c8:	3710      	adds	r7, #16
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	20000010 	.word	0x20000010

0800c0d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b083      	sub	sp, #12
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	689b      	ldr	r3, [r3, #8]
 800c0e2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	431a      	orrs	r2, r3
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	609a      	str	r2, [r3, #8]
}
 800c0ee:	bf00      	nop
 800c0f0:	370c      	adds	r7, #12
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr

0800c0fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800c0fa:	b480      	push	{r7}
 800c0fc:	b083      	sub	sp, #12
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
 800c102:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	431a      	orrs	r2, r3
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	609a      	str	r2, [r3, #8]
}
 800c114:	bf00      	nop
 800c116:	370c      	adds	r7, #12
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr

0800c120 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800c120:	b480      	push	{r7}
 800c122:	b083      	sub	sp, #12
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	689b      	ldr	r3, [r3, #8]
 800c12c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800c130:	4618      	mov	r0, r3
 800c132:	370c      	adds	r7, #12
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr

0800c13c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b087      	sub	sp, #28
 800c140:	af00      	add	r7, sp, #0
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	60b9      	str	r1, [r7, #8]
 800c146:	607a      	str	r2, [r7, #4]
 800c148:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	3360      	adds	r3, #96	@ 0x60
 800c14e:	461a      	mov	r2, r3
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	4413      	add	r3, r2
 800c156:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	681a      	ldr	r2, [r3, #0]
 800c15c:	4b08      	ldr	r3, [pc, #32]	@ (800c180 <LL_ADC_SetOffset+0x44>)
 800c15e:	4013      	ands	r3, r2
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800c166:	683a      	ldr	r2, [r7, #0]
 800c168:	430a      	orrs	r2, r1
 800c16a:	4313      	orrs	r3, r2
 800c16c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800c174:	bf00      	nop
 800c176:	371c      	adds	r7, #28
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr
 800c180:	03fff000 	.word	0x03fff000

0800c184 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800c184:	b480      	push	{r7}
 800c186:	b085      	sub	sp, #20
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	3360      	adds	r3, #96	@ 0x60
 800c192:	461a      	mov	r2, r3
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	4413      	add	r3, r2
 800c19a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3714      	adds	r7, #20
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr

0800c1b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b087      	sub	sp, #28
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	3360      	adds	r3, #96	@ 0x60
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	4413      	add	r3, r2
 800c1c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	431a      	orrs	r2, r3
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800c1da:	bf00      	nop
 800c1dc:	371c      	adds	r7, #28
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr

0800c1e6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800c1e6:	b480      	push	{r7}
 800c1e8:	b083      	sub	sp, #12
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d101      	bne.n	800c1fe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	e000      	b.n	800c200 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800c1fe:	2300      	movs	r3, #0
}
 800c200:	4618      	mov	r0, r3
 800c202:	370c      	adds	r7, #12
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr

0800c20c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b087      	sub	sp, #28
 800c210:	af00      	add	r7, sp, #0
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	3330      	adds	r3, #48	@ 0x30
 800c21c:	461a      	mov	r2, r3
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	0a1b      	lsrs	r3, r3, #8
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	f003 030c 	and.w	r3, r3, #12
 800c228:	4413      	add	r3, r2
 800c22a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	f003 031f 	and.w	r3, r3, #31
 800c236:	211f      	movs	r1, #31
 800c238:	fa01 f303 	lsl.w	r3, r1, r3
 800c23c:	43db      	mvns	r3, r3
 800c23e:	401a      	ands	r2, r3
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	0e9b      	lsrs	r3, r3, #26
 800c244:	f003 011f 	and.w	r1, r3, #31
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	f003 031f 	and.w	r3, r3, #31
 800c24e:	fa01 f303 	lsl.w	r3, r1, r3
 800c252:	431a      	orrs	r2, r3
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800c258:	bf00      	nop
 800c25a:	371c      	adds	r7, #28
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr

0800c264 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800c264:	b480      	push	{r7}
 800c266:	b087      	sub	sp, #28
 800c268:	af00      	add	r7, sp, #0
 800c26a:	60f8      	str	r0, [r7, #12]
 800c26c:	60b9      	str	r1, [r7, #8]
 800c26e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	3314      	adds	r3, #20
 800c274:	461a      	mov	r2, r3
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	0e5b      	lsrs	r3, r3, #25
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	f003 0304 	and.w	r3, r3, #4
 800c280:	4413      	add	r3, r2
 800c282:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	681a      	ldr	r2, [r3, #0]
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	0d1b      	lsrs	r3, r3, #20
 800c28c:	f003 031f 	and.w	r3, r3, #31
 800c290:	2107      	movs	r1, #7
 800c292:	fa01 f303 	lsl.w	r3, r1, r3
 800c296:	43db      	mvns	r3, r3
 800c298:	401a      	ands	r2, r3
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	0d1b      	lsrs	r3, r3, #20
 800c29e:	f003 031f 	and.w	r3, r3, #31
 800c2a2:	6879      	ldr	r1, [r7, #4]
 800c2a4:	fa01 f303 	lsl.w	r3, r1, r3
 800c2a8:	431a      	orrs	r2, r3
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800c2ae:	bf00      	nop
 800c2b0:	371c      	adds	r7, #28
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b8:	4770      	bx	lr
	...

0800c2bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b085      	sub	sp, #20
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	60f8      	str	r0, [r7, #12]
 800c2c4:	60b9      	str	r1, [r7, #8]
 800c2c6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2d4:	43db      	mvns	r3, r3
 800c2d6:	401a      	ands	r2, r3
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f003 0318 	and.w	r3, r3, #24
 800c2de:	4908      	ldr	r1, [pc, #32]	@ (800c300 <LL_ADC_SetChannelSingleDiff+0x44>)
 800c2e0:	40d9      	lsrs	r1, r3
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	400b      	ands	r3, r1
 800c2e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2ea:	431a      	orrs	r2, r3
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800c2f2:	bf00      	nop
 800c2f4:	3714      	adds	r7, #20
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr
 800c2fe:	bf00      	nop
 800c300:	0007ffff 	.word	0x0007ffff

0800c304 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800c304:	b480      	push	{r7}
 800c306:	b083      	sub	sp, #12
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	f003 031f 	and.w	r3, r3, #31
}
 800c314:	4618      	mov	r0, r3
 800c316:	370c      	adds	r7, #12
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr

0800c320 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800c320:	b480      	push	{r7}
 800c322:	b083      	sub	sp, #12
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800c330:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	6093      	str	r3, [r2, #8]
}
 800c338:	bf00      	nop
 800c33a:	370c      	adds	r7, #12
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800c344:	b480      	push	{r7}
 800c346:	b083      	sub	sp, #12
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	689b      	ldr	r3, [r3, #8]
 800c350:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c354:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c358:	d101      	bne.n	800c35e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800c35a:	2301      	movs	r3, #1
 800c35c:	e000      	b.n	800c360 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800c35e:	2300      	movs	r3, #0
}
 800c360:	4618      	mov	r0, r3
 800c362:	370c      	adds	r7, #12
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr

0800c36c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b083      	sub	sp, #12
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	689b      	ldr	r3, [r3, #8]
 800c378:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800c37c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c380:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800c388:	bf00      	nop
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	689b      	ldr	r3, [r3, #8]
 800c3a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c3a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c3a8:	d101      	bne.n	800c3ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	e000      	b.n	800c3b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800c3ae:	2300      	movs	r3, #0
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	370c      	adds	r7, #12
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b083      	sub	sp, #12
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	689b      	ldr	r3, [r3, #8]
 800c3c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c3cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c3d0:	f043 0201 	orr.w	r2, r3, #1
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800c3d8:	bf00      	nop
 800c3da:	370c      	adds	r7, #12
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c3f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c3f8:	f043 0202 	orr.w	r2, r3, #2
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800c400:	bf00      	nop
 800c402:	370c      	adds	r7, #12
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr

0800c40c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	f003 0301 	and.w	r3, r3, #1
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d101      	bne.n	800c424 <LL_ADC_IsEnabled+0x18>
 800c420:	2301      	movs	r3, #1
 800c422:	e000      	b.n	800c426 <LL_ADC_IsEnabled+0x1a>
 800c424:	2300      	movs	r3, #0
}
 800c426:	4618      	mov	r0, r3
 800c428:	370c      	adds	r7, #12
 800c42a:	46bd      	mov	sp, r7
 800c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c430:	4770      	bx	lr

0800c432 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800c432:	b480      	push	{r7}
 800c434:	b083      	sub	sp, #12
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	689b      	ldr	r3, [r3, #8]
 800c43e:	f003 0302 	and.w	r3, r3, #2
 800c442:	2b02      	cmp	r3, #2
 800c444:	d101      	bne.n	800c44a <LL_ADC_IsDisableOngoing+0x18>
 800c446:	2301      	movs	r3, #1
 800c448:	e000      	b.n	800c44c <LL_ADC_IsDisableOngoing+0x1a>
 800c44a:	2300      	movs	r3, #0
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	370c      	adds	r7, #12
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr

0800c458 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800c458:	b480      	push	{r7}
 800c45a:	b083      	sub	sp, #12
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	689b      	ldr	r3, [r3, #8]
 800c464:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c468:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c46c:	f043 0204 	orr.w	r2, r3, #4
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800c474:	bf00      	nop
 800c476:	370c      	adds	r7, #12
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr

0800c480 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c490:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c494:	f043 0210 	orr.w	r2, r3, #16
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800c49c:	bf00      	nop
 800c49e:	370c      	adds	r7, #12
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	689b      	ldr	r3, [r3, #8]
 800c4b4:	f003 0304 	and.w	r3, r3, #4
 800c4b8:	2b04      	cmp	r3, #4
 800c4ba:	d101      	bne.n	800c4c0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800c4bc:	2301      	movs	r3, #1
 800c4be:	e000      	b.n	800c4c2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800c4c0:	2300      	movs	r3, #0
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	370c      	adds	r7, #12
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4cc:	4770      	bx	lr

0800c4ce <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800c4ce:	b480      	push	{r7}
 800c4d0:	b083      	sub	sp, #12
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	689b      	ldr	r3, [r3, #8]
 800c4da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c4de:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c4e2:	f043 0220 	orr.w	r2, r3, #32
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800c4ea:	bf00      	nop
 800c4ec:	370c      	adds	r7, #12
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr

0800c4f6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800c4f6:	b480      	push	{r7}
 800c4f8:	b083      	sub	sp, #12
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	689b      	ldr	r3, [r3, #8]
 800c502:	f003 0308 	and.w	r3, r3, #8
 800c506:	2b08      	cmp	r3, #8
 800c508:	d101      	bne.n	800c50e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800c50a:	2301      	movs	r3, #1
 800c50c:	e000      	b.n	800c510 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800c50e:	2300      	movs	r3, #0
}
 800c510:	4618      	mov	r0, r3
 800c512:	370c      	adds	r7, #12
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr

0800c51c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800c51c:	b590      	push	{r4, r7, lr}
 800c51e:	b089      	sub	sp, #36	@ 0x24
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c524:	2300      	movs	r3, #0
 800c526:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800c528:	2300      	movs	r3, #0
 800c52a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d101      	bne.n	800c536 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800c532:	2301      	movs	r3, #1
 800c534:	e130      	b.n	800c798 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	691b      	ldr	r3, [r3, #16]
 800c53a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c540:	2b00      	cmp	r3, #0
 800c542:	d109      	bne.n	800c558 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f7fb fe5b 	bl	8008200 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2200      	movs	r2, #0
 800c54e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2200      	movs	r2, #0
 800c554:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7ff fef1 	bl	800c344 <LL_ADC_IsDeepPowerDownEnabled>
 800c562:	4603      	mov	r3, r0
 800c564:	2b00      	cmp	r3, #0
 800c566:	d004      	beq.n	800c572 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4618      	mov	r0, r3
 800c56e:	f7ff fed7 	bl	800c320 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4618      	mov	r0, r3
 800c578:	f7ff ff0c 	bl	800c394 <LL_ADC_IsInternalRegulatorEnabled>
 800c57c:	4603      	mov	r3, r0
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d115      	bne.n	800c5ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4618      	mov	r0, r3
 800c588:	f7ff fef0 	bl	800c36c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c58c:	4b84      	ldr	r3, [pc, #528]	@ (800c7a0 <HAL_ADC_Init+0x284>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	099b      	lsrs	r3, r3, #6
 800c592:	4a84      	ldr	r2, [pc, #528]	@ (800c7a4 <HAL_ADC_Init+0x288>)
 800c594:	fba2 2303 	umull	r2, r3, r2, r3
 800c598:	099b      	lsrs	r3, r3, #6
 800c59a:	3301      	adds	r3, #1
 800c59c:	005b      	lsls	r3, r3, #1
 800c59e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800c5a0:	e002      	b.n	800c5a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	3b01      	subs	r3, #1
 800c5a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d1f9      	bne.n	800c5a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7ff feee 	bl	800c394 <LL_ADC_IsInternalRegulatorEnabled>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d10d      	bne.n	800c5da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5c2:	f043 0210 	orr.w	r2, r3, #16
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5ce:	f043 0201 	orr.w	r2, r3, #1
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7ff ff62 	bl	800c4a8 <LL_ADC_REG_IsConversionOngoing>
 800c5e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5ea:	f003 0310 	and.w	r3, r3, #16
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	f040 80c9 	bne.w	800c786 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	f040 80c5 	bne.w	800c786 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c600:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800c604:	f043 0202 	orr.w	r2, r3, #2
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4618      	mov	r0, r3
 800c612:	f7ff fefb 	bl	800c40c <LL_ADC_IsEnabled>
 800c616:	4603      	mov	r3, r0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d115      	bne.n	800c648 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c61c:	4862      	ldr	r0, [pc, #392]	@ (800c7a8 <HAL_ADC_Init+0x28c>)
 800c61e:	f7ff fef5 	bl	800c40c <LL_ADC_IsEnabled>
 800c622:	4604      	mov	r4, r0
 800c624:	4861      	ldr	r0, [pc, #388]	@ (800c7ac <HAL_ADC_Init+0x290>)
 800c626:	f7ff fef1 	bl	800c40c <LL_ADC_IsEnabled>
 800c62a:	4603      	mov	r3, r0
 800c62c:	431c      	orrs	r4, r3
 800c62e:	4860      	ldr	r0, [pc, #384]	@ (800c7b0 <HAL_ADC_Init+0x294>)
 800c630:	f7ff feec 	bl	800c40c <LL_ADC_IsEnabled>
 800c634:	4603      	mov	r3, r0
 800c636:	4323      	orrs	r3, r4
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d105      	bne.n	800c648 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	685b      	ldr	r3, [r3, #4]
 800c640:	4619      	mov	r1, r3
 800c642:	485c      	ldr	r0, [pc, #368]	@ (800c7b4 <HAL_ADC_Init+0x298>)
 800c644:	f7ff fd46 	bl	800c0d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	7e5b      	ldrb	r3, [r3, #25]
 800c64c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800c652:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800c658:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800c65e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c666:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800c668:	4313      	orrs	r3, r2
 800c66a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c672:	2b01      	cmp	r3, #1
 800c674:	d106      	bne.n	800c684 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c67a:	3b01      	subs	r3, #1
 800c67c:	045b      	lsls	r3, r3, #17
 800c67e:	69ba      	ldr	r2, [r7, #24]
 800c680:	4313      	orrs	r3, r2
 800c682:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d009      	beq.n	800c6a0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c690:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c698:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800c69a:	69ba      	ldr	r2, [r7, #24]
 800c69c:	4313      	orrs	r3, r2
 800c69e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	68da      	ldr	r2, [r3, #12]
 800c6a6:	4b44      	ldr	r3, [pc, #272]	@ (800c7b8 <HAL_ADC_Init+0x29c>)
 800c6a8:	4013      	ands	r3, r2
 800c6aa:	687a      	ldr	r2, [r7, #4]
 800c6ac:	6812      	ldr	r2, [r2, #0]
 800c6ae:	69b9      	ldr	r1, [r7, #24]
 800c6b0:	430b      	orrs	r3, r1
 800c6b2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7ff ff1c 	bl	800c4f6 <LL_ADC_INJ_IsConversionOngoing>
 800c6be:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d13d      	bne.n	800c742 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d13a      	bne.n	800c742 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800c6d0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c6d8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800c6da:	4313      	orrs	r3, r2
 800c6dc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c6e8:	f023 0302 	bic.w	r3, r3, #2
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	6812      	ldr	r2, [r2, #0]
 800c6f0:	69b9      	ldr	r1, [r7, #24]
 800c6f2:	430b      	orrs	r3, r1
 800c6f4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	d118      	bne.n	800c732 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	691b      	ldr	r3, [r3, #16]
 800c706:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800c70a:	f023 0304 	bic.w	r3, r3, #4
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c716:	4311      	orrs	r1, r2
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800c71c:	4311      	orrs	r1, r2
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c722:	430a      	orrs	r2, r1
 800c724:	431a      	orrs	r2, r3
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f042 0201 	orr.w	r2, r2, #1
 800c72e:	611a      	str	r2, [r3, #16]
 800c730:	e007      	b.n	800c742 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	691a      	ldr	r2, [r3, #16]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f022 0201 	bic.w	r2, r2, #1
 800c740:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	691b      	ldr	r3, [r3, #16]
 800c746:	2b01      	cmp	r3, #1
 800c748:	d10c      	bne.n	800c764 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c750:	f023 010f 	bic.w	r1, r3, #15
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	69db      	ldr	r3, [r3, #28]
 800c758:	1e5a      	subs	r2, r3, #1
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	430a      	orrs	r2, r1
 800c760:	631a      	str	r2, [r3, #48]	@ 0x30
 800c762:	e007      	b.n	800c774 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f022 020f 	bic.w	r2, r2, #15
 800c772:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c778:	f023 0303 	bic.w	r3, r3, #3
 800c77c:	f043 0201 	orr.w	r2, r3, #1
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	655a      	str	r2, [r3, #84]	@ 0x54
 800c784:	e007      	b.n	800c796 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c78a:	f043 0210 	orr.w	r2, r3, #16
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800c792:	2301      	movs	r3, #1
 800c794:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800c796:	7ffb      	ldrb	r3, [r7, #31]
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3724      	adds	r7, #36	@ 0x24
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd90      	pop	{r4, r7, pc}
 800c7a0:	20000000 	.word	0x20000000
 800c7a4:	053e2d63 	.word	0x053e2d63
 800c7a8:	50040000 	.word	0x50040000
 800c7ac:	50040100 	.word	0x50040100
 800c7b0:	50040200 	.word	0x50040200
 800c7b4:	50040300 	.word	0x50040300
 800c7b8:	fff0c007 	.word	0xfff0c007

0800c7bc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b086      	sub	sp, #24
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c7c8:	4853      	ldr	r0, [pc, #332]	@ (800c918 <HAL_ADC_Start_DMA+0x15c>)
 800c7ca:	f7ff fd9b 	bl	800c304 <LL_ADC_GetMultimode>
 800c7ce:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f7ff fe67 	bl	800c4a8 <LL_ADC_REG_IsConversionOngoing>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	f040 8093 	bne.w	800c908 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c7e8:	2b01      	cmp	r3, #1
 800c7ea:	d101      	bne.n	800c7f0 <HAL_ADC_Start_DMA+0x34>
 800c7ec:	2302      	movs	r3, #2
 800c7ee:	e08e      	b.n	800c90e <HAL_ADC_Start_DMA+0x152>
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4a47      	ldr	r2, [pc, #284]	@ (800c91c <HAL_ADC_Start_DMA+0x160>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d008      	beq.n	800c814 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d005      	beq.n	800c814 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	2b05      	cmp	r3, #5
 800c80c:	d002      	beq.n	800c814 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	2b09      	cmp	r3, #9
 800c812:	d172      	bne.n	800c8fa <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800c814:	68f8      	ldr	r0, [r7, #12]
 800c816:	f000 fda7 	bl	800d368 <ADC_Enable>
 800c81a:	4603      	mov	r3, r0
 800c81c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800c81e:	7dfb      	ldrb	r3, [r7, #23]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d165      	bne.n	800c8f0 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c828:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c82c:	f023 0301 	bic.w	r3, r3, #1
 800c830:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4a38      	ldr	r2, [pc, #224]	@ (800c920 <HAL_ADC_Start_DMA+0x164>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d002      	beq.n	800c848 <HAL_ADC_Start_DMA+0x8c>
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	e000      	b.n	800c84a <HAL_ADC_Start_DMA+0x8e>
 800c848:	4b36      	ldr	r3, [pc, #216]	@ (800c924 <HAL_ADC_Start_DMA+0x168>)
 800c84a:	68fa      	ldr	r2, [r7, #12]
 800c84c:	6812      	ldr	r2, [r2, #0]
 800c84e:	4293      	cmp	r3, r2
 800c850:	d002      	beq.n	800c858 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d105      	bne.n	800c864 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c85c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c868:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d006      	beq.n	800c87e <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c874:	f023 0206 	bic.w	r2, r3, #6
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	659a      	str	r2, [r3, #88]	@ 0x58
 800c87c:	e002      	b.n	800c884 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2200      	movs	r2, #0
 800c882:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c888:	4a27      	ldr	r2, [pc, #156]	@ (800c928 <HAL_ADC_Start_DMA+0x16c>)
 800c88a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c890:	4a26      	ldr	r2, [pc, #152]	@ (800c92c <HAL_ADC_Start_DMA+0x170>)
 800c892:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c898:	4a25      	ldr	r2, [pc, #148]	@ (800c930 <HAL_ADC_Start_DMA+0x174>)
 800c89a:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	221c      	movs	r2, #28
 800c8a2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	685a      	ldr	r2, [r3, #4]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f042 0210 	orr.w	r2, r2, #16
 800c8ba:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	68da      	ldr	r2, [r3, #12]
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f042 0201 	orr.w	r2, r2, #1
 800c8ca:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	3340      	adds	r3, #64	@ 0x40
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	68ba      	ldr	r2, [r7, #8]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f001 fbb0 	bl	800e040 <HAL_DMA_Start_IT>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f7ff fdb5 	bl	800c458 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800c8ee:	e00d      	b.n	800c90c <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800c8f8:	e008      	b.n	800c90c <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2200      	movs	r2, #0
 800c902:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800c906:	e001      	b.n	800c90c <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800c908:	2302      	movs	r3, #2
 800c90a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800c90c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3718      	adds	r7, #24
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	50040300 	.word	0x50040300
 800c91c:	50040200 	.word	0x50040200
 800c920:	50040100 	.word	0x50040100
 800c924:	50040000 	.word	0x50040000
 800c928:	0800d533 	.word	0x0800d533
 800c92c:	0800d60b 	.word	0x0800d60b
 800c930:	0800d627 	.word	0x0800d627

0800c934 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b084      	sub	sp, #16
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c942:	2b01      	cmp	r3, #1
 800c944:	d101      	bne.n	800c94a <HAL_ADC_Stop_DMA+0x16>
 800c946:	2302      	movs	r3, #2
 800c948:	e051      	b.n	800c9ee <HAL_ADC_Stop_DMA+0xba>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2201      	movs	r2, #1
 800c94e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800c952:	2103      	movs	r1, #3
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 fc4b 	bl	800d1f0 <ADC_ConversionStop>
 800c95a:	4603      	mov	r3, r0
 800c95c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800c95e:	7bfb      	ldrb	r3, [r7, #15]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d13f      	bne.n	800c9e4 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	68da      	ldr	r2, [r3, #12]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f022 0201 	bic.w	r2, r2, #1
 800c972:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c978:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	2b02      	cmp	r3, #2
 800c980:	d10f      	bne.n	800c9a2 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c986:	4618      	mov	r0, r3
 800c988:	f001 fbba 	bl	800e100 <HAL_DMA_Abort>
 800c98c:	4603      	mov	r3, r0
 800c98e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800c990:	7bfb      	ldrb	r3, [r7, #15]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d005      	beq.n	800c9a2 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c99a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	685a      	ldr	r2, [r3, #4]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f022 0210 	bic.w	r2, r2, #16
 800c9b0:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800c9b2:	7bfb      	ldrb	r3, [r7, #15]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d105      	bne.n	800c9c4 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 fd5b 	bl	800d474 <ADC_Disable>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	73fb      	strb	r3, [r7, #15]
 800c9c2:	e002      	b.n	800c9ca <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f000 fd55 	bl	800d474 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800c9ca:	7bfb      	ldrb	r3, [r7, #15]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d109      	bne.n	800c9e4 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9d4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800c9d8:	f023 0301 	bic.w	r3, r3, #1
 800c9dc:	f043 0201 	orr.w	r2, r3, #1
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800c9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3710      	adds	r7, #16
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}

0800c9f6 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800c9f6:	b480      	push	{r7}
 800c9f8:	b083      	sub	sp, #12
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800c9fe:	bf00      	nop
 800ca00:	370c      	adds	r7, #12
 800ca02:	46bd      	mov	sp, r7
 800ca04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca08:	4770      	bx	lr
	...

0800ca0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b0b6      	sub	sp, #216	@ 0xd8
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ca16:	2300      	movs	r3, #0
 800ca18:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	d101      	bne.n	800ca2e <HAL_ADC_ConfigChannel+0x22>
 800ca2a:	2302      	movs	r3, #2
 800ca2c:	e3c9      	b.n	800d1c2 <HAL_ADC_ConfigChannel+0x7b6>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2201      	movs	r2, #1
 800ca32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f7ff fd34 	bl	800c4a8 <LL_ADC_REG_IsConversionOngoing>
 800ca40:	4603      	mov	r3, r0
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	f040 83aa 	bne.w	800d19c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	685b      	ldr	r3, [r3, #4]
 800ca4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	685b      	ldr	r3, [r3, #4]
 800ca54:	2b05      	cmp	r3, #5
 800ca56:	d824      	bhi.n	800caa2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	3b02      	subs	r3, #2
 800ca5e:	2b03      	cmp	r3, #3
 800ca60:	d81b      	bhi.n	800ca9a <HAL_ADC_ConfigChannel+0x8e>
 800ca62:	a201      	add	r2, pc, #4	@ (adr r2, 800ca68 <HAL_ADC_ConfigChannel+0x5c>)
 800ca64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca68:	0800ca79 	.word	0x0800ca79
 800ca6c:	0800ca81 	.word	0x0800ca81
 800ca70:	0800ca89 	.word	0x0800ca89
 800ca74:	0800ca91 	.word	0x0800ca91
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800ca78:	230c      	movs	r3, #12
 800ca7a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800ca7e:	e010      	b.n	800caa2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800ca80:	2312      	movs	r3, #18
 800ca82:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800ca86:	e00c      	b.n	800caa2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800ca88:	2318      	movs	r3, #24
 800ca8a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800ca8e:	e008      	b.n	800caa2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800ca90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ca94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800ca98:	e003      	b.n	800caa2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800ca9a:	2306      	movs	r3, #6
 800ca9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800caa0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6818      	ldr	r0, [r3, #0]
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	461a      	mov	r2, r3
 800caac:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800cab0:	f7ff fbac 	bl	800c20c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4618      	mov	r0, r3
 800caba:	f7ff fcf5 	bl	800c4a8 <LL_ADC_REG_IsConversionOngoing>
 800cabe:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7ff fd15 	bl	800c4f6 <LL_ADC_INJ_IsConversionOngoing>
 800cacc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800cad0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f040 81a4 	bne.w	800ce22 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800cada:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cade:	2b00      	cmp	r3, #0
 800cae0:	f040 819f 	bne.w	800ce22 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6818      	ldr	r0, [r3, #0]
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	6819      	ldr	r1, [r3, #0]
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	689b      	ldr	r3, [r3, #8]
 800caf0:	461a      	mov	r2, r3
 800caf2:	f7ff fbb7 	bl	800c264 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	695a      	ldr	r2, [r3, #20]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	68db      	ldr	r3, [r3, #12]
 800cb00:	08db      	lsrs	r3, r3, #3
 800cb02:	f003 0303 	and.w	r3, r3, #3
 800cb06:	005b      	lsls	r3, r3, #1
 800cb08:	fa02 f303 	lsl.w	r3, r2, r3
 800cb0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	691b      	ldr	r3, [r3, #16]
 800cb14:	2b04      	cmp	r3, #4
 800cb16:	d00a      	beq.n	800cb2e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6818      	ldr	r0, [r3, #0]
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	6919      	ldr	r1, [r3, #16]
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cb28:	f7ff fb08 	bl	800c13c <LL_ADC_SetOffset>
 800cb2c:	e179      	b.n	800ce22 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	2100      	movs	r1, #0
 800cb34:	4618      	mov	r0, r3
 800cb36:	f7ff fb25 	bl	800c184 <LL_ADC_GetOffsetChannel>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d10a      	bne.n	800cb5a <HAL_ADC_ConfigChannel+0x14e>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2100      	movs	r1, #0
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7ff fb1a 	bl	800c184 <LL_ADC_GetOffsetChannel>
 800cb50:	4603      	mov	r3, r0
 800cb52:	0e9b      	lsrs	r3, r3, #26
 800cb54:	f003 021f 	and.w	r2, r3, #31
 800cb58:	e01e      	b.n	800cb98 <HAL_ADC_ConfigChannel+0x18c>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	2100      	movs	r1, #0
 800cb60:	4618      	mov	r0, r3
 800cb62:	f7ff fb0f 	bl	800c184 <LL_ADC_GetOffsetChannel>
 800cb66:	4603      	mov	r3, r0
 800cb68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cb6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cb70:	fa93 f3a3 	rbit	r3, r3
 800cb74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800cb78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800cb7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800cb80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d101      	bne.n	800cb8c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800cb88:	2320      	movs	r3, #32
 800cb8a:	e004      	b.n	800cb96 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800cb8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cb90:	fab3 f383 	clz	r3, r3
 800cb94:	b2db      	uxtb	r3, r3
 800cb96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d105      	bne.n	800cbb0 <HAL_ADC_ConfigChannel+0x1a4>
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	0e9b      	lsrs	r3, r3, #26
 800cbaa:	f003 031f 	and.w	r3, r3, #31
 800cbae:	e018      	b.n	800cbe2 <HAL_ADC_ConfigChannel+0x1d6>
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cbb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbbc:	fa93 f3a3 	rbit	r3, r3
 800cbc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800cbc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cbc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800cbcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d101      	bne.n	800cbd8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800cbd4:	2320      	movs	r3, #32
 800cbd6:	e004      	b.n	800cbe2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800cbd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800cbdc:	fab3 f383 	clz	r3, r3
 800cbe0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d106      	bne.n	800cbf4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	2200      	movs	r2, #0
 800cbec:	2100      	movs	r1, #0
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7ff fade 	bl	800c1b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	2101      	movs	r1, #1
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7ff fac2 	bl	800c184 <LL_ADC_GetOffsetChannel>
 800cc00:	4603      	mov	r3, r0
 800cc02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d10a      	bne.n	800cc20 <HAL_ADC_ConfigChannel+0x214>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2101      	movs	r1, #1
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7ff fab7 	bl	800c184 <LL_ADC_GetOffsetChannel>
 800cc16:	4603      	mov	r3, r0
 800cc18:	0e9b      	lsrs	r3, r3, #26
 800cc1a:	f003 021f 	and.w	r2, r3, #31
 800cc1e:	e01e      	b.n	800cc5e <HAL_ADC_ConfigChannel+0x252>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	2101      	movs	r1, #1
 800cc26:	4618      	mov	r0, r3
 800cc28:	f7ff faac 	bl	800c184 <LL_ADC_GetOffsetChannel>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cc36:	fa93 f3a3 	rbit	r3, r3
 800cc3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800cc3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cc42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800cc46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d101      	bne.n	800cc52 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800cc4e:	2320      	movs	r3, #32
 800cc50:	e004      	b.n	800cc5c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800cc52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cc56:	fab3 f383 	clz	r3, r3
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d105      	bne.n	800cc76 <HAL_ADC_ConfigChannel+0x26a>
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	0e9b      	lsrs	r3, r3, #26
 800cc70:	f003 031f 	and.w	r3, r3, #31
 800cc74:	e018      	b.n	800cca8 <HAL_ADC_ConfigChannel+0x29c>
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800cc82:	fa93 f3a3 	rbit	r3, r3
 800cc86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800cc8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cc8e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800cc92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d101      	bne.n	800cc9e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800cc9a:	2320      	movs	r3, #32
 800cc9c:	e004      	b.n	800cca8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800cc9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cca2:	fab3 f383 	clz	r3, r3
 800cca6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d106      	bne.n	800ccba <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	2101      	movs	r1, #1
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f7ff fa7b 	bl	800c1b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2102      	movs	r1, #2
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f7ff fa5f 	bl	800c184 <LL_ADC_GetOffsetChannel>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d10a      	bne.n	800cce6 <HAL_ADC_ConfigChannel+0x2da>
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2102      	movs	r1, #2
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7ff fa54 	bl	800c184 <LL_ADC_GetOffsetChannel>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	0e9b      	lsrs	r3, r3, #26
 800cce0:	f003 021f 	and.w	r2, r3, #31
 800cce4:	e01e      	b.n	800cd24 <HAL_ADC_ConfigChannel+0x318>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2102      	movs	r1, #2
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7ff fa49 	bl	800c184 <LL_ADC_GetOffsetChannel>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ccf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ccfc:	fa93 f3a3 	rbit	r3, r3
 800cd00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800cd04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cd08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800cd0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d101      	bne.n	800cd18 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800cd14:	2320      	movs	r3, #32
 800cd16:	e004      	b.n	800cd22 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800cd18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cd1c:	fab3 f383 	clz	r3, r3
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d105      	bne.n	800cd3c <HAL_ADC_ConfigChannel+0x330>
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	0e9b      	lsrs	r3, r3, #26
 800cd36:	f003 031f 	and.w	r3, r3, #31
 800cd3a:	e014      	b.n	800cd66 <HAL_ADC_ConfigChannel+0x35a>
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cd42:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cd44:	fa93 f3a3 	rbit	r3, r3
 800cd48:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800cd4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cd4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800cd50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d101      	bne.n	800cd5c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800cd58:	2320      	movs	r3, #32
 800cd5a:	e004      	b.n	800cd66 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800cd5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cd60:	fab3 f383 	clz	r3, r3
 800cd64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d106      	bne.n	800cd78 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	2102      	movs	r1, #2
 800cd72:	4618      	mov	r0, r3
 800cd74:	f7ff fa1c 	bl	800c1b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	2103      	movs	r1, #3
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7ff fa00 	bl	800c184 <LL_ADC_GetOffsetChannel>
 800cd84:	4603      	mov	r3, r0
 800cd86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d10a      	bne.n	800cda4 <HAL_ADC_ConfigChannel+0x398>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	2103      	movs	r1, #3
 800cd94:	4618      	mov	r0, r3
 800cd96:	f7ff f9f5 	bl	800c184 <LL_ADC_GetOffsetChannel>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	0e9b      	lsrs	r3, r3, #26
 800cd9e:	f003 021f 	and.w	r2, r3, #31
 800cda2:	e017      	b.n	800cdd4 <HAL_ADC_ConfigChannel+0x3c8>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	2103      	movs	r1, #3
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7ff f9ea 	bl	800c184 <LL_ADC_GetOffsetChannel>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cdb4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cdb6:	fa93 f3a3 	rbit	r3, r3
 800cdba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800cdbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cdbe:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800cdc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d101      	bne.n	800cdca <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800cdc6:	2320      	movs	r3, #32
 800cdc8:	e003      	b.n	800cdd2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800cdca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cdcc:	fab3 f383 	clz	r3, r3
 800cdd0:	b2db      	uxtb	r3, r3
 800cdd2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d105      	bne.n	800cdec <HAL_ADC_ConfigChannel+0x3e0>
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	0e9b      	lsrs	r3, r3, #26
 800cde6:	f003 031f 	and.w	r3, r3, #31
 800cdea:	e011      	b.n	800ce10 <HAL_ADC_ConfigChannel+0x404>
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cdf2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cdf4:	fa93 f3a3 	rbit	r3, r3
 800cdf8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800cdfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cdfc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800cdfe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d101      	bne.n	800ce08 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800ce04:	2320      	movs	r3, #32
 800ce06:	e003      	b.n	800ce10 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800ce08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ce0a:	fab3 f383 	clz	r3, r3
 800ce0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d106      	bne.n	800ce22 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	2103      	movs	r1, #3
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7ff f9c7 	bl	800c1b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7ff faf0 	bl	800c40c <LL_ADC_IsEnabled>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	f040 8140 	bne.w	800d0b4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6818      	ldr	r0, [r3, #0]
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	6819      	ldr	r1, [r3, #0]
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	68db      	ldr	r3, [r3, #12]
 800ce40:	461a      	mov	r2, r3
 800ce42:	f7ff fa3b 	bl	800c2bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	68db      	ldr	r3, [r3, #12]
 800ce4a:	4a8f      	ldr	r2, [pc, #572]	@ (800d088 <HAL_ADC_ConfigChannel+0x67c>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	f040 8131 	bne.w	800d0b4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d10b      	bne.n	800ce7a <HAL_ADC_ConfigChannel+0x46e>
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	0e9b      	lsrs	r3, r3, #26
 800ce68:	3301      	adds	r3, #1
 800ce6a:	f003 031f 	and.w	r3, r3, #31
 800ce6e:	2b09      	cmp	r3, #9
 800ce70:	bf94      	ite	ls
 800ce72:	2301      	movls	r3, #1
 800ce74:	2300      	movhi	r3, #0
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	e019      	b.n	800ceae <HAL_ADC_ConfigChannel+0x4a2>
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ce82:	fa93 f3a3 	rbit	r3, r3
 800ce86:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800ce88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800ce8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d101      	bne.n	800ce96 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800ce92:	2320      	movs	r3, #32
 800ce94:	e003      	b.n	800ce9e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800ce96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ce98:	fab3 f383 	clz	r3, r3
 800ce9c:	b2db      	uxtb	r3, r3
 800ce9e:	3301      	adds	r3, #1
 800cea0:	f003 031f 	and.w	r3, r3, #31
 800cea4:	2b09      	cmp	r3, #9
 800cea6:	bf94      	ite	ls
 800cea8:	2301      	movls	r3, #1
 800ceaa:	2300      	movhi	r3, #0
 800ceac:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d079      	beq.n	800cfa6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d107      	bne.n	800cece <HAL_ADC_ConfigChannel+0x4c2>
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	0e9b      	lsrs	r3, r3, #26
 800cec4:	3301      	adds	r3, #1
 800cec6:	069b      	lsls	r3, r3, #26
 800cec8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800cecc:	e015      	b.n	800cefa <HAL_ADC_ConfigChannel+0x4ee>
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ced4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ced6:	fa93 f3a3 	rbit	r3, r3
 800ceda:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800cedc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cede:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800cee0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d101      	bne.n	800ceea <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800cee6:	2320      	movs	r3, #32
 800cee8:	e003      	b.n	800cef2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800ceea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ceec:	fab3 f383 	clz	r3, r3
 800cef0:	b2db      	uxtb	r3, r3
 800cef2:	3301      	adds	r3, #1
 800cef4:	069b      	lsls	r3, r3, #26
 800cef6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d109      	bne.n	800cf1a <HAL_ADC_ConfigChannel+0x50e>
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	0e9b      	lsrs	r3, r3, #26
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	f003 031f 	and.w	r3, r3, #31
 800cf12:	2101      	movs	r1, #1
 800cf14:	fa01 f303 	lsl.w	r3, r1, r3
 800cf18:	e017      	b.n	800cf4a <HAL_ADC_ConfigChannel+0x53e>
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cf20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf22:	fa93 f3a3 	rbit	r3, r3
 800cf26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800cf28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf2a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800cf2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d101      	bne.n	800cf36 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800cf32:	2320      	movs	r3, #32
 800cf34:	e003      	b.n	800cf3e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800cf36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf38:	fab3 f383 	clz	r3, r3
 800cf3c:	b2db      	uxtb	r3, r3
 800cf3e:	3301      	adds	r3, #1
 800cf40:	f003 031f 	and.w	r3, r3, #31
 800cf44:	2101      	movs	r1, #1
 800cf46:	fa01 f303 	lsl.w	r3, r1, r3
 800cf4a:	ea42 0103 	orr.w	r1, r2, r3
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d10a      	bne.n	800cf70 <HAL_ADC_ConfigChannel+0x564>
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	0e9b      	lsrs	r3, r3, #26
 800cf60:	3301      	adds	r3, #1
 800cf62:	f003 021f 	and.w	r2, r3, #31
 800cf66:	4613      	mov	r3, r2
 800cf68:	005b      	lsls	r3, r3, #1
 800cf6a:	4413      	add	r3, r2
 800cf6c:	051b      	lsls	r3, r3, #20
 800cf6e:	e018      	b.n	800cfa2 <HAL_ADC_ConfigChannel+0x596>
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cf76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf78:	fa93 f3a3 	rbit	r3, r3
 800cf7c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800cf7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf80:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800cf82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d101      	bne.n	800cf8c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800cf88:	2320      	movs	r3, #32
 800cf8a:	e003      	b.n	800cf94 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800cf8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf8e:	fab3 f383 	clz	r3, r3
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	3301      	adds	r3, #1
 800cf96:	f003 021f 	and.w	r2, r3, #31
 800cf9a:	4613      	mov	r3, r2
 800cf9c:	005b      	lsls	r3, r3, #1
 800cf9e:	4413      	add	r3, r2
 800cfa0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800cfa2:	430b      	orrs	r3, r1
 800cfa4:	e081      	b.n	800d0aa <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d107      	bne.n	800cfc2 <HAL_ADC_ConfigChannel+0x5b6>
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	0e9b      	lsrs	r3, r3, #26
 800cfb8:	3301      	adds	r3, #1
 800cfba:	069b      	lsls	r3, r3, #26
 800cfbc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800cfc0:	e015      	b.n	800cfee <HAL_ADC_ConfigChannel+0x5e2>
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cfc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfca:	fa93 f3a3 	rbit	r3, r3
 800cfce:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800cfd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800cfd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d101      	bne.n	800cfde <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800cfda:	2320      	movs	r3, #32
 800cfdc:	e003      	b.n	800cfe6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800cfde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfe0:	fab3 f383 	clz	r3, r3
 800cfe4:	b2db      	uxtb	r3, r3
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	069b      	lsls	r3, r3, #26
 800cfea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d109      	bne.n	800d00e <HAL_ADC_ConfigChannel+0x602>
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	0e9b      	lsrs	r3, r3, #26
 800d000:	3301      	adds	r3, #1
 800d002:	f003 031f 	and.w	r3, r3, #31
 800d006:	2101      	movs	r1, #1
 800d008:	fa01 f303 	lsl.w	r3, r1, r3
 800d00c:	e017      	b.n	800d03e <HAL_ADC_ConfigChannel+0x632>
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d014:	69fb      	ldr	r3, [r7, #28]
 800d016:	fa93 f3a3 	rbit	r3, r3
 800d01a:	61bb      	str	r3, [r7, #24]
  return result;
 800d01c:	69bb      	ldr	r3, [r7, #24]
 800d01e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800d020:	6a3b      	ldr	r3, [r7, #32]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d101      	bne.n	800d02a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800d026:	2320      	movs	r3, #32
 800d028:	e003      	b.n	800d032 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800d02a:	6a3b      	ldr	r3, [r7, #32]
 800d02c:	fab3 f383 	clz	r3, r3
 800d030:	b2db      	uxtb	r3, r3
 800d032:	3301      	adds	r3, #1
 800d034:	f003 031f 	and.w	r3, r3, #31
 800d038:	2101      	movs	r1, #1
 800d03a:	fa01 f303 	lsl.w	r3, r1, r3
 800d03e:	ea42 0103 	orr.w	r1, r2, r3
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d10d      	bne.n	800d06a <HAL_ADC_ConfigChannel+0x65e>
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	0e9b      	lsrs	r3, r3, #26
 800d054:	3301      	adds	r3, #1
 800d056:	f003 021f 	and.w	r2, r3, #31
 800d05a:	4613      	mov	r3, r2
 800d05c:	005b      	lsls	r3, r3, #1
 800d05e:	4413      	add	r3, r2
 800d060:	3b1e      	subs	r3, #30
 800d062:	051b      	lsls	r3, r3, #20
 800d064:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800d068:	e01e      	b.n	800d0a8 <HAL_ADC_ConfigChannel+0x69c>
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	fa93 f3a3 	rbit	r3, r3
 800d076:	60fb      	str	r3, [r7, #12]
  return result;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d104      	bne.n	800d08c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800d082:	2320      	movs	r3, #32
 800d084:	e006      	b.n	800d094 <HAL_ADC_ConfigChannel+0x688>
 800d086:	bf00      	nop
 800d088:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	fab3 f383 	clz	r3, r3
 800d092:	b2db      	uxtb	r3, r3
 800d094:	3301      	adds	r3, #1
 800d096:	f003 021f 	and.w	r2, r3, #31
 800d09a:	4613      	mov	r3, r2
 800d09c:	005b      	lsls	r3, r3, #1
 800d09e:	4413      	add	r3, r2
 800d0a0:	3b1e      	subs	r3, #30
 800d0a2:	051b      	lsls	r3, r3, #20
 800d0a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800d0a8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800d0aa:	683a      	ldr	r2, [r7, #0]
 800d0ac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800d0ae:	4619      	mov	r1, r3
 800d0b0:	f7ff f8d8 	bl	800c264 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	681a      	ldr	r2, [r3, #0]
 800d0b8:	4b44      	ldr	r3, [pc, #272]	@ (800d1cc <HAL_ADC_ConfigChannel+0x7c0>)
 800d0ba:	4013      	ands	r3, r2
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d07a      	beq.n	800d1b6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800d0c0:	4843      	ldr	r0, [pc, #268]	@ (800d1d0 <HAL_ADC_ConfigChannel+0x7c4>)
 800d0c2:	f7ff f82d 	bl	800c120 <LL_ADC_GetCommonPathInternalCh>
 800d0c6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	4a41      	ldr	r2, [pc, #260]	@ (800d1d4 <HAL_ADC_ConfigChannel+0x7c8>)
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d12c      	bne.n	800d12e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800d0d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d0d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d126      	bne.n	800d12e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	4a3c      	ldr	r2, [pc, #240]	@ (800d1d8 <HAL_ADC_ConfigChannel+0x7cc>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d004      	beq.n	800d0f4 <HAL_ADC_ConfigChannel+0x6e8>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	4a3b      	ldr	r2, [pc, #236]	@ (800d1dc <HAL_ADC_ConfigChannel+0x7d0>)
 800d0f0:	4293      	cmp	r3, r2
 800d0f2:	d15d      	bne.n	800d1b0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d0f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d0f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	4834      	ldr	r0, [pc, #208]	@ (800d1d0 <HAL_ADC_ConfigChannel+0x7c4>)
 800d100:	f7fe fffb 	bl	800c0fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800d104:	4b36      	ldr	r3, [pc, #216]	@ (800d1e0 <HAL_ADC_ConfigChannel+0x7d4>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	099b      	lsrs	r3, r3, #6
 800d10a:	4a36      	ldr	r2, [pc, #216]	@ (800d1e4 <HAL_ADC_ConfigChannel+0x7d8>)
 800d10c:	fba2 2303 	umull	r2, r3, r2, r3
 800d110:	099b      	lsrs	r3, r3, #6
 800d112:	1c5a      	adds	r2, r3, #1
 800d114:	4613      	mov	r3, r2
 800d116:	005b      	lsls	r3, r3, #1
 800d118:	4413      	add	r3, r2
 800d11a:	009b      	lsls	r3, r3, #2
 800d11c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800d11e:	e002      	b.n	800d126 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	3b01      	subs	r3, #1
 800d124:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d1f9      	bne.n	800d120 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800d12c:	e040      	b.n	800d1b0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4a2d      	ldr	r2, [pc, #180]	@ (800d1e8 <HAL_ADC_ConfigChannel+0x7dc>)
 800d134:	4293      	cmp	r3, r2
 800d136:	d118      	bne.n	800d16a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800d138:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d13c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d140:	2b00      	cmp	r3, #0
 800d142:	d112      	bne.n	800d16a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4a23      	ldr	r2, [pc, #140]	@ (800d1d8 <HAL_ADC_ConfigChannel+0x7cc>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d004      	beq.n	800d158 <HAL_ADC_ConfigChannel+0x74c>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	4a22      	ldr	r2, [pc, #136]	@ (800d1dc <HAL_ADC_ConfigChannel+0x7d0>)
 800d154:	4293      	cmp	r3, r2
 800d156:	d12d      	bne.n	800d1b4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d158:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d15c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d160:	4619      	mov	r1, r3
 800d162:	481b      	ldr	r0, [pc, #108]	@ (800d1d0 <HAL_ADC_ConfigChannel+0x7c4>)
 800d164:	f7fe ffc9 	bl	800c0fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800d168:	e024      	b.n	800d1b4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4a1f      	ldr	r2, [pc, #124]	@ (800d1ec <HAL_ADC_ConfigChannel+0x7e0>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d120      	bne.n	800d1b6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800d174:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d178:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d11a      	bne.n	800d1b6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	4a14      	ldr	r2, [pc, #80]	@ (800d1d8 <HAL_ADC_ConfigChannel+0x7cc>)
 800d186:	4293      	cmp	r3, r2
 800d188:	d115      	bne.n	800d1b6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d18a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d18e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d192:	4619      	mov	r1, r3
 800d194:	480e      	ldr	r0, [pc, #56]	@ (800d1d0 <HAL_ADC_ConfigChannel+0x7c4>)
 800d196:	f7fe ffb0 	bl	800c0fa <LL_ADC_SetCommonPathInternalCh>
 800d19a:	e00c      	b.n	800d1b6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1a0:	f043 0220 	orr.w	r2, r3, #32
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800d1ae:	e002      	b.n	800d1b6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800d1b0:	bf00      	nop
 800d1b2:	e000      	b.n	800d1b6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800d1b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800d1be:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	37d8      	adds	r7, #216	@ 0xd8
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	80080000 	.word	0x80080000
 800d1d0:	50040300 	.word	0x50040300
 800d1d4:	c7520000 	.word	0xc7520000
 800d1d8:	50040000 	.word	0x50040000
 800d1dc:	50040200 	.word	0x50040200
 800d1e0:	20000000 	.word	0x20000000
 800d1e4:	053e2d63 	.word	0x053e2d63
 800d1e8:	cb840000 	.word	0xcb840000
 800d1ec:	80000001 	.word	0x80000001

0800d1f0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b088      	sub	sp, #32
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	4618      	mov	r0, r3
 800d208:	f7ff f94e 	bl	800c4a8 <LL_ADC_REG_IsConversionOngoing>
 800d20c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	4618      	mov	r0, r3
 800d214:	f7ff f96f 	bl	800c4f6 <LL_ADC_INJ_IsConversionOngoing>
 800d218:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d103      	bne.n	800d228 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2b00      	cmp	r3, #0
 800d224:	f000 8098 	beq.w	800d358 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	68db      	ldr	r3, [r3, #12]
 800d22e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d232:	2b00      	cmp	r3, #0
 800d234:	d02a      	beq.n	800d28c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	7e5b      	ldrb	r3, [r3, #25]
 800d23a:	2b01      	cmp	r3, #1
 800d23c:	d126      	bne.n	800d28c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	7e1b      	ldrb	r3, [r3, #24]
 800d242:	2b01      	cmp	r3, #1
 800d244:	d122      	bne.n	800d28c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800d246:	2301      	movs	r3, #1
 800d248:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800d24a:	e014      	b.n	800d276 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800d24c:	69fb      	ldr	r3, [r7, #28]
 800d24e:	4a45      	ldr	r2, [pc, #276]	@ (800d364 <ADC_ConversionStop+0x174>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d90d      	bls.n	800d270 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d258:	f043 0210 	orr.w	r2, r3, #16
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d264:	f043 0201 	orr.w	r2, r3, #1
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800d26c:	2301      	movs	r3, #1
 800d26e:	e074      	b.n	800d35a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	3301      	adds	r3, #1
 800d274:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d280:	2b40      	cmp	r3, #64	@ 0x40
 800d282:	d1e3      	bne.n	800d24c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	2240      	movs	r2, #64	@ 0x40
 800d28a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800d28c:	69bb      	ldr	r3, [r7, #24]
 800d28e:	2b02      	cmp	r3, #2
 800d290:	d014      	beq.n	800d2bc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	4618      	mov	r0, r3
 800d298:	f7ff f906 	bl	800c4a8 <LL_ADC_REG_IsConversionOngoing>
 800d29c:	4603      	mov	r3, r0
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d00c      	beq.n	800d2bc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7ff f8c3 	bl	800c432 <LL_ADC_IsDisableOngoing>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d104      	bne.n	800d2bc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7ff f8e2 	bl	800c480 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800d2bc:	69bb      	ldr	r3, [r7, #24]
 800d2be:	2b01      	cmp	r3, #1
 800d2c0:	d014      	beq.n	800d2ec <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f7ff f915 	bl	800c4f6 <LL_ADC_INJ_IsConversionOngoing>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d00c      	beq.n	800d2ec <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f7ff f8ab 	bl	800c432 <LL_ADC_IsDisableOngoing>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d104      	bne.n	800d2ec <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7ff f8f1 	bl	800c4ce <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800d2ec:	69bb      	ldr	r3, [r7, #24]
 800d2ee:	2b02      	cmp	r3, #2
 800d2f0:	d005      	beq.n	800d2fe <ADC_ConversionStop+0x10e>
 800d2f2:	69bb      	ldr	r3, [r7, #24]
 800d2f4:	2b03      	cmp	r3, #3
 800d2f6:	d105      	bne.n	800d304 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800d2f8:	230c      	movs	r3, #12
 800d2fa:	617b      	str	r3, [r7, #20]
        break;
 800d2fc:	e005      	b.n	800d30a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800d2fe:	2308      	movs	r3, #8
 800d300:	617b      	str	r3, [r7, #20]
        break;
 800d302:	e002      	b.n	800d30a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800d304:	2304      	movs	r3, #4
 800d306:	617b      	str	r3, [r7, #20]
        break;
 800d308:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800d30a:	f7fe feb3 	bl	800c074 <HAL_GetTick>
 800d30e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800d310:	e01b      	b.n	800d34a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800d312:	f7fe feaf 	bl	800c074 <HAL_GetTick>
 800d316:	4602      	mov	r2, r0
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	1ad3      	subs	r3, r2, r3
 800d31c:	2b05      	cmp	r3, #5
 800d31e:	d914      	bls.n	800d34a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	689a      	ldr	r2, [r3, #8]
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	4013      	ands	r3, r2
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d00d      	beq.n	800d34a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d332:	f043 0210 	orr.w	r2, r3, #16
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d33e:	f043 0201 	orr.w	r2, r3, #1
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800d346:	2301      	movs	r3, #1
 800d348:	e007      	b.n	800d35a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	689a      	ldr	r2, [r3, #8]
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	4013      	ands	r3, r2
 800d354:	2b00      	cmp	r3, #0
 800d356:	d1dc      	bne.n	800d312 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800d358:	2300      	movs	r3, #0
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3720      	adds	r7, #32
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}
 800d362:	bf00      	nop
 800d364:	a33fffff 	.word	0xa33fffff

0800d368 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b084      	sub	sp, #16
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800d370:	2300      	movs	r3, #0
 800d372:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4618      	mov	r0, r3
 800d37a:	f7ff f847 	bl	800c40c <LL_ADC_IsEnabled>
 800d37e:	4603      	mov	r3, r0
 800d380:	2b00      	cmp	r3, #0
 800d382:	d169      	bne.n	800d458 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	689a      	ldr	r2, [r3, #8]
 800d38a:	4b36      	ldr	r3, [pc, #216]	@ (800d464 <ADC_Enable+0xfc>)
 800d38c:	4013      	ands	r3, r2
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d00d      	beq.n	800d3ae <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d396:	f043 0210 	orr.w	r2, r3, #16
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3a2:	f043 0201 	orr.w	r2, r3, #1
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	e055      	b.n	800d45a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7ff f802 	bl	800c3bc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800d3b8:	482b      	ldr	r0, [pc, #172]	@ (800d468 <ADC_Enable+0x100>)
 800d3ba:	f7fe feb1 	bl	800c120 <LL_ADC_GetCommonPathInternalCh>
 800d3be:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800d3c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d013      	beq.n	800d3f0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800d3c8:	4b28      	ldr	r3, [pc, #160]	@ (800d46c <ADC_Enable+0x104>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	099b      	lsrs	r3, r3, #6
 800d3ce:	4a28      	ldr	r2, [pc, #160]	@ (800d470 <ADC_Enable+0x108>)
 800d3d0:	fba2 2303 	umull	r2, r3, r2, r3
 800d3d4:	099b      	lsrs	r3, r3, #6
 800d3d6:	1c5a      	adds	r2, r3, #1
 800d3d8:	4613      	mov	r3, r2
 800d3da:	005b      	lsls	r3, r3, #1
 800d3dc:	4413      	add	r3, r2
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800d3e2:	e002      	b.n	800d3ea <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	3b01      	subs	r3, #1
 800d3e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d1f9      	bne.n	800d3e4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800d3f0:	f7fe fe40 	bl	800c074 <HAL_GetTick>
 800d3f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800d3f6:	e028      	b.n	800d44a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7ff f805 	bl	800c40c <LL_ADC_IsEnabled>
 800d402:	4603      	mov	r3, r0
 800d404:	2b00      	cmp	r3, #0
 800d406:	d104      	bne.n	800d412 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7fe ffd5 	bl	800c3bc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800d412:	f7fe fe2f 	bl	800c074 <HAL_GetTick>
 800d416:	4602      	mov	r2, r0
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	1ad3      	subs	r3, r2, r3
 800d41c:	2b02      	cmp	r3, #2
 800d41e:	d914      	bls.n	800d44a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f003 0301 	and.w	r3, r3, #1
 800d42a:	2b01      	cmp	r3, #1
 800d42c:	d00d      	beq.n	800d44a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d432:	f043 0210 	orr.w	r2, r3, #16
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d43e:	f043 0201 	orr.w	r2, r3, #1
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800d446:	2301      	movs	r3, #1
 800d448:	e007      	b.n	800d45a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	f003 0301 	and.w	r3, r3, #1
 800d454:	2b01      	cmp	r3, #1
 800d456:	d1cf      	bne.n	800d3f8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800d458:	2300      	movs	r3, #0
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3710      	adds	r7, #16
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
 800d462:	bf00      	nop
 800d464:	8000003f 	.word	0x8000003f
 800d468:	50040300 	.word	0x50040300
 800d46c:	20000000 	.word	0x20000000
 800d470:	053e2d63 	.word	0x053e2d63

0800d474 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4618      	mov	r0, r3
 800d482:	f7fe ffd6 	bl	800c432 <LL_ADC_IsDisableOngoing>
 800d486:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7fe ffbd 	bl	800c40c <LL_ADC_IsEnabled>
 800d492:	4603      	mov	r3, r0
 800d494:	2b00      	cmp	r3, #0
 800d496:	d047      	beq.n	800d528 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d144      	bne.n	800d528 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	689b      	ldr	r3, [r3, #8]
 800d4a4:	f003 030d 	and.w	r3, r3, #13
 800d4a8:	2b01      	cmp	r3, #1
 800d4aa:	d10c      	bne.n	800d4c6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7fe ff97 	bl	800c3e4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	2203      	movs	r2, #3
 800d4bc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800d4be:	f7fe fdd9 	bl	800c074 <HAL_GetTick>
 800d4c2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800d4c4:	e029      	b.n	800d51a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4ca:	f043 0210 	orr.w	r2, r3, #16
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d4d6:	f043 0201 	orr.w	r2, r3, #1
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800d4de:	2301      	movs	r3, #1
 800d4e0:	e023      	b.n	800d52a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800d4e2:	f7fe fdc7 	bl	800c074 <HAL_GetTick>
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	1ad3      	subs	r3, r2, r3
 800d4ec:	2b02      	cmp	r3, #2
 800d4ee:	d914      	bls.n	800d51a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	689b      	ldr	r3, [r3, #8]
 800d4f6:	f003 0301 	and.w	r3, r3, #1
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d00d      	beq.n	800d51a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d502:	f043 0210 	orr.w	r2, r3, #16
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d50e:	f043 0201 	orr.w	r2, r3, #1
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800d516:	2301      	movs	r3, #1
 800d518:	e007      	b.n	800d52a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	689b      	ldr	r3, [r3, #8]
 800d520:	f003 0301 	and.w	r3, r3, #1
 800d524:	2b00      	cmp	r3, #0
 800d526:	d1dc      	bne.n	800d4e2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800d528:	2300      	movs	r3, #0
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3710      	adds	r7, #16
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}

0800d532 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800d532:	b580      	push	{r7, lr}
 800d534:	b084      	sub	sp, #16
 800d536:	af00      	add	r7, sp, #0
 800d538:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d53e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d544:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d14b      	bne.n	800d5e4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d550:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f003 0308 	and.w	r3, r3, #8
 800d562:	2b00      	cmp	r3, #0
 800d564:	d021      	beq.n	800d5aa <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7fe fe3b 	bl	800c1e6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800d570:	4603      	mov	r3, r0
 800d572:	2b00      	cmp	r3, #0
 800d574:	d032      	beq.n	800d5dc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	68db      	ldr	r3, [r3, #12]
 800d57c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d580:	2b00      	cmp	r3, #0
 800d582:	d12b      	bne.n	800d5dc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d588:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d594:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d11f      	bne.n	800d5dc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5a0:	f043 0201 	orr.w	r2, r3, #1
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	655a      	str	r2, [r3, #84]	@ 0x54
 800d5a8:	e018      	b.n	800d5dc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	68db      	ldr	r3, [r3, #12]
 800d5b0:	f003 0302 	and.w	r3, r3, #2
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d111      	bne.n	800d5dc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d105      	bne.n	800d5dc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5d4:	f043 0201 	orr.w	r2, r3, #1
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800d5dc:	68f8      	ldr	r0, [r7, #12]
 800d5de:	f7f5 ff09 	bl	80033f4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800d5e2:	e00e      	b.n	800d602 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5e8:	f003 0310 	and.w	r3, r3, #16
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d003      	beq.n	800d5f8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800d5f0:	68f8      	ldr	r0, [r7, #12]
 800d5f2:	f7ff fa00 	bl	800c9f6 <HAL_ADC_ErrorCallback>
}
 800d5f6:	e004      	b.n	800d602 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d5fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	4798      	blx	r3
}
 800d602:	bf00      	nop
 800d604:	3710      	adds	r7, #16
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}

0800d60a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800d60a:	b580      	push	{r7, lr}
 800d60c:	b084      	sub	sp, #16
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d616:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800d618:	68f8      	ldr	r0, [r7, #12]
 800d61a:	f7f5 fecf 	bl	80033bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800d61e:	bf00      	nop
 800d620:	3710      	adds	r7, #16
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}

0800d626 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800d626:	b580      	push	{r7, lr}
 800d628:	b084      	sub	sp, #16
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d632:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d638:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d644:	f043 0204 	orr.w	r2, r3, #4
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800d64c:	68f8      	ldr	r0, [r7, #12]
 800d64e:	f7ff f9d2 	bl	800c9f6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800d652:	bf00      	nop
 800d654:	3710      	adds	r7, #16
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}

0800d65a <LL_ADC_IsEnabled>:
{
 800d65a:	b480      	push	{r7}
 800d65c:	b083      	sub	sp, #12
 800d65e:	af00      	add	r7, sp, #0
 800d660:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	689b      	ldr	r3, [r3, #8]
 800d666:	f003 0301 	and.w	r3, r3, #1
 800d66a:	2b01      	cmp	r3, #1
 800d66c:	d101      	bne.n	800d672 <LL_ADC_IsEnabled+0x18>
 800d66e:	2301      	movs	r3, #1
 800d670:	e000      	b.n	800d674 <LL_ADC_IsEnabled+0x1a>
 800d672:	2300      	movs	r3, #0
}
 800d674:	4618      	mov	r0, r3
 800d676:	370c      	adds	r7, #12
 800d678:	46bd      	mov	sp, r7
 800d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67e:	4770      	bx	lr

0800d680 <LL_ADC_REG_IsConversionOngoing>:
{
 800d680:	b480      	push	{r7}
 800d682:	b083      	sub	sp, #12
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	689b      	ldr	r3, [r3, #8]
 800d68c:	f003 0304 	and.w	r3, r3, #4
 800d690:	2b04      	cmp	r3, #4
 800d692:	d101      	bne.n	800d698 <LL_ADC_REG_IsConversionOngoing+0x18>
 800d694:	2301      	movs	r3, #1
 800d696:	e000      	b.n	800d69a <LL_ADC_REG_IsConversionOngoing+0x1a>
 800d698:	2300      	movs	r3, #0
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	370c      	adds	r7, #12
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a4:	4770      	bx	lr
	...

0800d6a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800d6a8:	b590      	push	{r4, r7, lr}
 800d6aa:	b09f      	sub	sp, #124	@ 0x7c
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d6be:	2b01      	cmp	r3, #1
 800d6c0:	d101      	bne.n	800d6c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800d6c2:	2302      	movs	r3, #2
 800d6c4:	e093      	b.n	800d7ee <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2201      	movs	r2, #1
 800d6ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4a47      	ldr	r2, [pc, #284]	@ (800d7f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d102      	bne.n	800d6e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800d6e0:	4b46      	ldr	r3, [pc, #280]	@ (800d7fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800d6e2:	60bb      	str	r3, [r7, #8]
 800d6e4:	e001      	b.n	800d6ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d10b      	bne.n	800d708 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6f4:	f043 0220 	orr.w	r2, r3, #32
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2200      	movs	r2, #0
 800d700:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800d704:	2301      	movs	r3, #1
 800d706:	e072      	b.n	800d7ee <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7ff ffb8 	bl	800d680 <LL_ADC_REG_IsConversionOngoing>
 800d710:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4618      	mov	r0, r3
 800d718:	f7ff ffb2 	bl	800d680 <LL_ADC_REG_IsConversionOngoing>
 800d71c:	4603      	mov	r3, r0
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d154      	bne.n	800d7cc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800d722:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d724:	2b00      	cmp	r3, #0
 800d726:	d151      	bne.n	800d7cc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800d728:	4b35      	ldr	r3, [pc, #212]	@ (800d800 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800d72a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d02c      	beq.n	800d78e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800d734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d736:	689b      	ldr	r3, [r3, #8]
 800d738:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	6859      	ldr	r1, [r3, #4]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d746:	035b      	lsls	r3, r3, #13
 800d748:	430b      	orrs	r3, r1
 800d74a:	431a      	orrs	r2, r3
 800d74c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d74e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800d750:	4829      	ldr	r0, [pc, #164]	@ (800d7f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800d752:	f7ff ff82 	bl	800d65a <LL_ADC_IsEnabled>
 800d756:	4604      	mov	r4, r0
 800d758:	4828      	ldr	r0, [pc, #160]	@ (800d7fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800d75a:	f7ff ff7e 	bl	800d65a <LL_ADC_IsEnabled>
 800d75e:	4603      	mov	r3, r0
 800d760:	431c      	orrs	r4, r3
 800d762:	4828      	ldr	r0, [pc, #160]	@ (800d804 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800d764:	f7ff ff79 	bl	800d65a <LL_ADC_IsEnabled>
 800d768:	4603      	mov	r3, r0
 800d76a:	4323      	orrs	r3, r4
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d137      	bne.n	800d7e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800d770:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d772:	689b      	ldr	r3, [r3, #8]
 800d774:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800d778:	f023 030f 	bic.w	r3, r3, #15
 800d77c:	683a      	ldr	r2, [r7, #0]
 800d77e:	6811      	ldr	r1, [r2, #0]
 800d780:	683a      	ldr	r2, [r7, #0]
 800d782:	6892      	ldr	r2, [r2, #8]
 800d784:	430a      	orrs	r2, r1
 800d786:	431a      	orrs	r2, r3
 800d788:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d78a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800d78c:	e028      	b.n	800d7e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800d78e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d790:	689b      	ldr	r3, [r3, #8]
 800d792:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800d796:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d798:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800d79a:	4817      	ldr	r0, [pc, #92]	@ (800d7f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800d79c:	f7ff ff5d 	bl	800d65a <LL_ADC_IsEnabled>
 800d7a0:	4604      	mov	r4, r0
 800d7a2:	4816      	ldr	r0, [pc, #88]	@ (800d7fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800d7a4:	f7ff ff59 	bl	800d65a <LL_ADC_IsEnabled>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	431c      	orrs	r4, r3
 800d7ac:	4815      	ldr	r0, [pc, #84]	@ (800d804 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800d7ae:	f7ff ff54 	bl	800d65a <LL_ADC_IsEnabled>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	4323      	orrs	r3, r4
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d112      	bne.n	800d7e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800d7ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d7bc:	689b      	ldr	r3, [r3, #8]
 800d7be:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800d7c2:	f023 030f 	bic.w	r3, r3, #15
 800d7c6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d7c8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800d7ca:	e009      	b.n	800d7e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7d0:	f043 0220 	orr.w	r2, r3, #32
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800d7d8:	2301      	movs	r3, #1
 800d7da:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800d7de:	e000      	b.n	800d7e2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800d7e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800d7ea:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	377c      	adds	r7, #124	@ 0x7c
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd90      	pop	{r4, r7, pc}
 800d7f6:	bf00      	nop
 800d7f8:	50040000 	.word	0x50040000
 800d7fc:	50040100 	.word	0x50040100
 800d800:	50040300 	.word	0x50040300
 800d804:	50040200 	.word	0x50040200

0800d808 <__NVIC_SetPriorityGrouping>:
{
 800d808:	b480      	push	{r7}
 800d80a:	b085      	sub	sp, #20
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f003 0307 	and.w	r3, r3, #7
 800d816:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d818:	4b0c      	ldr	r3, [pc, #48]	@ (800d84c <__NVIC_SetPriorityGrouping+0x44>)
 800d81a:	68db      	ldr	r3, [r3, #12]
 800d81c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d81e:	68ba      	ldr	r2, [r7, #8]
 800d820:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800d824:	4013      	ands	r3, r2
 800d826:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d830:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800d834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d83a:	4a04      	ldr	r2, [pc, #16]	@ (800d84c <__NVIC_SetPriorityGrouping+0x44>)
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	60d3      	str	r3, [r2, #12]
}
 800d840:	bf00      	nop
 800d842:	3714      	adds	r7, #20
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr
 800d84c:	e000ed00 	.word	0xe000ed00

0800d850 <__NVIC_GetPriorityGrouping>:
{
 800d850:	b480      	push	{r7}
 800d852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d854:	4b04      	ldr	r3, [pc, #16]	@ (800d868 <__NVIC_GetPriorityGrouping+0x18>)
 800d856:	68db      	ldr	r3, [r3, #12]
 800d858:	0a1b      	lsrs	r3, r3, #8
 800d85a:	f003 0307 	and.w	r3, r3, #7
}
 800d85e:	4618      	mov	r0, r3
 800d860:	46bd      	mov	sp, r7
 800d862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d866:	4770      	bx	lr
 800d868:	e000ed00 	.word	0xe000ed00

0800d86c <__NVIC_EnableIRQ>:
{
 800d86c:	b480      	push	{r7}
 800d86e:	b083      	sub	sp, #12
 800d870:	af00      	add	r7, sp, #0
 800d872:	4603      	mov	r3, r0
 800d874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	db0b      	blt.n	800d896 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d87e:	79fb      	ldrb	r3, [r7, #7]
 800d880:	f003 021f 	and.w	r2, r3, #31
 800d884:	4907      	ldr	r1, [pc, #28]	@ (800d8a4 <__NVIC_EnableIRQ+0x38>)
 800d886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d88a:	095b      	lsrs	r3, r3, #5
 800d88c:	2001      	movs	r0, #1
 800d88e:	fa00 f202 	lsl.w	r2, r0, r2
 800d892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d896:	bf00      	nop
 800d898:	370c      	adds	r7, #12
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr
 800d8a2:	bf00      	nop
 800d8a4:	e000e100 	.word	0xe000e100

0800d8a8 <__NVIC_SetPriority>:
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b083      	sub	sp, #12
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	6039      	str	r1, [r7, #0]
 800d8b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d8b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	db0a      	blt.n	800d8d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	b2da      	uxtb	r2, r3
 800d8c0:	490c      	ldr	r1, [pc, #48]	@ (800d8f4 <__NVIC_SetPriority+0x4c>)
 800d8c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8c6:	0112      	lsls	r2, r2, #4
 800d8c8:	b2d2      	uxtb	r2, r2
 800d8ca:	440b      	add	r3, r1
 800d8cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d8d0:	e00a      	b.n	800d8e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	b2da      	uxtb	r2, r3
 800d8d6:	4908      	ldr	r1, [pc, #32]	@ (800d8f8 <__NVIC_SetPriority+0x50>)
 800d8d8:	79fb      	ldrb	r3, [r7, #7]
 800d8da:	f003 030f 	and.w	r3, r3, #15
 800d8de:	3b04      	subs	r3, #4
 800d8e0:	0112      	lsls	r2, r2, #4
 800d8e2:	b2d2      	uxtb	r2, r2
 800d8e4:	440b      	add	r3, r1
 800d8e6:	761a      	strb	r2, [r3, #24]
}
 800d8e8:	bf00      	nop
 800d8ea:	370c      	adds	r7, #12
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f2:	4770      	bx	lr
 800d8f4:	e000e100 	.word	0xe000e100
 800d8f8:	e000ed00 	.word	0xe000ed00

0800d8fc <NVIC_EncodePriority>:
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b089      	sub	sp, #36	@ 0x24
 800d900:	af00      	add	r7, sp, #0
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	f003 0307 	and.w	r3, r3, #7
 800d90e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d910:	69fb      	ldr	r3, [r7, #28]
 800d912:	f1c3 0307 	rsb	r3, r3, #7
 800d916:	2b04      	cmp	r3, #4
 800d918:	bf28      	it	cs
 800d91a:	2304      	movcs	r3, #4
 800d91c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d91e:	69fb      	ldr	r3, [r7, #28]
 800d920:	3304      	adds	r3, #4
 800d922:	2b06      	cmp	r3, #6
 800d924:	d902      	bls.n	800d92c <NVIC_EncodePriority+0x30>
 800d926:	69fb      	ldr	r3, [r7, #28]
 800d928:	3b03      	subs	r3, #3
 800d92a:	e000      	b.n	800d92e <NVIC_EncodePriority+0x32>
 800d92c:	2300      	movs	r3, #0
 800d92e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d930:	f04f 32ff 	mov.w	r2, #4294967295
 800d934:	69bb      	ldr	r3, [r7, #24]
 800d936:	fa02 f303 	lsl.w	r3, r2, r3
 800d93a:	43da      	mvns	r2, r3
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	401a      	ands	r2, r3
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d944:	f04f 31ff 	mov.w	r1, #4294967295
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	fa01 f303 	lsl.w	r3, r1, r3
 800d94e:	43d9      	mvns	r1, r3
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d954:	4313      	orrs	r3, r2
}
 800d956:	4618      	mov	r0, r3
 800d958:	3724      	adds	r7, #36	@ 0x24
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr
	...

0800d964 <__NVIC_SystemReset>:
{
 800d964:	b480      	push	{r7}
 800d966:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800d968:	f3bf 8f4f 	dsb	sy
}
 800d96c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d96e:	4b06      	ldr	r3, [pc, #24]	@ (800d988 <__NVIC_SystemReset+0x24>)
 800d970:	68db      	ldr	r3, [r3, #12]
 800d972:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d976:	4904      	ldr	r1, [pc, #16]	@ (800d988 <__NVIC_SystemReset+0x24>)
 800d978:	4b04      	ldr	r3, [pc, #16]	@ (800d98c <__NVIC_SystemReset+0x28>)
 800d97a:	4313      	orrs	r3, r2
 800d97c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d97e:	f3bf 8f4f 	dsb	sy
}
 800d982:	bf00      	nop
    __NOP();
 800d984:	bf00      	nop
 800d986:	e7fd      	b.n	800d984 <__NVIC_SystemReset+0x20>
 800d988:	e000ed00 	.word	0xe000ed00
 800d98c:	05fa0004 	.word	0x05fa0004

0800d990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b082      	sub	sp, #8
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	3b01      	subs	r3, #1
 800d99c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d9a0:	d301      	bcc.n	800d9a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	e00f      	b.n	800d9c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d9a6:	4a0a      	ldr	r2, [pc, #40]	@ (800d9d0 <SysTick_Config+0x40>)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	3b01      	subs	r3, #1
 800d9ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d9ae:	210f      	movs	r1, #15
 800d9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d9b4:	f7ff ff78 	bl	800d8a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d9b8:	4b05      	ldr	r3, [pc, #20]	@ (800d9d0 <SysTick_Config+0x40>)
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d9be:	4b04      	ldr	r3, [pc, #16]	@ (800d9d0 <SysTick_Config+0x40>)
 800d9c0:	2207      	movs	r2, #7
 800d9c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d9c4:	2300      	movs	r3, #0
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3708      	adds	r7, #8
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}
 800d9ce:	bf00      	nop
 800d9d0:	e000e010 	.word	0xe000e010

0800d9d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b082      	sub	sp, #8
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f7ff ff13 	bl	800d808 <__NVIC_SetPriorityGrouping>
}
 800d9e2:	bf00      	nop
 800d9e4:	3708      	adds	r7, #8
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}

0800d9ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d9ea:	b580      	push	{r7, lr}
 800d9ec:	b086      	sub	sp, #24
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	60b9      	str	r1, [r7, #8]
 800d9f4:	607a      	str	r2, [r7, #4]
 800d9f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800d9fc:	f7ff ff28 	bl	800d850 <__NVIC_GetPriorityGrouping>
 800da00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800da02:	687a      	ldr	r2, [r7, #4]
 800da04:	68b9      	ldr	r1, [r7, #8]
 800da06:	6978      	ldr	r0, [r7, #20]
 800da08:	f7ff ff78 	bl	800d8fc <NVIC_EncodePriority>
 800da0c:	4602      	mov	r2, r0
 800da0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da12:	4611      	mov	r1, r2
 800da14:	4618      	mov	r0, r3
 800da16:	f7ff ff47 	bl	800d8a8 <__NVIC_SetPriority>
}
 800da1a:	bf00      	nop
 800da1c:	3718      	adds	r7, #24
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}

0800da22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800da22:	b580      	push	{r7, lr}
 800da24:	b082      	sub	sp, #8
 800da26:	af00      	add	r7, sp, #0
 800da28:	4603      	mov	r3, r0
 800da2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800da2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da30:	4618      	mov	r0, r3
 800da32:	f7ff ff1b 	bl	800d86c <__NVIC_EnableIRQ>
}
 800da36:	bf00      	nop
 800da38:	3708      	adds	r7, #8
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}

0800da3e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800da3e:	b580      	push	{r7, lr}
 800da40:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800da42:	f7ff ff8f 	bl	800d964 <__NVIC_SystemReset>

0800da46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800da46:	b580      	push	{r7, lr}
 800da48:	b082      	sub	sp, #8
 800da4a:	af00      	add	r7, sp, #0
 800da4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f7ff ff9e 	bl	800d990 <SysTick_Config>
 800da54:	4603      	mov	r3, r0
}
 800da56:	4618      	mov	r0, r3
 800da58:	3708      	adds	r7, #8
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
	...

0800da60 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b082      	sub	sp, #8
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d101      	bne.n	800da72 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800da6e:	2301      	movs	r3, #1
 800da70:	e054      	b.n	800db1c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	7f5b      	ldrb	r3, [r3, #29]
 800da76:	b2db      	uxtb	r3, r3
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d105      	bne.n	800da88 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2200      	movs	r2, #0
 800da80:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f7fa fc54 	bl	8008330 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2202      	movs	r2, #2
 800da8c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	791b      	ldrb	r3, [r3, #4]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d10c      	bne.n	800dab0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	4a22      	ldr	r2, [pc, #136]	@ (800db24 <HAL_CRC_Init+0xc4>)
 800da9c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	689a      	ldr	r2, [r3, #8]
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f022 0218 	bic.w	r2, r2, #24
 800daac:	609a      	str	r2, [r3, #8]
 800daae:	e00c      	b.n	800daca <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6899      	ldr	r1, [r3, #8]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	68db      	ldr	r3, [r3, #12]
 800dab8:	461a      	mov	r2, r3
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f000 f942 	bl	800dd44 <HAL_CRCEx_Polynomial_Set>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d001      	beq.n	800daca <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800dac6:	2301      	movs	r3, #1
 800dac8:	e028      	b.n	800db1c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	795b      	ldrb	r3, [r3, #5]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d105      	bne.n	800dade <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f04f 32ff 	mov.w	r2, #4294967295
 800dada:	611a      	str	r2, [r3, #16]
 800dadc:	e004      	b.n	800dae8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	687a      	ldr	r2, [r7, #4]
 800dae4:	6912      	ldr	r2, [r2, #16]
 800dae6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	689b      	ldr	r3, [r3, #8]
 800daee:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	695a      	ldr	r2, [r3, #20]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	430a      	orrs	r2, r1
 800dafc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	689b      	ldr	r3, [r3, #8]
 800db04:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	699a      	ldr	r2, [r3, #24]
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	430a      	orrs	r2, r1
 800db12:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2201      	movs	r2, #1
 800db18:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800db1a:	2300      	movs	r3, #0
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3708      	adds	r7, #8
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}
 800db24:	04c11db7 	.word	0x04c11db7

0800db28 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b086      	sub	sp, #24
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	60f8      	str	r0, [r7, #12]
 800db30:	60b9      	str	r1, [r7, #8]
 800db32:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800db34:	2300      	movs	r3, #0
 800db36:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	2202      	movs	r2, #2
 800db3c:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	6a1b      	ldr	r3, [r3, #32]
 800db42:	2b03      	cmp	r3, #3
 800db44:	d006      	beq.n	800db54 <HAL_CRC_Accumulate+0x2c>
 800db46:	2b03      	cmp	r3, #3
 800db48:	d829      	bhi.n	800db9e <HAL_CRC_Accumulate+0x76>
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	d019      	beq.n	800db82 <HAL_CRC_Accumulate+0x5a>
 800db4e:	2b02      	cmp	r3, #2
 800db50:	d01e      	beq.n	800db90 <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 800db52:	e024      	b.n	800db9e <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 800db54:	2300      	movs	r3, #0
 800db56:	617b      	str	r3, [r7, #20]
 800db58:	e00a      	b.n	800db70 <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	009b      	lsls	r3, r3, #2
 800db5e:	68ba      	ldr	r2, [r7, #8]
 800db60:	441a      	add	r2, r3
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	6812      	ldr	r2, [r2, #0]
 800db68:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	3301      	adds	r3, #1
 800db6e:	617b      	str	r3, [r7, #20]
 800db70:	697a      	ldr	r2, [r7, #20]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	429a      	cmp	r2, r3
 800db76:	d3f0      	bcc.n	800db5a <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	613b      	str	r3, [r7, #16]
      break;
 800db80:	e00e      	b.n	800dba0 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800db82:	687a      	ldr	r2, [r7, #4]
 800db84:	68b9      	ldr	r1, [r7, #8]
 800db86:	68f8      	ldr	r0, [r7, #12]
 800db88:	f000 f812 	bl	800dbb0 <CRC_Handle_8>
 800db8c:	6138      	str	r0, [r7, #16]
      break;
 800db8e:	e007      	b.n	800dba0 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800db90:	687a      	ldr	r2, [r7, #4]
 800db92:	68b9      	ldr	r1, [r7, #8]
 800db94:	68f8      	ldr	r0, [r7, #12]
 800db96:	f000 f89b 	bl	800dcd0 <CRC_Handle_16>
 800db9a:	6138      	str	r0, [r7, #16]
      break;
 800db9c:	e000      	b.n	800dba0 <HAL_CRC_Accumulate+0x78>
      break;
 800db9e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	2201      	movs	r2, #1
 800dba4:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800dba6:	693b      	ldr	r3, [r7, #16]
}
 800dba8:	4618      	mov	r0, r3
 800dbaa:	3718      	adds	r7, #24
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b089      	sub	sp, #36	@ 0x24
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	60f8      	str	r0, [r7, #12]
 800dbb8:	60b9      	str	r1, [r7, #8]
 800dbba:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	61fb      	str	r3, [r7, #28]
 800dbc0:	e023      	b.n	800dc0a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800dbc2:	69fb      	ldr	r3, [r7, #28]
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	68ba      	ldr	r2, [r7, #8]
 800dbc8:	4413      	add	r3, r2
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800dbce:	69fb      	ldr	r3, [r7, #28]
 800dbd0:	009b      	lsls	r3, r3, #2
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	68b9      	ldr	r1, [r7, #8]
 800dbd6:	440b      	add	r3, r1
 800dbd8:	781b      	ldrb	r3, [r3, #0]
 800dbda:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800dbdc:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800dbde:	69fb      	ldr	r3, [r7, #28]
 800dbe0:	009b      	lsls	r3, r3, #2
 800dbe2:	3302      	adds	r3, #2
 800dbe4:	68b9      	ldr	r1, [r7, #8]
 800dbe6:	440b      	add	r3, r1
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800dbec:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800dbee:	69fb      	ldr	r3, [r7, #28]
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	3303      	adds	r3, #3
 800dbf4:	68b9      	ldr	r1, [r7, #8]
 800dbf6:	440b      	add	r3, r1
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800dc00:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800dc02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	3301      	adds	r3, #1
 800dc08:	61fb      	str	r3, [r7, #28]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	089b      	lsrs	r3, r3, #2
 800dc0e:	69fa      	ldr	r2, [r7, #28]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d3d6      	bcc.n	800dbc2 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f003 0303 	and.w	r3, r3, #3
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d04f      	beq.n	800dcbe <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	f003 0303 	and.w	r3, r3, #3
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d107      	bne.n	800dc38 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800dc28:	69fb      	ldr	r3, [r7, #28]
 800dc2a:	009b      	lsls	r3, r3, #2
 800dc2c:	68ba      	ldr	r2, [r7, #8]
 800dc2e:	4413      	add	r3, r2
 800dc30:	68fa      	ldr	r2, [r7, #12]
 800dc32:	6812      	ldr	r2, [r2, #0]
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f003 0303 	and.w	r3, r3, #3
 800dc3e:	2b02      	cmp	r3, #2
 800dc40:	d117      	bne.n	800dc72 <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800dc42:	69fb      	ldr	r3, [r7, #28]
 800dc44:	009b      	lsls	r3, r3, #2
 800dc46:	68ba      	ldr	r2, [r7, #8]
 800dc48:	4413      	add	r3, r2
 800dc4a:	781b      	ldrb	r3, [r3, #0]
 800dc4c:	b21b      	sxth	r3, r3
 800dc4e:	021b      	lsls	r3, r3, #8
 800dc50:	b21a      	sxth	r2, r3
 800dc52:	69fb      	ldr	r3, [r7, #28]
 800dc54:	009b      	lsls	r3, r3, #2
 800dc56:	3301      	adds	r3, #1
 800dc58:	68b9      	ldr	r1, [r7, #8]
 800dc5a:	440b      	add	r3, r1
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	b21b      	sxth	r3, r3
 800dc60:	4313      	orrs	r3, r2
 800dc62:	b21b      	sxth	r3, r3
 800dc64:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	8b7a      	ldrh	r2, [r7, #26]
 800dc70:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	f003 0303 	and.w	r3, r3, #3
 800dc78:	2b03      	cmp	r3, #3
 800dc7a:	d120      	bne.n	800dcbe <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800dc7c:	69fb      	ldr	r3, [r7, #28]
 800dc7e:	009b      	lsls	r3, r3, #2
 800dc80:	68ba      	ldr	r2, [r7, #8]
 800dc82:	4413      	add	r3, r2
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	b21b      	sxth	r3, r3
 800dc88:	021b      	lsls	r3, r3, #8
 800dc8a:	b21a      	sxth	r2, r3
 800dc8c:	69fb      	ldr	r3, [r7, #28]
 800dc8e:	009b      	lsls	r3, r3, #2
 800dc90:	3301      	adds	r3, #1
 800dc92:	68b9      	ldr	r1, [r7, #8]
 800dc94:	440b      	add	r3, r1
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	b21b      	sxth	r3, r3
 800dc9a:	4313      	orrs	r3, r2
 800dc9c:	b21b      	sxth	r3, r3
 800dc9e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	8b7a      	ldrh	r2, [r7, #26]
 800dcaa:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800dcac:	69fb      	ldr	r3, [r7, #28]
 800dcae:	009b      	lsls	r3, r3, #2
 800dcb0:	3302      	adds	r3, #2
 800dcb2:	68ba      	ldr	r2, [r7, #8]
 800dcb4:	4413      	add	r3, r2
 800dcb6:	68fa      	ldr	r2, [r7, #12]
 800dcb8:	6812      	ldr	r2, [r2, #0]
 800dcba:	781b      	ldrb	r3, [r3, #0]
 800dcbc:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	681b      	ldr	r3, [r3, #0]
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3724      	adds	r7, #36	@ 0x24
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr

0800dcd0 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b087      	sub	sp, #28
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	60f8      	str	r0, [r7, #12]
 800dcd8:	60b9      	str	r1, [r7, #8]
 800dcda:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800dcdc:	2300      	movs	r3, #0
 800dcde:	617b      	str	r3, [r7, #20]
 800dce0:	e013      	b.n	800dd0a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	009b      	lsls	r3, r3, #2
 800dce6:	68ba      	ldr	r2, [r7, #8]
 800dce8:	4413      	add	r3, r2
 800dcea:	881b      	ldrh	r3, [r3, #0]
 800dcec:	041a      	lsls	r2, r3, #16
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	009b      	lsls	r3, r3, #2
 800dcf2:	3302      	adds	r3, #2
 800dcf4:	68b9      	ldr	r1, [r7, #8]
 800dcf6:	440b      	add	r3, r1
 800dcf8:	881b      	ldrh	r3, [r3, #0]
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	430a      	orrs	r2, r1
 800dd02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	3301      	adds	r3, #1
 800dd08:	617b      	str	r3, [r7, #20]
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	085b      	lsrs	r3, r3, #1
 800dd0e:	697a      	ldr	r2, [r7, #20]
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d3e6      	bcc.n	800dce2 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f003 0301 	and.w	r3, r3, #1
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d009      	beq.n	800dd32 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	68ba      	ldr	r2, [r7, #8]
 800dd2a:	4413      	add	r3, r2
 800dd2c:	881a      	ldrh	r2, [r3, #0]
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	681b      	ldr	r3, [r3, #0]
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	371c      	adds	r7, #28
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd42:	4770      	bx	lr

0800dd44 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800dd44:	b480      	push	{r7}
 800dd46:	b087      	sub	sp, #28
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	60f8      	str	r0, [r7, #12]
 800dd4c:	60b9      	str	r1, [r7, #8]
 800dd4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dd50:	2300      	movs	r3, #0
 800dd52:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800dd54:	231f      	movs	r3, #31
 800dd56:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	f003 0301 	and.w	r3, r3, #1
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d102      	bne.n	800dd68 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800dd62:	2301      	movs	r3, #1
 800dd64:	75fb      	strb	r3, [r7, #23]
 800dd66:	e063      	b.n	800de30 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800dd68:	bf00      	nop
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	1e5a      	subs	r2, r3, #1
 800dd6e:	613a      	str	r2, [r7, #16]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d009      	beq.n	800dd88 <HAL_CRCEx_Polynomial_Set+0x44>
 800dd74:	693b      	ldr	r3, [r7, #16]
 800dd76:	f003 031f 	and.w	r3, r3, #31
 800dd7a:	68ba      	ldr	r2, [r7, #8]
 800dd7c:	fa22 f303 	lsr.w	r3, r2, r3
 800dd80:	f003 0301 	and.w	r3, r3, #1
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d0f0      	beq.n	800dd6a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2b18      	cmp	r3, #24
 800dd8c:	d846      	bhi.n	800de1c <HAL_CRCEx_Polynomial_Set+0xd8>
 800dd8e:	a201      	add	r2, pc, #4	@ (adr r2, 800dd94 <HAL_CRCEx_Polynomial_Set+0x50>)
 800dd90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd94:	0800de23 	.word	0x0800de23
 800dd98:	0800de1d 	.word	0x0800de1d
 800dd9c:	0800de1d 	.word	0x0800de1d
 800dda0:	0800de1d 	.word	0x0800de1d
 800dda4:	0800de1d 	.word	0x0800de1d
 800dda8:	0800de1d 	.word	0x0800de1d
 800ddac:	0800de1d 	.word	0x0800de1d
 800ddb0:	0800de1d 	.word	0x0800de1d
 800ddb4:	0800de11 	.word	0x0800de11
 800ddb8:	0800de1d 	.word	0x0800de1d
 800ddbc:	0800de1d 	.word	0x0800de1d
 800ddc0:	0800de1d 	.word	0x0800de1d
 800ddc4:	0800de1d 	.word	0x0800de1d
 800ddc8:	0800de1d 	.word	0x0800de1d
 800ddcc:	0800de1d 	.word	0x0800de1d
 800ddd0:	0800de1d 	.word	0x0800de1d
 800ddd4:	0800de05 	.word	0x0800de05
 800ddd8:	0800de1d 	.word	0x0800de1d
 800dddc:	0800de1d 	.word	0x0800de1d
 800dde0:	0800de1d 	.word	0x0800de1d
 800dde4:	0800de1d 	.word	0x0800de1d
 800dde8:	0800de1d 	.word	0x0800de1d
 800ddec:	0800de1d 	.word	0x0800de1d
 800ddf0:	0800de1d 	.word	0x0800de1d
 800ddf4:	0800ddf9 	.word	0x0800ddf9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	2b06      	cmp	r3, #6
 800ddfc:	d913      	bls.n	800de26 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800ddfe:	2301      	movs	r3, #1
 800de00:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800de02:	e010      	b.n	800de26 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	2b07      	cmp	r3, #7
 800de08:	d90f      	bls.n	800de2a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800de0a:	2301      	movs	r3, #1
 800de0c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800de0e:	e00c      	b.n	800de2a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	2b0f      	cmp	r3, #15
 800de14:	d90b      	bls.n	800de2e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800de16:	2301      	movs	r3, #1
 800de18:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800de1a:	e008      	b.n	800de2e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800de1c:	2301      	movs	r3, #1
 800de1e:	75fb      	strb	r3, [r7, #23]
        break;
 800de20:	e006      	b.n	800de30 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800de22:	bf00      	nop
 800de24:	e004      	b.n	800de30 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800de26:	bf00      	nop
 800de28:	e002      	b.n	800de30 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800de2a:	bf00      	nop
 800de2c:	e000      	b.n	800de30 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800de2e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800de30:	7dfb      	ldrb	r3, [r7, #23]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d10d      	bne.n	800de52 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	68ba      	ldr	r2, [r7, #8]
 800de3c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	689b      	ldr	r3, [r3, #8]
 800de44:	f023 0118 	bic.w	r1, r3, #24
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	687a      	ldr	r2, [r7, #4]
 800de4e:	430a      	orrs	r2, r1
 800de50:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800de52:	7dfb      	ldrb	r3, [r7, #23]
}
 800de54:	4618      	mov	r0, r3
 800de56:	371c      	adds	r7, #28
 800de58:	46bd      	mov	sp, r7
 800de5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5e:	4770      	bx	lr

0800de60 <HAL_CRCEx_Input_Data_Reverse>:
  *          @arg @ref CRC_INPUTDATA_INVERSION_HALFWORD HalfWord-wise bit reversal
  *          @arg @ref CRC_INPUTDATA_INVERSION_WORD     Word-wise bit reversal
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Input_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t InputReverseMode)
{
 800de60:	b480      	push	{r7}
 800de62:	b083      	sub	sp, #12
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(InputReverseMode));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2202      	movs	r2, #2
 800de6e:	775a      	strb	r2, [r3, #29]

  /* set input data inversion mode */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, InputReverseMode);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	689b      	ldr	r3, [r3, #8]
 800de76:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	683a      	ldr	r2, [r7, #0]
 800de80:	430a      	orrs	r2, r1
 800de82:	609a      	str	r2, [r3, #8]
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2201      	movs	r2, #1
 800de88:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800de8a:	2300      	movs	r3, #0
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	370c      	adds	r7, #12
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr

0800de98 <HAL_CRCEx_Output_Data_Reverse>:
  *          @arg @ref CRC_OUTPUTDATA_INVERSION_DISABLE no CRC inversion (default value)
  *          @arg @ref CRC_OUTPUTDATA_INVERSION_ENABLE  bit-level inversion (e.g. for a 8-bit CRC: 0xB5 becomes 0xAD)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Output_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t OutputReverseMode)
{
 800de98:	b480      	push	{r7}
 800de9a:	b083      	sub	sp, #12
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(OutputReverseMode));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2202      	movs	r2, #2
 800dea6:	775a      	strb	r2, [r3, #29]

  /* set output data inversion mode */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, OutputReverseMode);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	689b      	ldr	r3, [r3, #8]
 800deae:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	683a      	ldr	r2, [r7, #0]
 800deb8:	430a      	orrs	r2, r1
 800deba:	609a      	str	r2, [r3, #8]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2201      	movs	r2, #1
 800dec0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800dec2:	2300      	movs	r3, #0
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	370c      	adds	r7, #12
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr

0800ded0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ded0:	b480      	push	{r7}
 800ded2:	b085      	sub	sp, #20
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d101      	bne.n	800dee2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800dede:	2301      	movs	r3, #1
 800dee0:	e098      	b.n	800e014 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	461a      	mov	r2, r3
 800dee8:	4b4d      	ldr	r3, [pc, #308]	@ (800e020 <HAL_DMA_Init+0x150>)
 800deea:	429a      	cmp	r2, r3
 800deec:	d80f      	bhi.n	800df0e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	461a      	mov	r2, r3
 800def4:	4b4b      	ldr	r3, [pc, #300]	@ (800e024 <HAL_DMA_Init+0x154>)
 800def6:	4413      	add	r3, r2
 800def8:	4a4b      	ldr	r2, [pc, #300]	@ (800e028 <HAL_DMA_Init+0x158>)
 800defa:	fba2 2303 	umull	r2, r3, r2, r3
 800defe:	091b      	lsrs	r3, r3, #4
 800df00:	009a      	lsls	r2, r3, #2
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	4a48      	ldr	r2, [pc, #288]	@ (800e02c <HAL_DMA_Init+0x15c>)
 800df0a:	641a      	str	r2, [r3, #64]	@ 0x40
 800df0c:	e00e      	b.n	800df2c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	461a      	mov	r2, r3
 800df14:	4b46      	ldr	r3, [pc, #280]	@ (800e030 <HAL_DMA_Init+0x160>)
 800df16:	4413      	add	r3, r2
 800df18:	4a43      	ldr	r2, [pc, #268]	@ (800e028 <HAL_DMA_Init+0x158>)
 800df1a:	fba2 2303 	umull	r2, r3, r2, r3
 800df1e:	091b      	lsrs	r3, r3, #4
 800df20:	009a      	lsls	r2, r3, #2
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	4a42      	ldr	r2, [pc, #264]	@ (800e034 <HAL_DMA_Init+0x164>)
 800df2a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2202      	movs	r2, #2
 800df30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800df42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800df50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	691b      	ldr	r3, [r3, #16]
 800df56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800df5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	699b      	ldr	r3, [r3, #24]
 800df62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800df68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6a1b      	ldr	r3, [r3, #32]
 800df6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800df70:	68fa      	ldr	r2, [r7, #12]
 800df72:	4313      	orrs	r3, r2
 800df74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	68fa      	ldr	r2, [r7, #12]
 800df7c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	689b      	ldr	r3, [r3, #8]
 800df82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800df86:	d039      	beq.n	800dffc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df8c:	4a27      	ldr	r2, [pc, #156]	@ (800e02c <HAL_DMA_Init+0x15c>)
 800df8e:	4293      	cmp	r3, r2
 800df90:	d11a      	bne.n	800dfc8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800df92:	4b29      	ldr	r3, [pc, #164]	@ (800e038 <HAL_DMA_Init+0x168>)
 800df94:	681a      	ldr	r2, [r3, #0]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df9a:	f003 031c 	and.w	r3, r3, #28
 800df9e:	210f      	movs	r1, #15
 800dfa0:	fa01 f303 	lsl.w	r3, r1, r3
 800dfa4:	43db      	mvns	r3, r3
 800dfa6:	4924      	ldr	r1, [pc, #144]	@ (800e038 <HAL_DMA_Init+0x168>)
 800dfa8:	4013      	ands	r3, r2
 800dfaa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800dfac:	4b22      	ldr	r3, [pc, #136]	@ (800e038 <HAL_DMA_Init+0x168>)
 800dfae:	681a      	ldr	r2, [r3, #0]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6859      	ldr	r1, [r3, #4]
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfb8:	f003 031c 	and.w	r3, r3, #28
 800dfbc:	fa01 f303 	lsl.w	r3, r1, r3
 800dfc0:	491d      	ldr	r1, [pc, #116]	@ (800e038 <HAL_DMA_Init+0x168>)
 800dfc2:	4313      	orrs	r3, r2
 800dfc4:	600b      	str	r3, [r1, #0]
 800dfc6:	e019      	b.n	800dffc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800dfc8:	4b1c      	ldr	r3, [pc, #112]	@ (800e03c <HAL_DMA_Init+0x16c>)
 800dfca:	681a      	ldr	r2, [r3, #0]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfd0:	f003 031c 	and.w	r3, r3, #28
 800dfd4:	210f      	movs	r1, #15
 800dfd6:	fa01 f303 	lsl.w	r3, r1, r3
 800dfda:	43db      	mvns	r3, r3
 800dfdc:	4917      	ldr	r1, [pc, #92]	@ (800e03c <HAL_DMA_Init+0x16c>)
 800dfde:	4013      	ands	r3, r2
 800dfe0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800dfe2:	4b16      	ldr	r3, [pc, #88]	@ (800e03c <HAL_DMA_Init+0x16c>)
 800dfe4:	681a      	ldr	r2, [r3, #0]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6859      	ldr	r1, [r3, #4]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfee:	f003 031c 	and.w	r3, r3, #28
 800dff2:	fa01 f303 	lsl.w	r3, r1, r3
 800dff6:	4911      	ldr	r1, [pc, #68]	@ (800e03c <HAL_DMA_Init+0x16c>)
 800dff8:	4313      	orrs	r3, r2
 800dffa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2200      	movs	r2, #0
 800e000:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2201      	movs	r2, #1
 800e006:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2200      	movs	r2, #0
 800e00e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800e012:	2300      	movs	r3, #0
}
 800e014:	4618      	mov	r0, r3
 800e016:	3714      	adds	r7, #20
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr
 800e020:	40020407 	.word	0x40020407
 800e024:	bffdfff8 	.word	0xbffdfff8
 800e028:	cccccccd 	.word	0xcccccccd
 800e02c:	40020000 	.word	0x40020000
 800e030:	bffdfbf8 	.word	0xbffdfbf8
 800e034:	40020400 	.word	0x40020400
 800e038:	400200a8 	.word	0x400200a8
 800e03c:	400204a8 	.word	0x400204a8

0800e040 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b086      	sub	sp, #24
 800e044:	af00      	add	r7, sp, #0
 800e046:	60f8      	str	r0, [r7, #12]
 800e048:	60b9      	str	r1, [r7, #8]
 800e04a:	607a      	str	r2, [r7, #4]
 800e04c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e04e:	2300      	movs	r3, #0
 800e050:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e058:	2b01      	cmp	r3, #1
 800e05a:	d101      	bne.n	800e060 <HAL_DMA_Start_IT+0x20>
 800e05c:	2302      	movs	r3, #2
 800e05e:	e04b      	b.n	800e0f8 <HAL_DMA_Start_IT+0xb8>
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2201      	movs	r2, #1
 800e064:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800e06e:	b2db      	uxtb	r3, r3
 800e070:	2b01      	cmp	r3, #1
 800e072:	d13a      	bne.n	800e0ea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	2202      	movs	r2, #2
 800e078:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	2200      	movs	r2, #0
 800e080:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	681a      	ldr	r2, [r3, #0]
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	f022 0201 	bic.w	r2, r2, #1
 800e090:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	687a      	ldr	r2, [r7, #4]
 800e096:	68b9      	ldr	r1, [r7, #8]
 800e098:	68f8      	ldr	r0, [r7, #12]
 800e09a:	f000 f96b 	bl	800e374 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d008      	beq.n	800e0b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f042 020e 	orr.w	r2, r2, #14
 800e0b4:	601a      	str	r2, [r3, #0]
 800e0b6:	e00f      	b.n	800e0d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	681a      	ldr	r2, [r3, #0]
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	f022 0204 	bic.w	r2, r2, #4
 800e0c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	681a      	ldr	r2, [r3, #0]
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	f042 020a 	orr.w	r2, r2, #10
 800e0d6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	681a      	ldr	r2, [r3, #0]
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	f042 0201 	orr.w	r2, r2, #1
 800e0e6:	601a      	str	r2, [r3, #0]
 800e0e8:	e005      	b.n	800e0f6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800e0f2:	2302      	movs	r3, #2
 800e0f4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800e0f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3718      	adds	r7, #24
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e100:	b480      	push	{r7}
 800e102:	b085      	sub	sp, #20
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e108:	2300      	movs	r3, #0
 800e10a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800e112:	b2db      	uxtb	r3, r3
 800e114:	2b02      	cmp	r3, #2
 800e116:	d008      	beq.n	800e12a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2204      	movs	r2, #4
 800e11c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2200      	movs	r2, #0
 800e122:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800e126:	2301      	movs	r3, #1
 800e128:	e022      	b.n	800e170 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	681a      	ldr	r2, [r3, #0]
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	f022 020e 	bic.w	r2, r2, #14
 800e138:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	681a      	ldr	r2, [r3, #0]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	f022 0201 	bic.w	r2, r2, #1
 800e148:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e14e:	f003 021c 	and.w	r2, r3, #28
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e156:	2101      	movs	r1, #1
 800e158:	fa01 f202 	lsl.w	r2, r1, r2
 800e15c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2201      	movs	r2, #1
 800e162:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2200      	movs	r2, #0
 800e16a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800e16e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800e170:	4618      	mov	r0, r3
 800e172:	3714      	adds	r7, #20
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr

0800e17c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b084      	sub	sp, #16
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e184:	2300      	movs	r3, #0
 800e186:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800e18e:	b2db      	uxtb	r3, r3
 800e190:	2b02      	cmp	r3, #2
 800e192:	d005      	beq.n	800e1a0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2204      	movs	r2, #4
 800e198:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800e19a:	2301      	movs	r3, #1
 800e19c:	73fb      	strb	r3, [r7, #15]
 800e19e:	e029      	b.n	800e1f4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	681a      	ldr	r2, [r3, #0]
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	f022 020e 	bic.w	r2, r2, #14
 800e1ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f022 0201 	bic.w	r2, r2, #1
 800e1be:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1c4:	f003 021c 	and.w	r2, r3, #28
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1cc:	2101      	movs	r1, #1
 800e1ce:	fa01 f202 	lsl.w	r2, r1, r2
 800e1d2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2201      	movs	r2, #1
 800e1d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d003      	beq.n	800e1f4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	4798      	blx	r3
    }
  }
  return status;
 800e1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	3710      	adds	r7, #16
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}

0800e1fe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800e1fe:	b580      	push	{r7, lr}
 800e200:	b084      	sub	sp, #16
 800e202:	af00      	add	r7, sp, #0
 800e204:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e21a:	f003 031c 	and.w	r3, r3, #28
 800e21e:	2204      	movs	r2, #4
 800e220:	409a      	lsls	r2, r3
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	4013      	ands	r3, r2
 800e226:	2b00      	cmp	r3, #0
 800e228:	d026      	beq.n	800e278 <HAL_DMA_IRQHandler+0x7a>
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	f003 0304 	and.w	r3, r3, #4
 800e230:	2b00      	cmp	r3, #0
 800e232:	d021      	beq.n	800e278 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	f003 0320 	and.w	r3, r3, #32
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d107      	bne.n	800e252 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	681a      	ldr	r2, [r3, #0]
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f022 0204 	bic.w	r2, r2, #4
 800e250:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e256:	f003 021c 	and.w	r2, r3, #28
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e25e:	2104      	movs	r1, #4
 800e260:	fa01 f202 	lsl.w	r2, r1, r2
 800e264:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d071      	beq.n	800e352 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800e276:	e06c      	b.n	800e352 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e27c:	f003 031c 	and.w	r3, r3, #28
 800e280:	2202      	movs	r2, #2
 800e282:	409a      	lsls	r2, r3
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	4013      	ands	r3, r2
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d02e      	beq.n	800e2ea <HAL_DMA_IRQHandler+0xec>
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	f003 0302 	and.w	r3, r3, #2
 800e292:	2b00      	cmp	r3, #0
 800e294:	d029      	beq.n	800e2ea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f003 0320 	and.w	r3, r3, #32
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d10b      	bne.n	800e2bc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	681a      	ldr	r2, [r3, #0]
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	f022 020a 	bic.w	r2, r2, #10
 800e2b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2c0:	f003 021c 	and.w	r2, r3, #28
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2c8:	2102      	movs	r1, #2
 800e2ca:	fa01 f202 	lsl.w	r2, r1, r2
 800e2ce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d038      	beq.n	800e352 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800e2e8:	e033      	b.n	800e352 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2ee:	f003 031c 	and.w	r3, r3, #28
 800e2f2:	2208      	movs	r2, #8
 800e2f4:	409a      	lsls	r2, r3
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	4013      	ands	r3, r2
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d02a      	beq.n	800e354 <HAL_DMA_IRQHandler+0x156>
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	f003 0308 	and.w	r3, r3, #8
 800e304:	2b00      	cmp	r3, #0
 800e306:	d025      	beq.n	800e354 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	681a      	ldr	r2, [r3, #0]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f022 020e 	bic.w	r2, r2, #14
 800e316:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e31c:	f003 021c 	and.w	r2, r3, #28
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e324:	2101      	movs	r1, #1
 800e326:	fa01 f202 	lsl.w	r2, r1, r2
 800e32a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2201      	movs	r2, #1
 800e330:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2201      	movs	r2, #1
 800e336:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2200      	movs	r2, #0
 800e33e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e346:	2b00      	cmp	r3, #0
 800e348:	d004      	beq.n	800e354 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800e352:	bf00      	nop
 800e354:	bf00      	nop
}
 800e356:	3710      	adds	r7, #16
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}

0800e35c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b083      	sub	sp, #12
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800e368:	4618      	mov	r0, r3
 800e36a:	370c      	adds	r7, #12
 800e36c:	46bd      	mov	sp, r7
 800e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e372:	4770      	bx	lr

0800e374 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e374:	b480      	push	{r7}
 800e376:	b085      	sub	sp, #20
 800e378:	af00      	add	r7, sp, #0
 800e37a:	60f8      	str	r0, [r7, #12]
 800e37c:	60b9      	str	r1, [r7, #8]
 800e37e:	607a      	str	r2, [r7, #4]
 800e380:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e386:	f003 021c 	and.w	r2, r3, #28
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e38e:	2101      	movs	r1, #1
 800e390:	fa01 f202 	lsl.w	r2, r1, r2
 800e394:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	683a      	ldr	r2, [r7, #0]
 800e39c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	689b      	ldr	r3, [r3, #8]
 800e3a2:	2b10      	cmp	r3, #16
 800e3a4:	d108      	bne.n	800e3b8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	687a      	ldr	r2, [r7, #4]
 800e3ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	68ba      	ldr	r2, [r7, #8]
 800e3b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800e3b6:	e007      	b.n	800e3c8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	68ba      	ldr	r2, [r7, #8]
 800e3be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	687a      	ldr	r2, [r7, #4]
 800e3c6:	60da      	str	r2, [r3, #12]
}
 800e3c8:	bf00      	nop
 800e3ca:	3714      	adds	r7, #20
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d2:	4770      	bx	lr

0800e3d4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b086      	sub	sp, #24
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	60f8      	str	r0, [r7, #12]
 800e3dc:	60b9      	str	r1, [r7, #8]
 800e3de:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e3e6:	4b2f      	ldr	r3, [pc, #188]	@ (800e4a4 <HAL_FLASH_Program+0xd0>)
 800e3e8:	781b      	ldrb	r3, [r3, #0]
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d101      	bne.n	800e3f2 <HAL_FLASH_Program+0x1e>
 800e3ee:	2302      	movs	r3, #2
 800e3f0:	e053      	b.n	800e49a <HAL_FLASH_Program+0xc6>
 800e3f2:	4b2c      	ldr	r3, [pc, #176]	@ (800e4a4 <HAL_FLASH_Program+0xd0>)
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e3f8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e3fc:	f000 f8c6 	bl	800e58c <FLASH_WaitForLastOperation>
 800e400:	4603      	mov	r3, r0
 800e402:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800e404:	7dfb      	ldrb	r3, [r7, #23]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d143      	bne.n	800e492 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e40a:	4b26      	ldr	r3, [pc, #152]	@ (800e4a4 <HAL_FLASH_Program+0xd0>)
 800e40c:	2200      	movs	r2, #0
 800e40e:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800e410:	4b25      	ldr	r3, [pc, #148]	@ (800e4a8 <HAL_FLASH_Program+0xd4>)
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d009      	beq.n	800e430 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800e41c:	4b22      	ldr	r3, [pc, #136]	@ (800e4a8 <HAL_FLASH_Program+0xd4>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	4a21      	ldr	r2, [pc, #132]	@ (800e4a8 <HAL_FLASH_Program+0xd4>)
 800e422:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e426:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800e428:	4b1e      	ldr	r3, [pc, #120]	@ (800e4a4 <HAL_FLASH_Program+0xd0>)
 800e42a:	2202      	movs	r2, #2
 800e42c:	771a      	strb	r2, [r3, #28]
 800e42e:	e002      	b.n	800e436 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800e430:	4b1c      	ldr	r3, [pc, #112]	@ (800e4a4 <HAL_FLASH_Program+0xd0>)
 800e432:	2200      	movs	r2, #0
 800e434:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d107      	bne.n	800e44c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800e43c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e440:	68b8      	ldr	r0, [r7, #8]
 800e442:	f000 f8f9 	bl	800e638 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800e446:	2301      	movs	r3, #1
 800e448:	613b      	str	r3, [r7, #16]
 800e44a:	e010      	b.n	800e46e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	2b01      	cmp	r3, #1
 800e450:	d002      	beq.n	800e458 <HAL_FLASH_Program+0x84>
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	2b02      	cmp	r3, #2
 800e456:	d10a      	bne.n	800e46e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	4619      	mov	r1, r3
 800e45c:	68b8      	ldr	r0, [r7, #8]
 800e45e:	f000 f911 	bl	800e684 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2b02      	cmp	r3, #2
 800e466:	d102      	bne.n	800e46e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800e468:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800e46c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e46e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e472:	f000 f88b 	bl	800e58c <FLASH_WaitForLastOperation>
 800e476:	4603      	mov	r3, r0
 800e478:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800e47a:	693b      	ldr	r3, [r7, #16]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d006      	beq.n	800e48e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800e480:	4b09      	ldr	r3, [pc, #36]	@ (800e4a8 <HAL_FLASH_Program+0xd4>)
 800e482:	695a      	ldr	r2, [r3, #20]
 800e484:	693b      	ldr	r3, [r7, #16]
 800e486:	43db      	mvns	r3, r3
 800e488:	4907      	ldr	r1, [pc, #28]	@ (800e4a8 <HAL_FLASH_Program+0xd4>)
 800e48a:	4013      	ands	r3, r2
 800e48c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800e48e:	f000 fae5 	bl	800ea5c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e492:	4b04      	ldr	r3, [pc, #16]	@ (800e4a4 <HAL_FLASH_Program+0xd0>)
 800e494:	2200      	movs	r2, #0
 800e496:	701a      	strb	r2, [r3, #0]

  return status;
 800e498:	7dfb      	ldrb	r3, [r7, #23]
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	3718      	adds	r7, #24
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}
 800e4a2:	bf00      	nop
 800e4a4:	20000014 	.word	0x20000014
 800e4a8:	40022000 	.word	0x40022000

0800e4ac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b083      	sub	sp, #12
 800e4b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800e4b6:	4b0b      	ldr	r3, [pc, #44]	@ (800e4e4 <HAL_FLASH_Unlock+0x38>)
 800e4b8:	695b      	ldr	r3, [r3, #20]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	da0b      	bge.n	800e4d6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800e4be:	4b09      	ldr	r3, [pc, #36]	@ (800e4e4 <HAL_FLASH_Unlock+0x38>)
 800e4c0:	4a09      	ldr	r2, [pc, #36]	@ (800e4e8 <HAL_FLASH_Unlock+0x3c>)
 800e4c2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800e4c4:	4b07      	ldr	r3, [pc, #28]	@ (800e4e4 <HAL_FLASH_Unlock+0x38>)
 800e4c6:	4a09      	ldr	r2, [pc, #36]	@ (800e4ec <HAL_FLASH_Unlock+0x40>)
 800e4c8:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800e4ca:	4b06      	ldr	r3, [pc, #24]	@ (800e4e4 <HAL_FLASH_Unlock+0x38>)
 800e4cc:	695b      	ldr	r3, [r3, #20]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	da01      	bge.n	800e4d6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800e4d6:	79fb      	ldrb	r3, [r7, #7]
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	370c      	adds	r7, #12
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr
 800e4e4:	40022000 	.word	0x40022000
 800e4e8:	45670123 	.word	0x45670123
 800e4ec:	cdef89ab 	.word	0xcdef89ab

0800e4f0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800e4f4:	4b05      	ldr	r3, [pc, #20]	@ (800e50c <HAL_FLASH_Lock+0x1c>)
 800e4f6:	695b      	ldr	r3, [r3, #20]
 800e4f8:	4a04      	ldr	r2, [pc, #16]	@ (800e50c <HAL_FLASH_Lock+0x1c>)
 800e4fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e4fe:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800e500:	2300      	movs	r3, #0
}
 800e502:	4618      	mov	r0, r3
 800e504:	46bd      	mov	sp, r7
 800e506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50a:	4770      	bx	lr
 800e50c:	40022000 	.word	0x40022000

0800e510 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800e510:	b480      	push	{r7}
 800e512:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 800e514:	4b09      	ldr	r3, [pc, #36]	@ (800e53c <HAL_FLASH_OB_Unlock+0x2c>)
 800e516:	695b      	ldr	r3, [r3, #20]
 800e518:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d007      	beq.n	800e530 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800e520:	4b06      	ldr	r3, [pc, #24]	@ (800e53c <HAL_FLASH_OB_Unlock+0x2c>)
 800e522:	4a07      	ldr	r2, [pc, #28]	@ (800e540 <HAL_FLASH_OB_Unlock+0x30>)
 800e524:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800e526:	4b05      	ldr	r3, [pc, #20]	@ (800e53c <HAL_FLASH_OB_Unlock+0x2c>)
 800e528:	4a06      	ldr	r2, [pc, #24]	@ (800e544 <HAL_FLASH_OB_Unlock+0x34>)
 800e52a:	60da      	str	r2, [r3, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800e52c:	2300      	movs	r3, #0
 800e52e:	e000      	b.n	800e532 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800e530:	2301      	movs	r3, #1
}
 800e532:	4618      	mov	r0, r3
 800e534:	46bd      	mov	sp, r7
 800e536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53a:	4770      	bx	lr
 800e53c:	40022000 	.word	0x40022000
 800e540:	08192a3b 	.word	0x08192a3b
 800e544:	4c5d6e7f 	.word	0x4c5d6e7f

0800e548 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800e548:	b480      	push	{r7}
 800e54a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 800e54c:	4b05      	ldr	r3, [pc, #20]	@ (800e564 <HAL_FLASH_OB_Lock+0x1c>)
 800e54e:	695b      	ldr	r3, [r3, #20]
 800e550:	4a04      	ldr	r2, [pc, #16]	@ (800e564 <HAL_FLASH_OB_Lock+0x1c>)
 800e552:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e556:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800e558:	2300      	movs	r3, #0
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr
 800e564:	40022000 	.word	0x40022000

0800e568 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 800e56c:	4b06      	ldr	r3, [pc, #24]	@ (800e588 <HAL_FLASH_OB_Launch+0x20>)
 800e56e:	695b      	ldr	r3, [r3, #20]
 800e570:	4a05      	ldr	r2, [pc, #20]	@ (800e588 <HAL_FLASH_OB_Launch+0x20>)
 800e572:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e576:	6153      	str	r3, [r2, #20]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 800e578:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e57c:	f000 f806 	bl	800e58c <FLASH_WaitForLastOperation>
 800e580:	4603      	mov	r3, r0
}
 800e582:	4618      	mov	r0, r3
 800e584:	bd80      	pop	{r7, pc}
 800e586:	bf00      	nop
 800e588:	40022000 	.word	0x40022000

0800e58c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800e594:	f7fd fd6e 	bl	800c074 <HAL_GetTick>
 800e598:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800e59a:	e00d      	b.n	800e5b8 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5a2:	d009      	beq.n	800e5b8 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800e5a4:	f7fd fd66 	bl	800c074 <HAL_GetTick>
 800e5a8:	4602      	mov	r2, r0
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	1ad3      	subs	r3, r2, r3
 800e5ae:	687a      	ldr	r2, [r7, #4]
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d801      	bhi.n	800e5b8 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800e5b4:	2303      	movs	r3, #3
 800e5b6:	e036      	b.n	800e626 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800e5b8:	4b1d      	ldr	r3, [pc, #116]	@ (800e630 <FLASH_WaitForLastOperation+0xa4>)
 800e5ba:	691b      	ldr	r3, [r3, #16]
 800e5bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d1eb      	bne.n	800e59c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800e5c4:	4b1a      	ldr	r3, [pc, #104]	@ (800e630 <FLASH_WaitForLastOperation+0xa4>)
 800e5c6:	691a      	ldr	r2, [r3, #16]
 800e5c8:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800e5cc:	4013      	ands	r3, r2
 800e5ce:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d01d      	beq.n	800e612 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800e5d6:	4b17      	ldr	r3, [pc, #92]	@ (800e634 <FLASH_WaitForLastOperation+0xa8>)
 800e5d8:	685a      	ldr	r2, [r3, #4]
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	4313      	orrs	r3, r2
 800e5de:	4a15      	ldr	r2, [pc, #84]	@ (800e634 <FLASH_WaitForLastOperation+0xa8>)
 800e5e0:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e5e8:	d307      	bcc.n	800e5fa <FLASH_WaitForLastOperation+0x6e>
 800e5ea:	4b11      	ldr	r3, [pc, #68]	@ (800e630 <FLASH_WaitForLastOperation+0xa4>)
 800e5ec:	699a      	ldr	r2, [r3, #24]
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e5f4:	490e      	ldr	r1, [pc, #56]	@ (800e630 <FLASH_WaitForLastOperation+0xa4>)
 800e5f6:	4313      	orrs	r3, r2
 800e5f8:	618b      	str	r3, [r1, #24]
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800e600:	2b00      	cmp	r3, #0
 800e602:	d004      	beq.n	800e60e <FLASH_WaitForLastOperation+0x82>
 800e604:	4a0a      	ldr	r2, [pc, #40]	@ (800e630 <FLASH_WaitForLastOperation+0xa4>)
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800e60c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800e60e:	2301      	movs	r3, #1
 800e610:	e009      	b.n	800e626 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800e612:	4b07      	ldr	r3, [pc, #28]	@ (800e630 <FLASH_WaitForLastOperation+0xa4>)
 800e614:	691b      	ldr	r3, [r3, #16]
 800e616:	f003 0301 	and.w	r3, r3, #1
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d002      	beq.n	800e624 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800e61e:	4b04      	ldr	r3, [pc, #16]	@ (800e630 <FLASH_WaitForLastOperation+0xa4>)
 800e620:	2201      	movs	r2, #1
 800e622:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800e624:	2300      	movs	r3, #0
}
 800e626:	4618      	mov	r0, r3
 800e628:	3710      	adds	r7, #16
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}
 800e62e:	bf00      	nop
 800e630:	40022000 	.word	0x40022000
 800e634:	20000014 	.word	0x20000014

0800e638 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800e638:	b480      	push	{r7}
 800e63a:	b085      	sub	sp, #20
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	60f8      	str	r0, [r7, #12]
 800e640:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800e644:	4b0e      	ldr	r3, [pc, #56]	@ (800e680 <FLASH_Program_DoubleWord+0x48>)
 800e646:	695b      	ldr	r3, [r3, #20]
 800e648:	4a0d      	ldr	r2, [pc, #52]	@ (800e680 <FLASH_Program_DoubleWord+0x48>)
 800e64a:	f043 0301 	orr.w	r3, r3, #1
 800e64e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	683a      	ldr	r2, [r7, #0]
 800e654:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800e656:	f3bf 8f6f 	isb	sy
}
 800e65a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800e65c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e660:	f04f 0200 	mov.w	r2, #0
 800e664:	f04f 0300 	mov.w	r3, #0
 800e668:	000a      	movs	r2, r1
 800e66a:	2300      	movs	r3, #0
 800e66c:	68f9      	ldr	r1, [r7, #12]
 800e66e:	3104      	adds	r1, #4
 800e670:	4613      	mov	r3, r2
 800e672:	600b      	str	r3, [r1, #0]
}
 800e674:	bf00      	nop
 800e676:	3714      	adds	r7, #20
 800e678:	46bd      	mov	sp, r7
 800e67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67e:	4770      	bx	lr
 800e680:	40022000 	.word	0x40022000

0800e684 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800e684:	b480      	push	{r7}
 800e686:	b089      	sub	sp, #36	@ 0x24
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800e68e:	2340      	movs	r3, #64	@ 0x40
 800e690:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800e69a:	4b14      	ldr	r3, [pc, #80]	@ (800e6ec <FLASH_Program_Fast+0x68>)
 800e69c:	695b      	ldr	r3, [r3, #20]
 800e69e:	4a13      	ldr	r2, [pc, #76]	@ (800e6ec <FLASH_Program_Fast+0x68>)
 800e6a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e6a4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6a6:	f3ef 8310 	mrs	r3, PRIMASK
 800e6aa:	60fb      	str	r3, [r7, #12]
  return(result);
 800e6ac:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800e6ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e6b0:	b672      	cpsid	i
}
 800e6b2:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	681a      	ldr	r2, [r3, #0]
 800e6b8:	69bb      	ldr	r3, [r7, #24]
 800e6ba:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800e6bc:	69bb      	ldr	r3, [r7, #24]
 800e6be:	3304      	adds	r3, #4
 800e6c0:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	3304      	adds	r3, #4
 800e6c6:	617b      	str	r3, [r7, #20]
    row_index--;
 800e6c8:	7ffb      	ldrb	r3, [r7, #31]
 800e6ca:	3b01      	subs	r3, #1
 800e6cc:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800e6ce:	7ffb      	ldrb	r3, [r7, #31]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d1ef      	bne.n	800e6b4 <FLASH_Program_Fast+0x30>
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	f383 8810 	msr	PRIMASK, r3
}
 800e6de:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800e6e0:	bf00      	nop
 800e6e2:	3724      	adds	r7, #36	@ 0x24
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr
 800e6ec:	40022000 	.word	0x40022000

0800e6f0 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e6fa:	4b49      	ldr	r3, [pc, #292]	@ (800e820 <HAL_FLASHEx_Erase+0x130>)
 800e6fc:	781b      	ldrb	r3, [r3, #0]
 800e6fe:	2b01      	cmp	r3, #1
 800e700:	d101      	bne.n	800e706 <HAL_FLASHEx_Erase+0x16>
 800e702:	2302      	movs	r3, #2
 800e704:	e087      	b.n	800e816 <HAL_FLASHEx_Erase+0x126>
 800e706:	4b46      	ldr	r3, [pc, #280]	@ (800e820 <HAL_FLASHEx_Erase+0x130>)
 800e708:	2201      	movs	r2, #1
 800e70a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e70c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e710:	f7ff ff3c 	bl	800e58c <FLASH_WaitForLastOperation>
 800e714:	4603      	mov	r3, r0
 800e716:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800e718:	7bfb      	ldrb	r3, [r7, #15]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d177      	bne.n	800e80e <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e71e:	4b40      	ldr	r3, [pc, #256]	@ (800e820 <HAL_FLASHEx_Erase+0x130>)
 800e720:	2200      	movs	r2, #0
 800e722:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800e724:	4b3f      	ldr	r3, [pc, #252]	@ (800e824 <HAL_FLASHEx_Erase+0x134>)
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d013      	beq.n	800e758 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800e730:	4b3c      	ldr	r3, [pc, #240]	@ (800e824 <HAL_FLASHEx_Erase+0x134>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d009      	beq.n	800e750 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800e73c:	4b39      	ldr	r3, [pc, #228]	@ (800e824 <HAL_FLASHEx_Erase+0x134>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	4a38      	ldr	r2, [pc, #224]	@ (800e824 <HAL_FLASHEx_Erase+0x134>)
 800e742:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e746:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800e748:	4b35      	ldr	r3, [pc, #212]	@ (800e820 <HAL_FLASHEx_Erase+0x130>)
 800e74a:	2203      	movs	r2, #3
 800e74c:	771a      	strb	r2, [r3, #28]
 800e74e:	e016      	b.n	800e77e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800e750:	4b33      	ldr	r3, [pc, #204]	@ (800e820 <HAL_FLASHEx_Erase+0x130>)
 800e752:	2201      	movs	r2, #1
 800e754:	771a      	strb	r2, [r3, #28]
 800e756:	e012      	b.n	800e77e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800e758:	4b32      	ldr	r3, [pc, #200]	@ (800e824 <HAL_FLASHEx_Erase+0x134>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e760:	2b00      	cmp	r3, #0
 800e762:	d009      	beq.n	800e778 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800e764:	4b2f      	ldr	r3, [pc, #188]	@ (800e824 <HAL_FLASHEx_Erase+0x134>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	4a2e      	ldr	r2, [pc, #184]	@ (800e824 <HAL_FLASHEx_Erase+0x134>)
 800e76a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e76e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800e770:	4b2b      	ldr	r3, [pc, #172]	@ (800e820 <HAL_FLASHEx_Erase+0x130>)
 800e772:	2202      	movs	r2, #2
 800e774:	771a      	strb	r2, [r3, #28]
 800e776:	e002      	b.n	800e77e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800e778:	4b29      	ldr	r3, [pc, #164]	@ (800e820 <HAL_FLASHEx_Erase+0x130>)
 800e77a:	2200      	movs	r2, #0
 800e77c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2b01      	cmp	r3, #1
 800e784:	d113      	bne.n	800e7ae <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	685b      	ldr	r3, [r3, #4]
 800e78a:	4618      	mov	r0, r3
 800e78c:	f000 f908 	bl	800e9a0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e790:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e794:	f7ff fefa 	bl	800e58c <FLASH_WaitForLastOperation>
 800e798:	4603      	mov	r3, r0
 800e79a:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800e79c:	4b21      	ldr	r3, [pc, #132]	@ (800e824 <HAL_FLASHEx_Erase+0x134>)
 800e79e:	695b      	ldr	r3, [r3, #20]
 800e7a0:	4a20      	ldr	r2, [pc, #128]	@ (800e824 <HAL_FLASHEx_Erase+0x134>)
 800e7a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e7a6:	f023 0304 	bic.w	r3, r3, #4
 800e7aa:	6153      	str	r3, [r2, #20]
 800e7ac:	e02d      	b.n	800e80a <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e7b4:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	689b      	ldr	r3, [r3, #8]
 800e7ba:	60bb      	str	r3, [r7, #8]
 800e7bc:	e01d      	b.n	800e7fa <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	685b      	ldr	r3, [r3, #4]
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	68b8      	ldr	r0, [r7, #8]
 800e7c6:	f000 f913 	bl	800e9f0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e7ca:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e7ce:	f7ff fedd 	bl	800e58c <FLASH_WaitForLastOperation>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800e7d6:	4b13      	ldr	r3, [pc, #76]	@ (800e824 <HAL_FLASHEx_Erase+0x134>)
 800e7d8:	695b      	ldr	r3, [r3, #20]
 800e7da:	4a12      	ldr	r2, [pc, #72]	@ (800e824 <HAL_FLASHEx_Erase+0x134>)
 800e7dc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800e7e0:	f023 0302 	bic.w	r3, r3, #2
 800e7e4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800e7e6:	7bfb      	ldrb	r3, [r7, #15]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d003      	beq.n	800e7f4 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	68ba      	ldr	r2, [r7, #8]
 800e7f0:	601a      	str	r2, [r3, #0]
          break;
 800e7f2:	e00a      	b.n	800e80a <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	3301      	adds	r3, #1
 800e7f8:	60bb      	str	r3, [r7, #8]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	689a      	ldr	r2, [r3, #8]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	68db      	ldr	r3, [r3, #12]
 800e802:	4413      	add	r3, r2
 800e804:	68ba      	ldr	r2, [r7, #8]
 800e806:	429a      	cmp	r2, r3
 800e808:	d3d9      	bcc.n	800e7be <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800e80a:	f000 f927 	bl	800ea5c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e80e:	4b04      	ldr	r3, [pc, #16]	@ (800e820 <HAL_FLASHEx_Erase+0x130>)
 800e810:	2200      	movs	r2, #0
 800e812:	701a      	strb	r2, [r3, #0]

  return status;
 800e814:	7bfb      	ldrb	r3, [r7, #15]
}
 800e816:	4618      	mov	r0, r3
 800e818:	3710      	adds	r7, #16
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}
 800e81e:	bf00      	nop
 800e820:	20000014 	.word	0x20000014
 800e824:	40022000 	.word	0x40022000

0800e828 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b084      	sub	sp, #16
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e830:	2300      	movs	r3, #0
 800e832:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e834:	4b32      	ldr	r3, [pc, #200]	@ (800e900 <HAL_FLASHEx_OBProgram+0xd8>)
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	2b01      	cmp	r3, #1
 800e83a:	d101      	bne.n	800e840 <HAL_FLASHEx_OBProgram+0x18>
 800e83c:	2302      	movs	r3, #2
 800e83e:	e05a      	b.n	800e8f6 <HAL_FLASHEx_OBProgram+0xce>
 800e840:	4b2f      	ldr	r3, [pc, #188]	@ (800e900 <HAL_FLASHEx_OBProgram+0xd8>)
 800e842:	2201      	movs	r2, #1
 800e844:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e846:	4b2e      	ldr	r3, [pc, #184]	@ (800e900 <HAL_FLASHEx_OBProgram+0xd8>)
 800e848:	2200      	movs	r2, #0
 800e84a:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	f003 0301 	and.w	r3, r3, #1
 800e854:	2b00      	cmp	r3, #0
 800e856:	d00d      	beq.n	800e874 <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if(FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6858      	ldr	r0, [r3, #4]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6899      	ldr	r1, [r3, #8]
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	68db      	ldr	r3, [r3, #12]
 800e864:	461a      	mov	r2, r3
 800e866:	f000 f943 	bl	800eaf0 <FLASH_OB_WRPConfig>
 800e86a:	4603      	mov	r3, r0
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d001      	beq.n	800e874 <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 800e870:	2301      	movs	r3, #1
 800e872:	73fb      	strb	r3, [r7, #15]
    }

  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	f003 0302 	and.w	r3, r3, #2
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d009      	beq.n	800e894 <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	691b      	ldr	r3, [r3, #16]
 800e884:	4618      	mov	r0, r3
 800e886:	f000 f997 	bl	800ebb8 <FLASH_OB_RDPConfig>
 800e88a:	4603      	mov	r3, r0
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d001      	beq.n	800e894 <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 800e890:	2301      	movs	r3, #1
 800e892:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* User Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	f003 0304 	and.w	r3, r3, #4
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d00c      	beq.n	800e8ba <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	695a      	ldr	r2, [r3, #20]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	699b      	ldr	r3, [r3, #24]
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	4610      	mov	r0, r2
 800e8ac:	f000 f9b2 	bl	800ec14 <FLASH_OB_UserConfig>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d001      	beq.n	800e8ba <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* PCROP Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f003 0308 	and.w	r3, r3, #8
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d013      	beq.n	800e8ee <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6a1a      	ldr	r2, [r3, #32]
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d00d      	beq.n	800e8ee <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	69d8      	ldr	r0, [r3, #28]
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6a19      	ldr	r1, [r3, #32]
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8de:	461a      	mov	r2, r3
 800e8e0:	f000 fa90 	bl	800ee04 <FLASH_OB_PCROPConfig>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d001      	beq.n	800e8ee <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 800e8ea:	2301      	movs	r3, #1
 800e8ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e8ee:	4b04      	ldr	r3, [pc, #16]	@ (800e900 <HAL_FLASHEx_OBProgram+0xd8>)
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	701a      	strb	r2, [r3, #0]

  return status;
 800e8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3710      	adds	r7, #16
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
 800e8fe:	bf00      	nop
 800e900:	20000014 	.word	0x20000014

0800e904 <HAL_FLASHEx_OBGetConfig>:
  *         which area is requested for the WRP and PCROP, else no information will be returned
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b082      	sub	sp, #8
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2206      	movs	r2, #6
 800e910:	601a      	str	r2, [r3, #0]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	685b      	ldr	r3, [r3, #4]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d00b      	beq.n	800e932 <HAL_FLASHEx_OBGetConfig+0x2e>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	685b      	ldr	r3, [r3, #4]
 800e91e:	2b01      	cmp	r3, #1
 800e920:	d007      	beq.n	800e932 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	685b      	ldr	r3, [r3, #4]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800e926:	2b02      	cmp	r3, #2
 800e928:	d003      	beq.n	800e932 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	2b04      	cmp	r3, #4
 800e930:	d10f      	bne.n	800e952 <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f043 0201 	orr.w	r2, r3, #1
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6858      	ldr	r0, [r3, #4]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f103 0108 	add.w	r1, r3, #8
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	330c      	adds	r3, #12
 800e94c:	461a      	mov	r2, r3
 800e94e:	f000 fb05 	bl	800ef5c <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800e952:	f000 fb4d 	bl	800eff0 <FLASH_OB_GetRDP>
 800e956:	4602      	mov	r2, r0
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800e95c:	f000 fb62 	bl	800f024 <FLASH_OB_GetUser>
 800e960:	4602      	mov	r2, r0
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	619a      	str	r2, [r3, #24]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	69db      	ldr	r3, [r3, #28]
 800e96a:	2b01      	cmp	r3, #1
 800e96c:	d003      	beq.n	800e976 <HAL_FLASHEx_OBGetConfig+0x72>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	69db      	ldr	r3, [r3, #28]
 800e972:	2b02      	cmp	r3, #2
 800e974:	d110      	bne.n	800e998 <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if(pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	f043 0208 	orr.w	r2, r3, #8
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f103 001c 	add.w	r0, r3, #28
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f103 0120 	add.w	r1, r3, #32
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	3324      	adds	r3, #36	@ 0x24
 800e992:	461a      	mov	r2, r3
 800e994:	f000 fb5a 	bl	800f04c <FLASH_OB_GetPCROP>
  }
}
 800e998:	bf00      	nop
 800e99a:	3708      	adds	r7, #8
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bd80      	pop	{r7, pc}

0800e9a0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b083      	sub	sp, #12
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f003 0301 	and.w	r3, r3, #1
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d005      	beq.n	800e9be <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800e9b2:	4b0e      	ldr	r3, [pc, #56]	@ (800e9ec <FLASH_MassErase+0x4c>)
 800e9b4:	695b      	ldr	r3, [r3, #20]
 800e9b6:	4a0d      	ldr	r2, [pc, #52]	@ (800e9ec <FLASH_MassErase+0x4c>)
 800e9b8:	f043 0304 	orr.w	r3, r3, #4
 800e9bc:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	f003 0302 	and.w	r3, r3, #2
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d005      	beq.n	800e9d4 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800e9c8:	4b08      	ldr	r3, [pc, #32]	@ (800e9ec <FLASH_MassErase+0x4c>)
 800e9ca:	695b      	ldr	r3, [r3, #20]
 800e9cc:	4a07      	ldr	r2, [pc, #28]	@ (800e9ec <FLASH_MassErase+0x4c>)
 800e9ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e9d2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800e9d4:	4b05      	ldr	r3, [pc, #20]	@ (800e9ec <FLASH_MassErase+0x4c>)
 800e9d6:	695b      	ldr	r3, [r3, #20]
 800e9d8:	4a04      	ldr	r2, [pc, #16]	@ (800e9ec <FLASH_MassErase+0x4c>)
 800e9da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e9de:	6153      	str	r3, [r2, #20]
}
 800e9e0:	bf00      	nop
 800e9e2:	370c      	adds	r7, #12
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ea:	4770      	bx	lr
 800e9ec:	40022000 	.word	0x40022000

0800e9f0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800e9f0:	b480      	push	{r7}
 800e9f2:	b083      	sub	sp, #12
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
 800e9f8:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	f003 0301 	and.w	r3, r3, #1
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d006      	beq.n	800ea12 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800ea04:	4b14      	ldr	r3, [pc, #80]	@ (800ea58 <FLASH_PageErase+0x68>)
 800ea06:	695b      	ldr	r3, [r3, #20]
 800ea08:	4a13      	ldr	r2, [pc, #76]	@ (800ea58 <FLASH_PageErase+0x68>)
 800ea0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ea0e:	6153      	str	r3, [r2, #20]
 800ea10:	e005      	b.n	800ea1e <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800ea12:	4b11      	ldr	r3, [pc, #68]	@ (800ea58 <FLASH_PageErase+0x68>)
 800ea14:	695b      	ldr	r3, [r3, #20]
 800ea16:	4a10      	ldr	r2, [pc, #64]	@ (800ea58 <FLASH_PageErase+0x68>)
 800ea18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800ea1c:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800ea1e:	4b0e      	ldr	r3, [pc, #56]	@ (800ea58 <FLASH_PageErase+0x68>)
 800ea20:	695b      	ldr	r3, [r3, #20]
 800ea22:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	00db      	lsls	r3, r3, #3
 800ea2a:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 800ea2e:	490a      	ldr	r1, [pc, #40]	@ (800ea58 <FLASH_PageErase+0x68>)
 800ea30:	4313      	orrs	r3, r2
 800ea32:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800ea34:	4b08      	ldr	r3, [pc, #32]	@ (800ea58 <FLASH_PageErase+0x68>)
 800ea36:	695b      	ldr	r3, [r3, #20]
 800ea38:	4a07      	ldr	r2, [pc, #28]	@ (800ea58 <FLASH_PageErase+0x68>)
 800ea3a:	f043 0302 	orr.w	r3, r3, #2
 800ea3e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800ea40:	4b05      	ldr	r3, [pc, #20]	@ (800ea58 <FLASH_PageErase+0x68>)
 800ea42:	695b      	ldr	r3, [r3, #20]
 800ea44:	4a04      	ldr	r2, [pc, #16]	@ (800ea58 <FLASH_PageErase+0x68>)
 800ea46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ea4a:	6153      	str	r3, [r2, #20]
}
 800ea4c:	bf00      	nop
 800ea4e:	370c      	adds	r7, #12
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr
 800ea58:	40022000 	.word	0x40022000

0800ea5c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b083      	sub	sp, #12
 800ea60:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800ea62:	4b21      	ldr	r3, [pc, #132]	@ (800eae8 <FLASH_FlushCaches+0x8c>)
 800ea64:	7f1b      	ldrb	r3, [r3, #28]
 800ea66:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800ea68:	79fb      	ldrb	r3, [r7, #7]
 800ea6a:	2b01      	cmp	r3, #1
 800ea6c:	d002      	beq.n	800ea74 <FLASH_FlushCaches+0x18>
 800ea6e:	79fb      	ldrb	r3, [r7, #7]
 800ea70:	2b03      	cmp	r3, #3
 800ea72:	d117      	bne.n	800eaa4 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800ea74:	4b1d      	ldr	r3, [pc, #116]	@ (800eaec <FLASH_FlushCaches+0x90>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	4a1c      	ldr	r2, [pc, #112]	@ (800eaec <FLASH_FlushCaches+0x90>)
 800ea7a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ea7e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800ea80:	4b1a      	ldr	r3, [pc, #104]	@ (800eaec <FLASH_FlushCaches+0x90>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	4a19      	ldr	r2, [pc, #100]	@ (800eaec <FLASH_FlushCaches+0x90>)
 800ea86:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800ea8a:	6013      	str	r3, [r2, #0]
 800ea8c:	4b17      	ldr	r3, [pc, #92]	@ (800eaec <FLASH_FlushCaches+0x90>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4a16      	ldr	r2, [pc, #88]	@ (800eaec <FLASH_FlushCaches+0x90>)
 800ea92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ea96:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ea98:	4b14      	ldr	r3, [pc, #80]	@ (800eaec <FLASH_FlushCaches+0x90>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	4a13      	ldr	r2, [pc, #76]	@ (800eaec <FLASH_FlushCaches+0x90>)
 800ea9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800eaa2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800eaa4:	79fb      	ldrb	r3, [r7, #7]
 800eaa6:	2b02      	cmp	r3, #2
 800eaa8:	d002      	beq.n	800eab0 <FLASH_FlushCaches+0x54>
 800eaaa:	79fb      	ldrb	r3, [r7, #7]
 800eaac:	2b03      	cmp	r3, #3
 800eaae:	d111      	bne.n	800ead4 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800eab0:	4b0e      	ldr	r3, [pc, #56]	@ (800eaec <FLASH_FlushCaches+0x90>)
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	4a0d      	ldr	r2, [pc, #52]	@ (800eaec <FLASH_FlushCaches+0x90>)
 800eab6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800eaba:	6013      	str	r3, [r2, #0]
 800eabc:	4b0b      	ldr	r3, [pc, #44]	@ (800eaec <FLASH_FlushCaches+0x90>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4a0a      	ldr	r2, [pc, #40]	@ (800eaec <FLASH_FlushCaches+0x90>)
 800eac2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eac6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800eac8:	4b08      	ldr	r3, [pc, #32]	@ (800eaec <FLASH_FlushCaches+0x90>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	4a07      	ldr	r2, [pc, #28]	@ (800eaec <FLASH_FlushCaches+0x90>)
 800eace:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ead2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800ead4:	4b04      	ldr	r3, [pc, #16]	@ (800eae8 <FLASH_FlushCaches+0x8c>)
 800ead6:	2200      	movs	r2, #0
 800ead8:	771a      	strb	r2, [r3, #28]
}
 800eada:	bf00      	nop
 800eadc:	370c      	adds	r7, #12
 800eade:	46bd      	mov	sp, r7
 800eae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae4:	4770      	bx	lr
 800eae6:	bf00      	nop
 800eae8:	20000014 	.word	0x20000014
 800eaec:	40022000 	.word	0x40022000

0800eaf0 <FLASH_OB_WRPConfig>:
  *          This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1)
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b086      	sub	sp, #24
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	60f8      	str	r0, [r7, #12]
 800eaf8:	60b9      	str	r1, [r7, #8]
 800eafa:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800eafc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800eb00:	f7ff fd44 	bl	800e58c <FLASH_WaitForLastOperation>
 800eb04:	4603      	mov	r3, r0
 800eb06:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800eb08:	7dfb      	ldrb	r3, [r7, #23]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d14c      	bne.n	800eba8 <FLASH_OB_WRPConfig+0xb8>
  {
    /* Configure the write protected area */
    if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d10b      	bne.n	800eb2c <FLASH_OB_WRPConfig+0x3c>
    {
      MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
 800eb14:	4b27      	ldr	r3, [pc, #156]	@ (800ebb4 <FLASH_OB_WRPConfig+0xc4>)
 800eb16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb18:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	0419      	lsls	r1, r3, #16
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	430b      	orrs	r3, r1
 800eb24:	4923      	ldr	r1, [pc, #140]	@ (800ebb4 <FLASH_OB_WRPConfig+0xc4>)
 800eb26:	4313      	orrs	r3, r2
 800eb28:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800eb2a:	e02b      	b.n	800eb84 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2b01      	cmp	r3, #1
 800eb30:	d10b      	bne.n	800eb4a <FLASH_OB_WRPConfig+0x5a>
    {
      MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
 800eb32:	4b20      	ldr	r3, [pc, #128]	@ (800ebb4 <FLASH_OB_WRPConfig+0xc4>)
 800eb34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb36:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	0419      	lsls	r1, r3, #16
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	430b      	orrs	r3, r1
 800eb42:	491c      	ldr	r1, [pc, #112]	@ (800ebb4 <FLASH_OB_WRPConfig+0xc4>)
 800eb44:	4313      	orrs	r3, r2
 800eb46:	630b      	str	r3, [r1, #48]	@ 0x30
 800eb48:	e01c      	b.n	800eb84 <FLASH_OB_WRPConfig+0x94>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	2b02      	cmp	r3, #2
 800eb4e:	d10b      	bne.n	800eb68 <FLASH_OB_WRPConfig+0x78>
    {
      MODIFY_REG(FLASH->WRP2AR, (FLASH_WRP2AR_WRP2A_STRT | FLASH_WRP2AR_WRP2A_END),
 800eb50:	4b18      	ldr	r3, [pc, #96]	@ (800ebb4 <FLASH_OB_WRPConfig+0xc4>)
 800eb52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb54:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	0419      	lsls	r1, r3, #16
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	430b      	orrs	r3, r1
 800eb60:	4914      	ldr	r1, [pc, #80]	@ (800ebb4 <FLASH_OB_WRPConfig+0xc4>)
 800eb62:	4313      	orrs	r3, r2
 800eb64:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800eb66:	e00d      	b.n	800eb84 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	2b04      	cmp	r3, #4
 800eb6c:	d10a      	bne.n	800eb84 <FLASH_OB_WRPConfig+0x94>
    {
      MODIFY_REG(FLASH->WRP2BR, (FLASH_WRP2BR_WRP2B_STRT | FLASH_WRP2BR_WRP2B_END),
 800eb6e:	4b11      	ldr	r3, [pc, #68]	@ (800ebb4 <FLASH_OB_WRPConfig+0xc4>)
 800eb70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb72:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	0419      	lsls	r1, r3, #16
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	430b      	orrs	r3, r1
 800eb7e:	490d      	ldr	r1, [pc, #52]	@ (800ebb4 <FLASH_OB_WRPConfig+0xc4>)
 800eb80:	4313      	orrs	r3, r2
 800eb82:	650b      	str	r3, [r1, #80]	@ 0x50
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800eb84:	4b0b      	ldr	r3, [pc, #44]	@ (800ebb4 <FLASH_OB_WRPConfig+0xc4>)
 800eb86:	695b      	ldr	r3, [r3, #20]
 800eb88:	4a0a      	ldr	r2, [pc, #40]	@ (800ebb4 <FLASH_OB_WRPConfig+0xc4>)
 800eb8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eb8e:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800eb90:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800eb94:	f7ff fcfa 	bl	800e58c <FLASH_WaitForLastOperation>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	75fb      	strb	r3, [r7, #23]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800eb9c:	4b05      	ldr	r3, [pc, #20]	@ (800ebb4 <FLASH_OB_WRPConfig+0xc4>)
 800eb9e:	695b      	ldr	r3, [r3, #20]
 800eba0:	4a04      	ldr	r2, [pc, #16]	@ (800ebb4 <FLASH_OB_WRPConfig+0xc4>)
 800eba2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800eba6:	6153      	str	r3, [r2, #20]
  }

  return status;
 800eba8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3718      	adds	r7, #24
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}
 800ebb2:	bf00      	nop
 800ebb4:	40022000 	.word	0x40022000

0800ebb8 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b084      	sub	sp, #16
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ebc0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800ebc4:	f7ff fce2 	bl	800e58c <FLASH_WaitForLastOperation>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800ebcc:	7bfb      	ldrb	r3, [r7, #15]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d119      	bne.n	800ec06 <FLASH_OB_RDPConfig+0x4e>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 800ebd2:	4b0f      	ldr	r3, [pc, #60]	@ (800ec10 <FLASH_OB_RDPConfig+0x58>)
 800ebd4:	6a1b      	ldr	r3, [r3, #32]
 800ebd6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ebda:	490d      	ldr	r1, [pc, #52]	@ (800ec10 <FLASH_OB_RDPConfig+0x58>)
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	4313      	orrs	r3, r2
 800ebe0:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800ebe2:	4b0b      	ldr	r3, [pc, #44]	@ (800ec10 <FLASH_OB_RDPConfig+0x58>)
 800ebe4:	695b      	ldr	r3, [r3, #20]
 800ebe6:	4a0a      	ldr	r2, [pc, #40]	@ (800ec10 <FLASH_OB_RDPConfig+0x58>)
 800ebe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ebec:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ebee:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800ebf2:	f7ff fccb 	bl	800e58c <FLASH_WaitForLastOperation>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800ebfa:	4b05      	ldr	r3, [pc, #20]	@ (800ec10 <FLASH_OB_RDPConfig+0x58>)
 800ebfc:	695b      	ldr	r3, [r3, #20]
 800ebfe:	4a04      	ldr	r2, [pc, #16]	@ (800ec10 <FLASH_OB_RDPConfig+0x58>)
 800ec00:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ec04:	6153      	str	r3, [r2, #20]
  }

  return status;
 800ec06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3710      	adds	r7, #16
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}
 800ec10:	40022000 	.word	0x40022000

0800ec14 <FLASH_OB_UserConfig>:
  *         DUALBANK(Bit21), nBOOT1(Bit23), SRAM2_PE(Bit24) and SRAM2_RST(Bit25).
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b086      	sub	sp, #24
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 800ec22:	2300      	movs	r3, #0
 800ec24:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ec26:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800ec2a:	f7ff fcaf 	bl	800e58c <FLASH_WaitForLastOperation>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800ec32:	7bfb      	ldrb	r3, [r7, #15]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	f040 80de 	bne.w	800edf6 <FLASH_OB_UserConfig+0x1e2>
  {
    if((UserType & OB_USER_BOR_LEV) != 0U)
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f003 0301 	and.w	r3, r3, #1
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d009      	beq.n	800ec58 <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ec4a:	697a      	ldr	r2, [r7, #20]
 800ec4c:	4313      	orrs	r3, r2
 800ec4e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800ec56:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STOP) != 0U)
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f003 0302 	and.w	r3, r3, #2
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d009      	beq.n	800ec76 <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ec68:	697a      	ldr	r2, [r7, #20]
 800ec6a:	4313      	orrs	r3, r2
 800ec6c:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 800ec6e:	693b      	ldr	r3, [r7, #16]
 800ec70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ec74:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STDBY) != 0U)
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f003 0304 	and.w	r3, r3, #4
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d009      	beq.n	800ec94 <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ec86:	697a      	ldr	r2, [r7, #20]
 800ec88:	4313      	orrs	r3, r2
 800ec8a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 800ec8c:	693b      	ldr	r3, [r7, #16]
 800ec8e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ec92:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_SHDW) != 0U)
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d009      	beq.n	800ecb2 <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eca4:	697a      	ldr	r2, [r7, #20]
 800eca6:	4313      	orrs	r3, r2
 800eca8:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 800ecaa:	693b      	ldr	r3, [r7, #16]
 800ecac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ecb0:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_SW) != 0U)
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f003 0308 	and.w	r3, r3, #8
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d009      	beq.n	800ecd0 <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ecc2:	697a      	ldr	r2, [r7, #20]
 800ecc4:	4313      	orrs	r3, r2
 800ecc6:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ecce:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STOP) != 0U)
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f003 0310 	and.w	r3, r3, #16
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d009      	beq.n	800ecee <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ece0:	697a      	ldr	r2, [r7, #20]
 800ece2:	4313      	orrs	r3, r2
 800ece4:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 800ece6:	693b      	ldr	r3, [r7, #16]
 800ece8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ecec:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STDBY) != 0U)
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	f003 0320 	and.w	r3, r3, #32
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d009      	beq.n	800ed0c <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ecfe:	697a      	ldr	r2, [r7, #20]
 800ed00:	4313      	orrs	r3, r2
 800ed02:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ed0a:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_WWDG_SW) != 0U)
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d009      	beq.n	800ed2a <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ed1c:	697a      	ldr	r2, [r7, #20]
 800ed1e:	4313      	orrs	r3, r2
 800ed20:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 800ed22:	693b      	ldr	r3, [r7, #16]
 800ed24:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ed28:	613b      	str	r3, [r7, #16]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_BFB2) != 0U)
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d009      	beq.n	800ed48 <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ed3a:	697a      	ldr	r2, [r7, #20]
 800ed3c:	4313      	orrs	r3, r2
 800ed3e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 800ed40:	693b      	ldr	r3, [r7, #16]
 800ed42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ed46:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_DUALBANK) != 0U)
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d009      	beq.n	800ed66 <FLASH_OB_UserConfig+0x152>
#else
      /* DUALBANK option byte should be modified */
      assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));

      /* Set value and mask for DUALBANK option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ed58:	697a      	ldr	r2, [r7, #20]
 800ed5a:	4313      	orrs	r3, r2
 800ed5c:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_DUALBANK;
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ed64:	613b      	str	r3, [r7, #16]
#endif
    }
#endif

    if((UserType & OB_USER_nBOOT1) != 0U)
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d009      	beq.n	800ed84 <FLASH_OB_UserConfig+0x170>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ed76:	697a      	ldr	r2, [r7, #20]
 800ed78:	4313      	orrs	r3, r2
 800ed7a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ed82:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_PE) != 0U)
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d009      	beq.n	800eda2 <FLASH_OB_UserConfig+0x18e>
    {
      /* SRAM2_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_PARITY(UserConfig & FLASH_OPTR_SRAM2_PE));

      /* Set value and mask for SRAM2_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_PE);
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ed94:	697a      	ldr	r2, [r7, #20]
 800ed96:	4313      	orrs	r3, r2
 800ed98:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_PE;
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800eda0:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_RST) != 0U)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d009      	beq.n	800edc0 <FLASH_OB_UserConfig+0x1ac>
    {
      /* SRAM2_RST option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));

      /* Set value and mask for SRAM2_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800edb2:	697a      	ldr	r2, [r7, #20]
 800edb4:	4313      	orrs	r3, r2
 800edb6:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800edbe:	613b      	str	r3, [r7, #16]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
    }
#endif

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 800edc0:	4b0f      	ldr	r3, [pc, #60]	@ (800ee00 <FLASH_OB_UserConfig+0x1ec>)
 800edc2:	6a1a      	ldr	r2, [r3, #32]
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	43db      	mvns	r3, r3
 800edc8:	401a      	ands	r2, r3
 800edca:	490d      	ldr	r1, [pc, #52]	@ (800ee00 <FLASH_OB_UserConfig+0x1ec>)
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	4313      	orrs	r3, r2
 800edd0:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800edd2:	4b0b      	ldr	r3, [pc, #44]	@ (800ee00 <FLASH_OB_UserConfig+0x1ec>)
 800edd4:	695b      	ldr	r3, [r3, #20]
 800edd6:	4a0a      	ldr	r2, [pc, #40]	@ (800ee00 <FLASH_OB_UserConfig+0x1ec>)
 800edd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eddc:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800edde:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800ede2:	f7ff fbd3 	bl	800e58c <FLASH_WaitForLastOperation>
 800ede6:	4603      	mov	r3, r0
 800ede8:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800edea:	4b05      	ldr	r3, [pc, #20]	@ (800ee00 <FLASH_OB_UserConfig+0x1ec>)
 800edec:	695b      	ldr	r3, [r3, #20]
 800edee:	4a04      	ldr	r2, [pc, #16]	@ (800ee00 <FLASH_OB_UserConfig+0x1ec>)
 800edf0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800edf4:	6153      	str	r3, [r2, #20]
  }

  return status;
 800edf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800edf8:	4618      	mov	r0, r3
 800edfa:	3718      	adds	r7, #24
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}
 800ee00:	40022000 	.word	0x40022000

0800ee04 <FLASH_OB_PCROPConfig>:
  *          This parameter can be an address between PCROPStartAddr and end of the bank
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b088      	sub	sp, #32
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	60f8      	str	r0, [r7, #12]
 800ee0c:	60b9      	str	r1, [r7, #8]
 800ee0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ee10:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800ee14:	f7ff fbba 	bl	800e58c <FLASH_WaitForLastOperation>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	77fb      	strb	r3, [r7, #31]

  if(status == HAL_OK)
 800ee1c:	7ffb      	ldrb	r3, [r7, #31]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	f040 808c 	bne.w	800ef3c <FLASH_OB_PCROPConfig+0x138>
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800ee24:	4b48      	ldr	r3, [pc, #288]	@ (800ef48 <FLASH_OB_PCROPConfig+0x144>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d115      	bne.n	800ee5c <FLASH_OB_PCROPConfig+0x58>
    {
      bank1_addr = FLASH_BASE;
 800ee30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ee34:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800ee36:	4b45      	ldr	r3, [pc, #276]	@ (800ef4c <FLASH_OB_PCROPConfig+0x148>)
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	b29b      	uxth	r3, r3
 800ee3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ee40:	4293      	cmp	r3, r2
 800ee42:	d008      	beq.n	800ee56 <FLASH_OB_PCROPConfig+0x52>
 800ee44:	4b41      	ldr	r3, [pc, #260]	@ (800ef4c <FLASH_OB_PCROPConfig+0x148>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	029b      	lsls	r3, r3, #10
 800ee4a:	085a      	lsrs	r2, r3, #1
 800ee4c:	4b40      	ldr	r3, [pc, #256]	@ (800ef50 <FLASH_OB_PCROPConfig+0x14c>)
 800ee4e:	4013      	ands	r3, r2
 800ee50:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800ee54:	e000      	b.n	800ee58 <FLASH_OB_PCROPConfig+0x54>
 800ee56:	4b3f      	ldr	r3, [pc, #252]	@ (800ef54 <FLASH_OB_PCROPConfig+0x150>)
 800ee58:	617b      	str	r3, [r7, #20]
 800ee5a:	e014      	b.n	800ee86 <FLASH_OB_PCROPConfig+0x82>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800ee5c:	4b3b      	ldr	r3, [pc, #236]	@ (800ef4c <FLASH_OB_PCROPConfig+0x148>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	b29b      	uxth	r3, r3
 800ee62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ee66:	4293      	cmp	r3, r2
 800ee68:	d008      	beq.n	800ee7c <FLASH_OB_PCROPConfig+0x78>
 800ee6a:	4b38      	ldr	r3, [pc, #224]	@ (800ef4c <FLASH_OB_PCROPConfig+0x148>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	029b      	lsls	r3, r3, #10
 800ee70:	085a      	lsrs	r2, r3, #1
 800ee72:	4b37      	ldr	r3, [pc, #220]	@ (800ef50 <FLASH_OB_PCROPConfig+0x14c>)
 800ee74:	4013      	ands	r3, r2
 800ee76:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800ee7a:	e000      	b.n	800ee7e <FLASH_OB_PCROPConfig+0x7a>
 800ee7c:	4b35      	ldr	r3, [pc, #212]	@ (800ef54 <FLASH_OB_PCROPConfig+0x150>)
 800ee7e:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 800ee80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ee84:	617b      	str	r3, [r7, #20]
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	f003 0303 	and.w	r3, r3, #3
 800ee8c:	2b01      	cmp	r3, #1
 800ee8e:	d11a      	bne.n	800eec6 <FLASH_OB_PCROPConfig+0xc2>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 800ee90:	68ba      	ldr	r2, [r7, #8]
 800ee92:	69bb      	ldr	r3, [r7, #24]
 800ee94:	1ad3      	subs	r3, r2, r3
 800ee96:	08db      	lsrs	r3, r3, #3
 800ee98:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 800ee9a:	4b2f      	ldr	r3, [pc, #188]	@ (800ef58 <FLASH_OB_PCROPConfig+0x154>)
 800ee9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee9e:	0c1b      	lsrs	r3, r3, #16
 800eea0:	041b      	lsls	r3, r3, #16
 800eea2:	492d      	ldr	r1, [pc, #180]	@ (800ef58 <FLASH_OB_PCROPConfig+0x154>)
 800eea4:	693a      	ldr	r2, [r7, #16]
 800eea6:	4313      	orrs	r3, r2
 800eea8:	624b      	str	r3, [r1, #36]	@ 0x24

        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 800eeaa:	687a      	ldr	r2, [r7, #4]
 800eeac:	69bb      	ldr	r3, [r7, #24]
 800eeae:	1ad3      	subs	r3, r2, r3
 800eeb0:	08db      	lsrs	r3, r3, #3
 800eeb2:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 800eeb4:	4b28      	ldr	r3, [pc, #160]	@ (800ef58 <FLASH_OB_PCROPConfig+0x154>)
 800eeb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eeb8:	0c1b      	lsrs	r3, r3, #16
 800eeba:	041b      	lsls	r3, r3, #16
 800eebc:	4926      	ldr	r1, [pc, #152]	@ (800ef58 <FLASH_OB_PCROPConfig+0x154>)
 800eebe:	693a      	ldr	r2, [r7, #16]
 800eec0:	4313      	orrs	r3, r2
 800eec2:	628b      	str	r3, [r1, #40]	@ 0x28
 800eec4:	e01e      	b.n	800ef04 <FLASH_OB_PCROPConfig+0x100>
      }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	f003 0303 	and.w	r3, r3, #3
 800eecc:	2b02      	cmp	r3, #2
 800eece:	d119      	bne.n	800ef04 <FLASH_OB_PCROPConfig+0x100>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 800eed0:	68ba      	ldr	r2, [r7, #8]
 800eed2:	697b      	ldr	r3, [r7, #20]
 800eed4:	1ad3      	subs	r3, r2, r3
 800eed6:	08db      	lsrs	r3, r3, #3
 800eed8:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 800eeda:	4b1f      	ldr	r3, [pc, #124]	@ (800ef58 <FLASH_OB_PCROPConfig+0x154>)
 800eedc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eede:	0c1b      	lsrs	r3, r3, #16
 800eee0:	041b      	lsls	r3, r3, #16
 800eee2:	491d      	ldr	r1, [pc, #116]	@ (800ef58 <FLASH_OB_PCROPConfig+0x154>)
 800eee4:	693a      	ldr	r2, [r7, #16]
 800eee6:	4313      	orrs	r3, r2
 800eee8:	644b      	str	r3, [r1, #68]	@ 0x44

        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 800eeea:	687a      	ldr	r2, [r7, #4]
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	1ad3      	subs	r3, r2, r3
 800eef0:	08db      	lsrs	r3, r3, #3
 800eef2:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 800eef4:	4b18      	ldr	r3, [pc, #96]	@ (800ef58 <FLASH_OB_PCROPConfig+0x154>)
 800eef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eef8:	0c1b      	lsrs	r3, r3, #16
 800eefa:	041b      	lsls	r3, r3, #16
 800eefc:	4916      	ldr	r1, [pc, #88]	@ (800ef58 <FLASH_OB_PCROPConfig+0x154>)
 800eefe:	693a      	ldr	r2, [r7, #16]
 800ef00:	4313      	orrs	r3, r2
 800ef02:	648b      	str	r3, [r1, #72]	@ 0x48
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 800ef04:	4b14      	ldr	r3, [pc, #80]	@ (800ef58 <FLASH_OB_PCROPConfig+0x154>)
 800ef06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef08:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ef12:	4911      	ldr	r1, [pc, #68]	@ (800ef58 <FLASH_OB_PCROPConfig+0x154>)
 800ef14:	4313      	orrs	r3, r2
 800ef16:	628b      	str	r3, [r1, #40]	@ 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800ef18:	4b0f      	ldr	r3, [pc, #60]	@ (800ef58 <FLASH_OB_PCROPConfig+0x154>)
 800ef1a:	695b      	ldr	r3, [r3, #20]
 800ef1c:	4a0e      	ldr	r2, [pc, #56]	@ (800ef58 <FLASH_OB_PCROPConfig+0x154>)
 800ef1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ef22:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ef24:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800ef28:	f7ff fb30 	bl	800e58c <FLASH_WaitForLastOperation>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	77fb      	strb	r3, [r7, #31]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800ef30:	4b09      	ldr	r3, [pc, #36]	@ (800ef58 <FLASH_OB_PCROPConfig+0x154>)
 800ef32:	695b      	ldr	r3, [r3, #20]
 800ef34:	4a08      	ldr	r2, [pc, #32]	@ (800ef58 <FLASH_OB_PCROPConfig+0x154>)
 800ef36:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ef3a:	6153      	str	r3, [r2, #20]
  }

  return status;
 800ef3c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3720      	adds	r7, #32
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	bf00      	nop
 800ef48:	40010000 	.word	0x40010000
 800ef4c:	1fff75e0 	.word	0x1fff75e0
 800ef50:	01fffe00 	.word	0x01fffe00
 800ef54:	08080000 	.word	0x08080000
 800ef58:	40022000 	.word	0x40022000

0800ef5c <FLASH_OB_GetWRP>:
  *                        the write protected area
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t * WRPStartOffset, uint32_t * WRDPEndOffset)
{
 800ef5c:	b480      	push	{r7}
 800ef5e:	b085      	sub	sp, #20
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	60f8      	str	r0, [r7, #12]
 800ef64:	60b9      	str	r1, [r7, #8]
 800ef66:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d10b      	bne.n	800ef86 <FLASH_OB_GetWRP+0x2a>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 800ef6e:	4b1f      	ldr	r3, [pc, #124]	@ (800efec <FLASH_OB_GetWRP+0x90>)
 800ef70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef72:	b2da      	uxtb	r2, r3
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 800ef78:	4b1c      	ldr	r3, [pc, #112]	@ (800efec <FLASH_OB_GetWRP+0x90>)
 800ef7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef7c:	0c1b      	lsrs	r3, r3, #16
 800ef7e:	b2da      	uxtb	r2, r3
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 800ef84:	e02b      	b.n	800efde <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	2b01      	cmp	r3, #1
 800ef8a:	d10b      	bne.n	800efa4 <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 800ef8c:	4b17      	ldr	r3, [pc, #92]	@ (800efec <FLASH_OB_GetWRP+0x90>)
 800ef8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef90:	b2da      	uxtb	r2, r3
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 800ef96:	4b15      	ldr	r3, [pc, #84]	@ (800efec <FLASH_OB_GetWRP+0x90>)
 800ef98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef9a:	0c1b      	lsrs	r3, r3, #16
 800ef9c:	b2da      	uxtb	r2, r3
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	601a      	str	r2, [r3, #0]
}
 800efa2:	e01c      	b.n	800efde <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	2b02      	cmp	r3, #2
 800efa8:	d10b      	bne.n	800efc2 <FLASH_OB_GetWRP+0x66>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 800efaa:	4b10      	ldr	r3, [pc, #64]	@ (800efec <FLASH_OB_GetWRP+0x90>)
 800efac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800efae:	b2da      	uxtb	r2, r3
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 800efb4:	4b0d      	ldr	r3, [pc, #52]	@ (800efec <FLASH_OB_GetWRP+0x90>)
 800efb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800efb8:	0c1b      	lsrs	r3, r3, #16
 800efba:	b2da      	uxtb	r2, r3
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	601a      	str	r2, [r3, #0]
}
 800efc0:	e00d      	b.n	800efde <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	2b04      	cmp	r3, #4
 800efc6:	d10a      	bne.n	800efde <FLASH_OB_GetWRP+0x82>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 800efc8:	4b08      	ldr	r3, [pc, #32]	@ (800efec <FLASH_OB_GetWRP+0x90>)
 800efca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800efcc:	b2da      	uxtb	r2, r3
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 800efd2:	4b06      	ldr	r3, [pc, #24]	@ (800efec <FLASH_OB_GetWRP+0x90>)
 800efd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800efd6:	0c1b      	lsrs	r3, r3, #16
 800efd8:	b2da      	uxtb	r2, r3
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	601a      	str	r2, [r3, #0]
}
 800efde:	bf00      	nop
 800efe0:	3714      	adds	r7, #20
 800efe2:	46bd      	mov	sp, r7
 800efe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe8:	4770      	bx	lr
 800efea:	bf00      	nop
 800efec:	40022000 	.word	0x40022000

0800eff0 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 800eff0:	b480      	push	{r7}
 800eff2:	b083      	sub	sp, #12
 800eff4:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800eff6:	4b0a      	ldr	r3, [pc, #40]	@ (800f020 <FLASH_OB_GetRDP+0x30>)
 800eff8:	6a1b      	ldr	r3, [r3, #32]
 800effa:	b2db      	uxtb	r3, r3
 800effc:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2baa      	cmp	r3, #170	@ 0xaa
 800f002:	d004      	beq.n	800f00e <FLASH_OB_GetRDP+0x1e>
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2bcc      	cmp	r3, #204	@ 0xcc
 800f008:	d001      	beq.n	800f00e <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 800f00a:	23bb      	movs	r3, #187	@ 0xbb
 800f00c:	e002      	b.n	800f014 <FLASH_OB_GetRDP+0x24>
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 800f00e:	4b04      	ldr	r3, [pc, #16]	@ (800f020 <FLASH_OB_GetRDP+0x30>)
 800f010:	6a1b      	ldr	r3, [r3, #32]
 800f012:	b2db      	uxtb	r3, r3
  }
}
 800f014:	4618      	mov	r0, r3
 800f016:	370c      	adds	r7, #12
 800f018:	46bd      	mov	sp, r7
 800f01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01e:	4770      	bx	lr
 800f020:	40022000 	.word	0x40022000

0800f024 <FLASH_OB_GetUser>:
  *         BOR_LEV(Bit8-10), nRST_STOP(Bit12), nRST_STDBY(Bit13), nRST_SHDW(Bit14),
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27).
  */
static uint32_t FLASH_OB_GetUser(void)
{
 800f024:	b480      	push	{r7}
 800f026:	b083      	sub	sp, #12
 800f028:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 800f02a:	4b07      	ldr	r3, [pc, #28]	@ (800f048 <FLASH_OB_GetUser+0x24>)
 800f02c:	6a1b      	ldr	r3, [r3, #32]
 800f02e:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f036:	607b      	str	r3, [r7, #4]

  return user_config;
 800f038:	687b      	ldr	r3, [r7, #4]
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	370c      	adds	r7, #12
 800f03e:	46bd      	mov	sp, r7
 800f040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f044:	4770      	bx	lr
 800f046:	bf00      	nop
 800f048:	40022000 	.word	0x40022000

0800f04c <FLASH_OB_GetPCROP>:
  *                       the Proprietary code readout protection
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t * PCROPConfig, uint32_t * PCROPStartAddr, uint32_t * PCROPEndAddr)
{
 800f04c:	b480      	push	{r7}
 800f04e:	b089      	sub	sp, #36	@ 0x24
 800f050:	af00      	add	r7, sp, #0
 800f052:	60f8      	str	r0, [r7, #12]
 800f054:	60b9      	str	r1, [r7, #8]
 800f056:	607a      	str	r2, [r7, #4]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800f058:	4b3b      	ldr	r3, [pc, #236]	@ (800f148 <FLASH_OB_GetPCROP+0xfc>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f060:	2b00      	cmp	r3, #0
 800f062:	d115      	bne.n	800f090 <FLASH_OB_GetPCROP+0x44>
  {
    bank1_addr = FLASH_BASE;
 800f064:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f068:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800f06a:	4b38      	ldr	r3, [pc, #224]	@ (800f14c <FLASH_OB_GetPCROP+0x100>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	b29b      	uxth	r3, r3
 800f070:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f074:	4293      	cmp	r3, r2
 800f076:	d008      	beq.n	800f08a <FLASH_OB_GetPCROP+0x3e>
 800f078:	4b34      	ldr	r3, [pc, #208]	@ (800f14c <FLASH_OB_GetPCROP+0x100>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	029b      	lsls	r3, r3, #10
 800f07e:	085a      	lsrs	r2, r3, #1
 800f080:	4b33      	ldr	r3, [pc, #204]	@ (800f150 <FLASH_OB_GetPCROP+0x104>)
 800f082:	4013      	ands	r3, r2
 800f084:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800f088:	e000      	b.n	800f08c <FLASH_OB_GetPCROP+0x40>
 800f08a:	4b32      	ldr	r3, [pc, #200]	@ (800f154 <FLASH_OB_GetPCROP+0x108>)
 800f08c:	61bb      	str	r3, [r7, #24]
 800f08e:	e014      	b.n	800f0ba <FLASH_OB_GetPCROP+0x6e>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800f090:	4b2e      	ldr	r3, [pc, #184]	@ (800f14c <FLASH_OB_GetPCROP+0x100>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	b29b      	uxth	r3, r3
 800f096:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f09a:	4293      	cmp	r3, r2
 800f09c:	d008      	beq.n	800f0b0 <FLASH_OB_GetPCROP+0x64>
 800f09e:	4b2b      	ldr	r3, [pc, #172]	@ (800f14c <FLASH_OB_GetPCROP+0x100>)
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	029b      	lsls	r3, r3, #10
 800f0a4:	085a      	lsrs	r2, r3, #1
 800f0a6:	4b2a      	ldr	r3, [pc, #168]	@ (800f150 <FLASH_OB_GetPCROP+0x104>)
 800f0a8:	4013      	ands	r3, r2
 800f0aa:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800f0ae:	e000      	b.n	800f0b2 <FLASH_OB_GetPCROP+0x66>
 800f0b0:	4b28      	ldr	r3, [pc, #160]	@ (800f154 <FLASH_OB_GetPCROP+0x108>)
 800f0b2:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 800f0b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f0b8:	61bb      	str	r3, [r7, #24]
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	f003 0303 	and.w	r3, r3, #3
 800f0c2:	2b01      	cmp	r3, #1
 800f0c4:	d115      	bne.n	800f0f2 <FLASH_OB_GetPCROP+0xa6>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 800f0c6:	4b24      	ldr	r3, [pc, #144]	@ (800f158 <FLASH_OB_GetPCROP+0x10c>)
 800f0c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0ca:	b29b      	uxth	r3, r3
 800f0cc:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	00da      	lsls	r2, r3, #3
 800f0d2:	69fb      	ldr	r3, [r7, #28]
 800f0d4:	441a      	add	r2, r3
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 800f0da:	4b1f      	ldr	r3, [pc, #124]	@ (800f158 <FLASH_OB_GetPCROP+0x10c>)
 800f0dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0de:	b29b      	uxth	r3, r3
 800f0e0:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	00da      	lsls	r2, r3, #3
 800f0e6:	69fb      	ldr	r3, [r7, #28]
 800f0e8:	4413      	add	r3, r2
 800f0ea:	1dda      	adds	r2, r3, #7
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	601a      	str	r2, [r3, #0]
 800f0f0:	e01a      	b.n	800f128 <FLASH_OB_GetPCROP+0xdc>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	f003 0303 	and.w	r3, r3, #3
 800f0fa:	2b02      	cmp	r3, #2
 800f0fc:	d114      	bne.n	800f128 <FLASH_OB_GetPCROP+0xdc>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 800f0fe:	4b16      	ldr	r3, [pc, #88]	@ (800f158 <FLASH_OB_GetPCROP+0x10c>)
 800f100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f102:	b29b      	uxth	r3, r3
 800f104:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	00da      	lsls	r2, r3, #3
 800f10a:	69bb      	ldr	r3, [r7, #24]
 800f10c:	441a      	add	r2, r3
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 800f112:	4b11      	ldr	r3, [pc, #68]	@ (800f158 <FLASH_OB_GetPCROP+0x10c>)
 800f114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f116:	b29b      	uxth	r3, r3
 800f118:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr + 0x7U;
 800f11a:	697b      	ldr	r3, [r7, #20]
 800f11c:	00da      	lsls	r2, r3, #3
 800f11e:	69bb      	ldr	r3, [r7, #24]
 800f120:	4413      	add	r3, r2
 800f122:	1dda      	adds	r2, r3, #7
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 800f128:	4b0b      	ldr	r3, [pc, #44]	@ (800f158 <FLASH_OB_GetPCROP+0x10c>)
 800f12a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f12c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	431a      	orrs	r2, r3
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	601a      	str	r2, [r3, #0]
}
 800f13a:	bf00      	nop
 800f13c:	3724      	adds	r7, #36	@ 0x24
 800f13e:	46bd      	mov	sp, r7
 800f140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f144:	4770      	bx	lr
 800f146:	bf00      	nop
 800f148:	40010000 	.word	0x40010000
 800f14c:	1fff75e0 	.word	0x1fff75e0
 800f150:	01fffe00 	.word	0x01fffe00
 800f154:	08080000 	.word	0x08080000
 800f158:	40022000 	.word	0x40022000

0800f15c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f15c:	b480      	push	{r7}
 800f15e:	b087      	sub	sp, #28
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
 800f164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800f166:	2300      	movs	r3, #0
 800f168:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f16a:	e17f      	b.n	800f46c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	681a      	ldr	r2, [r3, #0]
 800f170:	2101      	movs	r1, #1
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	fa01 f303 	lsl.w	r3, r1, r3
 800f178:	4013      	ands	r3, r2
 800f17a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	f000 8171 	beq.w	800f466 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	685b      	ldr	r3, [r3, #4]
 800f188:	f003 0303 	and.w	r3, r3, #3
 800f18c:	2b01      	cmp	r3, #1
 800f18e:	d005      	beq.n	800f19c <HAL_GPIO_Init+0x40>
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	685b      	ldr	r3, [r3, #4]
 800f194:	f003 0303 	and.w	r3, r3, #3
 800f198:	2b02      	cmp	r3, #2
 800f19a:	d130      	bne.n	800f1fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	689b      	ldr	r3, [r3, #8]
 800f1a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	005b      	lsls	r3, r3, #1
 800f1a6:	2203      	movs	r2, #3
 800f1a8:	fa02 f303 	lsl.w	r3, r2, r3
 800f1ac:	43db      	mvns	r3, r3
 800f1ae:	693a      	ldr	r2, [r7, #16]
 800f1b0:	4013      	ands	r3, r2
 800f1b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	68da      	ldr	r2, [r3, #12]
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	005b      	lsls	r3, r3, #1
 800f1bc:	fa02 f303 	lsl.w	r3, r2, r3
 800f1c0:	693a      	ldr	r2, [r7, #16]
 800f1c2:	4313      	orrs	r3, r2
 800f1c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	693a      	ldr	r2, [r7, #16]
 800f1ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	685b      	ldr	r3, [r3, #4]
 800f1d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800f1d2:	2201      	movs	r2, #1
 800f1d4:	697b      	ldr	r3, [r7, #20]
 800f1d6:	fa02 f303 	lsl.w	r3, r2, r3
 800f1da:	43db      	mvns	r3, r3
 800f1dc:	693a      	ldr	r2, [r7, #16]
 800f1de:	4013      	ands	r3, r2
 800f1e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	685b      	ldr	r3, [r3, #4]
 800f1e6:	091b      	lsrs	r3, r3, #4
 800f1e8:	f003 0201 	and.w	r2, r3, #1
 800f1ec:	697b      	ldr	r3, [r7, #20]
 800f1ee:	fa02 f303 	lsl.w	r3, r2, r3
 800f1f2:	693a      	ldr	r2, [r7, #16]
 800f1f4:	4313      	orrs	r3, r2
 800f1f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	693a      	ldr	r2, [r7, #16]
 800f1fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	685b      	ldr	r3, [r3, #4]
 800f202:	f003 0303 	and.w	r3, r3, #3
 800f206:	2b03      	cmp	r3, #3
 800f208:	d118      	bne.n	800f23c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f20e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800f210:	2201      	movs	r2, #1
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	fa02 f303 	lsl.w	r3, r2, r3
 800f218:	43db      	mvns	r3, r3
 800f21a:	693a      	ldr	r2, [r7, #16]
 800f21c:	4013      	ands	r3, r2
 800f21e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	685b      	ldr	r3, [r3, #4]
 800f224:	08db      	lsrs	r3, r3, #3
 800f226:	f003 0201 	and.w	r2, r3, #1
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	fa02 f303 	lsl.w	r3, r2, r3
 800f230:	693a      	ldr	r2, [r7, #16]
 800f232:	4313      	orrs	r3, r2
 800f234:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	693a      	ldr	r2, [r7, #16]
 800f23a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	685b      	ldr	r3, [r3, #4]
 800f240:	f003 0303 	and.w	r3, r3, #3
 800f244:	2b03      	cmp	r3, #3
 800f246:	d017      	beq.n	800f278 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	68db      	ldr	r3, [r3, #12]
 800f24c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800f24e:	697b      	ldr	r3, [r7, #20]
 800f250:	005b      	lsls	r3, r3, #1
 800f252:	2203      	movs	r2, #3
 800f254:	fa02 f303 	lsl.w	r3, r2, r3
 800f258:	43db      	mvns	r3, r3
 800f25a:	693a      	ldr	r2, [r7, #16]
 800f25c:	4013      	ands	r3, r2
 800f25e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	689a      	ldr	r2, [r3, #8]
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	005b      	lsls	r3, r3, #1
 800f268:	fa02 f303 	lsl.w	r3, r2, r3
 800f26c:	693a      	ldr	r2, [r7, #16]
 800f26e:	4313      	orrs	r3, r2
 800f270:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	693a      	ldr	r2, [r7, #16]
 800f276:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	685b      	ldr	r3, [r3, #4]
 800f27c:	f003 0303 	and.w	r3, r3, #3
 800f280:	2b02      	cmp	r3, #2
 800f282:	d123      	bne.n	800f2cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	08da      	lsrs	r2, r3, #3
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	3208      	adds	r2, #8
 800f28c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f290:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	f003 0307 	and.w	r3, r3, #7
 800f298:	009b      	lsls	r3, r3, #2
 800f29a:	220f      	movs	r2, #15
 800f29c:	fa02 f303 	lsl.w	r3, r2, r3
 800f2a0:	43db      	mvns	r3, r3
 800f2a2:	693a      	ldr	r2, [r7, #16]
 800f2a4:	4013      	ands	r3, r2
 800f2a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	691a      	ldr	r2, [r3, #16]
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	f003 0307 	and.w	r3, r3, #7
 800f2b2:	009b      	lsls	r3, r3, #2
 800f2b4:	fa02 f303 	lsl.w	r3, r2, r3
 800f2b8:	693a      	ldr	r2, [r7, #16]
 800f2ba:	4313      	orrs	r3, r2
 800f2bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	08da      	lsrs	r2, r3, #3
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	3208      	adds	r2, #8
 800f2c6:	6939      	ldr	r1, [r7, #16]
 800f2c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	005b      	lsls	r3, r3, #1
 800f2d6:	2203      	movs	r2, #3
 800f2d8:	fa02 f303 	lsl.w	r3, r2, r3
 800f2dc:	43db      	mvns	r3, r3
 800f2de:	693a      	ldr	r2, [r7, #16]
 800f2e0:	4013      	ands	r3, r2
 800f2e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	685b      	ldr	r3, [r3, #4]
 800f2e8:	f003 0203 	and.w	r2, r3, #3
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	005b      	lsls	r3, r3, #1
 800f2f0:	fa02 f303 	lsl.w	r3, r2, r3
 800f2f4:	693a      	ldr	r2, [r7, #16]
 800f2f6:	4313      	orrs	r3, r2
 800f2f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	693a      	ldr	r2, [r7, #16]
 800f2fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	685b      	ldr	r3, [r3, #4]
 800f304:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f308:	2b00      	cmp	r3, #0
 800f30a:	f000 80ac 	beq.w	800f466 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f30e:	4b5f      	ldr	r3, [pc, #380]	@ (800f48c <HAL_GPIO_Init+0x330>)
 800f310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f312:	4a5e      	ldr	r2, [pc, #376]	@ (800f48c <HAL_GPIO_Init+0x330>)
 800f314:	f043 0301 	orr.w	r3, r3, #1
 800f318:	6613      	str	r3, [r2, #96]	@ 0x60
 800f31a:	4b5c      	ldr	r3, [pc, #368]	@ (800f48c <HAL_GPIO_Init+0x330>)
 800f31c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f31e:	f003 0301 	and.w	r3, r3, #1
 800f322:	60bb      	str	r3, [r7, #8]
 800f324:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800f326:	4a5a      	ldr	r2, [pc, #360]	@ (800f490 <HAL_GPIO_Init+0x334>)
 800f328:	697b      	ldr	r3, [r7, #20]
 800f32a:	089b      	lsrs	r3, r3, #2
 800f32c:	3302      	adds	r3, #2
 800f32e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f332:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	f003 0303 	and.w	r3, r3, #3
 800f33a:	009b      	lsls	r3, r3, #2
 800f33c:	220f      	movs	r2, #15
 800f33e:	fa02 f303 	lsl.w	r3, r2, r3
 800f342:	43db      	mvns	r3, r3
 800f344:	693a      	ldr	r2, [r7, #16]
 800f346:	4013      	ands	r3, r2
 800f348:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800f350:	d025      	beq.n	800f39e <HAL_GPIO_Init+0x242>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	4a4f      	ldr	r2, [pc, #316]	@ (800f494 <HAL_GPIO_Init+0x338>)
 800f356:	4293      	cmp	r3, r2
 800f358:	d01f      	beq.n	800f39a <HAL_GPIO_Init+0x23e>
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	4a4e      	ldr	r2, [pc, #312]	@ (800f498 <HAL_GPIO_Init+0x33c>)
 800f35e:	4293      	cmp	r3, r2
 800f360:	d019      	beq.n	800f396 <HAL_GPIO_Init+0x23a>
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	4a4d      	ldr	r2, [pc, #308]	@ (800f49c <HAL_GPIO_Init+0x340>)
 800f366:	4293      	cmp	r3, r2
 800f368:	d013      	beq.n	800f392 <HAL_GPIO_Init+0x236>
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	4a4c      	ldr	r2, [pc, #304]	@ (800f4a0 <HAL_GPIO_Init+0x344>)
 800f36e:	4293      	cmp	r3, r2
 800f370:	d00d      	beq.n	800f38e <HAL_GPIO_Init+0x232>
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	4a4b      	ldr	r2, [pc, #300]	@ (800f4a4 <HAL_GPIO_Init+0x348>)
 800f376:	4293      	cmp	r3, r2
 800f378:	d007      	beq.n	800f38a <HAL_GPIO_Init+0x22e>
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	4a4a      	ldr	r2, [pc, #296]	@ (800f4a8 <HAL_GPIO_Init+0x34c>)
 800f37e:	4293      	cmp	r3, r2
 800f380:	d101      	bne.n	800f386 <HAL_GPIO_Init+0x22a>
 800f382:	2306      	movs	r3, #6
 800f384:	e00c      	b.n	800f3a0 <HAL_GPIO_Init+0x244>
 800f386:	2307      	movs	r3, #7
 800f388:	e00a      	b.n	800f3a0 <HAL_GPIO_Init+0x244>
 800f38a:	2305      	movs	r3, #5
 800f38c:	e008      	b.n	800f3a0 <HAL_GPIO_Init+0x244>
 800f38e:	2304      	movs	r3, #4
 800f390:	e006      	b.n	800f3a0 <HAL_GPIO_Init+0x244>
 800f392:	2303      	movs	r3, #3
 800f394:	e004      	b.n	800f3a0 <HAL_GPIO_Init+0x244>
 800f396:	2302      	movs	r3, #2
 800f398:	e002      	b.n	800f3a0 <HAL_GPIO_Init+0x244>
 800f39a:	2301      	movs	r3, #1
 800f39c:	e000      	b.n	800f3a0 <HAL_GPIO_Init+0x244>
 800f39e:	2300      	movs	r3, #0
 800f3a0:	697a      	ldr	r2, [r7, #20]
 800f3a2:	f002 0203 	and.w	r2, r2, #3
 800f3a6:	0092      	lsls	r2, r2, #2
 800f3a8:	4093      	lsls	r3, r2
 800f3aa:	693a      	ldr	r2, [r7, #16]
 800f3ac:	4313      	orrs	r3, r2
 800f3ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800f3b0:	4937      	ldr	r1, [pc, #220]	@ (800f490 <HAL_GPIO_Init+0x334>)
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	089b      	lsrs	r3, r3, #2
 800f3b6:	3302      	adds	r3, #2
 800f3b8:	693a      	ldr	r2, [r7, #16]
 800f3ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800f3be:	4b3b      	ldr	r3, [pc, #236]	@ (800f4ac <HAL_GPIO_Init+0x350>)
 800f3c0:	689b      	ldr	r3, [r3, #8]
 800f3c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	43db      	mvns	r3, r3
 800f3c8:	693a      	ldr	r2, [r7, #16]
 800f3ca:	4013      	ands	r3, r2
 800f3cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	685b      	ldr	r3, [r3, #4]
 800f3d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d003      	beq.n	800f3e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800f3da:	693a      	ldr	r2, [r7, #16]
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	4313      	orrs	r3, r2
 800f3e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800f3e2:	4a32      	ldr	r2, [pc, #200]	@ (800f4ac <HAL_GPIO_Init+0x350>)
 800f3e4:	693b      	ldr	r3, [r7, #16]
 800f3e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800f3e8:	4b30      	ldr	r3, [pc, #192]	@ (800f4ac <HAL_GPIO_Init+0x350>)
 800f3ea:	68db      	ldr	r3, [r3, #12]
 800f3ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	43db      	mvns	r3, r3
 800f3f2:	693a      	ldr	r2, [r7, #16]
 800f3f4:	4013      	ands	r3, r2
 800f3f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	685b      	ldr	r3, [r3, #4]
 800f3fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f400:	2b00      	cmp	r3, #0
 800f402:	d003      	beq.n	800f40c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800f404:	693a      	ldr	r2, [r7, #16]
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	4313      	orrs	r3, r2
 800f40a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800f40c:	4a27      	ldr	r2, [pc, #156]	@ (800f4ac <HAL_GPIO_Init+0x350>)
 800f40e:	693b      	ldr	r3, [r7, #16]
 800f410:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800f412:	4b26      	ldr	r3, [pc, #152]	@ (800f4ac <HAL_GPIO_Init+0x350>)
 800f414:	685b      	ldr	r3, [r3, #4]
 800f416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	43db      	mvns	r3, r3
 800f41c:	693a      	ldr	r2, [r7, #16]
 800f41e:	4013      	ands	r3, r2
 800f420:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	685b      	ldr	r3, [r3, #4]
 800f426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d003      	beq.n	800f436 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800f42e:	693a      	ldr	r2, [r7, #16]
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	4313      	orrs	r3, r2
 800f434:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800f436:	4a1d      	ldr	r2, [pc, #116]	@ (800f4ac <HAL_GPIO_Init+0x350>)
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800f43c:	4b1b      	ldr	r3, [pc, #108]	@ (800f4ac <HAL_GPIO_Init+0x350>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	43db      	mvns	r3, r3
 800f446:	693a      	ldr	r2, [r7, #16]
 800f448:	4013      	ands	r3, r2
 800f44a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f454:	2b00      	cmp	r3, #0
 800f456:	d003      	beq.n	800f460 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800f458:	693a      	ldr	r2, [r7, #16]
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	4313      	orrs	r3, r2
 800f45e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800f460:	4a12      	ldr	r2, [pc, #72]	@ (800f4ac <HAL_GPIO_Init+0x350>)
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	3301      	adds	r3, #1
 800f46a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	681a      	ldr	r2, [r3, #0]
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	fa22 f303 	lsr.w	r3, r2, r3
 800f476:	2b00      	cmp	r3, #0
 800f478:	f47f ae78 	bne.w	800f16c <HAL_GPIO_Init+0x10>
  }
}
 800f47c:	bf00      	nop
 800f47e:	bf00      	nop
 800f480:	371c      	adds	r7, #28
 800f482:	46bd      	mov	sp, r7
 800f484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f488:	4770      	bx	lr
 800f48a:	bf00      	nop
 800f48c:	40021000 	.word	0x40021000
 800f490:	40010000 	.word	0x40010000
 800f494:	48000400 	.word	0x48000400
 800f498:	48000800 	.word	0x48000800
 800f49c:	48000c00 	.word	0x48000c00
 800f4a0:	48001000 	.word	0x48001000
 800f4a4:	48001400 	.word	0x48001400
 800f4a8:	48001800 	.word	0x48001800
 800f4ac:	40010400 	.word	0x40010400

0800f4b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b085      	sub	sp, #20
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	460b      	mov	r3, r1
 800f4ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	691a      	ldr	r2, [r3, #16]
 800f4c0:	887b      	ldrh	r3, [r7, #2]
 800f4c2:	4013      	ands	r3, r2
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d002      	beq.n	800f4ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800f4c8:	2301      	movs	r3, #1
 800f4ca:	73fb      	strb	r3, [r7, #15]
 800f4cc:	e001      	b.n	800f4d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f4d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	3714      	adds	r7, #20
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4de:	4770      	bx	lr

0800f4e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f4e0:	b480      	push	{r7}
 800f4e2:	b083      	sub	sp, #12
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	807b      	strh	r3, [r7, #2]
 800f4ec:	4613      	mov	r3, r2
 800f4ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800f4f0:	787b      	ldrb	r3, [r7, #1]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d003      	beq.n	800f4fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800f4f6:	887a      	ldrh	r2, [r7, #2]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800f4fc:	e002      	b.n	800f504 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800f4fe:	887a      	ldrh	r2, [r7, #2]
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800f504:	bf00      	nop
 800f506:	370c      	adds	r7, #12
 800f508:	46bd      	mov	sp, r7
 800f50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50e:	4770      	bx	lr

0800f510 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b082      	sub	sp, #8
 800f514:	af00      	add	r7, sp, #0
 800f516:	4603      	mov	r3, r0
 800f518:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800f51a:	4b08      	ldr	r3, [pc, #32]	@ (800f53c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f51c:	695a      	ldr	r2, [r3, #20]
 800f51e:	88fb      	ldrh	r3, [r7, #6]
 800f520:	4013      	ands	r3, r2
 800f522:	2b00      	cmp	r3, #0
 800f524:	d006      	beq.n	800f534 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800f526:	4a05      	ldr	r2, [pc, #20]	@ (800f53c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f528:	88fb      	ldrh	r3, [r7, #6]
 800f52a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800f52c:	88fb      	ldrh	r3, [r7, #6]
 800f52e:	4618      	mov	r0, r3
 800f530:	f7f3 fe38 	bl	80031a4 <HAL_GPIO_EXTI_Callback>
  }
}
 800f534:	bf00      	nop
 800f536:	3708      	adds	r7, #8
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}
 800f53c:	40010400 	.word	0x40010400

0800f540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b082      	sub	sp, #8
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d101      	bne.n	800f552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f54e:	2301      	movs	r3, #1
 800f550:	e08d      	b.n	800f66e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f558:	b2db      	uxtb	r3, r3
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d106      	bne.n	800f56c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2200      	movs	r2, #0
 800f562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800f566:	6878      	ldr	r0, [r7, #4]
 800f568:	f7f8 ff02 	bl	8008370 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2224      	movs	r2, #36	@ 0x24
 800f570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	681a      	ldr	r2, [r3, #0]
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	f022 0201 	bic.w	r2, r2, #1
 800f582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	685a      	ldr	r2, [r3, #4]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800f590:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	689a      	ldr	r2, [r3, #8]
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f5a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	68db      	ldr	r3, [r3, #12]
 800f5a6:	2b01      	cmp	r3, #1
 800f5a8:	d107      	bne.n	800f5ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	689a      	ldr	r2, [r3, #8]
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f5b6:	609a      	str	r2, [r3, #8]
 800f5b8:	e006      	b.n	800f5c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	689a      	ldr	r2, [r3, #8]
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800f5c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	68db      	ldr	r3, [r3, #12]
 800f5cc:	2b02      	cmp	r3, #2
 800f5ce:	d108      	bne.n	800f5e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	685a      	ldr	r2, [r3, #4]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f5de:	605a      	str	r2, [r3, #4]
 800f5e0:	e007      	b.n	800f5f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	685a      	ldr	r2, [r3, #4]
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f5f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	685b      	ldr	r3, [r3, #4]
 800f5f8:	687a      	ldr	r2, [r7, #4]
 800f5fa:	6812      	ldr	r2, [r2, #0]
 800f5fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800f600:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f604:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	68da      	ldr	r2, [r3, #12]
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f614:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	691a      	ldr	r2, [r3, #16]
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	695b      	ldr	r3, [r3, #20]
 800f61e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	699b      	ldr	r3, [r3, #24]
 800f626:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	430a      	orrs	r2, r1
 800f62e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	69d9      	ldr	r1, [r3, #28]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6a1a      	ldr	r2, [r3, #32]
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	430a      	orrs	r2, r1
 800f63e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	681a      	ldr	r2, [r3, #0]
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	f042 0201 	orr.w	r2, r2, #1
 800f64e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2200      	movs	r2, #0
 800f654:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2220      	movs	r2, #32
 800f65a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	2200      	movs	r2, #0
 800f662:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2200      	movs	r2, #0
 800f668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800f66c:	2300      	movs	r3, #0
}
 800f66e:	4618      	mov	r0, r3
 800f670:	3708      	adds	r7, #8
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
	...

0800f678 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b088      	sub	sp, #32
 800f67c:	af02      	add	r7, sp, #8
 800f67e:	60f8      	str	r0, [r7, #12]
 800f680:	607a      	str	r2, [r7, #4]
 800f682:	461a      	mov	r2, r3
 800f684:	460b      	mov	r3, r1
 800f686:	817b      	strh	r3, [r7, #10]
 800f688:	4613      	mov	r3, r2
 800f68a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f692:	b2db      	uxtb	r3, r3
 800f694:	2b20      	cmp	r3, #32
 800f696:	f040 80fd 	bne.w	800f894 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f6a0:	2b01      	cmp	r3, #1
 800f6a2:	d101      	bne.n	800f6a8 <HAL_I2C_Master_Transmit+0x30>
 800f6a4:	2302      	movs	r3, #2
 800f6a6:	e0f6      	b.n	800f896 <HAL_I2C_Master_Transmit+0x21e>
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	2201      	movs	r2, #1
 800f6ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f6b0:	f7fc fce0 	bl	800c074 <HAL_GetTick>
 800f6b4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f6b6:	693b      	ldr	r3, [r7, #16]
 800f6b8:	9300      	str	r3, [sp, #0]
 800f6ba:	2319      	movs	r3, #25
 800f6bc:	2201      	movs	r2, #1
 800f6be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f6c2:	68f8      	ldr	r0, [r7, #12]
 800f6c4:	f000 fa0a 	bl	800fadc <I2C_WaitOnFlagUntilTimeout>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d001      	beq.n	800f6d2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	e0e1      	b.n	800f896 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	2221      	movs	r2, #33	@ 0x21
 800f6d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	2210      	movs	r2, #16
 800f6de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	687a      	ldr	r2, [r7, #4]
 800f6ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	893a      	ldrh	r2, [r7, #8]
 800f6f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f6fe:	b29b      	uxth	r3, r3
 800f700:	2bff      	cmp	r3, #255	@ 0xff
 800f702:	d906      	bls.n	800f712 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	22ff      	movs	r2, #255	@ 0xff
 800f708:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800f70a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f70e:	617b      	str	r3, [r7, #20]
 800f710:	e007      	b.n	800f722 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f716:	b29a      	uxth	r2, r3
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800f71c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f720:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f726:	2b00      	cmp	r3, #0
 800f728:	d024      	beq.n	800f774 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f72e:	781a      	ldrb	r2, [r3, #0]
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f73a:	1c5a      	adds	r2, r3, #1
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f744:	b29b      	uxth	r3, r3
 800f746:	3b01      	subs	r3, #1
 800f748:	b29a      	uxth	r2, r3
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f752:	3b01      	subs	r3, #1
 800f754:	b29a      	uxth	r2, r3
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f75e:	b2db      	uxtb	r3, r3
 800f760:	3301      	adds	r3, #1
 800f762:	b2da      	uxtb	r2, r3
 800f764:	8979      	ldrh	r1, [r7, #10]
 800f766:	4b4e      	ldr	r3, [pc, #312]	@ (800f8a0 <HAL_I2C_Master_Transmit+0x228>)
 800f768:	9300      	str	r3, [sp, #0]
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	68f8      	ldr	r0, [r7, #12]
 800f76e:	f000 fc05 	bl	800ff7c <I2C_TransferConfig>
 800f772:	e066      	b.n	800f842 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f778:	b2da      	uxtb	r2, r3
 800f77a:	8979      	ldrh	r1, [r7, #10]
 800f77c:	4b48      	ldr	r3, [pc, #288]	@ (800f8a0 <HAL_I2C_Master_Transmit+0x228>)
 800f77e:	9300      	str	r3, [sp, #0]
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	68f8      	ldr	r0, [r7, #12]
 800f784:	f000 fbfa 	bl	800ff7c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800f788:	e05b      	b.n	800f842 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f78a:	693a      	ldr	r2, [r7, #16]
 800f78c:	6a39      	ldr	r1, [r7, #32]
 800f78e:	68f8      	ldr	r0, [r7, #12]
 800f790:	f000 f9fd 	bl	800fb8e <I2C_WaitOnTXISFlagUntilTimeout>
 800f794:	4603      	mov	r3, r0
 800f796:	2b00      	cmp	r3, #0
 800f798:	d001      	beq.n	800f79e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800f79a:	2301      	movs	r3, #1
 800f79c:	e07b      	b.n	800f896 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7a2:	781a      	ldrb	r2, [r3, #0]
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7ae:	1c5a      	adds	r2, r3, #1
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7b8:	b29b      	uxth	r3, r3
 800f7ba:	3b01      	subs	r3, #1
 800f7bc:	b29a      	uxth	r2, r3
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f7c6:	3b01      	subs	r3, #1
 800f7c8:	b29a      	uxth	r2, r3
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7d2:	b29b      	uxth	r3, r3
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d034      	beq.n	800f842 <HAL_I2C_Master_Transmit+0x1ca>
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d130      	bne.n	800f842 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800f7e0:	693b      	ldr	r3, [r7, #16]
 800f7e2:	9300      	str	r3, [sp, #0]
 800f7e4:	6a3b      	ldr	r3, [r7, #32]
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	2180      	movs	r1, #128	@ 0x80
 800f7ea:	68f8      	ldr	r0, [r7, #12]
 800f7ec:	f000 f976 	bl	800fadc <I2C_WaitOnFlagUntilTimeout>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d001      	beq.n	800f7fa <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800f7f6:	2301      	movs	r3, #1
 800f7f8:	e04d      	b.n	800f896 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7fe:	b29b      	uxth	r3, r3
 800f800:	2bff      	cmp	r3, #255	@ 0xff
 800f802:	d90e      	bls.n	800f822 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	22ff      	movs	r2, #255	@ 0xff
 800f808:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f80e:	b2da      	uxtb	r2, r3
 800f810:	8979      	ldrh	r1, [r7, #10]
 800f812:	2300      	movs	r3, #0
 800f814:	9300      	str	r3, [sp, #0]
 800f816:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f81a:	68f8      	ldr	r0, [r7, #12]
 800f81c:	f000 fbae 	bl	800ff7c <I2C_TransferConfig>
 800f820:	e00f      	b.n	800f842 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f826:	b29a      	uxth	r2, r3
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f830:	b2da      	uxtb	r2, r3
 800f832:	8979      	ldrh	r1, [r7, #10]
 800f834:	2300      	movs	r3, #0
 800f836:	9300      	str	r3, [sp, #0]
 800f838:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f83c:	68f8      	ldr	r0, [r7, #12]
 800f83e:	f000 fb9d 	bl	800ff7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f846:	b29b      	uxth	r3, r3
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d19e      	bne.n	800f78a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f84c:	693a      	ldr	r2, [r7, #16]
 800f84e:	6a39      	ldr	r1, [r7, #32]
 800f850:	68f8      	ldr	r0, [r7, #12]
 800f852:	f000 f9e3 	bl	800fc1c <I2C_WaitOnSTOPFlagUntilTimeout>
 800f856:	4603      	mov	r3, r0
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d001      	beq.n	800f860 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800f85c:	2301      	movs	r3, #1
 800f85e:	e01a      	b.n	800f896 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	2220      	movs	r2, #32
 800f866:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	6859      	ldr	r1, [r3, #4]
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	681a      	ldr	r2, [r3, #0]
 800f872:	4b0c      	ldr	r3, [pc, #48]	@ (800f8a4 <HAL_I2C_Master_Transmit+0x22c>)
 800f874:	400b      	ands	r3, r1
 800f876:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	2220      	movs	r2, #32
 800f87c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	2200      	movs	r2, #0
 800f884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	2200      	movs	r2, #0
 800f88c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800f890:	2300      	movs	r3, #0
 800f892:	e000      	b.n	800f896 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800f894:	2302      	movs	r3, #2
  }
}
 800f896:	4618      	mov	r0, r3
 800f898:	3718      	adds	r7, #24
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}
 800f89e:	bf00      	nop
 800f8a0:	80002000 	.word	0x80002000
 800f8a4:	fe00e800 	.word	0xfe00e800

0800f8a8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b088      	sub	sp, #32
 800f8ac:	af02      	add	r7, sp, #8
 800f8ae:	60f8      	str	r0, [r7, #12]
 800f8b0:	607a      	str	r2, [r7, #4]
 800f8b2:	461a      	mov	r2, r3
 800f8b4:	460b      	mov	r3, r1
 800f8b6:	817b      	strh	r3, [r7, #10]
 800f8b8:	4613      	mov	r3, r2
 800f8ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f8c2:	b2db      	uxtb	r3, r3
 800f8c4:	2b20      	cmp	r3, #32
 800f8c6:	f040 80db 	bne.w	800fa80 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f8d0:	2b01      	cmp	r3, #1
 800f8d2:	d101      	bne.n	800f8d8 <HAL_I2C_Master_Receive+0x30>
 800f8d4:	2302      	movs	r3, #2
 800f8d6:	e0d4      	b.n	800fa82 <HAL_I2C_Master_Receive+0x1da>
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	2201      	movs	r2, #1
 800f8dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f8e0:	f7fc fbc8 	bl	800c074 <HAL_GetTick>
 800f8e4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	9300      	str	r3, [sp, #0]
 800f8ea:	2319      	movs	r3, #25
 800f8ec:	2201      	movs	r2, #1
 800f8ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f8f2:	68f8      	ldr	r0, [r7, #12]
 800f8f4:	f000 f8f2 	bl	800fadc <I2C_WaitOnFlagUntilTimeout>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d001      	beq.n	800f902 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800f8fe:	2301      	movs	r3, #1
 800f900:	e0bf      	b.n	800fa82 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	2222      	movs	r2, #34	@ 0x22
 800f906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	2210      	movs	r2, #16
 800f90e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	2200      	movs	r2, #0
 800f916:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	687a      	ldr	r2, [r7, #4]
 800f91c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	893a      	ldrh	r2, [r7, #8]
 800f922:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	2200      	movs	r2, #0
 800f928:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f92e:	b29b      	uxth	r3, r3
 800f930:	2bff      	cmp	r3, #255	@ 0xff
 800f932:	d90e      	bls.n	800f952 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2201      	movs	r2, #1
 800f938:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f93e:	b2da      	uxtb	r2, r3
 800f940:	8979      	ldrh	r1, [r7, #10]
 800f942:	4b52      	ldr	r3, [pc, #328]	@ (800fa8c <HAL_I2C_Master_Receive+0x1e4>)
 800f944:	9300      	str	r3, [sp, #0]
 800f946:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f94a:	68f8      	ldr	r0, [r7, #12]
 800f94c:	f000 fb16 	bl	800ff7c <I2C_TransferConfig>
 800f950:	e06d      	b.n	800fa2e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f956:	b29a      	uxth	r2, r3
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f960:	b2da      	uxtb	r2, r3
 800f962:	8979      	ldrh	r1, [r7, #10]
 800f964:	4b49      	ldr	r3, [pc, #292]	@ (800fa8c <HAL_I2C_Master_Receive+0x1e4>)
 800f966:	9300      	str	r3, [sp, #0]
 800f968:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f96c:	68f8      	ldr	r0, [r7, #12]
 800f96e:	f000 fb05 	bl	800ff7c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800f972:	e05c      	b.n	800fa2e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f974:	697a      	ldr	r2, [r7, #20]
 800f976:	6a39      	ldr	r1, [r7, #32]
 800f978:	68f8      	ldr	r0, [r7, #12]
 800f97a:	f000 f993 	bl	800fca4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800f97e:	4603      	mov	r3, r0
 800f980:	2b00      	cmp	r3, #0
 800f982:	d001      	beq.n	800f988 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800f984:	2301      	movs	r3, #1
 800f986:	e07c      	b.n	800fa82 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f992:	b2d2      	uxtb	r2, r2
 800f994:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f99a:	1c5a      	adds	r2, r3, #1
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f9a4:	3b01      	subs	r3, #1
 800f9a6:	b29a      	uxth	r2, r3
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f9b0:	b29b      	uxth	r3, r3
 800f9b2:	3b01      	subs	r3, #1
 800f9b4:	b29a      	uxth	r2, r3
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f9be:	b29b      	uxth	r3, r3
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d034      	beq.n	800fa2e <HAL_I2C_Master_Receive+0x186>
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d130      	bne.n	800fa2e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800f9cc:	697b      	ldr	r3, [r7, #20]
 800f9ce:	9300      	str	r3, [sp, #0]
 800f9d0:	6a3b      	ldr	r3, [r7, #32]
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	2180      	movs	r1, #128	@ 0x80
 800f9d6:	68f8      	ldr	r0, [r7, #12]
 800f9d8:	f000 f880 	bl	800fadc <I2C_WaitOnFlagUntilTimeout>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d001      	beq.n	800f9e6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	e04d      	b.n	800fa82 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f9ea:	b29b      	uxth	r3, r3
 800f9ec:	2bff      	cmp	r3, #255	@ 0xff
 800f9ee:	d90e      	bls.n	800fa0e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	22ff      	movs	r2, #255	@ 0xff
 800f9f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f9fa:	b2da      	uxtb	r2, r3
 800f9fc:	8979      	ldrh	r1, [r7, #10]
 800f9fe:	2300      	movs	r3, #0
 800fa00:	9300      	str	r3, [sp, #0]
 800fa02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800fa06:	68f8      	ldr	r0, [r7, #12]
 800fa08:	f000 fab8 	bl	800ff7c <I2C_TransferConfig>
 800fa0c:	e00f      	b.n	800fa2e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa12:	b29a      	uxth	r2, r3
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa1c:	b2da      	uxtb	r2, r3
 800fa1e:	8979      	ldrh	r1, [r7, #10]
 800fa20:	2300      	movs	r3, #0
 800fa22:	9300      	str	r3, [sp, #0]
 800fa24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800fa28:	68f8      	ldr	r0, [r7, #12]
 800fa2a:	f000 faa7 	bl	800ff7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d19d      	bne.n	800f974 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fa38:	697a      	ldr	r2, [r7, #20]
 800fa3a:	6a39      	ldr	r1, [r7, #32]
 800fa3c:	68f8      	ldr	r0, [r7, #12]
 800fa3e:	f000 f8ed 	bl	800fc1c <I2C_WaitOnSTOPFlagUntilTimeout>
 800fa42:	4603      	mov	r3, r0
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d001      	beq.n	800fa4c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800fa48:	2301      	movs	r3, #1
 800fa4a:	e01a      	b.n	800fa82 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	2220      	movs	r2, #32
 800fa52:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	6859      	ldr	r1, [r3, #4]
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	681a      	ldr	r2, [r3, #0]
 800fa5e:	4b0c      	ldr	r3, [pc, #48]	@ (800fa90 <HAL_I2C_Master_Receive+0x1e8>)
 800fa60:	400b      	ands	r3, r1
 800fa62:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	2220      	movs	r2, #32
 800fa68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	2200      	movs	r2, #0
 800fa70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	2200      	movs	r2, #0
 800fa78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	e000      	b.n	800fa82 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800fa80:	2302      	movs	r3, #2
  }
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	3718      	adds	r7, #24
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}
 800fa8a:	bf00      	nop
 800fa8c:	80002400 	.word	0x80002400
 800fa90:	fe00e800 	.word	0xfe00e800

0800fa94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800fa94:	b480      	push	{r7}
 800fa96:	b083      	sub	sp, #12
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	699b      	ldr	r3, [r3, #24]
 800faa2:	f003 0302 	and.w	r3, r3, #2
 800faa6:	2b02      	cmp	r3, #2
 800faa8:	d103      	bne.n	800fab2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	2200      	movs	r2, #0
 800fab0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	699b      	ldr	r3, [r3, #24]
 800fab8:	f003 0301 	and.w	r3, r3, #1
 800fabc:	2b01      	cmp	r3, #1
 800fabe:	d007      	beq.n	800fad0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	699a      	ldr	r2, [r3, #24]
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	f042 0201 	orr.w	r2, r2, #1
 800face:	619a      	str	r2, [r3, #24]
  }
}
 800fad0:	bf00      	nop
 800fad2:	370c      	adds	r7, #12
 800fad4:	46bd      	mov	sp, r7
 800fad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fada:	4770      	bx	lr

0800fadc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b084      	sub	sp, #16
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	60f8      	str	r0, [r7, #12]
 800fae4:	60b9      	str	r1, [r7, #8]
 800fae6:	603b      	str	r3, [r7, #0]
 800fae8:	4613      	mov	r3, r2
 800faea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800faec:	e03b      	b.n	800fb66 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800faee:	69ba      	ldr	r2, [r7, #24]
 800faf0:	6839      	ldr	r1, [r7, #0]
 800faf2:	68f8      	ldr	r0, [r7, #12]
 800faf4:	f000 f962 	bl	800fdbc <I2C_IsErrorOccurred>
 800faf8:	4603      	mov	r3, r0
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d001      	beq.n	800fb02 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800fafe:	2301      	movs	r3, #1
 800fb00:	e041      	b.n	800fb86 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb08:	d02d      	beq.n	800fb66 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fb0a:	f7fc fab3 	bl	800c074 <HAL_GetTick>
 800fb0e:	4602      	mov	r2, r0
 800fb10:	69bb      	ldr	r3, [r7, #24]
 800fb12:	1ad3      	subs	r3, r2, r3
 800fb14:	683a      	ldr	r2, [r7, #0]
 800fb16:	429a      	cmp	r2, r3
 800fb18:	d302      	bcc.n	800fb20 <I2C_WaitOnFlagUntilTimeout+0x44>
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d122      	bne.n	800fb66 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	699a      	ldr	r2, [r3, #24]
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	4013      	ands	r3, r2
 800fb2a:	68ba      	ldr	r2, [r7, #8]
 800fb2c:	429a      	cmp	r2, r3
 800fb2e:	bf0c      	ite	eq
 800fb30:	2301      	moveq	r3, #1
 800fb32:	2300      	movne	r3, #0
 800fb34:	b2db      	uxtb	r3, r3
 800fb36:	461a      	mov	r2, r3
 800fb38:	79fb      	ldrb	r3, [r7, #7]
 800fb3a:	429a      	cmp	r2, r3
 800fb3c:	d113      	bne.n	800fb66 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb42:	f043 0220 	orr.w	r2, r3, #32
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	2220      	movs	r2, #32
 800fb4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	2200      	movs	r2, #0
 800fb56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800fb62:	2301      	movs	r3, #1
 800fb64:	e00f      	b.n	800fb86 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	699a      	ldr	r2, [r3, #24]
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	4013      	ands	r3, r2
 800fb70:	68ba      	ldr	r2, [r7, #8]
 800fb72:	429a      	cmp	r2, r3
 800fb74:	bf0c      	ite	eq
 800fb76:	2301      	moveq	r3, #1
 800fb78:	2300      	movne	r3, #0
 800fb7a:	b2db      	uxtb	r3, r3
 800fb7c:	461a      	mov	r2, r3
 800fb7e:	79fb      	ldrb	r3, [r7, #7]
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d0b4      	beq.n	800faee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fb84:	2300      	movs	r3, #0
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3710      	adds	r7, #16
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}

0800fb8e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800fb8e:	b580      	push	{r7, lr}
 800fb90:	b084      	sub	sp, #16
 800fb92:	af00      	add	r7, sp, #0
 800fb94:	60f8      	str	r0, [r7, #12]
 800fb96:	60b9      	str	r1, [r7, #8]
 800fb98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800fb9a:	e033      	b.n	800fc04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800fb9c:	687a      	ldr	r2, [r7, #4]
 800fb9e:	68b9      	ldr	r1, [r7, #8]
 800fba0:	68f8      	ldr	r0, [r7, #12]
 800fba2:	f000 f90b 	bl	800fdbc <I2C_IsErrorOccurred>
 800fba6:	4603      	mov	r3, r0
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d001      	beq.n	800fbb0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800fbac:	2301      	movs	r3, #1
 800fbae:	e031      	b.n	800fc14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fbb0:	68bb      	ldr	r3, [r7, #8]
 800fbb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbb6:	d025      	beq.n	800fc04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fbb8:	f7fc fa5c 	bl	800c074 <HAL_GetTick>
 800fbbc:	4602      	mov	r2, r0
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	1ad3      	subs	r3, r2, r3
 800fbc2:	68ba      	ldr	r2, [r7, #8]
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	d302      	bcc.n	800fbce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d11a      	bne.n	800fc04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	699b      	ldr	r3, [r3, #24]
 800fbd4:	f003 0302 	and.w	r3, r3, #2
 800fbd8:	2b02      	cmp	r3, #2
 800fbda:	d013      	beq.n	800fc04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbe0:	f043 0220 	orr.w	r2, r3, #32
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	2220      	movs	r2, #32
 800fbec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800fc00:	2301      	movs	r3, #1
 800fc02:	e007      	b.n	800fc14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	699b      	ldr	r3, [r3, #24]
 800fc0a:	f003 0302 	and.w	r3, r3, #2
 800fc0e:	2b02      	cmp	r3, #2
 800fc10:	d1c4      	bne.n	800fb9c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800fc12:	2300      	movs	r3, #0
}
 800fc14:	4618      	mov	r0, r3
 800fc16:	3710      	adds	r7, #16
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}

0800fc1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b084      	sub	sp, #16
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	60f8      	str	r0, [r7, #12]
 800fc24:	60b9      	str	r1, [r7, #8]
 800fc26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800fc28:	e02f      	b.n	800fc8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800fc2a:	687a      	ldr	r2, [r7, #4]
 800fc2c:	68b9      	ldr	r1, [r7, #8]
 800fc2e:	68f8      	ldr	r0, [r7, #12]
 800fc30:	f000 f8c4 	bl	800fdbc <I2C_IsErrorOccurred>
 800fc34:	4603      	mov	r3, r0
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d001      	beq.n	800fc3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	e02d      	b.n	800fc9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fc3e:	f7fc fa19 	bl	800c074 <HAL_GetTick>
 800fc42:	4602      	mov	r2, r0
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	1ad3      	subs	r3, r2, r3
 800fc48:	68ba      	ldr	r2, [r7, #8]
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d302      	bcc.n	800fc54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800fc4e:	68bb      	ldr	r3, [r7, #8]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d11a      	bne.n	800fc8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	699b      	ldr	r3, [r3, #24]
 800fc5a:	f003 0320 	and.w	r3, r3, #32
 800fc5e:	2b20      	cmp	r3, #32
 800fc60:	d013      	beq.n	800fc8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc66:	f043 0220 	orr.w	r2, r3, #32
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	2220      	movs	r2, #32
 800fc72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	2200      	movs	r2, #0
 800fc7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	2200      	movs	r2, #0
 800fc82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800fc86:	2301      	movs	r3, #1
 800fc88:	e007      	b.n	800fc9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	699b      	ldr	r3, [r3, #24]
 800fc90:	f003 0320 	and.w	r3, r3, #32
 800fc94:	2b20      	cmp	r3, #32
 800fc96:	d1c8      	bne.n	800fc2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800fc98:	2300      	movs	r3, #0
}
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	3710      	adds	r7, #16
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}
	...

0800fca4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b086      	sub	sp, #24
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	60f8      	str	r0, [r7, #12]
 800fcac:	60b9      	str	r1, [r7, #8]
 800fcae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800fcb4:	e071      	b.n	800fd9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800fcb6:	687a      	ldr	r2, [r7, #4]
 800fcb8:	68b9      	ldr	r1, [r7, #8]
 800fcba:	68f8      	ldr	r0, [r7, #12]
 800fcbc:	f000 f87e 	bl	800fdbc <I2C_IsErrorOccurred>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d001      	beq.n	800fcca <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	699b      	ldr	r3, [r3, #24]
 800fcd0:	f003 0320 	and.w	r3, r3, #32
 800fcd4:	2b20      	cmp	r3, #32
 800fcd6:	d13b      	bne.n	800fd50 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800fcd8:	7dfb      	ldrb	r3, [r7, #23]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d138      	bne.n	800fd50 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	699b      	ldr	r3, [r3, #24]
 800fce4:	f003 0304 	and.w	r3, r3, #4
 800fce8:	2b04      	cmp	r3, #4
 800fcea:	d105      	bne.n	800fcf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d001      	beq.n	800fcf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	699b      	ldr	r3, [r3, #24]
 800fcfe:	f003 0310 	and.w	r3, r3, #16
 800fd02:	2b10      	cmp	r3, #16
 800fd04:	d121      	bne.n	800fd4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	2210      	movs	r2, #16
 800fd0c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	2204      	movs	r2, #4
 800fd12:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	2220      	movs	r2, #32
 800fd1a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	6859      	ldr	r1, [r3, #4]
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	681a      	ldr	r2, [r3, #0]
 800fd26:	4b24      	ldr	r3, [pc, #144]	@ (800fdb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800fd28:	400b      	ands	r3, r1
 800fd2a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	2220      	movs	r2, #32
 800fd30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	2200      	movs	r2, #0
 800fd38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	2200      	movs	r2, #0
 800fd40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800fd44:	2301      	movs	r3, #1
 800fd46:	75fb      	strb	r3, [r7, #23]
 800fd48:	e002      	b.n	800fd50 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800fd50:	f7fc f990 	bl	800c074 <HAL_GetTick>
 800fd54:	4602      	mov	r2, r0
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	1ad3      	subs	r3, r2, r3
 800fd5a:	68ba      	ldr	r2, [r7, #8]
 800fd5c:	429a      	cmp	r2, r3
 800fd5e:	d302      	bcc.n	800fd66 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d119      	bne.n	800fd9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800fd66:	7dfb      	ldrb	r3, [r7, #23]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d116      	bne.n	800fd9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	699b      	ldr	r3, [r3, #24]
 800fd72:	f003 0304 	and.w	r3, r3, #4
 800fd76:	2b04      	cmp	r3, #4
 800fd78:	d00f      	beq.n	800fd9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd7e:	f043 0220 	orr.w	r2, r3, #32
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	2220      	movs	r2, #32
 800fd8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	2200      	movs	r2, #0
 800fd92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800fd96:	2301      	movs	r3, #1
 800fd98:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	699b      	ldr	r3, [r3, #24]
 800fda0:	f003 0304 	and.w	r3, r3, #4
 800fda4:	2b04      	cmp	r3, #4
 800fda6:	d002      	beq.n	800fdae <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800fda8:	7dfb      	ldrb	r3, [r7, #23]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d083      	beq.n	800fcb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800fdae:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3718      	adds	r7, #24
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}
 800fdb8:	fe00e800 	.word	0xfe00e800

0800fdbc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b08a      	sub	sp, #40	@ 0x28
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	60f8      	str	r0, [r7, #12]
 800fdc4:	60b9      	str	r1, [r7, #8]
 800fdc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fdc8:	2300      	movs	r3, #0
 800fdca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	699b      	ldr	r3, [r3, #24]
 800fdd4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800fdde:	69bb      	ldr	r3, [r7, #24]
 800fde0:	f003 0310 	and.w	r3, r3, #16
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d068      	beq.n	800feba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	2210      	movs	r2, #16
 800fdee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800fdf0:	e049      	b.n	800fe86 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800fdf2:	68bb      	ldr	r3, [r7, #8]
 800fdf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdf8:	d045      	beq.n	800fe86 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800fdfa:	f7fc f93b 	bl	800c074 <HAL_GetTick>
 800fdfe:	4602      	mov	r2, r0
 800fe00:	69fb      	ldr	r3, [r7, #28]
 800fe02:	1ad3      	subs	r3, r2, r3
 800fe04:	68ba      	ldr	r2, [r7, #8]
 800fe06:	429a      	cmp	r2, r3
 800fe08:	d302      	bcc.n	800fe10 <I2C_IsErrorOccurred+0x54>
 800fe0a:	68bb      	ldr	r3, [r7, #8]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d13a      	bne.n	800fe86 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	685b      	ldr	r3, [r3, #4]
 800fe16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fe1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fe22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	699b      	ldr	r3, [r3, #24]
 800fe2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fe2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fe32:	d121      	bne.n	800fe78 <I2C_IsErrorOccurred+0xbc>
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fe3a:	d01d      	beq.n	800fe78 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800fe3c:	7cfb      	ldrb	r3, [r7, #19]
 800fe3e:	2b20      	cmp	r3, #32
 800fe40:	d01a      	beq.n	800fe78 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	685a      	ldr	r2, [r3, #4]
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800fe50:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800fe52:	f7fc f90f 	bl	800c074 <HAL_GetTick>
 800fe56:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800fe58:	e00e      	b.n	800fe78 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800fe5a:	f7fc f90b 	bl	800c074 <HAL_GetTick>
 800fe5e:	4602      	mov	r2, r0
 800fe60:	69fb      	ldr	r3, [r7, #28]
 800fe62:	1ad3      	subs	r3, r2, r3
 800fe64:	2b19      	cmp	r3, #25
 800fe66:	d907      	bls.n	800fe78 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800fe68:	6a3b      	ldr	r3, [r7, #32]
 800fe6a:	f043 0320 	orr.w	r3, r3, #32
 800fe6e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800fe70:	2301      	movs	r3, #1
 800fe72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800fe76:	e006      	b.n	800fe86 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	699b      	ldr	r3, [r3, #24]
 800fe7e:	f003 0320 	and.w	r3, r3, #32
 800fe82:	2b20      	cmp	r3, #32
 800fe84:	d1e9      	bne.n	800fe5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	699b      	ldr	r3, [r3, #24]
 800fe8c:	f003 0320 	and.w	r3, r3, #32
 800fe90:	2b20      	cmp	r3, #32
 800fe92:	d003      	beq.n	800fe9c <I2C_IsErrorOccurred+0xe0>
 800fe94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d0aa      	beq.n	800fdf2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800fe9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d103      	bne.n	800feac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	2220      	movs	r2, #32
 800feaa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800feac:	6a3b      	ldr	r3, [r7, #32]
 800feae:	f043 0304 	orr.w	r3, r3, #4
 800feb2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800feb4:	2301      	movs	r3, #1
 800feb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	699b      	ldr	r3, [r3, #24]
 800fec0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800fec2:	69bb      	ldr	r3, [r7, #24]
 800fec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d00b      	beq.n	800fee4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800fecc:	6a3b      	ldr	r3, [r7, #32]
 800fece:	f043 0301 	orr.w	r3, r3, #1
 800fed2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fedc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800fede:	2301      	movs	r3, #1
 800fee0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800fee4:	69bb      	ldr	r3, [r7, #24]
 800fee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800feea:	2b00      	cmp	r3, #0
 800feec:	d00b      	beq.n	800ff06 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800feee:	6a3b      	ldr	r3, [r7, #32]
 800fef0:	f043 0308 	orr.w	r3, r3, #8
 800fef4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800fefe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ff00:	2301      	movs	r3, #1
 800ff02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ff06:	69bb      	ldr	r3, [r7, #24]
 800ff08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d00b      	beq.n	800ff28 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800ff10:	6a3b      	ldr	r3, [r7, #32]
 800ff12:	f043 0302 	orr.w	r3, r3, #2
 800ff16:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ff20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ff22:	2301      	movs	r3, #1
 800ff24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800ff28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d01c      	beq.n	800ff6a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ff30:	68f8      	ldr	r0, [r7, #12]
 800ff32:	f7ff fdaf 	bl	800fa94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	6859      	ldr	r1, [r3, #4]
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	681a      	ldr	r2, [r3, #0]
 800ff40:	4b0d      	ldr	r3, [pc, #52]	@ (800ff78 <I2C_IsErrorOccurred+0x1bc>)
 800ff42:	400b      	ands	r3, r1
 800ff44:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ff4a:	6a3b      	ldr	r3, [r7, #32]
 800ff4c:	431a      	orrs	r2, r3
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	2220      	movs	r2, #32
 800ff56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	2200      	movs	r2, #0
 800ff66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800ff6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ff6e:	4618      	mov	r0, r3
 800ff70:	3728      	adds	r7, #40	@ 0x28
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}
 800ff76:	bf00      	nop
 800ff78:	fe00e800 	.word	0xfe00e800

0800ff7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ff7c:	b480      	push	{r7}
 800ff7e:	b087      	sub	sp, #28
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	60f8      	str	r0, [r7, #12]
 800ff84:	607b      	str	r3, [r7, #4]
 800ff86:	460b      	mov	r3, r1
 800ff88:	817b      	strh	r3, [r7, #10]
 800ff8a:	4613      	mov	r3, r2
 800ff8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ff8e:	897b      	ldrh	r3, [r7, #10]
 800ff90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ff94:	7a7b      	ldrb	r3, [r7, #9]
 800ff96:	041b      	lsls	r3, r3, #16
 800ff98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ff9c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ffa2:	6a3b      	ldr	r3, [r7, #32]
 800ffa4:	4313      	orrs	r3, r2
 800ffa6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ffaa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	685a      	ldr	r2, [r3, #4]
 800ffb2:	6a3b      	ldr	r3, [r7, #32]
 800ffb4:	0d5b      	lsrs	r3, r3, #21
 800ffb6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800ffba:	4b08      	ldr	r3, [pc, #32]	@ (800ffdc <I2C_TransferConfig+0x60>)
 800ffbc:	430b      	orrs	r3, r1
 800ffbe:	43db      	mvns	r3, r3
 800ffc0:	ea02 0103 	and.w	r1, r2, r3
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	697a      	ldr	r2, [r7, #20]
 800ffca:	430a      	orrs	r2, r1
 800ffcc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ffce:	bf00      	nop
 800ffd0:	371c      	adds	r7, #28
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd8:	4770      	bx	lr
 800ffda:	bf00      	nop
 800ffdc:	03ff63ff 	.word	0x03ff63ff

0800ffe0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ffe0:	b480      	push	{r7}
 800ffe2:	b083      	sub	sp, #12
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fff0:	b2db      	uxtb	r3, r3
 800fff2:	2b20      	cmp	r3, #32
 800fff4:	d138      	bne.n	8010068 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fffc:	2b01      	cmp	r3, #1
 800fffe:	d101      	bne.n	8010004 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8010000:	2302      	movs	r3, #2
 8010002:	e032      	b.n	801006a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2201      	movs	r2, #1
 8010008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2224      	movs	r2, #36	@ 0x24
 8010010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	681a      	ldr	r2, [r3, #0]
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	f022 0201 	bic.w	r2, r2, #1
 8010022:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	681a      	ldr	r2, [r3, #0]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8010032:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	6819      	ldr	r1, [r3, #0]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	683a      	ldr	r2, [r7, #0]
 8010040:	430a      	orrs	r2, r1
 8010042:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	681a      	ldr	r2, [r3, #0]
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	f042 0201 	orr.w	r2, r2, #1
 8010052:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2220      	movs	r2, #32
 8010058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2200      	movs	r2, #0
 8010060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8010064:	2300      	movs	r3, #0
 8010066:	e000      	b.n	801006a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010068:	2302      	movs	r3, #2
  }
}
 801006a:	4618      	mov	r0, r3
 801006c:	370c      	adds	r7, #12
 801006e:	46bd      	mov	sp, r7
 8010070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010074:	4770      	bx	lr

08010076 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8010076:	b480      	push	{r7}
 8010078:	b085      	sub	sp, #20
 801007a:	af00      	add	r7, sp, #0
 801007c:	6078      	str	r0, [r7, #4]
 801007e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010086:	b2db      	uxtb	r3, r3
 8010088:	2b20      	cmp	r3, #32
 801008a:	d139      	bne.n	8010100 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010092:	2b01      	cmp	r3, #1
 8010094:	d101      	bne.n	801009a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8010096:	2302      	movs	r3, #2
 8010098:	e033      	b.n	8010102 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	2201      	movs	r2, #1
 801009e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	2224      	movs	r2, #36	@ 0x24
 80100a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	681a      	ldr	r2, [r3, #0]
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	f022 0201 	bic.w	r2, r2, #1
 80100b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80100c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	021b      	lsls	r3, r3, #8
 80100ce:	68fa      	ldr	r2, [r7, #12]
 80100d0:	4313      	orrs	r3, r2
 80100d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	68fa      	ldr	r2, [r7, #12]
 80100da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	681a      	ldr	r2, [r3, #0]
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	f042 0201 	orr.w	r2, r2, #1
 80100ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2220      	movs	r2, #32
 80100f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2200      	movs	r2, #0
 80100f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80100fc:	2300      	movs	r3, #0
 80100fe:	e000      	b.n	8010102 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8010100:	2302      	movs	r3, #2
  }
}
 8010102:	4618      	mov	r0, r3
 8010104:	3714      	adds	r7, #20
 8010106:	46bd      	mov	sp, r7
 8010108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010c:	4770      	bx	lr
	...

08010110 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8010110:	b480      	push	{r7}
 8010112:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8010114:	4b04      	ldr	r3, [pc, #16]	@ (8010128 <HAL_PWREx_GetVoltageRange+0x18>)
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 801011c:	4618      	mov	r0, r3
 801011e:	46bd      	mov	sp, r7
 8010120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010124:	4770      	bx	lr
 8010126:	bf00      	nop
 8010128:	40007000 	.word	0x40007000

0801012c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801012c:	b480      	push	{r7}
 801012e:	b085      	sub	sp, #20
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801013a:	d130      	bne.n	801019e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 801013c:	4b23      	ldr	r3, [pc, #140]	@ (80101cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8010144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010148:	d038      	beq.n	80101bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801014a:	4b20      	ldr	r3, [pc, #128]	@ (80101cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8010152:	4a1e      	ldr	r2, [pc, #120]	@ (80101cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8010154:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8010158:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801015a:	4b1d      	ldr	r3, [pc, #116]	@ (80101d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	2232      	movs	r2, #50	@ 0x32
 8010160:	fb02 f303 	mul.w	r3, r2, r3
 8010164:	4a1b      	ldr	r2, [pc, #108]	@ (80101d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8010166:	fba2 2303 	umull	r2, r3, r2, r3
 801016a:	0c9b      	lsrs	r3, r3, #18
 801016c:	3301      	adds	r3, #1
 801016e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8010170:	e002      	b.n	8010178 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	3b01      	subs	r3, #1
 8010176:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8010178:	4b14      	ldr	r3, [pc, #80]	@ (80101cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801017a:	695b      	ldr	r3, [r3, #20]
 801017c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010184:	d102      	bne.n	801018c <HAL_PWREx_ControlVoltageScaling+0x60>
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d1f2      	bne.n	8010172 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801018c:	4b0f      	ldr	r3, [pc, #60]	@ (80101cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801018e:	695b      	ldr	r3, [r3, #20]
 8010190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010198:	d110      	bne.n	80101bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 801019a:	2303      	movs	r3, #3
 801019c:	e00f      	b.n	80101be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 801019e:	4b0b      	ldr	r3, [pc, #44]	@ (80101cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80101a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80101aa:	d007      	beq.n	80101bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80101ac:	4b07      	ldr	r3, [pc, #28]	@ (80101cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80101b4:	4a05      	ldr	r2, [pc, #20]	@ (80101cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80101b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80101ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80101bc:	2300      	movs	r3, #0
}
 80101be:	4618      	mov	r0, r3
 80101c0:	3714      	adds	r7, #20
 80101c2:	46bd      	mov	sp, r7
 80101c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c8:	4770      	bx	lr
 80101ca:	bf00      	nop
 80101cc:	40007000 	.word	0x40007000
 80101d0:	20000000 	.word	0x20000000
 80101d4:	431bde83 	.word	0x431bde83

080101d8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b086      	sub	sp, #24
 80101dc:	af02      	add	r7, sp, #8
 80101de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80101e0:	f7fb ff48 	bl	800c074 <HAL_GetTick>
 80101e4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d101      	bne.n	80101f0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80101ec:	2301      	movs	r3, #1
 80101ee:	e063      	b.n	80102b8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80101f6:	b2db      	uxtb	r3, r3
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d10b      	bne.n	8010214 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2200      	movs	r2, #0
 8010200:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8010204:	6878      	ldr	r0, [r7, #4]
 8010206:	f7f8 f911 	bl	800842c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 801020a:	f241 3188 	movw	r1, #5000	@ 0x1388
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f000 fa68 	bl	80106e4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	689b      	ldr	r3, [r3, #8]
 8010222:	3b01      	subs	r3, #1
 8010224:	021a      	lsls	r2, r3, #8
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	430a      	orrs	r2, r1
 801022c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010232:	9300      	str	r3, [sp, #0]
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	2200      	movs	r2, #0
 8010238:	2120      	movs	r1, #32
 801023a:	6878      	ldr	r0, [r7, #4]
 801023c:	f000 fa60 	bl	8010700 <QSPI_WaitFlagStateUntilTimeout>
 8010240:	4603      	mov	r3, r0
 8010242:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8010244:	7afb      	ldrb	r3, [r7, #11]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d131      	bne.n	80102ae <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010254:	f023 0310 	bic.w	r3, r3, #16
 8010258:	687a      	ldr	r2, [r7, #4]
 801025a:	6852      	ldr	r2, [r2, #4]
 801025c:	0611      	lsls	r1, r2, #24
 801025e:	687a      	ldr	r2, [r7, #4]
 8010260:	68d2      	ldr	r2, [r2, #12]
 8010262:	4311      	orrs	r1, r2
 8010264:	687a      	ldr	r2, [r7, #4]
 8010266:	6812      	ldr	r2, [r2, #0]
 8010268:	430b      	orrs	r3, r1
 801026a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	685a      	ldr	r2, [r3, #4]
 8010272:	4b13      	ldr	r3, [pc, #76]	@ (80102c0 <HAL_QSPI_Init+0xe8>)
 8010274:	4013      	ands	r3, r2
 8010276:	687a      	ldr	r2, [r7, #4]
 8010278:	6912      	ldr	r2, [r2, #16]
 801027a:	0411      	lsls	r1, r2, #16
 801027c:	687a      	ldr	r2, [r7, #4]
 801027e:	6952      	ldr	r2, [r2, #20]
 8010280:	4311      	orrs	r1, r2
 8010282:	687a      	ldr	r2, [r7, #4]
 8010284:	6992      	ldr	r2, [r2, #24]
 8010286:	4311      	orrs	r1, r2
 8010288:	687a      	ldr	r2, [r7, #4]
 801028a:	6812      	ldr	r2, [r2, #0]
 801028c:	430b      	orrs	r3, r1
 801028e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	681a      	ldr	r2, [r3, #0]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	f042 0201 	orr.w	r2, r2, #1
 801029e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2200      	movs	r2, #0
 80102a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2201      	movs	r2, #1
 80102aa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	2200      	movs	r2, #0
 80102b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80102b6:	7afb      	ldrb	r3, [r7, #11]
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	3710      	adds	r7, #16
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}
 80102c0:	ffe0f8fe 	.word	0xffe0f8fe

080102c4 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b088      	sub	sp, #32
 80102c8:	af02      	add	r7, sp, #8
 80102ca:	60f8      	str	r0, [r7, #12]
 80102cc:	60b9      	str	r1, [r7, #8]
 80102ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80102d0:	f7fb fed0 	bl	800c074 <HAL_GetTick>
 80102d4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80102dc:	b2db      	uxtb	r3, r3
 80102de:	2b01      	cmp	r3, #1
 80102e0:	d101      	bne.n	80102e6 <HAL_QSPI_Command+0x22>
 80102e2:	2302      	movs	r3, #2
 80102e4:	e048      	b.n	8010378 <HAL_QSPI_Command+0xb4>
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	2201      	movs	r2, #1
 80102ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80102f4:	b2db      	uxtb	r3, r3
 80102f6:	2b01      	cmp	r3, #1
 80102f8:	d137      	bne.n	801036a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	2200      	movs	r2, #0
 80102fe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	2202      	movs	r2, #2
 8010304:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	9300      	str	r3, [sp, #0]
 801030c:	693b      	ldr	r3, [r7, #16]
 801030e:	2200      	movs	r2, #0
 8010310:	2120      	movs	r1, #32
 8010312:	68f8      	ldr	r0, [r7, #12]
 8010314:	f000 f9f4 	bl	8010700 <QSPI_WaitFlagStateUntilTimeout>
 8010318:	4603      	mov	r3, r0
 801031a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 801031c:	7dfb      	ldrb	r3, [r7, #23]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d125      	bne.n	801036e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8010322:	2200      	movs	r2, #0
 8010324:	68b9      	ldr	r1, [r7, #8]
 8010326:	68f8      	ldr	r0, [r7, #12]
 8010328:	f000 fa21 	bl	801076e <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010330:	2b00      	cmp	r3, #0
 8010332:	d115      	bne.n	8010360 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	9300      	str	r3, [sp, #0]
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	2201      	movs	r2, #1
 801033c:	2102      	movs	r1, #2
 801033e:	68f8      	ldr	r0, [r7, #12]
 8010340:	f000 f9de 	bl	8010700 <QSPI_WaitFlagStateUntilTimeout>
 8010344:	4603      	mov	r3, r0
 8010346:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8010348:	7dfb      	ldrb	r3, [r7, #23]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d10f      	bne.n	801036e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	2202      	movs	r2, #2
 8010354:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	2201      	movs	r2, #1
 801035a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 801035e:	e006      	b.n	801036e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	2201      	movs	r2, #1
 8010364:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8010368:	e001      	b.n	801036e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 801036a:	2302      	movs	r3, #2
 801036c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	2200      	movs	r2, #0
 8010372:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8010376:	7dfb      	ldrb	r3, [r7, #23]
}
 8010378:	4618      	mov	r0, r3
 801037a:	3718      	adds	r7, #24
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}

08010380 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b08a      	sub	sp, #40	@ 0x28
 8010384:	af02      	add	r7, sp, #8
 8010386:	60f8      	str	r0, [r7, #12]
 8010388:	60b9      	str	r1, [r7, #8]
 801038a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801038c:	2300      	movs	r3, #0
 801038e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8010390:	f7fb fe70 	bl	800c074 <HAL_GetTick>
 8010394:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	3320      	adds	r3, #32
 801039c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80103a4:	b2db      	uxtb	r3, r3
 80103a6:	2b01      	cmp	r3, #1
 80103a8:	d101      	bne.n	80103ae <HAL_QSPI_Transmit+0x2e>
 80103aa:	2302      	movs	r3, #2
 80103ac:	e07b      	b.n	80104a6 <HAL_QSPI_Transmit+0x126>
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	2201      	movs	r2, #1
 80103b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80103bc:	b2db      	uxtb	r3, r3
 80103be:	2b01      	cmp	r3, #1
 80103c0:	d16a      	bne.n	8010498 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	2200      	movs	r2, #0
 80103c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d05b      	beq.n	8010486 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	2212      	movs	r2, #18
 80103d2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	691b      	ldr	r3, [r3, #16]
 80103dc:	1c5a      	adds	r2, r3, #1
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	625a      	str	r2, [r3, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	691b      	ldr	r3, [r3, #16]
 80103e8:	1c5a      	adds	r2, r3, #1
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	68ba      	ldr	r2, [r7, #8]
 80103f2:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	695a      	ldr	r2, [r3, #20]
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8010402:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8010404:	e01b      	b.n	801043e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	9300      	str	r3, [sp, #0]
 801040a:	69bb      	ldr	r3, [r7, #24]
 801040c:	2201      	movs	r2, #1
 801040e:	2104      	movs	r1, #4
 8010410:	68f8      	ldr	r0, [r7, #12]
 8010412:	f000 f975 	bl	8010700 <QSPI_WaitFlagStateUntilTimeout>
 8010416:	4603      	mov	r3, r0
 8010418:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 801041a:	7ffb      	ldrb	r3, [r7, #31]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d113      	bne.n	8010448 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	69db      	ldr	r3, [r3, #28]
 8010424:	781a      	ldrb	r2, [r3, #0]
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	69db      	ldr	r3, [r3, #28]
 801042e:	1c5a      	adds	r2, r3, #1
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010438:	1e5a      	subs	r2, r3, #1
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	625a      	str	r2, [r3, #36]	@ 0x24
      while(hqspi->TxXferCount > 0U)
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010442:	2b00      	cmp	r3, #0
 8010444:	d1df      	bne.n	8010406 <HAL_QSPI_Transmit+0x86>
 8010446:	e000      	b.n	801044a <HAL_QSPI_Transmit+0xca>
          break;
 8010448:	bf00      	nop
      }

      if (status == HAL_OK)
 801044a:	7ffb      	ldrb	r3, [r7, #31]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d115      	bne.n	801047c <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	9300      	str	r3, [sp, #0]
 8010454:	69bb      	ldr	r3, [r7, #24]
 8010456:	2201      	movs	r2, #1
 8010458:	2102      	movs	r1, #2
 801045a:	68f8      	ldr	r0, [r7, #12]
 801045c:	f000 f950 	bl	8010700 <QSPI_WaitFlagStateUntilTimeout>
 8010460:	4603      	mov	r3, r0
 8010462:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8010464:	7ffb      	ldrb	r3, [r7, #31]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d108      	bne.n	801047c <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	2202      	movs	r2, #2
 8010470:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8010472:	68f8      	ldr	r0, [r7, #12]
 8010474:	f000 f8bd 	bl	80105f2 <HAL_QSPI_Abort>
 8010478:	4603      	mov	r3, r0
 801047a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	2201      	movs	r2, #1
 8010480:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8010484:	e00a      	b.n	801049c <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801048a:	f043 0208 	orr.w	r2, r3, #8
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 8010492:	2301      	movs	r3, #1
 8010494:	77fb      	strb	r3, [r7, #31]
 8010496:	e001      	b.n	801049c <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8010498:	2302      	movs	r3, #2
 801049a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	2200      	movs	r2, #0
 80104a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 80104a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80104a6:	4618      	mov	r0, r3
 80104a8:	3720      	adds	r7, #32
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}

080104ae <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80104ae:	b580      	push	{r7, lr}
 80104b0:	b08a      	sub	sp, #40	@ 0x28
 80104b2:	af02      	add	r7, sp, #8
 80104b4:	60f8      	str	r0, [r7, #12]
 80104b6:	60b9      	str	r1, [r7, #8]
 80104b8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80104ba:	2300      	movs	r3, #0
 80104bc:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80104be:	f7fb fdd9 	bl	800c074 <HAL_GetTick>
 80104c2:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	699b      	ldr	r3, [r3, #24]
 80104ca:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	3320      	adds	r3, #32
 80104d2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80104da:	b2db      	uxtb	r3, r3
 80104dc:	2b01      	cmp	r3, #1
 80104de:	d101      	bne.n	80104e4 <HAL_QSPI_Receive+0x36>
 80104e0:	2302      	movs	r3, #2
 80104e2:	e082      	b.n	80105ea <HAL_QSPI_Receive+0x13c>
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	2201      	movs	r2, #1
 80104e8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80104f2:	b2db      	uxtb	r3, r3
 80104f4:	2b01      	cmp	r3, #1
 80104f6:	d171      	bne.n	80105dc <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	2200      	movs	r2, #0
 80104fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d062      	beq.n	80105ca <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	2222      	movs	r2, #34	@ 0x22
 8010508:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	691b      	ldr	r3, [r3, #16]
 8010512:	1c5a      	adds	r2, r3, #1
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	631a      	str	r2, [r3, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	691b      	ldr	r3, [r3, #16]
 801051e:	1c5a      	adds	r2, r3, #1
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->pRxBuffPtr = pData;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	68ba      	ldr	r2, [r7, #8]
 8010528:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	695b      	ldr	r3, [r3, #20]
 8010530:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 801053c:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	697a      	ldr	r2, [r7, #20]
 8010544:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8010546:	e01c      	b.n	8010582 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	9300      	str	r3, [sp, #0]
 801054c:	69bb      	ldr	r3, [r7, #24]
 801054e:	2201      	movs	r2, #1
 8010550:	2106      	movs	r1, #6
 8010552:	68f8      	ldr	r0, [r7, #12]
 8010554:	f000 f8d4 	bl	8010700 <QSPI_WaitFlagStateUntilTimeout>
 8010558:	4603      	mov	r3, r0
 801055a:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 801055c:	7ffb      	ldrb	r3, [r7, #31]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d114      	bne.n	801058c <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010566:	693a      	ldr	r2, [r7, #16]
 8010568:	7812      	ldrb	r2, [r2, #0]
 801056a:	b2d2      	uxtb	r2, r2
 801056c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010572:	1c5a      	adds	r2, r3, #1
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	629a      	str	r2, [r3, #40]	@ 0x28
        hqspi->RxXferCount--;
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801057c:	1e5a      	subs	r2, r3, #1
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	631a      	str	r2, [r3, #48]	@ 0x30
      while(hqspi->RxXferCount > 0U)
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010586:	2b00      	cmp	r3, #0
 8010588:	d1de      	bne.n	8010548 <HAL_QSPI_Receive+0x9a>
 801058a:	e000      	b.n	801058e <HAL_QSPI_Receive+0xe0>
          break;
 801058c:	bf00      	nop
      }

      if (status == HAL_OK)
 801058e:	7ffb      	ldrb	r3, [r7, #31]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d115      	bne.n	80105c0 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	9300      	str	r3, [sp, #0]
 8010598:	69bb      	ldr	r3, [r7, #24]
 801059a:	2201      	movs	r2, #1
 801059c:	2102      	movs	r1, #2
 801059e:	68f8      	ldr	r0, [r7, #12]
 80105a0:	f000 f8ae 	bl	8010700 <QSPI_WaitFlagStateUntilTimeout>
 80105a4:	4603      	mov	r3, r0
 80105a6:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80105a8:	7ffb      	ldrb	r3, [r7, #31]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d108      	bne.n	80105c0 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	2202      	movs	r2, #2
 80105b4:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 80105b6:	68f8      	ldr	r0, [r7, #12]
 80105b8:	f000 f81b 	bl	80105f2 <HAL_QSPI_Abort>
 80105bc:	4603      	mov	r3, r0
 80105be:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	2201      	movs	r2, #1
 80105c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80105c8:	e00a      	b.n	80105e0 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80105ce:	f043 0208 	orr.w	r2, r3, #8
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 80105d6:	2301      	movs	r3, #1
 80105d8:	77fb      	strb	r3, [r7, #31]
 80105da:	e001      	b.n	80105e0 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 80105dc:	2302      	movs	r3, #2
 80105de:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	2200      	movs	r2, #0
 80105e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 80105e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	3720      	adds	r7, #32
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}

080105f2 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80105f2:	b580      	push	{r7, lr}
 80105f4:	b086      	sub	sp, #24
 80105f6:	af02      	add	r7, sp, #8
 80105f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80105fa:	2300      	movs	r3, #0
 80105fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80105fe:	f7fb fd39 	bl	800c074 <HAL_GetTick>
 8010602:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 801060a:	b2db      	uxtb	r3, r3
 801060c:	f003 0302 	and.w	r3, r3, #2
 8010610:	2b00      	cmp	r3, #0
 8010612:	d062      	beq.n	80106da <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2200      	movs	r2, #0
 8010618:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	f003 0304 	and.w	r3, r3, #4
 8010626:	2b00      	cmp	r3, #0
 8010628:	d017      	beq.n	801065a <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	f022 0204 	bic.w	r2, r2, #4
 8010638:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801063e:	4618      	mov	r0, r3
 8010640:	f7fd fd5e 	bl	800e100 <HAL_DMA_Abort>
 8010644:	4603      	mov	r3, r0
 8010646:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8010648:	7bfb      	ldrb	r3, [r7, #15]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d005      	beq.n	801065a <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010652:	f043 0204 	orr.w	r2, r3, #4
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	689b      	ldr	r3, [r3, #8]
 8010660:	f003 0320 	and.w	r3, r3, #32
 8010664:	2b00      	cmp	r3, #0
 8010666:	d034      	beq.n	80106d2 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	681a      	ldr	r2, [r3, #0]
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	f042 0202 	orr.w	r2, r2, #2
 8010676:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801067c:	9300      	str	r3, [sp, #0]
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	2201      	movs	r2, #1
 8010682:	2102      	movs	r1, #2
 8010684:	6878      	ldr	r0, [r7, #4]
 8010686:	f000 f83b 	bl	8010700 <QSPI_WaitFlagStateUntilTimeout>
 801068a:	4603      	mov	r3, r0
 801068c:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 801068e:	7bfb      	ldrb	r3, [r7, #15]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d10e      	bne.n	80106b2 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	2202      	movs	r2, #2
 801069a:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80106a0:	9300      	str	r3, [sp, #0]
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	2200      	movs	r2, #0
 80106a6:	2120      	movs	r1, #32
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	f000 f829 	bl	8010700 <QSPI_WaitFlagStateUntilTimeout>
 80106ae:	4603      	mov	r3, r0
 80106b0:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80106b2:	7bfb      	ldrb	r3, [r7, #15]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d110      	bne.n	80106da <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	695a      	ldr	r2, [r3, #20]
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80106c6:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2201      	movs	r2, #1
 80106cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80106d0:	e003      	b.n	80106da <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	2201      	movs	r2, #1
 80106d6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    }
  }

  return status;
 80106da:	7bfb      	ldrb	r3, [r7, #15]
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3710      	adds	r7, #16
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}

080106e4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80106e4:	b480      	push	{r7}
 80106e6:	b083      	sub	sp, #12
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
 80106ec:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	683a      	ldr	r2, [r7, #0]
 80106f2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80106f4:	bf00      	nop
 80106f6:	370c      	adds	r7, #12
 80106f8:	46bd      	mov	sp, r7
 80106fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fe:	4770      	bx	lr

08010700 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b084      	sub	sp, #16
 8010704:	af00      	add	r7, sp, #0
 8010706:	60f8      	str	r0, [r7, #12]
 8010708:	60b9      	str	r1, [r7, #8]
 801070a:	603b      	str	r3, [r7, #0]
 801070c:	4613      	mov	r3, r2
 801070e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8010710:	e01a      	b.n	8010748 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010712:	69bb      	ldr	r3, [r7, #24]
 8010714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010718:	d016      	beq.n	8010748 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801071a:	f7fb fcab 	bl	800c074 <HAL_GetTick>
 801071e:	4602      	mov	r2, r0
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	1ad3      	subs	r3, r2, r3
 8010724:	69ba      	ldr	r2, [r7, #24]
 8010726:	429a      	cmp	r2, r3
 8010728:	d302      	bcc.n	8010730 <QSPI_WaitFlagStateUntilTimeout+0x30>
 801072a:	69bb      	ldr	r3, [r7, #24]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d10b      	bne.n	8010748 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	2204      	movs	r2, #4
 8010734:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801073c:	f043 0201 	orr.w	r2, r3, #1
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8010744:	2301      	movs	r3, #1
 8010746:	e00e      	b.n	8010766 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	689a      	ldr	r2, [r3, #8]
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	4013      	ands	r3, r2
 8010752:	2b00      	cmp	r3, #0
 8010754:	bf14      	ite	ne
 8010756:	2301      	movne	r3, #1
 8010758:	2300      	moveq	r3, #0
 801075a:	b2db      	uxtb	r3, r3
 801075c:	461a      	mov	r2, r3
 801075e:	79fb      	ldrb	r3, [r7, #7]
 8010760:	429a      	cmp	r2, r3
 8010762:	d1d6      	bne.n	8010712 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010764:	2300      	movs	r3, #0
}
 8010766:	4618      	mov	r0, r3
 8010768:	3710      	adds	r7, #16
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}

0801076e <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 801076e:	b480      	push	{r7}
 8010770:	b085      	sub	sp, #20
 8010772:	af00      	add	r7, sp, #0
 8010774:	60f8      	str	r0, [r7, #12]
 8010776:	60b9      	str	r1, [r7, #8]
 8010778:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801077e:	2b00      	cmp	r3, #0
 8010780:	d009      	beq.n	8010796 <QSPI_Config+0x28>
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8010788:	d005      	beq.n	8010796 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	3a01      	subs	r2, #1
 8010794:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	699b      	ldr	r3, [r3, #24]
 801079a:	2b00      	cmp	r3, #0
 801079c:	f000 80c1 	beq.w	8010922 <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	6a1b      	ldr	r3, [r3, #32]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d063      	beq.n	8010870 <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	68ba      	ldr	r2, [r7, #8]
 80107ae:	6892      	ldr	r2, [r2, #8]
 80107b0:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	69db      	ldr	r3, [r3, #28]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d031      	beq.n	801081e <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107c2:	431a      	orrs	r2, r3
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107c8:	431a      	orrs	r2, r3
 80107ca:	68bb      	ldr	r3, [r7, #8]
 80107cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107ce:	431a      	orrs	r2, r3
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	695b      	ldr	r3, [r3, #20]
 80107d4:	049b      	lsls	r3, r3, #18
 80107d6:	431a      	orrs	r2, r3
 80107d8:	68bb      	ldr	r3, [r7, #8]
 80107da:	691b      	ldr	r3, [r3, #16]
 80107dc:	431a      	orrs	r2, r3
 80107de:	68bb      	ldr	r3, [r7, #8]
 80107e0:	6a1b      	ldr	r3, [r3, #32]
 80107e2:	431a      	orrs	r2, r3
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	68db      	ldr	r3, [r3, #12]
 80107e8:	431a      	orrs	r2, r3
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	69db      	ldr	r3, [r3, #28]
 80107ee:	431a      	orrs	r2, r3
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	699b      	ldr	r3, [r3, #24]
 80107f4:	431a      	orrs	r2, r3
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	ea42 0103 	orr.w	r1, r2, r3
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	687a      	ldr	r2, [r7, #4]
 8010804:	430a      	orrs	r2, r1
 8010806:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 801080e:	f000 813f 	beq.w	8010a90 <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	68ba      	ldr	r2, [r7, #8]
 8010818:	6852      	ldr	r2, [r2, #4]
 801081a:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 801081c:	e138      	b.n	8010a90 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801081e:	68bb      	ldr	r3, [r7, #8]
 8010820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010822:	68bb      	ldr	r3, [r7, #8]
 8010824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010826:	431a      	orrs	r2, r3
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801082c:	431a      	orrs	r2, r3
 801082e:	68bb      	ldr	r3, [r7, #8]
 8010830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010832:	431a      	orrs	r2, r3
 8010834:	68bb      	ldr	r3, [r7, #8]
 8010836:	695b      	ldr	r3, [r3, #20]
 8010838:	049b      	lsls	r3, r3, #18
 801083a:	431a      	orrs	r2, r3
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	691b      	ldr	r3, [r3, #16]
 8010840:	431a      	orrs	r2, r3
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	6a1b      	ldr	r3, [r3, #32]
 8010846:	431a      	orrs	r2, r3
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	69db      	ldr	r3, [r3, #28]
 801084c:	431a      	orrs	r2, r3
 801084e:	68bb      	ldr	r3, [r7, #8]
 8010850:	699b      	ldr	r3, [r3, #24]
 8010852:	431a      	orrs	r2, r3
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	ea42 0103 	orr.w	r1, r2, r3
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	687a      	ldr	r2, [r7, #4]
 8010862:	430a      	orrs	r2, r1
 8010864:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	2200      	movs	r2, #0
 801086c:	619a      	str	r2, [r3, #24]
}
 801086e:	e10f      	b.n	8010a90 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	69db      	ldr	r3, [r3, #28]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d02e      	beq.n	80108d6 <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8010878:	68bb      	ldr	r3, [r7, #8]
 801087a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801087c:	68bb      	ldr	r3, [r7, #8]
 801087e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010880:	431a      	orrs	r2, r3
 8010882:	68bb      	ldr	r3, [r7, #8]
 8010884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010886:	431a      	orrs	r2, r3
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801088c:	431a      	orrs	r2, r3
 801088e:	68bb      	ldr	r3, [r7, #8]
 8010890:	695b      	ldr	r3, [r3, #20]
 8010892:	049b      	lsls	r3, r3, #18
 8010894:	431a      	orrs	r2, r3
 8010896:	68bb      	ldr	r3, [r7, #8]
 8010898:	6a1b      	ldr	r3, [r3, #32]
 801089a:	431a      	orrs	r2, r3
 801089c:	68bb      	ldr	r3, [r7, #8]
 801089e:	68db      	ldr	r3, [r3, #12]
 80108a0:	431a      	orrs	r2, r3
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	69db      	ldr	r3, [r3, #28]
 80108a6:	431a      	orrs	r2, r3
 80108a8:	68bb      	ldr	r3, [r7, #8]
 80108aa:	699b      	ldr	r3, [r3, #24]
 80108ac:	431a      	orrs	r2, r3
 80108ae:	68bb      	ldr	r3, [r7, #8]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	ea42 0103 	orr.w	r1, r2, r3
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	687a      	ldr	r2, [r7, #4]
 80108bc:	430a      	orrs	r2, r1
 80108be:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80108c6:	f000 80e3 	beq.w	8010a90 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	68ba      	ldr	r2, [r7, #8]
 80108d0:	6852      	ldr	r2, [r2, #4]
 80108d2:	619a      	str	r2, [r3, #24]
}
 80108d4:	e0dc      	b.n	8010a90 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108da:	68bb      	ldr	r3, [r7, #8]
 80108dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80108de:	431a      	orrs	r2, r3
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108e4:	431a      	orrs	r2, r3
 80108e6:	68bb      	ldr	r3, [r7, #8]
 80108e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108ea:	431a      	orrs	r2, r3
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	695b      	ldr	r3, [r3, #20]
 80108f0:	049b      	lsls	r3, r3, #18
 80108f2:	431a      	orrs	r2, r3
 80108f4:	68bb      	ldr	r3, [r7, #8]
 80108f6:	6a1b      	ldr	r3, [r3, #32]
 80108f8:	431a      	orrs	r2, r3
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	69db      	ldr	r3, [r3, #28]
 80108fe:	431a      	orrs	r2, r3
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	699b      	ldr	r3, [r3, #24]
 8010904:	431a      	orrs	r2, r3
 8010906:	68bb      	ldr	r3, [r7, #8]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	ea42 0103 	orr.w	r1, r2, r3
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	687a      	ldr	r2, [r7, #4]
 8010914:	430a      	orrs	r2, r1
 8010916:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	2200      	movs	r2, #0
 801091e:	619a      	str	r2, [r3, #24]
}
 8010920:	e0b6      	b.n	8010a90 <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8010922:	68bb      	ldr	r3, [r7, #8]
 8010924:	6a1b      	ldr	r3, [r3, #32]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d05d      	beq.n	80109e6 <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	68ba      	ldr	r2, [r7, #8]
 8010930:	6892      	ldr	r2, [r2, #8]
 8010932:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	69db      	ldr	r3, [r3, #28]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d02e      	beq.n	801099a <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010944:	431a      	orrs	r2, r3
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801094a:	431a      	orrs	r2, r3
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010950:	431a      	orrs	r2, r3
 8010952:	68bb      	ldr	r3, [r7, #8]
 8010954:	695b      	ldr	r3, [r3, #20]
 8010956:	049b      	lsls	r3, r3, #18
 8010958:	431a      	orrs	r2, r3
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	691b      	ldr	r3, [r3, #16]
 801095e:	431a      	orrs	r2, r3
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	6a1b      	ldr	r3, [r3, #32]
 8010964:	431a      	orrs	r2, r3
 8010966:	68bb      	ldr	r3, [r7, #8]
 8010968:	68db      	ldr	r3, [r3, #12]
 801096a:	431a      	orrs	r2, r3
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	69db      	ldr	r3, [r3, #28]
 8010970:	431a      	orrs	r2, r3
 8010972:	68bb      	ldr	r3, [r7, #8]
 8010974:	699b      	ldr	r3, [r3, #24]
 8010976:	ea42 0103 	orr.w	r1, r2, r3
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	687a      	ldr	r2, [r7, #4]
 8010980:	430a      	orrs	r2, r1
 8010982:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 801098a:	f000 8081 	beq.w	8010a90 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	68ba      	ldr	r2, [r7, #8]
 8010994:	6852      	ldr	r2, [r2, #4]
 8010996:	619a      	str	r2, [r3, #24]
}
 8010998:	e07a      	b.n	8010a90 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801099a:	68bb      	ldr	r3, [r7, #8]
 801099c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109a2:	431a      	orrs	r2, r3
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109a8:	431a      	orrs	r2, r3
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109ae:	431a      	orrs	r2, r3
 80109b0:	68bb      	ldr	r3, [r7, #8]
 80109b2:	695b      	ldr	r3, [r3, #20]
 80109b4:	049b      	lsls	r3, r3, #18
 80109b6:	431a      	orrs	r2, r3
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	691b      	ldr	r3, [r3, #16]
 80109bc:	431a      	orrs	r2, r3
 80109be:	68bb      	ldr	r3, [r7, #8]
 80109c0:	6a1b      	ldr	r3, [r3, #32]
 80109c2:	431a      	orrs	r2, r3
 80109c4:	68bb      	ldr	r3, [r7, #8]
 80109c6:	69db      	ldr	r3, [r3, #28]
 80109c8:	431a      	orrs	r2, r3
 80109ca:	68bb      	ldr	r3, [r7, #8]
 80109cc:	699b      	ldr	r3, [r3, #24]
 80109ce:	ea42 0103 	orr.w	r1, r2, r3
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	687a      	ldr	r2, [r7, #4]
 80109d8:	430a      	orrs	r2, r1
 80109da:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	2200      	movs	r2, #0
 80109e2:	619a      	str	r2, [r3, #24]
}
 80109e4:	e054      	b.n	8010a90 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80109e6:	68bb      	ldr	r3, [r7, #8]
 80109e8:	69db      	ldr	r3, [r3, #28]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d02a      	beq.n	8010a44 <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109f6:	431a      	orrs	r2, r3
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109fc:	431a      	orrs	r2, r3
 80109fe:	68bb      	ldr	r3, [r7, #8]
 8010a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a02:	431a      	orrs	r2, r3
 8010a04:	68bb      	ldr	r3, [r7, #8]
 8010a06:	695b      	ldr	r3, [r3, #20]
 8010a08:	049b      	lsls	r3, r3, #18
 8010a0a:	431a      	orrs	r2, r3
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	6a1b      	ldr	r3, [r3, #32]
 8010a10:	431a      	orrs	r2, r3
 8010a12:	68bb      	ldr	r3, [r7, #8]
 8010a14:	68db      	ldr	r3, [r3, #12]
 8010a16:	431a      	orrs	r2, r3
 8010a18:	68bb      	ldr	r3, [r7, #8]
 8010a1a:	69db      	ldr	r3, [r3, #28]
 8010a1c:	431a      	orrs	r2, r3
 8010a1e:	68bb      	ldr	r3, [r7, #8]
 8010a20:	699b      	ldr	r3, [r3, #24]
 8010a22:	ea42 0103 	orr.w	r1, r2, r3
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	687a      	ldr	r2, [r7, #4]
 8010a2c:	430a      	orrs	r2, r1
 8010a2e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8010a36:	d02b      	beq.n	8010a90 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	68ba      	ldr	r2, [r7, #8]
 8010a3e:	6852      	ldr	r2, [r2, #4]
 8010a40:	619a      	str	r2, [r3, #24]
}
 8010a42:	e025      	b.n	8010a90 <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d021      	beq.n	8010a90 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a54:	431a      	orrs	r2, r3
 8010a56:	68bb      	ldr	r3, [r7, #8]
 8010a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a5a:	431a      	orrs	r2, r3
 8010a5c:	68bb      	ldr	r3, [r7, #8]
 8010a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a60:	431a      	orrs	r2, r3
 8010a62:	68bb      	ldr	r3, [r7, #8]
 8010a64:	695b      	ldr	r3, [r3, #20]
 8010a66:	049b      	lsls	r3, r3, #18
 8010a68:	431a      	orrs	r2, r3
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	6a1b      	ldr	r3, [r3, #32]
 8010a6e:	431a      	orrs	r2, r3
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	69db      	ldr	r3, [r3, #28]
 8010a74:	431a      	orrs	r2, r3
 8010a76:	68bb      	ldr	r3, [r7, #8]
 8010a78:	699b      	ldr	r3, [r3, #24]
 8010a7a:	ea42 0103 	orr.w	r1, r2, r3
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	687a      	ldr	r2, [r7, #4]
 8010a84:	430a      	orrs	r2, r1
 8010a86:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	619a      	str	r2, [r3, #24]
}
 8010a90:	bf00      	nop
 8010a92:	3714      	adds	r7, #20
 8010a94:	46bd      	mov	sp, r7
 8010a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9a:	4770      	bx	lr

08010a9c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b088      	sub	sp, #32
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d101      	bne.n	8010aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8010aaa:	2301      	movs	r3, #1
 8010aac:	e3ca      	b.n	8011244 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010aae:	4b97      	ldr	r3, [pc, #604]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010ab0:	689b      	ldr	r3, [r3, #8]
 8010ab2:	f003 030c 	and.w	r3, r3, #12
 8010ab6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010ab8:	4b94      	ldr	r3, [pc, #592]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010aba:	68db      	ldr	r3, [r3, #12]
 8010abc:	f003 0303 	and.w	r3, r3, #3
 8010ac0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	f003 0310 	and.w	r3, r3, #16
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	f000 80e4 	beq.w	8010c98 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8010ad0:	69bb      	ldr	r3, [r7, #24]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d007      	beq.n	8010ae6 <HAL_RCC_OscConfig+0x4a>
 8010ad6:	69bb      	ldr	r3, [r7, #24]
 8010ad8:	2b0c      	cmp	r3, #12
 8010ada:	f040 808b 	bne.w	8010bf4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	2b01      	cmp	r3, #1
 8010ae2:	f040 8087 	bne.w	8010bf4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8010ae6:	4b89      	ldr	r3, [pc, #548]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	f003 0302 	and.w	r3, r3, #2
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d005      	beq.n	8010afe <HAL_RCC_OscConfig+0x62>
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	699b      	ldr	r3, [r3, #24]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d101      	bne.n	8010afe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8010afa:	2301      	movs	r3, #1
 8010afc:	e3a2      	b.n	8011244 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	6a1a      	ldr	r2, [r3, #32]
 8010b02:	4b82      	ldr	r3, [pc, #520]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	f003 0308 	and.w	r3, r3, #8
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d004      	beq.n	8010b18 <HAL_RCC_OscConfig+0x7c>
 8010b0e:	4b7f      	ldr	r3, [pc, #508]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010b16:	e005      	b.n	8010b24 <HAL_RCC_OscConfig+0x88>
 8010b18:	4b7c      	ldr	r3, [pc, #496]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010b1e:	091b      	lsrs	r3, r3, #4
 8010b20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010b24:	4293      	cmp	r3, r2
 8010b26:	d223      	bcs.n	8010b70 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	6a1b      	ldr	r3, [r3, #32]
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f000 fd55 	bl	80115dc <RCC_SetFlashLatencyFromMSIRange>
 8010b32:	4603      	mov	r3, r0
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d001      	beq.n	8010b3c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8010b38:	2301      	movs	r3, #1
 8010b3a:	e383      	b.n	8011244 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010b3c:	4b73      	ldr	r3, [pc, #460]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	4a72      	ldr	r2, [pc, #456]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010b42:	f043 0308 	orr.w	r3, r3, #8
 8010b46:	6013      	str	r3, [r2, #0]
 8010b48:	4b70      	ldr	r3, [pc, #448]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	6a1b      	ldr	r3, [r3, #32]
 8010b54:	496d      	ldr	r1, [pc, #436]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010b56:	4313      	orrs	r3, r2
 8010b58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010b5a:	4b6c      	ldr	r3, [pc, #432]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010b5c:	685b      	ldr	r3, [r3, #4]
 8010b5e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	69db      	ldr	r3, [r3, #28]
 8010b66:	021b      	lsls	r3, r3, #8
 8010b68:	4968      	ldr	r1, [pc, #416]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010b6a:	4313      	orrs	r3, r2
 8010b6c:	604b      	str	r3, [r1, #4]
 8010b6e:	e025      	b.n	8010bbc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010b70:	4b66      	ldr	r3, [pc, #408]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	4a65      	ldr	r2, [pc, #404]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010b76:	f043 0308 	orr.w	r3, r3, #8
 8010b7a:	6013      	str	r3, [r2, #0]
 8010b7c:	4b63      	ldr	r3, [pc, #396]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	6a1b      	ldr	r3, [r3, #32]
 8010b88:	4960      	ldr	r1, [pc, #384]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010b8a:	4313      	orrs	r3, r2
 8010b8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010b8e:	4b5f      	ldr	r3, [pc, #380]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010b90:	685b      	ldr	r3, [r3, #4]
 8010b92:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	69db      	ldr	r3, [r3, #28]
 8010b9a:	021b      	lsls	r3, r3, #8
 8010b9c:	495b      	ldr	r1, [pc, #364]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010b9e:	4313      	orrs	r3, r2
 8010ba0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8010ba2:	69bb      	ldr	r3, [r7, #24]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d109      	bne.n	8010bbc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	6a1b      	ldr	r3, [r3, #32]
 8010bac:	4618      	mov	r0, r3
 8010bae:	f000 fd15 	bl	80115dc <RCC_SetFlashLatencyFromMSIRange>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d001      	beq.n	8010bbc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8010bb8:	2301      	movs	r3, #1
 8010bba:	e343      	b.n	8011244 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8010bbc:	f000 fc4a 	bl	8011454 <HAL_RCC_GetSysClockFreq>
 8010bc0:	4602      	mov	r2, r0
 8010bc2:	4b52      	ldr	r3, [pc, #328]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010bc4:	689b      	ldr	r3, [r3, #8]
 8010bc6:	091b      	lsrs	r3, r3, #4
 8010bc8:	f003 030f 	and.w	r3, r3, #15
 8010bcc:	4950      	ldr	r1, [pc, #320]	@ (8010d10 <HAL_RCC_OscConfig+0x274>)
 8010bce:	5ccb      	ldrb	r3, [r1, r3]
 8010bd0:	f003 031f 	and.w	r3, r3, #31
 8010bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8010bd8:	4a4e      	ldr	r2, [pc, #312]	@ (8010d14 <HAL_RCC_OscConfig+0x278>)
 8010bda:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8010bdc:	4b4e      	ldr	r3, [pc, #312]	@ (8010d18 <HAL_RCC_OscConfig+0x27c>)
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	4618      	mov	r0, r3
 8010be2:	f7fb f9f7 	bl	800bfd4 <HAL_InitTick>
 8010be6:	4603      	mov	r3, r0
 8010be8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8010bea:	7bfb      	ldrb	r3, [r7, #15]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d052      	beq.n	8010c96 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8010bf0:	7bfb      	ldrb	r3, [r7, #15]
 8010bf2:	e327      	b.n	8011244 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	699b      	ldr	r3, [r3, #24]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d032      	beq.n	8010c62 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8010bfc:	4b43      	ldr	r3, [pc, #268]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	4a42      	ldr	r2, [pc, #264]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010c02:	f043 0301 	orr.w	r3, r3, #1
 8010c06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8010c08:	f7fb fa34 	bl	800c074 <HAL_GetTick>
 8010c0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010c0e:	e008      	b.n	8010c22 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8010c10:	f7fb fa30 	bl	800c074 <HAL_GetTick>
 8010c14:	4602      	mov	r2, r0
 8010c16:	693b      	ldr	r3, [r7, #16]
 8010c18:	1ad3      	subs	r3, r2, r3
 8010c1a:	2b02      	cmp	r3, #2
 8010c1c:	d901      	bls.n	8010c22 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8010c1e:	2303      	movs	r3, #3
 8010c20:	e310      	b.n	8011244 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010c22:	4b3a      	ldr	r3, [pc, #232]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	f003 0302 	and.w	r3, r3, #2
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d0f0      	beq.n	8010c10 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010c2e:	4b37      	ldr	r3, [pc, #220]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	4a36      	ldr	r2, [pc, #216]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010c34:	f043 0308 	orr.w	r3, r3, #8
 8010c38:	6013      	str	r3, [r2, #0]
 8010c3a:	4b34      	ldr	r3, [pc, #208]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	6a1b      	ldr	r3, [r3, #32]
 8010c46:	4931      	ldr	r1, [pc, #196]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010c48:	4313      	orrs	r3, r2
 8010c4a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010c4c:	4b2f      	ldr	r3, [pc, #188]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010c4e:	685b      	ldr	r3, [r3, #4]
 8010c50:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	69db      	ldr	r3, [r3, #28]
 8010c58:	021b      	lsls	r3, r3, #8
 8010c5a:	492c      	ldr	r1, [pc, #176]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010c5c:	4313      	orrs	r3, r2
 8010c5e:	604b      	str	r3, [r1, #4]
 8010c60:	e01a      	b.n	8010c98 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8010c62:	4b2a      	ldr	r3, [pc, #168]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	4a29      	ldr	r2, [pc, #164]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010c68:	f023 0301 	bic.w	r3, r3, #1
 8010c6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8010c6e:	f7fb fa01 	bl	800c074 <HAL_GetTick>
 8010c72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8010c74:	e008      	b.n	8010c88 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8010c76:	f7fb f9fd 	bl	800c074 <HAL_GetTick>
 8010c7a:	4602      	mov	r2, r0
 8010c7c:	693b      	ldr	r3, [r7, #16]
 8010c7e:	1ad3      	subs	r3, r2, r3
 8010c80:	2b02      	cmp	r3, #2
 8010c82:	d901      	bls.n	8010c88 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8010c84:	2303      	movs	r3, #3
 8010c86:	e2dd      	b.n	8011244 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8010c88:	4b20      	ldr	r3, [pc, #128]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	f003 0302 	and.w	r3, r3, #2
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d1f0      	bne.n	8010c76 <HAL_RCC_OscConfig+0x1da>
 8010c94:	e000      	b.n	8010c98 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8010c96:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	f003 0301 	and.w	r3, r3, #1
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d074      	beq.n	8010d8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8010ca4:	69bb      	ldr	r3, [r7, #24]
 8010ca6:	2b08      	cmp	r3, #8
 8010ca8:	d005      	beq.n	8010cb6 <HAL_RCC_OscConfig+0x21a>
 8010caa:	69bb      	ldr	r3, [r7, #24]
 8010cac:	2b0c      	cmp	r3, #12
 8010cae:	d10e      	bne.n	8010cce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8010cb0:	697b      	ldr	r3, [r7, #20]
 8010cb2:	2b03      	cmp	r3, #3
 8010cb4:	d10b      	bne.n	8010cce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010cb6:	4b15      	ldr	r3, [pc, #84]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d064      	beq.n	8010d8c <HAL_RCC_OscConfig+0x2f0>
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	685b      	ldr	r3, [r3, #4]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d160      	bne.n	8010d8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8010cca:	2301      	movs	r3, #1
 8010ccc:	e2ba      	b.n	8011244 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	685b      	ldr	r3, [r3, #4]
 8010cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010cd6:	d106      	bne.n	8010ce6 <HAL_RCC_OscConfig+0x24a>
 8010cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010ce2:	6013      	str	r3, [r2, #0]
 8010ce4:	e026      	b.n	8010d34 <HAL_RCC_OscConfig+0x298>
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	685b      	ldr	r3, [r3, #4]
 8010cea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010cee:	d115      	bne.n	8010d1c <HAL_RCC_OscConfig+0x280>
 8010cf0:	4b06      	ldr	r3, [pc, #24]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	4a05      	ldr	r2, [pc, #20]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010cf6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010cfa:	6013      	str	r3, [r2, #0]
 8010cfc:	4b03      	ldr	r3, [pc, #12]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	4a02      	ldr	r2, [pc, #8]	@ (8010d0c <HAL_RCC_OscConfig+0x270>)
 8010d02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010d06:	6013      	str	r3, [r2, #0]
 8010d08:	e014      	b.n	8010d34 <HAL_RCC_OscConfig+0x298>
 8010d0a:	bf00      	nop
 8010d0c:	40021000 	.word	0x40021000
 8010d10:	080192c8 	.word	0x080192c8
 8010d14:	20000000 	.word	0x20000000
 8010d18:	2000000c 	.word	0x2000000c
 8010d1c:	4ba0      	ldr	r3, [pc, #640]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	4a9f      	ldr	r2, [pc, #636]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010d26:	6013      	str	r3, [r2, #0]
 8010d28:	4b9d      	ldr	r3, [pc, #628]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	4a9c      	ldr	r2, [pc, #624]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	685b      	ldr	r3, [r3, #4]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d013      	beq.n	8010d64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010d3c:	f7fb f99a 	bl	800c074 <HAL_GetTick>
 8010d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8010d42:	e008      	b.n	8010d56 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010d44:	f7fb f996 	bl	800c074 <HAL_GetTick>
 8010d48:	4602      	mov	r2, r0
 8010d4a:	693b      	ldr	r3, [r7, #16]
 8010d4c:	1ad3      	subs	r3, r2, r3
 8010d4e:	2b64      	cmp	r3, #100	@ 0x64
 8010d50:	d901      	bls.n	8010d56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8010d52:	2303      	movs	r3, #3
 8010d54:	e276      	b.n	8011244 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8010d56:	4b92      	ldr	r3, [pc, #584]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d0f0      	beq.n	8010d44 <HAL_RCC_OscConfig+0x2a8>
 8010d62:	e014      	b.n	8010d8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010d64:	f7fb f986 	bl	800c074 <HAL_GetTick>
 8010d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8010d6a:	e008      	b.n	8010d7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010d6c:	f7fb f982 	bl	800c074 <HAL_GetTick>
 8010d70:	4602      	mov	r2, r0
 8010d72:	693b      	ldr	r3, [r7, #16]
 8010d74:	1ad3      	subs	r3, r2, r3
 8010d76:	2b64      	cmp	r3, #100	@ 0x64
 8010d78:	d901      	bls.n	8010d7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8010d7a:	2303      	movs	r3, #3
 8010d7c:	e262      	b.n	8011244 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8010d7e:	4b88      	ldr	r3, [pc, #544]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d1f0      	bne.n	8010d6c <HAL_RCC_OscConfig+0x2d0>
 8010d8a:	e000      	b.n	8010d8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	f003 0302 	and.w	r3, r3, #2
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d060      	beq.n	8010e5c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8010d9a:	69bb      	ldr	r3, [r7, #24]
 8010d9c:	2b04      	cmp	r3, #4
 8010d9e:	d005      	beq.n	8010dac <HAL_RCC_OscConfig+0x310>
 8010da0:	69bb      	ldr	r3, [r7, #24]
 8010da2:	2b0c      	cmp	r3, #12
 8010da4:	d119      	bne.n	8010dda <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8010da6:	697b      	ldr	r3, [r7, #20]
 8010da8:	2b02      	cmp	r3, #2
 8010daa:	d116      	bne.n	8010dda <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010dac:	4b7c      	ldr	r3, [pc, #496]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d005      	beq.n	8010dc4 <HAL_RCC_OscConfig+0x328>
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	68db      	ldr	r3, [r3, #12]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d101      	bne.n	8010dc4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8010dc0:	2301      	movs	r3, #1
 8010dc2:	e23f      	b.n	8011244 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010dc4:	4b76      	ldr	r3, [pc, #472]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010dc6:	685b      	ldr	r3, [r3, #4]
 8010dc8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	691b      	ldr	r3, [r3, #16]
 8010dd0:	061b      	lsls	r3, r3, #24
 8010dd2:	4973      	ldr	r1, [pc, #460]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010dd4:	4313      	orrs	r3, r2
 8010dd6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010dd8:	e040      	b.n	8010e5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	68db      	ldr	r3, [r3, #12]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d023      	beq.n	8010e2a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010de2:	4b6f      	ldr	r3, [pc, #444]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	4a6e      	ldr	r2, [pc, #440]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010dee:	f7fb f941 	bl	800c074 <HAL_GetTick>
 8010df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010df4:	e008      	b.n	8010e08 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010df6:	f7fb f93d 	bl	800c074 <HAL_GetTick>
 8010dfa:	4602      	mov	r2, r0
 8010dfc:	693b      	ldr	r3, [r7, #16]
 8010dfe:	1ad3      	subs	r3, r2, r3
 8010e00:	2b02      	cmp	r3, #2
 8010e02:	d901      	bls.n	8010e08 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8010e04:	2303      	movs	r3, #3
 8010e06:	e21d      	b.n	8011244 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010e08:	4b65      	ldr	r3, [pc, #404]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d0f0      	beq.n	8010df6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010e14:	4b62      	ldr	r3, [pc, #392]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010e16:	685b      	ldr	r3, [r3, #4]
 8010e18:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	691b      	ldr	r3, [r3, #16]
 8010e20:	061b      	lsls	r3, r3, #24
 8010e22:	495f      	ldr	r1, [pc, #380]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010e24:	4313      	orrs	r3, r2
 8010e26:	604b      	str	r3, [r1, #4]
 8010e28:	e018      	b.n	8010e5c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010e2a:	4b5d      	ldr	r3, [pc, #372]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	4a5c      	ldr	r2, [pc, #368]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010e30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010e36:	f7fb f91d 	bl	800c074 <HAL_GetTick>
 8010e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8010e3c:	e008      	b.n	8010e50 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010e3e:	f7fb f919 	bl	800c074 <HAL_GetTick>
 8010e42:	4602      	mov	r2, r0
 8010e44:	693b      	ldr	r3, [r7, #16]
 8010e46:	1ad3      	subs	r3, r2, r3
 8010e48:	2b02      	cmp	r3, #2
 8010e4a:	d901      	bls.n	8010e50 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8010e4c:	2303      	movs	r3, #3
 8010e4e:	e1f9      	b.n	8011244 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8010e50:	4b53      	ldr	r3, [pc, #332]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d1f0      	bne.n	8010e3e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	f003 0308 	and.w	r3, r3, #8
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d03c      	beq.n	8010ee2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	695b      	ldr	r3, [r3, #20]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d01c      	beq.n	8010eaa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010e70:	4b4b      	ldr	r3, [pc, #300]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010e76:	4a4a      	ldr	r2, [pc, #296]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010e78:	f043 0301 	orr.w	r3, r3, #1
 8010e7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010e80:	f7fb f8f8 	bl	800c074 <HAL_GetTick>
 8010e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8010e86:	e008      	b.n	8010e9a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010e88:	f7fb f8f4 	bl	800c074 <HAL_GetTick>
 8010e8c:	4602      	mov	r2, r0
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	1ad3      	subs	r3, r2, r3
 8010e92:	2b02      	cmp	r3, #2
 8010e94:	d901      	bls.n	8010e9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8010e96:	2303      	movs	r3, #3
 8010e98:	e1d4      	b.n	8011244 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8010e9a:	4b41      	ldr	r3, [pc, #260]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010ea0:	f003 0302 	and.w	r3, r3, #2
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d0ef      	beq.n	8010e88 <HAL_RCC_OscConfig+0x3ec>
 8010ea8:	e01b      	b.n	8010ee2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010eaa:	4b3d      	ldr	r3, [pc, #244]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010eb0:	4a3b      	ldr	r2, [pc, #236]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010eb2:	f023 0301 	bic.w	r3, r3, #1
 8010eb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010eba:	f7fb f8db 	bl	800c074 <HAL_GetTick>
 8010ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8010ec0:	e008      	b.n	8010ed4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010ec2:	f7fb f8d7 	bl	800c074 <HAL_GetTick>
 8010ec6:	4602      	mov	r2, r0
 8010ec8:	693b      	ldr	r3, [r7, #16]
 8010eca:	1ad3      	subs	r3, r2, r3
 8010ecc:	2b02      	cmp	r3, #2
 8010ece:	d901      	bls.n	8010ed4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8010ed0:	2303      	movs	r3, #3
 8010ed2:	e1b7      	b.n	8011244 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8010ed4:	4b32      	ldr	r3, [pc, #200]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010eda:	f003 0302 	and.w	r3, r3, #2
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d1ef      	bne.n	8010ec2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	f003 0304 	and.w	r3, r3, #4
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	f000 80a6 	beq.w	801103c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8010ef4:	4b2a      	ldr	r3, [pc, #168]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d10d      	bne.n	8010f1c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010f00:	4b27      	ldr	r3, [pc, #156]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f04:	4a26      	ldr	r2, [pc, #152]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010f06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010f0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8010f0c:	4b24      	ldr	r3, [pc, #144]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010f14:	60bb      	str	r3, [r7, #8]
 8010f16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010f18:	2301      	movs	r3, #1
 8010f1a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010f1c:	4b21      	ldr	r3, [pc, #132]	@ (8010fa4 <HAL_RCC_OscConfig+0x508>)
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d118      	bne.n	8010f5a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010f28:	4b1e      	ldr	r3, [pc, #120]	@ (8010fa4 <HAL_RCC_OscConfig+0x508>)
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8010fa4 <HAL_RCC_OscConfig+0x508>)
 8010f2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010f32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010f34:	f7fb f89e 	bl	800c074 <HAL_GetTick>
 8010f38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010f3a:	e008      	b.n	8010f4e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010f3c:	f7fb f89a 	bl	800c074 <HAL_GetTick>
 8010f40:	4602      	mov	r2, r0
 8010f42:	693b      	ldr	r3, [r7, #16]
 8010f44:	1ad3      	subs	r3, r2, r3
 8010f46:	2b02      	cmp	r3, #2
 8010f48:	d901      	bls.n	8010f4e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8010f4a:	2303      	movs	r3, #3
 8010f4c:	e17a      	b.n	8011244 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010f4e:	4b15      	ldr	r3, [pc, #84]	@ (8010fa4 <HAL_RCC_OscConfig+0x508>)
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d0f0      	beq.n	8010f3c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	689b      	ldr	r3, [r3, #8]
 8010f5e:	2b01      	cmp	r3, #1
 8010f60:	d108      	bne.n	8010f74 <HAL_RCC_OscConfig+0x4d8>
 8010f62:	4b0f      	ldr	r3, [pc, #60]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010f68:	4a0d      	ldr	r2, [pc, #52]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010f6a:	f043 0301 	orr.w	r3, r3, #1
 8010f6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8010f72:	e029      	b.n	8010fc8 <HAL_RCC_OscConfig+0x52c>
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	689b      	ldr	r3, [r3, #8]
 8010f78:	2b05      	cmp	r3, #5
 8010f7a:	d115      	bne.n	8010fa8 <HAL_RCC_OscConfig+0x50c>
 8010f7c:	4b08      	ldr	r3, [pc, #32]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010f82:	4a07      	ldr	r2, [pc, #28]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010f84:	f043 0304 	orr.w	r3, r3, #4
 8010f88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8010f8c:	4b04      	ldr	r3, [pc, #16]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010f92:	4a03      	ldr	r2, [pc, #12]	@ (8010fa0 <HAL_RCC_OscConfig+0x504>)
 8010f94:	f043 0301 	orr.w	r3, r3, #1
 8010f98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8010f9c:	e014      	b.n	8010fc8 <HAL_RCC_OscConfig+0x52c>
 8010f9e:	bf00      	nop
 8010fa0:	40021000 	.word	0x40021000
 8010fa4:	40007000 	.word	0x40007000
 8010fa8:	4b9c      	ldr	r3, [pc, #624]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 8010faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010fae:	4a9b      	ldr	r2, [pc, #620]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 8010fb0:	f023 0301 	bic.w	r3, r3, #1
 8010fb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8010fb8:	4b98      	ldr	r3, [pc, #608]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 8010fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010fbe:	4a97      	ldr	r2, [pc, #604]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 8010fc0:	f023 0304 	bic.w	r3, r3, #4
 8010fc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	689b      	ldr	r3, [r3, #8]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d016      	beq.n	8010ffe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010fd0:	f7fb f850 	bl	800c074 <HAL_GetTick>
 8010fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010fd6:	e00a      	b.n	8010fee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010fd8:	f7fb f84c 	bl	800c074 <HAL_GetTick>
 8010fdc:	4602      	mov	r2, r0
 8010fde:	693b      	ldr	r3, [r7, #16]
 8010fe0:	1ad3      	subs	r3, r2, r3
 8010fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010fe6:	4293      	cmp	r3, r2
 8010fe8:	d901      	bls.n	8010fee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8010fea:	2303      	movs	r3, #3
 8010fec:	e12a      	b.n	8011244 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010fee:	4b8b      	ldr	r3, [pc, #556]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 8010ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010ff4:	f003 0302 	and.w	r3, r3, #2
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d0ed      	beq.n	8010fd8 <HAL_RCC_OscConfig+0x53c>
 8010ffc:	e015      	b.n	801102a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010ffe:	f7fb f839 	bl	800c074 <HAL_GetTick>
 8011002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8011004:	e00a      	b.n	801101c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011006:	f7fb f835 	bl	800c074 <HAL_GetTick>
 801100a:	4602      	mov	r2, r0
 801100c:	693b      	ldr	r3, [r7, #16]
 801100e:	1ad3      	subs	r3, r2, r3
 8011010:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011014:	4293      	cmp	r3, r2
 8011016:	d901      	bls.n	801101c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8011018:	2303      	movs	r3, #3
 801101a:	e113      	b.n	8011244 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801101c:	4b7f      	ldr	r3, [pc, #508]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 801101e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011022:	f003 0302 	and.w	r3, r3, #2
 8011026:	2b00      	cmp	r3, #0
 8011028:	d1ed      	bne.n	8011006 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801102a:	7ffb      	ldrb	r3, [r7, #31]
 801102c:	2b01      	cmp	r3, #1
 801102e:	d105      	bne.n	801103c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011030:	4b7a      	ldr	r3, [pc, #488]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 8011032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011034:	4a79      	ldr	r2, [pc, #484]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 8011036:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801103a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011040:	2b00      	cmp	r3, #0
 8011042:	f000 80fe 	beq.w	8011242 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801104a:	2b02      	cmp	r3, #2
 801104c:	f040 80d0 	bne.w	80111f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8011050:	4b72      	ldr	r3, [pc, #456]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 8011052:	68db      	ldr	r3, [r3, #12]
 8011054:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8011056:	697b      	ldr	r3, [r7, #20]
 8011058:	f003 0203 	and.w	r2, r3, #3
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011060:	429a      	cmp	r2, r3
 8011062:	d130      	bne.n	80110c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8011064:	697b      	ldr	r3, [r7, #20]
 8011066:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801106e:	3b01      	subs	r3, #1
 8011070:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8011072:	429a      	cmp	r2, r3
 8011074:	d127      	bne.n	80110c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8011076:	697b      	ldr	r3, [r7, #20]
 8011078:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011080:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8011082:	429a      	cmp	r2, r3
 8011084:	d11f      	bne.n	80110c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801108c:	687a      	ldr	r2, [r7, #4]
 801108e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8011090:	2a07      	cmp	r2, #7
 8011092:	bf14      	ite	ne
 8011094:	2201      	movne	r2, #1
 8011096:	2200      	moveq	r2, #0
 8011098:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801109a:	4293      	cmp	r3, r2
 801109c:	d113      	bne.n	80110c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80110a8:	085b      	lsrs	r3, r3, #1
 80110aa:	3b01      	subs	r3, #1
 80110ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80110ae:	429a      	cmp	r2, r3
 80110b0:	d109      	bne.n	80110c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80110b2:	697b      	ldr	r3, [r7, #20]
 80110b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80110bc:	085b      	lsrs	r3, r3, #1
 80110be:	3b01      	subs	r3, #1
 80110c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80110c2:	429a      	cmp	r2, r3
 80110c4:	d06e      	beq.n	80111a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80110c6:	69bb      	ldr	r3, [r7, #24]
 80110c8:	2b0c      	cmp	r3, #12
 80110ca:	d069      	beq.n	80111a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80110cc:	4b53      	ldr	r3, [pc, #332]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d105      	bne.n	80110e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80110d8:	4b50      	ldr	r3, [pc, #320]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d001      	beq.n	80110e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80110e4:	2301      	movs	r3, #1
 80110e6:	e0ad      	b.n	8011244 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80110e8:	4b4c      	ldr	r3, [pc, #304]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	4a4b      	ldr	r2, [pc, #300]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 80110ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80110f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80110f4:	f7fa ffbe 	bl	800c074 <HAL_GetTick>
 80110f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80110fa:	e008      	b.n	801110e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80110fc:	f7fa ffba 	bl	800c074 <HAL_GetTick>
 8011100:	4602      	mov	r2, r0
 8011102:	693b      	ldr	r3, [r7, #16]
 8011104:	1ad3      	subs	r3, r2, r3
 8011106:	2b02      	cmp	r3, #2
 8011108:	d901      	bls.n	801110e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 801110a:	2303      	movs	r3, #3
 801110c:	e09a      	b.n	8011244 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801110e:	4b43      	ldr	r3, [pc, #268]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011116:	2b00      	cmp	r3, #0
 8011118:	d1f0      	bne.n	80110fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801111a:	4b40      	ldr	r3, [pc, #256]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 801111c:	68da      	ldr	r2, [r3, #12]
 801111e:	4b40      	ldr	r3, [pc, #256]	@ (8011220 <HAL_RCC_OscConfig+0x784>)
 8011120:	4013      	ands	r3, r2
 8011122:	687a      	ldr	r2, [r7, #4]
 8011124:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8011126:	687a      	ldr	r2, [r7, #4]
 8011128:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801112a:	3a01      	subs	r2, #1
 801112c:	0112      	lsls	r2, r2, #4
 801112e:	4311      	orrs	r1, r2
 8011130:	687a      	ldr	r2, [r7, #4]
 8011132:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8011134:	0212      	lsls	r2, r2, #8
 8011136:	4311      	orrs	r1, r2
 8011138:	687a      	ldr	r2, [r7, #4]
 801113a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801113c:	0852      	lsrs	r2, r2, #1
 801113e:	3a01      	subs	r2, #1
 8011140:	0552      	lsls	r2, r2, #21
 8011142:	4311      	orrs	r1, r2
 8011144:	687a      	ldr	r2, [r7, #4]
 8011146:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8011148:	0852      	lsrs	r2, r2, #1
 801114a:	3a01      	subs	r2, #1
 801114c:	0652      	lsls	r2, r2, #25
 801114e:	4311      	orrs	r1, r2
 8011150:	687a      	ldr	r2, [r7, #4]
 8011152:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8011154:	0912      	lsrs	r2, r2, #4
 8011156:	0452      	lsls	r2, r2, #17
 8011158:	430a      	orrs	r2, r1
 801115a:	4930      	ldr	r1, [pc, #192]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 801115c:	4313      	orrs	r3, r2
 801115e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8011160:	4b2e      	ldr	r3, [pc, #184]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	4a2d      	ldr	r2, [pc, #180]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 8011166:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801116a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801116c:	4b2b      	ldr	r3, [pc, #172]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 801116e:	68db      	ldr	r3, [r3, #12]
 8011170:	4a2a      	ldr	r2, [pc, #168]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 8011172:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8011176:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8011178:	f7fa ff7c 	bl	800c074 <HAL_GetTick>
 801117c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801117e:	e008      	b.n	8011192 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011180:	f7fa ff78 	bl	800c074 <HAL_GetTick>
 8011184:	4602      	mov	r2, r0
 8011186:	693b      	ldr	r3, [r7, #16]
 8011188:	1ad3      	subs	r3, r2, r3
 801118a:	2b02      	cmp	r3, #2
 801118c:	d901      	bls.n	8011192 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 801118e:	2303      	movs	r3, #3
 8011190:	e058      	b.n	8011244 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011192:	4b22      	ldr	r3, [pc, #136]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801119a:	2b00      	cmp	r3, #0
 801119c:	d0f0      	beq.n	8011180 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 801119e:	e050      	b.n	8011242 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80111a0:	2301      	movs	r3, #1
 80111a2:	e04f      	b.n	8011244 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80111a4:	4b1d      	ldr	r3, [pc, #116]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d148      	bne.n	8011242 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80111b0:	4b1a      	ldr	r3, [pc, #104]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	4a19      	ldr	r2, [pc, #100]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 80111b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80111ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80111bc:	4b17      	ldr	r3, [pc, #92]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 80111be:	68db      	ldr	r3, [r3, #12]
 80111c0:	4a16      	ldr	r2, [pc, #88]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 80111c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80111c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80111c8:	f7fa ff54 	bl	800c074 <HAL_GetTick>
 80111cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80111ce:	e008      	b.n	80111e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80111d0:	f7fa ff50 	bl	800c074 <HAL_GetTick>
 80111d4:	4602      	mov	r2, r0
 80111d6:	693b      	ldr	r3, [r7, #16]
 80111d8:	1ad3      	subs	r3, r2, r3
 80111da:	2b02      	cmp	r3, #2
 80111dc:	d901      	bls.n	80111e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80111de:	2303      	movs	r3, #3
 80111e0:	e030      	b.n	8011244 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80111e2:	4b0e      	ldr	r3, [pc, #56]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d0f0      	beq.n	80111d0 <HAL_RCC_OscConfig+0x734>
 80111ee:	e028      	b.n	8011242 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80111f0:	69bb      	ldr	r3, [r7, #24]
 80111f2:	2b0c      	cmp	r3, #12
 80111f4:	d023      	beq.n	801123e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80111f6:	4b09      	ldr	r3, [pc, #36]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	4a08      	ldr	r2, [pc, #32]	@ (801121c <HAL_RCC_OscConfig+0x780>)
 80111fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8011200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011202:	f7fa ff37 	bl	800c074 <HAL_GetTick>
 8011206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8011208:	e00c      	b.n	8011224 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801120a:	f7fa ff33 	bl	800c074 <HAL_GetTick>
 801120e:	4602      	mov	r2, r0
 8011210:	693b      	ldr	r3, [r7, #16]
 8011212:	1ad3      	subs	r3, r2, r3
 8011214:	2b02      	cmp	r3, #2
 8011216:	d905      	bls.n	8011224 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8011218:	2303      	movs	r3, #3
 801121a:	e013      	b.n	8011244 <HAL_RCC_OscConfig+0x7a8>
 801121c:	40021000 	.word	0x40021000
 8011220:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8011224:	4b09      	ldr	r3, [pc, #36]	@ (801124c <HAL_RCC_OscConfig+0x7b0>)
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801122c:	2b00      	cmp	r3, #0
 801122e:	d1ec      	bne.n	801120a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8011230:	4b06      	ldr	r3, [pc, #24]	@ (801124c <HAL_RCC_OscConfig+0x7b0>)
 8011232:	68da      	ldr	r2, [r3, #12]
 8011234:	4905      	ldr	r1, [pc, #20]	@ (801124c <HAL_RCC_OscConfig+0x7b0>)
 8011236:	4b06      	ldr	r3, [pc, #24]	@ (8011250 <HAL_RCC_OscConfig+0x7b4>)
 8011238:	4013      	ands	r3, r2
 801123a:	60cb      	str	r3, [r1, #12]
 801123c:	e001      	b.n	8011242 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801123e:	2301      	movs	r3, #1
 8011240:	e000      	b.n	8011244 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8011242:	2300      	movs	r3, #0
}
 8011244:	4618      	mov	r0, r3
 8011246:	3720      	adds	r7, #32
 8011248:	46bd      	mov	sp, r7
 801124a:	bd80      	pop	{r7, pc}
 801124c:	40021000 	.word	0x40021000
 8011250:	feeefffc 	.word	0xfeeefffc

08011254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b084      	sub	sp, #16
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
 801125c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d101      	bne.n	8011268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011264:	2301      	movs	r3, #1
 8011266:	e0e7      	b.n	8011438 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011268:	4b75      	ldr	r3, [pc, #468]	@ (8011440 <HAL_RCC_ClockConfig+0x1ec>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	f003 0307 	and.w	r3, r3, #7
 8011270:	683a      	ldr	r2, [r7, #0]
 8011272:	429a      	cmp	r2, r3
 8011274:	d910      	bls.n	8011298 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011276:	4b72      	ldr	r3, [pc, #456]	@ (8011440 <HAL_RCC_ClockConfig+0x1ec>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	f023 0207 	bic.w	r2, r3, #7
 801127e:	4970      	ldr	r1, [pc, #448]	@ (8011440 <HAL_RCC_ClockConfig+0x1ec>)
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	4313      	orrs	r3, r2
 8011284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011286:	4b6e      	ldr	r3, [pc, #440]	@ (8011440 <HAL_RCC_ClockConfig+0x1ec>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	f003 0307 	and.w	r3, r3, #7
 801128e:	683a      	ldr	r2, [r7, #0]
 8011290:	429a      	cmp	r2, r3
 8011292:	d001      	beq.n	8011298 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8011294:	2301      	movs	r3, #1
 8011296:	e0cf      	b.n	8011438 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	f003 0302 	and.w	r3, r3, #2
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d010      	beq.n	80112c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	689a      	ldr	r2, [r3, #8]
 80112a8:	4b66      	ldr	r3, [pc, #408]	@ (8011444 <HAL_RCC_ClockConfig+0x1f0>)
 80112aa:	689b      	ldr	r3, [r3, #8]
 80112ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80112b0:	429a      	cmp	r2, r3
 80112b2:	d908      	bls.n	80112c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80112b4:	4b63      	ldr	r3, [pc, #396]	@ (8011444 <HAL_RCC_ClockConfig+0x1f0>)
 80112b6:	689b      	ldr	r3, [r3, #8]
 80112b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	689b      	ldr	r3, [r3, #8]
 80112c0:	4960      	ldr	r1, [pc, #384]	@ (8011444 <HAL_RCC_ClockConfig+0x1f0>)
 80112c2:	4313      	orrs	r3, r2
 80112c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	f003 0301 	and.w	r3, r3, #1
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d04c      	beq.n	801136c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	685b      	ldr	r3, [r3, #4]
 80112d6:	2b03      	cmp	r3, #3
 80112d8:	d107      	bne.n	80112ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80112da:	4b5a      	ldr	r3, [pc, #360]	@ (8011444 <HAL_RCC_ClockConfig+0x1f0>)
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d121      	bne.n	801132a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80112e6:	2301      	movs	r3, #1
 80112e8:	e0a6      	b.n	8011438 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	685b      	ldr	r3, [r3, #4]
 80112ee:	2b02      	cmp	r3, #2
 80112f0:	d107      	bne.n	8011302 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80112f2:	4b54      	ldr	r3, [pc, #336]	@ (8011444 <HAL_RCC_ClockConfig+0x1f0>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d115      	bne.n	801132a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80112fe:	2301      	movs	r3, #1
 8011300:	e09a      	b.n	8011438 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	685b      	ldr	r3, [r3, #4]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d107      	bne.n	801131a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801130a:	4b4e      	ldr	r3, [pc, #312]	@ (8011444 <HAL_RCC_ClockConfig+0x1f0>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	f003 0302 	and.w	r3, r3, #2
 8011312:	2b00      	cmp	r3, #0
 8011314:	d109      	bne.n	801132a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8011316:	2301      	movs	r3, #1
 8011318:	e08e      	b.n	8011438 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801131a:	4b4a      	ldr	r3, [pc, #296]	@ (8011444 <HAL_RCC_ClockConfig+0x1f0>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8011322:	2b00      	cmp	r3, #0
 8011324:	d101      	bne.n	801132a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8011326:	2301      	movs	r3, #1
 8011328:	e086      	b.n	8011438 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801132a:	4b46      	ldr	r3, [pc, #280]	@ (8011444 <HAL_RCC_ClockConfig+0x1f0>)
 801132c:	689b      	ldr	r3, [r3, #8]
 801132e:	f023 0203 	bic.w	r2, r3, #3
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	685b      	ldr	r3, [r3, #4]
 8011336:	4943      	ldr	r1, [pc, #268]	@ (8011444 <HAL_RCC_ClockConfig+0x1f0>)
 8011338:	4313      	orrs	r3, r2
 801133a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801133c:	f7fa fe9a 	bl	800c074 <HAL_GetTick>
 8011340:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011342:	e00a      	b.n	801135a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011344:	f7fa fe96 	bl	800c074 <HAL_GetTick>
 8011348:	4602      	mov	r2, r0
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	1ad3      	subs	r3, r2, r3
 801134e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011352:	4293      	cmp	r3, r2
 8011354:	d901      	bls.n	801135a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8011356:	2303      	movs	r3, #3
 8011358:	e06e      	b.n	8011438 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801135a:	4b3a      	ldr	r3, [pc, #232]	@ (8011444 <HAL_RCC_ClockConfig+0x1f0>)
 801135c:	689b      	ldr	r3, [r3, #8]
 801135e:	f003 020c 	and.w	r2, r3, #12
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	685b      	ldr	r3, [r3, #4]
 8011366:	009b      	lsls	r3, r3, #2
 8011368:	429a      	cmp	r2, r3
 801136a:	d1eb      	bne.n	8011344 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	f003 0302 	and.w	r3, r3, #2
 8011374:	2b00      	cmp	r3, #0
 8011376:	d010      	beq.n	801139a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	689a      	ldr	r2, [r3, #8]
 801137c:	4b31      	ldr	r3, [pc, #196]	@ (8011444 <HAL_RCC_ClockConfig+0x1f0>)
 801137e:	689b      	ldr	r3, [r3, #8]
 8011380:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011384:	429a      	cmp	r2, r3
 8011386:	d208      	bcs.n	801139a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011388:	4b2e      	ldr	r3, [pc, #184]	@ (8011444 <HAL_RCC_ClockConfig+0x1f0>)
 801138a:	689b      	ldr	r3, [r3, #8]
 801138c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	689b      	ldr	r3, [r3, #8]
 8011394:	492b      	ldr	r1, [pc, #172]	@ (8011444 <HAL_RCC_ClockConfig+0x1f0>)
 8011396:	4313      	orrs	r3, r2
 8011398:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801139a:	4b29      	ldr	r3, [pc, #164]	@ (8011440 <HAL_RCC_ClockConfig+0x1ec>)
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	f003 0307 	and.w	r3, r3, #7
 80113a2:	683a      	ldr	r2, [r7, #0]
 80113a4:	429a      	cmp	r2, r3
 80113a6:	d210      	bcs.n	80113ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80113a8:	4b25      	ldr	r3, [pc, #148]	@ (8011440 <HAL_RCC_ClockConfig+0x1ec>)
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	f023 0207 	bic.w	r2, r3, #7
 80113b0:	4923      	ldr	r1, [pc, #140]	@ (8011440 <HAL_RCC_ClockConfig+0x1ec>)
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	4313      	orrs	r3, r2
 80113b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80113b8:	4b21      	ldr	r3, [pc, #132]	@ (8011440 <HAL_RCC_ClockConfig+0x1ec>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	f003 0307 	and.w	r3, r3, #7
 80113c0:	683a      	ldr	r2, [r7, #0]
 80113c2:	429a      	cmp	r2, r3
 80113c4:	d001      	beq.n	80113ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80113c6:	2301      	movs	r3, #1
 80113c8:	e036      	b.n	8011438 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	f003 0304 	and.w	r3, r3, #4
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d008      	beq.n	80113e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80113d6:	4b1b      	ldr	r3, [pc, #108]	@ (8011444 <HAL_RCC_ClockConfig+0x1f0>)
 80113d8:	689b      	ldr	r3, [r3, #8]
 80113da:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	68db      	ldr	r3, [r3, #12]
 80113e2:	4918      	ldr	r1, [pc, #96]	@ (8011444 <HAL_RCC_ClockConfig+0x1f0>)
 80113e4:	4313      	orrs	r3, r2
 80113e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	f003 0308 	and.w	r3, r3, #8
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d009      	beq.n	8011408 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80113f4:	4b13      	ldr	r3, [pc, #76]	@ (8011444 <HAL_RCC_ClockConfig+0x1f0>)
 80113f6:	689b      	ldr	r3, [r3, #8]
 80113f8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	691b      	ldr	r3, [r3, #16]
 8011400:	00db      	lsls	r3, r3, #3
 8011402:	4910      	ldr	r1, [pc, #64]	@ (8011444 <HAL_RCC_ClockConfig+0x1f0>)
 8011404:	4313      	orrs	r3, r2
 8011406:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8011408:	f000 f824 	bl	8011454 <HAL_RCC_GetSysClockFreq>
 801140c:	4602      	mov	r2, r0
 801140e:	4b0d      	ldr	r3, [pc, #52]	@ (8011444 <HAL_RCC_ClockConfig+0x1f0>)
 8011410:	689b      	ldr	r3, [r3, #8]
 8011412:	091b      	lsrs	r3, r3, #4
 8011414:	f003 030f 	and.w	r3, r3, #15
 8011418:	490b      	ldr	r1, [pc, #44]	@ (8011448 <HAL_RCC_ClockConfig+0x1f4>)
 801141a:	5ccb      	ldrb	r3, [r1, r3]
 801141c:	f003 031f 	and.w	r3, r3, #31
 8011420:	fa22 f303 	lsr.w	r3, r2, r3
 8011424:	4a09      	ldr	r2, [pc, #36]	@ (801144c <HAL_RCC_ClockConfig+0x1f8>)
 8011426:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8011428:	4b09      	ldr	r3, [pc, #36]	@ (8011450 <HAL_RCC_ClockConfig+0x1fc>)
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	4618      	mov	r0, r3
 801142e:	f7fa fdd1 	bl	800bfd4 <HAL_InitTick>
 8011432:	4603      	mov	r3, r0
 8011434:	72fb      	strb	r3, [r7, #11]

  return status;
 8011436:	7afb      	ldrb	r3, [r7, #11]
}
 8011438:	4618      	mov	r0, r3
 801143a:	3710      	adds	r7, #16
 801143c:	46bd      	mov	sp, r7
 801143e:	bd80      	pop	{r7, pc}
 8011440:	40022000 	.word	0x40022000
 8011444:	40021000 	.word	0x40021000
 8011448:	080192c8 	.word	0x080192c8
 801144c:	20000000 	.word	0x20000000
 8011450:	2000000c 	.word	0x2000000c

08011454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011454:	b480      	push	{r7}
 8011456:	b089      	sub	sp, #36	@ 0x24
 8011458:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 801145a:	2300      	movs	r3, #0
 801145c:	61fb      	str	r3, [r7, #28]
 801145e:	2300      	movs	r3, #0
 8011460:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011462:	4b3e      	ldr	r3, [pc, #248]	@ (801155c <HAL_RCC_GetSysClockFreq+0x108>)
 8011464:	689b      	ldr	r3, [r3, #8]
 8011466:	f003 030c 	and.w	r3, r3, #12
 801146a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 801146c:	4b3b      	ldr	r3, [pc, #236]	@ (801155c <HAL_RCC_GetSysClockFreq+0x108>)
 801146e:	68db      	ldr	r3, [r3, #12]
 8011470:	f003 0303 	and.w	r3, r3, #3
 8011474:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8011476:	693b      	ldr	r3, [r7, #16]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d005      	beq.n	8011488 <HAL_RCC_GetSysClockFreq+0x34>
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	2b0c      	cmp	r3, #12
 8011480:	d121      	bne.n	80114c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	2b01      	cmp	r3, #1
 8011486:	d11e      	bne.n	80114c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8011488:	4b34      	ldr	r3, [pc, #208]	@ (801155c <HAL_RCC_GetSysClockFreq+0x108>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	f003 0308 	and.w	r3, r3, #8
 8011490:	2b00      	cmp	r3, #0
 8011492:	d107      	bne.n	80114a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8011494:	4b31      	ldr	r3, [pc, #196]	@ (801155c <HAL_RCC_GetSysClockFreq+0x108>)
 8011496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801149a:	0a1b      	lsrs	r3, r3, #8
 801149c:	f003 030f 	and.w	r3, r3, #15
 80114a0:	61fb      	str	r3, [r7, #28]
 80114a2:	e005      	b.n	80114b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80114a4:	4b2d      	ldr	r3, [pc, #180]	@ (801155c <HAL_RCC_GetSysClockFreq+0x108>)
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	091b      	lsrs	r3, r3, #4
 80114aa:	f003 030f 	and.w	r3, r3, #15
 80114ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80114b0:	4a2b      	ldr	r2, [pc, #172]	@ (8011560 <HAL_RCC_GetSysClockFreq+0x10c>)
 80114b2:	69fb      	ldr	r3, [r7, #28]
 80114b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80114b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80114ba:	693b      	ldr	r3, [r7, #16]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d10d      	bne.n	80114dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80114c0:	69fb      	ldr	r3, [r7, #28]
 80114c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80114c4:	e00a      	b.n	80114dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80114c6:	693b      	ldr	r3, [r7, #16]
 80114c8:	2b04      	cmp	r3, #4
 80114ca:	d102      	bne.n	80114d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80114cc:	4b25      	ldr	r3, [pc, #148]	@ (8011564 <HAL_RCC_GetSysClockFreq+0x110>)
 80114ce:	61bb      	str	r3, [r7, #24]
 80114d0:	e004      	b.n	80114dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80114d2:	693b      	ldr	r3, [r7, #16]
 80114d4:	2b08      	cmp	r3, #8
 80114d6:	d101      	bne.n	80114dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80114d8:	4b23      	ldr	r3, [pc, #140]	@ (8011568 <HAL_RCC_GetSysClockFreq+0x114>)
 80114da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80114dc:	693b      	ldr	r3, [r7, #16]
 80114de:	2b0c      	cmp	r3, #12
 80114e0:	d134      	bne.n	801154c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80114e2:	4b1e      	ldr	r3, [pc, #120]	@ (801155c <HAL_RCC_GetSysClockFreq+0x108>)
 80114e4:	68db      	ldr	r3, [r3, #12]
 80114e6:	f003 0303 	and.w	r3, r3, #3
 80114ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	2b02      	cmp	r3, #2
 80114f0:	d003      	beq.n	80114fa <HAL_RCC_GetSysClockFreq+0xa6>
 80114f2:	68bb      	ldr	r3, [r7, #8]
 80114f4:	2b03      	cmp	r3, #3
 80114f6:	d003      	beq.n	8011500 <HAL_RCC_GetSysClockFreq+0xac>
 80114f8:	e005      	b.n	8011506 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80114fa:	4b1a      	ldr	r3, [pc, #104]	@ (8011564 <HAL_RCC_GetSysClockFreq+0x110>)
 80114fc:	617b      	str	r3, [r7, #20]
      break;
 80114fe:	e005      	b.n	801150c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8011500:	4b19      	ldr	r3, [pc, #100]	@ (8011568 <HAL_RCC_GetSysClockFreq+0x114>)
 8011502:	617b      	str	r3, [r7, #20]
      break;
 8011504:	e002      	b.n	801150c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8011506:	69fb      	ldr	r3, [r7, #28]
 8011508:	617b      	str	r3, [r7, #20]
      break;
 801150a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801150c:	4b13      	ldr	r3, [pc, #76]	@ (801155c <HAL_RCC_GetSysClockFreq+0x108>)
 801150e:	68db      	ldr	r3, [r3, #12]
 8011510:	091b      	lsrs	r3, r3, #4
 8011512:	f003 0307 	and.w	r3, r3, #7
 8011516:	3301      	adds	r3, #1
 8011518:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 801151a:	4b10      	ldr	r3, [pc, #64]	@ (801155c <HAL_RCC_GetSysClockFreq+0x108>)
 801151c:	68db      	ldr	r3, [r3, #12]
 801151e:	0a1b      	lsrs	r3, r3, #8
 8011520:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011524:	697a      	ldr	r2, [r7, #20]
 8011526:	fb03 f202 	mul.w	r2, r3, r2
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011530:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8011532:	4b0a      	ldr	r3, [pc, #40]	@ (801155c <HAL_RCC_GetSysClockFreq+0x108>)
 8011534:	68db      	ldr	r3, [r3, #12]
 8011536:	0e5b      	lsrs	r3, r3, #25
 8011538:	f003 0303 	and.w	r3, r3, #3
 801153c:	3301      	adds	r3, #1
 801153e:	005b      	lsls	r3, r3, #1
 8011540:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8011542:	697a      	ldr	r2, [r7, #20]
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	fbb2 f3f3 	udiv	r3, r2, r3
 801154a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 801154c:	69bb      	ldr	r3, [r7, #24]
}
 801154e:	4618      	mov	r0, r3
 8011550:	3724      	adds	r7, #36	@ 0x24
 8011552:	46bd      	mov	sp, r7
 8011554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011558:	4770      	bx	lr
 801155a:	bf00      	nop
 801155c:	40021000 	.word	0x40021000
 8011560:	080192e0 	.word	0x080192e0
 8011564:	00f42400 	.word	0x00f42400
 8011568:	007a1200 	.word	0x007a1200

0801156c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801156c:	b480      	push	{r7}
 801156e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8011570:	4b03      	ldr	r3, [pc, #12]	@ (8011580 <HAL_RCC_GetHCLKFreq+0x14>)
 8011572:	681b      	ldr	r3, [r3, #0]
}
 8011574:	4618      	mov	r0, r3
 8011576:	46bd      	mov	sp, r7
 8011578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157c:	4770      	bx	lr
 801157e:	bf00      	nop
 8011580:	20000000 	.word	0x20000000

08011584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8011588:	f7ff fff0 	bl	801156c <HAL_RCC_GetHCLKFreq>
 801158c:	4602      	mov	r2, r0
 801158e:	4b06      	ldr	r3, [pc, #24]	@ (80115a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011590:	689b      	ldr	r3, [r3, #8]
 8011592:	0a1b      	lsrs	r3, r3, #8
 8011594:	f003 0307 	and.w	r3, r3, #7
 8011598:	4904      	ldr	r1, [pc, #16]	@ (80115ac <HAL_RCC_GetPCLK1Freq+0x28>)
 801159a:	5ccb      	ldrb	r3, [r1, r3]
 801159c:	f003 031f 	and.w	r3, r3, #31
 80115a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80115a4:	4618      	mov	r0, r3
 80115a6:	bd80      	pop	{r7, pc}
 80115a8:	40021000 	.word	0x40021000
 80115ac:	080192d8 	.word	0x080192d8

080115b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80115b4:	f7ff ffda 	bl	801156c <HAL_RCC_GetHCLKFreq>
 80115b8:	4602      	mov	r2, r0
 80115ba:	4b06      	ldr	r3, [pc, #24]	@ (80115d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80115bc:	689b      	ldr	r3, [r3, #8]
 80115be:	0adb      	lsrs	r3, r3, #11
 80115c0:	f003 0307 	and.w	r3, r3, #7
 80115c4:	4904      	ldr	r1, [pc, #16]	@ (80115d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80115c6:	5ccb      	ldrb	r3, [r1, r3]
 80115c8:	f003 031f 	and.w	r3, r3, #31
 80115cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80115d0:	4618      	mov	r0, r3
 80115d2:	bd80      	pop	{r7, pc}
 80115d4:	40021000 	.word	0x40021000
 80115d8:	080192d8 	.word	0x080192d8

080115dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	b086      	sub	sp, #24
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80115e4:	2300      	movs	r3, #0
 80115e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80115e8:	4b2a      	ldr	r3, [pc, #168]	@ (8011694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80115ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80115ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d003      	beq.n	80115fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80115f4:	f7fe fd8c 	bl	8010110 <HAL_PWREx_GetVoltageRange>
 80115f8:	6178      	str	r0, [r7, #20]
 80115fa:	e014      	b.n	8011626 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80115fc:	4b25      	ldr	r3, [pc, #148]	@ (8011694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80115fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011600:	4a24      	ldr	r2, [pc, #144]	@ (8011694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8011602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011606:	6593      	str	r3, [r2, #88]	@ 0x58
 8011608:	4b22      	ldr	r3, [pc, #136]	@ (8011694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801160a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801160c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011610:	60fb      	str	r3, [r7, #12]
 8011612:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8011614:	f7fe fd7c 	bl	8010110 <HAL_PWREx_GetVoltageRange>
 8011618:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 801161a:	4b1e      	ldr	r3, [pc, #120]	@ (8011694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801161c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801161e:	4a1d      	ldr	r2, [pc, #116]	@ (8011694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8011620:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011624:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8011626:	697b      	ldr	r3, [r7, #20]
 8011628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801162c:	d10b      	bne.n	8011646 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	2b80      	cmp	r3, #128	@ 0x80
 8011632:	d919      	bls.n	8011668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	2ba0      	cmp	r3, #160	@ 0xa0
 8011638:	d902      	bls.n	8011640 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801163a:	2302      	movs	r3, #2
 801163c:	613b      	str	r3, [r7, #16]
 801163e:	e013      	b.n	8011668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8011640:	2301      	movs	r3, #1
 8011642:	613b      	str	r3, [r7, #16]
 8011644:	e010      	b.n	8011668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	2b80      	cmp	r3, #128	@ 0x80
 801164a:	d902      	bls.n	8011652 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 801164c:	2303      	movs	r3, #3
 801164e:	613b      	str	r3, [r7, #16]
 8011650:	e00a      	b.n	8011668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	2b80      	cmp	r3, #128	@ 0x80
 8011656:	d102      	bne.n	801165e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8011658:	2302      	movs	r3, #2
 801165a:	613b      	str	r3, [r7, #16]
 801165c:	e004      	b.n	8011668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2b70      	cmp	r3, #112	@ 0x70
 8011662:	d101      	bne.n	8011668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8011664:	2301      	movs	r3, #1
 8011666:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8011668:	4b0b      	ldr	r3, [pc, #44]	@ (8011698 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	f023 0207 	bic.w	r2, r3, #7
 8011670:	4909      	ldr	r1, [pc, #36]	@ (8011698 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8011672:	693b      	ldr	r3, [r7, #16]
 8011674:	4313      	orrs	r3, r2
 8011676:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8011678:	4b07      	ldr	r3, [pc, #28]	@ (8011698 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	f003 0307 	and.w	r3, r3, #7
 8011680:	693a      	ldr	r2, [r7, #16]
 8011682:	429a      	cmp	r2, r3
 8011684:	d001      	beq.n	801168a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8011686:	2301      	movs	r3, #1
 8011688:	e000      	b.n	801168c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 801168a:	2300      	movs	r3, #0
}
 801168c:	4618      	mov	r0, r3
 801168e:	3718      	adds	r7, #24
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}
 8011694:	40021000 	.word	0x40021000
 8011698:	40022000 	.word	0x40022000

0801169c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b086      	sub	sp, #24
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80116a4:	2300      	movs	r3, #0
 80116a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80116a8:	2300      	movs	r3, #0
 80116aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d041      	beq.n	801173c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80116bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80116c0:	d02a      	beq.n	8011718 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80116c2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80116c6:	d824      	bhi.n	8011712 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80116c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80116cc:	d008      	beq.n	80116e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80116ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80116d2:	d81e      	bhi.n	8011712 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d00a      	beq.n	80116ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80116d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80116dc:	d010      	beq.n	8011700 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80116de:	e018      	b.n	8011712 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80116e0:	4b86      	ldr	r3, [pc, #536]	@ (80118fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80116e2:	68db      	ldr	r3, [r3, #12]
 80116e4:	4a85      	ldr	r2, [pc, #532]	@ (80118fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80116e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80116ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80116ec:	e015      	b.n	801171a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	3304      	adds	r3, #4
 80116f2:	2100      	movs	r1, #0
 80116f4:	4618      	mov	r0, r3
 80116f6:	f000 fabb 	bl	8011c70 <RCCEx_PLLSAI1_Config>
 80116fa:	4603      	mov	r3, r0
 80116fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80116fe:	e00c      	b.n	801171a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	3320      	adds	r3, #32
 8011704:	2100      	movs	r1, #0
 8011706:	4618      	mov	r0, r3
 8011708:	f000 fba6 	bl	8011e58 <RCCEx_PLLSAI2_Config>
 801170c:	4603      	mov	r3, r0
 801170e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8011710:	e003      	b.n	801171a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011712:	2301      	movs	r3, #1
 8011714:	74fb      	strb	r3, [r7, #19]
      break;
 8011716:	e000      	b.n	801171a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8011718:	bf00      	nop
    }

    if(ret == HAL_OK)
 801171a:	7cfb      	ldrb	r3, [r7, #19]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d10b      	bne.n	8011738 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8011720:	4b76      	ldr	r3, [pc, #472]	@ (80118fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011726:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801172e:	4973      	ldr	r1, [pc, #460]	@ (80118fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011730:	4313      	orrs	r3, r2
 8011732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8011736:	e001      	b.n	801173c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011738:	7cfb      	ldrb	r3, [r7, #19]
 801173a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8011744:	2b00      	cmp	r3, #0
 8011746:	d041      	beq.n	80117cc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801174c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011750:	d02a      	beq.n	80117a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8011752:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011756:	d824      	bhi.n	80117a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8011758:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801175c:	d008      	beq.n	8011770 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801175e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011762:	d81e      	bhi.n	80117a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8011764:	2b00      	cmp	r3, #0
 8011766:	d00a      	beq.n	801177e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8011768:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801176c:	d010      	beq.n	8011790 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 801176e:	e018      	b.n	80117a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8011770:	4b62      	ldr	r3, [pc, #392]	@ (80118fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011772:	68db      	ldr	r3, [r3, #12]
 8011774:	4a61      	ldr	r2, [pc, #388]	@ (80118fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011776:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801177a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801177c:	e015      	b.n	80117aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	3304      	adds	r3, #4
 8011782:	2100      	movs	r1, #0
 8011784:	4618      	mov	r0, r3
 8011786:	f000 fa73 	bl	8011c70 <RCCEx_PLLSAI1_Config>
 801178a:	4603      	mov	r3, r0
 801178c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801178e:	e00c      	b.n	80117aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	3320      	adds	r3, #32
 8011794:	2100      	movs	r1, #0
 8011796:	4618      	mov	r0, r3
 8011798:	f000 fb5e 	bl	8011e58 <RCCEx_PLLSAI2_Config>
 801179c:	4603      	mov	r3, r0
 801179e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80117a0:	e003      	b.n	80117aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80117a2:	2301      	movs	r3, #1
 80117a4:	74fb      	strb	r3, [r7, #19]
      break;
 80117a6:	e000      	b.n	80117aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80117a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80117aa:	7cfb      	ldrb	r3, [r7, #19]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d10b      	bne.n	80117c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80117b0:	4b52      	ldr	r3, [pc, #328]	@ (80118fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80117b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80117b6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80117be:	494f      	ldr	r1, [pc, #316]	@ (80118fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80117c0:	4313      	orrs	r3, r2
 80117c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80117c6:	e001      	b.n	80117cc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80117c8:	7cfb      	ldrb	r3, [r7, #19]
 80117ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	f000 80a0 	beq.w	801191a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80117da:	2300      	movs	r3, #0
 80117dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80117de:	4b47      	ldr	r3, [pc, #284]	@ (80118fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80117e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80117e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d101      	bne.n	80117ee <HAL_RCCEx_PeriphCLKConfig+0x152>
 80117ea:	2301      	movs	r3, #1
 80117ec:	e000      	b.n	80117f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80117ee:	2300      	movs	r3, #0
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d00d      	beq.n	8011810 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80117f4:	4b41      	ldr	r3, [pc, #260]	@ (80118fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80117f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80117f8:	4a40      	ldr	r2, [pc, #256]	@ (80118fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80117fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80117fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8011800:	4b3e      	ldr	r3, [pc, #248]	@ (80118fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011808:	60bb      	str	r3, [r7, #8]
 801180a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801180c:	2301      	movs	r3, #1
 801180e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011810:	4b3b      	ldr	r3, [pc, #236]	@ (8011900 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	4a3a      	ldr	r2, [pc, #232]	@ (8011900 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8011816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801181a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801181c:	f7fa fc2a 	bl	800c074 <HAL_GetTick>
 8011820:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8011822:	e009      	b.n	8011838 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011824:	f7fa fc26 	bl	800c074 <HAL_GetTick>
 8011828:	4602      	mov	r2, r0
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	1ad3      	subs	r3, r2, r3
 801182e:	2b02      	cmp	r3, #2
 8011830:	d902      	bls.n	8011838 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8011832:	2303      	movs	r3, #3
 8011834:	74fb      	strb	r3, [r7, #19]
        break;
 8011836:	e005      	b.n	8011844 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8011838:	4b31      	ldr	r3, [pc, #196]	@ (8011900 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011840:	2b00      	cmp	r3, #0
 8011842:	d0ef      	beq.n	8011824 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8011844:	7cfb      	ldrb	r3, [r7, #19]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d15c      	bne.n	8011904 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801184a:	4b2c      	ldr	r3, [pc, #176]	@ (80118fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801184c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011850:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011854:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8011856:	697b      	ldr	r3, [r7, #20]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d01f      	beq.n	801189c <HAL_RCCEx_PeriphCLKConfig+0x200>
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011862:	697a      	ldr	r2, [r7, #20]
 8011864:	429a      	cmp	r2, r3
 8011866:	d019      	beq.n	801189c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8011868:	4b24      	ldr	r3, [pc, #144]	@ (80118fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801186a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801186e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011872:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8011874:	4b21      	ldr	r3, [pc, #132]	@ (80118fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801187a:	4a20      	ldr	r2, [pc, #128]	@ (80118fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801187c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8011884:	4b1d      	ldr	r3, [pc, #116]	@ (80118fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801188a:	4a1c      	ldr	r2, [pc, #112]	@ (80118fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801188c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8011894:	4a19      	ldr	r2, [pc, #100]	@ (80118fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801189c:	697b      	ldr	r3, [r7, #20]
 801189e:	f003 0301 	and.w	r3, r3, #1
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d016      	beq.n	80118d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80118a6:	f7fa fbe5 	bl	800c074 <HAL_GetTick>
 80118aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80118ac:	e00b      	b.n	80118c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80118ae:	f7fa fbe1 	bl	800c074 <HAL_GetTick>
 80118b2:	4602      	mov	r2, r0
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	1ad3      	subs	r3, r2, r3
 80118b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80118bc:	4293      	cmp	r3, r2
 80118be:	d902      	bls.n	80118c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80118c0:	2303      	movs	r3, #3
 80118c2:	74fb      	strb	r3, [r7, #19]
            break;
 80118c4:	e006      	b.n	80118d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80118c6:	4b0d      	ldr	r3, [pc, #52]	@ (80118fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80118c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80118cc:	f003 0302 	and.w	r3, r3, #2
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d0ec      	beq.n	80118ae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80118d4:	7cfb      	ldrb	r3, [r7, #19]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d10c      	bne.n	80118f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80118da:	4b08      	ldr	r3, [pc, #32]	@ (80118fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80118dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80118e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80118ea:	4904      	ldr	r1, [pc, #16]	@ (80118fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80118ec:	4313      	orrs	r3, r2
 80118ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80118f2:	e009      	b.n	8011908 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80118f4:	7cfb      	ldrb	r3, [r7, #19]
 80118f6:	74bb      	strb	r3, [r7, #18]
 80118f8:	e006      	b.n	8011908 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80118fa:	bf00      	nop
 80118fc:	40021000 	.word	0x40021000
 8011900:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011904:	7cfb      	ldrb	r3, [r7, #19]
 8011906:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011908:	7c7b      	ldrb	r3, [r7, #17]
 801190a:	2b01      	cmp	r3, #1
 801190c:	d105      	bne.n	801191a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801190e:	4b9e      	ldr	r3, [pc, #632]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011912:	4a9d      	ldr	r2, [pc, #628]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011914:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011918:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	f003 0301 	and.w	r3, r3, #1
 8011922:	2b00      	cmp	r3, #0
 8011924:	d00a      	beq.n	801193c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011926:	4b98      	ldr	r3, [pc, #608]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801192c:	f023 0203 	bic.w	r2, r3, #3
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011934:	4994      	ldr	r1, [pc, #592]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011936:	4313      	orrs	r3, r2
 8011938:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	f003 0302 	and.w	r3, r3, #2
 8011944:	2b00      	cmp	r3, #0
 8011946:	d00a      	beq.n	801195e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011948:	4b8f      	ldr	r3, [pc, #572]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801194a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801194e:	f023 020c 	bic.w	r2, r3, #12
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011956:	498c      	ldr	r1, [pc, #560]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011958:	4313      	orrs	r3, r2
 801195a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	f003 0304 	and.w	r3, r3, #4
 8011966:	2b00      	cmp	r3, #0
 8011968:	d00a      	beq.n	8011980 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801196a:	4b87      	ldr	r3, [pc, #540]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801196c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011970:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011978:	4983      	ldr	r1, [pc, #524]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801197a:	4313      	orrs	r3, r2
 801197c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	f003 0308 	and.w	r3, r3, #8
 8011988:	2b00      	cmp	r3, #0
 801198a:	d00a      	beq.n	80119a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801198c:	4b7e      	ldr	r3, [pc, #504]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801198e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011992:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801199a:	497b      	ldr	r1, [pc, #492]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801199c:	4313      	orrs	r3, r2
 801199e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	f003 0310 	and.w	r3, r3, #16
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d00a      	beq.n	80119c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80119ae:	4b76      	ldr	r3, [pc, #472]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80119b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80119b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80119bc:	4972      	ldr	r1, [pc, #456]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80119be:	4313      	orrs	r3, r2
 80119c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	f003 0320 	and.w	r3, r3, #32
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d00a      	beq.n	80119e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80119d0:	4b6d      	ldr	r3, [pc, #436]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80119d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80119d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80119de:	496a      	ldr	r1, [pc, #424]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80119e0:	4313      	orrs	r3, r2
 80119e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d00a      	beq.n	8011a08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80119f2:	4b65      	ldr	r3, [pc, #404]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80119f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80119f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011a00:	4961      	ldr	r1, [pc, #388]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011a02:	4313      	orrs	r3, r2
 8011a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d00a      	beq.n	8011a2a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8011a14:	4b5c      	ldr	r3, [pc, #368]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011a1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011a22:	4959      	ldr	r1, [pc, #356]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011a24:	4313      	orrs	r3, r2
 8011a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d00a      	beq.n	8011a4c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011a36:	4b54      	ldr	r3, [pc, #336]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011a3c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011a44:	4950      	ldr	r1, [pc, #320]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011a46:	4313      	orrs	r3, r2
 8011a48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d00a      	beq.n	8011a6e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8011a58:	4b4b      	ldr	r3, [pc, #300]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011a5e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011a66:	4948      	ldr	r1, [pc, #288]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011a68:	4313      	orrs	r3, r2
 8011a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d00a      	beq.n	8011a90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8011a7a:	4b43      	ldr	r3, [pc, #268]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011a80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011a88:	493f      	ldr	r1, [pc, #252]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011a8a:	4313      	orrs	r3, r2
 8011a8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d028      	beq.n	8011aee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8011a9c:	4b3a      	ldr	r3, [pc, #232]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011aa2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011aaa:	4937      	ldr	r1, [pc, #220]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011aac:	4313      	orrs	r3, r2
 8011aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ab6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011aba:	d106      	bne.n	8011aca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011abc:	4b32      	ldr	r3, [pc, #200]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011abe:	68db      	ldr	r3, [r3, #12]
 8011ac0:	4a31      	ldr	r2, [pc, #196]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011ac2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011ac6:	60d3      	str	r3, [r2, #12]
 8011ac8:	e011      	b.n	8011aee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ace:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011ad2:	d10c      	bne.n	8011aee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	3304      	adds	r3, #4
 8011ad8:	2101      	movs	r1, #1
 8011ada:	4618      	mov	r0, r3
 8011adc:	f000 f8c8 	bl	8011c70 <RCCEx_PLLSAI1_Config>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8011ae4:	7cfb      	ldrb	r3, [r7, #19]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d001      	beq.n	8011aee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8011aea:	7cfb      	ldrb	r3, [r7, #19]
 8011aec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d028      	beq.n	8011b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8011afa:	4b23      	ldr	r3, [pc, #140]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011b00:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011b08:	491f      	ldr	r1, [pc, #124]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011b0a:	4313      	orrs	r3, r2
 8011b0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011b14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011b18:	d106      	bne.n	8011b28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011b1c:	68db      	ldr	r3, [r3, #12]
 8011b1e:	4a1a      	ldr	r2, [pc, #104]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011b20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011b24:	60d3      	str	r3, [r2, #12]
 8011b26:	e011      	b.n	8011b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011b2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011b30:	d10c      	bne.n	8011b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	3304      	adds	r3, #4
 8011b36:	2101      	movs	r1, #1
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f000 f899 	bl	8011c70 <RCCEx_PLLSAI1_Config>
 8011b3e:	4603      	mov	r3, r0
 8011b40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8011b42:	7cfb      	ldrb	r3, [r7, #19]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d001      	beq.n	8011b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8011b48:	7cfb      	ldrb	r3, [r7, #19]
 8011b4a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d02b      	beq.n	8011bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8011b58:	4b0b      	ldr	r3, [pc, #44]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011b5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011b66:	4908      	ldr	r1, [pc, #32]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011b68:	4313      	orrs	r3, r2
 8011b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011b72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011b76:	d109      	bne.n	8011b8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011b78:	4b03      	ldr	r3, [pc, #12]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011b7a:	68db      	ldr	r3, [r3, #12]
 8011b7c:	4a02      	ldr	r2, [pc, #8]	@ (8011b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8011b7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011b82:	60d3      	str	r3, [r2, #12]
 8011b84:	e014      	b.n	8011bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8011b86:	bf00      	nop
 8011b88:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011b90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011b94:	d10c      	bne.n	8011bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	3304      	adds	r3, #4
 8011b9a:	2101      	movs	r1, #1
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f000 f867 	bl	8011c70 <RCCEx_PLLSAI1_Config>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8011ba6:	7cfb      	ldrb	r3, [r7, #19]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d001      	beq.n	8011bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8011bac:	7cfb      	ldrb	r3, [r7, #19]
 8011bae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d02f      	beq.n	8011c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8011bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8011c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8011bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011bc2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011bca:	4928      	ldr	r1, [pc, #160]	@ (8011c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8011bcc:	4313      	orrs	r3, r2
 8011bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011bd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011bda:	d10d      	bne.n	8011bf8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	3304      	adds	r3, #4
 8011be0:	2102      	movs	r1, #2
 8011be2:	4618      	mov	r0, r3
 8011be4:	f000 f844 	bl	8011c70 <RCCEx_PLLSAI1_Config>
 8011be8:	4603      	mov	r3, r0
 8011bea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8011bec:	7cfb      	ldrb	r3, [r7, #19]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d014      	beq.n	8011c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8011bf2:	7cfb      	ldrb	r3, [r7, #19]
 8011bf4:	74bb      	strb	r3, [r7, #18]
 8011bf6:	e011      	b.n	8011c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011bfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011c00:	d10c      	bne.n	8011c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	3320      	adds	r3, #32
 8011c06:	2102      	movs	r1, #2
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f000 f925 	bl	8011e58 <RCCEx_PLLSAI2_Config>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8011c12:	7cfb      	ldrb	r3, [r7, #19]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d001      	beq.n	8011c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8011c18:	7cfb      	ldrb	r3, [r7, #19]
 8011c1a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d00a      	beq.n	8011c3e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8011c28:	4b10      	ldr	r3, [pc, #64]	@ (8011c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8011c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011c2e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011c36:	490d      	ldr	r1, [pc, #52]	@ (8011c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8011c38:	4313      	orrs	r3, r2
 8011c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d00b      	beq.n	8011c62 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8011c4a:	4b08      	ldr	r3, [pc, #32]	@ (8011c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8011c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011c50:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011c5a:	4904      	ldr	r1, [pc, #16]	@ (8011c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8011c5c:	4313      	orrs	r3, r2
 8011c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8011c62:	7cbb      	ldrb	r3, [r7, #18]
}
 8011c64:	4618      	mov	r0, r3
 8011c66:	3718      	adds	r7, #24
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}
 8011c6c:	40021000 	.word	0x40021000

08011c70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b084      	sub	sp, #16
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
 8011c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8011c7e:	4b75      	ldr	r3, [pc, #468]	@ (8011e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011c80:	68db      	ldr	r3, [r3, #12]
 8011c82:	f003 0303 	and.w	r3, r3, #3
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d018      	beq.n	8011cbc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8011c8a:	4b72      	ldr	r3, [pc, #456]	@ (8011e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011c8c:	68db      	ldr	r3, [r3, #12]
 8011c8e:	f003 0203 	and.w	r2, r3, #3
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	429a      	cmp	r2, r3
 8011c98:	d10d      	bne.n	8011cb6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	681b      	ldr	r3, [r3, #0]
       ||
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d009      	beq.n	8011cb6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8011ca2:	4b6c      	ldr	r3, [pc, #432]	@ (8011e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011ca4:	68db      	ldr	r3, [r3, #12]
 8011ca6:	091b      	lsrs	r3, r3, #4
 8011ca8:	f003 0307 	and.w	r3, r3, #7
 8011cac:	1c5a      	adds	r2, r3, #1
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	685b      	ldr	r3, [r3, #4]
       ||
 8011cb2:	429a      	cmp	r2, r3
 8011cb4:	d047      	beq.n	8011d46 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8011cb6:	2301      	movs	r3, #1
 8011cb8:	73fb      	strb	r3, [r7, #15]
 8011cba:	e044      	b.n	8011d46 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	2b03      	cmp	r3, #3
 8011cc2:	d018      	beq.n	8011cf6 <RCCEx_PLLSAI1_Config+0x86>
 8011cc4:	2b03      	cmp	r3, #3
 8011cc6:	d825      	bhi.n	8011d14 <RCCEx_PLLSAI1_Config+0xa4>
 8011cc8:	2b01      	cmp	r3, #1
 8011cca:	d002      	beq.n	8011cd2 <RCCEx_PLLSAI1_Config+0x62>
 8011ccc:	2b02      	cmp	r3, #2
 8011cce:	d009      	beq.n	8011ce4 <RCCEx_PLLSAI1_Config+0x74>
 8011cd0:	e020      	b.n	8011d14 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8011cd2:	4b60      	ldr	r3, [pc, #384]	@ (8011e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	f003 0302 	and.w	r3, r3, #2
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d11d      	bne.n	8011d1a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8011cde:	2301      	movs	r3, #1
 8011ce0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011ce2:	e01a      	b.n	8011d1a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8011ce4:	4b5b      	ldr	r3, [pc, #364]	@ (8011e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d116      	bne.n	8011d1e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8011cf0:	2301      	movs	r3, #1
 8011cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011cf4:	e013      	b.n	8011d1e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8011cf6:	4b57      	ldr	r3, [pc, #348]	@ (8011e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d10f      	bne.n	8011d22 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8011d02:	4b54      	ldr	r3, [pc, #336]	@ (8011e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d109      	bne.n	8011d22 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8011d0e:	2301      	movs	r3, #1
 8011d10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011d12:	e006      	b.n	8011d22 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8011d14:	2301      	movs	r3, #1
 8011d16:	73fb      	strb	r3, [r7, #15]
      break;
 8011d18:	e004      	b.n	8011d24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8011d1a:	bf00      	nop
 8011d1c:	e002      	b.n	8011d24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8011d1e:	bf00      	nop
 8011d20:	e000      	b.n	8011d24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8011d22:	bf00      	nop
    }

    if(status == HAL_OK)
 8011d24:	7bfb      	ldrb	r3, [r7, #15]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d10d      	bne.n	8011d46 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8011d2a:	4b4a      	ldr	r3, [pc, #296]	@ (8011e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011d2c:	68db      	ldr	r3, [r3, #12]
 8011d2e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	6819      	ldr	r1, [r3, #0]
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	685b      	ldr	r3, [r3, #4]
 8011d3a:	3b01      	subs	r3, #1
 8011d3c:	011b      	lsls	r3, r3, #4
 8011d3e:	430b      	orrs	r3, r1
 8011d40:	4944      	ldr	r1, [pc, #272]	@ (8011e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011d42:	4313      	orrs	r3, r2
 8011d44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8011d46:	7bfb      	ldrb	r3, [r7, #15]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d17d      	bne.n	8011e48 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8011d4c:	4b41      	ldr	r3, [pc, #260]	@ (8011e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	4a40      	ldr	r2, [pc, #256]	@ (8011e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011d52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011d56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011d58:	f7fa f98c 	bl	800c074 <HAL_GetTick>
 8011d5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8011d5e:	e009      	b.n	8011d74 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8011d60:	f7fa f988 	bl	800c074 <HAL_GetTick>
 8011d64:	4602      	mov	r2, r0
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	1ad3      	subs	r3, r2, r3
 8011d6a:	2b02      	cmp	r3, #2
 8011d6c:	d902      	bls.n	8011d74 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8011d6e:	2303      	movs	r3, #3
 8011d70:	73fb      	strb	r3, [r7, #15]
        break;
 8011d72:	e005      	b.n	8011d80 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8011d74:	4b37      	ldr	r3, [pc, #220]	@ (8011e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d1ef      	bne.n	8011d60 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8011d80:	7bfb      	ldrb	r3, [r7, #15]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d160      	bne.n	8011e48 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8011d86:	683b      	ldr	r3, [r7, #0]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d111      	bne.n	8011db0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8011d8c:	4b31      	ldr	r3, [pc, #196]	@ (8011e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011d8e:	691b      	ldr	r3, [r3, #16]
 8011d90:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8011d94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011d98:	687a      	ldr	r2, [r7, #4]
 8011d9a:	6892      	ldr	r2, [r2, #8]
 8011d9c:	0211      	lsls	r1, r2, #8
 8011d9e:	687a      	ldr	r2, [r7, #4]
 8011da0:	68d2      	ldr	r2, [r2, #12]
 8011da2:	0912      	lsrs	r2, r2, #4
 8011da4:	0452      	lsls	r2, r2, #17
 8011da6:	430a      	orrs	r2, r1
 8011da8:	492a      	ldr	r1, [pc, #168]	@ (8011e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011daa:	4313      	orrs	r3, r2
 8011dac:	610b      	str	r3, [r1, #16]
 8011dae:	e027      	b.n	8011e00 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	2b01      	cmp	r3, #1
 8011db4:	d112      	bne.n	8011ddc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8011db6:	4b27      	ldr	r3, [pc, #156]	@ (8011e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011db8:	691b      	ldr	r3, [r3, #16]
 8011dba:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8011dbe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8011dc2:	687a      	ldr	r2, [r7, #4]
 8011dc4:	6892      	ldr	r2, [r2, #8]
 8011dc6:	0211      	lsls	r1, r2, #8
 8011dc8:	687a      	ldr	r2, [r7, #4]
 8011dca:	6912      	ldr	r2, [r2, #16]
 8011dcc:	0852      	lsrs	r2, r2, #1
 8011dce:	3a01      	subs	r2, #1
 8011dd0:	0552      	lsls	r2, r2, #21
 8011dd2:	430a      	orrs	r2, r1
 8011dd4:	491f      	ldr	r1, [pc, #124]	@ (8011e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011dd6:	4313      	orrs	r3, r2
 8011dd8:	610b      	str	r3, [r1, #16]
 8011dda:	e011      	b.n	8011e00 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8011ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8011e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011dde:	691b      	ldr	r3, [r3, #16]
 8011de0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8011de4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8011de8:	687a      	ldr	r2, [r7, #4]
 8011dea:	6892      	ldr	r2, [r2, #8]
 8011dec:	0211      	lsls	r1, r2, #8
 8011dee:	687a      	ldr	r2, [r7, #4]
 8011df0:	6952      	ldr	r2, [r2, #20]
 8011df2:	0852      	lsrs	r2, r2, #1
 8011df4:	3a01      	subs	r2, #1
 8011df6:	0652      	lsls	r2, r2, #25
 8011df8:	430a      	orrs	r2, r1
 8011dfa:	4916      	ldr	r1, [pc, #88]	@ (8011e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011dfc:	4313      	orrs	r3, r2
 8011dfe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8011e00:	4b14      	ldr	r3, [pc, #80]	@ (8011e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	4a13      	ldr	r2, [pc, #76]	@ (8011e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011e06:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8011e0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011e0c:	f7fa f932 	bl	800c074 <HAL_GetTick>
 8011e10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8011e12:	e009      	b.n	8011e28 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8011e14:	f7fa f92e 	bl	800c074 <HAL_GetTick>
 8011e18:	4602      	mov	r2, r0
 8011e1a:	68bb      	ldr	r3, [r7, #8]
 8011e1c:	1ad3      	subs	r3, r2, r3
 8011e1e:	2b02      	cmp	r3, #2
 8011e20:	d902      	bls.n	8011e28 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8011e22:	2303      	movs	r3, #3
 8011e24:	73fb      	strb	r3, [r7, #15]
          break;
 8011e26:	e005      	b.n	8011e34 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8011e28:	4b0a      	ldr	r3, [pc, #40]	@ (8011e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d0ef      	beq.n	8011e14 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8011e34:	7bfb      	ldrb	r3, [r7, #15]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d106      	bne.n	8011e48 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8011e3a:	4b06      	ldr	r3, [pc, #24]	@ (8011e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011e3c:	691a      	ldr	r2, [r3, #16]
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	699b      	ldr	r3, [r3, #24]
 8011e42:	4904      	ldr	r1, [pc, #16]	@ (8011e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8011e44:	4313      	orrs	r3, r2
 8011e46:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8011e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	3710      	adds	r7, #16
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bd80      	pop	{r7, pc}
 8011e52:	bf00      	nop
 8011e54:	40021000 	.word	0x40021000

08011e58 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b084      	sub	sp, #16
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
 8011e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011e62:	2300      	movs	r3, #0
 8011e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8011e66:	4b6a      	ldr	r3, [pc, #424]	@ (8012010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011e68:	68db      	ldr	r3, [r3, #12]
 8011e6a:	f003 0303 	and.w	r3, r3, #3
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d018      	beq.n	8011ea4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8011e72:	4b67      	ldr	r3, [pc, #412]	@ (8012010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011e74:	68db      	ldr	r3, [r3, #12]
 8011e76:	f003 0203 	and.w	r2, r3, #3
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	429a      	cmp	r2, r3
 8011e80:	d10d      	bne.n	8011e9e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	681b      	ldr	r3, [r3, #0]
       ||
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d009      	beq.n	8011e9e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8011e8a:	4b61      	ldr	r3, [pc, #388]	@ (8012010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011e8c:	68db      	ldr	r3, [r3, #12]
 8011e8e:	091b      	lsrs	r3, r3, #4
 8011e90:	f003 0307 	and.w	r3, r3, #7
 8011e94:	1c5a      	adds	r2, r3, #1
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	685b      	ldr	r3, [r3, #4]
       ||
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	d047      	beq.n	8011f2e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8011e9e:	2301      	movs	r3, #1
 8011ea0:	73fb      	strb	r3, [r7, #15]
 8011ea2:	e044      	b.n	8011f2e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	2b03      	cmp	r3, #3
 8011eaa:	d018      	beq.n	8011ede <RCCEx_PLLSAI2_Config+0x86>
 8011eac:	2b03      	cmp	r3, #3
 8011eae:	d825      	bhi.n	8011efc <RCCEx_PLLSAI2_Config+0xa4>
 8011eb0:	2b01      	cmp	r3, #1
 8011eb2:	d002      	beq.n	8011eba <RCCEx_PLLSAI2_Config+0x62>
 8011eb4:	2b02      	cmp	r3, #2
 8011eb6:	d009      	beq.n	8011ecc <RCCEx_PLLSAI2_Config+0x74>
 8011eb8:	e020      	b.n	8011efc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8011eba:	4b55      	ldr	r3, [pc, #340]	@ (8012010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	f003 0302 	and.w	r3, r3, #2
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d11d      	bne.n	8011f02 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8011ec6:	2301      	movs	r3, #1
 8011ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011eca:	e01a      	b.n	8011f02 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8011ecc:	4b50      	ldr	r3, [pc, #320]	@ (8012010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d116      	bne.n	8011f06 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8011ed8:	2301      	movs	r3, #1
 8011eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011edc:	e013      	b.n	8011f06 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8011ede:	4b4c      	ldr	r3, [pc, #304]	@ (8012010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d10f      	bne.n	8011f0a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8011eea:	4b49      	ldr	r3, [pc, #292]	@ (8012010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d109      	bne.n	8011f0a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8011ef6:	2301      	movs	r3, #1
 8011ef8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011efa:	e006      	b.n	8011f0a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8011efc:	2301      	movs	r3, #1
 8011efe:	73fb      	strb	r3, [r7, #15]
      break;
 8011f00:	e004      	b.n	8011f0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8011f02:	bf00      	nop
 8011f04:	e002      	b.n	8011f0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8011f06:	bf00      	nop
 8011f08:	e000      	b.n	8011f0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8011f0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8011f0c:	7bfb      	ldrb	r3, [r7, #15]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d10d      	bne.n	8011f2e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8011f12:	4b3f      	ldr	r3, [pc, #252]	@ (8012010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011f14:	68db      	ldr	r3, [r3, #12]
 8011f16:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	6819      	ldr	r1, [r3, #0]
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	685b      	ldr	r3, [r3, #4]
 8011f22:	3b01      	subs	r3, #1
 8011f24:	011b      	lsls	r3, r3, #4
 8011f26:	430b      	orrs	r3, r1
 8011f28:	4939      	ldr	r1, [pc, #228]	@ (8012010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011f2a:	4313      	orrs	r3, r2
 8011f2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8011f2e:	7bfb      	ldrb	r3, [r7, #15]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d167      	bne.n	8012004 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8011f34:	4b36      	ldr	r3, [pc, #216]	@ (8012010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	4a35      	ldr	r2, [pc, #212]	@ (8012010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011f3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011f3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011f40:	f7fa f898 	bl	800c074 <HAL_GetTick>
 8011f44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8011f46:	e009      	b.n	8011f5c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8011f48:	f7fa f894 	bl	800c074 <HAL_GetTick>
 8011f4c:	4602      	mov	r2, r0
 8011f4e:	68bb      	ldr	r3, [r7, #8]
 8011f50:	1ad3      	subs	r3, r2, r3
 8011f52:	2b02      	cmp	r3, #2
 8011f54:	d902      	bls.n	8011f5c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8011f56:	2303      	movs	r3, #3
 8011f58:	73fb      	strb	r3, [r7, #15]
        break;
 8011f5a:	e005      	b.n	8011f68 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8011f5c:	4b2c      	ldr	r3, [pc, #176]	@ (8012010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d1ef      	bne.n	8011f48 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8011f68:	7bfb      	ldrb	r3, [r7, #15]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d14a      	bne.n	8012004 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8011f6e:	683b      	ldr	r3, [r7, #0]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d111      	bne.n	8011f98 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8011f74:	4b26      	ldr	r3, [pc, #152]	@ (8012010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011f76:	695b      	ldr	r3, [r3, #20]
 8011f78:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8011f7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011f80:	687a      	ldr	r2, [r7, #4]
 8011f82:	6892      	ldr	r2, [r2, #8]
 8011f84:	0211      	lsls	r1, r2, #8
 8011f86:	687a      	ldr	r2, [r7, #4]
 8011f88:	68d2      	ldr	r2, [r2, #12]
 8011f8a:	0912      	lsrs	r2, r2, #4
 8011f8c:	0452      	lsls	r2, r2, #17
 8011f8e:	430a      	orrs	r2, r1
 8011f90:	491f      	ldr	r1, [pc, #124]	@ (8012010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011f92:	4313      	orrs	r3, r2
 8011f94:	614b      	str	r3, [r1, #20]
 8011f96:	e011      	b.n	8011fbc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8011f98:	4b1d      	ldr	r3, [pc, #116]	@ (8012010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011f9a:	695b      	ldr	r3, [r3, #20]
 8011f9c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8011fa0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8011fa4:	687a      	ldr	r2, [r7, #4]
 8011fa6:	6892      	ldr	r2, [r2, #8]
 8011fa8:	0211      	lsls	r1, r2, #8
 8011faa:	687a      	ldr	r2, [r7, #4]
 8011fac:	6912      	ldr	r2, [r2, #16]
 8011fae:	0852      	lsrs	r2, r2, #1
 8011fb0:	3a01      	subs	r2, #1
 8011fb2:	0652      	lsls	r2, r2, #25
 8011fb4:	430a      	orrs	r2, r1
 8011fb6:	4916      	ldr	r1, [pc, #88]	@ (8012010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011fb8:	4313      	orrs	r3, r2
 8011fba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8011fbc:	4b14      	ldr	r3, [pc, #80]	@ (8012010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	4a13      	ldr	r2, [pc, #76]	@ (8012010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011fc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011fc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011fc8:	f7fa f854 	bl	800c074 <HAL_GetTick>
 8011fcc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8011fce:	e009      	b.n	8011fe4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8011fd0:	f7fa f850 	bl	800c074 <HAL_GetTick>
 8011fd4:	4602      	mov	r2, r0
 8011fd6:	68bb      	ldr	r3, [r7, #8]
 8011fd8:	1ad3      	subs	r3, r2, r3
 8011fda:	2b02      	cmp	r3, #2
 8011fdc:	d902      	bls.n	8011fe4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8011fde:	2303      	movs	r3, #3
 8011fe0:	73fb      	strb	r3, [r7, #15]
          break;
 8011fe2:	e005      	b.n	8011ff0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8011fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8012010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d0ef      	beq.n	8011fd0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8011ff0:	7bfb      	ldrb	r3, [r7, #15]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d106      	bne.n	8012004 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8011ff6:	4b06      	ldr	r3, [pc, #24]	@ (8012010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8011ff8:	695a      	ldr	r2, [r3, #20]
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	695b      	ldr	r3, [r3, #20]
 8011ffe:	4904      	ldr	r1, [pc, #16]	@ (8012010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8012000:	4313      	orrs	r3, r2
 8012002:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8012004:	7bfb      	ldrb	r3, [r7, #15]
}
 8012006:	4618      	mov	r0, r3
 8012008:	3710      	adds	r7, #16
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}
 801200e:	bf00      	nop
 8012010:	40021000 	.word	0x40021000

08012014 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b084      	sub	sp, #16
 8012018:	af00      	add	r7, sp, #0
 801201a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801201c:	2301      	movs	r3, #1
 801201e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d079      	beq.n	801211a <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801202c:	b2db      	uxtb	r3, r3
 801202e:	2b00      	cmp	r3, #0
 8012030:	d106      	bne.n	8012040 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	2200      	movs	r2, #0
 8012036:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 801203a:	6878      	ldr	r0, [r7, #4]
 801203c:	f7f6 fa58 	bl	80084f0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	2202      	movs	r2, #2
 8012044:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	68db      	ldr	r3, [r3, #12]
 801204e:	f003 0310 	and.w	r3, r3, #16
 8012052:	2b10      	cmp	r3, #16
 8012054:	d058      	beq.n	8012108 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	22ca      	movs	r2, #202	@ 0xca
 801205c:	625a      	str	r2, [r3, #36]	@ 0x24
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	2253      	movs	r2, #83	@ 0x53
 8012064:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	f000 fb82 	bl	8012770 <RTC_EnterInitMode>
 801206c:	4603      	mov	r3, r0
 801206e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8012070:	7bfb      	ldrb	r3, [r7, #15]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d127      	bne.n	80120c6 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	689b      	ldr	r3, [r3, #8]
 801207c:	687a      	ldr	r2, [r7, #4]
 801207e:	6812      	ldr	r2, [r2, #0]
 8012080:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8012084:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012088:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	6899      	ldr	r1, [r3, #8]
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	685a      	ldr	r2, [r3, #4]
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	691b      	ldr	r3, [r3, #16]
 8012098:	431a      	orrs	r2, r3
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	699b      	ldr	r3, [r3, #24]
 801209e:	431a      	orrs	r2, r3
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	430a      	orrs	r2, r1
 80120a6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	687a      	ldr	r2, [r7, #4]
 80120ae:	68d2      	ldr	r2, [r2, #12]
 80120b0:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	6919      	ldr	r1, [r3, #16]
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	689b      	ldr	r3, [r3, #8]
 80120bc:	041a      	lsls	r2, r3, #16
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	430a      	orrs	r2, r1
 80120c4:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80120c6:	6878      	ldr	r0, [r7, #4]
 80120c8:	f000 fb86 	bl	80127d8 <RTC_ExitInitMode>
 80120cc:	4603      	mov	r3, r0
 80120ce:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80120d0:	7bfb      	ldrb	r3, [r7, #15]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d113      	bne.n	80120fe <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	f022 0203 	bic.w	r2, r2, #3
 80120e4:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	69da      	ldr	r2, [r3, #28]
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	695b      	ldr	r3, [r3, #20]
 80120f4:	431a      	orrs	r2, r3
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	430a      	orrs	r2, r1
 80120fc:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	22ff      	movs	r2, #255	@ 0xff
 8012104:	625a      	str	r2, [r3, #36]	@ 0x24
 8012106:	e001      	b.n	801210c <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8012108:	2300      	movs	r3, #0
 801210a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 801210c:	7bfb      	ldrb	r3, [r7, #15]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d103      	bne.n	801211a <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	2201      	movs	r2, #1
 8012116:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 801211a:	7bfb      	ldrb	r3, [r7, #15]
}
 801211c:	4618      	mov	r0, r3
 801211e:	3710      	adds	r7, #16
 8012120:	46bd      	mov	sp, r7
 8012122:	bd80      	pop	{r7, pc}

08012124 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8012124:	b590      	push	{r4, r7, lr}
 8012126:	b087      	sub	sp, #28
 8012128:	af00      	add	r7, sp, #0
 801212a:	60f8      	str	r0, [r7, #12]
 801212c:	60b9      	str	r1, [r7, #8]
 801212e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012136:	2b01      	cmp	r3, #1
 8012138:	d101      	bne.n	801213e <HAL_RTC_SetTime+0x1a>
 801213a:	2302      	movs	r3, #2
 801213c:	e08b      	b.n	8012256 <HAL_RTC_SetTime+0x132>
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	2201      	movs	r2, #1
 8012142:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	2202      	movs	r2, #2
 801214a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	22ca      	movs	r2, #202	@ 0xca
 8012154:	625a      	str	r2, [r3, #36]	@ 0x24
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	2253      	movs	r2, #83	@ 0x53
 801215c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801215e:	68f8      	ldr	r0, [r7, #12]
 8012160:	f000 fb06 	bl	8012770 <RTC_EnterInitMode>
 8012164:	4603      	mov	r3, r0
 8012166:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8012168:	7cfb      	ldrb	r3, [r7, #19]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d163      	bne.n	8012236 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d126      	bne.n	80121c2 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	689b      	ldr	r3, [r3, #8]
 801217a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801217e:	2b00      	cmp	r3, #0
 8012180:	d102      	bne.n	8012188 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8012182:	68bb      	ldr	r3, [r7, #8]
 8012184:	2200      	movs	r2, #0
 8012186:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012188:	68bb      	ldr	r3, [r7, #8]
 801218a:	781b      	ldrb	r3, [r3, #0]
 801218c:	4618      	mov	r0, r3
 801218e:	f000 fb61 	bl	8012854 <RTC_ByteToBcd2>
 8012192:	4603      	mov	r3, r0
 8012194:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012196:	68bb      	ldr	r3, [r7, #8]
 8012198:	785b      	ldrb	r3, [r3, #1]
 801219a:	4618      	mov	r0, r3
 801219c:	f000 fb5a 	bl	8012854 <RTC_ByteToBcd2>
 80121a0:	4603      	mov	r3, r0
 80121a2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80121a4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80121a6:	68bb      	ldr	r3, [r7, #8]
 80121a8:	789b      	ldrb	r3, [r3, #2]
 80121aa:	4618      	mov	r0, r3
 80121ac:	f000 fb52 	bl	8012854 <RTC_ByteToBcd2>
 80121b0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80121b2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80121b6:	68bb      	ldr	r3, [r7, #8]
 80121b8:	78db      	ldrb	r3, [r3, #3]
 80121ba:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80121bc:	4313      	orrs	r3, r2
 80121be:	617b      	str	r3, [r7, #20]
 80121c0:	e018      	b.n	80121f4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	689b      	ldr	r3, [r3, #8]
 80121c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d102      	bne.n	80121d6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	2200      	movs	r2, #0
 80121d4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80121d6:	68bb      	ldr	r3, [r7, #8]
 80121d8:	781b      	ldrb	r3, [r3, #0]
 80121da:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80121dc:	68bb      	ldr	r3, [r7, #8]
 80121de:	785b      	ldrb	r3, [r3, #1]
 80121e0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80121e2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80121e4:	68ba      	ldr	r2, [r7, #8]
 80121e6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80121e8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80121ea:	68bb      	ldr	r3, [r7, #8]
 80121ec:	78db      	ldrb	r3, [r3, #3]
 80121ee:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80121f0:	4313      	orrs	r3, r2
 80121f2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	681a      	ldr	r2, [r3, #0]
 80121f8:	697b      	ldr	r3, [r7, #20]
 80121fa:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80121fe:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8012202:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	689a      	ldr	r2, [r3, #8]
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8012212:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	6899      	ldr	r1, [r3, #8]
 801221a:	68bb      	ldr	r3, [r7, #8]
 801221c:	68da      	ldr	r2, [r3, #12]
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	691b      	ldr	r3, [r3, #16]
 8012222:	431a      	orrs	r2, r3
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	430a      	orrs	r2, r1
 801222a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801222c:	68f8      	ldr	r0, [r7, #12]
 801222e:	f000 fad3 	bl	80127d8 <RTC_ExitInitMode>
 8012232:	4603      	mov	r3, r0
 8012234:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	22ff      	movs	r2, #255	@ 0xff
 801223c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 801223e:	7cfb      	ldrb	r3, [r7, #19]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d103      	bne.n	801224c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	2201      	movs	r2, #1
 8012248:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	2200      	movs	r2, #0
 8012250:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8012254:	7cfb      	ldrb	r3, [r7, #19]
}
 8012256:	4618      	mov	r0, r3
 8012258:	371c      	adds	r7, #28
 801225a:	46bd      	mov	sp, r7
 801225c:	bd90      	pop	{r4, r7, pc}

0801225e <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801225e:	b580      	push	{r7, lr}
 8012260:	b086      	sub	sp, #24
 8012262:	af00      	add	r7, sp, #0
 8012264:	60f8      	str	r0, [r7, #12]
 8012266:	60b9      	str	r1, [r7, #8]
 8012268:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	691b      	ldr	r3, [r3, #16]
 801227a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 801227e:	68bb      	ldr	r3, [r7, #8]
 8012280:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 801228c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8012290:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8012292:	697b      	ldr	r3, [r7, #20]
 8012294:	0c1b      	lsrs	r3, r3, #16
 8012296:	b2db      	uxtb	r3, r3
 8012298:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801229c:	b2da      	uxtb	r2, r3
 801229e:	68bb      	ldr	r3, [r7, #8]
 80122a0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80122a2:	697b      	ldr	r3, [r7, #20]
 80122a4:	0a1b      	lsrs	r3, r3, #8
 80122a6:	b2db      	uxtb	r3, r3
 80122a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80122ac:	b2da      	uxtb	r2, r3
 80122ae:	68bb      	ldr	r3, [r7, #8]
 80122b0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80122b2:	697b      	ldr	r3, [r7, #20]
 80122b4:	b2db      	uxtb	r3, r3
 80122b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80122ba:	b2da      	uxtb	r2, r3
 80122bc:	68bb      	ldr	r3, [r7, #8]
 80122be:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	0d9b      	lsrs	r3, r3, #22
 80122c4:	b2db      	uxtb	r3, r3
 80122c6:	f003 0301 	and.w	r3, r3, #1
 80122ca:	b2da      	uxtb	r2, r3
 80122cc:	68bb      	ldr	r3, [r7, #8]
 80122ce:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d11a      	bne.n	801230c <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80122d6:	68bb      	ldr	r3, [r7, #8]
 80122d8:	781b      	ldrb	r3, [r3, #0]
 80122da:	4618      	mov	r0, r3
 80122dc:	f000 fada 	bl	8012894 <RTC_Bcd2ToByte>
 80122e0:	4603      	mov	r3, r0
 80122e2:	461a      	mov	r2, r3
 80122e4:	68bb      	ldr	r3, [r7, #8]
 80122e6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80122e8:	68bb      	ldr	r3, [r7, #8]
 80122ea:	785b      	ldrb	r3, [r3, #1]
 80122ec:	4618      	mov	r0, r3
 80122ee:	f000 fad1 	bl	8012894 <RTC_Bcd2ToByte>
 80122f2:	4603      	mov	r3, r0
 80122f4:	461a      	mov	r2, r3
 80122f6:	68bb      	ldr	r3, [r7, #8]
 80122f8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80122fa:	68bb      	ldr	r3, [r7, #8]
 80122fc:	789b      	ldrb	r3, [r3, #2]
 80122fe:	4618      	mov	r0, r3
 8012300:	f000 fac8 	bl	8012894 <RTC_Bcd2ToByte>
 8012304:	4603      	mov	r3, r0
 8012306:	461a      	mov	r2, r3
 8012308:	68bb      	ldr	r3, [r7, #8]
 801230a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801230c:	2300      	movs	r3, #0
}
 801230e:	4618      	mov	r0, r3
 8012310:	3718      	adds	r7, #24
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}

08012316 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8012316:	b590      	push	{r4, r7, lr}
 8012318:	b087      	sub	sp, #28
 801231a:	af00      	add	r7, sp, #0
 801231c:	60f8      	str	r0, [r7, #12]
 801231e:	60b9      	str	r1, [r7, #8]
 8012320:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012328:	2b01      	cmp	r3, #1
 801232a:	d101      	bne.n	8012330 <HAL_RTC_SetDate+0x1a>
 801232c:	2302      	movs	r3, #2
 801232e:	e075      	b.n	801241c <HAL_RTC_SetDate+0x106>
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	2201      	movs	r2, #1
 8012334:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	2202      	movs	r2, #2
 801233c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d10e      	bne.n	8012364 <HAL_RTC_SetDate+0x4e>
 8012346:	68bb      	ldr	r3, [r7, #8]
 8012348:	785b      	ldrb	r3, [r3, #1]
 801234a:	f003 0310 	and.w	r3, r3, #16
 801234e:	2b00      	cmp	r3, #0
 8012350:	d008      	beq.n	8012364 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8012352:	68bb      	ldr	r3, [r7, #8]
 8012354:	785b      	ldrb	r3, [r3, #1]
 8012356:	f023 0310 	bic.w	r3, r3, #16
 801235a:	b2db      	uxtb	r3, r3
 801235c:	330a      	adds	r3, #10
 801235e:	b2da      	uxtb	r2, r3
 8012360:	68bb      	ldr	r3, [r7, #8]
 8012362:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d11c      	bne.n	80123a4 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	78db      	ldrb	r3, [r3, #3]
 801236e:	4618      	mov	r0, r3
 8012370:	f000 fa70 	bl	8012854 <RTC_ByteToBcd2>
 8012374:	4603      	mov	r3, r0
 8012376:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8012378:	68bb      	ldr	r3, [r7, #8]
 801237a:	785b      	ldrb	r3, [r3, #1]
 801237c:	4618      	mov	r0, r3
 801237e:	f000 fa69 	bl	8012854 <RTC_ByteToBcd2>
 8012382:	4603      	mov	r3, r0
 8012384:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8012386:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8012388:	68bb      	ldr	r3, [r7, #8]
 801238a:	789b      	ldrb	r3, [r3, #2]
 801238c:	4618      	mov	r0, r3
 801238e:	f000 fa61 	bl	8012854 <RTC_ByteToBcd2>
 8012392:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8012394:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8012398:	68bb      	ldr	r3, [r7, #8]
 801239a:	781b      	ldrb	r3, [r3, #0]
 801239c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 801239e:	4313      	orrs	r3, r2
 80123a0:	617b      	str	r3, [r7, #20]
 80123a2:	e00e      	b.n	80123c2 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80123a4:	68bb      	ldr	r3, [r7, #8]
 80123a6:	78db      	ldrb	r3, [r3, #3]
 80123a8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80123aa:	68bb      	ldr	r3, [r7, #8]
 80123ac:	785b      	ldrb	r3, [r3, #1]
 80123ae:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80123b0:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80123b2:	68ba      	ldr	r2, [r7, #8]
 80123b4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80123b6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80123b8:	68bb      	ldr	r3, [r7, #8]
 80123ba:	781b      	ldrb	r3, [r3, #0]
 80123bc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80123be:	4313      	orrs	r3, r2
 80123c0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	22ca      	movs	r2, #202	@ 0xca
 80123c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	2253      	movs	r2, #83	@ 0x53
 80123d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80123d2:	68f8      	ldr	r0, [r7, #12]
 80123d4:	f000 f9cc 	bl	8012770 <RTC_EnterInitMode>
 80123d8:	4603      	mov	r3, r0
 80123da:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80123dc:	7cfb      	ldrb	r3, [r7, #19]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d10c      	bne.n	80123fc <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	681a      	ldr	r2, [r3, #0]
 80123e6:	697b      	ldr	r3, [r7, #20]
 80123e8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80123ec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80123f0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80123f2:	68f8      	ldr	r0, [r7, #12]
 80123f4:	f000 f9f0 	bl	80127d8 <RTC_ExitInitMode>
 80123f8:	4603      	mov	r3, r0
 80123fa:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	22ff      	movs	r2, #255	@ 0xff
 8012402:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8012404:	7cfb      	ldrb	r3, [r7, #19]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d103      	bne.n	8012412 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	2201      	movs	r2, #1
 801240e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	2200      	movs	r2, #0
 8012416:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 801241a:	7cfb      	ldrb	r3, [r7, #19]
}
 801241c:	4618      	mov	r0, r3
 801241e:	371c      	adds	r7, #28
 8012420:	46bd      	mov	sp, r7
 8012422:	bd90      	pop	{r4, r7, pc}

08012424 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8012424:	b590      	push	{r4, r7, lr}
 8012426:	b089      	sub	sp, #36	@ 0x24
 8012428:	af00      	add	r7, sp, #0
 801242a:	60f8      	str	r0, [r7, #12]
 801242c:	60b9      	str	r1, [r7, #8]
 801242e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012436:	2b01      	cmp	r3, #1
 8012438:	d101      	bne.n	801243e <HAL_RTC_SetAlarm_IT+0x1a>
 801243a:	2302      	movs	r3, #2
 801243c:	e127      	b.n	801268e <HAL_RTC_SetAlarm_IT+0x26a>
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	2201      	movs	r2, #1
 8012442:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	2202      	movs	r2, #2
 801244a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d137      	bne.n	80124c4 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	689b      	ldr	r3, [r3, #8]
 801245a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801245e:	2b00      	cmp	r3, #0
 8012460:	d102      	bne.n	8012468 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8012462:	68bb      	ldr	r3, [r7, #8]
 8012464:	2200      	movs	r2, #0
 8012466:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	781b      	ldrb	r3, [r3, #0]
 801246c:	4618      	mov	r0, r3
 801246e:	f000 f9f1 	bl	8012854 <RTC_ByteToBcd2>
 8012472:	4603      	mov	r3, r0
 8012474:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8012476:	68bb      	ldr	r3, [r7, #8]
 8012478:	785b      	ldrb	r3, [r3, #1]
 801247a:	4618      	mov	r0, r3
 801247c:	f000 f9ea 	bl	8012854 <RTC_ByteToBcd2>
 8012480:	4603      	mov	r3, r0
 8012482:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8012484:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8012486:	68bb      	ldr	r3, [r7, #8]
 8012488:	789b      	ldrb	r3, [r3, #2]
 801248a:	4618      	mov	r0, r3
 801248c:	f000 f9e2 	bl	8012854 <RTC_ByteToBcd2>
 8012490:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8012492:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8012496:	68bb      	ldr	r3, [r7, #8]
 8012498:	78db      	ldrb	r3, [r3, #3]
 801249a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 801249c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80124a6:	4618      	mov	r0, r3
 80124a8:	f000 f9d4 	bl	8012854 <RTC_ByteToBcd2>
 80124ac:	4603      	mov	r3, r0
 80124ae:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80124b0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80124b4:	68bb      	ldr	r3, [r7, #8]
 80124b6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80124b8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80124ba:	68bb      	ldr	r3, [r7, #8]
 80124bc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80124be:	4313      	orrs	r3, r2
 80124c0:	61fb      	str	r3, [r7, #28]
 80124c2:	e023      	b.n	801250c <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	689b      	ldr	r3, [r3, #8]
 80124ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d102      	bne.n	80124d8 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80124d2:	68bb      	ldr	r3, [r7, #8]
 80124d4:	2200      	movs	r2, #0
 80124d6:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80124d8:	68bb      	ldr	r3, [r7, #8]
 80124da:	781b      	ldrb	r3, [r3, #0]
 80124dc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80124de:	68bb      	ldr	r3, [r7, #8]
 80124e0:	785b      	ldrb	r3, [r3, #1]
 80124e2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80124e4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80124e6:	68ba      	ldr	r2, [r7, #8]
 80124e8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80124ea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80124ec:	68bb      	ldr	r3, [r7, #8]
 80124ee:	78db      	ldrb	r3, [r3, #3]
 80124f0:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80124f2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80124f4:	68bb      	ldr	r3, [r7, #8]
 80124f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80124fa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80124fc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80124fe:	68bb      	ldr	r3, [r7, #8]
 8012500:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8012502:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8012508:	4313      	orrs	r3, r2
 801250a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 801250c:	68bb      	ldr	r3, [r7, #8]
 801250e:	685a      	ldr	r2, [r3, #4]
 8012510:	68bb      	ldr	r3, [r7, #8]
 8012512:	69db      	ldr	r3, [r3, #28]
 8012514:	4313      	orrs	r3, r2
 8012516:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	22ca      	movs	r2, #202	@ 0xca
 801251e:	625a      	str	r2, [r3, #36]	@ 0x24
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	2253      	movs	r2, #83	@ 0x53
 8012526:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8012528:	68bb      	ldr	r3, [r7, #8]
 801252a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801252c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012530:	d14a      	bne.n	80125c8 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	689a      	ldr	r2, [r3, #8]
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8012540:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	68db      	ldr	r3, [r3, #12]
 8012548:	b2da      	uxtb	r2, r3
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8012552:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8012554:	f7f9 fd8e 	bl	800c074 <HAL_GetTick>
 8012558:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 801255a:	e015      	b.n	8012588 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801255c:	f7f9 fd8a 	bl	800c074 <HAL_GetTick>
 8012560:	4602      	mov	r2, r0
 8012562:	693b      	ldr	r3, [r7, #16]
 8012564:	1ad3      	subs	r3, r2, r3
 8012566:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801256a:	d90d      	bls.n	8012588 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	22ff      	movs	r2, #255	@ 0xff
 8012572:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	2203      	movs	r2, #3
 8012578:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	2200      	movs	r2, #0
 8012580:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8012584:	2303      	movs	r3, #3
 8012586:	e082      	b.n	801268e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	68db      	ldr	r3, [r3, #12]
 801258e:	f003 0301 	and.w	r3, r3, #1
 8012592:	2b00      	cmp	r3, #0
 8012594:	d0e2      	beq.n	801255c <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	69fa      	ldr	r2, [r7, #28]
 801259c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	69ba      	ldr	r2, [r7, #24]
 80125a4:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	689a      	ldr	r2, [r3, #8]
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80125b4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	689a      	ldr	r2, [r3, #8]
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80125c4:	609a      	str	r2, [r3, #8]
 80125c6:	e049      	b.n	801265c <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	689a      	ldr	r2, [r3, #8]
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80125d6:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	68db      	ldr	r3, [r3, #12]
 80125de:	b2da      	uxtb	r2, r3
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80125e8:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80125ea:	f7f9 fd43 	bl	800c074 <HAL_GetTick>
 80125ee:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80125f0:	e015      	b.n	801261e <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80125f2:	f7f9 fd3f 	bl	800c074 <HAL_GetTick>
 80125f6:	4602      	mov	r2, r0
 80125f8:	697b      	ldr	r3, [r7, #20]
 80125fa:	1ad3      	subs	r3, r2, r3
 80125fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012600:	d90d      	bls.n	801261e <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	22ff      	movs	r2, #255	@ 0xff
 8012608:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	2203      	movs	r2, #3
 801260e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	2200      	movs	r2, #0
 8012616:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 801261a:	2303      	movs	r3, #3
 801261c:	e037      	b.n	801268e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	68db      	ldr	r3, [r3, #12]
 8012624:	f003 0302 	and.w	r3, r3, #2
 8012628:	2b00      	cmp	r3, #0
 801262a:	d0e2      	beq.n	80125f2 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	69fa      	ldr	r2, [r7, #28]
 8012632:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	69ba      	ldr	r2, [r7, #24]
 801263a:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	689a      	ldr	r2, [r3, #8]
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801264a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	689a      	ldr	r2, [r3, #8]
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801265a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 801265c:	4b0e      	ldr	r3, [pc, #56]	@ (8012698 <HAL_RTC_SetAlarm_IT+0x274>)
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	4a0d      	ldr	r2, [pc, #52]	@ (8012698 <HAL_RTC_SetAlarm_IT+0x274>)
 8012662:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8012666:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8012668:	4b0b      	ldr	r3, [pc, #44]	@ (8012698 <HAL_RTC_SetAlarm_IT+0x274>)
 801266a:	689b      	ldr	r3, [r3, #8]
 801266c:	4a0a      	ldr	r2, [pc, #40]	@ (8012698 <HAL_RTC_SetAlarm_IT+0x274>)
 801266e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8012672:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	22ff      	movs	r2, #255	@ 0xff
 801267a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	2201      	movs	r2, #1
 8012680:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	2200      	movs	r2, #0
 8012688:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 801268c:	2300      	movs	r3, #0
}
 801268e:	4618      	mov	r0, r3
 8012690:	3724      	adds	r7, #36	@ 0x24
 8012692:	46bd      	mov	sp, r7
 8012694:	bd90      	pop	{r4, r7, pc}
 8012696:	bf00      	nop
 8012698:	40010400 	.word	0x40010400

0801269c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b082      	sub	sp, #8
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80126a4:	4b1f      	ldr	r3, [pc, #124]	@ (8012724 <HAL_RTC_AlarmIRQHandler+0x88>)
 80126a6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80126aa:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	689b      	ldr	r3, [r3, #8]
 80126b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d012      	beq.n	80126e0 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	68db      	ldr	r3, [r3, #12]
 80126c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d00b      	beq.n	80126e0 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	68db      	ldr	r3, [r3, #12]
 80126ce:	b2da      	uxtb	r2, r3
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80126d8:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f7f0 fea6 	bl	800342c <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	689b      	ldr	r3, [r3, #8]
 80126e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d012      	beq.n	8012714 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	68db      	ldr	r3, [r3, #12]
 80126f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d00b      	beq.n	8012714 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	68db      	ldr	r3, [r3, #12]
 8012702:	b2da      	uxtb	r2, r3
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	f462 7220 	orn	r2, r2, #640	@ 0x280
 801270c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 801270e:	6878      	ldr	r0, [r7, #4]
 8012710:	f000 f8da 	bl	80128c8 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	2201      	movs	r2, #1
 8012718:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 801271c:	bf00      	nop
 801271e:	3708      	adds	r7, #8
 8012720:	46bd      	mov	sp, r7
 8012722:	bd80      	pop	{r7, pc}
 8012724:	40010400 	.word	0x40010400

08012728 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b084      	sub	sp, #16
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	4a0d      	ldr	r2, [pc, #52]	@ (801276c <HAL_RTC_WaitForSynchro+0x44>)
 8012736:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8012738:	f7f9 fc9c 	bl	800c074 <HAL_GetTick>
 801273c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801273e:	e009      	b.n	8012754 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012740:	f7f9 fc98 	bl	800c074 <HAL_GetTick>
 8012744:	4602      	mov	r2, r0
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	1ad3      	subs	r3, r2, r3
 801274a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801274e:	d901      	bls.n	8012754 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8012750:	2303      	movs	r3, #3
 8012752:	e007      	b.n	8012764 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	68db      	ldr	r3, [r3, #12]
 801275a:	f003 0320 	and.w	r3, r3, #32
 801275e:	2b00      	cmp	r3, #0
 8012760:	d0ee      	beq.n	8012740 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8012762:	2300      	movs	r3, #0
}
 8012764:	4618      	mov	r0, r3
 8012766:	3710      	adds	r7, #16
 8012768:	46bd      	mov	sp, r7
 801276a:	bd80      	pop	{r7, pc}
 801276c:	0003ff5f 	.word	0x0003ff5f

08012770 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b084      	sub	sp, #16
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012778:	2300      	movs	r3, #0
 801277a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	68db      	ldr	r3, [r3, #12]
 8012782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012786:	2b00      	cmp	r3, #0
 8012788:	d120      	bne.n	80127cc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	f04f 32ff 	mov.w	r2, #4294967295
 8012792:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8012794:	f7f9 fc6e 	bl	800c074 <HAL_GetTick>
 8012798:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801279a:	e00d      	b.n	80127b8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 801279c:	f7f9 fc6a 	bl	800c074 <HAL_GetTick>
 80127a0:	4602      	mov	r2, r0
 80127a2:	68bb      	ldr	r3, [r7, #8]
 80127a4:	1ad3      	subs	r3, r2, r3
 80127a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80127aa:	d905      	bls.n	80127b8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80127ac:	2303      	movs	r3, #3
 80127ae:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	2203      	movs	r2, #3
 80127b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	68db      	ldr	r3, [r3, #12]
 80127be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d102      	bne.n	80127cc <RTC_EnterInitMode+0x5c>
 80127c6:	7bfb      	ldrb	r3, [r7, #15]
 80127c8:	2b03      	cmp	r3, #3
 80127ca:	d1e7      	bne.n	801279c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80127cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80127ce:	4618      	mov	r0, r3
 80127d0:	3710      	adds	r7, #16
 80127d2:	46bd      	mov	sp, r7
 80127d4:	bd80      	pop	{r7, pc}
	...

080127d8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b084      	sub	sp, #16
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80127e0:	2300      	movs	r3, #0
 80127e2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80127e4:	4b1a      	ldr	r3, [pc, #104]	@ (8012850 <RTC_ExitInitMode+0x78>)
 80127e6:	68db      	ldr	r3, [r3, #12]
 80127e8:	4a19      	ldr	r2, [pc, #100]	@ (8012850 <RTC_ExitInitMode+0x78>)
 80127ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80127ee:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80127f0:	4b17      	ldr	r3, [pc, #92]	@ (8012850 <RTC_ExitInitMode+0x78>)
 80127f2:	689b      	ldr	r3, [r3, #8]
 80127f4:	f003 0320 	and.w	r3, r3, #32
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d10c      	bne.n	8012816 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80127fc:	6878      	ldr	r0, [r7, #4]
 80127fe:	f7ff ff93 	bl	8012728 <HAL_RTC_WaitForSynchro>
 8012802:	4603      	mov	r3, r0
 8012804:	2b00      	cmp	r3, #0
 8012806:	d01e      	beq.n	8012846 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2203      	movs	r2, #3
 801280c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8012810:	2303      	movs	r3, #3
 8012812:	73fb      	strb	r3, [r7, #15]
 8012814:	e017      	b.n	8012846 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8012816:	4b0e      	ldr	r3, [pc, #56]	@ (8012850 <RTC_ExitInitMode+0x78>)
 8012818:	689b      	ldr	r3, [r3, #8]
 801281a:	4a0d      	ldr	r2, [pc, #52]	@ (8012850 <RTC_ExitInitMode+0x78>)
 801281c:	f023 0320 	bic.w	r3, r3, #32
 8012820:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012822:	6878      	ldr	r0, [r7, #4]
 8012824:	f7ff ff80 	bl	8012728 <HAL_RTC_WaitForSynchro>
 8012828:	4603      	mov	r3, r0
 801282a:	2b00      	cmp	r3, #0
 801282c:	d005      	beq.n	801283a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	2203      	movs	r2, #3
 8012832:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8012836:	2303      	movs	r3, #3
 8012838:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801283a:	4b05      	ldr	r3, [pc, #20]	@ (8012850 <RTC_ExitInitMode+0x78>)
 801283c:	689b      	ldr	r3, [r3, #8]
 801283e:	4a04      	ldr	r2, [pc, #16]	@ (8012850 <RTC_ExitInitMode+0x78>)
 8012840:	f043 0320 	orr.w	r3, r3, #32
 8012844:	6093      	str	r3, [r2, #8]
  }

  return status;
 8012846:	7bfb      	ldrb	r3, [r7, #15]
}
 8012848:	4618      	mov	r0, r3
 801284a:	3710      	adds	r7, #16
 801284c:	46bd      	mov	sp, r7
 801284e:	bd80      	pop	{r7, pc}
 8012850:	40002800 	.word	0x40002800

08012854 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8012854:	b480      	push	{r7}
 8012856:	b085      	sub	sp, #20
 8012858:	af00      	add	r7, sp, #0
 801285a:	4603      	mov	r3, r0
 801285c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 801285e:	2300      	movs	r3, #0
 8012860:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8012862:	79fb      	ldrb	r3, [r7, #7]
 8012864:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8012866:	e005      	b.n	8012874 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	3301      	adds	r3, #1
 801286c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 801286e:	7afb      	ldrb	r3, [r7, #11]
 8012870:	3b0a      	subs	r3, #10
 8012872:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8012874:	7afb      	ldrb	r3, [r7, #11]
 8012876:	2b09      	cmp	r3, #9
 8012878:	d8f6      	bhi.n	8012868 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	b2db      	uxtb	r3, r3
 801287e:	011b      	lsls	r3, r3, #4
 8012880:	b2da      	uxtb	r2, r3
 8012882:	7afb      	ldrb	r3, [r7, #11]
 8012884:	4313      	orrs	r3, r2
 8012886:	b2db      	uxtb	r3, r3
}
 8012888:	4618      	mov	r0, r3
 801288a:	3714      	adds	r7, #20
 801288c:	46bd      	mov	sp, r7
 801288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012892:	4770      	bx	lr

08012894 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8012894:	b480      	push	{r7}
 8012896:	b085      	sub	sp, #20
 8012898:	af00      	add	r7, sp, #0
 801289a:	4603      	mov	r3, r0
 801289c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 801289e:	79fb      	ldrb	r3, [r7, #7]
 80128a0:	091b      	lsrs	r3, r3, #4
 80128a2:	b2db      	uxtb	r3, r3
 80128a4:	461a      	mov	r2, r3
 80128a6:	0092      	lsls	r2, r2, #2
 80128a8:	4413      	add	r3, r2
 80128aa:	005b      	lsls	r3, r3, #1
 80128ac:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80128ae:	79fb      	ldrb	r3, [r7, #7]
 80128b0:	f003 030f 	and.w	r3, r3, #15
 80128b4:	b2da      	uxtb	r2, r3
 80128b6:	7bfb      	ldrb	r3, [r7, #15]
 80128b8:	4413      	add	r3, r2
 80128ba:	b2db      	uxtb	r3, r3
}
 80128bc:	4618      	mov	r0, r3
 80128be:	3714      	adds	r7, #20
 80128c0:	46bd      	mov	sp, r7
 80128c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c6:	4770      	bx	lr

080128c8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80128c8:	b480      	push	{r7}
 80128ca:	b083      	sub	sp, #12
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80128d0:	bf00      	nop
 80128d2:	370c      	adds	r7, #12
 80128d4:	46bd      	mov	sp, r7
 80128d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128da:	4770      	bx	lr

080128dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b084      	sub	sp, #16
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d101      	bne.n	80128ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80128ea:	2301      	movs	r3, #1
 80128ec:	e095      	b.n	8012a1a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d108      	bne.n	8012908 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	685b      	ldr	r3, [r3, #4]
 80128fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80128fe:	d009      	beq.n	8012914 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	2200      	movs	r2, #0
 8012904:	61da      	str	r2, [r3, #28]
 8012906:	e005      	b.n	8012914 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	2200      	movs	r2, #0
 801290c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	2200      	movs	r2, #0
 8012912:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2200      	movs	r2, #0
 8012918:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8012920:	b2db      	uxtb	r3, r3
 8012922:	2b00      	cmp	r3, #0
 8012924:	d106      	bne.n	8012934 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	2200      	movs	r2, #0
 801292a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801292e:	6878      	ldr	r0, [r7, #4]
 8012930:	f7f5 fe18 	bl	8008564 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	2202      	movs	r2, #2
 8012938:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	681a      	ldr	r2, [r3, #0]
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801294a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	68db      	ldr	r3, [r3, #12]
 8012950:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8012954:	d902      	bls.n	801295c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8012956:	2300      	movs	r3, #0
 8012958:	60fb      	str	r3, [r7, #12]
 801295a:	e002      	b.n	8012962 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801295c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012960:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	68db      	ldr	r3, [r3, #12]
 8012966:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 801296a:	d007      	beq.n	801297c <HAL_SPI_Init+0xa0>
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	68db      	ldr	r3, [r3, #12]
 8012970:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8012974:	d002      	beq.n	801297c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	2200      	movs	r2, #0
 801297a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	685b      	ldr	r3, [r3, #4]
 8012980:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	689b      	ldr	r3, [r3, #8]
 8012988:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 801298c:	431a      	orrs	r2, r3
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	691b      	ldr	r3, [r3, #16]
 8012992:	f003 0302 	and.w	r3, r3, #2
 8012996:	431a      	orrs	r2, r3
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	695b      	ldr	r3, [r3, #20]
 801299c:	f003 0301 	and.w	r3, r3, #1
 80129a0:	431a      	orrs	r2, r3
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	699b      	ldr	r3, [r3, #24]
 80129a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80129aa:	431a      	orrs	r2, r3
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	69db      	ldr	r3, [r3, #28]
 80129b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80129b4:	431a      	orrs	r2, r3
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	6a1b      	ldr	r3, [r3, #32]
 80129ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80129be:	ea42 0103 	orr.w	r1, r2, r3
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80129c6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	430a      	orrs	r2, r1
 80129d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	699b      	ldr	r3, [r3, #24]
 80129d6:	0c1b      	lsrs	r3, r3, #16
 80129d8:	f003 0204 	and.w	r2, r3, #4
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129e0:	f003 0310 	and.w	r3, r3, #16
 80129e4:	431a      	orrs	r2, r3
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80129ea:	f003 0308 	and.w	r3, r3, #8
 80129ee:	431a      	orrs	r2, r3
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	68db      	ldr	r3, [r3, #12]
 80129f4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80129f8:	ea42 0103 	orr.w	r1, r2, r3
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	430a      	orrs	r2, r1
 8012a08:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	2201      	movs	r2, #1
 8012a14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8012a18:	2300      	movs	r3, #0
}
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	3710      	adds	r7, #16
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	bd80      	pop	{r7, pc}

08012a22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012a22:	b580      	push	{r7, lr}
 8012a24:	b088      	sub	sp, #32
 8012a26:	af00      	add	r7, sp, #0
 8012a28:	60f8      	str	r0, [r7, #12]
 8012a2a:	60b9      	str	r1, [r7, #8]
 8012a2c:	603b      	str	r3, [r7, #0]
 8012a2e:	4613      	mov	r3, r2
 8012a30:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012a32:	f7f9 fb1f 	bl	800c074 <HAL_GetTick>
 8012a36:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8012a38:	88fb      	ldrh	r3, [r7, #6]
 8012a3a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8012a42:	b2db      	uxtb	r3, r3
 8012a44:	2b01      	cmp	r3, #1
 8012a46:	d001      	beq.n	8012a4c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8012a48:	2302      	movs	r3, #2
 8012a4a:	e15c      	b.n	8012d06 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8012a4c:	68bb      	ldr	r3, [r7, #8]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d002      	beq.n	8012a58 <HAL_SPI_Transmit+0x36>
 8012a52:	88fb      	ldrh	r3, [r7, #6]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d101      	bne.n	8012a5c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8012a58:	2301      	movs	r3, #1
 8012a5a:	e154      	b.n	8012d06 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8012a62:	2b01      	cmp	r3, #1
 8012a64:	d101      	bne.n	8012a6a <HAL_SPI_Transmit+0x48>
 8012a66:	2302      	movs	r3, #2
 8012a68:	e14d      	b.n	8012d06 <HAL_SPI_Transmit+0x2e4>
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	2201      	movs	r2, #1
 8012a6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	2203      	movs	r2, #3
 8012a76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	68ba      	ldr	r2, [r7, #8]
 8012a84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	88fa      	ldrh	r2, [r7, #6]
 8012a8a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	88fa      	ldrh	r2, [r7, #6]
 8012a90:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	2200      	movs	r2, #0
 8012a96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	2200      	movs	r2, #0
 8012aac:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	2200      	movs	r2, #0
 8012ab2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	689b      	ldr	r3, [r3, #8]
 8012ab8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012abc:	d10f      	bne.n	8012ade <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	681a      	ldr	r2, [r3, #0]
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012acc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	681a      	ldr	r2, [r3, #0]
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8012adc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012ae8:	2b40      	cmp	r3, #64	@ 0x40
 8012aea:	d007      	beq.n	8012afc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	681a      	ldr	r2, [r3, #0]
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012afa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	68db      	ldr	r3, [r3, #12]
 8012b00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8012b04:	d952      	bls.n	8012bac <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	685b      	ldr	r3, [r3, #4]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d002      	beq.n	8012b14 <HAL_SPI_Transmit+0xf2>
 8012b0e:	8b7b      	ldrh	r3, [r7, #26]
 8012b10:	2b01      	cmp	r3, #1
 8012b12:	d145      	bne.n	8012ba0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b18:	881a      	ldrh	r2, [r3, #0]
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b24:	1c9a      	adds	r2, r3, #2
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012b2e:	b29b      	uxth	r3, r3
 8012b30:	3b01      	subs	r3, #1
 8012b32:	b29a      	uxth	r2, r3
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8012b38:	e032      	b.n	8012ba0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	689b      	ldr	r3, [r3, #8]
 8012b40:	f003 0302 	and.w	r3, r3, #2
 8012b44:	2b02      	cmp	r3, #2
 8012b46:	d112      	bne.n	8012b6e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b4c:	881a      	ldrh	r2, [r3, #0]
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b58:	1c9a      	adds	r2, r3, #2
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012b62:	b29b      	uxth	r3, r3
 8012b64:	3b01      	subs	r3, #1
 8012b66:	b29a      	uxth	r2, r3
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8012b6c:	e018      	b.n	8012ba0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012b6e:	f7f9 fa81 	bl	800c074 <HAL_GetTick>
 8012b72:	4602      	mov	r2, r0
 8012b74:	69fb      	ldr	r3, [r7, #28]
 8012b76:	1ad3      	subs	r3, r2, r3
 8012b78:	683a      	ldr	r2, [r7, #0]
 8012b7a:	429a      	cmp	r2, r3
 8012b7c:	d803      	bhi.n	8012b86 <HAL_SPI_Transmit+0x164>
 8012b7e:	683b      	ldr	r3, [r7, #0]
 8012b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b84:	d102      	bne.n	8012b8c <HAL_SPI_Transmit+0x16a>
 8012b86:	683b      	ldr	r3, [r7, #0]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d109      	bne.n	8012ba0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	2201      	movs	r2, #1
 8012b90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	2200      	movs	r2, #0
 8012b98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8012b9c:	2303      	movs	r3, #3
 8012b9e:	e0b2      	b.n	8012d06 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012ba4:	b29b      	uxth	r3, r3
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d1c7      	bne.n	8012b3a <HAL_SPI_Transmit+0x118>
 8012baa:	e083      	b.n	8012cb4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	685b      	ldr	r3, [r3, #4]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d002      	beq.n	8012bba <HAL_SPI_Transmit+0x198>
 8012bb4:	8b7b      	ldrh	r3, [r7, #26]
 8012bb6:	2b01      	cmp	r3, #1
 8012bb8:	d177      	bne.n	8012caa <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012bbe:	b29b      	uxth	r3, r3
 8012bc0:	2b01      	cmp	r3, #1
 8012bc2:	d912      	bls.n	8012bea <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012bc8:	881a      	ldrh	r2, [r3, #0]
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012bd4:	1c9a      	adds	r2, r3, #2
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012bde:	b29b      	uxth	r3, r3
 8012be0:	3b02      	subs	r3, #2
 8012be2:	b29a      	uxth	r2, r3
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8012be8:	e05f      	b.n	8012caa <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	330c      	adds	r3, #12
 8012bf4:	7812      	ldrb	r2, [r2, #0]
 8012bf6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012bfc:	1c5a      	adds	r2, r3, #1
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012c06:	b29b      	uxth	r3, r3
 8012c08:	3b01      	subs	r3, #1
 8012c0a:	b29a      	uxth	r2, r3
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8012c10:	e04b      	b.n	8012caa <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	689b      	ldr	r3, [r3, #8]
 8012c18:	f003 0302 	and.w	r3, r3, #2
 8012c1c:	2b02      	cmp	r3, #2
 8012c1e:	d12b      	bne.n	8012c78 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012c24:	b29b      	uxth	r3, r3
 8012c26:	2b01      	cmp	r3, #1
 8012c28:	d912      	bls.n	8012c50 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c2e:	881a      	ldrh	r2, [r3, #0]
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c3a:	1c9a      	adds	r2, r3, #2
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012c44:	b29b      	uxth	r3, r3
 8012c46:	3b02      	subs	r3, #2
 8012c48:	b29a      	uxth	r2, r3
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8012c4e:	e02c      	b.n	8012caa <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	330c      	adds	r3, #12
 8012c5a:	7812      	ldrb	r2, [r2, #0]
 8012c5c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c62:	1c5a      	adds	r2, r3, #1
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012c6c:	b29b      	uxth	r3, r3
 8012c6e:	3b01      	subs	r3, #1
 8012c70:	b29a      	uxth	r2, r3
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8012c76:	e018      	b.n	8012caa <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012c78:	f7f9 f9fc 	bl	800c074 <HAL_GetTick>
 8012c7c:	4602      	mov	r2, r0
 8012c7e:	69fb      	ldr	r3, [r7, #28]
 8012c80:	1ad3      	subs	r3, r2, r3
 8012c82:	683a      	ldr	r2, [r7, #0]
 8012c84:	429a      	cmp	r2, r3
 8012c86:	d803      	bhi.n	8012c90 <HAL_SPI_Transmit+0x26e>
 8012c88:	683b      	ldr	r3, [r7, #0]
 8012c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c8e:	d102      	bne.n	8012c96 <HAL_SPI_Transmit+0x274>
 8012c90:	683b      	ldr	r3, [r7, #0]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d109      	bne.n	8012caa <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	2201      	movs	r2, #1
 8012c9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	2200      	movs	r2, #0
 8012ca2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8012ca6:	2303      	movs	r3, #3
 8012ca8:	e02d      	b.n	8012d06 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012cae:	b29b      	uxth	r3, r3
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d1ae      	bne.n	8012c12 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012cb4:	69fa      	ldr	r2, [r7, #28]
 8012cb6:	6839      	ldr	r1, [r7, #0]
 8012cb8:	68f8      	ldr	r0, [r7, #12]
 8012cba:	f000 fcf5 	bl	80136a8 <SPI_EndRxTxTransaction>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d002      	beq.n	8012cca <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	2220      	movs	r2, #32
 8012cc8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	689b      	ldr	r3, [r3, #8]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d10a      	bne.n	8012ce8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	617b      	str	r3, [r7, #20]
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	68db      	ldr	r3, [r3, #12]
 8012cdc:	617b      	str	r3, [r7, #20]
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	689b      	ldr	r3, [r3, #8]
 8012ce4:	617b      	str	r3, [r7, #20]
 8012ce6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	2201      	movs	r2, #1
 8012cec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d001      	beq.n	8012d04 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8012d00:	2301      	movs	r3, #1
 8012d02:	e000      	b.n	8012d06 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8012d04:	2300      	movs	r3, #0
  }
}
 8012d06:	4618      	mov	r0, r3
 8012d08:	3720      	adds	r7, #32
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	bd80      	pop	{r7, pc}

08012d0e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012d0e:	b580      	push	{r7, lr}
 8012d10:	b088      	sub	sp, #32
 8012d12:	af02      	add	r7, sp, #8
 8012d14:	60f8      	str	r0, [r7, #12]
 8012d16:	60b9      	str	r1, [r7, #8]
 8012d18:	603b      	str	r3, [r7, #0]
 8012d1a:	4613      	mov	r3, r2
 8012d1c:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8012d24:	b2db      	uxtb	r3, r3
 8012d26:	2b01      	cmp	r3, #1
 8012d28:	d001      	beq.n	8012d2e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8012d2a:	2302      	movs	r3, #2
 8012d2c:	e123      	b.n	8012f76 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	685b      	ldr	r3, [r3, #4]
 8012d32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012d36:	d112      	bne.n	8012d5e <HAL_SPI_Receive+0x50>
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	689b      	ldr	r3, [r3, #8]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d10e      	bne.n	8012d5e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	2204      	movs	r2, #4
 8012d44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8012d48:	88fa      	ldrh	r2, [r7, #6]
 8012d4a:	683b      	ldr	r3, [r7, #0]
 8012d4c:	9300      	str	r3, [sp, #0]
 8012d4e:	4613      	mov	r3, r2
 8012d50:	68ba      	ldr	r2, [r7, #8]
 8012d52:	68b9      	ldr	r1, [r7, #8]
 8012d54:	68f8      	ldr	r0, [r7, #12]
 8012d56:	f000 f912 	bl	8012f7e <HAL_SPI_TransmitReceive>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	e10b      	b.n	8012f76 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012d5e:	f7f9 f989 	bl	800c074 <HAL_GetTick>
 8012d62:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8012d64:	68bb      	ldr	r3, [r7, #8]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d002      	beq.n	8012d70 <HAL_SPI_Receive+0x62>
 8012d6a:	88fb      	ldrh	r3, [r7, #6]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d101      	bne.n	8012d74 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8012d70:	2301      	movs	r3, #1
 8012d72:	e100      	b.n	8012f76 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8012d7a:	2b01      	cmp	r3, #1
 8012d7c:	d101      	bne.n	8012d82 <HAL_SPI_Receive+0x74>
 8012d7e:	2302      	movs	r3, #2
 8012d80:	e0f9      	b.n	8012f76 <HAL_SPI_Receive+0x268>
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	2201      	movs	r2, #1
 8012d86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	2204      	movs	r2, #4
 8012d8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	2200      	movs	r2, #0
 8012d96:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	68ba      	ldr	r2, [r7, #8]
 8012d9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	88fa      	ldrh	r2, [r7, #6]
 8012da2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	88fa      	ldrh	r2, [r7, #6]
 8012daa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	2200      	movs	r2, #0
 8012db2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	2200      	movs	r2, #0
 8012db8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	2200      	movs	r2, #0
 8012dbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	2200      	movs	r2, #0
 8012dca:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	68db      	ldr	r3, [r3, #12]
 8012dd0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8012dd4:	d908      	bls.n	8012de8 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	685a      	ldr	r2, [r3, #4]
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8012de4:	605a      	str	r2, [r3, #4]
 8012de6:	e007      	b.n	8012df8 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	685a      	ldr	r2, [r3, #4]
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8012df6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	689b      	ldr	r3, [r3, #8]
 8012dfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012e00:	d10f      	bne.n	8012e22 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	681a      	ldr	r2, [r3, #0]
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012e10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	681a      	ldr	r2, [r3, #0]
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8012e20:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012e2c:	2b40      	cmp	r3, #64	@ 0x40
 8012e2e:	d007      	beq.n	8012e40 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	681a      	ldr	r2, [r3, #0]
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012e3e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	68db      	ldr	r3, [r3, #12]
 8012e44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8012e48:	d875      	bhi.n	8012f36 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8012e4a:	e037      	b.n	8012ebc <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	689b      	ldr	r3, [r3, #8]
 8012e52:	f003 0301 	and.w	r3, r3, #1
 8012e56:	2b01      	cmp	r3, #1
 8012e58:	d117      	bne.n	8012e8a <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	f103 020c 	add.w	r2, r3, #12
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e66:	7812      	ldrb	r2, [r2, #0]
 8012e68:	b2d2      	uxtb	r2, r2
 8012e6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e70:	1c5a      	adds	r2, r3, #1
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8012e7c:	b29b      	uxth	r3, r3
 8012e7e:	3b01      	subs	r3, #1
 8012e80:	b29a      	uxth	r2, r3
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8012e88:	e018      	b.n	8012ebc <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012e8a:	f7f9 f8f3 	bl	800c074 <HAL_GetTick>
 8012e8e:	4602      	mov	r2, r0
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	1ad3      	subs	r3, r2, r3
 8012e94:	683a      	ldr	r2, [r7, #0]
 8012e96:	429a      	cmp	r2, r3
 8012e98:	d803      	bhi.n	8012ea2 <HAL_SPI_Receive+0x194>
 8012e9a:	683b      	ldr	r3, [r7, #0]
 8012e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ea0:	d102      	bne.n	8012ea8 <HAL_SPI_Receive+0x19a>
 8012ea2:	683b      	ldr	r3, [r7, #0]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d109      	bne.n	8012ebc <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	2201      	movs	r2, #1
 8012eac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8012eb8:	2303      	movs	r3, #3
 8012eba:	e05c      	b.n	8012f76 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8012ec2:	b29b      	uxth	r3, r3
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d1c1      	bne.n	8012e4c <HAL_SPI_Receive+0x13e>
 8012ec8:	e03b      	b.n	8012f42 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	689b      	ldr	r3, [r3, #8]
 8012ed0:	f003 0301 	and.w	r3, r3, #1
 8012ed4:	2b01      	cmp	r3, #1
 8012ed6:	d115      	bne.n	8012f04 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	68da      	ldr	r2, [r3, #12]
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012ee2:	b292      	uxth	r2, r2
 8012ee4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012eea:	1c9a      	adds	r2, r3, #2
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8012ef6:	b29b      	uxth	r3, r3
 8012ef8:	3b01      	subs	r3, #1
 8012efa:	b29a      	uxth	r2, r3
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8012f02:	e018      	b.n	8012f36 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012f04:	f7f9 f8b6 	bl	800c074 <HAL_GetTick>
 8012f08:	4602      	mov	r2, r0
 8012f0a:	697b      	ldr	r3, [r7, #20]
 8012f0c:	1ad3      	subs	r3, r2, r3
 8012f0e:	683a      	ldr	r2, [r7, #0]
 8012f10:	429a      	cmp	r2, r3
 8012f12:	d803      	bhi.n	8012f1c <HAL_SPI_Receive+0x20e>
 8012f14:	683b      	ldr	r3, [r7, #0]
 8012f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f1a:	d102      	bne.n	8012f22 <HAL_SPI_Receive+0x214>
 8012f1c:	683b      	ldr	r3, [r7, #0]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d109      	bne.n	8012f36 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	2201      	movs	r2, #1
 8012f26:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8012f32:	2303      	movs	r3, #3
 8012f34:	e01f      	b.n	8012f76 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8012f3c:	b29b      	uxth	r3, r3
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d1c3      	bne.n	8012eca <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012f42:	697a      	ldr	r2, [r7, #20]
 8012f44:	6839      	ldr	r1, [r7, #0]
 8012f46:	68f8      	ldr	r0, [r7, #12]
 8012f48:	f000 fb56 	bl	80135f8 <SPI_EndRxTransaction>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d002      	beq.n	8012f58 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	2220      	movs	r2, #32
 8012f56:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	2201      	movs	r2, #1
 8012f5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	2200      	movs	r2, #0
 8012f64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d001      	beq.n	8012f74 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8012f70:	2301      	movs	r3, #1
 8012f72:	e000      	b.n	8012f76 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8012f74:	2300      	movs	r3, #0
  }
}
 8012f76:	4618      	mov	r0, r3
 8012f78:	3718      	adds	r7, #24
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	bd80      	pop	{r7, pc}

08012f7e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8012f7e:	b580      	push	{r7, lr}
 8012f80:	b08a      	sub	sp, #40	@ 0x28
 8012f82:	af00      	add	r7, sp, #0
 8012f84:	60f8      	str	r0, [r7, #12]
 8012f86:	60b9      	str	r1, [r7, #8]
 8012f88:	607a      	str	r2, [r7, #4]
 8012f8a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8012f8c:	2301      	movs	r3, #1
 8012f8e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012f90:	f7f9 f870 	bl	800c074 <HAL_GetTick>
 8012f94:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8012f9c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	685b      	ldr	r3, [r3, #4]
 8012fa2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8012fa4:	887b      	ldrh	r3, [r7, #2]
 8012fa6:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8012fa8:	887b      	ldrh	r3, [r7, #2]
 8012faa:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8012fac:	7ffb      	ldrb	r3, [r7, #31]
 8012fae:	2b01      	cmp	r3, #1
 8012fb0:	d00c      	beq.n	8012fcc <HAL_SPI_TransmitReceive+0x4e>
 8012fb2:	69bb      	ldr	r3, [r7, #24]
 8012fb4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012fb8:	d106      	bne.n	8012fc8 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	689b      	ldr	r3, [r3, #8]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d102      	bne.n	8012fc8 <HAL_SPI_TransmitReceive+0x4a>
 8012fc2:	7ffb      	ldrb	r3, [r7, #31]
 8012fc4:	2b04      	cmp	r3, #4
 8012fc6:	d001      	beq.n	8012fcc <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8012fc8:	2302      	movs	r3, #2
 8012fca:	e1f3      	b.n	80133b4 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8012fcc:	68bb      	ldr	r3, [r7, #8]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d005      	beq.n	8012fde <HAL_SPI_TransmitReceive+0x60>
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d002      	beq.n	8012fde <HAL_SPI_TransmitReceive+0x60>
 8012fd8:	887b      	ldrh	r3, [r7, #2]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d101      	bne.n	8012fe2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8012fde:	2301      	movs	r3, #1
 8012fe0:	e1e8      	b.n	80133b4 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8012fe8:	2b01      	cmp	r3, #1
 8012fea:	d101      	bne.n	8012ff0 <HAL_SPI_TransmitReceive+0x72>
 8012fec:	2302      	movs	r3, #2
 8012fee:	e1e1      	b.n	80133b4 <HAL_SPI_TransmitReceive+0x436>
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	2201      	movs	r2, #1
 8012ff4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8012ffe:	b2db      	uxtb	r3, r3
 8013000:	2b04      	cmp	r3, #4
 8013002:	d003      	beq.n	801300c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	2205      	movs	r2, #5
 8013008:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	2200      	movs	r2, #0
 8013010:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	687a      	ldr	r2, [r7, #4]
 8013016:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	887a      	ldrh	r2, [r7, #2]
 801301c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	887a      	ldrh	r2, [r7, #2]
 8013024:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	68ba      	ldr	r2, [r7, #8]
 801302c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	887a      	ldrh	r2, [r7, #2]
 8013032:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	887a      	ldrh	r2, [r7, #2]
 8013038:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	2200      	movs	r2, #0
 801303e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	2200      	movs	r2, #0
 8013044:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	68db      	ldr	r3, [r3, #12]
 801304a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801304e:	d802      	bhi.n	8013056 <HAL_SPI_TransmitReceive+0xd8>
 8013050:	8abb      	ldrh	r3, [r7, #20]
 8013052:	2b01      	cmp	r3, #1
 8013054:	d908      	bls.n	8013068 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	685a      	ldr	r2, [r3, #4]
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8013064:	605a      	str	r2, [r3, #4]
 8013066:	e007      	b.n	8013078 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	685a      	ldr	r2, [r3, #4]
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8013076:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013082:	2b40      	cmp	r3, #64	@ 0x40
 8013084:	d007      	beq.n	8013096 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	681a      	ldr	r2, [r3, #0]
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013094:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	68db      	ldr	r3, [r3, #12]
 801309a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801309e:	f240 8083 	bls.w	80131a8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	685b      	ldr	r3, [r3, #4]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d002      	beq.n	80130b0 <HAL_SPI_TransmitReceive+0x132>
 80130aa:	8afb      	ldrh	r3, [r7, #22]
 80130ac:	2b01      	cmp	r3, #1
 80130ae:	d16f      	bne.n	8013190 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80130b4:	881a      	ldrh	r2, [r3, #0]
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80130c0:	1c9a      	adds	r2, r3, #2
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80130ca:	b29b      	uxth	r3, r3
 80130cc:	3b01      	subs	r3, #1
 80130ce:	b29a      	uxth	r2, r3
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80130d4:	e05c      	b.n	8013190 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	689b      	ldr	r3, [r3, #8]
 80130dc:	f003 0302 	and.w	r3, r3, #2
 80130e0:	2b02      	cmp	r3, #2
 80130e2:	d11b      	bne.n	801311c <HAL_SPI_TransmitReceive+0x19e>
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80130e8:	b29b      	uxth	r3, r3
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d016      	beq.n	801311c <HAL_SPI_TransmitReceive+0x19e>
 80130ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130f0:	2b01      	cmp	r3, #1
 80130f2:	d113      	bne.n	801311c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80130f8:	881a      	ldrh	r2, [r3, #0]
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013104:	1c9a      	adds	r2, r3, #2
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801310e:	b29b      	uxth	r3, r3
 8013110:	3b01      	subs	r3, #1
 8013112:	b29a      	uxth	r2, r3
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013118:	2300      	movs	r3, #0
 801311a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	689b      	ldr	r3, [r3, #8]
 8013122:	f003 0301 	and.w	r3, r3, #1
 8013126:	2b01      	cmp	r3, #1
 8013128:	d11c      	bne.n	8013164 <HAL_SPI_TransmitReceive+0x1e6>
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8013130:	b29b      	uxth	r3, r3
 8013132:	2b00      	cmp	r3, #0
 8013134:	d016      	beq.n	8013164 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	68da      	ldr	r2, [r3, #12]
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013140:	b292      	uxth	r2, r2
 8013142:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013148:	1c9a      	adds	r2, r3, #2
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8013154:	b29b      	uxth	r3, r3
 8013156:	3b01      	subs	r3, #1
 8013158:	b29a      	uxth	r2, r3
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013160:	2301      	movs	r3, #1
 8013162:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8013164:	f7f8 ff86 	bl	800c074 <HAL_GetTick>
 8013168:	4602      	mov	r2, r0
 801316a:	6a3b      	ldr	r3, [r7, #32]
 801316c:	1ad3      	subs	r3, r2, r3
 801316e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013170:	429a      	cmp	r2, r3
 8013172:	d80d      	bhi.n	8013190 <HAL_SPI_TransmitReceive+0x212>
 8013174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013176:	f1b3 3fff 	cmp.w	r3, #4294967295
 801317a:	d009      	beq.n	8013190 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	2201      	movs	r2, #1
 8013180:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	2200      	movs	r2, #0
 8013188:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 801318c:	2303      	movs	r3, #3
 801318e:	e111      	b.n	80133b4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013194:	b29b      	uxth	r3, r3
 8013196:	2b00      	cmp	r3, #0
 8013198:	d19d      	bne.n	80130d6 <HAL_SPI_TransmitReceive+0x158>
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80131a0:	b29b      	uxth	r3, r3
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d197      	bne.n	80130d6 <HAL_SPI_TransmitReceive+0x158>
 80131a6:	e0e5      	b.n	8013374 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	685b      	ldr	r3, [r3, #4]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d003      	beq.n	80131b8 <HAL_SPI_TransmitReceive+0x23a>
 80131b0:	8afb      	ldrh	r3, [r7, #22]
 80131b2:	2b01      	cmp	r3, #1
 80131b4:	f040 80d1 	bne.w	801335a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80131bc:	b29b      	uxth	r3, r3
 80131be:	2b01      	cmp	r3, #1
 80131c0:	d912      	bls.n	80131e8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131c6:	881a      	ldrh	r2, [r3, #0]
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131d2:	1c9a      	adds	r2, r3, #2
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80131dc:	b29b      	uxth	r3, r3
 80131de:	3b02      	subs	r3, #2
 80131e0:	b29a      	uxth	r2, r3
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80131e6:	e0b8      	b.n	801335a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	330c      	adds	r3, #12
 80131f2:	7812      	ldrb	r2, [r2, #0]
 80131f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131fa:	1c5a      	adds	r2, r3, #1
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013204:	b29b      	uxth	r3, r3
 8013206:	3b01      	subs	r3, #1
 8013208:	b29a      	uxth	r2, r3
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801320e:	e0a4      	b.n	801335a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	689b      	ldr	r3, [r3, #8]
 8013216:	f003 0302 	and.w	r3, r3, #2
 801321a:	2b02      	cmp	r3, #2
 801321c:	d134      	bne.n	8013288 <HAL_SPI_TransmitReceive+0x30a>
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013222:	b29b      	uxth	r3, r3
 8013224:	2b00      	cmp	r3, #0
 8013226:	d02f      	beq.n	8013288 <HAL_SPI_TransmitReceive+0x30a>
 8013228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801322a:	2b01      	cmp	r3, #1
 801322c:	d12c      	bne.n	8013288 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013232:	b29b      	uxth	r3, r3
 8013234:	2b01      	cmp	r3, #1
 8013236:	d912      	bls.n	801325e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801323c:	881a      	ldrh	r2, [r3, #0]
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013248:	1c9a      	adds	r2, r3, #2
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013252:	b29b      	uxth	r3, r3
 8013254:	3b02      	subs	r3, #2
 8013256:	b29a      	uxth	r2, r3
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801325c:	e012      	b.n	8013284 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	330c      	adds	r3, #12
 8013268:	7812      	ldrb	r2, [r2, #0]
 801326a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013270:	1c5a      	adds	r2, r3, #1
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801327a:	b29b      	uxth	r3, r3
 801327c:	3b01      	subs	r3, #1
 801327e:	b29a      	uxth	r2, r3
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013284:	2300      	movs	r3, #0
 8013286:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	689b      	ldr	r3, [r3, #8]
 801328e:	f003 0301 	and.w	r3, r3, #1
 8013292:	2b01      	cmp	r3, #1
 8013294:	d148      	bne.n	8013328 <HAL_SPI_TransmitReceive+0x3aa>
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801329c:	b29b      	uxth	r3, r3
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d042      	beq.n	8013328 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80132a8:	b29b      	uxth	r3, r3
 80132aa:	2b01      	cmp	r3, #1
 80132ac:	d923      	bls.n	80132f6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	68da      	ldr	r2, [r3, #12]
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80132b8:	b292      	uxth	r2, r2
 80132ba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80132c0:	1c9a      	adds	r2, r3, #2
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80132cc:	b29b      	uxth	r3, r3
 80132ce:	3b02      	subs	r3, #2
 80132d0:	b29a      	uxth	r2, r3
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80132de:	b29b      	uxth	r3, r3
 80132e0:	2b01      	cmp	r3, #1
 80132e2:	d81f      	bhi.n	8013324 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	685a      	ldr	r2, [r3, #4]
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80132f2:	605a      	str	r2, [r3, #4]
 80132f4:	e016      	b.n	8013324 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	f103 020c 	add.w	r2, r3, #12
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013302:	7812      	ldrb	r2, [r2, #0]
 8013304:	b2d2      	uxtb	r2, r2
 8013306:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801330c:	1c5a      	adds	r2, r3, #1
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8013318:	b29b      	uxth	r3, r3
 801331a:	3b01      	subs	r3, #1
 801331c:	b29a      	uxth	r2, r3
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013324:	2301      	movs	r3, #1
 8013326:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8013328:	f7f8 fea4 	bl	800c074 <HAL_GetTick>
 801332c:	4602      	mov	r2, r0
 801332e:	6a3b      	ldr	r3, [r7, #32]
 8013330:	1ad3      	subs	r3, r2, r3
 8013332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013334:	429a      	cmp	r2, r3
 8013336:	d803      	bhi.n	8013340 <HAL_SPI_TransmitReceive+0x3c2>
 8013338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801333a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801333e:	d102      	bne.n	8013346 <HAL_SPI_TransmitReceive+0x3c8>
 8013340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013342:	2b00      	cmp	r3, #0
 8013344:	d109      	bne.n	801335a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	2201      	movs	r2, #1
 801334a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	2200      	movs	r2, #0
 8013352:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8013356:	2303      	movs	r3, #3
 8013358:	e02c      	b.n	80133b4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801335e:	b29b      	uxth	r3, r3
 8013360:	2b00      	cmp	r3, #0
 8013362:	f47f af55 	bne.w	8013210 <HAL_SPI_TransmitReceive+0x292>
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801336c:	b29b      	uxth	r3, r3
 801336e:	2b00      	cmp	r3, #0
 8013370:	f47f af4e 	bne.w	8013210 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013374:	6a3a      	ldr	r2, [r7, #32]
 8013376:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013378:	68f8      	ldr	r0, [r7, #12]
 801337a:	f000 f995 	bl	80136a8 <SPI_EndRxTxTransaction>
 801337e:	4603      	mov	r3, r0
 8013380:	2b00      	cmp	r3, #0
 8013382:	d008      	beq.n	8013396 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	2220      	movs	r2, #32
 8013388:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	2200      	movs	r2, #0
 801338e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8013392:	2301      	movs	r3, #1
 8013394:	e00e      	b.n	80133b4 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	2201      	movs	r2, #1
 801339a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	2200      	movs	r2, #0
 80133a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d001      	beq.n	80133b2 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80133ae:	2301      	movs	r3, #1
 80133b0:	e000      	b.n	80133b4 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80133b2:	2300      	movs	r3, #0
  }
}
 80133b4:	4618      	mov	r0, r3
 80133b6:	3728      	adds	r7, #40	@ 0x28
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bd80      	pop	{r7, pc}

080133bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80133bc:	b580      	push	{r7, lr}
 80133be:	b088      	sub	sp, #32
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	60f8      	str	r0, [r7, #12]
 80133c4:	60b9      	str	r1, [r7, #8]
 80133c6:	603b      	str	r3, [r7, #0]
 80133c8:	4613      	mov	r3, r2
 80133ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80133cc:	f7f8 fe52 	bl	800c074 <HAL_GetTick>
 80133d0:	4602      	mov	r2, r0
 80133d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133d4:	1a9b      	subs	r3, r3, r2
 80133d6:	683a      	ldr	r2, [r7, #0]
 80133d8:	4413      	add	r3, r2
 80133da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80133dc:	f7f8 fe4a 	bl	800c074 <HAL_GetTick>
 80133e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80133e2:	4b39      	ldr	r3, [pc, #228]	@ (80134c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	015b      	lsls	r3, r3, #5
 80133e8:	0d1b      	lsrs	r3, r3, #20
 80133ea:	69fa      	ldr	r2, [r7, #28]
 80133ec:	fb02 f303 	mul.w	r3, r2, r3
 80133f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80133f2:	e054      	b.n	801349e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80133f4:	683b      	ldr	r3, [r7, #0]
 80133f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133fa:	d050      	beq.n	801349e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80133fc:	f7f8 fe3a 	bl	800c074 <HAL_GetTick>
 8013400:	4602      	mov	r2, r0
 8013402:	69bb      	ldr	r3, [r7, #24]
 8013404:	1ad3      	subs	r3, r2, r3
 8013406:	69fa      	ldr	r2, [r7, #28]
 8013408:	429a      	cmp	r2, r3
 801340a:	d902      	bls.n	8013412 <SPI_WaitFlagStateUntilTimeout+0x56>
 801340c:	69fb      	ldr	r3, [r7, #28]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d13d      	bne.n	801348e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	685a      	ldr	r2, [r3, #4]
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8013420:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	685b      	ldr	r3, [r3, #4]
 8013426:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801342a:	d111      	bne.n	8013450 <SPI_WaitFlagStateUntilTimeout+0x94>
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	689b      	ldr	r3, [r3, #8]
 8013430:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013434:	d004      	beq.n	8013440 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	689b      	ldr	r3, [r3, #8]
 801343a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801343e:	d107      	bne.n	8013450 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	681a      	ldr	r2, [r3, #0]
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801344e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013454:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013458:	d10f      	bne.n	801347a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	681a      	ldr	r2, [r3, #0]
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8013468:	601a      	str	r2, [r3, #0]
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	681a      	ldr	r2, [r3, #0]
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8013478:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	2201      	movs	r2, #1
 801347e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	2200      	movs	r2, #0
 8013486:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 801348a:	2303      	movs	r3, #3
 801348c:	e017      	b.n	80134be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801348e:	697b      	ldr	r3, [r7, #20]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d101      	bne.n	8013498 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8013494:	2300      	movs	r3, #0
 8013496:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8013498:	697b      	ldr	r3, [r7, #20]
 801349a:	3b01      	subs	r3, #1
 801349c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	689a      	ldr	r2, [r3, #8]
 80134a4:	68bb      	ldr	r3, [r7, #8]
 80134a6:	4013      	ands	r3, r2
 80134a8:	68ba      	ldr	r2, [r7, #8]
 80134aa:	429a      	cmp	r2, r3
 80134ac:	bf0c      	ite	eq
 80134ae:	2301      	moveq	r3, #1
 80134b0:	2300      	movne	r3, #0
 80134b2:	b2db      	uxtb	r3, r3
 80134b4:	461a      	mov	r2, r3
 80134b6:	79fb      	ldrb	r3, [r7, #7]
 80134b8:	429a      	cmp	r2, r3
 80134ba:	d19b      	bne.n	80133f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80134bc:	2300      	movs	r3, #0
}
 80134be:	4618      	mov	r0, r3
 80134c0:	3720      	adds	r7, #32
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bd80      	pop	{r7, pc}
 80134c6:	bf00      	nop
 80134c8:	20000000 	.word	0x20000000

080134cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b08a      	sub	sp, #40	@ 0x28
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	60f8      	str	r0, [r7, #12]
 80134d4:	60b9      	str	r1, [r7, #8]
 80134d6:	607a      	str	r2, [r7, #4]
 80134d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80134da:	2300      	movs	r3, #0
 80134dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80134de:	f7f8 fdc9 	bl	800c074 <HAL_GetTick>
 80134e2:	4602      	mov	r2, r0
 80134e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134e6:	1a9b      	subs	r3, r3, r2
 80134e8:	683a      	ldr	r2, [r7, #0]
 80134ea:	4413      	add	r3, r2
 80134ec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80134ee:	f7f8 fdc1 	bl	800c074 <HAL_GetTick>
 80134f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	330c      	adds	r3, #12
 80134fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80134fc:	4b3d      	ldr	r3, [pc, #244]	@ (80135f4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80134fe:	681a      	ldr	r2, [r3, #0]
 8013500:	4613      	mov	r3, r2
 8013502:	009b      	lsls	r3, r3, #2
 8013504:	4413      	add	r3, r2
 8013506:	00da      	lsls	r2, r3, #3
 8013508:	1ad3      	subs	r3, r2, r3
 801350a:	0d1b      	lsrs	r3, r3, #20
 801350c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801350e:	fb02 f303 	mul.w	r3, r2, r3
 8013512:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8013514:	e060      	b.n	80135d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8013516:	68bb      	ldr	r3, [r7, #8]
 8013518:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 801351c:	d107      	bne.n	801352e <SPI_WaitFifoStateUntilTimeout+0x62>
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d104      	bne.n	801352e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8013524:	69fb      	ldr	r3, [r7, #28]
 8013526:	781b      	ldrb	r3, [r3, #0]
 8013528:	b2db      	uxtb	r3, r3
 801352a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801352c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801352e:	683b      	ldr	r3, [r7, #0]
 8013530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013534:	d050      	beq.n	80135d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8013536:	f7f8 fd9d 	bl	800c074 <HAL_GetTick>
 801353a:	4602      	mov	r2, r0
 801353c:	6a3b      	ldr	r3, [r7, #32]
 801353e:	1ad3      	subs	r3, r2, r3
 8013540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013542:	429a      	cmp	r2, r3
 8013544:	d902      	bls.n	801354c <SPI_WaitFifoStateUntilTimeout+0x80>
 8013546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013548:	2b00      	cmp	r3, #0
 801354a:	d13d      	bne.n	80135c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	685a      	ldr	r2, [r3, #4]
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 801355a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	685b      	ldr	r3, [r3, #4]
 8013560:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8013564:	d111      	bne.n	801358a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	689b      	ldr	r3, [r3, #8]
 801356a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801356e:	d004      	beq.n	801357a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	689b      	ldr	r3, [r3, #8]
 8013574:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013578:	d107      	bne.n	801358a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	681a      	ldr	r2, [r3, #0]
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8013588:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801358e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013592:	d10f      	bne.n	80135b4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	681a      	ldr	r2, [r3, #0]
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80135a2:	601a      	str	r2, [r3, #0]
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	681a      	ldr	r2, [r3, #0]
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80135b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	2201      	movs	r2, #1
 80135b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	2200      	movs	r2, #0
 80135c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80135c4:	2303      	movs	r3, #3
 80135c6:	e010      	b.n	80135ea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80135c8:	69bb      	ldr	r3, [r7, #24]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d101      	bne.n	80135d2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80135ce:	2300      	movs	r3, #0
 80135d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80135d2:	69bb      	ldr	r3, [r7, #24]
 80135d4:	3b01      	subs	r3, #1
 80135d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	689a      	ldr	r2, [r3, #8]
 80135de:	68bb      	ldr	r3, [r7, #8]
 80135e0:	4013      	ands	r3, r2
 80135e2:	687a      	ldr	r2, [r7, #4]
 80135e4:	429a      	cmp	r2, r3
 80135e6:	d196      	bne.n	8013516 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80135e8:	2300      	movs	r3, #0
}
 80135ea:	4618      	mov	r0, r3
 80135ec:	3728      	adds	r7, #40	@ 0x28
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bd80      	pop	{r7, pc}
 80135f2:	bf00      	nop
 80135f4:	20000000 	.word	0x20000000

080135f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b086      	sub	sp, #24
 80135fc:	af02      	add	r7, sp, #8
 80135fe:	60f8      	str	r0, [r7, #12]
 8013600:	60b9      	str	r1, [r7, #8]
 8013602:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	685b      	ldr	r3, [r3, #4]
 8013608:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801360c:	d111      	bne.n	8013632 <SPI_EndRxTransaction+0x3a>
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	689b      	ldr	r3, [r3, #8]
 8013612:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013616:	d004      	beq.n	8013622 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	689b      	ldr	r3, [r3, #8]
 801361c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013620:	d107      	bne.n	8013632 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	681a      	ldr	r2, [r3, #0]
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8013630:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	9300      	str	r3, [sp, #0]
 8013636:	68bb      	ldr	r3, [r7, #8]
 8013638:	2200      	movs	r2, #0
 801363a:	2180      	movs	r1, #128	@ 0x80
 801363c:	68f8      	ldr	r0, [r7, #12]
 801363e:	f7ff febd 	bl	80133bc <SPI_WaitFlagStateUntilTimeout>
 8013642:	4603      	mov	r3, r0
 8013644:	2b00      	cmp	r3, #0
 8013646:	d007      	beq.n	8013658 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801364c:	f043 0220 	orr.w	r2, r3, #32
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8013654:	2303      	movs	r3, #3
 8013656:	e023      	b.n	80136a0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	685b      	ldr	r3, [r3, #4]
 801365c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8013660:	d11d      	bne.n	801369e <SPI_EndRxTransaction+0xa6>
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	689b      	ldr	r3, [r3, #8]
 8013666:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801366a:	d004      	beq.n	8013676 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	689b      	ldr	r3, [r3, #8]
 8013670:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013674:	d113      	bne.n	801369e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	9300      	str	r3, [sp, #0]
 801367a:	68bb      	ldr	r3, [r7, #8]
 801367c:	2200      	movs	r2, #0
 801367e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8013682:	68f8      	ldr	r0, [r7, #12]
 8013684:	f7ff ff22 	bl	80134cc <SPI_WaitFifoStateUntilTimeout>
 8013688:	4603      	mov	r3, r0
 801368a:	2b00      	cmp	r3, #0
 801368c:	d007      	beq.n	801369e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013692:	f043 0220 	orr.w	r2, r3, #32
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 801369a:	2303      	movs	r3, #3
 801369c:	e000      	b.n	80136a0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801369e:	2300      	movs	r3, #0
}
 80136a0:	4618      	mov	r0, r3
 80136a2:	3710      	adds	r7, #16
 80136a4:	46bd      	mov	sp, r7
 80136a6:	bd80      	pop	{r7, pc}

080136a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b086      	sub	sp, #24
 80136ac:	af02      	add	r7, sp, #8
 80136ae:	60f8      	str	r0, [r7, #12]
 80136b0:	60b9      	str	r1, [r7, #8]
 80136b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	9300      	str	r3, [sp, #0]
 80136b8:	68bb      	ldr	r3, [r7, #8]
 80136ba:	2200      	movs	r2, #0
 80136bc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80136c0:	68f8      	ldr	r0, [r7, #12]
 80136c2:	f7ff ff03 	bl	80134cc <SPI_WaitFifoStateUntilTimeout>
 80136c6:	4603      	mov	r3, r0
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d007      	beq.n	80136dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80136d0:	f043 0220 	orr.w	r2, r3, #32
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80136d8:	2303      	movs	r3, #3
 80136da:	e027      	b.n	801372c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	9300      	str	r3, [sp, #0]
 80136e0:	68bb      	ldr	r3, [r7, #8]
 80136e2:	2200      	movs	r2, #0
 80136e4:	2180      	movs	r1, #128	@ 0x80
 80136e6:	68f8      	ldr	r0, [r7, #12]
 80136e8:	f7ff fe68 	bl	80133bc <SPI_WaitFlagStateUntilTimeout>
 80136ec:	4603      	mov	r3, r0
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d007      	beq.n	8013702 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80136f6:	f043 0220 	orr.w	r2, r3, #32
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80136fe:	2303      	movs	r3, #3
 8013700:	e014      	b.n	801372c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	9300      	str	r3, [sp, #0]
 8013706:	68bb      	ldr	r3, [r7, #8]
 8013708:	2200      	movs	r2, #0
 801370a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 801370e:	68f8      	ldr	r0, [r7, #12]
 8013710:	f7ff fedc 	bl	80134cc <SPI_WaitFifoStateUntilTimeout>
 8013714:	4603      	mov	r3, r0
 8013716:	2b00      	cmp	r3, #0
 8013718:	d007      	beq.n	801372a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801371e:	f043 0220 	orr.w	r2, r3, #32
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8013726:	2303      	movs	r3, #3
 8013728:	e000      	b.n	801372c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801372a:	2300      	movs	r3, #0
}
 801372c:	4618      	mov	r0, r3
 801372e:	3710      	adds	r7, #16
 8013730:	46bd      	mov	sp, r7
 8013732:	bd80      	pop	{r7, pc}

08013734 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b082      	sub	sp, #8
 8013738:	af00      	add	r7, sp, #0
 801373a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d101      	bne.n	8013746 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013742:	2301      	movs	r3, #1
 8013744:	e049      	b.n	80137da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801374c:	b2db      	uxtb	r3, r3
 801374e:	2b00      	cmp	r3, #0
 8013750:	d106      	bne.n	8013760 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	2200      	movs	r2, #0
 8013756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801375a:	6878      	ldr	r0, [r7, #4]
 801375c:	f7f4 ffe2 	bl	8008724 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	2202      	movs	r2, #2
 8013764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	681a      	ldr	r2, [r3, #0]
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	3304      	adds	r3, #4
 8013770:	4619      	mov	r1, r3
 8013772:	4610      	mov	r0, r2
 8013774:	f001 f9e0 	bl	8014b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	2201      	movs	r2, #1
 801377c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	2201      	movs	r2, #1
 8013784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	2201      	movs	r2, #1
 801378c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	2201      	movs	r2, #1
 8013794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	2201      	movs	r2, #1
 801379c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	2201      	movs	r2, #1
 80137a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	2201      	movs	r2, #1
 80137ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	2201      	movs	r2, #1
 80137b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	2201      	movs	r2, #1
 80137bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	2201      	movs	r2, #1
 80137c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	2201      	movs	r2, #1
 80137cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	2201      	movs	r2, #1
 80137d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80137d8:	2300      	movs	r3, #0
}
 80137da:	4618      	mov	r0, r3
 80137dc:	3708      	adds	r7, #8
 80137de:	46bd      	mov	sp, r7
 80137e0:	bd80      	pop	{r7, pc}
	...

080137e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80137e4:	b480      	push	{r7}
 80137e6:	b085      	sub	sp, #20
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80137f2:	b2db      	uxtb	r3, r3
 80137f4:	2b01      	cmp	r3, #1
 80137f6:	d001      	beq.n	80137fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80137f8:	2301      	movs	r3, #1
 80137fa:	e047      	b.n	801388c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	2202      	movs	r2, #2
 8013800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	4a23      	ldr	r2, [pc, #140]	@ (8013898 <HAL_TIM_Base_Start+0xb4>)
 801380a:	4293      	cmp	r3, r2
 801380c:	d01d      	beq.n	801384a <HAL_TIM_Base_Start+0x66>
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013816:	d018      	beq.n	801384a <HAL_TIM_Base_Start+0x66>
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	4a1f      	ldr	r2, [pc, #124]	@ (801389c <HAL_TIM_Base_Start+0xb8>)
 801381e:	4293      	cmp	r3, r2
 8013820:	d013      	beq.n	801384a <HAL_TIM_Base_Start+0x66>
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	4a1e      	ldr	r2, [pc, #120]	@ (80138a0 <HAL_TIM_Base_Start+0xbc>)
 8013828:	4293      	cmp	r3, r2
 801382a:	d00e      	beq.n	801384a <HAL_TIM_Base_Start+0x66>
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	4a1c      	ldr	r2, [pc, #112]	@ (80138a4 <HAL_TIM_Base_Start+0xc0>)
 8013832:	4293      	cmp	r3, r2
 8013834:	d009      	beq.n	801384a <HAL_TIM_Base_Start+0x66>
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	4a1b      	ldr	r2, [pc, #108]	@ (80138a8 <HAL_TIM_Base_Start+0xc4>)
 801383c:	4293      	cmp	r3, r2
 801383e:	d004      	beq.n	801384a <HAL_TIM_Base_Start+0x66>
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	4a19      	ldr	r2, [pc, #100]	@ (80138ac <HAL_TIM_Base_Start+0xc8>)
 8013846:	4293      	cmp	r3, r2
 8013848:	d115      	bne.n	8013876 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	689a      	ldr	r2, [r3, #8]
 8013850:	4b17      	ldr	r3, [pc, #92]	@ (80138b0 <HAL_TIM_Base_Start+0xcc>)
 8013852:	4013      	ands	r3, r2
 8013854:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	2b06      	cmp	r3, #6
 801385a:	d015      	beq.n	8013888 <HAL_TIM_Base_Start+0xa4>
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013862:	d011      	beq.n	8013888 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	681a      	ldr	r2, [r3, #0]
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	f042 0201 	orr.w	r2, r2, #1
 8013872:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013874:	e008      	b.n	8013888 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	681a      	ldr	r2, [r3, #0]
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	f042 0201 	orr.w	r2, r2, #1
 8013884:	601a      	str	r2, [r3, #0]
 8013886:	e000      	b.n	801388a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013888:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801388a:	2300      	movs	r3, #0
}
 801388c:	4618      	mov	r0, r3
 801388e:	3714      	adds	r7, #20
 8013890:	46bd      	mov	sp, r7
 8013892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013896:	4770      	bx	lr
 8013898:	40012c00 	.word	0x40012c00
 801389c:	40000400 	.word	0x40000400
 80138a0:	40000800 	.word	0x40000800
 80138a4:	40000c00 	.word	0x40000c00
 80138a8:	40013400 	.word	0x40013400
 80138ac:	40014000 	.word	0x40014000
 80138b0:	00010007 	.word	0x00010007

080138b4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80138b4:	b480      	push	{r7}
 80138b6:	b083      	sub	sp, #12
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	6a1a      	ldr	r2, [r3, #32]
 80138c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80138c6:	4013      	ands	r3, r2
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d10f      	bne.n	80138ec <HAL_TIM_Base_Stop+0x38>
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	6a1a      	ldr	r2, [r3, #32]
 80138d2:	f240 4344 	movw	r3, #1092	@ 0x444
 80138d6:	4013      	ands	r3, r2
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d107      	bne.n	80138ec <HAL_TIM_Base_Stop+0x38>
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	681a      	ldr	r2, [r3, #0]
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	f022 0201 	bic.w	r2, r2, #1
 80138ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	2201      	movs	r2, #1
 80138f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80138f4:	2300      	movs	r3, #0
}
 80138f6:	4618      	mov	r0, r3
 80138f8:	370c      	adds	r7, #12
 80138fa:	46bd      	mov	sp, r7
 80138fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013900:	4770      	bx	lr

08013902 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8013902:	b580      	push	{r7, lr}
 8013904:	b082      	sub	sp, #8
 8013906:	af00      	add	r7, sp, #0
 8013908:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d101      	bne.n	8013914 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8013910:	2301      	movs	r3, #1
 8013912:	e049      	b.n	80139a8 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801391a:	b2db      	uxtb	r3, r3
 801391c:	2b00      	cmp	r3, #0
 801391e:	d106      	bne.n	801392e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	2200      	movs	r2, #0
 8013924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8013928:	6878      	ldr	r0, [r7, #4]
 801392a:	f000 f841 	bl	80139b0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	2202      	movs	r2, #2
 8013932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	681a      	ldr	r2, [r3, #0]
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	3304      	adds	r3, #4
 801393e:	4619      	mov	r1, r3
 8013940:	4610      	mov	r0, r2
 8013942:	f001 f8f9 	bl	8014b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	2201      	movs	r2, #1
 801394a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	2201      	movs	r2, #1
 8013952:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	2201      	movs	r2, #1
 801395a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	2201      	movs	r2, #1
 8013962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	2201      	movs	r2, #1
 801396a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	2201      	movs	r2, #1
 8013972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	2201      	movs	r2, #1
 801397a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	2201      	movs	r2, #1
 8013982:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	2201      	movs	r2, #1
 801398a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	2201      	movs	r2, #1
 8013992:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	2201      	movs	r2, #1
 801399a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	2201      	movs	r2, #1
 80139a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80139a6:	2300      	movs	r3, #0
}
 80139a8:	4618      	mov	r0, r3
 80139aa:	3708      	adds	r7, #8
 80139ac:	46bd      	mov	sp, r7
 80139ae:	bd80      	pop	{r7, pc}

080139b0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80139b0:	b480      	push	{r7}
 80139b2:	b083      	sub	sp, #12
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80139b8:	bf00      	nop
 80139ba:	370c      	adds	r7, #12
 80139bc:	46bd      	mov	sp, r7
 80139be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c2:	4770      	bx	lr

080139c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b082      	sub	sp, #8
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d101      	bne.n	80139d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80139d2:	2301      	movs	r3, #1
 80139d4:	e049      	b.n	8013a6a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80139dc:	b2db      	uxtb	r3, r3
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d106      	bne.n	80139f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	2200      	movs	r2, #0
 80139e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80139ea:	6878      	ldr	r0, [r7, #4]
 80139ec:	f7f4 fe32 	bl	8008654 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	2202      	movs	r2, #2
 80139f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	681a      	ldr	r2, [r3, #0]
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	3304      	adds	r3, #4
 8013a00:	4619      	mov	r1, r3
 8013a02:	4610      	mov	r0, r2
 8013a04:	f001 f898 	bl	8014b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	2201      	movs	r2, #1
 8013a0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	2201      	movs	r2, #1
 8013a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	2201      	movs	r2, #1
 8013a1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	2201      	movs	r2, #1
 8013a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	2201      	movs	r2, #1
 8013a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	2201      	movs	r2, #1
 8013a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	2201      	movs	r2, #1
 8013a3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	2201      	movs	r2, #1
 8013a44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	2201      	movs	r2, #1
 8013a4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	2201      	movs	r2, #1
 8013a54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	2201      	movs	r2, #1
 8013a5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	2201      	movs	r2, #1
 8013a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8013a68:	2300      	movs	r3, #0
}
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	3708      	adds	r7, #8
 8013a6e:	46bd      	mov	sp, r7
 8013a70:	bd80      	pop	{r7, pc}
	...

08013a74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b084      	sub	sp, #16
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
 8013a7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8013a7e:	683b      	ldr	r3, [r7, #0]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d109      	bne.n	8013a98 <HAL_TIM_PWM_Start+0x24>
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8013a8a:	b2db      	uxtb	r3, r3
 8013a8c:	2b01      	cmp	r3, #1
 8013a8e:	bf14      	ite	ne
 8013a90:	2301      	movne	r3, #1
 8013a92:	2300      	moveq	r3, #0
 8013a94:	b2db      	uxtb	r3, r3
 8013a96:	e03c      	b.n	8013b12 <HAL_TIM_PWM_Start+0x9e>
 8013a98:	683b      	ldr	r3, [r7, #0]
 8013a9a:	2b04      	cmp	r3, #4
 8013a9c:	d109      	bne.n	8013ab2 <HAL_TIM_PWM_Start+0x3e>
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8013aa4:	b2db      	uxtb	r3, r3
 8013aa6:	2b01      	cmp	r3, #1
 8013aa8:	bf14      	ite	ne
 8013aaa:	2301      	movne	r3, #1
 8013aac:	2300      	moveq	r3, #0
 8013aae:	b2db      	uxtb	r3, r3
 8013ab0:	e02f      	b.n	8013b12 <HAL_TIM_PWM_Start+0x9e>
 8013ab2:	683b      	ldr	r3, [r7, #0]
 8013ab4:	2b08      	cmp	r3, #8
 8013ab6:	d109      	bne.n	8013acc <HAL_TIM_PWM_Start+0x58>
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013abe:	b2db      	uxtb	r3, r3
 8013ac0:	2b01      	cmp	r3, #1
 8013ac2:	bf14      	ite	ne
 8013ac4:	2301      	movne	r3, #1
 8013ac6:	2300      	moveq	r3, #0
 8013ac8:	b2db      	uxtb	r3, r3
 8013aca:	e022      	b.n	8013b12 <HAL_TIM_PWM_Start+0x9e>
 8013acc:	683b      	ldr	r3, [r7, #0]
 8013ace:	2b0c      	cmp	r3, #12
 8013ad0:	d109      	bne.n	8013ae6 <HAL_TIM_PWM_Start+0x72>
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013ad8:	b2db      	uxtb	r3, r3
 8013ada:	2b01      	cmp	r3, #1
 8013adc:	bf14      	ite	ne
 8013ade:	2301      	movne	r3, #1
 8013ae0:	2300      	moveq	r3, #0
 8013ae2:	b2db      	uxtb	r3, r3
 8013ae4:	e015      	b.n	8013b12 <HAL_TIM_PWM_Start+0x9e>
 8013ae6:	683b      	ldr	r3, [r7, #0]
 8013ae8:	2b10      	cmp	r3, #16
 8013aea:	d109      	bne.n	8013b00 <HAL_TIM_PWM_Start+0x8c>
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013af2:	b2db      	uxtb	r3, r3
 8013af4:	2b01      	cmp	r3, #1
 8013af6:	bf14      	ite	ne
 8013af8:	2301      	movne	r3, #1
 8013afa:	2300      	moveq	r3, #0
 8013afc:	b2db      	uxtb	r3, r3
 8013afe:	e008      	b.n	8013b12 <HAL_TIM_PWM_Start+0x9e>
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013b06:	b2db      	uxtb	r3, r3
 8013b08:	2b01      	cmp	r3, #1
 8013b0a:	bf14      	ite	ne
 8013b0c:	2301      	movne	r3, #1
 8013b0e:	2300      	moveq	r3, #0
 8013b10:	b2db      	uxtb	r3, r3
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d001      	beq.n	8013b1a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8013b16:	2301      	movs	r3, #1
 8013b18:	e09c      	b.n	8013c54 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013b1a:	683b      	ldr	r3, [r7, #0]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d104      	bne.n	8013b2a <HAL_TIM_PWM_Start+0xb6>
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	2202      	movs	r2, #2
 8013b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013b28:	e023      	b.n	8013b72 <HAL_TIM_PWM_Start+0xfe>
 8013b2a:	683b      	ldr	r3, [r7, #0]
 8013b2c:	2b04      	cmp	r3, #4
 8013b2e:	d104      	bne.n	8013b3a <HAL_TIM_PWM_Start+0xc6>
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	2202      	movs	r2, #2
 8013b34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013b38:	e01b      	b.n	8013b72 <HAL_TIM_PWM_Start+0xfe>
 8013b3a:	683b      	ldr	r3, [r7, #0]
 8013b3c:	2b08      	cmp	r3, #8
 8013b3e:	d104      	bne.n	8013b4a <HAL_TIM_PWM_Start+0xd6>
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	2202      	movs	r2, #2
 8013b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013b48:	e013      	b.n	8013b72 <HAL_TIM_PWM_Start+0xfe>
 8013b4a:	683b      	ldr	r3, [r7, #0]
 8013b4c:	2b0c      	cmp	r3, #12
 8013b4e:	d104      	bne.n	8013b5a <HAL_TIM_PWM_Start+0xe6>
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	2202      	movs	r2, #2
 8013b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013b58:	e00b      	b.n	8013b72 <HAL_TIM_PWM_Start+0xfe>
 8013b5a:	683b      	ldr	r3, [r7, #0]
 8013b5c:	2b10      	cmp	r3, #16
 8013b5e:	d104      	bne.n	8013b6a <HAL_TIM_PWM_Start+0xf6>
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	2202      	movs	r2, #2
 8013b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013b68:	e003      	b.n	8013b72 <HAL_TIM_PWM_Start+0xfe>
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	2202      	movs	r2, #2
 8013b6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	2201      	movs	r2, #1
 8013b78:	6839      	ldr	r1, [r7, #0]
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f001 fdaa 	bl	80156d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	4a35      	ldr	r2, [pc, #212]	@ (8013c5c <HAL_TIM_PWM_Start+0x1e8>)
 8013b86:	4293      	cmp	r3, r2
 8013b88:	d013      	beq.n	8013bb2 <HAL_TIM_PWM_Start+0x13e>
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	4a34      	ldr	r2, [pc, #208]	@ (8013c60 <HAL_TIM_PWM_Start+0x1ec>)
 8013b90:	4293      	cmp	r3, r2
 8013b92:	d00e      	beq.n	8013bb2 <HAL_TIM_PWM_Start+0x13e>
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	4a32      	ldr	r2, [pc, #200]	@ (8013c64 <HAL_TIM_PWM_Start+0x1f0>)
 8013b9a:	4293      	cmp	r3, r2
 8013b9c:	d009      	beq.n	8013bb2 <HAL_TIM_PWM_Start+0x13e>
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	4a31      	ldr	r2, [pc, #196]	@ (8013c68 <HAL_TIM_PWM_Start+0x1f4>)
 8013ba4:	4293      	cmp	r3, r2
 8013ba6:	d004      	beq.n	8013bb2 <HAL_TIM_PWM_Start+0x13e>
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	4a2f      	ldr	r2, [pc, #188]	@ (8013c6c <HAL_TIM_PWM_Start+0x1f8>)
 8013bae:	4293      	cmp	r3, r2
 8013bb0:	d101      	bne.n	8013bb6 <HAL_TIM_PWM_Start+0x142>
 8013bb2:	2301      	movs	r3, #1
 8013bb4:	e000      	b.n	8013bb8 <HAL_TIM_PWM_Start+0x144>
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d007      	beq.n	8013bcc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8013bca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	4a22      	ldr	r2, [pc, #136]	@ (8013c5c <HAL_TIM_PWM_Start+0x1e8>)
 8013bd2:	4293      	cmp	r3, r2
 8013bd4:	d01d      	beq.n	8013c12 <HAL_TIM_PWM_Start+0x19e>
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013bde:	d018      	beq.n	8013c12 <HAL_TIM_PWM_Start+0x19e>
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	4a22      	ldr	r2, [pc, #136]	@ (8013c70 <HAL_TIM_PWM_Start+0x1fc>)
 8013be6:	4293      	cmp	r3, r2
 8013be8:	d013      	beq.n	8013c12 <HAL_TIM_PWM_Start+0x19e>
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	4a21      	ldr	r2, [pc, #132]	@ (8013c74 <HAL_TIM_PWM_Start+0x200>)
 8013bf0:	4293      	cmp	r3, r2
 8013bf2:	d00e      	beq.n	8013c12 <HAL_TIM_PWM_Start+0x19e>
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8013c78 <HAL_TIM_PWM_Start+0x204>)
 8013bfa:	4293      	cmp	r3, r2
 8013bfc:	d009      	beq.n	8013c12 <HAL_TIM_PWM_Start+0x19e>
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	4a17      	ldr	r2, [pc, #92]	@ (8013c60 <HAL_TIM_PWM_Start+0x1ec>)
 8013c04:	4293      	cmp	r3, r2
 8013c06:	d004      	beq.n	8013c12 <HAL_TIM_PWM_Start+0x19e>
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	4a15      	ldr	r2, [pc, #84]	@ (8013c64 <HAL_TIM_PWM_Start+0x1f0>)
 8013c0e:	4293      	cmp	r3, r2
 8013c10:	d115      	bne.n	8013c3e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	689a      	ldr	r2, [r3, #8]
 8013c18:	4b18      	ldr	r3, [pc, #96]	@ (8013c7c <HAL_TIM_PWM_Start+0x208>)
 8013c1a:	4013      	ands	r3, r2
 8013c1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	2b06      	cmp	r3, #6
 8013c22:	d015      	beq.n	8013c50 <HAL_TIM_PWM_Start+0x1dc>
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013c2a:	d011      	beq.n	8013c50 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	681a      	ldr	r2, [r3, #0]
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	f042 0201 	orr.w	r2, r2, #1
 8013c3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013c3c:	e008      	b.n	8013c50 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	681a      	ldr	r2, [r3, #0]
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	f042 0201 	orr.w	r2, r2, #1
 8013c4c:	601a      	str	r2, [r3, #0]
 8013c4e:	e000      	b.n	8013c52 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013c50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8013c52:	2300      	movs	r3, #0
}
 8013c54:	4618      	mov	r0, r3
 8013c56:	3710      	adds	r7, #16
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	bd80      	pop	{r7, pc}
 8013c5c:	40012c00 	.word	0x40012c00
 8013c60:	40013400 	.word	0x40013400
 8013c64:	40014000 	.word	0x40014000
 8013c68:	40014400 	.word	0x40014400
 8013c6c:	40014800 	.word	0x40014800
 8013c70:	40000400 	.word	0x40000400
 8013c74:	40000800 	.word	0x40000800
 8013c78:	40000c00 	.word	0x40000c00
 8013c7c:	00010007 	.word	0x00010007

08013c80 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b082      	sub	sp, #8
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
 8013c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	2200      	movs	r2, #0
 8013c90:	6839      	ldr	r1, [r7, #0]
 8013c92:	4618      	mov	r0, r3
 8013c94:	f001 fd1e 	bl	80156d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	4a3e      	ldr	r2, [pc, #248]	@ (8013d98 <HAL_TIM_PWM_Stop+0x118>)
 8013c9e:	4293      	cmp	r3, r2
 8013ca0:	d013      	beq.n	8013cca <HAL_TIM_PWM_Stop+0x4a>
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	4a3d      	ldr	r2, [pc, #244]	@ (8013d9c <HAL_TIM_PWM_Stop+0x11c>)
 8013ca8:	4293      	cmp	r3, r2
 8013caa:	d00e      	beq.n	8013cca <HAL_TIM_PWM_Stop+0x4a>
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	4a3b      	ldr	r2, [pc, #236]	@ (8013da0 <HAL_TIM_PWM_Stop+0x120>)
 8013cb2:	4293      	cmp	r3, r2
 8013cb4:	d009      	beq.n	8013cca <HAL_TIM_PWM_Stop+0x4a>
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	4a3a      	ldr	r2, [pc, #232]	@ (8013da4 <HAL_TIM_PWM_Stop+0x124>)
 8013cbc:	4293      	cmp	r3, r2
 8013cbe:	d004      	beq.n	8013cca <HAL_TIM_PWM_Stop+0x4a>
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	4a38      	ldr	r2, [pc, #224]	@ (8013da8 <HAL_TIM_PWM_Stop+0x128>)
 8013cc6:	4293      	cmp	r3, r2
 8013cc8:	d101      	bne.n	8013cce <HAL_TIM_PWM_Stop+0x4e>
 8013cca:	2301      	movs	r3, #1
 8013ccc:	e000      	b.n	8013cd0 <HAL_TIM_PWM_Stop+0x50>
 8013cce:	2300      	movs	r3, #0
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d017      	beq.n	8013d04 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	6a1a      	ldr	r2, [r3, #32]
 8013cda:	f241 1311 	movw	r3, #4369	@ 0x1111
 8013cde:	4013      	ands	r3, r2
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d10f      	bne.n	8013d04 <HAL_TIM_PWM_Stop+0x84>
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	6a1a      	ldr	r2, [r3, #32]
 8013cea:	f240 4344 	movw	r3, #1092	@ 0x444
 8013cee:	4013      	ands	r3, r2
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d107      	bne.n	8013d04 <HAL_TIM_PWM_Stop+0x84>
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8013d02:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	6a1a      	ldr	r2, [r3, #32]
 8013d0a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8013d0e:	4013      	ands	r3, r2
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d10f      	bne.n	8013d34 <HAL_TIM_PWM_Stop+0xb4>
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	6a1a      	ldr	r2, [r3, #32]
 8013d1a:	f240 4344 	movw	r3, #1092	@ 0x444
 8013d1e:	4013      	ands	r3, r2
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d107      	bne.n	8013d34 <HAL_TIM_PWM_Stop+0xb4>
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	681a      	ldr	r2, [r3, #0]
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	f022 0201 	bic.w	r2, r2, #1
 8013d32:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8013d34:	683b      	ldr	r3, [r7, #0]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d104      	bne.n	8013d44 <HAL_TIM_PWM_Stop+0xc4>
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	2201      	movs	r2, #1
 8013d3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013d42:	e023      	b.n	8013d8c <HAL_TIM_PWM_Stop+0x10c>
 8013d44:	683b      	ldr	r3, [r7, #0]
 8013d46:	2b04      	cmp	r3, #4
 8013d48:	d104      	bne.n	8013d54 <HAL_TIM_PWM_Stop+0xd4>
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	2201      	movs	r2, #1
 8013d4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013d52:	e01b      	b.n	8013d8c <HAL_TIM_PWM_Stop+0x10c>
 8013d54:	683b      	ldr	r3, [r7, #0]
 8013d56:	2b08      	cmp	r3, #8
 8013d58:	d104      	bne.n	8013d64 <HAL_TIM_PWM_Stop+0xe4>
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	2201      	movs	r2, #1
 8013d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013d62:	e013      	b.n	8013d8c <HAL_TIM_PWM_Stop+0x10c>
 8013d64:	683b      	ldr	r3, [r7, #0]
 8013d66:	2b0c      	cmp	r3, #12
 8013d68:	d104      	bne.n	8013d74 <HAL_TIM_PWM_Stop+0xf4>
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	2201      	movs	r2, #1
 8013d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013d72:	e00b      	b.n	8013d8c <HAL_TIM_PWM_Stop+0x10c>
 8013d74:	683b      	ldr	r3, [r7, #0]
 8013d76:	2b10      	cmp	r3, #16
 8013d78:	d104      	bne.n	8013d84 <HAL_TIM_PWM_Stop+0x104>
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	2201      	movs	r2, #1
 8013d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013d82:	e003      	b.n	8013d8c <HAL_TIM_PWM_Stop+0x10c>
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	2201      	movs	r2, #1
 8013d88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8013d8c:	2300      	movs	r3, #0
}
 8013d8e:	4618      	mov	r0, r3
 8013d90:	3708      	adds	r7, #8
 8013d92:	46bd      	mov	sp, r7
 8013d94:	bd80      	pop	{r7, pc}
 8013d96:	bf00      	nop
 8013d98:	40012c00 	.word	0x40012c00
 8013d9c:	40013400 	.word	0x40013400
 8013da0:	40014000 	.word	0x40014000
 8013da4:	40014400 	.word	0x40014400
 8013da8:	40014800 	.word	0x40014800

08013dac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b082      	sub	sp, #8
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d101      	bne.n	8013dbe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8013dba:	2301      	movs	r3, #1
 8013dbc:	e049      	b.n	8013e52 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013dc4:	b2db      	uxtb	r3, r3
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d106      	bne.n	8013dd8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	2200      	movs	r2, #0
 8013dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8013dd2:	6878      	ldr	r0, [r7, #4]
 8013dd4:	f7f4 fc5e 	bl	8008694 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	2202      	movs	r2, #2
 8013ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	681a      	ldr	r2, [r3, #0]
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	3304      	adds	r3, #4
 8013de8:	4619      	mov	r1, r3
 8013dea:	4610      	mov	r0, r2
 8013dec:	f000 fea4 	bl	8014b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	2201      	movs	r2, #1
 8013df4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	2201      	movs	r2, #1
 8013dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	2201      	movs	r2, #1
 8013e04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	2201      	movs	r2, #1
 8013e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	2201      	movs	r2, #1
 8013e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	2201      	movs	r2, #1
 8013e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	2201      	movs	r2, #1
 8013e24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	2201      	movs	r2, #1
 8013e2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	2201      	movs	r2, #1
 8013e34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	2201      	movs	r2, #1
 8013e3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	2201      	movs	r2, #1
 8013e44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	2201      	movs	r2, #1
 8013e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8013e50:	2300      	movs	r3, #0
}
 8013e52:	4618      	mov	r0, r3
 8013e54:	3708      	adds	r7, #8
 8013e56:	46bd      	mov	sp, r7
 8013e58:	bd80      	pop	{r7, pc}
	...

08013e5c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b084      	sub	sp, #16
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
 8013e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013e66:	2300      	movs	r3, #0
 8013e68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8013e6a:	683b      	ldr	r3, [r7, #0]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d104      	bne.n	8013e7a <HAL_TIM_IC_Start_IT+0x1e>
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8013e76:	b2db      	uxtb	r3, r3
 8013e78:	e023      	b.n	8013ec2 <HAL_TIM_IC_Start_IT+0x66>
 8013e7a:	683b      	ldr	r3, [r7, #0]
 8013e7c:	2b04      	cmp	r3, #4
 8013e7e:	d104      	bne.n	8013e8a <HAL_TIM_IC_Start_IT+0x2e>
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8013e86:	b2db      	uxtb	r3, r3
 8013e88:	e01b      	b.n	8013ec2 <HAL_TIM_IC_Start_IT+0x66>
 8013e8a:	683b      	ldr	r3, [r7, #0]
 8013e8c:	2b08      	cmp	r3, #8
 8013e8e:	d104      	bne.n	8013e9a <HAL_TIM_IC_Start_IT+0x3e>
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013e96:	b2db      	uxtb	r3, r3
 8013e98:	e013      	b.n	8013ec2 <HAL_TIM_IC_Start_IT+0x66>
 8013e9a:	683b      	ldr	r3, [r7, #0]
 8013e9c:	2b0c      	cmp	r3, #12
 8013e9e:	d104      	bne.n	8013eaa <HAL_TIM_IC_Start_IT+0x4e>
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013ea6:	b2db      	uxtb	r3, r3
 8013ea8:	e00b      	b.n	8013ec2 <HAL_TIM_IC_Start_IT+0x66>
 8013eaa:	683b      	ldr	r3, [r7, #0]
 8013eac:	2b10      	cmp	r3, #16
 8013eae:	d104      	bne.n	8013eba <HAL_TIM_IC_Start_IT+0x5e>
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013eb6:	b2db      	uxtb	r3, r3
 8013eb8:	e003      	b.n	8013ec2 <HAL_TIM_IC_Start_IT+0x66>
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013ec0:	b2db      	uxtb	r3, r3
 8013ec2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8013ec4:	683b      	ldr	r3, [r7, #0]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d104      	bne.n	8013ed4 <HAL_TIM_IC_Start_IT+0x78>
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013ed0:	b2db      	uxtb	r3, r3
 8013ed2:	e013      	b.n	8013efc <HAL_TIM_IC_Start_IT+0xa0>
 8013ed4:	683b      	ldr	r3, [r7, #0]
 8013ed6:	2b04      	cmp	r3, #4
 8013ed8:	d104      	bne.n	8013ee4 <HAL_TIM_IC_Start_IT+0x88>
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013ee0:	b2db      	uxtb	r3, r3
 8013ee2:	e00b      	b.n	8013efc <HAL_TIM_IC_Start_IT+0xa0>
 8013ee4:	683b      	ldr	r3, [r7, #0]
 8013ee6:	2b08      	cmp	r3, #8
 8013ee8:	d104      	bne.n	8013ef4 <HAL_TIM_IC_Start_IT+0x98>
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8013ef0:	b2db      	uxtb	r3, r3
 8013ef2:	e003      	b.n	8013efc <HAL_TIM_IC_Start_IT+0xa0>
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8013efa:	b2db      	uxtb	r3, r3
 8013efc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8013efe:	7bbb      	ldrb	r3, [r7, #14]
 8013f00:	2b01      	cmp	r3, #1
 8013f02:	d102      	bne.n	8013f0a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8013f04:	7b7b      	ldrb	r3, [r7, #13]
 8013f06:	2b01      	cmp	r3, #1
 8013f08:	d001      	beq.n	8013f0e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8013f0a:	2301      	movs	r3, #1
 8013f0c:	e0dd      	b.n	80140ca <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013f0e:	683b      	ldr	r3, [r7, #0]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d104      	bne.n	8013f1e <HAL_TIM_IC_Start_IT+0xc2>
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	2202      	movs	r2, #2
 8013f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013f1c:	e023      	b.n	8013f66 <HAL_TIM_IC_Start_IT+0x10a>
 8013f1e:	683b      	ldr	r3, [r7, #0]
 8013f20:	2b04      	cmp	r3, #4
 8013f22:	d104      	bne.n	8013f2e <HAL_TIM_IC_Start_IT+0xd2>
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	2202      	movs	r2, #2
 8013f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013f2c:	e01b      	b.n	8013f66 <HAL_TIM_IC_Start_IT+0x10a>
 8013f2e:	683b      	ldr	r3, [r7, #0]
 8013f30:	2b08      	cmp	r3, #8
 8013f32:	d104      	bne.n	8013f3e <HAL_TIM_IC_Start_IT+0xe2>
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	2202      	movs	r2, #2
 8013f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013f3c:	e013      	b.n	8013f66 <HAL_TIM_IC_Start_IT+0x10a>
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	2b0c      	cmp	r3, #12
 8013f42:	d104      	bne.n	8013f4e <HAL_TIM_IC_Start_IT+0xf2>
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	2202      	movs	r2, #2
 8013f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013f4c:	e00b      	b.n	8013f66 <HAL_TIM_IC_Start_IT+0x10a>
 8013f4e:	683b      	ldr	r3, [r7, #0]
 8013f50:	2b10      	cmp	r3, #16
 8013f52:	d104      	bne.n	8013f5e <HAL_TIM_IC_Start_IT+0x102>
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	2202      	movs	r2, #2
 8013f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013f5c:	e003      	b.n	8013f66 <HAL_TIM_IC_Start_IT+0x10a>
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	2202      	movs	r2, #2
 8013f62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013f66:	683b      	ldr	r3, [r7, #0]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d104      	bne.n	8013f76 <HAL_TIM_IC_Start_IT+0x11a>
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	2202      	movs	r2, #2
 8013f70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013f74:	e013      	b.n	8013f9e <HAL_TIM_IC_Start_IT+0x142>
 8013f76:	683b      	ldr	r3, [r7, #0]
 8013f78:	2b04      	cmp	r3, #4
 8013f7a:	d104      	bne.n	8013f86 <HAL_TIM_IC_Start_IT+0x12a>
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	2202      	movs	r2, #2
 8013f80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013f84:	e00b      	b.n	8013f9e <HAL_TIM_IC_Start_IT+0x142>
 8013f86:	683b      	ldr	r3, [r7, #0]
 8013f88:	2b08      	cmp	r3, #8
 8013f8a:	d104      	bne.n	8013f96 <HAL_TIM_IC_Start_IT+0x13a>
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	2202      	movs	r2, #2
 8013f90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8013f94:	e003      	b.n	8013f9e <HAL_TIM_IC_Start_IT+0x142>
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	2202      	movs	r2, #2
 8013f9a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8013f9e:	683b      	ldr	r3, [r7, #0]
 8013fa0:	2b0c      	cmp	r3, #12
 8013fa2:	d841      	bhi.n	8014028 <HAL_TIM_IC_Start_IT+0x1cc>
 8013fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8013fac <HAL_TIM_IC_Start_IT+0x150>)
 8013fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013faa:	bf00      	nop
 8013fac:	08013fe1 	.word	0x08013fe1
 8013fb0:	08014029 	.word	0x08014029
 8013fb4:	08014029 	.word	0x08014029
 8013fb8:	08014029 	.word	0x08014029
 8013fbc:	08013ff3 	.word	0x08013ff3
 8013fc0:	08014029 	.word	0x08014029
 8013fc4:	08014029 	.word	0x08014029
 8013fc8:	08014029 	.word	0x08014029
 8013fcc:	08014005 	.word	0x08014005
 8013fd0:	08014029 	.word	0x08014029
 8013fd4:	08014029 	.word	0x08014029
 8013fd8:	08014029 	.word	0x08014029
 8013fdc:	08014017 	.word	0x08014017
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	68da      	ldr	r2, [r3, #12]
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	f042 0202 	orr.w	r2, r2, #2
 8013fee:	60da      	str	r2, [r3, #12]
      break;
 8013ff0:	e01d      	b.n	801402e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	68da      	ldr	r2, [r3, #12]
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	f042 0204 	orr.w	r2, r2, #4
 8014000:	60da      	str	r2, [r3, #12]
      break;
 8014002:	e014      	b.n	801402e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	68da      	ldr	r2, [r3, #12]
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	f042 0208 	orr.w	r2, r2, #8
 8014012:	60da      	str	r2, [r3, #12]
      break;
 8014014:	e00b      	b.n	801402e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	68da      	ldr	r2, [r3, #12]
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	f042 0210 	orr.w	r2, r2, #16
 8014024:	60da      	str	r2, [r3, #12]
      break;
 8014026:	e002      	b.n	801402e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8014028:	2301      	movs	r3, #1
 801402a:	73fb      	strb	r3, [r7, #15]
      break;
 801402c:	bf00      	nop
  }

  if (status == HAL_OK)
 801402e:	7bfb      	ldrb	r3, [r7, #15]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d149      	bne.n	80140c8 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	2201      	movs	r2, #1
 801403a:	6839      	ldr	r1, [r7, #0]
 801403c:	4618      	mov	r0, r3
 801403e:	f001 fb49 	bl	80156d4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	4a23      	ldr	r2, [pc, #140]	@ (80140d4 <HAL_TIM_IC_Start_IT+0x278>)
 8014048:	4293      	cmp	r3, r2
 801404a:	d01d      	beq.n	8014088 <HAL_TIM_IC_Start_IT+0x22c>
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014054:	d018      	beq.n	8014088 <HAL_TIM_IC_Start_IT+0x22c>
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	4a1f      	ldr	r2, [pc, #124]	@ (80140d8 <HAL_TIM_IC_Start_IT+0x27c>)
 801405c:	4293      	cmp	r3, r2
 801405e:	d013      	beq.n	8014088 <HAL_TIM_IC_Start_IT+0x22c>
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	4a1d      	ldr	r2, [pc, #116]	@ (80140dc <HAL_TIM_IC_Start_IT+0x280>)
 8014066:	4293      	cmp	r3, r2
 8014068:	d00e      	beq.n	8014088 <HAL_TIM_IC_Start_IT+0x22c>
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	4a1c      	ldr	r2, [pc, #112]	@ (80140e0 <HAL_TIM_IC_Start_IT+0x284>)
 8014070:	4293      	cmp	r3, r2
 8014072:	d009      	beq.n	8014088 <HAL_TIM_IC_Start_IT+0x22c>
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	4a1a      	ldr	r2, [pc, #104]	@ (80140e4 <HAL_TIM_IC_Start_IT+0x288>)
 801407a:	4293      	cmp	r3, r2
 801407c:	d004      	beq.n	8014088 <HAL_TIM_IC_Start_IT+0x22c>
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	4a19      	ldr	r2, [pc, #100]	@ (80140e8 <HAL_TIM_IC_Start_IT+0x28c>)
 8014084:	4293      	cmp	r3, r2
 8014086:	d115      	bne.n	80140b4 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	689a      	ldr	r2, [r3, #8]
 801408e:	4b17      	ldr	r3, [pc, #92]	@ (80140ec <HAL_TIM_IC_Start_IT+0x290>)
 8014090:	4013      	ands	r3, r2
 8014092:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014094:	68bb      	ldr	r3, [r7, #8]
 8014096:	2b06      	cmp	r3, #6
 8014098:	d015      	beq.n	80140c6 <HAL_TIM_IC_Start_IT+0x26a>
 801409a:	68bb      	ldr	r3, [r7, #8]
 801409c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80140a0:	d011      	beq.n	80140c6 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	681a      	ldr	r2, [r3, #0]
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	f042 0201 	orr.w	r2, r2, #1
 80140b0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80140b2:	e008      	b.n	80140c6 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	681a      	ldr	r2, [r3, #0]
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	f042 0201 	orr.w	r2, r2, #1
 80140c2:	601a      	str	r2, [r3, #0]
 80140c4:	e000      	b.n	80140c8 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80140c6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80140c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80140ca:	4618      	mov	r0, r3
 80140cc:	3710      	adds	r7, #16
 80140ce:	46bd      	mov	sp, r7
 80140d0:	bd80      	pop	{r7, pc}
 80140d2:	bf00      	nop
 80140d4:	40012c00 	.word	0x40012c00
 80140d8:	40000400 	.word	0x40000400
 80140dc:	40000800 	.word	0x40000800
 80140e0:	40000c00 	.word	0x40000c00
 80140e4:	40013400 	.word	0x40013400
 80140e8:	40014000 	.word	0x40014000
 80140ec:	00010007 	.word	0x00010007

080140f0 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b084      	sub	sp, #16
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]
 80140f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80140fa:	2300      	movs	r3, #0
 80140fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80140fe:	683b      	ldr	r3, [r7, #0]
 8014100:	2b0c      	cmp	r3, #12
 8014102:	d841      	bhi.n	8014188 <HAL_TIM_IC_Stop_IT+0x98>
 8014104:	a201      	add	r2, pc, #4	@ (adr r2, 801410c <HAL_TIM_IC_Stop_IT+0x1c>)
 8014106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801410a:	bf00      	nop
 801410c:	08014141 	.word	0x08014141
 8014110:	08014189 	.word	0x08014189
 8014114:	08014189 	.word	0x08014189
 8014118:	08014189 	.word	0x08014189
 801411c:	08014153 	.word	0x08014153
 8014120:	08014189 	.word	0x08014189
 8014124:	08014189 	.word	0x08014189
 8014128:	08014189 	.word	0x08014189
 801412c:	08014165 	.word	0x08014165
 8014130:	08014189 	.word	0x08014189
 8014134:	08014189 	.word	0x08014189
 8014138:	08014189 	.word	0x08014189
 801413c:	08014177 	.word	0x08014177
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	68da      	ldr	r2, [r3, #12]
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	f022 0202 	bic.w	r2, r2, #2
 801414e:	60da      	str	r2, [r3, #12]
      break;
 8014150:	e01d      	b.n	801418e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	68da      	ldr	r2, [r3, #12]
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	f022 0204 	bic.w	r2, r2, #4
 8014160:	60da      	str	r2, [r3, #12]
      break;
 8014162:	e014      	b.n	801418e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	68da      	ldr	r2, [r3, #12]
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	f022 0208 	bic.w	r2, r2, #8
 8014172:	60da      	str	r2, [r3, #12]
      break;
 8014174:	e00b      	b.n	801418e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	68da      	ldr	r2, [r3, #12]
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	f022 0210 	bic.w	r2, r2, #16
 8014184:	60da      	str	r2, [r3, #12]
      break;
 8014186:	e002      	b.n	801418e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8014188:	2301      	movs	r3, #1
 801418a:	73fb      	strb	r3, [r7, #15]
      break;
 801418c:	bf00      	nop
  }

  if (status == HAL_OK)
 801418e:	7bfb      	ldrb	r3, [r7, #15]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d166      	bne.n	8014262 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	2200      	movs	r2, #0
 801419a:	6839      	ldr	r1, [r7, #0]
 801419c:	4618      	mov	r0, r3
 801419e:	f001 fa99 	bl	80156d4 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	6a1a      	ldr	r2, [r3, #32]
 80141a8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80141ac:	4013      	ands	r3, r2
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d10f      	bne.n	80141d2 <HAL_TIM_IC_Stop_IT+0xe2>
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	6a1a      	ldr	r2, [r3, #32]
 80141b8:	f240 4344 	movw	r3, #1092	@ 0x444
 80141bc:	4013      	ands	r3, r2
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d107      	bne.n	80141d2 <HAL_TIM_IC_Stop_IT+0xe2>
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	681a      	ldr	r2, [r3, #0]
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	f022 0201 	bic.w	r2, r2, #1
 80141d0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80141d2:	683b      	ldr	r3, [r7, #0]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d104      	bne.n	80141e2 <HAL_TIM_IC_Stop_IT+0xf2>
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	2201      	movs	r2, #1
 80141dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80141e0:	e023      	b.n	801422a <HAL_TIM_IC_Stop_IT+0x13a>
 80141e2:	683b      	ldr	r3, [r7, #0]
 80141e4:	2b04      	cmp	r3, #4
 80141e6:	d104      	bne.n	80141f2 <HAL_TIM_IC_Stop_IT+0x102>
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	2201      	movs	r2, #1
 80141ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80141f0:	e01b      	b.n	801422a <HAL_TIM_IC_Stop_IT+0x13a>
 80141f2:	683b      	ldr	r3, [r7, #0]
 80141f4:	2b08      	cmp	r3, #8
 80141f6:	d104      	bne.n	8014202 <HAL_TIM_IC_Stop_IT+0x112>
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	2201      	movs	r2, #1
 80141fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8014200:	e013      	b.n	801422a <HAL_TIM_IC_Stop_IT+0x13a>
 8014202:	683b      	ldr	r3, [r7, #0]
 8014204:	2b0c      	cmp	r3, #12
 8014206:	d104      	bne.n	8014212 <HAL_TIM_IC_Stop_IT+0x122>
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	2201      	movs	r2, #1
 801420c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8014210:	e00b      	b.n	801422a <HAL_TIM_IC_Stop_IT+0x13a>
 8014212:	683b      	ldr	r3, [r7, #0]
 8014214:	2b10      	cmp	r3, #16
 8014216:	d104      	bne.n	8014222 <HAL_TIM_IC_Stop_IT+0x132>
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	2201      	movs	r2, #1
 801421c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8014220:	e003      	b.n	801422a <HAL_TIM_IC_Stop_IT+0x13a>
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	2201      	movs	r2, #1
 8014226:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801422a:	683b      	ldr	r3, [r7, #0]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d104      	bne.n	801423a <HAL_TIM_IC_Stop_IT+0x14a>
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	2201      	movs	r2, #1
 8014234:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014238:	e013      	b.n	8014262 <HAL_TIM_IC_Stop_IT+0x172>
 801423a:	683b      	ldr	r3, [r7, #0]
 801423c:	2b04      	cmp	r3, #4
 801423e:	d104      	bne.n	801424a <HAL_TIM_IC_Stop_IT+0x15a>
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	2201      	movs	r2, #1
 8014244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014248:	e00b      	b.n	8014262 <HAL_TIM_IC_Stop_IT+0x172>
 801424a:	683b      	ldr	r3, [r7, #0]
 801424c:	2b08      	cmp	r3, #8
 801424e:	d104      	bne.n	801425a <HAL_TIM_IC_Stop_IT+0x16a>
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	2201      	movs	r2, #1
 8014254:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8014258:	e003      	b.n	8014262 <HAL_TIM_IC_Stop_IT+0x172>
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	2201      	movs	r2, #1
 801425e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 8014262:	7bfb      	ldrb	r3, [r7, #15]
}
 8014264:	4618      	mov	r0, r3
 8014266:	3710      	adds	r7, #16
 8014268:	46bd      	mov	sp, r7
 801426a:	bd80      	pop	{r7, pc}

0801426c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801426c:	b580      	push	{r7, lr}
 801426e:	b084      	sub	sp, #16
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	68db      	ldr	r3, [r3, #12]
 801427a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	691b      	ldr	r3, [r3, #16]
 8014282:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8014284:	68bb      	ldr	r3, [r7, #8]
 8014286:	f003 0302 	and.w	r3, r3, #2
 801428a:	2b00      	cmp	r3, #0
 801428c:	d020      	beq.n	80142d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	f003 0302 	and.w	r3, r3, #2
 8014294:	2b00      	cmp	r3, #0
 8014296:	d01b      	beq.n	80142d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	f06f 0202 	mvn.w	r2, #2
 80142a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	2201      	movs	r2, #1
 80142a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	699b      	ldr	r3, [r3, #24]
 80142ae:	f003 0303 	and.w	r3, r3, #3
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d003      	beq.n	80142be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80142b6:	6878      	ldr	r0, [r7, #4]
 80142b8:	f7ee ff2c 	bl	8003114 <HAL_TIM_IC_CaptureCallback>
 80142bc:	e005      	b.n	80142ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80142be:	6878      	ldr	r0, [r7, #4]
 80142c0:	f000 fc1b 	bl	8014afa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80142c4:	6878      	ldr	r0, [r7, #4]
 80142c6:	f000 fc22 	bl	8014b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	2200      	movs	r2, #0
 80142ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80142d0:	68bb      	ldr	r3, [r7, #8]
 80142d2:	f003 0304 	and.w	r3, r3, #4
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d020      	beq.n	801431c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	f003 0304 	and.w	r3, r3, #4
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d01b      	beq.n	801431c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	f06f 0204 	mvn.w	r2, #4
 80142ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	2202      	movs	r2, #2
 80142f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	699b      	ldr	r3, [r3, #24]
 80142fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d003      	beq.n	801430a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014302:	6878      	ldr	r0, [r7, #4]
 8014304:	f7ee ff06 	bl	8003114 <HAL_TIM_IC_CaptureCallback>
 8014308:	e005      	b.n	8014316 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801430a:	6878      	ldr	r0, [r7, #4]
 801430c:	f000 fbf5 	bl	8014afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014310:	6878      	ldr	r0, [r7, #4]
 8014312:	f000 fbfc 	bl	8014b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	2200      	movs	r2, #0
 801431a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801431c:	68bb      	ldr	r3, [r7, #8]
 801431e:	f003 0308 	and.w	r3, r3, #8
 8014322:	2b00      	cmp	r3, #0
 8014324:	d020      	beq.n	8014368 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	f003 0308 	and.w	r3, r3, #8
 801432c:	2b00      	cmp	r3, #0
 801432e:	d01b      	beq.n	8014368 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	f06f 0208 	mvn.w	r2, #8
 8014338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	2204      	movs	r2, #4
 801433e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	69db      	ldr	r3, [r3, #28]
 8014346:	f003 0303 	and.w	r3, r3, #3
 801434a:	2b00      	cmp	r3, #0
 801434c:	d003      	beq.n	8014356 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801434e:	6878      	ldr	r0, [r7, #4]
 8014350:	f7ee fee0 	bl	8003114 <HAL_TIM_IC_CaptureCallback>
 8014354:	e005      	b.n	8014362 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014356:	6878      	ldr	r0, [r7, #4]
 8014358:	f000 fbcf 	bl	8014afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801435c:	6878      	ldr	r0, [r7, #4]
 801435e:	f000 fbd6 	bl	8014b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	2200      	movs	r2, #0
 8014366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8014368:	68bb      	ldr	r3, [r7, #8]
 801436a:	f003 0310 	and.w	r3, r3, #16
 801436e:	2b00      	cmp	r3, #0
 8014370:	d020      	beq.n	80143b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	f003 0310 	and.w	r3, r3, #16
 8014378:	2b00      	cmp	r3, #0
 801437a:	d01b      	beq.n	80143b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	f06f 0210 	mvn.w	r2, #16
 8014384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	2208      	movs	r2, #8
 801438a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	69db      	ldr	r3, [r3, #28]
 8014392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8014396:	2b00      	cmp	r3, #0
 8014398:	d003      	beq.n	80143a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801439a:	6878      	ldr	r0, [r7, #4]
 801439c:	f7ee feba 	bl	8003114 <HAL_TIM_IC_CaptureCallback>
 80143a0:	e005      	b.n	80143ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80143a2:	6878      	ldr	r0, [r7, #4]
 80143a4:	f000 fba9 	bl	8014afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80143a8:	6878      	ldr	r0, [r7, #4]
 80143aa:	f000 fbb0 	bl	8014b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	2200      	movs	r2, #0
 80143b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80143b4:	68bb      	ldr	r3, [r7, #8]
 80143b6:	f003 0301 	and.w	r3, r3, #1
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d00c      	beq.n	80143d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	f003 0301 	and.w	r3, r3, #1
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d007      	beq.n	80143d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	f06f 0201 	mvn.w	r2, #1
 80143d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80143d2:	6878      	ldr	r0, [r7, #4]
 80143d4:	f000 fb87 	bl	8014ae6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80143d8:	68bb      	ldr	r3, [r7, #8]
 80143da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d104      	bne.n	80143ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80143e2:	68bb      	ldr	r3, [r7, #8]
 80143e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d00c      	beq.n	8014406 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d007      	beq.n	8014406 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80143fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8014400:	6878      	ldr	r0, [r7, #4]
 8014402:	f001 fa9d 	bl	8015940 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8014406:	68bb      	ldr	r3, [r7, #8]
 8014408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801440c:	2b00      	cmp	r3, #0
 801440e:	d00c      	beq.n	801442a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014416:	2b00      	cmp	r3, #0
 8014418:	d007      	beq.n	801442a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8014422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8014424:	6878      	ldr	r0, [r7, #4]
 8014426:	f001 fa95 	bl	8015954 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801442a:	68bb      	ldr	r3, [r7, #8]
 801442c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014430:	2b00      	cmp	r3, #0
 8014432:	d00c      	beq.n	801444e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801443a:	2b00      	cmp	r3, #0
 801443c:	d007      	beq.n	801444e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8014446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	f000 fb6a 	bl	8014b22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801444e:	68bb      	ldr	r3, [r7, #8]
 8014450:	f003 0320 	and.w	r3, r3, #32
 8014454:	2b00      	cmp	r3, #0
 8014456:	d00c      	beq.n	8014472 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	f003 0320 	and.w	r3, r3, #32
 801445e:	2b00      	cmp	r3, #0
 8014460:	d007      	beq.n	8014472 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	f06f 0220 	mvn.w	r2, #32
 801446a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801446c:	6878      	ldr	r0, [r7, #4]
 801446e:	f001 fa5d 	bl	801592c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8014472:	bf00      	nop
 8014474:	3710      	adds	r7, #16
 8014476:	46bd      	mov	sp, r7
 8014478:	bd80      	pop	{r7, pc}
	...

0801447c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b086      	sub	sp, #24
 8014480:	af00      	add	r7, sp, #0
 8014482:	60f8      	str	r0, [r7, #12]
 8014484:	60b9      	str	r1, [r7, #8]
 8014486:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014488:	2300      	movs	r3, #0
 801448a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014492:	2b01      	cmp	r3, #1
 8014494:	d101      	bne.n	801449a <HAL_TIM_OC_ConfigChannel+0x1e>
 8014496:	2302      	movs	r3, #2
 8014498:	e066      	b.n	8014568 <HAL_TIM_OC_ConfigChannel+0xec>
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	2201      	movs	r2, #1
 801449e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	2b14      	cmp	r3, #20
 80144a6:	d857      	bhi.n	8014558 <HAL_TIM_OC_ConfigChannel+0xdc>
 80144a8:	a201      	add	r2, pc, #4	@ (adr r2, 80144b0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80144aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144ae:	bf00      	nop
 80144b0:	08014505 	.word	0x08014505
 80144b4:	08014559 	.word	0x08014559
 80144b8:	08014559 	.word	0x08014559
 80144bc:	08014559 	.word	0x08014559
 80144c0:	08014513 	.word	0x08014513
 80144c4:	08014559 	.word	0x08014559
 80144c8:	08014559 	.word	0x08014559
 80144cc:	08014559 	.word	0x08014559
 80144d0:	08014521 	.word	0x08014521
 80144d4:	08014559 	.word	0x08014559
 80144d8:	08014559 	.word	0x08014559
 80144dc:	08014559 	.word	0x08014559
 80144e0:	0801452f 	.word	0x0801452f
 80144e4:	08014559 	.word	0x08014559
 80144e8:	08014559 	.word	0x08014559
 80144ec:	08014559 	.word	0x08014559
 80144f0:	0801453d 	.word	0x0801453d
 80144f4:	08014559 	.word	0x08014559
 80144f8:	08014559 	.word	0x08014559
 80144fc:	08014559 	.word	0x08014559
 8014500:	0801454b 	.word	0x0801454b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	68b9      	ldr	r1, [r7, #8]
 801450a:	4618      	mov	r0, r3
 801450c:	f000 fbba 	bl	8014c84 <TIM_OC1_SetConfig>
      break;
 8014510:	e025      	b.n	801455e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	68b9      	ldr	r1, [r7, #8]
 8014518:	4618      	mov	r0, r3
 801451a:	f000 fc43 	bl	8014da4 <TIM_OC2_SetConfig>
      break;
 801451e:	e01e      	b.n	801455e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	68b9      	ldr	r1, [r7, #8]
 8014526:	4618      	mov	r0, r3
 8014528:	f000 fcc6 	bl	8014eb8 <TIM_OC3_SetConfig>
      break;
 801452c:	e017      	b.n	801455e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	68b9      	ldr	r1, [r7, #8]
 8014534:	4618      	mov	r0, r3
 8014536:	f000 fd47 	bl	8014fc8 <TIM_OC4_SetConfig>
      break;
 801453a:	e010      	b.n	801455e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	68b9      	ldr	r1, [r7, #8]
 8014542:	4618      	mov	r0, r3
 8014544:	f000 fdaa 	bl	801509c <TIM_OC5_SetConfig>
      break;
 8014548:	e009      	b.n	801455e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	68b9      	ldr	r1, [r7, #8]
 8014550:	4618      	mov	r0, r3
 8014552:	f000 fe07 	bl	8015164 <TIM_OC6_SetConfig>
      break;
 8014556:	e002      	b.n	801455e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8014558:	2301      	movs	r3, #1
 801455a:	75fb      	strb	r3, [r7, #23]
      break;
 801455c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	2200      	movs	r2, #0
 8014562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8014566:	7dfb      	ldrb	r3, [r7, #23]
}
 8014568:	4618      	mov	r0, r3
 801456a:	3718      	adds	r7, #24
 801456c:	46bd      	mov	sp, r7
 801456e:	bd80      	pop	{r7, pc}

08014570 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b086      	sub	sp, #24
 8014574:	af00      	add	r7, sp, #0
 8014576:	60f8      	str	r0, [r7, #12]
 8014578:	60b9      	str	r1, [r7, #8]
 801457a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801457c:	2300      	movs	r3, #0
 801457e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014586:	2b01      	cmp	r3, #1
 8014588:	d101      	bne.n	801458e <HAL_TIM_IC_ConfigChannel+0x1e>
 801458a:	2302      	movs	r3, #2
 801458c:	e088      	b.n	80146a0 <HAL_TIM_IC_ConfigChannel+0x130>
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	2201      	movs	r2, #1
 8014592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d11b      	bne.n	80145d4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80145a0:	68bb      	ldr	r3, [r7, #8]
 80145a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80145a4:	68bb      	ldr	r3, [r7, #8]
 80145a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80145a8:	68bb      	ldr	r3, [r7, #8]
 80145aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80145ac:	f000 fed4 	bl	8015358 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	699a      	ldr	r2, [r3, #24]
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	f022 020c 	bic.w	r2, r2, #12
 80145be:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	6999      	ldr	r1, [r3, #24]
 80145c6:	68bb      	ldr	r3, [r7, #8]
 80145c8:	689a      	ldr	r2, [r3, #8]
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	430a      	orrs	r2, r1
 80145d0:	619a      	str	r2, [r3, #24]
 80145d2:	e060      	b.n	8014696 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	2b04      	cmp	r3, #4
 80145d8:	d11c      	bne.n	8014614 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80145de:	68bb      	ldr	r3, [r7, #8]
 80145e0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80145e2:	68bb      	ldr	r3, [r7, #8]
 80145e4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80145e6:	68bb      	ldr	r3, [r7, #8]
 80145e8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80145ea:	f000 ff52 	bl	8015492 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	699a      	ldr	r2, [r3, #24]
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80145fc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	6999      	ldr	r1, [r3, #24]
 8014604:	68bb      	ldr	r3, [r7, #8]
 8014606:	689b      	ldr	r3, [r3, #8]
 8014608:	021a      	lsls	r2, r3, #8
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	430a      	orrs	r2, r1
 8014610:	619a      	str	r2, [r3, #24]
 8014612:	e040      	b.n	8014696 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	2b08      	cmp	r3, #8
 8014618:	d11b      	bne.n	8014652 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801461e:	68bb      	ldr	r3, [r7, #8]
 8014620:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8014622:	68bb      	ldr	r3, [r7, #8]
 8014624:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8014626:	68bb      	ldr	r3, [r7, #8]
 8014628:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 801462a:	f000 ff9f 	bl	801556c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	69da      	ldr	r2, [r3, #28]
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	f022 020c 	bic.w	r2, r2, #12
 801463c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	69d9      	ldr	r1, [r3, #28]
 8014644:	68bb      	ldr	r3, [r7, #8]
 8014646:	689a      	ldr	r2, [r3, #8]
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	430a      	orrs	r2, r1
 801464e:	61da      	str	r2, [r3, #28]
 8014650:	e021      	b.n	8014696 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	2b0c      	cmp	r3, #12
 8014656:	d11c      	bne.n	8014692 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801465c:	68bb      	ldr	r3, [r7, #8]
 801465e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8014660:	68bb      	ldr	r3, [r7, #8]
 8014662:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8014664:	68bb      	ldr	r3, [r7, #8]
 8014666:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8014668:	f000 ffbc 	bl	80155e4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	69da      	ldr	r2, [r3, #28]
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 801467a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	69d9      	ldr	r1, [r3, #28]
 8014682:	68bb      	ldr	r3, [r7, #8]
 8014684:	689b      	ldr	r3, [r3, #8]
 8014686:	021a      	lsls	r2, r3, #8
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	430a      	orrs	r2, r1
 801468e:	61da      	str	r2, [r3, #28]
 8014690:	e001      	b.n	8014696 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8014692:	2301      	movs	r3, #1
 8014694:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	2200      	movs	r2, #0
 801469a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801469e:	7dfb      	ldrb	r3, [r7, #23]
}
 80146a0:	4618      	mov	r0, r3
 80146a2:	3718      	adds	r7, #24
 80146a4:	46bd      	mov	sp, r7
 80146a6:	bd80      	pop	{r7, pc}

080146a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b086      	sub	sp, #24
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	60f8      	str	r0, [r7, #12]
 80146b0:	60b9      	str	r1, [r7, #8]
 80146b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80146b4:	2300      	movs	r3, #0
 80146b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80146be:	2b01      	cmp	r3, #1
 80146c0:	d101      	bne.n	80146c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80146c2:	2302      	movs	r3, #2
 80146c4:	e0ff      	b.n	80148c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	2201      	movs	r2, #1
 80146ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	2b14      	cmp	r3, #20
 80146d2:	f200 80f0 	bhi.w	80148b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80146d6:	a201      	add	r2, pc, #4	@ (adr r2, 80146dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80146d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146dc:	08014731 	.word	0x08014731
 80146e0:	080148b7 	.word	0x080148b7
 80146e4:	080148b7 	.word	0x080148b7
 80146e8:	080148b7 	.word	0x080148b7
 80146ec:	08014771 	.word	0x08014771
 80146f0:	080148b7 	.word	0x080148b7
 80146f4:	080148b7 	.word	0x080148b7
 80146f8:	080148b7 	.word	0x080148b7
 80146fc:	080147b3 	.word	0x080147b3
 8014700:	080148b7 	.word	0x080148b7
 8014704:	080148b7 	.word	0x080148b7
 8014708:	080148b7 	.word	0x080148b7
 801470c:	080147f3 	.word	0x080147f3
 8014710:	080148b7 	.word	0x080148b7
 8014714:	080148b7 	.word	0x080148b7
 8014718:	080148b7 	.word	0x080148b7
 801471c:	08014835 	.word	0x08014835
 8014720:	080148b7 	.word	0x080148b7
 8014724:	080148b7 	.word	0x080148b7
 8014728:	080148b7 	.word	0x080148b7
 801472c:	08014875 	.word	0x08014875
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	68b9      	ldr	r1, [r7, #8]
 8014736:	4618      	mov	r0, r3
 8014738:	f000 faa4 	bl	8014c84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	699a      	ldr	r2, [r3, #24]
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	f042 0208 	orr.w	r2, r2, #8
 801474a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	699a      	ldr	r2, [r3, #24]
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	f022 0204 	bic.w	r2, r2, #4
 801475a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	6999      	ldr	r1, [r3, #24]
 8014762:	68bb      	ldr	r3, [r7, #8]
 8014764:	691a      	ldr	r2, [r3, #16]
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	430a      	orrs	r2, r1
 801476c:	619a      	str	r2, [r3, #24]
      break;
 801476e:	e0a5      	b.n	80148bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	68b9      	ldr	r1, [r7, #8]
 8014776:	4618      	mov	r0, r3
 8014778:	f000 fb14 	bl	8014da4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	699a      	ldr	r2, [r3, #24]
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801478a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	699a      	ldr	r2, [r3, #24]
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801479a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	6999      	ldr	r1, [r3, #24]
 80147a2:	68bb      	ldr	r3, [r7, #8]
 80147a4:	691b      	ldr	r3, [r3, #16]
 80147a6:	021a      	lsls	r2, r3, #8
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	430a      	orrs	r2, r1
 80147ae:	619a      	str	r2, [r3, #24]
      break;
 80147b0:	e084      	b.n	80148bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	68b9      	ldr	r1, [r7, #8]
 80147b8:	4618      	mov	r0, r3
 80147ba:	f000 fb7d 	bl	8014eb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	69da      	ldr	r2, [r3, #28]
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	f042 0208 	orr.w	r2, r2, #8
 80147cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	69da      	ldr	r2, [r3, #28]
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	f022 0204 	bic.w	r2, r2, #4
 80147dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	69d9      	ldr	r1, [r3, #28]
 80147e4:	68bb      	ldr	r3, [r7, #8]
 80147e6:	691a      	ldr	r2, [r3, #16]
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	430a      	orrs	r2, r1
 80147ee:	61da      	str	r2, [r3, #28]
      break;
 80147f0:	e064      	b.n	80148bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	68b9      	ldr	r1, [r7, #8]
 80147f8:	4618      	mov	r0, r3
 80147fa:	f000 fbe5 	bl	8014fc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	69da      	ldr	r2, [r3, #28]
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801480c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	69da      	ldr	r2, [r3, #28]
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801481c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	69d9      	ldr	r1, [r3, #28]
 8014824:	68bb      	ldr	r3, [r7, #8]
 8014826:	691b      	ldr	r3, [r3, #16]
 8014828:	021a      	lsls	r2, r3, #8
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	430a      	orrs	r2, r1
 8014830:	61da      	str	r2, [r3, #28]
      break;
 8014832:	e043      	b.n	80148bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	68b9      	ldr	r1, [r7, #8]
 801483a:	4618      	mov	r0, r3
 801483c:	f000 fc2e 	bl	801509c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	f042 0208 	orr.w	r2, r2, #8
 801484e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	f022 0204 	bic.w	r2, r2, #4
 801485e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8014866:	68bb      	ldr	r3, [r7, #8]
 8014868:	691a      	ldr	r2, [r3, #16]
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	430a      	orrs	r2, r1
 8014870:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8014872:	e023      	b.n	80148bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	68b9      	ldr	r1, [r7, #8]
 801487a:	4618      	mov	r0, r3
 801487c:	f000 fc72 	bl	8015164 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801488e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801489e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80148a6:	68bb      	ldr	r3, [r7, #8]
 80148a8:	691b      	ldr	r3, [r3, #16]
 80148aa:	021a      	lsls	r2, r3, #8
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	430a      	orrs	r2, r1
 80148b2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80148b4:	e002      	b.n	80148bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80148b6:	2301      	movs	r3, #1
 80148b8:	75fb      	strb	r3, [r7, #23]
      break;
 80148ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	2200      	movs	r2, #0
 80148c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80148c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80148c6:	4618      	mov	r0, r3
 80148c8:	3718      	adds	r7, #24
 80148ca:	46bd      	mov	sp, r7
 80148cc:	bd80      	pop	{r7, pc}
 80148ce:	bf00      	nop

080148d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b084      	sub	sp, #16
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
 80148d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80148da:	2300      	movs	r3, #0
 80148dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80148e4:	2b01      	cmp	r3, #1
 80148e6:	d101      	bne.n	80148ec <HAL_TIM_ConfigClockSource+0x1c>
 80148e8:	2302      	movs	r3, #2
 80148ea:	e0b6      	b.n	8014a5a <HAL_TIM_ConfigClockSource+0x18a>
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	2201      	movs	r2, #1
 80148f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	2202      	movs	r2, #2
 80148f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	689b      	ldr	r3, [r3, #8]
 8014902:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8014904:	68bb      	ldr	r3, [r7, #8]
 8014906:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801490a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 801490e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014910:	68bb      	ldr	r3, [r7, #8]
 8014912:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8014916:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	68ba      	ldr	r2, [r7, #8]
 801491e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8014920:	683b      	ldr	r3, [r7, #0]
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8014928:	d03e      	beq.n	80149a8 <HAL_TIM_ConfigClockSource+0xd8>
 801492a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801492e:	f200 8087 	bhi.w	8014a40 <HAL_TIM_ConfigClockSource+0x170>
 8014932:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014936:	f000 8086 	beq.w	8014a46 <HAL_TIM_ConfigClockSource+0x176>
 801493a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801493e:	d87f      	bhi.n	8014a40 <HAL_TIM_ConfigClockSource+0x170>
 8014940:	2b70      	cmp	r3, #112	@ 0x70
 8014942:	d01a      	beq.n	801497a <HAL_TIM_ConfigClockSource+0xaa>
 8014944:	2b70      	cmp	r3, #112	@ 0x70
 8014946:	d87b      	bhi.n	8014a40 <HAL_TIM_ConfigClockSource+0x170>
 8014948:	2b60      	cmp	r3, #96	@ 0x60
 801494a:	d050      	beq.n	80149ee <HAL_TIM_ConfigClockSource+0x11e>
 801494c:	2b60      	cmp	r3, #96	@ 0x60
 801494e:	d877      	bhi.n	8014a40 <HAL_TIM_ConfigClockSource+0x170>
 8014950:	2b50      	cmp	r3, #80	@ 0x50
 8014952:	d03c      	beq.n	80149ce <HAL_TIM_ConfigClockSource+0xfe>
 8014954:	2b50      	cmp	r3, #80	@ 0x50
 8014956:	d873      	bhi.n	8014a40 <HAL_TIM_ConfigClockSource+0x170>
 8014958:	2b40      	cmp	r3, #64	@ 0x40
 801495a:	d058      	beq.n	8014a0e <HAL_TIM_ConfigClockSource+0x13e>
 801495c:	2b40      	cmp	r3, #64	@ 0x40
 801495e:	d86f      	bhi.n	8014a40 <HAL_TIM_ConfigClockSource+0x170>
 8014960:	2b30      	cmp	r3, #48	@ 0x30
 8014962:	d064      	beq.n	8014a2e <HAL_TIM_ConfigClockSource+0x15e>
 8014964:	2b30      	cmp	r3, #48	@ 0x30
 8014966:	d86b      	bhi.n	8014a40 <HAL_TIM_ConfigClockSource+0x170>
 8014968:	2b20      	cmp	r3, #32
 801496a:	d060      	beq.n	8014a2e <HAL_TIM_ConfigClockSource+0x15e>
 801496c:	2b20      	cmp	r3, #32
 801496e:	d867      	bhi.n	8014a40 <HAL_TIM_ConfigClockSource+0x170>
 8014970:	2b00      	cmp	r3, #0
 8014972:	d05c      	beq.n	8014a2e <HAL_TIM_ConfigClockSource+0x15e>
 8014974:	2b10      	cmp	r3, #16
 8014976:	d05a      	beq.n	8014a2e <HAL_TIM_ConfigClockSource+0x15e>
 8014978:	e062      	b.n	8014a40 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801497e:	683b      	ldr	r3, [r7, #0]
 8014980:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8014982:	683b      	ldr	r3, [r7, #0]
 8014984:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8014986:	683b      	ldr	r3, [r7, #0]
 8014988:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801498a:	f000 fe83 	bl	8015694 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	689b      	ldr	r3, [r3, #8]
 8014994:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8014996:	68bb      	ldr	r3, [r7, #8]
 8014998:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801499c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	68ba      	ldr	r2, [r7, #8]
 80149a4:	609a      	str	r2, [r3, #8]
      break;
 80149a6:	e04f      	b.n	8014a48 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80149ac:	683b      	ldr	r3, [r7, #0]
 80149ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80149b0:	683b      	ldr	r3, [r7, #0]
 80149b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80149b4:	683b      	ldr	r3, [r7, #0]
 80149b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80149b8:	f000 fe6c 	bl	8015694 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	689a      	ldr	r2, [r3, #8]
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80149ca:	609a      	str	r2, [r3, #8]
      break;
 80149cc:	e03c      	b.n	8014a48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80149d2:	683b      	ldr	r3, [r7, #0]
 80149d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80149d6:	683b      	ldr	r3, [r7, #0]
 80149d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80149da:	461a      	mov	r2, r3
 80149dc:	f000 fd2a 	bl	8015434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	2150      	movs	r1, #80	@ 0x50
 80149e6:	4618      	mov	r0, r3
 80149e8:	f000 fe39 	bl	801565e <TIM_ITRx_SetConfig>
      break;
 80149ec:	e02c      	b.n	8014a48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80149f2:	683b      	ldr	r3, [r7, #0]
 80149f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80149f6:	683b      	ldr	r3, [r7, #0]
 80149f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80149fa:	461a      	mov	r2, r3
 80149fc:	f000 fd86 	bl	801550c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	2160      	movs	r1, #96	@ 0x60
 8014a06:	4618      	mov	r0, r3
 8014a08:	f000 fe29 	bl	801565e <TIM_ITRx_SetConfig>
      break;
 8014a0c:	e01c      	b.n	8014a48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8014a12:	683b      	ldr	r3, [r7, #0]
 8014a14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8014a16:	683b      	ldr	r3, [r7, #0]
 8014a18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014a1a:	461a      	mov	r2, r3
 8014a1c:	f000 fd0a 	bl	8015434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	2140      	movs	r1, #64	@ 0x40
 8014a26:	4618      	mov	r0, r3
 8014a28:	f000 fe19 	bl	801565e <TIM_ITRx_SetConfig>
      break;
 8014a2c:	e00c      	b.n	8014a48 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	681a      	ldr	r2, [r3, #0]
 8014a32:	683b      	ldr	r3, [r7, #0]
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	4619      	mov	r1, r3
 8014a38:	4610      	mov	r0, r2
 8014a3a:	f000 fe10 	bl	801565e <TIM_ITRx_SetConfig>
      break;
 8014a3e:	e003      	b.n	8014a48 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8014a40:	2301      	movs	r3, #1
 8014a42:	73fb      	strb	r3, [r7, #15]
      break;
 8014a44:	e000      	b.n	8014a48 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8014a46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	2201      	movs	r2, #1
 8014a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	2200      	movs	r2, #0
 8014a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8014a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	3710      	adds	r7, #16
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	bd80      	pop	{r7, pc}

08014a62 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8014a62:	b580      	push	{r7, lr}
 8014a64:	b082      	sub	sp, #8
 8014a66:	af00      	add	r7, sp, #0
 8014a68:	6078      	str	r0, [r7, #4]
 8014a6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014a72:	2b01      	cmp	r3, #1
 8014a74:	d101      	bne.n	8014a7a <HAL_TIM_SlaveConfigSynchro+0x18>
 8014a76:	2302      	movs	r3, #2
 8014a78:	e031      	b.n	8014ade <HAL_TIM_SlaveConfigSynchro+0x7c>
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	2201      	movs	r2, #1
 8014a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	2202      	movs	r2, #2
 8014a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8014a8a:	6839      	ldr	r1, [r7, #0]
 8014a8c:	6878      	ldr	r0, [r7, #4]
 8014a8e:	f000 fbcf 	bl	8015230 <TIM_SlaveTimer_SetConfig>
 8014a92:	4603      	mov	r3, r0
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d009      	beq.n	8014aac <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	2201      	movs	r2, #1
 8014a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8014aa8:	2301      	movs	r3, #1
 8014aaa:	e018      	b.n	8014ade <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	68da      	ldr	r2, [r3, #12]
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8014aba:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	68da      	ldr	r2, [r3, #12]
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8014aca:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	2201      	movs	r2, #1
 8014ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	2200      	movs	r2, #0
 8014ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8014adc:	2300      	movs	r3, #0
}
 8014ade:	4618      	mov	r0, r3
 8014ae0:	3708      	adds	r7, #8
 8014ae2:	46bd      	mov	sp, r7
 8014ae4:	bd80      	pop	{r7, pc}

08014ae6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014ae6:	b480      	push	{r7}
 8014ae8:	b083      	sub	sp, #12
 8014aea:	af00      	add	r7, sp, #0
 8014aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8014aee:	bf00      	nop
 8014af0:	370c      	adds	r7, #12
 8014af2:	46bd      	mov	sp, r7
 8014af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af8:	4770      	bx	lr

08014afa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014afa:	b480      	push	{r7}
 8014afc:	b083      	sub	sp, #12
 8014afe:	af00      	add	r7, sp, #0
 8014b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8014b02:	bf00      	nop
 8014b04:	370c      	adds	r7, #12
 8014b06:	46bd      	mov	sp, r7
 8014b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b0c:	4770      	bx	lr

08014b0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014b0e:	b480      	push	{r7}
 8014b10:	b083      	sub	sp, #12
 8014b12:	af00      	add	r7, sp, #0
 8014b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014b16:	bf00      	nop
 8014b18:	370c      	adds	r7, #12
 8014b1a:	46bd      	mov	sp, r7
 8014b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b20:	4770      	bx	lr

08014b22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014b22:	b480      	push	{r7}
 8014b24:	b083      	sub	sp, #12
 8014b26:	af00      	add	r7, sp, #0
 8014b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014b2a:	bf00      	nop
 8014b2c:	370c      	adds	r7, #12
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b34:	4770      	bx	lr
	...

08014b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8014b38:	b480      	push	{r7}
 8014b3a:	b085      	sub	sp, #20
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	6078      	str	r0, [r7, #4]
 8014b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	4a46      	ldr	r2, [pc, #280]	@ (8014c64 <TIM_Base_SetConfig+0x12c>)
 8014b4c:	4293      	cmp	r3, r2
 8014b4e:	d013      	beq.n	8014b78 <TIM_Base_SetConfig+0x40>
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014b56:	d00f      	beq.n	8014b78 <TIM_Base_SetConfig+0x40>
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	4a43      	ldr	r2, [pc, #268]	@ (8014c68 <TIM_Base_SetConfig+0x130>)
 8014b5c:	4293      	cmp	r3, r2
 8014b5e:	d00b      	beq.n	8014b78 <TIM_Base_SetConfig+0x40>
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	4a42      	ldr	r2, [pc, #264]	@ (8014c6c <TIM_Base_SetConfig+0x134>)
 8014b64:	4293      	cmp	r3, r2
 8014b66:	d007      	beq.n	8014b78 <TIM_Base_SetConfig+0x40>
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	4a41      	ldr	r2, [pc, #260]	@ (8014c70 <TIM_Base_SetConfig+0x138>)
 8014b6c:	4293      	cmp	r3, r2
 8014b6e:	d003      	beq.n	8014b78 <TIM_Base_SetConfig+0x40>
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	4a40      	ldr	r2, [pc, #256]	@ (8014c74 <TIM_Base_SetConfig+0x13c>)
 8014b74:	4293      	cmp	r3, r2
 8014b76:	d108      	bne.n	8014b8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014b80:	683b      	ldr	r3, [r7, #0]
 8014b82:	685b      	ldr	r3, [r3, #4]
 8014b84:	68fa      	ldr	r2, [r7, #12]
 8014b86:	4313      	orrs	r3, r2
 8014b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	4a35      	ldr	r2, [pc, #212]	@ (8014c64 <TIM_Base_SetConfig+0x12c>)
 8014b8e:	4293      	cmp	r3, r2
 8014b90:	d01f      	beq.n	8014bd2 <TIM_Base_SetConfig+0x9a>
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014b98:	d01b      	beq.n	8014bd2 <TIM_Base_SetConfig+0x9a>
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	4a32      	ldr	r2, [pc, #200]	@ (8014c68 <TIM_Base_SetConfig+0x130>)
 8014b9e:	4293      	cmp	r3, r2
 8014ba0:	d017      	beq.n	8014bd2 <TIM_Base_SetConfig+0x9a>
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	4a31      	ldr	r2, [pc, #196]	@ (8014c6c <TIM_Base_SetConfig+0x134>)
 8014ba6:	4293      	cmp	r3, r2
 8014ba8:	d013      	beq.n	8014bd2 <TIM_Base_SetConfig+0x9a>
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	4a30      	ldr	r2, [pc, #192]	@ (8014c70 <TIM_Base_SetConfig+0x138>)
 8014bae:	4293      	cmp	r3, r2
 8014bb0:	d00f      	beq.n	8014bd2 <TIM_Base_SetConfig+0x9a>
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	4a2f      	ldr	r2, [pc, #188]	@ (8014c74 <TIM_Base_SetConfig+0x13c>)
 8014bb6:	4293      	cmp	r3, r2
 8014bb8:	d00b      	beq.n	8014bd2 <TIM_Base_SetConfig+0x9a>
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	4a2e      	ldr	r2, [pc, #184]	@ (8014c78 <TIM_Base_SetConfig+0x140>)
 8014bbe:	4293      	cmp	r3, r2
 8014bc0:	d007      	beq.n	8014bd2 <TIM_Base_SetConfig+0x9a>
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	4a2d      	ldr	r2, [pc, #180]	@ (8014c7c <TIM_Base_SetConfig+0x144>)
 8014bc6:	4293      	cmp	r3, r2
 8014bc8:	d003      	beq.n	8014bd2 <TIM_Base_SetConfig+0x9a>
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	4a2c      	ldr	r2, [pc, #176]	@ (8014c80 <TIM_Base_SetConfig+0x148>)
 8014bce:	4293      	cmp	r3, r2
 8014bd0:	d108      	bne.n	8014be4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014bda:	683b      	ldr	r3, [r7, #0]
 8014bdc:	68db      	ldr	r3, [r3, #12]
 8014bde:	68fa      	ldr	r2, [r7, #12]
 8014be0:	4313      	orrs	r3, r2
 8014be2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8014bea:	683b      	ldr	r3, [r7, #0]
 8014bec:	695b      	ldr	r3, [r3, #20]
 8014bee:	4313      	orrs	r3, r2
 8014bf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	68fa      	ldr	r2, [r7, #12]
 8014bf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014bf8:	683b      	ldr	r3, [r7, #0]
 8014bfa:	689a      	ldr	r2, [r3, #8]
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014c00:	683b      	ldr	r3, [r7, #0]
 8014c02:	681a      	ldr	r2, [r3, #0]
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	4a16      	ldr	r2, [pc, #88]	@ (8014c64 <TIM_Base_SetConfig+0x12c>)
 8014c0c:	4293      	cmp	r3, r2
 8014c0e:	d00f      	beq.n	8014c30 <TIM_Base_SetConfig+0xf8>
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	4a18      	ldr	r2, [pc, #96]	@ (8014c74 <TIM_Base_SetConfig+0x13c>)
 8014c14:	4293      	cmp	r3, r2
 8014c16:	d00b      	beq.n	8014c30 <TIM_Base_SetConfig+0xf8>
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	4a17      	ldr	r2, [pc, #92]	@ (8014c78 <TIM_Base_SetConfig+0x140>)
 8014c1c:	4293      	cmp	r3, r2
 8014c1e:	d007      	beq.n	8014c30 <TIM_Base_SetConfig+0xf8>
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	4a16      	ldr	r2, [pc, #88]	@ (8014c7c <TIM_Base_SetConfig+0x144>)
 8014c24:	4293      	cmp	r3, r2
 8014c26:	d003      	beq.n	8014c30 <TIM_Base_SetConfig+0xf8>
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	4a15      	ldr	r2, [pc, #84]	@ (8014c80 <TIM_Base_SetConfig+0x148>)
 8014c2c:	4293      	cmp	r3, r2
 8014c2e:	d103      	bne.n	8014c38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014c30:	683b      	ldr	r3, [r7, #0]
 8014c32:	691a      	ldr	r2, [r3, #16]
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	2201      	movs	r2, #1
 8014c3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	691b      	ldr	r3, [r3, #16]
 8014c42:	f003 0301 	and.w	r3, r3, #1
 8014c46:	2b01      	cmp	r3, #1
 8014c48:	d105      	bne.n	8014c56 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	691b      	ldr	r3, [r3, #16]
 8014c4e:	f023 0201 	bic.w	r2, r3, #1
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	611a      	str	r2, [r3, #16]
  }
}
 8014c56:	bf00      	nop
 8014c58:	3714      	adds	r7, #20
 8014c5a:	46bd      	mov	sp, r7
 8014c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c60:	4770      	bx	lr
 8014c62:	bf00      	nop
 8014c64:	40012c00 	.word	0x40012c00
 8014c68:	40000400 	.word	0x40000400
 8014c6c:	40000800 	.word	0x40000800
 8014c70:	40000c00 	.word	0x40000c00
 8014c74:	40013400 	.word	0x40013400
 8014c78:	40014000 	.word	0x40014000
 8014c7c:	40014400 	.word	0x40014400
 8014c80:	40014800 	.word	0x40014800

08014c84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014c84:	b480      	push	{r7}
 8014c86:	b087      	sub	sp, #28
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	6078      	str	r0, [r7, #4]
 8014c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	6a1b      	ldr	r3, [r3, #32]
 8014c92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	6a1b      	ldr	r3, [r3, #32]
 8014c98:	f023 0201 	bic.w	r2, r3, #1
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	685b      	ldr	r3, [r3, #4]
 8014ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	699b      	ldr	r3, [r3, #24]
 8014caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8014cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	f023 0303 	bic.w	r3, r3, #3
 8014cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014cc0:	683b      	ldr	r3, [r7, #0]
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	68fa      	ldr	r2, [r7, #12]
 8014cc6:	4313      	orrs	r3, r2
 8014cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014cca:	697b      	ldr	r3, [r7, #20]
 8014ccc:	f023 0302 	bic.w	r3, r3, #2
 8014cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014cd2:	683b      	ldr	r3, [r7, #0]
 8014cd4:	689b      	ldr	r3, [r3, #8]
 8014cd6:	697a      	ldr	r2, [r7, #20]
 8014cd8:	4313      	orrs	r3, r2
 8014cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	4a2c      	ldr	r2, [pc, #176]	@ (8014d90 <TIM_OC1_SetConfig+0x10c>)
 8014ce0:	4293      	cmp	r3, r2
 8014ce2:	d00f      	beq.n	8014d04 <TIM_OC1_SetConfig+0x80>
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	4a2b      	ldr	r2, [pc, #172]	@ (8014d94 <TIM_OC1_SetConfig+0x110>)
 8014ce8:	4293      	cmp	r3, r2
 8014cea:	d00b      	beq.n	8014d04 <TIM_OC1_SetConfig+0x80>
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	4a2a      	ldr	r2, [pc, #168]	@ (8014d98 <TIM_OC1_SetConfig+0x114>)
 8014cf0:	4293      	cmp	r3, r2
 8014cf2:	d007      	beq.n	8014d04 <TIM_OC1_SetConfig+0x80>
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	4a29      	ldr	r2, [pc, #164]	@ (8014d9c <TIM_OC1_SetConfig+0x118>)
 8014cf8:	4293      	cmp	r3, r2
 8014cfa:	d003      	beq.n	8014d04 <TIM_OC1_SetConfig+0x80>
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	4a28      	ldr	r2, [pc, #160]	@ (8014da0 <TIM_OC1_SetConfig+0x11c>)
 8014d00:	4293      	cmp	r3, r2
 8014d02:	d10c      	bne.n	8014d1e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014d04:	697b      	ldr	r3, [r7, #20]
 8014d06:	f023 0308 	bic.w	r3, r3, #8
 8014d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014d0c:	683b      	ldr	r3, [r7, #0]
 8014d0e:	68db      	ldr	r3, [r3, #12]
 8014d10:	697a      	ldr	r2, [r7, #20]
 8014d12:	4313      	orrs	r3, r2
 8014d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8014d16:	697b      	ldr	r3, [r7, #20]
 8014d18:	f023 0304 	bic.w	r3, r3, #4
 8014d1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	4a1b      	ldr	r2, [pc, #108]	@ (8014d90 <TIM_OC1_SetConfig+0x10c>)
 8014d22:	4293      	cmp	r3, r2
 8014d24:	d00f      	beq.n	8014d46 <TIM_OC1_SetConfig+0xc2>
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	4a1a      	ldr	r2, [pc, #104]	@ (8014d94 <TIM_OC1_SetConfig+0x110>)
 8014d2a:	4293      	cmp	r3, r2
 8014d2c:	d00b      	beq.n	8014d46 <TIM_OC1_SetConfig+0xc2>
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	4a19      	ldr	r2, [pc, #100]	@ (8014d98 <TIM_OC1_SetConfig+0x114>)
 8014d32:	4293      	cmp	r3, r2
 8014d34:	d007      	beq.n	8014d46 <TIM_OC1_SetConfig+0xc2>
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	4a18      	ldr	r2, [pc, #96]	@ (8014d9c <TIM_OC1_SetConfig+0x118>)
 8014d3a:	4293      	cmp	r3, r2
 8014d3c:	d003      	beq.n	8014d46 <TIM_OC1_SetConfig+0xc2>
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	4a17      	ldr	r2, [pc, #92]	@ (8014da0 <TIM_OC1_SetConfig+0x11c>)
 8014d42:	4293      	cmp	r3, r2
 8014d44:	d111      	bne.n	8014d6a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014d46:	693b      	ldr	r3, [r7, #16]
 8014d48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014d4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8014d4e:	693b      	ldr	r3, [r7, #16]
 8014d50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8014d54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014d56:	683b      	ldr	r3, [r7, #0]
 8014d58:	695b      	ldr	r3, [r3, #20]
 8014d5a:	693a      	ldr	r2, [r7, #16]
 8014d5c:	4313      	orrs	r3, r2
 8014d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014d60:	683b      	ldr	r3, [r7, #0]
 8014d62:	699b      	ldr	r3, [r3, #24]
 8014d64:	693a      	ldr	r2, [r7, #16]
 8014d66:	4313      	orrs	r3, r2
 8014d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	693a      	ldr	r2, [r7, #16]
 8014d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	68fa      	ldr	r2, [r7, #12]
 8014d74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014d76:	683b      	ldr	r3, [r7, #0]
 8014d78:	685a      	ldr	r2, [r3, #4]
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	697a      	ldr	r2, [r7, #20]
 8014d82:	621a      	str	r2, [r3, #32]
}
 8014d84:	bf00      	nop
 8014d86:	371c      	adds	r7, #28
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8e:	4770      	bx	lr
 8014d90:	40012c00 	.word	0x40012c00
 8014d94:	40013400 	.word	0x40013400
 8014d98:	40014000 	.word	0x40014000
 8014d9c:	40014400 	.word	0x40014400
 8014da0:	40014800 	.word	0x40014800

08014da4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014da4:	b480      	push	{r7}
 8014da6:	b087      	sub	sp, #28
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
 8014dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	6a1b      	ldr	r3, [r3, #32]
 8014db2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	6a1b      	ldr	r3, [r3, #32]
 8014db8:	f023 0210 	bic.w	r2, r3, #16
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	685b      	ldr	r3, [r3, #4]
 8014dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	699b      	ldr	r3, [r3, #24]
 8014dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8014dd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8014dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014dde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014de0:	683b      	ldr	r3, [r7, #0]
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	021b      	lsls	r3, r3, #8
 8014de6:	68fa      	ldr	r2, [r7, #12]
 8014de8:	4313      	orrs	r3, r2
 8014dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014dec:	697b      	ldr	r3, [r7, #20]
 8014dee:	f023 0320 	bic.w	r3, r3, #32
 8014df2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014df4:	683b      	ldr	r3, [r7, #0]
 8014df6:	689b      	ldr	r3, [r3, #8]
 8014df8:	011b      	lsls	r3, r3, #4
 8014dfa:	697a      	ldr	r2, [r7, #20]
 8014dfc:	4313      	orrs	r3, r2
 8014dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	4a28      	ldr	r2, [pc, #160]	@ (8014ea4 <TIM_OC2_SetConfig+0x100>)
 8014e04:	4293      	cmp	r3, r2
 8014e06:	d003      	beq.n	8014e10 <TIM_OC2_SetConfig+0x6c>
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	4a27      	ldr	r2, [pc, #156]	@ (8014ea8 <TIM_OC2_SetConfig+0x104>)
 8014e0c:	4293      	cmp	r3, r2
 8014e0e:	d10d      	bne.n	8014e2c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014e10:	697b      	ldr	r3, [r7, #20]
 8014e12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014e18:	683b      	ldr	r3, [r7, #0]
 8014e1a:	68db      	ldr	r3, [r3, #12]
 8014e1c:	011b      	lsls	r3, r3, #4
 8014e1e:	697a      	ldr	r2, [r7, #20]
 8014e20:	4313      	orrs	r3, r2
 8014e22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014e24:	697b      	ldr	r3, [r7, #20]
 8014e26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014e2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8014ea4 <TIM_OC2_SetConfig+0x100>)
 8014e30:	4293      	cmp	r3, r2
 8014e32:	d00f      	beq.n	8014e54 <TIM_OC2_SetConfig+0xb0>
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	4a1c      	ldr	r2, [pc, #112]	@ (8014ea8 <TIM_OC2_SetConfig+0x104>)
 8014e38:	4293      	cmp	r3, r2
 8014e3a:	d00b      	beq.n	8014e54 <TIM_OC2_SetConfig+0xb0>
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	4a1b      	ldr	r2, [pc, #108]	@ (8014eac <TIM_OC2_SetConfig+0x108>)
 8014e40:	4293      	cmp	r3, r2
 8014e42:	d007      	beq.n	8014e54 <TIM_OC2_SetConfig+0xb0>
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	4a1a      	ldr	r2, [pc, #104]	@ (8014eb0 <TIM_OC2_SetConfig+0x10c>)
 8014e48:	4293      	cmp	r3, r2
 8014e4a:	d003      	beq.n	8014e54 <TIM_OC2_SetConfig+0xb0>
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	4a19      	ldr	r2, [pc, #100]	@ (8014eb4 <TIM_OC2_SetConfig+0x110>)
 8014e50:	4293      	cmp	r3, r2
 8014e52:	d113      	bne.n	8014e7c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014e54:	693b      	ldr	r3, [r7, #16]
 8014e56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8014e5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014e5c:	693b      	ldr	r3, [r7, #16]
 8014e5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8014e62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014e64:	683b      	ldr	r3, [r7, #0]
 8014e66:	695b      	ldr	r3, [r3, #20]
 8014e68:	009b      	lsls	r3, r3, #2
 8014e6a:	693a      	ldr	r2, [r7, #16]
 8014e6c:	4313      	orrs	r3, r2
 8014e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014e70:	683b      	ldr	r3, [r7, #0]
 8014e72:	699b      	ldr	r3, [r3, #24]
 8014e74:	009b      	lsls	r3, r3, #2
 8014e76:	693a      	ldr	r2, [r7, #16]
 8014e78:	4313      	orrs	r3, r2
 8014e7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	693a      	ldr	r2, [r7, #16]
 8014e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	68fa      	ldr	r2, [r7, #12]
 8014e86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014e88:	683b      	ldr	r3, [r7, #0]
 8014e8a:	685a      	ldr	r2, [r3, #4]
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	697a      	ldr	r2, [r7, #20]
 8014e94:	621a      	str	r2, [r3, #32]
}
 8014e96:	bf00      	nop
 8014e98:	371c      	adds	r7, #28
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea0:	4770      	bx	lr
 8014ea2:	bf00      	nop
 8014ea4:	40012c00 	.word	0x40012c00
 8014ea8:	40013400 	.word	0x40013400
 8014eac:	40014000 	.word	0x40014000
 8014eb0:	40014400 	.word	0x40014400
 8014eb4:	40014800 	.word	0x40014800

08014eb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014eb8:	b480      	push	{r7}
 8014eba:	b087      	sub	sp, #28
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	6078      	str	r0, [r7, #4]
 8014ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	6a1b      	ldr	r3, [r3, #32]
 8014ec6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	6a1b      	ldr	r3, [r3, #32]
 8014ecc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	685b      	ldr	r3, [r3, #4]
 8014ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	69db      	ldr	r3, [r3, #28]
 8014ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8014ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	f023 0303 	bic.w	r3, r3, #3
 8014ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014ef4:	683b      	ldr	r3, [r7, #0]
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	68fa      	ldr	r2, [r7, #12]
 8014efa:	4313      	orrs	r3, r2
 8014efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8014efe:	697b      	ldr	r3, [r7, #20]
 8014f00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8014f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014f06:	683b      	ldr	r3, [r7, #0]
 8014f08:	689b      	ldr	r3, [r3, #8]
 8014f0a:	021b      	lsls	r3, r3, #8
 8014f0c:	697a      	ldr	r2, [r7, #20]
 8014f0e:	4313      	orrs	r3, r2
 8014f10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	4a27      	ldr	r2, [pc, #156]	@ (8014fb4 <TIM_OC3_SetConfig+0xfc>)
 8014f16:	4293      	cmp	r3, r2
 8014f18:	d003      	beq.n	8014f22 <TIM_OC3_SetConfig+0x6a>
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	4a26      	ldr	r2, [pc, #152]	@ (8014fb8 <TIM_OC3_SetConfig+0x100>)
 8014f1e:	4293      	cmp	r3, r2
 8014f20:	d10d      	bne.n	8014f3e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8014f22:	697b      	ldr	r3, [r7, #20]
 8014f24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8014f28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014f2a:	683b      	ldr	r3, [r7, #0]
 8014f2c:	68db      	ldr	r3, [r3, #12]
 8014f2e:	021b      	lsls	r3, r3, #8
 8014f30:	697a      	ldr	r2, [r7, #20]
 8014f32:	4313      	orrs	r3, r2
 8014f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8014f36:	697b      	ldr	r3, [r7, #20]
 8014f38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8014f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	4a1c      	ldr	r2, [pc, #112]	@ (8014fb4 <TIM_OC3_SetConfig+0xfc>)
 8014f42:	4293      	cmp	r3, r2
 8014f44:	d00f      	beq.n	8014f66 <TIM_OC3_SetConfig+0xae>
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	4a1b      	ldr	r2, [pc, #108]	@ (8014fb8 <TIM_OC3_SetConfig+0x100>)
 8014f4a:	4293      	cmp	r3, r2
 8014f4c:	d00b      	beq.n	8014f66 <TIM_OC3_SetConfig+0xae>
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	4a1a      	ldr	r2, [pc, #104]	@ (8014fbc <TIM_OC3_SetConfig+0x104>)
 8014f52:	4293      	cmp	r3, r2
 8014f54:	d007      	beq.n	8014f66 <TIM_OC3_SetConfig+0xae>
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	4a19      	ldr	r2, [pc, #100]	@ (8014fc0 <TIM_OC3_SetConfig+0x108>)
 8014f5a:	4293      	cmp	r3, r2
 8014f5c:	d003      	beq.n	8014f66 <TIM_OC3_SetConfig+0xae>
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	4a18      	ldr	r2, [pc, #96]	@ (8014fc4 <TIM_OC3_SetConfig+0x10c>)
 8014f62:	4293      	cmp	r3, r2
 8014f64:	d113      	bne.n	8014f8e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8014f66:	693b      	ldr	r3, [r7, #16]
 8014f68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8014f6e:	693b      	ldr	r3, [r7, #16]
 8014f70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8014f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8014f76:	683b      	ldr	r3, [r7, #0]
 8014f78:	695b      	ldr	r3, [r3, #20]
 8014f7a:	011b      	lsls	r3, r3, #4
 8014f7c:	693a      	ldr	r2, [r7, #16]
 8014f7e:	4313      	orrs	r3, r2
 8014f80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8014f82:	683b      	ldr	r3, [r7, #0]
 8014f84:	699b      	ldr	r3, [r3, #24]
 8014f86:	011b      	lsls	r3, r3, #4
 8014f88:	693a      	ldr	r2, [r7, #16]
 8014f8a:	4313      	orrs	r3, r2
 8014f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	693a      	ldr	r2, [r7, #16]
 8014f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	68fa      	ldr	r2, [r7, #12]
 8014f98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8014f9a:	683b      	ldr	r3, [r7, #0]
 8014f9c:	685a      	ldr	r2, [r3, #4]
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	697a      	ldr	r2, [r7, #20]
 8014fa6:	621a      	str	r2, [r3, #32]
}
 8014fa8:	bf00      	nop
 8014faa:	371c      	adds	r7, #28
 8014fac:	46bd      	mov	sp, r7
 8014fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb2:	4770      	bx	lr
 8014fb4:	40012c00 	.word	0x40012c00
 8014fb8:	40013400 	.word	0x40013400
 8014fbc:	40014000 	.word	0x40014000
 8014fc0:	40014400 	.word	0x40014400
 8014fc4:	40014800 	.word	0x40014800

08014fc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014fc8:	b480      	push	{r7}
 8014fca:	b087      	sub	sp, #28
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
 8014fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	6a1b      	ldr	r3, [r3, #32]
 8014fd6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	6a1b      	ldr	r3, [r3, #32]
 8014fdc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	685b      	ldr	r3, [r3, #4]
 8014fe8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	69db      	ldr	r3, [r3, #28]
 8014fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8014ff6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8014ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8015002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015004:	683b      	ldr	r3, [r7, #0]
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	021b      	lsls	r3, r3, #8
 801500a:	68fa      	ldr	r2, [r7, #12]
 801500c:	4313      	orrs	r3, r2
 801500e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8015010:	693b      	ldr	r3, [r7, #16]
 8015012:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8015016:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8015018:	683b      	ldr	r3, [r7, #0]
 801501a:	689b      	ldr	r3, [r3, #8]
 801501c:	031b      	lsls	r3, r3, #12
 801501e:	693a      	ldr	r2, [r7, #16]
 8015020:	4313      	orrs	r3, r2
 8015022:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	4a18      	ldr	r2, [pc, #96]	@ (8015088 <TIM_OC4_SetConfig+0xc0>)
 8015028:	4293      	cmp	r3, r2
 801502a:	d00f      	beq.n	801504c <TIM_OC4_SetConfig+0x84>
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	4a17      	ldr	r2, [pc, #92]	@ (801508c <TIM_OC4_SetConfig+0xc4>)
 8015030:	4293      	cmp	r3, r2
 8015032:	d00b      	beq.n	801504c <TIM_OC4_SetConfig+0x84>
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	4a16      	ldr	r2, [pc, #88]	@ (8015090 <TIM_OC4_SetConfig+0xc8>)
 8015038:	4293      	cmp	r3, r2
 801503a:	d007      	beq.n	801504c <TIM_OC4_SetConfig+0x84>
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	4a15      	ldr	r2, [pc, #84]	@ (8015094 <TIM_OC4_SetConfig+0xcc>)
 8015040:	4293      	cmp	r3, r2
 8015042:	d003      	beq.n	801504c <TIM_OC4_SetConfig+0x84>
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	4a14      	ldr	r2, [pc, #80]	@ (8015098 <TIM_OC4_SetConfig+0xd0>)
 8015048:	4293      	cmp	r3, r2
 801504a:	d109      	bne.n	8015060 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801504c:	697b      	ldr	r3, [r7, #20]
 801504e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8015052:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8015054:	683b      	ldr	r3, [r7, #0]
 8015056:	695b      	ldr	r3, [r3, #20]
 8015058:	019b      	lsls	r3, r3, #6
 801505a:	697a      	ldr	r2, [r7, #20]
 801505c:	4313      	orrs	r3, r2
 801505e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	697a      	ldr	r2, [r7, #20]
 8015064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	68fa      	ldr	r2, [r7, #12]
 801506a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801506c:	683b      	ldr	r3, [r7, #0]
 801506e:	685a      	ldr	r2, [r3, #4]
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	693a      	ldr	r2, [r7, #16]
 8015078:	621a      	str	r2, [r3, #32]
}
 801507a:	bf00      	nop
 801507c:	371c      	adds	r7, #28
 801507e:	46bd      	mov	sp, r7
 8015080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015084:	4770      	bx	lr
 8015086:	bf00      	nop
 8015088:	40012c00 	.word	0x40012c00
 801508c:	40013400 	.word	0x40013400
 8015090:	40014000 	.word	0x40014000
 8015094:	40014400 	.word	0x40014400
 8015098:	40014800 	.word	0x40014800

0801509c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801509c:	b480      	push	{r7}
 801509e:	b087      	sub	sp, #28
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
 80150a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	6a1b      	ldr	r3, [r3, #32]
 80150aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	6a1b      	ldr	r3, [r3, #32]
 80150b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	685b      	ldr	r3, [r3, #4]
 80150bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80150c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80150ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80150ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80150d0:	683b      	ldr	r3, [r7, #0]
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	68fa      	ldr	r2, [r7, #12]
 80150d6:	4313      	orrs	r3, r2
 80150d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80150da:	693b      	ldr	r3, [r7, #16]
 80150dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80150e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80150e2:	683b      	ldr	r3, [r7, #0]
 80150e4:	689b      	ldr	r3, [r3, #8]
 80150e6:	041b      	lsls	r3, r3, #16
 80150e8:	693a      	ldr	r2, [r7, #16]
 80150ea:	4313      	orrs	r3, r2
 80150ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	4a17      	ldr	r2, [pc, #92]	@ (8015150 <TIM_OC5_SetConfig+0xb4>)
 80150f2:	4293      	cmp	r3, r2
 80150f4:	d00f      	beq.n	8015116 <TIM_OC5_SetConfig+0x7a>
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	4a16      	ldr	r2, [pc, #88]	@ (8015154 <TIM_OC5_SetConfig+0xb8>)
 80150fa:	4293      	cmp	r3, r2
 80150fc:	d00b      	beq.n	8015116 <TIM_OC5_SetConfig+0x7a>
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	4a15      	ldr	r2, [pc, #84]	@ (8015158 <TIM_OC5_SetConfig+0xbc>)
 8015102:	4293      	cmp	r3, r2
 8015104:	d007      	beq.n	8015116 <TIM_OC5_SetConfig+0x7a>
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	4a14      	ldr	r2, [pc, #80]	@ (801515c <TIM_OC5_SetConfig+0xc0>)
 801510a:	4293      	cmp	r3, r2
 801510c:	d003      	beq.n	8015116 <TIM_OC5_SetConfig+0x7a>
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	4a13      	ldr	r2, [pc, #76]	@ (8015160 <TIM_OC5_SetConfig+0xc4>)
 8015112:	4293      	cmp	r3, r2
 8015114:	d109      	bne.n	801512a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8015116:	697b      	ldr	r3, [r7, #20]
 8015118:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801511c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801511e:	683b      	ldr	r3, [r7, #0]
 8015120:	695b      	ldr	r3, [r3, #20]
 8015122:	021b      	lsls	r3, r3, #8
 8015124:	697a      	ldr	r2, [r7, #20]
 8015126:	4313      	orrs	r3, r2
 8015128:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	697a      	ldr	r2, [r7, #20]
 801512e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	68fa      	ldr	r2, [r7, #12]
 8015134:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8015136:	683b      	ldr	r3, [r7, #0]
 8015138:	685a      	ldr	r2, [r3, #4]
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	693a      	ldr	r2, [r7, #16]
 8015142:	621a      	str	r2, [r3, #32]
}
 8015144:	bf00      	nop
 8015146:	371c      	adds	r7, #28
 8015148:	46bd      	mov	sp, r7
 801514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801514e:	4770      	bx	lr
 8015150:	40012c00 	.word	0x40012c00
 8015154:	40013400 	.word	0x40013400
 8015158:	40014000 	.word	0x40014000
 801515c:	40014400 	.word	0x40014400
 8015160:	40014800 	.word	0x40014800

08015164 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8015164:	b480      	push	{r7}
 8015166:	b087      	sub	sp, #28
 8015168:	af00      	add	r7, sp, #0
 801516a:	6078      	str	r0, [r7, #4]
 801516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	6a1b      	ldr	r3, [r3, #32]
 8015172:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	6a1b      	ldr	r3, [r3, #32]
 8015178:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	685b      	ldr	r3, [r3, #4]
 8015184:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801518a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8015192:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8015196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015198:	683b      	ldr	r3, [r7, #0]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	021b      	lsls	r3, r3, #8
 801519e:	68fa      	ldr	r2, [r7, #12]
 80151a0:	4313      	orrs	r3, r2
 80151a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80151a4:	693b      	ldr	r3, [r7, #16]
 80151a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80151aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80151ac:	683b      	ldr	r3, [r7, #0]
 80151ae:	689b      	ldr	r3, [r3, #8]
 80151b0:	051b      	lsls	r3, r3, #20
 80151b2:	693a      	ldr	r2, [r7, #16]
 80151b4:	4313      	orrs	r3, r2
 80151b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	4a18      	ldr	r2, [pc, #96]	@ (801521c <TIM_OC6_SetConfig+0xb8>)
 80151bc:	4293      	cmp	r3, r2
 80151be:	d00f      	beq.n	80151e0 <TIM_OC6_SetConfig+0x7c>
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	4a17      	ldr	r2, [pc, #92]	@ (8015220 <TIM_OC6_SetConfig+0xbc>)
 80151c4:	4293      	cmp	r3, r2
 80151c6:	d00b      	beq.n	80151e0 <TIM_OC6_SetConfig+0x7c>
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	4a16      	ldr	r2, [pc, #88]	@ (8015224 <TIM_OC6_SetConfig+0xc0>)
 80151cc:	4293      	cmp	r3, r2
 80151ce:	d007      	beq.n	80151e0 <TIM_OC6_SetConfig+0x7c>
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	4a15      	ldr	r2, [pc, #84]	@ (8015228 <TIM_OC6_SetConfig+0xc4>)
 80151d4:	4293      	cmp	r3, r2
 80151d6:	d003      	beq.n	80151e0 <TIM_OC6_SetConfig+0x7c>
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	4a14      	ldr	r2, [pc, #80]	@ (801522c <TIM_OC6_SetConfig+0xc8>)
 80151dc:	4293      	cmp	r3, r2
 80151de:	d109      	bne.n	80151f4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80151e0:	697b      	ldr	r3, [r7, #20]
 80151e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80151e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80151e8:	683b      	ldr	r3, [r7, #0]
 80151ea:	695b      	ldr	r3, [r3, #20]
 80151ec:	029b      	lsls	r3, r3, #10
 80151ee:	697a      	ldr	r2, [r7, #20]
 80151f0:	4313      	orrs	r3, r2
 80151f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	697a      	ldr	r2, [r7, #20]
 80151f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	68fa      	ldr	r2, [r7, #12]
 80151fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8015200:	683b      	ldr	r3, [r7, #0]
 8015202:	685a      	ldr	r2, [r3, #4]
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	693a      	ldr	r2, [r7, #16]
 801520c:	621a      	str	r2, [r3, #32]
}
 801520e:	bf00      	nop
 8015210:	371c      	adds	r7, #28
 8015212:	46bd      	mov	sp, r7
 8015214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015218:	4770      	bx	lr
 801521a:	bf00      	nop
 801521c:	40012c00 	.word	0x40012c00
 8015220:	40013400 	.word	0x40013400
 8015224:	40014000 	.word	0x40014000
 8015228:	40014400 	.word	0x40014400
 801522c:	40014800 	.word	0x40014800

08015230 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8015230:	b580      	push	{r7, lr}
 8015232:	b086      	sub	sp, #24
 8015234:	af00      	add	r7, sp, #0
 8015236:	6078      	str	r0, [r7, #4]
 8015238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801523a:	2300      	movs	r3, #0
 801523c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	689b      	ldr	r3, [r3, #8]
 8015244:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8015246:	693b      	ldr	r3, [r7, #16]
 8015248:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801524c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 801524e:	683b      	ldr	r3, [r7, #0]
 8015250:	685b      	ldr	r3, [r3, #4]
 8015252:	693a      	ldr	r2, [r7, #16]
 8015254:	4313      	orrs	r3, r2
 8015256:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8015258:	693b      	ldr	r3, [r7, #16]
 801525a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801525e:	f023 0307 	bic.w	r3, r3, #7
 8015262:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8015264:	683b      	ldr	r3, [r7, #0]
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	693a      	ldr	r2, [r7, #16]
 801526a:	4313      	orrs	r3, r2
 801526c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	693a      	ldr	r2, [r7, #16]
 8015274:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8015276:	683b      	ldr	r3, [r7, #0]
 8015278:	685b      	ldr	r3, [r3, #4]
 801527a:	2b70      	cmp	r3, #112	@ 0x70
 801527c:	d01a      	beq.n	80152b4 <TIM_SlaveTimer_SetConfig+0x84>
 801527e:	2b70      	cmp	r3, #112	@ 0x70
 8015280:	d860      	bhi.n	8015344 <TIM_SlaveTimer_SetConfig+0x114>
 8015282:	2b60      	cmp	r3, #96	@ 0x60
 8015284:	d054      	beq.n	8015330 <TIM_SlaveTimer_SetConfig+0x100>
 8015286:	2b60      	cmp	r3, #96	@ 0x60
 8015288:	d85c      	bhi.n	8015344 <TIM_SlaveTimer_SetConfig+0x114>
 801528a:	2b50      	cmp	r3, #80	@ 0x50
 801528c:	d046      	beq.n	801531c <TIM_SlaveTimer_SetConfig+0xec>
 801528e:	2b50      	cmp	r3, #80	@ 0x50
 8015290:	d858      	bhi.n	8015344 <TIM_SlaveTimer_SetConfig+0x114>
 8015292:	2b40      	cmp	r3, #64	@ 0x40
 8015294:	d019      	beq.n	80152ca <TIM_SlaveTimer_SetConfig+0x9a>
 8015296:	2b40      	cmp	r3, #64	@ 0x40
 8015298:	d854      	bhi.n	8015344 <TIM_SlaveTimer_SetConfig+0x114>
 801529a:	2b30      	cmp	r3, #48	@ 0x30
 801529c:	d055      	beq.n	801534a <TIM_SlaveTimer_SetConfig+0x11a>
 801529e:	2b30      	cmp	r3, #48	@ 0x30
 80152a0:	d850      	bhi.n	8015344 <TIM_SlaveTimer_SetConfig+0x114>
 80152a2:	2b20      	cmp	r3, #32
 80152a4:	d051      	beq.n	801534a <TIM_SlaveTimer_SetConfig+0x11a>
 80152a6:	2b20      	cmp	r3, #32
 80152a8:	d84c      	bhi.n	8015344 <TIM_SlaveTimer_SetConfig+0x114>
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d04d      	beq.n	801534a <TIM_SlaveTimer_SetConfig+0x11a>
 80152ae:	2b10      	cmp	r3, #16
 80152b0:	d04b      	beq.n	801534a <TIM_SlaveTimer_SetConfig+0x11a>
 80152b2:	e047      	b.n	8015344 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80152b8:	683b      	ldr	r3, [r7, #0]
 80152ba:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80152bc:	683b      	ldr	r3, [r7, #0]
 80152be:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80152c0:	683b      	ldr	r3, [r7, #0]
 80152c2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80152c4:	f000 f9e6 	bl	8015694 <TIM_ETR_SetConfig>
      break;
 80152c8:	e040      	b.n	801534c <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80152ca:	683b      	ldr	r3, [r7, #0]
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	2b05      	cmp	r3, #5
 80152d0:	d101      	bne.n	80152d6 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80152d2:	2301      	movs	r3, #1
 80152d4:	e03b      	b.n	801534e <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	6a1b      	ldr	r3, [r3, #32]
 80152dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	6a1a      	ldr	r2, [r3, #32]
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	f022 0201 	bic.w	r2, r2, #1
 80152ec:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	699b      	ldr	r3, [r3, #24]
 80152f4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80152f6:	68bb      	ldr	r3, [r7, #8]
 80152f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80152fc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80152fe:	683b      	ldr	r3, [r7, #0]
 8015300:	691b      	ldr	r3, [r3, #16]
 8015302:	011b      	lsls	r3, r3, #4
 8015304:	68ba      	ldr	r2, [r7, #8]
 8015306:	4313      	orrs	r3, r2
 8015308:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	68ba      	ldr	r2, [r7, #8]
 8015310:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	68fa      	ldr	r2, [r7, #12]
 8015318:	621a      	str	r2, [r3, #32]
      break;
 801531a:	e017      	b.n	801534c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8015320:	683b      	ldr	r3, [r7, #0]
 8015322:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8015324:	683b      	ldr	r3, [r7, #0]
 8015326:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8015328:	461a      	mov	r2, r3
 801532a:	f000 f883 	bl	8015434 <TIM_TI1_ConfigInputStage>
      break;
 801532e:	e00d      	b.n	801534c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8015334:	683b      	ldr	r3, [r7, #0]
 8015336:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8015338:	683b      	ldr	r3, [r7, #0]
 801533a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801533c:	461a      	mov	r2, r3
 801533e:	f000 f8e5 	bl	801550c <TIM_TI2_ConfigInputStage>
      break;
 8015342:	e003      	b.n	801534c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8015344:	2301      	movs	r3, #1
 8015346:	75fb      	strb	r3, [r7, #23]
      break;
 8015348:	e000      	b.n	801534c <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 801534a:	bf00      	nop
  }

  return status;
 801534c:	7dfb      	ldrb	r3, [r7, #23]
}
 801534e:	4618      	mov	r0, r3
 8015350:	3718      	adds	r7, #24
 8015352:	46bd      	mov	sp, r7
 8015354:	bd80      	pop	{r7, pc}
	...

08015358 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8015358:	b480      	push	{r7}
 801535a:	b087      	sub	sp, #28
 801535c:	af00      	add	r7, sp, #0
 801535e:	60f8      	str	r0, [r7, #12]
 8015360:	60b9      	str	r1, [r7, #8]
 8015362:	607a      	str	r2, [r7, #4]
 8015364:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	6a1b      	ldr	r3, [r3, #32]
 801536a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	6a1b      	ldr	r3, [r3, #32]
 8015370:	f023 0201 	bic.w	r2, r3, #1
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	699b      	ldr	r3, [r3, #24]
 801537c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	4a26      	ldr	r2, [pc, #152]	@ (801541c <TIM_TI1_SetConfig+0xc4>)
 8015382:	4293      	cmp	r3, r2
 8015384:	d017      	beq.n	80153b6 <TIM_TI1_SetConfig+0x5e>
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801538c:	d013      	beq.n	80153b6 <TIM_TI1_SetConfig+0x5e>
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	4a23      	ldr	r2, [pc, #140]	@ (8015420 <TIM_TI1_SetConfig+0xc8>)
 8015392:	4293      	cmp	r3, r2
 8015394:	d00f      	beq.n	80153b6 <TIM_TI1_SetConfig+0x5e>
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	4a22      	ldr	r2, [pc, #136]	@ (8015424 <TIM_TI1_SetConfig+0xcc>)
 801539a:	4293      	cmp	r3, r2
 801539c:	d00b      	beq.n	80153b6 <TIM_TI1_SetConfig+0x5e>
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	4a21      	ldr	r2, [pc, #132]	@ (8015428 <TIM_TI1_SetConfig+0xd0>)
 80153a2:	4293      	cmp	r3, r2
 80153a4:	d007      	beq.n	80153b6 <TIM_TI1_SetConfig+0x5e>
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	4a20      	ldr	r2, [pc, #128]	@ (801542c <TIM_TI1_SetConfig+0xd4>)
 80153aa:	4293      	cmp	r3, r2
 80153ac:	d003      	beq.n	80153b6 <TIM_TI1_SetConfig+0x5e>
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	4a1f      	ldr	r2, [pc, #124]	@ (8015430 <TIM_TI1_SetConfig+0xd8>)
 80153b2:	4293      	cmp	r3, r2
 80153b4:	d101      	bne.n	80153ba <TIM_TI1_SetConfig+0x62>
 80153b6:	2301      	movs	r3, #1
 80153b8:	e000      	b.n	80153bc <TIM_TI1_SetConfig+0x64>
 80153ba:	2300      	movs	r3, #0
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d008      	beq.n	80153d2 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80153c0:	697b      	ldr	r3, [r7, #20]
 80153c2:	f023 0303 	bic.w	r3, r3, #3
 80153c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80153c8:	697a      	ldr	r2, [r7, #20]
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	4313      	orrs	r3, r2
 80153ce:	617b      	str	r3, [r7, #20]
 80153d0:	e003      	b.n	80153da <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80153d2:	697b      	ldr	r3, [r7, #20]
 80153d4:	f043 0301 	orr.w	r3, r3, #1
 80153d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80153da:	697b      	ldr	r3, [r7, #20]
 80153dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80153e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80153e2:	683b      	ldr	r3, [r7, #0]
 80153e4:	011b      	lsls	r3, r3, #4
 80153e6:	b2db      	uxtb	r3, r3
 80153e8:	697a      	ldr	r2, [r7, #20]
 80153ea:	4313      	orrs	r3, r2
 80153ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80153ee:	693b      	ldr	r3, [r7, #16]
 80153f0:	f023 030a 	bic.w	r3, r3, #10
 80153f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80153f6:	68bb      	ldr	r3, [r7, #8]
 80153f8:	f003 030a 	and.w	r3, r3, #10
 80153fc:	693a      	ldr	r2, [r7, #16]
 80153fe:	4313      	orrs	r3, r2
 8015400:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	697a      	ldr	r2, [r7, #20]
 8015406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	693a      	ldr	r2, [r7, #16]
 801540c:	621a      	str	r2, [r3, #32]
}
 801540e:	bf00      	nop
 8015410:	371c      	adds	r7, #28
 8015412:	46bd      	mov	sp, r7
 8015414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015418:	4770      	bx	lr
 801541a:	bf00      	nop
 801541c:	40012c00 	.word	0x40012c00
 8015420:	40000400 	.word	0x40000400
 8015424:	40000800 	.word	0x40000800
 8015428:	40000c00 	.word	0x40000c00
 801542c:	40013400 	.word	0x40013400
 8015430:	40014000 	.word	0x40014000

08015434 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015434:	b480      	push	{r7}
 8015436:	b087      	sub	sp, #28
 8015438:	af00      	add	r7, sp, #0
 801543a:	60f8      	str	r0, [r7, #12]
 801543c:	60b9      	str	r1, [r7, #8]
 801543e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	6a1b      	ldr	r3, [r3, #32]
 8015444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	6a1b      	ldr	r3, [r3, #32]
 801544a:	f023 0201 	bic.w	r2, r3, #1
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	699b      	ldr	r3, [r3, #24]
 8015456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8015458:	693b      	ldr	r3, [r7, #16]
 801545a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801545e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	011b      	lsls	r3, r3, #4
 8015464:	693a      	ldr	r2, [r7, #16]
 8015466:	4313      	orrs	r3, r2
 8015468:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801546a:	697b      	ldr	r3, [r7, #20]
 801546c:	f023 030a 	bic.w	r3, r3, #10
 8015470:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8015472:	697a      	ldr	r2, [r7, #20]
 8015474:	68bb      	ldr	r3, [r7, #8]
 8015476:	4313      	orrs	r3, r2
 8015478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	693a      	ldr	r2, [r7, #16]
 801547e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	697a      	ldr	r2, [r7, #20]
 8015484:	621a      	str	r2, [r3, #32]
}
 8015486:	bf00      	nop
 8015488:	371c      	adds	r7, #28
 801548a:	46bd      	mov	sp, r7
 801548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015490:	4770      	bx	lr

08015492 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8015492:	b480      	push	{r7}
 8015494:	b087      	sub	sp, #28
 8015496:	af00      	add	r7, sp, #0
 8015498:	60f8      	str	r0, [r7, #12]
 801549a:	60b9      	str	r1, [r7, #8]
 801549c:	607a      	str	r2, [r7, #4]
 801549e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	6a1b      	ldr	r3, [r3, #32]
 80154a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	6a1b      	ldr	r3, [r3, #32]
 80154aa:	f023 0210 	bic.w	r2, r3, #16
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	699b      	ldr	r3, [r3, #24]
 80154b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80154b8:	693b      	ldr	r3, [r7, #16]
 80154ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80154be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	021b      	lsls	r3, r3, #8
 80154c4:	693a      	ldr	r2, [r7, #16]
 80154c6:	4313      	orrs	r3, r2
 80154c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80154ca:	693b      	ldr	r3, [r7, #16]
 80154cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80154d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80154d2:	683b      	ldr	r3, [r7, #0]
 80154d4:	031b      	lsls	r3, r3, #12
 80154d6:	b29b      	uxth	r3, r3
 80154d8:	693a      	ldr	r2, [r7, #16]
 80154da:	4313      	orrs	r3, r2
 80154dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80154de:	697b      	ldr	r3, [r7, #20]
 80154e0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80154e4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80154e6:	68bb      	ldr	r3, [r7, #8]
 80154e8:	011b      	lsls	r3, r3, #4
 80154ea:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80154ee:	697a      	ldr	r2, [r7, #20]
 80154f0:	4313      	orrs	r3, r2
 80154f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	693a      	ldr	r2, [r7, #16]
 80154f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	697a      	ldr	r2, [r7, #20]
 80154fe:	621a      	str	r2, [r3, #32]
}
 8015500:	bf00      	nop
 8015502:	371c      	adds	r7, #28
 8015504:	46bd      	mov	sp, r7
 8015506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801550a:	4770      	bx	lr

0801550c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801550c:	b480      	push	{r7}
 801550e:	b087      	sub	sp, #28
 8015510:	af00      	add	r7, sp, #0
 8015512:	60f8      	str	r0, [r7, #12]
 8015514:	60b9      	str	r1, [r7, #8]
 8015516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	6a1b      	ldr	r3, [r3, #32]
 801551c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	6a1b      	ldr	r3, [r3, #32]
 8015522:	f023 0210 	bic.w	r2, r3, #16
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	699b      	ldr	r3, [r3, #24]
 801552e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8015530:	693b      	ldr	r3, [r7, #16]
 8015532:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8015536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	031b      	lsls	r3, r3, #12
 801553c:	693a      	ldr	r2, [r7, #16]
 801553e:	4313      	orrs	r3, r2
 8015540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8015542:	697b      	ldr	r3, [r7, #20]
 8015544:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8015548:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801554a:	68bb      	ldr	r3, [r7, #8]
 801554c:	011b      	lsls	r3, r3, #4
 801554e:	697a      	ldr	r2, [r7, #20]
 8015550:	4313      	orrs	r3, r2
 8015552:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	693a      	ldr	r2, [r7, #16]
 8015558:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	697a      	ldr	r2, [r7, #20]
 801555e:	621a      	str	r2, [r3, #32]
}
 8015560:	bf00      	nop
 8015562:	371c      	adds	r7, #28
 8015564:	46bd      	mov	sp, r7
 8015566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801556a:	4770      	bx	lr

0801556c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801556c:	b480      	push	{r7}
 801556e:	b087      	sub	sp, #28
 8015570:	af00      	add	r7, sp, #0
 8015572:	60f8      	str	r0, [r7, #12]
 8015574:	60b9      	str	r1, [r7, #8]
 8015576:	607a      	str	r2, [r7, #4]
 8015578:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	6a1b      	ldr	r3, [r3, #32]
 801557e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	6a1b      	ldr	r3, [r3, #32]
 8015584:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	69db      	ldr	r3, [r3, #28]
 8015590:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8015592:	693b      	ldr	r3, [r7, #16]
 8015594:	f023 0303 	bic.w	r3, r3, #3
 8015598:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 801559a:	693a      	ldr	r2, [r7, #16]
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	4313      	orrs	r3, r2
 80155a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80155a2:	693b      	ldr	r3, [r7, #16]
 80155a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80155a8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80155aa:	683b      	ldr	r3, [r7, #0]
 80155ac:	011b      	lsls	r3, r3, #4
 80155ae:	b2db      	uxtb	r3, r3
 80155b0:	693a      	ldr	r2, [r7, #16]
 80155b2:	4313      	orrs	r3, r2
 80155b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80155b6:	697b      	ldr	r3, [r7, #20]
 80155b8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80155bc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80155be:	68bb      	ldr	r3, [r7, #8]
 80155c0:	021b      	lsls	r3, r3, #8
 80155c2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80155c6:	697a      	ldr	r2, [r7, #20]
 80155c8:	4313      	orrs	r3, r2
 80155ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	693a      	ldr	r2, [r7, #16]
 80155d0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	697a      	ldr	r2, [r7, #20]
 80155d6:	621a      	str	r2, [r3, #32]
}
 80155d8:	bf00      	nop
 80155da:	371c      	adds	r7, #28
 80155dc:	46bd      	mov	sp, r7
 80155de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e2:	4770      	bx	lr

080155e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80155e4:	b480      	push	{r7}
 80155e6:	b087      	sub	sp, #28
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	60f8      	str	r0, [r7, #12]
 80155ec:	60b9      	str	r1, [r7, #8]
 80155ee:	607a      	str	r2, [r7, #4]
 80155f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	6a1b      	ldr	r3, [r3, #32]
 80155f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	6a1b      	ldr	r3, [r3, #32]
 80155fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	69db      	ldr	r3, [r3, #28]
 8015608:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801560a:	693b      	ldr	r3, [r7, #16]
 801560c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8015610:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	021b      	lsls	r3, r3, #8
 8015616:	693a      	ldr	r2, [r7, #16]
 8015618:	4313      	orrs	r3, r2
 801561a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 801561c:	693b      	ldr	r3, [r7, #16]
 801561e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8015622:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8015624:	683b      	ldr	r3, [r7, #0]
 8015626:	031b      	lsls	r3, r3, #12
 8015628:	b29b      	uxth	r3, r3
 801562a:	693a      	ldr	r2, [r7, #16]
 801562c:	4313      	orrs	r3, r2
 801562e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8015630:	697b      	ldr	r3, [r7, #20]
 8015632:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8015636:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8015638:	68bb      	ldr	r3, [r7, #8]
 801563a:	031b      	lsls	r3, r3, #12
 801563c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8015640:	697a      	ldr	r2, [r7, #20]
 8015642:	4313      	orrs	r3, r2
 8015644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	693a      	ldr	r2, [r7, #16]
 801564a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	697a      	ldr	r2, [r7, #20]
 8015650:	621a      	str	r2, [r3, #32]
}
 8015652:	bf00      	nop
 8015654:	371c      	adds	r7, #28
 8015656:	46bd      	mov	sp, r7
 8015658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801565c:	4770      	bx	lr

0801565e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801565e:	b480      	push	{r7}
 8015660:	b085      	sub	sp, #20
 8015662:	af00      	add	r7, sp, #0
 8015664:	6078      	str	r0, [r7, #4]
 8015666:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	689b      	ldr	r3, [r3, #8]
 801566c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8015674:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8015676:	683a      	ldr	r2, [r7, #0]
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	4313      	orrs	r3, r2
 801567c:	f043 0307 	orr.w	r3, r3, #7
 8015680:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	68fa      	ldr	r2, [r7, #12]
 8015686:	609a      	str	r2, [r3, #8]
}
 8015688:	bf00      	nop
 801568a:	3714      	adds	r7, #20
 801568c:	46bd      	mov	sp, r7
 801568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015692:	4770      	bx	lr

08015694 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8015694:	b480      	push	{r7}
 8015696:	b087      	sub	sp, #28
 8015698:	af00      	add	r7, sp, #0
 801569a:	60f8      	str	r0, [r7, #12]
 801569c:	60b9      	str	r1, [r7, #8]
 801569e:	607a      	str	r2, [r7, #4]
 80156a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	689b      	ldr	r3, [r3, #8]
 80156a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80156a8:	697b      	ldr	r3, [r7, #20]
 80156aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80156ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80156b0:	683b      	ldr	r3, [r7, #0]
 80156b2:	021a      	lsls	r2, r3, #8
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	431a      	orrs	r2, r3
 80156b8:	68bb      	ldr	r3, [r7, #8]
 80156ba:	4313      	orrs	r3, r2
 80156bc:	697a      	ldr	r2, [r7, #20]
 80156be:	4313      	orrs	r3, r2
 80156c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	697a      	ldr	r2, [r7, #20]
 80156c6:	609a      	str	r2, [r3, #8]
}
 80156c8:	bf00      	nop
 80156ca:	371c      	adds	r7, #28
 80156cc:	46bd      	mov	sp, r7
 80156ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d2:	4770      	bx	lr

080156d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80156d4:	b480      	push	{r7}
 80156d6:	b087      	sub	sp, #28
 80156d8:	af00      	add	r7, sp, #0
 80156da:	60f8      	str	r0, [r7, #12]
 80156dc:	60b9      	str	r1, [r7, #8]
 80156de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80156e0:	68bb      	ldr	r3, [r7, #8]
 80156e2:	f003 031f 	and.w	r3, r3, #31
 80156e6:	2201      	movs	r2, #1
 80156e8:	fa02 f303 	lsl.w	r3, r2, r3
 80156ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	6a1a      	ldr	r2, [r3, #32]
 80156f2:	697b      	ldr	r3, [r7, #20]
 80156f4:	43db      	mvns	r3, r3
 80156f6:	401a      	ands	r2, r3
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	6a1a      	ldr	r2, [r3, #32]
 8015700:	68bb      	ldr	r3, [r7, #8]
 8015702:	f003 031f 	and.w	r3, r3, #31
 8015706:	6879      	ldr	r1, [r7, #4]
 8015708:	fa01 f303 	lsl.w	r3, r1, r3
 801570c:	431a      	orrs	r2, r3
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	621a      	str	r2, [r3, #32]
}
 8015712:	bf00      	nop
 8015714:	371c      	adds	r7, #28
 8015716:	46bd      	mov	sp, r7
 8015718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571c:	4770      	bx	lr
	...

08015720 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015720:	b480      	push	{r7}
 8015722:	b085      	sub	sp, #20
 8015724:	af00      	add	r7, sp, #0
 8015726:	6078      	str	r0, [r7, #4]
 8015728:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8015730:	2b01      	cmp	r3, #1
 8015732:	d101      	bne.n	8015738 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015734:	2302      	movs	r3, #2
 8015736:	e068      	b.n	801580a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	2201      	movs	r2, #1
 801573c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	2202      	movs	r2, #2
 8015744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	685b      	ldr	r3, [r3, #4]
 801574e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	689b      	ldr	r3, [r3, #8]
 8015756:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	4a2e      	ldr	r2, [pc, #184]	@ (8015818 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801575e:	4293      	cmp	r3, r2
 8015760:	d004      	beq.n	801576c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	4a2d      	ldr	r2, [pc, #180]	@ (801581c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8015768:	4293      	cmp	r3, r2
 801576a:	d108      	bne.n	801577e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8015772:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8015774:	683b      	ldr	r3, [r7, #0]
 8015776:	685b      	ldr	r3, [r3, #4]
 8015778:	68fa      	ldr	r2, [r7, #12]
 801577a:	4313      	orrs	r3, r2
 801577c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8015784:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015786:	683b      	ldr	r3, [r7, #0]
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	68fa      	ldr	r2, [r7, #12]
 801578c:	4313      	orrs	r3, r2
 801578e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	68fa      	ldr	r2, [r7, #12]
 8015796:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	4a1e      	ldr	r2, [pc, #120]	@ (8015818 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801579e:	4293      	cmp	r3, r2
 80157a0:	d01d      	beq.n	80157de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80157aa:	d018      	beq.n	80157de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	4a1b      	ldr	r2, [pc, #108]	@ (8015820 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80157b2:	4293      	cmp	r3, r2
 80157b4:	d013      	beq.n	80157de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	4a1a      	ldr	r2, [pc, #104]	@ (8015824 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80157bc:	4293      	cmp	r3, r2
 80157be:	d00e      	beq.n	80157de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	4a18      	ldr	r2, [pc, #96]	@ (8015828 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80157c6:	4293      	cmp	r3, r2
 80157c8:	d009      	beq.n	80157de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	4a13      	ldr	r2, [pc, #76]	@ (801581c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80157d0:	4293      	cmp	r3, r2
 80157d2:	d004      	beq.n	80157de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	4a14      	ldr	r2, [pc, #80]	@ (801582c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80157da:	4293      	cmp	r3, r2
 80157dc:	d10c      	bne.n	80157f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80157de:	68bb      	ldr	r3, [r7, #8]
 80157e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80157e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80157e6:	683b      	ldr	r3, [r7, #0]
 80157e8:	689b      	ldr	r3, [r3, #8]
 80157ea:	68ba      	ldr	r2, [r7, #8]
 80157ec:	4313      	orrs	r3, r2
 80157ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	68ba      	ldr	r2, [r7, #8]
 80157f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	2201      	movs	r2, #1
 80157fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	2200      	movs	r2, #0
 8015804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8015808:	2300      	movs	r3, #0
}
 801580a:	4618      	mov	r0, r3
 801580c:	3714      	adds	r7, #20
 801580e:	46bd      	mov	sp, r7
 8015810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015814:	4770      	bx	lr
 8015816:	bf00      	nop
 8015818:	40012c00 	.word	0x40012c00
 801581c:	40013400 	.word	0x40013400
 8015820:	40000400 	.word	0x40000400
 8015824:	40000800 	.word	0x40000800
 8015828:	40000c00 	.word	0x40000c00
 801582c:	40014000 	.word	0x40014000

08015830 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8015830:	b480      	push	{r7}
 8015832:	b085      	sub	sp, #20
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
 8015838:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801583a:	2300      	movs	r3, #0
 801583c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8015844:	2b01      	cmp	r3, #1
 8015846:	d101      	bne.n	801584c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8015848:	2302      	movs	r3, #2
 801584a:	e065      	b.n	8015918 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	2201      	movs	r2, #1
 8015850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801585a:	683b      	ldr	r3, [r7, #0]
 801585c:	68db      	ldr	r3, [r3, #12]
 801585e:	4313      	orrs	r3, r2
 8015860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8015868:	683b      	ldr	r3, [r7, #0]
 801586a:	689b      	ldr	r3, [r3, #8]
 801586c:	4313      	orrs	r3, r2
 801586e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8015876:	683b      	ldr	r3, [r7, #0]
 8015878:	685b      	ldr	r3, [r3, #4]
 801587a:	4313      	orrs	r3, r2
 801587c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8015884:	683b      	ldr	r3, [r7, #0]
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	4313      	orrs	r3, r2
 801588a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8015892:	683b      	ldr	r3, [r7, #0]
 8015894:	691b      	ldr	r3, [r3, #16]
 8015896:	4313      	orrs	r3, r2
 8015898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80158a0:	683b      	ldr	r3, [r7, #0]
 80158a2:	695b      	ldr	r3, [r3, #20]
 80158a4:	4313      	orrs	r3, r2
 80158a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80158ae:	683b      	ldr	r3, [r7, #0]
 80158b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80158b2:	4313      	orrs	r3, r2
 80158b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80158bc:	683b      	ldr	r3, [r7, #0]
 80158be:	699b      	ldr	r3, [r3, #24]
 80158c0:	041b      	lsls	r3, r3, #16
 80158c2:	4313      	orrs	r3, r2
 80158c4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	4a16      	ldr	r2, [pc, #88]	@ (8015924 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80158cc:	4293      	cmp	r3, r2
 80158ce:	d004      	beq.n	80158da <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	4a14      	ldr	r2, [pc, #80]	@ (8015928 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80158d6:	4293      	cmp	r3, r2
 80158d8:	d115      	bne.n	8015906 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80158e0:	683b      	ldr	r3, [r7, #0]
 80158e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80158e4:	051b      	lsls	r3, r3, #20
 80158e6:	4313      	orrs	r3, r2
 80158e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80158f0:	683b      	ldr	r3, [r7, #0]
 80158f2:	69db      	ldr	r3, [r3, #28]
 80158f4:	4313      	orrs	r3, r2
 80158f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80158fe:	683b      	ldr	r3, [r7, #0]
 8015900:	6a1b      	ldr	r3, [r3, #32]
 8015902:	4313      	orrs	r3, r2
 8015904:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	68fa      	ldr	r2, [r7, #12]
 801590c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	2200      	movs	r2, #0
 8015912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8015916:	2300      	movs	r3, #0
}
 8015918:	4618      	mov	r0, r3
 801591a:	3714      	adds	r7, #20
 801591c:	46bd      	mov	sp, r7
 801591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015922:	4770      	bx	lr
 8015924:	40012c00 	.word	0x40012c00
 8015928:	40013400 	.word	0x40013400

0801592c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801592c:	b480      	push	{r7}
 801592e:	b083      	sub	sp, #12
 8015930:	af00      	add	r7, sp, #0
 8015932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8015934:	bf00      	nop
 8015936:	370c      	adds	r7, #12
 8015938:	46bd      	mov	sp, r7
 801593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801593e:	4770      	bx	lr

08015940 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8015940:	b480      	push	{r7}
 8015942:	b083      	sub	sp, #12
 8015944:	af00      	add	r7, sp, #0
 8015946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015948:	bf00      	nop
 801594a:	370c      	adds	r7, #12
 801594c:	46bd      	mov	sp, r7
 801594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015952:	4770      	bx	lr

08015954 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8015954:	b480      	push	{r7}
 8015956:	b083      	sub	sp, #12
 8015958:	af00      	add	r7, sp, #0
 801595a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801595c:	bf00      	nop
 801595e:	370c      	adds	r7, #12
 8015960:	46bd      	mov	sp, r7
 8015962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015966:	4770      	bx	lr

08015968 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b082      	sub	sp, #8
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d101      	bne.n	801597a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015976:	2301      	movs	r3, #1
 8015978:	e040      	b.n	80159fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801597e:	2b00      	cmp	r3, #0
 8015980:	d106      	bne.n	8015990 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	2200      	movs	r2, #0
 8015986:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801598a:	6878      	ldr	r0, [r7, #4]
 801598c:	f7f2 ff5c 	bl	8008848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	2224      	movs	r2, #36	@ 0x24
 8015994:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	681a      	ldr	r2, [r3, #0]
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	f022 0201 	bic.w	r2, r2, #1
 80159a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d002      	beq.n	80159b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80159ae:	6878      	ldr	r0, [r7, #4]
 80159b0:	f001 f8ba 	bl	8016b28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80159b4:	6878      	ldr	r0, [r7, #4]
 80159b6:	f000 fdff 	bl	80165b8 <UART_SetConfig>
 80159ba:	4603      	mov	r3, r0
 80159bc:	2b01      	cmp	r3, #1
 80159be:	d101      	bne.n	80159c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80159c0:	2301      	movs	r3, #1
 80159c2:	e01b      	b.n	80159fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	685a      	ldr	r2, [r3, #4]
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80159d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	689a      	ldr	r2, [r3, #8]
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80159e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	681a      	ldr	r2, [r3, #0]
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	f042 0201 	orr.w	r2, r2, #1
 80159f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80159f4:	6878      	ldr	r0, [r7, #4]
 80159f6:	f001 f939 	bl	8016c6c <UART_CheckIdleState>
 80159fa:	4603      	mov	r3, r0
}
 80159fc:	4618      	mov	r0, r3
 80159fe:	3708      	adds	r7, #8
 8015a00:	46bd      	mov	sp, r7
 8015a02:	bd80      	pop	{r7, pc}

08015a04 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b082      	sub	sp, #8
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d101      	bne.n	8015a16 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8015a12:	2301      	movs	r3, #1
 8015a14:	e048      	b.n	8015aa8 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d106      	bne.n	8015a2c <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	2200      	movs	r2, #0
 8015a22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015a26:	6878      	ldr	r0, [r7, #4]
 8015a28:	f7f2 ff0e 	bl	8008848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	2224      	movs	r2, #36	@ 0x24
 8015a30:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	681a      	ldr	r2, [r3, #0]
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	f022 0201 	bic.w	r2, r2, #1
 8015a40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d002      	beq.n	8015a50 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8015a4a:	6878      	ldr	r0, [r7, #4]
 8015a4c:	f001 f86c 	bl	8016b28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8015a50:	6878      	ldr	r0, [r7, #4]
 8015a52:	f000 fdb1 	bl	80165b8 <UART_SetConfig>
 8015a56:	4603      	mov	r3, r0
 8015a58:	2b01      	cmp	r3, #1
 8015a5a:	d101      	bne.n	8015a60 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 8015a5c:	2301      	movs	r3, #1
 8015a5e:	e023      	b.n	8015aa8 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	685a      	ldr	r2, [r3, #4]
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8015a6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	689a      	ldr	r2, [r3, #8]
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8015a7e:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	689a      	ldr	r2, [r3, #8]
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	f042 0208 	orr.w	r2, r2, #8
 8015a8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	681a      	ldr	r2, [r3, #0]
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	f042 0201 	orr.w	r2, r2, #1
 8015a9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8015aa0:	6878      	ldr	r0, [r7, #4]
 8015aa2:	f001 f8e3 	bl	8016c6c <UART_CheckIdleState>
 8015aa6:	4603      	mov	r3, r0
}
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	3708      	adds	r7, #8
 8015aac:	46bd      	mov	sp, r7
 8015aae:	bd80      	pop	{r7, pc}

08015ab0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	b08a      	sub	sp, #40	@ 0x28
 8015ab4:	af02      	add	r7, sp, #8
 8015ab6:	60f8      	str	r0, [r7, #12]
 8015ab8:	60b9      	str	r1, [r7, #8]
 8015aba:	603b      	str	r3, [r7, #0]
 8015abc:	4613      	mov	r3, r2
 8015abe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015ac4:	2b20      	cmp	r3, #32
 8015ac6:	d177      	bne.n	8015bb8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8015ac8:	68bb      	ldr	r3, [r7, #8]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d002      	beq.n	8015ad4 <HAL_UART_Transmit+0x24>
 8015ace:	88fb      	ldrh	r3, [r7, #6]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d101      	bne.n	8015ad8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8015ad4:	2301      	movs	r3, #1
 8015ad6:	e070      	b.n	8015bba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	2200      	movs	r2, #0
 8015adc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	2221      	movs	r2, #33	@ 0x21
 8015ae4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015ae6:	f7f6 fac5 	bl	800c074 <HAL_GetTick>
 8015aea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	88fa      	ldrh	r2, [r7, #6]
 8015af0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	88fa      	ldrh	r2, [r7, #6]
 8015af8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	689b      	ldr	r3, [r3, #8]
 8015b00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015b04:	d108      	bne.n	8015b18 <HAL_UART_Transmit+0x68>
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	691b      	ldr	r3, [r3, #16]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d104      	bne.n	8015b18 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8015b0e:	2300      	movs	r3, #0
 8015b10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8015b12:	68bb      	ldr	r3, [r7, #8]
 8015b14:	61bb      	str	r3, [r7, #24]
 8015b16:	e003      	b.n	8015b20 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8015b18:	68bb      	ldr	r3, [r7, #8]
 8015b1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8015b20:	e02f      	b.n	8015b82 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015b22:	683b      	ldr	r3, [r7, #0]
 8015b24:	9300      	str	r3, [sp, #0]
 8015b26:	697b      	ldr	r3, [r7, #20]
 8015b28:	2200      	movs	r2, #0
 8015b2a:	2180      	movs	r1, #128	@ 0x80
 8015b2c:	68f8      	ldr	r0, [r7, #12]
 8015b2e:	f001 f945 	bl	8016dbc <UART_WaitOnFlagUntilTimeout>
 8015b32:	4603      	mov	r3, r0
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d004      	beq.n	8015b42 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	2220      	movs	r2, #32
 8015b3c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8015b3e:	2303      	movs	r3, #3
 8015b40:	e03b      	b.n	8015bba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8015b42:	69fb      	ldr	r3, [r7, #28]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d10b      	bne.n	8015b60 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015b48:	69bb      	ldr	r3, [r7, #24]
 8015b4a:	881a      	ldrh	r2, [r3, #0]
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015b54:	b292      	uxth	r2, r2
 8015b56:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8015b58:	69bb      	ldr	r3, [r7, #24]
 8015b5a:	3302      	adds	r3, #2
 8015b5c:	61bb      	str	r3, [r7, #24]
 8015b5e:	e007      	b.n	8015b70 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8015b60:	69fb      	ldr	r3, [r7, #28]
 8015b62:	781a      	ldrb	r2, [r3, #0]
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8015b6a:	69fb      	ldr	r3, [r7, #28]
 8015b6c:	3301      	adds	r3, #1
 8015b6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8015b76:	b29b      	uxth	r3, r3
 8015b78:	3b01      	subs	r3, #1
 8015b7a:	b29a      	uxth	r2, r3
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8015b88:	b29b      	uxth	r3, r3
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d1c9      	bne.n	8015b22 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015b8e:	683b      	ldr	r3, [r7, #0]
 8015b90:	9300      	str	r3, [sp, #0]
 8015b92:	697b      	ldr	r3, [r7, #20]
 8015b94:	2200      	movs	r2, #0
 8015b96:	2140      	movs	r1, #64	@ 0x40
 8015b98:	68f8      	ldr	r0, [r7, #12]
 8015b9a:	f001 f90f 	bl	8016dbc <UART_WaitOnFlagUntilTimeout>
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d004      	beq.n	8015bae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	2220      	movs	r2, #32
 8015ba8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8015baa:	2303      	movs	r3, #3
 8015bac:	e005      	b.n	8015bba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	2220      	movs	r2, #32
 8015bb2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	e000      	b.n	8015bba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8015bb8:	2302      	movs	r3, #2
  }
}
 8015bba:	4618      	mov	r0, r3
 8015bbc:	3720      	adds	r7, #32
 8015bbe:	46bd      	mov	sp, r7
 8015bc0:	bd80      	pop	{r7, pc}

08015bc2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015bc2:	b580      	push	{r7, lr}
 8015bc4:	b08a      	sub	sp, #40	@ 0x28
 8015bc6:	af02      	add	r7, sp, #8
 8015bc8:	60f8      	str	r0, [r7, #12]
 8015bca:	60b9      	str	r1, [r7, #8]
 8015bcc:	603b      	str	r3, [r7, #0]
 8015bce:	4613      	mov	r3, r2
 8015bd0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015bd8:	2b20      	cmp	r3, #32
 8015bda:	f040 80b6 	bne.w	8015d4a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8015bde:	68bb      	ldr	r3, [r7, #8]
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d002      	beq.n	8015bea <HAL_UART_Receive+0x28>
 8015be4:	88fb      	ldrh	r3, [r7, #6]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d101      	bne.n	8015bee <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8015bea:	2301      	movs	r3, #1
 8015bec:	e0ae      	b.n	8015d4c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	2200      	movs	r2, #0
 8015bf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	2222      	movs	r2, #34	@ 0x22
 8015bfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	2200      	movs	r2, #0
 8015c02:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015c04:	f7f6 fa36 	bl	800c074 <HAL_GetTick>
 8015c08:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	88fa      	ldrh	r2, [r7, #6]
 8015c0e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	88fa      	ldrh	r2, [r7, #6]
 8015c16:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	689b      	ldr	r3, [r3, #8]
 8015c1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015c22:	d10e      	bne.n	8015c42 <HAL_UART_Receive+0x80>
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	691b      	ldr	r3, [r3, #16]
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d105      	bne.n	8015c38 <HAL_UART_Receive+0x76>
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8015c32:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015c36:	e02d      	b.n	8015c94 <HAL_UART_Receive+0xd2>
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	22ff      	movs	r2, #255	@ 0xff
 8015c3c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015c40:	e028      	b.n	8015c94 <HAL_UART_Receive+0xd2>
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	689b      	ldr	r3, [r3, #8]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d10d      	bne.n	8015c66 <HAL_UART_Receive+0xa4>
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	691b      	ldr	r3, [r3, #16]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d104      	bne.n	8015c5c <HAL_UART_Receive+0x9a>
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	22ff      	movs	r2, #255	@ 0xff
 8015c56:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015c5a:	e01b      	b.n	8015c94 <HAL_UART_Receive+0xd2>
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	227f      	movs	r2, #127	@ 0x7f
 8015c60:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015c64:	e016      	b.n	8015c94 <HAL_UART_Receive+0xd2>
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	689b      	ldr	r3, [r3, #8]
 8015c6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015c6e:	d10d      	bne.n	8015c8c <HAL_UART_Receive+0xca>
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	691b      	ldr	r3, [r3, #16]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d104      	bne.n	8015c82 <HAL_UART_Receive+0xc0>
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	227f      	movs	r2, #127	@ 0x7f
 8015c7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015c80:	e008      	b.n	8015c94 <HAL_UART_Receive+0xd2>
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	223f      	movs	r2, #63	@ 0x3f
 8015c86:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015c8a:	e003      	b.n	8015c94 <HAL_UART_Receive+0xd2>
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	2200      	movs	r2, #0
 8015c90:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8015c9a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	689b      	ldr	r3, [r3, #8]
 8015ca0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015ca4:	d108      	bne.n	8015cb8 <HAL_UART_Receive+0xf6>
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	691b      	ldr	r3, [r3, #16]
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d104      	bne.n	8015cb8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8015cae:	2300      	movs	r3, #0
 8015cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015cb2:	68bb      	ldr	r3, [r7, #8]
 8015cb4:	61bb      	str	r3, [r7, #24]
 8015cb6:	e003      	b.n	8015cc0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8015cb8:	68bb      	ldr	r3, [r7, #8]
 8015cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8015cc0:	e037      	b.n	8015d32 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8015cc2:	683b      	ldr	r3, [r7, #0]
 8015cc4:	9300      	str	r3, [sp, #0]
 8015cc6:	697b      	ldr	r3, [r7, #20]
 8015cc8:	2200      	movs	r2, #0
 8015cca:	2120      	movs	r1, #32
 8015ccc:	68f8      	ldr	r0, [r7, #12]
 8015cce:	f001 f875 	bl	8016dbc <UART_WaitOnFlagUntilTimeout>
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d005      	beq.n	8015ce4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	2220      	movs	r2, #32
 8015cdc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8015ce0:	2303      	movs	r3, #3
 8015ce2:	e033      	b.n	8015d4c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8015ce4:	69fb      	ldr	r3, [r7, #28]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d10c      	bne.n	8015d04 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015cf0:	b29a      	uxth	r2, r3
 8015cf2:	8a7b      	ldrh	r3, [r7, #18]
 8015cf4:	4013      	ands	r3, r2
 8015cf6:	b29a      	uxth	r2, r3
 8015cf8:	69bb      	ldr	r3, [r7, #24]
 8015cfa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8015cfc:	69bb      	ldr	r3, [r7, #24]
 8015cfe:	3302      	adds	r3, #2
 8015d00:	61bb      	str	r3, [r7, #24]
 8015d02:	e00d      	b.n	8015d20 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015d0a:	b29b      	uxth	r3, r3
 8015d0c:	b2da      	uxtb	r2, r3
 8015d0e:	8a7b      	ldrh	r3, [r7, #18]
 8015d10:	b2db      	uxtb	r3, r3
 8015d12:	4013      	ands	r3, r2
 8015d14:	b2da      	uxtb	r2, r3
 8015d16:	69fb      	ldr	r3, [r7, #28]
 8015d18:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8015d1a:	69fb      	ldr	r3, [r7, #28]
 8015d1c:	3301      	adds	r3, #1
 8015d1e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015d26:	b29b      	uxth	r3, r3
 8015d28:	3b01      	subs	r3, #1
 8015d2a:	b29a      	uxth	r2, r3
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015d38:	b29b      	uxth	r3, r3
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d1c1      	bne.n	8015cc2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	2220      	movs	r2, #32
 8015d42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8015d46:	2300      	movs	r3, #0
 8015d48:	e000      	b.n	8015d4c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8015d4a:	2302      	movs	r3, #2
  }
}
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	3720      	adds	r7, #32
 8015d50:	46bd      	mov	sp, r7
 8015d52:	bd80      	pop	{r7, pc}

08015d54 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8015d54:	b580      	push	{r7, lr}
 8015d56:	b08a      	sub	sp, #40	@ 0x28
 8015d58:	af00      	add	r7, sp, #0
 8015d5a:	60f8      	str	r0, [r7, #12]
 8015d5c:	60b9      	str	r1, [r7, #8]
 8015d5e:	4613      	mov	r3, r2
 8015d60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015d66:	2b20      	cmp	r3, #32
 8015d68:	d165      	bne.n	8015e36 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8015d6a:	68bb      	ldr	r3, [r7, #8]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d002      	beq.n	8015d76 <HAL_UART_Transmit_DMA+0x22>
 8015d70:	88fb      	ldrh	r3, [r7, #6]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d101      	bne.n	8015d7a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8015d76:	2301      	movs	r3, #1
 8015d78:	e05e      	b.n	8015e38 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	68ba      	ldr	r2, [r7, #8]
 8015d7e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	88fa      	ldrh	r2, [r7, #6]
 8015d84:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	88fa      	ldrh	r2, [r7, #6]
 8015d8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	2200      	movs	r2, #0
 8015d94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	2221      	movs	r2, #33	@ 0x21
 8015d9c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d027      	beq.n	8015df6 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015daa:	4a25      	ldr	r2, [pc, #148]	@ (8015e40 <HAL_UART_Transmit_DMA+0xec>)
 8015dac:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015db2:	4a24      	ldr	r2, [pc, #144]	@ (8015e44 <HAL_UART_Transmit_DMA+0xf0>)
 8015db4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015dba:	4a23      	ldr	r2, [pc, #140]	@ (8015e48 <HAL_UART_Transmit_DMA+0xf4>)
 8015dbc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015dce:	4619      	mov	r1, r3
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	3328      	adds	r3, #40	@ 0x28
 8015dd6:	461a      	mov	r2, r3
 8015dd8:	88fb      	ldrh	r3, [r7, #6]
 8015dda:	f7f8 f931 	bl	800e040 <HAL_DMA_Start_IT>
 8015dde:	4603      	mov	r3, r0
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d008      	beq.n	8015df6 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	2210      	movs	r2, #16
 8015de8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	2220      	movs	r2, #32
 8015df0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8015df2:	2301      	movs	r3, #1
 8015df4:	e020      	b.n	8015e38 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	2240      	movs	r2, #64	@ 0x40
 8015dfc:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	3308      	adds	r3, #8
 8015e04:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e06:	697b      	ldr	r3, [r7, #20]
 8015e08:	e853 3f00 	ldrex	r3, [r3]
 8015e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8015e0e:	693b      	ldr	r3, [r7, #16]
 8015e10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	3308      	adds	r3, #8
 8015e1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015e1e:	623a      	str	r2, [r7, #32]
 8015e20:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e22:	69f9      	ldr	r1, [r7, #28]
 8015e24:	6a3a      	ldr	r2, [r7, #32]
 8015e26:	e841 2300 	strex	r3, r2, [r1]
 8015e2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8015e2c:	69bb      	ldr	r3, [r7, #24]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d1e5      	bne.n	8015dfe <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8015e32:	2300      	movs	r3, #0
 8015e34:	e000      	b.n	8015e38 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8015e36:	2302      	movs	r3, #2
  }
}
 8015e38:	4618      	mov	r0, r3
 8015e3a:	3728      	adds	r7, #40	@ 0x28
 8015e3c:	46bd      	mov	sp, r7
 8015e3e:	bd80      	pop	{r7, pc}
 8015e40:	080170ed 	.word	0x080170ed
 8015e44:	08017187 	.word	0x08017187
 8015e48:	0801730d 	.word	0x0801730d

08015e4c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b090      	sub	sp, #64	@ 0x40
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015e60:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	689b      	ldr	r3, [r3, #8]
 8015e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015e6c:	2b80      	cmp	r3, #128	@ 0x80
 8015e6e:	d139      	bne.n	8015ee4 <HAL_UART_DMAStop+0x98>
 8015e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015e72:	2b21      	cmp	r3, #33	@ 0x21
 8015e74:	d136      	bne.n	8015ee4 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	3308      	adds	r3, #8
 8015e7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e7e:	6a3b      	ldr	r3, [r7, #32]
 8015e80:	e853 3f00 	ldrex	r3, [r3]
 8015e84:	61fb      	str	r3, [r7, #28]
   return(result);
 8015e86:	69fb      	ldr	r3, [r7, #28]
 8015e88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	3308      	adds	r3, #8
 8015e94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015e96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8015e98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015e9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015e9e:	e841 2300 	strex	r3, r2, [r1]
 8015ea2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d1e5      	bne.n	8015e76 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d015      	beq.n	8015ede <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	f7f8 f922 	bl	800e100 <HAL_DMA_Abort>
 8015ebc:	4603      	mov	r3, r0
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d00d      	beq.n	8015ede <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	f7f8 fa48 	bl	800e35c <HAL_DMA_GetError>
 8015ecc:	4603      	mov	r3, r0
 8015ece:	2b20      	cmp	r3, #32
 8015ed0:	d105      	bne.n	8015ede <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	2210      	movs	r2, #16
 8015ed6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8015eda:	2303      	movs	r3, #3
 8015edc:	e044      	b.n	8015f68 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8015ede:	6878      	ldr	r0, [r7, #4]
 8015ee0:	f001 f87a 	bl	8016fd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	689b      	ldr	r3, [r3, #8]
 8015eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015eee:	2b40      	cmp	r3, #64	@ 0x40
 8015ef0:	d139      	bne.n	8015f66 <HAL_UART_DMAStop+0x11a>
 8015ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ef4:	2b22      	cmp	r3, #34	@ 0x22
 8015ef6:	d136      	bne.n	8015f66 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	3308      	adds	r3, #8
 8015efe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	e853 3f00 	ldrex	r3, [r3]
 8015f06:	60bb      	str	r3, [r7, #8]
   return(result);
 8015f08:	68bb      	ldr	r3, [r7, #8]
 8015f0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8015f0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	3308      	adds	r3, #8
 8015f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015f18:	61ba      	str	r2, [r7, #24]
 8015f1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f1c:	6979      	ldr	r1, [r7, #20]
 8015f1e:	69ba      	ldr	r2, [r7, #24]
 8015f20:	e841 2300 	strex	r3, r2, [r1]
 8015f24:	613b      	str	r3, [r7, #16]
   return(result);
 8015f26:	693b      	ldr	r3, [r7, #16]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d1e5      	bne.n	8015ef8 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d015      	beq.n	8015f60 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015f38:	4618      	mov	r0, r3
 8015f3a:	f7f8 f8e1 	bl	800e100 <HAL_DMA_Abort>
 8015f3e:	4603      	mov	r3, r0
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d00d      	beq.n	8015f60 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015f48:	4618      	mov	r0, r3
 8015f4a:	f7f8 fa07 	bl	800e35c <HAL_DMA_GetError>
 8015f4e:	4603      	mov	r3, r0
 8015f50:	2b20      	cmp	r3, #32
 8015f52:	d105      	bne.n	8015f60 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	2210      	movs	r2, #16
 8015f58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8015f5c:	2303      	movs	r3, #3
 8015f5e:	e003      	b.n	8015f68 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8015f60:	6878      	ldr	r0, [r7, #4]
 8015f62:	f001 f85f 	bl	8017024 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8015f66:	2300      	movs	r3, #0
}
 8015f68:	4618      	mov	r0, r3
 8015f6a:	3740      	adds	r7, #64	@ 0x40
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	bd80      	pop	{r7, pc}

08015f70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	b0ba      	sub	sp, #232	@ 0xe8
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	69db      	ldr	r3, [r3, #28]
 8015f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	689b      	ldr	r3, [r3, #8]
 8015f92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8015f96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8015f9a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8015f9e:	4013      	ands	r3, r2
 8015fa0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8015fa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d115      	bne.n	8015fd8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8015fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8015fb0:	f003 0320 	and.w	r3, r3, #32
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d00f      	beq.n	8015fd8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8015fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8015fbc:	f003 0320 	and.w	r3, r3, #32
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d009      	beq.n	8015fd8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	f000 82ca 	beq.w	8016562 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015fd2:	6878      	ldr	r0, [r7, #4]
 8015fd4:	4798      	blx	r3
      }
      return;
 8015fd6:	e2c4      	b.n	8016562 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8015fd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	f000 8117 	beq.w	8016210 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8015fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8015fe6:	f003 0301 	and.w	r3, r3, #1
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d106      	bne.n	8015ffc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8015fee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8015ff2:	4b85      	ldr	r3, [pc, #532]	@ (8016208 <HAL_UART_IRQHandler+0x298>)
 8015ff4:	4013      	ands	r3, r2
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	f000 810a 	beq.w	8016210 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8016000:	f003 0301 	and.w	r3, r3, #1
 8016004:	2b00      	cmp	r3, #0
 8016006:	d011      	beq.n	801602c <HAL_UART_IRQHandler+0xbc>
 8016008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801600c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016010:	2b00      	cmp	r3, #0
 8016012:	d00b      	beq.n	801602c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	2201      	movs	r2, #1
 801601a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016022:	f043 0201 	orr.w	r2, r3, #1
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801602c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8016030:	f003 0302 	and.w	r3, r3, #2
 8016034:	2b00      	cmp	r3, #0
 8016036:	d011      	beq.n	801605c <HAL_UART_IRQHandler+0xec>
 8016038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801603c:	f003 0301 	and.w	r3, r3, #1
 8016040:	2b00      	cmp	r3, #0
 8016042:	d00b      	beq.n	801605c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	2202      	movs	r2, #2
 801604a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016052:	f043 0204 	orr.w	r2, r3, #4
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801605c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8016060:	f003 0304 	and.w	r3, r3, #4
 8016064:	2b00      	cmp	r3, #0
 8016066:	d011      	beq.n	801608c <HAL_UART_IRQHandler+0x11c>
 8016068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801606c:	f003 0301 	and.w	r3, r3, #1
 8016070:	2b00      	cmp	r3, #0
 8016072:	d00b      	beq.n	801608c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	2204      	movs	r2, #4
 801607a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016082:	f043 0202 	orr.w	r2, r3, #2
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 801608c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8016090:	f003 0308 	and.w	r3, r3, #8
 8016094:	2b00      	cmp	r3, #0
 8016096:	d017      	beq.n	80160c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8016098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801609c:	f003 0320 	and.w	r3, r3, #32
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d105      	bne.n	80160b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80160a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80160a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d00b      	beq.n	80160c8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	2208      	movs	r2, #8
 80160b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80160be:	f043 0208 	orr.w	r2, r3, #8
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80160c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80160cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d012      	beq.n	80160fa <HAL_UART_IRQHandler+0x18a>
 80160d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80160d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d00c      	beq.n	80160fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80160e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80160f0:	f043 0220 	orr.w	r2, r3, #32
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016100:	2b00      	cmp	r3, #0
 8016102:	f000 8230 	beq.w	8016566 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8016106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801610a:	f003 0320 	and.w	r3, r3, #32
 801610e:	2b00      	cmp	r3, #0
 8016110:	d00d      	beq.n	801612e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8016112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8016116:	f003 0320 	and.w	r3, r3, #32
 801611a:	2b00      	cmp	r3, #0
 801611c:	d007      	beq.n	801612e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016122:	2b00      	cmp	r3, #0
 8016124:	d003      	beq.n	801612e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801612a:	6878      	ldr	r0, [r7, #4]
 801612c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016134:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	689b      	ldr	r3, [r3, #8]
 801613e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016142:	2b40      	cmp	r3, #64	@ 0x40
 8016144:	d005      	beq.n	8016152 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8016146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801614a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801614e:	2b00      	cmp	r3, #0
 8016150:	d04f      	beq.n	80161f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8016152:	6878      	ldr	r0, [r7, #4]
 8016154:	f000 ff66 	bl	8017024 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	689b      	ldr	r3, [r3, #8]
 801615e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016162:	2b40      	cmp	r3, #64	@ 0x40
 8016164:	d141      	bne.n	80161ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	3308      	adds	r3, #8
 801616c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016170:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016174:	e853 3f00 	ldrex	r3, [r3]
 8016178:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 801617c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8016180:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016184:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	3308      	adds	r3, #8
 801618e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8016192:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8016196:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801619a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801619e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80161a2:	e841 2300 	strex	r3, r2, [r1]
 80161a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80161aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d1d9      	bne.n	8016166 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d013      	beq.n	80161e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80161be:	4a13      	ldr	r2, [pc, #76]	@ (801620c <HAL_UART_IRQHandler+0x29c>)
 80161c0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80161c6:	4618      	mov	r0, r3
 80161c8:	f7f7 ffd8 	bl	800e17c <HAL_DMA_Abort_IT>
 80161cc:	4603      	mov	r3, r0
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d017      	beq.n	8016202 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80161d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80161d8:	687a      	ldr	r2, [r7, #4]
 80161da:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80161dc:	4610      	mov	r0, r2
 80161de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80161e0:	e00f      	b.n	8016202 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80161e2:	6878      	ldr	r0, [r7, #4]
 80161e4:	f000 f9de 	bl	80165a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80161e8:	e00b      	b.n	8016202 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80161ea:	6878      	ldr	r0, [r7, #4]
 80161ec:	f000 f9da 	bl	80165a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80161f0:	e007      	b.n	8016202 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80161f2:	6878      	ldr	r0, [r7, #4]
 80161f4:	f000 f9d6 	bl	80165a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	2200      	movs	r2, #0
 80161fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8016200:	e1b1      	b.n	8016566 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016202:	bf00      	nop
    return;
 8016204:	e1af      	b.n	8016566 <HAL_UART_IRQHandler+0x5f6>
 8016206:	bf00      	nop
 8016208:	04000120 	.word	0x04000120
 801620c:	0801738b 	.word	0x0801738b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016214:	2b01      	cmp	r3, #1
 8016216:	f040 816a 	bne.w	80164ee <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801621a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801621e:	f003 0310 	and.w	r3, r3, #16
 8016222:	2b00      	cmp	r3, #0
 8016224:	f000 8163 	beq.w	80164ee <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8016228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801622c:	f003 0310 	and.w	r3, r3, #16
 8016230:	2b00      	cmp	r3, #0
 8016232:	f000 815c 	beq.w	80164ee <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	2210      	movs	r2, #16
 801623c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	689b      	ldr	r3, [r3, #8]
 8016244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016248:	2b40      	cmp	r3, #64	@ 0x40
 801624a:	f040 80d4 	bne.w	80163f6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	685b      	ldr	r3, [r3, #4]
 8016256:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801625a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 801625e:	2b00      	cmp	r3, #0
 8016260:	f000 80ad 	beq.w	80163be <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801626a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801626e:	429a      	cmp	r2, r3
 8016270:	f080 80a5 	bcs.w	80163be <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801627a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	f003 0320 	and.w	r3, r3, #32
 801628a:	2b00      	cmp	r3, #0
 801628c:	f040 8086 	bne.w	801639c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016298:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801629c:	e853 3f00 	ldrex	r3, [r3]
 80162a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80162a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80162a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80162ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	461a      	mov	r2, r3
 80162b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80162ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80162be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80162c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80162ca:	e841 2300 	strex	r3, r2, [r1]
 80162ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80162d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d1da      	bne.n	8016290 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	3308      	adds	r3, #8
 80162e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80162e4:	e853 3f00 	ldrex	r3, [r3]
 80162e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80162ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80162ec:	f023 0301 	bic.w	r3, r3, #1
 80162f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	3308      	adds	r3, #8
 80162fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80162fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8016302:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016304:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8016306:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801630a:	e841 2300 	strex	r3, r2, [r1]
 801630e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8016310:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016312:	2b00      	cmp	r3, #0
 8016314:	d1e1      	bne.n	80162da <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	3308      	adds	r3, #8
 801631c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801631e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016320:	e853 3f00 	ldrex	r3, [r3]
 8016324:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8016326:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016328:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801632c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	3308      	adds	r3, #8
 8016336:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801633a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801633c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801633e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8016340:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8016342:	e841 2300 	strex	r3, r2, [r1]
 8016346:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8016348:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801634a:	2b00      	cmp	r3, #0
 801634c:	d1e3      	bne.n	8016316 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	2220      	movs	r2, #32
 8016352:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	2200      	movs	r2, #0
 801635a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016364:	e853 3f00 	ldrex	r3, [r3]
 8016368:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801636a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801636c:	f023 0310 	bic.w	r3, r3, #16
 8016370:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	461a      	mov	r2, r3
 801637a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801637e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8016380:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016382:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8016384:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8016386:	e841 2300 	strex	r3, r2, [r1]
 801638a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801638c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801638e:	2b00      	cmp	r3, #0
 8016390:	d1e4      	bne.n	801635c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016396:	4618      	mov	r0, r3
 8016398:	f7f7 feb2 	bl	800e100 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	2202      	movs	r2, #2
 80163a0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80163ae:	b29b      	uxth	r3, r3
 80163b0:	1ad3      	subs	r3, r2, r3
 80163b2:	b29b      	uxth	r3, r3
 80163b4:	4619      	mov	r1, r3
 80163b6:	6878      	ldr	r0, [r7, #4]
 80163b8:	f7ec ff48 	bl	800324c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80163bc:	e0d5      	b.n	801656a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80163c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80163c8:	429a      	cmp	r2, r3
 80163ca:	f040 80ce 	bne.w	801656a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	f003 0320 	and.w	r3, r3, #32
 80163da:	2b20      	cmp	r3, #32
 80163dc:	f040 80c5 	bne.w	801656a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	2202      	movs	r2, #2
 80163e4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80163ec:	4619      	mov	r1, r3
 80163ee:	6878      	ldr	r0, [r7, #4]
 80163f0:	f7ec ff2c 	bl	800324c <HAL_UARTEx_RxEventCallback>
      return;
 80163f4:	e0b9      	b.n	801656a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8016402:	b29b      	uxth	r3, r3
 8016404:	1ad3      	subs	r3, r2, r3
 8016406:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8016410:	b29b      	uxth	r3, r3
 8016412:	2b00      	cmp	r3, #0
 8016414:	f000 80ab 	beq.w	801656e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8016418:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801641c:	2b00      	cmp	r3, #0
 801641e:	f000 80a6 	beq.w	801656e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801642a:	e853 3f00 	ldrex	r3, [r3]
 801642e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8016430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016432:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8016436:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	461a      	mov	r2, r3
 8016440:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8016444:	647b      	str	r3, [r7, #68]	@ 0x44
 8016446:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016448:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801644a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801644c:	e841 2300 	strex	r3, r2, [r1]
 8016450:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8016452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016454:	2b00      	cmp	r3, #0
 8016456:	d1e4      	bne.n	8016422 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	3308      	adds	r3, #8
 801645e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016462:	e853 3f00 	ldrex	r3, [r3]
 8016466:	623b      	str	r3, [r7, #32]
   return(result);
 8016468:	6a3b      	ldr	r3, [r7, #32]
 801646a:	f023 0301 	bic.w	r3, r3, #1
 801646e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	3308      	adds	r3, #8
 8016478:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801647c:	633a      	str	r2, [r7, #48]	@ 0x30
 801647e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016480:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016484:	e841 2300 	strex	r3, r2, [r1]
 8016488:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801648a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801648c:	2b00      	cmp	r3, #0
 801648e:	d1e3      	bne.n	8016458 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	2220      	movs	r2, #32
 8016494:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	2200      	movs	r2, #0
 801649c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	2200      	movs	r2, #0
 80164a2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164aa:	693b      	ldr	r3, [r7, #16]
 80164ac:	e853 3f00 	ldrex	r3, [r3]
 80164b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	f023 0310 	bic.w	r3, r3, #16
 80164b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	461a      	mov	r2, r3
 80164c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80164c6:	61fb      	str	r3, [r7, #28]
 80164c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164ca:	69b9      	ldr	r1, [r7, #24]
 80164cc:	69fa      	ldr	r2, [r7, #28]
 80164ce:	e841 2300 	strex	r3, r2, [r1]
 80164d2:	617b      	str	r3, [r7, #20]
   return(result);
 80164d4:	697b      	ldr	r3, [r7, #20]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d1e4      	bne.n	80164a4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	2202      	movs	r2, #2
 80164de:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80164e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80164e4:	4619      	mov	r1, r3
 80164e6:	6878      	ldr	r0, [r7, #4]
 80164e8:	f7ec feb0 	bl	800324c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80164ec:	e03f      	b.n	801656e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80164ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80164f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d00e      	beq.n	8016518 <HAL_UART_IRQHandler+0x5a8>
 80164fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80164fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8016502:	2b00      	cmp	r3, #0
 8016504:	d008      	beq.n	8016518 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801650e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8016510:	6878      	ldr	r0, [r7, #4]
 8016512:	f000 ff7a 	bl	801740a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016516:	e02d      	b.n	8016574 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8016518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801651c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016520:	2b00      	cmp	r3, #0
 8016522:	d00e      	beq.n	8016542 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8016524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8016528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801652c:	2b00      	cmp	r3, #0
 801652e:	d008      	beq.n	8016542 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016534:	2b00      	cmp	r3, #0
 8016536:	d01c      	beq.n	8016572 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801653c:	6878      	ldr	r0, [r7, #4]
 801653e:	4798      	blx	r3
    }
    return;
 8016540:	e017      	b.n	8016572 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8016542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8016546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801654a:	2b00      	cmp	r3, #0
 801654c:	d012      	beq.n	8016574 <HAL_UART_IRQHandler+0x604>
 801654e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8016552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016556:	2b00      	cmp	r3, #0
 8016558:	d00c      	beq.n	8016574 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 801655a:	6878      	ldr	r0, [r7, #4]
 801655c:	f000 ff2b 	bl	80173b6 <UART_EndTransmit_IT>
    return;
 8016560:	e008      	b.n	8016574 <HAL_UART_IRQHandler+0x604>
      return;
 8016562:	bf00      	nop
 8016564:	e006      	b.n	8016574 <HAL_UART_IRQHandler+0x604>
    return;
 8016566:	bf00      	nop
 8016568:	e004      	b.n	8016574 <HAL_UART_IRQHandler+0x604>
      return;
 801656a:	bf00      	nop
 801656c:	e002      	b.n	8016574 <HAL_UART_IRQHandler+0x604>
      return;
 801656e:	bf00      	nop
 8016570:	e000      	b.n	8016574 <HAL_UART_IRQHandler+0x604>
    return;
 8016572:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8016574:	37e8      	adds	r7, #232	@ 0xe8
 8016576:	46bd      	mov	sp, r7
 8016578:	bd80      	pop	{r7, pc}
 801657a:	bf00      	nop

0801657c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801657c:	b480      	push	{r7}
 801657e:	b083      	sub	sp, #12
 8016580:	af00      	add	r7, sp, #0
 8016582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8016584:	bf00      	nop
 8016586:	370c      	adds	r7, #12
 8016588:	46bd      	mov	sp, r7
 801658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801658e:	4770      	bx	lr

08016590 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8016590:	b480      	push	{r7}
 8016592:	b083      	sub	sp, #12
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8016598:	bf00      	nop
 801659a:	370c      	adds	r7, #12
 801659c:	46bd      	mov	sp, r7
 801659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165a2:	4770      	bx	lr

080165a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80165a4:	b480      	push	{r7}
 80165a6:	b083      	sub	sp, #12
 80165a8:	af00      	add	r7, sp, #0
 80165aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80165ac:	bf00      	nop
 80165ae:	370c      	adds	r7, #12
 80165b0:	46bd      	mov	sp, r7
 80165b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b6:	4770      	bx	lr

080165b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80165b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80165bc:	b08a      	sub	sp, #40	@ 0x28
 80165be:	af00      	add	r7, sp, #0
 80165c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80165c2:	2300      	movs	r3, #0
 80165c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	689a      	ldr	r2, [r3, #8]
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	691b      	ldr	r3, [r3, #16]
 80165d0:	431a      	orrs	r2, r3
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	695b      	ldr	r3, [r3, #20]
 80165d6:	431a      	orrs	r2, r3
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	69db      	ldr	r3, [r3, #28]
 80165dc:	4313      	orrs	r3, r2
 80165de:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	681a      	ldr	r2, [r3, #0]
 80165e6:	4ba4      	ldr	r3, [pc, #656]	@ (8016878 <UART_SetConfig+0x2c0>)
 80165e8:	4013      	ands	r3, r2
 80165ea:	68fa      	ldr	r2, [r7, #12]
 80165ec:	6812      	ldr	r2, [r2, #0]
 80165ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80165f0:	430b      	orrs	r3, r1
 80165f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	685b      	ldr	r3, [r3, #4]
 80165fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80165fe:	68fb      	ldr	r3, [r7, #12]
 8016600:	68da      	ldr	r2, [r3, #12]
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	430a      	orrs	r2, r1
 8016608:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	699b      	ldr	r3, [r3, #24]
 801660e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	4a99      	ldr	r2, [pc, #612]	@ (801687c <UART_SetConfig+0x2c4>)
 8016616:	4293      	cmp	r3, r2
 8016618:	d004      	beq.n	8016624 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	6a1b      	ldr	r3, [r3, #32]
 801661e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016620:	4313      	orrs	r3, r2
 8016622:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	689b      	ldr	r3, [r3, #8]
 801662a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016634:	430a      	orrs	r2, r1
 8016636:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8016638:	68fb      	ldr	r3, [r7, #12]
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	4a90      	ldr	r2, [pc, #576]	@ (8016880 <UART_SetConfig+0x2c8>)
 801663e:	4293      	cmp	r3, r2
 8016640:	d126      	bne.n	8016690 <UART_SetConfig+0xd8>
 8016642:	4b90      	ldr	r3, [pc, #576]	@ (8016884 <UART_SetConfig+0x2cc>)
 8016644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016648:	f003 0303 	and.w	r3, r3, #3
 801664c:	2b03      	cmp	r3, #3
 801664e:	d81b      	bhi.n	8016688 <UART_SetConfig+0xd0>
 8016650:	a201      	add	r2, pc, #4	@ (adr r2, 8016658 <UART_SetConfig+0xa0>)
 8016652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016656:	bf00      	nop
 8016658:	08016669 	.word	0x08016669
 801665c:	08016679 	.word	0x08016679
 8016660:	08016671 	.word	0x08016671
 8016664:	08016681 	.word	0x08016681
 8016668:	2301      	movs	r3, #1
 801666a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801666e:	e116      	b.n	801689e <UART_SetConfig+0x2e6>
 8016670:	2302      	movs	r3, #2
 8016672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016676:	e112      	b.n	801689e <UART_SetConfig+0x2e6>
 8016678:	2304      	movs	r3, #4
 801667a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801667e:	e10e      	b.n	801689e <UART_SetConfig+0x2e6>
 8016680:	2308      	movs	r3, #8
 8016682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016686:	e10a      	b.n	801689e <UART_SetConfig+0x2e6>
 8016688:	2310      	movs	r3, #16
 801668a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801668e:	e106      	b.n	801689e <UART_SetConfig+0x2e6>
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	4a7c      	ldr	r2, [pc, #496]	@ (8016888 <UART_SetConfig+0x2d0>)
 8016696:	4293      	cmp	r3, r2
 8016698:	d138      	bne.n	801670c <UART_SetConfig+0x154>
 801669a:	4b7a      	ldr	r3, [pc, #488]	@ (8016884 <UART_SetConfig+0x2cc>)
 801669c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80166a0:	f003 030c 	and.w	r3, r3, #12
 80166a4:	2b0c      	cmp	r3, #12
 80166a6:	d82d      	bhi.n	8016704 <UART_SetConfig+0x14c>
 80166a8:	a201      	add	r2, pc, #4	@ (adr r2, 80166b0 <UART_SetConfig+0xf8>)
 80166aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166ae:	bf00      	nop
 80166b0:	080166e5 	.word	0x080166e5
 80166b4:	08016705 	.word	0x08016705
 80166b8:	08016705 	.word	0x08016705
 80166bc:	08016705 	.word	0x08016705
 80166c0:	080166f5 	.word	0x080166f5
 80166c4:	08016705 	.word	0x08016705
 80166c8:	08016705 	.word	0x08016705
 80166cc:	08016705 	.word	0x08016705
 80166d0:	080166ed 	.word	0x080166ed
 80166d4:	08016705 	.word	0x08016705
 80166d8:	08016705 	.word	0x08016705
 80166dc:	08016705 	.word	0x08016705
 80166e0:	080166fd 	.word	0x080166fd
 80166e4:	2300      	movs	r3, #0
 80166e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80166ea:	e0d8      	b.n	801689e <UART_SetConfig+0x2e6>
 80166ec:	2302      	movs	r3, #2
 80166ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80166f2:	e0d4      	b.n	801689e <UART_SetConfig+0x2e6>
 80166f4:	2304      	movs	r3, #4
 80166f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80166fa:	e0d0      	b.n	801689e <UART_SetConfig+0x2e6>
 80166fc:	2308      	movs	r3, #8
 80166fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016702:	e0cc      	b.n	801689e <UART_SetConfig+0x2e6>
 8016704:	2310      	movs	r3, #16
 8016706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801670a:	e0c8      	b.n	801689e <UART_SetConfig+0x2e6>
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	4a5e      	ldr	r2, [pc, #376]	@ (801688c <UART_SetConfig+0x2d4>)
 8016712:	4293      	cmp	r3, r2
 8016714:	d125      	bne.n	8016762 <UART_SetConfig+0x1aa>
 8016716:	4b5b      	ldr	r3, [pc, #364]	@ (8016884 <UART_SetConfig+0x2cc>)
 8016718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801671c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8016720:	2b30      	cmp	r3, #48	@ 0x30
 8016722:	d016      	beq.n	8016752 <UART_SetConfig+0x19a>
 8016724:	2b30      	cmp	r3, #48	@ 0x30
 8016726:	d818      	bhi.n	801675a <UART_SetConfig+0x1a2>
 8016728:	2b20      	cmp	r3, #32
 801672a:	d00a      	beq.n	8016742 <UART_SetConfig+0x18a>
 801672c:	2b20      	cmp	r3, #32
 801672e:	d814      	bhi.n	801675a <UART_SetConfig+0x1a2>
 8016730:	2b00      	cmp	r3, #0
 8016732:	d002      	beq.n	801673a <UART_SetConfig+0x182>
 8016734:	2b10      	cmp	r3, #16
 8016736:	d008      	beq.n	801674a <UART_SetConfig+0x192>
 8016738:	e00f      	b.n	801675a <UART_SetConfig+0x1a2>
 801673a:	2300      	movs	r3, #0
 801673c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016740:	e0ad      	b.n	801689e <UART_SetConfig+0x2e6>
 8016742:	2302      	movs	r3, #2
 8016744:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016748:	e0a9      	b.n	801689e <UART_SetConfig+0x2e6>
 801674a:	2304      	movs	r3, #4
 801674c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016750:	e0a5      	b.n	801689e <UART_SetConfig+0x2e6>
 8016752:	2308      	movs	r3, #8
 8016754:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016758:	e0a1      	b.n	801689e <UART_SetConfig+0x2e6>
 801675a:	2310      	movs	r3, #16
 801675c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016760:	e09d      	b.n	801689e <UART_SetConfig+0x2e6>
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	4a4a      	ldr	r2, [pc, #296]	@ (8016890 <UART_SetConfig+0x2d8>)
 8016768:	4293      	cmp	r3, r2
 801676a:	d125      	bne.n	80167b8 <UART_SetConfig+0x200>
 801676c:	4b45      	ldr	r3, [pc, #276]	@ (8016884 <UART_SetConfig+0x2cc>)
 801676e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016772:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8016776:	2bc0      	cmp	r3, #192	@ 0xc0
 8016778:	d016      	beq.n	80167a8 <UART_SetConfig+0x1f0>
 801677a:	2bc0      	cmp	r3, #192	@ 0xc0
 801677c:	d818      	bhi.n	80167b0 <UART_SetConfig+0x1f8>
 801677e:	2b80      	cmp	r3, #128	@ 0x80
 8016780:	d00a      	beq.n	8016798 <UART_SetConfig+0x1e0>
 8016782:	2b80      	cmp	r3, #128	@ 0x80
 8016784:	d814      	bhi.n	80167b0 <UART_SetConfig+0x1f8>
 8016786:	2b00      	cmp	r3, #0
 8016788:	d002      	beq.n	8016790 <UART_SetConfig+0x1d8>
 801678a:	2b40      	cmp	r3, #64	@ 0x40
 801678c:	d008      	beq.n	80167a0 <UART_SetConfig+0x1e8>
 801678e:	e00f      	b.n	80167b0 <UART_SetConfig+0x1f8>
 8016790:	2300      	movs	r3, #0
 8016792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016796:	e082      	b.n	801689e <UART_SetConfig+0x2e6>
 8016798:	2302      	movs	r3, #2
 801679a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801679e:	e07e      	b.n	801689e <UART_SetConfig+0x2e6>
 80167a0:	2304      	movs	r3, #4
 80167a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80167a6:	e07a      	b.n	801689e <UART_SetConfig+0x2e6>
 80167a8:	2308      	movs	r3, #8
 80167aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80167ae:	e076      	b.n	801689e <UART_SetConfig+0x2e6>
 80167b0:	2310      	movs	r3, #16
 80167b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80167b6:	e072      	b.n	801689e <UART_SetConfig+0x2e6>
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	4a35      	ldr	r2, [pc, #212]	@ (8016894 <UART_SetConfig+0x2dc>)
 80167be:	4293      	cmp	r3, r2
 80167c0:	d12a      	bne.n	8016818 <UART_SetConfig+0x260>
 80167c2:	4b30      	ldr	r3, [pc, #192]	@ (8016884 <UART_SetConfig+0x2cc>)
 80167c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80167c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80167cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80167d0:	d01a      	beq.n	8016808 <UART_SetConfig+0x250>
 80167d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80167d6:	d81b      	bhi.n	8016810 <UART_SetConfig+0x258>
 80167d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80167dc:	d00c      	beq.n	80167f8 <UART_SetConfig+0x240>
 80167de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80167e2:	d815      	bhi.n	8016810 <UART_SetConfig+0x258>
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d003      	beq.n	80167f0 <UART_SetConfig+0x238>
 80167e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80167ec:	d008      	beq.n	8016800 <UART_SetConfig+0x248>
 80167ee:	e00f      	b.n	8016810 <UART_SetConfig+0x258>
 80167f0:	2300      	movs	r3, #0
 80167f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80167f6:	e052      	b.n	801689e <UART_SetConfig+0x2e6>
 80167f8:	2302      	movs	r3, #2
 80167fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80167fe:	e04e      	b.n	801689e <UART_SetConfig+0x2e6>
 8016800:	2304      	movs	r3, #4
 8016802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016806:	e04a      	b.n	801689e <UART_SetConfig+0x2e6>
 8016808:	2308      	movs	r3, #8
 801680a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801680e:	e046      	b.n	801689e <UART_SetConfig+0x2e6>
 8016810:	2310      	movs	r3, #16
 8016812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016816:	e042      	b.n	801689e <UART_SetConfig+0x2e6>
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	4a17      	ldr	r2, [pc, #92]	@ (801687c <UART_SetConfig+0x2c4>)
 801681e:	4293      	cmp	r3, r2
 8016820:	d13a      	bne.n	8016898 <UART_SetConfig+0x2e0>
 8016822:	4b18      	ldr	r3, [pc, #96]	@ (8016884 <UART_SetConfig+0x2cc>)
 8016824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016828:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 801682c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8016830:	d01a      	beq.n	8016868 <UART_SetConfig+0x2b0>
 8016832:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8016836:	d81b      	bhi.n	8016870 <UART_SetConfig+0x2b8>
 8016838:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801683c:	d00c      	beq.n	8016858 <UART_SetConfig+0x2a0>
 801683e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016842:	d815      	bhi.n	8016870 <UART_SetConfig+0x2b8>
 8016844:	2b00      	cmp	r3, #0
 8016846:	d003      	beq.n	8016850 <UART_SetConfig+0x298>
 8016848:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801684c:	d008      	beq.n	8016860 <UART_SetConfig+0x2a8>
 801684e:	e00f      	b.n	8016870 <UART_SetConfig+0x2b8>
 8016850:	2300      	movs	r3, #0
 8016852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016856:	e022      	b.n	801689e <UART_SetConfig+0x2e6>
 8016858:	2302      	movs	r3, #2
 801685a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801685e:	e01e      	b.n	801689e <UART_SetConfig+0x2e6>
 8016860:	2304      	movs	r3, #4
 8016862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016866:	e01a      	b.n	801689e <UART_SetConfig+0x2e6>
 8016868:	2308      	movs	r3, #8
 801686a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801686e:	e016      	b.n	801689e <UART_SetConfig+0x2e6>
 8016870:	2310      	movs	r3, #16
 8016872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016876:	e012      	b.n	801689e <UART_SetConfig+0x2e6>
 8016878:	efff69f3 	.word	0xefff69f3
 801687c:	40008000 	.word	0x40008000
 8016880:	40013800 	.word	0x40013800
 8016884:	40021000 	.word	0x40021000
 8016888:	40004400 	.word	0x40004400
 801688c:	40004800 	.word	0x40004800
 8016890:	40004c00 	.word	0x40004c00
 8016894:	40005000 	.word	0x40005000
 8016898:	2310      	movs	r3, #16
 801689a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	4a9f      	ldr	r2, [pc, #636]	@ (8016b20 <UART_SetConfig+0x568>)
 80168a4:	4293      	cmp	r3, r2
 80168a6:	d17a      	bne.n	801699e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80168a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80168ac:	2b08      	cmp	r3, #8
 80168ae:	d824      	bhi.n	80168fa <UART_SetConfig+0x342>
 80168b0:	a201      	add	r2, pc, #4	@ (adr r2, 80168b8 <UART_SetConfig+0x300>)
 80168b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168b6:	bf00      	nop
 80168b8:	080168dd 	.word	0x080168dd
 80168bc:	080168fb 	.word	0x080168fb
 80168c0:	080168e5 	.word	0x080168e5
 80168c4:	080168fb 	.word	0x080168fb
 80168c8:	080168eb 	.word	0x080168eb
 80168cc:	080168fb 	.word	0x080168fb
 80168d0:	080168fb 	.word	0x080168fb
 80168d4:	080168fb 	.word	0x080168fb
 80168d8:	080168f3 	.word	0x080168f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80168dc:	f7fa fe52 	bl	8011584 <HAL_RCC_GetPCLK1Freq>
 80168e0:	61f8      	str	r0, [r7, #28]
        break;
 80168e2:	e010      	b.n	8016906 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80168e4:	4b8f      	ldr	r3, [pc, #572]	@ (8016b24 <UART_SetConfig+0x56c>)
 80168e6:	61fb      	str	r3, [r7, #28]
        break;
 80168e8:	e00d      	b.n	8016906 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80168ea:	f7fa fdb3 	bl	8011454 <HAL_RCC_GetSysClockFreq>
 80168ee:	61f8      	str	r0, [r7, #28]
        break;
 80168f0:	e009      	b.n	8016906 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80168f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80168f6:	61fb      	str	r3, [r7, #28]
        break;
 80168f8:	e005      	b.n	8016906 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80168fa:	2300      	movs	r3, #0
 80168fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80168fe:	2301      	movs	r3, #1
 8016900:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8016904:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8016906:	69fb      	ldr	r3, [r7, #28]
 8016908:	2b00      	cmp	r3, #0
 801690a:	f000 80fb 	beq.w	8016b04 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	685a      	ldr	r2, [r3, #4]
 8016912:	4613      	mov	r3, r2
 8016914:	005b      	lsls	r3, r3, #1
 8016916:	4413      	add	r3, r2
 8016918:	69fa      	ldr	r2, [r7, #28]
 801691a:	429a      	cmp	r2, r3
 801691c:	d305      	bcc.n	801692a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	685b      	ldr	r3, [r3, #4]
 8016922:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8016924:	69fa      	ldr	r2, [r7, #28]
 8016926:	429a      	cmp	r2, r3
 8016928:	d903      	bls.n	8016932 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 801692a:	2301      	movs	r3, #1
 801692c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8016930:	e0e8      	b.n	8016b04 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8016932:	69fb      	ldr	r3, [r7, #28]
 8016934:	2200      	movs	r2, #0
 8016936:	461c      	mov	r4, r3
 8016938:	4615      	mov	r5, r2
 801693a:	f04f 0200 	mov.w	r2, #0
 801693e:	f04f 0300 	mov.w	r3, #0
 8016942:	022b      	lsls	r3, r5, #8
 8016944:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8016948:	0222      	lsls	r2, r4, #8
 801694a:	68f9      	ldr	r1, [r7, #12]
 801694c:	6849      	ldr	r1, [r1, #4]
 801694e:	0849      	lsrs	r1, r1, #1
 8016950:	2000      	movs	r0, #0
 8016952:	4688      	mov	r8, r1
 8016954:	4681      	mov	r9, r0
 8016956:	eb12 0a08 	adds.w	sl, r2, r8
 801695a:	eb43 0b09 	adc.w	fp, r3, r9
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	685b      	ldr	r3, [r3, #4]
 8016962:	2200      	movs	r2, #0
 8016964:	603b      	str	r3, [r7, #0]
 8016966:	607a      	str	r2, [r7, #4]
 8016968:	e9d7 2300 	ldrd	r2, r3, [r7]
 801696c:	4650      	mov	r0, sl
 801696e:	4659      	mov	r1, fp
 8016970:	f7ea f884 	bl	8000a7c <__aeabi_uldivmod>
 8016974:	4602      	mov	r2, r0
 8016976:	460b      	mov	r3, r1
 8016978:	4613      	mov	r3, r2
 801697a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801697c:	69bb      	ldr	r3, [r7, #24]
 801697e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016982:	d308      	bcc.n	8016996 <UART_SetConfig+0x3de>
 8016984:	69bb      	ldr	r3, [r7, #24]
 8016986:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801698a:	d204      	bcs.n	8016996 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	69ba      	ldr	r2, [r7, #24]
 8016992:	60da      	str	r2, [r3, #12]
 8016994:	e0b6      	b.n	8016b04 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8016996:	2301      	movs	r3, #1
 8016998:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801699c:	e0b2      	b.n	8016b04 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	69db      	ldr	r3, [r3, #28]
 80169a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80169a6:	d15e      	bne.n	8016a66 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80169a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80169ac:	2b08      	cmp	r3, #8
 80169ae:	d828      	bhi.n	8016a02 <UART_SetConfig+0x44a>
 80169b0:	a201      	add	r2, pc, #4	@ (adr r2, 80169b8 <UART_SetConfig+0x400>)
 80169b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80169b6:	bf00      	nop
 80169b8:	080169dd 	.word	0x080169dd
 80169bc:	080169e5 	.word	0x080169e5
 80169c0:	080169ed 	.word	0x080169ed
 80169c4:	08016a03 	.word	0x08016a03
 80169c8:	080169f3 	.word	0x080169f3
 80169cc:	08016a03 	.word	0x08016a03
 80169d0:	08016a03 	.word	0x08016a03
 80169d4:	08016a03 	.word	0x08016a03
 80169d8:	080169fb 	.word	0x080169fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80169dc:	f7fa fdd2 	bl	8011584 <HAL_RCC_GetPCLK1Freq>
 80169e0:	61f8      	str	r0, [r7, #28]
        break;
 80169e2:	e014      	b.n	8016a0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80169e4:	f7fa fde4 	bl	80115b0 <HAL_RCC_GetPCLK2Freq>
 80169e8:	61f8      	str	r0, [r7, #28]
        break;
 80169ea:	e010      	b.n	8016a0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80169ec:	4b4d      	ldr	r3, [pc, #308]	@ (8016b24 <UART_SetConfig+0x56c>)
 80169ee:	61fb      	str	r3, [r7, #28]
        break;
 80169f0:	e00d      	b.n	8016a0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80169f2:	f7fa fd2f 	bl	8011454 <HAL_RCC_GetSysClockFreq>
 80169f6:	61f8      	str	r0, [r7, #28]
        break;
 80169f8:	e009      	b.n	8016a0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80169fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80169fe:	61fb      	str	r3, [r7, #28]
        break;
 8016a00:	e005      	b.n	8016a0e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8016a02:	2300      	movs	r3, #0
 8016a04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8016a06:	2301      	movs	r3, #1
 8016a08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8016a0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8016a0e:	69fb      	ldr	r3, [r7, #28]
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d077      	beq.n	8016b04 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8016a14:	69fb      	ldr	r3, [r7, #28]
 8016a16:	005a      	lsls	r2, r3, #1
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	685b      	ldr	r3, [r3, #4]
 8016a1c:	085b      	lsrs	r3, r3, #1
 8016a1e:	441a      	add	r2, r3
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	685b      	ldr	r3, [r3, #4]
 8016a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8016a28:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016a2a:	69bb      	ldr	r3, [r7, #24]
 8016a2c:	2b0f      	cmp	r3, #15
 8016a2e:	d916      	bls.n	8016a5e <UART_SetConfig+0x4a6>
 8016a30:	69bb      	ldr	r3, [r7, #24]
 8016a32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016a36:	d212      	bcs.n	8016a5e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016a38:	69bb      	ldr	r3, [r7, #24]
 8016a3a:	b29b      	uxth	r3, r3
 8016a3c:	f023 030f 	bic.w	r3, r3, #15
 8016a40:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8016a42:	69bb      	ldr	r3, [r7, #24]
 8016a44:	085b      	lsrs	r3, r3, #1
 8016a46:	b29b      	uxth	r3, r3
 8016a48:	f003 0307 	and.w	r3, r3, #7
 8016a4c:	b29a      	uxth	r2, r3
 8016a4e:	8afb      	ldrh	r3, [r7, #22]
 8016a50:	4313      	orrs	r3, r2
 8016a52:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	681b      	ldr	r3, [r3, #0]
 8016a58:	8afa      	ldrh	r2, [r7, #22]
 8016a5a:	60da      	str	r2, [r3, #12]
 8016a5c:	e052      	b.n	8016b04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8016a5e:	2301      	movs	r3, #1
 8016a60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8016a64:	e04e      	b.n	8016b04 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8016a66:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016a6a:	2b08      	cmp	r3, #8
 8016a6c:	d827      	bhi.n	8016abe <UART_SetConfig+0x506>
 8016a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8016a74 <UART_SetConfig+0x4bc>)
 8016a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a74:	08016a99 	.word	0x08016a99
 8016a78:	08016aa1 	.word	0x08016aa1
 8016a7c:	08016aa9 	.word	0x08016aa9
 8016a80:	08016abf 	.word	0x08016abf
 8016a84:	08016aaf 	.word	0x08016aaf
 8016a88:	08016abf 	.word	0x08016abf
 8016a8c:	08016abf 	.word	0x08016abf
 8016a90:	08016abf 	.word	0x08016abf
 8016a94:	08016ab7 	.word	0x08016ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016a98:	f7fa fd74 	bl	8011584 <HAL_RCC_GetPCLK1Freq>
 8016a9c:	61f8      	str	r0, [r7, #28]
        break;
 8016a9e:	e014      	b.n	8016aca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016aa0:	f7fa fd86 	bl	80115b0 <HAL_RCC_GetPCLK2Freq>
 8016aa4:	61f8      	str	r0, [r7, #28]
        break;
 8016aa6:	e010      	b.n	8016aca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8016aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8016b24 <UART_SetConfig+0x56c>)
 8016aaa:	61fb      	str	r3, [r7, #28]
        break;
 8016aac:	e00d      	b.n	8016aca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016aae:	f7fa fcd1 	bl	8011454 <HAL_RCC_GetSysClockFreq>
 8016ab2:	61f8      	str	r0, [r7, #28]
        break;
 8016ab4:	e009      	b.n	8016aca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016ab6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016aba:	61fb      	str	r3, [r7, #28]
        break;
 8016abc:	e005      	b.n	8016aca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8016abe:	2300      	movs	r3, #0
 8016ac0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8016ac2:	2301      	movs	r3, #1
 8016ac4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8016ac8:	bf00      	nop
    }

    if (pclk != 0U)
 8016aca:	69fb      	ldr	r3, [r7, #28]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d019      	beq.n	8016b04 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	685b      	ldr	r3, [r3, #4]
 8016ad4:	085a      	lsrs	r2, r3, #1
 8016ad6:	69fb      	ldr	r3, [r7, #28]
 8016ad8:	441a      	add	r2, r3
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	685b      	ldr	r3, [r3, #4]
 8016ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8016ae2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016ae4:	69bb      	ldr	r3, [r7, #24]
 8016ae6:	2b0f      	cmp	r3, #15
 8016ae8:	d909      	bls.n	8016afe <UART_SetConfig+0x546>
 8016aea:	69bb      	ldr	r3, [r7, #24]
 8016aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016af0:	d205      	bcs.n	8016afe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8016af2:	69bb      	ldr	r3, [r7, #24]
 8016af4:	b29a      	uxth	r2, r3
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	60da      	str	r2, [r3, #12]
 8016afc:	e002      	b.n	8016b04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8016afe:	2301      	movs	r3, #1
 8016b00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	2200      	movs	r2, #0
 8016b08:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	2200      	movs	r2, #0
 8016b0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8016b10:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8016b14:	4618      	mov	r0, r3
 8016b16:	3728      	adds	r7, #40	@ 0x28
 8016b18:	46bd      	mov	sp, r7
 8016b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016b1e:	bf00      	nop
 8016b20:	40008000 	.word	0x40008000
 8016b24:	00f42400 	.word	0x00f42400

08016b28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8016b28:	b480      	push	{r7}
 8016b2a:	b083      	sub	sp, #12
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b34:	f003 0308 	and.w	r3, r3, #8
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d00a      	beq.n	8016b52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	685b      	ldr	r3, [r3, #4]
 8016b42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	430a      	orrs	r2, r1
 8016b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b56:	f003 0301 	and.w	r3, r3, #1
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d00a      	beq.n	8016b74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	685b      	ldr	r3, [r3, #4]
 8016b64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	430a      	orrs	r2, r1
 8016b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b78:	f003 0302 	and.w	r3, r3, #2
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d00a      	beq.n	8016b96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	685b      	ldr	r3, [r3, #4]
 8016b86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	430a      	orrs	r2, r1
 8016b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b9a:	f003 0304 	and.w	r3, r3, #4
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d00a      	beq.n	8016bb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	685b      	ldr	r3, [r3, #4]
 8016ba8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	430a      	orrs	r2, r1
 8016bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016bbc:	f003 0310 	and.w	r3, r3, #16
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d00a      	beq.n	8016bda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	689b      	ldr	r3, [r3, #8]
 8016bca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	430a      	orrs	r2, r1
 8016bd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016bde:	f003 0320 	and.w	r3, r3, #32
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d00a      	beq.n	8016bfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	689b      	ldr	r3, [r3, #8]
 8016bec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	430a      	orrs	r2, r1
 8016bfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d01a      	beq.n	8016c3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	685b      	ldr	r3, [r3, #4]
 8016c0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	430a      	orrs	r2, r1
 8016c1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016c22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016c26:	d10a      	bne.n	8016c3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	685b      	ldr	r3, [r3, #4]
 8016c2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	430a      	orrs	r2, r1
 8016c3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d00a      	beq.n	8016c60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	685b      	ldr	r3, [r3, #4]
 8016c50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	430a      	orrs	r2, r1
 8016c5e:	605a      	str	r2, [r3, #4]
  }
}
 8016c60:	bf00      	nop
 8016c62:	370c      	adds	r7, #12
 8016c64:	46bd      	mov	sp, r7
 8016c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c6a:	4770      	bx	lr

08016c6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8016c6c:	b580      	push	{r7, lr}
 8016c6e:	b098      	sub	sp, #96	@ 0x60
 8016c70:	af02      	add	r7, sp, #8
 8016c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	2200      	movs	r2, #0
 8016c78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8016c7c:	f7f5 f9fa 	bl	800c074 <HAL_GetTick>
 8016c80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	f003 0308 	and.w	r3, r3, #8
 8016c8c:	2b08      	cmp	r3, #8
 8016c8e:	d12e      	bne.n	8016cee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016c90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8016c94:	9300      	str	r3, [sp, #0]
 8016c96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016c98:	2200      	movs	r2, #0
 8016c9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8016c9e:	6878      	ldr	r0, [r7, #4]
 8016ca0:	f000 f88c 	bl	8016dbc <UART_WaitOnFlagUntilTimeout>
 8016ca4:	4603      	mov	r3, r0
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d021      	beq.n	8016cee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016cb2:	e853 3f00 	ldrex	r3, [r3]
 8016cb6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8016cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016cba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016cbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	461a      	mov	r2, r3
 8016cc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016cc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8016cca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ccc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016cce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016cd0:	e841 2300 	strex	r3, r2, [r1]
 8016cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8016cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d1e6      	bne.n	8016caa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	2220      	movs	r2, #32
 8016ce0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	2200      	movs	r2, #0
 8016ce6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016cea:	2303      	movs	r3, #3
 8016cec:	e062      	b.n	8016db4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	681b      	ldr	r3, [r3, #0]
 8016cf4:	f003 0304 	and.w	r3, r3, #4
 8016cf8:	2b04      	cmp	r3, #4
 8016cfa:	d149      	bne.n	8016d90 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016cfc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8016d00:	9300      	str	r3, [sp, #0]
 8016d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016d04:	2200      	movs	r2, #0
 8016d06:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8016d0a:	6878      	ldr	r0, [r7, #4]
 8016d0c:	f000 f856 	bl	8016dbc <UART_WaitOnFlagUntilTimeout>
 8016d10:	4603      	mov	r3, r0
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d03c      	beq.n	8016d90 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d1e:	e853 3f00 	ldrex	r3, [r3]
 8016d22:	623b      	str	r3, [r7, #32]
   return(result);
 8016d24:	6a3b      	ldr	r3, [r7, #32]
 8016d26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8016d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	461a      	mov	r2, r3
 8016d32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016d34:	633b      	str	r3, [r7, #48]	@ 0x30
 8016d36:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016d3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016d3c:	e841 2300 	strex	r3, r2, [r1]
 8016d40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8016d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d1e6      	bne.n	8016d16 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	3308      	adds	r3, #8
 8016d4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d50:	693b      	ldr	r3, [r7, #16]
 8016d52:	e853 3f00 	ldrex	r3, [r3]
 8016d56:	60fb      	str	r3, [r7, #12]
   return(result);
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	f023 0301 	bic.w	r3, r3, #1
 8016d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	3308      	adds	r3, #8
 8016d66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016d68:	61fa      	str	r2, [r7, #28]
 8016d6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d6c:	69b9      	ldr	r1, [r7, #24]
 8016d6e:	69fa      	ldr	r2, [r7, #28]
 8016d70:	e841 2300 	strex	r3, r2, [r1]
 8016d74:	617b      	str	r3, [r7, #20]
   return(result);
 8016d76:	697b      	ldr	r3, [r7, #20]
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d1e5      	bne.n	8016d48 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	2220      	movs	r2, #32
 8016d80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	2200      	movs	r2, #0
 8016d88:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016d8c:	2303      	movs	r3, #3
 8016d8e:	e011      	b.n	8016db4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	2220      	movs	r2, #32
 8016d94:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	2220      	movs	r2, #32
 8016d9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	2200      	movs	r2, #0
 8016da2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	2200      	movs	r2, #0
 8016da8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	2200      	movs	r2, #0
 8016dae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8016db2:	2300      	movs	r3, #0
}
 8016db4:	4618      	mov	r0, r3
 8016db6:	3758      	adds	r7, #88	@ 0x58
 8016db8:	46bd      	mov	sp, r7
 8016dba:	bd80      	pop	{r7, pc}

08016dbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8016dbc:	b580      	push	{r7, lr}
 8016dbe:	b084      	sub	sp, #16
 8016dc0:	af00      	add	r7, sp, #0
 8016dc2:	60f8      	str	r0, [r7, #12]
 8016dc4:	60b9      	str	r1, [r7, #8]
 8016dc6:	603b      	str	r3, [r7, #0]
 8016dc8:	4613      	mov	r3, r2
 8016dca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016dcc:	e04f      	b.n	8016e6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016dce:	69bb      	ldr	r3, [r7, #24]
 8016dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016dd4:	d04b      	beq.n	8016e6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016dd6:	f7f5 f94d 	bl	800c074 <HAL_GetTick>
 8016dda:	4602      	mov	r2, r0
 8016ddc:	683b      	ldr	r3, [r7, #0]
 8016dde:	1ad3      	subs	r3, r2, r3
 8016de0:	69ba      	ldr	r2, [r7, #24]
 8016de2:	429a      	cmp	r2, r3
 8016de4:	d302      	bcc.n	8016dec <UART_WaitOnFlagUntilTimeout+0x30>
 8016de6:	69bb      	ldr	r3, [r7, #24]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d101      	bne.n	8016df0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8016dec:	2303      	movs	r3, #3
 8016dee:	e04e      	b.n	8016e8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	f003 0304 	and.w	r3, r3, #4
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d037      	beq.n	8016e6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8016dfe:	68bb      	ldr	r3, [r7, #8]
 8016e00:	2b80      	cmp	r3, #128	@ 0x80
 8016e02:	d034      	beq.n	8016e6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8016e04:	68bb      	ldr	r3, [r7, #8]
 8016e06:	2b40      	cmp	r3, #64	@ 0x40
 8016e08:	d031      	beq.n	8016e6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	69db      	ldr	r3, [r3, #28]
 8016e10:	f003 0308 	and.w	r3, r3, #8
 8016e14:	2b08      	cmp	r3, #8
 8016e16:	d110      	bne.n	8016e3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	2208      	movs	r2, #8
 8016e1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8016e20:	68f8      	ldr	r0, [r7, #12]
 8016e22:	f000 f8ff 	bl	8017024 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	2208      	movs	r2, #8
 8016e2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	2200      	movs	r2, #0
 8016e32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8016e36:	2301      	movs	r3, #1
 8016e38:	e029      	b.n	8016e8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	69db      	ldr	r3, [r3, #28]
 8016e40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8016e44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016e48:	d111      	bne.n	8016e6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016e52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8016e54:	68f8      	ldr	r0, [r7, #12]
 8016e56:	f000 f8e5 	bl	8017024 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	2220      	movs	r2, #32
 8016e5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016e62:	68fb      	ldr	r3, [r7, #12]
 8016e64:	2200      	movs	r2, #0
 8016e66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8016e6a:	2303      	movs	r3, #3
 8016e6c:	e00f      	b.n	8016e8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	69da      	ldr	r2, [r3, #28]
 8016e74:	68bb      	ldr	r3, [r7, #8]
 8016e76:	4013      	ands	r3, r2
 8016e78:	68ba      	ldr	r2, [r7, #8]
 8016e7a:	429a      	cmp	r2, r3
 8016e7c:	bf0c      	ite	eq
 8016e7e:	2301      	moveq	r3, #1
 8016e80:	2300      	movne	r3, #0
 8016e82:	b2db      	uxtb	r3, r3
 8016e84:	461a      	mov	r2, r3
 8016e86:	79fb      	ldrb	r3, [r7, #7]
 8016e88:	429a      	cmp	r2, r3
 8016e8a:	d0a0      	beq.n	8016dce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8016e8c:	2300      	movs	r3, #0
}
 8016e8e:	4618      	mov	r0, r3
 8016e90:	3710      	adds	r7, #16
 8016e92:	46bd      	mov	sp, r7
 8016e94:	bd80      	pop	{r7, pc}
	...

08016e98 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016e98:	b580      	push	{r7, lr}
 8016e9a:	b096      	sub	sp, #88	@ 0x58
 8016e9c:	af00      	add	r7, sp, #0
 8016e9e:	60f8      	str	r0, [r7, #12]
 8016ea0:	60b9      	str	r1, [r7, #8]
 8016ea2:	4613      	mov	r3, r2
 8016ea4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	68ba      	ldr	r2, [r7, #8]
 8016eaa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	88fa      	ldrh	r2, [r7, #6]
 8016eb0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	2200      	movs	r2, #0
 8016eb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	2222      	movs	r2, #34	@ 0x22
 8016ec0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d028      	beq.n	8016f1e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016ed0:	4a3e      	ldr	r2, [pc, #248]	@ (8016fcc <UART_Start_Receive_DMA+0x134>)
 8016ed2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016ed8:	4a3d      	ldr	r2, [pc, #244]	@ (8016fd0 <UART_Start_Receive_DMA+0x138>)
 8016eda:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016ee0:	4a3c      	ldr	r2, [pc, #240]	@ (8016fd4 <UART_Start_Receive_DMA+0x13c>)
 8016ee2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016ee8:	2200      	movs	r2, #0
 8016eea:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	3324      	adds	r3, #36	@ 0x24
 8016ef6:	4619      	mov	r1, r3
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016efc:	461a      	mov	r2, r3
 8016efe:	88fb      	ldrh	r3, [r7, #6]
 8016f00:	f7f7 f89e 	bl	800e040 <HAL_DMA_Start_IT>
 8016f04:	4603      	mov	r3, r0
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d009      	beq.n	8016f1e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	2210      	movs	r2, #16
 8016f0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	2220      	movs	r2, #32
 8016f16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8016f1a:	2301      	movs	r3, #1
 8016f1c:	e051      	b.n	8016fc2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	691b      	ldr	r3, [r3, #16]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d018      	beq.n	8016f58 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016f2e:	e853 3f00 	ldrex	r3, [r3]
 8016f32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8016f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016f3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	461a      	mov	r2, r3
 8016f42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016f44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016f46:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f48:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016f4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016f4c:	e841 2300 	strex	r3, r2, [r1]
 8016f50:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8016f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d1e6      	bne.n	8016f26 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	3308      	adds	r3, #8
 8016f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f62:	e853 3f00 	ldrex	r3, [r3]
 8016f66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8016f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f6a:	f043 0301 	orr.w	r3, r3, #1
 8016f6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	3308      	adds	r3, #8
 8016f76:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016f78:	637a      	str	r2, [r7, #52]	@ 0x34
 8016f7a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016f7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016f80:	e841 2300 	strex	r3, r2, [r1]
 8016f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8016f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d1e5      	bne.n	8016f58 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016f8c:	68fb      	ldr	r3, [r7, #12]
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	3308      	adds	r3, #8
 8016f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f94:	697b      	ldr	r3, [r7, #20]
 8016f96:	e853 3f00 	ldrex	r3, [r3]
 8016f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8016f9c:	693b      	ldr	r3, [r7, #16]
 8016f9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	681b      	ldr	r3, [r3, #0]
 8016fa8:	3308      	adds	r3, #8
 8016faa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8016fac:	623a      	str	r2, [r7, #32]
 8016fae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016fb0:	69f9      	ldr	r1, [r7, #28]
 8016fb2:	6a3a      	ldr	r2, [r7, #32]
 8016fb4:	e841 2300 	strex	r3, r2, [r1]
 8016fb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8016fba:	69bb      	ldr	r3, [r7, #24]
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d1e5      	bne.n	8016f8c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8016fc0:	2300      	movs	r3, #0
}
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	3758      	adds	r7, #88	@ 0x58
 8016fc6:	46bd      	mov	sp, r7
 8016fc8:	bd80      	pop	{r7, pc}
 8016fca:	bf00      	nop
 8016fcc:	080171a3 	.word	0x080171a3
 8016fd0:	080172cf 	.word	0x080172cf
 8016fd4:	0801730d 	.word	0x0801730d

08016fd8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8016fd8:	b480      	push	{r7}
 8016fda:	b089      	sub	sp, #36	@ 0x24
 8016fdc:	af00      	add	r7, sp, #0
 8016fde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	681b      	ldr	r3, [r3, #0]
 8016fe4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	e853 3f00 	ldrex	r3, [r3]
 8016fec:	60bb      	str	r3, [r7, #8]
   return(result);
 8016fee:	68bb      	ldr	r3, [r7, #8]
 8016ff0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8016ff4:	61fb      	str	r3, [r7, #28]
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	461a      	mov	r2, r3
 8016ffc:	69fb      	ldr	r3, [r7, #28]
 8016ffe:	61bb      	str	r3, [r7, #24]
 8017000:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017002:	6979      	ldr	r1, [r7, #20]
 8017004:	69ba      	ldr	r2, [r7, #24]
 8017006:	e841 2300 	strex	r3, r2, [r1]
 801700a:	613b      	str	r3, [r7, #16]
   return(result);
 801700c:	693b      	ldr	r3, [r7, #16]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d1e6      	bne.n	8016fe0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	2220      	movs	r2, #32
 8017016:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8017018:	bf00      	nop
 801701a:	3724      	adds	r7, #36	@ 0x24
 801701c:	46bd      	mov	sp, r7
 801701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017022:	4770      	bx	lr

08017024 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017024:	b480      	push	{r7}
 8017026:	b095      	sub	sp, #84	@ 0x54
 8017028:	af00      	add	r7, sp, #0
 801702a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	681b      	ldr	r3, [r3, #0]
 8017030:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017034:	e853 3f00 	ldrex	r3, [r3]
 8017038:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801703a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801703c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8017040:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	461a      	mov	r2, r3
 8017048:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801704a:	643b      	str	r3, [r7, #64]	@ 0x40
 801704c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801704e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017050:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017052:	e841 2300 	strex	r3, r2, [r1]
 8017056:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8017058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801705a:	2b00      	cmp	r3, #0
 801705c:	d1e6      	bne.n	801702c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	681b      	ldr	r3, [r3, #0]
 8017062:	3308      	adds	r3, #8
 8017064:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017066:	6a3b      	ldr	r3, [r7, #32]
 8017068:	e853 3f00 	ldrex	r3, [r3]
 801706c:	61fb      	str	r3, [r7, #28]
   return(result);
 801706e:	69fb      	ldr	r3, [r7, #28]
 8017070:	f023 0301 	bic.w	r3, r3, #1
 8017074:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	3308      	adds	r3, #8
 801707c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801707e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8017080:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017082:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017084:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017086:	e841 2300 	strex	r3, r2, [r1]
 801708a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801708c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801708e:	2b00      	cmp	r3, #0
 8017090:	d1e5      	bne.n	801705e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017096:	2b01      	cmp	r3, #1
 8017098:	d118      	bne.n	80170cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	681b      	ldr	r3, [r3, #0]
 801709e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	e853 3f00 	ldrex	r3, [r3]
 80170a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80170a8:	68bb      	ldr	r3, [r7, #8]
 80170aa:	f023 0310 	bic.w	r3, r3, #16
 80170ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	461a      	mov	r2, r3
 80170b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80170b8:	61bb      	str	r3, [r7, #24]
 80170ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80170bc:	6979      	ldr	r1, [r7, #20]
 80170be:	69ba      	ldr	r2, [r7, #24]
 80170c0:	e841 2300 	strex	r3, r2, [r1]
 80170c4:	613b      	str	r3, [r7, #16]
   return(result);
 80170c6:	693b      	ldr	r3, [r7, #16]
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d1e6      	bne.n	801709a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	2220      	movs	r2, #32
 80170d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	2200      	movs	r2, #0
 80170d8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	2200      	movs	r2, #0
 80170de:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80170e0:	bf00      	nop
 80170e2:	3754      	adds	r7, #84	@ 0x54
 80170e4:	46bd      	mov	sp, r7
 80170e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ea:	4770      	bx	lr

080170ec <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80170ec:	b580      	push	{r7, lr}
 80170ee:	b090      	sub	sp, #64	@ 0x40
 80170f0:	af00      	add	r7, sp, #0
 80170f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80170f8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	f003 0320 	and.w	r3, r3, #32
 8017104:	2b00      	cmp	r3, #0
 8017106:	d137      	bne.n	8017178 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8017108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801710a:	2200      	movs	r2, #0
 801710c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8017110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017112:	681b      	ldr	r3, [r3, #0]
 8017114:	3308      	adds	r3, #8
 8017116:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801711a:	e853 3f00 	ldrex	r3, [r3]
 801711e:	623b      	str	r3, [r7, #32]
   return(result);
 8017120:	6a3b      	ldr	r3, [r7, #32]
 8017122:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017126:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	3308      	adds	r3, #8
 801712e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017130:	633a      	str	r2, [r7, #48]	@ 0x30
 8017132:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017134:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017138:	e841 2300 	strex	r3, r2, [r1]
 801713c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801713e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017140:	2b00      	cmp	r3, #0
 8017142:	d1e5      	bne.n	8017110 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017144:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017146:	681b      	ldr	r3, [r3, #0]
 8017148:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801714a:	693b      	ldr	r3, [r7, #16]
 801714c:	e853 3f00 	ldrex	r3, [r3]
 8017150:	60fb      	str	r3, [r7, #12]
   return(result);
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017158:	637b      	str	r3, [r7, #52]	@ 0x34
 801715a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	461a      	mov	r2, r3
 8017160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017162:	61fb      	str	r3, [r7, #28]
 8017164:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017166:	69b9      	ldr	r1, [r7, #24]
 8017168:	69fa      	ldr	r2, [r7, #28]
 801716a:	e841 2300 	strex	r3, r2, [r1]
 801716e:	617b      	str	r3, [r7, #20]
   return(result);
 8017170:	697b      	ldr	r3, [r7, #20]
 8017172:	2b00      	cmp	r3, #0
 8017174:	d1e6      	bne.n	8017144 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017176:	e002      	b.n	801717e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8017178:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801717a:	f7ec f915 	bl	80033a8 <HAL_UART_TxCpltCallback>
}
 801717e:	bf00      	nop
 8017180:	3740      	adds	r7, #64	@ 0x40
 8017182:	46bd      	mov	sp, r7
 8017184:	bd80      	pop	{r7, pc}

08017186 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017186:	b580      	push	{r7, lr}
 8017188:	b084      	sub	sp, #16
 801718a:	af00      	add	r7, sp, #0
 801718c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017192:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8017194:	68f8      	ldr	r0, [r7, #12]
 8017196:	f7ff f9f1 	bl	801657c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801719a:	bf00      	nop
 801719c:	3710      	adds	r7, #16
 801719e:	46bd      	mov	sp, r7
 80171a0:	bd80      	pop	{r7, pc}

080171a2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80171a2:	b580      	push	{r7, lr}
 80171a4:	b09c      	sub	sp, #112	@ 0x70
 80171a6:	af00      	add	r7, sp, #0
 80171a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80171ae:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	f003 0320 	and.w	r3, r3, #32
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d171      	bne.n	80172a2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80171be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80171c0:	2200      	movs	r2, #0
 80171c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80171c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80171cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80171ce:	e853 3f00 	ldrex	r3, [r3]
 80171d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80171d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80171d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80171da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80171dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80171de:	681b      	ldr	r3, [r3, #0]
 80171e0:	461a      	mov	r2, r3
 80171e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80171e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80171e6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80171e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80171ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80171ec:	e841 2300 	strex	r3, r2, [r1]
 80171f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80171f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d1e6      	bne.n	80171c6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80171f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	3308      	adds	r3, #8
 80171fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017202:	e853 3f00 	ldrex	r3, [r3]
 8017206:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8017208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801720a:	f023 0301 	bic.w	r3, r3, #1
 801720e:	667b      	str	r3, [r7, #100]	@ 0x64
 8017210:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	3308      	adds	r3, #8
 8017216:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8017218:	647a      	str	r2, [r7, #68]	@ 0x44
 801721a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801721c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801721e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017220:	e841 2300 	strex	r3, r2, [r1]
 8017224:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8017226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017228:	2b00      	cmp	r3, #0
 801722a:	d1e5      	bne.n	80171f8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801722c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	3308      	adds	r3, #8
 8017232:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017236:	e853 3f00 	ldrex	r3, [r3]
 801723a:	623b      	str	r3, [r7, #32]
   return(result);
 801723c:	6a3b      	ldr	r3, [r7, #32]
 801723e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017242:	663b      	str	r3, [r7, #96]	@ 0x60
 8017244:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	3308      	adds	r3, #8
 801724a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801724c:	633a      	str	r2, [r7, #48]	@ 0x30
 801724e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017250:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017252:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017254:	e841 2300 	strex	r3, r2, [r1]
 8017258:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801725a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801725c:	2b00      	cmp	r3, #0
 801725e:	d1e5      	bne.n	801722c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8017260:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017262:	2220      	movs	r2, #32
 8017264:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017268:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801726a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801726c:	2b01      	cmp	r3, #1
 801726e:	d118      	bne.n	80172a2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017272:	681b      	ldr	r3, [r3, #0]
 8017274:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017276:	693b      	ldr	r3, [r7, #16]
 8017278:	e853 3f00 	ldrex	r3, [r3]
 801727c:	60fb      	str	r3, [r7, #12]
   return(result);
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	f023 0310 	bic.w	r3, r3, #16
 8017284:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8017286:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	461a      	mov	r2, r3
 801728c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801728e:	61fb      	str	r3, [r7, #28]
 8017290:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017292:	69b9      	ldr	r1, [r7, #24]
 8017294:	69fa      	ldr	r2, [r7, #28]
 8017296:	e841 2300 	strex	r3, r2, [r1]
 801729a:	617b      	str	r3, [r7, #20]
   return(result);
 801729c:	697b      	ldr	r3, [r7, #20]
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d1e6      	bne.n	8017270 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80172a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80172a4:	2200      	movs	r2, #0
 80172a6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80172a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80172aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80172ac:	2b01      	cmp	r3, #1
 80172ae:	d107      	bne.n	80172c0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80172b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80172b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80172b6:	4619      	mov	r1, r3
 80172b8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80172ba:	f7eb ffc7 	bl	800324c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80172be:	e002      	b.n	80172c6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80172c0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80172c2:	f7ec f867 	bl	8003394 <HAL_UART_RxCpltCallback>
}
 80172c6:	bf00      	nop
 80172c8:	3770      	adds	r7, #112	@ 0x70
 80172ca:	46bd      	mov	sp, r7
 80172cc:	bd80      	pop	{r7, pc}

080172ce <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80172ce:	b580      	push	{r7, lr}
 80172d0:	b084      	sub	sp, #16
 80172d2:	af00      	add	r7, sp, #0
 80172d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80172da:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	2201      	movs	r2, #1
 80172e0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80172e6:	2b01      	cmp	r3, #1
 80172e8:	d109      	bne.n	80172fe <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80172f0:	085b      	lsrs	r3, r3, #1
 80172f2:	b29b      	uxth	r3, r3
 80172f4:	4619      	mov	r1, r3
 80172f6:	68f8      	ldr	r0, [r7, #12]
 80172f8:	f7eb ffa8 	bl	800324c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80172fc:	e002      	b.n	8017304 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80172fe:	68f8      	ldr	r0, [r7, #12]
 8017300:	f7ff f946 	bl	8016590 <HAL_UART_RxHalfCpltCallback>
}
 8017304:	bf00      	nop
 8017306:	3710      	adds	r7, #16
 8017308:	46bd      	mov	sp, r7
 801730a:	bd80      	pop	{r7, pc}

0801730c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801730c:	b580      	push	{r7, lr}
 801730e:	b086      	sub	sp, #24
 8017310:	af00      	add	r7, sp, #0
 8017312:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017318:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801731a:	697b      	ldr	r3, [r7, #20]
 801731c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801731e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8017320:	697b      	ldr	r3, [r7, #20]
 8017322:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017326:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8017328:	697b      	ldr	r3, [r7, #20]
 801732a:	681b      	ldr	r3, [r3, #0]
 801732c:	689b      	ldr	r3, [r3, #8]
 801732e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017332:	2b80      	cmp	r3, #128	@ 0x80
 8017334:	d109      	bne.n	801734a <UART_DMAError+0x3e>
 8017336:	693b      	ldr	r3, [r7, #16]
 8017338:	2b21      	cmp	r3, #33	@ 0x21
 801733a:	d106      	bne.n	801734a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801733c:	697b      	ldr	r3, [r7, #20]
 801733e:	2200      	movs	r2, #0
 8017340:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8017344:	6978      	ldr	r0, [r7, #20]
 8017346:	f7ff fe47 	bl	8016fd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801734a:	697b      	ldr	r3, [r7, #20]
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	689b      	ldr	r3, [r3, #8]
 8017350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017354:	2b40      	cmp	r3, #64	@ 0x40
 8017356:	d109      	bne.n	801736c <UART_DMAError+0x60>
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	2b22      	cmp	r3, #34	@ 0x22
 801735c:	d106      	bne.n	801736c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801735e:	697b      	ldr	r3, [r7, #20]
 8017360:	2200      	movs	r2, #0
 8017362:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8017366:	6978      	ldr	r0, [r7, #20]
 8017368:	f7ff fe5c 	bl	8017024 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801736c:	697b      	ldr	r3, [r7, #20]
 801736e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017372:	f043 0210 	orr.w	r2, r3, #16
 8017376:	697b      	ldr	r3, [r7, #20]
 8017378:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801737c:	6978      	ldr	r0, [r7, #20]
 801737e:	f7ff f911 	bl	80165a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017382:	bf00      	nop
 8017384:	3718      	adds	r7, #24
 8017386:	46bd      	mov	sp, r7
 8017388:	bd80      	pop	{r7, pc}

0801738a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801738a:	b580      	push	{r7, lr}
 801738c:	b084      	sub	sp, #16
 801738e:	af00      	add	r7, sp, #0
 8017390:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017396:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	2200      	movs	r2, #0
 801739c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	2200      	movs	r2, #0
 80173a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80173a8:	68f8      	ldr	r0, [r7, #12]
 80173aa:	f7ff f8fb 	bl	80165a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80173ae:	bf00      	nop
 80173b0:	3710      	adds	r7, #16
 80173b2:	46bd      	mov	sp, r7
 80173b4:	bd80      	pop	{r7, pc}

080173b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80173b6:	b580      	push	{r7, lr}
 80173b8:	b088      	sub	sp, #32
 80173ba:	af00      	add	r7, sp, #0
 80173bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	e853 3f00 	ldrex	r3, [r3]
 80173ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80173cc:	68bb      	ldr	r3, [r7, #8]
 80173ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80173d2:	61fb      	str	r3, [r7, #28]
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	461a      	mov	r2, r3
 80173da:	69fb      	ldr	r3, [r7, #28]
 80173dc:	61bb      	str	r3, [r7, #24]
 80173de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80173e0:	6979      	ldr	r1, [r7, #20]
 80173e2:	69ba      	ldr	r2, [r7, #24]
 80173e4:	e841 2300 	strex	r3, r2, [r1]
 80173e8:	613b      	str	r3, [r7, #16]
   return(result);
 80173ea:	693b      	ldr	r3, [r7, #16]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d1e6      	bne.n	80173be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	2220      	movs	r2, #32
 80173f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	2200      	movs	r2, #0
 80173fa:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80173fc:	6878      	ldr	r0, [r7, #4]
 80173fe:	f7eb ffd3 	bl	80033a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017402:	bf00      	nop
 8017404:	3720      	adds	r7, #32
 8017406:	46bd      	mov	sp, r7
 8017408:	bd80      	pop	{r7, pc}

0801740a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801740a:	b480      	push	{r7}
 801740c:	b083      	sub	sp, #12
 801740e:	af00      	add	r7, sp, #0
 8017410:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8017412:	bf00      	nop
 8017414:	370c      	adds	r7, #12
 8017416:	46bd      	mov	sp, r7
 8017418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801741c:	4770      	bx	lr

0801741e <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 801741e:	b580      	push	{r7, lr}
 8017420:	b088      	sub	sp, #32
 8017422:	af00      	add	r7, sp, #0
 8017424:	60f8      	str	r0, [r7, #12]
 8017426:	60b9      	str	r1, [r7, #8]
 8017428:	603b      	str	r3, [r7, #0]
 801742a:	4613      	mov	r3, r2
 801742c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017434:	2b20      	cmp	r3, #32
 8017436:	f040 80f0 	bne.w	801761a <HAL_UARTEx_ReceiveToIdle+0x1fc>
  {
    if ((pData == NULL) || (Size == 0U))
 801743a:	68bb      	ldr	r3, [r7, #8]
 801743c:	2b00      	cmp	r3, #0
 801743e:	d002      	beq.n	8017446 <HAL_UARTEx_ReceiveToIdle+0x28>
 8017440:	88fb      	ldrh	r3, [r7, #6]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d101      	bne.n	801744a <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 8017446:	2301      	movs	r3, #1
 8017448:	e0e8      	b.n	801761c <HAL_UARTEx_ReceiveToIdle+0x1fe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	2200      	movs	r2, #0
 801744e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017452:	68fb      	ldr	r3, [r7, #12]
 8017454:	2222      	movs	r2, #34	@ 0x22
 8017456:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801745a:	68fb      	ldr	r3, [r7, #12]
 801745c:	2201      	movs	r2, #1
 801745e:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	2200      	movs	r2, #0
 8017464:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017466:	f7f4 fe05 	bl	800c074 <HAL_GetTick>
 801746a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	88fa      	ldrh	r2, [r7, #6]
 8017470:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8017474:	68fb      	ldr	r3, [r7, #12]
 8017476:	88fa      	ldrh	r2, [r7, #6]
 8017478:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	689b      	ldr	r3, [r3, #8]
 8017480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017484:	d10e      	bne.n	80174a4 <HAL_UARTEx_ReceiveToIdle+0x86>
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	691b      	ldr	r3, [r3, #16]
 801748a:	2b00      	cmp	r3, #0
 801748c:	d105      	bne.n	801749a <HAL_UARTEx_ReceiveToIdle+0x7c>
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8017494:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8017498:	e02d      	b.n	80174f6 <HAL_UARTEx_ReceiveToIdle+0xd8>
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	22ff      	movs	r2, #255	@ 0xff
 801749e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80174a2:	e028      	b.n	80174f6 <HAL_UARTEx_ReceiveToIdle+0xd8>
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	689b      	ldr	r3, [r3, #8]
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d10d      	bne.n	80174c8 <HAL_UARTEx_ReceiveToIdle+0xaa>
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	691b      	ldr	r3, [r3, #16]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d104      	bne.n	80174be <HAL_UARTEx_ReceiveToIdle+0xa0>
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	22ff      	movs	r2, #255	@ 0xff
 80174b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80174bc:	e01b      	b.n	80174f6 <HAL_UARTEx_ReceiveToIdle+0xd8>
 80174be:	68fb      	ldr	r3, [r7, #12]
 80174c0:	227f      	movs	r2, #127	@ 0x7f
 80174c2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80174c6:	e016      	b.n	80174f6 <HAL_UARTEx_ReceiveToIdle+0xd8>
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	689b      	ldr	r3, [r3, #8]
 80174cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80174d0:	d10d      	bne.n	80174ee <HAL_UARTEx_ReceiveToIdle+0xd0>
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	691b      	ldr	r3, [r3, #16]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d104      	bne.n	80174e4 <HAL_UARTEx_ReceiveToIdle+0xc6>
 80174da:	68fb      	ldr	r3, [r7, #12]
 80174dc:	227f      	movs	r2, #127	@ 0x7f
 80174de:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80174e2:	e008      	b.n	80174f6 <HAL_UARTEx_ReceiveToIdle+0xd8>
 80174e4:	68fb      	ldr	r3, [r7, #12]
 80174e6:	223f      	movs	r2, #63	@ 0x3f
 80174e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80174ec:	e003      	b.n	80174f6 <HAL_UARTEx_ReceiveToIdle+0xd8>
 80174ee:	68fb      	ldr	r3, [r7, #12]
 80174f0:	2200      	movs	r2, #0
 80174f2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80174fc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	689b      	ldr	r3, [r3, #8]
 8017502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017506:	d108      	bne.n	801751a <HAL_UARTEx_ReceiveToIdle+0xfc>
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	691b      	ldr	r3, [r3, #16]
 801750c:	2b00      	cmp	r3, #0
 801750e:	d104      	bne.n	801751a <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 8017510:	2300      	movs	r3, #0
 8017512:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8017514:	68bb      	ldr	r3, [r7, #8]
 8017516:	61bb      	str	r3, [r7, #24]
 8017518:	e003      	b.n	8017522 <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 801751a:	68bb      	ldr	r3, [r7, #8]
 801751c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801751e:	2300      	movs	r3, #0
 8017520:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8017522:	683b      	ldr	r3, [r7, #0]
 8017524:	2200      	movs	r2, #0
 8017526:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8017528:	e060      	b.n	80175ec <HAL_UARTEx_ReceiveToIdle+0x1ce>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	681b      	ldr	r3, [r3, #0]
 801752e:	69db      	ldr	r3, [r3, #28]
 8017530:	f003 0310 	and.w	r3, r3, #16
 8017534:	2b10      	cmp	r3, #16
 8017536:	d110      	bne.n	801755a <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017538:	68fb      	ldr	r3, [r7, #12]
 801753a:	681b      	ldr	r3, [r3, #0]
 801753c:	2210      	movs	r2, #16
 801753e:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8017540:	683b      	ldr	r3, [r7, #0]
 8017542:	881b      	ldrh	r3, [r3, #0]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d008      	beq.n	801755a <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	2202      	movs	r2, #2
 801754c:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 801754e:	68fb      	ldr	r3, [r7, #12]
 8017550:	2220      	movs	r2, #32
 8017552:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_OK;
 8017556:	2300      	movs	r3, #0
 8017558:	e060      	b.n	801761c <HAL_UARTEx_ReceiveToIdle+0x1fe>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	69db      	ldr	r3, [r3, #28]
 8017560:	f003 0320 	and.w	r3, r3, #32
 8017564:	2b20      	cmp	r3, #32
 8017566:	d12c      	bne.n	80175c2 <HAL_UARTEx_ReceiveToIdle+0x1a4>
      {
        if (pdata8bits == NULL)
 8017568:	69fb      	ldr	r3, [r7, #28]
 801756a:	2b00      	cmp	r3, #0
 801756c:	d10c      	bne.n	8017588 <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8017574:	b29a      	uxth	r2, r3
 8017576:	8a7b      	ldrh	r3, [r7, #18]
 8017578:	4013      	ands	r3, r2
 801757a:	b29a      	uxth	r2, r3
 801757c:	69bb      	ldr	r3, [r7, #24]
 801757e:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8017580:	69bb      	ldr	r3, [r7, #24]
 8017582:	3302      	adds	r3, #2
 8017584:	61bb      	str	r3, [r7, #24]
 8017586:	e00d      	b.n	80175a4 <HAL_UARTEx_ReceiveToIdle+0x186>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8017588:	68fb      	ldr	r3, [r7, #12]
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801758e:	b29b      	uxth	r3, r3
 8017590:	b2da      	uxtb	r2, r3
 8017592:	8a7b      	ldrh	r3, [r7, #18]
 8017594:	b2db      	uxtb	r3, r3
 8017596:	4013      	ands	r3, r2
 8017598:	b2da      	uxtb	r2, r3
 801759a:	69fb      	ldr	r3, [r7, #28]
 801759c:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 801759e:	69fb      	ldr	r3, [r7, #28]
 80175a0:	3301      	adds	r3, #1
 80175a2:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 80175a4:	683b      	ldr	r3, [r7, #0]
 80175a6:	881b      	ldrh	r3, [r3, #0]
 80175a8:	3301      	adds	r3, #1
 80175aa:	b29a      	uxth	r2, r3
 80175ac:	683b      	ldr	r3, [r7, #0]
 80175ae:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80175b6:	b29b      	uxth	r3, r3
 80175b8:	3b01      	subs	r3, #1
 80175ba:	b29a      	uxth	r2, r3
 80175bc:	68fb      	ldr	r3, [r7, #12]
 80175be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80175c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80175c8:	d010      	beq.n	80175ec <HAL_UARTEx_ReceiveToIdle+0x1ce>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80175ca:	f7f4 fd53 	bl	800c074 <HAL_GetTick>
 80175ce:	4602      	mov	r2, r0
 80175d0:	697b      	ldr	r3, [r7, #20]
 80175d2:	1ad3      	subs	r3, r2, r3
 80175d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80175d6:	429a      	cmp	r2, r3
 80175d8:	d302      	bcc.n	80175e0 <HAL_UARTEx_ReceiveToIdle+0x1c2>
 80175da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d105      	bne.n	80175ec <HAL_UARTEx_ReceiveToIdle+0x1ce>
        {
          huart->RxState = HAL_UART_STATE_READY;
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	2220      	movs	r2, #32
 80175e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80175e8:	2303      	movs	r3, #3
 80175ea:	e017      	b.n	801761c <HAL_UARTEx_ReceiveToIdle+0x1fe>
    while (huart->RxXferCount > 0U)
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80175f2:	b29b      	uxth	r3, r3
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d198      	bne.n	801752a <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 80175f8:	68fb      	ldr	r3, [r7, #12]
 80175fa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8017604:	b29b      	uxth	r3, r3
 8017606:	1ad3      	subs	r3, r2, r3
 8017608:	b29a      	uxth	r2, r3
 801760a:	683b      	ldr	r3, [r7, #0]
 801760c:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	2220      	movs	r2, #32
 8017612:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8017616:	2300      	movs	r3, #0
 8017618:	e000      	b.n	801761c <HAL_UARTEx_ReceiveToIdle+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 801761a:	2302      	movs	r3, #2
  }
}
 801761c:	4618      	mov	r0, r3
 801761e:	3720      	adds	r7, #32
 8017620:	46bd      	mov	sp, r7
 8017622:	bd80      	pop	{r7, pc}

08017624 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017624:	b580      	push	{r7, lr}
 8017626:	b08c      	sub	sp, #48	@ 0x30
 8017628:	af00      	add	r7, sp, #0
 801762a:	60f8      	str	r0, [r7, #12]
 801762c:	60b9      	str	r1, [r7, #8]
 801762e:	4613      	mov	r3, r2
 8017630:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017638:	2b20      	cmp	r3, #32
 801763a:	d142      	bne.n	80176c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 801763c:	68bb      	ldr	r3, [r7, #8]
 801763e:	2b00      	cmp	r3, #0
 8017640:	d002      	beq.n	8017648 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8017642:	88fb      	ldrh	r3, [r7, #6]
 8017644:	2b00      	cmp	r3, #0
 8017646:	d101      	bne.n	801764c <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8017648:	2301      	movs	r3, #1
 801764a:	e03b      	b.n	80176c4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	2201      	movs	r2, #1
 8017650:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	2200      	movs	r2, #0
 8017656:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8017658:	88fb      	ldrh	r3, [r7, #6]
 801765a:	461a      	mov	r2, r3
 801765c:	68b9      	ldr	r1, [r7, #8]
 801765e:	68f8      	ldr	r0, [r7, #12]
 8017660:	f7ff fc1a 	bl	8016e98 <UART_Start_Receive_DMA>
 8017664:	4603      	mov	r3, r0
 8017666:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801766a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801766e:	2b00      	cmp	r3, #0
 8017670:	d124      	bne.n	80176bc <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017676:	2b01      	cmp	r3, #1
 8017678:	d11d      	bne.n	80176b6 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	2210      	movs	r2, #16
 8017680:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	681b      	ldr	r3, [r3, #0]
 8017686:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017688:	69bb      	ldr	r3, [r7, #24]
 801768a:	e853 3f00 	ldrex	r3, [r3]
 801768e:	617b      	str	r3, [r7, #20]
   return(result);
 8017690:	697b      	ldr	r3, [r7, #20]
 8017692:	f043 0310 	orr.w	r3, r3, #16
 8017696:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	681b      	ldr	r3, [r3, #0]
 801769c:	461a      	mov	r2, r3
 801769e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80176a2:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80176a4:	6a39      	ldr	r1, [r7, #32]
 80176a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80176a8:	e841 2300 	strex	r3, r2, [r1]
 80176ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80176ae:	69fb      	ldr	r3, [r7, #28]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d1e6      	bne.n	8017682 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80176b4:	e002      	b.n	80176bc <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80176b6:	2301      	movs	r3, #1
 80176b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80176bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80176c0:	e000      	b.n	80176c4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80176c2:	2302      	movs	r3, #2
  }
}
 80176c4:	4618      	mov	r0, r3
 80176c6:	3730      	adds	r7, #48	@ 0x30
 80176c8:	46bd      	mov	sp, r7
 80176ca:	bd80      	pop	{r7, pc}

080176cc <atoi>:
 80176cc:	220a      	movs	r2, #10
 80176ce:	2100      	movs	r1, #0
 80176d0:	f000 b87c 	b.w	80177cc <strtol>

080176d4 <_strtol_l.isra.0>:
 80176d4:	2b24      	cmp	r3, #36	@ 0x24
 80176d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176da:	4686      	mov	lr, r0
 80176dc:	4690      	mov	r8, r2
 80176de:	d801      	bhi.n	80176e4 <_strtol_l.isra.0+0x10>
 80176e0:	2b01      	cmp	r3, #1
 80176e2:	d106      	bne.n	80176f2 <_strtol_l.isra.0+0x1e>
 80176e4:	f000 f92c 	bl	8017940 <__errno>
 80176e8:	2316      	movs	r3, #22
 80176ea:	6003      	str	r3, [r0, #0]
 80176ec:	2000      	movs	r0, #0
 80176ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176f2:	4834      	ldr	r0, [pc, #208]	@ (80177c4 <_strtol_l.isra.0+0xf0>)
 80176f4:	460d      	mov	r5, r1
 80176f6:	462a      	mov	r2, r5
 80176f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80176fc:	5d06      	ldrb	r6, [r0, r4]
 80176fe:	f016 0608 	ands.w	r6, r6, #8
 8017702:	d1f8      	bne.n	80176f6 <_strtol_l.isra.0+0x22>
 8017704:	2c2d      	cmp	r4, #45	@ 0x2d
 8017706:	d110      	bne.n	801772a <_strtol_l.isra.0+0x56>
 8017708:	782c      	ldrb	r4, [r5, #0]
 801770a:	2601      	movs	r6, #1
 801770c:	1c95      	adds	r5, r2, #2
 801770e:	f033 0210 	bics.w	r2, r3, #16
 8017712:	d115      	bne.n	8017740 <_strtol_l.isra.0+0x6c>
 8017714:	2c30      	cmp	r4, #48	@ 0x30
 8017716:	d10d      	bne.n	8017734 <_strtol_l.isra.0+0x60>
 8017718:	782a      	ldrb	r2, [r5, #0]
 801771a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801771e:	2a58      	cmp	r2, #88	@ 0x58
 8017720:	d108      	bne.n	8017734 <_strtol_l.isra.0+0x60>
 8017722:	786c      	ldrb	r4, [r5, #1]
 8017724:	3502      	adds	r5, #2
 8017726:	2310      	movs	r3, #16
 8017728:	e00a      	b.n	8017740 <_strtol_l.isra.0+0x6c>
 801772a:	2c2b      	cmp	r4, #43	@ 0x2b
 801772c:	bf04      	itt	eq
 801772e:	782c      	ldrbeq	r4, [r5, #0]
 8017730:	1c95      	addeq	r5, r2, #2
 8017732:	e7ec      	b.n	801770e <_strtol_l.isra.0+0x3a>
 8017734:	2b00      	cmp	r3, #0
 8017736:	d1f6      	bne.n	8017726 <_strtol_l.isra.0+0x52>
 8017738:	2c30      	cmp	r4, #48	@ 0x30
 801773a:	bf14      	ite	ne
 801773c:	230a      	movne	r3, #10
 801773e:	2308      	moveq	r3, #8
 8017740:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8017744:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017748:	2200      	movs	r2, #0
 801774a:	fbbc f9f3 	udiv	r9, ip, r3
 801774e:	4610      	mov	r0, r2
 8017750:	fb03 ca19 	mls	sl, r3, r9, ip
 8017754:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8017758:	2f09      	cmp	r7, #9
 801775a:	d80f      	bhi.n	801777c <_strtol_l.isra.0+0xa8>
 801775c:	463c      	mov	r4, r7
 801775e:	42a3      	cmp	r3, r4
 8017760:	dd1b      	ble.n	801779a <_strtol_l.isra.0+0xc6>
 8017762:	1c57      	adds	r7, r2, #1
 8017764:	d007      	beq.n	8017776 <_strtol_l.isra.0+0xa2>
 8017766:	4581      	cmp	r9, r0
 8017768:	d314      	bcc.n	8017794 <_strtol_l.isra.0+0xc0>
 801776a:	d101      	bne.n	8017770 <_strtol_l.isra.0+0x9c>
 801776c:	45a2      	cmp	sl, r4
 801776e:	db11      	blt.n	8017794 <_strtol_l.isra.0+0xc0>
 8017770:	fb00 4003 	mla	r0, r0, r3, r4
 8017774:	2201      	movs	r2, #1
 8017776:	f815 4b01 	ldrb.w	r4, [r5], #1
 801777a:	e7eb      	b.n	8017754 <_strtol_l.isra.0+0x80>
 801777c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8017780:	2f19      	cmp	r7, #25
 8017782:	d801      	bhi.n	8017788 <_strtol_l.isra.0+0xb4>
 8017784:	3c37      	subs	r4, #55	@ 0x37
 8017786:	e7ea      	b.n	801775e <_strtol_l.isra.0+0x8a>
 8017788:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801778c:	2f19      	cmp	r7, #25
 801778e:	d804      	bhi.n	801779a <_strtol_l.isra.0+0xc6>
 8017790:	3c57      	subs	r4, #87	@ 0x57
 8017792:	e7e4      	b.n	801775e <_strtol_l.isra.0+0x8a>
 8017794:	f04f 32ff 	mov.w	r2, #4294967295
 8017798:	e7ed      	b.n	8017776 <_strtol_l.isra.0+0xa2>
 801779a:	1c53      	adds	r3, r2, #1
 801779c:	d108      	bne.n	80177b0 <_strtol_l.isra.0+0xdc>
 801779e:	2322      	movs	r3, #34	@ 0x22
 80177a0:	f8ce 3000 	str.w	r3, [lr]
 80177a4:	4660      	mov	r0, ip
 80177a6:	f1b8 0f00 	cmp.w	r8, #0
 80177aa:	d0a0      	beq.n	80176ee <_strtol_l.isra.0+0x1a>
 80177ac:	1e69      	subs	r1, r5, #1
 80177ae:	e006      	b.n	80177be <_strtol_l.isra.0+0xea>
 80177b0:	b106      	cbz	r6, 80177b4 <_strtol_l.isra.0+0xe0>
 80177b2:	4240      	negs	r0, r0
 80177b4:	f1b8 0f00 	cmp.w	r8, #0
 80177b8:	d099      	beq.n	80176ee <_strtol_l.isra.0+0x1a>
 80177ba:	2a00      	cmp	r2, #0
 80177bc:	d1f6      	bne.n	80177ac <_strtol_l.isra.0+0xd8>
 80177be:	f8c8 1000 	str.w	r1, [r8]
 80177c2:	e794      	b.n	80176ee <_strtol_l.isra.0+0x1a>
 80177c4:	080193bf 	.word	0x080193bf

080177c8 <_strtol_r>:
 80177c8:	f7ff bf84 	b.w	80176d4 <_strtol_l.isra.0>

080177cc <strtol>:
 80177cc:	4613      	mov	r3, r2
 80177ce:	460a      	mov	r2, r1
 80177d0:	4601      	mov	r1, r0
 80177d2:	4802      	ldr	r0, [pc, #8]	@ (80177dc <strtol+0x10>)
 80177d4:	6800      	ldr	r0, [r0, #0]
 80177d6:	f7ff bf7d 	b.w	80176d4 <_strtol_l.isra.0>
 80177da:	bf00      	nop
 80177dc:	20000034 	.word	0x20000034

080177e0 <siprintf>:
 80177e0:	b40e      	push	{r1, r2, r3}
 80177e2:	b510      	push	{r4, lr}
 80177e4:	b09d      	sub	sp, #116	@ 0x74
 80177e6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80177e8:	9002      	str	r0, [sp, #8]
 80177ea:	9006      	str	r0, [sp, #24]
 80177ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80177f0:	480a      	ldr	r0, [pc, #40]	@ (801781c <siprintf+0x3c>)
 80177f2:	9107      	str	r1, [sp, #28]
 80177f4:	9104      	str	r1, [sp, #16]
 80177f6:	490a      	ldr	r1, [pc, #40]	@ (8017820 <siprintf+0x40>)
 80177f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80177fc:	9105      	str	r1, [sp, #20]
 80177fe:	2400      	movs	r4, #0
 8017800:	a902      	add	r1, sp, #8
 8017802:	6800      	ldr	r0, [r0, #0]
 8017804:	9301      	str	r3, [sp, #4]
 8017806:	941b      	str	r4, [sp, #108]	@ 0x6c
 8017808:	f000 fa30 	bl	8017c6c <_svfiprintf_r>
 801780c:	9b02      	ldr	r3, [sp, #8]
 801780e:	701c      	strb	r4, [r3, #0]
 8017810:	b01d      	add	sp, #116	@ 0x74
 8017812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017816:	b003      	add	sp, #12
 8017818:	4770      	bx	lr
 801781a:	bf00      	nop
 801781c:	20000034 	.word	0x20000034
 8017820:	ffff0208 	.word	0xffff0208

08017824 <siscanf>:
 8017824:	b40e      	push	{r1, r2, r3}
 8017826:	b570      	push	{r4, r5, r6, lr}
 8017828:	b09d      	sub	sp, #116	@ 0x74
 801782a:	ac21      	add	r4, sp, #132	@ 0x84
 801782c:	2500      	movs	r5, #0
 801782e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8017832:	f854 6b04 	ldr.w	r6, [r4], #4
 8017836:	f8ad 2014 	strh.w	r2, [sp, #20]
 801783a:	951b      	str	r5, [sp, #108]	@ 0x6c
 801783c:	9002      	str	r0, [sp, #8]
 801783e:	9006      	str	r0, [sp, #24]
 8017840:	f7e8 fcd0 	bl	80001e4 <strlen>
 8017844:	4b0b      	ldr	r3, [pc, #44]	@ (8017874 <siscanf+0x50>)
 8017846:	9003      	str	r0, [sp, #12]
 8017848:	9007      	str	r0, [sp, #28]
 801784a:	480b      	ldr	r0, [pc, #44]	@ (8017878 <siscanf+0x54>)
 801784c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801784e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017852:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017856:	4632      	mov	r2, r6
 8017858:	4623      	mov	r3, r4
 801785a:	a902      	add	r1, sp, #8
 801785c:	6800      	ldr	r0, [r0, #0]
 801785e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8017860:	9514      	str	r5, [sp, #80]	@ 0x50
 8017862:	9401      	str	r4, [sp, #4]
 8017864:	f000 fb58 	bl	8017f18 <__ssvfiscanf_r>
 8017868:	b01d      	add	sp, #116	@ 0x74
 801786a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801786e:	b003      	add	sp, #12
 8017870:	4770      	bx	lr
 8017872:	bf00      	nop
 8017874:	0801787d 	.word	0x0801787d
 8017878:	20000034 	.word	0x20000034

0801787c <__seofread>:
 801787c:	2000      	movs	r0, #0
 801787e:	4770      	bx	lr

08017880 <memcmp>:
 8017880:	b510      	push	{r4, lr}
 8017882:	3901      	subs	r1, #1
 8017884:	4402      	add	r2, r0
 8017886:	4290      	cmp	r0, r2
 8017888:	d101      	bne.n	801788e <memcmp+0xe>
 801788a:	2000      	movs	r0, #0
 801788c:	e005      	b.n	801789a <memcmp+0x1a>
 801788e:	7803      	ldrb	r3, [r0, #0]
 8017890:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017894:	42a3      	cmp	r3, r4
 8017896:	d001      	beq.n	801789c <memcmp+0x1c>
 8017898:	1b18      	subs	r0, r3, r4
 801789a:	bd10      	pop	{r4, pc}
 801789c:	3001      	adds	r0, #1
 801789e:	e7f2      	b.n	8017886 <memcmp+0x6>

080178a0 <memset>:
 80178a0:	4402      	add	r2, r0
 80178a2:	4603      	mov	r3, r0
 80178a4:	4293      	cmp	r3, r2
 80178a6:	d100      	bne.n	80178aa <memset+0xa>
 80178a8:	4770      	bx	lr
 80178aa:	f803 1b01 	strb.w	r1, [r3], #1
 80178ae:	e7f9      	b.n	80178a4 <memset+0x4>

080178b0 <strchr>:
 80178b0:	b2c9      	uxtb	r1, r1
 80178b2:	4603      	mov	r3, r0
 80178b4:	4618      	mov	r0, r3
 80178b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80178ba:	b112      	cbz	r2, 80178c2 <strchr+0x12>
 80178bc:	428a      	cmp	r2, r1
 80178be:	d1f9      	bne.n	80178b4 <strchr+0x4>
 80178c0:	4770      	bx	lr
 80178c2:	2900      	cmp	r1, #0
 80178c4:	bf18      	it	ne
 80178c6:	2000      	movne	r0, #0
 80178c8:	4770      	bx	lr

080178ca <strncmp>:
 80178ca:	b510      	push	{r4, lr}
 80178cc:	b16a      	cbz	r2, 80178ea <strncmp+0x20>
 80178ce:	3901      	subs	r1, #1
 80178d0:	1884      	adds	r4, r0, r2
 80178d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80178d6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80178da:	429a      	cmp	r2, r3
 80178dc:	d103      	bne.n	80178e6 <strncmp+0x1c>
 80178de:	42a0      	cmp	r0, r4
 80178e0:	d001      	beq.n	80178e6 <strncmp+0x1c>
 80178e2:	2a00      	cmp	r2, #0
 80178e4:	d1f5      	bne.n	80178d2 <strncmp+0x8>
 80178e6:	1ad0      	subs	r0, r2, r3
 80178e8:	bd10      	pop	{r4, pc}
 80178ea:	4610      	mov	r0, r2
 80178ec:	e7fc      	b.n	80178e8 <strncmp+0x1e>

080178ee <strncpy>:
 80178ee:	b510      	push	{r4, lr}
 80178f0:	3901      	subs	r1, #1
 80178f2:	4603      	mov	r3, r0
 80178f4:	b132      	cbz	r2, 8017904 <strncpy+0x16>
 80178f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80178fa:	f803 4b01 	strb.w	r4, [r3], #1
 80178fe:	3a01      	subs	r2, #1
 8017900:	2c00      	cmp	r4, #0
 8017902:	d1f7      	bne.n	80178f4 <strncpy+0x6>
 8017904:	441a      	add	r2, r3
 8017906:	2100      	movs	r1, #0
 8017908:	4293      	cmp	r3, r2
 801790a:	d100      	bne.n	801790e <strncpy+0x20>
 801790c:	bd10      	pop	{r4, pc}
 801790e:	f803 1b01 	strb.w	r1, [r3], #1
 8017912:	e7f9      	b.n	8017908 <strncpy+0x1a>

08017914 <strstr>:
 8017914:	780a      	ldrb	r2, [r1, #0]
 8017916:	b570      	push	{r4, r5, r6, lr}
 8017918:	b96a      	cbnz	r2, 8017936 <strstr+0x22>
 801791a:	bd70      	pop	{r4, r5, r6, pc}
 801791c:	429a      	cmp	r2, r3
 801791e:	d109      	bne.n	8017934 <strstr+0x20>
 8017920:	460c      	mov	r4, r1
 8017922:	4605      	mov	r5, r0
 8017924:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017928:	2b00      	cmp	r3, #0
 801792a:	d0f6      	beq.n	801791a <strstr+0x6>
 801792c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017930:	429e      	cmp	r6, r3
 8017932:	d0f7      	beq.n	8017924 <strstr+0x10>
 8017934:	3001      	adds	r0, #1
 8017936:	7803      	ldrb	r3, [r0, #0]
 8017938:	2b00      	cmp	r3, #0
 801793a:	d1ef      	bne.n	801791c <strstr+0x8>
 801793c:	4618      	mov	r0, r3
 801793e:	e7ec      	b.n	801791a <strstr+0x6>

08017940 <__errno>:
 8017940:	4b01      	ldr	r3, [pc, #4]	@ (8017948 <__errno+0x8>)
 8017942:	6818      	ldr	r0, [r3, #0]
 8017944:	4770      	bx	lr
 8017946:	bf00      	nop
 8017948:	20000034 	.word	0x20000034

0801794c <__libc_init_array>:
 801794c:	b570      	push	{r4, r5, r6, lr}
 801794e:	4d0d      	ldr	r5, [pc, #52]	@ (8017984 <__libc_init_array+0x38>)
 8017950:	4c0d      	ldr	r4, [pc, #52]	@ (8017988 <__libc_init_array+0x3c>)
 8017952:	1b64      	subs	r4, r4, r5
 8017954:	10a4      	asrs	r4, r4, #2
 8017956:	2600      	movs	r6, #0
 8017958:	42a6      	cmp	r6, r4
 801795a:	d109      	bne.n	8017970 <__libc_init_array+0x24>
 801795c:	4d0b      	ldr	r5, [pc, #44]	@ (801798c <__libc_init_array+0x40>)
 801795e:	4c0c      	ldr	r4, [pc, #48]	@ (8017990 <__libc_init_array+0x44>)
 8017960:	f001 f86e 	bl	8018a40 <_init>
 8017964:	1b64      	subs	r4, r4, r5
 8017966:	10a4      	asrs	r4, r4, #2
 8017968:	2600      	movs	r6, #0
 801796a:	42a6      	cmp	r6, r4
 801796c:	d105      	bne.n	801797a <__libc_init_array+0x2e>
 801796e:	bd70      	pop	{r4, r5, r6, pc}
 8017970:	f855 3b04 	ldr.w	r3, [r5], #4
 8017974:	4798      	blx	r3
 8017976:	3601      	adds	r6, #1
 8017978:	e7ee      	b.n	8017958 <__libc_init_array+0xc>
 801797a:	f855 3b04 	ldr.w	r3, [r5], #4
 801797e:	4798      	blx	r3
 8017980:	3601      	adds	r6, #1
 8017982:	e7f2      	b.n	801796a <__libc_init_array+0x1e>
 8017984:	08019518 	.word	0x08019518
 8017988:	08019518 	.word	0x08019518
 801798c:	08019518 	.word	0x08019518
 8017990:	0801951c 	.word	0x0801951c

08017994 <__retarget_lock_acquire_recursive>:
 8017994:	4770      	bx	lr

08017996 <__retarget_lock_release_recursive>:
 8017996:	4770      	bx	lr

08017998 <strcpy>:
 8017998:	4603      	mov	r3, r0
 801799a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801799e:	f803 2b01 	strb.w	r2, [r3], #1
 80179a2:	2a00      	cmp	r2, #0
 80179a4:	d1f9      	bne.n	801799a <strcpy+0x2>
 80179a6:	4770      	bx	lr

080179a8 <memcpy>:
 80179a8:	440a      	add	r2, r1
 80179aa:	4291      	cmp	r1, r2
 80179ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80179b0:	d100      	bne.n	80179b4 <memcpy+0xc>
 80179b2:	4770      	bx	lr
 80179b4:	b510      	push	{r4, lr}
 80179b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80179ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80179be:	4291      	cmp	r1, r2
 80179c0:	d1f9      	bne.n	80179b6 <memcpy+0xe>
 80179c2:	bd10      	pop	{r4, pc}

080179c4 <_free_r>:
 80179c4:	b538      	push	{r3, r4, r5, lr}
 80179c6:	4605      	mov	r5, r0
 80179c8:	2900      	cmp	r1, #0
 80179ca:	d041      	beq.n	8017a50 <_free_r+0x8c>
 80179cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80179d0:	1f0c      	subs	r4, r1, #4
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	bfb8      	it	lt
 80179d6:	18e4      	addlt	r4, r4, r3
 80179d8:	f000 f8e0 	bl	8017b9c <__malloc_lock>
 80179dc:	4a1d      	ldr	r2, [pc, #116]	@ (8017a54 <_free_r+0x90>)
 80179de:	6813      	ldr	r3, [r2, #0]
 80179e0:	b933      	cbnz	r3, 80179f0 <_free_r+0x2c>
 80179e2:	6063      	str	r3, [r4, #4]
 80179e4:	6014      	str	r4, [r2, #0]
 80179e6:	4628      	mov	r0, r5
 80179e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80179ec:	f000 b8dc 	b.w	8017ba8 <__malloc_unlock>
 80179f0:	42a3      	cmp	r3, r4
 80179f2:	d908      	bls.n	8017a06 <_free_r+0x42>
 80179f4:	6820      	ldr	r0, [r4, #0]
 80179f6:	1821      	adds	r1, r4, r0
 80179f8:	428b      	cmp	r3, r1
 80179fa:	bf01      	itttt	eq
 80179fc:	6819      	ldreq	r1, [r3, #0]
 80179fe:	685b      	ldreq	r3, [r3, #4]
 8017a00:	1809      	addeq	r1, r1, r0
 8017a02:	6021      	streq	r1, [r4, #0]
 8017a04:	e7ed      	b.n	80179e2 <_free_r+0x1e>
 8017a06:	461a      	mov	r2, r3
 8017a08:	685b      	ldr	r3, [r3, #4]
 8017a0a:	b10b      	cbz	r3, 8017a10 <_free_r+0x4c>
 8017a0c:	42a3      	cmp	r3, r4
 8017a0e:	d9fa      	bls.n	8017a06 <_free_r+0x42>
 8017a10:	6811      	ldr	r1, [r2, #0]
 8017a12:	1850      	adds	r0, r2, r1
 8017a14:	42a0      	cmp	r0, r4
 8017a16:	d10b      	bne.n	8017a30 <_free_r+0x6c>
 8017a18:	6820      	ldr	r0, [r4, #0]
 8017a1a:	4401      	add	r1, r0
 8017a1c:	1850      	adds	r0, r2, r1
 8017a1e:	4283      	cmp	r3, r0
 8017a20:	6011      	str	r1, [r2, #0]
 8017a22:	d1e0      	bne.n	80179e6 <_free_r+0x22>
 8017a24:	6818      	ldr	r0, [r3, #0]
 8017a26:	685b      	ldr	r3, [r3, #4]
 8017a28:	6053      	str	r3, [r2, #4]
 8017a2a:	4408      	add	r0, r1
 8017a2c:	6010      	str	r0, [r2, #0]
 8017a2e:	e7da      	b.n	80179e6 <_free_r+0x22>
 8017a30:	d902      	bls.n	8017a38 <_free_r+0x74>
 8017a32:	230c      	movs	r3, #12
 8017a34:	602b      	str	r3, [r5, #0]
 8017a36:	e7d6      	b.n	80179e6 <_free_r+0x22>
 8017a38:	6820      	ldr	r0, [r4, #0]
 8017a3a:	1821      	adds	r1, r4, r0
 8017a3c:	428b      	cmp	r3, r1
 8017a3e:	bf04      	itt	eq
 8017a40:	6819      	ldreq	r1, [r3, #0]
 8017a42:	685b      	ldreq	r3, [r3, #4]
 8017a44:	6063      	str	r3, [r4, #4]
 8017a46:	bf04      	itt	eq
 8017a48:	1809      	addeq	r1, r1, r0
 8017a4a:	6021      	streq	r1, [r4, #0]
 8017a4c:	6054      	str	r4, [r2, #4]
 8017a4e:	e7ca      	b.n	80179e6 <_free_r+0x22>
 8017a50:	bd38      	pop	{r3, r4, r5, pc}
 8017a52:	bf00      	nop
 8017a54:	20005dc4 	.word	0x20005dc4

08017a58 <sbrk_aligned>:
 8017a58:	b570      	push	{r4, r5, r6, lr}
 8017a5a:	4e0f      	ldr	r6, [pc, #60]	@ (8017a98 <sbrk_aligned+0x40>)
 8017a5c:	460c      	mov	r4, r1
 8017a5e:	6831      	ldr	r1, [r6, #0]
 8017a60:	4605      	mov	r5, r0
 8017a62:	b911      	cbnz	r1, 8017a6a <sbrk_aligned+0x12>
 8017a64:	f000 ff36 	bl	80188d4 <_sbrk_r>
 8017a68:	6030      	str	r0, [r6, #0]
 8017a6a:	4621      	mov	r1, r4
 8017a6c:	4628      	mov	r0, r5
 8017a6e:	f000 ff31 	bl	80188d4 <_sbrk_r>
 8017a72:	1c43      	adds	r3, r0, #1
 8017a74:	d103      	bne.n	8017a7e <sbrk_aligned+0x26>
 8017a76:	f04f 34ff 	mov.w	r4, #4294967295
 8017a7a:	4620      	mov	r0, r4
 8017a7c:	bd70      	pop	{r4, r5, r6, pc}
 8017a7e:	1cc4      	adds	r4, r0, #3
 8017a80:	f024 0403 	bic.w	r4, r4, #3
 8017a84:	42a0      	cmp	r0, r4
 8017a86:	d0f8      	beq.n	8017a7a <sbrk_aligned+0x22>
 8017a88:	1a21      	subs	r1, r4, r0
 8017a8a:	4628      	mov	r0, r5
 8017a8c:	f000 ff22 	bl	80188d4 <_sbrk_r>
 8017a90:	3001      	adds	r0, #1
 8017a92:	d1f2      	bne.n	8017a7a <sbrk_aligned+0x22>
 8017a94:	e7ef      	b.n	8017a76 <sbrk_aligned+0x1e>
 8017a96:	bf00      	nop
 8017a98:	20005dc0 	.word	0x20005dc0

08017a9c <_malloc_r>:
 8017a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017aa0:	1ccd      	adds	r5, r1, #3
 8017aa2:	f025 0503 	bic.w	r5, r5, #3
 8017aa6:	3508      	adds	r5, #8
 8017aa8:	2d0c      	cmp	r5, #12
 8017aaa:	bf38      	it	cc
 8017aac:	250c      	movcc	r5, #12
 8017aae:	2d00      	cmp	r5, #0
 8017ab0:	4606      	mov	r6, r0
 8017ab2:	db01      	blt.n	8017ab8 <_malloc_r+0x1c>
 8017ab4:	42a9      	cmp	r1, r5
 8017ab6:	d904      	bls.n	8017ac2 <_malloc_r+0x26>
 8017ab8:	230c      	movs	r3, #12
 8017aba:	6033      	str	r3, [r6, #0]
 8017abc:	2000      	movs	r0, #0
 8017abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017ac2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017b98 <_malloc_r+0xfc>
 8017ac6:	f000 f869 	bl	8017b9c <__malloc_lock>
 8017aca:	f8d8 3000 	ldr.w	r3, [r8]
 8017ace:	461c      	mov	r4, r3
 8017ad0:	bb44      	cbnz	r4, 8017b24 <_malloc_r+0x88>
 8017ad2:	4629      	mov	r1, r5
 8017ad4:	4630      	mov	r0, r6
 8017ad6:	f7ff ffbf 	bl	8017a58 <sbrk_aligned>
 8017ada:	1c43      	adds	r3, r0, #1
 8017adc:	4604      	mov	r4, r0
 8017ade:	d158      	bne.n	8017b92 <_malloc_r+0xf6>
 8017ae0:	f8d8 4000 	ldr.w	r4, [r8]
 8017ae4:	4627      	mov	r7, r4
 8017ae6:	2f00      	cmp	r7, #0
 8017ae8:	d143      	bne.n	8017b72 <_malloc_r+0xd6>
 8017aea:	2c00      	cmp	r4, #0
 8017aec:	d04b      	beq.n	8017b86 <_malloc_r+0xea>
 8017aee:	6823      	ldr	r3, [r4, #0]
 8017af0:	4639      	mov	r1, r7
 8017af2:	4630      	mov	r0, r6
 8017af4:	eb04 0903 	add.w	r9, r4, r3
 8017af8:	f000 feec 	bl	80188d4 <_sbrk_r>
 8017afc:	4581      	cmp	r9, r0
 8017afe:	d142      	bne.n	8017b86 <_malloc_r+0xea>
 8017b00:	6821      	ldr	r1, [r4, #0]
 8017b02:	1a6d      	subs	r5, r5, r1
 8017b04:	4629      	mov	r1, r5
 8017b06:	4630      	mov	r0, r6
 8017b08:	f7ff ffa6 	bl	8017a58 <sbrk_aligned>
 8017b0c:	3001      	adds	r0, #1
 8017b0e:	d03a      	beq.n	8017b86 <_malloc_r+0xea>
 8017b10:	6823      	ldr	r3, [r4, #0]
 8017b12:	442b      	add	r3, r5
 8017b14:	6023      	str	r3, [r4, #0]
 8017b16:	f8d8 3000 	ldr.w	r3, [r8]
 8017b1a:	685a      	ldr	r2, [r3, #4]
 8017b1c:	bb62      	cbnz	r2, 8017b78 <_malloc_r+0xdc>
 8017b1e:	f8c8 7000 	str.w	r7, [r8]
 8017b22:	e00f      	b.n	8017b44 <_malloc_r+0xa8>
 8017b24:	6822      	ldr	r2, [r4, #0]
 8017b26:	1b52      	subs	r2, r2, r5
 8017b28:	d420      	bmi.n	8017b6c <_malloc_r+0xd0>
 8017b2a:	2a0b      	cmp	r2, #11
 8017b2c:	d917      	bls.n	8017b5e <_malloc_r+0xc2>
 8017b2e:	1961      	adds	r1, r4, r5
 8017b30:	42a3      	cmp	r3, r4
 8017b32:	6025      	str	r5, [r4, #0]
 8017b34:	bf18      	it	ne
 8017b36:	6059      	strne	r1, [r3, #4]
 8017b38:	6863      	ldr	r3, [r4, #4]
 8017b3a:	bf08      	it	eq
 8017b3c:	f8c8 1000 	streq.w	r1, [r8]
 8017b40:	5162      	str	r2, [r4, r5]
 8017b42:	604b      	str	r3, [r1, #4]
 8017b44:	4630      	mov	r0, r6
 8017b46:	f000 f82f 	bl	8017ba8 <__malloc_unlock>
 8017b4a:	f104 000b 	add.w	r0, r4, #11
 8017b4e:	1d23      	adds	r3, r4, #4
 8017b50:	f020 0007 	bic.w	r0, r0, #7
 8017b54:	1ac2      	subs	r2, r0, r3
 8017b56:	bf1c      	itt	ne
 8017b58:	1a1b      	subne	r3, r3, r0
 8017b5a:	50a3      	strne	r3, [r4, r2]
 8017b5c:	e7af      	b.n	8017abe <_malloc_r+0x22>
 8017b5e:	6862      	ldr	r2, [r4, #4]
 8017b60:	42a3      	cmp	r3, r4
 8017b62:	bf0c      	ite	eq
 8017b64:	f8c8 2000 	streq.w	r2, [r8]
 8017b68:	605a      	strne	r2, [r3, #4]
 8017b6a:	e7eb      	b.n	8017b44 <_malloc_r+0xa8>
 8017b6c:	4623      	mov	r3, r4
 8017b6e:	6864      	ldr	r4, [r4, #4]
 8017b70:	e7ae      	b.n	8017ad0 <_malloc_r+0x34>
 8017b72:	463c      	mov	r4, r7
 8017b74:	687f      	ldr	r7, [r7, #4]
 8017b76:	e7b6      	b.n	8017ae6 <_malloc_r+0x4a>
 8017b78:	461a      	mov	r2, r3
 8017b7a:	685b      	ldr	r3, [r3, #4]
 8017b7c:	42a3      	cmp	r3, r4
 8017b7e:	d1fb      	bne.n	8017b78 <_malloc_r+0xdc>
 8017b80:	2300      	movs	r3, #0
 8017b82:	6053      	str	r3, [r2, #4]
 8017b84:	e7de      	b.n	8017b44 <_malloc_r+0xa8>
 8017b86:	230c      	movs	r3, #12
 8017b88:	6033      	str	r3, [r6, #0]
 8017b8a:	4630      	mov	r0, r6
 8017b8c:	f000 f80c 	bl	8017ba8 <__malloc_unlock>
 8017b90:	e794      	b.n	8017abc <_malloc_r+0x20>
 8017b92:	6005      	str	r5, [r0, #0]
 8017b94:	e7d6      	b.n	8017b44 <_malloc_r+0xa8>
 8017b96:	bf00      	nop
 8017b98:	20005dc4 	.word	0x20005dc4

08017b9c <__malloc_lock>:
 8017b9c:	4801      	ldr	r0, [pc, #4]	@ (8017ba4 <__malloc_lock+0x8>)
 8017b9e:	f7ff bef9 	b.w	8017994 <__retarget_lock_acquire_recursive>
 8017ba2:	bf00      	nop
 8017ba4:	20005dbc 	.word	0x20005dbc

08017ba8 <__malloc_unlock>:
 8017ba8:	4801      	ldr	r0, [pc, #4]	@ (8017bb0 <__malloc_unlock+0x8>)
 8017baa:	f7ff bef4 	b.w	8017996 <__retarget_lock_release_recursive>
 8017bae:	bf00      	nop
 8017bb0:	20005dbc 	.word	0x20005dbc

08017bb4 <__ssputs_r>:
 8017bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017bb8:	688e      	ldr	r6, [r1, #8]
 8017bba:	461f      	mov	r7, r3
 8017bbc:	42be      	cmp	r6, r7
 8017bbe:	680b      	ldr	r3, [r1, #0]
 8017bc0:	4682      	mov	sl, r0
 8017bc2:	460c      	mov	r4, r1
 8017bc4:	4690      	mov	r8, r2
 8017bc6:	d82d      	bhi.n	8017c24 <__ssputs_r+0x70>
 8017bc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017bcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017bd0:	d026      	beq.n	8017c20 <__ssputs_r+0x6c>
 8017bd2:	6965      	ldr	r5, [r4, #20]
 8017bd4:	6909      	ldr	r1, [r1, #16]
 8017bd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017bda:	eba3 0901 	sub.w	r9, r3, r1
 8017bde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017be2:	1c7b      	adds	r3, r7, #1
 8017be4:	444b      	add	r3, r9
 8017be6:	106d      	asrs	r5, r5, #1
 8017be8:	429d      	cmp	r5, r3
 8017bea:	bf38      	it	cc
 8017bec:	461d      	movcc	r5, r3
 8017bee:	0553      	lsls	r3, r2, #21
 8017bf0:	d527      	bpl.n	8017c42 <__ssputs_r+0x8e>
 8017bf2:	4629      	mov	r1, r5
 8017bf4:	f7ff ff52 	bl	8017a9c <_malloc_r>
 8017bf8:	4606      	mov	r6, r0
 8017bfa:	b360      	cbz	r0, 8017c56 <__ssputs_r+0xa2>
 8017bfc:	6921      	ldr	r1, [r4, #16]
 8017bfe:	464a      	mov	r2, r9
 8017c00:	f7ff fed2 	bl	80179a8 <memcpy>
 8017c04:	89a3      	ldrh	r3, [r4, #12]
 8017c06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017c0e:	81a3      	strh	r3, [r4, #12]
 8017c10:	6126      	str	r6, [r4, #16]
 8017c12:	6165      	str	r5, [r4, #20]
 8017c14:	444e      	add	r6, r9
 8017c16:	eba5 0509 	sub.w	r5, r5, r9
 8017c1a:	6026      	str	r6, [r4, #0]
 8017c1c:	60a5      	str	r5, [r4, #8]
 8017c1e:	463e      	mov	r6, r7
 8017c20:	42be      	cmp	r6, r7
 8017c22:	d900      	bls.n	8017c26 <__ssputs_r+0x72>
 8017c24:	463e      	mov	r6, r7
 8017c26:	6820      	ldr	r0, [r4, #0]
 8017c28:	4632      	mov	r2, r6
 8017c2a:	4641      	mov	r1, r8
 8017c2c:	f000 fe37 	bl	801889e <memmove>
 8017c30:	68a3      	ldr	r3, [r4, #8]
 8017c32:	1b9b      	subs	r3, r3, r6
 8017c34:	60a3      	str	r3, [r4, #8]
 8017c36:	6823      	ldr	r3, [r4, #0]
 8017c38:	4433      	add	r3, r6
 8017c3a:	6023      	str	r3, [r4, #0]
 8017c3c:	2000      	movs	r0, #0
 8017c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c42:	462a      	mov	r2, r5
 8017c44:	f000 fe56 	bl	80188f4 <_realloc_r>
 8017c48:	4606      	mov	r6, r0
 8017c4a:	2800      	cmp	r0, #0
 8017c4c:	d1e0      	bne.n	8017c10 <__ssputs_r+0x5c>
 8017c4e:	6921      	ldr	r1, [r4, #16]
 8017c50:	4650      	mov	r0, sl
 8017c52:	f7ff feb7 	bl	80179c4 <_free_r>
 8017c56:	230c      	movs	r3, #12
 8017c58:	f8ca 3000 	str.w	r3, [sl]
 8017c5c:	89a3      	ldrh	r3, [r4, #12]
 8017c5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017c62:	81a3      	strh	r3, [r4, #12]
 8017c64:	f04f 30ff 	mov.w	r0, #4294967295
 8017c68:	e7e9      	b.n	8017c3e <__ssputs_r+0x8a>
	...

08017c6c <_svfiprintf_r>:
 8017c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c70:	4698      	mov	r8, r3
 8017c72:	898b      	ldrh	r3, [r1, #12]
 8017c74:	061b      	lsls	r3, r3, #24
 8017c76:	b09d      	sub	sp, #116	@ 0x74
 8017c78:	4607      	mov	r7, r0
 8017c7a:	460d      	mov	r5, r1
 8017c7c:	4614      	mov	r4, r2
 8017c7e:	d510      	bpl.n	8017ca2 <_svfiprintf_r+0x36>
 8017c80:	690b      	ldr	r3, [r1, #16]
 8017c82:	b973      	cbnz	r3, 8017ca2 <_svfiprintf_r+0x36>
 8017c84:	2140      	movs	r1, #64	@ 0x40
 8017c86:	f7ff ff09 	bl	8017a9c <_malloc_r>
 8017c8a:	6028      	str	r0, [r5, #0]
 8017c8c:	6128      	str	r0, [r5, #16]
 8017c8e:	b930      	cbnz	r0, 8017c9e <_svfiprintf_r+0x32>
 8017c90:	230c      	movs	r3, #12
 8017c92:	603b      	str	r3, [r7, #0]
 8017c94:	f04f 30ff 	mov.w	r0, #4294967295
 8017c98:	b01d      	add	sp, #116	@ 0x74
 8017c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c9e:	2340      	movs	r3, #64	@ 0x40
 8017ca0:	616b      	str	r3, [r5, #20]
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	9309      	str	r3, [sp, #36]	@ 0x24
 8017ca6:	2320      	movs	r3, #32
 8017ca8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017cac:	f8cd 800c 	str.w	r8, [sp, #12]
 8017cb0:	2330      	movs	r3, #48	@ 0x30
 8017cb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017e50 <_svfiprintf_r+0x1e4>
 8017cb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017cba:	f04f 0901 	mov.w	r9, #1
 8017cbe:	4623      	mov	r3, r4
 8017cc0:	469a      	mov	sl, r3
 8017cc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017cc6:	b10a      	cbz	r2, 8017ccc <_svfiprintf_r+0x60>
 8017cc8:	2a25      	cmp	r2, #37	@ 0x25
 8017cca:	d1f9      	bne.n	8017cc0 <_svfiprintf_r+0x54>
 8017ccc:	ebba 0b04 	subs.w	fp, sl, r4
 8017cd0:	d00b      	beq.n	8017cea <_svfiprintf_r+0x7e>
 8017cd2:	465b      	mov	r3, fp
 8017cd4:	4622      	mov	r2, r4
 8017cd6:	4629      	mov	r1, r5
 8017cd8:	4638      	mov	r0, r7
 8017cda:	f7ff ff6b 	bl	8017bb4 <__ssputs_r>
 8017cde:	3001      	adds	r0, #1
 8017ce0:	f000 80a7 	beq.w	8017e32 <_svfiprintf_r+0x1c6>
 8017ce4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017ce6:	445a      	add	r2, fp
 8017ce8:	9209      	str	r2, [sp, #36]	@ 0x24
 8017cea:	f89a 3000 	ldrb.w	r3, [sl]
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	f000 809f 	beq.w	8017e32 <_svfiprintf_r+0x1c6>
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8017cfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017cfe:	f10a 0a01 	add.w	sl, sl, #1
 8017d02:	9304      	str	r3, [sp, #16]
 8017d04:	9307      	str	r3, [sp, #28]
 8017d06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017d0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8017d0c:	4654      	mov	r4, sl
 8017d0e:	2205      	movs	r2, #5
 8017d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d14:	484e      	ldr	r0, [pc, #312]	@ (8017e50 <_svfiprintf_r+0x1e4>)
 8017d16:	f7e8 fa73 	bl	8000200 <memchr>
 8017d1a:	9a04      	ldr	r2, [sp, #16]
 8017d1c:	b9d8      	cbnz	r0, 8017d56 <_svfiprintf_r+0xea>
 8017d1e:	06d0      	lsls	r0, r2, #27
 8017d20:	bf44      	itt	mi
 8017d22:	2320      	movmi	r3, #32
 8017d24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017d28:	0711      	lsls	r1, r2, #28
 8017d2a:	bf44      	itt	mi
 8017d2c:	232b      	movmi	r3, #43	@ 0x2b
 8017d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017d32:	f89a 3000 	ldrb.w	r3, [sl]
 8017d36:	2b2a      	cmp	r3, #42	@ 0x2a
 8017d38:	d015      	beq.n	8017d66 <_svfiprintf_r+0xfa>
 8017d3a:	9a07      	ldr	r2, [sp, #28]
 8017d3c:	4654      	mov	r4, sl
 8017d3e:	2000      	movs	r0, #0
 8017d40:	f04f 0c0a 	mov.w	ip, #10
 8017d44:	4621      	mov	r1, r4
 8017d46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017d4a:	3b30      	subs	r3, #48	@ 0x30
 8017d4c:	2b09      	cmp	r3, #9
 8017d4e:	d94b      	bls.n	8017de8 <_svfiprintf_r+0x17c>
 8017d50:	b1b0      	cbz	r0, 8017d80 <_svfiprintf_r+0x114>
 8017d52:	9207      	str	r2, [sp, #28]
 8017d54:	e014      	b.n	8017d80 <_svfiprintf_r+0x114>
 8017d56:	eba0 0308 	sub.w	r3, r0, r8
 8017d5a:	fa09 f303 	lsl.w	r3, r9, r3
 8017d5e:	4313      	orrs	r3, r2
 8017d60:	9304      	str	r3, [sp, #16]
 8017d62:	46a2      	mov	sl, r4
 8017d64:	e7d2      	b.n	8017d0c <_svfiprintf_r+0xa0>
 8017d66:	9b03      	ldr	r3, [sp, #12]
 8017d68:	1d19      	adds	r1, r3, #4
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	9103      	str	r1, [sp, #12]
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	bfbb      	ittet	lt
 8017d72:	425b      	neglt	r3, r3
 8017d74:	f042 0202 	orrlt.w	r2, r2, #2
 8017d78:	9307      	strge	r3, [sp, #28]
 8017d7a:	9307      	strlt	r3, [sp, #28]
 8017d7c:	bfb8      	it	lt
 8017d7e:	9204      	strlt	r2, [sp, #16]
 8017d80:	7823      	ldrb	r3, [r4, #0]
 8017d82:	2b2e      	cmp	r3, #46	@ 0x2e
 8017d84:	d10a      	bne.n	8017d9c <_svfiprintf_r+0x130>
 8017d86:	7863      	ldrb	r3, [r4, #1]
 8017d88:	2b2a      	cmp	r3, #42	@ 0x2a
 8017d8a:	d132      	bne.n	8017df2 <_svfiprintf_r+0x186>
 8017d8c:	9b03      	ldr	r3, [sp, #12]
 8017d8e:	1d1a      	adds	r2, r3, #4
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	9203      	str	r2, [sp, #12]
 8017d94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017d98:	3402      	adds	r4, #2
 8017d9a:	9305      	str	r3, [sp, #20]
 8017d9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017e60 <_svfiprintf_r+0x1f4>
 8017da0:	7821      	ldrb	r1, [r4, #0]
 8017da2:	2203      	movs	r2, #3
 8017da4:	4650      	mov	r0, sl
 8017da6:	f7e8 fa2b 	bl	8000200 <memchr>
 8017daa:	b138      	cbz	r0, 8017dbc <_svfiprintf_r+0x150>
 8017dac:	9b04      	ldr	r3, [sp, #16]
 8017dae:	eba0 000a 	sub.w	r0, r0, sl
 8017db2:	2240      	movs	r2, #64	@ 0x40
 8017db4:	4082      	lsls	r2, r0
 8017db6:	4313      	orrs	r3, r2
 8017db8:	3401      	adds	r4, #1
 8017dba:	9304      	str	r3, [sp, #16]
 8017dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017dc0:	4824      	ldr	r0, [pc, #144]	@ (8017e54 <_svfiprintf_r+0x1e8>)
 8017dc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017dc6:	2206      	movs	r2, #6
 8017dc8:	f7e8 fa1a 	bl	8000200 <memchr>
 8017dcc:	2800      	cmp	r0, #0
 8017dce:	d036      	beq.n	8017e3e <_svfiprintf_r+0x1d2>
 8017dd0:	4b21      	ldr	r3, [pc, #132]	@ (8017e58 <_svfiprintf_r+0x1ec>)
 8017dd2:	bb1b      	cbnz	r3, 8017e1c <_svfiprintf_r+0x1b0>
 8017dd4:	9b03      	ldr	r3, [sp, #12]
 8017dd6:	3307      	adds	r3, #7
 8017dd8:	f023 0307 	bic.w	r3, r3, #7
 8017ddc:	3308      	adds	r3, #8
 8017dde:	9303      	str	r3, [sp, #12]
 8017de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017de2:	4433      	add	r3, r6
 8017de4:	9309      	str	r3, [sp, #36]	@ 0x24
 8017de6:	e76a      	b.n	8017cbe <_svfiprintf_r+0x52>
 8017de8:	fb0c 3202 	mla	r2, ip, r2, r3
 8017dec:	460c      	mov	r4, r1
 8017dee:	2001      	movs	r0, #1
 8017df0:	e7a8      	b.n	8017d44 <_svfiprintf_r+0xd8>
 8017df2:	2300      	movs	r3, #0
 8017df4:	3401      	adds	r4, #1
 8017df6:	9305      	str	r3, [sp, #20]
 8017df8:	4619      	mov	r1, r3
 8017dfa:	f04f 0c0a 	mov.w	ip, #10
 8017dfe:	4620      	mov	r0, r4
 8017e00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017e04:	3a30      	subs	r2, #48	@ 0x30
 8017e06:	2a09      	cmp	r2, #9
 8017e08:	d903      	bls.n	8017e12 <_svfiprintf_r+0x1a6>
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d0c6      	beq.n	8017d9c <_svfiprintf_r+0x130>
 8017e0e:	9105      	str	r1, [sp, #20]
 8017e10:	e7c4      	b.n	8017d9c <_svfiprintf_r+0x130>
 8017e12:	fb0c 2101 	mla	r1, ip, r1, r2
 8017e16:	4604      	mov	r4, r0
 8017e18:	2301      	movs	r3, #1
 8017e1a:	e7f0      	b.n	8017dfe <_svfiprintf_r+0x192>
 8017e1c:	ab03      	add	r3, sp, #12
 8017e1e:	9300      	str	r3, [sp, #0]
 8017e20:	462a      	mov	r2, r5
 8017e22:	4b0e      	ldr	r3, [pc, #56]	@ (8017e5c <_svfiprintf_r+0x1f0>)
 8017e24:	a904      	add	r1, sp, #16
 8017e26:	4638      	mov	r0, r7
 8017e28:	f3af 8000 	nop.w
 8017e2c:	1c42      	adds	r2, r0, #1
 8017e2e:	4606      	mov	r6, r0
 8017e30:	d1d6      	bne.n	8017de0 <_svfiprintf_r+0x174>
 8017e32:	89ab      	ldrh	r3, [r5, #12]
 8017e34:	065b      	lsls	r3, r3, #25
 8017e36:	f53f af2d 	bmi.w	8017c94 <_svfiprintf_r+0x28>
 8017e3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017e3c:	e72c      	b.n	8017c98 <_svfiprintf_r+0x2c>
 8017e3e:	ab03      	add	r3, sp, #12
 8017e40:	9300      	str	r3, [sp, #0]
 8017e42:	462a      	mov	r2, r5
 8017e44:	4b05      	ldr	r3, [pc, #20]	@ (8017e5c <_svfiprintf_r+0x1f0>)
 8017e46:	a904      	add	r1, sp, #16
 8017e48:	4638      	mov	r0, r7
 8017e4a:	f000 fa49 	bl	80182e0 <_printf_i>
 8017e4e:	e7ed      	b.n	8017e2c <_svfiprintf_r+0x1c0>
 8017e50:	080194bf 	.word	0x080194bf
 8017e54:	080194c9 	.word	0x080194c9
 8017e58:	00000000 	.word	0x00000000
 8017e5c:	08017bb5 	.word	0x08017bb5
 8017e60:	080194c5 	.word	0x080194c5

08017e64 <_sungetc_r>:
 8017e64:	b538      	push	{r3, r4, r5, lr}
 8017e66:	1c4b      	adds	r3, r1, #1
 8017e68:	4614      	mov	r4, r2
 8017e6a:	d103      	bne.n	8017e74 <_sungetc_r+0x10>
 8017e6c:	f04f 35ff 	mov.w	r5, #4294967295
 8017e70:	4628      	mov	r0, r5
 8017e72:	bd38      	pop	{r3, r4, r5, pc}
 8017e74:	8993      	ldrh	r3, [r2, #12]
 8017e76:	f023 0320 	bic.w	r3, r3, #32
 8017e7a:	8193      	strh	r3, [r2, #12]
 8017e7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017e7e:	6852      	ldr	r2, [r2, #4]
 8017e80:	b2cd      	uxtb	r5, r1
 8017e82:	b18b      	cbz	r3, 8017ea8 <_sungetc_r+0x44>
 8017e84:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017e86:	4293      	cmp	r3, r2
 8017e88:	dd08      	ble.n	8017e9c <_sungetc_r+0x38>
 8017e8a:	6823      	ldr	r3, [r4, #0]
 8017e8c:	1e5a      	subs	r2, r3, #1
 8017e8e:	6022      	str	r2, [r4, #0]
 8017e90:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017e94:	6863      	ldr	r3, [r4, #4]
 8017e96:	3301      	adds	r3, #1
 8017e98:	6063      	str	r3, [r4, #4]
 8017e9a:	e7e9      	b.n	8017e70 <_sungetc_r+0xc>
 8017e9c:	4621      	mov	r1, r4
 8017e9e:	f000 fcc4 	bl	801882a <__submore>
 8017ea2:	2800      	cmp	r0, #0
 8017ea4:	d0f1      	beq.n	8017e8a <_sungetc_r+0x26>
 8017ea6:	e7e1      	b.n	8017e6c <_sungetc_r+0x8>
 8017ea8:	6921      	ldr	r1, [r4, #16]
 8017eaa:	6823      	ldr	r3, [r4, #0]
 8017eac:	b151      	cbz	r1, 8017ec4 <_sungetc_r+0x60>
 8017eae:	4299      	cmp	r1, r3
 8017eb0:	d208      	bcs.n	8017ec4 <_sungetc_r+0x60>
 8017eb2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017eb6:	42a9      	cmp	r1, r5
 8017eb8:	d104      	bne.n	8017ec4 <_sungetc_r+0x60>
 8017eba:	3b01      	subs	r3, #1
 8017ebc:	3201      	adds	r2, #1
 8017ebe:	6023      	str	r3, [r4, #0]
 8017ec0:	6062      	str	r2, [r4, #4]
 8017ec2:	e7d5      	b.n	8017e70 <_sungetc_r+0xc>
 8017ec4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8017ec8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017ecc:	6363      	str	r3, [r4, #52]	@ 0x34
 8017ece:	2303      	movs	r3, #3
 8017ed0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8017ed2:	4623      	mov	r3, r4
 8017ed4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017ed8:	6023      	str	r3, [r4, #0]
 8017eda:	2301      	movs	r3, #1
 8017edc:	e7dc      	b.n	8017e98 <_sungetc_r+0x34>

08017ede <__ssrefill_r>:
 8017ede:	b510      	push	{r4, lr}
 8017ee0:	460c      	mov	r4, r1
 8017ee2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8017ee4:	b169      	cbz	r1, 8017f02 <__ssrefill_r+0x24>
 8017ee6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017eea:	4299      	cmp	r1, r3
 8017eec:	d001      	beq.n	8017ef2 <__ssrefill_r+0x14>
 8017eee:	f7ff fd69 	bl	80179c4 <_free_r>
 8017ef2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017ef4:	6063      	str	r3, [r4, #4]
 8017ef6:	2000      	movs	r0, #0
 8017ef8:	6360      	str	r0, [r4, #52]	@ 0x34
 8017efa:	b113      	cbz	r3, 8017f02 <__ssrefill_r+0x24>
 8017efc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8017efe:	6023      	str	r3, [r4, #0]
 8017f00:	bd10      	pop	{r4, pc}
 8017f02:	6923      	ldr	r3, [r4, #16]
 8017f04:	6023      	str	r3, [r4, #0]
 8017f06:	2300      	movs	r3, #0
 8017f08:	6063      	str	r3, [r4, #4]
 8017f0a:	89a3      	ldrh	r3, [r4, #12]
 8017f0c:	f043 0320 	orr.w	r3, r3, #32
 8017f10:	81a3      	strh	r3, [r4, #12]
 8017f12:	f04f 30ff 	mov.w	r0, #4294967295
 8017f16:	e7f3      	b.n	8017f00 <__ssrefill_r+0x22>

08017f18 <__ssvfiscanf_r>:
 8017f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f1c:	460c      	mov	r4, r1
 8017f1e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8017f22:	2100      	movs	r1, #0
 8017f24:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8017f28:	49a6      	ldr	r1, [pc, #664]	@ (80181c4 <__ssvfiscanf_r+0x2ac>)
 8017f2a:	91a0      	str	r1, [sp, #640]	@ 0x280
 8017f2c:	f10d 0804 	add.w	r8, sp, #4
 8017f30:	49a5      	ldr	r1, [pc, #660]	@ (80181c8 <__ssvfiscanf_r+0x2b0>)
 8017f32:	4fa6      	ldr	r7, [pc, #664]	@ (80181cc <__ssvfiscanf_r+0x2b4>)
 8017f34:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8017f38:	4606      	mov	r6, r0
 8017f3a:	91a1      	str	r1, [sp, #644]	@ 0x284
 8017f3c:	9300      	str	r3, [sp, #0]
 8017f3e:	f892 9000 	ldrb.w	r9, [r2]
 8017f42:	f1b9 0f00 	cmp.w	r9, #0
 8017f46:	f000 8158 	beq.w	80181fa <__ssvfiscanf_r+0x2e2>
 8017f4a:	f817 3009 	ldrb.w	r3, [r7, r9]
 8017f4e:	f013 0308 	ands.w	r3, r3, #8
 8017f52:	f102 0501 	add.w	r5, r2, #1
 8017f56:	d019      	beq.n	8017f8c <__ssvfiscanf_r+0x74>
 8017f58:	6863      	ldr	r3, [r4, #4]
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	dd0f      	ble.n	8017f7e <__ssvfiscanf_r+0x66>
 8017f5e:	6823      	ldr	r3, [r4, #0]
 8017f60:	781a      	ldrb	r2, [r3, #0]
 8017f62:	5cba      	ldrb	r2, [r7, r2]
 8017f64:	0712      	lsls	r2, r2, #28
 8017f66:	d401      	bmi.n	8017f6c <__ssvfiscanf_r+0x54>
 8017f68:	462a      	mov	r2, r5
 8017f6a:	e7e8      	b.n	8017f3e <__ssvfiscanf_r+0x26>
 8017f6c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8017f6e:	3201      	adds	r2, #1
 8017f70:	9245      	str	r2, [sp, #276]	@ 0x114
 8017f72:	6862      	ldr	r2, [r4, #4]
 8017f74:	3301      	adds	r3, #1
 8017f76:	3a01      	subs	r2, #1
 8017f78:	6062      	str	r2, [r4, #4]
 8017f7a:	6023      	str	r3, [r4, #0]
 8017f7c:	e7ec      	b.n	8017f58 <__ssvfiscanf_r+0x40>
 8017f7e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017f80:	4621      	mov	r1, r4
 8017f82:	4630      	mov	r0, r6
 8017f84:	4798      	blx	r3
 8017f86:	2800      	cmp	r0, #0
 8017f88:	d0e9      	beq.n	8017f5e <__ssvfiscanf_r+0x46>
 8017f8a:	e7ed      	b.n	8017f68 <__ssvfiscanf_r+0x50>
 8017f8c:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8017f90:	f040 8085 	bne.w	801809e <__ssvfiscanf_r+0x186>
 8017f94:	9341      	str	r3, [sp, #260]	@ 0x104
 8017f96:	9343      	str	r3, [sp, #268]	@ 0x10c
 8017f98:	7853      	ldrb	r3, [r2, #1]
 8017f9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8017f9c:	bf02      	ittt	eq
 8017f9e:	2310      	moveq	r3, #16
 8017fa0:	1c95      	addeq	r5, r2, #2
 8017fa2:	9341      	streq	r3, [sp, #260]	@ 0x104
 8017fa4:	220a      	movs	r2, #10
 8017fa6:	46aa      	mov	sl, r5
 8017fa8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8017fac:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8017fb0:	2b09      	cmp	r3, #9
 8017fb2:	d91e      	bls.n	8017ff2 <__ssvfiscanf_r+0xda>
 8017fb4:	f8df b218 	ldr.w	fp, [pc, #536]	@ 80181d0 <__ssvfiscanf_r+0x2b8>
 8017fb8:	2203      	movs	r2, #3
 8017fba:	4658      	mov	r0, fp
 8017fbc:	f7e8 f920 	bl	8000200 <memchr>
 8017fc0:	b138      	cbz	r0, 8017fd2 <__ssvfiscanf_r+0xba>
 8017fc2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8017fc4:	eba0 000b 	sub.w	r0, r0, fp
 8017fc8:	2301      	movs	r3, #1
 8017fca:	4083      	lsls	r3, r0
 8017fcc:	4313      	orrs	r3, r2
 8017fce:	9341      	str	r3, [sp, #260]	@ 0x104
 8017fd0:	4655      	mov	r5, sl
 8017fd2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017fd6:	2b78      	cmp	r3, #120	@ 0x78
 8017fd8:	d806      	bhi.n	8017fe8 <__ssvfiscanf_r+0xd0>
 8017fda:	2b57      	cmp	r3, #87	@ 0x57
 8017fdc:	d810      	bhi.n	8018000 <__ssvfiscanf_r+0xe8>
 8017fde:	2b25      	cmp	r3, #37	@ 0x25
 8017fe0:	d05d      	beq.n	801809e <__ssvfiscanf_r+0x186>
 8017fe2:	d857      	bhi.n	8018094 <__ssvfiscanf_r+0x17c>
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d075      	beq.n	80180d4 <__ssvfiscanf_r+0x1bc>
 8017fe8:	2303      	movs	r3, #3
 8017fea:	9347      	str	r3, [sp, #284]	@ 0x11c
 8017fec:	230a      	movs	r3, #10
 8017fee:	9342      	str	r3, [sp, #264]	@ 0x108
 8017ff0:	e088      	b.n	8018104 <__ssvfiscanf_r+0x1ec>
 8017ff2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8017ff4:	fb02 1103 	mla	r1, r2, r3, r1
 8017ff8:	3930      	subs	r1, #48	@ 0x30
 8017ffa:	9143      	str	r1, [sp, #268]	@ 0x10c
 8017ffc:	4655      	mov	r5, sl
 8017ffe:	e7d2      	b.n	8017fa6 <__ssvfiscanf_r+0x8e>
 8018000:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8018004:	2a20      	cmp	r2, #32
 8018006:	d8ef      	bhi.n	8017fe8 <__ssvfiscanf_r+0xd0>
 8018008:	a101      	add	r1, pc, #4	@ (adr r1, 8018010 <__ssvfiscanf_r+0xf8>)
 801800a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801800e:	bf00      	nop
 8018010:	080180e3 	.word	0x080180e3
 8018014:	08017fe9 	.word	0x08017fe9
 8018018:	08017fe9 	.word	0x08017fe9
 801801c:	0801813d 	.word	0x0801813d
 8018020:	08017fe9 	.word	0x08017fe9
 8018024:	08017fe9 	.word	0x08017fe9
 8018028:	08017fe9 	.word	0x08017fe9
 801802c:	08017fe9 	.word	0x08017fe9
 8018030:	08017fe9 	.word	0x08017fe9
 8018034:	08017fe9 	.word	0x08017fe9
 8018038:	08017fe9 	.word	0x08017fe9
 801803c:	08018153 	.word	0x08018153
 8018040:	08018139 	.word	0x08018139
 8018044:	0801809b 	.word	0x0801809b
 8018048:	0801809b 	.word	0x0801809b
 801804c:	0801809b 	.word	0x0801809b
 8018050:	08017fe9 	.word	0x08017fe9
 8018054:	080180f5 	.word	0x080180f5
 8018058:	08017fe9 	.word	0x08017fe9
 801805c:	08017fe9 	.word	0x08017fe9
 8018060:	08017fe9 	.word	0x08017fe9
 8018064:	08017fe9 	.word	0x08017fe9
 8018068:	08018163 	.word	0x08018163
 801806c:	080180fd 	.word	0x080180fd
 8018070:	080180db 	.word	0x080180db
 8018074:	08017fe9 	.word	0x08017fe9
 8018078:	08017fe9 	.word	0x08017fe9
 801807c:	0801815f 	.word	0x0801815f
 8018080:	08017fe9 	.word	0x08017fe9
 8018084:	08018139 	.word	0x08018139
 8018088:	08017fe9 	.word	0x08017fe9
 801808c:	08017fe9 	.word	0x08017fe9
 8018090:	080180e3 	.word	0x080180e3
 8018094:	3b45      	subs	r3, #69	@ 0x45
 8018096:	2b02      	cmp	r3, #2
 8018098:	d8a6      	bhi.n	8017fe8 <__ssvfiscanf_r+0xd0>
 801809a:	2305      	movs	r3, #5
 801809c:	e031      	b.n	8018102 <__ssvfiscanf_r+0x1ea>
 801809e:	6863      	ldr	r3, [r4, #4]
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	dd0d      	ble.n	80180c0 <__ssvfiscanf_r+0x1a8>
 80180a4:	6823      	ldr	r3, [r4, #0]
 80180a6:	781a      	ldrb	r2, [r3, #0]
 80180a8:	454a      	cmp	r2, r9
 80180aa:	f040 80a6 	bne.w	80181fa <__ssvfiscanf_r+0x2e2>
 80180ae:	3301      	adds	r3, #1
 80180b0:	6862      	ldr	r2, [r4, #4]
 80180b2:	6023      	str	r3, [r4, #0]
 80180b4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80180b6:	3a01      	subs	r2, #1
 80180b8:	3301      	adds	r3, #1
 80180ba:	6062      	str	r2, [r4, #4]
 80180bc:	9345      	str	r3, [sp, #276]	@ 0x114
 80180be:	e753      	b.n	8017f68 <__ssvfiscanf_r+0x50>
 80180c0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80180c2:	4621      	mov	r1, r4
 80180c4:	4630      	mov	r0, r6
 80180c6:	4798      	blx	r3
 80180c8:	2800      	cmp	r0, #0
 80180ca:	d0eb      	beq.n	80180a4 <__ssvfiscanf_r+0x18c>
 80180cc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80180ce:	2800      	cmp	r0, #0
 80180d0:	f040 808b 	bne.w	80181ea <__ssvfiscanf_r+0x2d2>
 80180d4:	f04f 30ff 	mov.w	r0, #4294967295
 80180d8:	e08b      	b.n	80181f2 <__ssvfiscanf_r+0x2da>
 80180da:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80180dc:	f042 0220 	orr.w	r2, r2, #32
 80180e0:	9241      	str	r2, [sp, #260]	@ 0x104
 80180e2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80180e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80180e8:	9241      	str	r2, [sp, #260]	@ 0x104
 80180ea:	2210      	movs	r2, #16
 80180ec:	2b6e      	cmp	r3, #110	@ 0x6e
 80180ee:	9242      	str	r2, [sp, #264]	@ 0x108
 80180f0:	d902      	bls.n	80180f8 <__ssvfiscanf_r+0x1e0>
 80180f2:	e005      	b.n	8018100 <__ssvfiscanf_r+0x1e8>
 80180f4:	2300      	movs	r3, #0
 80180f6:	9342      	str	r3, [sp, #264]	@ 0x108
 80180f8:	2303      	movs	r3, #3
 80180fa:	e002      	b.n	8018102 <__ssvfiscanf_r+0x1ea>
 80180fc:	2308      	movs	r3, #8
 80180fe:	9342      	str	r3, [sp, #264]	@ 0x108
 8018100:	2304      	movs	r3, #4
 8018102:	9347      	str	r3, [sp, #284]	@ 0x11c
 8018104:	6863      	ldr	r3, [r4, #4]
 8018106:	2b00      	cmp	r3, #0
 8018108:	dd39      	ble.n	801817e <__ssvfiscanf_r+0x266>
 801810a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801810c:	0659      	lsls	r1, r3, #25
 801810e:	d404      	bmi.n	801811a <__ssvfiscanf_r+0x202>
 8018110:	6823      	ldr	r3, [r4, #0]
 8018112:	781a      	ldrb	r2, [r3, #0]
 8018114:	5cba      	ldrb	r2, [r7, r2]
 8018116:	0712      	lsls	r2, r2, #28
 8018118:	d438      	bmi.n	801818c <__ssvfiscanf_r+0x274>
 801811a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801811c:	2b02      	cmp	r3, #2
 801811e:	dc47      	bgt.n	80181b0 <__ssvfiscanf_r+0x298>
 8018120:	466b      	mov	r3, sp
 8018122:	4622      	mov	r2, r4
 8018124:	a941      	add	r1, sp, #260	@ 0x104
 8018126:	4630      	mov	r0, r6
 8018128:	f000 f9f8 	bl	801851c <_scanf_chars>
 801812c:	2801      	cmp	r0, #1
 801812e:	d064      	beq.n	80181fa <__ssvfiscanf_r+0x2e2>
 8018130:	2802      	cmp	r0, #2
 8018132:	f47f af19 	bne.w	8017f68 <__ssvfiscanf_r+0x50>
 8018136:	e7c9      	b.n	80180cc <__ssvfiscanf_r+0x1b4>
 8018138:	220a      	movs	r2, #10
 801813a:	e7d7      	b.n	80180ec <__ssvfiscanf_r+0x1d4>
 801813c:	4629      	mov	r1, r5
 801813e:	4640      	mov	r0, r8
 8018140:	f000 fb3a 	bl	80187b8 <__sccl>
 8018144:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8018146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801814a:	9341      	str	r3, [sp, #260]	@ 0x104
 801814c:	4605      	mov	r5, r0
 801814e:	2301      	movs	r3, #1
 8018150:	e7d7      	b.n	8018102 <__ssvfiscanf_r+0x1ea>
 8018152:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8018154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018158:	9341      	str	r3, [sp, #260]	@ 0x104
 801815a:	2300      	movs	r3, #0
 801815c:	e7d1      	b.n	8018102 <__ssvfiscanf_r+0x1ea>
 801815e:	2302      	movs	r3, #2
 8018160:	e7cf      	b.n	8018102 <__ssvfiscanf_r+0x1ea>
 8018162:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8018164:	06c3      	lsls	r3, r0, #27
 8018166:	f53f aeff 	bmi.w	8017f68 <__ssvfiscanf_r+0x50>
 801816a:	9b00      	ldr	r3, [sp, #0]
 801816c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801816e:	1d19      	adds	r1, r3, #4
 8018170:	9100      	str	r1, [sp, #0]
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	07c0      	lsls	r0, r0, #31
 8018176:	bf4c      	ite	mi
 8018178:	801a      	strhmi	r2, [r3, #0]
 801817a:	601a      	strpl	r2, [r3, #0]
 801817c:	e6f4      	b.n	8017f68 <__ssvfiscanf_r+0x50>
 801817e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8018180:	4621      	mov	r1, r4
 8018182:	4630      	mov	r0, r6
 8018184:	4798      	blx	r3
 8018186:	2800      	cmp	r0, #0
 8018188:	d0bf      	beq.n	801810a <__ssvfiscanf_r+0x1f2>
 801818a:	e79f      	b.n	80180cc <__ssvfiscanf_r+0x1b4>
 801818c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801818e:	3201      	adds	r2, #1
 8018190:	9245      	str	r2, [sp, #276]	@ 0x114
 8018192:	6862      	ldr	r2, [r4, #4]
 8018194:	3a01      	subs	r2, #1
 8018196:	2a00      	cmp	r2, #0
 8018198:	6062      	str	r2, [r4, #4]
 801819a:	dd02      	ble.n	80181a2 <__ssvfiscanf_r+0x28a>
 801819c:	3301      	adds	r3, #1
 801819e:	6023      	str	r3, [r4, #0]
 80181a0:	e7b6      	b.n	8018110 <__ssvfiscanf_r+0x1f8>
 80181a2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80181a4:	4621      	mov	r1, r4
 80181a6:	4630      	mov	r0, r6
 80181a8:	4798      	blx	r3
 80181aa:	2800      	cmp	r0, #0
 80181ac:	d0b0      	beq.n	8018110 <__ssvfiscanf_r+0x1f8>
 80181ae:	e78d      	b.n	80180cc <__ssvfiscanf_r+0x1b4>
 80181b0:	2b04      	cmp	r3, #4
 80181b2:	dc0f      	bgt.n	80181d4 <__ssvfiscanf_r+0x2bc>
 80181b4:	466b      	mov	r3, sp
 80181b6:	4622      	mov	r2, r4
 80181b8:	a941      	add	r1, sp, #260	@ 0x104
 80181ba:	4630      	mov	r0, r6
 80181bc:	f000 fa08 	bl	80185d0 <_scanf_i>
 80181c0:	e7b4      	b.n	801812c <__ssvfiscanf_r+0x214>
 80181c2:	bf00      	nop
 80181c4:	08017e65 	.word	0x08017e65
 80181c8:	08017edf 	.word	0x08017edf
 80181cc:	080193bf 	.word	0x080193bf
 80181d0:	080194c5 	.word	0x080194c5
 80181d4:	4b0a      	ldr	r3, [pc, #40]	@ (8018200 <__ssvfiscanf_r+0x2e8>)
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	f43f aec6 	beq.w	8017f68 <__ssvfiscanf_r+0x50>
 80181dc:	466b      	mov	r3, sp
 80181de:	4622      	mov	r2, r4
 80181e0:	a941      	add	r1, sp, #260	@ 0x104
 80181e2:	4630      	mov	r0, r6
 80181e4:	f3af 8000 	nop.w
 80181e8:	e7a0      	b.n	801812c <__ssvfiscanf_r+0x214>
 80181ea:	89a3      	ldrh	r3, [r4, #12]
 80181ec:	065b      	lsls	r3, r3, #25
 80181ee:	f53f af71 	bmi.w	80180d4 <__ssvfiscanf_r+0x1bc>
 80181f2:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80181f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181fa:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80181fc:	e7f9      	b.n	80181f2 <__ssvfiscanf_r+0x2da>
 80181fe:	bf00      	nop
 8018200:	00000000 	.word	0x00000000

08018204 <_printf_common>:
 8018204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018208:	4616      	mov	r6, r2
 801820a:	4698      	mov	r8, r3
 801820c:	688a      	ldr	r2, [r1, #8]
 801820e:	690b      	ldr	r3, [r1, #16]
 8018210:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018214:	4293      	cmp	r3, r2
 8018216:	bfb8      	it	lt
 8018218:	4613      	movlt	r3, r2
 801821a:	6033      	str	r3, [r6, #0]
 801821c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018220:	4607      	mov	r7, r0
 8018222:	460c      	mov	r4, r1
 8018224:	b10a      	cbz	r2, 801822a <_printf_common+0x26>
 8018226:	3301      	adds	r3, #1
 8018228:	6033      	str	r3, [r6, #0]
 801822a:	6823      	ldr	r3, [r4, #0]
 801822c:	0699      	lsls	r1, r3, #26
 801822e:	bf42      	ittt	mi
 8018230:	6833      	ldrmi	r3, [r6, #0]
 8018232:	3302      	addmi	r3, #2
 8018234:	6033      	strmi	r3, [r6, #0]
 8018236:	6825      	ldr	r5, [r4, #0]
 8018238:	f015 0506 	ands.w	r5, r5, #6
 801823c:	d106      	bne.n	801824c <_printf_common+0x48>
 801823e:	f104 0a19 	add.w	sl, r4, #25
 8018242:	68e3      	ldr	r3, [r4, #12]
 8018244:	6832      	ldr	r2, [r6, #0]
 8018246:	1a9b      	subs	r3, r3, r2
 8018248:	42ab      	cmp	r3, r5
 801824a:	dc26      	bgt.n	801829a <_printf_common+0x96>
 801824c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018250:	6822      	ldr	r2, [r4, #0]
 8018252:	3b00      	subs	r3, #0
 8018254:	bf18      	it	ne
 8018256:	2301      	movne	r3, #1
 8018258:	0692      	lsls	r2, r2, #26
 801825a:	d42b      	bmi.n	80182b4 <_printf_common+0xb0>
 801825c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018260:	4641      	mov	r1, r8
 8018262:	4638      	mov	r0, r7
 8018264:	47c8      	blx	r9
 8018266:	3001      	adds	r0, #1
 8018268:	d01e      	beq.n	80182a8 <_printf_common+0xa4>
 801826a:	6823      	ldr	r3, [r4, #0]
 801826c:	6922      	ldr	r2, [r4, #16]
 801826e:	f003 0306 	and.w	r3, r3, #6
 8018272:	2b04      	cmp	r3, #4
 8018274:	bf02      	ittt	eq
 8018276:	68e5      	ldreq	r5, [r4, #12]
 8018278:	6833      	ldreq	r3, [r6, #0]
 801827a:	1aed      	subeq	r5, r5, r3
 801827c:	68a3      	ldr	r3, [r4, #8]
 801827e:	bf0c      	ite	eq
 8018280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018284:	2500      	movne	r5, #0
 8018286:	4293      	cmp	r3, r2
 8018288:	bfc4      	itt	gt
 801828a:	1a9b      	subgt	r3, r3, r2
 801828c:	18ed      	addgt	r5, r5, r3
 801828e:	2600      	movs	r6, #0
 8018290:	341a      	adds	r4, #26
 8018292:	42b5      	cmp	r5, r6
 8018294:	d11a      	bne.n	80182cc <_printf_common+0xc8>
 8018296:	2000      	movs	r0, #0
 8018298:	e008      	b.n	80182ac <_printf_common+0xa8>
 801829a:	2301      	movs	r3, #1
 801829c:	4652      	mov	r2, sl
 801829e:	4641      	mov	r1, r8
 80182a0:	4638      	mov	r0, r7
 80182a2:	47c8      	blx	r9
 80182a4:	3001      	adds	r0, #1
 80182a6:	d103      	bne.n	80182b0 <_printf_common+0xac>
 80182a8:	f04f 30ff 	mov.w	r0, #4294967295
 80182ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182b0:	3501      	adds	r5, #1
 80182b2:	e7c6      	b.n	8018242 <_printf_common+0x3e>
 80182b4:	18e1      	adds	r1, r4, r3
 80182b6:	1c5a      	adds	r2, r3, #1
 80182b8:	2030      	movs	r0, #48	@ 0x30
 80182ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80182be:	4422      	add	r2, r4
 80182c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80182c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80182c8:	3302      	adds	r3, #2
 80182ca:	e7c7      	b.n	801825c <_printf_common+0x58>
 80182cc:	2301      	movs	r3, #1
 80182ce:	4622      	mov	r2, r4
 80182d0:	4641      	mov	r1, r8
 80182d2:	4638      	mov	r0, r7
 80182d4:	47c8      	blx	r9
 80182d6:	3001      	adds	r0, #1
 80182d8:	d0e6      	beq.n	80182a8 <_printf_common+0xa4>
 80182da:	3601      	adds	r6, #1
 80182dc:	e7d9      	b.n	8018292 <_printf_common+0x8e>
	...

080182e0 <_printf_i>:
 80182e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80182e4:	7e0f      	ldrb	r7, [r1, #24]
 80182e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80182e8:	2f78      	cmp	r7, #120	@ 0x78
 80182ea:	4691      	mov	r9, r2
 80182ec:	4680      	mov	r8, r0
 80182ee:	460c      	mov	r4, r1
 80182f0:	469a      	mov	sl, r3
 80182f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80182f6:	d807      	bhi.n	8018308 <_printf_i+0x28>
 80182f8:	2f62      	cmp	r7, #98	@ 0x62
 80182fa:	d80a      	bhi.n	8018312 <_printf_i+0x32>
 80182fc:	2f00      	cmp	r7, #0
 80182fe:	f000 80d1 	beq.w	80184a4 <_printf_i+0x1c4>
 8018302:	2f58      	cmp	r7, #88	@ 0x58
 8018304:	f000 80b8 	beq.w	8018478 <_printf_i+0x198>
 8018308:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801830c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018310:	e03a      	b.n	8018388 <_printf_i+0xa8>
 8018312:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018316:	2b15      	cmp	r3, #21
 8018318:	d8f6      	bhi.n	8018308 <_printf_i+0x28>
 801831a:	a101      	add	r1, pc, #4	@ (adr r1, 8018320 <_printf_i+0x40>)
 801831c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018320:	08018379 	.word	0x08018379
 8018324:	0801838d 	.word	0x0801838d
 8018328:	08018309 	.word	0x08018309
 801832c:	08018309 	.word	0x08018309
 8018330:	08018309 	.word	0x08018309
 8018334:	08018309 	.word	0x08018309
 8018338:	0801838d 	.word	0x0801838d
 801833c:	08018309 	.word	0x08018309
 8018340:	08018309 	.word	0x08018309
 8018344:	08018309 	.word	0x08018309
 8018348:	08018309 	.word	0x08018309
 801834c:	0801848b 	.word	0x0801848b
 8018350:	080183b7 	.word	0x080183b7
 8018354:	08018445 	.word	0x08018445
 8018358:	08018309 	.word	0x08018309
 801835c:	08018309 	.word	0x08018309
 8018360:	080184ad 	.word	0x080184ad
 8018364:	08018309 	.word	0x08018309
 8018368:	080183b7 	.word	0x080183b7
 801836c:	08018309 	.word	0x08018309
 8018370:	08018309 	.word	0x08018309
 8018374:	0801844d 	.word	0x0801844d
 8018378:	6833      	ldr	r3, [r6, #0]
 801837a:	1d1a      	adds	r2, r3, #4
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	6032      	str	r2, [r6, #0]
 8018380:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018384:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018388:	2301      	movs	r3, #1
 801838a:	e09c      	b.n	80184c6 <_printf_i+0x1e6>
 801838c:	6833      	ldr	r3, [r6, #0]
 801838e:	6820      	ldr	r0, [r4, #0]
 8018390:	1d19      	adds	r1, r3, #4
 8018392:	6031      	str	r1, [r6, #0]
 8018394:	0606      	lsls	r6, r0, #24
 8018396:	d501      	bpl.n	801839c <_printf_i+0xbc>
 8018398:	681d      	ldr	r5, [r3, #0]
 801839a:	e003      	b.n	80183a4 <_printf_i+0xc4>
 801839c:	0645      	lsls	r5, r0, #25
 801839e:	d5fb      	bpl.n	8018398 <_printf_i+0xb8>
 80183a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80183a4:	2d00      	cmp	r5, #0
 80183a6:	da03      	bge.n	80183b0 <_printf_i+0xd0>
 80183a8:	232d      	movs	r3, #45	@ 0x2d
 80183aa:	426d      	negs	r5, r5
 80183ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80183b0:	4858      	ldr	r0, [pc, #352]	@ (8018514 <_printf_i+0x234>)
 80183b2:	230a      	movs	r3, #10
 80183b4:	e011      	b.n	80183da <_printf_i+0xfa>
 80183b6:	6821      	ldr	r1, [r4, #0]
 80183b8:	6833      	ldr	r3, [r6, #0]
 80183ba:	0608      	lsls	r0, r1, #24
 80183bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80183c0:	d402      	bmi.n	80183c8 <_printf_i+0xe8>
 80183c2:	0649      	lsls	r1, r1, #25
 80183c4:	bf48      	it	mi
 80183c6:	b2ad      	uxthmi	r5, r5
 80183c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80183ca:	4852      	ldr	r0, [pc, #328]	@ (8018514 <_printf_i+0x234>)
 80183cc:	6033      	str	r3, [r6, #0]
 80183ce:	bf14      	ite	ne
 80183d0:	230a      	movne	r3, #10
 80183d2:	2308      	moveq	r3, #8
 80183d4:	2100      	movs	r1, #0
 80183d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80183da:	6866      	ldr	r6, [r4, #4]
 80183dc:	60a6      	str	r6, [r4, #8]
 80183de:	2e00      	cmp	r6, #0
 80183e0:	db05      	blt.n	80183ee <_printf_i+0x10e>
 80183e2:	6821      	ldr	r1, [r4, #0]
 80183e4:	432e      	orrs	r6, r5
 80183e6:	f021 0104 	bic.w	r1, r1, #4
 80183ea:	6021      	str	r1, [r4, #0]
 80183ec:	d04b      	beq.n	8018486 <_printf_i+0x1a6>
 80183ee:	4616      	mov	r6, r2
 80183f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80183f4:	fb03 5711 	mls	r7, r3, r1, r5
 80183f8:	5dc7      	ldrb	r7, [r0, r7]
 80183fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80183fe:	462f      	mov	r7, r5
 8018400:	42bb      	cmp	r3, r7
 8018402:	460d      	mov	r5, r1
 8018404:	d9f4      	bls.n	80183f0 <_printf_i+0x110>
 8018406:	2b08      	cmp	r3, #8
 8018408:	d10b      	bne.n	8018422 <_printf_i+0x142>
 801840a:	6823      	ldr	r3, [r4, #0]
 801840c:	07df      	lsls	r7, r3, #31
 801840e:	d508      	bpl.n	8018422 <_printf_i+0x142>
 8018410:	6923      	ldr	r3, [r4, #16]
 8018412:	6861      	ldr	r1, [r4, #4]
 8018414:	4299      	cmp	r1, r3
 8018416:	bfde      	ittt	le
 8018418:	2330      	movle	r3, #48	@ 0x30
 801841a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801841e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018422:	1b92      	subs	r2, r2, r6
 8018424:	6122      	str	r2, [r4, #16]
 8018426:	f8cd a000 	str.w	sl, [sp]
 801842a:	464b      	mov	r3, r9
 801842c:	aa03      	add	r2, sp, #12
 801842e:	4621      	mov	r1, r4
 8018430:	4640      	mov	r0, r8
 8018432:	f7ff fee7 	bl	8018204 <_printf_common>
 8018436:	3001      	adds	r0, #1
 8018438:	d14a      	bne.n	80184d0 <_printf_i+0x1f0>
 801843a:	f04f 30ff 	mov.w	r0, #4294967295
 801843e:	b004      	add	sp, #16
 8018440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018444:	6823      	ldr	r3, [r4, #0]
 8018446:	f043 0320 	orr.w	r3, r3, #32
 801844a:	6023      	str	r3, [r4, #0]
 801844c:	4832      	ldr	r0, [pc, #200]	@ (8018518 <_printf_i+0x238>)
 801844e:	2778      	movs	r7, #120	@ 0x78
 8018450:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018454:	6823      	ldr	r3, [r4, #0]
 8018456:	6831      	ldr	r1, [r6, #0]
 8018458:	061f      	lsls	r7, r3, #24
 801845a:	f851 5b04 	ldr.w	r5, [r1], #4
 801845e:	d402      	bmi.n	8018466 <_printf_i+0x186>
 8018460:	065f      	lsls	r7, r3, #25
 8018462:	bf48      	it	mi
 8018464:	b2ad      	uxthmi	r5, r5
 8018466:	6031      	str	r1, [r6, #0]
 8018468:	07d9      	lsls	r1, r3, #31
 801846a:	bf44      	itt	mi
 801846c:	f043 0320 	orrmi.w	r3, r3, #32
 8018470:	6023      	strmi	r3, [r4, #0]
 8018472:	b11d      	cbz	r5, 801847c <_printf_i+0x19c>
 8018474:	2310      	movs	r3, #16
 8018476:	e7ad      	b.n	80183d4 <_printf_i+0xf4>
 8018478:	4826      	ldr	r0, [pc, #152]	@ (8018514 <_printf_i+0x234>)
 801847a:	e7e9      	b.n	8018450 <_printf_i+0x170>
 801847c:	6823      	ldr	r3, [r4, #0]
 801847e:	f023 0320 	bic.w	r3, r3, #32
 8018482:	6023      	str	r3, [r4, #0]
 8018484:	e7f6      	b.n	8018474 <_printf_i+0x194>
 8018486:	4616      	mov	r6, r2
 8018488:	e7bd      	b.n	8018406 <_printf_i+0x126>
 801848a:	6833      	ldr	r3, [r6, #0]
 801848c:	6825      	ldr	r5, [r4, #0]
 801848e:	6961      	ldr	r1, [r4, #20]
 8018490:	1d18      	adds	r0, r3, #4
 8018492:	6030      	str	r0, [r6, #0]
 8018494:	062e      	lsls	r6, r5, #24
 8018496:	681b      	ldr	r3, [r3, #0]
 8018498:	d501      	bpl.n	801849e <_printf_i+0x1be>
 801849a:	6019      	str	r1, [r3, #0]
 801849c:	e002      	b.n	80184a4 <_printf_i+0x1c4>
 801849e:	0668      	lsls	r0, r5, #25
 80184a0:	d5fb      	bpl.n	801849a <_printf_i+0x1ba>
 80184a2:	8019      	strh	r1, [r3, #0]
 80184a4:	2300      	movs	r3, #0
 80184a6:	6123      	str	r3, [r4, #16]
 80184a8:	4616      	mov	r6, r2
 80184aa:	e7bc      	b.n	8018426 <_printf_i+0x146>
 80184ac:	6833      	ldr	r3, [r6, #0]
 80184ae:	1d1a      	adds	r2, r3, #4
 80184b0:	6032      	str	r2, [r6, #0]
 80184b2:	681e      	ldr	r6, [r3, #0]
 80184b4:	6862      	ldr	r2, [r4, #4]
 80184b6:	2100      	movs	r1, #0
 80184b8:	4630      	mov	r0, r6
 80184ba:	f7e7 fea1 	bl	8000200 <memchr>
 80184be:	b108      	cbz	r0, 80184c4 <_printf_i+0x1e4>
 80184c0:	1b80      	subs	r0, r0, r6
 80184c2:	6060      	str	r0, [r4, #4]
 80184c4:	6863      	ldr	r3, [r4, #4]
 80184c6:	6123      	str	r3, [r4, #16]
 80184c8:	2300      	movs	r3, #0
 80184ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80184ce:	e7aa      	b.n	8018426 <_printf_i+0x146>
 80184d0:	6923      	ldr	r3, [r4, #16]
 80184d2:	4632      	mov	r2, r6
 80184d4:	4649      	mov	r1, r9
 80184d6:	4640      	mov	r0, r8
 80184d8:	47d0      	blx	sl
 80184da:	3001      	adds	r0, #1
 80184dc:	d0ad      	beq.n	801843a <_printf_i+0x15a>
 80184de:	6823      	ldr	r3, [r4, #0]
 80184e0:	079b      	lsls	r3, r3, #30
 80184e2:	d413      	bmi.n	801850c <_printf_i+0x22c>
 80184e4:	68e0      	ldr	r0, [r4, #12]
 80184e6:	9b03      	ldr	r3, [sp, #12]
 80184e8:	4298      	cmp	r0, r3
 80184ea:	bfb8      	it	lt
 80184ec:	4618      	movlt	r0, r3
 80184ee:	e7a6      	b.n	801843e <_printf_i+0x15e>
 80184f0:	2301      	movs	r3, #1
 80184f2:	4632      	mov	r2, r6
 80184f4:	4649      	mov	r1, r9
 80184f6:	4640      	mov	r0, r8
 80184f8:	47d0      	blx	sl
 80184fa:	3001      	adds	r0, #1
 80184fc:	d09d      	beq.n	801843a <_printf_i+0x15a>
 80184fe:	3501      	adds	r5, #1
 8018500:	68e3      	ldr	r3, [r4, #12]
 8018502:	9903      	ldr	r1, [sp, #12]
 8018504:	1a5b      	subs	r3, r3, r1
 8018506:	42ab      	cmp	r3, r5
 8018508:	dcf2      	bgt.n	80184f0 <_printf_i+0x210>
 801850a:	e7eb      	b.n	80184e4 <_printf_i+0x204>
 801850c:	2500      	movs	r5, #0
 801850e:	f104 0619 	add.w	r6, r4, #25
 8018512:	e7f5      	b.n	8018500 <_printf_i+0x220>
 8018514:	080194d0 	.word	0x080194d0
 8018518:	080194e1 	.word	0x080194e1

0801851c <_scanf_chars>:
 801851c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018520:	4615      	mov	r5, r2
 8018522:	688a      	ldr	r2, [r1, #8]
 8018524:	4680      	mov	r8, r0
 8018526:	460c      	mov	r4, r1
 8018528:	b932      	cbnz	r2, 8018538 <_scanf_chars+0x1c>
 801852a:	698a      	ldr	r2, [r1, #24]
 801852c:	2a00      	cmp	r2, #0
 801852e:	bf14      	ite	ne
 8018530:	f04f 32ff 	movne.w	r2, #4294967295
 8018534:	2201      	moveq	r2, #1
 8018536:	608a      	str	r2, [r1, #8]
 8018538:	6822      	ldr	r2, [r4, #0]
 801853a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80185cc <_scanf_chars+0xb0>
 801853e:	06d1      	lsls	r1, r2, #27
 8018540:	bf5f      	itttt	pl
 8018542:	681a      	ldrpl	r2, [r3, #0]
 8018544:	1d11      	addpl	r1, r2, #4
 8018546:	6019      	strpl	r1, [r3, #0]
 8018548:	6816      	ldrpl	r6, [r2, #0]
 801854a:	2700      	movs	r7, #0
 801854c:	69a0      	ldr	r0, [r4, #24]
 801854e:	b188      	cbz	r0, 8018574 <_scanf_chars+0x58>
 8018550:	2801      	cmp	r0, #1
 8018552:	d107      	bne.n	8018564 <_scanf_chars+0x48>
 8018554:	682b      	ldr	r3, [r5, #0]
 8018556:	781a      	ldrb	r2, [r3, #0]
 8018558:	6963      	ldr	r3, [r4, #20]
 801855a:	5c9b      	ldrb	r3, [r3, r2]
 801855c:	b953      	cbnz	r3, 8018574 <_scanf_chars+0x58>
 801855e:	2f00      	cmp	r7, #0
 8018560:	d031      	beq.n	80185c6 <_scanf_chars+0xaa>
 8018562:	e022      	b.n	80185aa <_scanf_chars+0x8e>
 8018564:	2802      	cmp	r0, #2
 8018566:	d120      	bne.n	80185aa <_scanf_chars+0x8e>
 8018568:	682b      	ldr	r3, [r5, #0]
 801856a:	781b      	ldrb	r3, [r3, #0]
 801856c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8018570:	071b      	lsls	r3, r3, #28
 8018572:	d41a      	bmi.n	80185aa <_scanf_chars+0x8e>
 8018574:	6823      	ldr	r3, [r4, #0]
 8018576:	06da      	lsls	r2, r3, #27
 8018578:	bf5e      	ittt	pl
 801857a:	682b      	ldrpl	r3, [r5, #0]
 801857c:	781b      	ldrbpl	r3, [r3, #0]
 801857e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8018582:	682a      	ldr	r2, [r5, #0]
 8018584:	686b      	ldr	r3, [r5, #4]
 8018586:	3201      	adds	r2, #1
 8018588:	602a      	str	r2, [r5, #0]
 801858a:	68a2      	ldr	r2, [r4, #8]
 801858c:	3b01      	subs	r3, #1
 801858e:	3a01      	subs	r2, #1
 8018590:	606b      	str	r3, [r5, #4]
 8018592:	3701      	adds	r7, #1
 8018594:	60a2      	str	r2, [r4, #8]
 8018596:	b142      	cbz	r2, 80185aa <_scanf_chars+0x8e>
 8018598:	2b00      	cmp	r3, #0
 801859a:	dcd7      	bgt.n	801854c <_scanf_chars+0x30>
 801859c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80185a0:	4629      	mov	r1, r5
 80185a2:	4640      	mov	r0, r8
 80185a4:	4798      	blx	r3
 80185a6:	2800      	cmp	r0, #0
 80185a8:	d0d0      	beq.n	801854c <_scanf_chars+0x30>
 80185aa:	6823      	ldr	r3, [r4, #0]
 80185ac:	f013 0310 	ands.w	r3, r3, #16
 80185b0:	d105      	bne.n	80185be <_scanf_chars+0xa2>
 80185b2:	68e2      	ldr	r2, [r4, #12]
 80185b4:	3201      	adds	r2, #1
 80185b6:	60e2      	str	r2, [r4, #12]
 80185b8:	69a2      	ldr	r2, [r4, #24]
 80185ba:	b102      	cbz	r2, 80185be <_scanf_chars+0xa2>
 80185bc:	7033      	strb	r3, [r6, #0]
 80185be:	6923      	ldr	r3, [r4, #16]
 80185c0:	443b      	add	r3, r7
 80185c2:	6123      	str	r3, [r4, #16]
 80185c4:	2000      	movs	r0, #0
 80185c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80185ca:	bf00      	nop
 80185cc:	080193bf 	.word	0x080193bf

080185d0 <_scanf_i>:
 80185d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185d4:	4698      	mov	r8, r3
 80185d6:	4b74      	ldr	r3, [pc, #464]	@ (80187a8 <_scanf_i+0x1d8>)
 80185d8:	460c      	mov	r4, r1
 80185da:	4682      	mov	sl, r0
 80185dc:	4616      	mov	r6, r2
 80185de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80185e2:	b087      	sub	sp, #28
 80185e4:	ab03      	add	r3, sp, #12
 80185e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80185ea:	4b70      	ldr	r3, [pc, #448]	@ (80187ac <_scanf_i+0x1dc>)
 80185ec:	69a1      	ldr	r1, [r4, #24]
 80185ee:	4a70      	ldr	r2, [pc, #448]	@ (80187b0 <_scanf_i+0x1e0>)
 80185f0:	2903      	cmp	r1, #3
 80185f2:	bf08      	it	eq
 80185f4:	461a      	moveq	r2, r3
 80185f6:	68a3      	ldr	r3, [r4, #8]
 80185f8:	9201      	str	r2, [sp, #4]
 80185fa:	1e5a      	subs	r2, r3, #1
 80185fc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8018600:	bf88      	it	hi
 8018602:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8018606:	4627      	mov	r7, r4
 8018608:	bf82      	ittt	hi
 801860a:	eb03 0905 	addhi.w	r9, r3, r5
 801860e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8018612:	60a3      	strhi	r3, [r4, #8]
 8018614:	f857 3b1c 	ldr.w	r3, [r7], #28
 8018618:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801861c:	bf98      	it	ls
 801861e:	f04f 0900 	movls.w	r9, #0
 8018622:	6023      	str	r3, [r4, #0]
 8018624:	463d      	mov	r5, r7
 8018626:	f04f 0b00 	mov.w	fp, #0
 801862a:	6831      	ldr	r1, [r6, #0]
 801862c:	ab03      	add	r3, sp, #12
 801862e:	7809      	ldrb	r1, [r1, #0]
 8018630:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8018634:	2202      	movs	r2, #2
 8018636:	f7e7 fde3 	bl	8000200 <memchr>
 801863a:	b328      	cbz	r0, 8018688 <_scanf_i+0xb8>
 801863c:	f1bb 0f01 	cmp.w	fp, #1
 8018640:	d159      	bne.n	80186f6 <_scanf_i+0x126>
 8018642:	6862      	ldr	r2, [r4, #4]
 8018644:	b92a      	cbnz	r2, 8018652 <_scanf_i+0x82>
 8018646:	6822      	ldr	r2, [r4, #0]
 8018648:	2108      	movs	r1, #8
 801864a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801864e:	6061      	str	r1, [r4, #4]
 8018650:	6022      	str	r2, [r4, #0]
 8018652:	6822      	ldr	r2, [r4, #0]
 8018654:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8018658:	6022      	str	r2, [r4, #0]
 801865a:	68a2      	ldr	r2, [r4, #8]
 801865c:	1e51      	subs	r1, r2, #1
 801865e:	60a1      	str	r1, [r4, #8]
 8018660:	b192      	cbz	r2, 8018688 <_scanf_i+0xb8>
 8018662:	6832      	ldr	r2, [r6, #0]
 8018664:	1c51      	adds	r1, r2, #1
 8018666:	6031      	str	r1, [r6, #0]
 8018668:	7812      	ldrb	r2, [r2, #0]
 801866a:	f805 2b01 	strb.w	r2, [r5], #1
 801866e:	6872      	ldr	r2, [r6, #4]
 8018670:	3a01      	subs	r2, #1
 8018672:	2a00      	cmp	r2, #0
 8018674:	6072      	str	r2, [r6, #4]
 8018676:	dc07      	bgt.n	8018688 <_scanf_i+0xb8>
 8018678:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801867c:	4631      	mov	r1, r6
 801867e:	4650      	mov	r0, sl
 8018680:	4790      	blx	r2
 8018682:	2800      	cmp	r0, #0
 8018684:	f040 8085 	bne.w	8018792 <_scanf_i+0x1c2>
 8018688:	f10b 0b01 	add.w	fp, fp, #1
 801868c:	f1bb 0f03 	cmp.w	fp, #3
 8018690:	d1cb      	bne.n	801862a <_scanf_i+0x5a>
 8018692:	6863      	ldr	r3, [r4, #4]
 8018694:	b90b      	cbnz	r3, 801869a <_scanf_i+0xca>
 8018696:	230a      	movs	r3, #10
 8018698:	6063      	str	r3, [r4, #4]
 801869a:	6863      	ldr	r3, [r4, #4]
 801869c:	4945      	ldr	r1, [pc, #276]	@ (80187b4 <_scanf_i+0x1e4>)
 801869e:	6960      	ldr	r0, [r4, #20]
 80186a0:	1ac9      	subs	r1, r1, r3
 80186a2:	f000 f889 	bl	80187b8 <__sccl>
 80186a6:	f04f 0b00 	mov.w	fp, #0
 80186aa:	68a3      	ldr	r3, [r4, #8]
 80186ac:	6822      	ldr	r2, [r4, #0]
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d03d      	beq.n	801872e <_scanf_i+0x15e>
 80186b2:	6831      	ldr	r1, [r6, #0]
 80186b4:	6960      	ldr	r0, [r4, #20]
 80186b6:	f891 c000 	ldrb.w	ip, [r1]
 80186ba:	f810 000c 	ldrb.w	r0, [r0, ip]
 80186be:	2800      	cmp	r0, #0
 80186c0:	d035      	beq.n	801872e <_scanf_i+0x15e>
 80186c2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80186c6:	d124      	bne.n	8018712 <_scanf_i+0x142>
 80186c8:	0510      	lsls	r0, r2, #20
 80186ca:	d522      	bpl.n	8018712 <_scanf_i+0x142>
 80186cc:	f10b 0b01 	add.w	fp, fp, #1
 80186d0:	f1b9 0f00 	cmp.w	r9, #0
 80186d4:	d003      	beq.n	80186de <_scanf_i+0x10e>
 80186d6:	3301      	adds	r3, #1
 80186d8:	f109 39ff 	add.w	r9, r9, #4294967295
 80186dc:	60a3      	str	r3, [r4, #8]
 80186de:	6873      	ldr	r3, [r6, #4]
 80186e0:	3b01      	subs	r3, #1
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	6073      	str	r3, [r6, #4]
 80186e6:	dd1b      	ble.n	8018720 <_scanf_i+0x150>
 80186e8:	6833      	ldr	r3, [r6, #0]
 80186ea:	3301      	adds	r3, #1
 80186ec:	6033      	str	r3, [r6, #0]
 80186ee:	68a3      	ldr	r3, [r4, #8]
 80186f0:	3b01      	subs	r3, #1
 80186f2:	60a3      	str	r3, [r4, #8]
 80186f4:	e7d9      	b.n	80186aa <_scanf_i+0xda>
 80186f6:	f1bb 0f02 	cmp.w	fp, #2
 80186fa:	d1ae      	bne.n	801865a <_scanf_i+0x8a>
 80186fc:	6822      	ldr	r2, [r4, #0]
 80186fe:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8018702:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8018706:	d1c4      	bne.n	8018692 <_scanf_i+0xc2>
 8018708:	2110      	movs	r1, #16
 801870a:	6061      	str	r1, [r4, #4]
 801870c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8018710:	e7a2      	b.n	8018658 <_scanf_i+0x88>
 8018712:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8018716:	6022      	str	r2, [r4, #0]
 8018718:	780b      	ldrb	r3, [r1, #0]
 801871a:	f805 3b01 	strb.w	r3, [r5], #1
 801871e:	e7de      	b.n	80186de <_scanf_i+0x10e>
 8018720:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8018724:	4631      	mov	r1, r6
 8018726:	4650      	mov	r0, sl
 8018728:	4798      	blx	r3
 801872a:	2800      	cmp	r0, #0
 801872c:	d0df      	beq.n	80186ee <_scanf_i+0x11e>
 801872e:	6823      	ldr	r3, [r4, #0]
 8018730:	05d9      	lsls	r1, r3, #23
 8018732:	d50d      	bpl.n	8018750 <_scanf_i+0x180>
 8018734:	42bd      	cmp	r5, r7
 8018736:	d909      	bls.n	801874c <_scanf_i+0x17c>
 8018738:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801873c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8018740:	4632      	mov	r2, r6
 8018742:	4650      	mov	r0, sl
 8018744:	4798      	blx	r3
 8018746:	f105 39ff 	add.w	r9, r5, #4294967295
 801874a:	464d      	mov	r5, r9
 801874c:	42bd      	cmp	r5, r7
 801874e:	d028      	beq.n	80187a2 <_scanf_i+0x1d2>
 8018750:	6822      	ldr	r2, [r4, #0]
 8018752:	f012 0210 	ands.w	r2, r2, #16
 8018756:	d113      	bne.n	8018780 <_scanf_i+0x1b0>
 8018758:	702a      	strb	r2, [r5, #0]
 801875a:	6863      	ldr	r3, [r4, #4]
 801875c:	9e01      	ldr	r6, [sp, #4]
 801875e:	4639      	mov	r1, r7
 8018760:	4650      	mov	r0, sl
 8018762:	47b0      	blx	r6
 8018764:	f8d8 3000 	ldr.w	r3, [r8]
 8018768:	6821      	ldr	r1, [r4, #0]
 801876a:	1d1a      	adds	r2, r3, #4
 801876c:	f8c8 2000 	str.w	r2, [r8]
 8018770:	f011 0f20 	tst.w	r1, #32
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	d00f      	beq.n	8018798 <_scanf_i+0x1c8>
 8018778:	6018      	str	r0, [r3, #0]
 801877a:	68e3      	ldr	r3, [r4, #12]
 801877c:	3301      	adds	r3, #1
 801877e:	60e3      	str	r3, [r4, #12]
 8018780:	6923      	ldr	r3, [r4, #16]
 8018782:	1bed      	subs	r5, r5, r7
 8018784:	445d      	add	r5, fp
 8018786:	442b      	add	r3, r5
 8018788:	6123      	str	r3, [r4, #16]
 801878a:	2000      	movs	r0, #0
 801878c:	b007      	add	sp, #28
 801878e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018792:	f04f 0b00 	mov.w	fp, #0
 8018796:	e7ca      	b.n	801872e <_scanf_i+0x15e>
 8018798:	07ca      	lsls	r2, r1, #31
 801879a:	bf4c      	ite	mi
 801879c:	8018      	strhmi	r0, [r3, #0]
 801879e:	6018      	strpl	r0, [r3, #0]
 80187a0:	e7eb      	b.n	801877a <_scanf_i+0x1aa>
 80187a2:	2001      	movs	r0, #1
 80187a4:	e7f2      	b.n	801878c <_scanf_i+0x1bc>
 80187a6:	bf00      	nop
 80187a8:	08019014 	.word	0x08019014
 80187ac:	080177c9 	.word	0x080177c9
 80187b0:	08018a2d 	.word	0x08018a2d
 80187b4:	08019502 	.word	0x08019502

080187b8 <__sccl>:
 80187b8:	b570      	push	{r4, r5, r6, lr}
 80187ba:	780b      	ldrb	r3, [r1, #0]
 80187bc:	4604      	mov	r4, r0
 80187be:	2b5e      	cmp	r3, #94	@ 0x5e
 80187c0:	bf0b      	itete	eq
 80187c2:	784b      	ldrbeq	r3, [r1, #1]
 80187c4:	1c4a      	addne	r2, r1, #1
 80187c6:	1c8a      	addeq	r2, r1, #2
 80187c8:	2100      	movne	r1, #0
 80187ca:	bf08      	it	eq
 80187cc:	2101      	moveq	r1, #1
 80187ce:	3801      	subs	r0, #1
 80187d0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80187d4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80187d8:	42a8      	cmp	r0, r5
 80187da:	d1fb      	bne.n	80187d4 <__sccl+0x1c>
 80187dc:	b90b      	cbnz	r3, 80187e2 <__sccl+0x2a>
 80187de:	1e50      	subs	r0, r2, #1
 80187e0:	bd70      	pop	{r4, r5, r6, pc}
 80187e2:	f081 0101 	eor.w	r1, r1, #1
 80187e6:	54e1      	strb	r1, [r4, r3]
 80187e8:	4610      	mov	r0, r2
 80187ea:	4602      	mov	r2, r0
 80187ec:	f812 5b01 	ldrb.w	r5, [r2], #1
 80187f0:	2d2d      	cmp	r5, #45	@ 0x2d
 80187f2:	d005      	beq.n	8018800 <__sccl+0x48>
 80187f4:	2d5d      	cmp	r5, #93	@ 0x5d
 80187f6:	d016      	beq.n	8018826 <__sccl+0x6e>
 80187f8:	2d00      	cmp	r5, #0
 80187fa:	d0f1      	beq.n	80187e0 <__sccl+0x28>
 80187fc:	462b      	mov	r3, r5
 80187fe:	e7f2      	b.n	80187e6 <__sccl+0x2e>
 8018800:	7846      	ldrb	r6, [r0, #1]
 8018802:	2e5d      	cmp	r6, #93	@ 0x5d
 8018804:	d0fa      	beq.n	80187fc <__sccl+0x44>
 8018806:	42b3      	cmp	r3, r6
 8018808:	dcf8      	bgt.n	80187fc <__sccl+0x44>
 801880a:	3002      	adds	r0, #2
 801880c:	461a      	mov	r2, r3
 801880e:	3201      	adds	r2, #1
 8018810:	4296      	cmp	r6, r2
 8018812:	54a1      	strb	r1, [r4, r2]
 8018814:	dcfb      	bgt.n	801880e <__sccl+0x56>
 8018816:	1af2      	subs	r2, r6, r3
 8018818:	3a01      	subs	r2, #1
 801881a:	1c5d      	adds	r5, r3, #1
 801881c:	42b3      	cmp	r3, r6
 801881e:	bfa8      	it	ge
 8018820:	2200      	movge	r2, #0
 8018822:	18ab      	adds	r3, r5, r2
 8018824:	e7e1      	b.n	80187ea <__sccl+0x32>
 8018826:	4610      	mov	r0, r2
 8018828:	e7da      	b.n	80187e0 <__sccl+0x28>

0801882a <__submore>:
 801882a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801882e:	460c      	mov	r4, r1
 8018830:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8018832:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018836:	4299      	cmp	r1, r3
 8018838:	d11d      	bne.n	8018876 <__submore+0x4c>
 801883a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801883e:	f7ff f92d 	bl	8017a9c <_malloc_r>
 8018842:	b918      	cbnz	r0, 801884c <__submore+0x22>
 8018844:	f04f 30ff 	mov.w	r0, #4294967295
 8018848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801884c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018850:	63a3      	str	r3, [r4, #56]	@ 0x38
 8018852:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8018856:	6360      	str	r0, [r4, #52]	@ 0x34
 8018858:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801885c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8018860:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8018864:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8018868:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801886c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8018870:	6020      	str	r0, [r4, #0]
 8018872:	2000      	movs	r0, #0
 8018874:	e7e8      	b.n	8018848 <__submore+0x1e>
 8018876:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8018878:	0077      	lsls	r7, r6, #1
 801887a:	463a      	mov	r2, r7
 801887c:	f000 f83a 	bl	80188f4 <_realloc_r>
 8018880:	4605      	mov	r5, r0
 8018882:	2800      	cmp	r0, #0
 8018884:	d0de      	beq.n	8018844 <__submore+0x1a>
 8018886:	eb00 0806 	add.w	r8, r0, r6
 801888a:	4601      	mov	r1, r0
 801888c:	4632      	mov	r2, r6
 801888e:	4640      	mov	r0, r8
 8018890:	f7ff f88a 	bl	80179a8 <memcpy>
 8018894:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8018898:	f8c4 8000 	str.w	r8, [r4]
 801889c:	e7e9      	b.n	8018872 <__submore+0x48>

0801889e <memmove>:
 801889e:	4288      	cmp	r0, r1
 80188a0:	b510      	push	{r4, lr}
 80188a2:	eb01 0402 	add.w	r4, r1, r2
 80188a6:	d902      	bls.n	80188ae <memmove+0x10>
 80188a8:	4284      	cmp	r4, r0
 80188aa:	4623      	mov	r3, r4
 80188ac:	d807      	bhi.n	80188be <memmove+0x20>
 80188ae:	1e43      	subs	r3, r0, #1
 80188b0:	42a1      	cmp	r1, r4
 80188b2:	d008      	beq.n	80188c6 <memmove+0x28>
 80188b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80188b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80188bc:	e7f8      	b.n	80188b0 <memmove+0x12>
 80188be:	4402      	add	r2, r0
 80188c0:	4601      	mov	r1, r0
 80188c2:	428a      	cmp	r2, r1
 80188c4:	d100      	bne.n	80188c8 <memmove+0x2a>
 80188c6:	bd10      	pop	{r4, pc}
 80188c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80188cc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80188d0:	e7f7      	b.n	80188c2 <memmove+0x24>
	...

080188d4 <_sbrk_r>:
 80188d4:	b538      	push	{r3, r4, r5, lr}
 80188d6:	4d06      	ldr	r5, [pc, #24]	@ (80188f0 <_sbrk_r+0x1c>)
 80188d8:	2300      	movs	r3, #0
 80188da:	4604      	mov	r4, r0
 80188dc:	4608      	mov	r0, r1
 80188de:	602b      	str	r3, [r5, #0]
 80188e0:	f7f0 f942 	bl	8008b68 <_sbrk>
 80188e4:	1c43      	adds	r3, r0, #1
 80188e6:	d102      	bne.n	80188ee <_sbrk_r+0x1a>
 80188e8:	682b      	ldr	r3, [r5, #0]
 80188ea:	b103      	cbz	r3, 80188ee <_sbrk_r+0x1a>
 80188ec:	6023      	str	r3, [r4, #0]
 80188ee:	bd38      	pop	{r3, r4, r5, pc}
 80188f0:	20005db8 	.word	0x20005db8

080188f4 <_realloc_r>:
 80188f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188f8:	4607      	mov	r7, r0
 80188fa:	4614      	mov	r4, r2
 80188fc:	460d      	mov	r5, r1
 80188fe:	b921      	cbnz	r1, 801890a <_realloc_r+0x16>
 8018900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018904:	4611      	mov	r1, r2
 8018906:	f7ff b8c9 	b.w	8017a9c <_malloc_r>
 801890a:	b92a      	cbnz	r2, 8018918 <_realloc_r+0x24>
 801890c:	f7ff f85a 	bl	80179c4 <_free_r>
 8018910:	4625      	mov	r5, r4
 8018912:	4628      	mov	r0, r5
 8018914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018918:	f000 f88a 	bl	8018a30 <_malloc_usable_size_r>
 801891c:	4284      	cmp	r4, r0
 801891e:	4606      	mov	r6, r0
 8018920:	d802      	bhi.n	8018928 <_realloc_r+0x34>
 8018922:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018926:	d8f4      	bhi.n	8018912 <_realloc_r+0x1e>
 8018928:	4621      	mov	r1, r4
 801892a:	4638      	mov	r0, r7
 801892c:	f7ff f8b6 	bl	8017a9c <_malloc_r>
 8018930:	4680      	mov	r8, r0
 8018932:	b908      	cbnz	r0, 8018938 <_realloc_r+0x44>
 8018934:	4645      	mov	r5, r8
 8018936:	e7ec      	b.n	8018912 <_realloc_r+0x1e>
 8018938:	42b4      	cmp	r4, r6
 801893a:	4622      	mov	r2, r4
 801893c:	4629      	mov	r1, r5
 801893e:	bf28      	it	cs
 8018940:	4632      	movcs	r2, r6
 8018942:	f7ff f831 	bl	80179a8 <memcpy>
 8018946:	4629      	mov	r1, r5
 8018948:	4638      	mov	r0, r7
 801894a:	f7ff f83b 	bl	80179c4 <_free_r>
 801894e:	e7f1      	b.n	8018934 <_realloc_r+0x40>

08018950 <_strtoul_l.isra.0>:
 8018950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018954:	4e34      	ldr	r6, [pc, #208]	@ (8018a28 <_strtoul_l.isra.0+0xd8>)
 8018956:	4686      	mov	lr, r0
 8018958:	460d      	mov	r5, r1
 801895a:	4628      	mov	r0, r5
 801895c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018960:	5d37      	ldrb	r7, [r6, r4]
 8018962:	f017 0708 	ands.w	r7, r7, #8
 8018966:	d1f8      	bne.n	801895a <_strtoul_l.isra.0+0xa>
 8018968:	2c2d      	cmp	r4, #45	@ 0x2d
 801896a:	d110      	bne.n	801898e <_strtoul_l.isra.0+0x3e>
 801896c:	782c      	ldrb	r4, [r5, #0]
 801896e:	2701      	movs	r7, #1
 8018970:	1c85      	adds	r5, r0, #2
 8018972:	f033 0010 	bics.w	r0, r3, #16
 8018976:	d115      	bne.n	80189a4 <_strtoul_l.isra.0+0x54>
 8018978:	2c30      	cmp	r4, #48	@ 0x30
 801897a:	d10d      	bne.n	8018998 <_strtoul_l.isra.0+0x48>
 801897c:	7828      	ldrb	r0, [r5, #0]
 801897e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8018982:	2858      	cmp	r0, #88	@ 0x58
 8018984:	d108      	bne.n	8018998 <_strtoul_l.isra.0+0x48>
 8018986:	786c      	ldrb	r4, [r5, #1]
 8018988:	3502      	adds	r5, #2
 801898a:	2310      	movs	r3, #16
 801898c:	e00a      	b.n	80189a4 <_strtoul_l.isra.0+0x54>
 801898e:	2c2b      	cmp	r4, #43	@ 0x2b
 8018990:	bf04      	itt	eq
 8018992:	782c      	ldrbeq	r4, [r5, #0]
 8018994:	1c85      	addeq	r5, r0, #2
 8018996:	e7ec      	b.n	8018972 <_strtoul_l.isra.0+0x22>
 8018998:	2b00      	cmp	r3, #0
 801899a:	d1f6      	bne.n	801898a <_strtoul_l.isra.0+0x3a>
 801899c:	2c30      	cmp	r4, #48	@ 0x30
 801899e:	bf14      	ite	ne
 80189a0:	230a      	movne	r3, #10
 80189a2:	2308      	moveq	r3, #8
 80189a4:	f04f 38ff 	mov.w	r8, #4294967295
 80189a8:	2600      	movs	r6, #0
 80189aa:	fbb8 f8f3 	udiv	r8, r8, r3
 80189ae:	fb03 f908 	mul.w	r9, r3, r8
 80189b2:	ea6f 0909 	mvn.w	r9, r9
 80189b6:	4630      	mov	r0, r6
 80189b8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80189bc:	f1bc 0f09 	cmp.w	ip, #9
 80189c0:	d810      	bhi.n	80189e4 <_strtoul_l.isra.0+0x94>
 80189c2:	4664      	mov	r4, ip
 80189c4:	42a3      	cmp	r3, r4
 80189c6:	dd1e      	ble.n	8018a06 <_strtoul_l.isra.0+0xb6>
 80189c8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80189cc:	d007      	beq.n	80189de <_strtoul_l.isra.0+0x8e>
 80189ce:	4580      	cmp	r8, r0
 80189d0:	d316      	bcc.n	8018a00 <_strtoul_l.isra.0+0xb0>
 80189d2:	d101      	bne.n	80189d8 <_strtoul_l.isra.0+0x88>
 80189d4:	45a1      	cmp	r9, r4
 80189d6:	db13      	blt.n	8018a00 <_strtoul_l.isra.0+0xb0>
 80189d8:	fb00 4003 	mla	r0, r0, r3, r4
 80189dc:	2601      	movs	r6, #1
 80189de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80189e2:	e7e9      	b.n	80189b8 <_strtoul_l.isra.0+0x68>
 80189e4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80189e8:	f1bc 0f19 	cmp.w	ip, #25
 80189ec:	d801      	bhi.n	80189f2 <_strtoul_l.isra.0+0xa2>
 80189ee:	3c37      	subs	r4, #55	@ 0x37
 80189f0:	e7e8      	b.n	80189c4 <_strtoul_l.isra.0+0x74>
 80189f2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80189f6:	f1bc 0f19 	cmp.w	ip, #25
 80189fa:	d804      	bhi.n	8018a06 <_strtoul_l.isra.0+0xb6>
 80189fc:	3c57      	subs	r4, #87	@ 0x57
 80189fe:	e7e1      	b.n	80189c4 <_strtoul_l.isra.0+0x74>
 8018a00:	f04f 36ff 	mov.w	r6, #4294967295
 8018a04:	e7eb      	b.n	80189de <_strtoul_l.isra.0+0x8e>
 8018a06:	1c73      	adds	r3, r6, #1
 8018a08:	d106      	bne.n	8018a18 <_strtoul_l.isra.0+0xc8>
 8018a0a:	2322      	movs	r3, #34	@ 0x22
 8018a0c:	f8ce 3000 	str.w	r3, [lr]
 8018a10:	4630      	mov	r0, r6
 8018a12:	b932      	cbnz	r2, 8018a22 <_strtoul_l.isra.0+0xd2>
 8018a14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018a18:	b107      	cbz	r7, 8018a1c <_strtoul_l.isra.0+0xcc>
 8018a1a:	4240      	negs	r0, r0
 8018a1c:	2a00      	cmp	r2, #0
 8018a1e:	d0f9      	beq.n	8018a14 <_strtoul_l.isra.0+0xc4>
 8018a20:	b106      	cbz	r6, 8018a24 <_strtoul_l.isra.0+0xd4>
 8018a22:	1e69      	subs	r1, r5, #1
 8018a24:	6011      	str	r1, [r2, #0]
 8018a26:	e7f5      	b.n	8018a14 <_strtoul_l.isra.0+0xc4>
 8018a28:	080193bf 	.word	0x080193bf

08018a2c <_strtoul_r>:
 8018a2c:	f7ff bf90 	b.w	8018950 <_strtoul_l.isra.0>

08018a30 <_malloc_usable_size_r>:
 8018a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018a34:	1f18      	subs	r0, r3, #4
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	bfbc      	itt	lt
 8018a3a:	580b      	ldrlt	r3, [r1, r0]
 8018a3c:	18c0      	addlt	r0, r0, r3
 8018a3e:	4770      	bx	lr

08018a40 <_init>:
 8018a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a42:	bf00      	nop
 8018a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018a46:	bc08      	pop	{r3}
 8018a48:	469e      	mov	lr, r3
 8018a4a:	4770      	bx	lr

08018a4c <_fini>:
 8018a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a4e:	bf00      	nop
 8018a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018a52:	bc08      	pop	{r3}
 8018a54:	469e      	mov	lr, r3
 8018a56:	4770      	bx	lr
