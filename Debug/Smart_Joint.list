
Smart_Joint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000171d8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  08017368  08017368  00018368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017aa8  08017aa8  000192ec  2**0
                  CONTENTS
  4 .ARM          00000008  08017aa8  08017aa8  00018aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017ab0  08017ab0  000192ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017ab0  08017ab0  00018ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017ab4  08017ab4  00018ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ec  20000000  08017ab8  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000586c  200002f0  08017da4  000192f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005b5c  08017da4  00019b5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000192ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039e55  00000000  00000000  0001931c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000068cb  00000000  00000000  00053171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e68  00000000  00000000  00059a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000247f  00000000  00000000  0005c8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003157c  00000000  00000000  0005ed27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038a36  00000000  00000000  000902a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124a17  00000000  00000000  000c8cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ed6f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d114  00000000  00000000  001ed734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001fa848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f0 	.word	0x200002f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017350 	.word	0x08017350

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002f4 	.word	0x200002f4
 80001cc:	08017350 	.word	0x08017350

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b988 	b.w	8000da4 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	468e      	mov	lr, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	4688      	mov	r8, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d962      	bls.n	8000b88 <__udivmoddi4+0xdc>
 8000ac2:	fab2 f682 	clz	r6, r2
 8000ac6:	b14e      	cbz	r6, 8000adc <__udivmoddi4+0x30>
 8000ac8:	f1c6 0320 	rsb	r3, r6, #32
 8000acc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ad0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad4:	40b7      	lsls	r7, r6
 8000ad6:	ea43 0808 	orr.w	r8, r3, r8
 8000ada:	40b4      	lsls	r4, r6
 8000adc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae0:	fa1f fc87 	uxth.w	ip, r7
 8000ae4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	fb0e 8811 	mls	r8, lr, r1, r8
 8000aee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af2:	fb01 f20c 	mul.w	r2, r1, ip
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b00:	f080 80ea 	bcs.w	8000cd8 <__udivmoddi4+0x22c>
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f240 80e7 	bls.w	8000cd8 <__udivmoddi4+0x22c>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	1a9a      	subs	r2, r3, r2
 8000b10:	b2a3      	uxth	r3, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b22:	459c      	cmp	ip, r3
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0x8e>
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2c:	f080 80d6 	bcs.w	8000cdc <__udivmoddi4+0x230>
 8000b30:	459c      	cmp	ip, r3
 8000b32:	f240 80d3 	bls.w	8000cdc <__udivmoddi4+0x230>
 8000b36:	443b      	add	r3, r7
 8000b38:	3802      	subs	r0, #2
 8000b3a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b3e:	eba3 030c 	sub.w	r3, r3, ip
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11d      	cbz	r5, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40f3      	lsrs	r3, r6
 8000b48:	2200      	movs	r2, #0
 8000b4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d905      	bls.n	8000b62 <__udivmoddi4+0xb6>
 8000b56:	b10d      	cbz	r5, 8000b5c <__udivmoddi4+0xb0>
 8000b58:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e7f5      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b62:	fab3 f183 	clz	r1, r3
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d146      	bne.n	8000bf8 <__udivmoddi4+0x14c>
 8000b6a:	4573      	cmp	r3, lr
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0xc8>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 8105 	bhi.w	8000d7e <__udivmoddi4+0x2d2>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0e5      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b82:	e9c5 4800 	strd	r4, r8, [r5]
 8000b86:	e7e2      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f000 8090 	beq.w	8000cae <__udivmoddi4+0x202>
 8000b8e:	fab2 f682 	clz	r6, r2
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	f040 80a4 	bne.w	8000ce0 <__udivmoddi4+0x234>
 8000b98:	1a8a      	subs	r2, r1, r2
 8000b9a:	0c03      	lsrs	r3, r0, #16
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	b280      	uxth	r0, r0
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000baa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb2:	fb04 f20c 	mul.w	r2, r4, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <__udivmoddi4+0x11e>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x11c>
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f200 80e0 	bhi.w	8000d88 <__udivmoddi4+0x2dc>
 8000bc8:	46c4      	mov	ip, r8
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bd0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bd4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bd8:	fb02 f404 	mul.w	r4, r2, r4
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x144>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x142>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f200 80ca 	bhi.w	8000d82 <__udivmoddi4+0x2d6>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	1b1b      	subs	r3, r3, r4
 8000bf2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bf6:	e7a5      	b.n	8000b44 <__udivmoddi4+0x98>
 8000bf8:	f1c1 0620 	rsb	r6, r1, #32
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000c02:	431f      	orrs	r7, r3
 8000c04:	fa0e f401 	lsl.w	r4, lr, r1
 8000c08:	fa20 f306 	lsr.w	r3, r0, r6
 8000c0c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c10:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c14:	4323      	orrs	r3, r4
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	fa1f fc87 	uxth.w	ip, r7
 8000c1e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c22:	0c1c      	lsrs	r4, r3, #16
 8000c24:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c2c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	fa02 f201 	lsl.w	r2, r2, r1
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x1a0>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c3e:	f080 809c 	bcs.w	8000d7a <__udivmoddi4+0x2ce>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8099 	bls.w	8000d7a <__udivmoddi4+0x2ce>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	fa1f fe83 	uxth.w	lr, r3
 8000c54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c58:	fb09 4413 	mls	r4, r9, r3, r4
 8000c5c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c60:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c64:	45a4      	cmp	ip, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x1ce>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c6e:	f080 8082 	bcs.w	8000d76 <__udivmoddi4+0x2ca>
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	d97f      	bls.n	8000d76 <__udivmoddi4+0x2ca>
 8000c76:	3b02      	subs	r3, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c7e:	eba4 040c 	sub.w	r4, r4, ip
 8000c82:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c86:	4564      	cmp	r4, ip
 8000c88:	4673      	mov	r3, lr
 8000c8a:	46e1      	mov	r9, ip
 8000c8c:	d362      	bcc.n	8000d54 <__udivmoddi4+0x2a8>
 8000c8e:	d05f      	beq.n	8000d50 <__udivmoddi4+0x2a4>
 8000c90:	b15d      	cbz	r5, 8000caa <__udivmoddi4+0x1fe>
 8000c92:	ebb8 0203 	subs.w	r2, r8, r3
 8000c96:	eb64 0409 	sbc.w	r4, r4, r9
 8000c9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000ca2:	431e      	orrs	r6, r3
 8000ca4:	40cc      	lsrs	r4, r1
 8000ca6:	e9c5 6400 	strd	r6, r4, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	e74f      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000cae:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cb2:	0c01      	lsrs	r1, r0, #16
 8000cb4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cb8:	b280      	uxth	r0, r0
 8000cba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	463c      	mov	r4, r7
 8000cc4:	46b8      	mov	r8, r7
 8000cc6:	46be      	mov	lr, r7
 8000cc8:	2620      	movs	r6, #32
 8000cca:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cce:	eba2 0208 	sub.w	r2, r2, r8
 8000cd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cd6:	e766      	b.n	8000ba6 <__udivmoddi4+0xfa>
 8000cd8:	4601      	mov	r1, r0
 8000cda:	e718      	b.n	8000b0e <__udivmoddi4+0x62>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	e72c      	b.n	8000b3a <__udivmoddi4+0x8e>
 8000ce0:	f1c6 0220 	rsb	r2, r6, #32
 8000ce4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ce8:	40b7      	lsls	r7, r6
 8000cea:	40b1      	lsls	r1, r6
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cfa:	b2bc      	uxth	r4, r7
 8000cfc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb08 f904 	mul.w	r9, r8, r4
 8000d0a:	40b0      	lsls	r0, r6
 8000d0c:	4589      	cmp	r9, r1
 8000d0e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d12:	b280      	uxth	r0, r0
 8000d14:	d93e      	bls.n	8000d94 <__udivmoddi4+0x2e8>
 8000d16:	1879      	adds	r1, r7, r1
 8000d18:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d1c:	d201      	bcs.n	8000d22 <__udivmoddi4+0x276>
 8000d1e:	4589      	cmp	r9, r1
 8000d20:	d81f      	bhi.n	8000d62 <__udivmoddi4+0x2b6>
 8000d22:	eba1 0109 	sub.w	r1, r1, r9
 8000d26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2a:	fb09 f804 	mul.w	r8, r9, r4
 8000d2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d32:	b292      	uxth	r2, r2
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	4542      	cmp	r2, r8
 8000d3a:	d229      	bcs.n	8000d90 <__udivmoddi4+0x2e4>
 8000d3c:	18ba      	adds	r2, r7, r2
 8000d3e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d42:	d2c4      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d44:	4542      	cmp	r2, r8
 8000d46:	d2c2      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d48:	f1a9 0102 	sub.w	r1, r9, #2
 8000d4c:	443a      	add	r2, r7
 8000d4e:	e7be      	b.n	8000cce <__udivmoddi4+0x222>
 8000d50:	45f0      	cmp	r8, lr
 8000d52:	d29d      	bcs.n	8000c90 <__udivmoddi4+0x1e4>
 8000d54:	ebbe 0302 	subs.w	r3, lr, r2
 8000d58:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	46e1      	mov	r9, ip
 8000d60:	e796      	b.n	8000c90 <__udivmoddi4+0x1e4>
 8000d62:	eba7 0909 	sub.w	r9, r7, r9
 8000d66:	4449      	add	r1, r9
 8000d68:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d6c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d70:	fb09 f804 	mul.w	r8, r9, r4
 8000d74:	e7db      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d76:	4673      	mov	r3, lr
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1ce>
 8000d7a:	4650      	mov	r0, sl
 8000d7c:	e766      	b.n	8000c4c <__udivmoddi4+0x1a0>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e6fd      	b.n	8000b7e <__udivmoddi4+0xd2>
 8000d82:	443b      	add	r3, r7
 8000d84:	3a02      	subs	r2, #2
 8000d86:	e733      	b.n	8000bf0 <__udivmoddi4+0x144>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	e71c      	b.n	8000bca <__udivmoddi4+0x11e>
 8000d90:	4649      	mov	r1, r9
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x222>
 8000d94:	eba1 0109 	sub.w	r1, r1, r9
 8000d98:	46c4      	mov	ip, r8
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fb09 f804 	mul.w	r8, r9, r4
 8000da2:	e7c4      	b.n	8000d2e <__udivmoddi4+0x282>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
 8000da8:	b480      	push	{r7}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	603b      	str	r3, [r7, #0]
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
#else
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000dbc:	d11a      	bne.n	8000df4 <LL_USART_SetBaudRate+0x4c>
#endif /* USART_PRESC_PRESCALER */
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	005a      	lsls	r2, r3, #1
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	085b      	lsrs	r3, r3, #1
 8000dc6:	441a      	add	r2, r3
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
    brrtemp = usartdiv & 0xFFF0U;
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	085b      	lsrs	r3, r3, #1
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	60da      	str	r2, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif /* USART_PRESC_PRESCALER */
  }
}
 8000df2:	e00a      	b.n	8000e0a <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	085a      	lsrs	r2, r3, #1
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	441a      	add	r2, r3
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	461a      	mov	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	60da      	str	r2, [r3, #12]
}
 8000e0a:	bf00      	nop
 8000e0c:	371c      	adds	r7, #28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <Temp_Sensor_Init>:
#include "stm32l4xx_ll_usart.h"


/*------INIZIALIZZAZIONE SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Init(void)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
	uint8_t data = 0xF0;
 8000e1e:	23f0      	movs	r3, #240	@ 0xf0
 8000e20:	71fb      	strb	r3, [r7, #7]

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 9600);
 8000e22:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e24:	681c      	ldr	r4, [r3, #0]
 8000e26:	f00f fb41 	bl	80104ac <HAL_RCC_GetPCLK2Freq>
 8000e2a:	4601      	mov	r1, r0
 8000e2c:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000e30:	2200      	movs	r2, #0
 8000e32:	4620      	mov	r0, r4
 8000e34:	f7ff ffb8 	bl	8000da8 <LL_USART_SetBaudRate>

	HAL_UART_Transmit(TEMP_UART, &data, 1, 100);  // low for 500+us
 8000e38:	1df9      	adds	r1, r7, #7
 8000e3a:	2364      	movs	r3, #100	@ 0x64
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	4813      	ldr	r0, [pc, #76]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e40:	f013 fe0e 	bl	8014a60 <HAL_UART_Transmit>
	if (HAL_UART_Receive(TEMP_UART, &data, 1, 1000) != HAL_OK)
 8000e44:	1df9      	adds	r1, r7, #7
 8000e46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	480f      	ldr	r0, [pc, #60]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e4e:	f013 fe90 	bl	8014b72 <HAL_UART_Receive>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <Temp_Sensor_Init+0x44>
		while(1);
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <Temp_Sensor_Init+0x40>

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 115200);
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e5e:	681c      	ldr	r4, [r3, #0]
 8000e60:	f00f fb24 	bl	80104ac <HAL_RCC_GetPCLK2Freq>
 8000e64:	4601      	mov	r1, r0
 8000e66:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	f7ff ff9b 	bl	8000da8 <LL_USART_SetBaudRate>

	if (data == 0xF0)
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2bf0      	cmp	r3, #240	@ 0xf0
 8000e76:	d101      	bne.n	8000e7c <Temp_Sensor_Init+0x64>
		while(1);
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <Temp_Sensor_Init+0x60>

	Temp_Sensor_Write(0xCC);  // skip ROM
 8000e7c:	20cc      	movs	r0, #204	@ 0xcc
 8000e7e:	f000 f807 	bl	8000e90 <Temp_Sensor_Write>
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd90      	pop	{r4, r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000069c 	.word	0x2000069c

08000e90 <Temp_Sensor_Write>:

/*------SCRITTURA SU SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Write(uint8_t data)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[8];

	for (int i=0; i<8; i++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	e017      	b.n	8000ed0 <Temp_Sensor_Write+0x40>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 8000ea0:	79fa      	ldrb	r2, [r7, #7]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	fa42 f303 	asr.w	r3, r2, r3
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d006      	beq.n	8000ebe <Temp_Sensor_Write+0x2e>
		{
			buffer[i] = 0xFF;  // write 1
 8000eb0:	f107 020c 	add.w	r2, r7, #12
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	22ff      	movs	r2, #255	@ 0xff
 8000eba:	701a      	strb	r2, [r3, #0]
 8000ebc:	e005      	b.n	8000eca <Temp_Sensor_Write+0x3a>
		}
		else  // if the bit is low
		{
			buffer[i] = 0;  // write 0
 8000ebe:	f107 020c 	add.w	r2, r7, #12
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<8; i++)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	2b07      	cmp	r3, #7
 8000ed4:	dde4      	ble.n	8000ea0 <Temp_Sensor_Write+0x10>
		}
	}

	HAL_UART_Transmit(TEMP_UART, buffer, 8, 100);
 8000ed6:	f107 010c 	add.w	r1, r7, #12
 8000eda:	2364      	movs	r3, #100	@ 0x64
 8000edc:	2208      	movs	r2, #8
 8000ede:	4803      	ldr	r0, [pc, #12]	@ (8000eec <Temp_Sensor_Write+0x5c>)
 8000ee0:	f013 fdbe 	bl	8014a60 <HAL_UART_Transmit>
}
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	2000069c 	.word	0x2000069c

08000ef0 <Temp_Sensor_ReadByte>:

/*------LETTURA BYTE DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadByte(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
	uint8_t RxByte = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	71bb      	strb	r3, [r7, #6]
 8000efe:	e00e      	b.n	8000f1e <Temp_Sensor_ReadByte+0x2e>
	{
		RxByte >>= 1;
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	085b      	lsrs	r3, r3, #1
 8000f04:	71fb      	strb	r3, [r7, #7]
		if (Temp_Sensor_ReadBit())
 8000f06:	f000 f813 	bl	8000f30 <Temp_Sensor_ReadBit>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <Temp_Sensor_ReadByte+0x28>
		{
			RxByte |= 0x80;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f16:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8000f18:	79bb      	ldrb	r3, [r7, #6]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	71bb      	strb	r3, [r7, #6]
 8000f1e:	79bb      	ldrb	r3, [r7, #6]
 8000f20:	2b07      	cmp	r3, #7
 8000f22:	d9ed      	bls.n	8000f00 <Temp_Sensor_ReadByte+0x10>
		}
	}
	return RxByte;
 8000f24:	79fb      	ldrb	r3, [r7, #7]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <Temp_Sensor_ReadBit>:

/*------LETTURA BIT DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadBit(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
    uint8_t ReadBitCMD = 0xFF;
 8000f36:	23ff      	movs	r3, #255	@ 0xff
 8000f38:	71fb      	strb	r3, [r7, #7]
    uint8_t RxBit;

    // Send Read Bit CMD
    HAL_UART_Transmit(&huart1, &ReadBitCMD, 1, 1);
 8000f3a:	1df9      	adds	r1, r7, #7
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4808      	ldr	r0, [pc, #32]	@ (8000f64 <Temp_Sensor_ReadBit+0x34>)
 8000f42:	f013 fd8d 	bl	8014a60 <HAL_UART_Transmit>
    // Receive The Bit
    HAL_UART_Receive(&huart1, &RxBit, 1, 1);
 8000f46:	1db9      	adds	r1, r7, #6
 8000f48:	2301      	movs	r3, #1
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <Temp_Sensor_ReadBit+0x34>)
 8000f4e:	f013 fe10 	bl	8014b72 <HAL_UART_Receive>

    return (RxBit & 0x01);
 8000f52:	79bb      	ldrb	r3, [r7, #6]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000724 	.word	0x20000724

08000f68 <Read_Temperature>:

/*------LETTURA TEMPERATURA------*/
uint16_t Read_Temperature(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
	uint8_t Temp_LSB = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_MSB = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	71bb      	strb	r3, [r7, #6]
	uint16_t Temp = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	80bb      	strh	r3, [r7, #4]
	
	Temp_Sensor_Init();
 8000f7a:	f7ff ff4d 	bl	8000e18 <Temp_Sensor_Init>
	Temp_Sensor_Write(0xCC);  // skip ROM
 8000f7e:	20cc      	movs	r0, #204	@ 0xcc
 8000f80:	f7ff ff86 	bl	8000e90 <Temp_Sensor_Write>

	uint8_t status = Temp_Sensor_ReadBit();
 8000f84:	f7ff ffd4 	bl	8000f30 <Temp_Sensor_ReadBit>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	70fb      	strb	r3, [r7, #3]

	if (status) 
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d01d      	beq.n	8000fce <Read_Temperature+0x66>
	{
		Temp_Sensor_Write(0xBE);  // read Scratch-pad
 8000f92:	20be      	movs	r0, #190	@ 0xbe
 8000f94:	f7ff ff7c 	bl	8000e90 <Temp_Sensor_Write>
		Temp_LSB = Temp_Sensor_ReadByte();
 8000f98:	f7ff ffaa 	bl	8000ef0 <Temp_Sensor_ReadByte>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	71fb      	strb	r3, [r7, #7]
	    Temp_MSB = Temp_Sensor_ReadByte();
 8000fa0:	f7ff ffa6 	bl	8000ef0 <Temp_Sensor_ReadByte>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	71bb      	strb	r3, [r7, #6]
		Temp_Sensor_Init();
 8000fa8:	f7ff ff36 	bl	8000e18 <Temp_Sensor_Init>
		Temp_Sensor_Write(0xCC);  // skip ROM
 8000fac:	20cc      	movs	r0, #204	@ 0xcc
 8000fae:	f7ff ff6f 	bl	8000e90 <Temp_Sensor_Write>
		Temp_Sensor_Write(0x44);  // convert t
 8000fb2:	2044      	movs	r0, #68	@ 0x44
 8000fb4:	f7ff ff6c 	bl	8000e90 <Temp_Sensor_Write>
		Temp = ((Temp_MSB << 8)) | Temp_LSB;
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	80bb      	strh	r3, [r7, #4]
		return Temp;
 8000fca:	88bb      	ldrh	r3, [r7, #4]
 8000fcc:	e000      	b.n	8000fd0 <Read_Temperature+0x68>
	}
	
	return 0; 
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <INA3221_Init>:
#include "INA3221_reg.h"
#include "peripherals.h"
#include "global_variables.h"

void INA3221_Init()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
	uint16_t rcheck = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	80fb      	strh	r3, [r7, #6]

	INA3221_write_reg(INA3221_REG_CONFIG, 0x8000);   //RESET
 8000fe2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 f880 	bl	80010ec <INA3221_write_reg>

	HAL_Delay(100);
 8000fec:	2064      	movs	r0, #100	@ 0x64
 8000fee:	f00a f823 	bl	800b038 <HAL_Delay>

	INA3221_read_reg(INA3221_REG_MID, &rcheck);
 8000ff2:	1dbb      	adds	r3, r7, #6
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	20fe      	movs	r0, #254	@ 0xfe
 8000ff8:	f000 f842 	bl	8001080 <INA3221_read_reg>

	if(rcheck != INA3221_DEFAULT_MID)
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	f245 4249 	movw	r2, #21577	@ 0x5449
 8001002:	4293      	cmp	r3, r2
 8001004:	d001      	beq.n	800100a <INA3221_Init+0x32>
		while(1);
 8001006:	bf00      	nop
 8001008:	e7fd      	b.n	8001006 <INA3221_Init+0x2e>

	INA3221_write_reg(INA3221_REG_CONFIG, 0x7D27);   //CH1 CH2 CH3 Enabled, 512 AVG, 1.1ms conv time, continous mode
 800100a:	f647 5127 	movw	r1, #32039	@ 0x7d27
 800100e:	2000      	movs	r0, #0
 8001010:	f000 f86c 	bl	80010ec <INA3221_write_reg>
	INA3221_Read_Measure(&Supply);
 8001014:	4803      	ldr	r0, [pc, #12]	@ (8001024 <INA3221_Init+0x4c>)
 8001016:	f000 f807 	bl	8001028 <INA3221_Read_Measure>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20003b48 	.word	0x20003b48

08001028 <INA3221_Read_Measure>:

void INA3221_Read_Measure(supply_bus_t *measure)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_1, (uint16_t *)&(measure->v1));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4619      	mov	r1, r3
 8001034:	2002      	movs	r0, #2
 8001036:	f000 f823 	bl	8001080 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_2, (uint16_t *)&(measure->v2));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3302      	adds	r3, #2
 800103e:	4619      	mov	r1, r3
 8001040:	2004      	movs	r0, #4
 8001042:	f000 f81d 	bl	8001080 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_3, (uint16_t *)&(measure->v3));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3304      	adds	r3, #4
 800104a:	4619      	mov	r1, r3
 800104c:	2006      	movs	r0, #6
 800104e:	f000 f817 	bl	8001080 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_1, (uint16_t *)&(measure->i1));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3306      	adds	r3, #6
 8001056:	4619      	mov	r1, r3
 8001058:	2001      	movs	r0, #1
 800105a:	f000 f811 	bl	8001080 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_2, (uint16_t *)&(measure->i2));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3308      	adds	r3, #8
 8001062:	4619      	mov	r1, r3
 8001064:	2003      	movs	r0, #3
 8001066:	f000 f80b 	bl	8001080 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_3, (uint16_t *)&(measure->i3));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	330a      	adds	r3, #10
 800106e:	4619      	mov	r1, r3
 8001070:	2005      	movs	r0, #5
 8001072:	f000 f805 	bl	8001080 <INA3221_read_reg>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <INA3221_read_reg>:


int INA3221_read_reg(uint8_t reg, uint16_t *rdata)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af02      	add	r7, sp, #8
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
 8001090:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 8001092:	2300      	movs	r3, #0
 8001094:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, &reg, 1, 100) == HAL_OK)
 8001096:	1dfa      	adds	r2, r7, #7
 8001098:	2364      	movs	r3, #100	@ 0x64
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	2180      	movs	r1, #128	@ 0x80
 80010a0:	4811      	ldr	r0, [pc, #68]	@ (80010e8 <INA3221_read_reg+0x68>)
 80010a2:	f00d fa67 	bl	800e574 <HAL_I2C_Master_Transmit>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d118      	bne.n	80010de <INA3221_read_reg+0x5e>
	{

		if(HAL_I2C_Master_Receive(I2C,  INA3221_ADDR_0 << 1, data, 2, 100) == HAL_OK)
 80010ac:	f107 0208 	add.w	r2, r7, #8
 80010b0:	2364      	movs	r3, #100	@ 0x64
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2302      	movs	r3, #2
 80010b6:	2180      	movs	r1, #128	@ 0x80
 80010b8:	480b      	ldr	r0, [pc, #44]	@ (80010e8 <INA3221_read_reg+0x68>)
 80010ba:	f00d fb73 	bl	800e7a4 <HAL_I2C_Master_Receive>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d10c      	bne.n	80010de <INA3221_read_reg+0x5e>
		{
			result = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 80010c8:	7a3b      	ldrb	r3, [r7, #8]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	7a7b      	ldrb	r3, [r7, #9]
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b21b      	sxth	r3, r3
 80010d8:	b29a      	uxth	r2, r3
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200003e8 	.word	0x200003e8

080010ec <INA3221_write_reg>:


int INA3221_write_reg(uint8_t reg, uint16_t wdata)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af02      	add	r7, sp, #8
 80010f2:	4603      	mov	r3, r0
 80010f4:	460a      	mov	r2, r1
 80010f6:	71fb      	strb	r3, [r7, #7]
 80010f8:	4613      	mov	r3, r2
 80010fa:	80bb      	strh	r3, [r7, #4]
    int result = -1;
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001100:	60fb      	str	r3, [r7, #12]
    uint8_t data[3];
    
    data[0] = reg;                    
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	723b      	strb	r3, [r7, #8]
    data[1] = (wdata >> 8);          
 8001106:	88bb      	ldrh	r3, [r7, #4]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	b29b      	uxth	r3, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	727b      	strb	r3, [r7, #9]
    data[2] = (wdata & 0xFF);        
 8001110:	88bb      	ldrh	r3, [r7, #4]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	72bb      	strb	r3, [r7, #10]

    if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, data, 3, 100) == HAL_OK)
 8001116:	f107 0208 	add.w	r2, r7, #8
 800111a:	2364      	movs	r3, #100	@ 0x64
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2303      	movs	r3, #3
 8001120:	2180      	movs	r1, #128	@ 0x80
 8001122:	4806      	ldr	r0, [pc, #24]	@ (800113c <INA3221_write_reg+0x50>)
 8001124:	f00d fa26 	bl	800e574 <HAL_I2C_Master_Transmit>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <INA3221_write_reg+0x46>
    {
        result = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
    }
    
    return result;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200003e8 	.word	0x200003e8

08001140 <RTC_Init>:
#include "RTC.h"


/*-----INIZiALIZZAZIONE ORA RTC-----*/
void RTC_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
	for (int retry = 0; retry < 3; retry++)
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	e00b      	b.n	8001164 <RTC_Init+0x24>
	{
		if (Get_DateTime_From_Network())
 800114c:	f000 f814 	bl	8001178 <Get_DateTime_From_Network>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10c      	bne.n	8001170 <RTC_Init+0x30>
		{
			return;
		}
		HAL_Delay(1000);
 8001156:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800115a:	f009 ff6d 	bl	800b038 <HAL_Delay>
	for (int retry = 0; retry < 3; retry++)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3301      	adds	r3, #1
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b02      	cmp	r3, #2
 8001168:	ddf0      	ble.n	800114c <RTC_Init+0xc>
	}
	Set_Default_DateTime();
 800116a:	f000 f905 	bl	8001378 <Set_Default_DateTime>
 800116e:	e000      	b.n	8001172 <RTC_Init+0x32>
			return;
 8001170:	bf00      	nop
}
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <Get_DateTime_From_Network>:

/*-----SINCRONIZZAZIONE RTC DA RETE-----*/
int Get_DateTime_From_Network(void)
{
 8001178:	b5b0      	push	{r4, r5, r7, lr}
 800117a:	b0a2      	sub	sp, #136	@ 0x88
 800117c:	af00      	add	r7, sp, #0
	char response[100] = {0};
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	2264      	movs	r2, #100	@ 0x64
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f015 f812 	bl	80161b0 <memset>
	RTC_DateTypeDef sDate = {0};
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
	RTC_TimeTypeDef sTime = {0};
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

	SIM_Send_Command("AT+CCLK?\r");
 800119e:	4872      	ldr	r0, [pc, #456]	@ (8001368 <Get_DateTime_From_Network+0x1f0>)
 80011a0:	f000 fc76 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	f241 3188 	movw	r1, #5000	@ 0x1388
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 fc9b 	bl	8001ae8 <SIM_Receive_Response>

    char* cclk_pos = strstr(response, "+CCLK: \"");
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	496d      	ldr	r1, [pc, #436]	@ (800136c <Get_DateTime_From_Network+0x1f4>)
 80011b8:	4618      	mov	r0, r3
 80011ba:	f015 f833 	bl	8016224 <strstr>
 80011be:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (cclk_pos == NULL)
 80011c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <Get_DateTime_From_Network+0x56>
	{
        return 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e0c8      	b.n	8001360 <Get_DateTime_From_Network+0x1e8>
    }

    char* time_start = cclk_pos + 8;
 80011ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011d2:	3308      	adds	r3, #8
 80011d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    if (strlen(time_start) < 17)
 80011d8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80011dc:	f7ff f802 	bl	80001e4 <strlen>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b10      	cmp	r3, #16
 80011e4:	d801      	bhi.n	80011ea <Get_DateTime_From_Network+0x72>
	{
		return 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	e0ba      	b.n	8001360 <Get_DateTime_From_Network+0x1e8>
	}

	sDate.Year = (time_start[0] - '0') * 10 + (time_start[1] - '0');
 80011ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	3b30      	subs	r3, #48	@ 0x30
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	461a      	mov	r2, r3
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001202:	3301      	adds	r3, #1
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	b2db      	uxtb	r3, r3
 800120a:	3b30      	subs	r3, #48	@ 0x30
 800120c:	b2db      	uxtb	r3, r3
 800120e:	76fb      	strb	r3, [r7, #27]
	sDate.Month = (time_start[3] - '0') * 10 + (time_start[4] - '0');
 8001210:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001214:	3303      	adds	r3, #3
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	3b30      	subs	r3, #48	@ 0x30
 800121a:	b2db      	uxtb	r3, r3
 800121c:	461a      	mov	r2, r3
 800121e:	0092      	lsls	r2, r2, #2
 8001220:	4413      	add	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	b2da      	uxtb	r2, r3
 8001226:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800122a:	3304      	adds	r3, #4
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	b2db      	uxtb	r3, r3
 8001232:	3b30      	subs	r3, #48	@ 0x30
 8001234:	b2db      	uxtb	r3, r3
 8001236:	767b      	strb	r3, [r7, #25]
	sDate.Date = (time_start[6] - '0') * 10 + (time_start[7] - '0');
 8001238:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800123c:	3306      	adds	r3, #6
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	3b30      	subs	r3, #48	@ 0x30
 8001242:	b2db      	uxtb	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	0092      	lsls	r2, r2, #2
 8001248:	4413      	add	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	b2da      	uxtb	r2, r3
 800124e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001252:	3307      	adds	r3, #7
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	b2db      	uxtb	r3, r3
 800125a:	3b30      	subs	r3, #48	@ 0x30
 800125c:	b2db      	uxtb	r3, r3
 800125e:	76bb      	strb	r3, [r7, #26]

	sTime.Hours = (time_start[9] - '0') * 10 + (time_start[10] - '0');
 8001260:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001264:	3309      	adds	r3, #9
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	3b30      	subs	r3, #48	@ 0x30
 800126a:	b2db      	uxtb	r3, r3
 800126c:	461a      	mov	r2, r3
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	4413      	add	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	b2da      	uxtb	r2, r3
 8001276:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800127a:	330a      	adds	r3, #10
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
 8001280:	b2db      	uxtb	r3, r3
 8001282:	3b30      	subs	r3, #48	@ 0x30
 8001284:	b2db      	uxtb	r3, r3
 8001286:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = (time_start[12] - '0') * 10 + (time_start[13] - '0');
 8001288:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800128c:	330c      	adds	r3, #12
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	3b30      	subs	r3, #48	@ 0x30
 8001292:	b2db      	uxtb	r3, r3
 8001294:	461a      	mov	r2, r3
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	4413      	add	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	b2da      	uxtb	r2, r3
 800129e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012a2:	330d      	adds	r3, #13
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	3b30      	subs	r3, #48	@ 0x30
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = (time_start[15] - '0') * 10 + (time_start[16] - '0');
 80012b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012b4:	330f      	adds	r3, #15
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	3b30      	subs	r3, #48	@ 0x30
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	0092      	lsls	r2, r2, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012ca:	3310      	adds	r3, #16
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	3b30      	subs	r3, #48	@ 0x30
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	71bb      	strb	r3, [r7, #6]

	if (sDate.Month < 1 || sDate.Month > 12 ||
 80012d8:	7e7b      	ldrb	r3, [r7, #25]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d011      	beq.n	8001302 <Get_DateTime_From_Network+0x18a>
 80012de:	7e7b      	ldrb	r3, [r7, #25]
 80012e0:	2b0c      	cmp	r3, #12
 80012e2:	d80e      	bhi.n	8001302 <Get_DateTime_From_Network+0x18a>
        sDate.Date < 1 || sDate.Date > 31 ||
 80012e4:	7ebb      	ldrb	r3, [r7, #26]
	if (sDate.Month < 1 || sDate.Month > 12 ||
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00b      	beq.n	8001302 <Get_DateTime_From_Network+0x18a>
        sDate.Date < 1 || sDate.Date > 31 ||
 80012ea:	7ebb      	ldrb	r3, [r7, #26]
 80012ec:	2b1f      	cmp	r3, #31
 80012ee:	d808      	bhi.n	8001302 <Get_DateTime_From_Network+0x18a>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 80012f0:	793b      	ldrb	r3, [r7, #4]
        sDate.Date < 1 || sDate.Date > 31 ||
 80012f2:	2b17      	cmp	r3, #23
 80012f4:	d805      	bhi.n	8001302 <Get_DateTime_From_Network+0x18a>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 80012f6:	797b      	ldrb	r3, [r7, #5]
 80012f8:	2b3b      	cmp	r3, #59	@ 0x3b
 80012fa:	d802      	bhi.n	8001302 <Get_DateTime_From_Network+0x18a>
 80012fc:	79bb      	ldrb	r3, [r7, #6]
 80012fe:	2b3b      	cmp	r3, #59	@ 0x3b
 8001300:	d901      	bls.n	8001306 <Get_DateTime_From_Network+0x18e>
        return 0;
 8001302:	2300      	movs	r3, #0
 8001304:	e02c      	b.n	8001360 <Get_DateTime_From_Network+0x1e8>
    }

	sDate.WeekDay = Calculate_Weekday(sDate.Year + 2000, sDate.Month, sDate.Date);
 8001306:	7efb      	ldrb	r3, [r7, #27]
 8001308:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800130c:	b29b      	uxth	r3, r3
 800130e:	7e79      	ldrb	r1, [r7, #25]
 8001310:	7eba      	ldrb	r2, [r7, #26]
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f874 	bl	8001400 <Calculate_Weekday>
 8001318:	4603      	mov	r3, r0
 800131a:	763b      	strb	r3, [r7, #24]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001324:	f107 0318 	add.w	r3, r7, #24
 8001328:	2200      	movs	r2, #0
 800132a:	4619      	mov	r1, r3
 800132c:	4810      	ldr	r0, [pc, #64]	@ (8001370 <Get_DateTime_From_Network+0x1f8>)
 800132e:	f00f ff70 	bl	8011212 <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2200      	movs	r2, #0
 8001336:	4619      	mov	r1, r3
 8001338:	480d      	ldr	r0, [pc, #52]	@ (8001370 <Get_DateTime_From_Network+0x1f8>)
 800133a:	f00f fe71 	bl	8011020 <HAL_RTC_SetTime>

    sys.onDate = sDate;
 800133e:	4b0d      	ldr	r3, [pc, #52]	@ (8001374 <Get_DateTime_From_Network+0x1fc>)
 8001340:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001344:	461a      	mov	r2, r3
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	6413      	str	r3, [r2, #64]	@ 0x40
    sys.onTime = sTime;
 800134a:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <Get_DateTime_From_Network+0x1fc>)
 800134c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001350:	f103 0444 	add.w	r4, r3, #68	@ 0x44
 8001354:	1d3d      	adds	r5, r7, #4
 8001356:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135a:	682b      	ldr	r3, [r5, #0]
 800135c:	6023      	str	r3, [r4, #0]
    
	return 1;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	3788      	adds	r7, #136	@ 0x88
 8001364:	46bd      	mov	sp, r7
 8001366:	bdb0      	pop	{r4, r5, r7, pc}
 8001368:	08017368 	.word	0x08017368
 800136c:	08017374 	.word	0x08017374
 8001370:	20000480 	.word	0x20000480
 8001374:	20000840 	.word	0x20000840

08001378 <Set_Default_DateTime>:

/*-----DATA E ORA DI DEFAULT 1/1/2020 00:00:00-----*/
void Set_Default_DateTime(void)
{
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
    RTC_DateTypeDef sDate = {0};
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
    RTC_TimeTypeDef sTime = {0};
 8001382:	463b      	mov	r3, r7
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]

    // Default: 01/01/2020 00:00:00
    sDate.Year = 20;  // 2020
 8001390:	2314      	movs	r3, #20
 8001392:	75fb      	strb	r3, [r7, #23]
    sDate.Month = RTC_MONTH_JANUARY;
 8001394:	2301      	movs	r3, #1
 8001396:	757b      	strb	r3, [r7, #21]
    sDate.Date = 1;
 8001398:	2301      	movs	r3, #1
 800139a:	75bb      	strb	r3, [r7, #22]
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY; // 1 Jan 2020 era mercoledì
 800139c:	2303      	movs	r3, #3
 800139e:	753b      	strb	r3, [r7, #20]

    sTime.Hours = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	703b      	strb	r3, [r7, #0]
    sTime.Minutes = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	707b      	strb	r3, [r7, #1]
    sTime.Seconds = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	70bb      	strb	r3, [r7, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]

    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	4619      	mov	r1, r3
 80013bc:	480e      	ldr	r0, [pc, #56]	@ (80013f8 <Set_Default_DateTime+0x80>)
 80013be:	f00f ff28 	bl	8011212 <HAL_RTC_SetDate>
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80013c2:	463b      	mov	r3, r7
 80013c4:	2200      	movs	r2, #0
 80013c6:	4619      	mov	r1, r3
 80013c8:	480b      	ldr	r0, [pc, #44]	@ (80013f8 <Set_Default_DateTime+0x80>)
 80013ca:	f00f fe29 	bl	8011020 <HAL_RTC_SetTime>

    sys.onDate = sDate;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <Set_Default_DateTime+0x84>)
 80013d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013d4:	461a      	mov	r2, r3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	6413      	str	r3, [r2, #64]	@ 0x40
    sys.onTime = sTime;
 80013da:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <Set_Default_DateTime+0x84>)
 80013dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013e0:	f103 0444 	add.w	r4, r3, #68	@ 0x44
 80013e4:	463d      	mov	r5, r7
 80013e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ea:	682b      	ldr	r3, [r5, #0]
 80013ec:	6023      	str	r3, [r4, #0]
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bdb0      	pop	{r4, r5, r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000480 	.word	0x20000480
 80013fc:	20000840 	.word	0x20000840

08001400 <Calculate_Weekday>:

/*-----CALCOLO GIORNO SETTIMANA-----*/
uint8_t Calculate_Weekday(uint16_t year, uint8_t month, uint8_t day)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
 800140a:	460b      	mov	r3, r1
 800140c:	717b      	strb	r3, [r7, #5]
 800140e:	4613      	mov	r3, r2
 8001410:	713b      	strb	r3, [r7, #4]
    // Algoritmo di Zeller per calcolo giorno settimana
    if (month < 3) {
 8001412:	797b      	ldrb	r3, [r7, #5]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d805      	bhi.n	8001424 <Calculate_Weekday+0x24>
        month += 12;
 8001418:	797b      	ldrb	r3, [r7, #5]
 800141a:	330c      	adds	r3, #12
 800141c:	717b      	strb	r3, [r7, #5]
        year--;
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	3b01      	subs	r3, #1
 8001422:	80fb      	strh	r3, [r7, #6]
    }
    uint8_t zeller_day = (day + ((13 * (month + 1)) / 5) + year + (year / 4) - (year / 100) + (year / 400)) % 7;
 8001424:	7939      	ldrb	r1, [r7, #4]
 8001426:	797b      	ldrb	r3, [r7, #5]
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	4a1e      	ldr	r2, [pc, #120]	@ (80014b0 <Calculate_Weekday+0xb0>)
 8001436:	fb82 0203 	smull	r0, r2, r2, r3
 800143a:	1052      	asrs	r2, r2, #1
 800143c:	17db      	asrs	r3, r3, #31
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	18ca      	adds	r2, r1, r3
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	4413      	add	r3, r2
 8001446:	88fa      	ldrh	r2, [r7, #6]
 8001448:	0892      	lsrs	r2, r2, #2
 800144a:	b292      	uxth	r2, r2
 800144c:	4413      	add	r3, r2
 800144e:	88fa      	ldrh	r2, [r7, #6]
 8001450:	4918      	ldr	r1, [pc, #96]	@ (80014b4 <Calculate_Weekday+0xb4>)
 8001452:	fba1 1202 	umull	r1, r2, r1, r2
 8001456:	0952      	lsrs	r2, r2, #5
 8001458:	b292      	uxth	r2, r2
 800145a:	1a9b      	subs	r3, r3, r2
 800145c:	88fa      	ldrh	r2, [r7, #6]
 800145e:	4915      	ldr	r1, [pc, #84]	@ (80014b4 <Calculate_Weekday+0xb4>)
 8001460:	fba1 1202 	umull	r1, r2, r1, r2
 8001464:	09d2      	lsrs	r2, r2, #7
 8001466:	b292      	uxth	r2, r2
 8001468:	441a      	add	r2, r3
 800146a:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <Calculate_Weekday+0xb8>)
 800146c:	fb83 1302 	smull	r1, r3, r3, r2
 8001470:	4413      	add	r3, r2
 8001472:	1099      	asrs	r1, r3, #2
 8001474:	17d3      	asrs	r3, r2, #31
 8001476:	1ac9      	subs	r1, r1, r3
 8001478:	460b      	mov	r3, r1
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	1a5b      	subs	r3, r3, r1
 800147e:	1ad1      	subs	r1, r2, r3
 8001480:	460b      	mov	r3, r1
 8001482:	73fb      	strb	r3, [r7, #15]

    uint8_t hal_weekday_map[] = {RTC_WEEKDAY_SATURDAY, RTC_WEEKDAY_SUNDAY, RTC_WEEKDAY_MONDAY,
 8001484:	4a0d      	ldr	r2, [pc, #52]	@ (80014bc <Calculate_Weekday+0xbc>)
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800148e:	6018      	str	r0, [r3, #0]
 8001490:	3304      	adds	r3, #4
 8001492:	8019      	strh	r1, [r3, #0]
 8001494:	3302      	adds	r3, #2
 8001496:	0c0a      	lsrs	r2, r1, #16
 8001498:	701a      	strb	r2, [r3, #0]
                                 RTC_WEEKDAY_TUESDAY, RTC_WEEKDAY_WEDNESDAY, RTC_WEEKDAY_THURSDAY, RTC_WEEKDAY_FRIDAY};

    return hal_weekday_map[zeller_day];
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	3310      	adds	r3, #16
 800149e:	443b      	add	r3, r7
 80014a0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	66666667 	.word	0x66666667
 80014b4:	51eb851f 	.word	0x51eb851f
 80014b8:	92492493 	.word	0x92492493
 80014bc:	08017380 	.word	0x08017380

080014c0 <SIM_Init>:
#include "process.h"
#include "leds.h"

/*------INIZIALIZZAZIONE DEL MODULO LTE------*/
int SIM_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 80014c6:	af00      	add	r7, sp, #0
	char command[256];
	char response[256];
	sprintf(sys.apn, "iot.1nce.net");
 80014c8:	49c2      	ldr	r1, [pc, #776]	@ (80017d4 <SIM_Init+0x314>)
 80014ca:	48c3      	ldr	r0, [pc, #780]	@ (80017d8 <SIM_Init+0x318>)
 80014cc:	f014 fe10 	bl	80160f0 <siprintf>
	strcpy(sys.TCP.IP_address, config.tcp_IPaddress);
 80014d0:	49c2      	ldr	r1, [pc, #776]	@ (80017dc <SIM_Init+0x31c>)
 80014d2:	48c3      	ldr	r0, [pc, #780]	@ (80017e0 <SIM_Init+0x320>)
 80014d4:	f014 fee8 	bl	80162a8 <strcpy>
	strcpy(sys.TCP.Port, config.tcp_Port);
 80014d8:	49c2      	ldr	r1, [pc, #776]	@ (80017e4 <SIM_Init+0x324>)
 80014da:	48c3      	ldr	r0, [pc, #780]	@ (80017e8 <SIM_Init+0x328>)
 80014dc:	f014 fee4 	bl	80162a8 <strcpy>
	sprintf(sys.TCP.IP_address, "a");
 80014e0:	49c2      	ldr	r1, [pc, #776]	@ (80017ec <SIM_Init+0x32c>)
 80014e2:	48bf      	ldr	r0, [pc, #764]	@ (80017e0 <SIM_Init+0x320>)
 80014e4:	f014 fe04 	bl	80160f0 <siprintf>
	sprintf(sys.TCP.Port, "a");
 80014e8:	49c0      	ldr	r1, [pc, #768]	@ (80017ec <SIM_Init+0x32c>)
 80014ea:	48bf      	ldr	r0, [pc, #764]	@ (80017e8 <SIM_Init+0x328>)
 80014ec:	f014 fe00 	bl	80160f0 <siprintf>

	memset(response, 0, sizeof(response));
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f014 fe58 	bl	80161b0 <memset>

	if(HAL_GPIO_ReadPin(LTE_STATUS_GPIO_Port, LTE_STATUS_Pin) != GPIO_PIN_SET)
 8001500:	2108      	movs	r1, #8
 8001502:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001506:	f00c ff69 	bl	800e3dc <HAL_GPIO_ReadPin>
 800150a:	4603      	mov	r3, r0
 800150c:	2b01      	cmp	r3, #1
 800150e:	d00a      	beq.n	8001526 <SIM_Init+0x66>
	{
		SIM_Power_On();
 8001510:	f000 fa92 	bl	8001a38 <SIM_Power_On>
		while(HAL_GPIO_ReadPin(LTE_STATUS_GPIO_Port, LTE_STATUS_Pin) != GPIO_PIN_SET);            //Attesa accensione modulo
 8001514:	bf00      	nop
 8001516:	2108      	movs	r1, #8
 8001518:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800151c:	f00c ff5e 	bl	800e3dc <HAL_GPIO_ReadPin>
 8001520:	4603      	mov	r3, r0
 8001522:	2b01      	cmp	r3, #1
 8001524:	d1f7      	bne.n	8001516 <SIM_Init+0x56>
		
	}

	SIM_Send_Command("AT\r");                                                                     //Verifica comunicazione
 8001526:	48b2      	ldr	r0, [pc, #712]	@ (80017f0 <SIM_Init+0x330>)
 8001528:	f000 fab2 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 2000);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001534:	4618      	mov	r0, r3
 8001536:	f000 fad7 	bl	8001ae8 <SIM_Receive_Response>
	if(strstr(response, "OK") == NULL)
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	49ad      	ldr	r1, [pc, #692]	@ (80017f4 <SIM_Init+0x334>)
 8001540:	4618      	mov	r0, r3
 8001542:	f014 fe6f 	bl	8016224 <strstr>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d11c      	bne.n	8001586 <SIM_Init+0xc6>
	{
		if(huart1.Init.BaudRate != 921600)
 800154c:	4baa      	ldr	r3, [pc, #680]	@ (80017f8 <SIM_Init+0x338>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f5b3 2f61 	cmp.w	r3, #921600	@ 0xe1000
 8001554:	d00d      	beq.n	8001572 <SIM_Init+0xb2>
		{
			huart1.Init.BaudRate = 921600;
 8001556:	4ba8      	ldr	r3, [pc, #672]	@ (80017f8 <SIM_Init+0x338>)
 8001558:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800155c:	605a      	str	r2, [r3, #4]
			HAL_UART_Init(SIM_UART);
 800155e:	48a6      	ldr	r0, [pc, #664]	@ (80017f8 <SIM_Init+0x338>)
 8001560:	f013 f9da 	bl	8014918 <HAL_UART_Init>
			SIM_Send_Command("AT+IPR=921600\r");               						              //Baudrate a 921600
 8001564:	48a5      	ldr	r0, [pc, #660]	@ (80017fc <SIM_Init+0x33c>)
 8001566:	f000 fa93 	bl	8001a90 <SIM_Send_Command>
			SIM_Wait_Response("OK");
 800156a:	48a2      	ldr	r0, [pc, #648]	@ (80017f4 <SIM_Init+0x334>)
 800156c:	f000 fe24 	bl	80021b8 <SIM_Wait_Response>
 8001570:	e009      	b.n	8001586 <SIM_Init+0xc6>
		}
		else
		{
			huart1.Init.BaudRate = 38400;
 8001572:	4ba1      	ldr	r3, [pc, #644]	@ (80017f8 <SIM_Init+0x338>)
 8001574:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001578:	605a      	str	r2, [r3, #4]
			HAL_UART_Init(SIM_UART);
 800157a:	489f      	ldr	r0, [pc, #636]	@ (80017f8 <SIM_Init+0x338>)
 800157c:	f013 f9cc 	bl	8014918 <HAL_UART_Init>
			return -1;
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	e237      	b.n	80019f6 <SIM_Init+0x536>
		}

	}

	huart1.Init.BaudRate = 921600;
 8001586:	4b9c      	ldr	r3, [pc, #624]	@ (80017f8 <SIM_Init+0x338>)
 8001588:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800158c:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(SIM_UART);
 800158e:	489a      	ldr	r0, [pc, #616]	@ (80017f8 <SIM_Init+0x338>)
 8001590:	f013 f9c2 	bl	8014918 <HAL_UART_Init>

	SIM_Send_Command("ATE0\r");                                                                   //Non verbose mode
 8001594:	489a      	ldr	r0, [pc, #616]	@ (8001800 <SIM_Init+0x340>)
 8001596:	f000 fa7b 	bl	8001a90 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 800159a:	4896      	ldr	r0, [pc, #600]	@ (80017f4 <SIM_Init+0x334>)
 800159c:	f000 fe0c 	bl	80021b8 <SIM_Wait_Response>


	SIM_Send_Command("AT+CFUN=1\r");                                                              //Full functionality
 80015a0:	4898      	ldr	r0, [pc, #608]	@ (8001804 <SIM_Init+0x344>)
 80015a2:	f000 fa75 	bl	8001a90 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80015a6:	4893      	ldr	r0, [pc, #588]	@ (80017f4 <SIM_Init+0x334>)
 80015a8:	f000 fe06 	bl	80021b8 <SIM_Wait_Response>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <SIM_Init+0xf8>
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	e21e      	b.n	80019f6 <SIM_Init+0x536>

	SIM_Send_Command("AT+CNMP=38\r");                                                             //Modalità solo LTE o NB-IoT
 80015b8:	4893      	ldr	r0, [pc, #588]	@ (8001808 <SIM_Init+0x348>)
 80015ba:	f000 fa69 	bl	8001a90 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80015be:	488d      	ldr	r0, [pc, #564]	@ (80017f4 <SIM_Init+0x334>)
 80015c0:	f000 fdfa 	bl	80021b8 <SIM_Wait_Response>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d002      	beq.n	80015d0 <SIM_Init+0x110>
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
 80015ce:	e212      	b.n	80019f6 <SIM_Init+0x536>

	SIM_Send_Command("AT+CMNB=1\r");                                                              //1=CAT-M, 2=NB-IoT, 3=Automatico
 80015d0:	488e      	ldr	r0, [pc, #568]	@ (800180c <SIM_Init+0x34c>)
 80015d2:	f000 fa5d 	bl	8001a90 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80015d6:	4887      	ldr	r0, [pc, #540]	@ (80017f4 <SIM_Init+0x334>)
 80015d8:	f000 fdee 	bl	80021b8 <SIM_Wait_Response>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d002      	beq.n	80015e8 <SIM_Init+0x128>
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
 80015e6:	e206      	b.n	80019f6 <SIM_Init+0x536>

	SIM_Send_Command("AT+CPIN?\r");																  //Controllo PIN
 80015e8:	4889      	ldr	r0, [pc, #548]	@ (8001810 <SIM_Init+0x350>)
 80015ea:	f000 fa51 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 fa76 	bl	8001ae8 <SIM_Receive_Response>
	if(strstr(response, "READY") == NULL)
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4984      	ldr	r1, [pc, #528]	@ (8001814 <SIM_Init+0x354>)
 8001602:	4618      	mov	r0, r3
 8001604:	f014 fe0e 	bl	8016224 <strstr>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d11e      	bne.n	800164c <SIM_Init+0x18c>
	{
		if(strstr(response, "SIM PIN") != NULL)
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4981      	ldr	r1, [pc, #516]	@ (8001818 <SIM_Init+0x358>)
 8001614:	4618      	mov	r0, r3
 8001616:	f014 fe05 	bl	8016224 <strstr>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d012      	beq.n	8001646 <SIM_Init+0x186>
		{
			SIM_Send_Command("AT+CPIN=0000\r");
 8001620:	487e      	ldr	r0, [pc, #504]	@ (800181c <SIM_Init+0x35c>)
 8001622:	f000 fa35 	bl	8001a90 <SIM_Send_Command>
			SIM_Receive_Response(response, 5000);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800162e:	4618      	mov	r0, r3
 8001630:	f000 fa5a 	bl	8001ae8 <SIM_Receive_Response>
			if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001634:	486f      	ldr	r0, [pc, #444]	@ (80017f4 <SIM_Init+0x334>)
 8001636:	f000 fdbf 	bl	80021b8 <SIM_Wait_Response>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <SIM_Init+0x18c>
 8001640:	f04f 33ff 	mov.w	r3, #4294967295
 8001644:	e1d7      	b.n	80019f6 <SIM_Init+0x536>
		}
		else
		{
			return -1;
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
 800164a:	e1d4      	b.n	80019f6 <SIM_Init+0x536>
		}
	}


	SIM_Send_Command("AT+CSQ\r");																  //Controllo qualità connessione
 800164c:	4874      	ldr	r0, [pc, #464]	@ (8001820 <SIM_Init+0x360>)
 800164e:	f000 fa1f 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	f241 3188 	movw	r1, #5000	@ 0x1388
 800165a:	4618      	mov	r0, r3
 800165c:	f000 fa44 	bl	8001ae8 <SIM_Receive_Response>
	if(strstr(response, "+CSQ: 99") != NULL)
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	496f      	ldr	r1, [pc, #444]	@ (8001824 <SIM_Init+0x364>)
 8001666:	4618      	mov	r0, r3
 8001668:	f014 fddc 	bl	8016224 <strstr>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d004      	beq.n	800167c <SIM_Init+0x1bc>
	{
		SIM_Power_Off();
 8001672:	f000 f9f7 	bl	8001a64 <SIM_Power_Off>
		return -1;
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
 800167a:	e1bc      	b.n	80019f6 <SIM_Init+0x536>
	}

	SIM_Send_Command("AT+CEREG?\r");                                                              //Controllo registrazione alla rete
 800167c:	486a      	ldr	r0, [pc, #424]	@ (8001828 <SIM_Init+0x368>)
 800167e:	f000 fa07 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	f241 3188 	movw	r1, #5000	@ 0x1388
 800168a:	4618      	mov	r0, r3
 800168c:	f000 fa2c 	bl	8001ae8 <SIM_Receive_Response>
	char* cereg_ptr = strstr(response, "+CEREG:");
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	4965      	ldr	r1, [pc, #404]	@ (800182c <SIM_Init+0x36c>)
 8001696:	4618      	mov	r0, r3
 8001698:	f014 fdc4 	bl	8016224 <strstr>
 800169c:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
	int n = 0, stat_value = 0;
 80016a0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80016a4:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80016b0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
	if(cereg_ptr && sscanf(cereg_ptr, "+CEREG: %d,%d", &n, &stat_value) >= 2)
 80016b8:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d01b      	beq.n	80016f8 <SIM_Init+0x238>
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	f107 0210 	add.w	r2, r7, #16
 80016c8:	4959      	ldr	r1, [pc, #356]	@ (8001830 <SIM_Init+0x370>)
 80016ca:	f8d7 0218 	ldr.w	r0, [r7, #536]	@ 0x218
 80016ce:	f014 fd31 	bl	8016134 <siscanf>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	dd0f      	ble.n	80016f8 <SIM_Init+0x238>
	{
		if(stat_value == 1 || stat_value == 5)
 80016d8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80016dc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	f000 80c4 	beq.w	8001870 <SIM_Init+0x3b0>
 80016e8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80016ec:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b05      	cmp	r3, #5
 80016f4:	f000 80bc 	beq.w	8001870 <SIM_Init+0x3b0>
		{
			goto APN;
		}
	}

	SIM_Send_Command("AT+COPS?\r");																  //Controllo modalità di connessione
 80016f8:	484e      	ldr	r0, [pc, #312]	@ (8001834 <SIM_Init+0x374>)
 80016fa:	f000 f9c9 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f9ee 	bl	8001ae8 <SIM_Receive_Response>

	SIM_Send_Command("AT+COPS=?\r");
 800170c:	484a      	ldr	r0, [pc, #296]	@ (8001838 <SIM_Init+0x378>)
 800170e:	f000 f9bf 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 120000);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4949      	ldr	r1, [pc, #292]	@ (800183c <SIM_Init+0x37c>)
 8001718:	4618      	mov	r0, r3
 800171a:	f000 f9e5 	bl	8001ae8 <SIM_Receive_Response>

	SIM_Send_Command("AT+COPS=0,0\r");                                                            // Miglior operatore disponibile. In caso di operatore fisso: AT+COPS=1,2,\"22201\" ---- 22201: TIM,  22210: Vodafone
 800171e:	4848      	ldr	r0, [pc, #288]	@ (8001840 <SIM_Init+0x380>)
 8001720:	f000 f9b6 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 180000);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4946      	ldr	r1, [pc, #280]	@ (8001844 <SIM_Init+0x384>)
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f9dc 	bl	8001ae8 <SIM_Receive_Response>
//	if(SIM_Wait_Response("OK") != HAL_OK) return -1;

	SIM_Send_Command("AT+CEREG?\r");                                                              //Controllo registrazione alla rete
 8001730:	483d      	ldr	r0, [pc, #244]	@ (8001828 <SIM_Init+0x368>)
 8001732:	f000 f9ad 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800173e:	4618      	mov	r0, r3
 8001740:	f000 f9d2 	bl	8001ae8 <SIM_Receive_Response>
	int stat = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
	while(stat != 1)
 800174a:	e08b      	b.n	8001864 <SIM_Init+0x3a4>
	{
		char* cereg_ptr = strstr(response, "+CEREG:");
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	4936      	ldr	r1, [pc, #216]	@ (800182c <SIM_Init+0x36c>)
 8001752:	4618      	mov	r0, r3
 8001754:	f014 fd66 	bl	8016224 <strstr>
 8001758:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		int n = 0, stat_value = 0;
 800175c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001760:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800176c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
		if(cereg_ptr && sscanf(cereg_ptr, "+CEREG: %d,%d", &n, &stat_value) >= 2)
 8001774:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001778:	2b00      	cmp	r3, #0
 800177a:	d065      	beq.n	8001848 <SIM_Init+0x388>
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	f107 0208 	add.w	r2, r7, #8
 8001782:	492b      	ldr	r1, [pc, #172]	@ (8001830 <SIM_Init+0x370>)
 8001784:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8001788:	f014 fcd4 	bl	8016134 <siscanf>
 800178c:	4603      	mov	r3, r0
 800178e:	2b01      	cmp	r3, #1
 8001790:	dd5a      	ble.n	8001848 <SIM_Init+0x388>
		{
			if(stat_value == 1 || stat_value == 5)
 8001792:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001796:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d006      	beq.n	80017ae <SIM_Init+0x2ee>
 80017a0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80017a4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b05      	cmp	r3, #5
 80017ac:	d103      	bne.n	80017b6 <SIM_Init+0x2f6>
			{
				stat = 1;
 80017ae:	2301      	movs	r3, #1
 80017b0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
			if(stat_value == 1 || stat_value == 5)
 80017b4:	e056      	b.n	8001864 <SIM_Init+0x3a4>
			}
			else
			{
				SIM_Send_Command("AT+CEREG?\r");
 80017b6:	481c      	ldr	r0, [pc, #112]	@ (8001828 <SIM_Init+0x368>)
 80017b8:	f000 f96a 	bl	8001a90 <SIM_Send_Command>
				SIM_Receive_Response(response, 5000);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	f241 3188 	movw	r1, #5000	@ 0x1388
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 f98f 	bl	8001ae8 <SIM_Receive_Response>
				HAL_Delay(1000);
 80017ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017ce:	f009 fc33 	bl	800b038 <HAL_Delay>
			if(stat_value == 1 || stat_value == 5)
 80017d2:	e047      	b.n	8001864 <SIM_Init+0x3a4>
 80017d4:	08017388 	.word	0x08017388
 80017d8:	20001898 	.word	0x20001898
 80017dc:	20001a5e 	.word	0x20001a5e
 80017e0:	20001920 	.word	0x20001920
 80017e4:	20001a9e 	.word	0x20001a9e
 80017e8:	20001984 	.word	0x20001984
 80017ec:	08017398 	.word	0x08017398
 80017f0:	0801739c 	.word	0x0801739c
 80017f4:	080173a0 	.word	0x080173a0
 80017f8:	20000724 	.word	0x20000724
 80017fc:	080173a4 	.word	0x080173a4
 8001800:	080173b4 	.word	0x080173b4
 8001804:	080173bc 	.word	0x080173bc
 8001808:	080173c8 	.word	0x080173c8
 800180c:	080173d4 	.word	0x080173d4
 8001810:	080173e0 	.word	0x080173e0
 8001814:	080173ec 	.word	0x080173ec
 8001818:	080173f4 	.word	0x080173f4
 800181c:	080173fc 	.word	0x080173fc
 8001820:	0801740c 	.word	0x0801740c
 8001824:	08017414 	.word	0x08017414
 8001828:	08017420 	.word	0x08017420
 800182c:	0801742c 	.word	0x0801742c
 8001830:	08017434 	.word	0x08017434
 8001834:	08017444 	.word	0x08017444
 8001838:	08017450 	.word	0x08017450
 800183c:	0001d4c0 	.word	0x0001d4c0
 8001840:	0801745c 	.word	0x0801745c
 8001844:	0002bf20 	.word	0x0002bf20
			}
		}
		else
		{
			SIM_Send_Command("AT+CEREG?\r");
 8001848:	486d      	ldr	r0, [pc, #436]	@ (8001a00 <SIM_Init+0x540>)
 800184a:	f000 f921 	bl	8001a90 <SIM_Send_Command>
			SIM_Receive_Response(response, 5000);
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001856:	4618      	mov	r0, r3
 8001858:	f000 f946 	bl	8001ae8 <SIM_Receive_Response>
			HAL_Delay(1000);
 800185c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001860:	f009 fbea 	bl	800b038 <HAL_Delay>
	while(stat != 1)
 8001864:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8001868:	2b01      	cmp	r3, #1
 800186a:	f47f af6f 	bne.w	800174c <SIM_Init+0x28c>
		}
	}

	APN:
 800186e:	e000      	b.n	8001872 <SIM_Init+0x3b2>
			goto APN;
 8001870:	bf00      	nop
	SIM_Send_Command("AT+CNACT?\r");                                                              //Verifica indirizzo IP
 8001872:	4864      	ldr	r0, [pc, #400]	@ (8001a04 <SIM_Init+0x544>)
 8001874:	f000 f90c 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001880:	4618      	mov	r0, r3
 8001882:	f000 f931 	bl	8001ae8 <SIM_Receive_Response>
	if(SIM_Check_IP(response))
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4618      	mov	r0, r3
 800188c:	f000 f956 	bl	8001b3c <SIM_Check_IP>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d16b      	bne.n	800196e <SIM_Init+0x4ae>
	{
		goto TCP;
	}

	sprintf(command, "AT+CGDCONT=1,\"IP\",\"%s\"\r", sys.apn);                                    //Configurazione APN
 8001896:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800189a:	4a5b      	ldr	r2, [pc, #364]	@ (8001a08 <SIM_Init+0x548>)
 800189c:	495b      	ldr	r1, [pc, #364]	@ (8001a0c <SIM_Init+0x54c>)
 800189e:	4618      	mov	r0, r3
 80018a0:	f014 fc26 	bl	80160f0 <siprintf>
	SIM_Send_Command(command);
 80018a4:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 f8f1 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 f916 	bl	8001ae8 <SIM_Receive_Response>
	if(strstr(response, "ERROR") != NULL)
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4953      	ldr	r1, [pc, #332]	@ (8001a10 <SIM_Init+0x550>)
 80018c2:	4618      	mov	r0, r3
 80018c4:	f014 fcae 	bl	8016224 <strstr>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <SIM_Init+0x414>
	{
		return -1;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	e090      	b.n	80019f6 <SIM_Init+0x536>
	}

	SIM_Send_Command("AT+CNACT=1\r");                                                             //Attivazione della rete
 80018d4:	484f      	ldr	r0, [pc, #316]	@ (8001a14 <SIM_Init+0x554>)
 80018d6:	f000 f8db 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	f241 3188 	movw	r1, #5000	@ 0x1388
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f900 	bl	8001ae8 <SIM_Receive_Response>
	if(strstr(response, "+APP PDP: ACTIVE") == NULL)
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	494a      	ldr	r1, [pc, #296]	@ (8001a18 <SIM_Init+0x558>)
 80018ee:	4618      	mov	r0, r3
 80018f0:	f014 fc98 	bl	8016224 <strstr>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d117      	bne.n	800192a <SIM_Init+0x46a>
	{
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 80018fa:	e00d      	b.n	8001918 <SIM_Init+0x458>
		{
			SIM_Send_Command("AT+CNACT=1\r");
 80018fc:	4845      	ldr	r0, [pc, #276]	@ (8001a14 <SIM_Init+0x554>)
 80018fe:	f000 f8c7 	bl	8001a90 <SIM_Send_Command>
			SIM_Receive_Response(response, 5000);
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	f241 3188 	movw	r1, #5000	@ 0x1388
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f8ec 	bl	8001ae8 <SIM_Receive_Response>
			HAL_Delay(1000);
 8001910:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001914:	f009 fb90 	bl	800b038 <HAL_Delay>
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	493e      	ldr	r1, [pc, #248]	@ (8001a18 <SIM_Init+0x558>)
 800191e:	4618      	mov	r0, r3
 8001920:	f014 fc80 	bl	8016224 <strstr>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0e8      	beq.n	80018fc <SIM_Init+0x43c>
		}
	}

	SIM_Send_Command("AT+CNACT?\r");                                                              //Verifica indirizzo IP
 800192a:	4836      	ldr	r0, [pc, #216]	@ (8001a04 <SIM_Init+0x544>)
 800192c:	f000 f8b0 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001938:	4618      	mov	r0, r3
 800193a:	f000 f8d5 	bl	8001ae8 <SIM_Receive_Response>
	while(!SIM_Check_IP(response))
 800193e:	e00d      	b.n	800195c <SIM_Init+0x49c>
	{
		SIM_Send_Command("AT+CNACT?\r");
 8001940:	4830      	ldr	r0, [pc, #192]	@ (8001a04 <SIM_Init+0x544>)
 8001942:	f000 f8a5 	bl	8001a90 <SIM_Send_Command>
		SIM_Receive_Response(response, 5000);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800194e:	4618      	mov	r0, r3
 8001950:	f000 f8ca 	bl	8001ae8 <SIM_Receive_Response>
		HAL_Delay(1000);
 8001954:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001958:	f009 fb6e 	bl	800b038 <HAL_Delay>
	while(!SIM_Check_IP(response))
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4618      	mov	r0, r3
 8001962:	f000 f8eb 	bl	8001b3c <SIM_Check_IP>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0e9      	beq.n	8001940 <SIM_Init+0x480>
	}
	
	TCP:
 800196c:	e000      	b.n	8001970 <SIM_Init+0x4b0>
		goto TCP;
 800196e:	bf00      	nop
	SIM_Send_Command("AT+CIPRXGET=0\r");                                                         //Impostazione ricezione automatica da server TCP
 8001970:	482a      	ldr	r0, [pc, #168]	@ (8001a1c <SIM_Init+0x55c>)
 8001972:	f000 f88d 	bl	8001a90 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001976:	482a      	ldr	r0, [pc, #168]	@ (8001a20 <SIM_Init+0x560>)
 8001978:	f000 fc1e 	bl	80021b8 <SIM_Wait_Response>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d002      	beq.n	8001988 <SIM_Init+0x4c8>
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
 8001986:	e036      	b.n	80019f6 <SIM_Init+0x536>

	sprintf(command, "AT+CIPSTART=\"TCP\",\"%s\",%s\r", sys.TCP.IP_address, sys.TCP.Port);       //Connessione TCP
 8001988:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 800198c:	4b25      	ldr	r3, [pc, #148]	@ (8001a24 <SIM_Init+0x564>)
 800198e:	4a26      	ldr	r2, [pc, #152]	@ (8001a28 <SIM_Init+0x568>)
 8001990:	4926      	ldr	r1, [pc, #152]	@ (8001a2c <SIM_Init+0x56c>)
 8001992:	f014 fbad 	bl	80160f0 <siprintf>
	SIM_Send_Command(command);
 8001996:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800199a:	4618      	mov	r0, r3
 800199c:	f000 f878 	bl	8001a90 <SIM_Send_Command>
	if(SIM_Wait_Response("CONNECT OK") != HAL_OK) return -1;
 80019a0:	4823      	ldr	r0, [pc, #140]	@ (8001a30 <SIM_Init+0x570>)
 80019a2:	f000 fc09 	bl	80021b8 <SIM_Wait_Response>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d002      	beq.n	80019b2 <SIM_Init+0x4f2>
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295
 80019b0:	e021      	b.n	80019f6 <SIM_Init+0x536>

	SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        //Verifica connessione al server TCP
 80019b2:	4820      	ldr	r0, [pc, #128]	@ (8001a34 <SIM_Init+0x574>)
 80019b4:	f000 f86c 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response, 5000);
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	f241 3188 	movw	r1, #5000	@ 0x1388
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 f891 	bl	8001ae8 <SIM_Receive_Response>
	while(!SIM_Check_TCP_State(response))
 80019c6:	e00d      	b.n	80019e4 <SIM_Init+0x524>
	{
		SIM_Send_Command("AT+CIPSTATUS=0\r");
 80019c8:	481a      	ldr	r0, [pc, #104]	@ (8001a34 <SIM_Init+0x574>)
 80019ca:	f000 f861 	bl	8001a90 <SIM_Send_Command>
		SIM_Receive_Response(response, 5000);
 80019ce:	f107 0314 	add.w	r3, r7, #20
 80019d2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f886 	bl	8001ae8 <SIM_Receive_Response>
		HAL_Delay(1000);
 80019dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019e0:	f009 fb2a 	bl	800b038 <HAL_Delay>
	while(!SIM_Check_TCP_State(response))
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 f8db 	bl	8001ba4 <SIM_Check_TCP_State>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0e9      	beq.n	80019c8 <SIM_Init+0x508>
	}

	return 0;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	08017420 	.word	0x08017420
 8001a04:	0801746c 	.word	0x0801746c
 8001a08:	20001898 	.word	0x20001898
 8001a0c:	08017478 	.word	0x08017478
 8001a10:	08017490 	.word	0x08017490
 8001a14:	08017498 	.word	0x08017498
 8001a18:	080174a4 	.word	0x080174a4
 8001a1c:	080174b8 	.word	0x080174b8
 8001a20:	080173a0 	.word	0x080173a0
 8001a24:	20001984 	.word	0x20001984
 8001a28:	20001920 	.word	0x20001920
 8001a2c:	080174c8 	.word	0x080174c8
 8001a30:	080174e4 	.word	0x080174e4
 8001a34:	080174f0 	.word	0x080174f0

08001a38 <SIM_Power_On>:

/*------ACCENSIONE DEL MODULO LTE------*/
void SIM_Power_On(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_SET);
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a46:	f00c fce1 	bl	800e40c <HAL_GPIO_WritePin>
	HAL_Delay(1500);
 8001a4a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001a4e:	f009 faf3 	bl	800b038 <HAL_Delay>
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_RESET);
 8001a52:	2200      	movs	r2, #0
 8001a54:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a5c:	f00c fcd6 	bl	800e40c <HAL_GPIO_WritePin>
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <SIM_Power_Off>:

/*------SPEGNIMENTO DEL MODULO LTE------*/
void SIM_Power_Off(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_SET);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a72:	f00c fccb 	bl	800e40c <HAL_GPIO_WritePin>
	HAL_Delay(1500);
 8001a76:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001a7a:	f009 fadd 	bl	800b038 <HAL_Delay>
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_RESET);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a88:	f00c fcc0 	bl	800e40c <HAL_GPIO_WritePin>
}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <SIM_Send_Command>:
	HAL_GPIO_WritePin(LTE_RESET_GPIO_Port, LTE_RESET_Pin, GPIO_PIN_RESET);
}

/*------INVIO COMANDO AL MODULO LTE------*/
void SIM_Send_Command(char* command)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7fe fba3 	bl	80001e4 <strlen>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(SIM_UART, (uint8_t*)command, len, 100);
 8001aa2:	89fa      	ldrh	r2, [r7, #14]
 8001aa4:	2364      	movs	r3, #100	@ 0x64
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	4803      	ldr	r0, [pc, #12]	@ (8001ab8 <SIM_Send_Command+0x28>)
 8001aaa:	f012 ffd9 	bl	8014a60 <HAL_UART_Transmit>
}
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000724 	.word	0x20000724

08001abc <SIM_Send_Command_DMA>:

/*------INVIO COMANDO AL MODULO LTE (DMA)------*/
void SIM_Send_Command_DMA(char* command)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7fe fb8d 	bl	80001e4 <strlen>
 8001aca:	4603      	mov	r3, r0
 8001acc:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit_DMA(SIM_UART, (uint8_t*)command, len);
 8001ace:	89fb      	ldrh	r3, [r7, #14]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4803      	ldr	r0, [pc, #12]	@ (8001ae4 <SIM_Send_Command_DMA+0x28>)
 8001ad6:	f013 f915 	bl	8014d04 <HAL_UART_Transmit_DMA>
}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000724 	.word	0x20000724

08001ae8 <SIM_Receive_Response>:

/*------RICEZIONE RISPOSTA DAL MODULO LTE------*/
uint16_t SIM_Receive_Response(char* rx, uint32_t timeout_ms)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af02      	add	r7, sp, #8
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
	uint16_t RxLen = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	817b      	strh	r3, [r7, #10]
	uint32_t start_time = HAL_GetTick();
 8001af6:	f009 fa93 	bl	800b020 <HAL_GetTick>
 8001afa:	60f8      	str	r0, [r7, #12]

	while ((HAL_GetTick() - start_time) < timeout_ms)
 8001afc:	e00d      	b.n	8001b1a <SIM_Receive_Response+0x32>
	{
		HAL_UARTEx_ReceiveToIdle(SIM_UART, (uint8_t *)rx, 256, &RxLen, 500);
 8001afe:	f107 030a 	add.w	r3, r7, #10
 8001b02:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001b06:	9200      	str	r2, [sp, #0]
 8001b08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	480a      	ldr	r0, [pc, #40]	@ (8001b38 <SIM_Receive_Response+0x50>)
 8001b10:	f014 f90d 	bl	8015d2e <HAL_UARTEx_ReceiveToIdle>
		if (RxLen > 0)
 8001b14:	897b      	ldrh	r3, [r7, #10]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d108      	bne.n	8001b2c <SIM_Receive_Response+0x44>
	while ((HAL_GetTick() - start_time) < timeout_ms)
 8001b1a:	f009 fa81 	bl	800b020 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d8e9      	bhi.n	8001afe <SIM_Receive_Response+0x16>
 8001b2a:	e000      	b.n	8001b2e <SIM_Receive_Response+0x46>
			break;
 8001b2c:	bf00      	nop
	}
	return RxLen;
 8001b2e:	897b      	ldrh	r3, [r7, #10]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000724 	.word	0x20000724

08001b3c <SIM_Check_IP>:

/*------CONTROLLO INDIRIZZO IP------*/
int SIM_Check_IP(const char* response)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08c      	sub	sp, #48	@ 0x30
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	char* cnact_pos = strstr(response, "+CNACT:");
 8001b44:	4915      	ldr	r1, [pc, #84]	@ (8001b9c <SIM_Check_IP+0x60>)
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f014 fb6c 	bl	8016224 <strstr>
 8001b4c:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if(cnact_pos != NULL) 
 8001b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d01d      	beq.n	8001b90 <SIM_Check_IP+0x54>
	{
		int status;
		char ip_addr[32] = {0};
 8001b54:	f107 0308 	add.w	r3, r7, #8
 8001b58:	2220      	movs	r2, #32
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f014 fb27 	bl	80161b0 <memset>
		if(sscanf(cnact_pos, "+CNACT: %d,%31s", &status, ip_addr) == 2)
 8001b62:	f107 0308 	add.w	r3, r7, #8
 8001b66:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001b6a:	490d      	ldr	r1, [pc, #52]	@ (8001ba0 <SIM_Check_IP+0x64>)
 8001b6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001b6e:	f014 fae1 	bl	8016134 <siscanf>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d10b      	bne.n	8001b90 <SIM_Check_IP+0x54>
		{
			return (status == 1 && strlen(ip_addr) > 0) ? 1 : 0;
 8001b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d106      	bne.n	8001b8c <SIM_Check_IP+0x50>
 8001b7e:	f107 0308 	add.w	r3, r7, #8
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <SIM_Check_IP+0x50>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e002      	b.n	8001b92 <SIM_Check_IP+0x56>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	e000      	b.n	8001b92 <SIM_Check_IP+0x56>
		}
	}
	return 0;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3730      	adds	r7, #48	@ 0x30
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	08017500 	.word	0x08017500
 8001ba0:	08017508 	.word	0x08017508

08001ba4 <SIM_Check_TCP_State>:
    return 0;
}

/*------CONTROLLO STATO CONNESSIONE TCP------*/
int SIM_Check_TCP_State(const char* response)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
    char* cipstatus_pos = strstr(response, "+CIPSTATUS: 0");
 8001bac:	490a      	ldr	r1, [pc, #40]	@ (8001bd8 <SIM_Check_TCP_State+0x34>)
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f014 fb38 	bl	8016224 <strstr>
 8001bb4:	60f8      	str	r0, [r7, #12]
    if(cipstatus_pos != NULL) {
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <SIM_Check_TCP_State+0x2a>
        // Cerca "CONNECTED" nella stessa riga
        if(strstr(cipstatus_pos, "CONNECTED") != NULL) {
 8001bbc:	4907      	ldr	r1, [pc, #28]	@ (8001bdc <SIM_Check_TCP_State+0x38>)
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f014 fb30 	bl	8016224 <strstr>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <SIM_Check_TCP_State+0x2a>
            return 1;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <SIM_Check_TCP_State+0x2c>
        }
    }
    return 0;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	08017534 	.word	0x08017534
 8001bdc:	08017544 	.word	0x08017544

08001be0 <SIM_Parse_Command>:

/*------PARSING MESSAGGIO MQTT------*/
void SIM_Parse_Command(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
	char* buf = (char*)sim_rx_buffer;
 8001be6:	4b7b      	ldr	r3, [pc, #492]	@ (8001dd4 <SIM_Parse_Command+0x1f4>)
 8001be8:	60fb      	str	r3, [r7, #12]

	if(strncmp(buf, "+CMD,", 5) == 0)
 8001bea:	2205      	movs	r2, #5
 8001bec:	497a      	ldr	r1, [pc, #488]	@ (8001dd8 <SIM_Parse_Command+0x1f8>)
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f014 faf3 	bl	80161da <strncmp>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f040 80e7 	bne.w	8001dca <SIM_Parse_Command+0x1ea>
	{
		char* pos = buf + 5;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3305      	adds	r3, #5
 8001c00:	60bb      	str	r3, [r7, #8]
		// Estrai il valore del comando (cmd_val) come stringa
		char cmd_str[8] = {0};
 8001c02:	463b      	mov	r3, r7
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
		int i = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
		while(pos[i] != ',' && pos[i] != '\0' && i < 7) 
 8001c0e:	e00b      	b.n	8001c28 <SIM_Parse_Command+0x48>
		{
			cmd_str[i] = pos[i];
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	4413      	add	r3, r2
 8001c16:	7819      	ldrb	r1, [r3, #0]
 8001c18:	463a      	mov	r2, r7
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	460a      	mov	r2, r1
 8001c20:	701a      	strb	r2, [r3, #0]
			i++;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	3301      	adds	r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
		while(pos[i] != ',' && pos[i] != '\0' && i < 7) 
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b2c      	cmp	r3, #44	@ 0x2c
 8001c32:	d008      	beq.n	8001c46 <SIM_Parse_Command+0x66>
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	4413      	add	r3, r2
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d002      	beq.n	8001c46 <SIM_Parse_Command+0x66>
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	dde4      	ble.n	8001c10 <SIM_Parse_Command+0x30>
		}
		cmd_str[i] = '\0';
 8001c46:	463a      	mov	r2, r7
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]

		// Avanza oltre la virgola per eventuale parsing successivo
		char* data_pos = pos + i;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	4413      	add	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
		if(*data_pos == ',') data_pos++;
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b2c      	cmp	r3, #44	@ 0x2c
 8001c5e:	d102      	bne.n	8001c66 <SIM_Parse_Command+0x86>
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	3301      	adds	r3, #1
 8001c64:	613b      	str	r3, [r7, #16]

		if(strcmp(cmd_str, "IDL") == 0) 
 8001c66:	463b      	mov	r3, r7
 8001c68:	495c      	ldr	r1, [pc, #368]	@ (8001ddc <SIM_Parse_Command+0x1fc>)
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fab0 	bl	80001d0 <strcmp>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d105      	bne.n	8001c82 <SIM_Parse_Command+0xa2>
		{
			flags.CMD.Idle = 1;
 8001c76:	4a5a      	ldr	r2, [pc, #360]	@ (8001de0 <SIM_Parse_Command+0x200>)
 8001c78:	7893      	ldrb	r3, [r2, #2]
 8001c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c7e:	7093      	strb	r3, [r2, #2]
		else if(strcmp(cmd_str, "RST") == 0) 
		{
			HAL_NVIC_SystemReset();
		}
	}
}
 8001c80:	e0a3      	b.n	8001dca <SIM_Parse_Command+0x1ea>
		else if(strcmp(cmd_str, "SRT") == 0) 
 8001c82:	463b      	mov	r3, r7
 8001c84:	4957      	ldr	r1, [pc, #348]	@ (8001de4 <SIM_Parse_Command+0x204>)
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe faa2 	bl	80001d0 <strcmp>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d105      	bne.n	8001c9e <SIM_Parse_Command+0xbe>
			flags.CMD.Start_Meas = 1;
 8001c92:	4a53      	ldr	r2, [pc, #332]	@ (8001de0 <SIM_Parse_Command+0x200>)
 8001c94:	7893      	ldrb	r3, [r2, #2]
 8001c96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c9a:	7093      	strb	r3, [r2, #2]
}
 8001c9c:	e095      	b.n	8001dca <SIM_Parse_Command+0x1ea>
		else if(strcmp(cmd_str, "PNG") == 0) 
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	4951      	ldr	r1, [pc, #324]	@ (8001de8 <SIM_Parse_Command+0x208>)
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fa94 	bl	80001d0 <strcmp>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d105      	bne.n	8001cba <SIM_Parse_Command+0xda>
			flags.CMD.Ping = 1;
 8001cae:	4a4c      	ldr	r2, [pc, #304]	@ (8001de0 <SIM_Parse_Command+0x200>)
 8001cb0:	7893      	ldrb	r3, [r2, #2]
 8001cb2:	f043 0308 	orr.w	r3, r3, #8
 8001cb6:	7093      	strb	r3, [r2, #2]
}
 8001cb8:	e087      	b.n	8001dca <SIM_Parse_Command+0x1ea>
		else if(strcmp(cmd_str, "SND") == 0) 
 8001cba:	463b      	mov	r3, r7
 8001cbc:	494b      	ldr	r1, [pc, #300]	@ (8001dec <SIM_Parse_Command+0x20c>)
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe fa86 	bl	80001d0 <strcmp>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d119      	bne.n	8001cfe <SIM_Parse_Command+0x11e>
			if(strcmp(data_pos, "1") == 0)
 8001cca:	4949      	ldr	r1, [pc, #292]	@ (8001df0 <SIM_Parse_Command+0x210>)
 8001ccc:	6938      	ldr	r0, [r7, #16]
 8001cce:	f7fe fa7f 	bl	80001d0 <strcmp>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d105      	bne.n	8001ce4 <SIM_Parse_Command+0x104>
				flags.CMD.Data_Request = 1;
 8001cd8:	4a41      	ldr	r2, [pc, #260]	@ (8001de0 <SIM_Parse_Command+0x200>)
 8001cda:	7893      	ldrb	r3, [r2, #2]
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	7093      	strb	r3, [r2, #2]
}
 8001ce2:	e072      	b.n	8001dca <SIM_Parse_Command+0x1ea>
			else if(strcmp(data_pos, "0") == 0)
 8001ce4:	4943      	ldr	r1, [pc, #268]	@ (8001df4 <SIM_Parse_Command+0x214>)
 8001ce6:	6938      	ldr	r0, [r7, #16]
 8001ce8:	f7fe fa72 	bl	80001d0 <strcmp>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d16b      	bne.n	8001dca <SIM_Parse_Command+0x1ea>
				flags.CMD.Data_Request = 0;
 8001cf2:	4a3b      	ldr	r2, [pc, #236]	@ (8001de0 <SIM_Parse_Command+0x200>)
 8001cf4:	7893      	ldrb	r3, [r2, #2]
 8001cf6:	f023 0301 	bic.w	r3, r3, #1
 8001cfa:	7093      	strb	r3, [r2, #2]
}
 8001cfc:	e065      	b.n	8001dca <SIM_Parse_Command+0x1ea>
		else if(strcmp(cmd_str, "MSR") == 0) 
 8001cfe:	463b      	mov	r3, r7
 8001d00:	493d      	ldr	r1, [pc, #244]	@ (8001df8 <SIM_Parse_Command+0x218>)
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fa64 	bl	80001d0 <strcmp>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d117      	bne.n	8001d3e <SIM_Parse_Command+0x15e>
			if(!flags.CMD.Measure_Request) 
 8001d0e:	4b34      	ldr	r3, [pc, #208]	@ (8001de0 <SIM_Parse_Command+0x200>)
 8001d10:	789b      	ldrb	r3, [r3, #2]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d156      	bne.n	8001dca <SIM_Parse_Command+0x1ea>
				LED_Start(RED_LED, FAST, LOW);
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	2100      	movs	r1, #0
 8001d20:	2004      	movs	r0, #4
 8001d22:	f001 fcf9 	bl	8003718 <LED_Start>
				Send_Measure_Addr = Saved_Bytes;
 8001d26:	4b35      	ldr	r3, [pc, #212]	@ (8001dfc <SIM_Parse_Command+0x21c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a35      	ldr	r2, [pc, #212]	@ (8001e00 <SIM_Parse_Command+0x220>)
 8001d2c:	6013      	str	r3, [r2, #0]
				flags.CMD.Measure_Request = 1;
 8001d2e:	4a2c      	ldr	r2, [pc, #176]	@ (8001de0 <SIM_Parse_Command+0x200>)
 8001d30:	7893      	ldrb	r3, [r2, #2]
 8001d32:	f043 0302 	orr.w	r3, r3, #2
 8001d36:	7093      	strb	r3, [r2, #2]
				Switch_Buffer();
 8001d38:	f004 f804 	bl	8005d44 <Switch_Buffer>
}
 8001d3c:	e045      	b.n	8001dca <SIM_Parse_Command+0x1ea>
		else if(strcmp(cmd_str, "OTA") == 0) 
 8001d3e:	463b      	mov	r3, r7
 8001d40:	4930      	ldr	r1, [pc, #192]	@ (8001e04 <SIM_Parse_Command+0x224>)
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fa44 	bl	80001d0 <strcmp>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d109      	bne.n	8001d62 <SIM_Parse_Command+0x182>
			if(state == IDLE) 
 8001d4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e08 <SIM_Parse_Command+0x228>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d139      	bne.n	8001dca <SIM_Parse_Command+0x1ea>
				flags.CMD.Start_OTA = 1;
 8001d56:	4a22      	ldr	r2, [pc, #136]	@ (8001de0 <SIM_Parse_Command+0x200>)
 8001d58:	7893      	ldrb	r3, [r2, #2]
 8001d5a:	f043 0304 	orr.w	r3, r3, #4
 8001d5e:	7093      	strb	r3, [r2, #2]
}
 8001d60:	e033      	b.n	8001dca <SIM_Parse_Command+0x1ea>
		else if(strcmp(cmd_str, "SET") == 0) 
 8001d62:	463b      	mov	r3, r7
 8001d64:	4929      	ldr	r1, [pc, #164]	@ (8001e0c <SIM_Parse_Command+0x22c>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fa32 	bl	80001d0 <strcmp>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10c      	bne.n	8001d8c <SIM_Parse_Command+0x1ac>
			if(state == IDLE) 
 8001d72:	4b25      	ldr	r3, [pc, #148]	@ (8001e08 <SIM_Parse_Command+0x228>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d127      	bne.n	8001dca <SIM_Parse_Command+0x1ea>
				flags.CMD.Set_Config = 1;
 8001d7a:	4a19      	ldr	r2, [pc, #100]	@ (8001de0 <SIM_Parse_Command+0x200>)
 8001d7c:	7893      	ldrb	r3, [r2, #2]
 8001d7e:	f043 0310 	orr.w	r3, r3, #16
 8001d82:	7093      	strb	r3, [r2, #2]
				SIM_Parse_Cfg(data_pos); 
 8001d84:	6938      	ldr	r0, [r7, #16]
 8001d86:	f000 f847 	bl	8001e18 <SIM_Parse_Cfg>
}
 8001d8a:	e01e      	b.n	8001dca <SIM_Parse_Command+0x1ea>
		else if(strcmp(cmd_str, "GET") == 0) 
 8001d8c:	463b      	mov	r3, r7
 8001d8e:	4920      	ldr	r1, [pc, #128]	@ (8001e10 <SIM_Parse_Command+0x230>)
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fa1d 	bl	80001d0 <strcmp>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10c      	bne.n	8001db6 <SIM_Parse_Command+0x1d6>
			if(state == IDLE) 
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e08 <SIM_Parse_Command+0x228>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d112      	bne.n	8001dca <SIM_Parse_Command+0x1ea>
				flags.CMD.Get_Config = 1;
 8001da4:	4a0e      	ldr	r2, [pc, #56]	@ (8001de0 <SIM_Parse_Command+0x200>)
 8001da6:	7893      	ldrb	r3, [r2, #2]
 8001da8:	f043 0320 	orr.w	r3, r3, #32
 8001dac:	7093      	strb	r3, [r2, #2]
				SIM_Get_Cfg(data_pos);
 8001dae:	6938      	ldr	r0, [r7, #16]
 8001db0:	f000 f8a6 	bl	8001f00 <SIM_Get_Cfg>
}
 8001db4:	e009      	b.n	8001dca <SIM_Parse_Command+0x1ea>
		else if(strcmp(cmd_str, "RST") == 0) 
 8001db6:	463b      	mov	r3, r7
 8001db8:	4916      	ldr	r1, [pc, #88]	@ (8001e14 <SIM_Parse_Command+0x234>)
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fa08 	bl	80001d0 <strcmp>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <SIM_Parse_Command+0x1ea>
			HAL_NVIC_SystemReset();
 8001dc6:	f00a fe10 	bl	800c9ea <HAL_NVIC_SystemReset>
}
 8001dca:	bf00      	nop
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200051fc 	.word	0x200051fc
 8001dd8:	08017550 	.word	0x08017550
 8001ddc:	08017558 	.word	0x08017558
 8001de0:	200019e8 	.word	0x200019e8
 8001de4:	0801755c 	.word	0x0801755c
 8001de8:	08017560 	.word	0x08017560
 8001dec:	08017564 	.word	0x08017564
 8001df0:	08017568 	.word	0x08017568
 8001df4:	0801756c 	.word	0x0801756c
 8001df8:	08017570 	.word	0x08017570
 8001dfc:	20004bc8 	.word	0x20004bc8
 8001e00:	20004bd0 	.word	0x20004bd0
 8001e04:	08017574 	.word	0x08017574
 8001e08:	2000083c 	.word	0x2000083c
 8001e0c:	08017578 	.word	0x08017578
 8001e10:	0801757c 	.word	0x0801757c
 8001e14:	08017580 	.word	0x08017580

08001e18 <SIM_Parse_Cfg>:

/*-----PARSING CONFIGURAZIONE-----*/
void SIM_Parse_Cfg(char* cmd_start)
{   
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
    memset(cfg_var, 0, sizeof(cfg_var));
 8001e20:	2214      	movs	r2, #20
 8001e22:	2100      	movs	r1, #0
 8001e24:	4833      	ldr	r0, [pc, #204]	@ (8001ef4 <SIM_Parse_Cfg+0xdc>)
 8001e26:	f014 f9c3 	bl	80161b0 <memset>
    memset(new_cfg_val, 0, sizeof(new_cfg_val));
 8001e2a:	220a      	movs	r2, #10
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4832      	ldr	r0, [pc, #200]	@ (8001ef8 <SIM_Parse_Cfg+0xe0>)
 8001e30:	f014 f9be 	bl	80161b0 <memset>
    
	char* pos = cmd_start + 4; // Salta "SET,"
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3304      	adds	r3, #4
 8001e38:	61fb      	str	r3, [r7, #28]

	// Prima virgola (dopo SET)
	char* comma1 = strchr(pos, ',');
 8001e3a:	212c      	movs	r1, #44	@ 0x2c
 8001e3c:	69f8      	ldr	r0, [r7, #28]
 8001e3e:	f014 f9bf 	bl	80161c0 <strchr>
 8001e42:	61b8      	str	r0, [r7, #24]
	if(!comma1) return;
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d04c      	beq.n	8001ee4 <SIM_Parse_Cfg+0xcc>

	// Seconda virgola
	char* comma2 = strchr(comma1 + 1, ',');
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	212c      	movs	r1, #44	@ 0x2c
 8001e50:	4618      	mov	r0, r3
 8001e52:	f014 f9b5 	bl	80161c0 <strchr>
 8001e56:	6178      	str	r0, [r7, #20]
	if(!comma2) return;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d044      	beq.n	8001ee8 <SIM_Parse_Cfg+0xd0>

	// Terza virgola
	char* comma3 = strchr(comma2 + 1, ',');
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	3301      	adds	r3, #1
 8001e62:	212c      	movs	r1, #44	@ 0x2c
 8001e64:	4618      	mov	r0, r3
 8001e66:	f014 f9ab 	bl	80161c0 <strchr>
 8001e6a:	6138      	str	r0, [r7, #16]
	if(!comma3) return;
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d03c      	beq.n	8001eec <SIM_Parse_Cfg+0xd4>

	// Estrai cfg_var (tra SET, e prima virgola)
	int var_len = comma2 - comma1 - 1;
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	60fb      	str	r3, [r7, #12]
	if(var_len > 0 && var_len < sizeof(cfg_var)) 
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	dd0e      	ble.n	8001ea0 <SIM_Parse_Cfg+0x88>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2b13      	cmp	r3, #19
 8001e86:	d80b      	bhi.n	8001ea0 <SIM_Parse_Cfg+0x88>
	{
		strncpy(cfg_var, comma1 + 1, var_len);
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4818      	ldr	r0, [pc, #96]	@ (8001ef4 <SIM_Parse_Cfg+0xdc>)
 8001e92:	f014 f9b4 	bl	80161fe <strncpy>
		cfg_var[var_len] = '\0';
 8001e96:	4a17      	ldr	r2, [pc, #92]	@ (8001ef4 <SIM_Parse_Cfg+0xdc>)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
	}

	// Estrai cfg_idx
	cfg_idx = atoi(comma2 + 1);
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f014 f899 	bl	8015fdc <atoi>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4a13      	ldr	r2, [pc, #76]	@ (8001efc <SIM_Parse_Cfg+0xe4>)
 8001eae:	6013      	str	r3, [r2, #0]

	// Estrai new_cfg_val
	int val_len = strlen(comma3 + 1);
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe f995 	bl	80001e4 <strlen>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	60bb      	str	r3, [r7, #8]
	if(val_len > 0 && val_len < sizeof(new_cfg_val)) 
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	dd14      	ble.n	8001eee <SIM_Parse_Cfg+0xd6>
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2b09      	cmp	r3, #9
 8001ec8:	d811      	bhi.n	8001eee <SIM_Parse_Cfg+0xd6>
	{
		strncpy(new_cfg_val, comma3 + 1, val_len);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4809      	ldr	r0, [pc, #36]	@ (8001ef8 <SIM_Parse_Cfg+0xe0>)
 8001ed4:	f014 f993 	bl	80161fe <strncpy>
		new_cfg_val[val_len] = '\0';
 8001ed8:	4a07      	ldr	r2, [pc, #28]	@ (8001ef8 <SIM_Parse_Cfg+0xe0>)
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	4413      	add	r3, r2
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]
 8001ee2:	e004      	b.n	8001eee <SIM_Parse_Cfg+0xd6>
	if(!comma1) return;
 8001ee4:	bf00      	nop
 8001ee6:	e002      	b.n	8001eee <SIM_Parse_Cfg+0xd6>
	if(!comma2) return;
 8001ee8:	bf00      	nop
 8001eea:	e000      	b.n	8001eee <SIM_Parse_Cfg+0xd6>
	if(!comma3) return;
 8001eec:	bf00      	nop
	}
}
 8001eee:	3720      	adds	r7, #32
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	200059cc 	.word	0x200059cc
 8001ef8:	200059e4 	.word	0x200059e4
 8001efc:	200059e0 	.word	0x200059e0

08001f00 <SIM_Get_Cfg>:

/*-----RECUPERO VALORE DI CONFIGURAZIONE-----*/
void SIM_Get_Cfg(char* cmd_start)
{   
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	memset(cfg_var, 0, sizeof(cfg_var));
 8001f08:	2214      	movs	r2, #20
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4821      	ldr	r0, [pc, #132]	@ (8001f94 <SIM_Get_Cfg+0x94>)
 8001f0e:	f014 f94f 	bl	80161b0 <memset>
	memset(new_cfg_val, 0, sizeof(new_cfg_val));
 8001f12:	220a      	movs	r2, #10
 8001f14:	2100      	movs	r1, #0
 8001f16:	4820      	ldr	r0, [pc, #128]	@ (8001f98 <SIM_Get_Cfg+0x98>)
 8001f18:	f014 f94a 	bl	80161b0 <memset>
	
	char* pos = cmd_start + 4; // Salta "GET,"
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3304      	adds	r3, #4
 8001f20:	617b      	str	r3, [r7, #20]

	// Prima virgola (dopo GET)
	char* comma1 = strchr(pos, ',');
 8001f22:	212c      	movs	r1, #44	@ 0x2c
 8001f24:	6978      	ldr	r0, [r7, #20]
 8001f26:	f014 f94b 	bl	80161c0 <strchr>
 8001f2a:	6138      	str	r0, [r7, #16]
	if(!comma1) return;
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d029      	beq.n	8001f86 <SIM_Get_Cfg+0x86>

	// Seconda virgola
	char* comma2 = strchr(comma1 + 1, ',');
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	3301      	adds	r3, #1
 8001f36:	212c      	movs	r1, #44	@ 0x2c
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f014 f941 	bl	80161c0 <strchr>
 8001f3e:	60f8      	str	r0, [r7, #12]
	if(!comma2) return;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d021      	beq.n	8001f8a <SIM_Get_Cfg+0x8a>

	// Estrai cfg_var (tra GET, e prima virgola)
	int var_len = comma2 - comma1 - 1;
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	60bb      	str	r3, [r7, #8]
	if(var_len > 0 && var_len < sizeof(cfg_var)) 
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	dd0e      	ble.n	8001f74 <SIM_Get_Cfg+0x74>
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2b13      	cmp	r3, #19
 8001f5a:	d80b      	bhi.n	8001f74 <SIM_Get_Cfg+0x74>
	{
		strncpy(cfg_var, comma1 + 1, var_len);
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	4619      	mov	r1, r3
 8001f64:	480b      	ldr	r0, [pc, #44]	@ (8001f94 <SIM_Get_Cfg+0x94>)
 8001f66:	f014 f94a 	bl	80161fe <strncpy>
		cfg_var[var_len] = '\0';
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f94 <SIM_Get_Cfg+0x94>)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	4413      	add	r3, r2
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]
	}

	// Estrai cfg_idx
	cfg_idx = atoi(comma2 + 1);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3301      	adds	r3, #1
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f014 f82f 	bl	8015fdc <atoi>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	4a06      	ldr	r2, [pc, #24]	@ (8001f9c <SIM_Get_Cfg+0x9c>)
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	e002      	b.n	8001f8c <SIM_Get_Cfg+0x8c>
	if(!comma1) return;
 8001f86:	bf00      	nop
 8001f88:	e000      	b.n	8001f8c <SIM_Get_Cfg+0x8c>
	if(!comma2) return;
 8001f8a:	bf00      	nop
}
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200059cc 	.word	0x200059cc
 8001f98:	200059e4 	.word	0x200059e4
 8001f9c:	200059e0 	.word	0x200059e0

08001fa0 <SIM_Send_TCP>:
    SIM_Wait_Response("OK");
}

/*-----INVIO DATI AL SERVER TCP-----*/
void SIM_Send_TCP(char* data)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b090      	sub	sp, #64	@ 0x40
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
    char cmd[50];
	uint16_t size = (uint16_t)strlen(data);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7fe f91b 	bl	80001e4 <strlen>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    sprintf(cmd, "AT+CIPSEND=%u\r", size);
 8001fb2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001fb4:	f107 030c 	add.w	r3, r7, #12
 8001fb8:	490c      	ldr	r1, [pc, #48]	@ (8001fec <SIM_Send_TCP+0x4c>)
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f014 f898 	bl	80160f0 <siprintf>
    SIM_Send_Command(cmd);
 8001fc0:	f107 030c 	add.w	r3, r7, #12
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fd63 	bl	8001a90 <SIM_Send_Command>

    SIM_Wait_Response(">");
 8001fca:	4809      	ldr	r0, [pc, #36]	@ (8001ff0 <SIM_Send_TCP+0x50>)
 8001fcc:	f000 f8f4 	bl	80021b8 <SIM_Wait_Response>

    HAL_UART_Transmit(SIM_UART, (uint8_t*)data, size, 1000);
 8001fd0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001fd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4806      	ldr	r0, [pc, #24]	@ (8001ff4 <SIM_Send_TCP+0x54>)
 8001fda:	f012 fd41 	bl	8014a60 <HAL_UART_Transmit>
    
    SIM_Wait_Response("SEND OK");
 8001fde:	4806      	ldr	r0, [pc, #24]	@ (8001ff8 <SIM_Send_TCP+0x58>)
 8001fe0:	f000 f8ea 	bl	80021b8 <SIM_Wait_Response>
}
 8001fe4:	bf00      	nop
 8001fe6:	3740      	adds	r7, #64	@ 0x40
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	080175b0 	.word	0x080175b0
 8001ff0:	080175ac 	.word	0x080175ac
 8001ff4:	20000724 	.word	0x20000724
 8001ff8:	080175c0 	.word	0x080175c0

08001ffc <SIM_Send_TCP_Chunk_DMA>:

/*-----INVIO DATI AL SERVER TCP CON DMA-----*/
void SIM_Send_TCP_Chunk_DMA(uint16_t size)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b090      	sub	sp, #64	@ 0x40
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	80fb      	strh	r3, [r7, #6]
    char cmd[50];

    sprintf(cmd, "AT+CIPSEND=%u\r", size);
 8002006:	88fa      	ldrh	r2, [r7, #6]
 8002008:	f107 030c 	add.w	r3, r7, #12
 800200c:	4906      	ldr	r1, [pc, #24]	@ (8002028 <SIM_Send_TCP_Chunk_DMA+0x2c>)
 800200e:	4618      	mov	r0, r3
 8002010:	f014 f86e 	bl	80160f0 <siprintf>
    SIM_Send_Command_DMA(cmd);
 8002014:	f107 030c 	add.w	r3, r7, #12
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fd4f 	bl	8001abc <SIM_Send_Command_DMA>
}
 800201e:	bf00      	nop
 8002020:	3740      	adds	r7, #64	@ 0x40
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	080175b0 	.word	0x080175b0

0800202c <SIM_Send_Infos>:

/*-----INVIO INFORMAZIONI AL SERVER MQTT-----*/
void SIM_Send_Infos(void)
{
 800202c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800202e:	f5ad 7d3f 	sub.w	sp, sp, #764	@ 0x2fc
 8002032:	af10      	add	r7, sp, #64	@ 0x40
	uint16_t len = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	f8a7 32b6 	strh.w	r3, [r7, #694]	@ 0x2b6
	char command[128];
	char infos[512];
	uint16_t new_temp = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	f8a7 32b4 	strh.w	r3, [r7, #692]	@ 0x2b4

	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 8002040:	4953      	ldr	r1, [pc, #332]	@ (8002190 <SIM_Send_Infos+0x164>)
 8002042:	203b      	movs	r0, #59	@ 0x3b
 8002044:	f000 fb40 	bl	80026c8 <BC_MultiRead_Reg>
	INA3221_Read_Measure(&Supply);
 8002048:	4852      	ldr	r0, [pc, #328]	@ (8002194 <SIM_Send_Infos+0x168>)
 800204a:	f7fe ffed 	bl	8001028 <INA3221_Read_Measure>
	if((new_temp = Read_Temperature()) != 0)
 800204e:	f7fe ff8b 	bl	8000f68 <Read_Temperature>
 8002052:	4603      	mov	r3, r0
 8002054:	f8a7 32b4 	strh.w	r3, [r7, #692]	@ 0x2b4
 8002058:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	@ 0x2b4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <SIM_Send_Infos+0x3c>
	{
		Temperature = new_temp;
 8002060:	4a4d      	ldr	r2, [pc, #308]	@ (8002198 <SIM_Send_Infos+0x16c>)
 8002062:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	@ 0x2b4
 8002066:	8013      	strh	r3, [r2, #0]
	}
	uint16_t fw_ver = FW_VERSION;
 8002068:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800206c:	f8a7 32b2 	strh.w	r3, [r7, #690]	@ 0x2b2

	sprintf(infos, "R:%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", config.device_id, fw_ver, sys.onDate.Year, sys.onDate.Month, sys.onDate.Date, sys.onTime.Hours, sys.onTime.Minutes, sys.onTime.Seconds, Vbatt, config.samp_freq, config.buffering_secs, Supply.v1, Supply.v2, Supply.v3, Supply.i1, Supply.i2, Supply.i3, Temperature);
 8002070:	4b4a      	ldr	r3, [pc, #296]	@ (800219c <SIM_Send_Infos+0x170>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	469c      	mov	ip, r3
 8002076:	f8b7 42b2 	ldrh.w	r4, [r7, #690]	@ 0x2b2
 800207a:	4b49      	ldr	r3, [pc, #292]	@ (80021a0 <SIM_Send_Infos+0x174>)
 800207c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002080:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002084:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002086:	4b46      	ldr	r3, [pc, #280]	@ (80021a0 <SIM_Send_Infos+0x174>)
 8002088:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800208c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002090:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002092:	4b43      	ldr	r3, [pc, #268]	@ (80021a0 <SIM_Send_Infos+0x174>)
 8002094:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002098:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800209c:	627b      	str	r3, [r7, #36]	@ 0x24
 800209e:	4b40      	ldr	r3, [pc, #256]	@ (80021a0 <SIM_Send_Infos+0x174>)
 80020a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80020a8:	623b      	str	r3, [r7, #32]
 80020aa:	4b3d      	ldr	r3, [pc, #244]	@ (80021a0 <SIM_Send_Infos+0x174>)
 80020ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80020b4:	61fb      	str	r3, [r7, #28]
 80020b6:	4b3a      	ldr	r3, [pc, #232]	@ (80021a0 <SIM_Send_Infos+0x174>)
 80020b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020bc:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80020c0:	61bb      	str	r3, [r7, #24]
 80020c2:	4b33      	ldr	r3, [pc, #204]	@ (8002190 <SIM_Send_Infos+0x164>)
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	4b34      	ldr	r3, [pc, #208]	@ (800219c <SIM_Send_Infos+0x170>)
 80020ca:	885b      	ldrh	r3, [r3, #2]
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	4b33      	ldr	r3, [pc, #204]	@ (800219c <SIM_Send_Infos+0x170>)
 80020d0:	791b      	ldrb	r3, [r3, #4]
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002194 <SIM_Send_Infos+0x168>)
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	4b2e      	ldr	r3, [pc, #184]	@ (8002194 <SIM_Send_Infos+0x168>)
 80020dc:	885b      	ldrh	r3, [r3, #2]
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002194 <SIM_Send_Infos+0x168>)
 80020e2:	889b      	ldrh	r3, [r3, #4]
 80020e4:	461e      	mov	r6, r3
 80020e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002194 <SIM_Send_Infos+0x168>)
 80020e8:	88db      	ldrh	r3, [r3, #6]
 80020ea:	461d      	mov	r5, r3
 80020ec:	4b29      	ldr	r3, [pc, #164]	@ (8002194 <SIM_Send_Infos+0x168>)
 80020ee:	891b      	ldrh	r3, [r3, #8]
 80020f0:	4619      	mov	r1, r3
 80020f2:	4b28      	ldr	r3, [pc, #160]	@ (8002194 <SIM_Send_Infos+0x168>)
 80020f4:	895b      	ldrh	r3, [r3, #10]
 80020f6:	461a      	mov	r2, r3
 80020f8:	4b27      	ldr	r3, [pc, #156]	@ (8002198 <SIM_Send_Infos+0x16c>)
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002100:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002102:	920e      	str	r2, [sp, #56]	@ 0x38
 8002104:	910d      	str	r1, [sp, #52]	@ 0x34
 8002106:	950c      	str	r5, [sp, #48]	@ 0x30
 8002108:	960b      	str	r6, [sp, #44]	@ 0x2c
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	920a      	str	r2, [sp, #40]	@ 0x28
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	9209      	str	r2, [sp, #36]	@ 0x24
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	9208      	str	r2, [sp, #32]
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	9207      	str	r2, [sp, #28]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	9206      	str	r2, [sp, #24]
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	9205      	str	r2, [sp, #20]
 8002122:	69fa      	ldr	r2, [r7, #28]
 8002124:	9204      	str	r2, [sp, #16]
 8002126:	6a3a      	ldr	r2, [r7, #32]
 8002128:	9203      	str	r2, [sp, #12]
 800212a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800212c:	9202      	str	r2, [sp, #8]
 800212e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002130:	9201      	str	r2, [sp, #4]
 8002132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	4623      	mov	r3, r4
 8002138:	4662      	mov	r2, ip
 800213a:	491a      	ldr	r1, [pc, #104]	@ (80021a4 <SIM_Send_Infos+0x178>)
 800213c:	f013 ffd8 	bl	80160f0 <siprintf>
	len = (uint16_t)strlen(infos);
 8002140:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe f84d 	bl	80001e4 <strlen>
 800214a:	4603      	mov	r3, r0
 800214c:	f8a7 32b6 	strh.w	r3, [r7, #694]	@ 0x2b6

	sprintf(command, "AT+CIPSEND=%u\r",len);
 8002150:	f8b7 22b6 	ldrh.w	r2, [r7, #694]	@ 0x2b6
 8002154:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8002158:	4913      	ldr	r1, [pc, #76]	@ (80021a8 <SIM_Send_Infos+0x17c>)
 800215a:	4618      	mov	r0, r3
 800215c:	f013 ffc8 	bl	80160f0 <siprintf>
	SIM_Send_Command(command);
 8002160:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fc93 	bl	8001a90 <SIM_Send_Command>
	SIM_Wait_Response(">");
 800216a:	4810      	ldr	r0, [pc, #64]	@ (80021ac <SIM_Send_Infos+0x180>)
 800216c:	f000 f824 	bl	80021b8 <SIM_Wait_Response>
	HAL_UART_Transmit(SIM_UART, (uint8_t*)infos, len, 100);
 8002170:	f8b7 22b6 	ldrh.w	r2, [r7, #694]	@ 0x2b6
 8002174:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8002178:	2364      	movs	r3, #100	@ 0x64
 800217a:	480d      	ldr	r0, [pc, #52]	@ (80021b0 <SIM_Send_Infos+0x184>)
 800217c:	f012 fc70 	bl	8014a60 <HAL_UART_Transmit>
	SIM_Wait_Response("OK");
 8002180:	480c      	ldr	r0, [pc, #48]	@ (80021b4 <SIM_Send_Infos+0x188>)
 8002182:	f000 f819 	bl	80021b8 <SIM_Wait_Response>
}
 8002186:	bf00      	nop
 8002188:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 800218c:	46bd      	mov	sp, r7
 800218e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002190:	2000442a 	.word	0x2000442a
 8002194:	20003b48 	.word	0x20003b48
 8002198:	20004428 	.word	0x20004428
 800219c:	200019ec 	.word	0x200019ec
 80021a0:	20000840 	.word	0x20000840
 80021a4:	080175c8 	.word	0x080175c8
 80021a8:	080175b0 	.word	0x080175b0
 80021ac:	080175ac 	.word	0x080175ac
 80021b0:	20000724 	.word	0x20000724
 80021b4:	080173a0 	.word	0x080173a0

080021b8 <SIM_Wait_Response>:

/*-----ATTESA RISPOSTA-----*/
int SIM_Wait_Response(const char* expected)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b0c8      	sub	sp, #288	@ 0x120
 80021bc:	af02      	add	r7, sp, #8
 80021be:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80021c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80021c6:	6018      	str	r0, [r3, #0]
    char rx[256];
    memset(rx, 0, sizeof(rx));
 80021c8:	f107 0310 	add.w	r3, r7, #16
 80021cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f013 ffec 	bl	80161b0 <memset>
    uint16_t timeout = 10000; // 10 secondi
 80021d8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80021dc:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    uint32_t start_time = HAL_GetTick();
 80021e0:	f008 ff1e 	bl	800b020 <HAL_GetTick>
 80021e4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while((HAL_GetTick() - start_time) < timeout)
 80021e8:	e02a      	b.n	8002240 <SIM_Wait_Response+0x88>
    {
        uint16_t RxLen = 0;
 80021ea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80021ee:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80021f2:	2200      	movs	r2, #0
 80021f4:	801a      	strh	r2, [r3, #0]
        HAL_UARTEx_ReceiveToIdle(SIM_UART, (uint8_t*)rx, sizeof(rx), &RxLen, 500);
 80021f6:	f107 030e 	add.w	r3, r7, #14
 80021fa:	f107 0110 	add.w	r1, r7, #16
 80021fe:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002202:	9200      	str	r2, [sp, #0]
 8002204:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002208:	4816      	ldr	r0, [pc, #88]	@ (8002264 <SIM_Wait_Response+0xac>)
 800220a:	f013 fd90 	bl	8015d2e <HAL_UARTEx_ReceiveToIdle>
        
        if(RxLen > 0)
 800220e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002212:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00e      	beq.n	800223a <SIM_Wait_Response+0x82>
        {
        	if(strstr(rx, expected))
 800221c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002220:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002224:	f107 0210 	add.w	r2, r7, #16
 8002228:	6819      	ldr	r1, [r3, #0]
 800222a:	4610      	mov	r0, r2
 800222c:	f013 fffa 	bl	8016224 <strstr>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <SIM_Wait_Response+0x82>
        	{
        		return 0;
 8002236:	2300      	movs	r3, #0
 8002238:	e00e      	b.n	8002258 <SIM_Wait_Response+0xa0>
        	}
        }
        
        HAL_Delay(10);
 800223a:	200a      	movs	r0, #10
 800223c:	f008 fefc 	bl	800b038 <HAL_Delay>
    while((HAL_GetTick() - start_time) < timeout)
 8002240:	f008 feee 	bl	800b020 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800224a:	1ad2      	subs	r2, r2, r3
 800224c:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8002250:	429a      	cmp	r2, r3
 8002252:	d3ca      	bcc.n	80021ea <SIM_Wait_Response+0x32>
    }
	return -1;
 8002254:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002258:	4618      	mov	r0, r3
 800225a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000724 	.word	0x20000724

08002268 <SIM_Check_Connection>:

/*-----CONTROLLA STATO CONNESSIONE-----*/
void SIM_Check_Connection(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800226e:	af00      	add	r7, sp, #0
	char command_sim[256];
	char response_sim[256];

	int registered = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while(!registered)
 8002276:	e041      	b.n	80022fc <SIM_Check_Connection+0x94>
    {
        SIM_Send_Command("AT+CEREG?\r");
 8002278:	483d      	ldr	r0, [pc, #244]	@ (8002370 <SIM_Check_Connection+0x108>)
 800227a:	f7ff fc09 	bl	8001a90 <SIM_Send_Command>
        SIM_Receive_Response(response_sim, 5000);
 800227e:	f107 0308 	add.w	r3, r7, #8
 8002282:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fc2e 	bl	8001ae8 <SIM_Receive_Response>
        int n = 0, stat_value = 0;
 800228c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002290:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800229c:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
        char* cereg_ptr = strstr(response_sim, "+CEREG:");
 80022a4:	f107 0308 	add.w	r3, r7, #8
 80022a8:	4932      	ldr	r1, [pc, #200]	@ (8002374 <SIM_Check_Connection+0x10c>)
 80022aa:	4618      	mov	r0, r3
 80022ac:	f013 ffba 	bl	8016224 <strstr>
 80022b0:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
        if(cereg_ptr && sscanf(cereg_ptr, "+CEREG: %d,%d", &n, &stat_value) >= 2 && (stat_value == 1 || stat_value == 5))
 80022b4:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d01b      	beq.n	80022f4 <SIM_Check_Connection+0x8c>
 80022bc:	463b      	mov	r3, r7
 80022be:	1d3a      	adds	r2, r7, #4
 80022c0:	492d      	ldr	r1, [pc, #180]	@ (8002378 <SIM_Check_Connection+0x110>)
 80022c2:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80022c6:	f013 ff35 	bl	8016134 <siscanf>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	dd11      	ble.n	80022f4 <SIM_Check_Connection+0x8c>
 80022d0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80022d4:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d006      	beq.n	80022ec <SIM_Check_Connection+0x84>
 80022de:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80022e2:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b05      	cmp	r3, #5
 80022ea:	d103      	bne.n	80022f4 <SIM_Check_Connection+0x8c>
        {
            registered = 1;
 80022ec:	2301      	movs	r3, #1
 80022ee:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80022f2:	e003      	b.n	80022fc <SIM_Check_Connection+0x94>
        }
        else
        {
            HAL_Delay(2000);
 80022f4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80022f8:	f008 fe9e 	bl	800b038 <HAL_Delay>
    while(!registered)
 80022fc:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0b9      	beq.n	8002278 <SIM_Check_Connection+0x10>
        }
    }

	SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        
 8002304:	481d      	ldr	r0, [pc, #116]	@ (800237c <SIM_Check_Connection+0x114>)
 8002306:	f7ff fbc3 	bl	8001a90 <SIM_Send_Command>
	SIM_Receive_Response(response_sim, 5000);
 800230a:	f107 0308 	add.w	r3, r7, #8
 800230e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fbe8 	bl	8001ae8 <SIM_Receive_Response>
	while(!SIM_Check_TCP_State(response_sim))
 8002318:	e01c      	b.n	8002354 <SIM_Check_Connection+0xec>
	{
		sprintf(command_sim, "AT+CIPSTART=\"TCP\",\"%s\",%s\r", sys.TCP.IP_address, sys.TCP.Port);       
 800231a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800231e:	4b18      	ldr	r3, [pc, #96]	@ (8002380 <SIM_Check_Connection+0x118>)
 8002320:	4a18      	ldr	r2, [pc, #96]	@ (8002384 <SIM_Check_Connection+0x11c>)
 8002322:	4919      	ldr	r1, [pc, #100]	@ (8002388 <SIM_Check_Connection+0x120>)
 8002324:	f013 fee4 	bl	80160f0 <siprintf>
		SIM_Send_Command(command_sim);
 8002328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fbaf 	bl	8001a90 <SIM_Send_Command>
		SIM_Wait_Response("CONNECT OK");
 8002332:	4816      	ldr	r0, [pc, #88]	@ (800238c <SIM_Check_Connection+0x124>)
 8002334:	f7ff ff40 	bl	80021b8 <SIM_Wait_Response>
		SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        
 8002338:	4810      	ldr	r0, [pc, #64]	@ (800237c <SIM_Check_Connection+0x114>)
 800233a:	f7ff fba9 	bl	8001a90 <SIM_Send_Command>
		SIM_Receive_Response(response_sim, 5000);
 800233e:	f107 0308 	add.w	r3, r7, #8
 8002342:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fbce 	bl	8001ae8 <SIM_Receive_Response>
		HAL_Delay(2000);
 800234c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002350:	f008 fe72 	bl	800b038 <HAL_Delay>
	while(!SIM_Check_TCP_State(response_sim))
 8002354:	f107 0308 	add.w	r3, r7, #8
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fc23 	bl	8001ba4 <SIM_Check_TCP_State>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0da      	beq.n	800231a <SIM_Check_Connection+0xb2>
	}
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	08017420 	.word	0x08017420
 8002374:	0801742c 	.word	0x0801742c
 8002378:	08017434 	.word	0x08017434
 800237c:	080174f0 	.word	0x080174f0
 8002380:	20001984 	.word	0x20001984
 8002384:	20001920 	.word	0x20001920
 8002388:	080174c8 	.word	0x080174c8
 800238c:	080174e4 	.word	0x080174e4

08002390 <Base64_Decode>:
#include "global_variables.h"


/*-----DECODIFICA BASE64-----*/
size_t Base64_Decode(const char *in, uint8_t *out, size_t out_len)
{
 8002390:	b480      	push	{r7}
 8002392:	b08b      	sub	sp, #44	@ 0x2c
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
    size_t i = 0, j = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	627b      	str	r3, [r7, #36]	@ 0x24
 80023a0:	2300      	movs	r3, #0
 80023a2:	623b      	str	r3, [r7, #32]
    int v = 0, val = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	2300      	movs	r3, #0
 80023aa:	61bb      	str	r3, [r7, #24]
    while (in[i] && in[i] != '\n' && in[i] != '\r')
 80023ac:	e02b      	b.n	8002406 <Base64_Decode+0x76>
    {
        unsigned char c = base64_table[(unsigned char)in[i++]];
 80023ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4413      	add	r3, r2
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002438 <Base64_Decode+0xa8>)
 80023be:	5c9b      	ldrb	r3, [r3, r2]
 80023c0:	75fb      	strb	r3, [r7, #23]
        if (c == 0x80) continue; // carattere non valido
 80023c2:	7dfb      	ldrb	r3, [r7, #23]
 80023c4:	2b80      	cmp	r3, #128	@ 0x80
 80023c6:	d01d      	beq.n	8002404 <Base64_Decode+0x74>
        val = (val << 6) | c;
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	019a      	lsls	r2, r3, #6
 80023cc:	7dfb      	ldrb	r3, [r7, #23]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        v += 6;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3306      	adds	r3, #6
 80023d6:	61fb      	str	r3, [r7, #28]
        if (v >= 8)
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	2b07      	cmp	r3, #7
 80023dc:	dd13      	ble.n	8002406 <Base64_Decode+0x76>
        {
            v -= 8;
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3b08      	subs	r3, #8
 80023e2:	61fb      	str	r3, [r7, #28]
            if (j < out_len) out[j++] = (val >> v) & 0xFF;
 80023e4:	6a3a      	ldr	r2, [r7, #32]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d20c      	bcs.n	8002406 <Base64_Decode+0x76>
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa42 f103 	asr.w	r1, r2, r3
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	623a      	str	r2, [r7, #32]
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	4413      	add	r3, r2
 80023fe:	b2ca      	uxtb	r2, r1
 8002400:	701a      	strb	r2, [r3, #0]
 8002402:	e000      	b.n	8002406 <Base64_Decode+0x76>
        if (c == 0x80) continue; // carattere non valido
 8002404:	bf00      	nop
    while (in[i] && in[i] != '\n' && in[i] != '\r')
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240a:	4413      	add	r3, r2
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00b      	beq.n	800242a <Base64_Decode+0x9a>
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002416:	4413      	add	r3, r2
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b0a      	cmp	r3, #10
 800241c:	d005      	beq.n	800242a <Base64_Decode+0x9a>
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002422:	4413      	add	r3, r2
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b0d      	cmp	r3, #13
 8002428:	d1c1      	bne.n	80023ae <Base64_Decode+0x1e>
        }
    }
    return j; // numero di byte decodificati
 800242a:	6a3b      	ldr	r3, [r7, #32]
}
 800242c:	4618      	mov	r0, r3
 800242e:	372c      	adds	r7, #44	@ 0x2c
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	20000168 	.word	0x20000168

0800243c <Base64_Encode>:

/*-----CODIFICA BASE64-----*/
size_t Base64_Encode(const uint8_t *in, size_t in_len, char *out, size_t out_size)
{
 800243c:	b480      	push	{r7}
 800243e:	b08b      	sub	sp, #44	@ 0x2c
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	603b      	str	r3, [r7, #0]
    size_t i = 0, j = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	627b      	str	r3, [r7, #36]	@ 0x24
 800244e:	2300      	movs	r3, #0
 8002450:	623b      	str	r3, [r7, #32]
    while (i < in_len && (j + 4) <= out_size)
 8002452:	e06c      	b.n	800252e <Base64_Encode+0xf2>
    {
        uint32_t octet_a = i < in_len ? in[i++] : 0;
 8002454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	429a      	cmp	r2, r3
 800245a:	d206      	bcs.n	800246a <Base64_Encode+0x2e>
 800245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	627a      	str	r2, [r7, #36]	@ 0x24
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	4413      	add	r3, r2
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	e000      	b.n	800246c <Base64_Encode+0x30>
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
        uint32_t octet_b = i < in_len ? in[i++] : 0;
 800246e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	429a      	cmp	r2, r3
 8002474:	d206      	bcs.n	8002484 <Base64_Encode+0x48>
 8002476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	627a      	str	r2, [r7, #36]	@ 0x24
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4413      	add	r3, r2
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	e000      	b.n	8002486 <Base64_Encode+0x4a>
 8002484:	2300      	movs	r3, #0
 8002486:	61bb      	str	r3, [r7, #24]
        uint32_t octet_c = i < in_len ? in[i++] : 0;
 8002488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	429a      	cmp	r2, r3
 800248e:	d206      	bcs.n	800249e <Base64_Encode+0x62>
 8002490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	627a      	str	r2, [r7, #36]	@ 0x24
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	4413      	add	r3, r2
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	e000      	b.n	80024a0 <Base64_Encode+0x64>
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
        uint32_t triple = (octet_a << 16) | (octet_b << 8) | octet_c;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	041a      	lsls	r2, r3, #16
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	021b      	lsls	r3, r3, #8
 80024aa:	4313      	orrs	r3, r2
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]

        out[j++] = base64_enc_table[(triple >> 18) & 0x3F];
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	0c9b      	lsrs	r3, r3, #18
 80024b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	1c59      	adds	r1, r3, #1
 80024be:	6239      	str	r1, [r7, #32]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	440b      	add	r3, r1
 80024c4:	4926      	ldr	r1, [pc, #152]	@ (8002560 <Base64_Encode+0x124>)
 80024c6:	5c8a      	ldrb	r2, [r1, r2]
 80024c8:	701a      	strb	r2, [r3, #0]
        out[j++] = base64_enc_table[(triple >> 12) & 0x3F];
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	0b1b      	lsrs	r3, r3, #12
 80024ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	1c59      	adds	r1, r3, #1
 80024d6:	6239      	str	r1, [r7, #32]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	440b      	add	r3, r1
 80024dc:	4920      	ldr	r1, [pc, #128]	@ (8002560 <Base64_Encode+0x124>)
 80024de:	5c8a      	ldrb	r2, [r1, r2]
 80024e0:	701a      	strb	r2, [r3, #0]
        out[j++] = (i > in_len + 1) ? '=' : base64_enc_table[(triple >> 6) & 0x3F];
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	3301      	adds	r3, #1
 80024e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d806      	bhi.n	80024fa <Base64_Encode+0xbe>
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	099b      	lsrs	r3, r3, #6
 80024f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002560 <Base64_Encode+0x124>)
 80024f6:	5cd1      	ldrb	r1, [r2, r3]
 80024f8:	e000      	b.n	80024fc <Base64_Encode+0xc0>
 80024fa:	213d      	movs	r1, #61	@ 0x3d
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	623a      	str	r2, [r7, #32]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	4413      	add	r3, r2
 8002506:	460a      	mov	r2, r1
 8002508:	701a      	strb	r2, [r3, #0]
        out[j++] = (i > in_len) ? '=' : base64_enc_table[triple & 0x3F];
 800250a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	429a      	cmp	r2, r3
 8002510:	d805      	bhi.n	800251e <Base64_Encode+0xe2>
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002518:	4a11      	ldr	r2, [pc, #68]	@ (8002560 <Base64_Encode+0x124>)
 800251a:	5cd1      	ldrb	r1, [r2, r3]
 800251c:	e000      	b.n	8002520 <Base64_Encode+0xe4>
 800251e:	213d      	movs	r1, #61	@ 0x3d
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	623a      	str	r2, [r7, #32]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	460a      	mov	r2, r1
 800252c:	701a      	strb	r2, [r3, #0]
    while (i < in_len && (j + 4) <= out_size)
 800252e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	429a      	cmp	r2, r3
 8002534:	d204      	bcs.n	8002540 <Base64_Encode+0x104>
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	3304      	adds	r3, #4
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d289      	bcs.n	8002454 <Base64_Encode+0x18>
    }
    if (j < out_size) out[j] = '\0'; // null-terminate se vuoi una stringa
 8002540:	6a3a      	ldr	r2, [r7, #32]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d204      	bcs.n	8002552 <Base64_Encode+0x116>
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	4413      	add	r3, r2
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]
    return j; // lunghezza della stringa base64 prodotta (senza null)
 8002552:	6a3b      	ldr	r3, [r7, #32]
}
 8002554:	4618      	mov	r0, r3
 8002556:	372c      	adds	r7, #44	@ 0x2c
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	08017820 	.word	0x08017820

08002564 <BC_Init>:
#include "global_variables.h"


/*------INIZIALIZZAZIONE BATTERY CHARGER------*/
void BC_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
	BC_Write_Reg(REG00_MINIMAL_SYSTEM_VOLTAGE, 0x1A);           //Tensione minima di uscita con 3 celle = 9V   <----- Senza Batteria il sistema fornisce questa tensione
 8002568:	211a      	movs	r1, #26
 800256a:	2000      	movs	r0, #0
 800256c:	f000 f836 	bl	80025dc <BC_Write_Reg>
	BC_MultiWrite_Reg(REG01_CHARGE_VOLTAGE_LIMIT, 0x04EC);      //Limite tensione di carica con 3 celle = 12.6V
 8002570:	f240 41ec 	movw	r1, #1260	@ 0x4ec
 8002574:	2001      	movs	r0, #1
 8002576:	f000 f87d 	bl	8002674 <BC_MultiWrite_Reg>
	BC_MultiWrite_Reg(REG03_CHARGE_CURRENT_LIMIT, 0x0064);      //Limite corrente di carica con 3 celle = 1A
 800257a:	2164      	movs	r1, #100	@ 0x64
 800257c:	2003      	movs	r0, #3
 800257e:	f000 f879 	bl	8002674 <BC_MultiWrite_Reg>
	BC_Write_Reg(REG10_CHARGER_CONTROL_1, 0x85);                //Tensione di OVP in ingresso = 26V
 8002582:	2185      	movs	r1, #133	@ 0x85
 8002584:	2010      	movs	r0, #16
 8002586:	f000 f829 	bl	80025dc <BC_Write_Reg>
	BC_Write_Reg(REG14_CHARGER_CONTROL_5, 0x96);                //Informazione sulla presenza dello Ship-FET
 800258a:	2196      	movs	r1, #150	@ 0x96
 800258c:	2014      	movs	r0, #20
 800258e:	f000 f825 	bl	80025dc <BC_Write_Reg>
	BC_Write_Reg(REG15_MPPT_CONTROL, 0xAB);                     //MPPT attivato, tensione di MPP = 0.875*Vin, misura di 300ms ogni 2 minuti della Vin
 8002592:	21ab      	movs	r1, #171	@ 0xab
 8002594:	2015      	movs	r0, #21
 8002596:	f000 f821 	bl	80025dc <BC_Write_Reg>
	BC_Write_Reg(REG28_CHARGER_MASK_0, 0xE1);                   //Interrupt attivati: Poor source, Power good, VAC2 present, VAC1 present
 800259a:	21e1      	movs	r1, #225	@ 0xe1
 800259c:	2028      	movs	r0, #40	@ 0x28
 800259e:	f000 f81d 	bl	80025dc <BC_Write_Reg>
	BC_Write_Reg(REG29_CHARGER_MASK_1, 0xD7);                   //Interrupt attivati: nessuno
 80025a2:	21d7      	movs	r1, #215	@ 0xd7
 80025a4:	2029      	movs	r0, #41	@ 0x29
 80025a6:	f000 f819 	bl	80025dc <BC_Write_Reg>
	BC_Write_Reg(REG2A_CHARGER_MASK_2, 0x7F);                   //Interrupt attivati: nessuno
 80025aa:	217f      	movs	r1, #127	@ 0x7f
 80025ac:	202a      	movs	r0, #42	@ 0x2a
 80025ae:	f000 f815 	bl	80025dc <BC_Write_Reg>
	BC_Write_Reg(REG2B_CHARGER_MASK_3, 0x1F);                   //Interrupt attivati: nessuno
 80025b2:	211f      	movs	r1, #31
 80025b4:	202b      	movs	r0, #43	@ 0x2b
 80025b6:	f000 f811 	bl	80025dc <BC_Write_Reg>
	BC_Write_Reg(REG2C_FAULT_MASK_0, 0xFC);                     //Interrupt attivati: VAC2 over-voltage, VAC1 over-voltage
 80025ba:	21fc      	movs	r1, #252	@ 0xfc
 80025bc:	202c      	movs	r0, #44	@ 0x2c
 80025be:	f000 f80d 	bl	80025dc <BC_Write_Reg>
	BC_Write_Reg(REG2D_FAULT_MASK_1, 0xF4);                     //Interrupt attivati: nessuno
 80025c2:	21f4      	movs	r1, #244	@ 0xf4
 80025c4:	202d      	movs	r0, #45	@ 0x2d
 80025c6:	f000 f809 	bl	80025dc <BC_Write_Reg>

	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 80025ca:	4903      	ldr	r1, [pc, #12]	@ (80025d8 <BC_Init+0x74>)
 80025cc:	203b      	movs	r0, #59	@ 0x3b
 80025ce:	f000 f87b 	bl	80026c8 <BC_MultiRead_Reg>
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	2000442a 	.word	0x2000442a

080025dc <BC_Write_Reg>:

/*------SCRITTURA REGISTRO 8 BIT------*/
int BC_Write_Reg(uint8_t reg, uint8_t wdata)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	4603      	mov	r3, r0
 80025e4:	460a      	mov	r2, r1
 80025e6:	71fb      	strb	r3, [r7, #7]
 80025e8:	4613      	mov	r3, r2
 80025ea:	71bb      	strb	r3, [r7, #6]
	int result = -1;
 80025ec:	f04f 33ff 	mov.w	r3, #4294967295
 80025f0:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[2];
	toSend[0] = reg;
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	723b      	strb	r3, [r7, #8]
	toSend[1] = wdata;
 80025f6:	79bb      	ldrb	r3, [r7, #6]
 80025f8:	727b      	strb	r3, [r7, #9]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 2, 100) == HAL_OK)
 80025fa:	f107 0208 	add.w	r2, r7, #8
 80025fe:	2364      	movs	r3, #100	@ 0x64
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	2302      	movs	r3, #2
 8002604:	21d6      	movs	r1, #214	@ 0xd6
 8002606:	4806      	ldr	r0, [pc, #24]	@ (8002620 <BC_Write_Reg+0x44>)
 8002608:	f00b ffb4 	bl	800e574 <HAL_I2C_Master_Transmit>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <BC_Write_Reg+0x3a>
	{
		result = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8002616:	68fb      	ldr	r3, [r7, #12]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	200003e8 	.word	0x200003e8

08002624 <BC_Read_Reg>:

/*------LETTURA REGISTRO 8 BIT------*/
int BC_Read_Reg(uint8_t reg, uint8_t *rdata)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af02      	add	r7, sp, #8
 800262a:	4603      	mov	r3, r0
 800262c:	6039      	str	r1, [r7, #0]
 800262e:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8002630:	f04f 33ff 	mov.w	r3, #4294967295
 8002634:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8002636:	1dfa      	adds	r2, r7, #7
 8002638:	2364      	movs	r3, #100	@ 0x64
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	2301      	movs	r3, #1
 800263e:	21d6      	movs	r1, #214	@ 0xd6
 8002640:	480b      	ldr	r0, [pc, #44]	@ (8002670 <BC_Read_Reg+0x4c>)
 8002642:	f00b ff97 	bl	800e574 <HAL_I2C_Master_Transmit>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10c      	bne.n	8002666 <BC_Read_Reg+0x42>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, rdata, 1, 100) == HAL_OK)
 800264c:	2364      	movs	r3, #100	@ 0x64
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	2301      	movs	r3, #1
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	21d6      	movs	r1, #214	@ 0xd6
 8002656:	4806      	ldr	r0, [pc, #24]	@ (8002670 <BC_Read_Reg+0x4c>)
 8002658:	f00c f8a4 	bl	800e7a4 <HAL_I2C_Master_Receive>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <BC_Read_Reg+0x42>
		{
			result = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
		}
	}

	return result;
 8002666:	68fb      	ldr	r3, [r7, #12]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	200003e8 	.word	0x200003e8

08002674 <BC_MultiWrite_Reg>:

/*------SCRITTURA REGISTRO 16 BIT------*/
int BC_MultiWrite_Reg(uint8_t reg, uint16_t wdata)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af02      	add	r7, sp, #8
 800267a:	4603      	mov	r3, r0
 800267c:	460a      	mov	r2, r1
 800267e:	71fb      	strb	r3, [r7, #7]
 8002680:	4613      	mov	r3, r2
 8002682:	80bb      	strh	r3, [r7, #4]
	int result = -1;
 8002684:	f04f 33ff 	mov.w	r3, #4294967295
 8002688:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[3];
	toSend[0] = reg;
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	723b      	strb	r3, [r7, #8]
	toSend[1] = (wdata & 0xFF00) >> 8;
 800268e:	88bb      	ldrh	r3, [r7, #4]
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	b29b      	uxth	r3, r3
 8002694:	b2db      	uxtb	r3, r3
 8002696:	727b      	strb	r3, [r7, #9]
	toSend[2] = wdata & 0x00FF;
 8002698:	88bb      	ldrh	r3, [r7, #4]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 3, 100) == HAL_OK)
 800269e:	f107 0208 	add.w	r2, r7, #8
 80026a2:	2364      	movs	r3, #100	@ 0x64
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	2303      	movs	r3, #3
 80026a8:	21d6      	movs	r1, #214	@ 0xd6
 80026aa:	4806      	ldr	r0, [pc, #24]	@ (80026c4 <BC_MultiWrite_Reg+0x50>)
 80026ac:	f00b ff62 	bl	800e574 <HAL_I2C_Master_Transmit>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <BC_MultiWrite_Reg+0x46>
	{
		result = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
	}

	return result;
 80026ba:	68fb      	ldr	r3, [r7, #12]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	200003e8 	.word	0x200003e8

080026c8 <BC_MultiRead_Reg>:

/*------LETTURA REGISTRO 16 BIT------*/
int BC_MultiRead_Reg(uint8_t reg, uint16_t *rdata)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af02      	add	r7, sp, #8
 80026ce:	4603      	mov	r3, r0
 80026d0:	6039      	str	r1, [r7, #0]
 80026d2:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 80026d4:	f04f 33ff 	mov.w	r3, #4294967295
 80026d8:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 80026da:	2300      	movs	r3, #0
 80026dc:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 80026de:	1dfa      	adds	r2, r7, #7
 80026e0:	2364      	movs	r3, #100	@ 0x64
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	2301      	movs	r3, #1
 80026e6:	21d6      	movs	r1, #214	@ 0xd6
 80026e8:	4811      	ldr	r0, [pc, #68]	@ (8002730 <BC_MultiRead_Reg+0x68>)
 80026ea:	f00b ff43 	bl	800e574 <HAL_I2C_Master_Transmit>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d118      	bne.n	8002726 <BC_MultiRead_Reg+0x5e>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, data, 2, 100) == HAL_OK)
 80026f4:	f107 0208 	add.w	r2, r7, #8
 80026f8:	2364      	movs	r3, #100	@ 0x64
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	2302      	movs	r3, #2
 80026fe:	21d6      	movs	r1, #214	@ 0xd6
 8002700:	480b      	ldr	r0, [pc, #44]	@ (8002730 <BC_MultiRead_Reg+0x68>)
 8002702:	f00c f84f 	bl	800e7a4 <HAL_I2C_Master_Receive>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10c      	bne.n	8002726 <BC_MultiRead_Reg+0x5e>
		{
			result = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 8002710:	7a3b      	ldrb	r3, [r7, #8]
 8002712:	b21b      	sxth	r3, r3
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	b21a      	sxth	r2, r3
 8002718:	7a7b      	ldrb	r3, [r7, #9]
 800271a:	b21b      	sxth	r3, r3
 800271c:	4313      	orrs	r3, r2
 800271e:	b21b      	sxth	r3, r3
 8002720:	b29a      	uxth	r2, r3
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 8002726:	68fb      	ldr	r3, [r7, #12]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	200003e8 	.word	0x200003e8

08002734 <BC_Read_Flags>:

/*------LETTURA FLAGS DI INTERRUZIONE------*/
int BC_Read_Flags(uint64_t *flags)
{
 8002734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002738:	b09b      	sub	sp, #108	@ 0x6c
 800273a:	af02      	add	r7, sp, #8
 800273c:	64f8      	str	r0, [r7, #76]	@ 0x4c
	int result = -1;
 800273e:	f04f 33ff 	mov.w	r3, #4294967295
 8002742:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint8_t data[6] = {0};
 8002744:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002748:	2300      	movs	r3, #0
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	8093      	strh	r3, [r2, #4]
	uint8_t reg = REG22_CHARGER_FLAG_0;
 800274e:	2322      	movs	r3, #34	@ 0x22
 8002750:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8002754:	f107 0253 	add.w	r2, r7, #83	@ 0x53
 8002758:	2364      	movs	r3, #100	@ 0x64
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	2301      	movs	r3, #1
 800275e:	21d6      	movs	r1, #214	@ 0xd6
 8002760:	484a      	ldr	r0, [pc, #296]	@ (800288c <BC_Read_Flags+0x158>)
 8002762:	f00b ff07 	bl	800e574 <HAL_I2C_Master_Transmit>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	f040 8089 	bne.w	8002880 <BC_Read_Flags+0x14c>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1 , (uint8_t *)data, 6, 100) == HAL_OK)
 800276e:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002772:	2364      	movs	r3, #100	@ 0x64
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	2306      	movs	r3, #6
 8002778:	21d6      	movs	r1, #214	@ 0xd6
 800277a:	4844      	ldr	r0, [pc, #272]	@ (800288c <BC_Read_Flags+0x158>)
 800277c:	f00c f812 	bl	800e7a4 <HAL_I2C_Master_Receive>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d17c      	bne.n	8002880 <BC_Read_Flags+0x14c>
		{
			result = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	65fb      	str	r3, [r7, #92]	@ 0x5c
			*flags = ((uint64_t)data[0] << 40) | ((uint64_t)data[1] << 32) | ((uint64_t)data[2] << 24) | ((uint64_t)data[3] << 16) | ((uint64_t)data[4] << 8) | (uint64_t)data[5];
 800278a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2200      	movs	r2, #0
 8002792:	643b      	str	r3, [r7, #64]	@ 0x40
 8002794:	647a      	str	r2, [r7, #68]	@ 0x44
 8002796:	f04f 0000 	mov.w	r0, #0
 800279a:	f04f 0100 	mov.w	r1, #0
 800279e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027a0:	0219      	lsls	r1, r3, #8
 80027a2:	2000      	movs	r0, #0
 80027a4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2200      	movs	r2, #0
 80027ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 80027ba:	0033      	movs	r3, r6
 80027bc:	2200      	movs	r2, #0
 80027be:	ea40 0802 	orr.w	r8, r0, r2
 80027c2:	ea41 0903 	orr.w	r9, r1, r3
 80027c6:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2200      	movs	r2, #0
 80027ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80027d0:	637a      	str	r2, [r7, #52]	@ 0x34
 80027d2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80027d6:	460b      	mov	r3, r1
 80027d8:	0a1d      	lsrs	r5, r3, #8
 80027da:	460b      	mov	r3, r1
 80027dc:	061c      	lsls	r4, r3, #24
 80027de:	ea48 0304 	orr.w	r3, r8, r4
 80027e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027e4:	ea49 0305 	orr.w	r3, r9, r5
 80027e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027ea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2200      	movs	r2, #0
 80027f2:	623b      	str	r3, [r7, #32]
 80027f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	f04f 0300 	mov.w	r3, #0
 80027fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002802:	4629      	mov	r1, r5
 8002804:	040b      	lsls	r3, r1, #16
 8002806:	4621      	mov	r1, r4
 8002808:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800280c:	4621      	mov	r1, r4
 800280e:	040a      	lsls	r2, r1, #16
 8002810:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002814:	4621      	mov	r1, r4
 8002816:	4311      	orrs	r1, r2
 8002818:	61b9      	str	r1, [r7, #24]
 800281a:	4629      	mov	r1, r5
 800281c:	4319      	orrs	r1, r3
 800281e:	61f9      	str	r1, [r7, #28]
 8002820:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2200      	movs	r2, #0
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	617a      	str	r2, [r7, #20]
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002838:	4629      	mov	r1, r5
 800283a:	020b      	lsls	r3, r1, #8
 800283c:	4621      	mov	r1, r4
 800283e:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8002842:	4621      	mov	r1, r4
 8002844:	020a      	lsls	r2, r1, #8
 8002846:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800284a:	4621      	mov	r1, r4
 800284c:	ea41 0a02 	orr.w	sl, r1, r2
 8002850:	4629      	mov	r1, r5
 8002852:	ea41 0b03 	orr.w	fp, r1, r3
 8002856:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2200      	movs	r2, #0
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	60fa      	str	r2, [r7, #12]
 8002862:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002866:	460b      	mov	r3, r1
 8002868:	ea4a 0303 	orr.w	r3, sl, r3
 800286c:	603b      	str	r3, [r7, #0]
 800286e:	4613      	mov	r3, r2
 8002870:	ea4b 0303 	orr.w	r3, fp, r3
 8002874:	607b      	str	r3, [r7, #4]
 8002876:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002878:	e9d7 1200 	ldrd	r1, r2, [r7]
 800287c:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}

	return result;
 8002880:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8002882:	4618      	mov	r0, r3
 8002884:	3764      	adds	r7, #100	@ 0x64
 8002886:	46bd      	mov	sp, r7
 8002888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800288c:	200003e8 	.word	0x200003e8

08002890 <BC_Manage_Interrupts>:

/*------GESTIONE DELLE INTERRUZIONI------*/
void BC_Manage_Interrupts(uint64_t flags)
{
 8002890:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002894:	b084      	sub	sp, #16
 8002896:	af00      	add	r7, sp, #0
 8002898:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t status = 0;
 800289c:	2100      	movs	r1, #0
 800289e:	73f9      	strb	r1, [r7, #15]

	if((flags & POOR_SOURCE_MASK) != 0)   //INGRESSO NON BUONO
 80028a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f401 5380 	and.w	r3, r1, #4096	@ 0x1000
 80028aa:	4313      	orrs	r3, r2
 80028ac:	d00c      	beq.n	80028c8 <BC_Manage_Interrupts+0x38>
	{
		// ...gestione evento...
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 80028ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	0a0a      	lsrs	r2, r1, #8
 80028bc:	2300      	movs	r3, #0
 80028be:	b2d3      	uxtb	r3, r2
 80028c0:	4619      	mov	r1, r3
 80028c2:	2022      	movs	r0, #34	@ 0x22
 80028c4:	f7ff fe8a 	bl	80025dc <BC_Write_Reg>
	}

	if((flags & VAC2_CHANGE_MASK) != 0)  //PANNELLO INSERITO O RIMOSSO
 80028c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028cc:	f04f 0800 	mov.w	r8, #0
 80028d0:	f403 6980 	and.w	r9, r3, #1024	@ 0x400
 80028d4:	ea58 0309 	orrs.w	r3, r8, r9
 80028d8:	d020      	beq.n	800291c <BC_Manage_Interrupts+0x8c>
	{
		BC_Read_Reg(REG1B_CHARGER_STATUS_0, &status);
 80028da:	f107 030f 	add.w	r3, r7, #15
 80028de:	4619      	mov	r1, r3
 80028e0:	201b      	movs	r0, #27
 80028e2:	f7ff fe9f 	bl	8002624 <BC_Read_Reg>
		if((status & VAC2_PRESENT_MASK) != 0)
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d004      	beq.n	80028fa <BC_Manage_Interrupts+0x6a>
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x80);                //Usa Pannello
 80028f0:	2180      	movs	r1, #128	@ 0x80
 80028f2:	2013      	movs	r0, #19
 80028f4:	f7ff fe72 	bl	80025dc <BC_Write_Reg>
 80028f8:	e003      	b.n	8002902 <BC_Manage_Interrupts+0x72>
		}
		else
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x40);                //Usa Turbina
 80028fa:	2140      	movs	r1, #64	@ 0x40
 80028fc:	2013      	movs	r0, #19
 80028fe:	f7ff fe6d 	bl	80025dc <BC_Write_Reg>
		}
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 8002902:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	0a0a      	lsrs	r2, r1, #8
 8002910:	2300      	movs	r3, #0
 8002912:	b2d3      	uxtb	r3, r2
 8002914:	4619      	mov	r1, r3
 8002916:	2022      	movs	r0, #34	@ 0x22
 8002918:	f7ff fe60 	bl	80025dc <BC_Write_Reg>
	}

	if((flags & VAC1_CHANGE_MASK) != 0)  //TURBINA INSERITA O RIMOSSA
 800291c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002920:	2400      	movs	r4, #0
 8002922:	f403 7500 	and.w	r5, r3, #512	@ 0x200
 8002926:	ea54 0305 	orrs.w	r3, r4, r5
 800292a:	d00c      	beq.n	8002946 <BC_Manage_Interrupts+0xb6>
	{
		// ...gestione evento...
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 800292c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	0a0a      	lsrs	r2, r1, #8
 800293a:	2300      	movs	r3, #0
 800293c:	b2d3      	uxtb	r3, r2
 800293e:	4619      	mov	r1, r3
 8002940:	2022      	movs	r0, #34	@ 0x22
 8002942:	f7ff fe4b 	bl	80025dc <BC_Write_Reg>
	}

	flags = 0;
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	f04f 0300 	mov.w	r3, #0
 800294e:	e9c7 2300 	strd	r2, r3, [r7]
}
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800295c <HAL_UARTEx_RxEventCallback>:
	}
}

/* ------CALLBACK UART RX IDLE------*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	807b      	strh	r3, [r7, #2]
	if(huart == SIM_UART)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a3d      	ldr	r2, [pc, #244]	@ (8002a60 <HAL_UARTEx_RxEventCallback+0x104>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d16d      	bne.n	8002a4c <HAL_UARTEx_RxEventCallback+0xf0>
	{
		if(*(uint8_t*)sim_rx_buffer == '>')
 8002970:	4b3c      	ldr	r3, [pc, #240]	@ (8002a64 <HAL_UARTEx_RxEventCallback+0x108>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b3e      	cmp	r3, #62	@ 0x3e
 8002976:	d127      	bne.n	80029c8 <HAL_UARTEx_RxEventCallback+0x6c>
		{
			if(flags.Log_TransferInProgress)
 8002978:	4b3b      	ldr	r3, [pc, #236]	@ (8002a68 <HAL_UARTEx_RxEventCallback+0x10c>)
 800297a:	785b      	ldrb	r3, [r3, #1]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00c      	beq.n	80029a0 <HAL_UARTEx_RxEventCallback+0x44>
			{
				flags.Log_ReadytoSend = 1;
 8002986:	4a38      	ldr	r2, [pc, #224]	@ (8002a68 <HAL_UARTEx_RxEventCallback+0x10c>)
 8002988:	7853      	ldrb	r3, [r2, #1]
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	7053      	strb	r3, [r2, #1]
				sys.SIM_Prompt_Status = 0;
 8002990:	4b36      	ldr	r3, [pc, #216]	@ (8002a6c <HAL_UARTEx_RxEventCallback+0x110>)
 8002992:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002996:	461a      	mov	r2, r3
 8002998:	2300      	movs	r3, #0
 800299a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800299e:	e055      	b.n	8002a4c <HAL_UARTEx_RxEventCallback+0xf0>
			}
			else if(flags.CMD.Measure_Request)
 80029a0:	4b31      	ldr	r3, [pc, #196]	@ (8002a68 <HAL_UARTEx_RxEventCallback+0x10c>)
 80029a2:	789b      	ldrb	r3, [r3, #2]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d04e      	beq.n	8002a4c <HAL_UARTEx_RxEventCallback+0xf0>
			{
				flags.Measure_ReadytoSend = 1;
 80029ae:	4a2e      	ldr	r2, [pc, #184]	@ (8002a68 <HAL_UARTEx_RxEventCallback+0x10c>)
 80029b0:	7853      	ldrb	r3, [r2, #1]
 80029b2:	f043 0302 	orr.w	r3, r3, #2
 80029b6:	7053      	strb	r3, [r2, #1]
				sys.SIM_Prompt_Status = 0;
 80029b8:	4b2c      	ldr	r3, [pc, #176]	@ (8002a6c <HAL_UARTEx_RxEventCallback+0x110>)
 80029ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029be:	461a      	mov	r2, r3
 80029c0:	2300      	movs	r3, #0
 80029c2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80029c6:	e041      	b.n	8002a4c <HAL_UARTEx_RxEventCallback+0xf0>
			}
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x444E4553 &&              // "SEND"
 80029c8:	4b26      	ldr	r3, [pc, #152]	@ (8002a64 <HAL_UARTEx_RxEventCallback+0x108>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a28      	ldr	r2, [pc, #160]	@ (8002a70 <HAL_UARTEx_RxEventCallback+0x114>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d11e      	bne.n	8002a10 <HAL_UARTEx_RxEventCallback+0xb4>
				   *(uint32_t*)(sim_rx_buffer + 4) == 0x004B204F)       // " OK\0"
 80029d2:	4b28      	ldr	r3, [pc, #160]	@ (8002a74 <HAL_UARTEx_RxEventCallback+0x118>)
 80029d4:	681b      	ldr	r3, [r3, #0]
		else if(*(uint32_t*)sim_rx_buffer == 0x444E4553 &&              // "SEND"
 80029d6:	4a28      	ldr	r2, [pc, #160]	@ (8002a78 <HAL_UARTEx_RxEventCallback+0x11c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d119      	bne.n	8002a10 <HAL_UARTEx_RxEventCallback+0xb4>
		{
			if(flags.Log_TransferInProgress)
 80029dc:	4b22      	ldr	r3, [pc, #136]	@ (8002a68 <HAL_UARTEx_RxEventCallback+0x10c>)
 80029de:	785b      	ldrb	r3, [r3, #1]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d005      	beq.n	80029f6 <HAL_UARTEx_RxEventCallback+0x9a>
			{
				flags.Log_TransferInProgress = 0;
 80029ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002a68 <HAL_UARTEx_RxEventCallback+0x10c>)
 80029ec:	7853      	ldrb	r3, [r2, #1]
 80029ee:	f023 0308 	bic.w	r3, r3, #8
 80029f2:	7053      	strb	r3, [r2, #1]
			if(flags.Log_TransferInProgress)
 80029f4:	e029      	b.n	8002a4a <HAL_UARTEx_RxEventCallback+0xee>
			}
			else if(flags.Meas_TransferInProgress)
 80029f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a68 <HAL_UARTEx_RxEventCallback+0x10c>)
 80029f8:	785b      	ldrb	r3, [r3, #1]
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d022      	beq.n	8002a4a <HAL_UARTEx_RxEventCallback+0xee>
			{
				flags.Meas_TransferInProgress = 0;
 8002a04:	4a18      	ldr	r2, [pc, #96]	@ (8002a68 <HAL_UARTEx_RxEventCallback+0x10c>)
 8002a06:	7853      	ldrb	r3, [r2, #1]
 8002a08:	f023 0304 	bic.w	r3, r3, #4
 8002a0c:	7053      	strb	r3, [r2, #1]
			if(flags.Log_TransferInProgress)
 8002a0e:	e01c      	b.n	8002a4a <HAL_UARTEx_RxEventCallback+0xee>
			}
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x4552524F)                 //"ERRO"
 8002a10:	4b14      	ldr	r3, [pc, #80]	@ (8002a64 <HAL_UARTEx_RxEventCallback+0x108>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a19      	ldr	r2, [pc, #100]	@ (8002a7c <HAL_UARTEx_RxEventCallback+0x120>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d10c      	bne.n	8002a34 <HAL_UARTEx_RxEventCallback+0xd8>
		{
			flags.Log_ReadytoSend = 0;
 8002a1a:	4a13      	ldr	r2, [pc, #76]	@ (8002a68 <HAL_UARTEx_RxEventCallback+0x10c>)
 8002a1c:	7853      	ldrb	r3, [r2, #1]
 8002a1e:	f023 0301 	bic.w	r3, r3, #1
 8002a22:	7053      	strb	r3, [r2, #1]
			sys.SIM_Prompt_Status = 0;
 8002a24:	4b11      	ldr	r3, [pc, #68]	@ (8002a6c <HAL_UARTEx_RxEventCallback+0x110>)
 8002a26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002a32:	e00b      	b.n	8002a4c <HAL_UARTEx_RxEventCallback+0xf0>
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x444D432B)                 // "+CMD"
 8002a34:	4b0b      	ldr	r3, [pc, #44]	@ (8002a64 <HAL_UARTEx_RxEventCallback+0x108>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a11      	ldr	r2, [pc, #68]	@ (8002a80 <HAL_UARTEx_RxEventCallback+0x124>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d106      	bne.n	8002a4c <HAL_UARTEx_RxEventCallback+0xf0>
		{     
			flags.Message_Rx = 1;
 8002a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a68 <HAL_UARTEx_RxEventCallback+0x10c>)
 8002a40:	7813      	ldrb	r3, [r2, #0]
 8002a42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a46:	7013      	strb	r3, [r2, #0]
 8002a48:	e000      	b.n	8002a4c <HAL_UARTEx_RxEventCallback+0xf0>
			if(flags.Log_TransferInProgress)
 8002a4a:	bf00      	nop
		}


	}
	
	HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8002a4c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002a50:	4904      	ldr	r1, [pc, #16]	@ (8002a64 <HAL_UARTEx_RxEventCallback+0x108>)
 8002a52:	4803      	ldr	r0, [pc, #12]	@ (8002a60 <HAL_UARTEx_RxEventCallback+0x104>)
 8002a54:	f013 fa6e 	bl	8015f34 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20000724 	.word	0x20000724
 8002a64:	200051fc 	.word	0x200051fc
 8002a68:	200019e8 	.word	0x200019e8
 8002a6c:	20000840 	.word	0x20000840
 8002a70:	444e4553 	.word	0x444e4553
 8002a74:	20005200 	.word	0x20005200
 8002a78:	004b204f 	.word	0x004b204f
 8002a7c:	4552524f 	.word	0x4552524f
 8002a80:	444d432b 	.word	0x444d432b

08002a84 <HAL_UART_RxCpltCallback>:

/* ------CALLBACK UART RX COMPLETE------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
	if (huart == SIM_UART)
	{

	}

}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_UART_TxCpltCallback>:

/* ------CALLBACK UART TX COMPLETE------*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	if (huart == SIM_UART)
	{

	}

}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_ADC_ConvHalfCpltCallback>:

/* ------CALLBACK HALF ADC------*/
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a09      	ldr	r2, [pc, #36]	@ (8002adc <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d109      	bne.n	8002ad0 <HAL_ADC_ConvHalfCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8002abc:	4a08      	ldr	r2, [pc, #32]	@ (8002ae0 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8002abe:	7813      	ldrb	r3, [r2, #0]
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	7013      	strb	r3, [r2, #0]
		flags.ADC_Half_Buffer = 1;
 8002ac6:	4a06      	ldr	r2, [pc, #24]	@ (8002ae0 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8002ac8:	7813      	ldrb	r3, [r2, #0]
 8002aca:	f043 0302 	orr.w	r3, r3, #2
 8002ace:	7013      	strb	r3, [r2, #0]
	}
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	20000318 	.word	0x20000318
 8002ae0:	200019e8 	.word	0x200019e8

08002ae4 <HAL_ADC_ConvCpltCallback>:

/*------CALLBACK FULL ADC------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a09      	ldr	r2, [pc, #36]	@ (8002b14 <HAL_ADC_ConvCpltCallback+0x30>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d109      	bne.n	8002b08 <HAL_ADC_ConvCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8002af4:	4a08      	ldr	r2, [pc, #32]	@ (8002b18 <HAL_ADC_ConvCpltCallback+0x34>)
 8002af6:	7813      	ldrb	r3, [r2, #0]
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	7013      	strb	r3, [r2, #0]
		flags.ADC_Full_Buffer = 1;
 8002afe:	4a06      	ldr	r2, [pc, #24]	@ (8002b18 <HAL_ADC_ConvCpltCallback+0x34>)
 8002b00:	7813      	ldrb	r3, [r2, #0]
 8002b02:	f043 0304 	orr.w	r3, r3, #4
 8002b06:	7013      	strb	r3, [r2, #0]
	}
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	20000318 	.word	0x20000318
 8002b18:	200019e8 	.word	0x200019e8

08002b1c <HAL_RTC_AlarmAEventCallback>:

/*------CALLBACK RTC CAMBIO ORA------*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b092      	sub	sp, #72	@ 0x48
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef gTime;
	RTC_AlarmTypeDef sAlarm = {0};
 8002b24:	f107 0308 	add.w	r3, r7, #8
 8002b28:	222c      	movs	r2, #44	@ 0x2c
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f013 fb3f 	bl	80161b0 <memset>

	HAL_RTC_GetTime(hrtc, &gTime, RTC_FORMAT_BIN);
 8002b32:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002b36:	2200      	movs	r2, #0
 8002b38:	4619      	mov	r1, r3
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f00e fb0d 	bl	801115a <HAL_RTC_GetTime>

	sys.Low_th = Low_TH_Array[gTime.Hours];
 8002b40:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002b44:	461a      	mov	r2, r3
 8002b46:	4b17      	ldr	r3, [pc, #92]	@ (8002ba4 <HAL_RTC_AlarmAEventCallback+0x88>)
 8002b48:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002b4c:	4b16      	ldr	r3, [pc, #88]	@ (8002ba8 <HAL_RTC_AlarmAEventCallback+0x8c>)
 8002b4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b52:	85da      	strh	r2, [r3, #46]	@ 0x2e
	sys.High_th = High_TH_Array[gTime.Hours];
 8002b54:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4b14      	ldr	r3, [pc, #80]	@ (8002bac <HAL_RTC_AlarmAEventCallback+0x90>)
 8002b5c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002b60:	4b11      	ldr	r3, [pc, #68]	@ (8002ba8 <HAL_RTC_AlarmAEventCallback+0x8c>)
 8002b62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b66:	861a      	strh	r2, [r3, #48]	@ 0x30

	sAlarm.AlarmTime.Hours = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	723b      	strb	r3, [r7, #8]
    sAlarm.AlarmTime.Minutes = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	727b      	strb	r3, [r7, #9]
    sAlarm.AlarmTime.Seconds = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	72bb      	strb	r3, [r7, #10]
    sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS | RTC_ALARMMASK_SECONDS;
 8002b74:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb0 <HAL_RTC_AlarmAEventCallback+0x94>)
 8002b76:	61fb      	str	r3, [r7, #28]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	627b      	str	r3, [r7, #36]	@ 0x24
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    sAlarm.AlarmDateWeekDay = 1;
 8002b80:	2301      	movs	r3, #1
 8002b82:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    sAlarm.Alarm = RTC_ALARM_A;
 8002b86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b8a:	633b      	str	r3, [r7, #48]	@ 0x30
    
    HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BIN);
 8002b8c:	f107 0308 	add.w	r3, r7, #8
 8002b90:	2200      	movs	r2, #0
 8002b92:	4619      	mov	r1, r3
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f00e fbc3 	bl	8011320 <HAL_RTC_SetAlarm_IT>
}
 8002b9a:	bf00      	nop
 8002b9c:	3748      	adds	r7, #72	@ 0x48
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	200051bc 	.word	0x200051bc
 8002ba8:	20000840 	.word	0x20000840
 8002bac:	2000518c 	.word	0x2000518c
 8002bb0:	80800080 	.word	0x80800080

08002bb4 <extflash_cs_set>:
uint32_t	exflashNumSectors = 0;
uint8_t		exflashInitDone = 0;


void extflash_cs_set()
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_RESET);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002bbe:	4802      	ldr	r0, [pc, #8]	@ (8002bc8 <extflash_cs_set+0x14>)
 8002bc0:	f00b fc24 	bl	800e40c <HAL_GPIO_WritePin>
}
 8002bc4:	bf00      	nop
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	48000400 	.word	0x48000400

08002bcc <extflash_cs_reset>:

void extflash_cs_reset()
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002bd6:	4802      	ldr	r0, [pc, #8]	@ (8002be0 <extflash_cs_reset+0x14>)
 8002bd8:	f00b fc18 	bl	800e40c <HAL_GPIO_WritePin>
}
 8002bdc:	bf00      	nop
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	48000400 	.word	0x48000400

08002be4 <extflash_wp_reset>:
{
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_RESET);
}

void extflash_wp_reset()
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_SET);
 8002be8:	2201      	movs	r2, #1
 8002bea:	2140      	movs	r1, #64	@ 0x40
 8002bec:	4802      	ldr	r0, [pc, #8]	@ (8002bf8 <extflash_wp_reset+0x14>)
 8002bee:	f00b fc0d 	bl	800e40c <HAL_GPIO_WritePin>
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	48000800 	.word	0x48000800

08002bfc <extflash_hard_reset>:


void extflash_hard_reset()
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_RESET);
 8002c00:	2200      	movs	r2, #0
 8002c02:	2180      	movs	r1, #128	@ 0x80
 8002c04:	4806      	ldr	r0, [pc, #24]	@ (8002c20 <extflash_hard_reset+0x24>)
 8002c06:	f00b fc01 	bl	800e40c <HAL_GPIO_WritePin>

	HAL_Delay(50);
 8002c0a:	2032      	movs	r0, #50	@ 0x32
 8002c0c:	f008 fa14 	bl	800b038 <HAL_Delay>

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_SET);
 8002c10:	2201      	movs	r2, #1
 8002c12:	2180      	movs	r1, #128	@ 0x80
 8002c14:	4802      	ldr	r0, [pc, #8]	@ (8002c20 <extflash_hard_reset+0x24>)
 8002c16:	f00b fbf9 	bl	800e40c <HAL_GPIO_WritePin>

	return;
 8002c1a:	bf00      	nop
}
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	48000800 	.word	0x48000800

08002c24 <extflash_send_cmd>:


int32_t extflash_send_cmd(extflash_cmd_t command)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]

	uint8_t addr_bytes[4] = {0};
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	61bb      	str	r3, [r7, #24]
	uint8_t dummy_bytes[8] = {0};
 8002c30:	f107 0310 	add.w	r3, r7, #16
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
	uint8_t dummy = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	77fb      	strb	r3, [r7, #31]
	uint8_t cmd_data = command->cmd;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	73fb      	strb	r3, [r7, #15]

	if(command->address_en != 0)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	785b      	ldrb	r3, [r3, #1]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00d      	beq.n	8002c68 <extflash_send_cmd+0x44>
	{
		addr_bytes[0] = (command->address >> 16) & 0xFF;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	0c1b      	lsrs	r3, r3, #16
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	763b      	strb	r3, [r7, #24]
		addr_bytes[1] = (command->address >> 8) & 0xFF;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	0a1b      	lsrs	r3, r3, #8
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	767b      	strb	r3, [r7, #25]
		addr_bytes[2] = (command->address) & 0xFF;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	76bb      	strb	r3, [r7, #26]
	}

	extflash_cs_set();
 8002c68:	f7ff ffa4 	bl	8002bb4 <extflash_cs_set>

	HAL_SPI_Transmit(EXTFLASH_SPI, &cmd_data, 1, FLASH_SPI_DEF_TIMEOUT);
 8002c6c:	f107 010f 	add.w	r1, r7, #15
 8002c70:	2364      	movs	r3, #100	@ 0x64
 8002c72:	2201      	movs	r2, #1
 8002c74:	4823      	ldr	r0, [pc, #140]	@ (8002d04 <extflash_send_cmd+0xe0>)
 8002c76:	f00e fe52 	bl	801191e <HAL_SPI_Transmit>

	if(command->address_en != 0)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	785b      	ldrb	r3, [r3, #1]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d006      	beq.n	8002c90 <extflash_send_cmd+0x6c>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, addr_bytes, 3, FLASH_SPI_DEF_TIMEOUT);
 8002c82:	f107 0118 	add.w	r1, r7, #24
 8002c86:	2364      	movs	r3, #100	@ 0x64
 8002c88:	2203      	movs	r2, #3
 8002c8a:	481e      	ldr	r0, [pc, #120]	@ (8002d04 <extflash_send_cmd+0xe0>)
 8002c8c:	f00e fe47 	bl	801191e <HAL_SPI_Transmit>
	}

	if(command->dummy_nb > 0)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	88db      	ldrh	r3, [r3, #6]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00e      	beq.n	8002cb6 <extflash_send_cmd+0x92>
	{
		dummy = command->dummy_nb > sizeof(dummy_bytes) ? sizeof(dummy_bytes) : command->dummy_nb;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	88db      	ldrh	r3, [r3, #6]
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	bf28      	it	cs
 8002ca0:	2308      	movcs	r3, #8
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	77fb      	strb	r3, [r7, #31]
		HAL_SPI_Transmit(EXTFLASH_SPI, dummy_bytes, dummy, FLASH_SPI_DEF_TIMEOUT);
 8002ca6:	7ffb      	ldrb	r3, [r7, #31]
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	f107 0110 	add.w	r1, r7, #16
 8002cae:	2364      	movs	r3, #100	@ 0x64
 8002cb0:	4814      	ldr	r0, [pc, #80]	@ (8002d04 <extflash_send_cmd+0xe0>)
 8002cb2:	f00e fe34 	bl	801191e <HAL_SPI_Transmit>
	}

	if(command->tx_nb > 0 && command->tx_data != NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	885b      	ldrh	r3, [r3, #2]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <extflash_send_cmd+0xb2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d007      	beq.n	8002cd6 <extflash_send_cmd+0xb2>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, command->tx_data, command->tx_nb, FLASH_SPI_DEF_TIMEOUT);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68d9      	ldr	r1, [r3, #12]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	885a      	ldrh	r2, [r3, #2]
 8002cce:	2364      	movs	r3, #100	@ 0x64
 8002cd0:	480c      	ldr	r0, [pc, #48]	@ (8002d04 <extflash_send_cmd+0xe0>)
 8002cd2:	f00e fe24 	bl	801191e <HAL_SPI_Transmit>
	}

	if(command->rx_nb > 0 && command->rx_data != NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	889b      	ldrh	r3, [r3, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <extflash_send_cmd+0xd2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d007      	beq.n	8002cf6 <extflash_send_cmd+0xd2>
	{
		HAL_SPI_Receive(EXTFLASH_SPI, command->rx_data, command->rx_nb, FLASH_SPI_DEF_TIMEOUT);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6919      	ldr	r1, [r3, #16]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	889a      	ldrh	r2, [r3, #4]
 8002cee:	2364      	movs	r3, #100	@ 0x64
 8002cf0:	4804      	ldr	r0, [pc, #16]	@ (8002d04 <extflash_send_cmd+0xe0>)
 8002cf2:	f00e ff8a 	bl	8011c0a <HAL_SPI_Receive>
	}

	extflash_cs_reset();
 8002cf6:	f7ff ff69 	bl	8002bcc <extflash_cs_reset>

	return 0;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3720      	adds	r7, #32
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	200004a4 	.word	0x200004a4

08002d08 <extflash_read_extended_read_reg>:

}


int extflash_read_extended_read_reg(uint8_t *ereg)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 8002d10:	f107 030c 	add.w	r3, r7, #12
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDERP;
 8002d20:	2381      	movs	r3, #129	@ 0x81
 8002d22:	733b      	strb	r3, [r7, #12]
	command.address_en = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	737b      	strb	r3, [r7, #13]
	command.address = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
	command.rx_nb = 1;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	823b      	strh	r3, [r7, #16]
	command.rx_data = ereg;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	61fb      	str	r3, [r7, #28]

	return extflash_send_cmd(&command);
 8002d34:	f107 030c 	add.w	r3, r7, #12
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ff73 	bl	8002c24 <extflash_send_cmd>
 8002d3e:	4603      	mov	r3, r0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3720      	adds	r7, #32
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <extflash_clear_extended_read_reg>:


int extflash_clear_extended_read_reg()
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
	extflash_cmd command = {0};
 8002d4e:	1d3b      	adds	r3, r7, #4
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_CLERP;
 8002d5c:	2382      	movs	r3, #130	@ 0x82
 8002d5e:	713b      	strb	r3, [r7, #4]

	return extflash_send_cmd(&command);
 8002d60:	1d3b      	adds	r3, r7, #4
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff ff5e 	bl	8002c24 <extflash_send_cmd>
 8002d68:	4603      	mov	r3, r0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <extflash_set_write_protection>:
	return extflash_send_cmd(&command);

}

int extflash_set_write_protection(uint8_t enable)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b088      	sub	sp, #32
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	4603      	mov	r3, r0
 8002d7a:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 8002d7c:	f107 030c 	add.w	r3, r7, #12
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	60da      	str	r2, [r3, #12]
 8002d8a:	611a      	str	r2, [r3, #16]
	command.cmd = enable==0 ? EFLASH_CMD_WREN : EFLASH_CMD_WRDI;
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <extflash_set_write_protection+0x24>
 8002d92:	2306      	movs	r3, #6
 8002d94:	e000      	b.n	8002d98 <extflash_set_write_protection+0x26>
 8002d96:	2304      	movs	r3, #4
 8002d98:	733b      	strb	r3, [r7, #12]

	return extflash_send_cmd(&command);
 8002d9a:	f107 030c 	add.w	r3, r7, #12
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff ff40 	bl	8002c24 <extflash_send_cmd>
 8002da4:	4603      	mov	r3, r0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3720      	adds	r7, #32
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <extflash_read_sfdp>:

int extflash_read_sfdp(uint32_t regaddr, uint8_t *reg, uint8_t nregs)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b08a      	sub	sp, #40	@ 0x28
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	4613      	mov	r3, r2
 8002dba:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 8002dbc:	f107 0314 	add.w	r3, r7, #20
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
 8002dca:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDSFDP;
 8002dcc:	235a      	movs	r3, #90	@ 0x5a
 8002dce:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	757b      	strb	r3, [r7, #21]
	command.address = regaddr;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nregs;
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	833b      	strh	r3, [r7, #24]
	command.rx_data = reg;
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8002de6:	f107 0314 	add.w	r3, r7, #20
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff ff1a 	bl	8002c24 <extflash_send_cmd>
 8002df0:	4603      	mov	r3, r0

}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3728      	adds	r7, #40	@ 0x28
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <extflash_raw_read>:

int extflash_raw_read(uint32_t address, uint8_t *pBuffer, uint16_t nbytes)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b08a      	sub	sp, #40	@ 0x28
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	4613      	mov	r3, r2
 8002e06:	80fb      	strh	r3, [r7, #6]

	extflash_cmd command = {0};
 8002e08:	f107 0314 	add.w	r3, r7, #20
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	60da      	str	r2, [r3, #12]
 8002e16:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_FRD;
 8002e18:	230b      	movs	r3, #11
 8002e1a:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	757b      	strb	r3, [r7, #21]
	command.address = address;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8002e24:	2301      	movs	r3, #1
 8002e26:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nbytes;
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	833b      	strh	r3, [r7, #24]
	command.rx_data = pBuffer;
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8002e30:	f107 0314 	add.w	r3, r7, #20
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff fef5 	bl	8002c24 <extflash_send_cmd>
 8002e3a:	4603      	mov	r3, r0

}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3728      	adds	r7, #40	@ 0x28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <extflash_raw_erase>:

int extflash_raw_erase(uint32_t address)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 8002e4c:	f107 030c 	add.w	r3, r7, #12
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_SER;
 8002e5c:	23d7      	movs	r3, #215	@ 0xd7
 8002e5e:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 8002e60:	2301      	movs	r3, #1
 8002e62:	737b      	strb	r3, [r7, #13]
	command.address = address;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	617b      	str	r3, [r7, #20]

	return extflash_send_cmd(&command);
 8002e68:	f107 030c 	add.w	r3, r7, #12
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fed9 	bl	8002c24 <extflash_send_cmd>
 8002e72:	4603      	mov	r3, r0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <extflash_raw_page_write>:

int extflash_raw_page_write(uint32_t address, const uint8_t *pBuffer)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]

	extflash_cmd command = {0};
 8002e86:	f107 030c 	add.w	r3, r7, #12
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	605a      	str	r2, [r3, #4]
 8002e90:	609a      	str	r2, [r3, #8]
 8002e92:	60da      	str	r2, [r3, #12]
 8002e94:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_PP;
 8002e96:	2302      	movs	r3, #2
 8002e98:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	737b      	strb	r3, [r7, #13]
	command.address = address;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	617b      	str	r3, [r7, #20]
	command.tx_nb = EFLASH_DEF_PAGE_SIZE;
 8002ea2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ea6:	81fb      	strh	r3, [r7, #14]
	command.tx_data = pBuffer;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	61bb      	str	r3, [r7, #24]

	return extflash_send_cmd(&command);
 8002eac:	f107 030c 	add.w	r3, r7, #12
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff feb7 	bl	8002c24 <extflash_send_cmd>
 8002eb6:	4603      	mov	r3, r0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3720      	adds	r7, #32
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <extflash_sector_read>:


int extflash_sector_read(uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	@ 0x28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
	int result = 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61fb      	str	r3, [r7, #28]
	uint8_t ereg = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	75fb      	strb	r3, [r7, #23]
	uint32_t tmo = HAL_GetTick();
 8002ed4:	f008 f8a4 	bl	800b020 <HAL_GetTick>
 8002ed8:	61b8      	str	r0, [r7, #24]
	uint8_t *wPtr = pBuffer;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	031b      	lsls	r3, r3, #12
 8002ee2:	623b      	str	r3, [r7, #32]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002ee4:	f107 0317 	add.w	r3, r7, #23
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ff0d 	bl	8002d08 <extflash_read_extended_read_reg>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	da10      	bge.n	8002f16 <extflash_sector_read+0x56>
 8002ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef8:	e037      	b.n	8002f6a <extflash_sector_read+0xaa>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002efa:	f107 0317 	add.w	r3, r7, #23
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff ff02 	bl	8002d08 <extflash_read_extended_read_reg>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	da02      	bge.n	8002f10 <extflash_sector_read+0x50>
 8002f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f0e:	e02c      	b.n	8002f6a <extflash_sector_read+0xaa>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8002f10:	2001      	movs	r0, #1
 8002f12:	f008 f891 	bl	800b038 <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
 8002f16:	7dfb      	ldrb	r3, [r7, #23]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d020      	beq.n	8002f62 <extflash_sector_read+0xa2>
 8002f20:	f008 f87e 	bl	800b020 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f2e:	d3e4      	bcc.n	8002efa <extflash_sector_read+0x3a>
	}

	while(nsectors > 0)
 8002f30:	e017      	b.n	8002f62 <extflash_sector_read+0xa2>
	{
		result = extflash_raw_read(address, wPtr, EFLASH_DEF_SECTOR_SIZE);
 8002f32:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002f36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f38:	6a38      	ldr	r0, [r7, #32]
 8002f3a:	f7ff ff5e 	bl	8002dfa <extflash_raw_read>
 8002f3e:	61f8      	str	r0, [r7, #28]
		if(result < 0)return -1;
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	da02      	bge.n	8002f4c <extflash_sector_read+0x8c>
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4a:	e00e      	b.n	8002f6a <extflash_sector_read+0xaa>

		address += EFLASH_DEF_SECTOR_SIZE;
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f52:	623b      	str	r3, [r7, #32]
		wPtr += EFLASH_DEF_SECTOR_SIZE;
 8002f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f5a:	627b      	str	r3, [r7, #36]	@ 0x24
		nsectors--;
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1e4      	bne.n	8002f32 <extflash_sector_read+0x72>
	}

	return 0;
 8002f68:	2300      	movs	r3, #0

}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3728      	adds	r7, #40	@ 0x28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <extflash_wait_for_wop>:

int extflash_wait_for_wop(uint32_t timeout)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b084      	sub	sp, #16
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
	uint8_t ereg = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	72fb      	strb	r3, [r7, #11]
	uint32_t tmo = HAL_GetTick();
 8002f7e:	f008 f84f 	bl	800b020 <HAL_GetTick>
 8002f82:	60f8      	str	r0, [r7, #12]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002f84:	f107 030b 	add.w	r3, r7, #11
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff febd 	bl	8002d08 <extflash_read_extended_read_reg>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	da10      	bge.n	8002fb6 <extflash_wait_for_wop+0x44>
 8002f94:	f04f 33ff 	mov.w	r3, #4294967295
 8002f98:	e023      	b.n	8002fe2 <extflash_wait_for_wop+0x70>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002f9a:	f107 030b 	add.w	r3, r7, #11
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff feb2 	bl	8002d08 <extflash_read_extended_read_reg>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	da02      	bge.n	8002fb0 <extflash_wait_for_wop+0x3e>
 8002faa:	f04f 33ff 	mov.w	r3, #4294967295
 8002fae:	e018      	b.n	8002fe2 <extflash_wait_for_wop+0x70>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	f008 f841 	bl	800b038 <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
 8002fb6:	7afb      	ldrb	r3, [r7, #11]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d007      	beq.n	8002fd0 <extflash_wait_for_wop+0x5e>
 8002fc0:	f008 f82e 	bl	800b020 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d8e4      	bhi.n	8002f9a <extflash_wait_for_wop+0x28>
	}

	if(ereg & (ESTATUS_PROT_ERR | ESTATUS_P_ERR | ESTATUS_E_ERR))
 8002fd0:	7afb      	ldrb	r3, [r7, #11]
 8002fd2:	f003 030e 	and.w	r3, r3, #14
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <extflash_wait_for_wop+0x6e>
	{
		return -2; //Erase o write error
 8002fda:	f06f 0301 	mvn.w	r3, #1
 8002fde:	e000      	b.n	8002fe2 <extflash_wait_for_wop+0x70>
	}

	return 0;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <extflash_sector_write>:

int extflash_sector_write(uint32_t sector, uint32_t nsectors, const uint8_t *pBuffer)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b088      	sub	sp, #32
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	60f8      	str	r0, [r7, #12]
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
	int result = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
	const uint8_t *wPtr = pBuffer;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	031b      	lsls	r3, r3, #12
 8003002:	61bb      	str	r3, [r7, #24]

	extflash_clear_extended_read_reg();
 8003004:	f7ff fea0 	bl	8002d48 <extflash_clear_extended_read_reg>

	while(nsectors > 0)
 8003008:	e04e      	b.n	80030a8 <extflash_sector_write+0xbe>
	{
		//Controllo operazioni in corso
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 800300a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800300e:	f7ff ffb0 	bl	8002f72 <extflash_wait_for_wop>
 8003012:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	2b00      	cmp	r3, #0
 8003018:	db4a      	blt.n	80030b0 <extflash_sector_write+0xc6>

		//Erase del settore
		result = extflash_set_write_protection(0);
 800301a:	2000      	movs	r0, #0
 800301c:	f7ff fea9 	bl	8002d72 <extflash_set_write_protection>
 8003020:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	2b00      	cmp	r3, #0
 8003026:	db45      	blt.n	80030b4 <extflash_sector_write+0xca>
		result = extflash_raw_erase(address);
 8003028:	69b8      	ldr	r0, [r7, #24]
 800302a:	f7ff ff0b 	bl	8002e44 <extflash_raw_erase>
 800302e:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	db40      	blt.n	80030b8 <extflash_sector_write+0xce>

		//Attesa ERASE
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8003036:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800303a:	f7ff ff9a 	bl	8002f72 <extflash_wait_for_wop>
 800303e:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	2b00      	cmp	r3, #0
 8003044:	db3a      	blt.n	80030bc <extflash_sector_write+0xd2>

		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	e021      	b.n	8003090 <extflash_sector_write+0xa6>
		{
			result = extflash_set_write_protection(0);
 800304c:	2000      	movs	r0, #0
 800304e:	f7ff fe90 	bl	8002d72 <extflash_set_write_protection>
 8003052:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	db1e      	blt.n	8003098 <extflash_sector_write+0xae>
			result = extflash_raw_page_write(address, wPtr);
 800305a:	69f9      	ldr	r1, [r7, #28]
 800305c:	69b8      	ldr	r0, [r7, #24]
 800305e:	f7ff ff0d 	bl	8002e7c <extflash_raw_page_write>
 8003062:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	2b00      	cmp	r3, #0
 8003068:	db18      	blt.n	800309c <extflash_sector_write+0xb2>

			address += EFLASH_DEF_PAGE_SIZE;
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003070:	61bb      	str	r3, [r7, #24]
			wPtr += EFLASH_DEF_PAGE_SIZE;
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003078:	61fb      	str	r3, [r7, #28]
			//Attesa write
			result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 800307a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800307e:	f7ff ff78 	bl	8002f72 <extflash_wait_for_wop>
 8003082:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	db0a      	blt.n	80030a0 <extflash_sector_write+0xb6>
		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	3301      	adds	r3, #1
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2b0f      	cmp	r3, #15
 8003094:	ddda      	ble.n	800304c <extflash_sector_write+0x62>
 8003096:	e004      	b.n	80030a2 <extflash_sector_write+0xb8>
			if(result < 0)break;
 8003098:	bf00      	nop
 800309a:	e002      	b.n	80030a2 <extflash_sector_write+0xb8>
			if(result < 0)break;
 800309c:	bf00      	nop
 800309e:	e000      	b.n	80030a2 <extflash_sector_write+0xb8>
			if(result < 0)break;
 80030a0:	bf00      	nop
		}

		nsectors--;
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1ad      	bne.n	800300a <extflash_sector_write+0x20>
 80030ae:	e006      	b.n	80030be <extflash_sector_write+0xd4>
		if(result < 0)break;
 80030b0:	bf00      	nop
 80030b2:	e004      	b.n	80030be <extflash_sector_write+0xd4>
		if(result < 0)break;
 80030b4:	bf00      	nop
 80030b6:	e002      	b.n	80030be <extflash_sector_write+0xd4>
		if(result < 0)break;
 80030b8:	bf00      	nop
 80030ba:	e000      	b.n	80030be <extflash_sector_write+0xd4>
		if(result < 0)break;
 80030bc:	bf00      	nop
	}

	extflash_set_write_protection(1);
 80030be:	2001      	movs	r0, #1
 80030c0:	f7ff fe57 	bl	8002d72 <extflash_set_write_protection>

	return 0;
 80030c4:	2300      	movs	r3, #0

}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3720      	adds	r7, #32
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <extflash_get_sector_size>:


unsigned int extflash_get_sector_size()
{
 80030ce:	b480      	push	{r7}
 80030d0:	af00      	add	r7, sp, #0
	return EFLASH_DEF_SECTOR_SIZE;
 80030d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <extflash_get_sector_count>:

unsigned int extflash_get_sector_count()
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
	return exflashNumSectors;
 80030e4:	4b03      	ldr	r3, [pc, #12]	@ (80030f4 <extflash_get_sector_count+0x14>)
 80030e6:	681b      	ldr	r3, [r3, #0]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	20000310 	.word	0x20000310

080030f8 <extflash_is_initialized>:
{
	return exflashSize;
}

int extflash_is_initialized()
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
	return exflashInitDone;
 80030fc:	4b03      	ldr	r3, [pc, #12]	@ (800310c <extflash_is_initialized+0x14>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
}
 8003100:	4618      	mov	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	20000314 	.word	0x20000314

08003110 <extflash_init>:

int extflash_init()
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
	uint8_t manufacturer_id[2] = {0};
 8003116:	2300      	movs	r3, #0
 8003118:	83bb      	strh	r3, [r7, #28]
	extflash_cmd command = {0};
 800311a:	f107 0308 	add.w	r3, r7, #8
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	605a      	str	r2, [r3, #4]
 8003124:	609a      	str	r2, [r3, #8]
 8003126:	60da      	str	r2, [r3, #12]
 8003128:	611a      	str	r2, [r3, #16]
	uint8_t density[4] = {0};
 800312a:	2300      	movs	r3, #0
 800312c:	607b      	str	r3, [r7, #4]

	exflashInitDone = 0;
 800312e:	4b26      	ldr	r3, [pc, #152]	@ (80031c8 <extflash_init+0xb8>)
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]
	exflashNumSectors = 0;
 8003134:	4b25      	ldr	r3, [pc, #148]	@ (80031cc <extflash_init+0xbc>)
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]

	extflash_hard_reset();
 800313a:	f7ff fd5f 	bl	8002bfc <extflash_hard_reset>
	extflash_cs_reset();
 800313e:	f7ff fd45 	bl	8002bcc <extflash_cs_reset>
	extflash_wp_reset();
 8003142:	f7ff fd4f 	bl	8002be4 <extflash_wp_reset>

	command.cmd = EFLASH_CMD_RDMDID;
 8003146:	2390      	movs	r3, #144	@ 0x90
 8003148:	723b      	strb	r3, [r7, #8]
	command.address_en = 1;
 800314a:	2301      	movs	r3, #1
 800314c:	727b      	strb	r3, [r7, #9]
	command.address = 0;
 800314e:	2300      	movs	r3, #0
 8003150:	613b      	str	r3, [r7, #16]
	command.rx_nb = 2;
 8003152:	2302      	movs	r3, #2
 8003154:	81bb      	strh	r3, [r7, #12]
	command.rx_data = manufacturer_id;
 8003156:	f107 031c 	add.w	r3, r7, #28
 800315a:	61bb      	str	r3, [r7, #24]

	extflash_send_cmd(&command);
 800315c:	f107 0308 	add.w	r3, r7, #8
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff fd5f 	bl	8002c24 <extflash_send_cmd>

	if(manufacturer_id[0] != EFLASH_DEF_MANIFACTURER || manufacturer_id[1] != EFLASH_DEF_DEVID)
 8003166:	7f3b      	ldrb	r3, [r7, #28]
 8003168:	2b9d      	cmp	r3, #157	@ 0x9d
 800316a:	d102      	bne.n	8003172 <extflash_init+0x62>
 800316c:	7f7b      	ldrb	r3, [r7, #29]
 800316e:	2b17      	cmp	r3, #23
 8003170:	d002      	beq.n	8003178 <extflash_init+0x68>
	{
		return -1;
 8003172:	f04f 33ff 	mov.w	r3, #4294967295
 8003176:	e022      	b.n	80031be <extflash_init+0xae>
	}

	memset((void *)&command, 0, sizeof(command));
 8003178:	f107 0308 	add.w	r3, r7, #8
 800317c:	2214      	movs	r2, #20
 800317e:	2100      	movs	r1, #0
 8003180:	4618      	mov	r0, r3
 8003182:	f013 f815 	bl	80161b0 <memset>

	extflash_read_sfdp(SFDP_FLASH_DENSITY, density, sizeof(density));
 8003186:	1d3b      	adds	r3, r7, #4
 8003188:	2204      	movs	r2, #4
 800318a:	4619      	mov	r1, r3
 800318c:	2034      	movs	r0, #52	@ 0x34
 800318e:	f7ff fe0e 	bl	8002dae <extflash_read_sfdp>

	memcpy(&exflashSize, density, sizeof(uint32_t));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a0e      	ldr	r2, [pc, #56]	@ (80031d0 <extflash_init+0xc0>)
 8003196:	6013      	str	r3, [r2, #0]

	exflashSize += 1;
 8003198:	4b0d      	ldr	r3, [pc, #52]	@ (80031d0 <extflash_init+0xc0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3301      	adds	r3, #1
 800319e:	4a0c      	ldr	r2, [pc, #48]	@ (80031d0 <extflash_init+0xc0>)
 80031a0:	6013      	str	r3, [r2, #0]
	exflashSize >>= 3;
 80031a2:	4b0b      	ldr	r3, [pc, #44]	@ (80031d0 <extflash_init+0xc0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	08db      	lsrs	r3, r3, #3
 80031a8:	4a09      	ldr	r2, [pc, #36]	@ (80031d0 <extflash_init+0xc0>)
 80031aa:	6013      	str	r3, [r2, #0]

	exflashNumSectors = exflashSize / EFLASH_DEF_SECTOR_SIZE;
 80031ac:	4b08      	ldr	r3, [pc, #32]	@ (80031d0 <extflash_init+0xc0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	0b1b      	lsrs	r3, r3, #12
 80031b2:	4a06      	ldr	r2, [pc, #24]	@ (80031cc <extflash_init+0xbc>)
 80031b4:	6013      	str	r3, [r2, #0]

	exflashInitDone = 1;
 80031b6:	4b04      	ldr	r3, [pc, #16]	@ (80031c8 <extflash_init+0xb8>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	701a      	strb	r2, [r3, #0]

	return 0;
 80031bc:	2300      	movs	r3, #0

}
 80031be:	4618      	mov	r0, r3
 80031c0:	3720      	adds	r7, #32
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000314 	.word	0x20000314
 80031cc:	20000310 	.word	0x20000310
 80031d0:	2000030c 	.word	0x2000030c

080031d4 <System_Init>:
#include "lsm6dsv16x_rw.h"
#include "DS18B20.h"

/*-----INIZiALIZZAZIONE SISTEMA-----*/
void System_Init(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
	acc.write_reg = acc_write;
 80031d8:	4b22      	ldr	r3, [pc, #136]	@ (8003264 <System_Init+0x90>)
 80031da:	4a23      	ldr	r2, [pc, #140]	@ (8003268 <System_Init+0x94>)
 80031dc:	601a      	str	r2, [r3, #0]
	acc.read_reg = acc_read;
 80031de:	4b21      	ldr	r3, [pc, #132]	@ (8003264 <System_Init+0x90>)
 80031e0:	4a22      	ldr	r2, [pc, #136]	@ (800326c <System_Init+0x98>)
 80031e2:	605a      	str	r2, [r3, #4]
	acc.handle = &hspi3;
 80031e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003264 <System_Init+0x90>)
 80031e6:	4a22      	ldr	r2, [pc, #136]	@ (8003270 <System_Init+0x9c>)
 80031e8:	60da      	str	r2, [r3, #12]

	LED_Init();	
 80031ea:	f000 fa75 	bl	80036d8 <LED_Init>
	LED_Start(GRN_LED, FAST, HIGH);
 80031ee:	2205      	movs	r2, #5
 80031f0:	2100      	movs	r1, #0
 80031f2:	2008      	movs	r0, #8
 80031f4:	f000 fa90 	bl	8003718 <LED_Start>

	BC_Init();
 80031f8:	f7ff f9b4 	bl	8002564 <BC_Init>
	INA3221_Init();
 80031fc:	f7fd feec 	bl	8000fd8 <INA3221_Init>
	FatFS_Init();
 8003200:	f000 f840 	bl	8003284 <FatFS_Init>
	Config_Init();
 8003204:	f000 f99c 	bl	8003540 <Config_Init>
	Acc_Init(&acc, config.samp_freq);
 8003208:	4b1a      	ldr	r3, [pc, #104]	@ (8003274 <System_Init+0xa0>)
 800320a:	885b      	ldrh	r3, [r3, #2]
 800320c:	4619      	mov	r1, r3
 800320e:	4815      	ldr	r0, [pc, #84]	@ (8003264 <System_Init+0x90>)
 8003210:	f000 f8d4 	bl	80033bc <Acc_Init>
	LED_Start(ORG_LED, FAST, HALF);
 8003214:	2206      	movs	r2, #6
 8003216:	2100      	movs	r1, #0
 8003218:	2000      	movs	r0, #0
 800321a:	f000 fa7d 	bl	8003718 <LED_Start>
	while(SIM_Init() != HAL_OK);
 800321e:	bf00      	nop
 8003220:	f7fe f94e 	bl	80014c0 <SIM_Init>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1fa      	bne.n	8003220 <System_Init+0x4c>
	LED_Stop(ORG_LED);
 800322a:	2000      	movs	r0, #0
 800322c:	f000 fb40 	bl	80038b0 <LED_Stop>
	RTC_Init();
 8003230:	f7fd ff86 	bl	8001140 <RTC_Init>
	Temperature = Read_Temperature();
 8003234:	f7fd fe98 	bl	8000f68 <Read_Temperature>
 8003238:	4603      	mov	r3, r0
 800323a:	461a      	mov	r2, r3
 800323c:	4b0e      	ldr	r3, [pc, #56]	@ (8003278 <System_Init+0xa4>)
 800323e:	801a      	strh	r2, [r3, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8003240:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003244:	490d      	ldr	r1, [pc, #52]	@ (800327c <System_Init+0xa8>)
 8003246:	480e      	ldr	r0, [pc, #56]	@ (8003280 <System_Init+0xac>)
 8003248:	f012 fe74 	bl	8015f34 <HAL_UARTEx_ReceiveToIdle_DMA>

	HAL_Delay(9000);
 800324c:	f242 3028 	movw	r0, #9000	@ 0x2328
 8003250:	f007 fef2 	bl	800b038 <HAL_Delay>
	LED_Start(GRN_LED, MEDIUM, HALF);
 8003254:	2206      	movs	r2, #6
 8003256:	2101      	movs	r1, #1
 8003258:	2008      	movs	r0, #8
 800325a:	f000 fa5d 	bl	8003718 <LED_Start>
}
 800325e:	bf00      	nop
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	200051ec 	.word	0x200051ec
 8003268:	08004107 	.word	0x08004107
 800326c:	0800415f 	.word	0x0800415f
 8003270:	20000508 	.word	0x20000508
 8003274:	200019ec 	.word	0x200019ec
 8003278:	20004428 	.word	0x20004428
 800327c:	200051fc 	.word	0x200051fc
 8003280:	20000724 	.word	0x20000724

08003284 <FatFS_Init>:

/*-----INIZiALIZZAZIONE MEMORIE-----*/
void FatFS_Init(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 800328a:	2300      	movs	r3, #0
 800328c:	75fb      	strb	r3, [r7, #23]
	MKFS_PARM mkfs_opt = {0};
 800328e:	1d3b      	adds	r3, r7, #4
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	60da      	str	r2, [r3, #12]

	do
	{
		sys.RAM_Mounted = 0;
 800329a:	4b41      	ldr	r3, [pc, #260]	@ (80033a0 <FatFS_Init+0x11c>)
 800329c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032a0:	461a      	mov	r2, r3
 80032a2:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80032a6:	f023 0302 	bic.w	r3, r3, #2
 80032aa:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		
		mkfs_opt.fmt = FM_FAT;
 80032ae:	2301      	movs	r3, #1
 80032b0:	713b      	strb	r3, [r7, #4]
		mkfs_opt.au_size = 1024;
 80032b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032b6:	613b      	str	r3, [r7, #16]
		mkfs_opt.n_fat = 1;
 80032b8:	2301      	movs	r3, #1
 80032ba:	717b      	strb	r3, [r7, #5]
		mkfs_opt.align = 1;
 80032bc:	2301      	movs	r3, #1
 80032be:	60bb      	str	r3, [r7, #8]

		fRes = f_mkfs("/ram", &mkfs_opt, psram_fs.win, sizeof(psram_fs.win));
 80032c0:	1d39      	adds	r1, r7, #4
 80032c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032c6:	4a37      	ldr	r2, [pc, #220]	@ (80033a4 <FatFS_Init+0x120>)
 80032c8:	4837      	ldr	r0, [pc, #220]	@ (80033a8 <FatFS_Init+0x124>)
 80032ca:	f007 f9c7 	bl	800a65c <f_mkfs>
 80032ce:	4603      	mov	r3, r0
 80032d0:	75fb      	strb	r3, [r7, #23]
		if (fRes != FR_OK)
 80032d2:	7dfb      	ldrb	r3, [r7, #23]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d114      	bne.n	8003302 <FatFS_Init+0x7e>
		{
			break;
		}

		fRes = f_mount(&psram_fs, "/ram", 1);
 80032d8:	2201      	movs	r2, #1
 80032da:	4933      	ldr	r1, [pc, #204]	@ (80033a8 <FatFS_Init+0x124>)
 80032dc:	4833      	ldr	r0, [pc, #204]	@ (80033ac <FatFS_Init+0x128>)
 80032de:	f006 fb3b 	bl	8009958 <f_mount>
 80032e2:	4603      	mov	r3, r0
 80032e4:	75fb      	strb	r3, [r7, #23]

		if (fRes != FR_OK)
 80032e6:	7dfb      	ldrb	r3, [r7, #23]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10c      	bne.n	8003306 <FatFS_Init+0x82>
		{
			break;
		}

		sys.RAM_Mounted = 1;
 80032ec:	4b2c      	ldr	r3, [pc, #176]	@ (80033a0 <FatFS_Init+0x11c>)
 80032ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032f2:	461a      	mov	r2, r3
 80032f4:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80032f8:	f043 0302 	orr.w	r3, r3, #2
 80032fc:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 8003300:	e002      	b.n	8003308 <FatFS_Init+0x84>
			break;
 8003302:	bf00      	nop
 8003304:	e000      	b.n	8003308 <FatFS_Init+0x84>
			break;
 8003306:	bf00      	nop
	} while (1);

	do
	{
		sys.FLASH_Mounted = 0;
 8003308:	4b25      	ldr	r3, [pc, #148]	@ (80033a0 <FatFS_Init+0x11c>)
 800330a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800330e:	461a      	mov	r2, r3
 8003310:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003314:	f023 0304 	bic.w	r3, r3, #4
 8003318:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		fRes = f_mount(&flash_fs, "/flash", 1);
 800331c:	2201      	movs	r2, #1
 800331e:	4924      	ldr	r1, [pc, #144]	@ (80033b0 <FatFS_Init+0x12c>)
 8003320:	4824      	ldr	r0, [pc, #144]	@ (80033b4 <FatFS_Init+0x130>)
 8003322:	f006 fb19 	bl	8009958 <f_mount>
 8003326:	4603      	mov	r3, r0
 8003328:	75fb      	strb	r3, [r7, #23]

		if (fRes == FR_NO_FILESYSTEM)
 800332a:	7dfb      	ldrb	r3, [r7, #23]
 800332c:	2b0d      	cmp	r3, #13
 800332e:	d124      	bne.n	800337a <FatFS_Init+0xf6>
		{
			memset((void *)&mkfs_opt, 0, sizeof(mkfs_opt));
 8003330:	1d3b      	adds	r3, r7, #4
 8003332:	2210      	movs	r2, #16
 8003334:	2100      	movs	r1, #0
 8003336:	4618      	mov	r0, r3
 8003338:	f012 ff3a 	bl	80161b0 <memset>
			mkfs_opt.fmt = FM_FAT;
 800333c:	2301      	movs	r3, #1
 800333e:	713b      	strb	r3, [r7, #4]
			mkfs_opt.au_size = 4096;    
 8003340:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003344:	613b      	str	r3, [r7, #16]
			mkfs_opt.n_fat = 1;
 8003346:	2301      	movs	r3, #1
 8003348:	717b      	strb	r3, [r7, #5]
			mkfs_opt.align = 1;
 800334a:	2301      	movs	r3, #1
 800334c:	60bb      	str	r3, [r7, #8]

			fRes = f_mkfs("/flash", &mkfs_opt, flash_fs.win, sizeof(flash_fs.win));
 800334e:	1d39      	adds	r1, r7, #4
 8003350:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003354:	4a18      	ldr	r2, [pc, #96]	@ (80033b8 <FatFS_Init+0x134>)
 8003356:	4816      	ldr	r0, [pc, #88]	@ (80033b0 <FatFS_Init+0x12c>)
 8003358:	f007 f980 	bl	800a65c <f_mkfs>
 800335c:	4603      	mov	r3, r0
 800335e:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 8003360:	7dfb      	ldrb	r3, [r7, #23]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d114      	bne.n	8003390 <FatFS_Init+0x10c>
			{
				break;
			}

			fRes = f_mount(&flash_fs, "/flash", 1);
 8003366:	2201      	movs	r2, #1
 8003368:	4911      	ldr	r1, [pc, #68]	@ (80033b0 <FatFS_Init+0x12c>)
 800336a:	4812      	ldr	r0, [pc, #72]	@ (80033b4 <FatFS_Init+0x130>)
 800336c:	f006 faf4 	bl	8009958 <f_mount>
 8003370:	4603      	mov	r3, r0
 8003372:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 8003374:	7dfb      	ldrb	r3, [r7, #23]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10c      	bne.n	8003394 <FatFS_Init+0x110>
			{
				break;
			}
		}

		sys.FLASH_Mounted = 1;
 800337a:	4b09      	ldr	r3, [pc, #36]	@ (80033a0 <FatFS_Init+0x11c>)
 800337c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003380:	461a      	mov	r2, r3
 8003382:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003386:	f043 0304 	orr.w	r3, r3, #4
 800338a:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 800338e:	e002      	b.n	8003396 <FatFS_Init+0x112>
				break;
 8003390:	bf00      	nop
 8003392:	e000      	b.n	8003396 <FatFS_Init+0x112>
				break;
 8003394:	bf00      	nop
	} while (1);


}
 8003396:	bf00      	nop
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20000840 	.word	0x20000840
 80033a4:	20001b14 	.word	0x20001b14
 80033a8:	08017600 	.word	0x08017600
 80033ac:	20001ae0 	.word	0x20001ae0
 80033b0:	08017608 	.word	0x08017608
 80033b4:	20002b14 	.word	0x20002b14
 80033b8:	20002b48 	.word	0x20002b48

080033bc <Acc_Init>:

/*-----INIZiALIZZAZIONE ACCELEROMETRO-----*/
int Acc_Init(stmdev_ctx_t* acc, uint16_t fs)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	807b      	strh	r3, [r7, #2]
	lsm6dsv16x_reset_t rst;
	lsm6dsv16x_pin_int_route_t pin_int = {0};
 80033c8:	f107 0310 	add.w	r3, r7, #16
 80033cc:	2100      	movs	r1, #0
 80033ce:	460a      	mov	r2, r1
 80033d0:	801a      	strh	r2, [r3, #0]
 80033d2:	460a      	mov	r2, r1
 80033d4:	709a      	strb	r2, [r3, #2]
	uint8_t acc_whoamI = 0;
 80033d6:	2300      	movs	r3, #0
 80033d8:	73fb      	strb	r3, [r7, #15]
	uint8_t wmi_cnt = 0;
 80033da:	2300      	movs	r3, #0
 80033dc:	75fb      	strb	r3, [r7, #23]

	pin_int.fifo_th = PROPERTY_ENABLE;
 80033de:	7c3b      	ldrb	r3, [r7, #16]
 80033e0:	f043 0308 	orr.w	r3, r3, #8
 80033e4:	743b      	strb	r3, [r7, #16]


	lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 80033e6:	f107 030f 	add.w	r3, r7, #15
 80033ea:	4619      	mov	r1, r3
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 fb5d 	bl	8003aac <lsm6dsv16x_device_id_get>
	if (acc_whoamI != LSM6DSV16X_ID)
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	2b70      	cmp	r3, #112	@ 0x70
 80033f6:	d020      	beq.n	800343a <Acc_Init+0x7e>
		while (acc_whoamI != LSM6DSV16X_ID)
 80033f8:	e01c      	b.n	8003434 <Acc_Init+0x78>
		{
			lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 80033fa:	f107 030f 	add.w	r3, r7, #15
 80033fe:	4619      	mov	r1, r3
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fb53 	bl	8003aac <lsm6dsv16x_device_id_get>
			wmi_cnt++;
 8003406:	7dfb      	ldrb	r3, [r7, #23]
 8003408:	3301      	adds	r3, #1
 800340a:	75fb      	strb	r3, [r7, #23]
			if (wmi_cnt == 3)
 800340c:	7dfb      	ldrb	r3, [r7, #23]
 800340e:	2b03      	cmp	r3, #3
 8003410:	d110      	bne.n	8003434 <Acc_Init+0x78>
			{
				sys.ACC_Present = 0;
 8003412:	4b48      	ldr	r3, [pc, #288]	@ (8003534 <Acc_Init+0x178>)
 8003414:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003418:	461a      	mov	r2, r3
 800341a:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800341e:	f023 0301 	bic.w	r3, r3, #1
 8003422:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
				flags.ACC_Complete = 1;
 8003426:	4a44      	ldr	r2, [pc, #272]	@ (8003538 <Acc_Init+0x17c>)
 8003428:	7813      	ldrb	r3, [r2, #0]
 800342a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800342e:	7013      	strb	r3, [r2, #0]
				return 0;
 8003430:	2300      	movs	r3, #0
 8003432:	e07b      	b.n	800352c <Acc_Init+0x170>
		while (acc_whoamI != LSM6DSV16X_ID)
 8003434:	7bfb      	ldrb	r3, [r7, #15]
 8003436:	2b70      	cmp	r3, #112	@ 0x70
 8003438:	d1df      	bne.n	80033fa <Acc_Init+0x3e>
			}
		}
	sys.ACC_Present = 1;
 800343a:	4b3e      	ldr	r3, [pc, #248]	@ (8003534 <Acc_Init+0x178>)
 800343c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003440:	461a      	mov	r2, r3
 8003442:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
	lsm6dsv16x_reset_set(acc, LSM6DSV16X_GLOBAL_RST);
 800344e:	2101      	movs	r1, #1
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 fa85 	bl	8003960 <lsm6dsv16x_reset_set>
	do {
		lsm6dsv16x_reset_get(acc, &rst);
 8003456:	f107 0316 	add.w	r3, r7, #22
 800345a:	4619      	mov	r1, r3
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 facf 	bl	8003a00 <lsm6dsv16x_reset_get>
		HAL_Delay(10);
 8003462:	200a      	movs	r0, #10
 8003464:	f007 fde8 	bl	800b038 <HAL_Delay>
	} while (rst != LSM6DSV16X_READY);
 8003468:	7dbb      	ldrb	r3, [r7, #22]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f3      	bne.n	8003456 <Acc_Init+0x9a>

	lsm6dsv16x_block_data_update_set(acc, PROPERTY_ENABLE);
 800346e:	2101      	movs	r1, #1
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 fc18 	bl	8003ca6 <lsm6dsv16x_block_data_update_set>
	lsm6dsv16x_ui_i2c_i3c_mode_set(acc, LSM6DSV16X_I2C_I3C_DISABLE);
 8003476:	2101      	movs	r1, #1
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 fe1e 	bl	80040ba <lsm6dsv16x_ui_i2c_i3c_mode_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_HIGH_PERFORMANCE_MD);
 800347e:	2100      	movs	r1, #0
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 fb75 	bl	8003b70 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_HIGH_PERFORMANCE_MD);
 8003486:	2100      	movs	r1, #0
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fbe6 	bl	8003c5a <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_fifo_xl_batch_set(acc, LSM6DSV16X_XL_BATCHED_AT_960Hz);
 800348e:	2109      	movs	r1, #9
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fda0 	bl	8003fd6 <lsm6dsv16x_fifo_xl_batch_set>
	lsm6dsv16x_fifo_gy_batch_set(acc, LSM6DSV16X_GY_NOT_BATCHED);
 8003496:	2100      	movs	r1, #0
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fdc2 	bl	8004022 <lsm6dsv16x_fifo_gy_batch_set>
	lsm6dsv16x_fifo_mode_set(acc, LSM6DSV16X_BYPASS_MODE);
 800349e:	2100      	movs	r1, #0
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 fde4 	bl	800406e <lsm6dsv16x_fifo_mode_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 80034a6:	2100      	movs	r1, #0
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 fb10 	bl	8003ace <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_gy_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 80034ae:	2100      	movs	r1, #0
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 fb83 	bl	8003bbc <lsm6dsv16x_gy_data_rate_set>
	if(fs == 1600)
 80034b6:	887b      	ldrh	r3, [r7, #2]
 80034b8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80034bc:	d104      	bne.n	80034c8 <Acc_Init+0x10c>
	{
		lsm6dsv16x_odr_trig_cfg_set(acc, 32);  //800SPS
 80034be:	2120      	movs	r1, #32
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 fc16 	bl	8003cf2 <lsm6dsv16x_odr_trig_cfg_set>
 80034c6:	e00b      	b.n	80034e0 <Acc_Init+0x124>
	}
	else if(fs == 800)
 80034c8:	887b      	ldrh	r3, [r7, #2]
 80034ca:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80034ce:	d104      	bne.n	80034da <Acc_Init+0x11e>
	{
		lsm6dsv16x_odr_trig_cfg_set(acc, 16);  //800SPS
 80034d0:	2110      	movs	r1, #16
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fc0d 	bl	8003cf2 <lsm6dsv16x_odr_trig_cfg_set>
 80034d8:	e002      	b.n	80034e0 <Acc_Init+0x124>
	}
	else
	{
		return -1;
 80034da:	f04f 33ff 	mov.w	r3, #4294967295
 80034de:	e025      	b.n	800352c <Acc_Init+0x170>
	}
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_ODR_TRIGGERED_MD);
 80034e0:	2103      	movs	r1, #3
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fb44 	bl	8003b70 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_ODR_TRIGGERED_MD);
 80034e8:	2103      	movs	r1, #3
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fbb5 	bl	8003c5a <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_den_polarity_set(acc, LSM6DSV16X_DEN_ACT_HIGH);
 80034f0:	2101      	movs	r1, #1
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fd29 	bl	8003f4a <lsm6dsv16x_den_polarity_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_AT_960Hz);
 80034f8:	2109      	movs	r1, #9
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fae7 	bl	8003ace <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_xl_full_scale_set(acc, LSM6DSV16X_2g);
 8003500:	2100      	movs	r1, #0
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 fc44 	bl	8003d90 <lsm6dsv16x_xl_full_scale_set>
	lsm6dsv16x_gy_full_scale_set(acc, LSM6DSV16X_2000dps);
 8003508:	2104      	movs	r1, #4
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fc1a 	bl	8003d44 <lsm6dsv16x_gy_full_scale_set>
	lsm6dsv16x_fifo_watermark_set(acc, ACC_FIFO_WATERMARK);
 8003510:	21c8      	movs	r1, #200	@ 0xc8
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fd3f 	bl	8003f96 <lsm6dsv16x_fifo_watermark_set>
	lsm6dsv16x_pin_int1_route_set(acc, &pin_int);
 8003518:	f107 0310 	add.w	r3, r7, #16
 800351c:	4619      	mov	r1, r3
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fc5c 	bl	8003ddc <lsm6dsv16x_pin_int1_route_set>

	__HAL_GPIO_EXTI_CLEAR_IT(ACC_INTERRUPT);
 8003524:	4b05      	ldr	r3, [pc, #20]	@ (800353c <Acc_Init+0x180>)
 8003526:	2204      	movs	r2, #4
 8003528:	615a      	str	r2, [r3, #20]
	return 0;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20000840 	.word	0x20000840
 8003538:	200019e8 	.word	0x200019e8
 800353c:	40010400 	.word	0x40010400

08003540 <Config_Init>:

/*-----INIZiALIZZAZIONE CONFIGURAZIONE-----*/
void Config_Init(void)
{
 8003540:	b5b0      	push	{r4, r5, r7, lr}
 8003542:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
    FIL config_file;
    UINT bytes_read;
    UINT bytes_written;

    if (f_open(&config_file, CONFIG_FILE, FA_READ) == FR_OK) 
 800354a:	f107 0318 	add.w	r3, r7, #24
 800354e:	3b0c      	subs	r3, #12
 8003550:	2201      	movs	r2, #1
 8003552:	495b      	ldr	r1, [pc, #364]	@ (80036c0 <Config_Init+0x180>)
 8003554:	4618      	mov	r0, r3
 8003556:	f006 fa49 	bl	80099ec <f_open>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d11f      	bne.n	80035a0 <Config_Init+0x60>
	{
        if (f_read(&config_file, &config, sizeof(config), &bytes_read) == FR_OK && bytes_read == sizeof(config))
 8003560:	f107 0318 	add.w	r3, r7, #24
 8003564:	3b10      	subs	r3, #16
 8003566:	f107 0018 	add.w	r0, r7, #24
 800356a:	380c      	subs	r0, #12
 800356c:	22f4      	movs	r2, #244	@ 0xf4
 800356e:	4955      	ldr	r1, [pc, #340]	@ (80036c4 <Config_Init+0x184>)
 8003570:	f006 fbd4 	bl	8009d1c <f_read>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10c      	bne.n	8003594 <Config_Init+0x54>
 800357a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800357e:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8003582:	2bf4      	cmp	r3, #244	@ 0xf4
 8003584:	d106      	bne.n	8003594 <Config_Init+0x54>
		{
			f_close(&config_file);
 8003586:	f107 0318 	add.w	r3, r7, #24
 800358a:	3b0c      	subs	r3, #12
 800358c:	4618      	mov	r0, r3
 800358e:	f006 ff21 	bl	800a3d4 <f_close>
			return;
 8003592:	e08f      	b.n	80036b4 <Config_Init+0x174>
        }
        f_close(&config_file);
 8003594:	f107 0318 	add.w	r3, r7, #24
 8003598:	3b0c      	subs	r3, #12
 800359a:	4618      	mov	r0, r3
 800359c:	f006 ff1a 	bl	800a3d4 <f_close>
    }

    config.device_id = 0;
 80035a0:	4b48      	ldr	r3, [pc, #288]	@ (80036c4 <Config_Init+0x184>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	701a      	strb	r2, [r3, #0]
	config.samp_freq = 800;
 80035a6:	4b47      	ldr	r3, [pc, #284]	@ (80036c4 <Config_Init+0x184>)
 80035a8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80035ac:	805a      	strh	r2, [r3, #2]
	config.buffering_secs = 30;
 80035ae:	4b45      	ldr	r3, [pc, #276]	@ (80036c4 <Config_Init+0x184>)
 80035b0:	221e      	movs	r2, #30
 80035b2:	711a      	strb	r2, [r3, #4]
	config.connection_timeout_ms = 60000;
 80035b4:	4b43      	ldr	r3, [pc, #268]	@ (80036c4 <Config_Init+0x184>)
 80035b6:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80035ba:	609a      	str	r2, [r3, #8]
	config.log_period_ms = 10000;
 80035bc:	4b41      	ldr	r3, [pc, #260]	@ (80036c4 <Config_Init+0x184>)
 80035be:	f242 7210 	movw	r2, #10000	@ 0x2710
 80035c2:	60da      	str	r2, [r3, #12]
	config.hammer_th = 4096;
 80035c4:	4b3f      	ldr	r3, [pc, #252]	@ (80036c4 <Config_Init+0x184>)
 80035c6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80035ca:	821a      	strh	r2, [r3, #16]
    for(int i = 0; i < 24; i++) 
 80035cc:	2300      	movs	r3, #0
 80035ce:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80035d2:	f102 0214 	add.w	r2, r2, #20
 80035d6:	6013      	str	r3, [r2, #0]
 80035d8:	e021      	b.n	800361e <Config_Init+0xde>
	{
        config.low_th[i] = 0;
 80035da:	4a3a      	ldr	r2, [pc, #232]	@ (80036c4 <Config_Init+0x184>)
 80035dc:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80035e0:	f103 0314 	add.w	r3, r3, #20
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	3308      	adds	r3, #8
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4413      	add	r3, r2
 80035ec:	2200      	movs	r2, #0
 80035ee:	805a      	strh	r2, [r3, #2]
        config.high_th[i] = 4096;
 80035f0:	4a34      	ldr	r2, [pc, #208]	@ (80036c4 <Config_Init+0x184>)
 80035f2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80035f6:	f103 0314 	add.w	r3, r3, #20
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3320      	adds	r3, #32
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	4413      	add	r3, r2
 8003602:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003606:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < 24; i++) 
 8003608:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800360c:	f103 0314 	add.w	r3, r3, #20
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3301      	adds	r3, #1
 8003614:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8003618:	f102 0214 	add.w	r2, r2, #20
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8003622:	f103 0314 	add.w	r3, r3, #20
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b17      	cmp	r3, #23
 800362a:	ddd6      	ble.n	80035da <Config_Init+0x9a>
    }
    strcpy(config.tcp_IPaddress, "esdplab.unipa.it");
 800362c:	4a26      	ldr	r2, [pc, #152]	@ (80036c8 <Config_Init+0x188>)
 800362e:	4b27      	ldr	r3, [pc, #156]	@ (80036cc <Config_Init+0x18c>)
 8003630:	4615      	mov	r5, r2
 8003632:	461c      	mov	r4, r3
 8003634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003636:	6028      	str	r0, [r5, #0]
 8003638:	6069      	str	r1, [r5, #4]
 800363a:	60aa      	str	r2, [r5, #8]
 800363c:	60eb      	str	r3, [r5, #12]
 800363e:	7823      	ldrb	r3, [r4, #0]
 8003640:	742b      	strb	r3, [r5, #16]
    strcpy(config.tcp_Port, "8080");
 8003642:	4b23      	ldr	r3, [pc, #140]	@ (80036d0 <Config_Init+0x190>)
 8003644:	4a23      	ldr	r2, [pc, #140]	@ (80036d4 <Config_Init+0x194>)
 8003646:	6810      	ldr	r0, [r2, #0]
 8003648:	6018      	str	r0, [r3, #0]
 800364a:	7912      	ldrb	r2, [r2, #4]
 800364c:	711a      	strb	r2, [r3, #4]

    if (f_open(&config_file, CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 800364e:	f107 0318 	add.w	r3, r7, #24
 8003652:	3b0c      	subs	r3, #12
 8003654:	220a      	movs	r2, #10
 8003656:	491a      	ldr	r1, [pc, #104]	@ (80036c0 <Config_Init+0x180>)
 8003658:	4618      	mov	r0, r3
 800365a:	f006 f9c7 	bl	80099ec <f_open>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d126      	bne.n	80036b2 <Config_Init+0x172>
    {
        return;
    }

    if (f_write(&config_file, &config, sizeof(Config_Typedef), &bytes_written) != FR_OK || bytes_written != sizeof(Config_Typedef)) 
 8003664:	f107 0318 	add.w	r3, r7, #24
 8003668:	3b14      	subs	r3, #20
 800366a:	f107 0018 	add.w	r0, r7, #24
 800366e:	380c      	subs	r0, #12
 8003670:	22f4      	movs	r2, #244	@ 0xf4
 8003672:	4914      	ldr	r1, [pc, #80]	@ (80036c4 <Config_Init+0x184>)
 8003674:	f006 fca5 	bl	8009fc2 <f_write>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d105      	bne.n	800368a <Config_Init+0x14a>
 800367e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003682:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8003686:	2bf4      	cmp	r3, #244	@ 0xf4
 8003688:	d006      	beq.n	8003698 <Config_Init+0x158>
	{
        f_close(&config_file);
 800368a:	f107 0318 	add.w	r3, r7, #24
 800368e:	3b0c      	subs	r3, #12
 8003690:	4618      	mov	r0, r3
 8003692:	f006 fe9f 	bl	800a3d4 <f_close>
        return;
 8003696:	e00d      	b.n	80036b4 <Config_Init+0x174>
    }
    
    f_sync(&config_file);
 8003698:	f107 0318 	add.w	r3, r7, #24
 800369c:	3b0c      	subs	r3, #12
 800369e:	4618      	mov	r0, r3
 80036a0:	f006 fe18 	bl	800a2d4 <f_sync>
    f_close(&config_file);
 80036a4:	f107 0318 	add.w	r3, r7, #24
 80036a8:	3b0c      	subs	r3, #12
 80036aa:	4618      	mov	r0, r3
 80036ac:	f006 fe92 	bl	800a3d4 <f_close>
 80036b0:	e000      	b.n	80036b4 <Config_Init+0x174>
        return;
 80036b2:	bf00      	nop
}
 80036b4:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bdb0      	pop	{r4, r5, r7, pc}
 80036be:	bf00      	nop
 80036c0:	08017610 	.word	0x08017610
 80036c4:	200019ec 	.word	0x200019ec
 80036c8:	20001a5e 	.word	0x20001a5e
 80036cc:	08017624 	.word	0x08017624
 80036d0:	20001a9e 	.word	0x20001a9e
 80036d4:	08017638 	.word	0x08017638

080036d8 <LED_Init>:
#include "peripherals.h"


/*-----INIZIALIZZAZIONE LEDs-----*/
void LED_Init(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
    LED_TIMER->Instance->CCR1 = 0;
 80036dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003710 <LED_Init+0x38>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2200      	movs	r2, #0
 80036e2:	635a      	str	r2, [r3, #52]	@ 0x34
    LED_TIMER->Instance->CCR2 = 0;
 80036e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003710 <LED_Init+0x38>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2200      	movs	r2, #0
 80036ea:	639a      	str	r2, [r3, #56]	@ 0x38
    LED_TIMER->Instance->CCR3 = 0;
 80036ec:	4b08      	ldr	r3, [pc, #32]	@ (8003710 <LED_Init+0x38>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2200      	movs	r2, #0
 80036f2:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(LED_TIMER, GRN_LED);
 80036f4:	2108      	movs	r1, #8
 80036f6:	4806      	ldr	r0, [pc, #24]	@ (8003710 <LED_Init+0x38>)
 80036f8:	f00f fae2 	bl	8012cc0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(LED_TIMER, ORG_LED);
 80036fc:	2100      	movs	r1, #0
 80036fe:	4804      	ldr	r0, [pc, #16]	@ (8003710 <LED_Init+0x38>)
 8003700:	f00f fade 	bl	8012cc0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(LED_TIMER, RED_LED);
 8003704:	2104      	movs	r1, #4
 8003706:	4802      	ldr	r0, [pc, #8]	@ (8003710 <LED_Init+0x38>)
 8003708:	f00f fada 	bl	8012cc0 <HAL_TIM_PWM_Start>
}
 800370c:	bf00      	nop
 800370e:	bd80      	pop	{r7, pc}
 8003710:	2000056c 	.word	0x2000056c
 8003714:	00000000 	.word	0x00000000

08003718 <LED_Start>:

/*------ACCENSIONE LED------*/
void LED_Start(uint32_t LED, uint8_t freq, uint8_t duty)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	70fb      	strb	r3, [r7, #3]
 8003724:	4613      	mov	r3, r2
 8003726:	70bb      	strb	r3, [r7, #2]
    TIM_HandleTypeDef *htim = LED_TIMER;
 8003728:	4b5d      	ldr	r3, [pc, #372]	@ (80038a0 <LED_Start+0x188>)
 800372a:	613b      	str	r3, [r7, #16]
	uint16_t pulse = 0;
 800372c:	2300      	movs	r3, #0
 800372e:	82fb      	strh	r3, [r7, #22]

    uint16_t prescaler = (uint16_t)(80000000 / 5000 - 1);
 8003730:	f643 637f 	movw	r3, #15999	@ 0x3e7f
 8003734:	81fb      	strh	r3, [r7, #14]
    uint16_t period = 0;
 8003736:	2300      	movs	r3, #0
 8003738:	82bb      	strh	r3, [r7, #20]

    switch(freq)
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	2b03      	cmp	r3, #3
 800373e:	f200 80a4 	bhi.w	800388a <LED_Start+0x172>
 8003742:	a201      	add	r2, pc, #4	@ (adr r2, 8003748 <LED_Start+0x30>)
 8003744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003748:	08003759 	.word	0x08003759
 800374c:	08003771 	.word	0x08003771
 8003750:	08003781 	.word	0x08003781
 8003754:	080037bd 	.word	0x080037bd
    {
        case FAST:  
            period = (uint16_t)((80000000 / prescaler / 4) - 1);
 8003758:	89fb      	ldrh	r3, [r7, #14]
 800375a:	4a52      	ldr	r2, [pc, #328]	@ (80038a4 <LED_Start+0x18c>)
 800375c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	da00      	bge.n	8003766 <LED_Start+0x4e>
 8003764:	3303      	adds	r3, #3
 8003766:	109b      	asrs	r3, r3, #2
 8003768:	b29b      	uxth	r3, r3
 800376a:	3b01      	subs	r3, #1
 800376c:	82bb      	strh	r3, [r7, #20]
            break;
 800376e:	e043      	b.n	80037f8 <LED_Start+0xe0>
        case MEDIUM:
            period = (uint16_t)((80000000 / prescaler / 1) - 1);
 8003770:	89fb      	ldrh	r3, [r7, #14]
 8003772:	4a4c      	ldr	r2, [pc, #304]	@ (80038a4 <LED_Start+0x18c>)
 8003774:	fb92 f3f3 	sdiv	r3, r2, r3
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	82bb      	strh	r3, [r7, #20]
            break;
 800377e:	e03b      	b.n	80037f8 <LED_Start+0xe0>
        case SLOW:
            period = (uint16_t)((80000000 / prescaler / 0.5) - 1);
 8003780:	89fb      	ldrh	r3, [r7, #14]
 8003782:	4a48      	ldr	r2, [pc, #288]	@ (80038a4 <LED_Start+0x18c>)
 8003784:	fb92 f3f3 	sdiv	r3, r2, r3
 8003788:	4618      	mov	r0, r3
 800378a:	f7fc fedb 	bl	8000544 <__aeabi_i2d>
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	4b45      	ldr	r3, [pc, #276]	@ (80038a8 <LED_Start+0x190>)
 8003794:	f7fd f86a 	bl	800086c <__aeabi_ddiv>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4610      	mov	r0, r2
 800379e:	4619      	mov	r1, r3
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	4b41      	ldr	r3, [pc, #260]	@ (80038ac <LED_Start+0x194>)
 80037a6:	f7fc fd7f 	bl	80002a8 <__aeabi_dsub>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4610      	mov	r0, r2
 80037b0:	4619      	mov	r1, r3
 80037b2:	f7fd f943 	bl	8000a3c <__aeabi_d2uiz>
 80037b6:	4603      	mov	r3, r0
 80037b8:	82bb      	strh	r3, [r7, #20]
            break;
 80037ba:	e01d      	b.n	80037f8 <LED_Start+0xe0>
        case VERY_SLOW:
            period = (uint16_t)((80000000 / prescaler / 0.1) - 1);
 80037bc:	89fb      	ldrh	r3, [r7, #14]
 80037be:	4a39      	ldr	r2, [pc, #228]	@ (80038a4 <LED_Start+0x18c>)
 80037c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fc febd 	bl	8000544 <__aeabi_i2d>
 80037ca:	a333      	add	r3, pc, #204	@ (adr r3, 8003898 <LED_Start+0x180>)
 80037cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d0:	f7fd f84c 	bl	800086c <__aeabi_ddiv>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4610      	mov	r0, r2
 80037da:	4619      	mov	r1, r3
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	4b32      	ldr	r3, [pc, #200]	@ (80038ac <LED_Start+0x194>)
 80037e2:	f7fc fd61 	bl	80002a8 <__aeabi_dsub>
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4610      	mov	r0, r2
 80037ec:	4619      	mov	r1, r3
 80037ee:	f7fd f925 	bl	8000a3c <__aeabi_d2uiz>
 80037f2:	4603      	mov	r3, r0
 80037f4:	82bb      	strh	r3, [r7, #20]
            break;
 80037f6:	bf00      	nop
        default:
            return;
    }

	switch(duty)
 80037f8:	78bb      	ldrb	r3, [r7, #2]
 80037fa:	3b04      	subs	r3, #4
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d846      	bhi.n	800388e <LED_Start+0x176>
 8003800:	a201      	add	r2, pc, #4	@ (adr r2, 8003808 <LED_Start+0xf0>)
 8003802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003806:	bf00      	nop
 8003808:	08003819 	.word	0x08003819
 800380c:	0800381f 	.word	0x0800381f
 8003810:	08003833 	.word	0x08003833
 8003814:	0800383b 	.word	0x0800383b
	{
		case FULL:
			pulse = period; 
 8003818:	8abb      	ldrh	r3, [r7, #20]
 800381a:	82fb      	strh	r3, [r7, #22]
		    break;
 800381c:	e011      	b.n	8003842 <LED_Start+0x12a>
        case HIGH:
			pulse = period * 3 / 4;
 800381e:	8aba      	ldrh	r2, [r7, #20]
 8003820:	4613      	mov	r3, r2
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4413      	add	r3, r2
 8003826:	2b00      	cmp	r3, #0
 8003828:	da00      	bge.n	800382c <LED_Start+0x114>
 800382a:	3303      	adds	r3, #3
 800382c:	109b      	asrs	r3, r3, #2
 800382e:	82fb      	strh	r3, [r7, #22]
			break;
 8003830:	e007      	b.n	8003842 <LED_Start+0x12a>
		case HALF:
			pulse = period / 2;
 8003832:	8abb      	ldrh	r3, [r7, #20]
 8003834:	085b      	lsrs	r3, r3, #1
 8003836:	82fb      	strh	r3, [r7, #22]
			break;
 8003838:	e003      	b.n	8003842 <LED_Start+0x12a>
		case LOW:
			pulse = period / 4;
 800383a:	8abb      	ldrh	r3, [r7, #20]
 800383c:	089b      	lsrs	r3, r3, #2
 800383e:	82fb      	strh	r3, [r7, #22]
			break;
 8003840:	bf00      	nop
        default:
            return;
	}

    // Imposta periodo e prescaler
    htim->Instance->PSC = prescaler;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	89fa      	ldrh	r2, [r7, #14]
 8003848:	629a      	str	r2, [r3, #40]	@ 0x28
    htim->Instance->ARR = period;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	8aba      	ldrh	r2, [r7, #20]
 8003850:	62da      	str	r2, [r3, #44]	@ 0x2c
	switch(LED)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b08      	cmp	r3, #8
 8003856:	d009      	beq.n	800386c <LED_Start+0x154>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b08      	cmp	r3, #8
 800385c:	d818      	bhi.n	8003890 <LED_Start+0x178>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <LED_Start+0x15e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b04      	cmp	r3, #4
 8003868:	d00a      	beq.n	8003880 <LED_Start+0x168>
 800386a:	e011      	b.n	8003890 <LED_Start+0x178>
    {
    case GRN_LED:
        LED_TIMER->Instance->CCR3 = pulse;
 800386c:	4b0c      	ldr	r3, [pc, #48]	@ (80038a0 <LED_Start+0x188>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	8afa      	ldrh	r2, [r7, #22]
 8003872:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8003874:	e00c      	b.n	8003890 <LED_Start+0x178>
    case ORG_LED:
        LED_TIMER->Instance->CCR1 = pulse;
 8003876:	4b0a      	ldr	r3, [pc, #40]	@ (80038a0 <LED_Start+0x188>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	8afa      	ldrh	r2, [r7, #22]
 800387c:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 800387e:	e007      	b.n	8003890 <LED_Start+0x178>
    case RED_LED:
        LED_TIMER->Instance->CCR2 = pulse;
 8003880:	4b07      	ldr	r3, [pc, #28]	@ (80038a0 <LED_Start+0x188>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	8afa      	ldrh	r2, [r7, #22]
 8003886:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8003888:	e002      	b.n	8003890 <LED_Start+0x178>
            return;
 800388a:	bf00      	nop
 800388c:	e000      	b.n	8003890 <LED_Start+0x178>
            return;
 800388e:	bf00      	nop
    }
}
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	9999999a 	.word	0x9999999a
 800389c:	3fb99999 	.word	0x3fb99999
 80038a0:	2000056c 	.word	0x2000056c
 80038a4:	04c4b400 	.word	0x04c4b400
 80038a8:	3fe00000 	.word	0x3fe00000
 80038ac:	3ff00000 	.word	0x3ff00000

080038b0 <LED_Stop>:

/*------SPEGNIMENTO LED------*/
void LED_Stop(uint32_t LED)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	switch(LED)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d009      	beq.n	80038d2 <LED_Stop+0x22>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d815      	bhi.n	80038f0 <LED_Stop+0x40>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d008      	beq.n	80038dc <LED_Stop+0x2c>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d00a      	beq.n	80038e6 <LED_Stop+0x36>
        break;
    case RED_LED:
        LED_TIMER->Instance->CCR2 = 0;
        break;
    }
}
 80038d0:	e00e      	b.n	80038f0 <LED_Stop+0x40>
        LED_TIMER->Instance->CCR3 = 0;
 80038d2:	4b0a      	ldr	r3, [pc, #40]	@ (80038fc <LED_Stop+0x4c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2200      	movs	r2, #0
 80038d8:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 80038da:	e009      	b.n	80038f0 <LED_Stop+0x40>
        LED_TIMER->Instance->CCR1 = 0;
 80038dc:	4b07      	ldr	r3, [pc, #28]	@ (80038fc <LED_Stop+0x4c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2200      	movs	r2, #0
 80038e2:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 80038e4:	e004      	b.n	80038f0 <LED_Stop+0x40>
        LED_TIMER->Instance->CCR2 = 0;
 80038e6:	4b05      	ldr	r3, [pc, #20]	@ (80038fc <LED_Stop+0x4c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2200      	movs	r2, #0
 80038ec:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80038ee:	bf00      	nop
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	2000056c 	.word	0x2000056c

08003900 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8003900:	b590      	push	{r4, r7, lr}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	461a      	mov	r2, r3
 800390c:	460b      	mov	r3, r1
 800390e:	72fb      	strb	r3, [r7, #11]
 8003910:	4613      	mov	r3, r2
 8003912:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	685c      	ldr	r4, [r3, #4]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	68d8      	ldr	r0, [r3, #12]
 800391c:	893b      	ldrh	r3, [r7, #8]
 800391e:	7af9      	ldrb	r1, [r7, #11]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	47a0      	blx	r4
 8003924:	6178      	str	r0, [r7, #20]

  return ret;
 8003926:	697b      	ldr	r3, [r7, #20]
}
 8003928:	4618      	mov	r0, r3
 800392a:	371c      	adds	r7, #28
 800392c:	46bd      	mov	sp, r7
 800392e:	bd90      	pop	{r4, r7, pc}

08003930 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8003930:	b590      	push	{r4, r7, lr}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	607a      	str	r2, [r7, #4]
 800393a:	461a      	mov	r2, r3
 800393c:	460b      	mov	r3, r1
 800393e:	72fb      	strb	r3, [r7, #11]
 8003940:	4613      	mov	r3, r2
 8003942:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681c      	ldr	r4, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	68d8      	ldr	r0, [r3, #12]
 800394c:	893b      	ldrh	r3, [r7, #8]
 800394e:	7af9      	ldrb	r1, [r7, #11]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	47a0      	blx	r4
 8003954:	6178      	str	r0, [r7, #20]

  return ret;
 8003956:	697b      	ldr	r3, [r7, #20]
}
 8003958:	4618      	mov	r0, r3
 800395a:	371c      	adds	r7, #28
 800395c:	46bd      	mov	sp, r7
 800395e:	bd90      	pop	{r4, r7, pc}

08003960 <lsm6dsv16x_reset_set>:
  * @param  val      Reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_set(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t val)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800396c:	f107 020c 	add.w	r2, r7, #12
 8003970:	2301      	movs	r3, #1
 8003972:	2112      	movs	r1, #18
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ffc3 	bl	8003900 <lsm6dsv16x_read_reg>
 800397a:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 800397c:	f107 0210 	add.w	r2, r7, #16
 8003980:	2301      	movs	r3, #1
 8003982:	2101      	movs	r1, #1
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7ff ffbb 	bl	8003900 <lsm6dsv16x_read_reg>
 800398a:	4602      	mov	r2, r0
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	4413      	add	r3, r2
 8003990:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <lsm6dsv16x_reset_set+0x3c>
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	e02d      	b.n	80039f8 <lsm6dsv16x_reset_set+0x98>

  ctrl3.boot = ((uint8_t)val & 0x04U) >> 2;
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	089b      	lsrs	r3, r3, #2
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	7b3b      	ldrb	r3, [r7, #12]
 80039a8:	f362 13c7 	bfi	r3, r2, #7, #1
 80039ac:	733b      	strb	r3, [r7, #12]
  ctrl3.sw_reset = ((uint8_t)val & 0x02U) >> 1;
 80039ae:	78fb      	ldrb	r3, [r7, #3]
 80039b0:	085b      	lsrs	r3, r3, #1
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	7b3b      	ldrb	r3, [r7, #12]
 80039ba:	f362 0300 	bfi	r3, r2, #0, #1
 80039be:	733b      	strb	r3, [r7, #12]
  func_cfg_access.sw_por = (uint8_t)val & 0x01U;
 80039c0:	78fb      	ldrb	r3, [r7, #3]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	7c3b      	ldrb	r3, [r7, #16]
 80039ca:	f362 0382 	bfi	r3, r2, #2, #1
 80039ce:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80039d0:	f107 020c 	add.w	r2, r7, #12
 80039d4:	2301      	movs	r3, #1
 80039d6:	2112      	movs	r1, #18
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ffa9 	bl	8003930 <lsm6dsv16x_write_reg>
 80039de:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80039e0:	f107 0210 	add.w	r2, r7, #16
 80039e4:	2301      	movs	r3, #1
 80039e6:	2101      	movs	r1, #1
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff ffa1 	bl	8003930 <lsm6dsv16x_write_reg>
 80039ee:	4602      	mov	r2, r0
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	4413      	add	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]

  return ret;
 80039f6:	697b      	ldr	r3, [r7, #20]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <lsm6dsv16x_reset_get>:
  * @param  val      Global reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_get(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t *val)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003a0a:	f107 020c 	add.w	r2, r7, #12
 8003a0e:	2301      	movs	r3, #1
 8003a10:	2112      	movs	r1, #18
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff ff74 	bl	8003900 <lsm6dsv16x_read_reg>
 8003a18:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8003a1a:	f107 0210 	add.w	r2, r7, #16
 8003a1e:	2301      	movs	r3, #1
 8003a20:	2101      	movs	r1, #1
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff ff6c 	bl	8003900 <lsm6dsv16x_read_reg>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <lsm6dsv16x_reset_get+0x3a>
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	e033      	b.n	8003aa2 <lsm6dsv16x_reset_get+0xa2>

  switch ((ctrl3.sw_reset << 2) + (ctrl3.boot << 1) + func_cfg_access.sw_por)
 8003a3a:	7b3b      	ldrb	r3, [r7, #12]
 8003a3c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	009a      	lsls	r2, r3, #2
 8003a44:	7b3b      	ldrb	r3, [r7, #12]
 8003a46:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	4413      	add	r3, r2
 8003a50:	7c3a      	ldrb	r2, [r7, #16]
 8003a52:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	4413      	add	r3, r2
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d81c      	bhi.n	8003a98 <lsm6dsv16x_reset_get+0x98>
 8003a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a64 <lsm6dsv16x_reset_get+0x64>)
 8003a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a64:	08003a79 	.word	0x08003a79
 8003a68:	08003a81 	.word	0x08003a81
 8003a6c:	08003a89 	.word	0x08003a89
 8003a70:	08003a99 	.word	0x08003a99
 8003a74:	08003a91 	.word	0x08003a91
  {
    case LSM6DSV16X_READY:
      *val = LSM6DSV16X_READY;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	701a      	strb	r2, [r3, #0]
      break;
 8003a7e:	e00f      	b.n	8003aa0 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_GLOBAL_RST:
      *val = LSM6DSV16X_GLOBAL_RST;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	2201      	movs	r2, #1
 8003a84:	701a      	strb	r2, [r3, #0]
      break;
 8003a86:	e00b      	b.n	8003aa0 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CAL_PARAM:
      *val = LSM6DSV16X_RESTORE_CAL_PARAM;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	701a      	strb	r2, [r3, #0]
      break;
 8003a8e:	e007      	b.n	8003aa0 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CTRL_REGS:
      *val = LSM6DSV16X_RESTORE_CTRL_REGS;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	2204      	movs	r2, #4
 8003a94:	701a      	strb	r2, [r3, #0]
      break;
 8003a96:	e003      	b.n	8003aa0 <lsm6dsv16x_reset_get+0xa0>

    default:
      *val = LSM6DSV16X_GLOBAL_RST;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	701a      	strb	r2, [r3, #0]
      break;
 8003a9e:	bf00      	nop
  }

  return ret;
 8003aa0:	697b      	ldr	r3, [r7, #20]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop

08003aac <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	210f      	movs	r1, #15
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7ff ff1f 	bl	8003900 <lsm6dsv16x_read_reg>
 8003ac2:	60f8      	str	r0, [r7, #12]

  return ret;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b086      	sub	sp, #24
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8003ada:	f107 0210 	add.w	r2, r7, #16
 8003ade:	2301      	movs	r3, #1
 8003ae0:	2110      	movs	r1, #16
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff ff0c 	bl	8003900 <lsm6dsv16x_read_reg>
 8003ae8:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <lsm6dsv16x_xl_data_rate_set+0x26>
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	e039      	b.n	8003b68 <lsm6dsv16x_xl_data_rate_set+0x9a>

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 8003af4:	78fb      	ldrb	r3, [r7, #3]
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	7c3b      	ldrb	r3, [r7, #16]
 8003afe:	f362 0303 	bfi	r3, r2, #0, #4
 8003b02:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8003b04:	f107 0210 	add.w	r2, r7, #16
 8003b08:	2301      	movs	r3, #1
 8003b0a:	2110      	movs	r1, #16
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7ff ff0f 	bl	8003930 <lsm6dsv16x_write_reg>
 8003b12:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <lsm6dsv16x_xl_data_rate_set+0x50>
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	e024      	b.n	8003b68 <lsm6dsv16x_xl_data_rate_set+0x9a>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8003b1e:	78fb      	ldrb	r3, [r7, #3]
 8003b20:	091b      	lsrs	r3, r3, #4
 8003b22:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8003b24:	7cfb      	ldrb	r3, [r7, #19]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d01d      	beq.n	8003b66 <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003b2a:	f107 020c 	add.w	r2, r7, #12
 8003b2e:	2301      	movs	r3, #1
 8003b30:	2162      	movs	r1, #98	@ 0x62
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7ff fee4 	bl	8003900 <lsm6dsv16x_read_reg>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8003b40:	7cfb      	ldrb	r3, [r7, #19]
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	7b3b      	ldrb	r3, [r7, #12]
 8003b4a:	f362 0301 	bfi	r3, r2, #0, #2
 8003b4e:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003b50:	f107 020c 	add.w	r2, r7, #12
 8003b54:	2301      	movs	r3, #1
 8003b56:	2162      	movs	r1, #98	@ 0x62
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff fee9 	bl	8003930 <lsm6dsv16x_write_reg>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	4413      	add	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003b66:	697b      	ldr	r3, [r7, #20]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <lsm6dsv16x_xl_mode_set>:
  * @param  val      XL_HIGH_PERFORMANCE_MD, XL_HIGH_ACCURACY_ODR_MD, XL_LOW_POWER_2_AVG_MD, XL_LOW_POWER_4_AVG_MD, XL_LOW_POWER_8_AVG_MD, XL_NORMAL_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_xl_mode_t val)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8003b7c:	f107 0208 	add.w	r2, r7, #8
 8003b80:	2301      	movs	r3, #1
 8003b82:	2110      	movs	r1, #16
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff febb 	bl	8003900 <lsm6dsv16x_read_reg>
 8003b8a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10f      	bne.n	8003bb2 <lsm6dsv16x_xl_mode_set+0x42>
  {
    ctrl1.op_mode_xl = (uint8_t)val & 0x07U;
 8003b92:	78fb      	ldrb	r3, [r7, #3]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	7a3b      	ldrb	r3, [r7, #8]
 8003b9c:	f362 1306 	bfi	r3, r2, #4, #3
 8003ba0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8003ba2:	f107 0208 	add.w	r2, r7, #8
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	2110      	movs	r1, #16
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7ff fec0 	bl	8003930 <lsm6dsv16x_write_reg>
 8003bb0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003bc8:	f107 0210 	add.w	r2, r7, #16
 8003bcc:	2301      	movs	r3, #1
 8003bce:	2111      	movs	r1, #17
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff fe95 	bl	8003900 <lsm6dsv16x_read_reg>
 8003bd6:	6178      	str	r0, [r7, #20]
  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	7c3b      	ldrb	r3, [r7, #16]
 8003be2:	f362 0303 	bfi	r3, r2, #0, #4
 8003be6:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003be8:	f107 0210 	add.w	r2, r7, #16
 8003bec:	2301      	movs	r3, #1
 8003bee:	2111      	movs	r1, #17
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7ff fe9d 	bl	8003930 <lsm6dsv16x_write_reg>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <lsm6dsv16x_gy_data_rate_set+0x4c>
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	e024      	b.n	8003c52 <lsm6dsv16x_gy_data_rate_set+0x96>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	091b      	lsrs	r3, r3, #4
 8003c0c:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8003c0e:	7cfb      	ldrb	r3, [r7, #19]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01d      	beq.n	8003c50 <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003c14:	f107 020c 	add.w	r2, r7, #12
 8003c18:	2301      	movs	r3, #1
 8003c1a:	2162      	movs	r1, #98	@ 0x62
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7ff fe6f 	bl	8003900 <lsm6dsv16x_read_reg>
 8003c22:	4602      	mov	r2, r0
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	4413      	add	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8003c2a:	7cfb      	ldrb	r3, [r7, #19]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	7b3b      	ldrb	r3, [r7, #12]
 8003c34:	f362 0301 	bfi	r3, r2, #0, #2
 8003c38:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003c3a:	f107 020c 	add.w	r2, r7, #12
 8003c3e:	2301      	movs	r3, #1
 8003c40:	2162      	movs	r1, #98	@ 0x62
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7ff fe74 	bl	8003930 <lsm6dsv16x_write_reg>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003c50:	697b      	ldr	r3, [r7, #20]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <lsm6dsv16x_gy_mode_set>:
  * @param  val      GY_HIGH_PERFORMANCE_MD, GY_HIGH_ACCURACY_ODR_MD, GY_SLEEP_MD, GY_LOW_POWER_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_gy_mode_t val)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	460b      	mov	r3, r1
 8003c64:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003c66:	f107 0208 	add.w	r2, r7, #8
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	2111      	movs	r1, #17
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff fe46 	bl	8003900 <lsm6dsv16x_read_reg>
 8003c74:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10f      	bne.n	8003c9c <lsm6dsv16x_gy_mode_set+0x42>
  {
    ctrl2.op_mode_g = (uint8_t)val & 0x07U;
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	7a3b      	ldrb	r3, [r7, #8]
 8003c86:	f362 1306 	bfi	r3, r2, #4, #3
 8003c8a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003c8c:	f107 0208 	add.w	r2, r7, #8
 8003c90:	2301      	movs	r3, #1
 8003c92:	2111      	movs	r1, #17
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff fe4b 	bl	8003930 <lsm6dsv16x_write_reg>
 8003c9a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b084      	sub	sp, #16
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003cb2:	f107 0208 	add.w	r2, r7, #8
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	2112      	movs	r1, #18
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff fe20 	bl	8003900 <lsm6dsv16x_read_reg>
 8003cc0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10f      	bne.n	8003ce8 <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	7a3b      	ldrb	r3, [r7, #8]
 8003cd2:	f362 1386 	bfi	r3, r2, #6, #1
 8003cd6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003cd8:	f107 0208 	add.w	r2, r7, #8
 8003cdc:	2301      	movs	r3, #1
 8003cde:	2112      	movs	r1, #18
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff fe25 	bl	8003930 <lsm6dsv16x_write_reg>
 8003ce6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <lsm6dsv16x_odr_trig_cfg_set>:
  * @param  val      number of data in the reference period.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_odr_trig_cfg_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_odr_trig_cfg_t odr_trig;
  int32_t ret;

  if (val >= 1U && val <= 3U) {
 8003cfe:	78fb      	ldrb	r3, [r7, #3]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
 8003d04:	78fb      	ldrb	r3, [r7, #3]
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d802      	bhi.n	8003d10 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
    return -1;
 8003d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0e:	e015      	b.n	8003d3c <lsm6dsv16x_odr_trig_cfg_set+0x4a>
  }

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 8003d10:	f107 0208 	add.w	r2, r7, #8
 8003d14:	2301      	movs	r3, #1
 8003d16:	2106      	movs	r1, #6
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff fdf1 	bl	8003900 <lsm6dsv16x_read_reg>
 8003d1e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d109      	bne.n	8003d3a <lsm6dsv16x_odr_trig_cfg_set+0x48>
  {
    odr_trig.odr_trig_nodr = val;
 8003d26:	78fb      	ldrb	r3, [r7, #3]
 8003d28:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 8003d2a:	f107 0208 	add.w	r2, r7, #8
 8003d2e:	2301      	movs	r3, #1
 8003d30:	2106      	movs	r1, #6
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff fdfc 	bl	8003930 <lsm6dsv16x_write_reg>
 8003d38:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8003d50:	f107 0208 	add.w	r2, r7, #8
 8003d54:	2301      	movs	r3, #1
 8003d56:	2115      	movs	r1, #21
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff fdd1 	bl	8003900 <lsm6dsv16x_read_reg>
 8003d5e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10f      	bne.n	8003d86 <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 8003d66:	78fb      	ldrb	r3, [r7, #3]
 8003d68:	f003 030f 	and.w	r3, r3, #15
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	7a3b      	ldrb	r3, [r7, #8]
 8003d70:	f362 0303 	bfi	r3, r2, #0, #4
 8003d74:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8003d76:	f107 0208 	add.w	r2, r7, #8
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	2115      	movs	r1, #21
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff fdd6 	bl	8003930 <lsm6dsv16x_write_reg>
 8003d84:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003d86:	68fb      	ldr	r3, [r7, #12]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8003d9c:	f107 0208 	add.w	r2, r7, #8
 8003da0:	2301      	movs	r3, #1
 8003da2:	2117      	movs	r1, #23
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff fdab 	bl	8003900 <lsm6dsv16x_read_reg>
 8003daa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10f      	bne.n	8003dd2 <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 8003db2:	78fb      	ldrb	r3, [r7, #3]
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	7a3b      	ldrb	r3, [r7, #8]
 8003dbc:	f362 0301 	bfi	r3, r2, #0, #2
 8003dc0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8003dc2:	f107 0208 	add.w	r2, r7, #8
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	2117      	movs	r1, #23
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff fdb0 	bl	8003930 <lsm6dsv16x_write_reg>
 8003dd0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <lsm6dsv16x_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsv16x_pin_int1_route_set(stmdev_ctx_t *ctx,
                                      lsm6dsv16x_pin_int_route_t *val)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_int1_ctrl_t          int1_ctrl;
  lsm6dsv16x_md1_cfg_t            md1_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003de6:	f107 0210 	add.w	r2, r7, #16
 8003dea:	2301      	movs	r3, #1
 8003dec:	210d      	movs	r1, #13
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff fd86 	bl	8003900 <lsm6dsv16x_read_reg>
 8003df4:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <lsm6dsv16x_pin_int1_route_set+0x24>
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	e0a0      	b.n	8003f42 <lsm6dsv16x_pin_int1_route_set+0x166>

  int1_ctrl.int1_drdy_xl       = val->drdy_xl;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	7c3b      	ldrb	r3, [r7, #16]
 8003e0c:	f362 0300 	bfi	r3, r2, #0, #1
 8003e10:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_drdy_g        = val->drdy_g;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	7c3b      	ldrb	r3, [r7, #16]
 8003e1e:	f362 0341 	bfi	r3, r2, #1, #1
 8003e22:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_th       = val->fifo_th;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	7c3b      	ldrb	r3, [r7, #16]
 8003e30:	f362 03c3 	bfi	r3, r2, #3, #1
 8003e34:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_ovr      = val->fifo_ovr;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	7c3b      	ldrb	r3, [r7, #16]
 8003e42:	f362 1304 	bfi	r3, r2, #4, #1
 8003e46:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_full     = val->fifo_full;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	7c3b      	ldrb	r3, [r7, #16]
 8003e54:	f362 1345 	bfi	r3, r2, #5, #1
 8003e58:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_cnt_bdr       = val->cnt_bdr;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	7c3b      	ldrb	r3, [r7, #16]
 8003e66:	f362 1386 	bfi	r3, r2, #6, #1
 8003e6a:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003e6c:	f107 0210 	add.w	r2, r7, #16
 8003e70:	2301      	movs	r3, #1
 8003e72:	210d      	movs	r1, #13
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7ff fd5b 	bl	8003930 <lsm6dsv16x_write_reg>
 8003e7a:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <lsm6dsv16x_pin_int1_route_set+0xaa>
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	e05d      	b.n	8003f42 <lsm6dsv16x_pin_int1_route_set+0x166>

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8003e86:	f107 020c 	add.w	r2, r7, #12
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	215e      	movs	r1, #94	@ 0x5e
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff fd36 	bl	8003900 <lsm6dsv16x_read_reg>
 8003e94:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <lsm6dsv16x_pin_int1_route_set+0xc4>
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	e050      	b.n	8003f42 <lsm6dsv16x_pin_int1_route_set+0x166>

  md1_cfg.int1_shub            = val->shub;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	785b      	ldrb	r3, [r3, #1]
 8003ea4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	7b3b      	ldrb	r3, [r7, #12]
 8003eac:	f362 0300 	bfi	r3, r2, #0, #1
 8003eb0:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_emb_func        = val->emb_func;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	785b      	ldrb	r3, [r3, #1]
 8003eb6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	7b3b      	ldrb	r3, [r7, #12]
 8003ebe:	f362 0341 	bfi	r3, r2, #1, #1
 8003ec2:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_6d              = val->sixd;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	785b      	ldrb	r3, [r3, #1]
 8003ec8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	7b3b      	ldrb	r3, [r7, #12]
 8003ed0:	f362 0382 	bfi	r3, r2, #2, #1
 8003ed4:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_single_tap      = val->single_tap;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	785b      	ldrb	r3, [r3, #1]
 8003eda:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	7b3b      	ldrb	r3, [r7, #12]
 8003ee2:	f362 1386 	bfi	r3, r2, #6, #1
 8003ee6:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_double_tap      = val->double_tap;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	785b      	ldrb	r3, [r3, #1]
 8003eec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	7b3b      	ldrb	r3, [r7, #12]
 8003ef4:	f362 03c3 	bfi	r3, r2, #3, #1
 8003ef8:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_wu              = val->wakeup;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	785b      	ldrb	r3, [r3, #1]
 8003efe:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	7b3b      	ldrb	r3, [r7, #12]
 8003f06:	f362 1345 	bfi	r3, r2, #5, #1
 8003f0a:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_ff              = val->freefall;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	785b      	ldrb	r3, [r3, #1]
 8003f10:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	7b3b      	ldrb	r3, [r7, #12]
 8003f18:	f362 1304 	bfi	r3, r2, #4, #1
 8003f1c:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_sleep_change    = val->sleep_change;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	789b      	ldrb	r3, [r3, #2]
 8003f22:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	7b3b      	ldrb	r3, [r7, #12]
 8003f2a:	f362 13c7 	bfi	r3, r2, #7, #1
 8003f2e:	733b      	strb	r3, [r7, #12]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8003f30:	f107 020c 	add.w	r2, r7, #12
 8003f34:	2301      	movs	r3, #1
 8003f36:	215e      	movs	r1, #94	@ 0x5e
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff fcf9 	bl	8003930 <lsm6dsv16x_write_reg>
 8003f3e:	6178      	str	r0, [r7, #20]

  return ret;
 8003f40:	697b      	ldr	r3, [r7, #20]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <lsm6dsv16x_den_polarity_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_den_polarity_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_den_polarity_t val)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b084      	sub	sp, #16
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	460b      	mov	r3, r1
 8003f54:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl4_t ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 8003f56:	f107 0208 	add.w	r2, r7, #8
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	2113      	movs	r1, #19
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff fcce 	bl	8003900 <lsm6dsv16x_read_reg>
 8003f64:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10f      	bne.n	8003f8c <lsm6dsv16x_den_polarity_set+0x42>
  {
    ctrl4.int2_in_lh = (uint8_t)val & 0x1U;
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	7a3b      	ldrb	r3, [r7, #8]
 8003f76:	f362 0300 	bfi	r3, r2, #0, #1
 8003f7a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 8003f7c:	f107 0208 	add.w	r2, r7, #8
 8003f80:	2301      	movs	r3, #1
 8003f82:	2113      	movs	r1, #19
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f7ff fcd3 	bl	8003930 <lsm6dsv16x_write_reg>
 8003f8a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <lsm6dsv16x_fifo_watermark_set>:
  * @param  val      FIFO watermark threshold (1 LSb = TAG (1 Byte) + 1 sensor (6 Bytes) written in FIFO).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_watermark_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl1_t fifo_ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8003fa2:	f107 0208 	add.w	r2, r7, #8
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	2107      	movs	r1, #7
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff fca8 	bl	8003900 <lsm6dsv16x_read_reg>
 8003fb0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d109      	bne.n	8003fcc <lsm6dsv16x_fifo_watermark_set+0x36>
  {
    fifo_ctrl1.wtm = val;
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8003fbc:	f107 0208 	add.w	r2, r7, #8
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	2107      	movs	r1, #7
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7ff fcb3 	bl	8003930 <lsm6dsv16x_write_reg>
 8003fca:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <lsm6dsv16x_fifo_xl_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_xl_batch_t val)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b084      	sub	sp, #16
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	460b      	mov	r3, r1
 8003fe0:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8003fe2:	f107 0208 	add.w	r2, r7, #8
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	2109      	movs	r1, #9
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff fc88 	bl	8003900 <lsm6dsv16x_read_reg>
 8003ff0:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10f      	bne.n	8004018 <lsm6dsv16x_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val & 0xFu;
 8003ff8:	78fb      	ldrb	r3, [r7, #3]
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	7a3b      	ldrb	r3, [r7, #8]
 8004002:	f362 0303 	bfi	r3, r2, #0, #4
 8004006:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8004008:	f107 0208 	add.w	r2, r7, #8
 800400c:	2301      	movs	r3, #1
 800400e:	2109      	movs	r1, #9
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff fc8d 	bl	8003930 <lsm6dsv16x_write_reg>
 8004016:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004018:	68fb      	ldr	r3, [r7, #12]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <lsm6dsv16x_fifo_gy_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_gy_batch_t val)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b084      	sub	sp, #16
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	460b      	mov	r3, r1
 800402c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 800402e:	f107 0208 	add.w	r2, r7, #8
 8004032:	2301      	movs	r3, #1
 8004034:	2109      	movs	r1, #9
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff fc62 	bl	8003900 <lsm6dsv16x_read_reg>
 800403c:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10f      	bne.n	8004064 <lsm6dsv16x_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val & 0x0Fu;
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	b2da      	uxtb	r2, r3
 800404c:	7a3b      	ldrb	r3, [r7, #8]
 800404e:	f362 1307 	bfi	r3, r2, #4, #4
 8004052:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8004054:	f107 0208 	add.w	r2, r7, #8
 8004058:	2301      	movs	r3, #1
 800405a:	2109      	movs	r1, #9
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7ff fc67 	bl	8003930 <lsm6dsv16x_write_reg>
 8004062:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004064:	68fb      	ldr	r3, [r7, #12]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b084      	sub	sp, #16
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	460b      	mov	r3, r1
 8004078:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 800407a:	f107 0208 	add.w	r2, r7, #8
 800407e:	2301      	movs	r3, #1
 8004080:	210a      	movs	r1, #10
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff fc3c 	bl	8003900 <lsm6dsv16x_read_reg>
 8004088:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10f      	bne.n	80040b0 <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	b2da      	uxtb	r2, r3
 8004098:	7a3b      	ldrb	r3, [r7, #8]
 800409a:	f362 0302 	bfi	r3, r2, #0, #3
 800409e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 80040a0:	f107 0208 	add.w	r2, r7, #8
 80040a4:	2301      	movs	r3, #1
 80040a6:	210a      	movs	r1, #10
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff fc41 	bl	8003930 <lsm6dsv16x_write_reg>
 80040ae:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80040b0:	68fb      	ldr	r3, [r7, #12]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <lsm6dsv16x_ui_i2c_i3c_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ui_i2c_i3c_mode_set(stmdev_ctx_t *ctx,
                                       lsm6dsv16x_ui_i2c_i3c_mode_t val)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	460b      	mov	r3, r1
 80040c4:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_if_cfg_t if_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 80040c6:	f107 0208 	add.w	r2, r7, #8
 80040ca:	2301      	movs	r3, #1
 80040cc:	2103      	movs	r1, #3
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff fc16 	bl	8003900 <lsm6dsv16x_read_reg>
 80040d4:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10f      	bne.n	80040fc <lsm6dsv16x_ui_i2c_i3c_mode_set+0x42>
  {
    if_cfg.i2c_i3c_disable = (uint8_t)val & 0x1U;
 80040dc:	78fb      	ldrb	r3, [r7, #3]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	7a3b      	ldrb	r3, [r7, #8]
 80040e6:	f362 0300 	bfi	r3, r2, #0, #1
 80040ea:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 80040ec:	f107 0208 	add.w	r2, r7, #8
 80040f0:	2301      	movs	r3, #1
 80040f2:	2103      	movs	r1, #3
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff fc1b 	bl	8003930 <lsm6dsv16x_write_reg>
 80040fa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80040fc:	68fb      	ldr	r3, [r7, #12]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <acc_write>:
#include "global_variables.h"
#include "peripherals.h"

/* -------------SCRITTURA ACCELEROMETRO-------------*/
int32_t acc_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	607a      	str	r2, [r7, #4]
 8004110:	461a      	mov	r2, r3
 8004112:	460b      	mov	r3, r1
 8004114:	72fb      	strb	r3, [r7, #11]
 8004116:	4613      	mov	r3, r2
 8004118:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 800411a:	2200      	movs	r2, #0
 800411c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004120:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004124:	f00a f972 	bl	800e40c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8004128:	f107 010b 	add.w	r1, r7, #11
 800412c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004130:	2201      	movs	r2, #1
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f00d fbf3 	bl	801191e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 8004138:	893a      	ldrh	r2, [r7, #8]
 800413a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800413e:	6879      	ldr	r1, [r7, #4]
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f00d fbec 	bl	801191e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 8004146:	2201      	movs	r2, #1
 8004148:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800414c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004150:	f00a f95c 	bl	800e40c <HAL_GPIO_WritePin>
	return 0;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <acc_read>:

/* -------------LETTURA ACCELEROMETRO-------------*/
int32_t acc_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b084      	sub	sp, #16
 8004162:	af00      	add	r7, sp, #0
 8004164:	60f8      	str	r0, [r7, #12]
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	461a      	mov	r2, r3
 800416a:	460b      	mov	r3, r1
 800416c:	72fb      	strb	r3, [r7, #11]
 800416e:	4613      	mov	r3, r2
 8004170:	813b      	strh	r3, [r7, #8]
	reg |= 0x80;
 8004172:	7afb      	ldrb	r3, [r7, #11]
 8004174:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004178:	b2db      	uxtb	r3, r3
 800417a:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 800417c:	2200      	movs	r2, #0
 800417e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004182:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004186:	f00a f941 	bl	800e40c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 800418a:	f107 010b 	add.w	r1, r7, #11
 800418e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004192:	2201      	movs	r2, #1
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f00d fbc2 	bl	801191e <HAL_SPI_Transmit>
	HAL_SPI_Receive(handle, bufp, len, 1000);
 800419a:	893a      	ldrh	r2, [r7, #8]
 800419c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f00d fd31 	bl	8011c0a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 80041a8:	2201      	movs	r2, #1
 80041aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80041b2:	f00a f92b 	bl	800e40c <HAL_GPIO_WritePin>
	return 0;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80041c4:	f3bf 8f4f 	dsb	sy
}
 80041c8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80041ca:	4b06      	ldr	r3, [pc, #24]	@ (80041e4 <__NVIC_SystemReset+0x24>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80041d2:	4904      	ldr	r1, [pc, #16]	@ (80041e4 <__NVIC_SystemReset+0x24>)
 80041d4:	4b04      	ldr	r3, [pc, #16]	@ (80041e8 <__NVIC_SystemReset+0x28>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80041da:	f3bf 8f4f 	dsb	sy
}
 80041de:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80041e0:	bf00      	nop
 80041e2:	e7fd      	b.n	80041e0 <__NVIC_SystemReset+0x20>
 80041e4:	e000ed00 	.word	0xe000ed00
 80041e8:	05fa0004 	.word	0x05fa0004

080041ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ee:	b093      	sub	sp, #76	@ 0x4c
 80041f0:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041f2:	f006 feac 	bl	800af4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041f6:	f000 fb55 	bl	80048a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041fa:	f001 f829 	bl	8005250 <MX_GPIO_Init>
  MX_DMA_Init();
 80041fe:	f000 fff9 	bl	80051f4 <MX_DMA_Init>
  MX_QUADSPI_Init();
 8004202:	f000 fc7b 	bl	8004afc <MX_QUADSPI_Init>
  MX_SPI2_Init();
 8004206:	f000 fd31 	bl	8004c6c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800420a:	f000 ffc3 	bl	8005194 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800420e:	f000 fb9b 	bl	8004948 <MX_ADC1_Init>
  MX_I2C3_Init();
 8004212:	f000 fc33 	bl	8004a7c <MX_I2C3_Init>
  MX_TIM2_Init();
 8004216:	f000 fe4d 	bl	8004eb4 <MX_TIM2_Init>
  MX_UART4_Init();
 800421a:	f000 ff8b 	bl	8005134 <MX_UART4_Init>
  MX_TIM1_Init();
 800421e:	f000 fda1 	bl	8004d64 <MX_TIM1_Init>
  MX_CRC_Init();
 8004222:	f000 fc09 	bl	8004a38 <MX_CRC_Init>
  MX_TIM4_Init();
 8004226:	f000 ff11 	bl	800504c <MX_TIM4_Init>
  MX_RTC_Init();
 800422a:	f000 fc8d 	bl	8004b48 <MX_RTC_Init>
  MX_SPI3_Init();
 800422e:	f000 fd5b 	bl	8004ce8 <MX_SPI3_Init>
  MX_TIM3_Init();
 8004232:	f000 fe93 	bl	8004f5c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	System_Init();
 8004236:	f7fe ffcd 	bl	80031d4 <System_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		switch(state)
 800423a:	4b56      	ldr	r3, [pc, #344]	@ (8004394 <main+0x1a8>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b03      	cmp	r3, #3
 8004240:	f200 830d 	bhi.w	800485e <main+0x672>
 8004244:	a201      	add	r2, pc, #4	@ (adr r2, 800424c <main+0x60>)
 8004246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424a:	bf00      	nop
 800424c:	0800425d 	.word	0x0800425d
 8004250:	0800437f 	.word	0x0800437f
 8004254:	080043a5 	.word	0x080043a5
 8004258:	08004741 	.word	0x08004741
		{
		case IDLE:
			if(flags.Message_Rx)
 800425c:	4b4e      	ldr	r3, [pc, #312]	@ (8004398 <main+0x1ac>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d068      	beq.n	800433c <main+0x150>
			{
				LED_Start(RED_LED, MEDIUM, HIGH);
 800426a:	2205      	movs	r2, #5
 800426c:	2101      	movs	r1, #1
 800426e:	2004      	movs	r0, #4
 8004270:	f7ff fa52 	bl	8003718 <LED_Start>
				SIM_Parse_Command();
 8004274:	f7fd fcb4 	bl	8001be0 <SIM_Parse_Command>
				flags.Message_Rx = 0;
 8004278:	4a47      	ldr	r2, [pc, #284]	@ (8004398 <main+0x1ac>)
 800427a:	7813      	ldrb	r3, [r2, #0]
 800427c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004280:	7013      	strb	r3, [r2, #0]
				if(flags.CMD.Start_Meas)
 8004282:	4b45      	ldr	r3, [pc, #276]	@ (8004398 <main+0x1ac>)
 8004284:	789b      	ldrb	r3, [r3, #2]
 8004286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <main+0xb6>
				{
					state = MEASURE_INIT_STATE;
 8004290:	4b40      	ldr	r3, [pc, #256]	@ (8004394 <main+0x1a8>)
 8004292:	2201      	movs	r2, #1
 8004294:	701a      	strb	r2, [r3, #0]
					flags.CMD.Start_Meas = 0;
 8004296:	4a40      	ldr	r2, [pc, #256]	@ (8004398 <main+0x1ac>)
 8004298:	7893      	ldrb	r3, [r2, #2]
 800429a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800429e:	7093      	strb	r3, [r2, #2]
 80042a0:	e048      	b.n	8004334 <main+0x148>
				}
				else if(flags.CMD.Set_Config)
 80042a2:	4b3d      	ldr	r3, [pc, #244]	@ (8004398 <main+0x1ac>)
 80042a4:	789b      	ldrb	r3, [r3, #2]
 80042a6:	f003 0310 	and.w	r3, r3, #16
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d007      	beq.n	80042c0 <main+0xd4>
				{
					Apply_Config();
 80042b0:	f002 fb50 	bl	8006954 <Apply_Config>
					flags.CMD.Set_Config = 0;
 80042b4:	4a38      	ldr	r2, [pc, #224]	@ (8004398 <main+0x1ac>)
 80042b6:	7893      	ldrb	r3, [r2, #2]
 80042b8:	f023 0310 	bic.w	r3, r3, #16
 80042bc:	7093      	strb	r3, [r2, #2]
 80042be:	e039      	b.n	8004334 <main+0x148>
				}
				else if(flags.CMD.Get_Config)
 80042c0:	4b35      	ldr	r3, [pc, #212]	@ (8004398 <main+0x1ac>)
 80042c2:	789b      	ldrb	r3, [r3, #2]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d007      	beq.n	80042de <main+0xf2>
				{
					Get_Config();
 80042ce:	f002 fcb5 	bl	8006c3c <Get_Config>
					flags.CMD.Get_Config = 0;
 80042d2:	4a31      	ldr	r2, [pc, #196]	@ (8004398 <main+0x1ac>)
 80042d4:	7893      	ldrb	r3, [r2, #2]
 80042d6:	f023 0320 	bic.w	r3, r3, #32
 80042da:	7093      	strb	r3, [r2, #2]
 80042dc:	e02a      	b.n	8004334 <main+0x148>
				}
				else if(flags.CMD.Start_OTA)
 80042de:	4b2e      	ldr	r3, [pc, #184]	@ (8004398 <main+0x1ac>)
 80042e0:	789b      	ldrb	r3, [r3, #2]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d015      	beq.n	8004318 <main+0x12c>
				{
					LED_Stop(GRN_LED);
 80042ec:	2008      	movs	r0, #8
 80042ee:	f7ff fadf 	bl	80038b0 <LED_Stop>
					LED_Start(ORG_LED, FAST, FULL);
 80042f2:	2204      	movs	r2, #4
 80042f4:	2100      	movs	r1, #0
 80042f6:	2000      	movs	r0, #0
 80042f8:	f7ff fa0e 	bl	8003718 <LED_Start>
					LED_Start(RED_LED, FAST, HIGH);
 80042fc:	2205      	movs	r2, #5
 80042fe:	2100      	movs	r1, #0
 8004300:	2004      	movs	r0, #4
 8004302:	f7ff fa09 	bl	8003718 <LED_Start>
					state = OTA_STATE;
 8004306:	4b23      	ldr	r3, [pc, #140]	@ (8004394 <main+0x1a8>)
 8004308:	2203      	movs	r2, #3
 800430a:	701a      	strb	r2, [r3, #0]
					flags.CMD.Start_OTA = 0;
 800430c:	4a22      	ldr	r2, [pc, #136]	@ (8004398 <main+0x1ac>)
 800430e:	7893      	ldrb	r3, [r2, #2]
 8004310:	f023 0304 	bic.w	r3, r3, #4
 8004314:	7093      	strb	r3, [r2, #2]
 8004316:	e00d      	b.n	8004334 <main+0x148>
				}
				else if(flags.CMD.Ping)
 8004318:	4b1f      	ldr	r3, [pc, #124]	@ (8004398 <main+0x1ac>)
 800431a:	789b      	ldrb	r3, [r3, #2]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d006      	beq.n	8004334 <main+0x148>
				{
					SIM_Send_Infos();
 8004326:	f7fd fe81 	bl	800202c <SIM_Send_Infos>
					flags.CMD.Ping = 0;
 800432a:	4a1b      	ldr	r2, [pc, #108]	@ (8004398 <main+0x1ac>)
 800432c:	7893      	ldrb	r3, [r2, #2]
 800432e:	f023 0308 	bic.w	r3, r3, #8
 8004332:	7093      	strb	r3, [r2, #2]
				}
				LED_Stop(RED_LED);
 8004334:	2004      	movs	r0, #4
 8004336:	f7ff fabb 	bl	80038b0 <LED_Stop>
				LED_Start(ORG_LED, MEDIUM, HALF);
				SIM_Check_Connection();
				sys.SIM_Connection_Status = HAL_GetTick();
				LED_Stop(ORG_LED);
			}
			break;
 800433a:	e292      	b.n	8004862 <main+0x676>
			else if(HAL_GetTick() - sys.SIM_Connection_Status > config.connection_timeout_ms)                  // Controllo connessione al server TCP ogni config.connection_timeout_ms millisecondi
 800433c:	f006 fe70 	bl	800b020 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	4b16      	ldr	r3, [pc, #88]	@ (800439c <main+0x1b0>)
 8004344:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004348:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800434c:	1ad2      	subs	r2, r2, r3
 800434e:	4b14      	ldr	r3, [pc, #80]	@ (80043a0 <main+0x1b4>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	429a      	cmp	r2, r3
 8004354:	f240 8285 	bls.w	8004862 <main+0x676>
				LED_Start(ORG_LED, MEDIUM, HALF);
 8004358:	2206      	movs	r2, #6
 800435a:	2101      	movs	r1, #1
 800435c:	2000      	movs	r0, #0
 800435e:	f7ff f9db 	bl	8003718 <LED_Start>
				SIM_Check_Connection();
 8004362:	f7fd ff81 	bl	8002268 <SIM_Check_Connection>
				sys.SIM_Connection_Status = HAL_GetTick();
 8004366:	f006 fe5b 	bl	800b020 <HAL_GetTick>
 800436a:	4603      	mov	r3, r0
 800436c:	4a0b      	ldr	r2, [pc, #44]	@ (800439c <main+0x1b0>)
 800436e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004372:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
				LED_Stop(ORG_LED);
 8004376:	2000      	movs	r0, #0
 8004378:	f7ff fa9a 	bl	80038b0 <LED_Stop>
			break;
 800437c:	e271      	b.n	8004862 <main+0x676>

		case MEASURE_INIT_STATE:
			Start_Measure();
 800437e:	f001 fd59 	bl	8005e34 <Start_Measure>
			LED_Start(GRN_LED, FAST, FULL);
 8004382:	2204      	movs	r2, #4
 8004384:	2100      	movs	r1, #0
 8004386:	2008      	movs	r0, #8
 8004388:	f7ff f9c6 	bl	8003718 <LED_Start>
			state = MEASURING_STATE;
 800438c:	4b01      	ldr	r3, [pc, #4]	@ (8004394 <main+0x1a8>)
 800438e:	2202      	movs	r2, #2
 8004390:	701a      	strb	r2, [r3, #0]
			break;
 8004392:	e269      	b.n	8004868 <main+0x67c>
 8004394:	2000083c 	.word	0x2000083c
 8004398:	200019e8 	.word	0x200019e8
 800439c:	20000840 	.word	0x20000840
 80043a0:	200019ec 	.word	0x200019ec

		case MEASURING_STATE:
			if(flags.ADC_Complete && flags.ACC_Complete)
 80043a4:	4bab      	ldr	r3, [pc, #684]	@ (8004654 <main+0x468>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 8259 	beq.w	8004866 <main+0x67a>
 80043b4:	4ba7      	ldr	r3, [pc, #668]	@ (8004654 <main+0x468>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 8251 	beq.w	8004866 <main+0x67a>
			{
				Save_Data();
 80043c4:	f001 fa8c 	bl	80058e0 <Save_Data>
				if(flags.BC_Interrupt)
 80043c8:	4ba2      	ldr	r3, [pc, #648]	@ (8004654 <main+0x468>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	f003 0320 	and.w	r3, r3, #32
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d010      	beq.n	80043f8 <main+0x20c>
				{
					BC_Read_Flags(&sys.BC_Flags);
 80043d6:	48a0      	ldr	r0, [pc, #640]	@ (8004658 <main+0x46c>)
 80043d8:	f7fe f9ac 	bl	8002734 <BC_Read_Flags>
					BC_Manage_Interrupts(sys.BC_Flags);
 80043dc:	4b9f      	ldr	r3, [pc, #636]	@ (800465c <main+0x470>)
 80043de:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 80043e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80043e6:	4610      	mov	r0, r2
 80043e8:	4619      	mov	r1, r3
 80043ea:	f7fe fa51 	bl	8002890 <BC_Manage_Interrupts>
					flags.BC_Interrupt = 0;
 80043ee:	4a99      	ldr	r2, [pc, #612]	@ (8004654 <main+0x468>)
 80043f0:	7813      	ldrb	r3, [r2, #0]
 80043f2:	f023 0320 	bic.w	r3, r3, #32
 80043f6:	7013      	strb	r3, [r2, #0]
				}
				if(flags.Message_Rx)
 80043f8:	4b96      	ldr	r3, [pc, #600]	@ (8004654 <main+0x468>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00b      	beq.n	800441e <main+0x232>
				{
					SIM_Parse_Command();
 8004406:	f7fd fbeb 	bl	8001be0 <SIM_Parse_Command>
					flags.SIM_isConnected = 1;
 800440a:	4a92      	ldr	r2, [pc, #584]	@ (8004654 <main+0x468>)
 800440c:	7853      	ldrb	r3, [r2, #1]
 800440e:	f043 0310 	orr.w	r3, r3, #16
 8004412:	7053      	strb	r3, [r2, #1]
					flags.Message_Rx = 0;
 8004414:	4a8f      	ldr	r2, [pc, #572]	@ (8004654 <main+0x468>)
 8004416:	7813      	ldrb	r3, [r2, #0]
 8004418:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800441c:	7013      	strb	r3, [r2, #0]
				}
				if(flags.CMD.Idle)
 800441e:	4b8d      	ldr	r3, [pc, #564]	@ (8004654 <main+0x468>)
 8004420:	789b      	ldrb	r3, [r3, #2]
 8004422:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d022      	beq.n	8004472 <main+0x286>
				{
					if(!flags.Log_TransferInProgress && !flags.Meas_TransferInProgress)
 800442c:	4b89      	ldr	r3, [pc, #548]	@ (8004654 <main+0x468>)
 800442e:	785b      	ldrb	r3, [r3, #1]
 8004430:	f003 0308 	and.w	r3, r3, #8
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d11b      	bne.n	8004472 <main+0x286>
 800443a:	4b86      	ldr	r3, [pc, #536]	@ (8004654 <main+0x468>)
 800443c:	785b      	ldrb	r3, [r3, #1]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d114      	bne.n	8004472 <main+0x286>
					{
						Stop_Measure();
 8004448:	f001 fdc2 	bl	8005fd0 <Stop_Measure>
						LED_Stop(ORG_LED);
 800444c:	2000      	movs	r0, #0
 800444e:	f7ff fa2f 	bl	80038b0 <LED_Stop>
						LED_Stop(RED_LED);
 8004452:	2004      	movs	r0, #4
 8004454:	f7ff fa2c 	bl	80038b0 <LED_Stop>
						LED_Start(GRN_LED, MEDIUM, HALF);
 8004458:	2206      	movs	r2, #6
 800445a:	2101      	movs	r1, #1
 800445c:	2008      	movs	r0, #8
 800445e:	f7ff f95b 	bl	8003718 <LED_Start>
						state = IDLE;
 8004462:	4b7f      	ldr	r3, [pc, #508]	@ (8004660 <main+0x474>)
 8004464:	2200      	movs	r2, #0
 8004466:	701a      	strb	r2, [r3, #0]
						flags.CMD.Idle = 0;
 8004468:	4a7a      	ldr	r2, [pc, #488]	@ (8004654 <main+0x468>)
 800446a:	7893      	ldrb	r3, [r2, #2]
 800446c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004470:	7093      	strb	r3, [r2, #2]
					}
				}
				if(flags.CMD.Data_Request)
 8004472:	4b78      	ldr	r3, [pc, #480]	@ (8004654 <main+0x468>)
 8004474:	789b      	ldrb	r3, [r3, #2]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 8098 	beq.w	80045b2 <main+0x3c6>
				{
					if(HAL_GetTick() - sys.Log_Status > config.log_period_ms && !flags.Log_TransferInProgress && !flags.Meas_TransferInProgress)
 8004482:	f006 fdcd 	bl	800b020 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	4b74      	ldr	r3, [pc, #464]	@ (800465c <main+0x470>)
 800448a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800448e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004492:	1ad2      	subs	r2, r2, r3
 8004494:	4b73      	ldr	r3, [pc, #460]	@ (8004664 <main+0x478>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	429a      	cmp	r2, r3
 800449a:	d96e      	bls.n	800457a <main+0x38e>
 800449c:	4b6d      	ldr	r3, [pc, #436]	@ (8004654 <main+0x468>)
 800449e:	785b      	ldrb	r3, [r3, #1]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d167      	bne.n	800457a <main+0x38e>
 80044aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004654 <main+0x468>)
 80044ac:	785b      	ldrb	r3, [r3, #1]
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d160      	bne.n	800457a <main+0x38e>
					{
						LED_Start(ORG_LED, FAST, HIGH);
 80044b8:	2205      	movs	r2, #5
 80044ba:	2100      	movs	r1, #0
 80044bc:	2000      	movs	r0, #0
 80044be:	f7ff f92b 	bl	8003718 <LED_Start>
						sprintf(Data_Logging, "L:%u,%u,%lu,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", config.device_id, Last_Pressure, Last_Volume, Last_Acceleration.x, Last_Acceleration.y, Last_Acceleration.z, Vbatt, Supply.i1, Supply.i2, Supply.i3, Supply.v1, Supply.v2, Supply.v3, Temperature);
 80044c2:	4b68      	ldr	r3, [pc, #416]	@ (8004664 <main+0x478>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	469c      	mov	ip, r3
 80044c8:	4b67      	ldr	r3, [pc, #412]	@ (8004668 <main+0x47c>)
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	469e      	mov	lr, r3
 80044ce:	4b67      	ldr	r3, [pc, #412]	@ (800466c <main+0x480>)
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	4b67      	ldr	r3, [pc, #412]	@ (8004670 <main+0x484>)
 80044d4:	885b      	ldrh	r3, [r3, #2]
 80044d6:	4619      	mov	r1, r3
 80044d8:	4b65      	ldr	r3, [pc, #404]	@ (8004670 <main+0x484>)
 80044da:	889b      	ldrh	r3, [r3, #4]
 80044dc:	4618      	mov	r0, r3
 80044de:	4b64      	ldr	r3, [pc, #400]	@ (8004670 <main+0x484>)
 80044e0:	88db      	ldrh	r3, [r3, #6]
 80044e2:	461c      	mov	r4, r3
 80044e4:	4b63      	ldr	r3, [pc, #396]	@ (8004674 <main+0x488>)
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	461d      	mov	r5, r3
 80044ea:	4b63      	ldr	r3, [pc, #396]	@ (8004678 <main+0x48c>)
 80044ec:	88db      	ldrh	r3, [r3, #6]
 80044ee:	461e      	mov	r6, r3
 80044f0:	4b61      	ldr	r3, [pc, #388]	@ (8004678 <main+0x48c>)
 80044f2:	891b      	ldrh	r3, [r3, #8]
 80044f4:	617b      	str	r3, [r7, #20]
 80044f6:	4b60      	ldr	r3, [pc, #384]	@ (8004678 <main+0x48c>)
 80044f8:	895b      	ldrh	r3, [r3, #10]
 80044fa:	613b      	str	r3, [r7, #16]
 80044fc:	4b5e      	ldr	r3, [pc, #376]	@ (8004678 <main+0x48c>)
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	4b5d      	ldr	r3, [pc, #372]	@ (8004678 <main+0x48c>)
 8004504:	885b      	ldrh	r3, [r3, #2]
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	4b5b      	ldr	r3, [pc, #364]	@ (8004678 <main+0x48c>)
 800450a:	889b      	ldrh	r3, [r3, #4]
 800450c:	607b      	str	r3, [r7, #4]
 800450e:	4b5b      	ldr	r3, [pc, #364]	@ (800467c <main+0x490>)
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	930a      	str	r3, [sp, #40]	@ 0x28
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	9309      	str	r3, [sp, #36]	@ 0x24
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	9308      	str	r3, [sp, #32]
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	9307      	str	r3, [sp, #28]
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	9306      	str	r3, [sp, #24]
 8004528:	9605      	str	r6, [sp, #20]
 800452a:	9504      	str	r5, [sp, #16]
 800452c:	9403      	str	r4, [sp, #12]
 800452e:	9002      	str	r0, [sp, #8]
 8004530:	9101      	str	r1, [sp, #4]
 8004532:	9200      	str	r2, [sp, #0]
 8004534:	4673      	mov	r3, lr
 8004536:	4662      	mov	r2, ip
 8004538:	4951      	ldr	r1, [pc, #324]	@ (8004680 <main+0x494>)
 800453a:	4852      	ldr	r0, [pc, #328]	@ (8004684 <main+0x498>)
 800453c:	f011 fdd8 	bl	80160f0 <siprintf>
						SIM_Send_TCP_Chunk_DMA(strlen(Data_Logging));
 8004540:	4850      	ldr	r0, [pc, #320]	@ (8004684 <main+0x498>)
 8004542:	f7fb fe4f 	bl	80001e4 <strlen>
 8004546:	4603      	mov	r3, r0
 8004548:	b29b      	uxth	r3, r3
 800454a:	4618      	mov	r0, r3
 800454c:	f7fd fd56 	bl	8001ffc <SIM_Send_TCP_Chunk_DMA>
						sys.SIM_Prompt_Status = HAL_GetTick();
 8004550:	f006 fd66 	bl	800b020 <HAL_GetTick>
 8004554:	4603      	mov	r3, r0
 8004556:	4a41      	ldr	r2, [pc, #260]	@ (800465c <main+0x470>)
 8004558:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800455c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
						sys.Log_Status = HAL_GetTick();
 8004560:	f006 fd5e 	bl	800b020 <HAL_GetTick>
 8004564:	4603      	mov	r3, r0
 8004566:	4a3d      	ldr	r2, [pc, #244]	@ (800465c <main+0x470>)
 8004568:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800456c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
						flags.Log_TransferInProgress = 1;
 8004570:	4a38      	ldr	r2, [pc, #224]	@ (8004654 <main+0x468>)
 8004572:	7853      	ldrb	r3, [r2, #1]
 8004574:	f043 0308 	orr.w	r3, r3, #8
 8004578:	7053      	strb	r3, [r2, #1]
					}
					if(flags.Log_ReadytoSend)
 800457a:	4b36      	ldr	r3, [pc, #216]	@ (8004654 <main+0x468>)
 800457c:	785b      	ldrb	r3, [r3, #1]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d014      	beq.n	80045b2 <main+0x3c6>
					{
						SIM_Send_Command_DMA(Data_Logging);
 8004588:	483e      	ldr	r0, [pc, #248]	@ (8004684 <main+0x498>)
 800458a:	f7fd fa97 	bl	8001abc <SIM_Send_Command_DMA>
						LED_Stop(ORG_LED);
 800458e:	2000      	movs	r0, #0
 8004590:	f7ff f98e 	bl	80038b0 <LED_Stop>
						flags.SIM_isConnected = 1;
 8004594:	4a2f      	ldr	r2, [pc, #188]	@ (8004654 <main+0x468>)
 8004596:	7853      	ldrb	r3, [r2, #1]
 8004598:	f043 0310 	orr.w	r3, r3, #16
 800459c:	7053      	strb	r3, [r2, #1]
						flags.Log_ReadytoSend = 0;
 800459e:	4a2d      	ldr	r2, [pc, #180]	@ (8004654 <main+0x468>)
 80045a0:	7853      	ldrb	r3, [r2, #1]
 80045a2:	f023 0301 	bic.w	r3, r3, #1
 80045a6:	7053      	strb	r3, [r2, #1]
						flags.Log_TransferInProgress = 0;
 80045a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004654 <main+0x468>)
 80045aa:	7853      	ldrb	r3, [r2, #1]
 80045ac:	f023 0308 	bic.w	r3, r3, #8
 80045b0:	7053      	strb	r3, [r2, #1]
					}
				}
				if(flags.CMD.Measure_Request)
 80045b2:	4b28      	ldr	r3, [pc, #160]	@ (8004654 <main+0x468>)
 80045b4:	789b      	ldrb	r3, [r3, #2]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d06c      	beq.n	800469a <main+0x4ae>
				{
					if(!flags.Meas_TransferInProgress && !flags.Log_TransferInProgress && !flags.Measure_ReadytoSend)
 80045c0:	4b24      	ldr	r3, [pc, #144]	@ (8004654 <main+0x468>)
 80045c2:	785b      	ldrb	r3, [r3, #1]
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d124      	bne.n	8004618 <main+0x42c>
 80045ce:	4b21      	ldr	r3, [pc, #132]	@ (8004654 <main+0x468>)
 80045d0:	785b      	ldrb	r3, [r3, #1]
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d11d      	bne.n	8004618 <main+0x42c>
 80045dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004654 <main+0x468>)
 80045de:	785b      	ldrb	r3, [r3, #1]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d116      	bne.n	8004618 <main+0x42c>
					{
						Send_Measure_Addr = Send_Measure_Chunk(sys.RAM_Buffer_Base_tosend, sys.Inactive_RAM_Len, Send_Measure_Addr);
 80045ea:	4b1c      	ldr	r3, [pc, #112]	@ (800465c <main+0x470>)
 80045ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045f0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80045f4:	4a19      	ldr	r2, [pc, #100]	@ (800465c <main+0x470>)
 80045f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80045fa:	f8d2 10d0 	ldr.w	r1, [r2, #208]	@ 0xd0
 80045fe:	4a22      	ldr	r2, [pc, #136]	@ (8004688 <main+0x49c>)
 8004600:	6812      	ldr	r2, [r2, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f001 fdc6 	bl	8006194 <Send_Measure_Chunk>
 8004608:	4603      	mov	r3, r0
 800460a:	4a1f      	ldr	r2, [pc, #124]	@ (8004688 <main+0x49c>)
 800460c:	6013      	str	r3, [r2, #0]
						flags.Meas_TransferInProgress = 1;
 800460e:	4a11      	ldr	r2, [pc, #68]	@ (8004654 <main+0x468>)
 8004610:	7853      	ldrb	r3, [r2, #1]
 8004612:	f043 0304 	orr.w	r3, r3, #4
 8004616:	7053      	strb	r3, [r2, #1]
					}
					if(flags.Measure_ReadytoSend)
 8004618:	4b0e      	ldr	r3, [pc, #56]	@ (8004654 <main+0x468>)
 800461a:	785b      	ldrb	r3, [r3, #1]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d039      	beq.n	800469a <main+0x4ae>
					{
						SIM_Send_Command_DMA((char*)tcp_chunk);
 8004626:	4819      	ldr	r0, [pc, #100]	@ (800468c <main+0x4a0>)
 8004628:	f7fd fa48 	bl	8001abc <SIM_Send_Command_DMA>
						flags.Measure_ReadytoSend = 0;
 800462c:	4a09      	ldr	r2, [pc, #36]	@ (8004654 <main+0x468>)
 800462e:	7853      	ldrb	r3, [r2, #1]
 8004630:	f023 0302 	bic.w	r3, r3, #2
 8004634:	7053      	strb	r3, [r2, #1]
						if (Send_Measure_Addr == (uint32_t)-1)
 8004636:	4b14      	ldr	r3, [pc, #80]	@ (8004688 <main+0x49c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463e:	d12c      	bne.n	800469a <main+0x4ae>
						{
							  memset(tcp_chunk, 0, 1460);
 8004640:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8004644:	2100      	movs	r1, #0
 8004646:	4811      	ldr	r0, [pc, #68]	@ (800468c <main+0x4a0>)
 8004648:	f011 fdb2 	bl	80161b0 <memset>
							  LED_Stop(RED_LED);
 800464c:	2004      	movs	r0, #4
 800464e:	f7ff f92f 	bl	80038b0 <LED_Stop>
 8004652:	e01d      	b.n	8004690 <main+0x4a4>
 8004654:	200019e8 	.word	0x200019e8
 8004658:	20001878 	.word	0x20001878
 800465c:	20000840 	.word	0x20000840
 8004660:	2000083c 	.word	0x2000083c
 8004664:	200019ec 	.word	0x200019ec
 8004668:	20004418 	.word	0x20004418
 800466c:	2000441c 	.word	0x2000441c
 8004670:	20004420 	.word	0x20004420
 8004674:	2000442a 	.word	0x2000442a
 8004678:	20003b48 	.word	0x20003b48
 800467c:	20004428 	.word	0x20004428
 8004680:	08017640 	.word	0x08017640
 8004684:	2000442c 	.word	0x2000442c
 8004688:	20004bd0 	.word	0x20004bd0
 800468c:	20004bd4 	.word	0x20004bd4
							  flags.CMD.Measure_Request = 0;
 8004690:	4a76      	ldr	r2, [pc, #472]	@ (800486c <main+0x680>)
 8004692:	7893      	ldrb	r3, [r2, #2]
 8004694:	f023 0302 	bic.w	r3, r3, #2
 8004698:	7093      	strb	r3, [r2, #2]
						}
					}
				}
				if(sys.SIM_Prompt_Status > 0 && (HAL_GetTick() - sys.SIM_Prompt_Status) > SIM_PROMPT_TIMEOUT_MS)
 800469a:	4b75      	ldr	r3, [pc, #468]	@ (8004870 <main+0x684>)
 800469c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d018      	beq.n	80046da <main+0x4ee>
 80046a8:	f006 fcba 	bl	800b020 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	4b70      	ldr	r3, [pc, #448]	@ (8004870 <main+0x684>)
 80046b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80046be:	4293      	cmp	r3, r2
 80046c0:	d90b      	bls.n	80046da <main+0x4ee>
				{
					flags.CMD.Data_Request = 1;
 80046c2:	4a6a      	ldr	r2, [pc, #424]	@ (800486c <main+0x680>)
 80046c4:	7893      	ldrb	r3, [r2, #2]
 80046c6:	f043 0301 	orr.w	r3, r3, #1
 80046ca:	7093      	strb	r3, [r2, #2]
					sys.SIM_Prompt_Status = 0;
 80046cc:	4b68      	ldr	r3, [pc, #416]	@ (8004870 <main+0x684>)
 80046ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046d2:	461a      	mov	r2, r3
 80046d4:	2300      	movs	r3, #0
 80046d6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
				}
				if(HAL_GetTick() - sys.SIM_Connection_Status > config.connection_timeout_ms)
 80046da:	f006 fca1 	bl	800b020 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	4b63      	ldr	r3, [pc, #396]	@ (8004870 <main+0x684>)
 80046e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80046ea:	1ad2      	subs	r2, r2, r3
 80046ec:	4b61      	ldr	r3, [pc, #388]	@ (8004874 <main+0x688>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	f240 80b8 	bls.w	8004866 <main+0x67a>
				{
					sys.SIM_Connection_Status = HAL_GetTick();
 80046f6:	f006 fc93 	bl	800b020 <HAL_GetTick>
 80046fa:	4603      	mov	r3, r0
 80046fc:	4a5c      	ldr	r2, [pc, #368]	@ (8004870 <main+0x684>)
 80046fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004702:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
					if(flags.SIM_isConnected)
 8004706:	4b59      	ldr	r3, [pc, #356]	@ (800486c <main+0x680>)
 8004708:	785b      	ldrb	r3, [r3, #1]
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <main+0x534>
					{
						flags.SIM_isConnected = 0;
 8004714:	4a55      	ldr	r2, [pc, #340]	@ (800486c <main+0x680>)
 8004716:	7853      	ldrb	r3, [r2, #1]
 8004718:	f023 0310 	bic.w	r3, r3, #16
 800471c:	7053      	strb	r3, [r2, #1]
						flags.Meas_TransferInProgress = 0;
						flags.CMD.Idle = 1;
					}
				}
			}
			break;
 800471e:	e0a2      	b.n	8004866 <main+0x67a>
						flags.Log_TransferInProgress = 0;
 8004720:	4a52      	ldr	r2, [pc, #328]	@ (800486c <main+0x680>)
 8004722:	7853      	ldrb	r3, [r2, #1]
 8004724:	f023 0308 	bic.w	r3, r3, #8
 8004728:	7053      	strb	r3, [r2, #1]
						flags.Meas_TransferInProgress = 0;
 800472a:	4a50      	ldr	r2, [pc, #320]	@ (800486c <main+0x680>)
 800472c:	7853      	ldrb	r3, [r2, #1]
 800472e:	f023 0304 	bic.w	r3, r3, #4
 8004732:	7053      	strb	r3, [r2, #1]
						flags.CMD.Idle = 1;
 8004734:	4a4d      	ldr	r2, [pc, #308]	@ (800486c <main+0x680>)
 8004736:	7893      	ldrb	r3, [r2, #2]
 8004738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800473c:	7093      	strb	r3, [r2, #2]
			break;
 800473e:	e092      	b.n	8004866 <main+0x67a>

		case OTA_STATE:
			if(OTA_Init() == HAL_OK)
 8004740:	f000 fe6c 	bl	800541c <OTA_Init>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d171      	bne.n	800482e <main+0x642>
			{
				HAL_UART_DMAStop(SIM_UART);
 800474a:	484b      	ldr	r0, [pc, #300]	@ (8004878 <main+0x68c>)
 800474c:	f010 fb56 	bl	8014dfc <HAL_UART_DMAStop>
				memset(sim_rx_buffer, 0, sizeof(sim_rx_buffer));
 8004750:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004754:	2100      	movs	r1, #0
 8004756:	4849      	ldr	r0, [pc, #292]	@ (800487c <main+0x690>)
 8004758:	f011 fd2a 	bl	80161b0 <memset>

				SIM_Send_TCP("R:OTA_READY");
 800475c:	4848      	ldr	r0, [pc, #288]	@ (8004880 <main+0x694>)
 800475e:	f7fd fc1f 	bl	8001fa0 <SIM_Send_TCP>
				if(OTA_Receive() == HAL_OK)
 8004762:	f000 fe87 	bl	8005474 <OTA_Receive>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d148      	bne.n	80047fe <main+0x612>
				{
					SIM_Send_TCP("R:OTA_RECEIVED");
 800476c:	4845      	ldr	r0, [pc, #276]	@ (8004884 <main+0x698>)
 800476e:	f7fd fc17 	bl	8001fa0 <SIM_Send_TCP>
					if(OTA_CRC_Check() == HAL_OK)
 8004772:	f000 ff03 	bl	800557c <OTA_CRC_Check>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d128      	bne.n	80047ce <main+0x5e2>
					{
						SIM_Send_TCP("R:OTA_CRC_OK");
 800477c:	4842      	ldr	r0, [pc, #264]	@ (8004888 <main+0x69c>)
 800477e:	f7fd fc0f 	bl	8001fa0 <SIM_Send_TCP>
						if(OTA_Apply() == HAL_OK)
 8004782:	f000 ffaf 	bl	80056e4 <OTA_Apply>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d108      	bne.n	800479e <main+0x5b2>
						{
							SIM_Send_TCP("R:OTA_SUCCESS");
 800478c:	483f      	ldr	r0, [pc, #252]	@ (800488c <main+0x6a0>)
 800478e:	f7fd fc07 	bl	8001fa0 <SIM_Send_TCP>
							HAL_Delay(500);
 8004792:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004796:	f006 fc4f 	bl	800b038 <HAL_Delay>
							NVIC_SystemReset();
 800479a:	f7ff fd11 	bl	80041c0 <__NVIC_SystemReset>
						}
						else
						{
							SIM_Send_TCP("R:OTA_APPLY_ERROR");
 800479e:	483c      	ldr	r0, [pc, #240]	@ (8004890 <main+0x6a4>)
 80047a0:	f7fd fbfe 	bl	8001fa0 <SIM_Send_TCP>
							HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 80047a4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80047a8:	4934      	ldr	r1, [pc, #208]	@ (800487c <main+0x690>)
 80047aa:	4833      	ldr	r0, [pc, #204]	@ (8004878 <main+0x68c>)
 80047ac:	f011 fbc2 	bl	8015f34 <HAL_UARTEx_ReceiveToIdle_DMA>
							LED_Stop(ORG_LED);
 80047b0:	2000      	movs	r0, #0
 80047b2:	f7ff f87d 	bl	80038b0 <LED_Stop>
							LED_Stop(RED_LED);
 80047b6:	2004      	movs	r0, #4
 80047b8:	f7ff f87a 	bl	80038b0 <LED_Stop>
							LED_Start(GRN_LED, MEDIUM, HALF);
 80047bc:	2206      	movs	r2, #6
 80047be:	2101      	movs	r1, #1
 80047c0:	2008      	movs	r0, #8
 80047c2:	f7fe ffa9 	bl	8003718 <LED_Start>
							state = IDLE;
 80047c6:	4b33      	ldr	r3, [pc, #204]	@ (8004894 <main+0x6a8>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	701a      	strb	r2, [r3, #0]
				LED_Stop(ORG_LED);
				LED_Stop(RED_LED);
				LED_Start(GRN_LED, MEDIUM, HALF);
				state = IDLE;
			}
			break;
 80047cc:	e04c      	b.n	8004868 <main+0x67c>
						SIM_Send_TCP("R:OTA_CRC_ERROR");
 80047ce:	4832      	ldr	r0, [pc, #200]	@ (8004898 <main+0x6ac>)
 80047d0:	f7fd fbe6 	bl	8001fa0 <SIM_Send_TCP>
						HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 80047d4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80047d8:	4928      	ldr	r1, [pc, #160]	@ (800487c <main+0x690>)
 80047da:	4827      	ldr	r0, [pc, #156]	@ (8004878 <main+0x68c>)
 80047dc:	f011 fbaa 	bl	8015f34 <HAL_UARTEx_ReceiveToIdle_DMA>
						LED_Stop(ORG_LED);
 80047e0:	2000      	movs	r0, #0
 80047e2:	f7ff f865 	bl	80038b0 <LED_Stop>
						LED_Stop(RED_LED);
 80047e6:	2004      	movs	r0, #4
 80047e8:	f7ff f862 	bl	80038b0 <LED_Stop>
						LED_Start(GRN_LED, MEDIUM, HALF);
 80047ec:	2206      	movs	r2, #6
 80047ee:	2101      	movs	r1, #1
 80047f0:	2008      	movs	r0, #8
 80047f2:	f7fe ff91 	bl	8003718 <LED_Start>
						state = IDLE;
 80047f6:	4b27      	ldr	r3, [pc, #156]	@ (8004894 <main+0x6a8>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	701a      	strb	r2, [r3, #0]
						break;
 80047fc:	e034      	b.n	8004868 <main+0x67c>
					SIM_Send_TCP("R:OTA_RECEIVE_ERROR");
 80047fe:	4827      	ldr	r0, [pc, #156]	@ (800489c <main+0x6b0>)
 8004800:	f7fd fbce 	bl	8001fa0 <SIM_Send_TCP>
					HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8004804:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004808:	491c      	ldr	r1, [pc, #112]	@ (800487c <main+0x690>)
 800480a:	481b      	ldr	r0, [pc, #108]	@ (8004878 <main+0x68c>)
 800480c:	f011 fb92 	bl	8015f34 <HAL_UARTEx_ReceiveToIdle_DMA>
					LED_Stop(ORG_LED);
 8004810:	2000      	movs	r0, #0
 8004812:	f7ff f84d 	bl	80038b0 <LED_Stop>
					LED_Stop(RED_LED);
 8004816:	2004      	movs	r0, #4
 8004818:	f7ff f84a 	bl	80038b0 <LED_Stop>
					LED_Start(GRN_LED, MEDIUM, HALF);
 800481c:	2206      	movs	r2, #6
 800481e:	2101      	movs	r1, #1
 8004820:	2008      	movs	r0, #8
 8004822:	f7fe ff79 	bl	8003718 <LED_Start>
					state = IDLE;
 8004826:	4b1b      	ldr	r3, [pc, #108]	@ (8004894 <main+0x6a8>)
 8004828:	2200      	movs	r2, #0
 800482a:	701a      	strb	r2, [r3, #0]
			break;
 800482c:	e01c      	b.n	8004868 <main+0x67c>
				SIM_Send_TCP("R:OTA_INIT_ERROR");
 800482e:	481c      	ldr	r0, [pc, #112]	@ (80048a0 <main+0x6b4>)
 8004830:	f7fd fbb6 	bl	8001fa0 <SIM_Send_TCP>
				HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8004834:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004838:	4910      	ldr	r1, [pc, #64]	@ (800487c <main+0x690>)
 800483a:	480f      	ldr	r0, [pc, #60]	@ (8004878 <main+0x68c>)
 800483c:	f011 fb7a 	bl	8015f34 <HAL_UARTEx_ReceiveToIdle_DMA>
				LED_Stop(ORG_LED);
 8004840:	2000      	movs	r0, #0
 8004842:	f7ff f835 	bl	80038b0 <LED_Stop>
				LED_Stop(RED_LED);
 8004846:	2004      	movs	r0, #4
 8004848:	f7ff f832 	bl	80038b0 <LED_Stop>
				LED_Start(GRN_LED, MEDIUM, HALF);
 800484c:	2206      	movs	r2, #6
 800484e:	2101      	movs	r1, #1
 8004850:	2008      	movs	r0, #8
 8004852:	f7fe ff61 	bl	8003718 <LED_Start>
				state = IDLE;
 8004856:	4b0f      	ldr	r3, [pc, #60]	@ (8004894 <main+0x6a8>)
 8004858:	2200      	movs	r2, #0
 800485a:	701a      	strb	r2, [r3, #0]
			break;
 800485c:	e004      	b.n	8004868 <main+0x67c>

		default:
			break;
 800485e:	bf00      	nop
 8004860:	e4eb      	b.n	800423a <main+0x4e>
			break;
 8004862:	bf00      	nop
 8004864:	e4e9      	b.n	800423a <main+0x4e>
			break;
 8004866:	bf00      	nop
		switch(state)
 8004868:	e4e7      	b.n	800423a <main+0x4e>
 800486a:	bf00      	nop
 800486c:	200019e8 	.word	0x200019e8
 8004870:	20000840 	.word	0x20000840
 8004874:	200019ec 	.word	0x200019ec
 8004878:	20000724 	.word	0x20000724
 800487c:	200051fc 	.word	0x200051fc
 8004880:	08017670 	.word	0x08017670
 8004884:	0801767c 	.word	0x0801767c
 8004888:	0801768c 	.word	0x0801768c
 800488c:	0801769c 	.word	0x0801769c
 8004890:	080176ac 	.word	0x080176ac
 8004894:	2000083c 	.word	0x2000083c
 8004898:	080176c0 	.word	0x080176c0
 800489c:	080176d0 	.word	0x080176d0
 80048a0:	080176e4 	.word	0x080176e4

080048a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b096      	sub	sp, #88	@ 0x58
 80048a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048aa:	f107 0314 	add.w	r3, r7, #20
 80048ae:	2244      	movs	r2, #68	@ 0x44
 80048b0:	2100      	movs	r1, #0
 80048b2:	4618      	mov	r0, r3
 80048b4:	f011 fc7c 	bl	80161b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048b8:	463b      	mov	r3, r7
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	605a      	str	r2, [r3, #4]
 80048c0:	609a      	str	r2, [r3, #8]
 80048c2:	60da      	str	r2, [r3, #12]
 80048c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80048c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80048ca:	f00a fbad 	bl	800f028 <HAL_PWREx_ControlVoltageScaling>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80048d4:	f000 fd9c 	bl	8005410 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80048d8:	2309      	movs	r3, #9
 80048da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80048dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80048e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80048e2:	2301      	movs	r3, #1
 80048e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80048e6:	2302      	movs	r3, #2
 80048e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80048ea:	2303      	movs	r3, #3
 80048ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80048ee:	2301      	movs	r3, #1
 80048f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80048f2:	2314      	movs	r3, #20
 80048f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80048f6:	2307      	movs	r3, #7
 80048f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80048fa:	2302      	movs	r3, #2
 80048fc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80048fe:	2302      	movs	r3, #2
 8004900:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004902:	f107 0314 	add.w	r3, r7, #20
 8004906:	4618      	mov	r0, r3
 8004908:	f00b f846 	bl	800f998 <HAL_RCC_OscConfig>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004912:	f000 fd7d 	bl	8005410 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004916:	230f      	movs	r3, #15
 8004918:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800491a:	2303      	movs	r3, #3
 800491c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800491e:	2300      	movs	r3, #0
 8004920:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004922:	2300      	movs	r3, #0
 8004924:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004926:	2300      	movs	r3, #0
 8004928:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800492a:	463b      	mov	r3, r7
 800492c:	2104      	movs	r1, #4
 800492e:	4618      	mov	r0, r3
 8004930:	f00b fc0e 	bl	8010150 <HAL_RCC_ClockConfig>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800493a:	f000 fd69 	bl	8005410 <Error_Handler>
  }
}
 800493e:	bf00      	nop
 8004940:	3758      	adds	r7, #88	@ 0x58
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	@ 0x28
 800494c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800494e:	f107 031c 	add.w	r3, r7, #28
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	605a      	str	r2, [r3, #4]
 8004958:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800495a:	1d3b      	adds	r3, r7, #4
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	605a      	str	r2, [r3, #4]
 8004962:	609a      	str	r2, [r3, #8]
 8004964:	60da      	str	r2, [r3, #12]
 8004966:	611a      	str	r2, [r3, #16]
 8004968:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800496a:	4b30      	ldr	r3, [pc, #192]	@ (8004a2c <MX_ADC1_Init+0xe4>)
 800496c:	4a30      	ldr	r2, [pc, #192]	@ (8004a30 <MX_ADC1_Init+0xe8>)
 800496e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004970:	4b2e      	ldr	r3, [pc, #184]	@ (8004a2c <MX_ADC1_Init+0xe4>)
 8004972:	2200      	movs	r2, #0
 8004974:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004976:	4b2d      	ldr	r3, [pc, #180]	@ (8004a2c <MX_ADC1_Init+0xe4>)
 8004978:	2200      	movs	r2, #0
 800497a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800497c:	4b2b      	ldr	r3, [pc, #172]	@ (8004a2c <MX_ADC1_Init+0xe4>)
 800497e:	2200      	movs	r2, #0
 8004980:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004982:	4b2a      	ldr	r3, [pc, #168]	@ (8004a2c <MX_ADC1_Init+0xe4>)
 8004984:	2200      	movs	r2, #0
 8004986:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004988:	4b28      	ldr	r3, [pc, #160]	@ (8004a2c <MX_ADC1_Init+0xe4>)
 800498a:	2208      	movs	r2, #8
 800498c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800498e:	4b27      	ldr	r3, [pc, #156]	@ (8004a2c <MX_ADC1_Init+0xe4>)
 8004990:	2200      	movs	r2, #0
 8004992:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004994:	4b25      	ldr	r3, [pc, #148]	@ (8004a2c <MX_ADC1_Init+0xe4>)
 8004996:	2200      	movs	r2, #0
 8004998:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800499a:	4b24      	ldr	r3, [pc, #144]	@ (8004a2c <MX_ADC1_Init+0xe4>)
 800499c:	2201      	movs	r2, #1
 800499e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80049a0:	4b22      	ldr	r3, [pc, #136]	@ (8004a2c <MX_ADC1_Init+0xe4>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 80049a8:	4b20      	ldr	r3, [pc, #128]	@ (8004a2c <MX_ADC1_Init+0xe4>)
 80049aa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80049ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80049b0:	4b1e      	ldr	r3, [pc, #120]	@ (8004a2c <MX_ADC1_Init+0xe4>)
 80049b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80049b8:	4b1c      	ldr	r3, [pc, #112]	@ (8004a2c <MX_ADC1_Init+0xe4>)
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80049c0:	4b1a      	ldr	r3, [pc, #104]	@ (8004a2c <MX_ADC1_Init+0xe4>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80049c6:	4b19      	ldr	r3, [pc, #100]	@ (8004a2c <MX_ADC1_Init+0xe4>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80049ce:	4817      	ldr	r0, [pc, #92]	@ (8004a2c <MX_ADC1_Init+0xe4>)
 80049d0:	f006 fd7a 	bl	800b4c8 <HAL_ADC_Init>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80049da:	f000 fd19 	bl	8005410 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80049de:	2300      	movs	r3, #0
 80049e0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80049e2:	f107 031c 	add.w	r3, r7, #28
 80049e6:	4619      	mov	r1, r3
 80049e8:	4810      	ldr	r0, [pc, #64]	@ (8004a2c <MX_ADC1_Init+0xe4>)
 80049ea:	f007 fe33 	bl	800c654 <HAL_ADCEx_MultiModeConfigChannel>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80049f4:	f000 fd0c 	bl	8005410 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80049f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004a34 <MX_ADC1_Init+0xec>)
 80049fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80049fc:	2306      	movs	r3, #6
 80049fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8004a00:	2300      	movs	r3, #0
 8004a02:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004a04:	237f      	movs	r3, #127	@ 0x7f
 8004a06:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004a08:	2304      	movs	r3, #4
 8004a0a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004a10:	1d3b      	adds	r3, r7, #4
 8004a12:	4619      	mov	r1, r3
 8004a14:	4805      	ldr	r0, [pc, #20]	@ (8004a2c <MX_ADC1_Init+0xe4>)
 8004a16:	f006 ffcf 	bl	800b9b8 <HAL_ADC_ConfigChannel>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8004a20:	f000 fcf6 	bl	8005410 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004a24:	bf00      	nop
 8004a26:	3728      	adds	r7, #40	@ 0x28
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	20000318 	.word	0x20000318
 8004a30:	50040000 	.word	0x50040000
 8004a34:	25b00200 	.word	0x25b00200

08004a38 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a74 <MX_CRC_Init+0x3c>)
 8004a3e:	4a0e      	ldr	r2, [pc, #56]	@ (8004a78 <MX_CRC_Init+0x40>)
 8004a40:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8004a42:	4b0c      	ldr	r3, [pc, #48]	@ (8004a74 <MX_CRC_Init+0x3c>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8004a48:	4b0a      	ldr	r3, [pc, #40]	@ (8004a74 <MX_CRC_Init+0x3c>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8004a4e:	4b09      	ldr	r3, [pc, #36]	@ (8004a74 <MX_CRC_Init+0x3c>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004a54:	4b07      	ldr	r3, [pc, #28]	@ (8004a74 <MX_CRC_Init+0x3c>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004a5a:	4b06      	ldr	r3, [pc, #24]	@ (8004a74 <MX_CRC_Init+0x3c>)
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004a60:	4804      	ldr	r0, [pc, #16]	@ (8004a74 <MX_CRC_Init+0x3c>)
 8004a62:	f007 ffd3 	bl	800ca0c <HAL_CRC_Init>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8004a6c:	f000 fcd0 	bl	8005410 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8004a70:	bf00      	nop
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	200003c4 	.word	0x200003c4
 8004a78:	40023000 	.word	0x40023000

08004a7c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004a80:	4b1b      	ldr	r3, [pc, #108]	@ (8004af0 <MX_I2C3_Init+0x74>)
 8004a82:	4a1c      	ldr	r2, [pc, #112]	@ (8004af4 <MX_I2C3_Init+0x78>)
 8004a84:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 8004a86:	4b1a      	ldr	r3, [pc, #104]	@ (8004af0 <MX_I2C3_Init+0x74>)
 8004a88:	4a1b      	ldr	r2, [pc, #108]	@ (8004af8 <MX_I2C3_Init+0x7c>)
 8004a8a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8004a8c:	4b18      	ldr	r3, [pc, #96]	@ (8004af0 <MX_I2C3_Init+0x74>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a92:	4b17      	ldr	r3, [pc, #92]	@ (8004af0 <MX_I2C3_Init+0x74>)
 8004a94:	2201      	movs	r2, #1
 8004a96:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004a98:	4b15      	ldr	r3, [pc, #84]	@ (8004af0 <MX_I2C3_Init+0x74>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8004a9e:	4b14      	ldr	r3, [pc, #80]	@ (8004af0 <MX_I2C3_Init+0x74>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004aa4:	4b12      	ldr	r3, [pc, #72]	@ (8004af0 <MX_I2C3_Init+0x74>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004aaa:	4b11      	ldr	r3, [pc, #68]	@ (8004af0 <MX_I2C3_Init+0x74>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8004af0 <MX_I2C3_Init+0x74>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004ab6:	480e      	ldr	r0, [pc, #56]	@ (8004af0 <MX_I2C3_Init+0x74>)
 8004ab8:	f009 fcc0 	bl	800e43c <HAL_I2C_Init>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8004ac2:	f000 fca5 	bl	8005410 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	4809      	ldr	r0, [pc, #36]	@ (8004af0 <MX_I2C3_Init+0x74>)
 8004aca:	f00a fa07 	bl	800eedc <HAL_I2CEx_ConfigAnalogFilter>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8004ad4:	f000 fc9c 	bl	8005410 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8004ad8:	2100      	movs	r1, #0
 8004ada:	4805      	ldr	r0, [pc, #20]	@ (8004af0 <MX_I2C3_Init+0x74>)
 8004adc:	f00a fa49 	bl	800ef72 <HAL_I2CEx_ConfigDigitalFilter>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8004ae6:	f000 fc93 	bl	8005410 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004aea:	bf00      	nop
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	200003e8 	.word	0x200003e8
 8004af4:	40005c00 	.word	0x40005c00
 8004af8:	10d19ce4 	.word	0x10d19ce4

08004afc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8004b00:	4b0f      	ldr	r3, [pc, #60]	@ (8004b40 <MX_QUADSPI_Init+0x44>)
 8004b02:	4a10      	ldr	r2, [pc, #64]	@ (8004b44 <MX_QUADSPI_Init+0x48>)
 8004b04:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8004b06:	4b0e      	ldr	r3, [pc, #56]	@ (8004b40 <MX_QUADSPI_Init+0x44>)
 8004b08:	2201      	movs	r2, #1
 8004b0a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8004b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b40 <MX_QUADSPI_Init+0x44>)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8004b12:	4b0b      	ldr	r3, [pc, #44]	@ (8004b40 <MX_QUADSPI_Init+0x44>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8004b18:	4b09      	ldr	r3, [pc, #36]	@ (8004b40 <MX_QUADSPI_Init+0x44>)
 8004b1a:	2218      	movs	r2, #24
 8004b1c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8004b1e:	4b08      	ldr	r3, [pc, #32]	@ (8004b40 <MX_QUADSPI_Init+0x44>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8004b24:	4b06      	ldr	r3, [pc, #24]	@ (8004b40 <MX_QUADSPI_Init+0x44>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8004b2a:	4805      	ldr	r0, [pc, #20]	@ (8004b40 <MX_QUADSPI_Init+0x44>)
 8004b2c:	f00a fad2 	bl	800f0d4 <HAL_QSPI_Init>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8004b36:	f000 fc6b 	bl	8005410 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8004b3a:	bf00      	nop
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	2000043c 	.word	0x2000043c
 8004b44:	a0001000 	.word	0xa0001000

08004b48 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b092      	sub	sp, #72	@ 0x48
 8004b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004b4e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	605a      	str	r2, [r3, #4]
 8004b58:	609a      	str	r2, [r3, #8]
 8004b5a:	60da      	str	r2, [r3, #12]
 8004b5c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004b5e:	2300      	movs	r3, #0
 8004b60:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8004b62:	1d3b      	adds	r3, r7, #4
 8004b64:	222c      	movs	r2, #44	@ 0x2c
 8004b66:	2100      	movs	r1, #0
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f011 fb21 	bl	80161b0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004b6e:	4b3c      	ldr	r3, [pc, #240]	@ (8004c60 <MX_RTC_Init+0x118>)
 8004b70:	4a3c      	ldr	r2, [pc, #240]	@ (8004c64 <MX_RTC_Init+0x11c>)
 8004b72:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004b74:	4b3a      	ldr	r3, [pc, #232]	@ (8004c60 <MX_RTC_Init+0x118>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004b7a:	4b39      	ldr	r3, [pc, #228]	@ (8004c60 <MX_RTC_Init+0x118>)
 8004b7c:	227f      	movs	r2, #127	@ 0x7f
 8004b7e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004b80:	4b37      	ldr	r3, [pc, #220]	@ (8004c60 <MX_RTC_Init+0x118>)
 8004b82:	22ff      	movs	r2, #255	@ 0xff
 8004b84:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004b86:	4b36      	ldr	r3, [pc, #216]	@ (8004c60 <MX_RTC_Init+0x118>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004b8c:	4b34      	ldr	r3, [pc, #208]	@ (8004c60 <MX_RTC_Init+0x118>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004b92:	4b33      	ldr	r3, [pc, #204]	@ (8004c60 <MX_RTC_Init+0x118>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004b98:	4b31      	ldr	r3, [pc, #196]	@ (8004c60 <MX_RTC_Init+0x118>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004b9e:	4830      	ldr	r0, [pc, #192]	@ (8004c60 <MX_RTC_Init+0x118>)
 8004ba0:	f00c f9b6 	bl	8010f10 <HAL_RTC_Init>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8004baa:	f000 fc31 	bl	8005410 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004bc8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004bcc:	2200      	movs	r2, #0
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4823      	ldr	r0, [pc, #140]	@ (8004c60 <MX_RTC_Init+0x118>)
 8004bd2:	f00c fa25 	bl	8011020 <HAL_RTC_SetTime>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8004bdc:	f000 fc18 	bl	8005410 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004be0:	2301      	movs	r3, #1
 8004be2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8004be6:	2301      	movs	r3, #1
 8004be8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 1;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004bf8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4817      	ldr	r0, [pc, #92]	@ (8004c60 <MX_RTC_Init+0x118>)
 8004c02:	f00c fb06 	bl	8011212 <HAL_RTC_SetDate>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8004c0c:	f000 fc00 	bl	8005410 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8004c10:	2300      	movs	r3, #0
 8004c12:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8004c14:	2300      	movs	r3, #0
 8004c16:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004c20:	2300      	movs	r3, #0
 8004c22:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004c24:	2300      	movs	r3, #0
 8004c26:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8004c28:	4b0f      	ldr	r3, [pc, #60]	@ (8004c68 <MX_RTC_Init+0x120>)
 8004c2a:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004c30:	2300      	movs	r3, #0
 8004c32:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8004c3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8004c40:	1d3b      	adds	r3, r7, #4
 8004c42:	2200      	movs	r2, #0
 8004c44:	4619      	mov	r1, r3
 8004c46:	4806      	ldr	r0, [pc, #24]	@ (8004c60 <MX_RTC_Init+0x118>)
 8004c48:	f00c fb6a 	bl	8011320 <HAL_RTC_SetAlarm_IT>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8004c52:	f000 fbdd 	bl	8005410 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004c56:	bf00      	nop
 8004c58:	3748      	adds	r7, #72	@ 0x48
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000480 	.word	0x20000480
 8004c64:	40002800 	.word	0x40002800
 8004c68:	80800080 	.word	0x80800080

08004c6c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004c70:	4b1b      	ldr	r3, [pc, #108]	@ (8004ce0 <MX_SPI2_Init+0x74>)
 8004c72:	4a1c      	ldr	r2, [pc, #112]	@ (8004ce4 <MX_SPI2_Init+0x78>)
 8004c74:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004c76:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce0 <MX_SPI2_Init+0x74>)
 8004c78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004c7c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004c7e:	4b18      	ldr	r3, [pc, #96]	@ (8004ce0 <MX_SPI2_Init+0x74>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004c84:	4b16      	ldr	r3, [pc, #88]	@ (8004ce0 <MX_SPI2_Init+0x74>)
 8004c86:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004c8a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c8c:	4b14      	ldr	r3, [pc, #80]	@ (8004ce0 <MX_SPI2_Init+0x74>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004c92:	4b13      	ldr	r3, [pc, #76]	@ (8004ce0 <MX_SPI2_Init+0x74>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004c98:	4b11      	ldr	r3, [pc, #68]	@ (8004ce0 <MX_SPI2_Init+0x74>)
 8004c9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c9e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8004ce0 <MX_SPI2_Init+0x74>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8004ce0 <MX_SPI2_Init+0x74>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004cac:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce0 <MX_SPI2_Init+0x74>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce0 <MX_SPI2_Init+0x74>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004cb8:	4b09      	ldr	r3, [pc, #36]	@ (8004ce0 <MX_SPI2_Init+0x74>)
 8004cba:	2207      	movs	r2, #7
 8004cbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004cbe:	4b08      	ldr	r3, [pc, #32]	@ (8004ce0 <MX_SPI2_Init+0x74>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004cc4:	4b06      	ldr	r3, [pc, #24]	@ (8004ce0 <MX_SPI2_Init+0x74>)
 8004cc6:	2208      	movs	r2, #8
 8004cc8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004cca:	4805      	ldr	r0, [pc, #20]	@ (8004ce0 <MX_SPI2_Init+0x74>)
 8004ccc:	f00c fd84 	bl	80117d8 <HAL_SPI_Init>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8004cd6:	f000 fb9b 	bl	8005410 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004cda:	bf00      	nop
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	200004a4 	.word	0x200004a4
 8004ce4:	40003800 	.word	0x40003800

08004ce8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004cec:	4b1b      	ldr	r3, [pc, #108]	@ (8004d5c <MX_SPI3_Init+0x74>)
 8004cee:	4a1c      	ldr	r2, [pc, #112]	@ (8004d60 <MX_SPI3_Init+0x78>)
 8004cf0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8004d5c <MX_SPI3_Init+0x74>)
 8004cf4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004cf8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004cfa:	4b18      	ldr	r3, [pc, #96]	@ (8004d5c <MX_SPI3_Init+0x74>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004d00:	4b16      	ldr	r3, [pc, #88]	@ (8004d5c <MX_SPI3_Init+0x74>)
 8004d02:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004d06:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d08:	4b14      	ldr	r3, [pc, #80]	@ (8004d5c <MX_SPI3_Init+0x74>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004d0e:	4b13      	ldr	r3, [pc, #76]	@ (8004d5c <MX_SPI3_Init+0x74>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004d14:	4b11      	ldr	r3, [pc, #68]	@ (8004d5c <MX_SPI3_Init+0x74>)
 8004d16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d1a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004d5c <MX_SPI3_Init+0x74>)
 8004d1e:	2218      	movs	r2, #24
 8004d20:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d22:	4b0e      	ldr	r3, [pc, #56]	@ (8004d5c <MX_SPI3_Init+0x74>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d28:	4b0c      	ldr	r3, [pc, #48]	@ (8004d5c <MX_SPI3_Init+0x74>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d5c <MX_SPI3_Init+0x74>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004d34:	4b09      	ldr	r3, [pc, #36]	@ (8004d5c <MX_SPI3_Init+0x74>)
 8004d36:	2207      	movs	r2, #7
 8004d38:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004d3a:	4b08      	ldr	r3, [pc, #32]	@ (8004d5c <MX_SPI3_Init+0x74>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004d40:	4b06      	ldr	r3, [pc, #24]	@ (8004d5c <MX_SPI3_Init+0x74>)
 8004d42:	2208      	movs	r2, #8
 8004d44:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004d46:	4805      	ldr	r0, [pc, #20]	@ (8004d5c <MX_SPI3_Init+0x74>)
 8004d48:	f00c fd46 	bl	80117d8 <HAL_SPI_Init>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8004d52:	f000 fb5d 	bl	8005410 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004d56:	bf00      	nop
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000508 	.word	0x20000508
 8004d60:	40003c00 	.word	0x40003c00

08004d64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b096      	sub	sp, #88	@ 0x58
 8004d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d6a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	605a      	str	r2, [r3, #4]
 8004d74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d76:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	605a      	str	r2, [r3, #4]
 8004d80:	609a      	str	r2, [r3, #8]
 8004d82:	60da      	str	r2, [r3, #12]
 8004d84:	611a      	str	r2, [r3, #16]
 8004d86:	615a      	str	r2, [r3, #20]
 8004d88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004d8a:	1d3b      	adds	r3, r7, #4
 8004d8c:	222c      	movs	r2, #44	@ 0x2c
 8004d8e:	2100      	movs	r1, #0
 8004d90:	4618      	mov	r0, r3
 8004d92:	f011 fa0d 	bl	80161b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004d96:	4b45      	ldr	r3, [pc, #276]	@ (8004eac <MX_TIM1_Init+0x148>)
 8004d98:	4a45      	ldr	r2, [pc, #276]	@ (8004eb0 <MX_TIM1_Init+0x14c>)
 8004d9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1599;
 8004d9c:	4b43      	ldr	r3, [pc, #268]	@ (8004eac <MX_TIM1_Init+0x148>)
 8004d9e:	f240 623f 	movw	r2, #1599	@ 0x63f
 8004da2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004da4:	4b41      	ldr	r3, [pc, #260]	@ (8004eac <MX_TIM1_Init+0x148>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8004daa:	4b40      	ldr	r3, [pc, #256]	@ (8004eac <MX_TIM1_Init+0x148>)
 8004dac:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8004db0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004db2:	4b3e      	ldr	r3, [pc, #248]	@ (8004eac <MX_TIM1_Init+0x148>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004db8:	4b3c      	ldr	r3, [pc, #240]	@ (8004eac <MX_TIM1_Init+0x148>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8004eac <MX_TIM1_Init+0x148>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004dc4:	4839      	ldr	r0, [pc, #228]	@ (8004eac <MX_TIM1_Init+0x148>)
 8004dc6:	f00d ff23 	bl	8012c10 <HAL_TIM_PWM_Init>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8004dd0:	f000 fb1e 	bl	8005410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004de0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004de4:	4619      	mov	r1, r3
 8004de6:	4831      	ldr	r0, [pc, #196]	@ (8004eac <MX_TIM1_Init+0x148>)
 8004de8:	f00f fc90 	bl	801470c <HAL_TIMEx_MasterConfigSynchronization>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8004df2:	f000 fb0d 	bl	8005410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004df6:	2360      	movs	r3, #96	@ 0x60
 8004df8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004e02:	2300      	movs	r3, #0
 8004e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e12:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004e16:	2200      	movs	r2, #0
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4824      	ldr	r0, [pc, #144]	@ (8004eac <MX_TIM1_Init+0x148>)
 8004e1c:	f00e fc62 	bl	80136e4 <HAL_TIM_PWM_ConfigChannel>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8004e26:	f000 faf3 	bl	8005410 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004e2a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004e2e:	2204      	movs	r2, #4
 8004e30:	4619      	mov	r1, r3
 8004e32:	481e      	ldr	r0, [pc, #120]	@ (8004eac <MX_TIM1_Init+0x148>)
 8004e34:	f00e fc56 	bl	80136e4 <HAL_TIM_PWM_ConfigChannel>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8004e3e:	f000 fae7 	bl	8005410 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004e42:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004e46:	2208      	movs	r2, #8
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4818      	ldr	r0, [pc, #96]	@ (8004eac <MX_TIM1_Init+0x148>)
 8004e4c:	f00e fc4a 	bl	80136e4 <HAL_TIM_PWM_ConfigChannel>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8004e56:	f000 fadb 	bl	8005410 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004e62:	2300      	movs	r3, #0
 8004e64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004e66:	2300      	movs	r3, #0
 8004e68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004e6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004e72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004e7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e80:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004e82:	2300      	movs	r3, #0
 8004e84:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004e86:	2300      	movs	r3, #0
 8004e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004e8a:	1d3b      	adds	r3, r7, #4
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	4807      	ldr	r0, [pc, #28]	@ (8004eac <MX_TIM1_Init+0x148>)
 8004e90:	f00f fcc4 	bl	801481c <HAL_TIMEx_ConfigBreakDeadTime>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8004e9a:	f000 fab9 	bl	8005410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004e9e:	4803      	ldr	r0, [pc, #12]	@ (8004eac <MX_TIM1_Init+0x148>)
 8004ea0:	f002 fda0 	bl	80079e4 <HAL_TIM_MspPostInit>

}
 8004ea4:	bf00      	nop
 8004ea6:	3758      	adds	r7, #88	@ 0x58
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	2000056c 	.word	0x2000056c
 8004eb0:	40012c00 	.word	0x40012c00

08004eb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004eba:	f107 0314 	add.w	r3, r7, #20
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	605a      	str	r2, [r3, #4]
 8004ec4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004ec6:	1d3b      	adds	r3, r7, #4
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	605a      	str	r2, [r3, #4]
 8004ece:	609a      	str	r2, [r3, #8]
 8004ed0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004ed2:	4b21      	ldr	r3, [pc, #132]	@ (8004f58 <MX_TIM2_Init+0xa4>)
 8004ed4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004ed8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004eda:	4b1f      	ldr	r3, [pc, #124]	@ (8004f58 <MX_TIM2_Init+0xa4>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8004f58 <MX_TIM2_Init+0xa4>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8004f58 <MX_TIM2_Init+0xa4>)
 8004ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8004eec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004eee:	4b1a      	ldr	r3, [pc, #104]	@ (8004f58 <MX_TIM2_Init+0xa4>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ef4:	4b18      	ldr	r3, [pc, #96]	@ (8004f58 <MX_TIM2_Init+0xa4>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004efa:	4817      	ldr	r0, [pc, #92]	@ (8004f58 <MX_TIM2_Init+0xa4>)
 8004efc:	f00e f87c 	bl	8012ff8 <HAL_TIM_IC_Init>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004f06:	f000 fa83 	bl	8005410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004f12:	f107 0314 	add.w	r3, r7, #20
 8004f16:	4619      	mov	r1, r3
 8004f18:	480f      	ldr	r0, [pc, #60]	@ (8004f58 <MX_TIM2_Init+0xa4>)
 8004f1a:	f00f fbf7 	bl	801470c <HAL_TIMEx_MasterConfigSynchronization>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8004f24:	f000 fa74 	bl	8005410 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004f30:	2300      	movs	r3, #0
 8004f32:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004f38:	1d3b      	adds	r3, r7, #4
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4806      	ldr	r0, [pc, #24]	@ (8004f58 <MX_TIM2_Init+0xa4>)
 8004f40:	f00e fb34 	bl	80135ac <HAL_TIM_IC_ConfigChannel>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8004f4a:	f000 fa61 	bl	8005410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004f4e:	bf00      	nop
 8004f50:	3720      	adds	r7, #32
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	200005b8 	.word	0x200005b8

08004f5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b090      	sub	sp, #64	@ 0x40
 8004f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004f62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f66:	2200      	movs	r2, #0
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	605a      	str	r2, [r3, #4]
 8004f6c:	609a      	str	r2, [r3, #8]
 8004f6e:	60da      	str	r2, [r3, #12]
 8004f70:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f72:	f107 0320 	add.w	r3, r7, #32
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	605a      	str	r2, [r3, #4]
 8004f7c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f7e:	1d3b      	adds	r3, r7, #4
 8004f80:	2200      	movs	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	605a      	str	r2, [r3, #4]
 8004f86:	609a      	str	r2, [r3, #8]
 8004f88:	60da      	str	r2, [r3, #12]
 8004f8a:	611a      	str	r2, [r3, #16]
 8004f8c:	615a      	str	r2, [r3, #20]
 8004f8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004f90:	4b2c      	ldr	r3, [pc, #176]	@ (8005044 <MX_TIM3_Init+0xe8>)
 8004f92:	4a2d      	ldr	r2, [pc, #180]	@ (8005048 <MX_TIM3_Init+0xec>)
 8004f94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004f96:	4b2b      	ldr	r3, [pc, #172]	@ (8005044 <MX_TIM3_Init+0xe8>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f9c:	4b29      	ldr	r3, [pc, #164]	@ (8005044 <MX_TIM3_Init+0xe8>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 31;
 8004fa2:	4b28      	ldr	r3, [pc, #160]	@ (8005044 <MX_TIM3_Init+0xe8>)
 8004fa4:	221f      	movs	r2, #31
 8004fa6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fa8:	4b26      	ldr	r3, [pc, #152]	@ (8005044 <MX_TIM3_Init+0xe8>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fae:	4b25      	ldr	r3, [pc, #148]	@ (8005044 <MX_TIM3_Init+0xe8>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004fb4:	4823      	ldr	r0, [pc, #140]	@ (8005044 <MX_TIM3_Init+0xe8>)
 8004fb6:	f00d fb3b 	bl	8012630 <HAL_TIM_Base_Init>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004fc0:	f000 fa26 	bl	8005410 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004fc4:	481f      	ldr	r0, [pc, #124]	@ (8005044 <MX_TIM3_Init+0xe8>)
 8004fc6:	f00d fe23 	bl	8012c10 <HAL_TIM_PWM_Init>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8004fd0:	f000 fa1e 	bl	8005410 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8004fd4:	2307      	movs	r3, #7
 8004fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8004fd8:	2330      	movs	r3, #48	@ 0x30
 8004fda:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8004fdc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4818      	ldr	r0, [pc, #96]	@ (8005044 <MX_TIM3_Init+0xe8>)
 8004fe4:	f00e fd5b 	bl	8013a9e <HAL_TIM_SlaveConfigSynchro>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8004fee:	f000 fa0f 	bl	8005410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004ffa:	f107 0320 	add.w	r3, r7, #32
 8004ffe:	4619      	mov	r1, r3
 8005000:	4810      	ldr	r0, [pc, #64]	@ (8005044 <MX_TIM3_Init+0xe8>)
 8005002:	f00f fb83 	bl	801470c <HAL_TIMEx_MasterConfigSynchronization>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800500c:	f000 fa00 	bl	8005410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005010:	2360      	movs	r3, #96	@ 0x60
 8005012:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 15;
 8005014:	230f      	movs	r3, #15
 8005016:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005018:	2300      	movs	r3, #0
 800501a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800501c:	2300      	movs	r3, #0
 800501e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005020:	1d3b      	adds	r3, r7, #4
 8005022:	2208      	movs	r2, #8
 8005024:	4619      	mov	r1, r3
 8005026:	4807      	ldr	r0, [pc, #28]	@ (8005044 <MX_TIM3_Init+0xe8>)
 8005028:	f00e fb5c 	bl	80136e4 <HAL_TIM_PWM_ConfigChannel>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8005032:	f000 f9ed 	bl	8005410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005036:	4803      	ldr	r0, [pc, #12]	@ (8005044 <MX_TIM3_Init+0xe8>)
 8005038:	f002 fcd4 	bl	80079e4 <HAL_TIM_MspPostInit>

}
 800503c:	bf00      	nop
 800503e:	3740      	adds	r7, #64	@ 0x40
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	20000604 	.word	0x20000604
 8005048:	40000400 	.word	0x40000400

0800504c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b08e      	sub	sp, #56	@ 0x38
 8005050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005052:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	605a      	str	r2, [r3, #4]
 800505c:	609a      	str	r2, [r3, #8]
 800505e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005060:	f107 031c 	add.w	r3, r7, #28
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	605a      	str	r2, [r3, #4]
 800506a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800506c:	463b      	mov	r3, r7
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	605a      	str	r2, [r3, #4]
 8005074:	609a      	str	r2, [r3, #8]
 8005076:	60da      	str	r2, [r3, #12]
 8005078:	611a      	str	r2, [r3, #16]
 800507a:	615a      	str	r2, [r3, #20]
 800507c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800507e:	4b2b      	ldr	r3, [pc, #172]	@ (800512c <MX_TIM4_Init+0xe0>)
 8005080:	4a2b      	ldr	r2, [pc, #172]	@ (8005130 <MX_TIM4_Init+0xe4>)
 8005082:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8005084:	4b29      	ldr	r3, [pc, #164]	@ (800512c <MX_TIM4_Init+0xe0>)
 8005086:	2263      	movs	r2, #99	@ 0x63
 8005088:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800508a:	4b28      	ldr	r3, [pc, #160]	@ (800512c <MX_TIM4_Init+0xe0>)
 800508c:	2200      	movs	r2, #0
 800508e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8005090:	4b26      	ldr	r3, [pc, #152]	@ (800512c <MX_TIM4_Init+0xe0>)
 8005092:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005096:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005098:	4b24      	ldr	r3, [pc, #144]	@ (800512c <MX_TIM4_Init+0xe0>)
 800509a:	2200      	movs	r2, #0
 800509c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800509e:	4b23      	ldr	r3, [pc, #140]	@ (800512c <MX_TIM4_Init+0xe0>)
 80050a0:	2280      	movs	r2, #128	@ 0x80
 80050a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80050a4:	4821      	ldr	r0, [pc, #132]	@ (800512c <MX_TIM4_Init+0xe0>)
 80050a6:	f00d fac3 	bl	8012630 <HAL_TIM_Base_Init>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80050b0:	f000 f9ae 	bl	8005410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80050b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80050b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80050ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80050be:	4619      	mov	r1, r3
 80050c0:	481a      	ldr	r0, [pc, #104]	@ (800512c <MX_TIM4_Init+0xe0>)
 80050c2:	f00e fc23 	bl	801390c <HAL_TIM_ConfigClockSource>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d001      	beq.n	80050d0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80050cc:	f000 f9a0 	bl	8005410 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80050d0:	4816      	ldr	r0, [pc, #88]	@ (800512c <MX_TIM4_Init+0xe0>)
 80050d2:	f00d fb04 	bl	80126de <HAL_TIM_OC_Init>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80050dc:	f000 f998 	bl	8005410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80050e0:	2320      	movs	r3, #32
 80050e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050e4:	2300      	movs	r3, #0
 80050e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80050e8:	f107 031c 	add.w	r3, r7, #28
 80050ec:	4619      	mov	r1, r3
 80050ee:	480f      	ldr	r0, [pc, #60]	@ (800512c <MX_TIM4_Init+0xe0>)
 80050f0:	f00f fb0c 	bl	801470c <HAL_TIMEx_MasterConfigSynchronization>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80050fa:	f000 f989 	bl	8005410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80050fe:	2300      	movs	r3, #0
 8005100:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005102:	2300      	movs	r3, #0
 8005104:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005106:	2300      	movs	r3, #0
 8005108:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800510a:	2300      	movs	r3, #0
 800510c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800510e:	463b      	mov	r3, r7
 8005110:	2208      	movs	r2, #8
 8005112:	4619      	mov	r1, r3
 8005114:	4805      	ldr	r0, [pc, #20]	@ (800512c <MX_TIM4_Init+0xe0>)
 8005116:	f00e f9cf 	bl	80134b8 <HAL_TIM_OC_ConfigChannel>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8005120:	f000 f976 	bl	8005410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005124:	bf00      	nop
 8005126:	3738      	adds	r7, #56	@ 0x38
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	20000650 	.word	0x20000650
 8005130:	40000800 	.word	0x40000800

08005134 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005138:	4b14      	ldr	r3, [pc, #80]	@ (800518c <MX_UART4_Init+0x58>)
 800513a:	4a15      	ldr	r2, [pc, #84]	@ (8005190 <MX_UART4_Init+0x5c>)
 800513c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800513e:	4b13      	ldr	r3, [pc, #76]	@ (800518c <MX_UART4_Init+0x58>)
 8005140:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005144:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005146:	4b11      	ldr	r3, [pc, #68]	@ (800518c <MX_UART4_Init+0x58>)
 8005148:	2200      	movs	r2, #0
 800514a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800514c:	4b0f      	ldr	r3, [pc, #60]	@ (800518c <MX_UART4_Init+0x58>)
 800514e:	2200      	movs	r2, #0
 8005150:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005152:	4b0e      	ldr	r3, [pc, #56]	@ (800518c <MX_UART4_Init+0x58>)
 8005154:	2200      	movs	r2, #0
 8005156:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005158:	4b0c      	ldr	r3, [pc, #48]	@ (800518c <MX_UART4_Init+0x58>)
 800515a:	220c      	movs	r2, #12
 800515c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800515e:	4b0b      	ldr	r3, [pc, #44]	@ (800518c <MX_UART4_Init+0x58>)
 8005160:	2200      	movs	r2, #0
 8005162:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005164:	4b09      	ldr	r3, [pc, #36]	@ (800518c <MX_UART4_Init+0x58>)
 8005166:	2200      	movs	r2, #0
 8005168:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800516a:	4b08      	ldr	r3, [pc, #32]	@ (800518c <MX_UART4_Init+0x58>)
 800516c:	2200      	movs	r2, #0
 800516e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005170:	4b06      	ldr	r3, [pc, #24]	@ (800518c <MX_UART4_Init+0x58>)
 8005172:	2200      	movs	r2, #0
 8005174:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8005176:	4805      	ldr	r0, [pc, #20]	@ (800518c <MX_UART4_Init+0x58>)
 8005178:	f00f fc1c 	bl	80149b4 <HAL_HalfDuplex_Init>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8005182:	f000 f945 	bl	8005410 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005186:	bf00      	nop
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	2000069c 	.word	0x2000069c
 8005190:	40004c00 	.word	0x40004c00

08005194 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005198:	4b14      	ldr	r3, [pc, #80]	@ (80051ec <MX_USART1_UART_Init+0x58>)
 800519a:	4a15      	ldr	r2, [pc, #84]	@ (80051f0 <MX_USART1_UART_Init+0x5c>)
 800519c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800519e:	4b13      	ldr	r3, [pc, #76]	@ (80051ec <MX_USART1_UART_Init+0x58>)
 80051a0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80051a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80051a6:	4b11      	ldr	r3, [pc, #68]	@ (80051ec <MX_USART1_UART_Init+0x58>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80051ac:	4b0f      	ldr	r3, [pc, #60]	@ (80051ec <MX_USART1_UART_Init+0x58>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80051b2:	4b0e      	ldr	r3, [pc, #56]	@ (80051ec <MX_USART1_UART_Init+0x58>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80051b8:	4b0c      	ldr	r3, [pc, #48]	@ (80051ec <MX_USART1_UART_Init+0x58>)
 80051ba:	220c      	movs	r2, #12
 80051bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051be:	4b0b      	ldr	r3, [pc, #44]	@ (80051ec <MX_USART1_UART_Init+0x58>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80051c4:	4b09      	ldr	r3, [pc, #36]	@ (80051ec <MX_USART1_UART_Init+0x58>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80051ca:	4b08      	ldr	r3, [pc, #32]	@ (80051ec <MX_USART1_UART_Init+0x58>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80051d0:	4b06      	ldr	r3, [pc, #24]	@ (80051ec <MX_USART1_UART_Init+0x58>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80051d6:	4805      	ldr	r0, [pc, #20]	@ (80051ec <MX_USART1_UART_Init+0x58>)
 80051d8:	f00f fb9e 	bl	8014918 <HAL_UART_Init>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80051e2:	f000 f915 	bl	8005410 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80051e6:	bf00      	nop
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	20000724 	.word	0x20000724
 80051f0:	40013800 	.word	0x40013800

080051f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80051fa:	4b14      	ldr	r3, [pc, #80]	@ (800524c <MX_DMA_Init+0x58>)
 80051fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051fe:	4a13      	ldr	r2, [pc, #76]	@ (800524c <MX_DMA_Init+0x58>)
 8005200:	f043 0301 	orr.w	r3, r3, #1
 8005204:	6493      	str	r3, [r2, #72]	@ 0x48
 8005206:	4b11      	ldr	r3, [pc, #68]	@ (800524c <MX_DMA_Init+0x58>)
 8005208:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	607b      	str	r3, [r7, #4]
 8005210:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005212:	2200      	movs	r2, #0
 8005214:	2100      	movs	r1, #0
 8005216:	200b      	movs	r0, #11
 8005218:	f007 fbbd 	bl	800c996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800521c:	200b      	movs	r0, #11
 800521e:	f007 fbd6 	bl	800c9ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8005222:	2200      	movs	r2, #0
 8005224:	2100      	movs	r1, #0
 8005226:	200e      	movs	r0, #14
 8005228:	f007 fbb5 	bl	800c996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800522c:	200e      	movs	r0, #14
 800522e:	f007 fbce 	bl	800c9ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005232:	2200      	movs	r2, #0
 8005234:	2100      	movs	r1, #0
 8005236:	200f      	movs	r0, #15
 8005238:	f007 fbad 	bl	800c996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800523c:	200f      	movs	r0, #15
 800523e:	f007 fbc6 	bl	800c9ce <HAL_NVIC_EnableIRQ>

}
 8005242:	bf00      	nop
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	40021000 	.word	0x40021000

08005250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08a      	sub	sp, #40	@ 0x28
 8005254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005256:	f107 0314 	add.w	r3, r7, #20
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	605a      	str	r2, [r3, #4]
 8005260:	609a      	str	r2, [r3, #8]
 8005262:	60da      	str	r2, [r3, #12]
 8005264:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005266:	4b66      	ldr	r3, [pc, #408]	@ (8005400 <MX_GPIO_Init+0x1b0>)
 8005268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800526a:	4a65      	ldr	r2, [pc, #404]	@ (8005400 <MX_GPIO_Init+0x1b0>)
 800526c:	f043 0304 	orr.w	r3, r3, #4
 8005270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005272:	4b63      	ldr	r3, [pc, #396]	@ (8005400 <MX_GPIO_Init+0x1b0>)
 8005274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005276:	f003 0304 	and.w	r3, r3, #4
 800527a:	613b      	str	r3, [r7, #16]
 800527c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800527e:	4b60      	ldr	r3, [pc, #384]	@ (8005400 <MX_GPIO_Init+0x1b0>)
 8005280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005282:	4a5f      	ldr	r2, [pc, #380]	@ (8005400 <MX_GPIO_Init+0x1b0>)
 8005284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800528a:	4b5d      	ldr	r3, [pc, #372]	@ (8005400 <MX_GPIO_Init+0x1b0>)
 800528c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800528e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005296:	4b5a      	ldr	r3, [pc, #360]	@ (8005400 <MX_GPIO_Init+0x1b0>)
 8005298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800529a:	4a59      	ldr	r2, [pc, #356]	@ (8005400 <MX_GPIO_Init+0x1b0>)
 800529c:	f043 0301 	orr.w	r3, r3, #1
 80052a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80052a2:	4b57      	ldr	r3, [pc, #348]	@ (8005400 <MX_GPIO_Init+0x1b0>)
 80052a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	60bb      	str	r3, [r7, #8]
 80052ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80052ae:	4b54      	ldr	r3, [pc, #336]	@ (8005400 <MX_GPIO_Init+0x1b0>)
 80052b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052b2:	4a53      	ldr	r2, [pc, #332]	@ (8005400 <MX_GPIO_Init+0x1b0>)
 80052b4:	f043 0302 	orr.w	r3, r3, #2
 80052b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80052ba:	4b51      	ldr	r3, [pc, #324]	@ (8005400 <MX_GPIO_Init+0x1b0>)
 80052bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	607b      	str	r3, [r7, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80052c6:	4b4e      	ldr	r3, [pc, #312]	@ (8005400 <MX_GPIO_Init+0x1b0>)
 80052c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052ca:	4a4d      	ldr	r2, [pc, #308]	@ (8005400 <MX_GPIO_Init+0x1b0>)
 80052cc:	f043 0308 	orr.w	r3, r3, #8
 80052d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80052d2:	4b4b      	ldr	r3, [pc, #300]	@ (8005400 <MX_GPIO_Init+0x1b0>)
 80052d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	603b      	str	r3, [r7, #0]
 80052dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DBG_GPIO_Port, DBG_Pin, GPIO_PIN_RESET);
 80052de:	2200      	movs	r2, #0
 80052e0:	2108      	movs	r1, #8
 80052e2:	4848      	ldr	r0, [pc, #288]	@ (8005404 <MX_GPIO_Init+0x1b4>)
 80052e4:	f009 f892 	bl	800e40c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 80052e8:	2201      	movs	r2, #1
 80052ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80052ee:	4846      	ldr	r0, [pc, #280]	@ (8005408 <MX_GPIO_Init+0x1b8>)
 80052f0:	f009 f88c 	bl	800e40c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH_nWP_Pin|FLASH_nRESET_Pin, GPIO_PIN_SET);
 80052f4:	2201      	movs	r2, #1
 80052f6:	21c0      	movs	r1, #192	@ 0xc0
 80052f8:	4842      	ldr	r0, [pc, #264]	@ (8005404 <MX_GPIO_Init+0x1b4>)
 80052fa:	f009 f887 	bl	800e40c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LTE_POWER_ON_Pin|LTE_RESET_Pin|ACC_nCS_Pin, GPIO_PIN_RESET);
 80052fe:	2200      	movs	r2, #0
 8005300:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 8005304:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005308:	f009 f880 	bl	800e40c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DTR_GPIO_Port, DTR_Pin, GPIO_PIN_RESET);
 800530c:	2200      	movs	r2, #0
 800530e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005312:	483d      	ldr	r0, [pc, #244]	@ (8005408 <MX_GPIO_Init+0x1b8>)
 8005314:	f009 f87a 	bl	800e40c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USR_BTN_Pin PC4 */
  GPIO_InitStruct.Pin = USR_BTN_Pin|GPIO_PIN_4;
 8005318:	f242 0310 	movw	r3, #8208	@ 0x2010
 800531c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800531e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005324:	2300      	movs	r3, #0
 8005326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005328:	f107 0314 	add.w	r3, r7, #20
 800532c:	4619      	mov	r1, r3
 800532e:	4835      	ldr	r0, [pc, #212]	@ (8005404 <MX_GPIO_Init+0x1b4>)
 8005330:	f008 feaa 	bl	800e088 <HAL_GPIO_Init>

  /*Configure GPIO pins : DBG_Pin FLASH_nWP_Pin FLASH_nRESET_Pin */
  GPIO_InitStruct.Pin = DBG_Pin|FLASH_nWP_Pin|FLASH_nRESET_Pin;
 8005334:	23c8      	movs	r3, #200	@ 0xc8
 8005336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005338:	2301      	movs	r3, #1
 800533a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800533c:	2300      	movs	r3, #0
 800533e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005340:	2300      	movs	r3, #0
 8005342:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005344:	f107 0314 	add.w	r3, r7, #20
 8005348:	4619      	mov	r1, r3
 800534a:	482e      	ldr	r0, [pc, #184]	@ (8005404 <MX_GPIO_Init+0x1b4>)
 800534c:	f008 fe9c 	bl	800e088 <HAL_GPIO_Init>

  /*Configure GPIO pin : LTE_STATUS_Pin */
  GPIO_InitStruct.Pin = LTE_STATUS_Pin;
 8005350:	2308      	movs	r3, #8
 8005352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005354:	2300      	movs	r3, #0
 8005356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005358:	2300      	movs	r3, #0
 800535a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTE_STATUS_GPIO_Port, &GPIO_InitStruct);
 800535c:	f107 0314 	add.w	r3, r7, #20
 8005360:	4619      	mov	r1, r3
 8005362:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005366:	f008 fe8f 	bl	800e088 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_nCS_Pin DTR_Pin */
  GPIO_InitStruct.Pin = FLASH_nCS_Pin|DTR_Pin;
 800536a:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800536e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005370:	2301      	movs	r3, #1
 8005372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005374:	2300      	movs	r3, #0
 8005376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005378:	2300      	movs	r3, #0
 800537a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800537c:	f107 0314 	add.w	r3, r7, #20
 8005380:	4619      	mov	r1, r3
 8005382:	4821      	ldr	r0, [pc, #132]	@ (8005408 <MX_GPIO_Init+0x1b8>)
 8005384:	f008 fe80 	bl	800e088 <HAL_GPIO_Init>

  /*Configure GPIO pins : LTE_POWER_ON_Pin LTE_RESET_Pin ACC_nCS_Pin */
  GPIO_InitStruct.Pin = LTE_POWER_ON_Pin|LTE_RESET_Pin|ACC_nCS_Pin;
 8005388:	f44f 4318 	mov.w	r3, #38912	@ 0x9800
 800538c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800538e:	2301      	movs	r3, #1
 8005390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005392:	2300      	movs	r3, #0
 8005394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005396:	2300      	movs	r3, #0
 8005398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800539a:	f107 0314 	add.w	r3, r7, #20
 800539e:	4619      	mov	r1, r3
 80053a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80053a4:	f008 fe70 	bl	800e088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80053a8:	2304      	movs	r3, #4
 80053aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80053ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80053b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b2:	2300      	movs	r3, #0
 80053b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80053b6:	f107 0314 	add.w	r3, r7, #20
 80053ba:	4619      	mov	r1, r3
 80053bc:	4813      	ldr	r0, [pc, #76]	@ (800540c <MX_GPIO_Init+0x1bc>)
 80053be:	f008 fe63 	bl	800e088 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCD_Pin */
  GPIO_InitStruct.Pin = DCD_Pin;
 80053c2:	2320      	movs	r3, #32
 80053c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053c6:	2300      	movs	r3, #0
 80053c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DCD_GPIO_Port, &GPIO_InitStruct);
 80053ce:	f107 0314 	add.w	r3, r7, #20
 80053d2:	4619      	mov	r1, r3
 80053d4:	480c      	ldr	r0, [pc, #48]	@ (8005408 <MX_GPIO_Init+0x1b8>)
 80053d6:	f008 fe57 	bl	800e088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80053da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80053de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80053e0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80053e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053e6:	2300      	movs	r3, #0
 80053e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053ea:	f107 0314 	add.w	r3, r7, #20
 80053ee:	4619      	mov	r1, r3
 80053f0:	4805      	ldr	r0, [pc, #20]	@ (8005408 <MX_GPIO_Init+0x1b8>)
 80053f2:	f008 fe49 	bl	800e088 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80053f6:	bf00      	nop
 80053f8:	3728      	adds	r7, #40	@ 0x28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	40021000 	.word	0x40021000
 8005404:	48000800 	.word	0x48000800
 8005408:	48000400 	.word	0x48000400
 800540c:	48000c00 	.word	0x48000c00

08005410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005414:	b672      	cpsid	i
}
 8005416:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 8005418:	bf00      	nop
 800541a:	e7fd      	b.n	8005418 <Error_Handler+0x8>

0800541c <OTA_Init>:
#include "base64.h"


/*-----INIZIALIZZAZIONE OTA-----*/
int OTA_Init(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 8005422:	2300      	movs	r3, #0
 8005424:	71fb      	strb	r3, [r7, #7]

	if (sys.OTA_File_isOpen)
 8005426:	4b10      	ldr	r3, [pc, #64]	@ (8005468 <OTA_Init+0x4c>)
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <OTA_Init+0x1e>
	{
		f_close(&sys.OTA_File);
 8005434:	480d      	ldr	r0, [pc, #52]	@ (800546c <OTA_Init+0x50>)
 8005436:	f004 ffcd 	bl	800a3d4 <f_close>
	}

	sys.OTA_File_isOpen = 0;
 800543a:	4a0b      	ldr	r2, [pc, #44]	@ (8005468 <OTA_Init+0x4c>)
 800543c:	7813      	ldrb	r3, [r2, #0]
 800543e:	f023 0301 	bic.w	r3, r3, #1
 8005442:	7013      	strb	r3, [r2, #0]

	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ | FA_WRITE | FA_CREATE_ALWAYS);
 8005444:	220b      	movs	r2, #11
 8005446:	490a      	ldr	r1, [pc, #40]	@ (8005470 <OTA_Init+0x54>)
 8005448:	4808      	ldr	r0, [pc, #32]	@ (800546c <OTA_Init+0x50>)
 800544a:	f004 facf 	bl	80099ec <f_open>
 800544e:	4603      	mov	r3, r0
 8005450:	71fb      	strb	r3, [r7, #7]

	if (fRes != FR_OK)
 8005452:	79fb      	ldrb	r3, [r7, #7]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <OTA_Init+0x42>
	{
		return -1;
 8005458:	f04f 33ff 	mov.w	r3, #4294967295
 800545c:	e000      	b.n	8005460 <OTA_Init+0x44>
	}

	return 0;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3708      	adds	r7, #8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	20000840 	.word	0x20000840
 800546c:	20000844 	.word	0x20000844
 8005470:	080176f8 	.word	0x080176f8

08005474 <OTA_Receive>:

/*-----RICEZIONE FILE OTA-----*/
int OTA_Receive(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	f6ad 3dc8 	subw	sp, sp, #3016	@ 0xbc8
 800547a:	af00      	add	r7, sp, #0
	uint8_t rx_buffer[1500];
	UINT bytes_written = 0;
 800547c:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 8005480:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]
	uint8_t bin_buffer[1500];
	uint16_t Rx_Len = 0;
 8005488:	2300      	movs	r3, #0
 800548a:	f8a7 3bc6 	strh.w	r3, [r7, #3014]	@ 0xbc6

	while (1)
	{
		Rx_Len = SIM_Receive_Response((char*)rx_buffer, 5000);
 800548e:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8005492:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005496:	4618      	mov	r0, r3
 8005498:	f7fc fb26 	bl	8001ae8 <SIM_Receive_Response>
 800549c:	4603      	mov	r3, r0
 800549e:	f8a7 3bc6 	strh.w	r3, [r7, #3014]	@ 0xbc6
		if (rx_buffer[0] == '\0' || (rx_buffer[0] == '\r' && rx_buffer[1] == '\n'))
 80054a2:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 80054a6:	f5a3 63bd 	sub.w	r3, r3, #1512	@ 0x5e8
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d04e      	beq.n	800554e <OTA_Receive+0xda>
 80054b0:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 80054b4:	f5a3 63bd 	sub.w	r3, r3, #1512	@ 0x5e8
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	2b0d      	cmp	r3, #13
 80054bc:	d106      	bne.n	80054cc <OTA_Receive+0x58>
 80054be:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 80054c2:	f5a3 63bd 	sub.w	r3, r3, #1512	@ 0x5e8
 80054c6:	785b      	ldrb	r3, [r3, #1]
 80054c8:	2b0a      	cmp	r3, #10
 80054ca:	d040      	beq.n	800554e <OTA_Receive+0xda>
		{
			break;
		}
		if(strncmp((char*)rx_buffer, "EOF", 3) == 0)
 80054cc:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80054d0:	2203      	movs	r2, #3
 80054d2:	4926      	ldr	r1, [pc, #152]	@ (800556c <OTA_Receive+0xf8>)
 80054d4:	4618      	mov	r0, r3
 80054d6:	f010 fe80 	bl	80161da <strncmp>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d035      	beq.n	800554c <OTA_Receive+0xd8>
		{
			break;
		}
		if (Rx_Len == 0)
 80054e0:	f8b7 3bc6 	ldrh.w	r3, [r7, #3014]	@ 0xbc6
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d105      	bne.n	80054f4 <OTA_Receive+0x80>
		{
			f_close(&sys.OTA_File);
 80054e8:	4821      	ldr	r0, [pc, #132]	@ (8005570 <OTA_Receive+0xfc>)
 80054ea:	f004 ff73 	bl	800a3d4 <f_close>
			return -1;
 80054ee:	f04f 33ff 	mov.w	r3, #4294967295
 80054f2:	e035      	b.n	8005560 <OTA_Receive+0xec>
		}
		size_t base64_len = strlen((char*)rx_buffer);
 80054f4:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7fa fe73 	bl	80001e4 <strlen>
 80054fe:	f8c7 0bc0 	str.w	r0, [r7, #3008]	@ 0xbc0
		size_t bin_len = Base64_Decode((char*)rx_buffer, bin_buffer, base64_len);
 8005502:	4639      	mov	r1, r7
 8005504:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8005508:	f8d7 2bc0 	ldr.w	r2, [r7, #3008]	@ 0xbc0
 800550c:	4618      	mov	r0, r3
 800550e:	f7fc ff3f 	bl	8002390 <Base64_Decode>
 8005512:	f8c7 0bbc 	str.w	r0, [r7, #3004]	@ 0xbbc
		f_write(&sys.OTA_File, bin_buffer, bin_len, &bytes_written);
 8005516:	f207 53dc 	addw	r3, r7, #1500	@ 0x5dc
 800551a:	4639      	mov	r1, r7
 800551c:	f8d7 2bbc 	ldr.w	r2, [r7, #3004]	@ 0xbbc
 8005520:	4813      	ldr	r0, [pc, #76]	@ (8005570 <OTA_Receive+0xfc>)
 8005522:	f004 fd4e 	bl	8009fc2 <f_write>
		if (bytes_written != bin_len)
 8005526:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 800552a:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f8d7 2bbc 	ldr.w	r2, [r7, #3004]	@ 0xbbc
 8005534:	429a      	cmp	r2, r3
 8005536:	d005      	beq.n	8005544 <OTA_Receive+0xd0>
		{
			f_close(&sys.OTA_File);
 8005538:	480d      	ldr	r0, [pc, #52]	@ (8005570 <OTA_Receive+0xfc>)
 800553a:	f004 ff4b 	bl	800a3d4 <f_close>
			return -1;
 800553e:	f04f 33ff 	mov.w	r3, #4294967295
 8005542:	e00d      	b.n	8005560 <OTA_Receive+0xec>
		}
		SIM_Send_TCP("ACK");
 8005544:	480b      	ldr	r0, [pc, #44]	@ (8005574 <OTA_Receive+0x100>)
 8005546:	f7fc fd2b 	bl	8001fa0 <SIM_Send_TCP>
	{
 800554a:	e7a0      	b.n	800548e <OTA_Receive+0x1a>
			break;
 800554c:	bf00      	nop
	}

	f_close(&sys.OTA_File);
 800554e:	4808      	ldr	r0, [pc, #32]	@ (8005570 <OTA_Receive+0xfc>)
 8005550:	f004 ff40 	bl	800a3d4 <f_close>
    sys.OTA_File_isOpen = 0;
 8005554:	4a08      	ldr	r2, [pc, #32]	@ (8005578 <OTA_Receive+0x104>)
 8005556:	7813      	ldrb	r3, [r2, #0]
 8005558:	f023 0301 	bic.w	r3, r3, #1
 800555c:	7013      	strb	r3, [r2, #0]
	return 0;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	f607 37c8 	addw	r7, r7, #3016	@ 0xbc8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	08017708 	.word	0x08017708
 8005570:	20000844 	.word	0x20000844
 8005574:	0801770c 	.word	0x0801770c
 8005578:	20000840 	.word	0x20000840

0800557c <OTA_CRC_Check>:

int OTA_CRC_Check(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	f5ad 6d8c 	sub.w	sp, sp, #1120	@ 0x460
 8005582:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
	UINT read = 0;
 800558a:	2300      	movs	r3, #0
 800558c:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
	uint16_t ota_crc = 0;
 8005590:	2300      	movs	r3, #0
 8005592:	f8a7 3454 	strh.w	r3, [r7, #1108]	@ 0x454
	uint8_t rx_buffer[64];
	uint32_t calc_crc = 0;
 8005596:	2300      	movs	r3, #0
 8005598:	f8c7 345c 	str.w	r3, [r7, #1116]	@ 0x45c

	SIM_Receive_Response((char*)rx_buffer, 5000);
 800559c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80055a0:	f241 3188 	movw	r1, #5000	@ 0x1388
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7fc fa9f 	bl	8001ae8 <SIM_Receive_Response>
	uint8_t crc_bin[8];
	size_t crc_len = Base64_Decode((char*)rx_buffer, crc_bin, sizeof(crc_bin));
 80055aa:	f507 6180 	add.w	r1, r7, #1024	@ 0x400
 80055ae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80055b2:	2208      	movs	r2, #8
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fc feeb 	bl	8002390 <Base64_Decode>
 80055ba:	f8c7 0450 	str.w	r0, [r7, #1104]	@ 0x450
	if (crc_len == 4)
 80055be:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d118      	bne.n	80055f8 <OTA_CRC_Check+0x7c>
	{
		ota_crc = (crc_bin[0] << 24) | (crc_bin[1] << 16) | (crc_bin[2] << 8) | crc_bin[3];
 80055c6:	f897 3402 	ldrb.w	r3, [r7, #1026]	@ 0x402
 80055ca:	b21b      	sxth	r3, r3
 80055cc:	021b      	lsls	r3, r3, #8
 80055ce:	b21a      	sxth	r2, r3
 80055d0:	f897 3403 	ldrb.w	r3, [r7, #1027]	@ 0x403
 80055d4:	b21b      	sxth	r3, r3
 80055d6:	4313      	orrs	r3, r2
 80055d8:	b21b      	sxth	r3, r3
 80055da:	f8a7 3454 	strh.w	r3, [r7, #1108]	@ 0x454
	else
	{
		return -1;
	}

	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ);
 80055de:	2201      	movs	r2, #1
 80055e0:	493b      	ldr	r1, [pc, #236]	@ (80056d0 <OTA_CRC_Check+0x154>)
 80055e2:	483c      	ldr	r0, [pc, #240]	@ (80056d4 <OTA_CRC_Check+0x158>)
 80055e4:	f004 fa02 	bl	80099ec <f_open>
 80055e8:	4603      	mov	r3, r0
 80055ea:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
	if (fRes != FR_OK)
 80055ee:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d006      	beq.n	8005604 <OTA_CRC_Check+0x88>
 80055f6:	e002      	b.n	80055fe <OTA_CRC_Check+0x82>
		return -1;
 80055f8:	f04f 33ff 	mov.w	r3, #4294967295
 80055fc:	e063      	b.n	80056c6 <OTA_CRC_Check+0x14a>
	{
		return -1;
 80055fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005602:	e060      	b.n	80056c6 <OTA_CRC_Check+0x14a>
	}

	uint32_t size = f_size(&sys.OTA_File);
 8005604:	4b34      	ldr	r3, [pc, #208]	@ (80056d8 <OTA_CRC_Check+0x15c>)
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
    HAL_CRCEx_Input_Data_Reverse(HCRC, CRC_INPUTDATA_INVERSION_BYTE);
 800560c:	2120      	movs	r1, #32
 800560e:	4833      	ldr	r0, [pc, #204]	@ (80056dc <OTA_CRC_Check+0x160>)
 8005610:	f007 fbfc 	bl	800ce0c <HAL_CRCEx_Input_Data_Reverse>
    HAL_CRCEx_Output_Data_Reverse(HCRC, CRC_OUTPUTDATA_INVERSION_ENABLE);
 8005614:	2180      	movs	r1, #128	@ 0x80
 8005616:	4831      	ldr	r0, [pc, #196]	@ (80056dc <OTA_CRC_Check+0x160>)
 8005618:	f007 fc14 	bl	800ce44 <HAL_CRCEx_Output_Data_Reverse>
    HCRC->Instance->INIT = 0xFFFFFFFF;
 800561c:	4b2f      	ldr	r3, [pc, #188]	@ (80056dc <OTA_CRC_Check+0x160>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f04f 32ff 	mov.w	r2, #4294967295
 8005624:	611a      	str	r2, [r3, #16]
    HAL_CRCEx_Polynomial_Set(HCRC, 0x04c11db7, CRC_POLYLENGTH_32B);
 8005626:	2200      	movs	r2, #0
 8005628:	492d      	ldr	r1, [pc, #180]	@ (80056e0 <OTA_CRC_Check+0x164>)
 800562a:	482c      	ldr	r0, [pc, #176]	@ (80056dc <OTA_CRC_Check+0x160>)
 800562c:	f007 fb60 	bl	800ccf0 <HAL_CRCEx_Polynomial_Set>

	while (size > 0)
 8005630:	e038      	b.n	80056a4 <OTA_CRC_Check+0x128>
	{
		uint8_t buffer[1024];
		UINT to_read = (size > sizeof(buffer)) ? sizeof(buffer) : size;
 8005632:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 8005636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800563a:	bf28      	it	cs
 800563c:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8005640:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
		if (f_read(&sys.OTA_File, buffer, to_read, &read) != FR_OK || read == 0)
 8005644:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8005648:	4639      	mov	r1, r7
 800564a:	f8d7 244c 	ldr.w	r2, [r7, #1100]	@ 0x44c
 800564e:	4821      	ldr	r0, [pc, #132]	@ (80056d4 <OTA_CRC_Check+0x158>)
 8005650:	f004 fb64 	bl	8009d1c <f_read>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d103      	bne.n	8005662 <OTA_CRC_Check+0xe6>
 800565a:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 800565e:	2b00      	cmp	r3, #0
 8005660:	d105      	bne.n	800566e <OTA_CRC_Check+0xf2>
		{
			f_close(&sys.OTA_File);
 8005662:	481c      	ldr	r0, [pc, #112]	@ (80056d4 <OTA_CRC_Check+0x158>)
 8005664:	f004 feb6 	bl	800a3d4 <f_close>
			return -1;
 8005668:	f04f 33ff 	mov.w	r3, #4294967295
 800566c:	e02b      	b.n	80056c6 <OTA_CRC_Check+0x14a>
		}
		calc_crc = HAL_CRC_Accumulate(HCRC, (uint32_t *)buffer, read / 4 + (read % 4 != 0));
 800566e:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 8005672:	089b      	lsrs	r3, r3, #2
 8005674:	f8d7 2448 	ldr.w	r2, [r7, #1096]	@ 0x448
 8005678:	f002 0203 	and.w	r2, r2, #3
 800567c:	2a00      	cmp	r2, #0
 800567e:	bf14      	ite	ne
 8005680:	2201      	movne	r2, #1
 8005682:	2200      	moveq	r2, #0
 8005684:	b2d2      	uxtb	r2, r2
 8005686:	441a      	add	r2, r3
 8005688:	463b      	mov	r3, r7
 800568a:	4619      	mov	r1, r3
 800568c:	4813      	ldr	r0, [pc, #76]	@ (80056dc <OTA_CRC_Check+0x160>)
 800568e:	f007 fa21 	bl	800cad4 <HAL_CRC_Accumulate>
 8005692:	f8c7 045c 	str.w	r0, [r7, #1116]	@ 0x45c
		size -= read;
 8005696:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 800569a:	f8d7 2458 	ldr.w	r2, [r7, #1112]	@ 0x458
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
	while (size > 0)
 80056a4:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1c2      	bne.n	8005632 <OTA_CRC_Check+0xb6>
	}

	f_close(&sys.OTA_File);
 80056ac:	4809      	ldr	r0, [pc, #36]	@ (80056d4 <OTA_CRC_Check+0x158>)
 80056ae:	f004 fe91 	bl	800a3d4 <f_close>

	if (calc_crc != ota_crc)
 80056b2:	f8b7 3454 	ldrh.w	r3, [r7, #1108]	@ 0x454
 80056b6:	f8d7 245c 	ldr.w	r2, [r7, #1116]	@ 0x45c
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d002      	beq.n	80056c4 <OTA_CRC_Check+0x148>
	{
		return -1; // CRC non corrisponde
 80056be:	f04f 33ff 	mov.w	r3, #4294967295
 80056c2:	e000      	b.n	80056c6 <OTA_CRC_Check+0x14a>
	}
	
	return 0; // CRC OK
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	f507 678c 	add.w	r7, r7, #1120	@ 0x460
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	080176f8 	.word	0x080176f8
 80056d4:	20000844 	.word	0x20000844
 80056d8:	20000840 	.word	0x20000840
 80056dc:	200003c4 	.word	0x200003c4
 80056e0:	04c11db7 	.word	0x04c11db7

080056e4 <OTA_Apply>:


/*-----APPLICAZIONE UPDATE-----*/
int OTA_Apply(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b098      	sub	sp, #96	@ 0x60
 80056e8:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 80056ea:	2300      	movs	r3, #0
 80056ec:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	int32_t result = 0;
 80056f0:	2300      	movs	r3, #0
 80056f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint8_t ota_bank = 0;
 80056f4:	2300      	movs	r3, #0
 80056f6:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
	uint32_t faddr = 0;
 80056fa:	2300      	movs	r3, #0
 80056fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t size = 0;
 80056fe:	2300      	movs	r3, #0
 8005700:	65bb      	str	r3, [r7, #88]	@ 0x58
	uint64_t pword = 0;
 8005702:	f04f 0200 	mov.w	r2, #0
 8005706:	f04f 0300 	mov.w	r3, #0
 800570a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	uint32_t faddr_off = 0;
 800570e:	2300      	movs	r3, #0
 8005710:	657b      	str	r3, [r7, #84]	@ 0x54
	UINT read = 0;
 8005712:	2300      	movs	r3, #0
 8005714:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t PageError = 0;
 8005716:	2300      	movs	r3, #0
 8005718:	63bb      	str	r3, [r7, #56]	@ 0x38
	FLASH_EraseInitTypeDef erase_cfg = {0};
 800571a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	605a      	str	r2, [r3, #4]
 8005724:	609a      	str	r2, [r3, #8]
 8005726:	60da      	str	r2, [r3, #12]

	const uint32_t BANKSIZE = FLASH_SIZE >> 1;
 8005728:	4b68      	ldr	r3, [pc, #416]	@ (80058cc <OTA_Apply+0x1e8>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005732:	4293      	cmp	r3, r2
 8005734:	d006      	beq.n	8005744 <OTA_Apply+0x60>
 8005736:	4b65      	ldr	r3, [pc, #404]	@ (80058cc <OTA_Apply+0x1e8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	029b      	lsls	r3, r3, #10
 800573c:	085a      	lsrs	r2, r3, #1
 800573e:	4b64      	ldr	r3, [pc, #400]	@ (80058d0 <OTA_Apply+0x1ec>)
 8005740:	4013      	ands	r3, r2
 8005742:	e001      	b.n	8005748 <OTA_Apply+0x64>
 8005744:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005748:	64bb      	str	r3, [r7, #72]	@ 0x48

	FLASH_OBProgramInitTypeDef ob = {0};
 800574a:	463b      	mov	r3, r7
 800574c:	2228      	movs	r2, #40	@ 0x28
 800574e:	2100      	movs	r1, #0
 8005750:	4618      	mov	r0, r3
 8005752:	f010 fd2d 	bl	80161b0 <memset>

	HAL_FLASHEx_OBGetConfig(&ob);
 8005756:	463b      	mov	r3, r7
 8005758:	4618      	mov	r0, r3
 800575a:	f008 f869 	bl	800d830 <HAL_FLASHEx_OBGetConfig>

	if ((ob.USERConfig & FLASH_OPTR_DUALBANK) == 0)
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d102      	bne.n	800576e <OTA_Apply+0x8a>
	{
		return -1;
 8005768:	f04f 33ff 	mov.w	r3, #4294967295
 800576c:	e0aa      	b.n	80058c4 <OTA_Apply+0x1e0>
	}

	ota_bank = (ob.USERConfig & FLASH_OPTR_BFB2) ? FLASH_BANK_1 : FLASH_BANK_2;
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <OTA_Apply+0x98>
 8005778:	2301      	movs	r3, #1
 800577a:	e000      	b.n	800577e <OTA_Apply+0x9a>
 800577c:	2302      	movs	r3, #2
 800577e:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

	// L'indirizzo deve essere sempre quello del banco 2 (se fa il boot da BANK2 il BANK1 viene rimappato)
	faddr = FLASH_BASE + BANKSIZE;
 8005782:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005784:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8005788:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_FLASH_Unlock() != HAL_OK)
 800578a:	f007 fe25 	bl	800d3d8 <HAL_FLASH_Unlock>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <OTA_Apply+0xb6>
	{
		return -1;
 8005794:	f04f 33ff 	mov.w	r3, #4294967295
 8005798:	e094      	b.n	80058c4 <OTA_Apply+0x1e0>
	}

	f_close(&sys.OTA_File);
 800579a:	484e      	ldr	r0, [pc, #312]	@ (80058d4 <OTA_Apply+0x1f0>)
 800579c:	f004 fe1a 	bl	800a3d4 <f_close>
	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ);
 80057a0:	2201      	movs	r2, #1
 80057a2:	494d      	ldr	r1, [pc, #308]	@ (80058d8 <OTA_Apply+0x1f4>)
 80057a4:	484b      	ldr	r0, [pc, #300]	@ (80058d4 <OTA_Apply+0x1f0>)
 80057a6:	f004 f921 	bl	80099ec <f_open>
 80057aa:	4603      	mov	r3, r0
 80057ac:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	if (fRes != FR_OK)
 80057b0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <OTA_Apply+0xdc>
	{
		result = -1;
 80057b8:	f04f 33ff 	mov.w	r3, #4294967295
 80057bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 80057be:	e07b      	b.n	80058b8 <OTA_Apply+0x1d4>
	}

	if ((size = f_size(&sys.OTA_File)) > BANKSIZE)
 80057c0:	4b46      	ldr	r3, [pc, #280]	@ (80058dc <OTA_Apply+0x1f8>)
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d903      	bls.n	80057d6 <OTA_Apply+0xf2>
	{
		result = -1;
 80057ce:	f04f 33ff 	mov.w	r3, #4294967295
 80057d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 80057d4:	e070      	b.n	80058b8 <OTA_Apply+0x1d4>
	}

	erase_cfg.TypeErase = FLASH_TYPEERASE_MASSERASE;
 80057d6:	2301      	movs	r3, #1
 80057d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	erase_cfg.Banks = ota_bank;
 80057da:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80057de:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_FLASHEx_Erase(&erase_cfg, &PageError) != HAL_OK)
 80057e0:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80057e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80057e8:	4611      	mov	r1, r2
 80057ea:	4618      	mov	r0, r3
 80057ec:	f007 ff16 	bl	800d61c <HAL_FLASHEx_Erase>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d026      	beq.n	8005844 <OTA_Apply+0x160>
	{
		result = -1;
 80057f6:	f04f 33ff 	mov.w	r3, #4294967295
 80057fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 80057fc:	e05c      	b.n	80058b8 <OTA_Apply+0x1d4>
	}

	while (size > 0)
	{
		pword = 0;
 80057fe:	f04f 0200 	mov.w	r2, #0
 8005802:	f04f 0300 	mov.w	r3, #0
 8005806:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		if (f_read(&sys.OTA_File, (uint8_t *)&pword, sizeof(pword), &read) < 0)
 800580a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800580e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8005812:	2208      	movs	r2, #8
 8005814:	482f      	ldr	r0, [pc, #188]	@ (80058d4 <OTA_Apply+0x1f0>)
 8005816:	f004 fa81 	bl	8009d1c <f_read>
			break;
		if (read == 0)
 800581a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d015      	beq.n	800584c <OTA_Apply+0x168>
			break;
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, faddr + faddr_off, pword) != HAL_OK)
 8005820:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005824:	18d1      	adds	r1, r2, r3
 8005826:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800582a:	2000      	movs	r0, #0
 800582c:	f007 fd68 	bl	800d300 <HAL_FLASH_Program>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10c      	bne.n	8005850 <OTA_Apply+0x16c>
			break;
		faddr_off += sizeof(pword);
 8005836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005838:	3308      	adds	r3, #8
 800583a:	657b      	str	r3, [r7, #84]	@ 0x54
		size -= read;
 800583c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800583e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	65bb      	str	r3, [r7, #88]	@ 0x58
	while (size > 0)
 8005844:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1d9      	bne.n	80057fe <OTA_Apply+0x11a>
 800584a:	e002      	b.n	8005852 <OTA_Apply+0x16e>
			break;
 800584c:	bf00      	nop
 800584e:	e000      	b.n	8005852 <OTA_Apply+0x16e>
			break;
 8005850:	bf00      	nop
	}

	if (size > 0)
 8005852:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <OTA_Apply+0x17c>
	{
		result = -1;
 8005858:	f04f 33ff 	mov.w	r3, #4294967295
 800585c:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 800585e:	e02b      	b.n	80058b8 <OTA_Apply+0x1d4>
	}

	HAL_FLASH_Lock();
 8005860:	f007 fddc 	bl	800d41c <HAL_FLASH_Lock>

	HAL_FLASHEx_OBGetConfig(&ob);
 8005864:	463b      	mov	r3, r7
 8005866:	4618      	mov	r0, r3
 8005868:	f007 ffe2 	bl	800d830 <HAL_FLASHEx_OBGetConfig>
	HAL_FLASH_Unlock();
 800586c:	f007 fdb4 	bl	800d3d8 <HAL_FLASH_Unlock>
	HAL_FLASH_OB_Unlock();
 8005870:	f007 fde4 	bl	800d43c <HAL_FLASH_OB_Unlock>

	ob.OptionType = OPTIONBYTE_USER;
 8005874:	2304      	movs	r3, #4
 8005876:	603b      	str	r3, [r7, #0]
	ob.USERType = OB_USER_BFB2;
 8005878:	2380      	movs	r3, #128	@ 0x80
 800587a:	617b      	str	r3, [r7, #20]
	ob.USERConfig = (ota_bank == FLASH_BANK_2) ? FLASH_OPTR_BFB2 : 0;
 800587c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8005880:	2b02      	cmp	r3, #2
 8005882:	d102      	bne.n	800588a <OTA_Apply+0x1a6>
 8005884:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005888:	e000      	b.n	800588c <OTA_Apply+0x1a8>
 800588a:	2300      	movs	r3, #0
 800588c:	61bb      	str	r3, [r7, #24]

	if (HAL_FLASHEx_OBProgram(&ob) != HAL_OK)
 800588e:	463b      	mov	r3, r7
 8005890:	4618      	mov	r0, r3
 8005892:	f007 ff5f 	bl	800d754 <HAL_FLASHEx_OBProgram>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d007      	beq.n	80058ac <OTA_Apply+0x1c8>
	{
		HAL_FLASH_OB_Lock();
 800589c:	f007 fdea 	bl	800d474 <HAL_FLASH_OB_Lock>
		HAL_FLASH_Lock();
 80058a0:	f007 fdbc 	bl	800d41c <HAL_FLASH_Lock>
		result = -1;
 80058a4:	f04f 33ff 	mov.w	r3, #4294967295
 80058a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 80058aa:	e005      	b.n	80058b8 <OTA_Apply+0x1d4>
	}

	HAL_FLASH_OB_Launch();
 80058ac:	f007 fdf2 	bl	800d494 <HAL_FLASH_OB_Launch>
	HAL_FLASH_OB_Lock();
 80058b0:	f007 fde0 	bl	800d474 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 80058b4:	f007 fdb2 	bl	800d41c <HAL_FLASH_Lock>

	DONE:

	f_close(&sys.OTA_File);
 80058b8:	4806      	ldr	r0, [pc, #24]	@ (80058d4 <OTA_Apply+0x1f0>)
 80058ba:	f004 fd8b 	bl	800a3d4 <f_close>

	HAL_FLASH_Lock();
 80058be:	f007 fdad 	bl	800d41c <HAL_FLASH_Lock>

	return result;
 80058c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3760      	adds	r7, #96	@ 0x60
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	1fff75e0 	.word	0x1fff75e0
 80058d0:	01fffe00 	.word	0x01fffe00
 80058d4:	20000844 	.word	0x20000844
 80058d8:	080176f8 	.word	0x080176f8
 80058dc:	20000840 	.word	0x20000840

080058e0 <Save_Data>:
#include "init.h"


/*-----ACQUISIZIONE MISURE E LOG DEI DATI-----*/
void Save_Data(void)
{
 80058e0:	b590      	push	{r4, r7, lr}
 80058e2:	f2ad 4ddc 	subw	sp, sp, #1244	@ 0x4dc
 80058e6:	af00      	add	r7, sp, #0
	if(flags.ADC_Half_Buffer)
 80058e8:	4b76      	ldr	r3, [pc, #472]	@ (8005ac4 <Save_Data+0x1e4>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d037      	beq.n	8005966 <Save_Data+0x86>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[0], PRESS_HALF_LEN);
 80058f6:	4b74      	ldr	r3, [pc, #464]	@ (8005ac8 <Save_Data+0x1e8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	461a      	mov	r2, r3
 80058fc:	4b73      	ldr	r3, [pc, #460]	@ (8005acc <Save_Data+0x1ec>)
 80058fe:	4413      	add	r3, r2
 8005900:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005904:	4972      	ldr	r1, [pc, #456]	@ (8005ad0 <Save_Data+0x1f0>)
 8005906:	4618      	mov	r0, r3
 8005908:	f010 fcd6 	bl	80162b8 <memcpy>
		Last_Pressure = 0;
 800590c:	4b71      	ldr	r3, [pc, #452]	@ (8005ad4 <Save_Data+0x1f4>)
 800590e:	2200      	movs	r2, #0
 8005910:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 8005912:	2300      	movs	r3, #0
 8005914:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 8005918:	e00f      	b.n	800593a <Save_Data+0x5a>
		{
			Last_Pressure += Pressure[i];
 800591a:	4a6d      	ldr	r2, [pc, #436]	@ (8005ad0 <Save_Data+0x1f0>)
 800591c:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 8005920:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005924:	4b6b      	ldr	r3, [pc, #428]	@ (8005ad4 <Save_Data+0x1f4>)
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	4413      	add	r3, r2
 800592a:	b29a      	uxth	r2, r3
 800592c:	4b69      	ldr	r3, [pc, #420]	@ (8005ad4 <Save_Data+0x1f4>)
 800592e:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 8005930:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 8005934:	3301      	adds	r3, #1
 8005936:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 800593a:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 800593e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005940:	ddeb      	ble.n	800591a <Save_Data+0x3a>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 8005942:	4b64      	ldr	r3, [pc, #400]	@ (8005ad4 <Save_Data+0x1f4>)
 8005944:	881b      	ldrh	r3, [r3, #0]
 8005946:	4a64      	ldr	r2, [pc, #400]	@ (8005ad8 <Save_Data+0x1f8>)
 8005948:	fba2 2303 	umull	r2, r3, r2, r3
 800594c:	099b      	lsrs	r3, r3, #6
 800594e:	b29a      	uxth	r2, r3
 8005950:	4b60      	ldr	r3, [pc, #384]	@ (8005ad4 <Save_Data+0x1f4>)
 8005952:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[0]);
 8005954:	485e      	ldr	r0, [pc, #376]	@ (8005ad0 <Save_Data+0x1f0>)
 8005956:	f000 fb57 	bl	8006008 <Warning_Detection>
		flags.ADC_Half_Buffer = 0;
 800595a:	4a5a      	ldr	r2, [pc, #360]	@ (8005ac4 <Save_Data+0x1e4>)
 800595c:	7813      	ldrb	r3, [r2, #0]
 800595e:	f023 0302 	bic.w	r3, r3, #2
 8005962:	7013      	strb	r3, [r2, #0]
 8005964:	e03e      	b.n	80059e4 <Save_Data+0x104>
	}
	else if(flags.ADC_Full_Buffer)
 8005966:	4b57      	ldr	r3, [pc, #348]	@ (8005ac4 <Save_Data+0x1e4>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	f003 0304 	and.w	r3, r3, #4
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d037      	beq.n	80059e4 <Save_Data+0x104>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[PRESS_HALF_SAMPLES], PRESS_HALF_LEN);
 8005974:	4b54      	ldr	r3, [pc, #336]	@ (8005ac8 <Save_Data+0x1e8>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	461a      	mov	r2, r3
 800597a:	4b54      	ldr	r3, [pc, #336]	@ (8005acc <Save_Data+0x1ec>)
 800597c:	4413      	add	r3, r2
 800597e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005982:	4956      	ldr	r1, [pc, #344]	@ (8005adc <Save_Data+0x1fc>)
 8005984:	4618      	mov	r0, r3
 8005986:	f010 fc97 	bl	80162b8 <memcpy>
		Last_Pressure = 0;
 800598a:	4b52      	ldr	r3, [pc, #328]	@ (8005ad4 <Save_Data+0x1f4>)
 800598c:	2200      	movs	r2, #0
 800598e:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 8005990:	23c8      	movs	r3, #200	@ 0xc8
 8005992:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 8005996:	e00f      	b.n	80059b8 <Save_Data+0xd8>
		{
			Last_Pressure += Pressure[i];
 8005998:	4a4d      	ldr	r2, [pc, #308]	@ (8005ad0 <Save_Data+0x1f0>)
 800599a:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 800599e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80059a2:	4b4c      	ldr	r3, [pc, #304]	@ (8005ad4 <Save_Data+0x1f4>)
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	4413      	add	r3, r2
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	4b4a      	ldr	r3, [pc, #296]	@ (8005ad4 <Save_Data+0x1f4>)
 80059ac:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 80059ae:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 80059b2:	3301      	adds	r3, #1
 80059b4:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 80059b8:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 80059bc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80059c0:	dbea      	blt.n	8005998 <Save_Data+0xb8>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 80059c2:	4b44      	ldr	r3, [pc, #272]	@ (8005ad4 <Save_Data+0x1f4>)
 80059c4:	881b      	ldrh	r3, [r3, #0]
 80059c6:	4a44      	ldr	r2, [pc, #272]	@ (8005ad8 <Save_Data+0x1f8>)
 80059c8:	fba2 2303 	umull	r2, r3, r2, r3
 80059cc:	099b      	lsrs	r3, r3, #6
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	4b40      	ldr	r3, [pc, #256]	@ (8005ad4 <Save_Data+0x1f4>)
 80059d2:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[PRESS_HALF_SAMPLES]);
 80059d4:	4841      	ldr	r0, [pc, #260]	@ (8005adc <Save_Data+0x1fc>)
 80059d6:	f000 fb17 	bl	8006008 <Warning_Detection>
		flags.ADC_Full_Buffer = 0;
 80059da:	4a3a      	ldr	r2, [pc, #232]	@ (8005ac4 <Save_Data+0x1e4>)
 80059dc:	7813      	ldrb	r3, [r2, #0]
 80059de:	f023 0304 	bic.w	r3, r3, #4
 80059e2:	7013      	strb	r3, [r2, #0]
	}
	flags.ADC_Complete = 0;
 80059e4:	4a37      	ldr	r2, [pc, #220]	@ (8005ac4 <Save_Data+0x1e4>)
 80059e6:	7813      	ldrb	r3, [r2, #0]
 80059e8:	f023 0301 	bic.w	r3, r3, #1
 80059ec:	7013      	strb	r3, [r2, #0]
	Address_Offset += PRESS_HALF_LEN;
 80059ee:	4b36      	ldr	r3, [pc, #216]	@ (8005ac8 <Save_Data+0x1e8>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80059f6:	4a34      	ldr	r2, [pc, #208]	@ (8005ac8 <Save_Data+0x1e8>)
 80059f8:	6013      	str	r3, [r2, #0]

	memcpy(Saving_Buffer + Address_Offset, Volume_Period, MAX_VOLUME_LEN);
 80059fa:	4b33      	ldr	r3, [pc, #204]	@ (8005ac8 <Save_Data+0x1e8>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	461a      	mov	r2, r3
 8005a00:	4b32      	ldr	r3, [pc, #200]	@ (8005acc <Save_Data+0x1ec>)
 8005a02:	4413      	add	r3, r2
 8005a04:	2228      	movs	r2, #40	@ 0x28
 8005a06:	4936      	ldr	r1, [pc, #216]	@ (8005ae0 <Save_Data+0x200>)
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f010 fc55 	bl	80162b8 <memcpy>
	uint8_t current_period_cnt = Period_cnt;
 8005a0e:	4b35      	ldr	r3, [pc, #212]	@ (8005ae4 <Save_Data+0x204>)
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
	Last_Volume = 0;
 8005a16:	4b34      	ldr	r3, [pc, #208]	@ (8005ae8 <Save_Data+0x208>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < current_period_cnt; i++)
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8005a22:	e00e      	b.n	8005a42 <Save_Data+0x162>
	{
		Last_Volume += Volume_Period[i];
 8005a24:	4a2e      	ldr	r2, [pc, #184]	@ (8005ae0 <Save_Data+0x200>)
 8005a26:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8005a2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005a2e:	4b2e      	ldr	r3, [pc, #184]	@ (8005ae8 <Save_Data+0x208>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4413      	add	r3, r2
 8005a34:	4a2c      	ldr	r2, [pc, #176]	@ (8005ae8 <Save_Data+0x208>)
 8005a36:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < current_period_cnt; i++)
 8005a38:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8005a42:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 8005a46:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	@ 0x4cc
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	dbea      	blt.n	8005a24 <Save_Data+0x144>
	}
	Last_Volume = (uint32_t)(Last_Volume / current_period_cnt);
 8005a4e:	4b26      	ldr	r3, [pc, #152]	@ (8005ae8 <Save_Data+0x208>)
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 8005a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5a:	4a23      	ldr	r2, [pc, #140]	@ (8005ae8 <Save_Data+0x208>)
 8005a5c:	6013      	str	r3, [r2, #0]
	memset(Volume_Period, 0, sizeof(Volume_Period));
 8005a5e:	2228      	movs	r2, #40	@ 0x28
 8005a60:	2100      	movs	r1, #0
 8005a62:	481f      	ldr	r0, [pc, #124]	@ (8005ae0 <Save_Data+0x200>)
 8005a64:	f010 fba4 	bl	80161b0 <memset>
	Period_cnt = 0;
 8005a68:	4b1e      	ldr	r3, [pc, #120]	@ (8005ae4 <Save_Data+0x204>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	701a      	strb	r2, [r3, #0]
	Address_Offset += MAX_VOLUME_LEN;
 8005a6e:	4b16      	ldr	r3, [pc, #88]	@ (8005ac8 <Save_Data+0x1e8>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	3328      	adds	r3, #40	@ 0x28
 8005a74:	4a14      	ldr	r2, [pc, #80]	@ (8005ac8 <Save_Data+0x1e8>)
 8005a76:	6013      	str	r3, [r2, #0]

	if(sys.ACC_Present)
 8005a78:	4b1c      	ldr	r3, [pc, #112]	@ (8005aec <Save_Data+0x20c>)
 8005a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a7e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 80a4 	beq.w	8005bd6 <Save_Data+0x2f6>
	{
		memcpy(Saving_Buffer + Address_Offset, Acceleration, ACCELERATION_LEN);
 8005a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ac8 <Save_Data+0x1e8>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	461a      	mov	r2, r3
 8005a94:	4b0d      	ldr	r3, [pc, #52]	@ (8005acc <Save_Data+0x1ec>)
 8005a96:	4413      	add	r3, r2
 8005a98:	4a15      	ldr	r2, [pc, #84]	@ (8005af0 <Save_Data+0x210>)
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f010 fc08 	bl	80162b8 <memcpy>
		Last_Acceleration.x = 0;
 8005aa8:	4b12      	ldr	r3, [pc, #72]	@ (8005af4 <Save_Data+0x214>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = 0;
 8005aae:	4b11      	ldr	r3, [pc, #68]	@ (8005af4 <Save_Data+0x214>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = 0;
 8005ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8005af4 <Save_Data+0x214>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 8005aba:	2300      	movs	r3, #0
 8005abc:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 8005ac0:	e064      	b.n	8005b8c <Save_Data+0x2ac>
 8005ac2:	bf00      	nop
 8005ac4:	200019e8 	.word	0x200019e8
 8005ac8:	20004bc0 	.word	0x20004bc0
 8005acc:	20004490 	.word	0x20004490
 8005ad0:	20003b58 	.word	0x20003b58
 8005ad4:	20004418 	.word	0x20004418
 8005ad8:	51eb851f 	.word	0x51eb851f
 8005adc:	20003ce8 	.word	0x20003ce8
 8005ae0:	20003e78 	.word	0x20003e78
 8005ae4:	20003b54 	.word	0x20003b54
 8005ae8:	2000441c 	.word	0x2000441c
 8005aec:	20000840 	.word	0x20000840
 8005af0:	20003ea0 	.word	0x20003ea0
 8005af4:	20004420 	.word	0x20004420
		{
			Last_Acceleration.x += Acceleration[i+1] | (Acceleration[i+2] << 8); 
 8005af8:	4b85      	ldr	r3, [pc, #532]	@ (8005d10 <Save_Data+0x430>)
 8005afa:	885a      	ldrh	r2, [r3, #2]
 8005afc:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005b00:	3301      	adds	r3, #1
 8005b02:	4984      	ldr	r1, [pc, #528]	@ (8005d14 <Save_Data+0x434>)
 8005b04:	5ccb      	ldrb	r3, [r1, r3]
 8005b06:	b219      	sxth	r1, r3
 8005b08:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	4881      	ldr	r0, [pc, #516]	@ (8005d14 <Save_Data+0x434>)
 8005b10:	5cc3      	ldrb	r3, [r0, r3]
 8005b12:	b21b      	sxth	r3, r3
 8005b14:	021b      	lsls	r3, r3, #8
 8005b16:	b21b      	sxth	r3, r3
 8005b18:	430b      	orrs	r3, r1
 8005b1a:	b21b      	sxth	r3, r3
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	4413      	add	r3, r2
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	4b7b      	ldr	r3, [pc, #492]	@ (8005d10 <Save_Data+0x430>)
 8005b24:	805a      	strh	r2, [r3, #2]
			Last_Acceleration.y += Acceleration[i+3] | (Acceleration[i+4] << 8); 
 8005b26:	4b7a      	ldr	r3, [pc, #488]	@ (8005d10 <Save_Data+0x430>)
 8005b28:	889a      	ldrh	r2, [r3, #4]
 8005b2a:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005b2e:	3303      	adds	r3, #3
 8005b30:	4978      	ldr	r1, [pc, #480]	@ (8005d14 <Save_Data+0x434>)
 8005b32:	5ccb      	ldrb	r3, [r1, r3]
 8005b34:	b219      	sxth	r1, r3
 8005b36:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	4875      	ldr	r0, [pc, #468]	@ (8005d14 <Save_Data+0x434>)
 8005b3e:	5cc3      	ldrb	r3, [r0, r3]
 8005b40:	b21b      	sxth	r3, r3
 8005b42:	021b      	lsls	r3, r3, #8
 8005b44:	b21b      	sxth	r3, r3
 8005b46:	430b      	orrs	r3, r1
 8005b48:	b21b      	sxth	r3, r3
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	4413      	add	r3, r2
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	4b6f      	ldr	r3, [pc, #444]	@ (8005d10 <Save_Data+0x430>)
 8005b52:	809a      	strh	r2, [r3, #4]
			Last_Acceleration.z += Acceleration[i+5] | (Acceleration[i+6] << 8); 
 8005b54:	4b6e      	ldr	r3, [pc, #440]	@ (8005d10 <Save_Data+0x430>)
 8005b56:	88da      	ldrh	r2, [r3, #6]
 8005b58:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005b5c:	3305      	adds	r3, #5
 8005b5e:	496d      	ldr	r1, [pc, #436]	@ (8005d14 <Save_Data+0x434>)
 8005b60:	5ccb      	ldrb	r3, [r1, r3]
 8005b62:	b219      	sxth	r1, r3
 8005b64:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005b68:	3306      	adds	r3, #6
 8005b6a:	486a      	ldr	r0, [pc, #424]	@ (8005d14 <Save_Data+0x434>)
 8005b6c:	5cc3      	ldrb	r3, [r0, r3]
 8005b6e:	b21b      	sxth	r3, r3
 8005b70:	021b      	lsls	r3, r3, #8
 8005b72:	b21b      	sxth	r3, r3
 8005b74:	430b      	orrs	r3, r1
 8005b76:	b21b      	sxth	r3, r3
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	4413      	add	r3, r2
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	4b64      	ldr	r3, [pc, #400]	@ (8005d10 <Save_Data+0x430>)
 8005b80:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 8005b82:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005b86:	3307      	adds	r3, #7
 8005b88:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 8005b8c:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005b90:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 8005b94:	dbb0      	blt.n	8005af8 <Save_Data+0x218>
		}
		Last_Acceleration.x = (uint16_t)(Last_Acceleration.x / (ACCELERATION_LEN / 7));
 8005b96:	4b5e      	ldr	r3, [pc, #376]	@ (8005d10 <Save_Data+0x430>)
 8005b98:	885b      	ldrh	r3, [r3, #2]
 8005b9a:	4a5f      	ldr	r2, [pc, #380]	@ (8005d18 <Save_Data+0x438>)
 8005b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba0:	099b      	lsrs	r3, r3, #6
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	4b5a      	ldr	r3, [pc, #360]	@ (8005d10 <Save_Data+0x430>)
 8005ba6:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = (uint16_t)(Last_Acceleration.y / (ACCELERATION_LEN / 7));
 8005ba8:	4b59      	ldr	r3, [pc, #356]	@ (8005d10 <Save_Data+0x430>)
 8005baa:	889b      	ldrh	r3, [r3, #4]
 8005bac:	4a5a      	ldr	r2, [pc, #360]	@ (8005d18 <Save_Data+0x438>)
 8005bae:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb2:	099b      	lsrs	r3, r3, #6
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	4b56      	ldr	r3, [pc, #344]	@ (8005d10 <Save_Data+0x430>)
 8005bb8:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = (uint16_t)(Last_Acceleration.z / (ACCELERATION_LEN / 7));
 8005bba:	4b55      	ldr	r3, [pc, #340]	@ (8005d10 <Save_Data+0x430>)
 8005bbc:	88db      	ldrh	r3, [r3, #6]
 8005bbe:	4a56      	ldr	r2, [pc, #344]	@ (8005d18 <Save_Data+0x438>)
 8005bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc4:	099b      	lsrs	r3, r3, #6
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	4b51      	ldr	r3, [pc, #324]	@ (8005d10 <Save_Data+0x430>)
 8005bca:	80da      	strh	r2, [r3, #6]
		flags.ACC_Complete = 0;
 8005bcc:	4a53      	ldr	r2, [pc, #332]	@ (8005d1c <Save_Data+0x43c>)
 8005bce:	7813      	ldrb	r3, [r2, #0]
 8005bd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bd4:	7013      	strb	r3, [r2, #0]
	}
	Address_Offset += ACCELERATION_LEN;
 8005bd6:	4b52      	ldr	r3, [pc, #328]	@ (8005d20 <Save_Data+0x440>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 8005bde:	4a50      	ldr	r2, [pc, #320]	@ (8005d20 <Save_Data+0x440>)
 8005be0:	6013      	str	r3, [r2, #0]

	INA3221_Read_Measure(&Supply);
 8005be2:	4850      	ldr	r0, [pc, #320]	@ (8005d24 <Save_Data+0x444>)
 8005be4:	f7fb fa20 	bl	8001028 <INA3221_Read_Measure>
	uint16_t new_temp = 0;
 8005be8:	2300      	movs	r3, #0
 8005bea:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4
	if((new_temp = Read_Temperature()) != 0)
 8005bee:	f7fb f9bb 	bl	8000f68 <Read_Temperature>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4
 8005bf8:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <Save_Data+0x328>
	{
		Temperature = new_temp;
 8005c00:	4a49      	ldr	r2, [pc, #292]	@ (8005d28 <Save_Data+0x448>)
 8005c02:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8005c06:	8013      	strh	r3, [r2, #0]
	}
	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 8005c08:	4948      	ldr	r1, [pc, #288]	@ (8005d2c <Save_Data+0x44c>)
 8005c0a:	203b      	movs	r0, #59	@ 0x3b
 8005c0c:	f7fc fd5c 	bl	80026c8 <BC_MultiRead_Reg>

	uint8_t compressed_data[MAX_COMPRESSED_SIZE];
	Compressed_Sample_Typedef sample;
    sample.compressed_size = Compress_Sample(Saving_Buffer, SAVING_BUFFER_LEN, compressed_data);
 8005c10:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8005c14:	f2a3 44cc 	subw	r4, r3, #1228	@ 0x4cc
 8005c18:	4638      	mov	r0, r7
 8005c1a:	f107 0314 	add.w	r3, r7, #20
 8005c1e:	f44f 62e6 	mov.w	r2, #1840	@ 0x730
 8005c22:	4943      	ldr	r1, [pc, #268]	@ (8005d30 <Save_Data+0x450>)
 8005c24:	f000 fbe4 	bl	80063f0 <Compress_Sample>
 8005c28:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8005c2c:	f5a3 629b 	sub.w	r2, r3, #1240	@ 0x4d8
 8005c30:	4623      	mov	r3, r4
 8005c32:	6810      	ldr	r0, [r2, #0]
 8005c34:	6018      	str	r0, [r3, #0]
 8005c36:	8892      	ldrh	r2, [r2, #4]
 8005c38:	809a      	strh	r2, [r3, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c3a:	b672      	cpsid	i
}
 8005c3c:	bf00      	nop

	__disable_irq();
	RAM_Save_Measure(&sample, compressed_data);
 8005c3e:	f107 0214 	add.w	r2, r7, #20
 8005c42:	f107 030c 	add.w	r3, r7, #12
 8005c46:	4611      	mov	r1, r2
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fa41 	bl	80060d0 <RAM_Save_Measure>
  __ASM volatile ("cpsie i" : : : "memory");
 8005c4e:	b662      	cpsie	i
}
 8005c50:	bf00      	nop
	__enable_irq();

	Address_Offset = 0;
 8005c52:	4b33      	ldr	r3, [pc, #204]	@ (8005d20 <Save_Data+0x440>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]

	if(flags.Hammer_Detected || flags.Threshold_Detected)
 8005c58:	4b30      	ldr	r3, [pc, #192]	@ (8005d1c <Save_Data+0x43c>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	f003 0308 	and.w	r3, r3, #8
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d106      	bne.n	8005c74 <Save_Data+0x394>
 8005c66:	4b2d      	ldr	r3, [pc, #180]	@ (8005d1c <Save_Data+0x43c>)
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	f003 0310 	and.w	r3, r3, #16
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d048      	beq.n	8005d06 <Save_Data+0x426>
	{
		Cycles_After_Warning++;
 8005c74:	4b2f      	ldr	r3, [pc, #188]	@ (8005d34 <Save_Data+0x454>)
 8005c76:	881b      	ldrh	r3, [r3, #0]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8005d34 <Save_Data+0x454>)
 8005c7e:	801a      	strh	r2, [r3, #0]
		if(Cycles_After_Warning >= config.buffering_secs * (config.samp_freq / ACC_FIFO_WATERMARK))
 8005c80:	4b2c      	ldr	r3, [pc, #176]	@ (8005d34 <Save_Data+0x454>)
 8005c82:	881b      	ldrh	r3, [r3, #0]
 8005c84:	4619      	mov	r1, r3
 8005c86:	4b2c      	ldr	r3, [pc, #176]	@ (8005d38 <Save_Data+0x458>)
 8005c88:	791b      	ldrb	r3, [r3, #4]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8005d38 <Save_Data+0x458>)
 8005c8e:	885b      	ldrh	r3, [r3, #2]
 8005c90:	4a21      	ldr	r2, [pc, #132]	@ (8005d18 <Save_Data+0x438>)
 8005c92:	fba2 2303 	umull	r2, r3, r2, r3
 8005c96:	099b      	lsrs	r3, r3, #6
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	fb00 f303 	mul.w	r3, r0, r3
 8005c9e:	4299      	cmp	r1, r3
 8005ca0:	db31      	blt.n	8005d06 <Save_Data+0x426>
		{
			if(!flags.CMD.Measure_Request)
 8005ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8005d1c <Save_Data+0x43c>)
 8005ca4:	789b      	ldrb	r3, [r3, #2]
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d12a      	bne.n	8005d06 <Save_Data+0x426>
			{
				LED_Start(RED_LED, FAST, LOW);
 8005cb0:	2207      	movs	r2, #7
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	2004      	movs	r0, #4
 8005cb6:	f7fd fd2f 	bl	8003718 <LED_Start>
				Switch_Buffer();
 8005cba:	f000 f843 	bl	8005d44 <Switch_Buffer>
				flags.CMD.Measure_Request = 1;
 8005cbe:	4a17      	ldr	r2, [pc, #92]	@ (8005d1c <Save_Data+0x43c>)
 8005cc0:	7893      	ldrb	r3, [r2, #2]
 8005cc2:	f043 0302 	orr.w	r3, r3, #2
 8005cc6:	7093      	strb	r3, [r2, #2]
				Send_Measure_Addr = Saved_Bytes;
 8005cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8005d3c <Save_Data+0x45c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8005d40 <Save_Data+0x460>)
 8005cce:	6013      	str	r3, [r2, #0]
				Cycles_After_Warning = 0;
 8005cd0:	4b18      	ldr	r3, [pc, #96]	@ (8005d34 <Save_Data+0x454>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	801a      	strh	r2, [r3, #0]
				if(flags.Hammer_Detected)
 8005cd6:	4b11      	ldr	r3, [pc, #68]	@ (8005d1c <Save_Data+0x43c>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	f003 0308 	and.w	r3, r3, #8
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d004      	beq.n	8005cee <Save_Data+0x40e>
				{
					flags.Hammer_Detected = 0;
 8005ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8005d1c <Save_Data+0x43c>)
 8005ce6:	7813      	ldrb	r3, [r2, #0]
 8005ce8:	f023 0308 	bic.w	r3, r3, #8
 8005cec:	7013      	strb	r3, [r2, #0]
				}
				if(flags.Threshold_Detected)
 8005cee:	4b0b      	ldr	r3, [pc, #44]	@ (8005d1c <Save_Data+0x43c>)
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	f003 0310 	and.w	r3, r3, #16
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d004      	beq.n	8005d06 <Save_Data+0x426>
				{
					flags.Threshold_Detected = 0;
 8005cfc:	4a07      	ldr	r2, [pc, #28]	@ (8005d1c <Save_Data+0x43c>)
 8005cfe:	7813      	ldrb	r3, [r2, #0]
 8005d00:	f023 0310 	bic.w	r3, r3, #16
 8005d04:	7013      	strb	r3, [r2, #0]
				}
			}
		}
	}

}
 8005d06:	bf00      	nop
 8005d08:	f207 47dc 	addw	r7, r7, #1244	@ 0x4dc
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd90      	pop	{r4, r7, pc}
 8005d10:	20004420 	.word	0x20004420
 8005d14:	20003ea0 	.word	0x20003ea0
 8005d18:	51eb851f 	.word	0x51eb851f
 8005d1c:	200019e8 	.word	0x200019e8
 8005d20:	20004bc0 	.word	0x20004bc0
 8005d24:	20003b48 	.word	0x20003b48
 8005d28:	20004428 	.word	0x20004428
 8005d2c:	2000442a 	.word	0x2000442a
 8005d30:	20004490 	.word	0x20004490
 8005d34:	20004bc4 	.word	0x20004bc4
 8005d38:	200019ec 	.word	0x200019ec
 8005d3c:	20004bc8 	.word	0x20004bc8
 8005d40:	20004bd0 	.word	0x20004bd0

08005d44 <Switch_Buffer>:

/*-----CAMBIO BUFFER-----*/
void Switch_Buffer(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
    sys.Inactive_RAM_Len = sys.Current_RAM_Len;
 8005d48:	4b23      	ldr	r3, [pc, #140]	@ (8005dd8 <Switch_Buffer+0x94>)
 8005d4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d4e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005d52:	4a21      	ldr	r2, [pc, #132]	@ (8005dd8 <Switch_Buffer+0x94>)
 8005d54:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005d58:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

    if (sys.Active_RAM_Buffer == 0) 
 8005d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8005dd8 <Switch_Buffer+0x94>)
 8005d5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d62:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d116      	bne.n	8005d98 <Switch_Buffer+0x54>
	{
		sys.RAM_Buffer_Base_tosend = RAM_SECOND_BUFFER_ADD;
 8005d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8005dd8 <Switch_Buffer+0x94>)
 8005d6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d70:	461a      	mov	r2, r3
 8005d72:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005d76:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
        sys.Active_RAM_Buffer = 1;
 8005d7a:	4b17      	ldr	r3, [pc, #92]	@ (8005dd8 <Switch_Buffer+0x94>)
 8005d7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        sys.Current_RAM_Base = RAM_SECOND_BUFFER_ADD;
 8005d86:	4b14      	ldr	r3, [pc, #80]	@ (8005dd8 <Switch_Buffer+0x94>)
 8005d88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005d92:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
 8005d96:	e013      	b.n	8005dc0 <Switch_Buffer+0x7c>
    } 
	else 
	{
		sys.RAM_Buffer_Base_tosend = RAM_FIRST_BUFFER_ADD;
 8005d98:	4b0f      	ldr	r3, [pc, #60]	@ (8005dd8 <Switch_Buffer+0x94>)
 8005d9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d9e:	461a      	mov	r2, r3
 8005da0:	2300      	movs	r3, #0
 8005da2:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
        sys.Active_RAM_Buffer = 0;
 8005da6:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd8 <Switch_Buffer+0x94>)
 8005da8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        sys.Current_RAM_Base = RAM_FIRST_BUFFER_ADD;
 8005db2:	4b09      	ldr	r3, [pc, #36]	@ (8005dd8 <Switch_Buffer+0x94>)
 8005db4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005db8:	461a      	mov	r2, r3
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
    }

    sys.Current_RAM_Len = 0;
 8005dc0:	4b05      	ldr	r3, [pc, #20]	@ (8005dd8 <Switch_Buffer+0x94>)
 8005dc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	2300      	movs	r3, #0
 8005dca:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8005dce:	bf00      	nop
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	20000840 	.word	0x20000840

08005ddc <Erase_RAM_Data>:

/*-----CANCELLAZIONE DATI RAM-----*/
void Erase_RAM_Data(void)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8005de2:	af00      	add	r7, sp, #0
	uint8_t zero_buffer[1024] = {0};
 8005de4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8005de8:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8005dec:	4618      	mov	r0, r3
 8005dee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005df2:	461a      	mov	r2, r3
 8005df4:	2100      	movs	r1, #0
 8005df6:	f010 f9db 	bl	80161b0 <memset>
	for (uint32_t addr = 0; addr < 0x800000; addr += sizeof(zero_buffer)) 
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8005e00:	e00d      	b.n	8005e1e <Erase_RAM_Data+0x42>
	{
		RAM_Write(addr, sizeof(zero_buffer), zero_buffer);
 8005e02:	1d3b      	adds	r3, r7, #4
 8005e04:	461a      	mov	r2, r3
 8005e06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005e0a:	f8d7 0404 	ldr.w	r0, [r7, #1028]	@ 0x404
 8005e0e:	f001 fa69 	bl	80072e4 <RAM_Write>
	for (uint32_t addr = 0; addr < 0x800000; addr += sizeof(zero_buffer)) 
 8005e12:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8005e16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e1a:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8005e1e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8005e22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e26:	d3ec      	bcc.n	8005e02 <Erase_RAM_Data+0x26>
	}
}
 8005e28:	bf00      	nop
 8005e2a:	bf00      	nop
 8005e2c:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <Start_Measure>:


/*-----AVVIO MISURA-----*/
void Start_Measure(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
	Erase_RAM_Data();
 8005e38:	f7ff ffd0 	bl	8005ddc <Erase_RAM_Data>
	sys.RAM_Samples_Number = (config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * 2;
 8005e3c:	4b50      	ldr	r3, [pc, #320]	@ (8005f80 <Start_Measure+0x14c>)
 8005e3e:	885b      	ldrh	r3, [r3, #2]
 8005e40:	4a50      	ldr	r2, [pc, #320]	@ (8005f84 <Start_Measure+0x150>)
 8005e42:	fba2 2303 	umull	r2, r3, r2, r3
 8005e46:	099b      	lsrs	r3, r3, #6
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	4b4c      	ldr	r3, [pc, #304]	@ (8005f80 <Start_Measure+0x14c>)
 8005e4e:	791b      	ldrb	r3, [r3, #4]
 8005e50:	fb02 f303 	mul.w	r3, r2, r3
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	461a      	mov	r2, r3
 8005e58:	4b4b      	ldr	r3, [pc, #300]	@ (8005f88 <Start_Measure+0x154>)
 8005e5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e5e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	sys.Active_RAM_Buffer = 0;
 8005e62:	4b49      	ldr	r3, [pc, #292]	@ (8005f88 <Start_Measure+0x154>)
 8005e64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
	sys.Inactive_RAM_Len = 0;
 8005e6e:	4b46      	ldr	r3, [pc, #280]	@ (8005f88 <Start_Measure+0x154>)
 8005e70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e74:	461a      	mov	r2, r3
 8005e76:	2300      	movs	r3, #0
 8005e78:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
	sys.Current_RAM_Base = RAM_FIRST_BUFFER_ADD;
 8005e7c:	4b42      	ldr	r3, [pc, #264]	@ (8005f88 <Start_Measure+0x154>)
 8005e7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e82:	461a      	mov	r2, r3
 8005e84:	2300      	movs	r3, #0
 8005e86:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
	sys.Current_RAM_Len = 0;
 8005e8a:	4b3f      	ldr	r3, [pc, #252]	@ (8005f88 <Start_Measure+0x154>)
 8005e8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e90:	461a      	mov	r2, r3
 8005e92:	2300      	movs	r3, #0
 8005e94:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
	flags.SIM_isConnected = 1;
 8005e98:	4a3c      	ldr	r2, [pc, #240]	@ (8005f8c <Start_Measure+0x158>)
 8005e9a:	7853      	ldrb	r3, [r2, #1]
 8005e9c:	f043 0310 	orr.w	r3, r3, #16
 8005ea0:	7053      	strb	r3, [r2, #1]
	memset(Pressure, 0, sizeof(Pressure));
 8005ea2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	4839      	ldr	r0, [pc, #228]	@ (8005f90 <Start_Measure+0x15c>)
 8005eaa:	f010 f981 	bl	80161b0 <memset>
	memset(Volume_Period, 0, sizeof(Volume_Period));
 8005eae:	2228      	movs	r2, #40	@ 0x28
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	4838      	ldr	r0, [pc, #224]	@ (8005f94 <Start_Measure+0x160>)
 8005eb4:	f010 f97c 	bl	80161b0 <memset>
	memset(Acceleration, 0, sizeof(Acceleration));
 8005eb8:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	4836      	ldr	r0, [pc, #216]	@ (8005f98 <Start_Measure+0x164>)
 8005ec0:	f010 f976 	bl	80161b0 <memset>
	memset(&Supply, 0, sizeof(Supply));
 8005ec4:	220c      	movs	r2, #12
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	4834      	ldr	r0, [pc, #208]	@ (8005f9c <Start_Measure+0x168>)
 8005eca:	f010 f971 	bl	80161b0 <memset>
	Temperature = 0;
 8005ece:	4b34      	ldr	r3, [pc, #208]	@ (8005fa0 <Start_Measure+0x16c>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	801a      	strh	r2, [r3, #0]
	Saved_Bytes = 0;
 8005ed4:	4b33      	ldr	r3, [pc, #204]	@ (8005fa4 <Start_Measure+0x170>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	601a      	str	r2, [r3, #0]
	Saved_Samples = 0;
 8005eda:	4b33      	ldr	r3, [pc, #204]	@ (8005fa8 <Start_Measure+0x174>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	801a      	strh	r2, [r3, #0]
	Address_Offset = 0;
 8005ee0:	4b32      	ldr	r3, [pc, #200]	@ (8005fac <Start_Measure+0x178>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]
	Cycles_After_Warning = 0;
 8005ee6:	4b32      	ldr	r3, [pc, #200]	@ (8005fb0 <Start_Measure+0x17c>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	801a      	strh	r2, [r3, #0]
	Clear_Flags();
 8005eec:	f000 ffa6 	bl	8006e3c <Clear_Flags>

	ADC_TIMER->Instance->PSC = 100 - 1;
 8005ef0:	4b30      	ldr	r3, [pc, #192]	@ (8005fb4 <Start_Measure+0x180>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2263      	movs	r2, #99	@ 0x63
 8005ef6:	629a      	str	r2, [r3, #40]	@ 0x28
	ADC_TIMER->Instance->ARR = (uint32_t)(SystemCoreClock / (ADC_TIMER->Instance->PSC * config.samp_freq)) - 1;
 8005ef8:	4b2f      	ldr	r3, [pc, #188]	@ (8005fb8 <Start_Measure+0x184>)
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	4b2d      	ldr	r3, [pc, #180]	@ (8005fb4 <Start_Measure+0x180>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f02:	491f      	ldr	r1, [pc, #124]	@ (8005f80 <Start_Measure+0x14c>)
 8005f04:	8849      	ldrh	r1, [r1, #2]
 8005f06:	fb01 f303 	mul.w	r3, r1, r3
 8005f0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f0e:	4b29      	ldr	r3, [pc, #164]	@ (8005fb4 <Start_Measure+0x180>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3a01      	subs	r2, #1
 8005f14:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->ARR = (uint32_t)(config.samp_freq / 25) - 1;
 8005f16:	4b1a      	ldr	r3, [pc, #104]	@ (8005f80 <Start_Measure+0x14c>)
 8005f18:	885b      	ldrh	r3, [r3, #2]
 8005f1a:	4a1a      	ldr	r2, [pc, #104]	@ (8005f84 <Start_Measure+0x150>)
 8005f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f20:	08db      	lsrs	r3, r3, #3
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	461a      	mov	r2, r3
 8005f26:	4b25      	ldr	r3, [pc, #148]	@ (8005fbc <Start_Measure+0x188>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3a01      	subs	r2, #1
 8005f2c:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->CCR3 = (uint32_t)((ACC_TIMER->Instance->ARR + 1) / 2);
 8005f2e:	4b23      	ldr	r3, [pc, #140]	@ (8005fbc <Start_Measure+0x188>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	4b21      	ldr	r3, [pc, #132]	@ (8005fbc <Start_Measure+0x188>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	0852      	lsrs	r2, r2, #1
 8005f3c:	63da      	str	r2, [r3, #60]	@ 0x3c
	if(Acc_Init(&acc, config.samp_freq) != HAL_OK)
 8005f3e:	4b10      	ldr	r3, [pc, #64]	@ (8005f80 <Start_Measure+0x14c>)
 8005f40:	885b      	ldrh	r3, [r3, #2]
 8005f42:	4619      	mov	r1, r3
 8005f44:	481e      	ldr	r0, [pc, #120]	@ (8005fc0 <Start_Measure+0x18c>)
 8005f46:	f7fd fa39 	bl	80033bc <Acc_Init>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <Start_Measure+0x124>
	{
		state = IDLE;
 8005f50:	4b1c      	ldr	r3, [pc, #112]	@ (8005fc4 <Start_Measure+0x190>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	701a      	strb	r2, [r3, #0]
		return;
 8005f56:	e011      	b.n	8005f7c <Start_Measure+0x148>
	}

	HAL_TIM_IC_Start_IT(VOLUME_TIMER, TIM_CHANNEL_1);
 8005f58:	2100      	movs	r1, #0
 8005f5a:	481b      	ldr	r0, [pc, #108]	@ (8005fc8 <Start_Measure+0x194>)
 8005f5c:	f00d f8a4 	bl	80130a8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(ACC_TIMER, TIM_CHANNEL_3);
 8005f60:	2108      	movs	r1, #8
 8005f62:	4816      	ldr	r0, [pc, #88]	@ (8005fbc <Start_Measure+0x188>)
 8005f64:	f00c feac 	bl	8012cc0 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(PRESSURE_ADC, (uint32_t*)&Pressure, PRESS_FULL_SAMPLES);
 8005f68:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005f6c:	4908      	ldr	r1, [pc, #32]	@ (8005f90 <Start_Measure+0x15c>)
 8005f6e:	4817      	ldr	r0, [pc, #92]	@ (8005fcc <Start_Measure+0x198>)
 8005f70:	f005 fbfa 	bl	800b768 <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start_IT(ADC_TIMER, TIM_CHANNEL_3);
 8005f74:	2108      	movs	r1, #8
 8005f76:	480f      	ldr	r0, [pc, #60]	@ (8005fb4 <Start_Measure+0x180>)
 8005f78:	f00c fc12 	bl	80127a0 <HAL_TIM_OC_Start_IT>
}
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	200019ec 	.word	0x200019ec
 8005f84:	51eb851f 	.word	0x51eb851f
 8005f88:	20000840 	.word	0x20000840
 8005f8c:	200019e8 	.word	0x200019e8
 8005f90:	20003b58 	.word	0x20003b58
 8005f94:	20003e78 	.word	0x20003e78
 8005f98:	20003ea0 	.word	0x20003ea0
 8005f9c:	20003b48 	.word	0x20003b48
 8005fa0:	20004428 	.word	0x20004428
 8005fa4:	20004bc8 	.word	0x20004bc8
 8005fa8:	20004bcc 	.word	0x20004bcc
 8005fac:	20004bc0 	.word	0x20004bc0
 8005fb0:	20004bc4 	.word	0x20004bc4
 8005fb4:	20000650 	.word	0x20000650
 8005fb8:	20000268 	.word	0x20000268
 8005fbc:	20000604 	.word	0x20000604
 8005fc0:	200051ec 	.word	0x200051ec
 8005fc4:	2000083c 	.word	0x2000083c
 8005fc8:	200005b8 	.word	0x200005b8
 8005fcc:	20000318 	.word	0x20000318

08005fd0 <Stop_Measure>:

/*-----FINE MISURA-----*/
void Stop_Measure(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(PRESSURE_ADC);
 8005fd4:	4808      	ldr	r0, [pc, #32]	@ (8005ff8 <Stop_Measure+0x28>)
 8005fd6:	f005 fc83 	bl	800b8e0 <HAL_ADC_Stop_DMA>
	HAL_TIM_OC_Stop_IT(ADC_TIMER, TIM_CHANNEL_3);
 8005fda:	2108      	movs	r1, #8
 8005fdc:	4807      	ldr	r0, [pc, #28]	@ (8005ffc <Stop_Measure+0x2c>)
 8005fde:	f00c fd33 	bl	8012a48 <HAL_TIM_OC_Stop_IT>
	HAL_TIM_PWM_Stop(ACC_TIMER, TIM_CHANNEL_3);
 8005fe2:	2108      	movs	r1, #8
 8005fe4:	4806      	ldr	r0, [pc, #24]	@ (8006000 <Stop_Measure+0x30>)
 8005fe6:	f00c ff71 	bl	8012ecc <HAL_TIM_PWM_Stop>
	HAL_TIM_IC_Stop_IT(VOLUME_TIMER, TIM_CHANNEL_1);
 8005fea:	2100      	movs	r1, #0
 8005fec:	4805      	ldr	r0, [pc, #20]	@ (8006004 <Stop_Measure+0x34>)
 8005fee:	f00d f9a5 	bl	801333c <HAL_TIM_IC_Stop_IT>
}
 8005ff2:	bf00      	nop
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20000318 	.word	0x20000318
 8005ffc:	20000650 	.word	0x20000650
 8006000:	20000604 	.word	0x20000604
 8006004:	200005b8 	.word	0x200005b8

08006008 <Warning_Detection>:

/*-----DETECTION COLPO D'ARIETE-----*/
void Warning_Detection(uint16_t* Data)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
	uint16_t max = Data[0];
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	81fb      	strh	r3, [r7, #14]
	uint16_t min = Data[0];
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	81bb      	strh	r3, [r7, #12]

	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 800601c:	2301      	movs	r3, #1
 800601e:	60bb      	str	r3, [r7, #8]
 8006020:	e03a      	b.n	8006098 <Warning_Detection+0x90>
	{
		if(Data[i] > max)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	4413      	add	r3, r2
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	89fa      	ldrh	r2, [r7, #14]
 800602e:	429a      	cmp	r2, r3
 8006030:	d206      	bcs.n	8006040 <Warning_Detection+0x38>
		{
			max = Data[i];
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	4413      	add	r3, r2
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	81fb      	strh	r3, [r7, #14]
 800603e:	e00d      	b.n	800605c <Warning_Detection+0x54>
		}
		else if(Data[i] < min)
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	005b      	lsls	r3, r3, #1
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	4413      	add	r3, r2
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	89ba      	ldrh	r2, [r7, #12]
 800604c:	429a      	cmp	r2, r3
 800604e:	d905      	bls.n	800605c <Warning_Detection+0x54>
		{
			min = Data[i];
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	4413      	add	r3, r2
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	81bb      	strh	r3, [r7, #12]
		}

		if(Data[i] < sys.Low_th || Data[i] > sys.High_th)
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	005b      	lsls	r3, r3, #1
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	4413      	add	r3, r2
 8006064:	881a      	ldrh	r2, [r3, #0]
 8006066:	4b17      	ldr	r3, [pc, #92]	@ (80060c4 <Warning_Detection+0xbc>)
 8006068:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800606c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800606e:	429a      	cmp	r2, r3
 8006070:	d30a      	bcc.n	8006088 <Warning_Detection+0x80>
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	4413      	add	r3, r2
 800607a:	881a      	ldrh	r2, [r3, #0]
 800607c:	4b11      	ldr	r3, [pc, #68]	@ (80060c4 <Warning_Detection+0xbc>)
 800607e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006082:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8006084:	429a      	cmp	r2, r3
 8006086:	d904      	bls.n	8006092 <Warning_Detection+0x8a>
		{
			flags.Threshold_Detected= 1;
 8006088:	4a0f      	ldr	r2, [pc, #60]	@ (80060c8 <Warning_Detection+0xc0>)
 800608a:	7813      	ldrb	r3, [r2, #0]
 800608c:	f043 0310 	orr.w	r3, r3, #16
 8006090:	7013      	strb	r3, [r2, #0]
	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	3301      	adds	r3, #1
 8006096:	60bb      	str	r3, [r7, #8]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2bc7      	cmp	r3, #199	@ 0xc7
 800609c:	ddc1      	ble.n	8006022 <Warning_Detection+0x1a>
		}
	}

	if(max - min >= Hammer_Th)
 800609e:	89fa      	ldrh	r2, [r7, #14]
 80060a0:	89bb      	ldrh	r3, [r7, #12]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	4a09      	ldr	r2, [pc, #36]	@ (80060cc <Warning_Detection+0xc4>)
 80060a6:	8812      	ldrh	r2, [r2, #0]
 80060a8:	4293      	cmp	r3, r2
 80060aa:	db04      	blt.n	80060b6 <Warning_Detection+0xae>
	{
		flags.Hammer_Detected = 1;
 80060ac:	4a06      	ldr	r2, [pc, #24]	@ (80060c8 <Warning_Detection+0xc0>)
 80060ae:	7813      	ldrb	r3, [r2, #0]
 80060b0:	f043 0308 	orr.w	r3, r3, #8
 80060b4:	7013      	strb	r3, [r2, #0]
	}

}
 80060b6:	bf00      	nop
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	20000840 	.word	0x20000840
 80060c8:	200019e8 	.word	0x200019e8
 80060cc:	20005188 	.word	0x20005188

080060d0 <RAM_Save_Measure>:

/*-----SALVATAGGIO MISURA IN RAM-----*/
void RAM_Save_Measure(Compressed_Sample_Typedef* sample, uint8_t* compressed_data)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
    uint32_t samples_size = sample->compressed_size.pressure_size +
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	461a      	mov	r2, r3
                            sample->compressed_size.volume_size +
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	885b      	ldrh	r3, [r3, #2]
 80060e6:	b29b      	uxth	r3, r3
    uint32_t samples_size = sample->compressed_size.pressure_size +
 80060e8:	4413      	add	r3, r2
                            sample->compressed_size.acceleration_size;
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	8892      	ldrh	r2, [r2, #4]
 80060ee:	b292      	uxth	r2, r2
                            sample->compressed_size.volume_size +
 80060f0:	4413      	add	r3, r2
    uint32_t samples_size = sample->compressed_size.pressure_size +
 80060f2:	613b      	str	r3, [r7, #16]
    uint32_t total_size = METADATA_SIZE + samples_size;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	3306      	adds	r3, #6
 80060f8:	60fb      	str	r3, [r7, #12]
    uint32_t address = sys.Current_RAM_Base + sys.Current_RAM_Len;
 80060fa:	4b23      	ldr	r3, [pc, #140]	@ (8006188 <RAM_Save_Measure+0xb8>)
 80060fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006100:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8006104:	4b20      	ldr	r3, [pc, #128]	@ (8006188 <RAM_Save_Measure+0xb8>)
 8006106:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800610a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800610e:	4413      	add	r3, r2
 8006110:	617b      	str	r3, [r7, #20]

	if(Saved_Samples >= sys.RAM_Samples_Number) 
 8006112:	4b1e      	ldr	r3, [pc, #120]	@ (800618c <RAM_Save_Measure+0xbc>)
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	461a      	mov	r2, r3
 8006118:	4b1b      	ldr	r3, [pc, #108]	@ (8006188 <RAM_Save_Measure+0xb8>)
 800611a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800611e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006122:	429a      	cmp	r2, r3
 8006124:	d312      	bcc.n	800614c <RAM_Save_Measure+0x7c>
	{
		sys.Current_RAM_Len = Saved_Bytes;
 8006126:	4b1a      	ldr	r3, [pc, #104]	@ (8006190 <RAM_Save_Measure+0xc0>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a17      	ldr	r2, [pc, #92]	@ (8006188 <RAM_Save_Measure+0xb8>)
 800612c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006130:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
		Saved_Bytes = 0;
 8006134:	4b16      	ldr	r3, [pc, #88]	@ (8006190 <RAM_Save_Measure+0xc0>)
 8006136:	2200      	movs	r2, #0
 8006138:	601a      	str	r2, [r3, #0]
		Saved_Samples = 0;
 800613a:	4b14      	ldr	r3, [pc, #80]	@ (800618c <RAM_Save_Measure+0xbc>)
 800613c:	2200      	movs	r2, #0
 800613e:	801a      	strh	r2, [r3, #0]
		address = sys.Current_RAM_Base;
 8006140:	4b11      	ldr	r3, [pc, #68]	@ (8006188 <RAM_Save_Measure+0xb8>)
 8006142:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006146:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800614a:	617b      	str	r3, [r7, #20]
    }

	RAM_Write(address, METADATA_SIZE, (uint8_t*)sample);
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	2106      	movs	r1, #6
 8006150:	6978      	ldr	r0, [r7, #20]
 8006152:	f001 f8c7 	bl	80072e4 <RAM_Write>
    address += METADATA_SIZE;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	3306      	adds	r3, #6
 800615a:	617b      	str	r3, [r7, #20]

	RAM_Write(address, samples_size, compressed_data);
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	6939      	ldr	r1, [r7, #16]
 8006160:	6978      	ldr	r0, [r7, #20]
 8006162:	f001 f8bf 	bl	80072e4 <RAM_Write>
    
    Saved_Bytes += total_size;
 8006166:	4b0a      	ldr	r3, [pc, #40]	@ (8006190 <RAM_Save_Measure+0xc0>)
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	4413      	add	r3, r2
 800616e:	4a08      	ldr	r2, [pc, #32]	@ (8006190 <RAM_Save_Measure+0xc0>)
 8006170:	6013      	str	r3, [r2, #0]
	Saved_Samples++;
 8006172:	4b06      	ldr	r3, [pc, #24]	@ (800618c <RAM_Save_Measure+0xbc>)
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	3301      	adds	r3, #1
 8006178:	b29a      	uxth	r2, r3
 800617a:	4b04      	ldr	r3, [pc, #16]	@ (800618c <RAM_Save_Measure+0xbc>)
 800617c:	801a      	strh	r2, [r3, #0]
}
 800617e:	bf00      	nop
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	20000840 	.word	0x20000840
 800618c:	20004bcc 	.word	0x20004bcc
 8006190:	20004bc8 	.word	0x20004bc8

08006194 <Send_Measure_Chunk>:

/*-----INVIO CHUNK MISURA-----*/
uint32_t Send_Measure_Chunk(uint32_t buffer_base, uint32_t buffer_len, uint32_t start_address)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	f5ad 6d87 	sub.w	sp, sp, #1080	@ 0x438
 800619a:	af00      	add	r7, sp, #0
 800619c:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80061a0:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 80061a4:	6018      	str	r0, [r3, #0]
 80061a6:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80061aa:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 80061ae:	6019      	str	r1, [r3, #0]
 80061b0:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80061b4:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 80061b8:	601a      	str	r2, [r3, #0]
    uint32_t raw_fill = 0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
    uint8_t raw_buffer[1024]; // buffer temporaneo per i dati raw
    uint32_t address = start_address;
 80061c0:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80061c4:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
    uint32_t end_address = start_address;
 80061ce:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80061d2:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428
    uint8_t first_loop = 1;
 80061dc:	2301      	movs	r3, #1
 80061de:	f887 342f 	strb.w	r3, [r7, #1071]	@ 0x42f

    if (buffer_len == 0) 
 80061e2:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80061e6:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <Send_Measure_Chunk+0x60>
    {
        return 0;
 80061f0:	2300      	movs	r3, #0
 80061f2:	e0f5      	b.n	80063e0 <Send_Measure_Chunk+0x24c>
    }

    do {
        if (address >= buffer_base + buffer_len) 
 80061f4:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80061f8:	f2a3 422c 	subw	r2, r3, #1068	@ 0x42c
 80061fc:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8006200:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 8006204:	6812      	ldr	r2, [r2, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4413      	add	r3, r2
 800620a:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 800620e:	429a      	cmp	r2, r3
 8006210:	d306      	bcc.n	8006220 <Send_Measure_Chunk+0x8c>
        {
            address = buffer_base;
 8006212:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8006216:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
        }

        if ((buffer_base + buffer_len - address) < METADATA_SIZE && address < buffer_base + buffer_len) 
 8006220:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8006224:	f2a3 422c 	subw	r2, r3, #1068	@ 0x42c
 8006228:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800622c:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 8006230:	6812      	ldr	r2, [r2, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	441a      	add	r2, r3
 8006236:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b05      	cmp	r3, #5
 800623e:	d80f      	bhi.n	8006260 <Send_Measure_Chunk+0xcc>
 8006240:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8006244:	f2a3 422c 	subw	r2, r3, #1068	@ 0x42c
 8006248:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800624c:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 8006250:	6812      	ldr	r2, [r2, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4413      	add	r3, r2
 8006256:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 800625a:	429a      	cmp	r2, r3
 800625c:	f0c0 8099 	bcc.w	8006392 <Send_Measure_Chunk+0x1fe>
        {
            break;
        }
        if ((raw_fill + METADATA_SIZE) > sizeof(raw_buffer)) 
 8006260:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8006264:	3306      	adds	r3, #6
 8006266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800626a:	f200 8094 	bhi.w	8006396 <Send_Measure_Chunk+0x202>
        {
            break;
        }

        Compressed_Sample_Typedef sample_header;
        RAM_Read(address, METADATA_SIZE, (uint8_t*)&sample_header);
 800626e:	f107 0314 	add.w	r3, r7, #20
 8006272:	461a      	mov	r2, r3
 8006274:	2106      	movs	r1, #6
 8006276:	f8d7 0430 	ldr.w	r0, [r7, #1072]	@ 0x430
 800627a:	f001 f844 	bl	8007306 <RAM_Read>

        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 800627e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8006282:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	461a      	mov	r2, r3
                               sample_header.compressed_size.volume_size +
 800628a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800628e:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8006292:	885b      	ldrh	r3, [r3, #2]
        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 8006294:	4413      	add	r3, r2
                               sample_header.compressed_size.acceleration_size;
 8006296:	f507 6287 	add.w	r2, r7, #1080	@ 0x438
 800629a:	f2a2 4224 	subw	r2, r2, #1060	@ 0x424
 800629e:	8892      	ldrh	r2, [r2, #4]
                               sample_header.compressed_size.volume_size +
 80062a0:	4413      	add	r3, r2
        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 80062a2:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424
        uint32_t sample_total_size = METADATA_SIZE + sample_size;
 80062a6:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 80062aa:	3306      	adds	r3, #6
 80062ac:	f8c7 3420 	str.w	r3, [r7, #1056]	@ 0x420

        if ((raw_fill + sample_total_size) > sizeof(raw_buffer)) 
 80062b0:	f8d7 2434 	ldr.w	r2, [r7, #1076]	@ 0x434
 80062b4:	f8d7 3420 	ldr.w	r3, [r7, #1056]	@ 0x420
 80062b8:	4413      	add	r3, r2
 80062ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062be:	d86c      	bhi.n	800639a <Send_Measure_Chunk+0x206>
        {
            break;
        }

        RAM_Read(address, METADATA_SIZE, raw_buffer + raw_fill);
 80062c0:	f107 021c 	add.w	r2, r7, #28
 80062c4:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80062c8:	4413      	add	r3, r2
 80062ca:	461a      	mov	r2, r3
 80062cc:	2106      	movs	r1, #6
 80062ce:	f8d7 0430 	ldr.w	r0, [r7, #1072]	@ 0x430
 80062d2:	f001 f818 	bl	8007306 <RAM_Read>
        raw_fill += METADATA_SIZE;
 80062d6:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80062da:	3306      	adds	r3, #6
 80062dc:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
        address += METADATA_SIZE;
 80062e0:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 80062e4:	3306      	adds	r3, #6
 80062e6:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
        if (address >= buffer_base + buffer_len) address = buffer_base;
 80062ea:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80062ee:	f2a3 422c 	subw	r2, r3, #1068	@ 0x42c
 80062f2:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80062f6:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 80062fa:	6812      	ldr	r2, [r2, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4413      	add	r3, r2
 8006300:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 8006304:	429a      	cmp	r2, r3
 8006306:	d306      	bcc.n	8006316 <Send_Measure_Chunk+0x182>
 8006308:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800630c:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430

        RAM_Read(address, sample_size, raw_buffer + raw_fill);
 8006316:	f107 021c 	add.w	r2, r7, #28
 800631a:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 800631e:	4413      	add	r3, r2
 8006320:	461a      	mov	r2, r3
 8006322:	f8d7 1424 	ldr.w	r1, [r7, #1060]	@ 0x424
 8006326:	f8d7 0430 	ldr.w	r0, [r7, #1072]	@ 0x430
 800632a:	f000 ffec 	bl	8007306 <RAM_Read>
        raw_fill += sample_size;
 800632e:	f8d7 2434 	ldr.w	r2, [r7, #1076]	@ 0x434
 8006332:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 8006336:	4413      	add	r3, r2
 8006338:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
        address += sample_size;
 800633c:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 8006340:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 8006344:	4413      	add	r3, r2
 8006346:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
        if (address >= buffer_base + buffer_len) address = buffer_base;
 800634a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800634e:	f2a3 422c 	subw	r2, r3, #1068	@ 0x42c
 8006352:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8006356:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800635a:	6812      	ldr	r2, [r2, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4413      	add	r3, r2
 8006360:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 8006364:	429a      	cmp	r2, r3
 8006366:	d306      	bcc.n	8006376 <Send_Measure_Chunk+0x1e2>
 8006368:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800636c:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430

        if (address == end_address && !first_loop) 
 8006376:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 800637a:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 800637e:	429a      	cmp	r2, r3
 8006380:	d103      	bne.n	800638a <Send_Measure_Chunk+0x1f6>
 8006382:	f897 342f 	ldrb.w	r3, [r7, #1071]	@ 0x42f
 8006386:	2b00      	cmp	r3, #0
 8006388:	d009      	beq.n	800639e <Send_Measure_Chunk+0x20a>
        {
            break;
        }
        first_loop = 0;
 800638a:	2300      	movs	r3, #0
 800638c:	f887 342f 	strb.w	r3, [r7, #1071]	@ 0x42f
    do {
 8006390:	e730      	b.n	80061f4 <Send_Measure_Chunk+0x60>
            break;
 8006392:	bf00      	nop
 8006394:	e004      	b.n	80063a0 <Send_Measure_Chunk+0x20c>
            break;
 8006396:	bf00      	nop
 8006398:	e002      	b.n	80063a0 <Send_Measure_Chunk+0x20c>
            break;
 800639a:	bf00      	nop
 800639c:	e000      	b.n	80063a0 <Send_Measure_Chunk+0x20c>
            break;
 800639e:	bf00      	nop
    } while (1);

    if (raw_fill > 0) 
 80063a0:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d010      	beq.n	80063ca <Send_Measure_Chunk+0x236>
    {
        // Codifica in base64
        size_t b64_len = Base64_Encode(raw_buffer, raw_fill, (char*)tcp_chunk, sizeof(tcp_chunk));
 80063a8:	f107 001c 	add.w	r0, r7, #28
 80063ac:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 80063b0:	4a0e      	ldr	r2, [pc, #56]	@ (80063ec <Send_Measure_Chunk+0x258>)
 80063b2:	f8d7 1434 	ldr.w	r1, [r7, #1076]	@ 0x434
 80063b6:	f7fc f841 	bl	800243c <Base64_Encode>
 80063ba:	f8c7 041c 	str.w	r0, [r7, #1052]	@ 0x41c
        SIM_Send_TCP_Chunk_DMA(b64_len);
 80063be:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7fb fe19 	bl	8001ffc <SIM_Send_TCP_Chunk_DMA>
    }

    if (address == end_address) 
 80063ca:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 80063ce:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d102      	bne.n	80063dc <Send_Measure_Chunk+0x248>
    {
        return (uint32_t)-1;
 80063d6:	f04f 33ff 	mov.w	r3, #4294967295
 80063da:	e001      	b.n	80063e0 <Send_Measure_Chunk+0x24c>
    }
    return address;
 80063dc:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	f507 6787 	add.w	r7, r7, #1080	@ 0x438
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20004bd4 	.word	0x20004bd4

080063f0 <Compress_Sample>:

/*-----COMPRESSIONE DATI-----*/
Compressed_Sizes_Typedef Compress_Sample(uint8_t *input, uint16_t input_len, uint8_t *output)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b09a      	sub	sp, #104	@ 0x68
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	603b      	str	r3, [r7, #0]
 80063fc:	4613      	mov	r3, r2
 80063fe:	80fb      	strh	r3, [r7, #6]
	uint16_t out_idx = 0;
 8006400:	2300      	movs	r3, #0
 8006402:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	uint8_t packed_byte = 0;
 8006406:	2300      	movs	r3, #0
 8006408:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	Compressed_Sizes_Typedef sizes = {0, 0, 0};
 800640c:	2300      	movs	r3, #0
 800640e:	843b      	strh	r3, [r7, #32]
 8006410:	2300      	movs	r3, #0
 8006412:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006414:	2300      	movs	r3, #0
 8006416:	84bb      	strh	r3, [r7, #36]	@ 0x24

    AdpcmState_Typedef press_state = {0, 0};
 8006418:	2300      	movs	r3, #0
 800641a:	83bb      	strh	r3, [r7, #28]
 800641c:	2300      	movs	r3, #0
 800641e:	77bb      	strb	r3, [r7, #30]
    AdpcmState_Typedef acc_x_state = {0, 0}, acc_y_state = {0, 0}, acc_z_state = {0, 0};
 8006420:	2300      	movs	r3, #0
 8006422:	833b      	strh	r3, [r7, #24]
 8006424:	2300      	movs	r3, #0
 8006426:	76bb      	strb	r3, [r7, #26]
 8006428:	2300      	movs	r3, #0
 800642a:	82bb      	strh	r3, [r7, #20]
 800642c:	2300      	movs	r3, #0
 800642e:	75bb      	strb	r3, [r7, #22]
 8006430:	2300      	movs	r3, #0
 8006432:	823b      	strh	r3, [r7, #16]
 8006434:	2300      	movs	r3, #0
 8006436:	74bb      	strb	r3, [r7, #18]

	// --- 1. Pressione ---
	uint16_t *adc = (uint16_t*)input;
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint16_t pressure_start = out_idx;
 800643c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006440:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	output[out_idx++] = adc[0] & 0xFF;
 8006444:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006446:	881a      	ldrh	r2, [r3, #0]
 8006448:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800644c:	1c59      	adds	r1, r3, #1
 800644e:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006452:	4619      	mov	r1, r3
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	440b      	add	r3, r1
 8006458:	b2d2      	uxtb	r2, r2
 800645a:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = adc[0] >> 8;
 800645c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800645e:	881b      	ldrh	r3, [r3, #0]
 8006460:	0a1b      	lsrs	r3, r3, #8
 8006462:	b29a      	uxth	r2, r3
 8006464:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006468:	1c59      	adds	r1, r3, #1
 800646a:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800646e:	4619      	mov	r1, r3
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	440b      	add	r3, r1
 8006474:	b2d2      	uxtb	r2, r2
 8006476:	701a      	strb	r2, [r3, #0]
	press_state.previous_value = adc[0];
 8006478:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	b21b      	sxth	r3, r3
 800647e:	83bb      	strh	r3, [r7, #28]
	for (int i = 1; i < PRESS_HALF_SAMPLES; i++) 
 8006480:	2301      	movs	r3, #1
 8006482:	663b      	str	r3, [r7, #96]	@ 0x60
 8006484:	e033      	b.n	80064ee <Compress_Sample+0xfe>
	{
		uint8_t nibble = ADPCM_Compression(adc[i], &press_state, step_size_table_12bit);
 8006486:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800648c:	4413      	add	r3, r2
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	b21b      	sxth	r3, r3
 8006492:	f107 011c 	add.w	r1, r7, #28
 8006496:	4a99      	ldr	r2, [pc, #612]	@ (80066fc <Compress_Sample+0x30c>)
 8006498:	4618      	mov	r0, r3
 800649a:	f000 f9cf 	bl	800683c <ADPCM_Compression>
 800649e:	4603      	mov	r3, r0
 80064a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (i % 2 != 0) 
 80064a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d004      	beq.n	80064b8 <Compress_Sample+0xc8>
		{
			packed_byte = nibble;
 80064ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80064b2:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 80064b6:	e017      	b.n	80064e8 <Compress_Sample+0xf8>
		} else 
		{
			packed_byte |= (nibble << 4);
 80064b8:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80064bc:	011b      	lsls	r3, r3, #4
 80064be:	b25a      	sxtb	r2, r3
 80064c0:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 80064c4:	4313      	orrs	r3, r2
 80064c6:	b25b      	sxtb	r3, r3
 80064c8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
			output[out_idx++] = packed_byte;
 80064cc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 80064d6:	461a      	mov	r2, r3
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	4413      	add	r3, r2
 80064dc:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 80064e0:	701a      	strb	r2, [r3, #0]
			packed_byte = 0;
 80064e2:	2300      	movs	r3, #0
 80064e4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	for (int i = 1; i < PRESS_HALF_SAMPLES; i++) 
 80064e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064ea:	3301      	adds	r3, #1
 80064ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80064ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064f0:	2bc7      	cmp	r3, #199	@ 0xc7
 80064f2:	ddc8      	ble.n	8006486 <Compress_Sample+0x96>
	if (PRESS_HALF_SAMPLES % 2 != 0) 
	{
		output[out_idx++] = packed_byte;
		packed_byte = 0;
	}
	sizes.pressure_size = out_idx - pressure_start;
 80064f4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 80064f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	b29b      	uxth	r3, r3
 8006500:	843b      	strh	r3, [r7, #32]

	// --- 2. Flusso (RLE) ---
	uint32_t *counter = (uint32_t*)(input + PRESS_HALF_LEN);
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006508:	643b      	str	r3, [r7, #64]	@ 0x40
	uint16_t volume_start = out_idx;
 800650a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800650e:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	uint32_t prev = counter[0];
 8006510:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint16_t run_len = 1;
 8006516:	2301      	movs	r3, #1
 8006518:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

	for (int i = 1; i < MAX_VOLUME_SAMPLES; i++) {
 800651c:	2301      	movs	r3, #1
 800651e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006520:	e058      	b.n	80065d4 <Compress_Sample+0x1e4>
		if (counter[i] == prev && run_len < 255) {
 8006522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006528:	4413      	add	r3, r2
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800652e:	429a      	cmp	r2, r3
 8006530:	d109      	bne.n	8006546 <Compress_Sample+0x156>
 8006532:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006536:	2bfe      	cmp	r3, #254	@ 0xfe
 8006538:	d805      	bhi.n	8006546 <Compress_Sample+0x156>
			run_len++;
 800653a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800653e:	3301      	adds	r3, #1
 8006540:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8006544:	e043      	b.n	80065ce <Compress_Sample+0x1de>
		} else {
			// Scrivi valore e run_len (4 byte valore + 1 byte run_len)
			output[out_idx++] = prev & 0xFF;
 8006546:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800654a:	1c5a      	adds	r2, r3, #1
 800654c:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8006550:	461a      	mov	r2, r3
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	4413      	add	r3, r2
 8006556:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006558:	b2d2      	uxtb	r2, r2
 800655a:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 8) & 0xFF;
 800655c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800655e:	0a1a      	lsrs	r2, r3, #8
 8006560:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006564:	1c59      	adds	r1, r3, #1
 8006566:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800656a:	4619      	mov	r1, r3
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	440b      	add	r3, r1
 8006570:	b2d2      	uxtb	r2, r2
 8006572:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 16) & 0xFF;
 8006574:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006576:	0c1a      	lsrs	r2, r3, #16
 8006578:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800657c:	1c59      	adds	r1, r3, #1
 800657e:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006582:	4619      	mov	r1, r3
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	440b      	add	r3, r1
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 24) & 0xFF;
 800658c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800658e:	0e1a      	lsrs	r2, r3, #24
 8006590:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006594:	1c59      	adds	r1, r3, #1
 8006596:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800659a:	4619      	mov	r1, r3
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	440b      	add	r3, r1
 80065a0:	b2d2      	uxtb	r2, r2
 80065a2:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = run_len;
 80065a4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80065a8:	1c5a      	adds	r2, r3, #1
 80065aa:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 80065ae:	461a      	mov	r2, r3
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	4413      	add	r3, r2
 80065b4:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 80065b8:	b2d2      	uxtb	r2, r2
 80065ba:	701a      	strb	r2, [r3, #0]
			prev = counter[i];
 80065bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065c2:	4413      	add	r3, r2
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
			run_len = 1;
 80065c8:	2301      	movs	r3, #1
 80065ca:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	for (int i = 1; i < MAX_VOLUME_SAMPLES; i++) {
 80065ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065d0:	3301      	adds	r3, #1
 80065d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80065d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065d6:	2b09      	cmp	r3, #9
 80065d8:	dda3      	ble.n	8006522 <Compress_Sample+0x132>
		}
	}
	// Scrivi l'ultimo run
	output[out_idx++] = prev & 0xFF;
 80065da:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80065de:	1c5a      	adds	r2, r3, #1
 80065e0:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 80065e4:	461a      	mov	r2, r3
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	4413      	add	r3, r2
 80065ea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80065ec:	b2d2      	uxtb	r2, r2
 80065ee:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 8) & 0xFF;
 80065f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065f2:	0a1a      	lsrs	r2, r3, #8
 80065f4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80065f8:	1c59      	adds	r1, r3, #1
 80065fa:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80065fe:	4619      	mov	r1, r3
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	440b      	add	r3, r1
 8006604:	b2d2      	uxtb	r2, r2
 8006606:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 16) & 0xFF;
 8006608:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800660a:	0c1a      	lsrs	r2, r3, #16
 800660c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006610:	1c59      	adds	r1, r3, #1
 8006612:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006616:	4619      	mov	r1, r3
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	440b      	add	r3, r1
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 24) & 0xFF;
 8006620:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006622:	0e1a      	lsrs	r2, r3, #24
 8006624:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006628:	1c59      	adds	r1, r3, #1
 800662a:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800662e:	4619      	mov	r1, r3
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	440b      	add	r3, r1
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = run_len;
 8006638:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8006642:	461a      	mov	r2, r3
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	4413      	add	r3, r2
 8006648:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800664c:	b2d2      	uxtb	r2, r2
 800664e:	701a      	strb	r2, [r3, #0]

	sizes.volume_size = out_idx - volume_start;
 8006650:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8006654:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	b29b      	uxth	r3, r3
 800665a:	847b      	strh	r3, [r7, #34]	@ 0x22

	// --- 3. Accelerometro (3 canali separati) ---
	uint8_t *accel = input + PRESS_HALF_LEN + MAX_VOLUME_LEN;
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006662:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint16_t accel_start = out_idx;
 8006664:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006668:	86fb      	strh	r3, [r7, #54]	@ 0x36

	uint16_t x0 = accel[1] | (accel[2] << 8);
 800666a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800666c:	3301      	adds	r3, #1
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	b21a      	sxth	r2, r3
 8006672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006674:	3302      	adds	r3, #2
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	b21b      	sxth	r3, r3
 800667a:	021b      	lsls	r3, r3, #8
 800667c:	b21b      	sxth	r3, r3
 800667e:	4313      	orrs	r3, r2
 8006680:	b21b      	sxth	r3, r3
 8006682:	86bb      	strh	r3, [r7, #52]	@ 0x34
	uint16_t y0 = accel[3] | (accel[4] << 8);
 8006684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006686:	3303      	adds	r3, #3
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	b21a      	sxth	r2, r3
 800668c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800668e:	3304      	adds	r3, #4
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	b21b      	sxth	r3, r3
 8006694:	021b      	lsls	r3, r3, #8
 8006696:	b21b      	sxth	r3, r3
 8006698:	4313      	orrs	r3, r2
 800669a:	b21b      	sxth	r3, r3
 800669c:	867b      	strh	r3, [r7, #50]	@ 0x32
	uint16_t z0 = accel[5] | (accel[6] << 8);
 800669e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a0:	3305      	adds	r3, #5
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	b21a      	sxth	r2, r3
 80066a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a8:	3306      	adds	r3, #6
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	b21b      	sxth	r3, r3
 80066ae:	021b      	lsls	r3, r3, #8
 80066b0:	b21b      	sxth	r3, r3
 80066b2:	4313      	orrs	r3, r2
 80066b4:	b21b      	sxth	r3, r3
 80066b6:	863b      	strh	r3, [r7, #48]	@ 0x30
	acc_x_state.previous_value = x0;
 80066b8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80066bc:	833b      	strh	r3, [r7, #24]
	acc_y_state.previous_value = y0;
 80066be:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80066c2:	82bb      	strh	r3, [r7, #20]
	acc_z_state.previous_value = z0;
 80066c4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80066c8:	823b      	strh	r3, [r7, #16]
	for(int k=0; k<7; ++k) output[out_idx++] = accel[k];
 80066ca:	2300      	movs	r3, #0
 80066cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80066ce:	e00f      	b.n	80066f0 <Compress_Sample+0x300>
 80066d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066d4:	441a      	add	r2, r3
 80066d6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80066da:	1c59      	adds	r1, r3, #1
 80066dc:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80066e0:	4619      	mov	r1, r3
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	440b      	add	r3, r1
 80066e6:	7812      	ldrb	r2, [r2, #0]
 80066e8:	701a      	strb	r2, [r3, #0]
 80066ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066ec:	3301      	adds	r3, #1
 80066ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80066f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066f2:	2b06      	cmp	r3, #6
 80066f4:	ddec      	ble.n	80066d0 <Compress_Sample+0x2e0>
	for (int i = 1; i < ACC_FIFO_WATERMARK; i++) 
 80066f6:	2301      	movs	r3, #1
 80066f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066fa:	e087      	b.n	800680c <Compress_Sample+0x41c>
 80066fc:	200000b0 	.word	0x200000b0
	{
		uint16_t x = accel[i*7+1] | (accel[i*7+2] << 8);
 8006700:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006702:	4613      	mov	r3, r2
 8006704:	00db      	lsls	r3, r3, #3
 8006706:	1a9b      	subs	r3, r3, r2
 8006708:	3301      	adds	r3, #1
 800670a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800670c:	4413      	add	r3, r2
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	b219      	sxth	r1, r3
 8006712:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006714:	4613      	mov	r3, r2
 8006716:	00db      	lsls	r3, r3, #3
 8006718:	1a9b      	subs	r3, r3, r2
 800671a:	3302      	adds	r3, #2
 800671c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800671e:	4413      	add	r3, r2
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	b21b      	sxth	r3, r3
 8006724:	021b      	lsls	r3, r3, #8
 8006726:	b21b      	sxth	r3, r3
 8006728:	430b      	orrs	r3, r1
 800672a:	b21b      	sxth	r3, r3
 800672c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		uint16_t y = accel[i*7+3] | (accel[i*7+4] << 8);
 800672e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006730:	4613      	mov	r3, r2
 8006732:	00db      	lsls	r3, r3, #3
 8006734:	1a9b      	subs	r3, r3, r2
 8006736:	3303      	adds	r3, #3
 8006738:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800673a:	4413      	add	r3, r2
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	b219      	sxth	r1, r3
 8006740:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006742:	4613      	mov	r3, r2
 8006744:	00db      	lsls	r3, r3, #3
 8006746:	1a9b      	subs	r3, r3, r2
 8006748:	3304      	adds	r3, #4
 800674a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800674c:	4413      	add	r3, r2
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	b21b      	sxth	r3, r3
 8006752:	021b      	lsls	r3, r3, #8
 8006754:	b21b      	sxth	r3, r3
 8006756:	430b      	orrs	r3, r1
 8006758:	b21b      	sxth	r3, r3
 800675a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		uint16_t z = accel[i*7+5] | (accel[i*7+6] << 8);
 800675c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800675e:	4613      	mov	r3, r2
 8006760:	00db      	lsls	r3, r3, #3
 8006762:	1a9b      	subs	r3, r3, r2
 8006764:	3305      	adds	r3, #5
 8006766:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006768:	4413      	add	r3, r2
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	b219      	sxth	r1, r3
 800676e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006770:	4613      	mov	r3, r2
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	1a9b      	subs	r3, r3, r2
 8006776:	3306      	adds	r3, #6
 8006778:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800677a:	4413      	add	r3, r2
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	b21b      	sxth	r3, r3
 8006780:	021b      	lsls	r3, r3, #8
 8006782:	b21b      	sxth	r3, r3
 8006784:	430b      	orrs	r3, r1
 8006786:	b21b      	sxth	r3, r3
 8006788:	857b      	strh	r3, [r7, #42]	@ 0x2a
		uint8_t nibble_x = ADPCM_Compression(x, &acc_x_state, step_size_table_16bit);
 800678a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800678e:	f107 0118 	add.w	r1, r7, #24
 8006792:	4a29      	ldr	r2, [pc, #164]	@ (8006838 <Compress_Sample+0x448>)
 8006794:	4618      	mov	r0, r3
 8006796:	f000 f851 	bl	800683c <ADPCM_Compression>
 800679a:	4603      	mov	r3, r0
 800679c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		uint8_t nibble_y = ADPCM_Compression(y, &acc_y_state, step_size_table_16bit);
 80067a0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80067a4:	f107 0114 	add.w	r1, r7, #20
 80067a8:	4a23      	ldr	r2, [pc, #140]	@ (8006838 <Compress_Sample+0x448>)
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 f846 	bl	800683c <ADPCM_Compression>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		uint8_t nibble_z = ADPCM_Compression(z, &acc_z_state, step_size_table_16bit);
 80067b6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80067ba:	f107 0110 	add.w	r1, r7, #16
 80067be:	4a1e      	ldr	r2, [pc, #120]	@ (8006838 <Compress_Sample+0x448>)
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 f83b 	bl	800683c <ADPCM_Compression>
 80067c6:	4603      	mov	r3, r0
 80067c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		output[out_idx++] = nibble_x | (nibble_y << 4);
 80067cc:	f997 3028 	ldrsb.w	r3, [r7, #40]	@ 0x28
 80067d0:	011b      	lsls	r3, r3, #4
 80067d2:	b25a      	sxtb	r2, r3
 80067d4:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 80067d8:	4313      	orrs	r3, r2
 80067da:	b25a      	sxtb	r2, r3
 80067dc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80067e0:	1c59      	adds	r1, r3, #1
 80067e2:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80067e6:	4619      	mov	r1, r3
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	440b      	add	r3, r1
 80067ec:	b2d2      	uxtb	r2, r2
 80067ee:	701a      	strb	r2, [r3, #0]
		output[out_idx++] = nibble_z;
 80067f0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80067f4:	1c5a      	adds	r2, r3, #1
 80067f6:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 80067fa:	461a      	mov	r2, r3
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	4413      	add	r3, r2
 8006800:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006804:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < ACC_FIFO_WATERMARK; i++) 
 8006806:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006808:	3301      	adds	r3, #1
 800680a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800680c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800680e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006810:	f77f af76 	ble.w	8006700 <Compress_Sample+0x310>
	}
	sizes.acceleration_size = out_idx - accel_start;
 8006814:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8006818:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	b29b      	uxth	r3, r3
 800681e:	84bb      	strh	r3, [r7, #36]	@ 0x24

	return sizes;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	461a      	mov	r2, r3
 8006824:	f107 0320 	add.w	r3, r7, #32
 8006828:	6818      	ldr	r0, [r3, #0]
 800682a:	6010      	str	r0, [r2, #0]
 800682c:	889b      	ldrh	r3, [r3, #4]
 800682e:	8093      	strh	r3, [r2, #4]
}
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	3768      	adds	r7, #104	@ 0x68
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	20000000 	.word	0x20000000

0800683c <ADPCM_Compression>:

/*-----FUNZIONE DI COMPRESSIONE ADPCM-----*/
uint8_t ADPCM_Compression(int16_t sample, AdpcmState_Typedef* state, uint16_t* step_size_table) 
{
 800683c:	b480      	push	{r7}
 800683e:	b08b      	sub	sp, #44	@ 0x2c
 8006840:	af00      	add	r7, sp, #0
 8006842:	4603      	mov	r3, r0
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
 8006848:	81fb      	strh	r3, [r7, #14]
    int32_t diff = (int32_t)sample - state->previous_value;
 800684a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006854:	1a9b      	subs	r3, r3, r2
 8006856:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t step = step_size_table[state->step_index];
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800685e:	005b      	lsls	r3, r3, #1
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	4413      	add	r3, r2
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	837b      	strh	r3, [r7, #26]
    uint8_t nibble = 0;
 8006868:	2300      	movs	r3, #0
 800686a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    if (diff < 0) 
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	2b00      	cmp	r3, #0
 8006872:	da05      	bge.n	8006880 <ADPCM_Compression+0x44>
	{
        nibble = 8; // Bit di segno
 8006874:	2308      	movs	r3, #8
 8006876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        diff = -diff;
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687c:	425b      	negs	r3, r3
 800687e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Calcola il nibble quantizzato
    uint32_t temp = (uint32_t)diff * 4;
 8006880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	617b      	str	r3, [r7, #20]
    if (temp < step) 
 8006886:	8b7b      	ldrh	r3, [r7, #26]
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	429a      	cmp	r2, r3
 800688c:	d312      	bcc.n	80068b4 <ADPCM_Compression+0x78>
	{
        nibble |= 0;
    } 
	else 
	{
        nibble |= (uint8_t)((temp / step > 7) ? 7 : (temp / step));
 800688e:	8b7b      	ldrh	r3, [r7, #26]
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	fbb2 f3f3 	udiv	r3, r2, r3
 8006896:	2b07      	cmp	r3, #7
 8006898:	d805      	bhi.n	80068a6 <ADPCM_Compression+0x6a>
 800689a:	8b7b      	ldrh	r3, [r7, #26]
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a2:	b25b      	sxtb	r3, r3
 80068a4:	e000      	b.n	80068a8 <ADPCM_Compression+0x6c>
 80068a6:	2307      	movs	r3, #7
 80068a8:	f997 2023 	ldrsb.w	r2, [r7, #35]	@ 0x23
 80068ac:	4313      	orrs	r3, r2
 80068ae:	b25b      	sxtb	r3, r3
 80068b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }

    // Ricostruisci il valore per la predizione successiva (usando solo il nibble)
    int32_t reconstructed_diff = (step * (nibble & 7)) / 4 + step / 8;
 80068b4:	8b7b      	ldrh	r3, [r7, #26]
 80068b6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80068ba:	f002 0207 	and.w	r2, r2, #7
 80068be:	fb02 f303 	mul.w	r3, r2, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	da00      	bge.n	80068c8 <ADPCM_Compression+0x8c>
 80068c6:	3303      	adds	r3, #3
 80068c8:	109b      	asrs	r3, r3, #2
 80068ca:	461a      	mov	r2, r3
 80068cc:	8b7b      	ldrh	r3, [r7, #26]
 80068ce:	08db      	lsrs	r3, r3, #3
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	4413      	add	r3, r2
 80068d4:	61fb      	str	r3, [r7, #28]
    if (nibble & 8) {
 80068d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80068da:	f003 0308 	and.w	r3, r3, #8
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d002      	beq.n	80068e8 <ADPCM_Compression+0xac>
        reconstructed_diff = -reconstructed_diff;
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	425b      	negs	r3, r3
 80068e6:	61fb      	str	r3, [r7, #28]
    }
    
    state->previous_value += reconstructed_diff;
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	4413      	add	r3, r2
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	b21a      	sxth	r2, r3
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	801a      	strh	r2, [r3, #0]
    // Clamp del valore predetto
    if (state->previous_value > 32767) state->previous_value = 32767;
    if (state->previous_value < -32768) state->previous_value = -32768;

    // Aggiorna l'indice dello step
    state->step_index += index_adjustment_table[nibble & 7];
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006904:	b2da      	uxtb	r2, r3
 8006906:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800690a:	f003 0307 	and.w	r3, r3, #7
 800690e:	4910      	ldr	r1, [pc, #64]	@ (8006950 <ADPCM_Compression+0x114>)
 8006910:	56cb      	ldrsb	r3, [r1, r3]
 8006912:	b2db      	uxtb	r3, r3
 8006914:	4413      	add	r3, r2
 8006916:	b2db      	uxtb	r3, r3
 8006918:	b25a      	sxtb	r2, r3
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	709a      	strb	r2, [r3, #2]
    if (state->step_index < 0) state->step_index = 0;
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006924:	2b00      	cmp	r3, #0
 8006926:	da02      	bge.n	800692e <ADPCM_Compression+0xf2>
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2200      	movs	r2, #0
 800692c:	709a      	strb	r2, [r3, #2]
    if (state->step_index > 87) state->step_index = 87;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006934:	2b57      	cmp	r3, #87	@ 0x57
 8006936:	dd02      	ble.n	800693e <ADPCM_Compression+0x102>
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2257      	movs	r2, #87	@ 0x57
 800693c:	709a      	strb	r2, [r3, #2]

    return nibble;
 800693e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8006942:	4618      	mov	r0, r3
 8006944:	372c      	adds	r7, #44	@ 0x2c
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	20000160 	.word	0x20000160

08006954 <Apply_Config>:


/*-----APPLICA VALORI CONFIGURAZIONE-----*/
void Apply_Config(void)
{
 8006954:	b590      	push	{r4, r7, lr}
 8006956:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
	FIL config_file;
	UINT bytes_written;
	
	if(strcmp(cfg_var, "DEVICE_ID") == 0) 
 800695e:	49a3      	ldr	r1, [pc, #652]	@ (8006bec <Apply_Config+0x298>)
 8006960:	48a3      	ldr	r0, [pc, #652]	@ (8006bf0 <Apply_Config+0x29c>)
 8006962:	f7f9 fc35 	bl	80001d0 <strcmp>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d107      	bne.n	800697c <Apply_Config+0x28>
	{
		config.device_id = (uint8_t)atoi(new_cfg_val);
 800696c:	48a1      	ldr	r0, [pc, #644]	@ (8006bf4 <Apply_Config+0x2a0>)
 800696e:	f00f fb35 	bl	8015fdc <atoi>
 8006972:	4603      	mov	r3, r0
 8006974:	b2da      	uxtb	r2, r3
 8006976:	4ba0      	ldr	r3, [pc, #640]	@ (8006bf8 <Apply_Config+0x2a4>)
 8006978:	701a      	strb	r2, [r3, #0]
 800697a:	e102      	b.n	8006b82 <Apply_Config+0x22e>
    }
	else if(strcmp(cfg_var, "SAMP_FREQ") == 0)
 800697c:	499f      	ldr	r1, [pc, #636]	@ (8006bfc <Apply_Config+0x2a8>)
 800697e:	489c      	ldr	r0, [pc, #624]	@ (8006bf0 <Apply_Config+0x29c>)
 8006980:	f7f9 fc26 	bl	80001d0 <strcmp>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d132      	bne.n	80069f0 <Apply_Config+0x9c>
	{
		if((uint16_t)atoi(new_cfg_val) != 800 && (uint16_t)atoi(new_cfg_val) != 1600)
 800698a:	489a      	ldr	r0, [pc, #616]	@ (8006bf4 <Apply_Config+0x2a0>)
 800698c:	f00f fb26 	bl	8015fdc <atoi>
 8006990:	4603      	mov	r3, r0
 8006992:	b29b      	uxth	r3, r3
 8006994:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8006998:	d008      	beq.n	80069ac <Apply_Config+0x58>
 800699a:	4896      	ldr	r0, [pc, #600]	@ (8006bf4 <Apply_Config+0x2a0>)
 800699c:	f00f fb1e 	bl	8015fdc <atoi>
 80069a0:	4603      	mov	r3, r0
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80069a8:	f040 8114 	bne.w	8006bd4 <Apply_Config+0x280>
		{
			return;
		}
		else
		{
			if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 80069ac:	4b92      	ldr	r3, [pc, #584]	@ (8006bf8 <Apply_Config+0x2a4>)
 80069ae:	885b      	ldrh	r3, [r3, #2]
 80069b0:	4a93      	ldr	r2, [pc, #588]	@ (8006c00 <Apply_Config+0x2ac>)
 80069b2:	fba2 2303 	umull	r2, r3, r2, r3
 80069b6:	099b      	lsrs	r3, r3, #6
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	461a      	mov	r2, r3
 80069bc:	4b8e      	ldr	r3, [pc, #568]	@ (8006bf8 <Apply_Config+0x2a4>)
 80069be:	791b      	ldrb	r3, [r3, #4]
 80069c0:	fb02 f303 	mul.w	r3, r2, r3
 80069c4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80069c8:	fb02 f303 	mul.w	r3, r2, r3
 80069cc:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 80069d0:	005b      	lsls	r3, r3, #1
 80069d2:	461c      	mov	r4, r3
 80069d4:	f000 fcca 	bl	800736c <psram_get_size>
 80069d8:	4603      	mov	r3, r0
 80069da:	429c      	cmp	r4, r3
 80069dc:	f240 80d1 	bls.w	8006b82 <Apply_Config+0x22e>
			{
				config.samp_freq = (uint16_t)atoi(new_cfg_val);
 80069e0:	4884      	ldr	r0, [pc, #528]	@ (8006bf4 <Apply_Config+0x2a0>)
 80069e2:	f00f fafb 	bl	8015fdc <atoi>
 80069e6:	4603      	mov	r3, r0
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	4b83      	ldr	r3, [pc, #524]	@ (8006bf8 <Apply_Config+0x2a4>)
 80069ec:	805a      	strh	r2, [r3, #2]
 80069ee:	e0c8      	b.n	8006b82 <Apply_Config+0x22e>
			}
		}
	}
	else if(strcmp(cfg_var, "BUFFER_SECS") == 0)
 80069f0:	4984      	ldr	r1, [pc, #528]	@ (8006c04 <Apply_Config+0x2b0>)
 80069f2:	487f      	ldr	r0, [pc, #508]	@ (8006bf0 <Apply_Config+0x29c>)
 80069f4:	f7f9 fbec 	bl	80001d0 <strcmp>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d131      	bne.n	8006a62 <Apply_Config+0x10e>
	{
		if((uint8_t)atoi(new_cfg_val) < 5 || (uint8_t)atoi(new_cfg_val) > 30)
 80069fe:	487d      	ldr	r0, [pc, #500]	@ (8006bf4 <Apply_Config+0x2a0>)
 8006a00:	f00f faec 	bl	8015fdc <atoi>
 8006a04:	4603      	mov	r3, r0
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b04      	cmp	r3, #4
 8006a0a:	f240 80e5 	bls.w	8006bd8 <Apply_Config+0x284>
 8006a0e:	4879      	ldr	r0, [pc, #484]	@ (8006bf4 <Apply_Config+0x2a0>)
 8006a10:	f00f fae4 	bl	8015fdc <atoi>
 8006a14:	4603      	mov	r3, r0
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b1e      	cmp	r3, #30
 8006a1a:	f200 80dd 	bhi.w	8006bd8 <Apply_Config+0x284>
		{
			return;
		}
		else
		{
			if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 8006a1e:	4b76      	ldr	r3, [pc, #472]	@ (8006bf8 <Apply_Config+0x2a4>)
 8006a20:	885b      	ldrh	r3, [r3, #2]
 8006a22:	4a77      	ldr	r2, [pc, #476]	@ (8006c00 <Apply_Config+0x2ac>)
 8006a24:	fba2 2303 	umull	r2, r3, r2, r3
 8006a28:	099b      	lsrs	r3, r3, #6
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	4b72      	ldr	r3, [pc, #456]	@ (8006bf8 <Apply_Config+0x2a4>)
 8006a30:	791b      	ldrb	r3, [r3, #4]
 8006a32:	fb02 f303 	mul.w	r3, r2, r3
 8006a36:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006a3a:	fb02 f303 	mul.w	r3, r2, r3
 8006a3e:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 8006a42:	005b      	lsls	r3, r3, #1
 8006a44:	461c      	mov	r4, r3
 8006a46:	f000 fc91 	bl	800736c <psram_get_size>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	429c      	cmp	r4, r3
 8006a4e:	f240 8098 	bls.w	8006b82 <Apply_Config+0x22e>
			{
				config.buffering_secs = (uint8_t)atoi(new_cfg_val);
 8006a52:	4868      	ldr	r0, [pc, #416]	@ (8006bf4 <Apply_Config+0x2a0>)
 8006a54:	f00f fac2 	bl	8015fdc <atoi>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	4b66      	ldr	r3, [pc, #408]	@ (8006bf8 <Apply_Config+0x2a4>)
 8006a5e:	711a      	strb	r2, [r3, #4]
 8006a60:	e08f      	b.n	8006b82 <Apply_Config+0x22e>
			}
		}
	}
	else if(strcmp(cfg_var, "CONN_TIMEOUT") == 0)
 8006a62:	4969      	ldr	r1, [pc, #420]	@ (8006c08 <Apply_Config+0x2b4>)
 8006a64:	4862      	ldr	r0, [pc, #392]	@ (8006bf0 <Apply_Config+0x29c>)
 8006a66:	f7f9 fbb3 	bl	80001d0 <strcmp>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d107      	bne.n	8006a80 <Apply_Config+0x12c>
	{
		config.connection_timeout_ms = (uint32_t)atoi(new_cfg_val);
 8006a70:	4860      	ldr	r0, [pc, #384]	@ (8006bf4 <Apply_Config+0x2a0>)
 8006a72:	f00f fab3 	bl	8015fdc <atoi>
 8006a76:	4603      	mov	r3, r0
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4b5f      	ldr	r3, [pc, #380]	@ (8006bf8 <Apply_Config+0x2a4>)
 8006a7c:	609a      	str	r2, [r3, #8]
 8006a7e:	e080      	b.n	8006b82 <Apply_Config+0x22e>
	}
	else if(strcmp(cfg_var, "LOG_PERIOD") == 0)
 8006a80:	4962      	ldr	r1, [pc, #392]	@ (8006c0c <Apply_Config+0x2b8>)
 8006a82:	485b      	ldr	r0, [pc, #364]	@ (8006bf0 <Apply_Config+0x29c>)
 8006a84:	f7f9 fba4 	bl	80001d0 <strcmp>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d107      	bne.n	8006a9e <Apply_Config+0x14a>
	{
		config.log_period_ms = (uint32_t)atoi(new_cfg_val);
 8006a8e:	4859      	ldr	r0, [pc, #356]	@ (8006bf4 <Apply_Config+0x2a0>)
 8006a90:	f00f faa4 	bl	8015fdc <atoi>
 8006a94:	4603      	mov	r3, r0
 8006a96:	461a      	mov	r2, r3
 8006a98:	4b57      	ldr	r3, [pc, #348]	@ (8006bf8 <Apply_Config+0x2a4>)
 8006a9a:	60da      	str	r2, [r3, #12]
 8006a9c:	e071      	b.n	8006b82 <Apply_Config+0x22e>
	}
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 8006a9e:	495c      	ldr	r1, [pc, #368]	@ (8006c10 <Apply_Config+0x2bc>)
 8006aa0:	4853      	ldr	r0, [pc, #332]	@ (8006bf0 <Apply_Config+0x29c>)
 8006aa2:	f7f9 fb95 	bl	80001d0 <strcmp>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d107      	bne.n	8006abc <Apply_Config+0x168>
	{
		config.hammer_th = (uint16_t)atoi(new_cfg_val);
 8006aac:	4851      	ldr	r0, [pc, #324]	@ (8006bf4 <Apply_Config+0x2a0>)
 8006aae:	f00f fa95 	bl	8015fdc <atoi>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	4b50      	ldr	r3, [pc, #320]	@ (8006bf8 <Apply_Config+0x2a4>)
 8006ab8:	821a      	strh	r2, [r3, #16]
 8006aba:	e062      	b.n	8006b82 <Apply_Config+0x22e>
	}
    else if(strcmp(cfg_var, "HIGH_TH") == 0) 
 8006abc:	4955      	ldr	r1, [pc, #340]	@ (8006c14 <Apply_Config+0x2c0>)
 8006abe:	484c      	ldr	r0, [pc, #304]	@ (8006bf0 <Apply_Config+0x29c>)
 8006ac0:	f7f9 fb86 	bl	80001d0 <strcmp>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d115      	bne.n	8006af6 <Apply_Config+0x1a2>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 8006aca:	4b53      	ldr	r3, [pc, #332]	@ (8006c18 <Apply_Config+0x2c4>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	db57      	blt.n	8006b82 <Apply_Config+0x22e>
 8006ad2:	4b51      	ldr	r3, [pc, #324]	@ (8006c18 <Apply_Config+0x2c4>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b17      	cmp	r3, #23
 8006ad8:	dc53      	bgt.n	8006b82 <Apply_Config+0x22e>
		{
            config.high_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 8006ada:	4846      	ldr	r0, [pc, #280]	@ (8006bf4 <Apply_Config+0x2a0>)
 8006adc:	f00f fa7e 	bl	8015fdc <atoi>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	4b4d      	ldr	r3, [pc, #308]	@ (8006c18 <Apply_Config+0x2c4>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	b291      	uxth	r1, r2
 8006ae8:	4a43      	ldr	r2, [pc, #268]	@ (8006bf8 <Apply_Config+0x2a4>)
 8006aea:	3320      	adds	r3, #32
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	4413      	add	r3, r2
 8006af0:	460a      	mov	r2, r1
 8006af2:	805a      	strh	r2, [r3, #2]
 8006af4:	e045      	b.n	8006b82 <Apply_Config+0x22e>
        }
    }
    else if(strcmp(cfg_var, "LOW_TH") == 0) 
 8006af6:	4949      	ldr	r1, [pc, #292]	@ (8006c1c <Apply_Config+0x2c8>)
 8006af8:	483d      	ldr	r0, [pc, #244]	@ (8006bf0 <Apply_Config+0x29c>)
 8006afa:	f7f9 fb69 	bl	80001d0 <strcmp>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d115      	bne.n	8006b30 <Apply_Config+0x1dc>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 8006b04:	4b44      	ldr	r3, [pc, #272]	@ (8006c18 <Apply_Config+0x2c4>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	db3a      	blt.n	8006b82 <Apply_Config+0x22e>
 8006b0c:	4b42      	ldr	r3, [pc, #264]	@ (8006c18 <Apply_Config+0x2c4>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b17      	cmp	r3, #23
 8006b12:	dc36      	bgt.n	8006b82 <Apply_Config+0x22e>
		{
            config.low_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 8006b14:	4837      	ldr	r0, [pc, #220]	@ (8006bf4 <Apply_Config+0x2a0>)
 8006b16:	f00f fa61 	bl	8015fdc <atoi>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	4b3e      	ldr	r3, [pc, #248]	@ (8006c18 <Apply_Config+0x2c4>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	b291      	uxth	r1, r2
 8006b22:	4a35      	ldr	r2, [pc, #212]	@ (8006bf8 <Apply_Config+0x2a4>)
 8006b24:	3308      	adds	r3, #8
 8006b26:	005b      	lsls	r3, r3, #1
 8006b28:	4413      	add	r3, r2
 8006b2a:	460a      	mov	r2, r1
 8006b2c:	805a      	strh	r2, [r3, #2]
 8006b2e:	e028      	b.n	8006b82 <Apply_Config+0x22e>
        }
    }
    else if(strcmp(cfg_var, "TCP_IP") == 0)
 8006b30:	493b      	ldr	r1, [pc, #236]	@ (8006c20 <Apply_Config+0x2cc>)
 8006b32:	482f      	ldr	r0, [pc, #188]	@ (8006bf0 <Apply_Config+0x29c>)
 8006b34:	f7f9 fb4c 	bl	80001d0 <strcmp>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10d      	bne.n	8006b5a <Apply_Config+0x206>
	{
        strncpy(config.tcp_IPaddress, new_cfg_val, sizeof(config.tcp_IPaddress) - 1);
 8006b3e:	223f      	movs	r2, #63	@ 0x3f
 8006b40:	492c      	ldr	r1, [pc, #176]	@ (8006bf4 <Apply_Config+0x2a0>)
 8006b42:	4838      	ldr	r0, [pc, #224]	@ (8006c24 <Apply_Config+0x2d0>)
 8006b44:	f00f fb5b 	bl	80161fe <strncpy>
        config.tcp_IPaddress[sizeof(config.tcp_IPaddress) - 1] = '\0';
 8006b48:	4b2b      	ldr	r3, [pc, #172]	@ (8006bf8 <Apply_Config+0x2a4>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
		strcpy(sys.TCP.IP_address, config.tcp_IPaddress);
 8006b50:	4934      	ldr	r1, [pc, #208]	@ (8006c24 <Apply_Config+0x2d0>)
 8006b52:	4835      	ldr	r0, [pc, #212]	@ (8006c28 <Apply_Config+0x2d4>)
 8006b54:	f00f fba8 	bl	80162a8 <strcpy>
 8006b58:	e013      	b.n	8006b82 <Apply_Config+0x22e>
    }
    else if(strcmp(cfg_var, "TCP_PORT") == 0)
 8006b5a:	4934      	ldr	r1, [pc, #208]	@ (8006c2c <Apply_Config+0x2d8>)
 8006b5c:	4824      	ldr	r0, [pc, #144]	@ (8006bf0 <Apply_Config+0x29c>)
 8006b5e:	f7f9 fb37 	bl	80001d0 <strcmp>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d139      	bne.n	8006bdc <Apply_Config+0x288>
	{
        strncpy(config.tcp_Port, new_cfg_val, sizeof(config.tcp_Port) - 1);
 8006b68:	223f      	movs	r2, #63	@ 0x3f
 8006b6a:	4922      	ldr	r1, [pc, #136]	@ (8006bf4 <Apply_Config+0x2a0>)
 8006b6c:	4830      	ldr	r0, [pc, #192]	@ (8006c30 <Apply_Config+0x2dc>)
 8006b6e:	f00f fb46 	bl	80161fe <strncpy>
        config.tcp_Port[sizeof(config.tcp_Port) - 1] = '\0';
 8006b72:	4b21      	ldr	r3, [pc, #132]	@ (8006bf8 <Apply_Config+0x2a4>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
		strcpy(sys.TCP.Port, config.tcp_Port);
 8006b7a:	492d      	ldr	r1, [pc, #180]	@ (8006c30 <Apply_Config+0x2dc>)
 8006b7c:	482d      	ldr	r0, [pc, #180]	@ (8006c34 <Apply_Config+0x2e0>)
 8006b7e:	f00f fb93 	bl	80162a8 <strcpy>
	else
	{
		return;
	}

	if (f_open(&config_file, CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) == FR_OK)
 8006b82:	f107 0310 	add.w	r3, r7, #16
 8006b86:	3b08      	subs	r3, #8
 8006b88:	220a      	movs	r2, #10
 8006b8a:	492b      	ldr	r1, [pc, #172]	@ (8006c38 <Apply_Config+0x2e4>)
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f002 ff2d 	bl	80099ec <f_open>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d123      	bne.n	8006be0 <Apply_Config+0x28c>
	{
		f_write(&config_file, &config, sizeof(config), &bytes_written);
 8006b98:	f107 0310 	add.w	r3, r7, #16
 8006b9c:	3b0c      	subs	r3, #12
 8006b9e:	f107 0010 	add.w	r0, r7, #16
 8006ba2:	3808      	subs	r0, #8
 8006ba4:	22f4      	movs	r2, #244	@ 0xf4
 8006ba6:	4914      	ldr	r1, [pc, #80]	@ (8006bf8 <Apply_Config+0x2a4>)
 8006ba8:	f003 fa0b 	bl	8009fc2 <f_write>
		f_close(&config_file);
 8006bac:	f107 0310 	add.w	r3, r7, #16
 8006bb0:	3b08      	subs	r3, #8
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f003 fc0e 	bl	800a3d4 <f_close>
	else
	{
		return;
	}
	
	memset(cfg_var, 0, sizeof(cfg_var));
 8006bb8:	2214      	movs	r2, #20
 8006bba:	2100      	movs	r1, #0
 8006bbc:	480c      	ldr	r0, [pc, #48]	@ (8006bf0 <Apply_Config+0x29c>)
 8006bbe:	f00f faf7 	bl	80161b0 <memset>
	cfg_idx = 0;
 8006bc2:	4b15      	ldr	r3, [pc, #84]	@ (8006c18 <Apply_Config+0x2c4>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 8006bc8:	220a      	movs	r2, #10
 8006bca:	2100      	movs	r1, #0
 8006bcc:	4809      	ldr	r0, [pc, #36]	@ (8006bf4 <Apply_Config+0x2a0>)
 8006bce:	f00f faef 	bl	80161b0 <memset>
 8006bd2:	e006      	b.n	8006be2 <Apply_Config+0x28e>
			return;
 8006bd4:	bf00      	nop
 8006bd6:	e004      	b.n	8006be2 <Apply_Config+0x28e>
			return;
 8006bd8:	bf00      	nop
 8006bda:	e002      	b.n	8006be2 <Apply_Config+0x28e>
		return;
 8006bdc:	bf00      	nop
 8006bde:	e000      	b.n	8006be2 <Apply_Config+0x28e>
		return;
 8006be0:	bf00      	nop
}
 8006be2:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd90      	pop	{r4, r7, pc}
 8006bec:	08017710 	.word	0x08017710
 8006bf0:	200059cc 	.word	0x200059cc
 8006bf4:	200059e4 	.word	0x200059e4
 8006bf8:	200019ec 	.word	0x200019ec
 8006bfc:	0801771c 	.word	0x0801771c
 8006c00:	51eb851f 	.word	0x51eb851f
 8006c04:	08017728 	.word	0x08017728
 8006c08:	08017734 	.word	0x08017734
 8006c0c:	08017744 	.word	0x08017744
 8006c10:	08017750 	.word	0x08017750
 8006c14:	0801775c 	.word	0x0801775c
 8006c18:	200059e0 	.word	0x200059e0
 8006c1c:	08017764 	.word	0x08017764
 8006c20:	0801776c 	.word	0x0801776c
 8006c24:	20001a5e 	.word	0x20001a5e
 8006c28:	20001920 	.word	0x20001920
 8006c2c:	08017774 	.word	0x08017774
 8006c30:	20001a9e 	.word	0x20001a9e
 8006c34:	20001984 	.word	0x20001984
 8006c38:	08017780 	.word	0x08017780

08006c3c <Get_Config>:

/*-----RECUPERO E INVIO VALORE DI CONFIGURAZIONE-----*/
void Get_Config(void)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b0a0      	sub	sp, #128	@ 0x80
 8006c40:	af00      	add	r7, sp, #0
	char value_str[128] = {0};
 8006c42:	463b      	mov	r3, r7
 8006c44:	2280      	movs	r2, #128	@ 0x80
 8006c46:	2100      	movs	r1, #0
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f00f fab1 	bl	80161b0 <memset>

	if(strcmp(cfg_var, "DEVICE_ID") == 0)
 8006c4e:	4967      	ldr	r1, [pc, #412]	@ (8006dec <Get_Config+0x1b0>)
 8006c50:	4867      	ldr	r0, [pc, #412]	@ (8006df0 <Get_Config+0x1b4>)
 8006c52:	f7f9 fabd 	bl	80001d0 <strcmp>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d108      	bne.n	8006c6e <Get_Config+0x32>
	{
		sprintf(value_str, "R:%u", config.device_id);
 8006c5c:	4b65      	ldr	r3, [pc, #404]	@ (8006df4 <Get_Config+0x1b8>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	461a      	mov	r2, r3
 8006c62:	463b      	mov	r3, r7
 8006c64:	4964      	ldr	r1, [pc, #400]	@ (8006df8 <Get_Config+0x1bc>)
 8006c66:	4618      	mov	r0, r3
 8006c68:	f00f fa42 	bl	80160f0 <siprintf>
 8006c6c:	e0a9      	b.n	8006dc2 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "SAMP_FREQ") == 0)
 8006c6e:	4963      	ldr	r1, [pc, #396]	@ (8006dfc <Get_Config+0x1c0>)
 8006c70:	485f      	ldr	r0, [pc, #380]	@ (8006df0 <Get_Config+0x1b4>)
 8006c72:	f7f9 faad 	bl	80001d0 <strcmp>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d108      	bne.n	8006c8e <Get_Config+0x52>
	{
		sprintf(value_str, "R:%u", config.samp_freq);
 8006c7c:	4b5d      	ldr	r3, [pc, #372]	@ (8006df4 <Get_Config+0x1b8>)
 8006c7e:	885b      	ldrh	r3, [r3, #2]
 8006c80:	461a      	mov	r2, r3
 8006c82:	463b      	mov	r3, r7
 8006c84:	495c      	ldr	r1, [pc, #368]	@ (8006df8 <Get_Config+0x1bc>)
 8006c86:	4618      	mov	r0, r3
 8006c88:	f00f fa32 	bl	80160f0 <siprintf>
 8006c8c:	e099      	b.n	8006dc2 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "BUFFER_SECS") == 0)
 8006c8e:	495c      	ldr	r1, [pc, #368]	@ (8006e00 <Get_Config+0x1c4>)
 8006c90:	4857      	ldr	r0, [pc, #348]	@ (8006df0 <Get_Config+0x1b4>)
 8006c92:	f7f9 fa9d 	bl	80001d0 <strcmp>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d108      	bne.n	8006cae <Get_Config+0x72>
	{
		sprintf(value_str, "R:%u", config.buffering_secs);
 8006c9c:	4b55      	ldr	r3, [pc, #340]	@ (8006df4 <Get_Config+0x1b8>)
 8006c9e:	791b      	ldrb	r3, [r3, #4]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	463b      	mov	r3, r7
 8006ca4:	4954      	ldr	r1, [pc, #336]	@ (8006df8 <Get_Config+0x1bc>)
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f00f fa22 	bl	80160f0 <siprintf>
 8006cac:	e089      	b.n	8006dc2 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "CONN_TIMEOUT") == 0)
 8006cae:	4955      	ldr	r1, [pc, #340]	@ (8006e04 <Get_Config+0x1c8>)
 8006cb0:	484f      	ldr	r0, [pc, #316]	@ (8006df0 <Get_Config+0x1b4>)
 8006cb2:	f7f9 fa8d 	bl	80001d0 <strcmp>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d107      	bne.n	8006ccc <Get_Config+0x90>
	{
		sprintf(value_str, "R:%lu", config.connection_timeout_ms);
 8006cbc:	4b4d      	ldr	r3, [pc, #308]	@ (8006df4 <Get_Config+0x1b8>)
 8006cbe:	689a      	ldr	r2, [r3, #8]
 8006cc0:	463b      	mov	r3, r7
 8006cc2:	4951      	ldr	r1, [pc, #324]	@ (8006e08 <Get_Config+0x1cc>)
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f00f fa13 	bl	80160f0 <siprintf>
 8006cca:	e07a      	b.n	8006dc2 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "LOG_PERIOD") == 0)
 8006ccc:	494f      	ldr	r1, [pc, #316]	@ (8006e0c <Get_Config+0x1d0>)
 8006cce:	4848      	ldr	r0, [pc, #288]	@ (8006df0 <Get_Config+0x1b4>)
 8006cd0:	f7f9 fa7e 	bl	80001d0 <strcmp>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d107      	bne.n	8006cea <Get_Config+0xae>
	{
		sprintf(value_str, "R:%lu", config.log_period_ms);
 8006cda:	4b46      	ldr	r3, [pc, #280]	@ (8006df4 <Get_Config+0x1b8>)
 8006cdc:	68da      	ldr	r2, [r3, #12]
 8006cde:	463b      	mov	r3, r7
 8006ce0:	4949      	ldr	r1, [pc, #292]	@ (8006e08 <Get_Config+0x1cc>)
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f00f fa04 	bl	80160f0 <siprintf>
 8006ce8:	e06b      	b.n	8006dc2 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 8006cea:	4949      	ldr	r1, [pc, #292]	@ (8006e10 <Get_Config+0x1d4>)
 8006cec:	4840      	ldr	r0, [pc, #256]	@ (8006df0 <Get_Config+0x1b4>)
 8006cee:	f7f9 fa6f 	bl	80001d0 <strcmp>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d108      	bne.n	8006d0a <Get_Config+0xce>
	{
		sprintf(value_str, "R:%u", config.hammer_th);
 8006cf8:	4b3e      	ldr	r3, [pc, #248]	@ (8006df4 <Get_Config+0x1b8>)
 8006cfa:	8a1b      	ldrh	r3, [r3, #16]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	463b      	mov	r3, r7
 8006d00:	493d      	ldr	r1, [pc, #244]	@ (8006df8 <Get_Config+0x1bc>)
 8006d02:	4618      	mov	r0, r3
 8006d04:	f00f f9f4 	bl	80160f0 <siprintf>
 8006d08:	e05b      	b.n	8006dc2 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "HIGH_TH") == 0 && cfg_idx >= 0 && cfg_idx < 24)
 8006d0a:	4942      	ldr	r1, [pc, #264]	@ (8006e14 <Get_Config+0x1d8>)
 8006d0c:	4838      	ldr	r0, [pc, #224]	@ (8006df0 <Get_Config+0x1b4>)
 8006d0e:	f7f9 fa5f 	bl	80001d0 <strcmp>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d115      	bne.n	8006d44 <Get_Config+0x108>
 8006d18:	4b3f      	ldr	r3, [pc, #252]	@ (8006e18 <Get_Config+0x1dc>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	db11      	blt.n	8006d44 <Get_Config+0x108>
 8006d20:	4b3d      	ldr	r3, [pc, #244]	@ (8006e18 <Get_Config+0x1dc>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b17      	cmp	r3, #23
 8006d26:	dc0d      	bgt.n	8006d44 <Get_Config+0x108>
	{
		sprintf(value_str, "R:%u", config.high_th[cfg_idx]);
 8006d28:	4b3b      	ldr	r3, [pc, #236]	@ (8006e18 <Get_Config+0x1dc>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a31      	ldr	r2, [pc, #196]	@ (8006df4 <Get_Config+0x1b8>)
 8006d2e:	3320      	adds	r3, #32
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	4413      	add	r3, r2
 8006d34:	885b      	ldrh	r3, [r3, #2]
 8006d36:	461a      	mov	r2, r3
 8006d38:	463b      	mov	r3, r7
 8006d3a:	492f      	ldr	r1, [pc, #188]	@ (8006df8 <Get_Config+0x1bc>)
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f00f f9d7 	bl	80160f0 <siprintf>
 8006d42:	e03e      	b.n	8006dc2 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "LOW_TH") == 0 && cfg_idx >= 0 && cfg_idx < 24)
 8006d44:	4935      	ldr	r1, [pc, #212]	@ (8006e1c <Get_Config+0x1e0>)
 8006d46:	482a      	ldr	r0, [pc, #168]	@ (8006df0 <Get_Config+0x1b4>)
 8006d48:	f7f9 fa42 	bl	80001d0 <strcmp>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d115      	bne.n	8006d7e <Get_Config+0x142>
 8006d52:	4b31      	ldr	r3, [pc, #196]	@ (8006e18 <Get_Config+0x1dc>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	db11      	blt.n	8006d7e <Get_Config+0x142>
 8006d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8006e18 <Get_Config+0x1dc>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b17      	cmp	r3, #23
 8006d60:	dc0d      	bgt.n	8006d7e <Get_Config+0x142>
	{
		sprintf(value_str, "R:%u", config.low_th[cfg_idx]);
 8006d62:	4b2d      	ldr	r3, [pc, #180]	@ (8006e18 <Get_Config+0x1dc>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a23      	ldr	r2, [pc, #140]	@ (8006df4 <Get_Config+0x1b8>)
 8006d68:	3308      	adds	r3, #8
 8006d6a:	005b      	lsls	r3, r3, #1
 8006d6c:	4413      	add	r3, r2
 8006d6e:	885b      	ldrh	r3, [r3, #2]
 8006d70:	461a      	mov	r2, r3
 8006d72:	463b      	mov	r3, r7
 8006d74:	4920      	ldr	r1, [pc, #128]	@ (8006df8 <Get_Config+0x1bc>)
 8006d76:	4618      	mov	r0, r3
 8006d78:	f00f f9ba 	bl	80160f0 <siprintf>
 8006d7c:	e021      	b.n	8006dc2 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "TCP_IP") == 0)
 8006d7e:	4928      	ldr	r1, [pc, #160]	@ (8006e20 <Get_Config+0x1e4>)
 8006d80:	481b      	ldr	r0, [pc, #108]	@ (8006df0 <Get_Config+0x1b4>)
 8006d82:	f7f9 fa25 	bl	80001d0 <strcmp>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d106      	bne.n	8006d9a <Get_Config+0x15e>
	{
		sprintf(value_str, "R:%s", config.tcp_IPaddress);
 8006d8c:	463b      	mov	r3, r7
 8006d8e:	4a25      	ldr	r2, [pc, #148]	@ (8006e24 <Get_Config+0x1e8>)
 8006d90:	4925      	ldr	r1, [pc, #148]	@ (8006e28 <Get_Config+0x1ec>)
 8006d92:	4618      	mov	r0, r3
 8006d94:	f00f f9ac 	bl	80160f0 <siprintf>
 8006d98:	e013      	b.n	8006dc2 <Get_Config+0x186>
	}
	else if(strcmp(cfg_var, "TCP_PORT") == 0)
 8006d9a:	4924      	ldr	r1, [pc, #144]	@ (8006e2c <Get_Config+0x1f0>)
 8006d9c:	4814      	ldr	r0, [pc, #80]	@ (8006df0 <Get_Config+0x1b4>)
 8006d9e:	f7f9 fa17 	bl	80001d0 <strcmp>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d106      	bne.n	8006db6 <Get_Config+0x17a>
	{
		sprintf(value_str, "R:%s", config.tcp_Port);
 8006da8:	463b      	mov	r3, r7
 8006daa:	4a21      	ldr	r2, [pc, #132]	@ (8006e30 <Get_Config+0x1f4>)
 8006dac:	491e      	ldr	r1, [pc, #120]	@ (8006e28 <Get_Config+0x1ec>)
 8006dae:	4618      	mov	r0, r3
 8006db0:	f00f f99e 	bl	80160f0 <siprintf>
 8006db4:	e005      	b.n	8006dc2 <Get_Config+0x186>
	}
	else
	{
		strncpy(value_str, "R:UNKNOWN", sizeof(value_str)-1);
 8006db6:	463b      	mov	r3, r7
 8006db8:	227f      	movs	r2, #127	@ 0x7f
 8006dba:	491e      	ldr	r1, [pc, #120]	@ (8006e34 <Get_Config+0x1f8>)
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f00f fa1e 	bl	80161fe <strncpy>
	}

	memset(cfg_var, 0, sizeof(cfg_var));
 8006dc2:	2214      	movs	r2, #20
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	480a      	ldr	r0, [pc, #40]	@ (8006df0 <Get_Config+0x1b4>)
 8006dc8:	f00f f9f2 	bl	80161b0 <memset>
	cfg_idx = 0;
 8006dcc:	4b12      	ldr	r3, [pc, #72]	@ (8006e18 <Get_Config+0x1dc>)
 8006dce:	2200      	movs	r2, #0
 8006dd0:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 8006dd2:	220a      	movs	r2, #10
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	4818      	ldr	r0, [pc, #96]	@ (8006e38 <Get_Config+0x1fc>)
 8006dd8:	f00f f9ea 	bl	80161b0 <memset>

	SIM_Send_TCP(value_str);
 8006ddc:	463b      	mov	r3, r7
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7fb f8de 	bl	8001fa0 <SIM_Send_TCP>
}
 8006de4:	bf00      	nop
 8006de6:	3780      	adds	r7, #128	@ 0x80
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	08017710 	.word	0x08017710
 8006df0:	200059cc 	.word	0x200059cc
 8006df4:	200019ec 	.word	0x200019ec
 8006df8:	08017794 	.word	0x08017794
 8006dfc:	0801771c 	.word	0x0801771c
 8006e00:	08017728 	.word	0x08017728
 8006e04:	08017734 	.word	0x08017734
 8006e08:	0801779c 	.word	0x0801779c
 8006e0c:	08017744 	.word	0x08017744
 8006e10:	08017750 	.word	0x08017750
 8006e14:	0801775c 	.word	0x0801775c
 8006e18:	200059e0 	.word	0x200059e0
 8006e1c:	08017764 	.word	0x08017764
 8006e20:	0801776c 	.word	0x0801776c
 8006e24:	20001a5e 	.word	0x20001a5e
 8006e28:	080177a4 	.word	0x080177a4
 8006e2c:	08017774 	.word	0x08017774
 8006e30:	20001a9e 	.word	0x20001a9e
 8006e34:	080177ac 	.word	0x080177ac
 8006e38:	200059e4 	.word	0x200059e4

08006e3c <Clear_Flags>:

/*-----AZZERAMENTO FLAG-----*/
void Clear_Flags(void)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	af00      	add	r7, sp, #0
	if(!sys.ACC_Present)
 8006e40:	4b0d      	ldr	r3, [pc, #52]	@ (8006e78 <Clear_Flags+0x3c>)
 8006e42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e46:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10a      	bne.n	8006e6a <Clear_Flags+0x2e>
	{
		memset(&flags, 0, sizeof(flags));
 8006e54:	2203      	movs	r2, #3
 8006e56:	2100      	movs	r1, #0
 8006e58:	4808      	ldr	r0, [pc, #32]	@ (8006e7c <Clear_Flags+0x40>)
 8006e5a:	f00f f9a9 	bl	80161b0 <memset>
		flags.ACC_Complete = 1;
 8006e5e:	4a07      	ldr	r2, [pc, #28]	@ (8006e7c <Clear_Flags+0x40>)
 8006e60:	7813      	ldrb	r3, [r2, #0]
 8006e62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e66:	7013      	strb	r3, [r2, #0]
	else
	{
		memset(&flags, 0, sizeof(flags));
	}

}
 8006e68:	e004      	b.n	8006e74 <Clear_Flags+0x38>
		memset(&flags, 0, sizeof(flags));
 8006e6a:	2203      	movs	r2, #3
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	4803      	ldr	r0, [pc, #12]	@ (8006e7c <Clear_Flags+0x40>)
 8006e70:	f00f f99e 	bl	80161b0 <memset>
}
 8006e74:	bf00      	nop
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	20000840 	.word	0x20000840
 8006e7c:	200019e8 	.word	0x200019e8

08006e80 <psram_reset>:
uint32_t	psramSize = 0;
uint32_t	psramNumPages = 0;


int psram_reset()
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b08e      	sub	sp, #56	@ 0x38
 8006e84:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = {0};
 8006e86:	463b      	mov	r3, r7
 8006e88:	2238      	movs	r2, #56	@ 0x38
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f00f f98f 	bl	80161b0 <memset>

	sCommand.Instruction = 0x66;
 8006e92:	2366      	movs	r3, #102	@ 0x66
 8006e94:	603b      	str	r3, [r7, #0]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8006e96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006e9a:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_NONE;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	60fb      	str	r3, [r7, #12]
	sCommand.NbData = 0;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006ea4:	463b      	mov	r3, r7
 8006ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eaa:	4619      	mov	r1, r3
 8006eac:	480e      	ldr	r0, [pc, #56]	@ (8006ee8 <psram_reset+0x68>)
 8006eae:	f008 f987 	bl	800f1c0 <HAL_QSPI_Command>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <psram_reset+0x3e>
	{
		return -1;
 8006eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8006ebc:	e00f      	b.n	8006ede <psram_reset+0x5e>
	}

	sCommand.Instruction = 0x99;
 8006ebe:	2399      	movs	r3, #153	@ 0x99
 8006ec0:	603b      	str	r3, [r7, #0]

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006ec2:	463b      	mov	r3, r7
 8006ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4807      	ldr	r0, [pc, #28]	@ (8006ee8 <psram_reset+0x68>)
 8006ecc:	f008 f978 	bl	800f1c0 <HAL_QSPI_Command>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <psram_reset+0x5c>
	{
		return -1;
 8006ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8006eda:	e000      	b.n	8006ede <psram_reset+0x5e>
	}

	return 0;
 8006edc:	2300      	movs	r3, #0

}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3738      	adds	r7, #56	@ 0x38
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	2000043c 	.word	0x2000043c

08006eec <psram_qpi_mode>:
{
	return psramQSPI;
}

int psram_qpi_mode(uint8_t enable)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b090      	sub	sp, #64	@ 0x40
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	71fb      	strb	r3, [r7, #7]

	QSPI_CommandTypeDef sCommand = {0};
 8006ef6:	f107 0308 	add.w	r3, r7, #8
 8006efa:	2238      	movs	r2, #56	@ 0x38
 8006efc:	2100      	movs	r1, #0
 8006efe:	4618      	mov	r0, r3
 8006f00:	f00f f956 	bl	80161b0 <memset>

	if(!psramInitDone)return -1;
 8006f04:	4b1c      	ldr	r3, [pc, #112]	@ (8006f78 <psram_qpi_mode+0x8c>)
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d102      	bne.n	8006f12 <psram_qpi_mode+0x26>
 8006f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f10:	e02d      	b.n	8006f6e <psram_qpi_mode+0x82>

	if(psramQSPI==1 && enable == 0)
 8006f12:	4b1a      	ldr	r3, [pc, #104]	@ (8006f7c <psram_qpi_mode+0x90>)
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d108      	bne.n	8006f2c <psram_qpi_mode+0x40>
 8006f1a:	79fb      	ldrb	r3, [r7, #7]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d105      	bne.n	8006f2c <psram_qpi_mode+0x40>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_DISABLE;
 8006f20:	23f5      	movs	r3, #245	@ 0xf5
 8006f22:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8006f24:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006f28:	623b      	str	r3, [r7, #32]
 8006f2a:	e00e      	b.n	8006f4a <psram_qpi_mode+0x5e>

	}else if(psramQSPI==0 && enable == 1)
 8006f2c:	4b13      	ldr	r3, [pc, #76]	@ (8006f7c <psram_qpi_mode+0x90>)
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d108      	bne.n	8006f46 <psram_qpi_mode+0x5a>
 8006f34:	79fb      	ldrb	r3, [r7, #7]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d105      	bne.n	8006f46 <psram_qpi_mode+0x5a>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_ENABLE;
 8006f3a:	2335      	movs	r3, #53	@ 0x35
 8006f3c:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8006f3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006f42:	623b      	str	r3, [r7, #32]
 8006f44:	e001      	b.n	8006f4a <psram_qpi_mode+0x5e>

	}else{

		return 0;
 8006f46:	2300      	movs	r3, #0
 8006f48:	e011      	b.n	8006f6e <psram_qpi_mode+0x82>

	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006f4a:	f107 0308 	add.w	r3, r7, #8
 8006f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f52:	4619      	mov	r1, r3
 8006f54:	480a      	ldr	r0, [pc, #40]	@ (8006f80 <psram_qpi_mode+0x94>)
 8006f56:	f008 f933 	bl	800f1c0 <HAL_QSPI_Command>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d002      	beq.n	8006f66 <psram_qpi_mode+0x7a>
	{
		return -1;
 8006f60:	f04f 33ff 	mov.w	r3, #4294967295
 8006f64:	e003      	b.n	8006f6e <psram_qpi_mode+0x82>
	}

	psramQSPI = enable;
 8006f66:	4a05      	ldr	r2, [pc, #20]	@ (8006f7c <psram_qpi_mode+0x90>)
 8006f68:	79fb      	ldrb	r3, [r7, #7]
 8006f6a:	7013      	strb	r3, [r2, #0]

	return 0;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3740      	adds	r7, #64	@ 0x40
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	200059ee 	.word	0x200059ee
 8006f7c:	200059ef 	.word	0x200059ef
 8006f80:	2000043c 	.word	0x2000043c

08006f84 <psram_read_id>:

int psram_read_id(uint8_t *id_data, int id_data_size)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b090      	sub	sp, #64	@ 0x40
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef sCommand = {0};
 8006f8e:	f107 0308 	add.w	r3, r7, #8
 8006f92:	2238      	movs	r2, #56	@ 0x38
 8006f94:	2100      	movs	r1, #0
 8006f96:	4618      	mov	r0, r3
 8006f98:	f00f f90a 	bl	80161b0 <memset>

	if(id_data == NULL || id_data_size < 8)return -2;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <psram_read_id+0x24>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b07      	cmp	r3, #7
 8006fa6:	dc02      	bgt.n	8006fae <psram_read_id+0x2a>
 8006fa8:	f06f 0301 	mvn.w	r3, #1
 8006fac:	e034      	b.n	8007018 <psram_read_id+0x94>

	sCommand.Instruction = 0x9F;
 8006fae:	239f      	movs	r3, #159	@ 0x9f
 8006fb0:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8006fb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006fb6:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	60fb      	str	r3, [r7, #12]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8006fbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006fc0:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8006fc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006fc6:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode    = QSPI_DATA_1_LINE;
 8006fc8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.NbData = 8;
 8006fce:	2308      	movs	r3, #8
 8006fd0:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006fe2:	f107 0308 	add.w	r3, r7, #8
 8006fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fea:	4619      	mov	r1, r3
 8006fec:	480c      	ldr	r0, [pc, #48]	@ (8007020 <psram_read_id+0x9c>)
 8006fee:	f008 f8e7 	bl	800f1c0 <HAL_QSPI_Command>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d002      	beq.n	8006ffe <psram_read_id+0x7a>
	{
		return -1;
 8006ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8006ffc:	e00c      	b.n	8007018 <psram_read_id+0x94>
	}

	if (HAL_QSPI_Receive(PSRAM_SPI, id_data, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007002:	6879      	ldr	r1, [r7, #4]
 8007004:	4806      	ldr	r0, [pc, #24]	@ (8007020 <psram_read_id+0x9c>)
 8007006:	f008 f9d0 	bl	800f3aa <HAL_QSPI_Receive>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d002      	beq.n	8007016 <psram_read_id+0x92>
	{
		return -1;
 8007010:	f04f 33ff 	mov.w	r3, #4294967295
 8007014:	e000      	b.n	8007018 <psram_read_id+0x94>
	}


	return 0;
 8007016:	2300      	movs	r3, #0

}
 8007018:	4618      	mov	r0, r3
 800701a:	3740      	adds	r7, #64	@ 0x40
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	2000043c 	.word	0x2000043c

08007024 <psram_internal_read_write>:

int psram_internal_read_write(uint8_t write, uint32_t address, uint16_t nbytes, uint8_t *pBuffer)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b092      	sub	sp, #72	@ 0x48
 8007028:	af00      	add	r7, sp, #0
 800702a:	60b9      	str	r1, [r7, #8]
 800702c:	607b      	str	r3, [r7, #4]
 800702e:	4603      	mov	r3, r0
 8007030:	73fb      	strb	r3, [r7, #15]
 8007032:	4613      	mov	r3, r2
 8007034:	81bb      	strh	r3, [r7, #12]

	QSPI_CommandTypeDef sCommand = {0};
 8007036:	f107 0310 	add.w	r3, r7, #16
 800703a:	2238      	movs	r2, #56	@ 0x38
 800703c:	2100      	movs	r1, #0
 800703e:	4618      	mov	r0, r3
 8007040:	f00f f8b6 	bl	80161b0 <memset>

	sCommand.Address = address;
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007048:	2300      	movs	r3, #0
 800704a:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800704c:	2300      	movs	r3, #0
 800704e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007050:	2300      	movs	r3, #0
 8007052:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007054:	2300      	movs	r3, #0
 8007056:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.NbData = nbytes;
 8007058:	89bb      	ldrh	r3, [r7, #12]
 800705a:	63bb      	str	r3, [r7, #56]	@ 0x38

	if(psramQSPI)
 800705c:	4b33      	ldr	r3, [pc, #204]	@ (800712c <psram_internal_read_write+0x108>)
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d01a      	beq.n	800709a <psram_internal_read_write+0x76>
	{
		//QSPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE_QUAD : PSRAM_CMD_READ_FAST_QIO;
 8007064:	7bfb      	ldrb	r3, [r7, #15]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <psram_internal_read_write+0x4a>
 800706a:	2338      	movs	r3, #56	@ 0x38
 800706c:	e000      	b.n	8007070 <psram_internal_read_write+0x4c>
 800706e:	23eb      	movs	r3, #235	@ 0xeb
 8007070:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8007072:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007076:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8007078:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800707c:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 800707e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007082:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_4_LINES;
 8007084:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8007088:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_QPI_READ_FAST_QIO_WAIT;
 800708a:	7bfb      	ldrb	r3, [r7, #15]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d001      	beq.n	8007094 <psram_internal_read_write+0x70>
 8007090:	2300      	movs	r3, #0
 8007092:	e000      	b.n	8007096 <psram_internal_read_write+0x72>
 8007094:	2306      	movs	r3, #6
 8007096:	627b      	str	r3, [r7, #36]	@ 0x24
 8007098:	e019      	b.n	80070ce <psram_internal_read_write+0xaa>
	}else{
		//SPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE : PSRAM_CMD_READ_FAST;
 800709a:	7bfb      	ldrb	r3, [r7, #15]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d001      	beq.n	80070a4 <psram_internal_read_write+0x80>
 80070a0:	2302      	movs	r3, #2
 80070a2:	e000      	b.n	80070a6 <psram_internal_read_write+0x82>
 80070a4:	230b      	movs	r3, #11
 80070a6:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80070a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80070ac:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80070ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80070b2:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 80070b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_1_LINE;
 80070ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80070be:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_READ_FAST_WAIT;
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <psram_internal_read_write+0xa6>
 80070c6:	2300      	movs	r3, #0
 80070c8:	e000      	b.n	80070cc <psram_internal_read_write+0xa8>
 80070ca:	2308      	movs	r3, #8
 80070cc:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80070ce:	f107 0310 	add.w	r3, r7, #16
 80070d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070d6:	4619      	mov	r1, r3
 80070d8:	4815      	ldr	r0, [pc, #84]	@ (8007130 <psram_internal_read_write+0x10c>)
 80070da:	f008 f871 	bl	800f1c0 <HAL_QSPI_Command>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d002      	beq.n	80070ea <psram_internal_read_write+0xc6>
	{
		return -1;
 80070e4:	f04f 33ff 	mov.w	r3, #4294967295
 80070e8:	e01b      	b.n	8007122 <psram_internal_read_write+0xfe>
	}

	if(write)
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00b      	beq.n	8007108 <psram_internal_read_write+0xe4>
	{
		if (HAL_QSPI_Transmit(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80070f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070f4:	6879      	ldr	r1, [r7, #4]
 80070f6:	480e      	ldr	r0, [pc, #56]	@ (8007130 <psram_internal_read_write+0x10c>)
 80070f8:	f008 f8c0 	bl	800f27c <HAL_QSPI_Transmit>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00e      	beq.n	8007120 <psram_internal_read_write+0xfc>
		{
			return -1;
 8007102:	f04f 33ff 	mov.w	r3, #4294967295
 8007106:	e00c      	b.n	8007122 <psram_internal_read_write+0xfe>
		}

	}else{

		if (HAL_QSPI_Receive(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007108:	f241 3288 	movw	r2, #5000	@ 0x1388
 800710c:	6879      	ldr	r1, [r7, #4]
 800710e:	4808      	ldr	r0, [pc, #32]	@ (8007130 <psram_internal_read_write+0x10c>)
 8007110:	f008 f94b 	bl	800f3aa <HAL_QSPI_Receive>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d002      	beq.n	8007120 <psram_internal_read_write+0xfc>
		{
			return -1;
 800711a:	f04f 33ff 	mov.w	r3, #4294967295
 800711e:	e000      	b.n	8007122 <psram_internal_read_write+0xfe>
		}

	}

	return 0;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3748      	adds	r7, #72	@ 0x48
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	200059ef 	.word	0x200059ef
 8007130:	2000043c 	.word	0x2000043c

08007134 <psram_sector_read_write>:


//Funzione usata da FatFs
int psram_sector_read_write(uint8_t write, uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b088      	sub	sp, #32
 8007138:	af00      	add	r7, sp, #0
 800713a:	60b9      	str	r1, [r7, #8]
 800713c:	607a      	str	r2, [r7, #4]
 800713e:	603b      	str	r3, [r7, #0]
 8007140:	4603      	mov	r3, r0
 8007142:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8007144:	2300      	movs	r3, #0
 8007146:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * PSRAM_PAGE_SIZE;
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	029b      	lsls	r3, r3, #10
 8007150:	61bb      	str	r3, [r7, #24]

	while(nsectors > 0)
 8007152:	e018      	b.n	8007186 <psram_sector_read_write+0x52>
	{
		result = psram_internal_read_write(write, address, PSRAM_PAGE_SIZE, wPtr);
 8007154:	7bf8      	ldrb	r0, [r7, #15]
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800715c:	69b9      	ldr	r1, [r7, #24]
 800715e:	f7ff ff61 	bl	8007024 <psram_internal_read_write>
 8007162:	6178      	str	r0, [r7, #20]
		if(result < 0)return -1;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	2b00      	cmp	r3, #0
 8007168:	da02      	bge.n	8007170 <psram_sector_read_write+0x3c>
 800716a:	f04f 33ff 	mov.w	r3, #4294967295
 800716e:	e00e      	b.n	800718e <psram_sector_read_write+0x5a>
		address += PSRAM_PAGE_SIZE;
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007176:	61bb      	str	r3, [r7, #24]
		wPtr += PSRAM_PAGE_SIZE;
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800717e:	61fb      	str	r3, [r7, #28]
		nsectors--;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	3b01      	subs	r3, #1
 8007184:	607b      	str	r3, [r7, #4]
	while(nsectors > 0)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1e3      	bne.n	8007154 <psram_sector_read_write+0x20>
	}

	return 0;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3720      	adds	r7, #32
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
	...

08007198 <psram_read_write>:



int psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b088      	sub	sp, #32
 800719c:	af00      	add	r7, sp, #0
 800719e:	60b9      	str	r1, [r7, #8]
 80071a0:	607a      	str	r2, [r7, #4]
 80071a2:	603b      	str	r3, [r7, #0]
 80071a4:	4603      	mov	r3, r0
 80071a6:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	61bb      	str	r3, [r7, #24]
	uint32_t trBytes = 0;
 80071ac:	2300      	movs	r3, #0
 80071ae:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	61fb      	str	r3, [r7, #28]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 80071b4:	4b1e      	ldr	r3, [pc, #120]	@ (8007230 <psram_read_write+0x98>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d002      	beq.n	80071c2 <psram_read_write+0x2a>
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d102      	bne.n	80071c8 <psram_read_write+0x30>
 80071c2:	f04f 33ff 	mov.w	r3, #4294967295
 80071c6:	e02e      	b.n	8007226 <psram_read_write+0x8e>
	if(address + nbytes >= psramSize)return -2;
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	441a      	add	r2, r3
 80071ce:	4b19      	ldr	r3, [pc, #100]	@ (8007234 <psram_read_write+0x9c>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d323      	bcc.n	800721e <psram_read_write+0x86>
 80071d6:	f06f 0301 	mvn.w	r3, #1
 80071da:	e024      	b.n	8007226 <psram_read_write+0x8e>

	while(nbytes > 0)
	{
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071e2:	bf28      	it	cs
 80071e4:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 80071e8:	617b      	str	r3, [r7, #20]
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	7bf8      	ldrb	r0, [r7, #15]
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	68b9      	ldr	r1, [r7, #8]
 80071f4:	f7ff ff16 	bl	8007024 <psram_internal_read_write>
 80071f8:	61b8      	str	r0, [r7, #24]

		if(result < 0)return -1;
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	da02      	bge.n	8007206 <psram_read_write+0x6e>
 8007200:	f04f 33ff 	mov.w	r3, #4294967295
 8007204:	e00f      	b.n	8007226 <psram_read_write+0x8e>

		address += trBytes;
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	4413      	add	r3, r2
 800720c:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 800720e:	69fa      	ldr	r2, [r7, #28]
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	4413      	add	r3, r2
 8007214:	61fb      	str	r3, [r7, #28]
		nbytes -= trBytes;
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	607b      	str	r3, [r7, #4]
	while(nbytes > 0)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1db      	bne.n	80071dc <psram_read_write+0x44>
	}

	return 0;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3720      	adds	r7, #32
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	200059ee 	.word	0x200059ee
 8007234:	200059f8 	.word	0x200059f8

08007238 <raw_psram_read_write>:

int raw_psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b088      	sub	sp, #32
 800723c:	af00      	add	r7, sp, #0
 800723e:	60b9      	str	r1, [r7, #8]
 8007240:	607a      	str	r2, [r7, #4]
 8007242:	603b      	str	r3, [r7, #0]
 8007244:	4603      	mov	r3, r0
 8007246:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8007248:	2300      	movs	r3, #0
 800724a:	617b      	str	r3, [r7, #20]
	uint32_t trBytes = 0;
 800724c:	2300      	movs	r3, #0
 800724e:	61fb      	str	r3, [r7, #28]
	uint8_t *wPtr = pBuffer;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	61bb      	str	r3, [r7, #24]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 8007254:	4b21      	ldr	r3, [pc, #132]	@ (80072dc <raw_psram_read_write+0xa4>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <raw_psram_read_write+0x2a>
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d102      	bne.n	8007268 <raw_psram_read_write+0x30>
 8007262:	f04f 33ff 	mov.w	r3, #4294967295
 8007266:	e035      	b.n	80072d4 <raw_psram_read_write+0x9c>
	if(address + nbytes >= psramSize)return -2;
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	441a      	add	r2, r3
 800726e:	4b1c      	ldr	r3, [pc, #112]	@ (80072e0 <raw_psram_read_write+0xa8>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	429a      	cmp	r2, r3
 8007274:	d302      	bcc.n	800727c <raw_psram_read_write+0x44>
 8007276:	f06f 0301 	mvn.w	r3, #1
 800727a:	e02b      	b.n	80072d4 <raw_psram_read_write+0x9c>

	trBytes = 1024 - address % 1024;
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007282:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8007286:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 8007288:	e020      	b.n	80072cc <raw_psram_read_write+0x94>
	{
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	b29a      	uxth	r2, r3
 800728e:	7bf8      	ldrb	r0, [r7, #15]
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	68b9      	ldr	r1, [r7, #8]
 8007294:	f7ff fec6 	bl	8007024 <psram_internal_read_write>
 8007298:	6178      	str	r0, [r7, #20]

		if(result < 0)return -1;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2b00      	cmp	r3, #0
 800729e:	da02      	bge.n	80072a6 <raw_psram_read_write+0x6e>
 80072a0:	f04f 33ff 	mov.w	r3, #4294967295
 80072a4:	e016      	b.n	80072d4 <raw_psram_read_write+0x9c>

		address += trBytes;
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	4413      	add	r3, r2
 80072ac:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 80072ae:	69ba      	ldr	r2, [r7, #24]
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	4413      	add	r3, r2
 80072b4:	61bb      	str	r3, [r7, #24]
		nbytes -= trBytes;
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	607b      	str	r3, [r7, #4]
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072c4:	bf28      	it	cs
 80072c6:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 80072ca:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1db      	bne.n	800728a <raw_psram_read_write+0x52>
	}

	return 0;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3720      	adds	r7, #32
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	200059ee 	.word	0x200059ee
 80072e0:	200059f8 	.word	0x200059f8

080072e4 <RAM_Write>:
{
	return psram_read_write(1, address, nbytes, pBuffer);
}

int RAM_Write(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
	return raw_psram_read_write(1, address, nbytes, pBuffer);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	68f9      	ldr	r1, [r7, #12]
 80072f6:	2001      	movs	r0, #1
 80072f8:	f7ff ff9e 	bl	8007238 <raw_psram_read_write>
 80072fc:	4603      	mov	r3, r0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <RAM_Read>:

int RAM_Read(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b084      	sub	sp, #16
 800730a:	af00      	add	r7, sp, #0
 800730c:	60f8      	str	r0, [r7, #12]
 800730e:	60b9      	str	r1, [r7, #8]
 8007310:	607a      	str	r2, [r7, #4]
	return psram_read_write(0, address, nbytes, pBuffer);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	68f9      	ldr	r1, [r7, #12]
 8007318:	2000      	movs	r0, #0
 800731a:	f7ff ff3d 	bl	8007198 <psram_read_write>
 800731e:	4603      	mov	r3, r0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <psram_is_initialized>:


int psram_is_initialized()
{
 8007328:	b480      	push	{r7}
 800732a:	af00      	add	r7, sp, #0
	return psramInitDone;
 800732c:	4b03      	ldr	r3, [pc, #12]	@ (800733c <psram_is_initialized+0x14>)
 800732e:	781b      	ldrb	r3, [r3, #0]
}
 8007330:	4618      	mov	r0, r3
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	200059ee 	.word	0x200059ee

08007340 <psram_get_sector_size>:

unsigned int psram_get_sector_size()
{
 8007340:	b480      	push	{r7}
 8007342:	af00      	add	r7, sp, #0
	return PSRAM_PAGE_SIZE;
 8007344:	f44f 6380 	mov.w	r3, #1024	@ 0x400
}
 8007348:	4618      	mov	r0, r3
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
	...

08007354 <psram_get_sector_count>:

unsigned int psram_get_sector_count()
{
 8007354:	b480      	push	{r7}
 8007356:	af00      	add	r7, sp, #0
	return psramNumPages;
 8007358:	4b03      	ldr	r3, [pc, #12]	@ (8007368 <psram_get_sector_count+0x14>)
 800735a:	681b      	ldr	r3, [r3, #0]
}
 800735c:	4618      	mov	r0, r3
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	200059fc 	.word	0x200059fc

0800736c <psram_get_size>:

unsigned int psram_get_size()
{
 800736c:	b480      	push	{r7}
 800736e:	af00      	add	r7, sp, #0
	return psramSize;
 8007370:	4b03      	ldr	r3, [pc, #12]	@ (8007380 <psram_get_size+0x14>)
 8007372:	681b      	ldr	r3, [r3, #0]
}
 8007374:	4618      	mov	r0, r3
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	200059f8 	.word	0x200059f8

08007384 <psram_init>:

int psram_init()
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0

	uint8_t density = 0xFF;
 800738a:	23ff      	movs	r3, #255	@ 0xff
 800738c:	71fb      	strb	r3, [r7, #7]

	psramInitDone = 0;
 800738e:	4b20      	ldr	r3, [pc, #128]	@ (8007410 <psram_init+0x8c>)
 8007390:	2200      	movs	r2, #0
 8007392:	701a      	strb	r2, [r3, #0]

	if(psram_reset() < 0)return -1;
 8007394:	f7ff fd74 	bl	8006e80 <psram_reset>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	da02      	bge.n	80073a4 <psram_init+0x20>
 800739e:	f04f 33ff 	mov.w	r3, #4294967295
 80073a2:	e030      	b.n	8007406 <psram_init+0x82>

	memset(psramId, 0xFF, sizeof(psramId));
 80073a4:	2208      	movs	r2, #8
 80073a6:	21ff      	movs	r1, #255	@ 0xff
 80073a8:	481a      	ldr	r0, [pc, #104]	@ (8007414 <psram_init+0x90>)
 80073aa:	f00e ff01 	bl	80161b0 <memset>

	if(psram_read_id(psramId, sizeof(psramId)) < 0)return -1;
 80073ae:	2108      	movs	r1, #8
 80073b0:	4818      	ldr	r0, [pc, #96]	@ (8007414 <psram_init+0x90>)
 80073b2:	f7ff fde7 	bl	8006f84 <psram_read_id>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	da02      	bge.n	80073c2 <psram_init+0x3e>
 80073bc:	f04f 33ff 	mov.w	r3, #4294967295
 80073c0:	e021      	b.n	8007406 <psram_init+0x82>

	density = psramId[2] >> 5;
 80073c2:	4b14      	ldr	r3, [pc, #80]	@ (8007414 <psram_init+0x90>)
 80073c4:	789b      	ldrb	r3, [r3, #2]
 80073c6:	095b      	lsrs	r3, r3, #5
 80073c8:	71fb      	strb	r3, [r7, #7]

	if(psramId[0] == PSRAM_MANUFACTURER && psramId[1] == PSRAM_KGD && density <= PSRAM_DENSITY_64MB)
 80073ca:	4b12      	ldr	r3, [pc, #72]	@ (8007414 <psram_init+0x90>)
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	2b0d      	cmp	r3, #13
 80073d0:	d117      	bne.n	8007402 <psram_init+0x7e>
 80073d2:	4b10      	ldr	r3, [pc, #64]	@ (8007414 <psram_init+0x90>)
 80073d4:	785b      	ldrb	r3, [r3, #1]
 80073d6:	2b5d      	cmp	r3, #93	@ 0x5d
 80073d8:	d113      	bne.n	8007402 <psram_init+0x7e>
 80073da:	79fb      	ldrb	r3, [r7, #7]
 80073dc:	2b03      	cmp	r3, #3
 80073de:	d810      	bhi.n	8007402 <psram_init+0x7e>
	{
		psramSize = PSRAM_DENSITY_64MB_EADDR;
 80073e0:	4b0d      	ldr	r3, [pc, #52]	@ (8007418 <psram_init+0x94>)
 80073e2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80073e6:	601a      	str	r2, [r3, #0]
		psramNumPages = psramSize / PSRAM_PAGE_SIZE;
 80073e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007418 <psram_init+0x94>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	0a9b      	lsrs	r3, r3, #10
 80073ee:	4a0b      	ldr	r2, [pc, #44]	@ (800741c <psram_init+0x98>)
 80073f0:	6013      	str	r3, [r2, #0]

		psram_qpi_mode(1);
 80073f2:	2001      	movs	r0, #1
 80073f4:	f7ff fd7a 	bl	8006eec <psram_qpi_mode>

		psramInitDone = 1;
 80073f8:	4b05      	ldr	r3, [pc, #20]	@ (8007410 <psram_init+0x8c>)
 80073fa:	2201      	movs	r2, #1
 80073fc:	701a      	strb	r2, [r3, #0]
		return 0;
 80073fe:	2300      	movs	r3, #0
 8007400:	e001      	b.n	8007406 <psram_init+0x82>
	}else{
		return -1;
 8007402:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 8007406:	4618      	mov	r0, r3
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	200059ee 	.word	0x200059ee
 8007414:	200059f0 	.word	0x200059f0
 8007418:	200059f8 	.word	0x200059f8
 800741c:	200059fc 	.word	0x200059fc

08007420 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007426:	4b0f      	ldr	r3, [pc, #60]	@ (8007464 <HAL_MspInit+0x44>)
 8007428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800742a:	4a0e      	ldr	r2, [pc, #56]	@ (8007464 <HAL_MspInit+0x44>)
 800742c:	f043 0301 	orr.w	r3, r3, #1
 8007430:	6613      	str	r3, [r2, #96]	@ 0x60
 8007432:	4b0c      	ldr	r3, [pc, #48]	@ (8007464 <HAL_MspInit+0x44>)
 8007434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	607b      	str	r3, [r7, #4]
 800743c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800743e:	4b09      	ldr	r3, [pc, #36]	@ (8007464 <HAL_MspInit+0x44>)
 8007440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007442:	4a08      	ldr	r2, [pc, #32]	@ (8007464 <HAL_MspInit+0x44>)
 8007444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007448:	6593      	str	r3, [r2, #88]	@ 0x58
 800744a:	4b06      	ldr	r3, [pc, #24]	@ (8007464 <HAL_MspInit+0x44>)
 800744c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800744e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007452:	603b      	str	r3, [r7, #0]
 8007454:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007456:	bf00      	nop
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	40021000 	.word	0x40021000

08007468 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b0ac      	sub	sp, #176	@ 0xb0
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007470:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007474:	2200      	movs	r2, #0
 8007476:	601a      	str	r2, [r3, #0]
 8007478:	605a      	str	r2, [r3, #4]
 800747a:	609a      	str	r2, [r3, #8]
 800747c:	60da      	str	r2, [r3, #12]
 800747e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007480:	f107 0314 	add.w	r3, r7, #20
 8007484:	2288      	movs	r2, #136	@ 0x88
 8007486:	2100      	movs	r1, #0
 8007488:	4618      	mov	r0, r3
 800748a:	f00e fe91 	bl	80161b0 <memset>
  if(hadc->Instance==ADC1)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a3d      	ldr	r2, [pc, #244]	@ (8007588 <HAL_ADC_MspInit+0x120>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d172      	bne.n	800757e <HAL_ADC_MspInit+0x116>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8007498:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800749c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800749e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80074a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80074a6:	2303      	movs	r3, #3
 80074a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80074aa:	2301      	movs	r3, #1
 80074ac:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80074ae:	2308      	movs	r3, #8
 80074b0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80074b2:	2307      	movs	r3, #7
 80074b4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80074b6:	2302      	movs	r3, #2
 80074b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80074ba:	2302      	movs	r3, #2
 80074bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80074be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80074c2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80074c4:	f107 0314 	add.w	r3, r7, #20
 80074c8:	4618      	mov	r0, r3
 80074ca:	f009 f865 	bl	8010598 <HAL_RCCEx_PeriphCLKConfig>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80074d4:	f7fd ff9c 	bl	8005410 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80074d8:	4b2c      	ldr	r3, [pc, #176]	@ (800758c <HAL_ADC_MspInit+0x124>)
 80074da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074dc:	4a2b      	ldr	r2, [pc, #172]	@ (800758c <HAL_ADC_MspInit+0x124>)
 80074de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80074e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80074e4:	4b29      	ldr	r3, [pc, #164]	@ (800758c <HAL_ADC_MspInit+0x124>)
 80074e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074ec:	613b      	str	r3, [r7, #16]
 80074ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074f0:	4b26      	ldr	r3, [pc, #152]	@ (800758c <HAL_ADC_MspInit+0x124>)
 80074f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074f4:	4a25      	ldr	r2, [pc, #148]	@ (800758c <HAL_ADC_MspInit+0x124>)
 80074f6:	f043 0301 	orr.w	r3, r3, #1
 80074fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80074fc:	4b23      	ldr	r3, [pc, #140]	@ (800758c <HAL_ADC_MspInit+0x124>)
 80074fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	60fb      	str	r3, [r7, #12]
 8007506:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007508:	2310      	movs	r3, #16
 800750a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800750e:	230b      	movs	r3, #11
 8007510:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007514:	2300      	movs	r3, #0
 8007516:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800751a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800751e:	4619      	mov	r1, r3
 8007520:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007524:	f006 fdb0 	bl	800e088 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8007528:	4b19      	ldr	r3, [pc, #100]	@ (8007590 <HAL_ADC_MspInit+0x128>)
 800752a:	4a1a      	ldr	r2, [pc, #104]	@ (8007594 <HAL_ADC_MspInit+0x12c>)
 800752c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800752e:	4b18      	ldr	r3, [pc, #96]	@ (8007590 <HAL_ADC_MspInit+0x128>)
 8007530:	2200      	movs	r2, #0
 8007532:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007534:	4b16      	ldr	r3, [pc, #88]	@ (8007590 <HAL_ADC_MspInit+0x128>)
 8007536:	2200      	movs	r2, #0
 8007538:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800753a:	4b15      	ldr	r3, [pc, #84]	@ (8007590 <HAL_ADC_MspInit+0x128>)
 800753c:	2200      	movs	r2, #0
 800753e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007540:	4b13      	ldr	r3, [pc, #76]	@ (8007590 <HAL_ADC_MspInit+0x128>)
 8007542:	2280      	movs	r2, #128	@ 0x80
 8007544:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007546:	4b12      	ldr	r3, [pc, #72]	@ (8007590 <HAL_ADC_MspInit+0x128>)
 8007548:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800754c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800754e:	4b10      	ldr	r3, [pc, #64]	@ (8007590 <HAL_ADC_MspInit+0x128>)
 8007550:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007554:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007556:	4b0e      	ldr	r3, [pc, #56]	@ (8007590 <HAL_ADC_MspInit+0x128>)
 8007558:	2220      	movs	r2, #32
 800755a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800755c:	4b0c      	ldr	r3, [pc, #48]	@ (8007590 <HAL_ADC_MspInit+0x128>)
 800755e:	2200      	movs	r2, #0
 8007560:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007562:	480b      	ldr	r0, [pc, #44]	@ (8007590 <HAL_ADC_MspInit+0x128>)
 8007564:	f005 fc8a 	bl	800ce7c <HAL_DMA_Init>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d001      	beq.n	8007572 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 800756e:	f7fd ff4f 	bl	8005410 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a06      	ldr	r2, [pc, #24]	@ (8007590 <HAL_ADC_MspInit+0x128>)
 8007576:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007578:	4a05      	ldr	r2, [pc, #20]	@ (8007590 <HAL_ADC_MspInit+0x128>)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800757e:	bf00      	nop
 8007580:	37b0      	adds	r7, #176	@ 0xb0
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	50040000 	.word	0x50040000
 800758c:	40021000 	.word	0x40021000
 8007590:	2000037c 	.word	0x2000037c
 8007594:	40020008 	.word	0x40020008

08007598 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a0a      	ldr	r2, [pc, #40]	@ (80075d0 <HAL_CRC_MspInit+0x38>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d10b      	bne.n	80075c2 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80075aa:	4b0a      	ldr	r3, [pc, #40]	@ (80075d4 <HAL_CRC_MspInit+0x3c>)
 80075ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ae:	4a09      	ldr	r2, [pc, #36]	@ (80075d4 <HAL_CRC_MspInit+0x3c>)
 80075b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80075b4:	6493      	str	r3, [r2, #72]	@ 0x48
 80075b6:	4b07      	ldr	r3, [pc, #28]	@ (80075d4 <HAL_CRC_MspInit+0x3c>)
 80075b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80075be:	60fb      	str	r3, [r7, #12]
 80075c0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80075c2:	bf00      	nop
 80075c4:	3714      	adds	r7, #20
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	40023000 	.word	0x40023000
 80075d4:	40021000 	.word	0x40021000

080075d8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b0ac      	sub	sp, #176	@ 0xb0
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80075e4:	2200      	movs	r2, #0
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	605a      	str	r2, [r3, #4]
 80075ea:	609a      	str	r2, [r3, #8]
 80075ec:	60da      	str	r2, [r3, #12]
 80075ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80075f0:	f107 0314 	add.w	r3, r7, #20
 80075f4:	2288      	movs	r2, #136	@ 0x88
 80075f6:	2100      	movs	r1, #0
 80075f8:	4618      	mov	r0, r3
 80075fa:	f00e fdd9 	bl	80161b0 <memset>
  if(hi2c->Instance==I2C3)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a21      	ldr	r2, [pc, #132]	@ (8007688 <HAL_I2C_MspInit+0xb0>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d13b      	bne.n	8007680 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8007608:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800760c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800760e:	2300      	movs	r3, #0
 8007610:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007612:	f107 0314 	add.w	r3, r7, #20
 8007616:	4618      	mov	r0, r3
 8007618:	f008 ffbe 	bl	8010598 <HAL_RCCEx_PeriphCLKConfig>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d001      	beq.n	8007626 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8007622:	f7fd fef5 	bl	8005410 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007626:	4b19      	ldr	r3, [pc, #100]	@ (800768c <HAL_I2C_MspInit+0xb4>)
 8007628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800762a:	4a18      	ldr	r2, [pc, #96]	@ (800768c <HAL_I2C_MspInit+0xb4>)
 800762c:	f043 0304 	orr.w	r3, r3, #4
 8007630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007632:	4b16      	ldr	r3, [pc, #88]	@ (800768c <HAL_I2C_MspInit+0xb4>)
 8007634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007636:	f003 0304 	and.w	r3, r3, #4
 800763a:	613b      	str	r3, [r7, #16]
 800763c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800763e:	2303      	movs	r3, #3
 8007640:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007644:	2312      	movs	r3, #18
 8007646:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800764a:	2300      	movs	r3, #0
 800764c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007650:	2303      	movs	r3, #3
 8007652:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007656:	2304      	movs	r3, #4
 8007658:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800765c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007660:	4619      	mov	r1, r3
 8007662:	480b      	ldr	r0, [pc, #44]	@ (8007690 <HAL_I2C_MspInit+0xb8>)
 8007664:	f006 fd10 	bl	800e088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007668:	4b08      	ldr	r3, [pc, #32]	@ (800768c <HAL_I2C_MspInit+0xb4>)
 800766a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800766c:	4a07      	ldr	r2, [pc, #28]	@ (800768c <HAL_I2C_MspInit+0xb4>)
 800766e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007672:	6593      	str	r3, [r2, #88]	@ 0x58
 8007674:	4b05      	ldr	r3, [pc, #20]	@ (800768c <HAL_I2C_MspInit+0xb4>)
 8007676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007678:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800767c:	60fb      	str	r3, [r7, #12]
 800767e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8007680:	bf00      	nop
 8007682:	37b0      	adds	r7, #176	@ 0xb0
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	40005c00 	.word	0x40005c00
 800768c:	40021000 	.word	0x40021000
 8007690:	48000800 	.word	0x48000800

08007694 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b08a      	sub	sp, #40	@ 0x28
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800769c:	f107 0314 	add.w	r3, r7, #20
 80076a0:	2200      	movs	r2, #0
 80076a2:	601a      	str	r2, [r3, #0]
 80076a4:	605a      	str	r2, [r3, #4]
 80076a6:	609a      	str	r2, [r3, #8]
 80076a8:	60da      	str	r2, [r3, #12]
 80076aa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a26      	ldr	r2, [pc, #152]	@ (800774c <HAL_QSPI_MspInit+0xb8>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d145      	bne.n	8007742 <HAL_QSPI_MspInit+0xae>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80076b6:	4b26      	ldr	r3, [pc, #152]	@ (8007750 <HAL_QSPI_MspInit+0xbc>)
 80076b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076ba:	4a25      	ldr	r2, [pc, #148]	@ (8007750 <HAL_QSPI_MspInit+0xbc>)
 80076bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80076c2:	4b23      	ldr	r3, [pc, #140]	@ (8007750 <HAL_QSPI_MspInit+0xbc>)
 80076c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076ca:	613b      	str	r3, [r7, #16]
 80076cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076ce:	4b20      	ldr	r3, [pc, #128]	@ (8007750 <HAL_QSPI_MspInit+0xbc>)
 80076d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076d2:	4a1f      	ldr	r2, [pc, #124]	@ (8007750 <HAL_QSPI_MspInit+0xbc>)
 80076d4:	f043 0301 	orr.w	r3, r3, #1
 80076d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80076da:	4b1d      	ldr	r3, [pc, #116]	@ (8007750 <HAL_QSPI_MspInit+0xbc>)
 80076dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	60fb      	str	r3, [r7, #12]
 80076e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80076e6:	4b1a      	ldr	r3, [pc, #104]	@ (8007750 <HAL_QSPI_MspInit+0xbc>)
 80076e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076ea:	4a19      	ldr	r2, [pc, #100]	@ (8007750 <HAL_QSPI_MspInit+0xbc>)
 80076ec:	f043 0302 	orr.w	r3, r3, #2
 80076f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80076f2:	4b17      	ldr	r3, [pc, #92]	@ (8007750 <HAL_QSPI_MspInit+0xbc>)
 80076f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076f6:	f003 0302 	and.w	r3, r3, #2
 80076fa:	60bb      	str	r3, [r7, #8]
 80076fc:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80076fe:	23c0      	movs	r3, #192	@ 0xc0
 8007700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007702:	2302      	movs	r3, #2
 8007704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007706:	2300      	movs	r3, #0
 8007708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800770a:	2303      	movs	r3, #3
 800770c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800770e:	230a      	movs	r3, #10
 8007710:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007712:	f107 0314 	add.w	r3, r7, #20
 8007716:	4619      	mov	r1, r3
 8007718:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800771c:	f006 fcb4 	bl	800e088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8007720:	f640 4303 	movw	r3, #3075	@ 0xc03
 8007724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007726:	2302      	movs	r3, #2
 8007728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800772a:	2300      	movs	r3, #0
 800772c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800772e:	2303      	movs	r3, #3
 8007730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8007732:	230a      	movs	r3, #10
 8007734:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007736:	f107 0314 	add.w	r3, r7, #20
 800773a:	4619      	mov	r1, r3
 800773c:	4805      	ldr	r0, [pc, #20]	@ (8007754 <HAL_QSPI_MspInit+0xc0>)
 800773e:	f006 fca3 	bl	800e088 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8007742:	bf00      	nop
 8007744:	3728      	adds	r7, #40	@ 0x28
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	a0001000 	.word	0xa0001000
 8007750:	40021000 	.word	0x40021000
 8007754:	48000400 	.word	0x48000400

08007758 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b0a4      	sub	sp, #144	@ 0x90
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007760:	f107 0308 	add.w	r3, r7, #8
 8007764:	2288      	movs	r2, #136	@ 0x88
 8007766:	2100      	movs	r1, #0
 8007768:	4618      	mov	r0, r3
 800776a:	f00e fd21 	bl	80161b0 <memset>
  if(hrtc->Instance==RTC)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a14      	ldr	r2, [pc, #80]	@ (80077c4 <HAL_RTC_MspInit+0x6c>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d120      	bne.n	80077ba <HAL_RTC_MspInit+0x62>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007778:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800777c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800777e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007782:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007786:	f107 0308 	add.w	r3, r7, #8
 800778a:	4618      	mov	r0, r3
 800778c:	f008 ff04 	bl	8010598 <HAL_RCCEx_PeriphCLKConfig>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8007796:	f7fd fe3b 	bl	8005410 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800779a:	4b0b      	ldr	r3, [pc, #44]	@ (80077c8 <HAL_RTC_MspInit+0x70>)
 800779c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077a0:	4a09      	ldr	r2, [pc, #36]	@ (80077c8 <HAL_RTC_MspInit+0x70>)
 80077a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80077aa:	2200      	movs	r2, #0
 80077ac:	2100      	movs	r1, #0
 80077ae:	2029      	movs	r0, #41	@ 0x29
 80077b0:	f005 f8f1 	bl	800c996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80077b4:	2029      	movs	r0, #41	@ 0x29
 80077b6:	f005 f90a 	bl	800c9ce <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80077ba:	bf00      	nop
 80077bc:	3790      	adds	r7, #144	@ 0x90
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	40002800 	.word	0x40002800
 80077c8:	40021000 	.word	0x40021000

080077cc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b08c      	sub	sp, #48	@ 0x30
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077d4:	f107 031c 	add.w	r3, r7, #28
 80077d8:	2200      	movs	r2, #0
 80077da:	601a      	str	r2, [r3, #0]
 80077dc:	605a      	str	r2, [r3, #4]
 80077de:	609a      	str	r2, [r3, #8]
 80077e0:	60da      	str	r2, [r3, #12]
 80077e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a2f      	ldr	r2, [pc, #188]	@ (80078a8 <HAL_SPI_MspInit+0xdc>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d129      	bne.n	8007842 <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80077ee:	4b2f      	ldr	r3, [pc, #188]	@ (80078ac <HAL_SPI_MspInit+0xe0>)
 80077f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077f2:	4a2e      	ldr	r2, [pc, #184]	@ (80078ac <HAL_SPI_MspInit+0xe0>)
 80077f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80077f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80077fa:	4b2c      	ldr	r3, [pc, #176]	@ (80078ac <HAL_SPI_MspInit+0xe0>)
 80077fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007802:	61bb      	str	r3, [r7, #24]
 8007804:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007806:	4b29      	ldr	r3, [pc, #164]	@ (80078ac <HAL_SPI_MspInit+0xe0>)
 8007808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800780a:	4a28      	ldr	r2, [pc, #160]	@ (80078ac <HAL_SPI_MspInit+0xe0>)
 800780c:	f043 0302 	orr.w	r3, r3, #2
 8007810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007812:	4b26      	ldr	r3, [pc, #152]	@ (80078ac <HAL_SPI_MspInit+0xe0>)
 8007814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007816:	f003 0302 	and.w	r3, r3, #2
 800781a:	617b      	str	r3, [r7, #20]
 800781c:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800781e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8007822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007824:	2302      	movs	r3, #2
 8007826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007828:	2300      	movs	r3, #0
 800782a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800782c:	2303      	movs	r3, #3
 800782e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007830:	2305      	movs	r3, #5
 8007832:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007834:	f107 031c 	add.w	r3, r7, #28
 8007838:	4619      	mov	r1, r3
 800783a:	481d      	ldr	r0, [pc, #116]	@ (80078b0 <HAL_SPI_MspInit+0xe4>)
 800783c:	f006 fc24 	bl	800e088 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007840:	e02d      	b.n	800789e <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a1b      	ldr	r2, [pc, #108]	@ (80078b4 <HAL_SPI_MspInit+0xe8>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d128      	bne.n	800789e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800784c:	4b17      	ldr	r3, [pc, #92]	@ (80078ac <HAL_SPI_MspInit+0xe0>)
 800784e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007850:	4a16      	ldr	r2, [pc, #88]	@ (80078ac <HAL_SPI_MspInit+0xe0>)
 8007852:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007856:	6593      	str	r3, [r2, #88]	@ 0x58
 8007858:	4b14      	ldr	r3, [pc, #80]	@ (80078ac <HAL_SPI_MspInit+0xe0>)
 800785a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800785c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007860:	613b      	str	r3, [r7, #16]
 8007862:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007864:	4b11      	ldr	r3, [pc, #68]	@ (80078ac <HAL_SPI_MspInit+0xe0>)
 8007866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007868:	4a10      	ldr	r2, [pc, #64]	@ (80078ac <HAL_SPI_MspInit+0xe0>)
 800786a:	f043 0304 	orr.w	r3, r3, #4
 800786e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007870:	4b0e      	ldr	r3, [pc, #56]	@ (80078ac <HAL_SPI_MspInit+0xe0>)
 8007872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007874:	f003 0304 	and.w	r3, r3, #4
 8007878:	60fb      	str	r3, [r7, #12]
 800787a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800787c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8007880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007882:	2302      	movs	r3, #2
 8007884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007886:	2300      	movs	r3, #0
 8007888:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800788a:	2303      	movs	r3, #3
 800788c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800788e:	2306      	movs	r3, #6
 8007890:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007892:	f107 031c 	add.w	r3, r7, #28
 8007896:	4619      	mov	r1, r3
 8007898:	4807      	ldr	r0, [pc, #28]	@ (80078b8 <HAL_SPI_MspInit+0xec>)
 800789a:	f006 fbf5 	bl	800e088 <HAL_GPIO_Init>
}
 800789e:	bf00      	nop
 80078a0:	3730      	adds	r7, #48	@ 0x30
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	40003800 	.word	0x40003800
 80078ac:	40021000 	.word	0x40021000
 80078b0:	48000400 	.word	0x48000400
 80078b4:	40003c00 	.word	0x40003c00
 80078b8:	48000800 	.word	0x48000800

080078bc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a0a      	ldr	r2, [pc, #40]	@ (80078f4 <HAL_TIM_PWM_MspInit+0x38>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d10b      	bne.n	80078e6 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80078ce:	4b0a      	ldr	r3, [pc, #40]	@ (80078f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80078d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078d2:	4a09      	ldr	r2, [pc, #36]	@ (80078f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80078d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80078d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80078da:	4b07      	ldr	r3, [pc, #28]	@ (80078f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80078dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80078e6:	bf00      	nop
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	40012c00 	.word	0x40012c00
 80078f8:	40021000 	.word	0x40021000

080078fc <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b08a      	sub	sp, #40	@ 0x28
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007904:	f107 0314 	add.w	r3, r7, #20
 8007908:	2200      	movs	r2, #0
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	605a      	str	r2, [r3, #4]
 800790e:	609a      	str	r2, [r3, #8]
 8007910:	60da      	str	r2, [r3, #12]
 8007912:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800791c:	d128      	bne.n	8007970 <HAL_TIM_IC_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800791e:	4b16      	ldr	r3, [pc, #88]	@ (8007978 <HAL_TIM_IC_MspInit+0x7c>)
 8007920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007922:	4a15      	ldr	r2, [pc, #84]	@ (8007978 <HAL_TIM_IC_MspInit+0x7c>)
 8007924:	f043 0301 	orr.w	r3, r3, #1
 8007928:	6593      	str	r3, [r2, #88]	@ 0x58
 800792a:	4b13      	ldr	r3, [pc, #76]	@ (8007978 <HAL_TIM_IC_MspInit+0x7c>)
 800792c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	613b      	str	r3, [r7, #16]
 8007934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007936:	4b10      	ldr	r3, [pc, #64]	@ (8007978 <HAL_TIM_IC_MspInit+0x7c>)
 8007938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800793a:	4a0f      	ldr	r2, [pc, #60]	@ (8007978 <HAL_TIM_IC_MspInit+0x7c>)
 800793c:	f043 0301 	orr.w	r3, r3, #1
 8007940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007942:	4b0d      	ldr	r3, [pc, #52]	@ (8007978 <HAL_TIM_IC_MspInit+0x7c>)
 8007944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	60fb      	str	r3, [r7, #12]
 800794c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800794e:	2320      	movs	r3, #32
 8007950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007952:	2302      	movs	r3, #2
 8007954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007956:	2301      	movs	r3, #1
 8007958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800795a:	2300      	movs	r3, #0
 800795c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800795e:	2301      	movs	r3, #1
 8007960:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007962:	f107 0314 	add.w	r3, r7, #20
 8007966:	4619      	mov	r1, r3
 8007968:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800796c:	f006 fb8c 	bl	800e088 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8007970:	bf00      	nop
 8007972:	3728      	adds	r7, #40	@ 0x28
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	40021000 	.word	0x40021000

0800797c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a13      	ldr	r2, [pc, #76]	@ (80079d8 <HAL_TIM_Base_MspInit+0x5c>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d10c      	bne.n	80079a8 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800798e:	4b13      	ldr	r3, [pc, #76]	@ (80079dc <HAL_TIM_Base_MspInit+0x60>)
 8007990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007992:	4a12      	ldr	r2, [pc, #72]	@ (80079dc <HAL_TIM_Base_MspInit+0x60>)
 8007994:	f043 0302 	orr.w	r3, r3, #2
 8007998:	6593      	str	r3, [r2, #88]	@ 0x58
 800799a:	4b10      	ldr	r3, [pc, #64]	@ (80079dc <HAL_TIM_Base_MspInit+0x60>)
 800799c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800799e:	f003 0302 	and.w	r3, r3, #2
 80079a2:	60fb      	str	r3, [r7, #12]
 80079a4:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80079a6:	e010      	b.n	80079ca <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a0c      	ldr	r2, [pc, #48]	@ (80079e0 <HAL_TIM_Base_MspInit+0x64>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d10b      	bne.n	80079ca <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80079b2:	4b0a      	ldr	r3, [pc, #40]	@ (80079dc <HAL_TIM_Base_MspInit+0x60>)
 80079b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079b6:	4a09      	ldr	r2, [pc, #36]	@ (80079dc <HAL_TIM_Base_MspInit+0x60>)
 80079b8:	f043 0304 	orr.w	r3, r3, #4
 80079bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80079be:	4b07      	ldr	r3, [pc, #28]	@ (80079dc <HAL_TIM_Base_MspInit+0x60>)
 80079c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079c2:	f003 0304 	and.w	r3, r3, #4
 80079c6:	60bb      	str	r3, [r7, #8]
 80079c8:	68bb      	ldr	r3, [r7, #8]
}
 80079ca:	bf00      	nop
 80079cc:	3714      	adds	r7, #20
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	40000400 	.word	0x40000400
 80079dc:	40021000 	.word	0x40021000
 80079e0:	40000800 	.word	0x40000800

080079e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b08a      	sub	sp, #40	@ 0x28
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079ec:	f107 0314 	add.w	r3, r7, #20
 80079f0:	2200      	movs	r2, #0
 80079f2:	601a      	str	r2, [r3, #0]
 80079f4:	605a      	str	r2, [r3, #4]
 80079f6:	609a      	str	r2, [r3, #8]
 80079f8:	60da      	str	r2, [r3, #12]
 80079fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a23      	ldr	r2, [pc, #140]	@ (8007a90 <HAL_TIM_MspPostInit+0xac>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d11e      	bne.n	8007a44 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a06:	4b23      	ldr	r3, [pc, #140]	@ (8007a94 <HAL_TIM_MspPostInit+0xb0>)
 8007a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a0a:	4a22      	ldr	r2, [pc, #136]	@ (8007a94 <HAL_TIM_MspPostInit+0xb0>)
 8007a0c:	f043 0301 	orr.w	r3, r3, #1
 8007a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a12:	4b20      	ldr	r3, [pc, #128]	@ (8007a94 <HAL_TIM_MspPostInit+0xb0>)
 8007a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	613b      	str	r3, [r7, #16]
 8007a1c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8007a1e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8007a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a24:	2302      	movs	r3, #2
 8007a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007a30:	2301      	movs	r3, #1
 8007a32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a34:	f107 0314 	add.w	r3, r7, #20
 8007a38:	4619      	mov	r1, r3
 8007a3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007a3e:	f006 fb23 	bl	800e088 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8007a42:	e021      	b.n	8007a88 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a13      	ldr	r2, [pc, #76]	@ (8007a98 <HAL_TIM_MspPostInit+0xb4>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d11c      	bne.n	8007a88 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a4e:	4b11      	ldr	r3, [pc, #68]	@ (8007a94 <HAL_TIM_MspPostInit+0xb0>)
 8007a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a52:	4a10      	ldr	r2, [pc, #64]	@ (8007a94 <HAL_TIM_MspPostInit+0xb0>)
 8007a54:	f043 0304 	orr.w	r3, r3, #4
 8007a58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8007a94 <HAL_TIM_MspPostInit+0xb0>)
 8007a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a5e:	f003 0304 	and.w	r3, r3, #4
 8007a62:	60fb      	str	r3, [r7, #12]
 8007a64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007a66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a70:	2300      	movs	r3, #0
 8007a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a74:	2300      	movs	r3, #0
 8007a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007a78:	2302      	movs	r3, #2
 8007a7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a7c:	f107 0314 	add.w	r3, r7, #20
 8007a80:	4619      	mov	r1, r3
 8007a82:	4806      	ldr	r0, [pc, #24]	@ (8007a9c <HAL_TIM_MspPostInit+0xb8>)
 8007a84:	f006 fb00 	bl	800e088 <HAL_GPIO_Init>
}
 8007a88:	bf00      	nop
 8007a8a:	3728      	adds	r7, #40	@ 0x28
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	40012c00 	.word	0x40012c00
 8007a94:	40021000 	.word	0x40021000
 8007a98:	40000400 	.word	0x40000400
 8007a9c:	48000800 	.word	0x48000800

08007aa0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b0ae      	sub	sp, #184	@ 0xb8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007aa8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8007aac:	2200      	movs	r2, #0
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	605a      	str	r2, [r3, #4]
 8007ab2:	609a      	str	r2, [r3, #8]
 8007ab4:	60da      	str	r2, [r3, #12]
 8007ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007ab8:	f107 031c 	add.w	r3, r7, #28
 8007abc:	2288      	movs	r2, #136	@ 0x88
 8007abe:	2100      	movs	r1, #0
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f00e fb75 	bl	80161b0 <memset>
  if(huart->Instance==UART4)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a6b      	ldr	r2, [pc, #428]	@ (8007c78 <HAL_UART_MspInit+0x1d8>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d13c      	bne.n	8007b4a <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8007ad0:	2308      	movs	r3, #8
 8007ad2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007ad8:	f107 031c 	add.w	r3, r7, #28
 8007adc:	4618      	mov	r0, r3
 8007ade:	f008 fd5b 	bl	8010598 <HAL_RCCEx_PeriphCLKConfig>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d001      	beq.n	8007aec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8007ae8:	f7fd fc92 	bl	8005410 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007aec:	4b63      	ldr	r3, [pc, #396]	@ (8007c7c <HAL_UART_MspInit+0x1dc>)
 8007aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007af0:	4a62      	ldr	r2, [pc, #392]	@ (8007c7c <HAL_UART_MspInit+0x1dc>)
 8007af2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007af6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007af8:	4b60      	ldr	r3, [pc, #384]	@ (8007c7c <HAL_UART_MspInit+0x1dc>)
 8007afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007afc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b00:	61bb      	str	r3, [r7, #24]
 8007b02:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b04:	4b5d      	ldr	r3, [pc, #372]	@ (8007c7c <HAL_UART_MspInit+0x1dc>)
 8007b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b08:	4a5c      	ldr	r2, [pc, #368]	@ (8007c7c <HAL_UART_MspInit+0x1dc>)
 8007b0a:	f043 0301 	orr.w	r3, r3, #1
 8007b0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007b10:	4b5a      	ldr	r3, [pc, #360]	@ (8007c7c <HAL_UART_MspInit+0x1dc>)
 8007b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	617b      	str	r3, [r7, #20]
 8007b1a:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007b22:	2312      	movs	r3, #18
 8007b24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007b34:	2308      	movs	r3, #8
 8007b36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b3a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8007b3e:	4619      	mov	r1, r3
 8007b40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007b44:	f006 faa0 	bl	800e088 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8007b48:	e092      	b.n	8007c70 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART1)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a4c      	ldr	r2, [pc, #304]	@ (8007c80 <HAL_UART_MspInit+0x1e0>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	f040 808d 	bne.w	8007c70 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007b56:	2301      	movs	r3, #1
 8007b58:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007b5e:	f107 031c 	add.w	r3, r7, #28
 8007b62:	4618      	mov	r0, r3
 8007b64:	f008 fd18 	bl	8010598 <HAL_RCCEx_PeriphCLKConfig>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8007b6e:	f7fd fc4f 	bl	8005410 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8007b72:	4b42      	ldr	r3, [pc, #264]	@ (8007c7c <HAL_UART_MspInit+0x1dc>)
 8007b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b76:	4a41      	ldr	r2, [pc, #260]	@ (8007c7c <HAL_UART_MspInit+0x1dc>)
 8007b78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8007b7e:	4b3f      	ldr	r3, [pc, #252]	@ (8007c7c <HAL_UART_MspInit+0x1dc>)
 8007b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b86:	613b      	str	r3, [r7, #16]
 8007b88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b8a:	4b3c      	ldr	r3, [pc, #240]	@ (8007c7c <HAL_UART_MspInit+0x1dc>)
 8007b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b8e:	4a3b      	ldr	r2, [pc, #236]	@ (8007c7c <HAL_UART_MspInit+0x1dc>)
 8007b90:	f043 0302 	orr.w	r3, r3, #2
 8007b94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007b96:	4b39      	ldr	r3, [pc, #228]	@ (8007c7c <HAL_UART_MspInit+0x1dc>)
 8007b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	60fb      	str	r3, [r7, #12]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8007ba2:	23d8      	movs	r3, #216	@ 0xd8
 8007ba4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ba8:	2302      	movs	r3, #2
 8007baa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007bba:	2307      	movs	r3, #7
 8007bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007bc0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	482f      	ldr	r0, [pc, #188]	@ (8007c84 <HAL_UART_MspInit+0x1e4>)
 8007bc8:	f006 fa5e 	bl	800e088 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8007bcc:	4b2e      	ldr	r3, [pc, #184]	@ (8007c88 <HAL_UART_MspInit+0x1e8>)
 8007bce:	4a2f      	ldr	r2, [pc, #188]	@ (8007c8c <HAL_UART_MspInit+0x1ec>)
 8007bd0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8007bd2:	4b2d      	ldr	r3, [pc, #180]	@ (8007c88 <HAL_UART_MspInit+0x1e8>)
 8007bd4:	2202      	movs	r2, #2
 8007bd6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007bd8:	4b2b      	ldr	r3, [pc, #172]	@ (8007c88 <HAL_UART_MspInit+0x1e8>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007bde:	4b2a      	ldr	r3, [pc, #168]	@ (8007c88 <HAL_UART_MspInit+0x1e8>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007be4:	4b28      	ldr	r3, [pc, #160]	@ (8007c88 <HAL_UART_MspInit+0x1e8>)
 8007be6:	2280      	movs	r2, #128	@ 0x80
 8007be8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007bea:	4b27      	ldr	r3, [pc, #156]	@ (8007c88 <HAL_UART_MspInit+0x1e8>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007bf0:	4b25      	ldr	r3, [pc, #148]	@ (8007c88 <HAL_UART_MspInit+0x1e8>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8007bf6:	4b24      	ldr	r3, [pc, #144]	@ (8007c88 <HAL_UART_MspInit+0x1e8>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007bfc:	4b22      	ldr	r3, [pc, #136]	@ (8007c88 <HAL_UART_MspInit+0x1e8>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007c02:	4821      	ldr	r0, [pc, #132]	@ (8007c88 <HAL_UART_MspInit+0x1e8>)
 8007c04:	f005 f93a 	bl	800ce7c <HAL_DMA_Init>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <HAL_UART_MspInit+0x172>
      Error_Handler();
 8007c0e:	f7fd fbff 	bl	8005410 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a1c      	ldr	r2, [pc, #112]	@ (8007c88 <HAL_UART_MspInit+0x1e8>)
 8007c16:	675a      	str	r2, [r3, #116]	@ 0x74
 8007c18:	4a1b      	ldr	r2, [pc, #108]	@ (8007c88 <HAL_UART_MspInit+0x1e8>)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8007c90 <HAL_UART_MspInit+0x1f0>)
 8007c20:	4a1c      	ldr	r2, [pc, #112]	@ (8007c94 <HAL_UART_MspInit+0x1f4>)
 8007c22:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8007c24:	4b1a      	ldr	r3, [pc, #104]	@ (8007c90 <HAL_UART_MspInit+0x1f0>)
 8007c26:	2202      	movs	r2, #2
 8007c28:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007c2a:	4b19      	ldr	r3, [pc, #100]	@ (8007c90 <HAL_UART_MspInit+0x1f0>)
 8007c2c:	2210      	movs	r2, #16
 8007c2e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c30:	4b17      	ldr	r3, [pc, #92]	@ (8007c90 <HAL_UART_MspInit+0x1f0>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007c36:	4b16      	ldr	r3, [pc, #88]	@ (8007c90 <HAL_UART_MspInit+0x1f0>)
 8007c38:	2280      	movs	r2, #128	@ 0x80
 8007c3a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007c3c:	4b14      	ldr	r3, [pc, #80]	@ (8007c90 <HAL_UART_MspInit+0x1f0>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007c42:	4b13      	ldr	r3, [pc, #76]	@ (8007c90 <HAL_UART_MspInit+0x1f0>)
 8007c44:	2200      	movs	r2, #0
 8007c46:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8007c48:	4b11      	ldr	r3, [pc, #68]	@ (8007c90 <HAL_UART_MspInit+0x1f0>)
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007c4e:	4b10      	ldr	r3, [pc, #64]	@ (8007c90 <HAL_UART_MspInit+0x1f0>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007c54:	480e      	ldr	r0, [pc, #56]	@ (8007c90 <HAL_UART_MspInit+0x1f0>)
 8007c56:	f005 f911 	bl	800ce7c <HAL_DMA_Init>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d001      	beq.n	8007c64 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8007c60:	f7fd fbd6 	bl	8005410 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a0a      	ldr	r2, [pc, #40]	@ (8007c90 <HAL_UART_MspInit+0x1f0>)
 8007c68:	671a      	str	r2, [r3, #112]	@ 0x70
 8007c6a:	4a09      	ldr	r2, [pc, #36]	@ (8007c90 <HAL_UART_MspInit+0x1f0>)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8007c70:	bf00      	nop
 8007c72:	37b8      	adds	r7, #184	@ 0xb8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	40004c00 	.word	0x40004c00
 8007c7c:	40021000 	.word	0x40021000
 8007c80:	40013800 	.word	0x40013800
 8007c84:	48000400 	.word	0x48000400
 8007c88:	200007ac 	.word	0x200007ac
 8007c8c:	40020058 	.word	0x40020058
 8007c90:	200007f4 	.word	0x200007f4
 8007c94:	40020044 	.word	0x40020044

08007c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007c9c:	bf00      	nop
 8007c9e:	e7fd      	b.n	8007c9c <NMI_Handler+0x4>

08007ca0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007ca4:	bf00      	nop
 8007ca6:	e7fd      	b.n	8007ca4 <HardFault_Handler+0x4>

08007ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007cac:	bf00      	nop
 8007cae:	e7fd      	b.n	8007cac <MemManage_Handler+0x4>

08007cb0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007cb4:	bf00      	nop
 8007cb6:	e7fd      	b.n	8007cb4 <BusFault_Handler+0x4>

08007cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007cbc:	bf00      	nop
 8007cbe:	e7fd      	b.n	8007cbc <UsageFault_Handler+0x4>

08007cc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007cc4:	bf00      	nop
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007cd2:	bf00      	nop
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007ce0:	bf00      	nop
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007cee:	f003 f983 	bl	800aff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007cf2:	bf00      	nop
 8007cf4:	bd80      	pop	{r7, pc}
	...

08007cf8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007cfc:	4802      	ldr	r0, [pc, #8]	@ (8007d08 <DMA1_Channel1_IRQHandler+0x10>)
 8007cfe:	f005 fa13 	bl	800d128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007d02:	bf00      	nop
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	2000037c 	.word	0x2000037c

08007d0c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8007d10:	4802      	ldr	r0, [pc, #8]	@ (8007d1c <DMA1_Channel4_IRQHandler+0x10>)
 8007d12:	f005 fa09 	bl	800d128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8007d16:	bf00      	nop
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	200007f4 	.word	0x200007f4

08007d20 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007d24:	4802      	ldr	r0, [pc, #8]	@ (8007d30 <DMA1_Channel5_IRQHandler+0x10>)
 8007d26:	f005 f9ff 	bl	800d128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8007d2a:	bf00      	nop
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	200007ac 	.word	0x200007ac

08007d34 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8007d38:	4802      	ldr	r0, [pc, #8]	@ (8007d44 <RTC_Alarm_IRQHandler+0x10>)
 8007d3a:	f009 fc2d 	bl	8011598 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8007d3e:	bf00      	nop
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20000480 	.word	0x20000480

08007d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007d50:	4a14      	ldr	r2, [pc, #80]	@ (8007da4 <_sbrk+0x5c>)
 8007d52:	4b15      	ldr	r3, [pc, #84]	@ (8007da8 <_sbrk+0x60>)
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007d5c:	4b13      	ldr	r3, [pc, #76]	@ (8007dac <_sbrk+0x64>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d102      	bne.n	8007d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007d64:	4b11      	ldr	r3, [pc, #68]	@ (8007dac <_sbrk+0x64>)
 8007d66:	4a12      	ldr	r2, [pc, #72]	@ (8007db0 <_sbrk+0x68>)
 8007d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007d6a:	4b10      	ldr	r3, [pc, #64]	@ (8007dac <_sbrk+0x64>)
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4413      	add	r3, r2
 8007d72:	693a      	ldr	r2, [r7, #16]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d207      	bcs.n	8007d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007d78:	f00e fa6a 	bl	8016250 <__errno>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	220c      	movs	r2, #12
 8007d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007d82:	f04f 33ff 	mov.w	r3, #4294967295
 8007d86:	e009      	b.n	8007d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007d88:	4b08      	ldr	r3, [pc, #32]	@ (8007dac <_sbrk+0x64>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007d8e:	4b07      	ldr	r3, [pc, #28]	@ (8007dac <_sbrk+0x64>)
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4413      	add	r3, r2
 8007d96:	4a05      	ldr	r2, [pc, #20]	@ (8007dac <_sbrk+0x64>)
 8007d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3718      	adds	r7, #24
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	20018000 	.word	0x20018000
 8007da8:	00000400 	.word	0x00000400
 8007dac:	20005a00 	.word	0x20005a00
 8007db0:	20005b60 	.word	0x20005b60

08007db4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8007db4:	b480      	push	{r7}
 8007db6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8007db8:	4b06      	ldr	r3, [pc, #24]	@ (8007dd4 <SystemInit+0x20>)
 8007dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dbe:	4a05      	ldr	r2, [pc, #20]	@ (8007dd4 <SystemInit+0x20>)
 8007dc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007dc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8007dc8:	bf00      	nop
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	e000ed00 	.word	0xe000ed00

08007dd8 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	4603      	mov	r3, r0
 8007de0:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;

	switch (pdrv) {
 8007de2:	79fb      	ldrb	r3, [r7, #7]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d002      	beq.n	8007dee <disk_status+0x16>
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d00c      	beq.n	8007e06 <disk_status+0x2e>
 8007dec:	e017      	b.n	8007e1e <disk_status+0x46>
	case DEV_RAM :

		if(!psram_is_initialized())
 8007dee:	f7ff fa9b 	bl	8007328 <psram_is_initialized>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d102      	bne.n	8007dfe <disk_status+0x26>
		{
			stat = STA_NOINIT;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	73fb      	strb	r3, [r7, #15]
 8007dfc:	e001      	b.n	8007e02 <disk_status+0x2a>
		}else{
			stat = 0;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
 8007e04:	e00c      	b.n	8007e20 <disk_status+0x48>

	case DEV_MMC :

		if(!extflash_is_initialized())
 8007e06:	f7fb f977 	bl	80030f8 <extflash_is_initialized>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d102      	bne.n	8007e16 <disk_status+0x3e>
		{
			stat = STA_NOINIT;
 8007e10:	2301      	movs	r3, #1
 8007e12:	73fb      	strb	r3, [r7, #15]
 8007e14:	e001      	b.n	8007e1a <disk_status+0x42>
		}else{
			stat = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
 8007e1c:	e000      	b.n	8007e20 <disk_status+0x48>

	}
	return STA_NOINIT;
 8007e1e:	2301      	movs	r3, #1
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	4603      	mov	r3, r0
 8007e30:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;
	switch (pdrv) {
 8007e32:	79fb      	ldrb	r3, [r7, #7]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d002      	beq.n	8007e3e <disk_initialize+0x16>
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d00c      	beq.n	8007e56 <disk_initialize+0x2e>
 8007e3c:	e017      	b.n	8007e6e <disk_initialize+0x46>
	case DEV_RAM :

		if(psram_init() < 0)
 8007e3e:	f7ff faa1 	bl	8007384 <psram_init>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	da02      	bge.n	8007e4e <disk_initialize+0x26>
		{
			stat = STA_NODISK;
 8007e48:	2302      	movs	r3, #2
 8007e4a:	73fb      	strb	r3, [r7, #15]
 8007e4c:	e001      	b.n	8007e52 <disk_initialize+0x2a>
		}else{
			stat = 0;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
 8007e54:	e00c      	b.n	8007e70 <disk_initialize+0x48>

	case DEV_MMC :

		if(extflash_init() < 0)
 8007e56:	f7fb f95b 	bl	8003110 <extflash_init>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	da02      	bge.n	8007e66 <disk_initialize+0x3e>
		{
			stat = STA_NODISK;
 8007e60:	2302      	movs	r3, #2
 8007e62:	73fb      	strb	r3, [r7, #15]
 8007e64:	e001      	b.n	8007e6a <disk_initialize+0x42>
		}else{
			stat = 0;
 8007e66:	2300      	movs	r3, #0
 8007e68:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
 8007e6c:	e000      	b.n	8007e70 <disk_initialize+0x48>

	}
	return STA_NOINIT;
 8007e6e:	2301      	movs	r3, #1
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60b9      	str	r1, [r7, #8]
 8007e80:	607a      	str	r2, [r7, #4]
 8007e82:	603b      	str	r3, [r7, #0]
 8007e84:	4603      	mov	r3, r0
 8007e86:	73fb      	strb	r3, [r7, #15]
	DRESULT res;
	int result;

	switch (pdrv) {
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d002      	beq.n	8007e94 <disk_read+0x1c>
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d010      	beq.n	8007eb4 <disk_read+0x3c>
 8007e92:	e01e      	b.n	8007ed2 <disk_read+0x5a>
	case DEV_RAM :

		if(psram_sector_read_write(0, sector, count, buff) < 0)
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	683a      	ldr	r2, [r7, #0]
 8007e98:	6879      	ldr	r1, [r7, #4]
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	f7ff f94a 	bl	8007134 <psram_sector_read_write>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	da02      	bge.n	8007eac <disk_read+0x34>
		{
			res = RES_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	75fb      	strb	r3, [r7, #23]
 8007eaa:	e001      	b.n	8007eb0 <disk_read+0x38>
		}else{

			res = 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007eb0:	7dfb      	ldrb	r3, [r7, #23]
 8007eb2:	e00f      	b.n	8007ed4 <disk_read+0x5c>

	case DEV_MMC :

		if(extflash_sector_read(sector, count, buff) < 0)
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f7fb f801 	bl	8002ec0 <extflash_sector_read>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	da02      	bge.n	8007eca <disk_read+0x52>
		{
			res = RES_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	75fb      	strb	r3, [r7, #23]
 8007ec8:	e001      	b.n	8007ece <disk_read+0x56>
		}else{

			res = 0;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007ece:	7dfb      	ldrb	r3, [r7, #23]
 8007ed0:	e000      	b.n	8007ed4 <disk_read+0x5c>

	}

	return RES_PARERR;
 8007ed2:	2304      	movs	r3, #4
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3718      	adds	r7, #24
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60b9      	str	r1, [r7, #8]
 8007ee4:	607a      	str	r2, [r7, #4]
 8007ee6:	603b      	str	r3, [r7, #0]
 8007ee8:	4603      	mov	r3, r0
 8007eea:	73fb      	strb	r3, [r7, #15]
	DRESULT res = RES_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	75fb      	strb	r3, [r7, #23]

	switch (pdrv) {
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d002      	beq.n	8007efc <disk_write+0x20>
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d010      	beq.n	8007f1c <disk_write+0x40>
 8007efa:	e01e      	b.n	8007f3a <disk_write+0x5e>
	case DEV_RAM :

		if(psram_sector_read_write(1, sector, count, (const uint8_t *)buff) < 0)
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	6879      	ldr	r1, [r7, #4]
 8007f02:	2001      	movs	r0, #1
 8007f04:	f7ff f916 	bl	8007134 <psram_sector_read_write>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	da02      	bge.n	8007f14 <disk_write+0x38>
		{
			res = RES_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	75fb      	strb	r3, [r7, #23]
 8007f12:	e001      	b.n	8007f18 <disk_write+0x3c>
		}else{

			res = 0;
 8007f14:	2300      	movs	r3, #0
 8007f16:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007f18:	7dfb      	ldrb	r3, [r7, #23]
 8007f1a:	e00f      	b.n	8007f3c <disk_write+0x60>

	case DEV_MMC :

		if(extflash_sector_write(sector, count, buff) < 0)
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7fb f862 	bl	8002fea <extflash_sector_write>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	da02      	bge.n	8007f32 <disk_write+0x56>
		{
			res = RES_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	75fb      	strb	r3, [r7, #23]
 8007f30:	e001      	b.n	8007f36 <disk_write+0x5a>
		}else{

			res = 0;
 8007f32:	2300      	movs	r3, #0
 8007f34:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007f36:	7dfb      	ldrb	r3, [r7, #23]
 8007f38:	e000      	b.n	8007f3c <disk_write+0x60>

	}

	return RES_PARERR;
 8007f3a:	2304      	movs	r3, #4
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3718      	adds	r7, #24
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	603a      	str	r2, [r7, #0]
 8007f4e:	71fb      	strb	r3, [r7, #7]
 8007f50:	460b      	mov	r3, r1
 8007f52:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_PARERR;
 8007f54:	2304      	movs	r3, #4
 8007f56:	73fb      	strb	r3, [r7, #15]

	switch (pdrv) {
 8007f58:	79fb      	ldrb	r3, [r7, #7]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d002      	beq.n	8007f64 <disk_ioctl+0x20>
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d036      	beq.n	8007fd0 <disk_ioctl+0x8c>
 8007f62:	e06b      	b.n	800803c <disk_ioctl+0xf8>
	case DEV_RAM :

		if(!psram_is_initialized())return RES_NOTRDY;
 8007f64:	f7ff f9e0 	bl	8007328 <psram_is_initialized>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d101      	bne.n	8007f72 <disk_ioctl+0x2e>
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e065      	b.n	800803e <disk_ioctl+0xfa>

		switch(cmd)
 8007f72:	79bb      	ldrb	r3, [r7, #6]
 8007f74:	2b04      	cmp	r3, #4
 8007f76:	d826      	bhi.n	8007fc6 <disk_ioctl+0x82>
 8007f78:	a201      	add	r2, pc, #4	@ (adr r2, 8007f80 <disk_ioctl+0x3c>)
 8007f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7e:	bf00      	nop
 8007f80:	08007fc1 	.word	0x08007fc1
 8007f84:	08007f95 	.word	0x08007f95
 8007f88:	08007fa5 	.word	0x08007fa5
 8007f8c:	08007fb5 	.word	0x08007fb5
 8007f90:	08007fc1 	.word	0x08007fc1
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = psram_get_sector_count();
 8007f94:	f7ff f9de 	bl	8007354 <psram_get_sector_count>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	601a      	str	r2, [r3, #0]
				res = 0;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	73fb      	strb	r3, [r7, #15]
				break;
 8007fa2:	e013      	b.n	8007fcc <disk_ioctl+0x88>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = psram_get_sector_size();
 8007fa4:	f7ff f9cc 	bl	8007340 <psram_get_sector_size>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	601a      	str	r2, [r3, #0]
				res = 0;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	73fb      	strb	r3, [r7, #15]
				break;
 8007fb2:	e00b      	b.n	8007fcc <disk_ioctl+0x88>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	601a      	str	r2, [r3, #0]
				res = 0;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	73fb      	strb	r3, [r7, #15]
				break;
 8007fbe:	e005      	b.n	8007fcc <disk_ioctl+0x88>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	73fb      	strb	r3, [r7, #15]
				break;
 8007fc4:	e002      	b.n	8007fcc <disk_ioctl+0x88>

			default:
				res = RES_PARERR;
 8007fc6:	2304      	movs	r3, #4
 8007fc8:	73fb      	strb	r3, [r7, #15]
				break;
 8007fca:	bf00      	nop
		}

		return res;
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
 8007fce:	e036      	b.n	800803e <disk_ioctl+0xfa>

	case DEV_MMC :

		if(!extflash_is_initialized())return RES_NOTRDY;
 8007fd0:	f7fb f892 	bl	80030f8 <extflash_is_initialized>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <disk_ioctl+0x9a>
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e02f      	b.n	800803e <disk_ioctl+0xfa>

		switch(cmd)
 8007fde:	79bb      	ldrb	r3, [r7, #6]
 8007fe0:	2b04      	cmp	r3, #4
 8007fe2:	d826      	bhi.n	8008032 <disk_ioctl+0xee>
 8007fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8007fec <disk_ioctl+0xa8>)
 8007fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fea:	bf00      	nop
 8007fec:	0800802d 	.word	0x0800802d
 8007ff0:	08008001 	.word	0x08008001
 8007ff4:	08008011 	.word	0x08008011
 8007ff8:	08008021 	.word	0x08008021
 8007ffc:	0800802d 	.word	0x0800802d
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = extflash_get_sector_count();
 8008000:	f7fb f86e 	bl	80030e0 <extflash_get_sector_count>
 8008004:	4602      	mov	r2, r0
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	601a      	str	r2, [r3, #0]
				res = 0;
 800800a:	2300      	movs	r3, #0
 800800c:	73fb      	strb	r3, [r7, #15]
				break;
 800800e:	e013      	b.n	8008038 <disk_ioctl+0xf4>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = extflash_get_sector_size();
 8008010:	f7fb f85d 	bl	80030ce <extflash_get_sector_size>
 8008014:	4602      	mov	r2, r0
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	601a      	str	r2, [r3, #0]
				res = 0;
 800801a:	2300      	movs	r3, #0
 800801c:	73fb      	strb	r3, [r7, #15]
				break;
 800801e:	e00b      	b.n	8008038 <disk_ioctl+0xf4>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	2201      	movs	r2, #1
 8008024:	601a      	str	r2, [r3, #0]
				res = 0;
 8008026:	2300      	movs	r3, #0
 8008028:	73fb      	strb	r3, [r7, #15]
				break;
 800802a:	e005      	b.n	8008038 <disk_ioctl+0xf4>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 800802c:	2300      	movs	r3, #0
 800802e:	73fb      	strb	r3, [r7, #15]
				break;
 8008030:	e002      	b.n	8008038 <disk_ioctl+0xf4>

			default:
				res = RES_PARERR;
 8008032:	2304      	movs	r3, #4
 8008034:	73fb      	strb	r3, [r7, #15]
				break;
 8008036:	bf00      	nop
		}

		return res;
 8008038:	7bfb      	ldrb	r3, [r7, #15]
 800803a:	e000      	b.n	800803e <disk_ioctl+0xfa>

	}

	return RES_PARERR;
 800803c:	2304      	movs	r3, #4
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop

08008048 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	3301      	adds	r3, #1
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008058:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800805c:	021b      	lsls	r3, r3, #8
 800805e:	b21a      	sxth	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	b21b      	sxth	r3, r3
 8008066:	4313      	orrs	r3, r2
 8008068:	b21b      	sxth	r3, r3
 800806a:	81fb      	strh	r3, [r7, #14]
	return rv;
 800806c:	89fb      	ldrh	r3, [r7, #14]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3714      	adds	r7, #20
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr

0800807a <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800807a:	b480      	push	{r7}
 800807c:	b085      	sub	sp, #20
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	3303      	adds	r3, #3
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	021b      	lsls	r3, r3, #8
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	3202      	adds	r2, #2
 8008092:	7812      	ldrb	r2, [r2, #0]
 8008094:	4313      	orrs	r3, r2
 8008096:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	021b      	lsls	r3, r3, #8
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	3201      	adds	r2, #1
 80080a0:	7812      	ldrb	r2, [r2, #0]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	021b      	lsls	r3, r3, #8
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	7812      	ldrb	r2, [r2, #0]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	60fb      	str	r3, [r7, #12]
	return rv;
 80080b2:	68fb      	ldr	r3, [r7, #12]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	460b      	mov	r3, r1
 80080ca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	1c5a      	adds	r2, r3, #1
 80080d0:	607a      	str	r2, [r7, #4]
 80080d2:	887a      	ldrh	r2, [r7, #2]
 80080d4:	b2d2      	uxtb	r2, r2
 80080d6:	701a      	strb	r2, [r3, #0]
 80080d8:	887b      	ldrh	r3, [r7, #2]
 80080da:	0a1b      	lsrs	r3, r3, #8
 80080dc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	1c5a      	adds	r2, r3, #1
 80080e2:	607a      	str	r2, [r7, #4]
 80080e4:	887a      	ldrh	r2, [r7, #2]
 80080e6:	b2d2      	uxtb	r2, r2
 80080e8:	701a      	strb	r2, [r3, #0]
}
 80080ea:	bf00      	nop
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80080f6:	b480      	push	{r7}
 80080f8:	b083      	sub	sp, #12
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	1c5a      	adds	r2, r3, #1
 8008104:	607a      	str	r2, [r7, #4]
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	b2d2      	uxtb	r2, r2
 800810a:	701a      	strb	r2, [r3, #0]
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	0a1b      	lsrs	r3, r3, #8
 8008110:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	1c5a      	adds	r2, r3, #1
 8008116:	607a      	str	r2, [r7, #4]
 8008118:	683a      	ldr	r2, [r7, #0]
 800811a:	b2d2      	uxtb	r2, r2
 800811c:	701a      	strb	r2, [r3, #0]
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	0a1b      	lsrs	r3, r3, #8
 8008122:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	1c5a      	adds	r2, r3, #1
 8008128:	607a      	str	r2, [r7, #4]
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	b2d2      	uxtb	r2, r2
 800812e:	701a      	strb	r2, [r3, #0]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	0a1b      	lsrs	r3, r3, #8
 8008134:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	607a      	str	r2, [r7, #4]
 800813c:	683a      	ldr	r2, [r7, #0]
 800813e:	b2d2      	uxtb	r2, r2
 8008140:	701a      	strb	r2, [r3, #0]
}
 8008142:	bf00      	nop
 8008144:	370c      	adds	r7, #12
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	4603      	mov	r3, r0
 8008156:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8008158:	79fb      	ldrb	r3, [r7, #7]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d001      	beq.n	8008162 <dbc_1st+0x14>
 800815e:	2300      	movs	r3, #0
 8008160:	e000      	b.n	8008164 <dbc_1st+0x16>
#endif
	return 0;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	4603      	mov	r3, r0
 8008178:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 800817a:	79fb      	ldrb	r3, [r7, #7]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d001      	beq.n	8008184 <dbc_2nd+0x14>
 8008180:	2300      	movs	r3, #0
 8008182:	e000      	b.n	8008186 <dbc_2nd+0x16>
#endif
	return 0;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	370c      	adds	r7, #12
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b084      	sub	sp, #16
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 800819a:	2300      	movs	r3, #0
 800819c:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	791b      	ldrb	r3, [r3, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d02c      	beq.n	8008200 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	7858      	ldrb	r0, [r3, #1]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081b4:	2301      	movs	r3, #1
 80081b6:	f7ff fe91 	bl	8007edc <disk_write>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d11d      	bne.n	80081fc <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ce:	1ad2      	subs	r2, r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d213      	bcs.n	8008200 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	78db      	ldrb	r3, [r3, #3]
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d10f      	bne.n	8008200 <sync_window+0x6e>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	7858      	ldrb	r0, [r3, #1]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	69db      	ldr	r3, [r3, #28]
 80081f2:	441a      	add	r2, r3
 80081f4:	2301      	movs	r3, #1
 80081f6:	f7ff fe71 	bl	8007edc <disk_write>
 80081fa:	e001      	b.n	8008200 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8008200:	7bfb      	ldrb	r3, [r7, #15]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b084      	sub	sp, #16
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008214:	2300      	movs	r3, #0
 8008216:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800821c:	683a      	ldr	r2, [r7, #0]
 800821e:	429a      	cmp	r2, r3
 8008220:	d01b      	beq.n	800825a <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7ff ffb5 	bl	8008192 <sync_window>
 8008228:	4603      	mov	r3, r0
 800822a:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800822c:	7bfb      	ldrb	r3, [r7, #15]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d113      	bne.n	800825a <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	7858      	ldrb	r0, [r3, #1]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800823c:	2301      	movs	r3, #1
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	f7ff fe1a 	bl	8007e78 <disk_read>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d004      	beq.n	8008254 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 800824a:	f04f 33ff 	mov.w	r3, #4294967295
 800824e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008250:	2301      	movs	r3, #1
 8008252:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800825a:	7bfb      	ldrb	r3, [r7, #15]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f7ff ff90 	bl	8008192 <sync_window>
 8008272:	4603      	mov	r3, r0
 8008274:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008276:	7bfb      	ldrb	r3, [r7, #15]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d158      	bne.n	800832e <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	2b03      	cmp	r3, #3
 8008282:	d148      	bne.n	8008316 <sync_fs+0xb2>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	795b      	ldrb	r3, [r3, #5]
 8008288:	2b01      	cmp	r3, #1
 800828a:	d144      	bne.n	8008316 <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	3334      	adds	r3, #52	@ 0x34
 8008290:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008294:	2100      	movs	r1, #0
 8008296:	4618      	mov	r0, r3
 8008298:	f00d ff8a 	bl	80161b0 <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	3334      	adds	r3, #52	@ 0x34
 80082a0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80082a4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7ff ff09 	bl	80080c0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	3334      	adds	r3, #52	@ 0x34
 80082b2:	4921      	ldr	r1, [pc, #132]	@ (8008338 <sync_fs+0xd4>)
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7ff ff1e 	bl	80080f6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	3334      	adds	r3, #52	@ 0x34
 80082be:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80082c2:	491e      	ldr	r1, [pc, #120]	@ (800833c <sync_fs+0xd8>)
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7ff ff16 	bl	80080f6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	3334      	adds	r3, #52	@ 0x34
 80082ce:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	4619      	mov	r1, r3
 80082d8:	4610      	mov	r0, r2
 80082da:	f7ff ff0c 	bl	80080f6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	3334      	adds	r3, #52	@ 0x34
 80082e2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	4619      	mov	r1, r3
 80082ec:	4610      	mov	r0, r2
 80082ee:	f7ff ff02 	bl	80080f6 <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	1c5a      	adds	r2, r3, #1
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	7858      	ldrb	r0, [r3, #1]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800830a:	2301      	movs	r3, #1
 800830c:	f7ff fde6 	bl	8007edc <disk_write>
			fs->fsi_flag = 0;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	785b      	ldrb	r3, [r3, #1]
 800831a:	2200      	movs	r2, #0
 800831c:	2100      	movs	r1, #0
 800831e:	4618      	mov	r0, r3
 8008320:	f7ff fe10 	bl	8007f44 <disk_ioctl>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <sync_fs+0xca>
 800832a:	2301      	movs	r3, #1
 800832c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800832e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	41615252 	.word	0x41615252
 800833c:	61417272 	.word	0x61417272

08008340 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	3b02      	subs	r3, #2
 800834e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	3b02      	subs	r3, #2
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	429a      	cmp	r2, r3
 800835a:	d301      	bcc.n	8008360 <clst2sect+0x20>
 800835c:	2300      	movs	r3, #0
 800835e:	e008      	b.n	8008372 <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	895b      	ldrh	r3, [r3, #10]
 8008368:	4619      	mov	r1, r3
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	fb01 f303 	mul.w	r3, r1, r3
 8008370:	4413      	add	r3, r2
}
 8008372:	4618      	mov	r0, r3
 8008374:	370c      	adds	r7, #12
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr

0800837e <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b086      	sub	sp, #24
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d904      	bls.n	800839e <get_fat+0x20>
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	683a      	ldr	r2, [r7, #0]
 800839a:	429a      	cmp	r2, r3
 800839c:	d302      	bcc.n	80083a4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800839e:	2301      	movs	r3, #1
 80083a0:	617b      	str	r3, [r7, #20]
 80083a2:	e0ba      	b.n	800851a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80083a4:	f04f 33ff 	mov.w	r3, #4294967295
 80083a8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	2b03      	cmp	r3, #3
 80083b0:	f000 8082 	beq.w	80084b8 <get_fat+0x13a>
 80083b4:	2b03      	cmp	r3, #3
 80083b6:	f300 80a6 	bgt.w	8008506 <get_fat+0x188>
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d002      	beq.n	80083c4 <get_fat+0x46>
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d055      	beq.n	800846e <get_fat+0xf0>
 80083c2:	e0a0      	b.n	8008506 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	60fb      	str	r3, [r7, #12]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	085b      	lsrs	r3, r3, #1
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	4413      	add	r3, r2
 80083d0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	899b      	ldrh	r3, [r3, #12]
 80083da:	4619      	mov	r1, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	fbb3 f3f1 	udiv	r3, r3, r1
 80083e2:	4413      	add	r3, r2
 80083e4:	4619      	mov	r1, r3
 80083e6:	6938      	ldr	r0, [r7, #16]
 80083e8:	f7ff ff0f 	bl	800820a <move_window>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f040 808c 	bne.w	800850c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	1c5a      	adds	r2, r3, #1
 80083f8:	60fa      	str	r2, [r7, #12]
 80083fa:	693a      	ldr	r2, [r7, #16]
 80083fc:	8992      	ldrh	r2, [r2, #12]
 80083fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8008402:	fb01 f202 	mul.w	r2, r1, r2
 8008406:	1a9b      	subs	r3, r3, r2
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	4413      	add	r3, r2
 800840c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008410:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	899b      	ldrh	r3, [r3, #12]
 800841a:	4619      	mov	r1, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008422:	4413      	add	r3, r2
 8008424:	4619      	mov	r1, r3
 8008426:	6938      	ldr	r0, [r7, #16]
 8008428:	f7ff feef 	bl	800820a <move_window>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d16e      	bne.n	8008510 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	899b      	ldrh	r3, [r3, #12]
 8008436:	461a      	mov	r2, r3
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	fbb3 f1f2 	udiv	r1, r3, r2
 800843e:	fb01 f202 	mul.w	r2, r1, r2
 8008442:	1a9b      	subs	r3, r3, r2
 8008444:	693a      	ldr	r2, [r7, #16]
 8008446:	4413      	add	r3, r2
 8008448:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800844c:	021b      	lsls	r3, r3, #8
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	4313      	orrs	r3, r2
 8008452:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	2b00      	cmp	r3, #0
 800845c:	d002      	beq.n	8008464 <get_fat+0xe6>
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	091b      	lsrs	r3, r3, #4
 8008462:	e002      	b.n	800846a <get_fat+0xec>
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800846a:	617b      	str	r3, [r7, #20]
			break;
 800846c:	e055      	b.n	800851a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	899b      	ldrh	r3, [r3, #12]
 8008476:	085b      	lsrs	r3, r3, #1
 8008478:	b29b      	uxth	r3, r3
 800847a:	4619      	mov	r1, r3
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008482:	4413      	add	r3, r2
 8008484:	4619      	mov	r1, r3
 8008486:	6938      	ldr	r0, [r7, #16]
 8008488:	f7ff febf 	bl	800820a <move_window>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d140      	bne.n	8008514 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	005b      	lsls	r3, r3, #1
 800849c:	693a      	ldr	r2, [r7, #16]
 800849e:	8992      	ldrh	r2, [r2, #12]
 80084a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80084a4:	fb00 f202 	mul.w	r2, r0, r2
 80084a8:	1a9b      	subs	r3, r3, r2
 80084aa:	440b      	add	r3, r1
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7ff fdcb 	bl	8008048 <ld_word>
 80084b2:	4603      	mov	r3, r0
 80084b4:	617b      	str	r3, [r7, #20]
			break;
 80084b6:	e030      	b.n	800851a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	899b      	ldrh	r3, [r3, #12]
 80084c0:	089b      	lsrs	r3, r3, #2
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	4619      	mov	r1, r3
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80084cc:	4413      	add	r3, r2
 80084ce:	4619      	mov	r1, r3
 80084d0:	6938      	ldr	r0, [r7, #16]
 80084d2:	f7ff fe9a 	bl	800820a <move_window>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d11d      	bne.n	8008518 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	8992      	ldrh	r2, [r2, #12]
 80084ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80084ee:	fb00 f202 	mul.w	r2, r0, r2
 80084f2:	1a9b      	subs	r3, r3, r2
 80084f4:	440b      	add	r3, r1
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7ff fdbf 	bl	800807a <ld_dword>
 80084fc:	4603      	mov	r3, r0
 80084fe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008502:	617b      	str	r3, [r7, #20]
			break;
 8008504:	e009      	b.n	800851a <get_fat+0x19c>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 8008506:	2301      	movs	r3, #1
 8008508:	617b      	str	r3, [r7, #20]
 800850a:	e006      	b.n	800851a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800850c:	bf00      	nop
 800850e:	e004      	b.n	800851a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008510:	bf00      	nop
 8008512:	e002      	b.n	800851a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008514:	bf00      	nop
 8008516:	e000      	b.n	800851a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008518:	bf00      	nop
		}
	}

	return val;
 800851a:	697b      	ldr	r3, [r7, #20]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3718      	adds	r7, #24
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008524:	b590      	push	{r4, r7, lr}
 8008526:	b089      	sub	sp, #36	@ 0x24
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008530:	2302      	movs	r3, #2
 8008532:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	2b01      	cmp	r3, #1
 8008538:	f240 8109 	bls.w	800874e <put_fat+0x22a>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	699b      	ldr	r3, [r3, #24]
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	429a      	cmp	r2, r3
 8008544:	f080 8103 	bcs.w	800874e <put_fat+0x22a>
		switch (fs->fs_type) {
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	2b03      	cmp	r3, #3
 800854e:	f000 80b6 	beq.w	80086be <put_fat+0x19a>
 8008552:	2b03      	cmp	r3, #3
 8008554:	f300 80fb 	bgt.w	800874e <put_fat+0x22a>
 8008558:	2b01      	cmp	r3, #1
 800855a:	d003      	beq.n	8008564 <put_fat+0x40>
 800855c:	2b02      	cmp	r3, #2
 800855e:	f000 8083 	beq.w	8008668 <put_fat+0x144>
 8008562:	e0f4      	b.n	800874e <put_fat+0x22a>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	61bb      	str	r3, [r7, #24]
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	085b      	lsrs	r3, r3, #1
 800856c:	69ba      	ldr	r2, [r7, #24]
 800856e:	4413      	add	r3, r2
 8008570:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	899b      	ldrh	r3, [r3, #12]
 800857a:	4619      	mov	r1, r3
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008582:	4413      	add	r3, r2
 8008584:	4619      	mov	r1, r3
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f7ff fe3f 	bl	800820a <move_window>
 800858c:	4603      	mov	r3, r0
 800858e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008590:	7ffb      	ldrb	r3, [r7, #31]
 8008592:	2b00      	cmp	r3, #0
 8008594:	f040 80d4 	bne.w	8008740 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	1c5a      	adds	r2, r3, #1
 80085a2:	61ba      	str	r2, [r7, #24]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	8992      	ldrh	r2, [r2, #12]
 80085a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80085ac:	fb00 f202 	mul.w	r2, r0, r2
 80085b0:	1a9b      	subs	r3, r3, r2
 80085b2:	440b      	add	r3, r1
 80085b4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	f003 0301 	and.w	r3, r3, #1
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00d      	beq.n	80085dc <put_fat+0xb8>
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	b25b      	sxtb	r3, r3
 80085c6:	f003 030f 	and.w	r3, r3, #15
 80085ca:	b25a      	sxtb	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	b25b      	sxtb	r3, r3
 80085d0:	011b      	lsls	r3, r3, #4
 80085d2:	b25b      	sxtb	r3, r3
 80085d4:	4313      	orrs	r3, r2
 80085d6:	b25b      	sxtb	r3, r3
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	e001      	b.n	80085e0 <put_fat+0xbc>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2201      	movs	r2, #1
 80085e8:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	899b      	ldrh	r3, [r3, #12]
 80085f2:	4619      	mov	r1, r3
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80085fa:	4413      	add	r3, r2
 80085fc:	4619      	mov	r1, r3
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f7ff fe03 	bl	800820a <move_window>
 8008604:	4603      	mov	r3, r0
 8008606:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008608:	7ffb      	ldrb	r3, [r7, #31]
 800860a:	2b00      	cmp	r3, #0
 800860c:	f040 809a 	bne.w	8008744 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	899b      	ldrh	r3, [r3, #12]
 800861a:	461a      	mov	r2, r3
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008622:	fb00 f202 	mul.w	r2, r0, r2
 8008626:	1a9b      	subs	r3, r3, r2
 8008628:	440b      	add	r3, r1
 800862a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <put_fat+0x11a>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	091b      	lsrs	r3, r3, #4
 800863a:	b2db      	uxtb	r3, r3
 800863c:	e00e      	b.n	800865c <put_fat+0x138>
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	b25b      	sxtb	r3, r3
 8008644:	f023 030f 	bic.w	r3, r3, #15
 8008648:	b25a      	sxtb	r2, r3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	0a1b      	lsrs	r3, r3, #8
 800864e:	b25b      	sxtb	r3, r3
 8008650:	f003 030f 	and.w	r3, r3, #15
 8008654:	b25b      	sxtb	r3, r3
 8008656:	4313      	orrs	r3, r2
 8008658:	b25b      	sxtb	r3, r3
 800865a:	b2db      	uxtb	r3, r3
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2201      	movs	r2, #1
 8008664:	711a      	strb	r2, [r3, #4]
			break;
 8008666:	e072      	b.n	800874e <put_fat+0x22a>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	899b      	ldrh	r3, [r3, #12]
 8008670:	085b      	lsrs	r3, r3, #1
 8008672:	b29b      	uxth	r3, r3
 8008674:	4619      	mov	r1, r3
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	fbb3 f3f1 	udiv	r3, r3, r1
 800867c:	4413      	add	r3, r2
 800867e:	4619      	mov	r1, r3
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f7ff fdc2 	bl	800820a <move_window>
 8008686:	4603      	mov	r3, r0
 8008688:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800868a:	7ffb      	ldrb	r3, [r7, #31]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d15b      	bne.n	8008748 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	005b      	lsls	r3, r3, #1
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	8992      	ldrh	r2, [r2, #12]
 800869e:	fbb3 f0f2 	udiv	r0, r3, r2
 80086a2:	fb00 f202 	mul.w	r2, r0, r2
 80086a6:	1a9b      	subs	r3, r3, r2
 80086a8:	440b      	add	r3, r1
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	b292      	uxth	r2, r2
 80086ae:	4611      	mov	r1, r2
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7ff fd05 	bl	80080c0 <st_word>
			fs->wflag = 1;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2201      	movs	r2, #1
 80086ba:	711a      	strb	r2, [r3, #4]
			break;
 80086bc:	e047      	b.n	800874e <put_fat+0x22a>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	899b      	ldrh	r3, [r3, #12]
 80086c6:	089b      	lsrs	r3, r3, #2
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	4619      	mov	r1, r3
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80086d2:	4413      	add	r3, r2
 80086d4:	4619      	mov	r1, r3
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f7ff fd97 	bl	800820a <move_window>
 80086dc:	4603      	mov	r3, r0
 80086de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80086e0:	7ffb      	ldrb	r3, [r7, #31]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d132      	bne.n	800874c <put_fat+0x228>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	8992      	ldrh	r2, [r2, #12]
 80086fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80086fe:	fb00 f202 	mul.w	r2, r0, r2
 8008702:	1a9b      	subs	r3, r3, r2
 8008704:	440b      	add	r3, r1
 8008706:	4618      	mov	r0, r3
 8008708:	f7ff fcb7 	bl	800807a <ld_dword>
 800870c:	4603      	mov	r3, r0
 800870e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008712:	4323      	orrs	r3, r4
 8008714:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	8992      	ldrh	r2, [r2, #12]
 8008724:	fbb3 f0f2 	udiv	r0, r3, r2
 8008728:	fb00 f202 	mul.w	r2, r0, r2
 800872c:	1a9b      	subs	r3, r3, r2
 800872e:	440b      	add	r3, r1
 8008730:	6879      	ldr	r1, [r7, #4]
 8008732:	4618      	mov	r0, r3
 8008734:	f7ff fcdf 	bl	80080f6 <st_dword>
			fs->wflag = 1;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2201      	movs	r2, #1
 800873c:	711a      	strb	r2, [r3, #4]
			break;
 800873e:	e006      	b.n	800874e <put_fat+0x22a>
			if (res != FR_OK) break;
 8008740:	bf00      	nop
 8008742:	e004      	b.n	800874e <put_fat+0x22a>
			if (res != FR_OK) break;
 8008744:	bf00      	nop
 8008746:	e002      	b.n	800874e <put_fat+0x22a>
			if (res != FR_OK) break;
 8008748:	bf00      	nop
 800874a:	e000      	b.n	800874e <put_fat+0x22a>
			if (res != FR_OK) break;
 800874c:	bf00      	nop
		}
	}
	return res;
 800874e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3724      	adds	r7, #36	@ 0x24
 8008754:	46bd      	mov	sp, r7
 8008756:	bd90      	pop	{r4, r7, pc}

08008758 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b088      	sub	sp, #32
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008764:	2300      	movs	r3, #0
 8008766:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	2b01      	cmp	r3, #1
 8008772:	d904      	bls.n	800877e <remove_chain+0x26>
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	429a      	cmp	r2, r3
 800877c:	d301      	bcc.n	8008782 <remove_chain+0x2a>
 800877e:	2302      	movs	r3, #2
 8008780:	e04b      	b.n	800881a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00c      	beq.n	80087a2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008788:	f04f 32ff 	mov.w	r2, #4294967295
 800878c:	6879      	ldr	r1, [r7, #4]
 800878e:	69b8      	ldr	r0, [r7, #24]
 8008790:	f7ff fec8 	bl	8008524 <put_fat>
 8008794:	4603      	mov	r3, r0
 8008796:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008798:	7ffb      	ldrb	r3, [r7, #31]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <remove_chain+0x4a>
 800879e:	7ffb      	ldrb	r3, [r7, #31]
 80087a0:	e03b      	b.n	800881a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80087a2:	68b9      	ldr	r1, [r7, #8]
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f7ff fdea 	bl	800837e <get_fat>
 80087aa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d031      	beq.n	8008816 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d101      	bne.n	80087bc <remove_chain+0x64>
 80087b8:	2302      	movs	r3, #2
 80087ba:	e02e      	b.n	800881a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c2:	d101      	bne.n	80087c8 <remove_chain+0x70>
 80087c4:	2301      	movs	r3, #1
 80087c6:	e028      	b.n	800881a <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80087c8:	2200      	movs	r2, #0
 80087ca:	68b9      	ldr	r1, [r7, #8]
 80087cc:	69b8      	ldr	r0, [r7, #24]
 80087ce:	f7ff fea9 	bl	8008524 <put_fat>
 80087d2:	4603      	mov	r3, r0
 80087d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80087d6:	7ffb      	ldrb	r3, [r7, #31]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d001      	beq.n	80087e0 <remove_chain+0x88>
 80087dc:	7ffb      	ldrb	r3, [r7, #31]
 80087de:	e01c      	b.n	800881a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	695a      	ldr	r2, [r3, #20]
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	3b02      	subs	r3, #2
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d20b      	bcs.n	8008806 <remove_chain+0xae>
			fs->free_clst++;
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	1c5a      	adds	r2, r3, #1
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	795b      	ldrb	r3, [r3, #5]
 80087fc:	f043 0301 	orr.w	r3, r3, #1
 8008800:	b2da      	uxtb	r2, r3
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	715a      	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	429a      	cmp	r2, r3
 8008812:	d3c6      	bcc.n	80087a2 <remove_chain+0x4a>
 8008814:	e000      	b.n	8008818 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008816:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3720      	adds	r7, #32
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b088      	sub	sp, #32
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d10d      	bne.n	8008854 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d004      	beq.n	800884e <create_chain+0x2c>
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	699b      	ldr	r3, [r3, #24]
 8008848:	69ba      	ldr	r2, [r7, #24]
 800884a:	429a      	cmp	r2, r3
 800884c:	d31b      	bcc.n	8008886 <create_chain+0x64>
 800884e:	2301      	movs	r3, #1
 8008850:	61bb      	str	r3, [r7, #24]
 8008852:	e018      	b.n	8008886 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008854:	6839      	ldr	r1, [r7, #0]
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7ff fd91 	bl	800837e <get_fat>
 800885c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d801      	bhi.n	8008868 <create_chain+0x46>
 8008864:	2301      	movs	r3, #1
 8008866:	e0a9      	b.n	80089bc <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800886e:	d101      	bne.n	8008874 <create_chain+0x52>
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	e0a3      	b.n	80089bc <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	429a      	cmp	r2, r3
 800887c:	d201      	bcs.n	8008882 <create_chain+0x60>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	e09c      	b.n	80089bc <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <create_chain+0x70>
 800888e:	2300      	movs	r3, #0
 8008890:	e094      	b.n	80089bc <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8008892:	2300      	movs	r3, #0
 8008894:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8008896:	69ba      	ldr	r2, [r7, #24]
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	429a      	cmp	r2, r3
 800889c:	d129      	bne.n	80088f2 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	3301      	adds	r3, #1
 80088a2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	69fa      	ldr	r2, [r7, #28]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d301      	bcc.n	80088b2 <create_chain+0x90>
 80088ae:	2302      	movs	r3, #2
 80088b0:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 80088b2:	69f9      	ldr	r1, [r7, #28]
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f7ff fd62 	bl	800837e <get_fat>
 80088ba:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d003      	beq.n	80088ca <create_chain+0xa8>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c8:	d101      	bne.n	80088ce <create_chain+0xac>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	e076      	b.n	80089bc <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00e      	beq.n	80088f2 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d906      	bls.n	80088ee <create_chain+0xcc>
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d201      	bcs.n	80088ee <create_chain+0xcc>
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 80088ee:	2300      	movs	r3, #0
 80088f0:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d129      	bne.n	800894c <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	3301      	adds	r3, #1
 8008900:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	699b      	ldr	r3, [r3, #24]
 8008906:	69fa      	ldr	r2, [r7, #28]
 8008908:	429a      	cmp	r2, r3
 800890a:	d307      	bcc.n	800891c <create_chain+0xfa>
					ncl = 2;
 800890c:	2302      	movs	r3, #2
 800890e:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8008910:	69fa      	ldr	r2, [r7, #28]
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	429a      	cmp	r2, r3
 8008916:	d901      	bls.n	800891c <create_chain+0xfa>
 8008918:	2300      	movs	r3, #0
 800891a:	e04f      	b.n	80089bc <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 800891c:	69f9      	ldr	r1, [r7, #28]
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7ff fd2d 	bl	800837e <get_fat>
 8008924:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00e      	beq.n	800894a <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d003      	beq.n	800893a <create_chain+0x118>
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008938:	d101      	bne.n	800893e <create_chain+0x11c>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	e03e      	b.n	80089bc <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800893e:	69fa      	ldr	r2, [r7, #28]
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	429a      	cmp	r2, r3
 8008944:	d1da      	bne.n	80088fc <create_chain+0xda>
 8008946:	2300      	movs	r3, #0
 8008948:	e038      	b.n	80089bc <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 800894a:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 800894c:	f04f 32ff 	mov.w	r2, #4294967295
 8008950:	69f9      	ldr	r1, [r7, #28]
 8008952:	6938      	ldr	r0, [r7, #16]
 8008954:	f7ff fde6 	bl	8008524 <put_fat>
 8008958:	4603      	mov	r3, r0
 800895a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800895c:	7dfb      	ldrb	r3, [r7, #23]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d109      	bne.n	8008976 <create_chain+0x154>
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d006      	beq.n	8008976 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8008968:	69fa      	ldr	r2, [r7, #28]
 800896a:	6839      	ldr	r1, [r7, #0]
 800896c:	6938      	ldr	r0, [r7, #16]
 800896e:	f7ff fdd9 	bl	8008524 <put_fat>
 8008972:	4603      	mov	r3, r0
 8008974:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008976:	7dfb      	ldrb	r3, [r7, #23]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d116      	bne.n	80089aa <create_chain+0x188>
		fs->last_clst = ncl;
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	69fa      	ldr	r2, [r7, #28]
 8008980:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	695a      	ldr	r2, [r3, #20]
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	3b02      	subs	r3, #2
 800898c:	429a      	cmp	r2, r3
 800898e:	d804      	bhi.n	800899a <create_chain+0x178>
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	695b      	ldr	r3, [r3, #20]
 8008994:	1e5a      	subs	r2, r3, #1
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	795b      	ldrb	r3, [r3, #5]
 800899e:	f043 0301 	orr.w	r3, r3, #1
 80089a2:	b2da      	uxtb	r2, r3
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	715a      	strb	r2, [r3, #5]
 80089a8:	e007      	b.n	80089ba <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80089aa:	7dfb      	ldrb	r3, [r7, #23]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d102      	bne.n	80089b6 <create_chain+0x194>
 80089b0:	f04f 33ff 	mov.w	r3, #4294967295
 80089b4:	e000      	b.n	80089b8 <create_chain+0x196>
 80089b6:	2301      	movs	r3, #1
 80089b8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80089ba:	69fb      	ldr	r3, [r7, #28]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3720      	adds	r7, #32
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f7ff fbdf 	bl	8008192 <sync_window>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d001      	beq.n	80089de <dir_clear+0x1a>
 80089da:	2301      	movs	r3, #1
 80089dc:	e036      	b.n	8008a4c <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f7ff fcad 	bl	8008340 <clst2sect>
 80089e6:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	693a      	ldr	r2, [r7, #16]
 80089ec:	631a      	str	r2, [r3, #48]	@ 0x30
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	3334      	adds	r3, #52	@ 0x34
 80089f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80089f6:	2100      	movs	r1, #0
 80089f8:	4618      	mov	r0, r3
 80089fa:	f00d fbd9 	bl	80161b0 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	3334      	adds	r3, #52	@ 0x34
 8008a02:	60fb      	str	r3, [r7, #12]
 8008a04:	2301      	movs	r3, #1
 8008a06:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8008a08:	2300      	movs	r3, #0
 8008a0a:	617b      	str	r3, [r7, #20]
 8008a0c:	e003      	b.n	8008a16 <dir_clear+0x52>
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	4413      	add	r3, r2
 8008a14:	617b      	str	r3, [r7, #20]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	895b      	ldrh	r3, [r3, #10]
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d20b      	bcs.n	8008a3a <dir_clear+0x76>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	7858      	ldrb	r0, [r3, #1]
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	441a      	add	r2, r3
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	68f9      	ldr	r1, [r7, #12]
 8008a30:	f7ff fa54 	bl	8007edc <disk_write>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d0e9      	beq.n	8008a0e <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	895b      	ldrh	r3, [r3, #10]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	4293      	cmp	r3, r2
 8008a44:	bf14      	ite	ne
 8008a46:	2301      	movne	r3, #1
 8008a48:	2300      	moveq	r3, #0
 8008a4a:	b2db      	uxtb	r3, r3
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3718      	adds	r7, #24
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b086      	sub	sp, #24
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a6a:	d204      	bcs.n	8008a76 <dir_sdi+0x22>
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	f003 031f 	and.w	r3, r3, #31
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <dir_sdi+0x26>
		return FR_INT_ERR;
 8008a76:	2302      	movs	r3, #2
 8008a78:	e071      	b.n	8008b5e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	683a      	ldr	r2, [r7, #0]
 8008a7e:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d106      	bne.n	8008a9a <dir_sdi+0x46>
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d902      	bls.n	8008a9a <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a98:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10c      	bne.n	8008aba <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	095b      	lsrs	r3, r3, #5
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	8912      	ldrh	r2, [r2, #8]
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d301      	bcc.n	8008ab0 <dir_sdi+0x5c>
 8008aac:	2302      	movs	r3, #2
 8008aae:	e056      	b.n	8008b5e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	619a      	str	r2, [r3, #24]
 8008ab8:	e02d      	b.n	8008b16 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	895b      	ldrh	r3, [r3, #10]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	899b      	ldrh	r3, [r3, #12]
 8008ac4:	fb02 f303 	mul.w	r3, r2, r3
 8008ac8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008aca:	e019      	b.n	8008b00 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6979      	ldr	r1, [r7, #20]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7ff fc54 	bl	800837e <get_fat>
 8008ad6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ade:	d101      	bne.n	8008ae4 <dir_sdi+0x90>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e03c      	b.n	8008b5e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d904      	bls.n	8008af4 <dir_sdi+0xa0>
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	699b      	ldr	r3, [r3, #24]
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d301      	bcc.n	8008af8 <dir_sdi+0xa4>
 8008af4:	2302      	movs	r3, #2
 8008af6:	e032      	b.n	8008b5e <dir_sdi+0x10a>
			ofs -= csz;
 8008af8:	683a      	ldr	r2, [r7, #0]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008b00:	683a      	ldr	r2, [r7, #0]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d2e1      	bcs.n	8008acc <dir_sdi+0x78>
		}
		dp->sect = clst2sect(fs, clst);
 8008b08:	6979      	ldr	r1, [r7, #20]
 8008b0a:	6938      	ldr	r0, [r7, #16]
 8008b0c:	f7ff fc18 	bl	8008340 <clst2sect>
 8008b10:	4602      	mov	r2, r0
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d101      	bne.n	8008b28 <dir_sdi+0xd4>
 8008b24:	2302      	movs	r3, #2
 8008b26:	e01a      	b.n	8008b5e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	699a      	ldr	r2, [r3, #24]
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	899b      	ldrh	r3, [r3, #12]
 8008b30:	4619      	mov	r1, r3
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b38:	441a      	add	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	899b      	ldrh	r3, [r3, #12]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b50:	fb00 f202 	mul.w	r2, r0, r2
 8008b54:	1a9b      	subs	r3, r3, r2
 8008b56:	18ca      	adds	r2, r1, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b086      	sub	sp, #24
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	3320      	adds	r3, #32
 8008b7c:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b84:	d302      	bcc.n	8008b8c <dir_next+0x26>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d101      	bne.n	8008b98 <dir_next+0x32>
 8008b94:	2304      	movs	r3, #4
 8008b96:	e088      	b.n	8008caa <dir_next+0x144>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	899b      	ldrh	r3, [r3, #12]
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ba4:	fb01 f202 	mul.w	r2, r1, r2
 8008ba8:	1a9b      	subs	r3, r3, r2
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d16a      	bne.n	8008c84 <dir_next+0x11e>
		dp->sect++;				/* Next sector */
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	699b      	ldr	r3, [r3, #24]
 8008bb2:	1c5a      	adds	r2, r3, #1
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	695b      	ldr	r3, [r3, #20]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10a      	bne.n	8008bd6 <dir_next+0x70>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	095b      	lsrs	r3, r3, #5
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	8912      	ldrh	r2, [r2, #8]
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d35b      	bcc.n	8008c84 <dir_next+0x11e>
				dp->sect = 0; return FR_NO_FILE;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	619a      	str	r2, [r3, #24]
 8008bd2:	2304      	movs	r3, #4
 8008bd4:	e069      	b.n	8008caa <dir_next+0x144>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	899b      	ldrh	r3, [r3, #12]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	fbb3 f3f2 	udiv	r3, r3, r2
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	8952      	ldrh	r2, [r2, #10]
 8008be6:	3a01      	subs	r2, #1
 8008be8:	4013      	ands	r3, r2
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d14a      	bne.n	8008c84 <dir_next+0x11e>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	695b      	ldr	r3, [r3, #20]
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	f7ff fbc1 	bl	800837e <get_fat>
 8008bfc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d801      	bhi.n	8008c08 <dir_next+0xa2>
 8008c04:	2302      	movs	r3, #2
 8008c06:	e050      	b.n	8008caa <dir_next+0x144>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c0e:	d101      	bne.n	8008c14 <dir_next+0xae>
 8008c10:	2301      	movs	r3, #1
 8008c12:	e04a      	b.n	8008caa <dir_next+0x144>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	697a      	ldr	r2, [r7, #20]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d328      	bcc.n	8008c70 <dir_next+0x10a>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d104      	bne.n	8008c2e <dir_next+0xc8>
						dp->sect = 0; return FR_NO_FILE;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	619a      	str	r2, [r3, #24]
 8008c2a:	2304      	movs	r3, #4
 8008c2c:	e03d      	b.n	8008caa <dir_next+0x144>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	695b      	ldr	r3, [r3, #20]
 8008c34:	4619      	mov	r1, r3
 8008c36:	4610      	mov	r0, r2
 8008c38:	f7ff fdf3 	bl	8008822 <create_chain>
 8008c3c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d101      	bne.n	8008c48 <dir_next+0xe2>
 8008c44:	2307      	movs	r3, #7
 8008c46:	e030      	b.n	8008caa <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d101      	bne.n	8008c52 <dir_next+0xec>
 8008c4e:	2302      	movs	r3, #2
 8008c50:	e02b      	b.n	8008caa <dir_next+0x144>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c58:	d101      	bne.n	8008c5e <dir_next+0xf8>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e025      	b.n	8008caa <dir_next+0x144>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8008c5e:	6979      	ldr	r1, [r7, #20]
 8008c60:	6938      	ldr	r0, [r7, #16]
 8008c62:	f7ff feaf 	bl	80089c4 <dir_clear>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d001      	beq.n	8008c70 <dir_next+0x10a>
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e01c      	b.n	8008caa <dir_next+0x144>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	697a      	ldr	r2, [r7, #20]
 8008c74:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8008c76:	6979      	ldr	r1, [r7, #20]
 8008c78:	6938      	ldr	r0, [r7, #16]
 8008c7a:	f7ff fb61 	bl	8008340 <clst2sect>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	899b      	ldrh	r3, [r3, #12]
 8008c94:	461a      	mov	r2, r3
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	fbb3 f0f2 	udiv	r0, r3, r2
 8008c9c:	fb00 f202 	mul.w	r2, r0, r2
 8008ca0:	1a9b      	subs	r3, r3, r2
 8008ca2:	18ca      	adds	r2, r1, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3718      	adds	r7, #24
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b086      	sub	sp, #24
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f7ff fec5 	bl	8008a54 <dir_sdi>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008cce:	7dfb      	ldrb	r3, [r7, #23]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d12b      	bne.n	8008d2c <dir_alloc+0x7a>
		n = 0;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f7ff fa93 	bl	800820a <move_window>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008ce8:	7dfb      	ldrb	r3, [r7, #23]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d11d      	bne.n	8008d2a <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	69db      	ldr	r3, [r3, #28]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	2be5      	cmp	r3, #229	@ 0xe5
 8008cf6:	d004      	beq.n	8008d02 <dir_alloc+0x50>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	69db      	ldr	r3, [r3, #28]
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d107      	bne.n	8008d12 <dir_alloc+0x60>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	3301      	adds	r3, #1
 8008d06:	613b      	str	r3, [r7, #16]
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d102      	bne.n	8008d16 <dir_alloc+0x64>
 8008d10:	e00c      	b.n	8008d2c <dir_alloc+0x7a>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 8008d12:	2300      	movs	r3, #0
 8008d14:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8008d16:	2101      	movs	r1, #1
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f7ff ff24 	bl	8008b66 <dir_next>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8008d22:	7dfb      	ldrb	r3, [r7, #23]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d0d7      	beq.n	8008cd8 <dir_alloc+0x26>
 8008d28:	e000      	b.n	8008d2c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008d2a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008d2c:	7dfb      	ldrb	r3, [r7, #23]
 8008d2e:	2b04      	cmp	r3, #4
 8008d30:	d101      	bne.n	8008d36 <dir_alloc+0x84>
 8008d32:	2307      	movs	r3, #7
 8008d34:	75fb      	strb	r3, [r7, #23]
	return res;
 8008d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3718      	adds	r7, #24
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	331a      	adds	r3, #26
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7ff f97a 	bl	8008048 <ld_word>
 8008d54:	4603      	mov	r3, r0
 8008d56:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	2b03      	cmp	r3, #3
 8008d5e:	d109      	bne.n	8008d74 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	3314      	adds	r3, #20
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7ff f96f 	bl	8008048 <ld_word>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	041b      	lsls	r3, r3, #16
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008d74:	68fb      	ldr	r3, [r7, #12]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b084      	sub	sp, #16
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	60f8      	str	r0, [r7, #12]
 8008d86:	60b9      	str	r1, [r7, #8]
 8008d88:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	331a      	adds	r3, #26
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	b292      	uxth	r2, r2
 8008d92:	4611      	mov	r1, r2
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7ff f993 	bl	80080c0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	2b03      	cmp	r3, #3
 8008da0:	d109      	bne.n	8008db6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	f103 0214 	add.w	r2, r3, #20
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	0c1b      	lsrs	r3, r3, #16
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	4619      	mov	r1, r3
 8008db0:	4610      	mov	r0, r2
 8008db2:	f7ff f985 	bl	80080c0 <st_word>
	}
}
 8008db6:	bf00      	nop
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b086      	sub	sp, #24
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008dcc:	2100      	movs	r1, #0
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7ff fe40 	bl	8008a54 <dir_sdi>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008dd8:	7dfb      	ldrb	r3, [r7, #23]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d001      	beq.n	8008de2 <dir_find+0x24>
 8008dde:	7dfb      	ldrb	r3, [r7, #23]
 8008de0:	e03e      	b.n	8008e60 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	699b      	ldr	r3, [r3, #24]
 8008de6:	4619      	mov	r1, r3
 8008de8:	6938      	ldr	r0, [r7, #16]
 8008dea:	f7ff fa0e 	bl	800820a <move_window>
 8008dee:	4603      	mov	r3, r0
 8008df0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008df2:	7dfb      	ldrb	r3, [r7, #23]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d12f      	bne.n	8008e58 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	69db      	ldr	r3, [r3, #28]
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008e00:	7bfb      	ldrb	r3, [r7, #15]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d102      	bne.n	8008e0c <dir_find+0x4e>
 8008e06:	2304      	movs	r3, #4
 8008e08:	75fb      	strb	r3, [r7, #23]
 8008e0a:	e028      	b.n	8008e5e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	69db      	ldr	r3, [r3, #28]
 8008e10:	330b      	adds	r3, #11
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e18:	b2da      	uxtb	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	69db      	ldr	r3, [r3, #28]
 8008e22:	330b      	adds	r3, #11
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	f003 0308 	and.w	r3, r3, #8
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d10a      	bne.n	8008e44 <dir_find+0x86>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	69d8      	ldr	r0, [r3, #28]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	3320      	adds	r3, #32
 8008e36:	220b      	movs	r2, #11
 8008e38:	4619      	mov	r1, r3
 8008e3a:	f00d f9a9 	bl	8016190 <memcmp>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d00b      	beq.n	8008e5c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008e44:	2100      	movs	r1, #0
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7ff fe8d 	bl	8008b66 <dir_next>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008e50:	7dfb      	ldrb	r3, [r7, #23]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d0c5      	beq.n	8008de2 <dir_find+0x24>
 8008e56:	e002      	b.n	8008e5e <dir_find+0xa0>
		if (res != FR_OK) break;
 8008e58:	bf00      	nop
 8008e5a:	e000      	b.n	8008e5e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008e5c:	bf00      	nop

	return res;
 8008e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3718      	adds	r7, #24
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --n_ent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008e76:	2101      	movs	r1, #1
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f7ff ff1a 	bl	8008cb2 <dir_alloc>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008e82:	7bfb      	ldrb	r3, [r7, #15]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d11c      	bne.n	8008ec2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	699b      	ldr	r3, [r3, #24]
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	68b8      	ldr	r0, [r7, #8]
 8008e90:	f7ff f9bb 	bl	800820a <move_window>
 8008e94:	4603      	mov	r3, r0
 8008e96:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008e98:	7bfb      	ldrb	r3, [r7, #15]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d111      	bne.n	8008ec2 <dir_register+0x5a>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	69db      	ldr	r3, [r3, #28]
 8008ea2:	2220      	movs	r2, #32
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f00d f982 	bl	80161b0 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	69d8      	ldr	r0, [r3, #28]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	3320      	adds	r3, #32
 8008eb4:	220b      	movs	r2, #11
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	f00d f9fe 	bl	80162b8 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8008ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b08a      	sub	sp, #40	@ 0x28
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
	BYTE *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	617b      	str	r3, [r7, #20]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	3320      	adds	r3, #32
 8008ee0:	613b      	str	r3, [r7, #16]
	memset(sfn, ' ', 11);
 8008ee2:	220b      	movs	r2, #11
 8008ee4:	2120      	movs	r1, #32
 8008ee6:	6938      	ldr	r0, [r7, #16]
 8008ee8:	f00d f962 	bl	80161b0 <memset>
	si = i = 0; ni = 8;
 8008eec:	2300      	movs	r3, #0
 8008eee:	61bb      	str	r3, [r7, #24]
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	61fb      	str	r3, [r7, #28]
 8008ef4:	2308      	movs	r3, #8
 8008ef6:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	1c5a      	adds	r2, r3, #1
 8008efc:	61fa      	str	r2, [r7, #28]
 8008efe:	697a      	ldr	r2, [r7, #20]
 8008f00:	4413      	add	r3, r2
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008f08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f0c:	2b20      	cmp	r3, #32
 8008f0e:	f240 8089 	bls.w	8009024 <create_name+0x158>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 8008f12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f16:	2b2f      	cmp	r3, #47	@ 0x2f
 8008f18:	d007      	beq.n	8008f2a <create_name+0x5e>
 8008f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f1e:	2b5c      	cmp	r3, #92	@ 0x5c
 8008f20:	d110      	bne.n	8008f44 <create_name+0x78>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 8008f22:	e002      	b.n	8008f2a <create_name+0x5e>
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	3301      	adds	r3, #1
 8008f28:	61fb      	str	r3, [r7, #28]
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	4413      	add	r3, r2
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	2b2f      	cmp	r3, #47	@ 0x2f
 8008f34:	d0f6      	beq.n	8008f24 <create_name+0x58>
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	2b5c      	cmp	r3, #92	@ 0x5c
 8008f40:	d0f0      	beq.n	8008f24 <create_name+0x58>
			break;
 8008f42:	e070      	b.n	8009026 <create_name+0x15a>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8008f44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f48:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f4a:	d003      	beq.n	8008f54 <create_name+0x88>
 8008f4c:	69ba      	ldr	r2, [r7, #24]
 8008f4e:	6a3b      	ldr	r3, [r7, #32]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d30d      	bcc.n	8008f70 <create_name+0xa4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8008f54:	6a3b      	ldr	r3, [r7, #32]
 8008f56:	2b0b      	cmp	r3, #11
 8008f58:	d003      	beq.n	8008f62 <create_name+0x96>
 8008f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f60:	d001      	beq.n	8008f66 <create_name+0x9a>
 8008f62:	2306      	movs	r3, #6
 8008f64:	e081      	b.n	800906a <create_name+0x19e>
			i = 8; ni = 11;				/* Enter file extension field */
 8008f66:	2308      	movs	r3, #8
 8008f68:	61bb      	str	r3, [r7, #24]
 8008f6a:	230b      	movs	r3, #11
 8008f6c:	623b      	str	r3, [r7, #32]
			continue;
 8008f6e:	e058      	b.n	8009022 <create_name+0x156>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
 8008f70:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	da07      	bge.n	8008f88 <create_name+0xbc>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 8008f78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f80:	4a3c      	ldr	r2, [pc, #240]	@ (8009074 <create_name+0x1a8>)
 8008f82:	5cd3      	ldrb	r3, [r2, r3]
 8008f84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 8008f88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7ff f8de 	bl	800814e <dbc_1st>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d024      	beq.n	8008fe2 <create_name+0x116>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	1c5a      	adds	r2, r3, #1
 8008f9c:	61fa      	str	r2, [r7, #28]
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7ff f8e1 	bl	8008170 <dbc_2nd>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d004      	beq.n	8008fbe <create_name+0xf2>
 8008fb4:	6a3b      	ldr	r3, [r7, #32]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	69ba      	ldr	r2, [r7, #24]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d301      	bcc.n	8008fc2 <create_name+0xf6>
 8008fbe:	2306      	movs	r3, #6
 8008fc0:	e053      	b.n	800906a <create_name+0x19e>
			sfn[i++] = c;
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	1c5a      	adds	r2, r3, #1
 8008fc6:	61ba      	str	r2, [r7, #24]
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	4413      	add	r3, r2
 8008fcc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008fd0:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	1c5a      	adds	r2, r3, #1
 8008fd6:	61ba      	str	r2, [r7, #24]
 8008fd8:	693a      	ldr	r2, [r7, #16]
 8008fda:	4413      	add	r3, r2
 8008fdc:	7bfa      	ldrb	r2, [r7, #15]
 8008fde:	701a      	strb	r2, [r3, #0]
 8008fe0:	e78a      	b.n	8008ef8 <create_name+0x2c>
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	4823      	ldr	r0, [pc, #140]	@ (8009078 <create_name+0x1ac>)
 8008fea:	f00d f8e9 	bl	80161c0 <strchr>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d001      	beq.n	8008ff8 <create_name+0x12c>
 8008ff4:	2306      	movs	r3, #6
 8008ff6:	e038      	b.n	800906a <create_name+0x19e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ffc:	2b60      	cmp	r3, #96	@ 0x60
 8008ffe:	d908      	bls.n	8009012 <create_name+0x146>
 8009000:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009004:	2b7a      	cmp	r3, #122	@ 0x7a
 8009006:	d804      	bhi.n	8009012 <create_name+0x146>
 8009008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800900c:	3b20      	subs	r3, #32
 800900e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			sfn[i++] = c;
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	1c5a      	adds	r2, r3, #1
 8009016:	61ba      	str	r2, [r7, #24]
 8009018:	693a      	ldr	r2, [r7, #16]
 800901a:	4413      	add	r3, r2
 800901c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009020:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 8009022:	e769      	b.n	8008ef8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009024:	bf00      	nop
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009026:	697a      	ldr	r2, [r7, #20]
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	441a      	add	r2, r3
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d101      	bne.n	800903a <create_name+0x16e>
 8009036:	2306      	movs	r3, #6
 8009038:	e017      	b.n	800906a <create_name+0x19e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	2be5      	cmp	r3, #229	@ 0xe5
 8009040:	d102      	bne.n	8009048 <create_name+0x17c>
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	2205      	movs	r2, #5
 8009046:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 8009048:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800904c:	2b20      	cmp	r3, #32
 800904e:	d905      	bls.n	800905c <create_name+0x190>
 8009050:	697a      	ldr	r2, [r7, #20]
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	4413      	add	r3, r2
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	2b20      	cmp	r3, #32
 800905a:	d801      	bhi.n	8009060 <create_name+0x194>
 800905c:	2204      	movs	r2, #4
 800905e:	e000      	b.n	8009062 <create_name+0x196>
 8009060:	2200      	movs	r2, #0
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	330b      	adds	r3, #11
 8009066:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009068:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 800906a:	4618      	mov	r0, r3
 800906c:	3728      	adds	r7, #40	@ 0x28
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	080178a8 	.word	0x080178a8
 8009078:	080177c4 	.word	0x080177c4

0800907c <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b086      	sub	sp, #24
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 800908c:	e002      	b.n	8009094 <follow_path+0x18>
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	3301      	adds	r3, #1
 8009092:	603b      	str	r3, [r7, #0]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	2b2f      	cmp	r3, #47	@ 0x2f
 800909a:	d0f8      	beq.n	800908e <follow_path+0x12>
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80090a2:	d0f4      	beq.n	800908e <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	2b1f      	cmp	r3, #31
 80090b0:	d80a      	bhi.n	80090c8 <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2280      	movs	r2, #128	@ 0x80
 80090b6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 80090ba:	2100      	movs	r1, #0
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f7ff fcc9 	bl	8008a54 <dir_sdi>
 80090c2:	4603      	mov	r3, r0
 80090c4:	75fb      	strb	r3, [r7, #23]
 80090c6:	e048      	b.n	800915a <follow_path+0xde>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80090c8:	463b      	mov	r3, r7
 80090ca:	4619      	mov	r1, r3
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f7ff fefd 	bl	8008ecc <create_name>
 80090d2:	4603      	mov	r3, r0
 80090d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80090d6:	7dfb      	ldrb	r3, [r7, #23]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d139      	bne.n	8009150 <follow_path+0xd4>
			res = dir_find(dp);				/* Find an object with the segment name */
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f7ff fe6e 	bl	8008dbe <dir_find>
 80090e2:	4603      	mov	r3, r0
 80090e4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80090ec:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 80090ee:	7dfb      	ldrb	r3, [r7, #23]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d00a      	beq.n	800910a <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80090f4:	7dfb      	ldrb	r3, [r7, #23]
 80090f6:	2b04      	cmp	r3, #4
 80090f8:	d12c      	bne.n	8009154 <follow_path+0xd8>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80090fa:	7bfb      	ldrb	r3, [r7, #15]
 80090fc:	f003 0304 	and.w	r3, r3, #4
 8009100:	2b00      	cmp	r3, #0
 8009102:	d127      	bne.n	8009154 <follow_path+0xd8>
 8009104:	2305      	movs	r3, #5
 8009106:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009108:	e024      	b.n	8009154 <follow_path+0xd8>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800910a:	7bfb      	ldrb	r3, [r7, #15]
 800910c:	f003 0304 	and.w	r3, r3, #4
 8009110:	2b00      	cmp	r3, #0
 8009112:	d121      	bne.n	8009158 <follow_path+0xdc>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	799b      	ldrb	r3, [r3, #6]
 8009118:	f003 0310 	and.w	r3, r3, #16
 800911c:	2b00      	cmp	r3, #0
 800911e:	d102      	bne.n	8009126 <follow_path+0xaa>
				res = FR_NO_PATH; break;
 8009120:	2305      	movs	r3, #5
 8009122:	75fb      	strb	r3, [r7, #23]
 8009124:	e019      	b.n	800915a <follow_path+0xde>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	693a      	ldr	r2, [r7, #16]
 8009132:	8992      	ldrh	r2, [r2, #12]
 8009134:	fbb3 f0f2 	udiv	r0, r3, r2
 8009138:	fb00 f202 	mul.w	r2, r0, r2
 800913c:	1a9b      	subs	r3, r3, r2
 800913e:	440b      	add	r3, r1
 8009140:	4619      	mov	r1, r3
 8009142:	6938      	ldr	r0, [r7, #16]
 8009144:	f7ff fdfc 	bl	8008d40 <ld_clust>
 8009148:	4602      	mov	r2, r0
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800914e:	e7bb      	b.n	80090c8 <follow_path+0x4c>
			if (res != FR_OK) break;
 8009150:	bf00      	nop
 8009152:	e002      	b.n	800915a <follow_path+0xde>
				break;
 8009154:	bf00      	nop
 8009156:	e000      	b.n	800915a <follow_path+0xde>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8009158:	bf00      	nop
			}
		}
	}

	return res;
 800915a:	7dfb      	ldrb	r3, [r7, #23]
}
 800915c:	4618      	mov	r0, r3
 800915e:	3718      	adds	r7, #24
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8009164:	b480      	push	{r7}
 8009166:	b08b      	sub	sp, #44	@ 0x2c
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 800916c:	f04f 33ff 	mov.w	r3, #4294967295
 8009170:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	627b      	str	r3, [r7, #36]	@ 0x24
 8009178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800917a:	623b      	str	r3, [r7, #32]
	if (!tp) return vol;	/* Invalid path name? */
 800917c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800917e:	2b00      	cmp	r3, #0
 8009180:	d101      	bne.n	8009186 <get_ldnumber+0x22>
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	e080      	b.n	8009288 <get_ldnumber+0x124>
	do {					/* Find a colon in the path */
		tc = *tt++;
 8009186:	6a3b      	ldr	r3, [r7, #32]
 8009188:	1c5a      	adds	r2, r3, #1
 800918a:	623a      	str	r2, [r7, #32]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	77fb      	strb	r3, [r7, #31]
	} while (!IsTerminator(tc) && tc != ':');
 8009190:	7ffb      	ldrb	r3, [r7, #31]
 8009192:	2b20      	cmp	r3, #32
 8009194:	d902      	bls.n	800919c <get_ldnumber+0x38>
 8009196:	7ffb      	ldrb	r3, [r7, #31]
 8009198:	2b3a      	cmp	r3, #58	@ 0x3a
 800919a:	d1f4      	bne.n	8009186 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 800919c:	7ffb      	ldrb	r3, [r7, #31]
 800919e:	2b3a      	cmp	r3, #58	@ 0x3a
 80091a0:	d11c      	bne.n	80091dc <get_ldnumber+0x78>
		i = FF_VOLUMES;
 80091a2:	2302      	movs	r3, #2
 80091a4:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 80091a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	2b2f      	cmp	r3, #47	@ 0x2f
 80091ac:	d90c      	bls.n	80091c8 <get_ldnumber+0x64>
 80091ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	2b39      	cmp	r3, #57	@ 0x39
 80091b4:	d808      	bhi.n	80091c8 <get_ldnumber+0x64>
 80091b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b8:	3302      	adds	r3, #2
 80091ba:	6a3a      	ldr	r2, [r7, #32]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d103      	bne.n	80091c8 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 80091c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	3b30      	subs	r3, #48	@ 0x30
 80091c6:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	dc04      	bgt.n	80091d8 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a3a      	ldr	r2, [r7, #32]
 80091d6:	601a      	str	r2, [r3, #0]
		}
		return vol;
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	e055      	b.n	8009288 <get_ldnumber+0x124>
	}
#if FF_STR_VOLUME_ID == 2		/* Unix style volume ID is enabled */
	if (*tp == '/') {			/* Is there a volume ID? */
 80091dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	2b2f      	cmp	r3, #47	@ 0x2f
 80091e2:	d14e      	bne.n	8009282 <get_ldnumber+0x11e>
		while (*(tp + 1) == '/') tp++;	/* Skip duplicated separator */
 80091e4:	e002      	b.n	80091ec <get_ldnumber+0x88>
 80091e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e8:	3301      	adds	r3, #1
 80091ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80091ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ee:	3301      	adds	r3, #1
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	2b2f      	cmp	r3, #47	@ 0x2f
 80091f4:	d0f7      	beq.n	80091e6 <get_ldnumber+0x82>
		i = 0;
 80091f6:	2300      	movs	r3, #0
 80091f8:	61bb      	str	r3, [r7, #24]
		do {
			tt = tp; sp = VolumeStr[i]; /* Path name and this string volume ID */
 80091fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fc:	623b      	str	r3, [r7, #32]
 80091fe:	4a25      	ldr	r2, [pc, #148]	@ (8009294 <get_ldnumber+0x130>)
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009206:	613b      	str	r3, [r7, #16]
			do {	/* Compare the volume ID with path name */
				c = *sp++; tc = *(++tt);
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	1c5a      	adds	r2, r3, #1
 800920c:	613a      	str	r2, [r7, #16]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	73fb      	strb	r3, [r7, #15]
 8009212:	6a3b      	ldr	r3, [r7, #32]
 8009214:	3301      	adds	r3, #1
 8009216:	623b      	str	r3, [r7, #32]
 8009218:	6a3b      	ldr	r3, [r7, #32]
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	77fb      	strb	r3, [r7, #31]
				if (IsLower(c)) c -= 0x20;
 800921e:	7bfb      	ldrb	r3, [r7, #15]
 8009220:	2b60      	cmp	r3, #96	@ 0x60
 8009222:	d905      	bls.n	8009230 <get_ldnumber+0xcc>
 8009224:	7bfb      	ldrb	r3, [r7, #15]
 8009226:	2b7a      	cmp	r3, #122	@ 0x7a
 8009228:	d802      	bhi.n	8009230 <get_ldnumber+0xcc>
 800922a:	7bfb      	ldrb	r3, [r7, #15]
 800922c:	3b20      	subs	r3, #32
 800922e:	73fb      	strb	r3, [r7, #15]
				if (IsLower(tc)) tc -= 0x20;
 8009230:	7ffb      	ldrb	r3, [r7, #31]
 8009232:	2b60      	cmp	r3, #96	@ 0x60
 8009234:	d905      	bls.n	8009242 <get_ldnumber+0xde>
 8009236:	7ffb      	ldrb	r3, [r7, #31]
 8009238:	2b7a      	cmp	r3, #122	@ 0x7a
 800923a:	d802      	bhi.n	8009242 <get_ldnumber+0xde>
 800923c:	7ffb      	ldrb	r3, [r7, #31]
 800923e:	3b20      	subs	r3, #32
 8009240:	77fb      	strb	r3, [r7, #31]
			} while (c && (TCHAR)c == tc);
 8009242:	7bfb      	ldrb	r3, [r7, #15]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d003      	beq.n	8009250 <get_ldnumber+0xec>
 8009248:	7bfa      	ldrb	r2, [r7, #15]
 800924a:	7ffb      	ldrb	r3, [r7, #31]
 800924c:	429a      	cmp	r2, r3
 800924e:	d0db      	beq.n	8009208 <get_ldnumber+0xa4>
		} while ((c || (tc != '/' && !IsTerminator(tc))) && ++i < FF_VOLUMES);	/* Repeat for each ID until pattern match */
 8009250:	7bfb      	ldrb	r3, [r7, #15]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d105      	bne.n	8009262 <get_ldnumber+0xfe>
 8009256:	7ffb      	ldrb	r3, [r7, #31]
 8009258:	2b2f      	cmp	r3, #47	@ 0x2f
 800925a:	d008      	beq.n	800926e <get_ldnumber+0x10a>
 800925c:	7ffb      	ldrb	r3, [r7, #31]
 800925e:	2b20      	cmp	r3, #32
 8009260:	d905      	bls.n	800926e <get_ldnumber+0x10a>
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	3301      	adds	r3, #1
 8009266:	61bb      	str	r3, [r7, #24]
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	2b01      	cmp	r3, #1
 800926c:	ddc5      	ble.n	80091fa <get_ldnumber+0x96>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	2b01      	cmp	r3, #1
 8009272:	dc04      	bgt.n	800927e <get_ldnumber+0x11a>
			vol = i;		/* Drive number */
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6a3a      	ldr	r2, [r7, #32]
 800927c:	601a      	str	r2, [r3, #0]
		}
		return vol;
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	e002      	b.n	8009288 <get_ldnumber+0x124>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8009282:	2300      	movs	r3, #0
 8009284:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8009286:	697b      	ldr	r3, [r7, #20]
}
 8009288:	4618      	mov	r0, r3
 800928a:	372c      	adds	r7, #44	@ 0x2c
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr
 8009294:	2000026c 	.word	0x2000026c

08009298 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	711a      	strb	r2, [r3, #4]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f04f 32ff 	mov.w	r2, #4294967295
 80092ae:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 80092b0:	6839      	ldr	r1, [r7, #0]
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f7fe ffa9 	bl	800820a <move_window>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d001      	beq.n	80092c2 <check_fs+0x2a>
 80092be:	2304      	movs	r3, #4
 80092c0:	e088      	b.n	80093d4 <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	3334      	adds	r3, #52	@ 0x34
 80092c6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7fe febc 	bl	8008048 <ld_word>
 80092d0:	4603      	mov	r3, r0
 80092d2:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80092da:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 80092dc:	7b7b      	ldrb	r3, [r7, #13]
 80092de:	2beb      	cmp	r3, #235	@ 0xeb
 80092e0:	d005      	beq.n	80092ee <check_fs+0x56>
 80092e2:	7b7b      	ldrb	r3, [r7, #13]
 80092e4:	2be9      	cmp	r3, #233	@ 0xe9
 80092e6:	d002      	beq.n	80092ee <check_fs+0x56>
 80092e8:	7b7b      	ldrb	r3, [r7, #13]
 80092ea:	2be8      	cmp	r3, #232	@ 0xe8
 80092ec:	d16a      	bne.n	80093c4 <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 80092ee:	89fb      	ldrh	r3, [r7, #14]
 80092f0:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d10c      	bne.n	8009312 <check_fs+0x7a>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	3334      	adds	r3, #52	@ 0x34
 80092fc:	3352      	adds	r3, #82	@ 0x52
 80092fe:	2208      	movs	r2, #8
 8009300:	4936      	ldr	r1, [pc, #216]	@ (80093dc <check_fs+0x144>)
 8009302:	4618      	mov	r0, r3
 8009304:	f00c ff44 	bl	8016190 <memcmp>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d101      	bne.n	8009312 <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 800930e:	2300      	movs	r3, #0
 8009310:	e060      	b.n	80093d4 <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	3334      	adds	r3, #52	@ 0x34
 8009316:	330b      	adds	r3, #11
 8009318:	4618      	mov	r0, r3
 800931a:	f7fe fe95 	bl	8008048 <ld_word>
 800931e:	4603      	mov	r3, r0
 8009320:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009328:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 800932a:	897a      	ldrh	r2, [r7, #10]
 800932c:	897b      	ldrh	r3, [r7, #10]
 800932e:	3b01      	subs	r3, #1
 8009330:	4013      	ands	r3, r2
 8009332:	2b00      	cmp	r3, #0
 8009334:	d146      	bne.n	80093c4 <check_fs+0x12c>
 8009336:	897b      	ldrh	r3, [r7, #10]
 8009338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800933c:	d342      	bcc.n	80093c4 <check_fs+0x12c>
 800933e:	897b      	ldrh	r3, [r7, #10]
 8009340:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009344:	d83e      	bhi.n	80093c4 <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 8009346:	7b7b      	ldrb	r3, [r7, #13]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d03b      	beq.n	80093c4 <check_fs+0x12c>
 800934c:	7b7a      	ldrb	r2, [r7, #13]
 800934e:	7b7b      	ldrb	r3, [r7, #13]
 8009350:	3b01      	subs	r3, #1
 8009352:	4013      	ands	r3, r2
 8009354:	2b00      	cmp	r3, #0
 8009356:	d135      	bne.n	80093c4 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	3334      	adds	r3, #52	@ 0x34
 800935c:	330e      	adds	r3, #14
 800935e:	4618      	mov	r0, r3
 8009360:	f7fe fe72 	bl	8008048 <ld_word>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d02c      	beq.n	80093c4 <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009370:	3b01      	subs	r3, #1
 8009372:	2b01      	cmp	r3, #1
 8009374:	d826      	bhi.n	80093c4 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	3334      	adds	r3, #52	@ 0x34
 800937a:	3311      	adds	r3, #17
 800937c:	4618      	mov	r0, r3
 800937e:	f7fe fe63 	bl	8008048 <ld_word>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d01d      	beq.n	80093c4 <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	3334      	adds	r3, #52	@ 0x34
 800938c:	3313      	adds	r3, #19
 800938e:	4618      	mov	r0, r3
 8009390:	f7fe fe5a 	bl	8008048 <ld_word>
 8009394:	4603      	mov	r3, r0
 8009396:	2b7f      	cmp	r3, #127	@ 0x7f
 8009398:	d809      	bhi.n	80093ae <check_fs+0x116>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	3334      	adds	r3, #52	@ 0x34
 800939e:	3320      	adds	r3, #32
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7fe fe6a 	bl	800807a <ld_dword>
 80093a6:	4603      	mov	r3, r0
 80093a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093ac:	d30a      	bcc.n	80093c4 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	3334      	adds	r3, #52	@ 0x34
 80093b2:	3316      	adds	r3, #22
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7fe fe47 	bl	8008048 <ld_word>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d001      	beq.n	80093c4 <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 80093c0:	2300      	movs	r3, #0
 80093c2:	e007      	b.n	80093d4 <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 80093c4:	89fb      	ldrh	r3, [r7, #14]
 80093c6:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d101      	bne.n	80093d2 <check_fs+0x13a>
 80093ce:	2302      	movs	r3, #2
 80093d0:	e000      	b.n	80093d4 <check_fs+0x13c>
 80093d2:	2303      	movs	r3, #3
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	080177d4 	.word	0x080177d4

080093e0 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b088      	sub	sp, #32
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 80093ea:	2100      	movs	r1, #0
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f7ff ff53 	bl	8009298 <check_fs>
 80093f2:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 80093f4:	69bb      	ldr	r3, [r7, #24]
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d007      	beq.n	800940a <find_volume+0x2a>
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d802      	bhi.n	8009406 <find_volume+0x26>
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d101      	bne.n	800940a <find_volume+0x2a>
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	e045      	b.n	8009496 <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800940a:	2300      	movs	r3, #0
 800940c:	61fb      	str	r3, [r7, #28]
 800940e:	e014      	b.n	800943a <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	011b      	lsls	r3, r3, #4
 800941a:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 800941e:	4413      	add	r3, r2
 8009420:	4618      	mov	r0, r3
 8009422:	f7fe fe2a 	bl	800807a <ld_dword>
 8009426:	4602      	mov	r2, r0
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	3320      	adds	r3, #32
 800942e:	443b      	add	r3, r7
 8009430:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	3301      	adds	r3, #1
 8009438:	61fb      	str	r3, [r7, #28]
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	2b03      	cmp	r3, #3
 800943e:	d9e7      	bls.n	8009410 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d002      	beq.n	800944c <find_volume+0x6c>
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	3b01      	subs	r3, #1
 800944a:	e000      	b.n	800944e <find_volume+0x6e>
 800944c:	2300      	movs	r3, #0
 800944e:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	3320      	adds	r3, #32
 8009456:	443b      	add	r3, r7
 8009458:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00b      	beq.n	8009478 <find_volume+0x98>
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	3320      	adds	r3, #32
 8009466:	443b      	add	r3, r7
 8009468:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800946c:	4619      	mov	r1, r3
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f7ff ff12 	bl	8009298 <check_fs>
 8009474:	4603      	mov	r3, r0
 8009476:	e000      	b.n	800947a <find_volume+0x9a>
 8009478:	2303      	movs	r3, #3
 800947a:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d108      	bne.n	8009494 <find_volume+0xb4>
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	2b01      	cmp	r3, #1
 8009486:	d905      	bls.n	8009494 <find_volume+0xb4>
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	3301      	adds	r3, #1
 800948c:	61fb      	str	r3, [r7, #28]
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	2b03      	cmp	r3, #3
 8009492:	d9dd      	bls.n	8009450 <find_volume+0x70>
	return fmt;
 8009494:	69bb      	ldr	r3, [r7, #24]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3720      	adds	r7, #32
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
	...

080094a0 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b090      	sub	sp, #64	@ 0x40
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	4613      	mov	r3, r2
 80094ac:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	2200      	movs	r2, #0
 80094b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f7ff fe55 	bl	8009164 <get_ldnumber>
 80094ba:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 80094bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094be:	2b00      	cmp	r3, #0
 80094c0:	da01      	bge.n	80094c6 <mount_volume+0x26>
 80094c2:	230b      	movs	r3, #11
 80094c4:	e207      	b.n	80098d6 <mount_volume+0x436>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 80094c6:	4aa2      	ldr	r2, [pc, #648]	@ (8009750 <mount_volume+0x2b0>)
 80094c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094ce:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 80094d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d101      	bne.n	80094da <mount_volume+0x3a>
 80094d6:	230c      	movs	r3, #12
 80094d8:	e1fd      	b.n	80098d6 <mount_volume+0x436>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094de:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80094e0:	79fb      	ldrb	r3, [r7, #7]
 80094e2:	f023 0301 	bic.w	r3, r3, #1
 80094e6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 80094e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d01a      	beq.n	8009526 <mount_volume+0x86>
		stat = disk_status(fs->pdrv);
 80094f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f2:	785b      	ldrb	r3, [r3, #1]
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7fe fc6f 	bl	8007dd8 <disk_status>
 80094fa:	4603      	mov	r3, r0
 80094fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009500:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009504:	f003 0301 	and.w	r3, r3, #1
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10c      	bne.n	8009526 <mount_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800950c:	79fb      	ldrb	r3, [r7, #7]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d007      	beq.n	8009522 <mount_volume+0x82>
 8009512:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009516:	f003 0304 	and.w	r3, r3, #4
 800951a:	2b00      	cmp	r3, #0
 800951c:	d001      	beq.n	8009522 <mount_volume+0x82>
				return FR_WRITE_PROTECTED;
 800951e:	230a      	movs	r3, #10
 8009520:	e1d9      	b.n	80098d6 <mount_volume+0x436>
			}
			return FR_OK;				/* The filesystem object is already valid */
 8009522:	2300      	movs	r3, #0
 8009524:	e1d7      	b.n	80098d6 <mount_volume+0x436>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 8009526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009528:	2200      	movs	r2, #0
 800952a:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 800952c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952e:	785b      	ldrb	r3, [r3, #1]
 8009530:	4618      	mov	r0, r3
 8009532:	f7fe fc79 	bl	8007e28 <disk_initialize>
 8009536:	4603      	mov	r3, r0
 8009538:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800953c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009540:	f003 0301 	and.w	r3, r3, #1
 8009544:	2b00      	cmp	r3, #0
 8009546:	d001      	beq.n	800954c <mount_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009548:	2303      	movs	r3, #3
 800954a:	e1c4      	b.n	80098d6 <mount_volume+0x436>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800954c:	79fb      	ldrb	r3, [r7, #7]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d007      	beq.n	8009562 <mount_volume+0xc2>
 8009552:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009556:	f003 0304 	and.w	r3, r3, #4
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <mount_volume+0xc2>
		return FR_WRITE_PROTECTED;
 800955e:	230a      	movs	r3, #10
 8009560:	e1b9      	b.n	80098d6 <mount_volume+0x436>
	}
#if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009564:	7858      	ldrb	r0, [r3, #1]
 8009566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009568:	330c      	adds	r3, #12
 800956a:	461a      	mov	r2, r3
 800956c:	2102      	movs	r1, #2
 800956e:	f7fe fce9 	bl	8007f44 <disk_ioctl>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d001      	beq.n	800957c <mount_volume+0xdc>
 8009578:	2301      	movs	r3, #1
 800957a:	e1ac      	b.n	80098d6 <mount_volume+0x436>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800957c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800957e:	899b      	ldrh	r3, [r3, #12]
 8009580:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009584:	d80d      	bhi.n	80095a2 <mount_volume+0x102>
 8009586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009588:	899b      	ldrh	r3, [r3, #12]
 800958a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800958e:	d308      	bcc.n	80095a2 <mount_volume+0x102>
 8009590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009592:	899b      	ldrh	r3, [r3, #12]
 8009594:	461a      	mov	r2, r3
 8009596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009598:	899b      	ldrh	r3, [r3, #12]
 800959a:	3b01      	subs	r3, #1
 800959c:	4013      	ands	r3, r2
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d001      	beq.n	80095a6 <mount_volume+0x106>
 80095a2:	2301      	movs	r3, #1
 80095a4:	e197      	b.n	80098d6 <mount_volume+0x436>
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 80095a6:	2100      	movs	r1, #0
 80095a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095aa:	f7ff ff19 	bl	80093e0 <find_volume>
 80095ae:	6338      	str	r0, [r7, #48]	@ 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 80095b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b2:	2b04      	cmp	r3, #4
 80095b4:	d101      	bne.n	80095ba <mount_volume+0x11a>
 80095b6:	2301      	movs	r3, #1
 80095b8:	e18d      	b.n	80098d6 <mount_volume+0x436>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80095ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d901      	bls.n	80095c4 <mount_volume+0x124>
 80095c0:	230d      	movs	r3, #13
 80095c2:	e188      	b.n	80098d6 <mount_volume+0x436>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 80095c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095c8:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80095ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095cc:	3334      	adds	r3, #52	@ 0x34
 80095ce:	330b      	adds	r3, #11
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7fe fd39 	bl	8008048 <ld_word>
 80095d6:	4603      	mov	r3, r0
 80095d8:	461a      	mov	r2, r3
 80095da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095dc:	899b      	ldrh	r3, [r3, #12]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d001      	beq.n	80095e6 <mount_volume+0x146>
 80095e2:	230d      	movs	r3, #13
 80095e4:	e177      	b.n	80098d6 <mount_volume+0x436>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80095e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e8:	3334      	adds	r3, #52	@ 0x34
 80095ea:	3316      	adds	r3, #22
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7fe fd2b 	bl	8008048 <ld_word>
 80095f2:	4603      	mov	r3, r0
 80095f4:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80095f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d106      	bne.n	800960a <mount_volume+0x16a>
 80095fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fe:	3334      	adds	r3, #52	@ 0x34
 8009600:	3324      	adds	r3, #36	@ 0x24
 8009602:	4618      	mov	r0, r3
 8009604:	f7fe fd39 	bl	800807a <ld_dword>
 8009608:	63b8      	str	r0, [r7, #56]	@ 0x38
		fs->fsize = fasize;
 800960a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800960c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800960e:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009612:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009618:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800961a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961c:	78db      	ldrb	r3, [r3, #3]
 800961e:	2b01      	cmp	r3, #1
 8009620:	d005      	beq.n	800962e <mount_volume+0x18e>
 8009622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009624:	78db      	ldrb	r3, [r3, #3]
 8009626:	2b02      	cmp	r3, #2
 8009628:	d001      	beq.n	800962e <mount_volume+0x18e>
 800962a:	230d      	movs	r3, #13
 800962c:	e153      	b.n	80098d6 <mount_volume+0x436>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800962e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009630:	78db      	ldrb	r3, [r3, #3]
 8009632:	461a      	mov	r2, r3
 8009634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009636:	fb02 f303 	mul.w	r3, r2, r3
 800963a:	63bb      	str	r3, [r7, #56]	@ 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800963c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800963e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009642:	461a      	mov	r2, r3
 8009644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009646:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800964a:	895b      	ldrh	r3, [r3, #10]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d008      	beq.n	8009662 <mount_volume+0x1c2>
 8009650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009652:	895b      	ldrh	r3, [r3, #10]
 8009654:	461a      	mov	r2, r3
 8009656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009658:	895b      	ldrh	r3, [r3, #10]
 800965a:	3b01      	subs	r3, #1
 800965c:	4013      	ands	r3, r2
 800965e:	2b00      	cmp	r3, #0
 8009660:	d001      	beq.n	8009666 <mount_volume+0x1c6>
 8009662:	230d      	movs	r3, #13
 8009664:	e137      	b.n	80098d6 <mount_volume+0x436>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009668:	3334      	adds	r3, #52	@ 0x34
 800966a:	3311      	adds	r3, #17
 800966c:	4618      	mov	r0, r3
 800966e:	f7fe fceb 	bl	8008048 <ld_word>
 8009672:	4603      	mov	r3, r0
 8009674:	461a      	mov	r2, r3
 8009676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009678:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800967a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800967c:	891b      	ldrh	r3, [r3, #8]
 800967e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009680:	8992      	ldrh	r2, [r2, #12]
 8009682:	0952      	lsrs	r2, r2, #5
 8009684:	b292      	uxth	r2, r2
 8009686:	fbb3 f1f2 	udiv	r1, r3, r2
 800968a:	fb01 f202 	mul.w	r2, r1, r2
 800968e:	1a9b      	subs	r3, r3, r2
 8009690:	b29b      	uxth	r3, r3
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <mount_volume+0x1fa>
 8009696:	230d      	movs	r3, #13
 8009698:	e11d      	b.n	80098d6 <mount_volume+0x436>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800969a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969c:	3334      	adds	r3, #52	@ 0x34
 800969e:	3313      	adds	r3, #19
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7fe fcd1 	bl	8008048 <ld_word>
 80096a6:	4603      	mov	r3, r0
 80096a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80096aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d106      	bne.n	80096be <mount_volume+0x21e>
 80096b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b2:	3334      	adds	r3, #52	@ 0x34
 80096b4:	3320      	adds	r3, #32
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fe fcdf 	bl	800807a <ld_dword>
 80096bc:	63f8      	str	r0, [r7, #60]	@ 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80096be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c0:	3334      	adds	r3, #52	@ 0x34
 80096c2:	330e      	adds	r3, #14
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7fe fcbf 	bl	8008048 <ld_word>
 80096ca:	4603      	mov	r3, r0
 80096cc:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80096ce:	8bfb      	ldrh	r3, [r7, #30]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d101      	bne.n	80096d8 <mount_volume+0x238>
 80096d4:	230d      	movs	r3, #13
 80096d6:	e0fe      	b.n	80098d6 <mount_volume+0x436>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80096d8:	8bfa      	ldrh	r2, [r7, #30]
 80096da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096dc:	4413      	add	r3, r2
 80096de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096e0:	8911      	ldrh	r1, [r2, #8]
 80096e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096e4:	8992      	ldrh	r2, [r2, #12]
 80096e6:	0952      	lsrs	r2, r2, #5
 80096e8:	b292      	uxth	r2, r2
 80096ea:	fbb1 f2f2 	udiv	r2, r1, r2
 80096ee:	b292      	uxth	r2, r2
 80096f0:	4413      	add	r3, r2
 80096f2:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80096f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d201      	bcs.n	8009700 <mount_volume+0x260>
 80096fc:	230d      	movs	r3, #13
 80096fe:	e0ea      	b.n	80098d6 <mount_volume+0x436>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009700:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	1ad3      	subs	r3, r2, r3
 8009706:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009708:	8952      	ldrh	r2, [r2, #10]
 800970a:	fbb3 f3f2 	udiv	r3, r3, r2
 800970e:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d101      	bne.n	800971a <mount_volume+0x27a>
 8009716:	230d      	movs	r3, #13
 8009718:	e0dd      	b.n	80098d6 <mount_volume+0x436>
		fmt = 0;
 800971a:	2300      	movs	r3, #0
 800971c:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	4a0c      	ldr	r2, [pc, #48]	@ (8009754 <mount_volume+0x2b4>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d801      	bhi.n	800972a <mount_volume+0x28a>
 8009726:	2303      	movs	r3, #3
 8009728:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009730:	4293      	cmp	r3, r2
 8009732:	d801      	bhi.n	8009738 <mount_volume+0x298>
 8009734:	2302      	movs	r3, #2
 8009736:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800973e:	4293      	cmp	r3, r2
 8009740:	d801      	bhi.n	8009746 <mount_volume+0x2a6>
 8009742:	2301      	movs	r3, #1
 8009744:	633b      	str	r3, [r7, #48]	@ 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8009746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009748:	2b00      	cmp	r3, #0
 800974a:	d105      	bne.n	8009758 <mount_volume+0x2b8>
 800974c:	230d      	movs	r3, #13
 800974e:	e0c2      	b.n	80098d6 <mount_volume+0x436>
 8009750:	20005a04 	.word	0x20005a04
 8009754:	0ffffff5 	.word	0x0ffffff5

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	1c9a      	adds	r2, r3, #2
 800975c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800975e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009762:	6a3a      	ldr	r2, [r7, #32]
 8009764:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009766:	8bfa      	ldrh	r2, [r7, #30]
 8009768:	6a3b      	ldr	r3, [r7, #32]
 800976a:	441a      	add	r2, r3
 800976c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800976e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009770:	6a3a      	ldr	r2, [r7, #32]
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	441a      	add	r2, r3
 8009776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009778:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800977a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800977c:	2b03      	cmp	r3, #3
 800977e:	d11e      	bne.n	80097be <mount_volume+0x31e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009782:	3334      	adds	r3, #52	@ 0x34
 8009784:	332a      	adds	r3, #42	@ 0x2a
 8009786:	4618      	mov	r0, r3
 8009788:	f7fe fc5e 	bl	8008048 <ld_word>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d001      	beq.n	8009796 <mount_volume+0x2f6>
 8009792:	230d      	movs	r3, #13
 8009794:	e09f      	b.n	80098d6 <mount_volume+0x436>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009798:	891b      	ldrh	r3, [r3, #8]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <mount_volume+0x302>
 800979e:	230d      	movs	r3, #13
 80097a0:	e099      	b.n	80098d6 <mount_volume+0x436>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80097a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097a4:	3334      	adds	r3, #52	@ 0x34
 80097a6:	332c      	adds	r3, #44	@ 0x2c
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7fe fc66 	bl	800807a <ld_dword>
 80097ae:	4602      	mov	r2, r0
 80097b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b2:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80097b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b6:	699b      	ldr	r3, [r3, #24]
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80097bc:	e01e      	b.n	80097fc <mount_volume+0x35c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80097be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097c0:	891b      	ldrh	r3, [r3, #8]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d101      	bne.n	80097ca <mount_volume+0x32a>
 80097c6:	230d      	movs	r3, #13
 80097c8:	e085      	b.n	80098d6 <mount_volume+0x436>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80097ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80097ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d0:	441a      	add	r2, r3
 80097d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d4:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80097d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d103      	bne.n	80097e4 <mount_volume+0x344>
 80097dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097de:	699b      	ldr	r3, [r3, #24]
 80097e0:	005b      	lsls	r3, r3, #1
 80097e2:	e00a      	b.n	80097fa <mount_volume+0x35a>
 80097e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e6:	699a      	ldr	r2, [r3, #24]
 80097e8:	4613      	mov	r3, r2
 80097ea:	005b      	lsls	r3, r3, #1
 80097ec:	4413      	add	r3, r2
 80097ee:	085a      	lsrs	r2, r3, #1
 80097f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f2:	699b      	ldr	r3, [r3, #24]
 80097f4:	f003 0301 	and.w	r3, r3, #1
 80097f8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80097fa:	637b      	str	r3, [r7, #52]	@ 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80097fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097fe:	69da      	ldr	r2, [r3, #28]
 8009800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009802:	899b      	ldrh	r3, [r3, #12]
 8009804:	4619      	mov	r1, r3
 8009806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009808:	440b      	add	r3, r1
 800980a:	3b01      	subs	r3, #1
 800980c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800980e:	8989      	ldrh	r1, [r1, #12]
 8009810:	fbb3 f3f1 	udiv	r3, r3, r1
 8009814:	429a      	cmp	r2, r3
 8009816:	d201      	bcs.n	800981c <mount_volume+0x37c>
 8009818:	230d      	movs	r3, #13
 800981a:	e05c      	b.n	80098d6 <mount_volume+0x436>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800981c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800981e:	f04f 32ff 	mov.w	r2, #4294967295
 8009822:	615a      	str	r2, [r3, #20]
 8009824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009826:	695a      	ldr	r2, [r3, #20]
 8009828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800982a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800982c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800982e:	2280      	movs	r2, #128	@ 0x80
 8009830:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8009832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009834:	2b03      	cmp	r3, #3
 8009836:	d13f      	bne.n	80098b8 <mount_volume+0x418>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800983a:	3334      	adds	r3, #52	@ 0x34
 800983c:	3330      	adds	r3, #48	@ 0x30
 800983e:	4618      	mov	r0, r3
 8009840:	f7fe fc02 	bl	8008048 <ld_word>
 8009844:	4603      	mov	r3, r0
 8009846:	2b01      	cmp	r3, #1
 8009848:	d136      	bne.n	80098b8 <mount_volume+0x418>
			&& move_window(fs, bsect + 1) == FR_OK)
 800984a:	6a3b      	ldr	r3, [r7, #32]
 800984c:	3301      	adds	r3, #1
 800984e:	4619      	mov	r1, r3
 8009850:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009852:	f7fe fcda 	bl	800820a <move_window>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d12d      	bne.n	80098b8 <mount_volume+0x418>
		{
			fs->fsi_flag = 0;
 800985c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800985e:	2200      	movs	r2, #0
 8009860:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8009862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009864:	3334      	adds	r3, #52	@ 0x34
 8009866:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800986a:	4618      	mov	r0, r3
 800986c:	f7fe fbec 	bl	8008048 <ld_word>
 8009870:	4603      	mov	r3, r0
 8009872:	461a      	mov	r2, r3
 8009874:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009878:	429a      	cmp	r2, r3
 800987a:	d11d      	bne.n	80098b8 <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800987c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800987e:	3334      	adds	r3, #52	@ 0x34
 8009880:	4618      	mov	r0, r3
 8009882:	f7fe fbfa 	bl	800807a <ld_dword>
 8009886:	4603      	mov	r3, r0
 8009888:	4a15      	ldr	r2, [pc, #84]	@ (80098e0 <mount_volume+0x440>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d114      	bne.n	80098b8 <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800988e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009890:	3334      	adds	r3, #52	@ 0x34
 8009892:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009896:	4618      	mov	r0, r3
 8009898:	f7fe fbef 	bl	800807a <ld_dword>
 800989c:	4603      	mov	r3, r0
 800989e:	4a11      	ldr	r2, [pc, #68]	@ (80098e4 <mount_volume+0x444>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d109      	bne.n	80098b8 <mount_volume+0x418>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80098a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a6:	3334      	adds	r3, #52	@ 0x34
 80098a8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7fe fbe4 	bl	800807a <ld_dword>
 80098b2:	4602      	mov	r2, r0
 80098b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 80098b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ba:	b2da      	uxtb	r2, r3
 80098bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098be:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 80098c0:	4b09      	ldr	r3, [pc, #36]	@ (80098e8 <mount_volume+0x448>)
 80098c2:	881b      	ldrh	r3, [r3, #0]
 80098c4:	3301      	adds	r3, #1
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	4b07      	ldr	r3, [pc, #28]	@ (80098e8 <mount_volume+0x448>)
 80098ca:	801a      	strh	r2, [r3, #0]
 80098cc:	4b06      	ldr	r3, [pc, #24]	@ (80098e8 <mount_volume+0x448>)
 80098ce:	881a      	ldrh	r2, [r3, #0]
 80098d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d2:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3740      	adds	r7, #64	@ 0x40
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	41615252 	.word	0x41615252
 80098e4:	61417272 	.word	0x61417272
 80098e8:	20005a0c 	.word	0x20005a0c

080098ec <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80098f6:	2309      	movs	r3, #9
 80098f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d01c      	beq.n	800993a <validate+0x4e>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d018      	beq.n	800993a <validate+0x4e>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d013      	beq.n	800993a <validate+0x4e>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	889a      	ldrh	r2, [r3, #4]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	88db      	ldrh	r3, [r3, #6]
 800991c:	429a      	cmp	r2, r3
 800991e:	d10c      	bne.n	800993a <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	785b      	ldrb	r3, [r3, #1]
 8009926:	4618      	mov	r0, r3
 8009928:	f7fe fa56 	bl	8007dd8 <disk_status>
 800992c:	4603      	mov	r3, r0
 800992e:	f003 0301 	and.w	r3, r3, #1
 8009932:	2b00      	cmp	r3, #0
 8009934:	d101      	bne.n	800993a <validate+0x4e>
			res = FR_OK;
 8009936:	2300      	movs	r3, #0
 8009938:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 800993a:	7bfb      	ldrb	r3, [r7, #15]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d102      	bne.n	8009946 <validate+0x5a>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	e000      	b.n	8009948 <validate+0x5c>
 8009946:	2300      	movs	r3, #0
 8009948:	683a      	ldr	r2, [r7, #0]
 800994a:	6013      	str	r3, [r2, #0]
	return res;
 800994c:	7bfb      	ldrb	r3, [r7, #15]
}
 800994e:	4618      	mov	r0, r3
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
	...

08009958 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b088      	sub	sp, #32
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	4613      	mov	r3, r2
 8009964:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 800996a:	f107 0310 	add.w	r3, r7, #16
 800996e:	4618      	mov	r0, r3
 8009970:	f7ff fbf8 	bl	8009164 <get_ldnumber>
 8009974:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	2b00      	cmp	r3, #0
 800997a:	da01      	bge.n	8009980 <f_mount+0x28>
 800997c:	230b      	movs	r3, #11
 800997e:	e02e      	b.n	80099de <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 8009980:	4a19      	ldr	r2, [pc, #100]	@ (80099e8 <f_mount+0x90>)
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009988:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d007      	beq.n	80099a0 <f_mount+0x48>
		FatFs[vol] = 0;
 8009990:	4a15      	ldr	r2, [pc, #84]	@ (80099e8 <f_mount+0x90>)
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	2100      	movs	r1, #0
 8009996:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	2200      	movs	r2, #0
 800999e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00b      	beq.n	80099be <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	69fa      	ldr	r2, [r7, #28]
 80099aa:	b2d2      	uxtb	r2, r2
 80099ac:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2200      	movs	r2, #0
 80099b2:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	490c      	ldr	r1, [pc, #48]	@ (80099e8 <f_mount+0x90>)
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 80099be:	79fb      	ldrb	r3, [r7, #7]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d101      	bne.n	80099c8 <f_mount+0x70>
 80099c4:	2300      	movs	r3, #0
 80099c6:	e00a      	b.n	80099de <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 80099c8:	f107 010c 	add.w	r1, r7, #12
 80099cc:	f107 0308 	add.w	r3, r7, #8
 80099d0:	2200      	movs	r2, #0
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7ff fd64 	bl	80094a0 <mount_volume>
 80099d8:	4603      	mov	r3, r0
 80099da:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80099dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3720      	adds	r7, #32
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	20005a04 	.word	0x20005a04

080099ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b098      	sub	sp, #96	@ 0x60
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	4613      	mov	r3, r2
 80099f8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d101      	bne.n	8009a04 <f_open+0x18>
 8009a00:	2309      	movs	r3, #9
 8009a02:	e184      	b.n	8009d0e <f_open+0x322>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8009a04:	79fb      	ldrb	r3, [r7, #7]
 8009a06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a0a:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 8009a0c:	79fa      	ldrb	r2, [r7, #7]
 8009a0e:	f107 0114 	add.w	r1, r7, #20
 8009a12:	f107 0308 	add.w	r3, r7, #8
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7ff fd42 	bl	80094a0 <mount_volume>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8009a22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	f040 8168 	bne.w	8009cfc <f_open+0x310>
		dj.obj.fs = fs;
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009a30:	68ba      	ldr	r2, [r7, #8]
 8009a32:	f107 0318 	add.w	r3, r7, #24
 8009a36:	4611      	mov	r1, r2
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7ff fb1f 	bl	800907c <follow_path>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8009a44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d107      	bne.n	8009a5c <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009a4c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009a50:	b25b      	sxtb	r3, r3
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	da02      	bge.n	8009a5c <f_open+0x70>
				res = FR_INVALID_NAME;
 8009a56:	2306      	movs	r3, #6
 8009a58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009a5c:	79fb      	ldrb	r3, [r7, #7]
 8009a5e:	f003 031c 	and.w	r3, r3, #28
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d077      	beq.n	8009b56 <f_open+0x16a>
			if (res != FR_OK) {					/* No file, create new */
 8009a66:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d010      	beq.n	8009a90 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009a6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a72:	2b04      	cmp	r3, #4
 8009a74:	d107      	bne.n	8009a86 <f_open+0x9a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8009a76:	f107 0318 	add.w	r3, r7, #24
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7ff f9f4 	bl	8008e68 <dir_register>
 8009a80:	4603      	mov	r3, r0
 8009a82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009a86:	79fb      	ldrb	r3, [r7, #7]
 8009a88:	f043 0308 	orr.w	r3, r3, #8
 8009a8c:	71fb      	strb	r3, [r7, #7]
 8009a8e:	e010      	b.n	8009ab2 <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009a90:	7fbb      	ldrb	r3, [r7, #30]
 8009a92:	f003 0311 	and.w	r3, r3, #17
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d003      	beq.n	8009aa2 <f_open+0xb6>
					res = FR_DENIED;
 8009a9a:	2307      	movs	r3, #7
 8009a9c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009aa0:	e007      	b.n	8009ab2 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009aa2:	79fb      	ldrb	r3, [r7, #7]
 8009aa4:	f003 0304 	and.w	r3, r3, #4
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d002      	beq.n	8009ab2 <f_open+0xc6>
 8009aac:	2308      	movs	r3, #8
 8009aae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8009ab2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d167      	bne.n	8009b8a <f_open+0x19e>
 8009aba:	79fb      	ldrb	r3, [r7, #7]
 8009abc:	f003 0308 	and.w	r3, r3, #8
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d062      	beq.n	8009b8a <f_open+0x19e>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 8009ac4:	4b94      	ldr	r3, [pc, #592]	@ (8009d18 <f_open+0x32c>)
 8009ac6:	653b      	str	r3, [r7, #80]	@ 0x50
					st_dword(dj.dir + DIR_CrtTime, tm);
 8009ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aca:	330e      	adds	r3, #14
 8009acc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7fe fb11 	bl	80080f6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 8009ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ad6:	3316      	adds	r3, #22
 8009ad8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fe fb0b 	bl	80080f6 <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ae4:	4611      	mov	r1, r2
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7ff f92a 	bl	8008d40 <ld_clust>
 8009aec:	64f8      	str	r0, [r7, #76]	@ 0x4c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009af0:	330b      	adds	r3, #11
 8009af2:	2220      	movs	r2, #32
 8009af4:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009afa:	2200      	movs	r2, #0
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7ff f93e 	bl	8008d7e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b04:	331c      	adds	r3, #28
 8009b06:	2100      	movs	r1, #0
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7fe faf4 	bl	80080f6 <st_dword>
					fs->wflag = 1;
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	2201      	movs	r2, #1
 8009b12:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8009b14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d037      	beq.n	8009b8a <f_open+0x19e>
						sc = fs->winsect;
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
						res = remove_chain(&dj.obj, cl, 0);
 8009b20:	f107 0318 	add.w	r3, r7, #24
 8009b24:	2200      	movs	r2, #0
 8009b26:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7fe fe15 	bl	8008758 <remove_chain>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8009b34:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d126      	bne.n	8009b8a <f_open+0x19e>
							res = move_window(fs, sc);
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7fe fb62 	bl	800820a <move_window>
 8009b46:	4603      	mov	r3, r0
 8009b48:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009b50:	3a01      	subs	r2, #1
 8009b52:	611a      	str	r2, [r3, #16]
 8009b54:	e019      	b.n	8009b8a <f_open+0x19e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8009b56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d115      	bne.n	8009b8a <f_open+0x19e>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8009b5e:	7fbb      	ldrb	r3, [r7, #30]
 8009b60:	f003 0310 	and.w	r3, r3, #16
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d003      	beq.n	8009b70 <f_open+0x184>
					res = FR_NO_FILE;
 8009b68:	2304      	movs	r3, #4
 8009b6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009b6e:	e00c      	b.n	8009b8a <f_open+0x19e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8009b70:	79fb      	ldrb	r3, [r7, #7]
 8009b72:	f003 0302 	and.w	r3, r3, #2
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d007      	beq.n	8009b8a <f_open+0x19e>
 8009b7a:	7fbb      	ldrb	r3, [r7, #30]
 8009b7c:	f003 0301 	and.w	r3, r3, #1
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d002      	beq.n	8009b8a <f_open+0x19e>
						res = FR_DENIED;
 8009b84:	2307      	movs	r3, #7
 8009b86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009b8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d10f      	bne.n	8009bb2 <f_open+0x1c6>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8009b92:	79fb      	ldrb	r3, [r7, #7]
 8009b94:	f003 0308 	and.w	r3, r3, #8
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d003      	beq.n	8009ba4 <f_open+0x1b8>
 8009b9c:	79fb      	ldrb	r3, [r7, #7]
 8009b9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ba2:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8009bac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009bb2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f040 80a0 	bne.w	8009cfc <f_open+0x310>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009bc0:	4611      	mov	r1, r2
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7ff f8bc 	bl	8008d40 <ld_clust>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bd0:	331c      	adds	r3, #28
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fe fa51 	bl	800807a <ld_dword>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 8009bde:	697a      	ldr	r2, [r7, #20]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	88da      	ldrh	r2, [r3, #6]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	79fa      	ldrb	r2, [r7, #7]
 8009bf0:	741a      	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2200      	movs	r2, #0
 8009c02:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	3328      	adds	r3, #40	@ 0x28
 8009c08:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f00c face 	bl	80161b0 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009c14:	79fb      	ldrb	r3, [r7, #7]
 8009c16:	f003 0320 	and.w	r3, r3, #32
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d06e      	beq.n	8009cfc <f_open+0x310>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d06a      	beq.n	8009cfc <f_open+0x310>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	68da      	ldr	r2, [r3, #12]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	895b      	ldrh	r3, [r3, #10]
 8009c32:	461a      	mov	r2, r3
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	899b      	ldrh	r3, [r3, #12]
 8009c38:	fb02 f303 	mul.w	r3, r2, r3
 8009c3c:	647b      	str	r3, [r7, #68]	@ 0x44
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	68db      	ldr	r3, [r3, #12]
 8009c48:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c4a:	e016      	b.n	8009c7a <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fe fb94 	bl	800837e <get_fat>
 8009c56:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009c58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d802      	bhi.n	8009c64 <f_open+0x278>
 8009c5e:	2302      	movs	r3, #2
 8009c60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009c64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c6a:	d102      	bne.n	8009c72 <f_open+0x286>
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009c72:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d103      	bne.n	8009c8a <f_open+0x29e>
 8009c82:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d8e0      	bhi.n	8009c4c <f_open+0x260>
				}
				fp->clust = clst;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c8e:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009c90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d131      	bne.n	8009cfc <f_open+0x310>
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	899b      	ldrh	r3, [r3, #12]
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ca0:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ca4:	fb01 f202 	mul.w	r2, r1, r2
 8009ca8:	1a9b      	subs	r3, r3, r2
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d026      	beq.n	8009cfc <f_open+0x310>
					sc = clst2sect(fs, clst);
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7fe fb44 	bl	8008340 <clst2sect>
 8009cb8:	64b8      	str	r0, [r7, #72]	@ 0x48
					if (sc == 0) {
 8009cba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d103      	bne.n	8009cc8 <f_open+0x2dc>
						res = FR_INT_ERR;
 8009cc0:	2302      	movs	r3, #2
 8009cc2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009cc6:	e019      	b.n	8009cfc <f_open+0x310>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	899b      	ldrh	r3, [r3, #12]
 8009ccc:	461a      	mov	r2, r3
 8009cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cd0:	fbb3 f2f2 	udiv	r2, r3, r2
 8009cd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cd6:	441a      	add	r2, r3
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	7858      	ldrb	r0, [r3, #1]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	69da      	ldr	r2, [r3, #28]
 8009cea:	2301      	movs	r3, #1
 8009cec:	f7fe f8c4 	bl	8007e78 <disk_read>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d002      	beq.n	8009cfc <f_open+0x310>
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009cfc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d002      	beq.n	8009d0a <f_open+0x31e>
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2200      	movs	r2, #0
 8009d08:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009d0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3760      	adds	r7, #96	@ 0x60
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	54210000 	.word	0x54210000

08009d1c <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b08e      	sub	sp, #56	@ 0x38
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	607a      	str	r2, [r7, #4]
 8009d28:	603b      	str	r3, [r7, #0]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	2200      	movs	r2, #0
 8009d32:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f107 0214 	add.w	r2, r7, #20
 8009d3a:	4611      	mov	r1, r2
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f7ff fdd5 	bl	80098ec <validate>
 8009d42:	4603      	mov	r3, r0
 8009d44:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009d48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d107      	bne.n	8009d60 <f_read+0x44>
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	7c5b      	ldrb	r3, [r3, #17]
 8009d54:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009d58:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d002      	beq.n	8009d66 <f_read+0x4a>
 8009d60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009d64:	e129      	b.n	8009fba <f_read+0x29e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	7c1b      	ldrb	r3, [r3, #16]
 8009d6a:	f003 0301 	and.w	r3, r3, #1
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d101      	bne.n	8009d76 <f_read+0x5a>
 8009d72:	2307      	movs	r3, #7
 8009d74:	e121      	b.n	8009fba <f_read+0x29e>
	remain = fp->obj.objsize - fp->fptr;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	68da      	ldr	r2, [r3, #12]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	695b      	ldr	r3, [r3, #20]
 8009d7e:	1ad3      	subs	r3, r2, r3
 8009d80:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	6a3b      	ldr	r3, [r7, #32]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	f240 8112 	bls.w	8009fb0 <f_read+0x294>
 8009d8c:	6a3b      	ldr	r3, [r7, #32]
 8009d8e:	607b      	str	r3, [r7, #4]

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8009d90:	e10e      	b.n	8009fb0 <f_read+0x294>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	695b      	ldr	r3, [r3, #20]
 8009d96:	697a      	ldr	r2, [r7, #20]
 8009d98:	8992      	ldrh	r2, [r2, #12]
 8009d9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d9e:	fb01 f202 	mul.w	r2, r1, r2
 8009da2:	1a9b      	subs	r3, r3, r2
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f040 80c9 	bne.w	8009f3c <f_read+0x220>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	695b      	ldr	r3, [r3, #20]
 8009dae:	697a      	ldr	r2, [r7, #20]
 8009db0:	8992      	ldrh	r2, [r2, #12]
 8009db2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009db6:	697a      	ldr	r2, [r7, #20]
 8009db8:	8952      	ldrh	r2, [r2, #10]
 8009dba:	3a01      	subs	r2, #1
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d123      	bne.n	8009e0e <f_read+0xf2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	695b      	ldr	r3, [r3, #20]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d103      	bne.n	8009dd6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009dd4:	e007      	b.n	8009de6 <f_read+0xca>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	699b      	ldr	r3, [r3, #24]
 8009ddc:	4619      	mov	r1, r3
 8009dde:	4610      	mov	r0, r2
 8009de0:	f7fe facd 	bl	800837e <get_fat>
 8009de4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d804      	bhi.n	8009df6 <f_read+0xda>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2202      	movs	r2, #2
 8009df0:	745a      	strb	r2, [r3, #17]
 8009df2:	2302      	movs	r3, #2
 8009df4:	e0e1      	b.n	8009fba <f_read+0x29e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dfc:	d104      	bne.n	8009e08 <f_read+0xec>
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2201      	movs	r2, #1
 8009e02:	745a      	strb	r2, [r3, #17]
 8009e04:	2301      	movs	r3, #1
 8009e06:	e0d8      	b.n	8009fba <f_read+0x29e>
				fp->clust = clst;				/* Update current cluster */
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e0c:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8009e0e:	697a      	ldr	r2, [r7, #20]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	699b      	ldr	r3, [r3, #24]
 8009e14:	4619      	mov	r1, r3
 8009e16:	4610      	mov	r0, r2
 8009e18:	f7fe fa92 	bl	8008340 <clst2sect>
 8009e1c:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d104      	bne.n	8009e2e <f_read+0x112>
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2202      	movs	r2, #2
 8009e28:	745a      	strb	r2, [r3, #17]
 8009e2a:	2302      	movs	r3, #2
 8009e2c:	e0c5      	b.n	8009fba <f_read+0x29e>
			sect += csect;
 8009e2e:	69ba      	ldr	r2, [r7, #24]
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	4413      	add	r3, r2
 8009e34:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	899b      	ldrh	r3, [r3, #12]
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e42:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8009e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d041      	beq.n	8009ece <f_read+0x1b2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009e4a:	69fa      	ldr	r2, [r7, #28]
 8009e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e4e:	4413      	add	r3, r2
 8009e50:	697a      	ldr	r2, [r7, #20]
 8009e52:	8952      	ldrh	r2, [r2, #10]
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d905      	bls.n	8009e64 <f_read+0x148>
					cc = fs->csize - csect;
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	895b      	ldrh	r3, [r3, #10]
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	1ad3      	subs	r3, r2, r3
 8009e62:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	7858      	ldrb	r0, [r3, #1]
 8009e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e6a:	69ba      	ldr	r2, [r7, #24]
 8009e6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009e6e:	f7fe f803 	bl	8007e78 <disk_read>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d004      	beq.n	8009e82 <f_read+0x166>
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	745a      	strb	r2, [r3, #17]
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e09b      	b.n	8009fba <f_read+0x29e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	7c1b      	ldrb	r3, [r3, #16]
 8009e86:	b25b      	sxtb	r3, r3
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	da18      	bge.n	8009ebe <f_read+0x1a2>
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	69da      	ldr	r2, [r3, #28]
 8009e90:	69bb      	ldr	r3, [r7, #24]
 8009e92:	1ad3      	subs	r3, r2, r3
 8009e94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d911      	bls.n	8009ebe <f_read+0x1a2>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	69da      	ldr	r2, [r3, #28]
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	697a      	ldr	r2, [r7, #20]
 8009ea4:	8992      	ldrh	r2, [r2, #12]
 8009ea6:	fb02 f303 	mul.w	r3, r2, r3
 8009eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009eac:	18d0      	adds	r0, r2, r3
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	899b      	ldrh	r3, [r3, #12]
 8009eb8:	461a      	mov	r2, r3
 8009eba:	f00c f9fd 	bl	80162b8 <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	899b      	ldrh	r3, [r3, #12]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec6:	fb02 f303 	mul.w	r3, r2, r3
 8009eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009ecc:	e05c      	b.n	8009f88 <f_read+0x26c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	69db      	ldr	r3, [r3, #28]
 8009ed2:	69ba      	ldr	r2, [r7, #24]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d02e      	beq.n	8009f36 <f_read+0x21a>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	7c1b      	ldrb	r3, [r3, #16]
 8009edc:	b25b      	sxtb	r3, r3
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	da18      	bge.n	8009f14 <f_read+0x1f8>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	7858      	ldrb	r0, [r3, #1]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	69da      	ldr	r2, [r3, #28]
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	f7fd fff3 	bl	8007edc <disk_write>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d004      	beq.n	8009f06 <f_read+0x1ea>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2201      	movs	r2, #1
 8009f00:	745a      	strb	r2, [r3, #17]
 8009f02:	2301      	movs	r3, #1
 8009f04:	e059      	b.n	8009fba <f_read+0x29e>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	7c1b      	ldrb	r3, [r3, #16]
 8009f0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f0e:	b2da      	uxtb	r2, r3
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	7858      	ldrb	r0, [r3, #1]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009f1e:	2301      	movs	r3, #1
 8009f20:	69ba      	ldr	r2, [r7, #24]
 8009f22:	f7fd ffa9 	bl	8007e78 <disk_read>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d004      	beq.n	8009f36 <f_read+0x21a>
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	745a      	strb	r2, [r3, #17]
 8009f32:	2301      	movs	r3, #1
 8009f34:	e041      	b.n	8009fba <f_read+0x29e>
			}
#endif
			fp->sect = sect;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	69ba      	ldr	r2, [r7, #24]
 8009f3a:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	899b      	ldrh	r3, [r3, #12]
 8009f40:	4618      	mov	r0, r3
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	695b      	ldr	r3, [r3, #20]
 8009f46:	697a      	ldr	r2, [r7, #20]
 8009f48:	8992      	ldrh	r2, [r2, #12]
 8009f4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f4e:	fb01 f202 	mul.w	r2, r1, r2
 8009f52:	1a9b      	subs	r3, r3, r2
 8009f54:	1ac3      	subs	r3, r0, r3
 8009f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009f58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d901      	bls.n	8009f64 <f_read+0x248>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	695b      	ldr	r3, [r3, #20]
 8009f6e:	697a      	ldr	r2, [r7, #20]
 8009f70:	8992      	ldrh	r2, [r2, #12]
 8009f72:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f76:	fb00 f202 	mul.w	r2, r0, r2
 8009f7a:	1a9b      	subs	r3, r3, r2
 8009f7c:	440b      	add	r3, r1
 8009f7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f80:	4619      	mov	r1, r3
 8009f82:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009f84:	f00c f998 	bl	80162b8 <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	607b      	str	r3, [r7, #4]
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f96:	441a      	add	r2, r3
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	601a      	str	r2, [r3, #0]
 8009f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa0:	4413      	add	r3, r2
 8009fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	695a      	ldr	r2, [r3, #20]
 8009fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009faa:	441a      	add	r2, r3
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	615a      	str	r2, [r3, #20]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f47f aeed 	bne.w	8009d92 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3738      	adds	r7, #56	@ 0x38
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}

08009fc2 <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b08c      	sub	sp, #48	@ 0x30
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	60f8      	str	r0, [r7, #12]
 8009fca:	60b9      	str	r1, [r7, #8]
 8009fcc:	607a      	str	r2, [r7, #4]
 8009fce:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f107 0210 	add.w	r2, r7, #16
 8009fe0:	4611      	mov	r1, r2
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7ff fc82 	bl	80098ec <validate>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009fee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d107      	bne.n	800a006 <f_write+0x44>
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	7c5b      	ldrb	r3, [r3, #17]
 8009ffa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a002:	2b00      	cmp	r3, #0
 800a004:	d002      	beq.n	800a00c <f_write+0x4a>
 800a006:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a00a:	e15e      	b.n	800a2ca <f_write+0x308>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	7c1b      	ldrb	r3, [r3, #16]
 800a010:	f003 0302 	and.w	r3, r3, #2
 800a014:	2b00      	cmp	r3, #0
 800a016:	d101      	bne.n	800a01c <f_write+0x5a>
 800a018:	2307      	movs	r3, #7
 800a01a:	e156      	b.n	800a2ca <f_write+0x308>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	695a      	ldr	r2, [r3, #20]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	441a      	add	r2, r3
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	695b      	ldr	r3, [r3, #20]
 800a028:	429a      	cmp	r2, r3
 800a02a:	f080 8140 	bcs.w	800a2ae <f_write+0x2ec>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	695b      	ldr	r3, [r3, #20]
 800a032:	43db      	mvns	r3, r3
 800a034:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800a036:	e13a      	b.n	800a2ae <f_write+0x2ec>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	695b      	ldr	r3, [r3, #20]
 800a03c:	693a      	ldr	r2, [r7, #16]
 800a03e:	8992      	ldrh	r2, [r2, #12]
 800a040:	fbb3 f1f2 	udiv	r1, r3, r2
 800a044:	fb01 f202 	mul.w	r2, r1, r2
 800a048:	1a9b      	subs	r3, r3, r2
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	f040 80e5 	bne.w	800a21a <f_write+0x258>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	695b      	ldr	r3, [r3, #20]
 800a054:	693a      	ldr	r2, [r7, #16]
 800a056:	8992      	ldrh	r2, [r2, #12]
 800a058:	fbb3 f3f2 	udiv	r3, r3, r2
 800a05c:	693a      	ldr	r2, [r7, #16]
 800a05e:	8952      	ldrh	r2, [r2, #10]
 800a060:	3a01      	subs	r2, #1
 800a062:	4013      	ands	r3, r2
 800a064:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d137      	bne.n	800a0dc <f_write+0x11a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	695b      	ldr	r3, [r3, #20]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10c      	bne.n	800a08e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d10e      	bne.n	800a09e <f_write+0xdc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2100      	movs	r1, #0
 800a084:	4618      	mov	r0, r3
 800a086:	f7fe fbcc 	bl	8008822 <create_chain>
 800a08a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a08c:	e007      	b.n	800a09e <f_write+0xdc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a08e:	68fa      	ldr	r2, [r7, #12]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	699b      	ldr	r3, [r3, #24]
 800a094:	4619      	mov	r1, r3
 800a096:	4610      	mov	r0, r2
 800a098:	f7fe fbc3 	bl	8008822 <create_chain>
 800a09c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 8109 	beq.w	800a2b8 <f_write+0x2f6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a0a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d104      	bne.n	800a0b6 <f_write+0xf4>
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2202      	movs	r2, #2
 800a0b0:	745a      	strb	r2, [r3, #17]
 800a0b2:	2302      	movs	r3, #2
 800a0b4:	e109      	b.n	800a2ca <f_write+0x308>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a0b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0bc:	d104      	bne.n	800a0c8 <f_write+0x106>
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	745a      	strb	r2, [r3, #17]
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e100      	b.n	800a2ca <f_write+0x308>
				fp->clust = clst;			/* Update current cluster */
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0cc:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d102      	bne.n	800a0dc <f_write+0x11a>
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0da:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	7c1b      	ldrb	r3, [r3, #16]
 800a0e0:	b25b      	sxtb	r3, r3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	da18      	bge.n	800a118 <f_write+0x156>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	7858      	ldrb	r0, [r3, #1]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	69da      	ldr	r2, [r3, #28]
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	f7fd fef1 	bl	8007edc <disk_write>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d004      	beq.n	800a10a <f_write+0x148>
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2201      	movs	r2, #1
 800a104:	745a      	strb	r2, [r3, #17]
 800a106:	2301      	movs	r3, #1
 800a108:	e0df      	b.n	800a2ca <f_write+0x308>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	7c1b      	ldrb	r3, [r3, #16]
 800a10e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a112:	b2da      	uxtb	r2, r3
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800a118:	693a      	ldr	r2, [r7, #16]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	699b      	ldr	r3, [r3, #24]
 800a11e:	4619      	mov	r1, r3
 800a120:	4610      	mov	r0, r2
 800a122:	f7fe f90d 	bl	8008340 <clst2sect>
 800a126:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d104      	bne.n	800a138 <f_write+0x176>
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2202      	movs	r2, #2
 800a132:	745a      	strb	r2, [r3, #17]
 800a134:	2302      	movs	r3, #2
 800a136:	e0c8      	b.n	800a2ca <f_write+0x308>
			sect += csect;
 800a138:	697a      	ldr	r2, [r7, #20]
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	4413      	add	r3, r2
 800a13e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	899b      	ldrh	r3, [r3, #12]
 800a144:	461a      	mov	r2, r3
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	fbb3 f3f2 	udiv	r3, r3, r2
 800a14c:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 800a14e:	6a3b      	ldr	r3, [r7, #32]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d043      	beq.n	800a1dc <f_write+0x21a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a154:	69ba      	ldr	r2, [r7, #24]
 800a156:	6a3b      	ldr	r3, [r7, #32]
 800a158:	4413      	add	r3, r2
 800a15a:	693a      	ldr	r2, [r7, #16]
 800a15c:	8952      	ldrh	r2, [r2, #10]
 800a15e:	4293      	cmp	r3, r2
 800a160:	d905      	bls.n	800a16e <f_write+0x1ac>
					cc = fs->csize - csect;
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	895b      	ldrh	r3, [r3, #10]
 800a166:	461a      	mov	r2, r3
 800a168:	69bb      	ldr	r3, [r7, #24]
 800a16a:	1ad3      	subs	r3, r2, r3
 800a16c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	7858      	ldrb	r0, [r3, #1]
 800a172:	6a3b      	ldr	r3, [r7, #32]
 800a174:	697a      	ldr	r2, [r7, #20]
 800a176:	69f9      	ldr	r1, [r7, #28]
 800a178:	f7fd feb0 	bl	8007edc <disk_write>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d004      	beq.n	800a18c <f_write+0x1ca>
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2201      	movs	r2, #1
 800a186:	745a      	strb	r2, [r3, #17]
 800a188:	2301      	movs	r3, #1
 800a18a:	e09e      	b.n	800a2ca <f_write+0x308>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	69da      	ldr	r2, [r3, #28]
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	1ad3      	subs	r3, r2, r3
 800a194:	6a3a      	ldr	r2, [r7, #32]
 800a196:	429a      	cmp	r2, r3
 800a198:	d918      	bls.n	800a1cc <f_write+0x20a>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	69da      	ldr	r2, [r3, #28]
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	1ad3      	subs	r3, r2, r3
 800a1a8:	693a      	ldr	r2, [r7, #16]
 800a1aa:	8992      	ldrh	r2, [r2, #12]
 800a1ac:	fb02 f303 	mul.w	r3, r2, r3
 800a1b0:	69fa      	ldr	r2, [r7, #28]
 800a1b2:	18d1      	adds	r1, r2, r3
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	899b      	ldrh	r3, [r3, #12]
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	f00c f87d 	bl	80162b8 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	7c1b      	ldrb	r3, [r3, #16]
 800a1c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	899b      	ldrh	r3, [r3, #12]
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	6a3b      	ldr	r3, [r7, #32]
 800a1d4:	fb02 f303 	mul.w	r3, r2, r3
 800a1d8:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800a1da:	e04b      	b.n	800a274 <f_write+0x2b2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	69db      	ldr	r3, [r3, #28]
 800a1e0:	697a      	ldr	r2, [r7, #20]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d016      	beq.n	800a214 <f_write+0x252>
				fp->fptr < fp->obj.objsize &&
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	695a      	ldr	r2, [r3, #20]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d210      	bcs.n	800a214 <f_write+0x252>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	7858      	ldrb	r0, [r3, #1]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	697a      	ldr	r2, [r7, #20]
 800a200:	f7fd fe3a 	bl	8007e78 <disk_read>
 800a204:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a206:	2b00      	cmp	r3, #0
 800a208:	d004      	beq.n	800a214 <f_write+0x252>
					ABORT(fs, FR_DISK_ERR);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2201      	movs	r2, #1
 800a20e:	745a      	strb	r2, [r3, #17]
 800a210:	2301      	movs	r3, #1
 800a212:	e05a      	b.n	800a2ca <f_write+0x308>
			}
#endif
			fp->sect = sect;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	697a      	ldr	r2, [r7, #20]
 800a218:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	899b      	ldrh	r3, [r3, #12]
 800a21e:	4618      	mov	r0, r3
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	695b      	ldr	r3, [r3, #20]
 800a224:	693a      	ldr	r2, [r7, #16]
 800a226:	8992      	ldrh	r2, [r2, #12]
 800a228:	fbb3 f1f2 	udiv	r1, r3, r2
 800a22c:	fb01 f202 	mul.w	r2, r1, r2
 800a230:	1a9b      	subs	r3, r3, r2
 800a232:	1ac3      	subs	r3, r0, r3
 800a234:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d901      	bls.n	800a242 <f_write+0x280>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	627b      	str	r3, [r7, #36]	@ 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	695b      	ldr	r3, [r3, #20]
 800a24c:	693a      	ldr	r2, [r7, #16]
 800a24e:	8992      	ldrh	r2, [r2, #12]
 800a250:	fbb3 f0f2 	udiv	r0, r3, r2
 800a254:	fb00 f202 	mul.w	r2, r0, r2
 800a258:	1a9b      	subs	r3, r3, r2
 800a25a:	440b      	add	r3, r1
 800a25c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a25e:	69f9      	ldr	r1, [r7, #28]
 800a260:	4618      	mov	r0, r3
 800a262:	f00c f829 	bl	80162b8 <memcpy>
		fp->flag |= FA_DIRTY;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	7c1b      	ldrb	r3, [r3, #16]
 800a26a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a26e:	b2da      	uxtb	r2, r3
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	741a      	strb	r2, [r3, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a278:	1ad3      	subs	r3, r2, r3
 800a27a:	607b      	str	r3, [r7, #4]
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a282:	441a      	add	r2, r3
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	601a      	str	r2, [r3, #0]
 800a288:	69fa      	ldr	r2, [r7, #28]
 800a28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a28c:	4413      	add	r3, r2
 800a28e:	61fb      	str	r3, [r7, #28]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	695a      	ldr	r2, [r3, #20]
 800a294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a296:	441a      	add	r2, r3
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	615a      	str	r2, [r3, #20]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	68da      	ldr	r2, [r3, #12]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	695b      	ldr	r3, [r3, #20]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	bf38      	it	cc
 800a2a8:	461a      	movcc	r2, r3
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	60da      	str	r2, [r3, #12]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f47f aec1 	bne.w	800a038 <f_write+0x76>
 800a2b6:	e000      	b.n	800a2ba <f_write+0x2f8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a2b8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	7c1b      	ldrb	r3, [r3, #16]
 800a2be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2c2:	b2da      	uxtb	r2, r3
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 800a2c8:	2300      	movs	r3, #0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3730      	adds	r7, #48	@ 0x30
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
	...

0800a2d4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b086      	sub	sp, #24
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f107 0208 	add.w	r2, r7, #8
 800a2e2:	4611      	mov	r1, r2
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7ff fb01 	bl	80098ec <validate>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a2ee:	7dfb      	ldrb	r3, [r7, #23]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d167      	bne.n	800a3c4 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	7c1b      	ldrb	r3, [r3, #16]
 800a2f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d061      	beq.n	800a3c4 <f_sync+0xf0>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	7c1b      	ldrb	r3, [r3, #16]
 800a304:	b25b      	sxtb	r3, r3
 800a306:	2b00      	cmp	r3, #0
 800a308:	da15      	bge.n	800a336 <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	7858      	ldrb	r0, [r3, #1]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	69da      	ldr	r2, [r3, #28]
 800a318:	2301      	movs	r3, #1
 800a31a:	f7fd fddf 	bl	8007edc <disk_write>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d001      	beq.n	800a328 <f_sync+0x54>
 800a324:	2301      	movs	r3, #1
 800a326:	e04e      	b.n	800a3c6 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	7c1b      	ldrb	r3, [r3, #16]
 800a32c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a330:	b2da      	uxtb	r2, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a336:	4b26      	ldr	r3, [pc, #152]	@ (800a3d0 <f_sync+0xfc>)
 800a338:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a33a:	68ba      	ldr	r2, [r7, #8]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a1b      	ldr	r3, [r3, #32]
 800a340:	4619      	mov	r1, r3
 800a342:	4610      	mov	r0, r2
 800a344:	f7fd ff61 	bl	800820a <move_window>
 800a348:	4603      	mov	r3, r0
 800a34a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a34c:	7dfb      	ldrb	r3, [r7, #23]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d138      	bne.n	800a3c4 <f_sync+0xf0>
					dir = fp->dir_ptr;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a356:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	330b      	adds	r3, #11
 800a35c:	781a      	ldrb	r2, [r3, #0]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	330b      	adds	r3, #11
 800a362:	f042 0220 	orr.w	r2, r2, #32
 800a366:	b2d2      	uxtb	r2, r2
 800a368:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6818      	ldr	r0, [r3, #0]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	461a      	mov	r2, r3
 800a374:	68f9      	ldr	r1, [r7, #12]
 800a376:	f7fe fd02 	bl	8008d7e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f103 021c 	add.w	r2, r3, #28
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	4619      	mov	r1, r3
 800a386:	4610      	mov	r0, r2
 800a388:	f7fd feb5 	bl	80080f6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	3316      	adds	r3, #22
 800a390:	6939      	ldr	r1, [r7, #16]
 800a392:	4618      	mov	r0, r3
 800a394:	f7fd feaf 	bl	80080f6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	3312      	adds	r3, #18
 800a39c:	2100      	movs	r1, #0
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7fd fe8e 	bl	80080c0 <st_word>
					fs->wflag = 1;
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7fd ff59 	bl	8008264 <sync_fs>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	7c1b      	ldrb	r3, [r3, #16]
 800a3ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3be:	b2da      	uxtb	r2, r3
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a3c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3718      	adds	r7, #24
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	54210000 	.word	0x54210000

0800a3d4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7ff ff79 	bl	800a2d4 <f_sync>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a3e6:	7bfb      	ldrb	r3, [r7, #15]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10e      	bne.n	800a40a <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f107 0208 	add.w	r2, r7, #8
 800a3f2:	4611      	mov	r1, r2
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7ff fa79 	bl	80098ec <validate>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a3fe:	7bfb      	ldrb	r3, [r7, #15]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d102      	bne.n	800a40a <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a40a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3710      	adds	r7, #16
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID for each partition (for only MBR) */
	BYTE *buf			/* Working buffer for a sector */
)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b08e      	sub	sp, #56	@ 0x38
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60b9      	str	r1, [r7, #8]
 800a41c:	607b      	str	r3, [r7, #4]
 800a41e:	4603      	mov	r3, r0
 800a420:	73fb      	strb	r3, [r7, #15]
 800a422:	4613      	mov	r3, r2
 800a424:	73bb      	strb	r3, [r7, #14]
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 800a426:	f107 0210 	add.w	r2, r7, #16
 800a42a:	7bfb      	ldrb	r3, [r7, #15]
 800a42c:	2101      	movs	r1, #1
 800a42e:	4618      	mov	r0, r3
 800a430:	f7fd fd88 	bl	8007f44 <disk_ioctl>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d001      	beq.n	800a43e <create_partition+0x2a>
 800a43a:	2301      	movs	r3, #1
 800a43c:	e108      	b.n	800a650 <create_partition+0x23c>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	623b      	str	r3, [r7, #32]
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
 800a442:	233f      	movs	r3, #63	@ 0x3f
 800a444:	77fb      	strb	r3, [r7, #31]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 800a446:	2308      	movs	r3, #8
 800a448:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a44c:	e004      	b.n	800a458 <create_partition+0x44>
 800a44e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a452:	005b      	lsls	r3, r3, #1
 800a454:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a458:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00a      	beq.n	800a476 <create_partition+0x62>
 800a460:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a464:	6a3a      	ldr	r2, [r7, #32]
 800a466:	fbb2 f2f3 	udiv	r2, r2, r3
 800a46a:	7ffb      	ldrb	r3, [r7, #31]
 800a46c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a470:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a474:	d8eb      	bhi.n	800a44e <create_partition+0x3a>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 800a476:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d102      	bne.n	800a484 <create_partition+0x70>
 800a47e:	23ff      	movs	r3, #255	@ 0xff
 800a480:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 800a484:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a488:	2100      	movs	r1, #0
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f00b fe90 	bl	80161b0 <memset>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a496:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800a498:	2300      	movs	r3, #0
 800a49a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a49c:	7ffb      	ldrb	r3, [r7, #31]
 800a49e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4a0:	e0b5      	b.n	800a60e <create_partition+0x1fa>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 800a4a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	68ba      	ldr	r2, [r7, #8]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 800a4ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4b0:	2b64      	cmp	r3, #100	@ 0x64
 800a4b2:	d80d      	bhi.n	800a4d0 <create_partition+0xbc>
 800a4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4b6:	2b64      	cmp	r3, #100	@ 0x64
 800a4b8:	d008      	beq.n	800a4cc <create_partition+0xb8>
 800a4ba:	6a3b      	ldr	r3, [r7, #32]
 800a4bc:	4a66      	ldr	r2, [pc, #408]	@ (800a658 <create_partition+0x244>)
 800a4be:	fba2 2303 	umull	r2, r3, r2, r3
 800a4c2:	095b      	lsrs	r3, r3, #5
 800a4c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4c6:	fb02 f303 	mul.w	r3, r2, r3
 800a4ca:	e000      	b.n	800a4ce <create_partition+0xba>
 800a4cc:	6a3b      	ldr	r3, [r7, #32]
 800a4ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 800a4d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4d4:	4413      	add	r3, r2
 800a4d6:	6a3a      	ldr	r2, [r7, #32]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d305      	bcc.n	800a4e8 <create_partition+0xd4>
 800a4dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4e0:	4413      	add	r3, r2
 800a4e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d903      	bls.n	800a4f0 <create_partition+0xdc>
 800a4e8:	6a3a      	ldr	r2, [r7, #32]
 800a4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800a4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	f000 8097 	beq.w	800a626 <create_partition+0x212>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 800a4f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4fa:	3308      	adds	r3, #8
 800a4fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fd fdf9 	bl	80080f6 <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 800a504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a506:	330c      	adds	r3, #12
 800a508:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fd fdf3 	bl	80080f6 <st_dword>
			pte[PTE_System] = sys;					/* System type */
 800a510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a512:	3304      	adds	r3, #4
 800a514:	7bba      	ldrb	r2, [r7, #14]
 800a516:	701a      	strb	r2, [r3, #0]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 800a518:	7ffb      	ldrb	r3, [r7, #31]
 800a51a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a51c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a524:	fbb2 f3f3 	udiv	r3, r2, r3
 800a528:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 800a52a:	7ffb      	ldrb	r3, [r7, #31]
 800a52c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a52e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a532:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a536:	fbb3 f1f2 	udiv	r1, r3, r2
 800a53a:	fb01 f202 	mul.w	r2, r1, r2
 800a53e:	1a9b      	subs	r3, r3, r2
 800a540:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 800a542:	7ffa      	ldrb	r2, [r7, #31]
 800a544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a546:	fbb3 f1f2 	udiv	r1, r3, r2
 800a54a:	fb01 f202 	mul.w	r2, r1, r2
 800a54e:	1a9b      	subs	r3, r3, r2
 800a550:	b2db      	uxtb	r3, r3
 800a552:	3301      	adds	r3, #1
 800a554:	75bb      	strb	r3, [r7, #22]
			pte[PTE_StHead] = hd;
 800a556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a558:	3301      	adds	r3, #1
 800a55a:	7dfa      	ldrb	r2, [r7, #23]
 800a55c:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	089b      	lsrs	r3, r3, #2
 800a562:	b2db      	uxtb	r3, r3
 800a564:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a568:	b2d9      	uxtb	r1, r3
 800a56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a56c:	3302      	adds	r3, #2
 800a56e:	7dba      	ldrb	r2, [r7, #22]
 800a570:	430a      	orrs	r2, r1
 800a572:	b2d2      	uxtb	r2, r2
 800a574:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = (BYTE)cy;
 800a576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a578:	3303      	adds	r3, #3
 800a57a:	69ba      	ldr	r2, [r7, #24]
 800a57c:	b2d2      	uxtb	r2, r2
 800a57e:	701a      	strb	r2, [r3, #0]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 800a580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a584:	4413      	add	r3, r2
 800a586:	1e5a      	subs	r2, r3, #1
 800a588:	7ffb      	ldrb	r3, [r7, #31]
 800a58a:	fbb2 f2f3 	udiv	r2, r2, r3
 800a58e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a592:	fbb2 f3f3 	udiv	r3, r2, r3
 800a596:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 800a598:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a59a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a59c:	4413      	add	r3, r2
 800a59e:	1e5a      	subs	r2, r3, #1
 800a5a0:	7ffb      	ldrb	r3, [r7, #31]
 800a5a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5a6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a5aa:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5ae:	fb01 f202 	mul.w	r2, r1, r2
 800a5b2:	1a9b      	subs	r3, r3, r2
 800a5b4:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 800a5b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ba:	4413      	add	r3, r2
 800a5bc:	3b01      	subs	r3, #1
 800a5be:	7ffa      	ldrb	r2, [r7, #31]
 800a5c0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5c4:	fb01 f202 	mul.w	r2, r1, r2
 800a5c8:	1a9b      	subs	r3, r3, r2
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	75bb      	strb	r3, [r7, #22]
			pte[PTE_EdHead] = hd;
 800a5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d2:	3305      	adds	r3, #5
 800a5d4:	7dfa      	ldrb	r2, [r7, #23]
 800a5d6:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800a5d8:	69bb      	ldr	r3, [r7, #24]
 800a5da:	089b      	lsrs	r3, r3, #2
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a5e2:	b2d9      	uxtb	r1, r3
 800a5e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e6:	3306      	adds	r3, #6
 800a5e8:	7dba      	ldrb	r2, [r7, #22]
 800a5ea:	430a      	orrs	r2, r1
 800a5ec:	b2d2      	uxtb	r2, r2
 800a5ee:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)cy;
 800a5f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f2:	3307      	adds	r3, #7
 800a5f4:	69ba      	ldr	r2, [r7, #24]
 800a5f6:	b2d2      	uxtb	r2, r2
 800a5f8:	701a      	strb	r2, [r3, #0]

			pte += SZ_PTE;		/* Next entry */
 800a5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5fc:	3310      	adds	r3, #16
 800a5fe:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800a600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a602:	3301      	adds	r3, #1
 800a604:	637b      	str	r3, [r7, #52]	@ 0x34
 800a606:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a60a:	4413      	add	r3, r2
 800a60c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a60e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a610:	2b03      	cmp	r3, #3
 800a612:	d809      	bhi.n	800a628 <create_partition+0x214>
 800a614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a616:	2b00      	cmp	r3, #0
 800a618:	d006      	beq.n	800a628 <create_partition+0x214>
 800a61a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a61c:	6a3b      	ldr	r3, [r7, #32]
 800a61e:	429a      	cmp	r2, r3
 800a620:	f4ff af3f 	bcc.w	800a4a2 <create_partition+0x8e>
 800a624:	e000      	b.n	800a628 <create_partition+0x214>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800a626:	bf00      	nop
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a62e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a632:	4618      	mov	r0, r3
 800a634:	f7fd fd44 	bl	80080c0 <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800a638:	7bf8      	ldrb	r0, [r7, #15]
 800a63a:	2301      	movs	r3, #1
 800a63c:	2200      	movs	r2, #0
 800a63e:	6879      	ldr	r1, [r7, #4]
 800a640:	f7fd fc4c 	bl	8007edc <disk_write>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d001      	beq.n	800a64e <create_partition+0x23a>
 800a64a:	2301      	movs	r3, #1
 800a64c:	e000      	b.n	800a650 <create_partition+0x23c>
	}

	return FR_OK;
 800a64e:	2300      	movs	r3, #0
}
 800a650:	4618      	mov	r0, r3
 800a652:	3738      	adds	r7, #56	@ 0x38
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	51eb851f 	.word	0x51eb851f

0800a65c <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b09e      	sub	sp, #120	@ 0x78
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	607a      	str	r2, [r7, #4]
 800a668:	603b      	str	r3, [r7, #0]
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800a66a:	f107 030c 	add.w	r3, r7, #12
 800a66e:	4618      	mov	r0, r3
 800a670:	f7fe fd78 	bl	8009164 <get_ldnumber>
 800a674:	6478      	str	r0, [r7, #68]	@ 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800a676:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a678:	2b00      	cmp	r3, #0
 800a67a:	da02      	bge.n	800a682 <f_mkfs+0x26>
 800a67c:	230b      	movs	r3, #11
 800a67e:	f000 bc39 	b.w	800aef4 <f_mkfs+0x898>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 800a682:	4a90      	ldr	r2, [pc, #576]	@ (800a8c4 <f_mkfs+0x268>)
 800a684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d005      	beq.n	800a69a <f_mkfs+0x3e>
 800a68e:	4a8d      	ldr	r2, [pc, #564]	@ (800a8c4 <f_mkfs+0x268>)
 800a690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a696:	2200      	movs	r2, #0
 800a698:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 800a69a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a69c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 800a6a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7fd fbbc 	bl	8007e28 <disk_initialize>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	if (ds & STA_NOINIT) return FR_NOT_READY;
 800a6b6:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a6ba:	f003 0301 	and.w	r3, r3, #1
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d002      	beq.n	800a6c8 <f_mkfs+0x6c>
 800a6c2:	2303      	movs	r3, #3
 800a6c4:	f000 bc16 	b.w	800aef4 <f_mkfs+0x898>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 800a6c8:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a6cc:	f003 0304 	and.w	r3, r3, #4
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d002      	beq.n	800a6da <f_mkfs+0x7e>
 800a6d4:	230a      	movs	r3, #10
 800a6d6:	f000 bc0d 	b.w	800aef4 <f_mkfs+0x898>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d101      	bne.n	800a6e4 <f_mkfs+0x88>
 800a6e0:	4b79      	ldr	r3, [pc, #484]	@ (800a8c8 <f_mkfs+0x26c>)
 800a6e2:	60bb      	str	r3, [r7, #8]
	sz_blk = opt->align;
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	61fb      	str	r3, [r7, #28]
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the paramter or lower layer */
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d107      	bne.n	800a700 <f_mkfs+0xa4>
 800a6f0:	f107 021c 	add.w	r2, r7, #28
 800a6f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a6f8:	2103      	movs	r1, #3
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7fd fc22 	bl	8007f44 <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d009      	beq.n	800a71a <f_mkfs+0xbe>
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a70c:	d805      	bhi.n	800a71a <f_mkfs+0xbe>
 800a70e:	69fb      	ldr	r3, [r7, #28]
 800a710:	1e5a      	subs	r2, r3, #1
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	4013      	ands	r3, r2
 800a716:	2b00      	cmp	r3, #0
 800a718:	d001      	beq.n	800a71e <f_mkfs+0xc2>
 800a71a:	2301      	movs	r3, #1
 800a71c:	61fb      	str	r3, [r7, #28]
#if FF_MAX_SS != FF_MIN_SS
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 800a71e:	f107 0220 	add.w	r2, r7, #32
 800a722:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a726:	2102      	movs	r1, #2
 800a728:	4618      	mov	r0, r3
 800a72a:	f7fd fc0b 	bl	8007f44 <disk_ioctl>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d001      	beq.n	800a738 <f_mkfs+0xdc>
 800a734:	2301      	movs	r3, #1
 800a736:	e3dd      	b.n	800aef4 <f_mkfs+0x898>
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 800a738:	8c3b      	ldrh	r3, [r7, #32]
 800a73a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a73e:	d80a      	bhi.n	800a756 <f_mkfs+0xfa>
 800a740:	8c3b      	ldrh	r3, [r7, #32]
 800a742:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a746:	d306      	bcc.n	800a756 <f_mkfs+0xfa>
 800a748:	8c3b      	ldrh	r3, [r7, #32]
 800a74a:	461a      	mov	r2, r3
 800a74c:	8c3b      	ldrh	r3, [r7, #32]
 800a74e:	3b01      	subs	r3, #1
 800a750:	4013      	ands	r3, r2
 800a752:	2b00      	cmp	r3, #0
 800a754:	d001      	beq.n	800a75a <f_mkfs+0xfe>
 800a756:	2301      	movs	r3, #1
 800a758:	e3cc      	b.n	800aef4 <f_mkfs+0x898>
#else
	ss = FF_MAX_SS;
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	f003 030f 	and.w	r3, r3, #15
 800a762:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	785b      	ldrb	r3, [r3, #1]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d006      	beq.n	800a77c <f_mkfs+0x120>
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	785b      	ldrb	r3, [r3, #1]
 800a772:	2b02      	cmp	r3, #2
 800a774:	d802      	bhi.n	800a77c <f_mkfs+0x120>
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	785b      	ldrb	r3, [r3, #1]
 800a77a:	e000      	b.n	800a77e <f_mkfs+0x122>
 800a77c:	2301      	movs	r3, #1
 800a77e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d013      	beq.n	800a7b0 <f_mkfs+0x154>
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	689b      	ldr	r3, [r3, #8]
 800a78c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a790:	d80e      	bhi.n	800a7b0 <f_mkfs+0x154>
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	8c3a      	ldrh	r2, [r7, #32]
 800a798:	0952      	lsrs	r2, r2, #5
 800a79a:	b292      	uxth	r2, r2
 800a79c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a7a0:	fb01 f202 	mul.w	r2, r1, r2
 800a7a4:	1a9b      	subs	r3, r3, r2
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d102      	bne.n	800a7b0 <f_mkfs+0x154>
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	e001      	b.n	800a7b4 <f_mkfs+0x158>
 800a7b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a7b4:	63bb      	str	r3, [r7, #56]	@ 0x38
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a7be:	d80a      	bhi.n	800a7d6 <f_mkfs+0x17a>
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	68da      	ldr	r2, [r3, #12]
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	3b01      	subs	r3, #1
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d102      	bne.n	800a7d6 <f_mkfs+0x17a>
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	e000      	b.n	800a7d8 <f_mkfs+0x17c>
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sz_au /= ss;	/* Byte --> Sector */
 800a7da:	8c3b      	ldrh	r3, [r7, #32]
 800a7dc:	461a      	mov	r2, r3
 800a7de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7e4:	64fb      	str	r3, [r7, #76]	@ 0x4c

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 800a7e6:	8c3b      	ldrh	r3, [r7, #32]
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7f0:	637b      	str	r3, [r7, #52]	@ 0x34
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 800a7f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d101      	bne.n	800a7fc <f_mkfs+0x1a0>
 800a7f8:	2311      	movs	r3, #17
 800a7fa:	e37b      	b.n	800aef4 <f_mkfs+0x898>
	buf = (BYTE*)work;		/* Working buffer */
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	633b      	str	r3, [r7, #48]	@ 0x30
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 800a800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a802:	2b00      	cmp	r3, #0
 800a804:	d101      	bne.n	800a80a <f_mkfs+0x1ae>
 800a806:	2311      	movs	r3, #17
 800a808:	e374      	b.n	800aef4 <f_mkfs+0x898>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 800a80a:	2300      	movs	r3, #0
 800a80c:	61bb      	str	r3, [r7, #24]
 800a80e:	69bb      	ldr	r3, [r7, #24]
 800a810:	66fb      	str	r3, [r7, #108]	@ 0x6c
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800a812:	f107 0218 	add.w	r2, r7, #24
 800a816:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a81a:	2101      	movs	r1, #1
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7fd fb91 	bl	8007f44 <disk_ioctl>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d001      	beq.n	800a82c <f_mkfs+0x1d0>
 800a828:	2301      	movs	r3, #1
 800a82a:	e363      	b.n	800aef4 <f_mkfs+0x898>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 800a82c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a830:	f003 0308 	and.w	r3, r3, #8
 800a834:	2b00      	cmp	r3, #0
 800a836:	d108      	bne.n	800a84a <f_mkfs+0x1ee>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	2b3f      	cmp	r3, #63	@ 0x3f
 800a83c:	d905      	bls.n	800a84a <f_mkfs+0x1ee>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 800a83e:	233f      	movs	r3, #63	@ 0x3f
 800a840:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a842:	69ba      	ldr	r2, [r7, #24]
 800a844:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	61bb      	str	r3, [r7, #24]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 800a84a:	69bb      	ldr	r3, [r7, #24]
 800a84c:	2b7f      	cmp	r3, #127	@ 0x7f
 800a84e:	d801      	bhi.n	800a854 <f_mkfs+0x1f8>
 800a850:	230e      	movs	r3, #14
 800a852:	e34f      	b.n	800aef4 <f_mkfs+0x898>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 800a854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a856:	2b80      	cmp	r3, #128	@ 0x80
 800a858:	d901      	bls.n	800a85e <f_mkfs+0x202>
 800a85a:	2380      	movs	r3, #128	@ 0x80
 800a85c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 800a85e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a862:	f003 0302 	and.w	r3, r3, #2
 800a866:	2b00      	cmp	r3, #0
 800a868:	d009      	beq.n	800a87e <f_mkfs+0x222>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 800a86a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a86e:	f003 0301 	and.w	r3, r3, #1
 800a872:	2b00      	cmp	r3, #0
 800a874:	d103      	bne.n	800a87e <f_mkfs+0x222>
				fsty = FS_FAT32; break;
 800a876:	2303      	movs	r3, #3
 800a878:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800a87c:	e00a      	b.n	800a894 <f_mkfs+0x238>
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 800a87e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a882:	f003 0301 	and.w	r3, r3, #1
 800a886:	2b00      	cmp	r3, #0
 800a888:	d101      	bne.n	800a88e <f_mkfs+0x232>
 800a88a:	2313      	movs	r3, #19
 800a88c:	e332      	b.n	800aef4 <f_mkfs+0x898>
		fsty = FS_FAT16;
 800a88e:	2302      	movs	r3, #2
 800a890:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 800a894:	69bb      	ldr	r3, [r7, #24]
 800a896:	f103 43a8 	add.w	r3, r3, #1409286144	@ 0x54000000
 800a89a:	f503 1304 	add.w	r3, r3, #2162688	@ 0x210000
 800a89e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
 800a8a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8a2:	663b      	str	r3, [r7, #96]	@ 0x60
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 800a8a4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a8a8:	2b03      	cmp	r3, #3
 800a8aa:	d141      	bne.n	800a930 <f_mkfs+0x2d4>
				if (pau == 0) {	/* AU auto-selection */
 800a8ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d120      	bne.n	800a8f4 <f_mkfs+0x298>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800a8b2:	69bb      	ldr	r3, [r7, #24]
 800a8b4:	0c5b      	lsrs	r3, r3, #17
 800a8b6:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8bc:	2301      	movs	r3, #1
 800a8be:	663b      	str	r3, [r7, #96]	@ 0x60
 800a8c0:	e00a      	b.n	800a8d8 <f_mkfs+0x27c>
 800a8c2:	bf00      	nop
 800a8c4:	20005a04 	.word	0x20005a04
 800a8c8:	08017928 	.word	0x08017928
 800a8cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8d4:	005b      	lsls	r3, r3, #1
 800a8d6:	663b      	str	r3, [r7, #96]	@ 0x60
 800a8d8:	4a95      	ldr	r2, [pc, #596]	@ (800ab30 <f_mkfs+0x4d4>)
 800a8da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d007      	beq.n	800a8f4 <f_mkfs+0x298>
 800a8e4:	4a92      	ldr	r2, [pc, #584]	@ (800ab30 <f_mkfs+0x4d4>)
 800a8e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d2eb      	bcs.n	800a8cc <f_mkfs+0x270>
				}
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 800a8f4:	69ba      	ldr	r2, [r7, #24]
 800a8f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8fc:	62bb      	str	r3, [r7, #40]	@ 0x28
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800a8fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a900:	3302      	adds	r3, #2
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	8c3a      	ldrh	r2, [r7, #32]
 800a906:	4413      	add	r3, r2
 800a908:	3b01      	subs	r3, #1
 800a90a:	8c3a      	ldrh	r2, [r7, #32]
 800a90c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a910:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 800a912:	2320      	movs	r3, #32
 800a914:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = 0;		/* No static directory */
 800a916:	2300      	movs	r3, #0
 800a918:	653b      	str	r3, [r7, #80]	@ 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800a91a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a91c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a920:	4293      	cmp	r3, r2
 800a922:	d903      	bls.n	800a92c <f_mkfs+0x2d0>
 800a924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a926:	4a83      	ldr	r2, [pc, #524]	@ (800ab34 <f_mkfs+0x4d8>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d94b      	bls.n	800a9c4 <f_mkfs+0x368>
 800a92c:	230e      	movs	r3, #14
 800a92e:	e2e1      	b.n	800aef4 <f_mkfs+0x898>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 800a930:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a932:	2b00      	cmp	r3, #0
 800a934:	d11b      	bne.n	800a96e <f_mkfs+0x312>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	0b1b      	lsrs	r3, r3, #12
 800a93a:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a93c:	2300      	movs	r3, #0
 800a93e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a940:	2301      	movs	r3, #1
 800a942:	663b      	str	r3, [r7, #96]	@ 0x60
 800a944:	e005      	b.n	800a952 <f_mkfs+0x2f6>
 800a946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a948:	3301      	adds	r3, #1
 800a94a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a94c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a94e:	005b      	lsls	r3, r3, #1
 800a950:	663b      	str	r3, [r7, #96]	@ 0x60
 800a952:	4a79      	ldr	r2, [pc, #484]	@ (800ab38 <f_mkfs+0x4dc>)
 800a954:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a956:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d007      	beq.n	800a96e <f_mkfs+0x312>
 800a95e:	4a76      	ldr	r2, [pc, #472]	@ (800ab38 <f_mkfs+0x4dc>)
 800a960:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a966:	461a      	mov	r2, r3
 800a968:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d2eb      	bcs.n	800a946 <f_mkfs+0x2ea>
				}
				n_clst = (DWORD)sz_vol / pau;
 800a96e:	69ba      	ldr	r2, [r7, #24]
 800a970:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a972:	fbb2 f3f3 	udiv	r3, r2, r3
 800a976:	62bb      	str	r3, [r7, #40]	@ 0x28
				if (n_clst > MAX_FAT12) {
 800a978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a97a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a97e:	4293      	cmp	r3, r2
 800a980:	d904      	bls.n	800a98c <f_mkfs+0x330>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800a982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a984:	3302      	adds	r3, #2
 800a986:	005b      	lsls	r3, r3, #1
 800a988:	667b      	str	r3, [r7, #100]	@ 0x64
 800a98a:	e00a      	b.n	800a9a2 <f_mkfs+0x346>
				} else {
					fsty = FS_FAT12;
 800a98c:	2301      	movs	r3, #1
 800a98e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800a992:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a994:	4613      	mov	r3, r2
 800a996:	005b      	lsls	r3, r3, #1
 800a998:	4413      	add	r3, r2
 800a99a:	3301      	adds	r3, #1
 800a99c:	085b      	lsrs	r3, r3, #1
 800a99e:	3303      	adds	r3, #3
 800a9a0:	667b      	str	r3, [r7, #100]	@ 0x64
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800a9a2:	8c3b      	ldrh	r3, [r7, #32]
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9a8:	4413      	add	r3, r2
 800a9aa:	3b01      	subs	r3, #1
 800a9ac:	8c3a      	ldrh	r2, [r7, #32]
 800a9ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9b2:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ba:	015b      	lsls	r3, r3, #5
 800a9bc:	8c3a      	ldrh	r2, [r7, #32]
 800a9be:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9c2:	653b      	str	r3, [r7, #80]	@ 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800a9c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a9c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a9c8:	4413      	add	r3, r2
 800a9ca:	66bb      	str	r3, [r7, #104]	@ 0x68
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800a9cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a9d0:	fb03 f202 	mul.w	r2, r3, r2
 800a9d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a9d6:	4413      	add	r3, r2
 800a9d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a9da:	4413      	add	r3, r2
 800a9dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 800a9de:	69fa      	ldr	r2, [r7, #28]
 800a9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e2:	4413      	add	r3, r2
 800a9e4:	1e5a      	subs	r2, r3, #1
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	425b      	negs	r3, r3
 800a9ea:	401a      	ands	r2, r3
 800a9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ee:	1ad3      	subs	r3, r2, r3
 800a9f0:	667b      	str	r3, [r7, #100]	@ 0x64
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 800a9f2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a9f6:	2b03      	cmp	r3, #3
 800a9f8:	d108      	bne.n	800aa0c <f_mkfs+0x3b0>
				sz_rsv += n; b_fat += n;
 800a9fa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a9fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9fe:	4413      	add	r3, r2
 800aa00:	677b      	str	r3, [r7, #116]	@ 0x74
 800aa02:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800aa04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa06:	4413      	add	r3, r2
 800aa08:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa0a:	e019      	b.n	800aa40 <f_mkfs+0x3e4>
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
 800aa0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa0e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aa10:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa16:	fb01 f202 	mul.w	r2, r1, r2
 800aa1a:	1a9b      	subs	r3, r3, r2
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d008      	beq.n	800aa32 <f_mkfs+0x3d6>
					n--; sz_rsv++; b_fat++;
 800aa20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa22:	3b01      	subs	r3, #1
 800aa24:	667b      	str	r3, [r7, #100]	@ 0x64
 800aa26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aa28:	3301      	adds	r3, #1
 800aa2a:	677b      	str	r3, [r7, #116]	@ 0x74
 800aa2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa2e:	3301      	adds	r3, #1
 800aa30:	66bb      	str	r3, [r7, #104]	@ 0x68
				}
				sz_fat += n / n_fat;
 800aa32:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aa34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa36:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa3a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aa3c:	4413      	add	r3, r2
 800aa3e:	657b      	str	r3, [r7, #84]	@ 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 800aa40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa42:	011a      	lsls	r2, r3, #4
 800aa44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa46:	441a      	add	r2, r3
 800aa48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa4a:	1ad2      	subs	r2, r2, r3
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d901      	bls.n	800aa56 <f_mkfs+0x3fa>
 800aa52:	230e      	movs	r3, #14
 800aa54:	e24e      	b.n	800aef4 <f_mkfs+0x898>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 800aa56:	69ba      	ldr	r2, [r7, #24]
 800aa58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aa5a:	1ad2      	subs	r2, r2, r3
 800aa5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa60:	fb01 f303 	mul.w	r3, r1, r3
 800aa64:	1ad2      	subs	r2, r2, r3
 800aa66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa68:	1ad2      	subs	r2, r2, r3
 800aa6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa70:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (fsty == FS_FAT32) {
 800aa72:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800aa76:	2b03      	cmp	r3, #3
 800aa78:	d10f      	bne.n	800aa9a <f_mkfs+0x43e>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 800aa7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa7c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d80a      	bhi.n	800aa9a <f_mkfs+0x43e>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800aa84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d105      	bne.n	800aa96 <f_mkfs+0x43a>
 800aa8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa8c:	085b      	lsrs	r3, r3, #1
 800aa8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d145      	bne.n	800ab22 <f_mkfs+0x4c6>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800aa96:	230e      	movs	r3, #14
 800aa98:	e22c      	b.n	800aef4 <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT16) {
 800aa9a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d134      	bne.n	800ab0c <f_mkfs+0x4b0>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800aaa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d91f      	bls.n	800aaec <f_mkfs+0x490>
					if (sz_au == 0 && (pau * 2) <= 64) {
 800aaac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d107      	bne.n	800aac2 <f_mkfs+0x466>
 800aab2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aab4:	005b      	lsls	r3, r3, #1
 800aab6:	2b40      	cmp	r3, #64	@ 0x40
 800aab8:	d803      	bhi.n	800aac2 <f_mkfs+0x466>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 800aaba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aabc:	005b      	lsls	r3, r3, #1
 800aabe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aac0:	e034      	b.n	800ab2c <f_mkfs+0x4d0>
					}
					if ((fsopt & FM_FAT32)) {
 800aac2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800aac6:	f003 0302 	and.w	r3, r3, #2
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d003      	beq.n	800aad6 <f_mkfs+0x47a>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800aace:	2303      	movs	r3, #3
 800aad0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800aad4:	e02a      	b.n	800ab2c <f_mkfs+0x4d0>
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800aad6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d105      	bne.n	800aae8 <f_mkfs+0x48c>
 800aadc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aade:	005b      	lsls	r3, r3, #1
 800aae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aae2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aae4:	2b80      	cmp	r3, #128	@ 0x80
 800aae6:	d91e      	bls.n	800ab26 <f_mkfs+0x4ca>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800aae8:	230e      	movs	r3, #14
 800aaea:	e203      	b.n	800aef4 <f_mkfs+0x898>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800aaec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaee:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d80a      	bhi.n	800ab0c <f_mkfs+0x4b0>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800aaf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d105      	bne.n	800ab08 <f_mkfs+0x4ac>
 800aafc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aafe:	005b      	lsls	r3, r3, #1
 800ab00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab04:	2b80      	cmp	r3, #128	@ 0x80
 800ab06:	d910      	bls.n	800ab2a <f_mkfs+0x4ce>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800ab08:	230e      	movs	r3, #14
 800ab0a:	e1f3      	b.n	800aef4 <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 800ab0c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d113      	bne.n	800ab3c <f_mkfs+0x4e0>
 800ab14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab16:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d90e      	bls.n	800ab3c <f_mkfs+0x4e0>
 800ab1e:	230e      	movs	r3, #14
 800ab20:	e1e8      	b.n	800aef4 <f_mkfs+0x898>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800ab22:	bf00      	nop
 800ab24:	e6bc      	b.n	800a8a0 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ab26:	bf00      	nop
 800ab28:	e6ba      	b.n	800a8a0 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ab2a:	bf00      	nop
			pau = sz_au;
 800ab2c:	e6b8      	b.n	800a8a0 <f_mkfs+0x244>
 800ab2e:	bf00      	nop
 800ab30:	08017938 	.word	0x08017938
 800ab34:	0ffffff5 	.word	0x0ffffff5
 800ab38:	08017948 	.word	0x08017948

			/* Ok, it is the valid cluster configuration */
			break;
 800ab3c:	bf00      	nop
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
 800ab3e:	8c3b      	ldrh	r3, [r7, #32]
 800ab40:	461a      	mov	r2, r3
 800ab42:	2100      	movs	r1, #0
 800ab44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab46:	f00b fb33 	bl	80161b0 <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 800ab4a:	220b      	movs	r2, #11
 800ab4c:	49b1      	ldr	r1, [pc, #708]	@ (800ae14 <f_mkfs+0x7b8>)
 800ab4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab50:	f00b fbb2 	bl	80162b8 <memcpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800ab54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab56:	330b      	adds	r3, #11
 800ab58:	8c3a      	ldrh	r2, [r7, #32]
 800ab5a:	4611      	mov	r1, r2
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7fd faaf 	bl	80080c0 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800ab62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab64:	330d      	adds	r3, #13
 800ab66:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ab68:	b2d2      	uxtb	r2, r2
 800ab6a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800ab6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab6e:	330e      	adds	r3, #14
 800ab70:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800ab72:	b292      	uxth	r2, r2
 800ab74:	4611      	mov	r1, r2
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7fd faa2 	bl	80080c0 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 800ab7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab7e:	3310      	adds	r3, #16
 800ab80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ab82:	b2d2      	uxtb	r2, r2
 800ab84:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 800ab86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab88:	f103 0211 	add.w	r2, r3, #17
 800ab8c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ab90:	2b03      	cmp	r3, #3
 800ab92:	d002      	beq.n	800ab9a <f_mkfs+0x53e>
 800ab94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	e000      	b.n	800ab9c <f_mkfs+0x540>
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	4610      	mov	r0, r2
 800aba0:	f7fd fa8e 	bl	80080c0 <st_word>
		if (sz_vol < 0x10000) {
 800aba4:	69bb      	ldr	r3, [r7, #24]
 800aba6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abaa:	d208      	bcs.n	800abbe <f_mkfs+0x562>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800abac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abae:	3313      	adds	r3, #19
 800abb0:	69ba      	ldr	r2, [r7, #24]
 800abb2:	b292      	uxth	r2, r2
 800abb4:	4611      	mov	r1, r2
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7fd fa82 	bl	80080c0 <st_word>
 800abbc:	e006      	b.n	800abcc <f_mkfs+0x570>
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 800abbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc0:	3320      	adds	r3, #32
 800abc2:	69ba      	ldr	r2, [r7, #24]
 800abc4:	4611      	mov	r1, r2
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7fd fa95 	bl	80080f6 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800abcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abce:	3315      	adds	r3, #21
 800abd0:	22f8      	movs	r2, #248	@ 0xf8
 800abd2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800abd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd6:	3318      	adds	r3, #24
 800abd8:	213f      	movs	r1, #63	@ 0x3f
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fd fa70 	bl	80080c0 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800abe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe2:	331a      	adds	r3, #26
 800abe4:	21ff      	movs	r1, #255	@ 0xff
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7fd fa6a 	bl	80080c0 <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 800abec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abee:	331c      	adds	r3, #28
 800abf0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7fd fa7f 	bl	80080f6 <st_dword>
		if (fsty == FS_FAT32) {
 800abf8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800abfc:	2b03      	cmp	r3, #3
 800abfe:	d12d      	bne.n	800ac5c <f_mkfs+0x600>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 800ac00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac02:	3343      	adds	r3, #67	@ 0x43
 800ac04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7fd fa75 	bl	80080f6 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800ac0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac0e:	3324      	adds	r3, #36	@ 0x24
 800ac10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fd fa6f 	bl	80080f6 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800ac18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac1a:	332c      	adds	r3, #44	@ 0x2c
 800ac1c:	2102      	movs	r1, #2
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7fd fa69 	bl	80080f6 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800ac24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac26:	3330      	adds	r3, #48	@ 0x30
 800ac28:	2101      	movs	r1, #1
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7fd fa48 	bl	80080c0 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800ac30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac32:	3332      	adds	r3, #50	@ 0x32
 800ac34:	2106      	movs	r1, #6
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7fd fa42 	bl	80080c0 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800ac3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac3e:	3340      	adds	r3, #64	@ 0x40
 800ac40:	2280      	movs	r2, #128	@ 0x80
 800ac42:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800ac44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac46:	3342      	adds	r3, #66	@ 0x42
 800ac48:	2229      	movs	r2, #41	@ 0x29
 800ac4a:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800ac4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac4e:	3347      	adds	r3, #71	@ 0x47
 800ac50:	2213      	movs	r2, #19
 800ac52:	4971      	ldr	r1, [pc, #452]	@ (800ae18 <f_mkfs+0x7bc>)
 800ac54:	4618      	mov	r0, r3
 800ac56:	f00b fb2f 	bl	80162b8 <memcpy>
 800ac5a:	e01c      	b.n	800ac96 <f_mkfs+0x63a>
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 800ac5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac5e:	3327      	adds	r3, #39	@ 0x27
 800ac60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7fd fa47 	bl	80080f6 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800ac68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac6a:	3316      	adds	r3, #22
 800ac6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ac6e:	b292      	uxth	r2, r2
 800ac70:	4611      	mov	r1, r2
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7fd fa24 	bl	80080c0 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800ac78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac7a:	3324      	adds	r3, #36	@ 0x24
 800ac7c:	2280      	movs	r2, #128	@ 0x80
 800ac7e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800ac80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac82:	3326      	adds	r3, #38	@ 0x26
 800ac84:	2229      	movs	r2, #41	@ 0x29
 800ac86:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800ac88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac8a:	332b      	adds	r3, #43	@ 0x2b
 800ac8c:	2213      	movs	r2, #19
 800ac8e:	4963      	ldr	r1, [pc, #396]	@ (800ae1c <f_mkfs+0x7c0>)
 800ac90:	4618      	mov	r0, r3
 800ac92:	f00b fb11 	bl	80162b8 <memcpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800ac96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac98:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ac9c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7fd fa0d 	bl	80080c0 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 800aca6:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800acaa:	2301      	movs	r3, #1
 800acac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800acae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800acb0:	f7fd f914 	bl	8007edc <disk_write>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d001      	beq.n	800acbe <f_mkfs+0x662>
 800acba:	2301      	movs	r3, #1
 800acbc:	e11a      	b.n	800aef4 <f_mkfs+0x898>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 800acbe:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800acc2:	2b03      	cmp	r3, #3
 800acc4:	d140      	bne.n	800ad48 <f_mkfs+0x6ec>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800acc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acc8:	1d9a      	adds	r2, r3, #6
 800acca:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800acce:	2301      	movs	r3, #1
 800acd0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800acd2:	f7fd f903 	bl	8007edc <disk_write>
			memset(buf, 0, ss);
 800acd6:	8c3b      	ldrh	r3, [r7, #32]
 800acd8:	461a      	mov	r2, r3
 800acda:	2100      	movs	r1, #0
 800acdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800acde:	f00b fa67 	bl	80161b0 <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800ace2:	494f      	ldr	r1, [pc, #316]	@ (800ae20 <f_mkfs+0x7c4>)
 800ace4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ace6:	f7fd fa06 	bl	80080f6 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800acea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acec:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800acf0:	494c      	ldr	r1, [pc, #304]	@ (800ae24 <f_mkfs+0x7c8>)
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7fd f9ff 	bl	80080f6 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800acf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acfa:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800acfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad00:	3b01      	subs	r3, #1
 800ad02:	4619      	mov	r1, r3
 800ad04:	4610      	mov	r0, r2
 800ad06:	f7fd f9f6 	bl	80080f6 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800ad0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad0c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800ad10:	2102      	movs	r1, #2
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7fd f9ef 	bl	80080f6 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800ad18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad1a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ad1e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7fd f9cc 	bl	80080c0 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800ad28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad2a:	1dda      	adds	r2, r3, #7
 800ad2c:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800ad30:	2301      	movs	r3, #1
 800ad32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ad34:	f7fd f8d2 	bl	8007edc <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800ad38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad3a:	1c5a      	adds	r2, r3, #1
 800ad3c:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800ad40:	2301      	movs	r3, #1
 800ad42:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ad44:	f7fd f8ca 	bl	8007edc <disk_write>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
 800ad48:	8c3b      	ldrh	r3, [r7, #32]
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad4e:	fb02 f303 	mul.w	r3, r2, r3
 800ad52:	461a      	mov	r2, r3
 800ad54:	2100      	movs	r1, #0
 800ad56:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad58:	f00b fa2a 	bl	80161b0 <memset>
		sect = b_fat;		/* FAT start sector */
 800ad5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ad5e:	673b      	str	r3, [r7, #112]	@ 0x70
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800ad60:	2300      	movs	r3, #0
 800ad62:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad64:	e04b      	b.n	800adfe <f_mkfs+0x7a2>
			if (fsty == FS_FAT32) {
 800ad66:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ad6a:	2b03      	cmp	r3, #3
 800ad6c:	d113      	bne.n	800ad96 <f_mkfs+0x73a>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
 800ad6e:	f06f 0107 	mvn.w	r1, #7
 800ad72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad74:	f7fd f9bf 	bl	80080f6 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
 800ad78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad7a:	3304      	adds	r3, #4
 800ad7c:	f04f 31ff 	mov.w	r1, #4294967295
 800ad80:	4618      	mov	r0, r3
 800ad82:	f7fd f9b8 	bl	80080f6 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
 800ad86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad88:	3308      	adds	r3, #8
 800ad8a:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7fd f9b1 	bl	80080f6 <st_dword>
 800ad94:	e00b      	b.n	800adae <f_mkfs+0x752>
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 800ad96:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	d101      	bne.n	800ada2 <f_mkfs+0x746>
 800ad9e:	4b22      	ldr	r3, [pc, #136]	@ (800ae28 <f_mkfs+0x7cc>)
 800ada0:	e001      	b.n	800ada6 <f_mkfs+0x74a>
 800ada2:	f06f 0307 	mvn.w	r3, #7
 800ada6:	4619      	mov	r1, r3
 800ada8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800adaa:	f7fd f9a4 	bl	80080f6 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800adae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800adb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800adb2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800adb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adb6:	4293      	cmp	r3, r2
 800adb8:	bf28      	it	cs
 800adba:	4613      	movcs	r3, r2
 800adbc:	667b      	str	r3, [r7, #100]	@ 0x64
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800adbe:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800adc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800adc4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800adc6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800adc8:	f7fd f888 	bl	8007edc <disk_write>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b00      	cmp	r3, #0
 800add0:	d001      	beq.n	800add6 <f_mkfs+0x77a>
 800add2:	2301      	movs	r3, #1
 800add4:	e08e      	b.n	800aef4 <f_mkfs+0x898>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
 800add6:	8c3b      	ldrh	r3, [r7, #32]
 800add8:	461a      	mov	r2, r3
 800adda:	2100      	movs	r1, #0
 800addc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800adde:	f00b f9e7 	bl	80161b0 <memset>
				sect += n; nsect -= n;
 800ade2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ade4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ade6:	4413      	add	r3, r2
 800ade8:	673b      	str	r3, [r7, #112]	@ 0x70
 800adea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800adec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800adee:	1ad3      	subs	r3, r2, r3
 800adf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
			} while (nsect);
 800adf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d1dc      	bne.n	800adb2 <f_mkfs+0x756>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800adf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adfa:	3301      	adds	r3, #1
 800adfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800adfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d3af      	bcc.n	800ad66 <f_mkfs+0x70a>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800ae06:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ae0a:	2b03      	cmp	r3, #3
 800ae0c:	d10e      	bne.n	800ae2c <f_mkfs+0x7d0>
 800ae0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae10:	e00d      	b.n	800ae2e <f_mkfs+0x7d2>
 800ae12:	bf00      	nop
 800ae14:	080177e0 	.word	0x080177e0
 800ae18:	080177ec 	.word	0x080177ec
 800ae1c:	08017800 	.word	0x08017800
 800ae20:	41615252 	.word	0x41615252
 800ae24:	61417272 	.word	0x61417272
 800ae28:	00fffff8 	.word	0x00fffff8
 800ae2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800ae30:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ae32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae34:	4293      	cmp	r3, r2
 800ae36:	bf28      	it	cs
 800ae38:	4613      	movcs	r3, r2
 800ae3a:	667b      	str	r3, [r7, #100]	@ 0x64
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800ae3c:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800ae40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae42:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ae44:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ae46:	f7fd f849 	bl	8007edc <disk_write>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d001      	beq.n	800ae54 <f_mkfs+0x7f8>
 800ae50:	2301      	movs	r3, #1
 800ae52:	e04f      	b.n	800aef4 <f_mkfs+0x898>
			sect += n; nsect -= n;
 800ae54:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ae56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae58:	4413      	add	r3, r2
 800ae5a:	673b      	str	r3, [r7, #112]	@ 0x70
 800ae5c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ae5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae60:	1ad3      	subs	r3, r2, r3
 800ae62:	65fb      	str	r3, [r7, #92]	@ 0x5c
		} while (nsect);
 800ae64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d1e2      	bne.n	800ae30 <f_mkfs+0x7d4>
	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;		/* exFAT */
	} else if (fsty == FS_FAT32) {
 800ae6a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ae6e:	2b03      	cmp	r3, #3
 800ae70:	d103      	bne.n	800ae7a <f_mkfs+0x81e>
		sys = 0x0C;		/* FAT32X */
 800ae72:	230c      	movs	r3, #12
 800ae74:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800ae78:	e012      	b.n	800aea0 <f_mkfs+0x844>
	} else if (sz_vol >= 0x10000) {
 800ae7a:	69bb      	ldr	r3, [r7, #24]
 800ae7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae80:	d303      	bcc.n	800ae8a <f_mkfs+0x82e>
		sys = 0x06;		/* FAT12/16 (large) */
 800ae82:	2306      	movs	r3, #6
 800ae84:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800ae88:	e00a      	b.n	800aea0 <f_mkfs+0x844>
	} else if (fsty == FS_FAT16) {
 800ae8a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	d103      	bne.n	800ae9a <f_mkfs+0x83e>
		sys = 0x04;		/* FAT16 */
 800ae92:	2304      	movs	r3, #4
 800ae94:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800ae98:	e002      	b.n	800aea0 <f_mkfs+0x844>
	} else {
		sys = 0x01;		/* FAT12 */
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 800aea0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800aea4:	f003 0308 	and.w	r3, r3, #8
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d116      	bne.n	800aeda <f_mkfs+0x87e>
			lba[0] = sz_vol; lba[1] = 0;
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	613b      	str	r3, [r7, #16]
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	617b      	str	r3, [r7, #20]
			res = create_partition(pdrv, lba, sys, buf);
 800aeb4:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 800aeb8:	f107 0110 	add.w	r1, r7, #16
 800aebc:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800aec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec2:	f7ff faa7 	bl	800a414 <create_partition>
 800aec6:	4603      	mov	r3, r0
 800aec8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			if (res != FR_OK) LEAVE_MKFS(res);
 800aecc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d002      	beq.n	800aeda <f_mkfs+0x87e>
 800aed4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aed8:	e00c      	b.n	800aef4 <f_mkfs+0x898>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800aeda:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aede:	2200      	movs	r2, #0
 800aee0:	2100      	movs	r1, #0
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fd f82e 	bl	8007f44 <disk_ioctl>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d001      	beq.n	800aef2 <f_mkfs+0x896>
 800aeee:	2301      	movs	r3, #1
 800aef0:	e000      	b.n	800aef4 <f_mkfs+0x898>

	LEAVE_MKFS(FR_OK);
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3778      	adds	r7, #120	@ 0x78
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800aefc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800af34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800af00:	f7fc ff58 	bl	8007db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800af04:	480c      	ldr	r0, [pc, #48]	@ (800af38 <LoopForever+0x6>)
  ldr r1, =_edata
 800af06:	490d      	ldr	r1, [pc, #52]	@ (800af3c <LoopForever+0xa>)
  ldr r2, =_sidata
 800af08:	4a0d      	ldr	r2, [pc, #52]	@ (800af40 <LoopForever+0xe>)
  movs r3, #0
 800af0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800af0c:	e002      	b.n	800af14 <LoopCopyDataInit>

0800af0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800af0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800af10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800af12:	3304      	adds	r3, #4

0800af14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800af14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800af16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800af18:	d3f9      	bcc.n	800af0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800af1a:	4a0a      	ldr	r2, [pc, #40]	@ (800af44 <LoopForever+0x12>)
  ldr r4, =_ebss
 800af1c:	4c0a      	ldr	r4, [pc, #40]	@ (800af48 <LoopForever+0x16>)
  movs r3, #0
 800af1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800af20:	e001      	b.n	800af26 <LoopFillZerobss>

0800af22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800af22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800af24:	3204      	adds	r2, #4

0800af26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800af26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800af28:	d3fb      	bcc.n	800af22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800af2a:	f00b f997 	bl	801625c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800af2e:	f7f9 f95d 	bl	80041ec <main>

0800af32 <LoopForever>:

LoopForever:
    b LoopForever
 800af32:	e7fe      	b.n	800af32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800af34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800af38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800af3c:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 800af40:	08017ab8 	.word	0x08017ab8
  ldr r2, =_sbss
 800af44:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 800af48:	20005b5c 	.word	0x20005b5c

0800af4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800af4c:	e7fe      	b.n	800af4c <ADC1_2_IRQHandler>

0800af4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b082      	sub	sp, #8
 800af52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800af54:	2300      	movs	r3, #0
 800af56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800af58:	2003      	movs	r0, #3
 800af5a:	f001 fd11 	bl	800c980 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800af5e:	200f      	movs	r0, #15
 800af60:	f000 f80e 	bl	800af80 <HAL_InitTick>
 800af64:	4603      	mov	r3, r0
 800af66:	2b00      	cmp	r3, #0
 800af68:	d002      	beq.n	800af70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800af6a:	2301      	movs	r3, #1
 800af6c:	71fb      	strb	r3, [r7, #7]
 800af6e:	e001      	b.n	800af74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800af70:	f7fc fa56 	bl	8007420 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800af74:	79fb      	ldrb	r3, [r7, #7]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
	...

0800af80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800af88:	2300      	movs	r3, #0
 800af8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800af8c:	4b17      	ldr	r3, [pc, #92]	@ (800afec <HAL_InitTick+0x6c>)
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d023      	beq.n	800afdc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800af94:	4b16      	ldr	r3, [pc, #88]	@ (800aff0 <HAL_InitTick+0x70>)
 800af96:	681a      	ldr	r2, [r3, #0]
 800af98:	4b14      	ldr	r3, [pc, #80]	@ (800afec <HAL_InitTick+0x6c>)
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	4619      	mov	r1, r3
 800af9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800afa2:	fbb3 f3f1 	udiv	r3, r3, r1
 800afa6:	fbb2 f3f3 	udiv	r3, r2, r3
 800afaa:	4618      	mov	r0, r3
 800afac:	f001 fd21 	bl	800c9f2 <HAL_SYSTICK_Config>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d10f      	bne.n	800afd6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2b0f      	cmp	r3, #15
 800afba:	d809      	bhi.n	800afd0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800afbc:	2200      	movs	r2, #0
 800afbe:	6879      	ldr	r1, [r7, #4]
 800afc0:	f04f 30ff 	mov.w	r0, #4294967295
 800afc4:	f001 fce7 	bl	800c996 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800afc8:	4a0a      	ldr	r2, [pc, #40]	@ (800aff4 <HAL_InitTick+0x74>)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6013      	str	r3, [r2, #0]
 800afce:	e007      	b.n	800afe0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	73fb      	strb	r3, [r7, #15]
 800afd4:	e004      	b.n	800afe0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800afd6:	2301      	movs	r3, #1
 800afd8:	73fb      	strb	r3, [r7, #15]
 800afda:	e001      	b.n	800afe0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800afdc:	2301      	movs	r3, #1
 800afde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800afe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3710      	adds	r7, #16
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	20000278 	.word	0x20000278
 800aff0:	20000268 	.word	0x20000268
 800aff4:	20000274 	.word	0x20000274

0800aff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800aff8:	b480      	push	{r7}
 800affa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800affc:	4b06      	ldr	r3, [pc, #24]	@ (800b018 <HAL_IncTick+0x20>)
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	461a      	mov	r2, r3
 800b002:	4b06      	ldr	r3, [pc, #24]	@ (800b01c <HAL_IncTick+0x24>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4413      	add	r3, r2
 800b008:	4a04      	ldr	r2, [pc, #16]	@ (800b01c <HAL_IncTick+0x24>)
 800b00a:	6013      	str	r3, [r2, #0]
}
 800b00c:	bf00      	nop
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	20000278 	.word	0x20000278
 800b01c:	20005a10 	.word	0x20005a10

0800b020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b020:	b480      	push	{r7}
 800b022:	af00      	add	r7, sp, #0
  return uwTick;
 800b024:	4b03      	ldr	r3, [pc, #12]	@ (800b034 <HAL_GetTick+0x14>)
 800b026:	681b      	ldr	r3, [r3, #0]
}
 800b028:	4618      	mov	r0, r3
 800b02a:	46bd      	mov	sp, r7
 800b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b030:	4770      	bx	lr
 800b032:	bf00      	nop
 800b034:	20005a10 	.word	0x20005a10

0800b038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b040:	f7ff ffee 	bl	800b020 <HAL_GetTick>
 800b044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b050:	d005      	beq.n	800b05e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800b052:	4b0a      	ldr	r3, [pc, #40]	@ (800b07c <HAL_Delay+0x44>)
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	461a      	mov	r2, r3
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	4413      	add	r3, r2
 800b05c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b05e:	bf00      	nop
 800b060:	f7ff ffde 	bl	800b020 <HAL_GetTick>
 800b064:	4602      	mov	r2, r0
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	1ad3      	subs	r3, r2, r3
 800b06a:	68fa      	ldr	r2, [r7, #12]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d8f7      	bhi.n	800b060 <HAL_Delay+0x28>
  {
  }
}
 800b070:	bf00      	nop
 800b072:	bf00      	nop
 800b074:	3710      	adds	r7, #16
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	20000278 	.word	0x20000278

0800b080 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800b080:	b480      	push	{r7}
 800b082:	b083      	sub	sp, #12
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	431a      	orrs	r2, r3
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	609a      	str	r2, [r3, #8]
}
 800b09a:	bf00      	nop
 800b09c:	370c      	adds	r7, #12
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr

0800b0a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800b0a6:	b480      	push	{r7}
 800b0a8:	b083      	sub	sp, #12
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
 800b0ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	689b      	ldr	r3, [r3, #8]
 800b0b4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	431a      	orrs	r2, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	609a      	str	r2, [r3, #8]
}
 800b0c0:	bf00      	nop
 800b0c2:	370c      	adds	r7, #12
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	370c      	adds	r7, #12
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b087      	sub	sp, #28
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	607a      	str	r2, [r7, #4]
 800b0f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	3360      	adds	r3, #96	@ 0x60
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	4413      	add	r3, r2
 800b102:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	4b08      	ldr	r3, [pc, #32]	@ (800b12c <LL_ADC_SetOffset+0x44>)
 800b10a:	4013      	ands	r3, r2
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800b112:	683a      	ldr	r2, [r7, #0]
 800b114:	430a      	orrs	r2, r1
 800b116:	4313      	orrs	r3, r2
 800b118:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800b120:	bf00      	nop
 800b122:	371c      	adds	r7, #28
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr
 800b12c:	03fff000 	.word	0x03fff000

0800b130 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	3360      	adds	r3, #96	@ 0x60
 800b13e:	461a      	mov	r2, r3
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	4413      	add	r3, r2
 800b146:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800b150:	4618      	mov	r0, r3
 800b152:	3714      	adds	r7, #20
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr

0800b15c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b087      	sub	sp, #28
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	3360      	adds	r3, #96	@ 0x60
 800b16c:	461a      	mov	r2, r3
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	4413      	add	r3, r2
 800b174:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	431a      	orrs	r2, r3
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800b186:	bf00      	nop
 800b188:	371c      	adds	r7, #28
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr

0800b192 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800b192:	b480      	push	{r7}
 800b194:	b083      	sub	sp, #12
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	68db      	ldr	r3, [r3, #12]
 800b19e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d101      	bne.n	800b1aa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e000      	b.n	800b1ac <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b087      	sub	sp, #28
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	3330      	adds	r3, #48	@ 0x30
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	0a1b      	lsrs	r3, r3, #8
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	f003 030c 	and.w	r3, r3, #12
 800b1d4:	4413      	add	r3, r2
 800b1d6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	f003 031f 	and.w	r3, r3, #31
 800b1e2:	211f      	movs	r1, #31
 800b1e4:	fa01 f303 	lsl.w	r3, r1, r3
 800b1e8:	43db      	mvns	r3, r3
 800b1ea:	401a      	ands	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	0e9b      	lsrs	r3, r3, #26
 800b1f0:	f003 011f 	and.w	r1, r3, #31
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	f003 031f 	and.w	r3, r3, #31
 800b1fa:	fa01 f303 	lsl.w	r3, r1, r3
 800b1fe:	431a      	orrs	r2, r3
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800b204:	bf00      	nop
 800b206:	371c      	adds	r7, #28
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800b210:	b480      	push	{r7}
 800b212:	b087      	sub	sp, #28
 800b214:	af00      	add	r7, sp, #0
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	60b9      	str	r1, [r7, #8]
 800b21a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	3314      	adds	r3, #20
 800b220:	461a      	mov	r2, r3
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	0e5b      	lsrs	r3, r3, #25
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	f003 0304 	and.w	r3, r3, #4
 800b22c:	4413      	add	r3, r2
 800b22e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	0d1b      	lsrs	r3, r3, #20
 800b238:	f003 031f 	and.w	r3, r3, #31
 800b23c:	2107      	movs	r1, #7
 800b23e:	fa01 f303 	lsl.w	r3, r1, r3
 800b242:	43db      	mvns	r3, r3
 800b244:	401a      	ands	r2, r3
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	0d1b      	lsrs	r3, r3, #20
 800b24a:	f003 031f 	and.w	r3, r3, #31
 800b24e:	6879      	ldr	r1, [r7, #4]
 800b250:	fa01 f303 	lsl.w	r3, r1, r3
 800b254:	431a      	orrs	r2, r3
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800b25a:	bf00      	nop
 800b25c:	371c      	adds	r7, #28
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
	...

0800b268 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b280:	43db      	mvns	r3, r3
 800b282:	401a      	ands	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f003 0318 	and.w	r3, r3, #24
 800b28a:	4908      	ldr	r1, [pc, #32]	@ (800b2ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800b28c:	40d9      	lsrs	r1, r3
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	400b      	ands	r3, r1
 800b292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b296:	431a      	orrs	r2, r3
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800b29e:	bf00      	nop
 800b2a0:	3714      	adds	r7, #20
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop
 800b2ac:	0007ffff 	.word	0x0007ffff

0800b2b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	f003 031f 	and.w	r3, r3, #31
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	370c      	adds	r7, #12
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800b2dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	6093      	str	r3, [r2, #8]
}
 800b2e4:	bf00      	nop
 800b2e6:	370c      	adds	r7, #12
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b300:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b304:	d101      	bne.n	800b30a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800b306:	2301      	movs	r3, #1
 800b308:	e000      	b.n	800b30c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800b30a:	2300      	movs	r3, #0
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	370c      	adds	r7, #12
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800b328:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b32c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800b334:	bf00      	nop
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b350:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b354:	d101      	bne.n	800b35a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800b356:	2301      	movs	r3, #1
 800b358:	e000      	b.n	800b35c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800b35a:	2300      	movs	r3, #0
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b378:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b37c:	f043 0201 	orr.w	r2, r3, #1
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800b384:	bf00      	nop
 800b386:	370c      	adds	r7, #12
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b3a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b3a4:	f043 0202 	orr.w	r2, r3, #2
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800b3ac:	bf00      	nop
 800b3ae:	370c      	adds	r7, #12
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	f003 0301 	and.w	r3, r3, #1
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d101      	bne.n	800b3d0 <LL_ADC_IsEnabled+0x18>
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e000      	b.n	800b3d2 <LL_ADC_IsEnabled+0x1a>
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	370c      	adds	r7, #12
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr

0800b3de <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800b3de:	b480      	push	{r7}
 800b3e0:	b083      	sub	sp, #12
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	689b      	ldr	r3, [r3, #8]
 800b3ea:	f003 0302 	and.w	r3, r3, #2
 800b3ee:	2b02      	cmp	r3, #2
 800b3f0:	d101      	bne.n	800b3f6 <LL_ADC_IsDisableOngoing+0x18>
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	e000      	b.n	800b3f8 <LL_ADC_IsDisableOngoing+0x1a>
 800b3f6:	2300      	movs	r3, #0
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	370c      	adds	r7, #12
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800b404:	b480      	push	{r7}
 800b406:	b083      	sub	sp, #12
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	689b      	ldr	r3, [r3, #8]
 800b410:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b414:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b418:	f043 0204 	orr.w	r2, r3, #4
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800b420:	bf00      	nop
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b43c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b440:	f043 0210 	orr.w	r2, r3, #16
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800b448:	bf00      	nop
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	689b      	ldr	r3, [r3, #8]
 800b460:	f003 0304 	and.w	r3, r3, #4
 800b464:	2b04      	cmp	r3, #4
 800b466:	d101      	bne.n	800b46c <LL_ADC_REG_IsConversionOngoing+0x18>
 800b468:	2301      	movs	r3, #1
 800b46a:	e000      	b.n	800b46e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b46c:	2300      	movs	r3, #0
}
 800b46e:	4618      	mov	r0, r3
 800b470:	370c      	adds	r7, #12
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr

0800b47a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800b47a:	b480      	push	{r7}
 800b47c:	b083      	sub	sp, #12
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b48a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b48e:	f043 0220 	orr.w	r2, r3, #32
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800b496:	bf00      	nop
 800b498:	370c      	adds	r7, #12
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr

0800b4a2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b4a2:	b480      	push	{r7}
 800b4a4:	b083      	sub	sp, #12
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	f003 0308 	and.w	r3, r3, #8
 800b4b2:	2b08      	cmp	r3, #8
 800b4b4:	d101      	bne.n	800b4ba <LL_ADC_INJ_IsConversionOngoing+0x18>
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	e000      	b.n	800b4bc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b4c8:	b590      	push	{r4, r7, lr}
 800b4ca:	b089      	sub	sp, #36	@ 0x24
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d101      	bne.n	800b4e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	e130      	b.n	800b744 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	691b      	ldr	r3, [r3, #16]
 800b4e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d109      	bne.n	800b504 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f7fb ffb9 	bl	8007468 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4618      	mov	r0, r3
 800b50a:	f7ff fef1 	bl	800b2f0 <LL_ADC_IsDeepPowerDownEnabled>
 800b50e:	4603      	mov	r3, r0
 800b510:	2b00      	cmp	r3, #0
 800b512:	d004      	beq.n	800b51e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4618      	mov	r0, r3
 800b51a:	f7ff fed7 	bl	800b2cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	4618      	mov	r0, r3
 800b524:	f7ff ff0c 	bl	800b340 <LL_ADC_IsInternalRegulatorEnabled>
 800b528:	4603      	mov	r3, r0
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d115      	bne.n	800b55a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4618      	mov	r0, r3
 800b534:	f7ff fef0 	bl	800b318 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b538:	4b84      	ldr	r3, [pc, #528]	@ (800b74c <HAL_ADC_Init+0x284>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	099b      	lsrs	r3, r3, #6
 800b53e:	4a84      	ldr	r2, [pc, #528]	@ (800b750 <HAL_ADC_Init+0x288>)
 800b540:	fba2 2303 	umull	r2, r3, r2, r3
 800b544:	099b      	lsrs	r3, r3, #6
 800b546:	3301      	adds	r3, #1
 800b548:	005b      	lsls	r3, r3, #1
 800b54a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b54c:	e002      	b.n	800b554 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	3b01      	subs	r3, #1
 800b552:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d1f9      	bne.n	800b54e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4618      	mov	r0, r3
 800b560:	f7ff feee 	bl	800b340 <LL_ADC_IsInternalRegulatorEnabled>
 800b564:	4603      	mov	r3, r0
 800b566:	2b00      	cmp	r3, #0
 800b568:	d10d      	bne.n	800b586 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b56e:	f043 0210 	orr.w	r2, r3, #16
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b57a:	f043 0201 	orr.w	r2, r3, #1
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800b582:	2301      	movs	r3, #1
 800b584:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7ff ff62 	bl	800b454 <LL_ADC_REG_IsConversionOngoing>
 800b590:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b596:	f003 0310 	and.w	r3, r3, #16
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	f040 80c9 	bne.w	800b732 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	f040 80c5 	bne.w	800b732 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5ac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800b5b0:	f043 0202 	orr.w	r2, r3, #2
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7ff fefb 	bl	800b3b8 <LL_ADC_IsEnabled>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d115      	bne.n	800b5f4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b5c8:	4862      	ldr	r0, [pc, #392]	@ (800b754 <HAL_ADC_Init+0x28c>)
 800b5ca:	f7ff fef5 	bl	800b3b8 <LL_ADC_IsEnabled>
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	4861      	ldr	r0, [pc, #388]	@ (800b758 <HAL_ADC_Init+0x290>)
 800b5d2:	f7ff fef1 	bl	800b3b8 <LL_ADC_IsEnabled>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	431c      	orrs	r4, r3
 800b5da:	4860      	ldr	r0, [pc, #384]	@ (800b75c <HAL_ADC_Init+0x294>)
 800b5dc:	f7ff feec 	bl	800b3b8 <LL_ADC_IsEnabled>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	4323      	orrs	r3, r4
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d105      	bne.n	800b5f4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	485c      	ldr	r0, [pc, #368]	@ (800b760 <HAL_ADC_Init+0x298>)
 800b5f0:	f7ff fd46 	bl	800b080 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	7e5b      	ldrb	r3, [r3, #25]
 800b5f8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b5fe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800b604:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800b60a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b612:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b614:	4313      	orrs	r3, r2
 800b616:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d106      	bne.n	800b630 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b626:	3b01      	subs	r3, #1
 800b628:	045b      	lsls	r3, r3, #17
 800b62a:	69ba      	ldr	r2, [r7, #24]
 800b62c:	4313      	orrs	r3, r2
 800b62e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b634:	2b00      	cmp	r3, #0
 800b636:	d009      	beq.n	800b64c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b63c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b644:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b646:	69ba      	ldr	r2, [r7, #24]
 800b648:	4313      	orrs	r3, r2
 800b64a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	68da      	ldr	r2, [r3, #12]
 800b652:	4b44      	ldr	r3, [pc, #272]	@ (800b764 <HAL_ADC_Init+0x29c>)
 800b654:	4013      	ands	r3, r2
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	6812      	ldr	r2, [r2, #0]
 800b65a:	69b9      	ldr	r1, [r7, #24]
 800b65c:	430b      	orrs	r3, r1
 800b65e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4618      	mov	r0, r3
 800b666:	f7ff ff1c 	bl	800b4a2 <LL_ADC_INJ_IsConversionOngoing>
 800b66a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d13d      	bne.n	800b6ee <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d13a      	bne.n	800b6ee <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b67c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b684:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b686:	4313      	orrs	r3, r2
 800b688:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b694:	f023 0302 	bic.w	r3, r3, #2
 800b698:	687a      	ldr	r2, [r7, #4]
 800b69a:	6812      	ldr	r2, [r2, #0]
 800b69c:	69b9      	ldr	r1, [r7, #24]
 800b69e:	430b      	orrs	r3, r1
 800b6a0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d118      	bne.n	800b6de <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	691b      	ldr	r3, [r3, #16]
 800b6b2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b6b6:	f023 0304 	bic.w	r3, r3, #4
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b6c2:	4311      	orrs	r1, r2
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800b6c8:	4311      	orrs	r1, r2
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b6ce:	430a      	orrs	r2, r1
 800b6d0:	431a      	orrs	r2, r3
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f042 0201 	orr.w	r2, r2, #1
 800b6da:	611a      	str	r2, [r3, #16]
 800b6dc:	e007      	b.n	800b6ee <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	691a      	ldr	r2, [r3, #16]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f022 0201 	bic.w	r2, r2, #1
 800b6ec:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	691b      	ldr	r3, [r3, #16]
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d10c      	bne.n	800b710 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6fc:	f023 010f 	bic.w	r1, r3, #15
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	69db      	ldr	r3, [r3, #28]
 800b704:	1e5a      	subs	r2, r3, #1
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	430a      	orrs	r2, r1
 800b70c:	631a      	str	r2, [r3, #48]	@ 0x30
 800b70e:	e007      	b.n	800b720 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f022 020f 	bic.w	r2, r2, #15
 800b71e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b724:	f023 0303 	bic.w	r3, r3, #3
 800b728:	f043 0201 	orr.w	r2, r3, #1
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	655a      	str	r2, [r3, #84]	@ 0x54
 800b730:	e007      	b.n	800b742 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b736:	f043 0210 	orr.w	r2, r3, #16
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800b73e:	2301      	movs	r3, #1
 800b740:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800b742:	7ffb      	ldrb	r3, [r7, #31]
}
 800b744:	4618      	mov	r0, r3
 800b746:	3724      	adds	r7, #36	@ 0x24
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd90      	pop	{r4, r7, pc}
 800b74c:	20000268 	.word	0x20000268
 800b750:	053e2d63 	.word	0x053e2d63
 800b754:	50040000 	.word	0x50040000
 800b758:	50040100 	.word	0x50040100
 800b75c:	50040200 	.word	0x50040200
 800b760:	50040300 	.word	0x50040300
 800b764:	fff0c007 	.word	0xfff0c007

0800b768 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b086      	sub	sp, #24
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b774:	4853      	ldr	r0, [pc, #332]	@ (800b8c4 <HAL_ADC_Start_DMA+0x15c>)
 800b776:	f7ff fd9b 	bl	800b2b0 <LL_ADC_GetMultimode>
 800b77a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4618      	mov	r0, r3
 800b782:	f7ff fe67 	bl	800b454 <LL_ADC_REG_IsConversionOngoing>
 800b786:	4603      	mov	r3, r0
 800b788:	2b00      	cmp	r3, #0
 800b78a:	f040 8093 	bne.w	800b8b4 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b794:	2b01      	cmp	r3, #1
 800b796:	d101      	bne.n	800b79c <HAL_ADC_Start_DMA+0x34>
 800b798:	2302      	movs	r3, #2
 800b79a:	e08e      	b.n	800b8ba <HAL_ADC_Start_DMA+0x152>
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2201      	movs	r2, #1
 800b7a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	4a47      	ldr	r2, [pc, #284]	@ (800b8c8 <HAL_ADC_Start_DMA+0x160>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d008      	beq.n	800b7c0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d005      	beq.n	800b7c0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	2b05      	cmp	r3, #5
 800b7b8:	d002      	beq.n	800b7c0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	2b09      	cmp	r3, #9
 800b7be:	d172      	bne.n	800b8a6 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800b7c0:	68f8      	ldr	r0, [r7, #12]
 800b7c2:	f000 fda7 	bl	800c314 <ADC_Enable>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800b7ca:	7dfb      	ldrb	r3, [r7, #23]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d165      	bne.n	800b89c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b7d8:	f023 0301 	bic.w	r3, r3, #1
 800b7dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4a38      	ldr	r2, [pc, #224]	@ (800b8cc <HAL_ADC_Start_DMA+0x164>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d002      	beq.n	800b7f4 <HAL_ADC_Start_DMA+0x8c>
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	e000      	b.n	800b7f6 <HAL_ADC_Start_DMA+0x8e>
 800b7f4:	4b36      	ldr	r3, [pc, #216]	@ (800b8d0 <HAL_ADC_Start_DMA+0x168>)
 800b7f6:	68fa      	ldr	r2, [r7, #12]
 800b7f8:	6812      	ldr	r2, [r2, #0]
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d002      	beq.n	800b804 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d105      	bne.n	800b810 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b808:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b814:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d006      	beq.n	800b82a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b820:	f023 0206 	bic.w	r2, r3, #6
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	659a      	str	r2, [r3, #88]	@ 0x58
 800b828:	e002      	b.n	800b830 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2200      	movs	r2, #0
 800b82e:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b834:	4a27      	ldr	r2, [pc, #156]	@ (800b8d4 <HAL_ADC_Start_DMA+0x16c>)
 800b836:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b83c:	4a26      	ldr	r2, [pc, #152]	@ (800b8d8 <HAL_ADC_Start_DMA+0x170>)
 800b83e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b844:	4a25      	ldr	r2, [pc, #148]	@ (800b8dc <HAL_ADC_Start_DMA+0x174>)
 800b846:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	221c      	movs	r2, #28
 800b84e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2200      	movs	r2, #0
 800b854:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	685a      	ldr	r2, [r3, #4]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f042 0210 	orr.w	r2, r2, #16
 800b866:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	68da      	ldr	r2, [r3, #12]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f042 0201 	orr.w	r2, r2, #1
 800b876:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	3340      	adds	r3, #64	@ 0x40
 800b882:	4619      	mov	r1, r3
 800b884:	68ba      	ldr	r2, [r7, #8]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f001 fbb0 	bl	800cfec <HAL_DMA_Start_IT>
 800b88c:	4603      	mov	r3, r0
 800b88e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4618      	mov	r0, r3
 800b896:	f7ff fdb5 	bl	800b404 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800b89a:	e00d      	b.n	800b8b8 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800b8a4:	e008      	b.n	800b8b8 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800b8b2:	e001      	b.n	800b8b8 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800b8b4:	2302      	movs	r3, #2
 800b8b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800b8b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3718      	adds	r7, #24
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	50040300 	.word	0x50040300
 800b8c8:	50040200 	.word	0x50040200
 800b8cc:	50040100 	.word	0x50040100
 800b8d0:	50040000 	.word	0x50040000
 800b8d4:	0800c4df 	.word	0x0800c4df
 800b8d8:	0800c5b7 	.word	0x0800c5b7
 800b8dc:	0800c5d3 	.word	0x0800c5d3

0800b8e0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	d101      	bne.n	800b8f6 <HAL_ADC_Stop_DMA+0x16>
 800b8f2:	2302      	movs	r3, #2
 800b8f4:	e051      	b.n	800b99a <HAL_ADC_Stop_DMA+0xba>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800b8fe:	2103      	movs	r1, #3
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 fc4b 	bl	800c19c <ADC_ConversionStop>
 800b906:	4603      	mov	r3, r0
 800b908:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800b90a:	7bfb      	ldrb	r3, [r7, #15]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d13f      	bne.n	800b990 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	68da      	ldr	r2, [r3, #12]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f022 0201 	bic.w	r2, r2, #1
 800b91e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b924:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	2b02      	cmp	r3, #2
 800b92c:	d10f      	bne.n	800b94e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b932:	4618      	mov	r0, r3
 800b934:	f001 fbba 	bl	800d0ac <HAL_DMA_Abort>
 800b938:	4603      	mov	r3, r0
 800b93a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800b93c:	7bfb      	ldrb	r3, [r7, #15]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d005      	beq.n	800b94e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b946:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	685a      	ldr	r2, [r3, #4]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f022 0210 	bic.w	r2, r2, #16
 800b95c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800b95e:	7bfb      	ldrb	r3, [r7, #15]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d105      	bne.n	800b970 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 fd5b 	bl	800c420 <ADC_Disable>
 800b96a:	4603      	mov	r3, r0
 800b96c:	73fb      	strb	r3, [r7, #15]
 800b96e:	e002      	b.n	800b976 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 fd55 	bl	800c420 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800b976:	7bfb      	ldrb	r3, [r7, #15]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d109      	bne.n	800b990 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b980:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800b984:	f023 0301 	bic.w	r3, r3, #1
 800b988:	f043 0201 	orr.w	r2, r3, #1
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800b998:	7bfb      	ldrb	r3, [r7, #15]
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}

0800b9a2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800b9a2:	b480      	push	{r7}
 800b9a4:	b083      	sub	sp, #12
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800b9aa:	bf00      	nop
 800b9ac:	370c      	adds	r7, #12
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr
	...

0800b9b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b0b6      	sub	sp, #216	@ 0xd8
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	d101      	bne.n	800b9da <HAL_ADC_ConfigChannel+0x22>
 800b9d6:	2302      	movs	r3, #2
 800b9d8:	e3c9      	b.n	800c16e <HAL_ADC_ConfigChannel+0x7b6>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2201      	movs	r2, #1
 800b9de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7ff fd34 	bl	800b454 <LL_ADC_REG_IsConversionOngoing>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	f040 83aa 	bne.w	800c148 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	2b05      	cmp	r3, #5
 800ba02:	d824      	bhi.n	800ba4e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	3b02      	subs	r3, #2
 800ba0a:	2b03      	cmp	r3, #3
 800ba0c:	d81b      	bhi.n	800ba46 <HAL_ADC_ConfigChannel+0x8e>
 800ba0e:	a201      	add	r2, pc, #4	@ (adr r2, 800ba14 <HAL_ADC_ConfigChannel+0x5c>)
 800ba10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba14:	0800ba25 	.word	0x0800ba25
 800ba18:	0800ba2d 	.word	0x0800ba2d
 800ba1c:	0800ba35 	.word	0x0800ba35
 800ba20:	0800ba3d 	.word	0x0800ba3d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800ba24:	230c      	movs	r3, #12
 800ba26:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800ba2a:	e010      	b.n	800ba4e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800ba2c:	2312      	movs	r3, #18
 800ba2e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800ba32:	e00c      	b.n	800ba4e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800ba34:	2318      	movs	r3, #24
 800ba36:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800ba3a:	e008      	b.n	800ba4e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800ba3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ba40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800ba44:	e003      	b.n	800ba4e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800ba46:	2306      	movs	r3, #6
 800ba48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800ba4c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6818      	ldr	r0, [r3, #0]
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	461a      	mov	r2, r3
 800ba58:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800ba5c:	f7ff fbac 	bl	800b1b8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7ff fcf5 	bl	800b454 <LL_ADC_REG_IsConversionOngoing>
 800ba6a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7ff fd15 	bl	800b4a2 <LL_ADC_INJ_IsConversionOngoing>
 800ba78:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800ba7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	f040 81a4 	bne.w	800bdce <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800ba86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f040 819f 	bne.w	800bdce <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6818      	ldr	r0, [r3, #0]
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	6819      	ldr	r1, [r3, #0]
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	689b      	ldr	r3, [r3, #8]
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	f7ff fbb7 	bl	800b210 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	695a      	ldr	r2, [r3, #20]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	08db      	lsrs	r3, r3, #3
 800baae:	f003 0303 	and.w	r3, r3, #3
 800bab2:	005b      	lsls	r3, r3, #1
 800bab4:	fa02 f303 	lsl.w	r3, r2, r3
 800bab8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	691b      	ldr	r3, [r3, #16]
 800bac0:	2b04      	cmp	r3, #4
 800bac2:	d00a      	beq.n	800bada <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6818      	ldr	r0, [r3, #0]
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	6919      	ldr	r1, [r3, #16]
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bad4:	f7ff fb08 	bl	800b0e8 <LL_ADC_SetOffset>
 800bad8:	e179      	b.n	800bdce <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	2100      	movs	r1, #0
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7ff fb25 	bl	800b130 <LL_ADC_GetOffsetChannel>
 800bae6:	4603      	mov	r3, r0
 800bae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800baec:	2b00      	cmp	r3, #0
 800baee:	d10a      	bne.n	800bb06 <HAL_ADC_ConfigChannel+0x14e>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	2100      	movs	r1, #0
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7ff fb1a 	bl	800b130 <LL_ADC_GetOffsetChannel>
 800bafc:	4603      	mov	r3, r0
 800bafe:	0e9b      	lsrs	r3, r3, #26
 800bb00:	f003 021f 	and.w	r2, r3, #31
 800bb04:	e01e      	b.n	800bb44 <HAL_ADC_ConfigChannel+0x18c>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	2100      	movs	r1, #0
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7ff fb0f 	bl	800b130 <LL_ADC_GetOffsetChannel>
 800bb12:	4603      	mov	r3, r0
 800bb14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bb1c:	fa93 f3a3 	rbit	r3, r3
 800bb20:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800bb24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bb28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800bb2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d101      	bne.n	800bb38 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800bb34:	2320      	movs	r3, #32
 800bb36:	e004      	b.n	800bb42 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800bb38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bb3c:	fab3 f383 	clz	r3, r3
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d105      	bne.n	800bb5c <HAL_ADC_ConfigChannel+0x1a4>
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	0e9b      	lsrs	r3, r3, #26
 800bb56:	f003 031f 	and.w	r3, r3, #31
 800bb5a:	e018      	b.n	800bb8e <HAL_ADC_ConfigChannel+0x1d6>
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb68:	fa93 f3a3 	rbit	r3, r3
 800bb6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800bb70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bb74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800bb78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d101      	bne.n	800bb84 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800bb80:	2320      	movs	r3, #32
 800bb82:	e004      	b.n	800bb8e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800bb84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bb88:	fab3 f383 	clz	r3, r3
 800bb8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d106      	bne.n	800bba0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	2200      	movs	r2, #0
 800bb98:	2100      	movs	r1, #0
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7ff fade 	bl	800b15c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	2101      	movs	r1, #1
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7ff fac2 	bl	800b130 <LL_ADC_GetOffsetChannel>
 800bbac:	4603      	mov	r3, r0
 800bbae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d10a      	bne.n	800bbcc <HAL_ADC_ConfigChannel+0x214>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2101      	movs	r1, #1
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7ff fab7 	bl	800b130 <LL_ADC_GetOffsetChannel>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	0e9b      	lsrs	r3, r3, #26
 800bbc6:	f003 021f 	and.w	r2, r3, #31
 800bbca:	e01e      	b.n	800bc0a <HAL_ADC_ConfigChannel+0x252>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2101      	movs	r1, #1
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7ff faac 	bl	800b130 <LL_ADC_GetOffsetChannel>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bbde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bbe2:	fa93 f3a3 	rbit	r3, r3
 800bbe6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800bbea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bbee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800bbf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d101      	bne.n	800bbfe <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800bbfa:	2320      	movs	r3, #32
 800bbfc:	e004      	b.n	800bc08 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800bbfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc02:	fab3 f383 	clz	r3, r3
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d105      	bne.n	800bc22 <HAL_ADC_ConfigChannel+0x26a>
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	0e9b      	lsrs	r3, r3, #26
 800bc1c:	f003 031f 	and.w	r3, r3, #31
 800bc20:	e018      	b.n	800bc54 <HAL_ADC_ConfigChannel+0x29c>
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bc2e:	fa93 f3a3 	rbit	r3, r3
 800bc32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800bc36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bc3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800bc3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d101      	bne.n	800bc4a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800bc46:	2320      	movs	r3, #32
 800bc48:	e004      	b.n	800bc54 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800bc4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bc4e:	fab3 f383 	clz	r3, r3
 800bc52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d106      	bne.n	800bc66 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	2101      	movs	r1, #1
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7ff fa7b 	bl	800b15c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2102      	movs	r1, #2
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f7ff fa5f 	bl	800b130 <LL_ADC_GetOffsetChannel>
 800bc72:	4603      	mov	r3, r0
 800bc74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d10a      	bne.n	800bc92 <HAL_ADC_ConfigChannel+0x2da>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2102      	movs	r1, #2
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7ff fa54 	bl	800b130 <LL_ADC_GetOffsetChannel>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	0e9b      	lsrs	r3, r3, #26
 800bc8c:	f003 021f 	and.w	r2, r3, #31
 800bc90:	e01e      	b.n	800bcd0 <HAL_ADC_ConfigChannel+0x318>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2102      	movs	r1, #2
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7ff fa49 	bl	800b130 <LL_ADC_GetOffsetChannel>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bca4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bca8:	fa93 f3a3 	rbit	r3, r3
 800bcac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800bcb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bcb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800bcb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d101      	bne.n	800bcc4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800bcc0:	2320      	movs	r3, #32
 800bcc2:	e004      	b.n	800bcce <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800bcc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bcc8:	fab3 f383 	clz	r3, r3
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d105      	bne.n	800bce8 <HAL_ADC_ConfigChannel+0x330>
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	0e9b      	lsrs	r3, r3, #26
 800bce2:	f003 031f 	and.w	r3, r3, #31
 800bce6:	e014      	b.n	800bd12 <HAL_ADC_ConfigChannel+0x35a>
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bcee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bcf0:	fa93 f3a3 	rbit	r3, r3
 800bcf4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800bcf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bcf8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800bcfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d101      	bne.n	800bd08 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800bd04:	2320      	movs	r3, #32
 800bd06:	e004      	b.n	800bd12 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800bd08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bd0c:	fab3 f383 	clz	r3, r3
 800bd10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d106      	bne.n	800bd24 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	2102      	movs	r1, #2
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7ff fa1c 	bl	800b15c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2103      	movs	r1, #3
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7ff fa00 	bl	800b130 <LL_ADC_GetOffsetChannel>
 800bd30:	4603      	mov	r3, r0
 800bd32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d10a      	bne.n	800bd50 <HAL_ADC_ConfigChannel+0x398>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	2103      	movs	r1, #3
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7ff f9f5 	bl	800b130 <LL_ADC_GetOffsetChannel>
 800bd46:	4603      	mov	r3, r0
 800bd48:	0e9b      	lsrs	r3, r3, #26
 800bd4a:	f003 021f 	and.w	r2, r3, #31
 800bd4e:	e017      	b.n	800bd80 <HAL_ADC_ConfigChannel+0x3c8>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2103      	movs	r1, #3
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7ff f9ea 	bl	800b130 <LL_ADC_GetOffsetChannel>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bd62:	fa93 f3a3 	rbit	r3, r3
 800bd66:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800bd68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd6a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800bd6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d101      	bne.n	800bd76 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800bd72:	2320      	movs	r3, #32
 800bd74:	e003      	b.n	800bd7e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800bd76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd78:	fab3 f383 	clz	r3, r3
 800bd7c:	b2db      	uxtb	r3, r3
 800bd7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d105      	bne.n	800bd98 <HAL_ADC_ConfigChannel+0x3e0>
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	0e9b      	lsrs	r3, r3, #26
 800bd92:	f003 031f 	and.w	r3, r3, #31
 800bd96:	e011      	b.n	800bdbc <HAL_ADC_ConfigChannel+0x404>
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bda0:	fa93 f3a3 	rbit	r3, r3
 800bda4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800bda6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bda8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800bdaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d101      	bne.n	800bdb4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800bdb0:	2320      	movs	r3, #32
 800bdb2:	e003      	b.n	800bdbc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800bdb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bdb6:	fab3 f383 	clz	r3, r3
 800bdba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d106      	bne.n	800bdce <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	2103      	movs	r1, #3
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7ff f9c7 	bl	800b15c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7ff faf0 	bl	800b3b8 <LL_ADC_IsEnabled>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	f040 8140 	bne.w	800c060 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6818      	ldr	r0, [r3, #0]
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	6819      	ldr	r1, [r3, #0]
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	461a      	mov	r2, r3
 800bdee:	f7ff fa3b 	bl	800b268 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	4a8f      	ldr	r2, [pc, #572]	@ (800c034 <HAL_ADC_ConfigChannel+0x67c>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	f040 8131 	bne.w	800c060 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d10b      	bne.n	800be26 <HAL_ADC_ConfigChannel+0x46e>
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	0e9b      	lsrs	r3, r3, #26
 800be14:	3301      	adds	r3, #1
 800be16:	f003 031f 	and.w	r3, r3, #31
 800be1a:	2b09      	cmp	r3, #9
 800be1c:	bf94      	ite	ls
 800be1e:	2301      	movls	r3, #1
 800be20:	2300      	movhi	r3, #0
 800be22:	b2db      	uxtb	r3, r3
 800be24:	e019      	b.n	800be5a <HAL_ADC_ConfigChannel+0x4a2>
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be2e:	fa93 f3a3 	rbit	r3, r3
 800be32:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800be34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be36:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800be38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d101      	bne.n	800be42 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800be3e:	2320      	movs	r3, #32
 800be40:	e003      	b.n	800be4a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800be42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be44:	fab3 f383 	clz	r3, r3
 800be48:	b2db      	uxtb	r3, r3
 800be4a:	3301      	adds	r3, #1
 800be4c:	f003 031f 	and.w	r3, r3, #31
 800be50:	2b09      	cmp	r3, #9
 800be52:	bf94      	ite	ls
 800be54:	2301      	movls	r3, #1
 800be56:	2300      	movhi	r3, #0
 800be58:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d079      	beq.n	800bf52 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be66:	2b00      	cmp	r3, #0
 800be68:	d107      	bne.n	800be7a <HAL_ADC_ConfigChannel+0x4c2>
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	0e9b      	lsrs	r3, r3, #26
 800be70:	3301      	adds	r3, #1
 800be72:	069b      	lsls	r3, r3, #26
 800be74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800be78:	e015      	b.n	800bea6 <HAL_ADC_ConfigChannel+0x4ee>
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be82:	fa93 f3a3 	rbit	r3, r3
 800be86:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800be88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be8a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800be8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d101      	bne.n	800be96 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800be92:	2320      	movs	r3, #32
 800be94:	e003      	b.n	800be9e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800be96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be98:	fab3 f383 	clz	r3, r3
 800be9c:	b2db      	uxtb	r3, r3
 800be9e:	3301      	adds	r3, #1
 800bea0:	069b      	lsls	r3, r3, #26
 800bea2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d109      	bne.n	800bec6 <HAL_ADC_ConfigChannel+0x50e>
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	0e9b      	lsrs	r3, r3, #26
 800beb8:	3301      	adds	r3, #1
 800beba:	f003 031f 	and.w	r3, r3, #31
 800bebe:	2101      	movs	r1, #1
 800bec0:	fa01 f303 	lsl.w	r3, r1, r3
 800bec4:	e017      	b.n	800bef6 <HAL_ADC_ConfigChannel+0x53e>
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800becc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bece:	fa93 f3a3 	rbit	r3, r3
 800bed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800bed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bed6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800bed8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d101      	bne.n	800bee2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800bede:	2320      	movs	r3, #32
 800bee0:	e003      	b.n	800beea <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800bee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bee4:	fab3 f383 	clz	r3, r3
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	3301      	adds	r3, #1
 800beec:	f003 031f 	and.w	r3, r3, #31
 800bef0:	2101      	movs	r1, #1
 800bef2:	fa01 f303 	lsl.w	r3, r1, r3
 800bef6:	ea42 0103 	orr.w	r1, r2, r3
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d10a      	bne.n	800bf1c <HAL_ADC_ConfigChannel+0x564>
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	0e9b      	lsrs	r3, r3, #26
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	f003 021f 	and.w	r2, r3, #31
 800bf12:	4613      	mov	r3, r2
 800bf14:	005b      	lsls	r3, r3, #1
 800bf16:	4413      	add	r3, r2
 800bf18:	051b      	lsls	r3, r3, #20
 800bf1a:	e018      	b.n	800bf4e <HAL_ADC_ConfigChannel+0x596>
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf24:	fa93 f3a3 	rbit	r3, r3
 800bf28:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800bf2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800bf2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d101      	bne.n	800bf38 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800bf34:	2320      	movs	r3, #32
 800bf36:	e003      	b.n	800bf40 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800bf38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf3a:	fab3 f383 	clz	r3, r3
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	3301      	adds	r3, #1
 800bf42:	f003 021f 	and.w	r2, r3, #31
 800bf46:	4613      	mov	r3, r2
 800bf48:	005b      	lsls	r3, r3, #1
 800bf4a:	4413      	add	r3, r2
 800bf4c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bf4e:	430b      	orrs	r3, r1
 800bf50:	e081      	b.n	800c056 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d107      	bne.n	800bf6e <HAL_ADC_ConfigChannel+0x5b6>
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	0e9b      	lsrs	r3, r3, #26
 800bf64:	3301      	adds	r3, #1
 800bf66:	069b      	lsls	r3, r3, #26
 800bf68:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bf6c:	e015      	b.n	800bf9a <HAL_ADC_ConfigChannel+0x5e2>
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf76:	fa93 f3a3 	rbit	r3, r3
 800bf7a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800bf7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800bf80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d101      	bne.n	800bf8a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800bf86:	2320      	movs	r3, #32
 800bf88:	e003      	b.n	800bf92 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800bf8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf8c:	fab3 f383 	clz	r3, r3
 800bf90:	b2db      	uxtb	r3, r3
 800bf92:	3301      	adds	r3, #1
 800bf94:	069b      	lsls	r3, r3, #26
 800bf96:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d109      	bne.n	800bfba <HAL_ADC_ConfigChannel+0x602>
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	0e9b      	lsrs	r3, r3, #26
 800bfac:	3301      	adds	r3, #1
 800bfae:	f003 031f 	and.w	r3, r3, #31
 800bfb2:	2101      	movs	r1, #1
 800bfb4:	fa01 f303 	lsl.w	r3, r1, r3
 800bfb8:	e017      	b.n	800bfea <HAL_ADC_ConfigChannel+0x632>
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bfc0:	69fb      	ldr	r3, [r7, #28]
 800bfc2:	fa93 f3a3 	rbit	r3, r3
 800bfc6:	61bb      	str	r3, [r7, #24]
  return result;
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800bfcc:	6a3b      	ldr	r3, [r7, #32]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d101      	bne.n	800bfd6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800bfd2:	2320      	movs	r3, #32
 800bfd4:	e003      	b.n	800bfde <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800bfd6:	6a3b      	ldr	r3, [r7, #32]
 800bfd8:	fab3 f383 	clz	r3, r3
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	3301      	adds	r3, #1
 800bfe0:	f003 031f 	and.w	r3, r3, #31
 800bfe4:	2101      	movs	r1, #1
 800bfe6:	fa01 f303 	lsl.w	r3, r1, r3
 800bfea:	ea42 0103 	orr.w	r1, r2, r3
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d10d      	bne.n	800c016 <HAL_ADC_ConfigChannel+0x65e>
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	0e9b      	lsrs	r3, r3, #26
 800c000:	3301      	adds	r3, #1
 800c002:	f003 021f 	and.w	r2, r3, #31
 800c006:	4613      	mov	r3, r2
 800c008:	005b      	lsls	r3, r3, #1
 800c00a:	4413      	add	r3, r2
 800c00c:	3b1e      	subs	r3, #30
 800c00e:	051b      	lsls	r3, r3, #20
 800c010:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c014:	e01e      	b.n	800c054 <HAL_ADC_ConfigChannel+0x69c>
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	fa93 f3a3 	rbit	r3, r3
 800c022:	60fb      	str	r3, [r7, #12]
  return result;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d104      	bne.n	800c038 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800c02e:	2320      	movs	r3, #32
 800c030:	e006      	b.n	800c040 <HAL_ADC_ConfigChannel+0x688>
 800c032:	bf00      	nop
 800c034:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	fab3 f383 	clz	r3, r3
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	3301      	adds	r3, #1
 800c042:	f003 021f 	and.w	r2, r3, #31
 800c046:	4613      	mov	r3, r2
 800c048:	005b      	lsls	r3, r3, #1
 800c04a:	4413      	add	r3, r2
 800c04c:	3b1e      	subs	r3, #30
 800c04e:	051b      	lsls	r3, r3, #20
 800c050:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c054:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800c056:	683a      	ldr	r2, [r7, #0]
 800c058:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c05a:	4619      	mov	r1, r3
 800c05c:	f7ff f8d8 	bl	800b210 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	4b44      	ldr	r3, [pc, #272]	@ (800c178 <HAL_ADC_ConfigChannel+0x7c0>)
 800c066:	4013      	ands	r3, r2
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d07a      	beq.n	800c162 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c06c:	4843      	ldr	r0, [pc, #268]	@ (800c17c <HAL_ADC_ConfigChannel+0x7c4>)
 800c06e:	f7ff f82d 	bl	800b0cc <LL_ADC_GetCommonPathInternalCh>
 800c072:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4a41      	ldr	r2, [pc, #260]	@ (800c180 <HAL_ADC_ConfigChannel+0x7c8>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d12c      	bne.n	800c0da <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800c080:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c084:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d126      	bne.n	800c0da <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4a3c      	ldr	r2, [pc, #240]	@ (800c184 <HAL_ADC_ConfigChannel+0x7cc>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d004      	beq.n	800c0a0 <HAL_ADC_ConfigChannel+0x6e8>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4a3b      	ldr	r2, [pc, #236]	@ (800c188 <HAL_ADC_ConfigChannel+0x7d0>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d15d      	bne.n	800c15c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c0a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c0a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	4834      	ldr	r0, [pc, #208]	@ (800c17c <HAL_ADC_ConfigChannel+0x7c4>)
 800c0ac:	f7fe fffb 	bl	800b0a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c0b0:	4b36      	ldr	r3, [pc, #216]	@ (800c18c <HAL_ADC_ConfigChannel+0x7d4>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	099b      	lsrs	r3, r3, #6
 800c0b6:	4a36      	ldr	r2, [pc, #216]	@ (800c190 <HAL_ADC_ConfigChannel+0x7d8>)
 800c0b8:	fba2 2303 	umull	r2, r3, r2, r3
 800c0bc:	099b      	lsrs	r3, r3, #6
 800c0be:	1c5a      	adds	r2, r3, #1
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	005b      	lsls	r3, r3, #1
 800c0c4:	4413      	add	r3, r2
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800c0ca:	e002      	b.n	800c0d2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	3b01      	subs	r3, #1
 800c0d0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d1f9      	bne.n	800c0cc <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c0d8:	e040      	b.n	800c15c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4a2d      	ldr	r2, [pc, #180]	@ (800c194 <HAL_ADC_ConfigChannel+0x7dc>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d118      	bne.n	800c116 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800c0e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c0e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d112      	bne.n	800c116 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a23      	ldr	r2, [pc, #140]	@ (800c184 <HAL_ADC_ConfigChannel+0x7cc>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d004      	beq.n	800c104 <HAL_ADC_ConfigChannel+0x74c>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a22      	ldr	r2, [pc, #136]	@ (800c188 <HAL_ADC_ConfigChannel+0x7d0>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d12d      	bne.n	800c160 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c104:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c108:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c10c:	4619      	mov	r1, r3
 800c10e:	481b      	ldr	r0, [pc, #108]	@ (800c17c <HAL_ADC_ConfigChannel+0x7c4>)
 800c110:	f7fe ffc9 	bl	800b0a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c114:	e024      	b.n	800c160 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4a1f      	ldr	r2, [pc, #124]	@ (800c198 <HAL_ADC_ConfigChannel+0x7e0>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d120      	bne.n	800c162 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800c120:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c124:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d11a      	bne.n	800c162 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a14      	ldr	r2, [pc, #80]	@ (800c184 <HAL_ADC_ConfigChannel+0x7cc>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d115      	bne.n	800c162 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c136:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c13a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c13e:	4619      	mov	r1, r3
 800c140:	480e      	ldr	r0, [pc, #56]	@ (800c17c <HAL_ADC_ConfigChannel+0x7c4>)
 800c142:	f7fe ffb0 	bl	800b0a6 <LL_ADC_SetCommonPathInternalCh>
 800c146:	e00c      	b.n	800c162 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c14c:	f043 0220 	orr.w	r2, r3, #32
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800c154:	2301      	movs	r3, #1
 800c156:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800c15a:	e002      	b.n	800c162 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c15c:	bf00      	nop
 800c15e:	e000      	b.n	800c162 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c160:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2200      	movs	r2, #0
 800c166:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800c16a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800c16e:	4618      	mov	r0, r3
 800c170:	37d8      	adds	r7, #216	@ 0xd8
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	80080000 	.word	0x80080000
 800c17c:	50040300 	.word	0x50040300
 800c180:	c7520000 	.word	0xc7520000
 800c184:	50040000 	.word	0x50040000
 800c188:	50040200 	.word	0x50040200
 800c18c:	20000268 	.word	0x20000268
 800c190:	053e2d63 	.word	0x053e2d63
 800c194:	cb840000 	.word	0xcb840000
 800c198:	80000001 	.word	0x80000001

0800c19c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b088      	sub	sp, #32
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7ff f94e 	bl	800b454 <LL_ADC_REG_IsConversionOngoing>
 800c1b8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f7ff f96f 	bl	800b4a2 <LL_ADC_INJ_IsConversionOngoing>
 800c1c4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d103      	bne.n	800c1d4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	f000 8098 	beq.w	800c304 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d02a      	beq.n	800c238 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	7e5b      	ldrb	r3, [r3, #25]
 800c1e6:	2b01      	cmp	r3, #1
 800c1e8:	d126      	bne.n	800c238 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	7e1b      	ldrb	r3, [r3, #24]
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	d122      	bne.n	800c238 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800c1f6:	e014      	b.n	800c222 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800c1f8:	69fb      	ldr	r3, [r7, #28]
 800c1fa:	4a45      	ldr	r2, [pc, #276]	@ (800c310 <ADC_ConversionStop+0x174>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d90d      	bls.n	800c21c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c204:	f043 0210 	orr.w	r2, r3, #16
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c210:	f043 0201 	orr.w	r2, r3, #1
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800c218:	2301      	movs	r3, #1
 800c21a:	e074      	b.n	800c306 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800c21c:	69fb      	ldr	r3, [r7, #28]
 800c21e:	3301      	adds	r3, #1
 800c220:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c22c:	2b40      	cmp	r3, #64	@ 0x40
 800c22e:	d1e3      	bne.n	800c1f8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2240      	movs	r2, #64	@ 0x40
 800c236:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800c238:	69bb      	ldr	r3, [r7, #24]
 800c23a:	2b02      	cmp	r3, #2
 800c23c:	d014      	beq.n	800c268 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	4618      	mov	r0, r3
 800c244:	f7ff f906 	bl	800b454 <LL_ADC_REG_IsConversionOngoing>
 800c248:	4603      	mov	r3, r0
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d00c      	beq.n	800c268 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	4618      	mov	r0, r3
 800c254:	f7ff f8c3 	bl	800b3de <LL_ADC_IsDisableOngoing>
 800c258:	4603      	mov	r3, r0
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d104      	bne.n	800c268 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4618      	mov	r0, r3
 800c264:	f7ff f8e2 	bl	800b42c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800c268:	69bb      	ldr	r3, [r7, #24]
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d014      	beq.n	800c298 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	4618      	mov	r0, r3
 800c274:	f7ff f915 	bl	800b4a2 <LL_ADC_INJ_IsConversionOngoing>
 800c278:	4603      	mov	r3, r0
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d00c      	beq.n	800c298 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4618      	mov	r0, r3
 800c284:	f7ff f8ab 	bl	800b3de <LL_ADC_IsDisableOngoing>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d104      	bne.n	800c298 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4618      	mov	r0, r3
 800c294:	f7ff f8f1 	bl	800b47a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800c298:	69bb      	ldr	r3, [r7, #24]
 800c29a:	2b02      	cmp	r3, #2
 800c29c:	d005      	beq.n	800c2aa <ADC_ConversionStop+0x10e>
 800c29e:	69bb      	ldr	r3, [r7, #24]
 800c2a0:	2b03      	cmp	r3, #3
 800c2a2:	d105      	bne.n	800c2b0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800c2a4:	230c      	movs	r3, #12
 800c2a6:	617b      	str	r3, [r7, #20]
        break;
 800c2a8:	e005      	b.n	800c2b6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800c2aa:	2308      	movs	r3, #8
 800c2ac:	617b      	str	r3, [r7, #20]
        break;
 800c2ae:	e002      	b.n	800c2b6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800c2b0:	2304      	movs	r3, #4
 800c2b2:	617b      	str	r3, [r7, #20]
        break;
 800c2b4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800c2b6:	f7fe feb3 	bl	800b020 <HAL_GetTick>
 800c2ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800c2bc:	e01b      	b.n	800c2f6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800c2be:	f7fe feaf 	bl	800b020 <HAL_GetTick>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	1ad3      	subs	r3, r2, r3
 800c2c8:	2b05      	cmp	r3, #5
 800c2ca:	d914      	bls.n	800c2f6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	689a      	ldr	r2, [r3, #8]
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	4013      	ands	r3, r2
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d00d      	beq.n	800c2f6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2de:	f043 0210 	orr.w	r2, r3, #16
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2ea:	f043 0201 	orr.w	r2, r3, #1
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	e007      	b.n	800c306 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	689a      	ldr	r2, [r3, #8]
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	4013      	ands	r3, r2
 800c300:	2b00      	cmp	r3, #0
 800c302:	d1dc      	bne.n	800c2be <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800c304:	2300      	movs	r3, #0
}
 800c306:	4618      	mov	r0, r3
 800c308:	3720      	adds	r7, #32
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	a33fffff 	.word	0xa33fffff

0800c314 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800c31c:	2300      	movs	r3, #0
 800c31e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4618      	mov	r0, r3
 800c326:	f7ff f847 	bl	800b3b8 <LL_ADC_IsEnabled>
 800c32a:	4603      	mov	r3, r0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d169      	bne.n	800c404 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	689a      	ldr	r2, [r3, #8]
 800c336:	4b36      	ldr	r3, [pc, #216]	@ (800c410 <ADC_Enable+0xfc>)
 800c338:	4013      	ands	r3, r2
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d00d      	beq.n	800c35a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c342:	f043 0210 	orr.w	r2, r3, #16
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c34e:	f043 0201 	orr.w	r2, r3, #1
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800c356:	2301      	movs	r3, #1
 800c358:	e055      	b.n	800c406 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4618      	mov	r0, r3
 800c360:	f7ff f802 	bl	800b368 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800c364:	482b      	ldr	r0, [pc, #172]	@ (800c414 <ADC_Enable+0x100>)
 800c366:	f7fe feb1 	bl	800b0cc <LL_ADC_GetCommonPathInternalCh>
 800c36a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800c36c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800c370:	2b00      	cmp	r3, #0
 800c372:	d013      	beq.n	800c39c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c374:	4b28      	ldr	r3, [pc, #160]	@ (800c418 <ADC_Enable+0x104>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	099b      	lsrs	r3, r3, #6
 800c37a:	4a28      	ldr	r2, [pc, #160]	@ (800c41c <ADC_Enable+0x108>)
 800c37c:	fba2 2303 	umull	r2, r3, r2, r3
 800c380:	099b      	lsrs	r3, r3, #6
 800c382:	1c5a      	adds	r2, r3, #1
 800c384:	4613      	mov	r3, r2
 800c386:	005b      	lsls	r3, r3, #1
 800c388:	4413      	add	r3, r2
 800c38a:	009b      	lsls	r3, r3, #2
 800c38c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800c38e:	e002      	b.n	800c396 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	3b01      	subs	r3, #1
 800c394:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d1f9      	bne.n	800c390 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800c39c:	f7fe fe40 	bl	800b020 <HAL_GetTick>
 800c3a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c3a2:	e028      	b.n	800c3f6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f7ff f805 	bl	800b3b8 <LL_ADC_IsEnabled>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d104      	bne.n	800c3be <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7fe ffd5 	bl	800b368 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c3be:	f7fe fe2f 	bl	800b020 <HAL_GetTick>
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	1ad3      	subs	r3, r2, r3
 800c3c8:	2b02      	cmp	r3, #2
 800c3ca:	d914      	bls.n	800c3f6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f003 0301 	and.w	r3, r3, #1
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	d00d      	beq.n	800c3f6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3de:	f043 0210 	orr.w	r2, r3, #16
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3ea:	f043 0201 	orr.w	r2, r3, #1
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	e007      	b.n	800c406 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f003 0301 	and.w	r3, r3, #1
 800c400:	2b01      	cmp	r3, #1
 800c402:	d1cf      	bne.n	800c3a4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c404:	2300      	movs	r3, #0
}
 800c406:	4618      	mov	r0, r3
 800c408:	3710      	adds	r7, #16
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	8000003f 	.word	0x8000003f
 800c414:	50040300 	.word	0x50040300
 800c418:	20000268 	.word	0x20000268
 800c41c:	053e2d63 	.word	0x053e2d63

0800c420 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7fe ffd6 	bl	800b3de <LL_ADC_IsDisableOngoing>
 800c432:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4618      	mov	r0, r3
 800c43a:	f7fe ffbd 	bl	800b3b8 <LL_ADC_IsEnabled>
 800c43e:	4603      	mov	r3, r0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d047      	beq.n	800c4d4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d144      	bne.n	800c4d4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	689b      	ldr	r3, [r3, #8]
 800c450:	f003 030d 	and.w	r3, r3, #13
 800c454:	2b01      	cmp	r3, #1
 800c456:	d10c      	bne.n	800c472 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7fe ff97 	bl	800b390 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2203      	movs	r2, #3
 800c468:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800c46a:	f7fe fdd9 	bl	800b020 <HAL_GetTick>
 800c46e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c470:	e029      	b.n	800c4c6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c476:	f043 0210 	orr.w	r2, r3, #16
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c482:	f043 0201 	orr.w	r2, r3, #1
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800c48a:	2301      	movs	r3, #1
 800c48c:	e023      	b.n	800c4d6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800c48e:	f7fe fdc7 	bl	800b020 <HAL_GetTick>
 800c492:	4602      	mov	r2, r0
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	1ad3      	subs	r3, r2, r3
 800c498:	2b02      	cmp	r3, #2
 800c49a:	d914      	bls.n	800c4c6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	689b      	ldr	r3, [r3, #8]
 800c4a2:	f003 0301 	and.w	r3, r3, #1
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d00d      	beq.n	800c4c6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4ae:	f043 0210 	orr.w	r2, r3, #16
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4ba:	f043 0201 	orr.w	r2, r3, #1
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e007      	b.n	800c4d6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	689b      	ldr	r3, [r3, #8]
 800c4cc:	f003 0301 	and.w	r3, r3, #1
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d1dc      	bne.n	800c48e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c4d4:	2300      	movs	r3, #0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3710      	adds	r7, #16
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}

0800c4de <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800c4de:	b580      	push	{r7, lr}
 800c4e0:	b084      	sub	sp, #16
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4ea:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4f0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d14b      	bne.n	800c590 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f003 0308 	and.w	r3, r3, #8
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d021      	beq.n	800c556 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	4618      	mov	r0, r3
 800c518:	f7fe fe3b 	bl	800b192 <LL_ADC_REG_IsTriggerSourceSWStart>
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d032      	beq.n	800c588 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	68db      	ldr	r3, [r3, #12]
 800c528:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d12b      	bne.n	800c588 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c534:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c540:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c544:	2b00      	cmp	r3, #0
 800c546:	d11f      	bne.n	800c588 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c54c:	f043 0201 	orr.w	r2, r3, #1
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	655a      	str	r2, [r3, #84]	@ 0x54
 800c554:	e018      	b.n	800c588 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	68db      	ldr	r3, [r3, #12]
 800c55c:	f003 0302 	and.w	r3, r3, #2
 800c560:	2b00      	cmp	r3, #0
 800c562:	d111      	bne.n	800c588 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c568:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c574:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d105      	bne.n	800c588 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c580:	f043 0201 	orr.w	r2, r3, #1
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c588:	68f8      	ldr	r0, [r7, #12]
 800c58a:	f7f6 faab 	bl	8002ae4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c58e:	e00e      	b.n	800c5ae <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c594:	f003 0310 	and.w	r3, r3, #16
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d003      	beq.n	800c5a4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800c59c:	68f8      	ldr	r0, [r7, #12]
 800c59e:	f7ff fa00 	bl	800b9a2 <HAL_ADC_ErrorCallback>
}
 800c5a2:	e004      	b.n	800c5ae <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c5a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	4798      	blx	r3
}
 800c5ae:	bf00      	nop
 800c5b0:	3710      	adds	r7, #16
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}

0800c5b6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800c5b6:	b580      	push	{r7, lr}
 800c5b8:	b084      	sub	sp, #16
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5c2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c5c4:	68f8      	ldr	r0, [r7, #12]
 800c5c6:	f7f6 fa71 	bl	8002aac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c5ca:	bf00      	nop
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b084      	sub	sp, #16
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5de:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5e4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5f0:	f043 0204 	orr.w	r2, r3, #4
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c5f8:	68f8      	ldr	r0, [r7, #12]
 800c5fa:	f7ff f9d2 	bl	800b9a2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c5fe:	bf00      	nop
 800c600:	3710      	adds	r7, #16
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}

0800c606 <LL_ADC_IsEnabled>:
{
 800c606:	b480      	push	{r7}
 800c608:	b083      	sub	sp, #12
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	689b      	ldr	r3, [r3, #8]
 800c612:	f003 0301 	and.w	r3, r3, #1
 800c616:	2b01      	cmp	r3, #1
 800c618:	d101      	bne.n	800c61e <LL_ADC_IsEnabled+0x18>
 800c61a:	2301      	movs	r3, #1
 800c61c:	e000      	b.n	800c620 <LL_ADC_IsEnabled+0x1a>
 800c61e:	2300      	movs	r3, #0
}
 800c620:	4618      	mov	r0, r3
 800c622:	370c      	adds	r7, #12
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr

0800c62c <LL_ADC_REG_IsConversionOngoing>:
{
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	689b      	ldr	r3, [r3, #8]
 800c638:	f003 0304 	and.w	r3, r3, #4
 800c63c:	2b04      	cmp	r3, #4
 800c63e:	d101      	bne.n	800c644 <LL_ADC_REG_IsConversionOngoing+0x18>
 800c640:	2301      	movs	r3, #1
 800c642:	e000      	b.n	800c646 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800c644:	2300      	movs	r3, #0
}
 800c646:	4618      	mov	r0, r3
 800c648:	370c      	adds	r7, #12
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr
	...

0800c654 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800c654:	b590      	push	{r4, r7, lr}
 800c656:	b09f      	sub	sp, #124	@ 0x7c
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c65e:	2300      	movs	r3, #0
 800c660:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d101      	bne.n	800c672 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800c66e:	2302      	movs	r3, #2
 800c670:	e093      	b.n	800c79a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2201      	movs	r2, #1
 800c676:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800c67a:	2300      	movs	r3, #0
 800c67c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800c67e:	2300      	movs	r3, #0
 800c680:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	4a47      	ldr	r2, [pc, #284]	@ (800c7a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d102      	bne.n	800c692 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800c68c:	4b46      	ldr	r3, [pc, #280]	@ (800c7a8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c68e:	60bb      	str	r3, [r7, #8]
 800c690:	e001      	b.n	800c696 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800c692:	2300      	movs	r3, #0
 800c694:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d10b      	bne.n	800c6b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6a0:	f043 0220 	orr.w	r2, r3, #32
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	e072      	b.n	800c79a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7ff ffb8 	bl	800c62c <LL_ADC_REG_IsConversionOngoing>
 800c6bc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7ff ffb2 	bl	800c62c <LL_ADC_REG_IsConversionOngoing>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d154      	bne.n	800c778 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800c6ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d151      	bne.n	800c778 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800c6d4:	4b35      	ldr	r3, [pc, #212]	@ (800c7ac <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800c6d6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d02c      	beq.n	800c73a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800c6e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c6e2:	689b      	ldr	r3, [r3, #8]
 800c6e4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	6859      	ldr	r1, [r3, #4]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c6f2:	035b      	lsls	r3, r3, #13
 800c6f4:	430b      	orrs	r3, r1
 800c6f6:	431a      	orrs	r2, r3
 800c6f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c6fa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c6fc:	4829      	ldr	r0, [pc, #164]	@ (800c7a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c6fe:	f7ff ff82 	bl	800c606 <LL_ADC_IsEnabled>
 800c702:	4604      	mov	r4, r0
 800c704:	4828      	ldr	r0, [pc, #160]	@ (800c7a8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c706:	f7ff ff7e 	bl	800c606 <LL_ADC_IsEnabled>
 800c70a:	4603      	mov	r3, r0
 800c70c:	431c      	orrs	r4, r3
 800c70e:	4828      	ldr	r0, [pc, #160]	@ (800c7b0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800c710:	f7ff ff79 	bl	800c606 <LL_ADC_IsEnabled>
 800c714:	4603      	mov	r3, r0
 800c716:	4323      	orrs	r3, r4
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d137      	bne.n	800c78c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800c71c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c724:	f023 030f 	bic.w	r3, r3, #15
 800c728:	683a      	ldr	r2, [r7, #0]
 800c72a:	6811      	ldr	r1, [r2, #0]
 800c72c:	683a      	ldr	r2, [r7, #0]
 800c72e:	6892      	ldr	r2, [r2, #8]
 800c730:	430a      	orrs	r2, r1
 800c732:	431a      	orrs	r2, r3
 800c734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c736:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c738:	e028      	b.n	800c78c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800c73a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c73c:	689b      	ldr	r3, [r3, #8]
 800c73e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c742:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c744:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c746:	4817      	ldr	r0, [pc, #92]	@ (800c7a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c748:	f7ff ff5d 	bl	800c606 <LL_ADC_IsEnabled>
 800c74c:	4604      	mov	r4, r0
 800c74e:	4816      	ldr	r0, [pc, #88]	@ (800c7a8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c750:	f7ff ff59 	bl	800c606 <LL_ADC_IsEnabled>
 800c754:	4603      	mov	r3, r0
 800c756:	431c      	orrs	r4, r3
 800c758:	4815      	ldr	r0, [pc, #84]	@ (800c7b0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800c75a:	f7ff ff54 	bl	800c606 <LL_ADC_IsEnabled>
 800c75e:	4603      	mov	r3, r0
 800c760:	4323      	orrs	r3, r4
 800c762:	2b00      	cmp	r3, #0
 800c764:	d112      	bne.n	800c78c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800c766:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c768:	689b      	ldr	r3, [r3, #8]
 800c76a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c76e:	f023 030f 	bic.w	r3, r3, #15
 800c772:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c774:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c776:	e009      	b.n	800c78c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c77c:	f043 0220 	orr.w	r2, r3, #32
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800c784:	2301      	movs	r3, #1
 800c786:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800c78a:	e000      	b.n	800c78e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c78c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2200      	movs	r2, #0
 800c792:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800c796:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	377c      	adds	r7, #124	@ 0x7c
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd90      	pop	{r4, r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	50040000 	.word	0x50040000
 800c7a8:	50040100 	.word	0x50040100
 800c7ac:	50040300 	.word	0x50040300
 800c7b0:	50040200 	.word	0x50040200

0800c7b4 <__NVIC_SetPriorityGrouping>:
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b085      	sub	sp, #20
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f003 0307 	and.w	r3, r3, #7
 800c7c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c7c4:	4b0c      	ldr	r3, [pc, #48]	@ (800c7f8 <__NVIC_SetPriorityGrouping+0x44>)
 800c7c6:	68db      	ldr	r3, [r3, #12]
 800c7c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c7ca:	68ba      	ldr	r2, [r7, #8]
 800c7cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c7d0:	4013      	ands	r3, r2
 800c7d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c7dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c7e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c7e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c7e6:	4a04      	ldr	r2, [pc, #16]	@ (800c7f8 <__NVIC_SetPriorityGrouping+0x44>)
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	60d3      	str	r3, [r2, #12]
}
 800c7ec:	bf00      	nop
 800c7ee:	3714      	adds	r7, #20
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr
 800c7f8:	e000ed00 	.word	0xe000ed00

0800c7fc <__NVIC_GetPriorityGrouping>:
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c800:	4b04      	ldr	r3, [pc, #16]	@ (800c814 <__NVIC_GetPriorityGrouping+0x18>)
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	0a1b      	lsrs	r3, r3, #8
 800c806:	f003 0307 	and.w	r3, r3, #7
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	46bd      	mov	sp, r7
 800c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c812:	4770      	bx	lr
 800c814:	e000ed00 	.word	0xe000ed00

0800c818 <__NVIC_EnableIRQ>:
{
 800c818:	b480      	push	{r7}
 800c81a:	b083      	sub	sp, #12
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	4603      	mov	r3, r0
 800c820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c826:	2b00      	cmp	r3, #0
 800c828:	db0b      	blt.n	800c842 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c82a:	79fb      	ldrb	r3, [r7, #7]
 800c82c:	f003 021f 	and.w	r2, r3, #31
 800c830:	4907      	ldr	r1, [pc, #28]	@ (800c850 <__NVIC_EnableIRQ+0x38>)
 800c832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c836:	095b      	lsrs	r3, r3, #5
 800c838:	2001      	movs	r0, #1
 800c83a:	fa00 f202 	lsl.w	r2, r0, r2
 800c83e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c842:	bf00      	nop
 800c844:	370c      	adds	r7, #12
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop
 800c850:	e000e100 	.word	0xe000e100

0800c854 <__NVIC_SetPriority>:
{
 800c854:	b480      	push	{r7}
 800c856:	b083      	sub	sp, #12
 800c858:	af00      	add	r7, sp, #0
 800c85a:	4603      	mov	r3, r0
 800c85c:	6039      	str	r1, [r7, #0]
 800c85e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c864:	2b00      	cmp	r3, #0
 800c866:	db0a      	blt.n	800c87e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	b2da      	uxtb	r2, r3
 800c86c:	490c      	ldr	r1, [pc, #48]	@ (800c8a0 <__NVIC_SetPriority+0x4c>)
 800c86e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c872:	0112      	lsls	r2, r2, #4
 800c874:	b2d2      	uxtb	r2, r2
 800c876:	440b      	add	r3, r1
 800c878:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c87c:	e00a      	b.n	800c894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	b2da      	uxtb	r2, r3
 800c882:	4908      	ldr	r1, [pc, #32]	@ (800c8a4 <__NVIC_SetPriority+0x50>)
 800c884:	79fb      	ldrb	r3, [r7, #7]
 800c886:	f003 030f 	and.w	r3, r3, #15
 800c88a:	3b04      	subs	r3, #4
 800c88c:	0112      	lsls	r2, r2, #4
 800c88e:	b2d2      	uxtb	r2, r2
 800c890:	440b      	add	r3, r1
 800c892:	761a      	strb	r2, [r3, #24]
}
 800c894:	bf00      	nop
 800c896:	370c      	adds	r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr
 800c8a0:	e000e100 	.word	0xe000e100
 800c8a4:	e000ed00 	.word	0xe000ed00

0800c8a8 <NVIC_EncodePriority>:
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b089      	sub	sp, #36	@ 0x24
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f003 0307 	and.w	r3, r3, #7
 800c8ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c8bc:	69fb      	ldr	r3, [r7, #28]
 800c8be:	f1c3 0307 	rsb	r3, r3, #7
 800c8c2:	2b04      	cmp	r3, #4
 800c8c4:	bf28      	it	cs
 800c8c6:	2304      	movcs	r3, #4
 800c8c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c8ca:	69fb      	ldr	r3, [r7, #28]
 800c8cc:	3304      	adds	r3, #4
 800c8ce:	2b06      	cmp	r3, #6
 800c8d0:	d902      	bls.n	800c8d8 <NVIC_EncodePriority+0x30>
 800c8d2:	69fb      	ldr	r3, [r7, #28]
 800c8d4:	3b03      	subs	r3, #3
 800c8d6:	e000      	b.n	800c8da <NVIC_EncodePriority+0x32>
 800c8d8:	2300      	movs	r3, #0
 800c8da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c8dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c8e0:	69bb      	ldr	r3, [r7, #24]
 800c8e2:	fa02 f303 	lsl.w	r3, r2, r3
 800c8e6:	43da      	mvns	r2, r3
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	401a      	ands	r2, r3
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c8f0:	f04f 31ff 	mov.w	r1, #4294967295
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	fa01 f303 	lsl.w	r3, r1, r3
 800c8fa:	43d9      	mvns	r1, r3
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c900:	4313      	orrs	r3, r2
}
 800c902:	4618      	mov	r0, r3
 800c904:	3724      	adds	r7, #36	@ 0x24
 800c906:	46bd      	mov	sp, r7
 800c908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90c:	4770      	bx	lr
	...

0800c910 <__NVIC_SystemReset>:
{
 800c910:	b480      	push	{r7}
 800c912:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800c914:	f3bf 8f4f 	dsb	sy
}
 800c918:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800c91a:	4b06      	ldr	r3, [pc, #24]	@ (800c934 <__NVIC_SystemReset+0x24>)
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800c922:	4904      	ldr	r1, [pc, #16]	@ (800c934 <__NVIC_SystemReset+0x24>)
 800c924:	4b04      	ldr	r3, [pc, #16]	@ (800c938 <__NVIC_SystemReset+0x28>)
 800c926:	4313      	orrs	r3, r2
 800c928:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c92a:	f3bf 8f4f 	dsb	sy
}
 800c92e:	bf00      	nop
    __NOP();
 800c930:	bf00      	nop
 800c932:	e7fd      	b.n	800c930 <__NVIC_SystemReset+0x20>
 800c934:	e000ed00 	.word	0xe000ed00
 800c938:	05fa0004 	.word	0x05fa0004

0800c93c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	3b01      	subs	r3, #1
 800c948:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c94c:	d301      	bcc.n	800c952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c94e:	2301      	movs	r3, #1
 800c950:	e00f      	b.n	800c972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c952:	4a0a      	ldr	r2, [pc, #40]	@ (800c97c <SysTick_Config+0x40>)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	3b01      	subs	r3, #1
 800c958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c95a:	210f      	movs	r1, #15
 800c95c:	f04f 30ff 	mov.w	r0, #4294967295
 800c960:	f7ff ff78 	bl	800c854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c964:	4b05      	ldr	r3, [pc, #20]	@ (800c97c <SysTick_Config+0x40>)
 800c966:	2200      	movs	r2, #0
 800c968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c96a:	4b04      	ldr	r3, [pc, #16]	@ (800c97c <SysTick_Config+0x40>)
 800c96c:	2207      	movs	r2, #7
 800c96e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c970:	2300      	movs	r3, #0
}
 800c972:	4618      	mov	r0, r3
 800c974:	3708      	adds	r7, #8
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	e000e010 	.word	0xe000e010

0800c980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f7ff ff13 	bl	800c7b4 <__NVIC_SetPriorityGrouping>
}
 800c98e:	bf00      	nop
 800c990:	3708      	adds	r7, #8
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}

0800c996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c996:	b580      	push	{r7, lr}
 800c998:	b086      	sub	sp, #24
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	4603      	mov	r3, r0
 800c99e:	60b9      	str	r1, [r7, #8]
 800c9a0:	607a      	str	r2, [r7, #4]
 800c9a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c9a8:	f7ff ff28 	bl	800c7fc <__NVIC_GetPriorityGrouping>
 800c9ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	68b9      	ldr	r1, [r7, #8]
 800c9b2:	6978      	ldr	r0, [r7, #20]
 800c9b4:	f7ff ff78 	bl	800c8a8 <NVIC_EncodePriority>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9be:	4611      	mov	r1, r2
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f7ff ff47 	bl	800c854 <__NVIC_SetPriority>
}
 800c9c6:	bf00      	nop
 800c9c8:	3718      	adds	r7, #24
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}

0800c9ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c9ce:	b580      	push	{r7, lr}
 800c9d0:	b082      	sub	sp, #8
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c9d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f7ff ff1b 	bl	800c818 <__NVIC_EnableIRQ>
}
 800c9e2:	bf00      	nop
 800c9e4:	3708      	adds	r7, #8
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800c9ee:	f7ff ff8f 	bl	800c910 <__NVIC_SystemReset>

0800c9f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c9f2:	b580      	push	{r7, lr}
 800c9f4:	b082      	sub	sp, #8
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f7ff ff9e 	bl	800c93c <SysTick_Config>
 800ca00:	4603      	mov	r3, r0
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3708      	adds	r7, #8
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
	...

0800ca0c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d101      	bne.n	800ca1e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	e054      	b.n	800cac8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	7f5b      	ldrb	r3, [r3, #29]
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d105      	bne.n	800ca34 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f7fa fdb2 	bl	8007598 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2202      	movs	r2, #2
 800ca38:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	791b      	ldrb	r3, [r3, #4]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d10c      	bne.n	800ca5c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4a22      	ldr	r2, [pc, #136]	@ (800cad0 <HAL_CRC_Init+0xc4>)
 800ca48:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	689a      	ldr	r2, [r3, #8]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f022 0218 	bic.w	r2, r2, #24
 800ca58:	609a      	str	r2, [r3, #8]
 800ca5a:	e00c      	b.n	800ca76 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6899      	ldr	r1, [r3, #8]
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	68db      	ldr	r3, [r3, #12]
 800ca64:	461a      	mov	r2, r3
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f000 f942 	bl	800ccf0 <HAL_CRCEx_Polynomial_Set>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d001      	beq.n	800ca76 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800ca72:	2301      	movs	r3, #1
 800ca74:	e028      	b.n	800cac8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	795b      	ldrb	r3, [r3, #5]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d105      	bne.n	800ca8a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f04f 32ff 	mov.w	r2, #4294967295
 800ca86:	611a      	str	r2, [r3, #16]
 800ca88:	e004      	b.n	800ca94 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	6912      	ldr	r2, [r2, #16]
 800ca92:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	689b      	ldr	r3, [r3, #8]
 800ca9a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	695a      	ldr	r2, [r3, #20]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	430a      	orrs	r2, r1
 800caa8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	689b      	ldr	r3, [r3, #8]
 800cab0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	699a      	ldr	r2, [r3, #24]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	430a      	orrs	r2, r1
 800cabe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2201      	movs	r2, #1
 800cac4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800cac6:	2300      	movs	r3, #0
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3708      	adds	r7, #8
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	04c11db7 	.word	0x04c11db7

0800cad4 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b086      	sub	sp, #24
 800cad8:	af00      	add	r7, sp, #0
 800cada:	60f8      	str	r0, [r7, #12]
 800cadc:	60b9      	str	r1, [r7, #8]
 800cade:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800cae0:	2300      	movs	r3, #0
 800cae2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2202      	movs	r2, #2
 800cae8:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	6a1b      	ldr	r3, [r3, #32]
 800caee:	2b03      	cmp	r3, #3
 800caf0:	d006      	beq.n	800cb00 <HAL_CRC_Accumulate+0x2c>
 800caf2:	2b03      	cmp	r3, #3
 800caf4:	d829      	bhi.n	800cb4a <HAL_CRC_Accumulate+0x76>
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	d019      	beq.n	800cb2e <HAL_CRC_Accumulate+0x5a>
 800cafa:	2b02      	cmp	r3, #2
 800cafc:	d01e      	beq.n	800cb3c <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 800cafe:	e024      	b.n	800cb4a <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 800cb00:	2300      	movs	r3, #0
 800cb02:	617b      	str	r3, [r7, #20]
 800cb04:	e00a      	b.n	800cb1c <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	68ba      	ldr	r2, [r7, #8]
 800cb0c:	441a      	add	r2, r3
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	6812      	ldr	r2, [r2, #0]
 800cb14:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	3301      	adds	r3, #1
 800cb1a:	617b      	str	r3, [r7, #20]
 800cb1c:	697a      	ldr	r2, [r7, #20]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d3f0      	bcc.n	800cb06 <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	613b      	str	r3, [r7, #16]
      break;
 800cb2c:	e00e      	b.n	800cb4c <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	68b9      	ldr	r1, [r7, #8]
 800cb32:	68f8      	ldr	r0, [r7, #12]
 800cb34:	f000 f812 	bl	800cb5c <CRC_Handle_8>
 800cb38:	6138      	str	r0, [r7, #16]
      break;
 800cb3a:	e007      	b.n	800cb4c <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	68b9      	ldr	r1, [r7, #8]
 800cb40:	68f8      	ldr	r0, [r7, #12]
 800cb42:	f000 f89b 	bl	800cc7c <CRC_Handle_16>
 800cb46:	6138      	str	r0, [r7, #16]
      break;
 800cb48:	e000      	b.n	800cb4c <HAL_CRC_Accumulate+0x78>
      break;
 800cb4a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2201      	movs	r2, #1
 800cb50:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800cb52:	693b      	ldr	r3, [r7, #16]
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3718      	adds	r7, #24
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}

0800cb5c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b089      	sub	sp, #36	@ 0x24
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	60f8      	str	r0, [r7, #12]
 800cb64:	60b9      	str	r1, [r7, #8]
 800cb66:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800cb68:	2300      	movs	r3, #0
 800cb6a:	61fb      	str	r3, [r7, #28]
 800cb6c:	e023      	b.n	800cbb6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800cb6e:	69fb      	ldr	r3, [r7, #28]
 800cb70:	009b      	lsls	r3, r3, #2
 800cb72:	68ba      	ldr	r2, [r7, #8]
 800cb74:	4413      	add	r3, r2
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800cb7a:	69fb      	ldr	r3, [r7, #28]
 800cb7c:	009b      	lsls	r3, r3, #2
 800cb7e:	3301      	adds	r3, #1
 800cb80:	68b9      	ldr	r1, [r7, #8]
 800cb82:	440b      	add	r3, r1
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800cb88:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800cb8a:	69fb      	ldr	r3, [r7, #28]
 800cb8c:	009b      	lsls	r3, r3, #2
 800cb8e:	3302      	adds	r3, #2
 800cb90:	68b9      	ldr	r1, [r7, #8]
 800cb92:	440b      	add	r3, r1
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800cb98:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800cb9a:	69fb      	ldr	r3, [r7, #28]
 800cb9c:	009b      	lsls	r3, r3, #2
 800cb9e:	3303      	adds	r3, #3
 800cba0:	68b9      	ldr	r1, [r7, #8]
 800cba2:	440b      	add	r3, r1
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800cbac:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800cbae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800cbb0:	69fb      	ldr	r3, [r7, #28]
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	61fb      	str	r3, [r7, #28]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	089b      	lsrs	r3, r3, #2
 800cbba:	69fa      	ldr	r2, [r7, #28]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d3d6      	bcc.n	800cb6e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f003 0303 	and.w	r3, r3, #3
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d04f      	beq.n	800cc6a <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f003 0303 	and.w	r3, r3, #3
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	d107      	bne.n	800cbe4 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800cbd4:	69fb      	ldr	r3, [r7, #28]
 800cbd6:	009b      	lsls	r3, r3, #2
 800cbd8:	68ba      	ldr	r2, [r7, #8]
 800cbda:	4413      	add	r3, r2
 800cbdc:	68fa      	ldr	r2, [r7, #12]
 800cbde:	6812      	ldr	r2, [r2, #0]
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f003 0303 	and.w	r3, r3, #3
 800cbea:	2b02      	cmp	r3, #2
 800cbec:	d117      	bne.n	800cc1e <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800cbee:	69fb      	ldr	r3, [r7, #28]
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	68ba      	ldr	r2, [r7, #8]
 800cbf4:	4413      	add	r3, r2
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	b21b      	sxth	r3, r3
 800cbfa:	021b      	lsls	r3, r3, #8
 800cbfc:	b21a      	sxth	r2, r3
 800cbfe:	69fb      	ldr	r3, [r7, #28]
 800cc00:	009b      	lsls	r3, r3, #2
 800cc02:	3301      	adds	r3, #1
 800cc04:	68b9      	ldr	r1, [r7, #8]
 800cc06:	440b      	add	r3, r1
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	b21b      	sxth	r3, r3
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	b21b      	sxth	r3, r3
 800cc10:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	8b7a      	ldrh	r2, [r7, #26]
 800cc1c:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f003 0303 	and.w	r3, r3, #3
 800cc24:	2b03      	cmp	r3, #3
 800cc26:	d120      	bne.n	800cc6a <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800cc28:	69fb      	ldr	r3, [r7, #28]
 800cc2a:	009b      	lsls	r3, r3, #2
 800cc2c:	68ba      	ldr	r2, [r7, #8]
 800cc2e:	4413      	add	r3, r2
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	b21b      	sxth	r3, r3
 800cc34:	021b      	lsls	r3, r3, #8
 800cc36:	b21a      	sxth	r2, r3
 800cc38:	69fb      	ldr	r3, [r7, #28]
 800cc3a:	009b      	lsls	r3, r3, #2
 800cc3c:	3301      	adds	r3, #1
 800cc3e:	68b9      	ldr	r1, [r7, #8]
 800cc40:	440b      	add	r3, r1
 800cc42:	781b      	ldrb	r3, [r3, #0]
 800cc44:	b21b      	sxth	r3, r3
 800cc46:	4313      	orrs	r3, r2
 800cc48:	b21b      	sxth	r3, r3
 800cc4a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	8b7a      	ldrh	r2, [r7, #26]
 800cc56:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800cc58:	69fb      	ldr	r3, [r7, #28]
 800cc5a:	009b      	lsls	r3, r3, #2
 800cc5c:	3302      	adds	r3, #2
 800cc5e:	68ba      	ldr	r2, [r7, #8]
 800cc60:	4413      	add	r3, r2
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	6812      	ldr	r2, [r2, #0]
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	681b      	ldr	r3, [r3, #0]
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3724      	adds	r7, #36	@ 0x24
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr

0800cc7c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b087      	sub	sp, #28
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800cc88:	2300      	movs	r3, #0
 800cc8a:	617b      	str	r3, [r7, #20]
 800cc8c:	e013      	b.n	800ccb6 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	68ba      	ldr	r2, [r7, #8]
 800cc94:	4413      	add	r3, r2
 800cc96:	881b      	ldrh	r3, [r3, #0]
 800cc98:	041a      	lsls	r2, r3, #16
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	3302      	adds	r3, #2
 800cca0:	68b9      	ldr	r1, [r7, #8]
 800cca2:	440b      	add	r3, r1
 800cca4:	881b      	ldrh	r3, [r3, #0]
 800cca6:	4619      	mov	r1, r3
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	430a      	orrs	r2, r1
 800ccae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	617b      	str	r3, [r7, #20]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	085b      	lsrs	r3, r3, #1
 800ccba:	697a      	ldr	r2, [r7, #20]
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d3e6      	bcc.n	800cc8e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f003 0301 	and.w	r3, r3, #1
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d009      	beq.n	800ccde <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	009b      	lsls	r3, r3, #2
 800ccd4:	68ba      	ldr	r2, [r7, #8]
 800ccd6:	4413      	add	r3, r2
 800ccd8:	881a      	ldrh	r2, [r3, #0]
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	681b      	ldr	r3, [r3, #0]
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	371c      	adds	r7, #28
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr

0800ccf0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b087      	sub	sp, #28
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	60f8      	str	r0, [r7, #12]
 800ccf8:	60b9      	str	r1, [r7, #8]
 800ccfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800cd00:	231f      	movs	r3, #31
 800cd02:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	f003 0301 	and.w	r3, r3, #1
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d102      	bne.n	800cd14 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800cd0e:	2301      	movs	r3, #1
 800cd10:	75fb      	strb	r3, [r7, #23]
 800cd12:	e063      	b.n	800cddc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800cd14:	bf00      	nop
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	1e5a      	subs	r2, r3, #1
 800cd1a:	613a      	str	r2, [r7, #16]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d009      	beq.n	800cd34 <HAL_CRCEx_Polynomial_Set+0x44>
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	f003 031f 	and.w	r3, r3, #31
 800cd26:	68ba      	ldr	r2, [r7, #8]
 800cd28:	fa22 f303 	lsr.w	r3, r2, r3
 800cd2c:	f003 0301 	and.w	r3, r3, #1
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d0f0      	beq.n	800cd16 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2b18      	cmp	r3, #24
 800cd38:	d846      	bhi.n	800cdc8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800cd3a:	a201      	add	r2, pc, #4	@ (adr r2, 800cd40 <HAL_CRCEx_Polynomial_Set+0x50>)
 800cd3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd40:	0800cdcf 	.word	0x0800cdcf
 800cd44:	0800cdc9 	.word	0x0800cdc9
 800cd48:	0800cdc9 	.word	0x0800cdc9
 800cd4c:	0800cdc9 	.word	0x0800cdc9
 800cd50:	0800cdc9 	.word	0x0800cdc9
 800cd54:	0800cdc9 	.word	0x0800cdc9
 800cd58:	0800cdc9 	.word	0x0800cdc9
 800cd5c:	0800cdc9 	.word	0x0800cdc9
 800cd60:	0800cdbd 	.word	0x0800cdbd
 800cd64:	0800cdc9 	.word	0x0800cdc9
 800cd68:	0800cdc9 	.word	0x0800cdc9
 800cd6c:	0800cdc9 	.word	0x0800cdc9
 800cd70:	0800cdc9 	.word	0x0800cdc9
 800cd74:	0800cdc9 	.word	0x0800cdc9
 800cd78:	0800cdc9 	.word	0x0800cdc9
 800cd7c:	0800cdc9 	.word	0x0800cdc9
 800cd80:	0800cdb1 	.word	0x0800cdb1
 800cd84:	0800cdc9 	.word	0x0800cdc9
 800cd88:	0800cdc9 	.word	0x0800cdc9
 800cd8c:	0800cdc9 	.word	0x0800cdc9
 800cd90:	0800cdc9 	.word	0x0800cdc9
 800cd94:	0800cdc9 	.word	0x0800cdc9
 800cd98:	0800cdc9 	.word	0x0800cdc9
 800cd9c:	0800cdc9 	.word	0x0800cdc9
 800cda0:	0800cda5 	.word	0x0800cda5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	2b06      	cmp	r3, #6
 800cda8:	d913      	bls.n	800cdd2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800cdae:	e010      	b.n	800cdd2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	2b07      	cmp	r3, #7
 800cdb4:	d90f      	bls.n	800cdd6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800cdba:	e00c      	b.n	800cdd6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	2b0f      	cmp	r3, #15
 800cdc0:	d90b      	bls.n	800cdda <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800cdc6:	e008      	b.n	800cdda <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800cdc8:	2301      	movs	r3, #1
 800cdca:	75fb      	strb	r3, [r7, #23]
        break;
 800cdcc:	e006      	b.n	800cddc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800cdce:	bf00      	nop
 800cdd0:	e004      	b.n	800cddc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800cdd2:	bf00      	nop
 800cdd4:	e002      	b.n	800cddc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800cdd6:	bf00      	nop
 800cdd8:	e000      	b.n	800cddc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800cdda:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800cddc:	7dfb      	ldrb	r3, [r7, #23]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d10d      	bne.n	800cdfe <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	68ba      	ldr	r2, [r7, #8]
 800cde8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	689b      	ldr	r3, [r3, #8]
 800cdf0:	f023 0118 	bic.w	r1, r3, #24
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	687a      	ldr	r2, [r7, #4]
 800cdfa:	430a      	orrs	r2, r1
 800cdfc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800cdfe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	371c      	adds	r7, #28
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <HAL_CRCEx_Input_Data_Reverse>:
  *          @arg @ref CRC_INPUTDATA_INVERSION_HALFWORD HalfWord-wise bit reversal
  *          @arg @ref CRC_INPUTDATA_INVERSION_WORD     Word-wise bit reversal
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Input_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t InputReverseMode)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b083      	sub	sp, #12
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(InputReverseMode));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2202      	movs	r2, #2
 800ce1a:	775a      	strb	r2, [r3, #29]

  /* set input data inversion mode */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, InputReverseMode);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	689b      	ldr	r3, [r3, #8]
 800ce22:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	683a      	ldr	r2, [r7, #0]
 800ce2c:	430a      	orrs	r2, r1
 800ce2e:	609a      	str	r2, [r3, #8]
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2201      	movs	r2, #1
 800ce34:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800ce36:	2300      	movs	r3, #0
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	370c      	adds	r7, #12
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce42:	4770      	bx	lr

0800ce44 <HAL_CRCEx_Output_Data_Reverse>:
  *          @arg @ref CRC_OUTPUTDATA_INVERSION_DISABLE no CRC inversion (default value)
  *          @arg @ref CRC_OUTPUTDATA_INVERSION_ENABLE  bit-level inversion (e.g. for a 8-bit CRC: 0xB5 becomes 0xAD)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Output_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t OutputReverseMode)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b083      	sub	sp, #12
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(OutputReverseMode));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2202      	movs	r2, #2
 800ce52:	775a      	strb	r2, [r3, #29]

  /* set output data inversion mode */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, OutputReverseMode);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	689b      	ldr	r3, [r3, #8]
 800ce5a:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	683a      	ldr	r2, [r7, #0]
 800ce64:	430a      	orrs	r2, r1
 800ce66:	609a      	str	r2, [r3, #8]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800ce6e:	2300      	movs	r3, #0
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	370c      	adds	r7, #12
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr

0800ce7c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b085      	sub	sp, #20
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d101      	bne.n	800ce8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	e098      	b.n	800cfc0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	461a      	mov	r2, r3
 800ce94:	4b4d      	ldr	r3, [pc, #308]	@ (800cfcc <HAL_DMA_Init+0x150>)
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d80f      	bhi.n	800ceba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	461a      	mov	r2, r3
 800cea0:	4b4b      	ldr	r3, [pc, #300]	@ (800cfd0 <HAL_DMA_Init+0x154>)
 800cea2:	4413      	add	r3, r2
 800cea4:	4a4b      	ldr	r2, [pc, #300]	@ (800cfd4 <HAL_DMA_Init+0x158>)
 800cea6:	fba2 2303 	umull	r2, r3, r2, r3
 800ceaa:	091b      	lsrs	r3, r3, #4
 800ceac:	009a      	lsls	r2, r3, #2
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	4a48      	ldr	r2, [pc, #288]	@ (800cfd8 <HAL_DMA_Init+0x15c>)
 800ceb6:	641a      	str	r2, [r3, #64]	@ 0x40
 800ceb8:	e00e      	b.n	800ced8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	461a      	mov	r2, r3
 800cec0:	4b46      	ldr	r3, [pc, #280]	@ (800cfdc <HAL_DMA_Init+0x160>)
 800cec2:	4413      	add	r3, r2
 800cec4:	4a43      	ldr	r2, [pc, #268]	@ (800cfd4 <HAL_DMA_Init+0x158>)
 800cec6:	fba2 2303 	umull	r2, r3, r2, r3
 800ceca:	091b      	lsrs	r3, r3, #4
 800cecc:	009a      	lsls	r2, r3, #2
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	4a42      	ldr	r2, [pc, #264]	@ (800cfe0 <HAL_DMA_Init+0x164>)
 800ced6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2202      	movs	r2, #2
 800cedc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800ceee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cef2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800cefc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	691b      	ldr	r3, [r3, #16]
 800cf02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cf08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	699b      	ldr	r3, [r3, #24]
 800cf0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cf14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6a1b      	ldr	r3, [r3, #32]
 800cf1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800cf1c:	68fa      	ldr	r2, [r7, #12]
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	68fa      	ldr	r2, [r7, #12]
 800cf28:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	689b      	ldr	r3, [r3, #8]
 800cf2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cf32:	d039      	beq.n	800cfa8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf38:	4a27      	ldr	r2, [pc, #156]	@ (800cfd8 <HAL_DMA_Init+0x15c>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d11a      	bne.n	800cf74 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800cf3e:	4b29      	ldr	r3, [pc, #164]	@ (800cfe4 <HAL_DMA_Init+0x168>)
 800cf40:	681a      	ldr	r2, [r3, #0]
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf46:	f003 031c 	and.w	r3, r3, #28
 800cf4a:	210f      	movs	r1, #15
 800cf4c:	fa01 f303 	lsl.w	r3, r1, r3
 800cf50:	43db      	mvns	r3, r3
 800cf52:	4924      	ldr	r1, [pc, #144]	@ (800cfe4 <HAL_DMA_Init+0x168>)
 800cf54:	4013      	ands	r3, r2
 800cf56:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800cf58:	4b22      	ldr	r3, [pc, #136]	@ (800cfe4 <HAL_DMA_Init+0x168>)
 800cf5a:	681a      	ldr	r2, [r3, #0]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6859      	ldr	r1, [r3, #4]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf64:	f003 031c 	and.w	r3, r3, #28
 800cf68:	fa01 f303 	lsl.w	r3, r1, r3
 800cf6c:	491d      	ldr	r1, [pc, #116]	@ (800cfe4 <HAL_DMA_Init+0x168>)
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	600b      	str	r3, [r1, #0]
 800cf72:	e019      	b.n	800cfa8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800cf74:	4b1c      	ldr	r3, [pc, #112]	@ (800cfe8 <HAL_DMA_Init+0x16c>)
 800cf76:	681a      	ldr	r2, [r3, #0]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf7c:	f003 031c 	and.w	r3, r3, #28
 800cf80:	210f      	movs	r1, #15
 800cf82:	fa01 f303 	lsl.w	r3, r1, r3
 800cf86:	43db      	mvns	r3, r3
 800cf88:	4917      	ldr	r1, [pc, #92]	@ (800cfe8 <HAL_DMA_Init+0x16c>)
 800cf8a:	4013      	ands	r3, r2
 800cf8c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800cf8e:	4b16      	ldr	r3, [pc, #88]	@ (800cfe8 <HAL_DMA_Init+0x16c>)
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6859      	ldr	r1, [r3, #4]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf9a:	f003 031c 	and.w	r3, r3, #28
 800cf9e:	fa01 f303 	lsl.w	r3, r1, r3
 800cfa2:	4911      	ldr	r1, [pc, #68]	@ (800cfe8 <HAL_DMA_Init+0x16c>)
 800cfa4:	4313      	orrs	r3, r2
 800cfa6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2201      	movs	r2, #1
 800cfb2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800cfbe:	2300      	movs	r3, #0
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3714      	adds	r7, #20
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr
 800cfcc:	40020407 	.word	0x40020407
 800cfd0:	bffdfff8 	.word	0xbffdfff8
 800cfd4:	cccccccd 	.word	0xcccccccd
 800cfd8:	40020000 	.word	0x40020000
 800cfdc:	bffdfbf8 	.word	0xbffdfbf8
 800cfe0:	40020400 	.word	0x40020400
 800cfe4:	400200a8 	.word	0x400200a8
 800cfe8:	400204a8 	.word	0x400204a8

0800cfec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b086      	sub	sp, #24
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	60f8      	str	r0, [r7, #12]
 800cff4:	60b9      	str	r1, [r7, #8]
 800cff6:	607a      	str	r2, [r7, #4]
 800cff8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cffa:	2300      	movs	r3, #0
 800cffc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d004:	2b01      	cmp	r3, #1
 800d006:	d101      	bne.n	800d00c <HAL_DMA_Start_IT+0x20>
 800d008:	2302      	movs	r3, #2
 800d00a:	e04b      	b.n	800d0a4 <HAL_DMA_Start_IT+0xb8>
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2201      	movs	r2, #1
 800d010:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800d01a:	b2db      	uxtb	r3, r3
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	d13a      	bne.n	800d096 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2202      	movs	r2, #2
 800d024:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2200      	movs	r2, #0
 800d02c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	681a      	ldr	r2, [r3, #0]
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f022 0201 	bic.w	r2, r2, #1
 800d03c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	68b9      	ldr	r1, [r7, #8]
 800d044:	68f8      	ldr	r0, [r7, #12]
 800d046:	f000 f92a 	bl	800d29e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d008      	beq.n	800d064 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	681a      	ldr	r2, [r3, #0]
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f042 020e 	orr.w	r2, r2, #14
 800d060:	601a      	str	r2, [r3, #0]
 800d062:	e00f      	b.n	800d084 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f022 0204 	bic.w	r2, r2, #4
 800d072:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f042 020a 	orr.w	r2, r2, #10
 800d082:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f042 0201 	orr.w	r2, r2, #1
 800d092:	601a      	str	r2, [r3, #0]
 800d094:	e005      	b.n	800d0a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2200      	movs	r2, #0
 800d09a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800d09e:	2302      	movs	r3, #2
 800d0a0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800d0a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3718      	adds	r7, #24
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}

0800d0ac <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b085      	sub	sp, #20
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800d0be:	b2db      	uxtb	r3, r3
 800d0c0:	2b02      	cmp	r3, #2
 800d0c2:	d008      	beq.n	800d0d6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2204      	movs	r2, #4
 800d0c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	e022      	b.n	800d11c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f022 020e 	bic.w	r2, r2, #14
 800d0e4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f022 0201 	bic.w	r2, r2, #1
 800d0f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0fa:	f003 021c 	and.w	r2, r3, #28
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d102:	2101      	movs	r1, #1
 800d104:	fa01 f202 	lsl.w	r2, r1, r2
 800d108:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2201      	movs	r2, #1
 800d10e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2200      	movs	r2, #0
 800d116:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800d11a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3714      	adds	r7, #20
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr

0800d128 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d144:	f003 031c 	and.w	r3, r3, #28
 800d148:	2204      	movs	r2, #4
 800d14a:	409a      	lsls	r2, r3
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	4013      	ands	r3, r2
 800d150:	2b00      	cmp	r3, #0
 800d152:	d026      	beq.n	800d1a2 <HAL_DMA_IRQHandler+0x7a>
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	f003 0304 	and.w	r3, r3, #4
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d021      	beq.n	800d1a2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f003 0320 	and.w	r3, r3, #32
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d107      	bne.n	800d17c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f022 0204 	bic.w	r2, r2, #4
 800d17a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d180:	f003 021c 	and.w	r2, r3, #28
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d188:	2104      	movs	r1, #4
 800d18a:	fa01 f202 	lsl.w	r2, r1, r2
 800d18e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d194:	2b00      	cmp	r3, #0
 800d196:	d071      	beq.n	800d27c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800d1a0:	e06c      	b.n	800d27c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1a6:	f003 031c 	and.w	r3, r3, #28
 800d1aa:	2202      	movs	r2, #2
 800d1ac:	409a      	lsls	r2, r3
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	4013      	ands	r3, r2
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d02e      	beq.n	800d214 <HAL_DMA_IRQHandler+0xec>
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	f003 0302 	and.w	r3, r3, #2
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d029      	beq.n	800d214 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f003 0320 	and.w	r3, r3, #32
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d10b      	bne.n	800d1e6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	681a      	ldr	r2, [r3, #0]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f022 020a 	bic.w	r2, r2, #10
 800d1dc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2201      	movs	r2, #1
 800d1e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1ea:	f003 021c 	and.w	r2, r3, #28
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1f2:	2102      	movs	r1, #2
 800d1f4:	fa01 f202 	lsl.w	r2, r1, r2
 800d1f8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d206:	2b00      	cmp	r3, #0
 800d208:	d038      	beq.n	800d27c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800d212:	e033      	b.n	800d27c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d218:	f003 031c 	and.w	r3, r3, #28
 800d21c:	2208      	movs	r2, #8
 800d21e:	409a      	lsls	r2, r3
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	4013      	ands	r3, r2
 800d224:	2b00      	cmp	r3, #0
 800d226:	d02a      	beq.n	800d27e <HAL_DMA_IRQHandler+0x156>
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	f003 0308 	and.w	r3, r3, #8
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d025      	beq.n	800d27e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	681a      	ldr	r2, [r3, #0]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	f022 020e 	bic.w	r2, r2, #14
 800d240:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d246:	f003 021c 	and.w	r2, r3, #28
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d24e:	2101      	movs	r1, #1
 800d250:	fa01 f202 	lsl.w	r2, r1, r2
 800d254:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2201      	movs	r2, #1
 800d25a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2201      	movs	r2, #1
 800d260:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2200      	movs	r2, #0
 800d268:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d270:	2b00      	cmp	r3, #0
 800d272:	d004      	beq.n	800d27e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800d27c:	bf00      	nop
 800d27e:	bf00      	nop
}
 800d280:	3710      	adds	r7, #16
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}

0800d286 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800d286:	b480      	push	{r7}
 800d288:	b083      	sub	sp, #12
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800d292:	4618      	mov	r0, r3
 800d294:	370c      	adds	r7, #12
 800d296:	46bd      	mov	sp, r7
 800d298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29c:	4770      	bx	lr

0800d29e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d29e:	b480      	push	{r7}
 800d2a0:	b085      	sub	sp, #20
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	60f8      	str	r0, [r7, #12]
 800d2a6:	60b9      	str	r1, [r7, #8]
 800d2a8:	607a      	str	r2, [r7, #4]
 800d2aa:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2b0:	f003 021c 	and.w	r2, r3, #28
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2b8:	2101      	movs	r1, #1
 800d2ba:	fa01 f202 	lsl.w	r2, r1, r2
 800d2be:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	683a      	ldr	r2, [r7, #0]
 800d2c6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	689b      	ldr	r3, [r3, #8]
 800d2cc:	2b10      	cmp	r3, #16
 800d2ce:	d108      	bne.n	800d2e2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	687a      	ldr	r2, [r7, #4]
 800d2d6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	68ba      	ldr	r2, [r7, #8]
 800d2de:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800d2e0:	e007      	b.n	800d2f2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	68ba      	ldr	r2, [r7, #8]
 800d2e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	687a      	ldr	r2, [r7, #4]
 800d2f0:	60da      	str	r2, [r3, #12]
}
 800d2f2:	bf00      	nop
 800d2f4:	3714      	adds	r7, #20
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fc:	4770      	bx	lr
	...

0800d300 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b086      	sub	sp, #24
 800d304:	af00      	add	r7, sp, #0
 800d306:	60f8      	str	r0, [r7, #12]
 800d308:	60b9      	str	r1, [r7, #8]
 800d30a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800d30e:	2300      	movs	r3, #0
 800d310:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d312:	4b2f      	ldr	r3, [pc, #188]	@ (800d3d0 <HAL_FLASH_Program+0xd0>)
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	2b01      	cmp	r3, #1
 800d318:	d101      	bne.n	800d31e <HAL_FLASH_Program+0x1e>
 800d31a:	2302      	movs	r3, #2
 800d31c:	e053      	b.n	800d3c6 <HAL_FLASH_Program+0xc6>
 800d31e:	4b2c      	ldr	r3, [pc, #176]	@ (800d3d0 <HAL_FLASH_Program+0xd0>)
 800d320:	2201      	movs	r2, #1
 800d322:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d324:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d328:	f000 f8c6 	bl	800d4b8 <FLASH_WaitForLastOperation>
 800d32c:	4603      	mov	r3, r0
 800d32e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800d330:	7dfb      	ldrb	r3, [r7, #23]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d143      	bne.n	800d3be <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d336:	4b26      	ldr	r3, [pc, #152]	@ (800d3d0 <HAL_FLASH_Program+0xd0>)
 800d338:	2200      	movs	r2, #0
 800d33a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800d33c:	4b25      	ldr	r3, [pc, #148]	@ (800d3d4 <HAL_FLASH_Program+0xd4>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d344:	2b00      	cmp	r3, #0
 800d346:	d009      	beq.n	800d35c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800d348:	4b22      	ldr	r3, [pc, #136]	@ (800d3d4 <HAL_FLASH_Program+0xd4>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	4a21      	ldr	r2, [pc, #132]	@ (800d3d4 <HAL_FLASH_Program+0xd4>)
 800d34e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d352:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800d354:	4b1e      	ldr	r3, [pc, #120]	@ (800d3d0 <HAL_FLASH_Program+0xd0>)
 800d356:	2202      	movs	r2, #2
 800d358:	771a      	strb	r2, [r3, #28]
 800d35a:	e002      	b.n	800d362 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800d35c:	4b1c      	ldr	r3, [pc, #112]	@ (800d3d0 <HAL_FLASH_Program+0xd0>)
 800d35e:	2200      	movs	r2, #0
 800d360:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d107      	bne.n	800d378 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800d368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d36c:	68b8      	ldr	r0, [r7, #8]
 800d36e:	f000 f8f9 	bl	800d564 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800d372:	2301      	movs	r3, #1
 800d374:	613b      	str	r3, [r7, #16]
 800d376:	e010      	b.n	800d39a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2b01      	cmp	r3, #1
 800d37c:	d002      	beq.n	800d384 <HAL_FLASH_Program+0x84>
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	2b02      	cmp	r3, #2
 800d382:	d10a      	bne.n	800d39a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	4619      	mov	r1, r3
 800d388:	68b8      	ldr	r0, [r7, #8]
 800d38a:	f000 f911 	bl	800d5b0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	2b02      	cmp	r3, #2
 800d392:	d102      	bne.n	800d39a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800d394:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d398:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d39a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d39e:	f000 f88b 	bl	800d4b8 <FLASH_WaitForLastOperation>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d006      	beq.n	800d3ba <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800d3ac:	4b09      	ldr	r3, [pc, #36]	@ (800d3d4 <HAL_FLASH_Program+0xd4>)
 800d3ae:	695a      	ldr	r2, [r3, #20]
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	43db      	mvns	r3, r3
 800d3b4:	4907      	ldr	r1, [pc, #28]	@ (800d3d4 <HAL_FLASH_Program+0xd4>)
 800d3b6:	4013      	ands	r3, r2
 800d3b8:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800d3ba:	f000 fae5 	bl	800d988 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d3be:	4b04      	ldr	r3, [pc, #16]	@ (800d3d0 <HAL_FLASH_Program+0xd0>)
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	701a      	strb	r2, [r3, #0]

  return status;
 800d3c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3718      	adds	r7, #24
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	bf00      	nop
 800d3d0:	2000027c 	.word	0x2000027c
 800d3d4:	40022000 	.word	0x40022000

0800d3d8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800d3d8:	b480      	push	{r7}
 800d3da:	b083      	sub	sp, #12
 800d3dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800d3e2:	4b0b      	ldr	r3, [pc, #44]	@ (800d410 <HAL_FLASH_Unlock+0x38>)
 800d3e4:	695b      	ldr	r3, [r3, #20]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	da0b      	bge.n	800d402 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800d3ea:	4b09      	ldr	r3, [pc, #36]	@ (800d410 <HAL_FLASH_Unlock+0x38>)
 800d3ec:	4a09      	ldr	r2, [pc, #36]	@ (800d414 <HAL_FLASH_Unlock+0x3c>)
 800d3ee:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800d3f0:	4b07      	ldr	r3, [pc, #28]	@ (800d410 <HAL_FLASH_Unlock+0x38>)
 800d3f2:	4a09      	ldr	r2, [pc, #36]	@ (800d418 <HAL_FLASH_Unlock+0x40>)
 800d3f4:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800d3f6:	4b06      	ldr	r3, [pc, #24]	@ (800d410 <HAL_FLASH_Unlock+0x38>)
 800d3f8:	695b      	ldr	r3, [r3, #20]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	da01      	bge.n	800d402 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800d3fe:	2301      	movs	r3, #1
 800d400:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800d402:	79fb      	ldrb	r3, [r7, #7]
}
 800d404:	4618      	mov	r0, r3
 800d406:	370c      	adds	r7, #12
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr
 800d410:	40022000 	.word	0x40022000
 800d414:	45670123 	.word	0x45670123
 800d418:	cdef89ab 	.word	0xcdef89ab

0800d41c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800d41c:	b480      	push	{r7}
 800d41e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800d420:	4b05      	ldr	r3, [pc, #20]	@ (800d438 <HAL_FLASH_Lock+0x1c>)
 800d422:	695b      	ldr	r3, [r3, #20]
 800d424:	4a04      	ldr	r2, [pc, #16]	@ (800d438 <HAL_FLASH_Lock+0x1c>)
 800d426:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d42a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800d42c:	2300      	movs	r3, #0
}
 800d42e:	4618      	mov	r0, r3
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr
 800d438:	40022000 	.word	0x40022000

0800d43c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800d43c:	b480      	push	{r7}
 800d43e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 800d440:	4b09      	ldr	r3, [pc, #36]	@ (800d468 <HAL_FLASH_OB_Unlock+0x2c>)
 800d442:	695b      	ldr	r3, [r3, #20]
 800d444:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d007      	beq.n	800d45c <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800d44c:	4b06      	ldr	r3, [pc, #24]	@ (800d468 <HAL_FLASH_OB_Unlock+0x2c>)
 800d44e:	4a07      	ldr	r2, [pc, #28]	@ (800d46c <HAL_FLASH_OB_Unlock+0x30>)
 800d450:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800d452:	4b05      	ldr	r3, [pc, #20]	@ (800d468 <HAL_FLASH_OB_Unlock+0x2c>)
 800d454:	4a06      	ldr	r2, [pc, #24]	@ (800d470 <HAL_FLASH_OB_Unlock+0x34>)
 800d456:	60da      	str	r2, [r3, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d458:	2300      	movs	r3, #0
 800d45a:	e000      	b.n	800d45e <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800d45c:	2301      	movs	r3, #1
}
 800d45e:	4618      	mov	r0, r3
 800d460:	46bd      	mov	sp, r7
 800d462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d466:	4770      	bx	lr
 800d468:	40022000 	.word	0x40022000
 800d46c:	08192a3b 	.word	0x08192a3b
 800d470:	4c5d6e7f 	.word	0x4c5d6e7f

0800d474 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800d474:	b480      	push	{r7}
 800d476:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 800d478:	4b05      	ldr	r3, [pc, #20]	@ (800d490 <HAL_FLASH_OB_Lock+0x1c>)
 800d47a:	695b      	ldr	r3, [r3, #20]
 800d47c:	4a04      	ldr	r2, [pc, #16]	@ (800d490 <HAL_FLASH_OB_Lock+0x1c>)
 800d47e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d482:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800d484:	2300      	movs	r3, #0
}
 800d486:	4618      	mov	r0, r3
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr
 800d490:	40022000 	.word	0x40022000

0800d494 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 800d498:	4b06      	ldr	r3, [pc, #24]	@ (800d4b4 <HAL_FLASH_OB_Launch+0x20>)
 800d49a:	695b      	ldr	r3, [r3, #20]
 800d49c:	4a05      	ldr	r2, [pc, #20]	@ (800d4b4 <HAL_FLASH_OB_Launch+0x20>)
 800d49e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d4a2:	6153      	str	r3, [r2, #20]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 800d4a4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d4a8:	f000 f806 	bl	800d4b8 <FLASH_WaitForLastOperation>
 800d4ac:	4603      	mov	r3, r0
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	bd80      	pop	{r7, pc}
 800d4b2:	bf00      	nop
 800d4b4:	40022000 	.word	0x40022000

0800d4b8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b084      	sub	sp, #16
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800d4c0:	f7fd fdae 	bl	800b020 <HAL_GetTick>
 800d4c4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800d4c6:	e00d      	b.n	800d4e4 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ce:	d009      	beq.n	800d4e4 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800d4d0:	f7fd fda6 	bl	800b020 <HAL_GetTick>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	1ad3      	subs	r3, r2, r3
 800d4da:	687a      	ldr	r2, [r7, #4]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d801      	bhi.n	800d4e4 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800d4e0:	2303      	movs	r3, #3
 800d4e2:	e036      	b.n	800d552 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800d4e4:	4b1d      	ldr	r3, [pc, #116]	@ (800d55c <FLASH_WaitForLastOperation+0xa4>)
 800d4e6:	691b      	ldr	r3, [r3, #16]
 800d4e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d1eb      	bne.n	800d4c8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800d4f0:	4b1a      	ldr	r3, [pc, #104]	@ (800d55c <FLASH_WaitForLastOperation+0xa4>)
 800d4f2:	691a      	ldr	r2, [r3, #16]
 800d4f4:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800d4f8:	4013      	ands	r3, r2
 800d4fa:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d01d      	beq.n	800d53e <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800d502:	4b17      	ldr	r3, [pc, #92]	@ (800d560 <FLASH_WaitForLastOperation+0xa8>)
 800d504:	685a      	ldr	r2, [r3, #4]
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	4313      	orrs	r3, r2
 800d50a:	4a15      	ldr	r2, [pc, #84]	@ (800d560 <FLASH_WaitForLastOperation+0xa8>)
 800d50c:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d514:	d307      	bcc.n	800d526 <FLASH_WaitForLastOperation+0x6e>
 800d516:	4b11      	ldr	r3, [pc, #68]	@ (800d55c <FLASH_WaitForLastOperation+0xa4>)
 800d518:	699a      	ldr	r2, [r3, #24]
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800d520:	490e      	ldr	r1, [pc, #56]	@ (800d55c <FLASH_WaitForLastOperation+0xa4>)
 800d522:	4313      	orrs	r3, r2
 800d524:	618b      	str	r3, [r1, #24]
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d004      	beq.n	800d53a <FLASH_WaitForLastOperation+0x82>
 800d530:	4a0a      	ldr	r2, [pc, #40]	@ (800d55c <FLASH_WaitForLastOperation+0xa4>)
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800d538:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800d53a:	2301      	movs	r3, #1
 800d53c:	e009      	b.n	800d552 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800d53e:	4b07      	ldr	r3, [pc, #28]	@ (800d55c <FLASH_WaitForLastOperation+0xa4>)
 800d540:	691b      	ldr	r3, [r3, #16]
 800d542:	f003 0301 	and.w	r3, r3, #1
 800d546:	2b00      	cmp	r3, #0
 800d548:	d002      	beq.n	800d550 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800d54a:	4b04      	ldr	r3, [pc, #16]	@ (800d55c <FLASH_WaitForLastOperation+0xa4>)
 800d54c:	2201      	movs	r2, #1
 800d54e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800d550:	2300      	movs	r3, #0
}
 800d552:	4618      	mov	r0, r3
 800d554:	3710      	adds	r7, #16
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
 800d55a:	bf00      	nop
 800d55c:	40022000 	.word	0x40022000
 800d560:	2000027c 	.word	0x2000027c

0800d564 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800d564:	b480      	push	{r7}
 800d566:	b085      	sub	sp, #20
 800d568:	af00      	add	r7, sp, #0
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800d570:	4b0e      	ldr	r3, [pc, #56]	@ (800d5ac <FLASH_Program_DoubleWord+0x48>)
 800d572:	695b      	ldr	r3, [r3, #20]
 800d574:	4a0d      	ldr	r2, [pc, #52]	@ (800d5ac <FLASH_Program_DoubleWord+0x48>)
 800d576:	f043 0301 	orr.w	r3, r3, #1
 800d57a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	683a      	ldr	r2, [r7, #0]
 800d580:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800d582:	f3bf 8f6f 	isb	sy
}
 800d586:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800d588:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d58c:	f04f 0200 	mov.w	r2, #0
 800d590:	f04f 0300 	mov.w	r3, #0
 800d594:	000a      	movs	r2, r1
 800d596:	2300      	movs	r3, #0
 800d598:	68f9      	ldr	r1, [r7, #12]
 800d59a:	3104      	adds	r1, #4
 800d59c:	4613      	mov	r3, r2
 800d59e:	600b      	str	r3, [r1, #0]
}
 800d5a0:	bf00      	nop
 800d5a2:	3714      	adds	r7, #20
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr
 800d5ac:	40022000 	.word	0x40022000

0800d5b0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b089      	sub	sp, #36	@ 0x24
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800d5ba:	2340      	movs	r3, #64	@ 0x40
 800d5bc:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800d5c6:	4b14      	ldr	r3, [pc, #80]	@ (800d618 <FLASH_Program_Fast+0x68>)
 800d5c8:	695b      	ldr	r3, [r3, #20]
 800d5ca:	4a13      	ldr	r2, [pc, #76]	@ (800d618 <FLASH_Program_Fast+0x68>)
 800d5cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d5d0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5d2:	f3ef 8310 	mrs	r3, PRIMASK
 800d5d6:	60fb      	str	r3, [r7, #12]
  return(result);
 800d5d8:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800d5da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d5dc:	b672      	cpsid	i
}
 800d5de:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	681a      	ldr	r2, [r3, #0]
 800d5e4:	69bb      	ldr	r3, [r7, #24]
 800d5e6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800d5e8:	69bb      	ldr	r3, [r7, #24]
 800d5ea:	3304      	adds	r3, #4
 800d5ec:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	3304      	adds	r3, #4
 800d5f2:	617b      	str	r3, [r7, #20]
    row_index--;
 800d5f4:	7ffb      	ldrb	r3, [r7, #31]
 800d5f6:	3b01      	subs	r3, #1
 800d5f8:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800d5fa:	7ffb      	ldrb	r3, [r7, #31]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d1ef      	bne.n	800d5e0 <FLASH_Program_Fast+0x30>
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	f383 8810 	msr	PRIMASK, r3
}
 800d60a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800d60c:	bf00      	nop
 800d60e:	3724      	adds	r7, #36	@ 0x24
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr
 800d618:	40022000 	.word	0x40022000

0800d61c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b084      	sub	sp, #16
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d626:	4b49      	ldr	r3, [pc, #292]	@ (800d74c <HAL_FLASHEx_Erase+0x130>)
 800d628:	781b      	ldrb	r3, [r3, #0]
 800d62a:	2b01      	cmp	r3, #1
 800d62c:	d101      	bne.n	800d632 <HAL_FLASHEx_Erase+0x16>
 800d62e:	2302      	movs	r3, #2
 800d630:	e087      	b.n	800d742 <HAL_FLASHEx_Erase+0x126>
 800d632:	4b46      	ldr	r3, [pc, #280]	@ (800d74c <HAL_FLASHEx_Erase+0x130>)
 800d634:	2201      	movs	r2, #1
 800d636:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d638:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d63c:	f7ff ff3c 	bl	800d4b8 <FLASH_WaitForLastOperation>
 800d640:	4603      	mov	r3, r0
 800d642:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800d644:	7bfb      	ldrb	r3, [r7, #15]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d177      	bne.n	800d73a <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d64a:	4b40      	ldr	r3, [pc, #256]	@ (800d74c <HAL_FLASHEx_Erase+0x130>)
 800d64c:	2200      	movs	r2, #0
 800d64e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800d650:	4b3f      	ldr	r3, [pc, #252]	@ (800d750 <HAL_FLASHEx_Erase+0x134>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d013      	beq.n	800d684 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800d65c:	4b3c      	ldr	r3, [pc, #240]	@ (800d750 <HAL_FLASHEx_Erase+0x134>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d664:	2b00      	cmp	r3, #0
 800d666:	d009      	beq.n	800d67c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800d668:	4b39      	ldr	r3, [pc, #228]	@ (800d750 <HAL_FLASHEx_Erase+0x134>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4a38      	ldr	r2, [pc, #224]	@ (800d750 <HAL_FLASHEx_Erase+0x134>)
 800d66e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d672:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800d674:	4b35      	ldr	r3, [pc, #212]	@ (800d74c <HAL_FLASHEx_Erase+0x130>)
 800d676:	2203      	movs	r2, #3
 800d678:	771a      	strb	r2, [r3, #28]
 800d67a:	e016      	b.n	800d6aa <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800d67c:	4b33      	ldr	r3, [pc, #204]	@ (800d74c <HAL_FLASHEx_Erase+0x130>)
 800d67e:	2201      	movs	r2, #1
 800d680:	771a      	strb	r2, [r3, #28]
 800d682:	e012      	b.n	800d6aa <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800d684:	4b32      	ldr	r3, [pc, #200]	@ (800d750 <HAL_FLASHEx_Erase+0x134>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d009      	beq.n	800d6a4 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800d690:	4b2f      	ldr	r3, [pc, #188]	@ (800d750 <HAL_FLASHEx_Erase+0x134>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	4a2e      	ldr	r2, [pc, #184]	@ (800d750 <HAL_FLASHEx_Erase+0x134>)
 800d696:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d69a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800d69c:	4b2b      	ldr	r3, [pc, #172]	@ (800d74c <HAL_FLASHEx_Erase+0x130>)
 800d69e:	2202      	movs	r2, #2
 800d6a0:	771a      	strb	r2, [r3, #28]
 800d6a2:	e002      	b.n	800d6aa <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800d6a4:	4b29      	ldr	r3, [pc, #164]	@ (800d74c <HAL_FLASHEx_Erase+0x130>)
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	2b01      	cmp	r3, #1
 800d6b0:	d113      	bne.n	800d6da <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f000 f908 	bl	800d8cc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d6bc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d6c0:	f7ff fefa 	bl	800d4b8 <FLASH_WaitForLastOperation>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800d6c8:	4b21      	ldr	r3, [pc, #132]	@ (800d750 <HAL_FLASHEx_Erase+0x134>)
 800d6ca:	695b      	ldr	r3, [r3, #20]
 800d6cc:	4a20      	ldr	r2, [pc, #128]	@ (800d750 <HAL_FLASHEx_Erase+0x134>)
 800d6ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d6d2:	f023 0304 	bic.w	r3, r3, #4
 800d6d6:	6153      	str	r3, [r2, #20]
 800d6d8:	e02d      	b.n	800d736 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d6e0:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	689b      	ldr	r3, [r3, #8]
 800d6e6:	60bb      	str	r3, [r7, #8]
 800d6e8:	e01d      	b.n	800d726 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	685b      	ldr	r3, [r3, #4]
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	68b8      	ldr	r0, [r7, #8]
 800d6f2:	f000 f913 	bl	800d91c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d6f6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d6fa:	f7ff fedd 	bl	800d4b8 <FLASH_WaitForLastOperation>
 800d6fe:	4603      	mov	r3, r0
 800d700:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800d702:	4b13      	ldr	r3, [pc, #76]	@ (800d750 <HAL_FLASHEx_Erase+0x134>)
 800d704:	695b      	ldr	r3, [r3, #20]
 800d706:	4a12      	ldr	r2, [pc, #72]	@ (800d750 <HAL_FLASHEx_Erase+0x134>)
 800d708:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800d70c:	f023 0302 	bic.w	r3, r3, #2
 800d710:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800d712:	7bfb      	ldrb	r3, [r7, #15]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d003      	beq.n	800d720 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	68ba      	ldr	r2, [r7, #8]
 800d71c:	601a      	str	r2, [r3, #0]
          break;
 800d71e:	e00a      	b.n	800d736 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	3301      	adds	r3, #1
 800d724:	60bb      	str	r3, [r7, #8]
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	689a      	ldr	r2, [r3, #8]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	68db      	ldr	r3, [r3, #12]
 800d72e:	4413      	add	r3, r2
 800d730:	68ba      	ldr	r2, [r7, #8]
 800d732:	429a      	cmp	r2, r3
 800d734:	d3d9      	bcc.n	800d6ea <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800d736:	f000 f927 	bl	800d988 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d73a:	4b04      	ldr	r3, [pc, #16]	@ (800d74c <HAL_FLASHEx_Erase+0x130>)
 800d73c:	2200      	movs	r2, #0
 800d73e:	701a      	strb	r2, [r3, #0]

  return status;
 800d740:	7bfb      	ldrb	r3, [r7, #15]
}
 800d742:	4618      	mov	r0, r3
 800d744:	3710      	adds	r7, #16
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	2000027c 	.word	0x2000027c
 800d750:	40022000 	.word	0x40022000

0800d754 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d75c:	2300      	movs	r3, #0
 800d75e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d760:	4b32      	ldr	r3, [pc, #200]	@ (800d82c <HAL_FLASHEx_OBProgram+0xd8>)
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	2b01      	cmp	r3, #1
 800d766:	d101      	bne.n	800d76c <HAL_FLASHEx_OBProgram+0x18>
 800d768:	2302      	movs	r3, #2
 800d76a:	e05a      	b.n	800d822 <HAL_FLASHEx_OBProgram+0xce>
 800d76c:	4b2f      	ldr	r3, [pc, #188]	@ (800d82c <HAL_FLASHEx_OBProgram+0xd8>)
 800d76e:	2201      	movs	r2, #1
 800d770:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d772:	4b2e      	ldr	r3, [pc, #184]	@ (800d82c <HAL_FLASHEx_OBProgram+0xd8>)
 800d774:	2200      	movs	r2, #0
 800d776:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	f003 0301 	and.w	r3, r3, #1
 800d780:	2b00      	cmp	r3, #0
 800d782:	d00d      	beq.n	800d7a0 <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if(FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6858      	ldr	r0, [r3, #4]
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6899      	ldr	r1, [r3, #8]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	68db      	ldr	r3, [r3, #12]
 800d790:	461a      	mov	r2, r3
 800d792:	f000 f943 	bl	800da1c <FLASH_OB_WRPConfig>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d001      	beq.n	800d7a0 <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 800d79c:	2301      	movs	r3, #1
 800d79e:	73fb      	strb	r3, [r7, #15]
    }

  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f003 0302 	and.w	r3, r3, #2
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d009      	beq.n	800d7c0 <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	691b      	ldr	r3, [r3, #16]
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f000 f997 	bl	800dae4 <FLASH_OB_RDPConfig>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d001      	beq.n	800d7c0 <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 800d7bc:	2301      	movs	r3, #1
 800d7be:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* User Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f003 0304 	and.w	r3, r3, #4
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d00c      	beq.n	800d7e6 <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	695a      	ldr	r2, [r3, #20]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	699b      	ldr	r3, [r3, #24]
 800d7d4:	4619      	mov	r1, r3
 800d7d6:	4610      	mov	r0, r2
 800d7d8:	f000 f9b2 	bl	800db40 <FLASH_OB_UserConfig>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d001      	beq.n	800d7e6 <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* PCROP Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	f003 0308 	and.w	r3, r3, #8
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d013      	beq.n	800d81a <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6a1a      	ldr	r2, [r3, #32]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d00d      	beq.n	800d81a <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	69d8      	ldr	r0, [r3, #28]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6a19      	ldr	r1, [r3, #32]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d80a:	461a      	mov	r2, r3
 800d80c:	f000 fa90 	bl	800dd30 <FLASH_OB_PCROPConfig>
 800d810:	4603      	mov	r3, r0
 800d812:	2b00      	cmp	r3, #0
 800d814:	d001      	beq.n	800d81a <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 800d816:	2301      	movs	r3, #1
 800d818:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d81a:	4b04      	ldr	r3, [pc, #16]	@ (800d82c <HAL_FLASHEx_OBProgram+0xd8>)
 800d81c:	2200      	movs	r2, #0
 800d81e:	701a      	strb	r2, [r3, #0]

  return status;
 800d820:	7bfb      	ldrb	r3, [r7, #15]
}
 800d822:	4618      	mov	r0, r3
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
 800d82a:	bf00      	nop
 800d82c:	2000027c 	.word	0x2000027c

0800d830 <HAL_FLASHEx_OBGetConfig>:
  *         which area is requested for the WRP and PCROP, else no information will be returned
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2206      	movs	r2, #6
 800d83c:	601a      	str	r2, [r3, #0]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d00b      	beq.n	800d85e <HAL_FLASHEx_OBGetConfig+0x2e>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	d007      	beq.n	800d85e <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	685b      	ldr	r3, [r3, #4]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800d852:	2b02      	cmp	r3, #2
 800d854:	d003      	beq.n	800d85e <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	685b      	ldr	r3, [r3, #4]
 800d85a:	2b04      	cmp	r3, #4
 800d85c:	d10f      	bne.n	800d87e <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	f043 0201 	orr.w	r2, r3, #1
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6858      	ldr	r0, [r3, #4]
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f103 0108 	add.w	r1, r3, #8
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	330c      	adds	r3, #12
 800d878:	461a      	mov	r2, r3
 800d87a:	f000 fb05 	bl	800de88 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800d87e:	f000 fb4d 	bl	800df1c <FLASH_OB_GetRDP>
 800d882:	4602      	mov	r2, r0
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800d888:	f000 fb62 	bl	800df50 <FLASH_OB_GetUser>
 800d88c:	4602      	mov	r2, r0
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	619a      	str	r2, [r3, #24]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	69db      	ldr	r3, [r3, #28]
 800d896:	2b01      	cmp	r3, #1
 800d898:	d003      	beq.n	800d8a2 <HAL_FLASHEx_OBGetConfig+0x72>
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	69db      	ldr	r3, [r3, #28]
 800d89e:	2b02      	cmp	r3, #2
 800d8a0:	d110      	bne.n	800d8c4 <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if(pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	f043 0208 	orr.w	r2, r3, #8
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f103 001c 	add.w	r0, r3, #28
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f103 0120 	add.w	r1, r3, #32
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	3324      	adds	r3, #36	@ 0x24
 800d8be:	461a      	mov	r2, r3
 800d8c0:	f000 fb5a 	bl	800df78 <FLASH_OB_GetPCROP>
  }
}
 800d8c4:	bf00      	nop
 800d8c6:	3708      	adds	r7, #8
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	b083      	sub	sp, #12
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f003 0301 	and.w	r3, r3, #1
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d005      	beq.n	800d8ea <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800d8de:	4b0e      	ldr	r3, [pc, #56]	@ (800d918 <FLASH_MassErase+0x4c>)
 800d8e0:	695b      	ldr	r3, [r3, #20]
 800d8e2:	4a0d      	ldr	r2, [pc, #52]	@ (800d918 <FLASH_MassErase+0x4c>)
 800d8e4:	f043 0304 	orr.w	r3, r3, #4
 800d8e8:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f003 0302 	and.w	r3, r3, #2
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d005      	beq.n	800d900 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800d8f4:	4b08      	ldr	r3, [pc, #32]	@ (800d918 <FLASH_MassErase+0x4c>)
 800d8f6:	695b      	ldr	r3, [r3, #20]
 800d8f8:	4a07      	ldr	r2, [pc, #28]	@ (800d918 <FLASH_MassErase+0x4c>)
 800d8fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d8fe:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d900:	4b05      	ldr	r3, [pc, #20]	@ (800d918 <FLASH_MassErase+0x4c>)
 800d902:	695b      	ldr	r3, [r3, #20]
 800d904:	4a04      	ldr	r2, [pc, #16]	@ (800d918 <FLASH_MassErase+0x4c>)
 800d906:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d90a:	6153      	str	r3, [r2, #20]
}
 800d90c:	bf00      	nop
 800d90e:	370c      	adds	r7, #12
 800d910:	46bd      	mov	sp, r7
 800d912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d916:	4770      	bx	lr
 800d918:	40022000 	.word	0x40022000

0800d91c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800d91c:	b480      	push	{r7}
 800d91e:	b083      	sub	sp, #12
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	f003 0301 	and.w	r3, r3, #1
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d006      	beq.n	800d93e <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800d930:	4b14      	ldr	r3, [pc, #80]	@ (800d984 <FLASH_PageErase+0x68>)
 800d932:	695b      	ldr	r3, [r3, #20]
 800d934:	4a13      	ldr	r2, [pc, #76]	@ (800d984 <FLASH_PageErase+0x68>)
 800d936:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d93a:	6153      	str	r3, [r2, #20]
 800d93c:	e005      	b.n	800d94a <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800d93e:	4b11      	ldr	r3, [pc, #68]	@ (800d984 <FLASH_PageErase+0x68>)
 800d940:	695b      	ldr	r3, [r3, #20]
 800d942:	4a10      	ldr	r2, [pc, #64]	@ (800d984 <FLASH_PageErase+0x68>)
 800d944:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d948:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800d94a:	4b0e      	ldr	r3, [pc, #56]	@ (800d984 <FLASH_PageErase+0x68>)
 800d94c:	695b      	ldr	r3, [r3, #20]
 800d94e:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	00db      	lsls	r3, r3, #3
 800d956:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 800d95a:	490a      	ldr	r1, [pc, #40]	@ (800d984 <FLASH_PageErase+0x68>)
 800d95c:	4313      	orrs	r3, r2
 800d95e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800d960:	4b08      	ldr	r3, [pc, #32]	@ (800d984 <FLASH_PageErase+0x68>)
 800d962:	695b      	ldr	r3, [r3, #20]
 800d964:	4a07      	ldr	r2, [pc, #28]	@ (800d984 <FLASH_PageErase+0x68>)
 800d966:	f043 0302 	orr.w	r3, r3, #2
 800d96a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d96c:	4b05      	ldr	r3, [pc, #20]	@ (800d984 <FLASH_PageErase+0x68>)
 800d96e:	695b      	ldr	r3, [r3, #20]
 800d970:	4a04      	ldr	r2, [pc, #16]	@ (800d984 <FLASH_PageErase+0x68>)
 800d972:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d976:	6153      	str	r3, [r2, #20]
}
 800d978:	bf00      	nop
 800d97a:	370c      	adds	r7, #12
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr
 800d984:	40022000 	.word	0x40022000

0800d988 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800d98e:	4b21      	ldr	r3, [pc, #132]	@ (800da14 <FLASH_FlushCaches+0x8c>)
 800d990:	7f1b      	ldrb	r3, [r3, #28]
 800d992:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800d994:	79fb      	ldrb	r3, [r7, #7]
 800d996:	2b01      	cmp	r3, #1
 800d998:	d002      	beq.n	800d9a0 <FLASH_FlushCaches+0x18>
 800d99a:	79fb      	ldrb	r3, [r7, #7]
 800d99c:	2b03      	cmp	r3, #3
 800d99e:	d117      	bne.n	800d9d0 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800d9a0:	4b1d      	ldr	r3, [pc, #116]	@ (800da18 <FLASH_FlushCaches+0x90>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	4a1c      	ldr	r2, [pc, #112]	@ (800da18 <FLASH_FlushCaches+0x90>)
 800d9a6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d9aa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800d9ac:	4b1a      	ldr	r3, [pc, #104]	@ (800da18 <FLASH_FlushCaches+0x90>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	4a19      	ldr	r2, [pc, #100]	@ (800da18 <FLASH_FlushCaches+0x90>)
 800d9b2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d9b6:	6013      	str	r3, [r2, #0]
 800d9b8:	4b17      	ldr	r3, [pc, #92]	@ (800da18 <FLASH_FlushCaches+0x90>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	4a16      	ldr	r2, [pc, #88]	@ (800da18 <FLASH_FlushCaches+0x90>)
 800d9be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d9c2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d9c4:	4b14      	ldr	r3, [pc, #80]	@ (800da18 <FLASH_FlushCaches+0x90>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4a13      	ldr	r2, [pc, #76]	@ (800da18 <FLASH_FlushCaches+0x90>)
 800d9ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d9ce:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800d9d0:	79fb      	ldrb	r3, [r7, #7]
 800d9d2:	2b02      	cmp	r3, #2
 800d9d4:	d002      	beq.n	800d9dc <FLASH_FlushCaches+0x54>
 800d9d6:	79fb      	ldrb	r3, [r7, #7]
 800d9d8:	2b03      	cmp	r3, #3
 800d9da:	d111      	bne.n	800da00 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800d9dc:	4b0e      	ldr	r3, [pc, #56]	@ (800da18 <FLASH_FlushCaches+0x90>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	4a0d      	ldr	r2, [pc, #52]	@ (800da18 <FLASH_FlushCaches+0x90>)
 800d9e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d9e6:	6013      	str	r3, [r2, #0]
 800d9e8:	4b0b      	ldr	r3, [pc, #44]	@ (800da18 <FLASH_FlushCaches+0x90>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a0a      	ldr	r2, [pc, #40]	@ (800da18 <FLASH_FlushCaches+0x90>)
 800d9ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d9f2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800d9f4:	4b08      	ldr	r3, [pc, #32]	@ (800da18 <FLASH_FlushCaches+0x90>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	4a07      	ldr	r2, [pc, #28]	@ (800da18 <FLASH_FlushCaches+0x90>)
 800d9fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d9fe:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800da00:	4b04      	ldr	r3, [pc, #16]	@ (800da14 <FLASH_FlushCaches+0x8c>)
 800da02:	2200      	movs	r2, #0
 800da04:	771a      	strb	r2, [r3, #28]
}
 800da06:	bf00      	nop
 800da08:	370c      	adds	r7, #12
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr
 800da12:	bf00      	nop
 800da14:	2000027c 	.word	0x2000027c
 800da18:	40022000 	.word	0x40022000

0800da1c <FLASH_OB_WRPConfig>:
  *          This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1)
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b086      	sub	sp, #24
 800da20:	af00      	add	r7, sp, #0
 800da22:	60f8      	str	r0, [r7, #12]
 800da24:	60b9      	str	r1, [r7, #8]
 800da26:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800da28:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800da2c:	f7ff fd44 	bl	800d4b8 <FLASH_WaitForLastOperation>
 800da30:	4603      	mov	r3, r0
 800da32:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800da34:	7dfb      	ldrb	r3, [r7, #23]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d14c      	bne.n	800dad4 <FLASH_OB_WRPConfig+0xb8>
  {
    /* Configure the write protected area */
    if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d10b      	bne.n	800da58 <FLASH_OB_WRPConfig+0x3c>
    {
      MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
 800da40:	4b27      	ldr	r3, [pc, #156]	@ (800dae0 <FLASH_OB_WRPConfig+0xc4>)
 800da42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da44:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	0419      	lsls	r1, r3, #16
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	430b      	orrs	r3, r1
 800da50:	4923      	ldr	r1, [pc, #140]	@ (800dae0 <FLASH_OB_WRPConfig+0xc4>)
 800da52:	4313      	orrs	r3, r2
 800da54:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800da56:	e02b      	b.n	800dab0 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2b01      	cmp	r3, #1
 800da5c:	d10b      	bne.n	800da76 <FLASH_OB_WRPConfig+0x5a>
    {
      MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
 800da5e:	4b20      	ldr	r3, [pc, #128]	@ (800dae0 <FLASH_OB_WRPConfig+0xc4>)
 800da60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da62:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	0419      	lsls	r1, r3, #16
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	430b      	orrs	r3, r1
 800da6e:	491c      	ldr	r1, [pc, #112]	@ (800dae0 <FLASH_OB_WRPConfig+0xc4>)
 800da70:	4313      	orrs	r3, r2
 800da72:	630b      	str	r3, [r1, #48]	@ 0x30
 800da74:	e01c      	b.n	800dab0 <FLASH_OB_WRPConfig+0x94>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2b02      	cmp	r3, #2
 800da7a:	d10b      	bne.n	800da94 <FLASH_OB_WRPConfig+0x78>
    {
      MODIFY_REG(FLASH->WRP2AR, (FLASH_WRP2AR_WRP2A_STRT | FLASH_WRP2AR_WRP2A_END),
 800da7c:	4b18      	ldr	r3, [pc, #96]	@ (800dae0 <FLASH_OB_WRPConfig+0xc4>)
 800da7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da80:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	0419      	lsls	r1, r3, #16
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	430b      	orrs	r3, r1
 800da8c:	4914      	ldr	r1, [pc, #80]	@ (800dae0 <FLASH_OB_WRPConfig+0xc4>)
 800da8e:	4313      	orrs	r3, r2
 800da90:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800da92:	e00d      	b.n	800dab0 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	2b04      	cmp	r3, #4
 800da98:	d10a      	bne.n	800dab0 <FLASH_OB_WRPConfig+0x94>
    {
      MODIFY_REG(FLASH->WRP2BR, (FLASH_WRP2BR_WRP2B_STRT | FLASH_WRP2BR_WRP2B_END),
 800da9a:	4b11      	ldr	r3, [pc, #68]	@ (800dae0 <FLASH_OB_WRPConfig+0xc4>)
 800da9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da9e:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	0419      	lsls	r1, r3, #16
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	430b      	orrs	r3, r1
 800daaa:	490d      	ldr	r1, [pc, #52]	@ (800dae0 <FLASH_OB_WRPConfig+0xc4>)
 800daac:	4313      	orrs	r3, r2
 800daae:	650b      	str	r3, [r1, #80]	@ 0x50
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800dab0:	4b0b      	ldr	r3, [pc, #44]	@ (800dae0 <FLASH_OB_WRPConfig+0xc4>)
 800dab2:	695b      	ldr	r3, [r3, #20]
 800dab4:	4a0a      	ldr	r2, [pc, #40]	@ (800dae0 <FLASH_OB_WRPConfig+0xc4>)
 800dab6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800daba:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800dabc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800dac0:	f7ff fcfa 	bl	800d4b8 <FLASH_WaitForLastOperation>
 800dac4:	4603      	mov	r3, r0
 800dac6:	75fb      	strb	r3, [r7, #23]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800dac8:	4b05      	ldr	r3, [pc, #20]	@ (800dae0 <FLASH_OB_WRPConfig+0xc4>)
 800daca:	695b      	ldr	r3, [r3, #20]
 800dacc:	4a04      	ldr	r2, [pc, #16]	@ (800dae0 <FLASH_OB_WRPConfig+0xc4>)
 800dace:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800dad2:	6153      	str	r3, [r2, #20]
  }

  return status;
 800dad4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3718      	adds	r7, #24
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}
 800dade:	bf00      	nop
 800dae0:	40022000 	.word	0x40022000

0800dae4 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b084      	sub	sp, #16
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800daec:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800daf0:	f7ff fce2 	bl	800d4b8 <FLASH_WaitForLastOperation>
 800daf4:	4603      	mov	r3, r0
 800daf6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800daf8:	7bfb      	ldrb	r3, [r7, #15]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d119      	bne.n	800db32 <FLASH_OB_RDPConfig+0x4e>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 800dafe:	4b0f      	ldr	r3, [pc, #60]	@ (800db3c <FLASH_OB_RDPConfig+0x58>)
 800db00:	6a1b      	ldr	r3, [r3, #32]
 800db02:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800db06:	490d      	ldr	r1, [pc, #52]	@ (800db3c <FLASH_OB_RDPConfig+0x58>)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	4313      	orrs	r3, r2
 800db0c:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800db0e:	4b0b      	ldr	r3, [pc, #44]	@ (800db3c <FLASH_OB_RDPConfig+0x58>)
 800db10:	695b      	ldr	r3, [r3, #20]
 800db12:	4a0a      	ldr	r2, [pc, #40]	@ (800db3c <FLASH_OB_RDPConfig+0x58>)
 800db14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800db18:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800db1a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800db1e:	f7ff fccb 	bl	800d4b8 <FLASH_WaitForLastOperation>
 800db22:	4603      	mov	r3, r0
 800db24:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800db26:	4b05      	ldr	r3, [pc, #20]	@ (800db3c <FLASH_OB_RDPConfig+0x58>)
 800db28:	695b      	ldr	r3, [r3, #20]
 800db2a:	4a04      	ldr	r2, [pc, #16]	@ (800db3c <FLASH_OB_RDPConfig+0x58>)
 800db2c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800db30:	6153      	str	r3, [r2, #20]
  }

  return status;
 800db32:	7bfb      	ldrb	r3, [r7, #15]
}
 800db34:	4618      	mov	r0, r3
 800db36:	3710      	adds	r7, #16
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}
 800db3c:	40022000 	.word	0x40022000

0800db40 <FLASH_OB_UserConfig>:
  *         DUALBANK(Bit21), nBOOT1(Bit23), SRAM2_PE(Bit24) and SRAM2_RST(Bit25).
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b086      	sub	sp, #24
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 800db4a:	2300      	movs	r3, #0
 800db4c:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 800db4e:	2300      	movs	r3, #0
 800db50:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800db52:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800db56:	f7ff fcaf 	bl	800d4b8 <FLASH_WaitForLastOperation>
 800db5a:	4603      	mov	r3, r0
 800db5c:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800db5e:	7bfb      	ldrb	r3, [r7, #15]
 800db60:	2b00      	cmp	r3, #0
 800db62:	f040 80de 	bne.w	800dd22 <FLASH_OB_UserConfig+0x1e2>
  {
    if((UserType & OB_USER_BOR_LEV) != 0U)
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f003 0301 	and.w	r3, r3, #1
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d009      	beq.n	800db84 <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800db76:	697a      	ldr	r2, [r7, #20]
 800db78:	4313      	orrs	r3, r2
 800db7a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800db82:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STOP) != 0U)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f003 0302 	and.w	r3, r3, #2
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d009      	beq.n	800dba2 <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800db94:	697a      	ldr	r2, [r7, #20]
 800db96:	4313      	orrs	r3, r2
 800db98:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800dba0:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STDBY) != 0U)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f003 0304 	and.w	r3, r3, #4
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d009      	beq.n	800dbc0 <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dbb2:	697a      	ldr	r2, [r7, #20]
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800dbbe:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_SHDW) != 0U)
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d009      	beq.n	800dbde <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dbd0:	697a      	ldr	r2, [r7, #20]
 800dbd2:	4313      	orrs	r3, r2
 800dbd4:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dbdc:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_SW) != 0U)
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f003 0308 	and.w	r3, r3, #8
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d009      	beq.n	800dbfc <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dbee:	697a      	ldr	r2, [r7, #20]
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dbfa:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STOP) != 0U)
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f003 0310 	and.w	r3, r3, #16
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d009      	beq.n	800dc1a <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dc0c:	697a      	ldr	r2, [r7, #20]
 800dc0e:	4313      	orrs	r3, r2
 800dc10:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dc18:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STDBY) != 0U)
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f003 0320 	and.w	r3, r3, #32
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d009      	beq.n	800dc38 <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800dc2a:	697a      	ldr	r2, [r7, #20]
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800dc36:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_WWDG_SW) != 0U)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d009      	beq.n	800dc56 <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800dc48:	697a      	ldr	r2, [r7, #20]
 800dc4a:	4313      	orrs	r3, r2
 800dc4c:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dc54:	613b      	str	r3, [r7, #16]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_BFB2) != 0U)
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d009      	beq.n	800dc74 <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dc66:	697a      	ldr	r2, [r7, #20]
 800dc68:	4313      	orrs	r3, r2
 800dc6a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dc72:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_DUALBANK) != 0U)
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d009      	beq.n	800dc92 <FLASH_OB_UserConfig+0x152>
#else
      /* DUALBANK option byte should be modified */
      assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));

      /* Set value and mask for DUALBANK option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dc84:	697a      	ldr	r2, [r7, #20]
 800dc86:	4313      	orrs	r3, r2
 800dc88:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_DUALBANK;
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800dc90:	613b      	str	r3, [r7, #16]
#endif
    }
#endif

    if((UserType & OB_USER_nBOOT1) != 0U)
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d009      	beq.n	800dcb0 <FLASH_OB_UserConfig+0x170>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dca2:	697a      	ldr	r2, [r7, #20]
 800dca4:	4313      	orrs	r3, r2
 800dca6:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800dcae:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_PE) != 0U)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d009      	beq.n	800dcce <FLASH_OB_UserConfig+0x18e>
    {
      /* SRAM2_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_PARITY(UserConfig & FLASH_OPTR_SRAM2_PE));

      /* Set value and mask for SRAM2_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_PE);
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dcc0:	697a      	ldr	r2, [r7, #20]
 800dcc2:	4313      	orrs	r3, r2
 800dcc4:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_PE;
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dccc:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_RST) != 0U)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d009      	beq.n	800dcec <FLASH_OB_UserConfig+0x1ac>
    {
      /* SRAM2_RST option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));

      /* Set value and mask for SRAM2_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dcde:	697a      	ldr	r2, [r7, #20]
 800dce0:	4313      	orrs	r3, r2
 800dce2:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800dcea:	613b      	str	r3, [r7, #16]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
    }
#endif

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 800dcec:	4b0f      	ldr	r3, [pc, #60]	@ (800dd2c <FLASH_OB_UserConfig+0x1ec>)
 800dcee:	6a1a      	ldr	r2, [r3, #32]
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	43db      	mvns	r3, r3
 800dcf4:	401a      	ands	r2, r3
 800dcf6:	490d      	ldr	r1, [pc, #52]	@ (800dd2c <FLASH_OB_UserConfig+0x1ec>)
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	4313      	orrs	r3, r2
 800dcfc:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800dcfe:	4b0b      	ldr	r3, [pc, #44]	@ (800dd2c <FLASH_OB_UserConfig+0x1ec>)
 800dd00:	695b      	ldr	r3, [r3, #20]
 800dd02:	4a0a      	ldr	r2, [pc, #40]	@ (800dd2c <FLASH_OB_UserConfig+0x1ec>)
 800dd04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dd08:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800dd0a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800dd0e:	f7ff fbd3 	bl	800d4b8 <FLASH_WaitForLastOperation>
 800dd12:	4603      	mov	r3, r0
 800dd14:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800dd16:	4b05      	ldr	r3, [pc, #20]	@ (800dd2c <FLASH_OB_UserConfig+0x1ec>)
 800dd18:	695b      	ldr	r3, [r3, #20]
 800dd1a:	4a04      	ldr	r2, [pc, #16]	@ (800dd2c <FLASH_OB_UserConfig+0x1ec>)
 800dd1c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800dd20:	6153      	str	r3, [r2, #20]
  }

  return status;
 800dd22:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	3718      	adds	r7, #24
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}
 800dd2c:	40022000 	.word	0x40022000

0800dd30 <FLASH_OB_PCROPConfig>:
  *          This parameter can be an address between PCROPStartAddr and end of the bank
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b088      	sub	sp, #32
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	60b9      	str	r1, [r7, #8]
 800dd3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800dd3c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800dd40:	f7ff fbba 	bl	800d4b8 <FLASH_WaitForLastOperation>
 800dd44:	4603      	mov	r3, r0
 800dd46:	77fb      	strb	r3, [r7, #31]

  if(status == HAL_OK)
 800dd48:	7ffb      	ldrb	r3, [r7, #31]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	f040 808c 	bne.w	800de68 <FLASH_OB_PCROPConfig+0x138>
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800dd50:	4b48      	ldr	r3, [pc, #288]	@ (800de74 <FLASH_OB_PCROPConfig+0x144>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d115      	bne.n	800dd88 <FLASH_OB_PCROPConfig+0x58>
    {
      bank1_addr = FLASH_BASE;
 800dd5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dd60:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800dd62:	4b45      	ldr	r3, [pc, #276]	@ (800de78 <FLASH_OB_PCROPConfig+0x148>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	b29b      	uxth	r3, r3
 800dd68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d008      	beq.n	800dd82 <FLASH_OB_PCROPConfig+0x52>
 800dd70:	4b41      	ldr	r3, [pc, #260]	@ (800de78 <FLASH_OB_PCROPConfig+0x148>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	029b      	lsls	r3, r3, #10
 800dd76:	085a      	lsrs	r2, r3, #1
 800dd78:	4b40      	ldr	r3, [pc, #256]	@ (800de7c <FLASH_OB_PCROPConfig+0x14c>)
 800dd7a:	4013      	ands	r3, r2
 800dd7c:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800dd80:	e000      	b.n	800dd84 <FLASH_OB_PCROPConfig+0x54>
 800dd82:	4b3f      	ldr	r3, [pc, #252]	@ (800de80 <FLASH_OB_PCROPConfig+0x150>)
 800dd84:	617b      	str	r3, [r7, #20]
 800dd86:	e014      	b.n	800ddb2 <FLASH_OB_PCROPConfig+0x82>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800dd88:	4b3b      	ldr	r3, [pc, #236]	@ (800de78 <FLASH_OB_PCROPConfig+0x148>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	b29b      	uxth	r3, r3
 800dd8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d008      	beq.n	800dda8 <FLASH_OB_PCROPConfig+0x78>
 800dd96:	4b38      	ldr	r3, [pc, #224]	@ (800de78 <FLASH_OB_PCROPConfig+0x148>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	029b      	lsls	r3, r3, #10
 800dd9c:	085a      	lsrs	r2, r3, #1
 800dd9e:	4b37      	ldr	r3, [pc, #220]	@ (800de7c <FLASH_OB_PCROPConfig+0x14c>)
 800dda0:	4013      	ands	r3, r2
 800dda2:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800dda6:	e000      	b.n	800ddaa <FLASH_OB_PCROPConfig+0x7a>
 800dda8:	4b35      	ldr	r3, [pc, #212]	@ (800de80 <FLASH_OB_PCROPConfig+0x150>)
 800ddaa:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 800ddac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ddb0:	617b      	str	r3, [r7, #20]
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f003 0303 	and.w	r3, r3, #3
 800ddb8:	2b01      	cmp	r3, #1
 800ddba:	d11a      	bne.n	800ddf2 <FLASH_OB_PCROPConfig+0xc2>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 800ddbc:	68ba      	ldr	r2, [r7, #8]
 800ddbe:	69bb      	ldr	r3, [r7, #24]
 800ddc0:	1ad3      	subs	r3, r2, r3
 800ddc2:	08db      	lsrs	r3, r3, #3
 800ddc4:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 800ddc6:	4b2f      	ldr	r3, [pc, #188]	@ (800de84 <FLASH_OB_PCROPConfig+0x154>)
 800ddc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddca:	0c1b      	lsrs	r3, r3, #16
 800ddcc:	041b      	lsls	r3, r3, #16
 800ddce:	492d      	ldr	r1, [pc, #180]	@ (800de84 <FLASH_OB_PCROPConfig+0x154>)
 800ddd0:	693a      	ldr	r2, [r7, #16]
 800ddd2:	4313      	orrs	r3, r2
 800ddd4:	624b      	str	r3, [r1, #36]	@ 0x24

        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 800ddd6:	687a      	ldr	r2, [r7, #4]
 800ddd8:	69bb      	ldr	r3, [r7, #24]
 800ddda:	1ad3      	subs	r3, r2, r3
 800dddc:	08db      	lsrs	r3, r3, #3
 800ddde:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 800dde0:	4b28      	ldr	r3, [pc, #160]	@ (800de84 <FLASH_OB_PCROPConfig+0x154>)
 800dde2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dde4:	0c1b      	lsrs	r3, r3, #16
 800dde6:	041b      	lsls	r3, r3, #16
 800dde8:	4926      	ldr	r1, [pc, #152]	@ (800de84 <FLASH_OB_PCROPConfig+0x154>)
 800ddea:	693a      	ldr	r2, [r7, #16]
 800ddec:	4313      	orrs	r3, r2
 800ddee:	628b      	str	r3, [r1, #40]	@ 0x28
 800ddf0:	e01e      	b.n	800de30 <FLASH_OB_PCROPConfig+0x100>
      }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	f003 0303 	and.w	r3, r3, #3
 800ddf8:	2b02      	cmp	r3, #2
 800ddfa:	d119      	bne.n	800de30 <FLASH_OB_PCROPConfig+0x100>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 800ddfc:	68ba      	ldr	r2, [r7, #8]
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	1ad3      	subs	r3, r2, r3
 800de02:	08db      	lsrs	r3, r3, #3
 800de04:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 800de06:	4b1f      	ldr	r3, [pc, #124]	@ (800de84 <FLASH_OB_PCROPConfig+0x154>)
 800de08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de0a:	0c1b      	lsrs	r3, r3, #16
 800de0c:	041b      	lsls	r3, r3, #16
 800de0e:	491d      	ldr	r1, [pc, #116]	@ (800de84 <FLASH_OB_PCROPConfig+0x154>)
 800de10:	693a      	ldr	r2, [r7, #16]
 800de12:	4313      	orrs	r3, r2
 800de14:	644b      	str	r3, [r1, #68]	@ 0x44

        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 800de16:	687a      	ldr	r2, [r7, #4]
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	1ad3      	subs	r3, r2, r3
 800de1c:	08db      	lsrs	r3, r3, #3
 800de1e:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 800de20:	4b18      	ldr	r3, [pc, #96]	@ (800de84 <FLASH_OB_PCROPConfig+0x154>)
 800de22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800de24:	0c1b      	lsrs	r3, r3, #16
 800de26:	041b      	lsls	r3, r3, #16
 800de28:	4916      	ldr	r1, [pc, #88]	@ (800de84 <FLASH_OB_PCROPConfig+0x154>)
 800de2a:	693a      	ldr	r2, [r7, #16]
 800de2c:	4313      	orrs	r3, r2
 800de2e:	648b      	str	r3, [r1, #72]	@ 0x48
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 800de30:	4b14      	ldr	r3, [pc, #80]	@ (800de84 <FLASH_OB_PCROPConfig+0x154>)
 800de32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de34:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800de3e:	4911      	ldr	r1, [pc, #68]	@ (800de84 <FLASH_OB_PCROPConfig+0x154>)
 800de40:	4313      	orrs	r3, r2
 800de42:	628b      	str	r3, [r1, #40]	@ 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800de44:	4b0f      	ldr	r3, [pc, #60]	@ (800de84 <FLASH_OB_PCROPConfig+0x154>)
 800de46:	695b      	ldr	r3, [r3, #20]
 800de48:	4a0e      	ldr	r2, [pc, #56]	@ (800de84 <FLASH_OB_PCROPConfig+0x154>)
 800de4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800de4e:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800de50:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800de54:	f7ff fb30 	bl	800d4b8 <FLASH_WaitForLastOperation>
 800de58:	4603      	mov	r3, r0
 800de5a:	77fb      	strb	r3, [r7, #31]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800de5c:	4b09      	ldr	r3, [pc, #36]	@ (800de84 <FLASH_OB_PCROPConfig+0x154>)
 800de5e:	695b      	ldr	r3, [r3, #20]
 800de60:	4a08      	ldr	r2, [pc, #32]	@ (800de84 <FLASH_OB_PCROPConfig+0x154>)
 800de62:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800de66:	6153      	str	r3, [r2, #20]
  }

  return status;
 800de68:	7ffb      	ldrb	r3, [r7, #31]
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3720      	adds	r7, #32
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	40010000 	.word	0x40010000
 800de78:	1fff75e0 	.word	0x1fff75e0
 800de7c:	01fffe00 	.word	0x01fffe00
 800de80:	08080000 	.word	0x08080000
 800de84:	40022000 	.word	0x40022000

0800de88 <FLASH_OB_GetWRP>:
  *                        the write protected area
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t * WRPStartOffset, uint32_t * WRDPEndOffset)
{
 800de88:	b480      	push	{r7}
 800de8a:	b085      	sub	sp, #20
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d10b      	bne.n	800deb2 <FLASH_OB_GetWRP+0x2a>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 800de9a:	4b1f      	ldr	r3, [pc, #124]	@ (800df18 <FLASH_OB_GetWRP+0x90>)
 800de9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de9e:	b2da      	uxtb	r2, r3
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 800dea4:	4b1c      	ldr	r3, [pc, #112]	@ (800df18 <FLASH_OB_GetWRP+0x90>)
 800dea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dea8:	0c1b      	lsrs	r3, r3, #16
 800deaa:	b2da      	uxtb	r2, r3
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 800deb0:	e02b      	b.n	800df0a <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	2b01      	cmp	r3, #1
 800deb6:	d10b      	bne.n	800ded0 <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 800deb8:	4b17      	ldr	r3, [pc, #92]	@ (800df18 <FLASH_OB_GetWRP+0x90>)
 800deba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800debc:	b2da      	uxtb	r2, r3
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 800dec2:	4b15      	ldr	r3, [pc, #84]	@ (800df18 <FLASH_OB_GetWRP+0x90>)
 800dec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dec6:	0c1b      	lsrs	r3, r3, #16
 800dec8:	b2da      	uxtb	r2, r3
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	601a      	str	r2, [r3, #0]
}
 800dece:	e01c      	b.n	800df0a <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2b02      	cmp	r3, #2
 800ded4:	d10b      	bne.n	800deee <FLASH_OB_GetWRP+0x66>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 800ded6:	4b10      	ldr	r3, [pc, #64]	@ (800df18 <FLASH_OB_GetWRP+0x90>)
 800ded8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800deda:	b2da      	uxtb	r2, r3
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 800dee0:	4b0d      	ldr	r3, [pc, #52]	@ (800df18 <FLASH_OB_GetWRP+0x90>)
 800dee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dee4:	0c1b      	lsrs	r3, r3, #16
 800dee6:	b2da      	uxtb	r2, r3
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	601a      	str	r2, [r3, #0]
}
 800deec:	e00d      	b.n	800df0a <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	2b04      	cmp	r3, #4
 800def2:	d10a      	bne.n	800df0a <FLASH_OB_GetWRP+0x82>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 800def4:	4b08      	ldr	r3, [pc, #32]	@ (800df18 <FLASH_OB_GetWRP+0x90>)
 800def6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800def8:	b2da      	uxtb	r2, r3
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 800defe:	4b06      	ldr	r3, [pc, #24]	@ (800df18 <FLASH_OB_GetWRP+0x90>)
 800df00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df02:	0c1b      	lsrs	r3, r3, #16
 800df04:	b2da      	uxtb	r2, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	601a      	str	r2, [r3, #0]
}
 800df0a:	bf00      	nop
 800df0c:	3714      	adds	r7, #20
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr
 800df16:	bf00      	nop
 800df18:	40022000 	.word	0x40022000

0800df1c <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 800df1c:	b480      	push	{r7}
 800df1e:	b083      	sub	sp, #12
 800df20:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800df22:	4b0a      	ldr	r3, [pc, #40]	@ (800df4c <FLASH_OB_GetRDP+0x30>)
 800df24:	6a1b      	ldr	r3, [r3, #32]
 800df26:	b2db      	uxtb	r3, r3
 800df28:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2baa      	cmp	r3, #170	@ 0xaa
 800df2e:	d004      	beq.n	800df3a <FLASH_OB_GetRDP+0x1e>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2bcc      	cmp	r3, #204	@ 0xcc
 800df34:	d001      	beq.n	800df3a <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 800df36:	23bb      	movs	r3, #187	@ 0xbb
 800df38:	e002      	b.n	800df40 <FLASH_OB_GetRDP+0x24>
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 800df3a:	4b04      	ldr	r3, [pc, #16]	@ (800df4c <FLASH_OB_GetRDP+0x30>)
 800df3c:	6a1b      	ldr	r3, [r3, #32]
 800df3e:	b2db      	uxtb	r3, r3
  }
}
 800df40:	4618      	mov	r0, r3
 800df42:	370c      	adds	r7, #12
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr
 800df4c:	40022000 	.word	0x40022000

0800df50 <FLASH_OB_GetUser>:
  *         BOR_LEV(Bit8-10), nRST_STOP(Bit12), nRST_STDBY(Bit13), nRST_SHDW(Bit14),
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27).
  */
static uint32_t FLASH_OB_GetUser(void)
{
 800df50:	b480      	push	{r7}
 800df52:	b083      	sub	sp, #12
 800df54:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 800df56:	4b07      	ldr	r3, [pc, #28]	@ (800df74 <FLASH_OB_GetUser+0x24>)
 800df58:	6a1b      	ldr	r3, [r3, #32]
 800df5a:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800df62:	607b      	str	r3, [r7, #4]

  return user_config;
 800df64:	687b      	ldr	r3, [r7, #4]
}
 800df66:	4618      	mov	r0, r3
 800df68:	370c      	adds	r7, #12
 800df6a:	46bd      	mov	sp, r7
 800df6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df70:	4770      	bx	lr
 800df72:	bf00      	nop
 800df74:	40022000 	.word	0x40022000

0800df78 <FLASH_OB_GetPCROP>:
  *                       the Proprietary code readout protection
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t * PCROPConfig, uint32_t * PCROPStartAddr, uint32_t * PCROPEndAddr)
{
 800df78:	b480      	push	{r7}
 800df7a:	b089      	sub	sp, #36	@ 0x24
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	60f8      	str	r0, [r7, #12]
 800df80:	60b9      	str	r1, [r7, #8]
 800df82:	607a      	str	r2, [r7, #4]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800df84:	4b3b      	ldr	r3, [pc, #236]	@ (800e074 <FLASH_OB_GetPCROP+0xfc>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d115      	bne.n	800dfbc <FLASH_OB_GetPCROP+0x44>
  {
    bank1_addr = FLASH_BASE;
 800df90:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800df94:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800df96:	4b38      	ldr	r3, [pc, #224]	@ (800e078 <FLASH_OB_GetPCROP+0x100>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	b29b      	uxth	r3, r3
 800df9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dfa0:	4293      	cmp	r3, r2
 800dfa2:	d008      	beq.n	800dfb6 <FLASH_OB_GetPCROP+0x3e>
 800dfa4:	4b34      	ldr	r3, [pc, #208]	@ (800e078 <FLASH_OB_GetPCROP+0x100>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	029b      	lsls	r3, r3, #10
 800dfaa:	085a      	lsrs	r2, r3, #1
 800dfac:	4b33      	ldr	r3, [pc, #204]	@ (800e07c <FLASH_OB_GetPCROP+0x104>)
 800dfae:	4013      	ands	r3, r2
 800dfb0:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800dfb4:	e000      	b.n	800dfb8 <FLASH_OB_GetPCROP+0x40>
 800dfb6:	4b32      	ldr	r3, [pc, #200]	@ (800e080 <FLASH_OB_GetPCROP+0x108>)
 800dfb8:	61bb      	str	r3, [r7, #24]
 800dfba:	e014      	b.n	800dfe6 <FLASH_OB_GetPCROP+0x6e>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800dfbc:	4b2e      	ldr	r3, [pc, #184]	@ (800e078 <FLASH_OB_GetPCROP+0x100>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dfc6:	4293      	cmp	r3, r2
 800dfc8:	d008      	beq.n	800dfdc <FLASH_OB_GetPCROP+0x64>
 800dfca:	4b2b      	ldr	r3, [pc, #172]	@ (800e078 <FLASH_OB_GetPCROP+0x100>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	029b      	lsls	r3, r3, #10
 800dfd0:	085a      	lsrs	r2, r3, #1
 800dfd2:	4b2a      	ldr	r3, [pc, #168]	@ (800e07c <FLASH_OB_GetPCROP+0x104>)
 800dfd4:	4013      	ands	r3, r2
 800dfd6:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800dfda:	e000      	b.n	800dfde <FLASH_OB_GetPCROP+0x66>
 800dfdc:	4b28      	ldr	r3, [pc, #160]	@ (800e080 <FLASH_OB_GetPCROP+0x108>)
 800dfde:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 800dfe0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dfe4:	61bb      	str	r3, [r7, #24]
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f003 0303 	and.w	r3, r3, #3
 800dfee:	2b01      	cmp	r3, #1
 800dff0:	d115      	bne.n	800e01e <FLASH_OB_GetPCROP+0xa6>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 800dff2:	4b24      	ldr	r3, [pc, #144]	@ (800e084 <FLASH_OB_GetPCROP+0x10c>)
 800dff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	00da      	lsls	r2, r3, #3
 800dffe:	69fb      	ldr	r3, [r7, #28]
 800e000:	441a      	add	r2, r3
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 800e006:	4b1f      	ldr	r3, [pc, #124]	@ (800e084 <FLASH_OB_GetPCROP+0x10c>)
 800e008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e00a:	b29b      	uxth	r3, r3
 800e00c:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	00da      	lsls	r2, r3, #3
 800e012:	69fb      	ldr	r3, [r7, #28]
 800e014:	4413      	add	r3, r2
 800e016:	1dda      	adds	r2, r3, #7
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	601a      	str	r2, [r3, #0]
 800e01c:	e01a      	b.n	800e054 <FLASH_OB_GetPCROP+0xdc>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	f003 0303 	and.w	r3, r3, #3
 800e026:	2b02      	cmp	r3, #2
 800e028:	d114      	bne.n	800e054 <FLASH_OB_GetPCROP+0xdc>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 800e02a:	4b16      	ldr	r3, [pc, #88]	@ (800e084 <FLASH_OB_GetPCROP+0x10c>)
 800e02c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e02e:	b29b      	uxth	r3, r3
 800e030:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	00da      	lsls	r2, r3, #3
 800e036:	69bb      	ldr	r3, [r7, #24]
 800e038:	441a      	add	r2, r3
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 800e03e:	4b11      	ldr	r3, [pc, #68]	@ (800e084 <FLASH_OB_GetPCROP+0x10c>)
 800e040:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e042:	b29b      	uxth	r3, r3
 800e044:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr + 0x7U;
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	00da      	lsls	r2, r3, #3
 800e04a:	69bb      	ldr	r3, [r7, #24]
 800e04c:	4413      	add	r3, r2
 800e04e:	1dda      	adds	r2, r3, #7
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 800e054:	4b0b      	ldr	r3, [pc, #44]	@ (800e084 <FLASH_OB_GetPCROP+0x10c>)
 800e056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e058:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	431a      	orrs	r2, r3
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	601a      	str	r2, [r3, #0]
}
 800e066:	bf00      	nop
 800e068:	3724      	adds	r7, #36	@ 0x24
 800e06a:	46bd      	mov	sp, r7
 800e06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e070:	4770      	bx	lr
 800e072:	bf00      	nop
 800e074:	40010000 	.word	0x40010000
 800e078:	1fff75e0 	.word	0x1fff75e0
 800e07c:	01fffe00 	.word	0x01fffe00
 800e080:	08080000 	.word	0x08080000
 800e084:	40022000 	.word	0x40022000

0800e088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e088:	b480      	push	{r7}
 800e08a:	b087      	sub	sp, #28
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800e092:	2300      	movs	r3, #0
 800e094:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e096:	e17f      	b.n	800e398 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	681a      	ldr	r2, [r3, #0]
 800e09c:	2101      	movs	r1, #1
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	fa01 f303 	lsl.w	r3, r1, r3
 800e0a4:	4013      	ands	r3, r2
 800e0a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	f000 8171 	beq.w	800e392 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	f003 0303 	and.w	r3, r3, #3
 800e0b8:	2b01      	cmp	r3, #1
 800e0ba:	d005      	beq.n	800e0c8 <HAL_GPIO_Init+0x40>
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	685b      	ldr	r3, [r3, #4]
 800e0c0:	f003 0303 	and.w	r3, r3, #3
 800e0c4:	2b02      	cmp	r3, #2
 800e0c6:	d130      	bne.n	800e12a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	689b      	ldr	r3, [r3, #8]
 800e0cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800e0ce:	697b      	ldr	r3, [r7, #20]
 800e0d0:	005b      	lsls	r3, r3, #1
 800e0d2:	2203      	movs	r2, #3
 800e0d4:	fa02 f303 	lsl.w	r3, r2, r3
 800e0d8:	43db      	mvns	r3, r3
 800e0da:	693a      	ldr	r2, [r7, #16]
 800e0dc:	4013      	ands	r3, r2
 800e0de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	68da      	ldr	r2, [r3, #12]
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	005b      	lsls	r3, r3, #1
 800e0e8:	fa02 f303 	lsl.w	r3, r2, r3
 800e0ec:	693a      	ldr	r2, [r7, #16]
 800e0ee:	4313      	orrs	r3, r2
 800e0f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	693a      	ldr	r2, [r7, #16]
 800e0f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e0fe:	2201      	movs	r2, #1
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	fa02 f303 	lsl.w	r3, r2, r3
 800e106:	43db      	mvns	r3, r3
 800e108:	693a      	ldr	r2, [r7, #16]
 800e10a:	4013      	ands	r3, r2
 800e10c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	685b      	ldr	r3, [r3, #4]
 800e112:	091b      	lsrs	r3, r3, #4
 800e114:	f003 0201 	and.w	r2, r3, #1
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	fa02 f303 	lsl.w	r3, r2, r3
 800e11e:	693a      	ldr	r2, [r7, #16]
 800e120:	4313      	orrs	r3, r2
 800e122:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	693a      	ldr	r2, [r7, #16]
 800e128:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	685b      	ldr	r3, [r3, #4]
 800e12e:	f003 0303 	and.w	r3, r3, #3
 800e132:	2b03      	cmp	r3, #3
 800e134:	d118      	bne.n	800e168 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e13a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800e13c:	2201      	movs	r2, #1
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	fa02 f303 	lsl.w	r3, r2, r3
 800e144:	43db      	mvns	r3, r3
 800e146:	693a      	ldr	r2, [r7, #16]
 800e148:	4013      	ands	r3, r2
 800e14a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	685b      	ldr	r3, [r3, #4]
 800e150:	08db      	lsrs	r3, r3, #3
 800e152:	f003 0201 	and.w	r2, r3, #1
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	fa02 f303 	lsl.w	r3, r2, r3
 800e15c:	693a      	ldr	r2, [r7, #16]
 800e15e:	4313      	orrs	r3, r2
 800e160:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	693a      	ldr	r2, [r7, #16]
 800e166:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	685b      	ldr	r3, [r3, #4]
 800e16c:	f003 0303 	and.w	r3, r3, #3
 800e170:	2b03      	cmp	r3, #3
 800e172:	d017      	beq.n	800e1a4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	68db      	ldr	r3, [r3, #12]
 800e178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	005b      	lsls	r3, r3, #1
 800e17e:	2203      	movs	r2, #3
 800e180:	fa02 f303 	lsl.w	r3, r2, r3
 800e184:	43db      	mvns	r3, r3
 800e186:	693a      	ldr	r2, [r7, #16]
 800e188:	4013      	ands	r3, r2
 800e18a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	689a      	ldr	r2, [r3, #8]
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	005b      	lsls	r3, r3, #1
 800e194:	fa02 f303 	lsl.w	r3, r2, r3
 800e198:	693a      	ldr	r2, [r7, #16]
 800e19a:	4313      	orrs	r3, r2
 800e19c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	693a      	ldr	r2, [r7, #16]
 800e1a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	685b      	ldr	r3, [r3, #4]
 800e1a8:	f003 0303 	and.w	r3, r3, #3
 800e1ac:	2b02      	cmp	r3, #2
 800e1ae:	d123      	bne.n	800e1f8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	08da      	lsrs	r2, r3, #3
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	3208      	adds	r2, #8
 800e1b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	f003 0307 	and.w	r3, r3, #7
 800e1c4:	009b      	lsls	r3, r3, #2
 800e1c6:	220f      	movs	r2, #15
 800e1c8:	fa02 f303 	lsl.w	r3, r2, r3
 800e1cc:	43db      	mvns	r3, r3
 800e1ce:	693a      	ldr	r2, [r7, #16]
 800e1d0:	4013      	ands	r3, r2
 800e1d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	691a      	ldr	r2, [r3, #16]
 800e1d8:	697b      	ldr	r3, [r7, #20]
 800e1da:	f003 0307 	and.w	r3, r3, #7
 800e1de:	009b      	lsls	r3, r3, #2
 800e1e0:	fa02 f303 	lsl.w	r3, r2, r3
 800e1e4:	693a      	ldr	r2, [r7, #16]
 800e1e6:	4313      	orrs	r3, r2
 800e1e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	08da      	lsrs	r2, r3, #3
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	3208      	adds	r2, #8
 800e1f2:	6939      	ldr	r1, [r7, #16]
 800e1f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	005b      	lsls	r3, r3, #1
 800e202:	2203      	movs	r2, #3
 800e204:	fa02 f303 	lsl.w	r3, r2, r3
 800e208:	43db      	mvns	r3, r3
 800e20a:	693a      	ldr	r2, [r7, #16]
 800e20c:	4013      	ands	r3, r2
 800e20e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	685b      	ldr	r3, [r3, #4]
 800e214:	f003 0203 	and.w	r2, r3, #3
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	005b      	lsls	r3, r3, #1
 800e21c:	fa02 f303 	lsl.w	r3, r2, r3
 800e220:	693a      	ldr	r2, [r7, #16]
 800e222:	4313      	orrs	r3, r2
 800e224:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	693a      	ldr	r2, [r7, #16]
 800e22a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e234:	2b00      	cmp	r3, #0
 800e236:	f000 80ac 	beq.w	800e392 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e23a:	4b5f      	ldr	r3, [pc, #380]	@ (800e3b8 <HAL_GPIO_Init+0x330>)
 800e23c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e23e:	4a5e      	ldr	r2, [pc, #376]	@ (800e3b8 <HAL_GPIO_Init+0x330>)
 800e240:	f043 0301 	orr.w	r3, r3, #1
 800e244:	6613      	str	r3, [r2, #96]	@ 0x60
 800e246:	4b5c      	ldr	r3, [pc, #368]	@ (800e3b8 <HAL_GPIO_Init+0x330>)
 800e248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e24a:	f003 0301 	and.w	r3, r3, #1
 800e24e:	60bb      	str	r3, [r7, #8]
 800e250:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800e252:	4a5a      	ldr	r2, [pc, #360]	@ (800e3bc <HAL_GPIO_Init+0x334>)
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	089b      	lsrs	r3, r3, #2
 800e258:	3302      	adds	r3, #2
 800e25a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e25e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	f003 0303 	and.w	r3, r3, #3
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	220f      	movs	r2, #15
 800e26a:	fa02 f303 	lsl.w	r3, r2, r3
 800e26e:	43db      	mvns	r3, r3
 800e270:	693a      	ldr	r2, [r7, #16]
 800e272:	4013      	ands	r3, r2
 800e274:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800e27c:	d025      	beq.n	800e2ca <HAL_GPIO_Init+0x242>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	4a4f      	ldr	r2, [pc, #316]	@ (800e3c0 <HAL_GPIO_Init+0x338>)
 800e282:	4293      	cmp	r3, r2
 800e284:	d01f      	beq.n	800e2c6 <HAL_GPIO_Init+0x23e>
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	4a4e      	ldr	r2, [pc, #312]	@ (800e3c4 <HAL_GPIO_Init+0x33c>)
 800e28a:	4293      	cmp	r3, r2
 800e28c:	d019      	beq.n	800e2c2 <HAL_GPIO_Init+0x23a>
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	4a4d      	ldr	r2, [pc, #308]	@ (800e3c8 <HAL_GPIO_Init+0x340>)
 800e292:	4293      	cmp	r3, r2
 800e294:	d013      	beq.n	800e2be <HAL_GPIO_Init+0x236>
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	4a4c      	ldr	r2, [pc, #304]	@ (800e3cc <HAL_GPIO_Init+0x344>)
 800e29a:	4293      	cmp	r3, r2
 800e29c:	d00d      	beq.n	800e2ba <HAL_GPIO_Init+0x232>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	4a4b      	ldr	r2, [pc, #300]	@ (800e3d0 <HAL_GPIO_Init+0x348>)
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d007      	beq.n	800e2b6 <HAL_GPIO_Init+0x22e>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	4a4a      	ldr	r2, [pc, #296]	@ (800e3d4 <HAL_GPIO_Init+0x34c>)
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	d101      	bne.n	800e2b2 <HAL_GPIO_Init+0x22a>
 800e2ae:	2306      	movs	r3, #6
 800e2b0:	e00c      	b.n	800e2cc <HAL_GPIO_Init+0x244>
 800e2b2:	2307      	movs	r3, #7
 800e2b4:	e00a      	b.n	800e2cc <HAL_GPIO_Init+0x244>
 800e2b6:	2305      	movs	r3, #5
 800e2b8:	e008      	b.n	800e2cc <HAL_GPIO_Init+0x244>
 800e2ba:	2304      	movs	r3, #4
 800e2bc:	e006      	b.n	800e2cc <HAL_GPIO_Init+0x244>
 800e2be:	2303      	movs	r3, #3
 800e2c0:	e004      	b.n	800e2cc <HAL_GPIO_Init+0x244>
 800e2c2:	2302      	movs	r3, #2
 800e2c4:	e002      	b.n	800e2cc <HAL_GPIO_Init+0x244>
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	e000      	b.n	800e2cc <HAL_GPIO_Init+0x244>
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	697a      	ldr	r2, [r7, #20]
 800e2ce:	f002 0203 	and.w	r2, r2, #3
 800e2d2:	0092      	lsls	r2, r2, #2
 800e2d4:	4093      	lsls	r3, r2
 800e2d6:	693a      	ldr	r2, [r7, #16]
 800e2d8:	4313      	orrs	r3, r2
 800e2da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800e2dc:	4937      	ldr	r1, [pc, #220]	@ (800e3bc <HAL_GPIO_Init+0x334>)
 800e2de:	697b      	ldr	r3, [r7, #20]
 800e2e0:	089b      	lsrs	r3, r3, #2
 800e2e2:	3302      	adds	r3, #2
 800e2e4:	693a      	ldr	r2, [r7, #16]
 800e2e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e2ea:	4b3b      	ldr	r3, [pc, #236]	@ (800e3d8 <HAL_GPIO_Init+0x350>)
 800e2ec:	689b      	ldr	r3, [r3, #8]
 800e2ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	43db      	mvns	r3, r3
 800e2f4:	693a      	ldr	r2, [r7, #16]
 800e2f6:	4013      	ands	r3, r2
 800e2f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e302:	2b00      	cmp	r3, #0
 800e304:	d003      	beq.n	800e30e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800e306:	693a      	ldr	r2, [r7, #16]
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	4313      	orrs	r3, r2
 800e30c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800e30e:	4a32      	ldr	r2, [pc, #200]	@ (800e3d8 <HAL_GPIO_Init+0x350>)
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800e314:	4b30      	ldr	r3, [pc, #192]	@ (800e3d8 <HAL_GPIO_Init+0x350>)
 800e316:	68db      	ldr	r3, [r3, #12]
 800e318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	43db      	mvns	r3, r3
 800e31e:	693a      	ldr	r2, [r7, #16]
 800e320:	4013      	ands	r3, r2
 800e322:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	685b      	ldr	r3, [r3, #4]
 800e328:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d003      	beq.n	800e338 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800e330:	693a      	ldr	r2, [r7, #16]
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	4313      	orrs	r3, r2
 800e336:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800e338:	4a27      	ldr	r2, [pc, #156]	@ (800e3d8 <HAL_GPIO_Init+0x350>)
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800e33e:	4b26      	ldr	r3, [pc, #152]	@ (800e3d8 <HAL_GPIO_Init+0x350>)
 800e340:	685b      	ldr	r3, [r3, #4]
 800e342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	43db      	mvns	r3, r3
 800e348:	693a      	ldr	r2, [r7, #16]
 800e34a:	4013      	ands	r3, r2
 800e34c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	685b      	ldr	r3, [r3, #4]
 800e352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e356:	2b00      	cmp	r3, #0
 800e358:	d003      	beq.n	800e362 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800e35a:	693a      	ldr	r2, [r7, #16]
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	4313      	orrs	r3, r2
 800e360:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800e362:	4a1d      	ldr	r2, [pc, #116]	@ (800e3d8 <HAL_GPIO_Init+0x350>)
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800e368:	4b1b      	ldr	r3, [pc, #108]	@ (800e3d8 <HAL_GPIO_Init+0x350>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	43db      	mvns	r3, r3
 800e372:	693a      	ldr	r2, [r7, #16]
 800e374:	4013      	ands	r3, r2
 800e376:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e380:	2b00      	cmp	r3, #0
 800e382:	d003      	beq.n	800e38c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800e384:	693a      	ldr	r2, [r7, #16]
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	4313      	orrs	r3, r2
 800e38a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800e38c:	4a12      	ldr	r2, [pc, #72]	@ (800e3d8 <HAL_GPIO_Init+0x350>)
 800e38e:	693b      	ldr	r3, [r7, #16]
 800e390:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	3301      	adds	r3, #1
 800e396:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	681a      	ldr	r2, [r3, #0]
 800e39c:	697b      	ldr	r3, [r7, #20]
 800e39e:	fa22 f303 	lsr.w	r3, r2, r3
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	f47f ae78 	bne.w	800e098 <HAL_GPIO_Init+0x10>
  }
}
 800e3a8:	bf00      	nop
 800e3aa:	bf00      	nop
 800e3ac:	371c      	adds	r7, #28
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b4:	4770      	bx	lr
 800e3b6:	bf00      	nop
 800e3b8:	40021000 	.word	0x40021000
 800e3bc:	40010000 	.word	0x40010000
 800e3c0:	48000400 	.word	0x48000400
 800e3c4:	48000800 	.word	0x48000800
 800e3c8:	48000c00 	.word	0x48000c00
 800e3cc:	48001000 	.word	0x48001000
 800e3d0:	48001400 	.word	0x48001400
 800e3d4:	48001800 	.word	0x48001800
 800e3d8:	40010400 	.word	0x40010400

0800e3dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b085      	sub	sp, #20
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	460b      	mov	r3, r1
 800e3e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	691a      	ldr	r2, [r3, #16]
 800e3ec:	887b      	ldrh	r3, [r7, #2]
 800e3ee:	4013      	ands	r3, r2
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d002      	beq.n	800e3fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	73fb      	strb	r3, [r7, #15]
 800e3f8:	e001      	b.n	800e3fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e3fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800e400:	4618      	mov	r0, r3
 800e402:	3714      	adds	r7, #20
 800e404:	46bd      	mov	sp, r7
 800e406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40a:	4770      	bx	lr

0800e40c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e40c:	b480      	push	{r7}
 800e40e:	b083      	sub	sp, #12
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
 800e414:	460b      	mov	r3, r1
 800e416:	807b      	strh	r3, [r7, #2]
 800e418:	4613      	mov	r3, r2
 800e41a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e41c:	787b      	ldrb	r3, [r7, #1]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d003      	beq.n	800e42a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800e422:	887a      	ldrh	r2, [r7, #2]
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800e428:	e002      	b.n	800e430 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800e42a:	887a      	ldrh	r2, [r7, #2]
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800e430:	bf00      	nop
 800e432:	370c      	adds	r7, #12
 800e434:	46bd      	mov	sp, r7
 800e436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43a:	4770      	bx	lr

0800e43c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b082      	sub	sp, #8
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d101      	bne.n	800e44e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e44a:	2301      	movs	r3, #1
 800e44c:	e08d      	b.n	800e56a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e454:	b2db      	uxtb	r3, r3
 800e456:	2b00      	cmp	r3, #0
 800e458:	d106      	bne.n	800e468 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2200      	movs	r2, #0
 800e45e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f7f9 f8b8 	bl	80075d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2224      	movs	r2, #36	@ 0x24
 800e46c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	681a      	ldr	r2, [r3, #0]
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f022 0201 	bic.w	r2, r2, #1
 800e47e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	685a      	ldr	r2, [r3, #4]
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800e48c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	689a      	ldr	r2, [r3, #8]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e49c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	68db      	ldr	r3, [r3, #12]
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	d107      	bne.n	800e4b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	689a      	ldr	r2, [r3, #8]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e4b2:	609a      	str	r2, [r3, #8]
 800e4b4:	e006      	b.n	800e4c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	689a      	ldr	r2, [r3, #8]
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800e4c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	68db      	ldr	r3, [r3, #12]
 800e4c8:	2b02      	cmp	r3, #2
 800e4ca:	d108      	bne.n	800e4de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	685a      	ldr	r2, [r3, #4]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e4da:	605a      	str	r2, [r3, #4]
 800e4dc:	e007      	b.n	800e4ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	685a      	ldr	r2, [r3, #4]
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e4ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	685b      	ldr	r3, [r3, #4]
 800e4f4:	687a      	ldr	r2, [r7, #4]
 800e4f6:	6812      	ldr	r2, [r2, #0]
 800e4f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800e4fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e500:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	68da      	ldr	r2, [r3, #12]
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e510:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	691a      	ldr	r2, [r3, #16]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	695b      	ldr	r3, [r3, #20]
 800e51a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	699b      	ldr	r3, [r3, #24]
 800e522:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	430a      	orrs	r2, r1
 800e52a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	69d9      	ldr	r1, [r3, #28]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6a1a      	ldr	r2, [r3, #32]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	430a      	orrs	r2, r1
 800e53a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	681a      	ldr	r2, [r3, #0]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f042 0201 	orr.w	r2, r2, #1
 800e54a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2200      	movs	r2, #0
 800e550:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2220      	movs	r2, #32
 800e556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2200      	movs	r2, #0
 800e55e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2200      	movs	r2, #0
 800e564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800e568:	2300      	movs	r3, #0
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3708      	adds	r7, #8
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
	...

0800e574 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b088      	sub	sp, #32
 800e578:	af02      	add	r7, sp, #8
 800e57a:	60f8      	str	r0, [r7, #12]
 800e57c:	607a      	str	r2, [r7, #4]
 800e57e:	461a      	mov	r2, r3
 800e580:	460b      	mov	r3, r1
 800e582:	817b      	strh	r3, [r7, #10]
 800e584:	4613      	mov	r3, r2
 800e586:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e58e:	b2db      	uxtb	r3, r3
 800e590:	2b20      	cmp	r3, #32
 800e592:	f040 80fd 	bne.w	800e790 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e59c:	2b01      	cmp	r3, #1
 800e59e:	d101      	bne.n	800e5a4 <HAL_I2C_Master_Transmit+0x30>
 800e5a0:	2302      	movs	r3, #2
 800e5a2:	e0f6      	b.n	800e792 <HAL_I2C_Master_Transmit+0x21e>
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	2201      	movs	r2, #1
 800e5a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e5ac:	f7fc fd38 	bl	800b020 <HAL_GetTick>
 800e5b0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	9300      	str	r3, [sp, #0]
 800e5b6:	2319      	movs	r3, #25
 800e5b8:	2201      	movs	r2, #1
 800e5ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e5be:	68f8      	ldr	r0, [r7, #12]
 800e5c0:	f000 fa0a 	bl	800e9d8 <I2C_WaitOnFlagUntilTimeout>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d001      	beq.n	800e5ce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	e0e1      	b.n	800e792 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	2221      	movs	r2, #33	@ 0x21
 800e5d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	2210      	movs	r2, #16
 800e5da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	893a      	ldrh	r2, [r7, #8]
 800e5ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e5fa:	b29b      	uxth	r3, r3
 800e5fc:	2bff      	cmp	r3, #255	@ 0xff
 800e5fe:	d906      	bls.n	800e60e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	22ff      	movs	r2, #255	@ 0xff
 800e604:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800e606:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e60a:	617b      	str	r3, [r7, #20]
 800e60c:	e007      	b.n	800e61e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e612:	b29a      	uxth	r2, r3
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800e618:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e61c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e622:	2b00      	cmp	r3, #0
 800e624:	d024      	beq.n	800e670 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e62a:	781a      	ldrb	r2, [r3, #0]
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e636:	1c5a      	adds	r2, r3, #1
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e640:	b29b      	uxth	r3, r3
 800e642:	3b01      	subs	r3, #1
 800e644:	b29a      	uxth	r2, r3
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e64e:	3b01      	subs	r3, #1
 800e650:	b29a      	uxth	r2, r3
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e65a:	b2db      	uxtb	r3, r3
 800e65c:	3301      	adds	r3, #1
 800e65e:	b2da      	uxtb	r2, r3
 800e660:	8979      	ldrh	r1, [r7, #10]
 800e662:	4b4e      	ldr	r3, [pc, #312]	@ (800e79c <HAL_I2C_Master_Transmit+0x228>)
 800e664:	9300      	str	r3, [sp, #0]
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	68f8      	ldr	r0, [r7, #12]
 800e66a:	f000 fc05 	bl	800ee78 <I2C_TransferConfig>
 800e66e:	e066      	b.n	800e73e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e674:	b2da      	uxtb	r2, r3
 800e676:	8979      	ldrh	r1, [r7, #10]
 800e678:	4b48      	ldr	r3, [pc, #288]	@ (800e79c <HAL_I2C_Master_Transmit+0x228>)
 800e67a:	9300      	str	r3, [sp, #0]
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	68f8      	ldr	r0, [r7, #12]
 800e680:	f000 fbfa 	bl	800ee78 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800e684:	e05b      	b.n	800e73e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e686:	693a      	ldr	r2, [r7, #16]
 800e688:	6a39      	ldr	r1, [r7, #32]
 800e68a:	68f8      	ldr	r0, [r7, #12]
 800e68c:	f000 f9fd 	bl	800ea8a <I2C_WaitOnTXISFlagUntilTimeout>
 800e690:	4603      	mov	r3, r0
 800e692:	2b00      	cmp	r3, #0
 800e694:	d001      	beq.n	800e69a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800e696:	2301      	movs	r3, #1
 800e698:	e07b      	b.n	800e792 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e69e:	781a      	ldrb	r2, [r3, #0]
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6aa:	1c5a      	adds	r2, r3, #1
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e6b4:	b29b      	uxth	r3, r3
 800e6b6:	3b01      	subs	r3, #1
 800e6b8:	b29a      	uxth	r2, r3
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e6c2:	3b01      	subs	r3, #1
 800e6c4:	b29a      	uxth	r2, r3
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e6ce:	b29b      	uxth	r3, r3
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d034      	beq.n	800e73e <HAL_I2C_Master_Transmit+0x1ca>
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d130      	bne.n	800e73e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	9300      	str	r3, [sp, #0]
 800e6e0:	6a3b      	ldr	r3, [r7, #32]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	2180      	movs	r1, #128	@ 0x80
 800e6e6:	68f8      	ldr	r0, [r7, #12]
 800e6e8:	f000 f976 	bl	800e9d8 <I2C_WaitOnFlagUntilTimeout>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d001      	beq.n	800e6f6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	e04d      	b.n	800e792 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e6fa:	b29b      	uxth	r3, r3
 800e6fc:	2bff      	cmp	r3, #255	@ 0xff
 800e6fe:	d90e      	bls.n	800e71e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	22ff      	movs	r2, #255	@ 0xff
 800e704:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e70a:	b2da      	uxtb	r2, r3
 800e70c:	8979      	ldrh	r1, [r7, #10]
 800e70e:	2300      	movs	r3, #0
 800e710:	9300      	str	r3, [sp, #0]
 800e712:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e716:	68f8      	ldr	r0, [r7, #12]
 800e718:	f000 fbae 	bl	800ee78 <I2C_TransferConfig>
 800e71c:	e00f      	b.n	800e73e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e722:	b29a      	uxth	r2, r3
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e72c:	b2da      	uxtb	r2, r3
 800e72e:	8979      	ldrh	r1, [r7, #10]
 800e730:	2300      	movs	r3, #0
 800e732:	9300      	str	r3, [sp, #0]
 800e734:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e738:	68f8      	ldr	r0, [r7, #12]
 800e73a:	f000 fb9d 	bl	800ee78 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e742:	b29b      	uxth	r3, r3
 800e744:	2b00      	cmp	r3, #0
 800e746:	d19e      	bne.n	800e686 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e748:	693a      	ldr	r2, [r7, #16]
 800e74a:	6a39      	ldr	r1, [r7, #32]
 800e74c:	68f8      	ldr	r0, [r7, #12]
 800e74e:	f000 f9e3 	bl	800eb18 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e752:	4603      	mov	r3, r0
 800e754:	2b00      	cmp	r3, #0
 800e756:	d001      	beq.n	800e75c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800e758:	2301      	movs	r3, #1
 800e75a:	e01a      	b.n	800e792 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	2220      	movs	r2, #32
 800e762:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	6859      	ldr	r1, [r3, #4]
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681a      	ldr	r2, [r3, #0]
 800e76e:	4b0c      	ldr	r3, [pc, #48]	@ (800e7a0 <HAL_I2C_Master_Transmit+0x22c>)
 800e770:	400b      	ands	r3, r1
 800e772:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	2220      	movs	r2, #32
 800e778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	2200      	movs	r2, #0
 800e780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	2200      	movs	r2, #0
 800e788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e78c:	2300      	movs	r3, #0
 800e78e:	e000      	b.n	800e792 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800e790:	2302      	movs	r3, #2
  }
}
 800e792:	4618      	mov	r0, r3
 800e794:	3718      	adds	r7, #24
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
 800e79a:	bf00      	nop
 800e79c:	80002000 	.word	0x80002000
 800e7a0:	fe00e800 	.word	0xfe00e800

0800e7a4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b088      	sub	sp, #32
 800e7a8:	af02      	add	r7, sp, #8
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	607a      	str	r2, [r7, #4]
 800e7ae:	461a      	mov	r2, r3
 800e7b0:	460b      	mov	r3, r1
 800e7b2:	817b      	strh	r3, [r7, #10]
 800e7b4:	4613      	mov	r3, r2
 800e7b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e7be:	b2db      	uxtb	r3, r3
 800e7c0:	2b20      	cmp	r3, #32
 800e7c2:	f040 80db 	bne.w	800e97c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	d101      	bne.n	800e7d4 <HAL_I2C_Master_Receive+0x30>
 800e7d0:	2302      	movs	r3, #2
 800e7d2:	e0d4      	b.n	800e97e <HAL_I2C_Master_Receive+0x1da>
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	2201      	movs	r2, #1
 800e7d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e7dc:	f7fc fc20 	bl	800b020 <HAL_GetTick>
 800e7e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	9300      	str	r3, [sp, #0]
 800e7e6:	2319      	movs	r3, #25
 800e7e8:	2201      	movs	r2, #1
 800e7ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e7ee:	68f8      	ldr	r0, [r7, #12]
 800e7f0:	f000 f8f2 	bl	800e9d8 <I2C_WaitOnFlagUntilTimeout>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d001      	beq.n	800e7fe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	e0bf      	b.n	800e97e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	2222      	movs	r2, #34	@ 0x22
 800e802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	2210      	movs	r2, #16
 800e80a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	2200      	movs	r2, #0
 800e812:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	687a      	ldr	r2, [r7, #4]
 800e818:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	893a      	ldrh	r2, [r7, #8]
 800e81e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	2200      	movs	r2, #0
 800e824:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e82a:	b29b      	uxth	r3, r3
 800e82c:	2bff      	cmp	r3, #255	@ 0xff
 800e82e:	d90e      	bls.n	800e84e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	2201      	movs	r2, #1
 800e834:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e83a:	b2da      	uxtb	r2, r3
 800e83c:	8979      	ldrh	r1, [r7, #10]
 800e83e:	4b52      	ldr	r3, [pc, #328]	@ (800e988 <HAL_I2C_Master_Receive+0x1e4>)
 800e840:	9300      	str	r3, [sp, #0]
 800e842:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e846:	68f8      	ldr	r0, [r7, #12]
 800e848:	f000 fb16 	bl	800ee78 <I2C_TransferConfig>
 800e84c:	e06d      	b.n	800e92a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e852:	b29a      	uxth	r2, r3
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e85c:	b2da      	uxtb	r2, r3
 800e85e:	8979      	ldrh	r1, [r7, #10]
 800e860:	4b49      	ldr	r3, [pc, #292]	@ (800e988 <HAL_I2C_Master_Receive+0x1e4>)
 800e862:	9300      	str	r3, [sp, #0]
 800e864:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e868:	68f8      	ldr	r0, [r7, #12]
 800e86a:	f000 fb05 	bl	800ee78 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800e86e:	e05c      	b.n	800e92a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e870:	697a      	ldr	r2, [r7, #20]
 800e872:	6a39      	ldr	r1, [r7, #32]
 800e874:	68f8      	ldr	r0, [r7, #12]
 800e876:	f000 f993 	bl	800eba0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e87a:	4603      	mov	r3, r0
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d001      	beq.n	800e884 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800e880:	2301      	movs	r3, #1
 800e882:	e07c      	b.n	800e97e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e88e:	b2d2      	uxtb	r2, r2
 800e890:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e896:	1c5a      	adds	r2, r3, #1
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8a0:	3b01      	subs	r3, #1
 800e8a2:	b29a      	uxth	r2, r3
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8ac:	b29b      	uxth	r3, r3
 800e8ae:	3b01      	subs	r3, #1
 800e8b0:	b29a      	uxth	r2, r3
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8ba:	b29b      	uxth	r3, r3
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d034      	beq.n	800e92a <HAL_I2C_Master_Receive+0x186>
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d130      	bne.n	800e92a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	9300      	str	r3, [sp, #0]
 800e8cc:	6a3b      	ldr	r3, [r7, #32]
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	2180      	movs	r1, #128	@ 0x80
 800e8d2:	68f8      	ldr	r0, [r7, #12]
 800e8d4:	f000 f880 	bl	800e9d8 <I2C_WaitOnFlagUntilTimeout>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d001      	beq.n	800e8e2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800e8de:	2301      	movs	r3, #1
 800e8e0:	e04d      	b.n	800e97e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8e6:	b29b      	uxth	r3, r3
 800e8e8:	2bff      	cmp	r3, #255	@ 0xff
 800e8ea:	d90e      	bls.n	800e90a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	22ff      	movs	r2, #255	@ 0xff
 800e8f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8f6:	b2da      	uxtb	r2, r3
 800e8f8:	8979      	ldrh	r1, [r7, #10]
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	9300      	str	r3, [sp, #0]
 800e8fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e902:	68f8      	ldr	r0, [r7, #12]
 800e904:	f000 fab8 	bl	800ee78 <I2C_TransferConfig>
 800e908:	e00f      	b.n	800e92a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e90e:	b29a      	uxth	r2, r3
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e918:	b2da      	uxtb	r2, r3
 800e91a:	8979      	ldrh	r1, [r7, #10]
 800e91c:	2300      	movs	r3, #0
 800e91e:	9300      	str	r3, [sp, #0]
 800e920:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e924:	68f8      	ldr	r0, [r7, #12]
 800e926:	f000 faa7 	bl	800ee78 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e92e:	b29b      	uxth	r3, r3
 800e930:	2b00      	cmp	r3, #0
 800e932:	d19d      	bne.n	800e870 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e934:	697a      	ldr	r2, [r7, #20]
 800e936:	6a39      	ldr	r1, [r7, #32]
 800e938:	68f8      	ldr	r0, [r7, #12]
 800e93a:	f000 f8ed 	bl	800eb18 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e93e:	4603      	mov	r3, r0
 800e940:	2b00      	cmp	r3, #0
 800e942:	d001      	beq.n	800e948 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800e944:	2301      	movs	r3, #1
 800e946:	e01a      	b.n	800e97e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	2220      	movs	r2, #32
 800e94e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	6859      	ldr	r1, [r3, #4]
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	681a      	ldr	r2, [r3, #0]
 800e95a:	4b0c      	ldr	r3, [pc, #48]	@ (800e98c <HAL_I2C_Master_Receive+0x1e8>)
 800e95c:	400b      	ands	r3, r1
 800e95e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	2220      	movs	r2, #32
 800e964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	2200      	movs	r2, #0
 800e96c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2200      	movs	r2, #0
 800e974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e978:	2300      	movs	r3, #0
 800e97a:	e000      	b.n	800e97e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800e97c:	2302      	movs	r3, #2
  }
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3718      	adds	r7, #24
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop
 800e988:	80002400 	.word	0x80002400
 800e98c:	fe00e800 	.word	0xfe00e800

0800e990 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e990:	b480      	push	{r7}
 800e992:	b083      	sub	sp, #12
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	699b      	ldr	r3, [r3, #24]
 800e99e:	f003 0302 	and.w	r3, r3, #2
 800e9a2:	2b02      	cmp	r3, #2
 800e9a4:	d103      	bne.n	800e9ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	699b      	ldr	r3, [r3, #24]
 800e9b4:	f003 0301 	and.w	r3, r3, #1
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	d007      	beq.n	800e9cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	699a      	ldr	r2, [r3, #24]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	f042 0201 	orr.w	r2, r2, #1
 800e9ca:	619a      	str	r2, [r3, #24]
  }
}
 800e9cc:	bf00      	nop
 800e9ce:	370c      	adds	r7, #12
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d6:	4770      	bx	lr

0800e9d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b084      	sub	sp, #16
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	60f8      	str	r0, [r7, #12]
 800e9e0:	60b9      	str	r1, [r7, #8]
 800e9e2:	603b      	str	r3, [r7, #0]
 800e9e4:	4613      	mov	r3, r2
 800e9e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e9e8:	e03b      	b.n	800ea62 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e9ea:	69ba      	ldr	r2, [r7, #24]
 800e9ec:	6839      	ldr	r1, [r7, #0]
 800e9ee:	68f8      	ldr	r0, [r7, #12]
 800e9f0:	f000 f962 	bl	800ecb8 <I2C_IsErrorOccurred>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d001      	beq.n	800e9fe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	e041      	b.n	800ea82 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea04:	d02d      	beq.n	800ea62 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea06:	f7fc fb0b 	bl	800b020 <HAL_GetTick>
 800ea0a:	4602      	mov	r2, r0
 800ea0c:	69bb      	ldr	r3, [r7, #24]
 800ea0e:	1ad3      	subs	r3, r2, r3
 800ea10:	683a      	ldr	r2, [r7, #0]
 800ea12:	429a      	cmp	r2, r3
 800ea14:	d302      	bcc.n	800ea1c <I2C_WaitOnFlagUntilTimeout+0x44>
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d122      	bne.n	800ea62 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	699a      	ldr	r2, [r3, #24]
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	4013      	ands	r3, r2
 800ea26:	68ba      	ldr	r2, [r7, #8]
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	bf0c      	ite	eq
 800ea2c:	2301      	moveq	r3, #1
 800ea2e:	2300      	movne	r3, #0
 800ea30:	b2db      	uxtb	r3, r3
 800ea32:	461a      	mov	r2, r3
 800ea34:	79fb      	ldrb	r3, [r7, #7]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d113      	bne.n	800ea62 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea3e:	f043 0220 	orr.w	r2, r3, #32
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	2220      	movs	r2, #32
 800ea4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2200      	movs	r2, #0
 800ea52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800ea5e:	2301      	movs	r3, #1
 800ea60:	e00f      	b.n	800ea82 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	699a      	ldr	r2, [r3, #24]
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	4013      	ands	r3, r2
 800ea6c:	68ba      	ldr	r2, [r7, #8]
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	bf0c      	ite	eq
 800ea72:	2301      	moveq	r3, #1
 800ea74:	2300      	movne	r3, #0
 800ea76:	b2db      	uxtb	r3, r3
 800ea78:	461a      	mov	r2, r3
 800ea7a:	79fb      	ldrb	r3, [r7, #7]
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d0b4      	beq.n	800e9ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ea80:	2300      	movs	r3, #0
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3710      	adds	r7, #16
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}

0800ea8a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ea8a:	b580      	push	{r7, lr}
 800ea8c:	b084      	sub	sp, #16
 800ea8e:	af00      	add	r7, sp, #0
 800ea90:	60f8      	str	r0, [r7, #12]
 800ea92:	60b9      	str	r1, [r7, #8]
 800ea94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ea96:	e033      	b.n	800eb00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ea98:	687a      	ldr	r2, [r7, #4]
 800ea9a:	68b9      	ldr	r1, [r7, #8]
 800ea9c:	68f8      	ldr	r0, [r7, #12]
 800ea9e:	f000 f90b 	bl	800ecb8 <I2C_IsErrorOccurred>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d001      	beq.n	800eaac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	e031      	b.n	800eb10 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eab2:	d025      	beq.n	800eb00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eab4:	f7fc fab4 	bl	800b020 <HAL_GetTick>
 800eab8:	4602      	mov	r2, r0
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	1ad3      	subs	r3, r2, r3
 800eabe:	68ba      	ldr	r2, [r7, #8]
 800eac0:	429a      	cmp	r2, r3
 800eac2:	d302      	bcc.n	800eaca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d11a      	bne.n	800eb00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	699b      	ldr	r3, [r3, #24]
 800ead0:	f003 0302 	and.w	r3, r3, #2
 800ead4:	2b02      	cmp	r3, #2
 800ead6:	d013      	beq.n	800eb00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eadc:	f043 0220 	orr.w	r2, r3, #32
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	2220      	movs	r2, #32
 800eae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800eafc:	2301      	movs	r3, #1
 800eafe:	e007      	b.n	800eb10 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	699b      	ldr	r3, [r3, #24]
 800eb06:	f003 0302 	and.w	r3, r3, #2
 800eb0a:	2b02      	cmp	r3, #2
 800eb0c:	d1c4      	bne.n	800ea98 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800eb0e:	2300      	movs	r3, #0
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3710      	adds	r7, #16
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}

0800eb18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b084      	sub	sp, #16
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	60f8      	str	r0, [r7, #12]
 800eb20:	60b9      	str	r1, [r7, #8]
 800eb22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800eb24:	e02f      	b.n	800eb86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800eb26:	687a      	ldr	r2, [r7, #4]
 800eb28:	68b9      	ldr	r1, [r7, #8]
 800eb2a:	68f8      	ldr	r0, [r7, #12]
 800eb2c:	f000 f8c4 	bl	800ecb8 <I2C_IsErrorOccurred>
 800eb30:	4603      	mov	r3, r0
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d001      	beq.n	800eb3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800eb36:	2301      	movs	r3, #1
 800eb38:	e02d      	b.n	800eb96 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb3a:	f7fc fa71 	bl	800b020 <HAL_GetTick>
 800eb3e:	4602      	mov	r2, r0
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	1ad3      	subs	r3, r2, r3
 800eb44:	68ba      	ldr	r2, [r7, #8]
 800eb46:	429a      	cmp	r2, r3
 800eb48:	d302      	bcc.n	800eb50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d11a      	bne.n	800eb86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	699b      	ldr	r3, [r3, #24]
 800eb56:	f003 0320 	and.w	r3, r3, #32
 800eb5a:	2b20      	cmp	r3, #32
 800eb5c:	d013      	beq.n	800eb86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb62:	f043 0220 	orr.w	r2, r3, #32
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2220      	movs	r2, #32
 800eb6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	2200      	movs	r2, #0
 800eb76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800eb82:	2301      	movs	r3, #1
 800eb84:	e007      	b.n	800eb96 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	699b      	ldr	r3, [r3, #24]
 800eb8c:	f003 0320 	and.w	r3, r3, #32
 800eb90:	2b20      	cmp	r3, #32
 800eb92:	d1c8      	bne.n	800eb26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800eb94:	2300      	movs	r3, #0
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	3710      	adds	r7, #16
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}
	...

0800eba0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b086      	sub	sp, #24
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	60f8      	str	r0, [r7, #12]
 800eba8:	60b9      	str	r1, [r7, #8]
 800ebaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ebac:	2300      	movs	r3, #0
 800ebae:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800ebb0:	e071      	b.n	800ec96 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ebb2:	687a      	ldr	r2, [r7, #4]
 800ebb4:	68b9      	ldr	r1, [r7, #8]
 800ebb6:	68f8      	ldr	r0, [r7, #12]
 800ebb8:	f000 f87e 	bl	800ecb8 <I2C_IsErrorOccurred>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d001      	beq.n	800ebc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	699b      	ldr	r3, [r3, #24]
 800ebcc:	f003 0320 	and.w	r3, r3, #32
 800ebd0:	2b20      	cmp	r3, #32
 800ebd2:	d13b      	bne.n	800ec4c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800ebd4:	7dfb      	ldrb	r3, [r7, #23]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d138      	bne.n	800ec4c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	699b      	ldr	r3, [r3, #24]
 800ebe0:	f003 0304 	and.w	r3, r3, #4
 800ebe4:	2b04      	cmp	r3, #4
 800ebe6:	d105      	bne.n	800ebf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d001      	beq.n	800ebf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	699b      	ldr	r3, [r3, #24]
 800ebfa:	f003 0310 	and.w	r3, r3, #16
 800ebfe:	2b10      	cmp	r3, #16
 800ec00:	d121      	bne.n	800ec46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	2210      	movs	r2, #16
 800ec08:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	2204      	movs	r2, #4
 800ec0e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	2220      	movs	r2, #32
 800ec16:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	6859      	ldr	r1, [r3, #4]
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	681a      	ldr	r2, [r3, #0]
 800ec22:	4b24      	ldr	r3, [pc, #144]	@ (800ecb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800ec24:	400b      	ands	r3, r1
 800ec26:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	2220      	movs	r2, #32
 800ec2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	2200      	movs	r2, #0
 800ec34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800ec40:	2301      	movs	r3, #1
 800ec42:	75fb      	strb	r3, [r7, #23]
 800ec44:	e002      	b.n	800ec4c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	2200      	movs	r2, #0
 800ec4a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800ec4c:	f7fc f9e8 	bl	800b020 <HAL_GetTick>
 800ec50:	4602      	mov	r2, r0
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	1ad3      	subs	r3, r2, r3
 800ec56:	68ba      	ldr	r2, [r7, #8]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d302      	bcc.n	800ec62 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d119      	bne.n	800ec96 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800ec62:	7dfb      	ldrb	r3, [r7, #23]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d116      	bne.n	800ec96 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	699b      	ldr	r3, [r3, #24]
 800ec6e:	f003 0304 	and.w	r3, r3, #4
 800ec72:	2b04      	cmp	r3, #4
 800ec74:	d00f      	beq.n	800ec96 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec7a:	f043 0220 	orr.w	r2, r3, #32
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	2220      	movs	r2, #32
 800ec86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800ec92:	2301      	movs	r3, #1
 800ec94:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	699b      	ldr	r3, [r3, #24]
 800ec9c:	f003 0304 	and.w	r3, r3, #4
 800eca0:	2b04      	cmp	r3, #4
 800eca2:	d002      	beq.n	800ecaa <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800eca4:	7dfb      	ldrb	r3, [r7, #23]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d083      	beq.n	800ebb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800ecaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3718      	adds	r7, #24
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}
 800ecb4:	fe00e800 	.word	0xfe00e800

0800ecb8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b08a      	sub	sp, #40	@ 0x28
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	60f8      	str	r0, [r7, #12]
 800ecc0:	60b9      	str	r1, [r7, #8]
 800ecc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	699b      	ldr	r3, [r3, #24]
 800ecd0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ecda:	69bb      	ldr	r3, [r7, #24]
 800ecdc:	f003 0310 	and.w	r3, r3, #16
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d068      	beq.n	800edb6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	2210      	movs	r2, #16
 800ecea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ecec:	e049      	b.n	800ed82 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecf4:	d045      	beq.n	800ed82 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ecf6:	f7fc f993 	bl	800b020 <HAL_GetTick>
 800ecfa:	4602      	mov	r2, r0
 800ecfc:	69fb      	ldr	r3, [r7, #28]
 800ecfe:	1ad3      	subs	r3, r2, r3
 800ed00:	68ba      	ldr	r2, [r7, #8]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d302      	bcc.n	800ed0c <I2C_IsErrorOccurred+0x54>
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d13a      	bne.n	800ed82 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	685b      	ldr	r3, [r3, #4]
 800ed12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ed16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ed1e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	699b      	ldr	r3, [r3, #24]
 800ed26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ed2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ed2e:	d121      	bne.n	800ed74 <I2C_IsErrorOccurred+0xbc>
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ed36:	d01d      	beq.n	800ed74 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800ed38:	7cfb      	ldrb	r3, [r7, #19]
 800ed3a:	2b20      	cmp	r3, #32
 800ed3c:	d01a      	beq.n	800ed74 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	685a      	ldr	r2, [r3, #4]
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ed4c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800ed4e:	f7fc f967 	bl	800b020 <HAL_GetTick>
 800ed52:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ed54:	e00e      	b.n	800ed74 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ed56:	f7fc f963 	bl	800b020 <HAL_GetTick>
 800ed5a:	4602      	mov	r2, r0
 800ed5c:	69fb      	ldr	r3, [r7, #28]
 800ed5e:	1ad3      	subs	r3, r2, r3
 800ed60:	2b19      	cmp	r3, #25
 800ed62:	d907      	bls.n	800ed74 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800ed64:	6a3b      	ldr	r3, [r7, #32]
 800ed66:	f043 0320 	orr.w	r3, r3, #32
 800ed6a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800ed72:	e006      	b.n	800ed82 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	699b      	ldr	r3, [r3, #24]
 800ed7a:	f003 0320 	and.w	r3, r3, #32
 800ed7e:	2b20      	cmp	r3, #32
 800ed80:	d1e9      	bne.n	800ed56 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	699b      	ldr	r3, [r3, #24]
 800ed88:	f003 0320 	and.w	r3, r3, #32
 800ed8c:	2b20      	cmp	r3, #32
 800ed8e:	d003      	beq.n	800ed98 <I2C_IsErrorOccurred+0xe0>
 800ed90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d0aa      	beq.n	800ecee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ed98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d103      	bne.n	800eda8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	2220      	movs	r2, #32
 800eda6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800eda8:	6a3b      	ldr	r3, [r7, #32]
 800edaa:	f043 0304 	orr.w	r3, r3, #4
 800edae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800edb0:	2301      	movs	r3, #1
 800edb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	699b      	ldr	r3, [r3, #24]
 800edbc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800edbe:	69bb      	ldr	r3, [r7, #24]
 800edc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d00b      	beq.n	800ede0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800edc8:	6a3b      	ldr	r3, [r7, #32]
 800edca:	f043 0301 	orr.w	r3, r3, #1
 800edce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800edd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800edda:	2301      	movs	r3, #1
 800eddc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ede0:	69bb      	ldr	r3, [r7, #24]
 800ede2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d00b      	beq.n	800ee02 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800edea:	6a3b      	ldr	r3, [r7, #32]
 800edec:	f043 0308 	orr.w	r3, r3, #8
 800edf0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800edfa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800edfc:	2301      	movs	r3, #1
 800edfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ee02:	69bb      	ldr	r3, [r7, #24]
 800ee04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d00b      	beq.n	800ee24 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800ee0c:	6a3b      	ldr	r3, [r7, #32]
 800ee0e:	f043 0302 	orr.w	r3, r3, #2
 800ee12:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ee1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ee1e:	2301      	movs	r3, #1
 800ee20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800ee24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d01c      	beq.n	800ee66 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ee2c:	68f8      	ldr	r0, [r7, #12]
 800ee2e:	f7ff fdaf 	bl	800e990 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	6859      	ldr	r1, [r3, #4]
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681a      	ldr	r2, [r3, #0]
 800ee3c:	4b0d      	ldr	r3, [pc, #52]	@ (800ee74 <I2C_IsErrorOccurred+0x1bc>)
 800ee3e:	400b      	ands	r3, r1
 800ee40:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ee46:	6a3b      	ldr	r3, [r7, #32]
 800ee48:	431a      	orrs	r2, r3
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	2220      	movs	r2, #32
 800ee52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	2200      	movs	r2, #0
 800ee5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	2200      	movs	r2, #0
 800ee62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800ee66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3728      	adds	r7, #40	@ 0x28
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
 800ee72:	bf00      	nop
 800ee74:	fe00e800 	.word	0xfe00e800

0800ee78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ee78:	b480      	push	{r7}
 800ee7a:	b087      	sub	sp, #28
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	607b      	str	r3, [r7, #4]
 800ee82:	460b      	mov	r3, r1
 800ee84:	817b      	strh	r3, [r7, #10]
 800ee86:	4613      	mov	r3, r2
 800ee88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ee8a:	897b      	ldrh	r3, [r7, #10]
 800ee8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ee90:	7a7b      	ldrb	r3, [r7, #9]
 800ee92:	041b      	lsls	r3, r3, #16
 800ee94:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ee98:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ee9e:	6a3b      	ldr	r3, [r7, #32]
 800eea0:	4313      	orrs	r3, r2
 800eea2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800eea6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	685a      	ldr	r2, [r3, #4]
 800eeae:	6a3b      	ldr	r3, [r7, #32]
 800eeb0:	0d5b      	lsrs	r3, r3, #21
 800eeb2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800eeb6:	4b08      	ldr	r3, [pc, #32]	@ (800eed8 <I2C_TransferConfig+0x60>)
 800eeb8:	430b      	orrs	r3, r1
 800eeba:	43db      	mvns	r3, r3
 800eebc:	ea02 0103 	and.w	r1, r2, r3
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	697a      	ldr	r2, [r7, #20]
 800eec6:	430a      	orrs	r2, r1
 800eec8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800eeca:	bf00      	nop
 800eecc:	371c      	adds	r7, #28
 800eece:	46bd      	mov	sp, r7
 800eed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed4:	4770      	bx	lr
 800eed6:	bf00      	nop
 800eed8:	03ff63ff 	.word	0x03ff63ff

0800eedc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800eedc:	b480      	push	{r7}
 800eede:	b083      	sub	sp, #12
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eeec:	b2db      	uxtb	r3, r3
 800eeee:	2b20      	cmp	r3, #32
 800eef0:	d138      	bne.n	800ef64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	d101      	bne.n	800ef00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800eefc:	2302      	movs	r3, #2
 800eefe:	e032      	b.n	800ef66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2201      	movs	r2, #1
 800ef04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2224      	movs	r2, #36	@ 0x24
 800ef0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	681a      	ldr	r2, [r3, #0]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f022 0201 	bic.w	r2, r2, #1
 800ef1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	681a      	ldr	r2, [r3, #0]
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ef2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	6819      	ldr	r1, [r3, #0]
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	683a      	ldr	r2, [r7, #0]
 800ef3c:	430a      	orrs	r2, r1
 800ef3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	681a      	ldr	r2, [r3, #0]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	f042 0201 	orr.w	r2, r2, #1
 800ef4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2220      	movs	r2, #32
 800ef54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ef60:	2300      	movs	r3, #0
 800ef62:	e000      	b.n	800ef66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ef64:	2302      	movs	r3, #2
  }
}
 800ef66:	4618      	mov	r0, r3
 800ef68:	370c      	adds	r7, #12
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef70:	4770      	bx	lr

0800ef72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ef72:	b480      	push	{r7}
 800ef74:	b085      	sub	sp, #20
 800ef76:	af00      	add	r7, sp, #0
 800ef78:	6078      	str	r0, [r7, #4]
 800ef7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ef82:	b2db      	uxtb	r3, r3
 800ef84:	2b20      	cmp	r3, #32
 800ef86:	d139      	bne.n	800effc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ef8e:	2b01      	cmp	r3, #1
 800ef90:	d101      	bne.n	800ef96 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ef92:	2302      	movs	r3, #2
 800ef94:	e033      	b.n	800effe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	2201      	movs	r2, #1
 800ef9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2224      	movs	r2, #36	@ 0x24
 800efa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	681a      	ldr	r2, [r3, #0]
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	f022 0201 	bic.w	r2, r2, #1
 800efb4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800efc4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	021b      	lsls	r3, r3, #8
 800efca:	68fa      	ldr	r2, [r7, #12]
 800efcc:	4313      	orrs	r3, r2
 800efce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	68fa      	ldr	r2, [r7, #12]
 800efd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	681a      	ldr	r2, [r3, #0]
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f042 0201 	orr.w	r2, r2, #1
 800efe6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2220      	movs	r2, #32
 800efec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2200      	movs	r2, #0
 800eff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800eff8:	2300      	movs	r3, #0
 800effa:	e000      	b.n	800effe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800effc:	2302      	movs	r3, #2
  }
}
 800effe:	4618      	mov	r0, r3
 800f000:	3714      	adds	r7, #20
 800f002:	46bd      	mov	sp, r7
 800f004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f008:	4770      	bx	lr
	...

0800f00c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800f00c:	b480      	push	{r7}
 800f00e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800f010:	4b04      	ldr	r3, [pc, #16]	@ (800f024 <HAL_PWREx_GetVoltageRange+0x18>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800f018:	4618      	mov	r0, r3
 800f01a:	46bd      	mov	sp, r7
 800f01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f020:	4770      	bx	lr
 800f022:	bf00      	nop
 800f024:	40007000 	.word	0x40007000

0800f028 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800f028:	b480      	push	{r7}
 800f02a:	b085      	sub	sp, #20
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f036:	d130      	bne.n	800f09a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800f038:	4b23      	ldr	r3, [pc, #140]	@ (800f0c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f044:	d038      	beq.n	800f0b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800f046:	4b20      	ldr	r3, [pc, #128]	@ (800f0c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800f04e:	4a1e      	ldr	r2, [pc, #120]	@ (800f0c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f050:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800f054:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800f056:	4b1d      	ldr	r3, [pc, #116]	@ (800f0cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	2232      	movs	r2, #50	@ 0x32
 800f05c:	fb02 f303 	mul.w	r3, r2, r3
 800f060:	4a1b      	ldr	r2, [pc, #108]	@ (800f0d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800f062:	fba2 2303 	umull	r2, r3, r2, r3
 800f066:	0c9b      	lsrs	r3, r3, #18
 800f068:	3301      	adds	r3, #1
 800f06a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f06c:	e002      	b.n	800f074 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	3b01      	subs	r3, #1
 800f072:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f074:	4b14      	ldr	r3, [pc, #80]	@ (800f0c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f076:	695b      	ldr	r3, [r3, #20]
 800f078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f07c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f080:	d102      	bne.n	800f088 <HAL_PWREx_ControlVoltageScaling+0x60>
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d1f2      	bne.n	800f06e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800f088:	4b0f      	ldr	r3, [pc, #60]	@ (800f0c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f08a:	695b      	ldr	r3, [r3, #20]
 800f08c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f090:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f094:	d110      	bne.n	800f0b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800f096:	2303      	movs	r3, #3
 800f098:	e00f      	b.n	800f0ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800f09a:	4b0b      	ldr	r3, [pc, #44]	@ (800f0c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f0a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f0a6:	d007      	beq.n	800f0b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800f0a8:	4b07      	ldr	r3, [pc, #28]	@ (800f0c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800f0b0:	4a05      	ldr	r2, [pc, #20]	@ (800f0c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f0b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800f0b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800f0b8:	2300      	movs	r3, #0
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	3714      	adds	r7, #20
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c4:	4770      	bx	lr
 800f0c6:	bf00      	nop
 800f0c8:	40007000 	.word	0x40007000
 800f0cc:	20000268 	.word	0x20000268
 800f0d0:	431bde83 	.word	0x431bde83

0800f0d4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b086      	sub	sp, #24
 800f0d8:	af02      	add	r7, sp, #8
 800f0da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f0dc:	f7fb ffa0 	bl	800b020 <HAL_GetTick>
 800f0e0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d101      	bne.n	800f0ec <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	e063      	b.n	800f1b4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f0f2:	b2db      	uxtb	r3, r3
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d10b      	bne.n	800f110 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f7f8 fac7 	bl	8007694 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800f106:	f241 3188 	movw	r1, #5000	@ 0x1388
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	f000 fa68 	bl	800f5e0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	689b      	ldr	r3, [r3, #8]
 800f11e:	3b01      	subs	r3, #1
 800f120:	021a      	lsls	r2, r3, #8
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	430a      	orrs	r2, r1
 800f128:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f12e:	9300      	str	r3, [sp, #0]
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	2200      	movs	r2, #0
 800f134:	2120      	movs	r1, #32
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f000 fa60 	bl	800f5fc <QSPI_WaitFlagStateUntilTimeout>
 800f13c:	4603      	mov	r3, r0
 800f13e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800f140:	7afb      	ldrb	r3, [r7, #11]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d131      	bne.n	800f1aa <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f150:	f023 0310 	bic.w	r3, r3, #16
 800f154:	687a      	ldr	r2, [r7, #4]
 800f156:	6852      	ldr	r2, [r2, #4]
 800f158:	0611      	lsls	r1, r2, #24
 800f15a:	687a      	ldr	r2, [r7, #4]
 800f15c:	68d2      	ldr	r2, [r2, #12]
 800f15e:	4311      	orrs	r1, r2
 800f160:	687a      	ldr	r2, [r7, #4]
 800f162:	6812      	ldr	r2, [r2, #0]
 800f164:	430b      	orrs	r3, r1
 800f166:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	685a      	ldr	r2, [r3, #4]
 800f16e:	4b13      	ldr	r3, [pc, #76]	@ (800f1bc <HAL_QSPI_Init+0xe8>)
 800f170:	4013      	ands	r3, r2
 800f172:	687a      	ldr	r2, [r7, #4]
 800f174:	6912      	ldr	r2, [r2, #16]
 800f176:	0411      	lsls	r1, r2, #16
 800f178:	687a      	ldr	r2, [r7, #4]
 800f17a:	6952      	ldr	r2, [r2, #20]
 800f17c:	4311      	orrs	r1, r2
 800f17e:	687a      	ldr	r2, [r7, #4]
 800f180:	6992      	ldr	r2, [r2, #24]
 800f182:	4311      	orrs	r1, r2
 800f184:	687a      	ldr	r2, [r7, #4]
 800f186:	6812      	ldr	r2, [r2, #0]
 800f188:	430b      	orrs	r3, r1
 800f18a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	681a      	ldr	r2, [r3, #0]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	f042 0201 	orr.w	r2, r2, #1
 800f19a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2201      	movs	r2, #1
 800f1a6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800f1b2:	7afb      	ldrb	r3, [r7, #11]
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	3710      	adds	r7, #16
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}
 800f1bc:	ffe0f8fe 	.word	0xffe0f8fe

0800f1c0 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b088      	sub	sp, #32
 800f1c4:	af02      	add	r7, sp, #8
 800f1c6:	60f8      	str	r0, [r7, #12]
 800f1c8:	60b9      	str	r1, [r7, #8]
 800f1ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f1cc:	f7fb ff28 	bl	800b020 <HAL_GetTick>
 800f1d0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f1d8:	b2db      	uxtb	r3, r3
 800f1da:	2b01      	cmp	r3, #1
 800f1dc:	d101      	bne.n	800f1e2 <HAL_QSPI_Command+0x22>
 800f1de:	2302      	movs	r3, #2
 800f1e0:	e048      	b.n	800f274 <HAL_QSPI_Command+0xb4>
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	2201      	movs	r2, #1
 800f1e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f1f0:	b2db      	uxtb	r3, r3
 800f1f2:	2b01      	cmp	r3, #1
 800f1f4:	d137      	bne.n	800f266 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	2202      	movs	r2, #2
 800f200:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	9300      	str	r3, [sp, #0]
 800f208:	693b      	ldr	r3, [r7, #16]
 800f20a:	2200      	movs	r2, #0
 800f20c:	2120      	movs	r1, #32
 800f20e:	68f8      	ldr	r0, [r7, #12]
 800f210:	f000 f9f4 	bl	800f5fc <QSPI_WaitFlagStateUntilTimeout>
 800f214:	4603      	mov	r3, r0
 800f216:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800f218:	7dfb      	ldrb	r3, [r7, #23]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d125      	bne.n	800f26a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800f21e:	2200      	movs	r2, #0
 800f220:	68b9      	ldr	r1, [r7, #8]
 800f222:	68f8      	ldr	r0, [r7, #12]
 800f224:	f000 fa21 	bl	800f66a <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d115      	bne.n	800f25c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	9300      	str	r3, [sp, #0]
 800f234:	693b      	ldr	r3, [r7, #16]
 800f236:	2201      	movs	r2, #1
 800f238:	2102      	movs	r1, #2
 800f23a:	68f8      	ldr	r0, [r7, #12]
 800f23c:	f000 f9de 	bl	800f5fc <QSPI_WaitFlagStateUntilTimeout>
 800f240:	4603      	mov	r3, r0
 800f242:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800f244:	7dfb      	ldrb	r3, [r7, #23]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d10f      	bne.n	800f26a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	2202      	movs	r2, #2
 800f250:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	2201      	movs	r2, #1
 800f256:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f25a:	e006      	b.n	800f26a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	2201      	movs	r2, #1
 800f260:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f264:	e001      	b.n	800f26a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800f266:	2302      	movs	r3, #2
 800f268:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	2200      	movs	r2, #0
 800f26e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800f272:	7dfb      	ldrb	r3, [r7, #23]
}
 800f274:	4618      	mov	r0, r3
 800f276:	3718      	adds	r7, #24
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b08a      	sub	sp, #40	@ 0x28
 800f280:	af02      	add	r7, sp, #8
 800f282:	60f8      	str	r0, [r7, #12]
 800f284:	60b9      	str	r1, [r7, #8]
 800f286:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f288:	2300      	movs	r3, #0
 800f28a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800f28c:	f7fb fec8 	bl	800b020 <HAL_GetTick>
 800f290:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	3320      	adds	r3, #32
 800f298:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f2a0:	b2db      	uxtb	r3, r3
 800f2a2:	2b01      	cmp	r3, #1
 800f2a4:	d101      	bne.n	800f2aa <HAL_QSPI_Transmit+0x2e>
 800f2a6:	2302      	movs	r3, #2
 800f2a8:	e07b      	b.n	800f3a2 <HAL_QSPI_Transmit+0x126>
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	2201      	movs	r2, #1
 800f2ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f2b8:	b2db      	uxtb	r3, r3
 800f2ba:	2b01      	cmp	r3, #1
 800f2bc:	d16a      	bne.n	800f394 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d05b      	beq.n	800f382 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	2212      	movs	r2, #18
 800f2ce:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	691b      	ldr	r3, [r3, #16]
 800f2d8:	1c5a      	adds	r2, r3, #1
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	625a      	str	r2, [r3, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	691b      	ldr	r3, [r3, #16]
 800f2e4:	1c5a      	adds	r2, r3, #1
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	68ba      	ldr	r2, [r7, #8]
 800f2ee:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	695a      	ldr	r2, [r3, #20]
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800f2fe:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800f300:	e01b      	b.n	800f33a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	9300      	str	r3, [sp, #0]
 800f306:	69bb      	ldr	r3, [r7, #24]
 800f308:	2201      	movs	r2, #1
 800f30a:	2104      	movs	r1, #4
 800f30c:	68f8      	ldr	r0, [r7, #12]
 800f30e:	f000 f975 	bl	800f5fc <QSPI_WaitFlagStateUntilTimeout>
 800f312:	4603      	mov	r3, r0
 800f314:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800f316:	7ffb      	ldrb	r3, [r7, #31]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d113      	bne.n	800f344 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	69db      	ldr	r3, [r3, #28]
 800f320:	781a      	ldrb	r2, [r3, #0]
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	69db      	ldr	r3, [r3, #28]
 800f32a:	1c5a      	adds	r2, r3, #1
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f334:	1e5a      	subs	r2, r3, #1
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	625a      	str	r2, [r3, #36]	@ 0x24
      while(hqspi->TxXferCount > 0U)
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d1df      	bne.n	800f302 <HAL_QSPI_Transmit+0x86>
 800f342:	e000      	b.n	800f346 <HAL_QSPI_Transmit+0xca>
          break;
 800f344:	bf00      	nop
      }

      if (status == HAL_OK)
 800f346:	7ffb      	ldrb	r3, [r7, #31]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d115      	bne.n	800f378 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	9300      	str	r3, [sp, #0]
 800f350:	69bb      	ldr	r3, [r7, #24]
 800f352:	2201      	movs	r2, #1
 800f354:	2102      	movs	r1, #2
 800f356:	68f8      	ldr	r0, [r7, #12]
 800f358:	f000 f950 	bl	800f5fc <QSPI_WaitFlagStateUntilTimeout>
 800f35c:	4603      	mov	r3, r0
 800f35e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800f360:	7ffb      	ldrb	r3, [r7, #31]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d108      	bne.n	800f378 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	2202      	movs	r2, #2
 800f36c:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800f36e:	68f8      	ldr	r0, [r7, #12]
 800f370:	f000 f8bd 	bl	800f4ee <HAL_QSPI_Abort>
 800f374:	4603      	mov	r3, r0
 800f376:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	2201      	movs	r2, #1
 800f37c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f380:	e00a      	b.n	800f398 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f386:	f043 0208 	orr.w	r2, r3, #8
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800f38e:	2301      	movs	r3, #1
 800f390:	77fb      	strb	r3, [r7, #31]
 800f392:	e001      	b.n	800f398 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800f394:	2302      	movs	r3, #2
 800f396:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	2200      	movs	r2, #0
 800f39c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800f3a0:	7ffb      	ldrb	r3, [r7, #31]
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	3720      	adds	r7, #32
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}

0800f3aa <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800f3aa:	b580      	push	{r7, lr}
 800f3ac:	b08a      	sub	sp, #40	@ 0x28
 800f3ae:	af02      	add	r7, sp, #8
 800f3b0:	60f8      	str	r0, [r7, #12]
 800f3b2:	60b9      	str	r1, [r7, #8]
 800f3b4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800f3ba:	f7fb fe31 	bl	800b020 <HAL_GetTick>
 800f3be:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	699b      	ldr	r3, [r3, #24]
 800f3c6:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	3320      	adds	r3, #32
 800f3ce:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f3d6:	b2db      	uxtb	r3, r3
 800f3d8:	2b01      	cmp	r3, #1
 800f3da:	d101      	bne.n	800f3e0 <HAL_QSPI_Receive+0x36>
 800f3dc:	2302      	movs	r3, #2
 800f3de:	e082      	b.n	800f4e6 <HAL_QSPI_Receive+0x13c>
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	2201      	movs	r2, #1
 800f3e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f3ee:	b2db      	uxtb	r3, r3
 800f3f0:	2b01      	cmp	r3, #1
 800f3f2:	d171      	bne.n	800f4d8 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d062      	beq.n	800f4c6 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	2222      	movs	r2, #34	@ 0x22
 800f404:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	691b      	ldr	r3, [r3, #16]
 800f40e:	1c5a      	adds	r2, r3, #1
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	631a      	str	r2, [r3, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	691b      	ldr	r3, [r3, #16]
 800f41a:	1c5a      	adds	r2, r3, #1
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->pRxBuffPtr = pData;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	68ba      	ldr	r2, [r7, #8]
 800f424:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	695b      	ldr	r3, [r3, #20]
 800f42c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800f438:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	697a      	ldr	r2, [r7, #20]
 800f440:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800f442:	e01c      	b.n	800f47e <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	9300      	str	r3, [sp, #0]
 800f448:	69bb      	ldr	r3, [r7, #24]
 800f44a:	2201      	movs	r2, #1
 800f44c:	2106      	movs	r1, #6
 800f44e:	68f8      	ldr	r0, [r7, #12]
 800f450:	f000 f8d4 	bl	800f5fc <QSPI_WaitFlagStateUntilTimeout>
 800f454:	4603      	mov	r3, r0
 800f456:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800f458:	7ffb      	ldrb	r3, [r7, #31]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d114      	bne.n	800f488 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f462:	693a      	ldr	r2, [r7, #16]
 800f464:	7812      	ldrb	r2, [r2, #0]
 800f466:	b2d2      	uxtb	r2, r2
 800f468:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f46e:	1c5a      	adds	r2, r3, #1
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	629a      	str	r2, [r3, #40]	@ 0x28
        hqspi->RxXferCount--;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f478:	1e5a      	subs	r2, r3, #1
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	631a      	str	r2, [r3, #48]	@ 0x30
      while(hqspi->RxXferCount > 0U)
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f482:	2b00      	cmp	r3, #0
 800f484:	d1de      	bne.n	800f444 <HAL_QSPI_Receive+0x9a>
 800f486:	e000      	b.n	800f48a <HAL_QSPI_Receive+0xe0>
          break;
 800f488:	bf00      	nop
      }

      if (status == HAL_OK)
 800f48a:	7ffb      	ldrb	r3, [r7, #31]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d115      	bne.n	800f4bc <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	9300      	str	r3, [sp, #0]
 800f494:	69bb      	ldr	r3, [r7, #24]
 800f496:	2201      	movs	r2, #1
 800f498:	2102      	movs	r1, #2
 800f49a:	68f8      	ldr	r0, [r7, #12]
 800f49c:	f000 f8ae 	bl	800f5fc <QSPI_WaitFlagStateUntilTimeout>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800f4a4:	7ffb      	ldrb	r3, [r7, #31]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d108      	bne.n	800f4bc <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	2202      	movs	r2, #2
 800f4b0:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800f4b2:	68f8      	ldr	r0, [r7, #12]
 800f4b4:	f000 f81b 	bl	800f4ee <HAL_QSPI_Abort>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	2201      	movs	r2, #1
 800f4c0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f4c4:	e00a      	b.n	800f4dc <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4ca:	f043 0208 	orr.w	r2, r3, #8
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800f4d2:	2301      	movs	r3, #1
 800f4d4:	77fb      	strb	r3, [r7, #31]
 800f4d6:	e001      	b.n	800f4dc <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800f4d8:	2302      	movs	r3, #2
 800f4da:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	2200      	movs	r2, #0
 800f4e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800f4e4:	7ffb      	ldrb	r3, [r7, #31]
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3720      	adds	r7, #32
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}

0800f4ee <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800f4ee:	b580      	push	{r7, lr}
 800f4f0:	b086      	sub	sp, #24
 800f4f2:	af02      	add	r7, sp, #8
 800f4f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800f4fa:	f7fb fd91 	bl	800b020 <HAL_GetTick>
 800f4fe:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f506:	b2db      	uxtb	r3, r3
 800f508:	f003 0302 	and.w	r3, r3, #2
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d062      	beq.n	800f5d6 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2200      	movs	r2, #0
 800f514:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	f003 0304 	and.w	r3, r3, #4
 800f522:	2b00      	cmp	r3, #0
 800f524:	d017      	beq.n	800f556 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	681a      	ldr	r2, [r3, #0]
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	f022 0204 	bic.w	r2, r2, #4
 800f534:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f53a:	4618      	mov	r0, r3
 800f53c:	f7fd fdb6 	bl	800d0ac <HAL_DMA_Abort>
 800f540:	4603      	mov	r3, r0
 800f542:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800f544:	7bfb      	ldrb	r3, [r7, #15]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d005      	beq.n	800f556 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f54e:	f043 0204 	orr.w	r2, r3, #4
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	689b      	ldr	r3, [r3, #8]
 800f55c:	f003 0320 	and.w	r3, r3, #32
 800f560:	2b00      	cmp	r3, #0
 800f562:	d034      	beq.n	800f5ce <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	681a      	ldr	r2, [r3, #0]
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	f042 0202 	orr.w	r2, r2, #2
 800f572:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f578:	9300      	str	r3, [sp, #0]
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	2201      	movs	r2, #1
 800f57e:	2102      	movs	r1, #2
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f000 f83b 	bl	800f5fc <QSPI_WaitFlagStateUntilTimeout>
 800f586:	4603      	mov	r3, r0
 800f588:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 800f58a:	7bfb      	ldrb	r3, [r7, #15]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d10e      	bne.n	800f5ae <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	2202      	movs	r2, #2
 800f596:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f59c:	9300      	str	r3, [sp, #0]
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	2120      	movs	r1, #32
 800f5a4:	6878      	ldr	r0, [r7, #4]
 800f5a6:	f000 f829 	bl	800f5fc <QSPI_WaitFlagStateUntilTimeout>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800f5ae:	7bfb      	ldrb	r3, [r7, #15]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d110      	bne.n	800f5d6 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	695a      	ldr	r2, [r3, #20]
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800f5c2:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2201      	movs	r2, #1
 800f5c8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f5cc:	e003      	b.n	800f5d6 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	2201      	movs	r2, #1
 800f5d2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    }
  }

  return status;
 800f5d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	3710      	adds	r7, #16
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}

0800f5e0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b083      	sub	sp, #12
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
 800f5e8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	683a      	ldr	r2, [r7, #0]
 800f5ee:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800f5f0:	bf00      	nop
 800f5f2:	370c      	adds	r7, #12
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fa:	4770      	bx	lr

0800f5fc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b084      	sub	sp, #16
 800f600:	af00      	add	r7, sp, #0
 800f602:	60f8      	str	r0, [r7, #12]
 800f604:	60b9      	str	r1, [r7, #8]
 800f606:	603b      	str	r3, [r7, #0]
 800f608:	4613      	mov	r3, r2
 800f60a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f60c:	e01a      	b.n	800f644 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f60e:	69bb      	ldr	r3, [r7, #24]
 800f610:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f614:	d016      	beq.n	800f644 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f616:	f7fb fd03 	bl	800b020 <HAL_GetTick>
 800f61a:	4602      	mov	r2, r0
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	1ad3      	subs	r3, r2, r3
 800f620:	69ba      	ldr	r2, [r7, #24]
 800f622:	429a      	cmp	r2, r3
 800f624:	d302      	bcc.n	800f62c <QSPI_WaitFlagStateUntilTimeout+0x30>
 800f626:	69bb      	ldr	r3, [r7, #24]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d10b      	bne.n	800f644 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	2204      	movs	r2, #4
 800f630:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f638:	f043 0201 	orr.w	r2, r3, #1
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800f640:	2301      	movs	r3, #1
 800f642:	e00e      	b.n	800f662 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	689a      	ldr	r2, [r3, #8]
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	4013      	ands	r3, r2
 800f64e:	2b00      	cmp	r3, #0
 800f650:	bf14      	ite	ne
 800f652:	2301      	movne	r3, #1
 800f654:	2300      	moveq	r3, #0
 800f656:	b2db      	uxtb	r3, r3
 800f658:	461a      	mov	r2, r3
 800f65a:	79fb      	ldrb	r3, [r7, #7]
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d1d6      	bne.n	800f60e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f660:	2300      	movs	r3, #0
}
 800f662:	4618      	mov	r0, r3
 800f664:	3710      	adds	r7, #16
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}

0800f66a <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800f66a:	b480      	push	{r7}
 800f66c:	b085      	sub	sp, #20
 800f66e:	af00      	add	r7, sp, #0
 800f670:	60f8      	str	r0, [r7, #12]
 800f672:	60b9      	str	r1, [r7, #8]
 800f674:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d009      	beq.n	800f692 <QSPI_Config+0x28>
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f684:	d005      	beq.n	800f692 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	3a01      	subs	r2, #1
 800f690:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	699b      	ldr	r3, [r3, #24]
 800f696:	2b00      	cmp	r3, #0
 800f698:	f000 80c1 	beq.w	800f81e <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	6a1b      	ldr	r3, [r3, #32]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d063      	beq.n	800f76c <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	68ba      	ldr	r2, [r7, #8]
 800f6aa:	6892      	ldr	r2, [r2, #8]
 800f6ac:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	69db      	ldr	r3, [r3, #28]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d031      	beq.n	800f71a <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6be:	431a      	orrs	r2, r3
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f6c4:	431a      	orrs	r2, r3
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6ca:	431a      	orrs	r2, r3
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	695b      	ldr	r3, [r3, #20]
 800f6d0:	049b      	lsls	r3, r3, #18
 800f6d2:	431a      	orrs	r2, r3
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	691b      	ldr	r3, [r3, #16]
 800f6d8:	431a      	orrs	r2, r3
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	6a1b      	ldr	r3, [r3, #32]
 800f6de:	431a      	orrs	r2, r3
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	68db      	ldr	r3, [r3, #12]
 800f6e4:	431a      	orrs	r2, r3
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	69db      	ldr	r3, [r3, #28]
 800f6ea:	431a      	orrs	r2, r3
 800f6ec:	68bb      	ldr	r3, [r7, #8]
 800f6ee:	699b      	ldr	r3, [r3, #24]
 800f6f0:	431a      	orrs	r2, r3
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	ea42 0103 	orr.w	r1, r2, r3
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	687a      	ldr	r2, [r7, #4]
 800f700:	430a      	orrs	r2, r1
 800f702:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f70a:	f000 813f 	beq.w	800f98c <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	68ba      	ldr	r2, [r7, #8]
 800f714:	6852      	ldr	r2, [r2, #4]
 800f716:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800f718:	e138      	b.n	800f98c <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f722:	431a      	orrs	r2, r3
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f728:	431a      	orrs	r2, r3
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f72e:	431a      	orrs	r2, r3
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	695b      	ldr	r3, [r3, #20]
 800f734:	049b      	lsls	r3, r3, #18
 800f736:	431a      	orrs	r2, r3
 800f738:	68bb      	ldr	r3, [r7, #8]
 800f73a:	691b      	ldr	r3, [r3, #16]
 800f73c:	431a      	orrs	r2, r3
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	6a1b      	ldr	r3, [r3, #32]
 800f742:	431a      	orrs	r2, r3
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	69db      	ldr	r3, [r3, #28]
 800f748:	431a      	orrs	r2, r3
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	699b      	ldr	r3, [r3, #24]
 800f74e:	431a      	orrs	r2, r3
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	ea42 0103 	orr.w	r1, r2, r3
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	687a      	ldr	r2, [r7, #4]
 800f75e:	430a      	orrs	r2, r1
 800f760:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	2200      	movs	r2, #0
 800f768:	619a      	str	r2, [r3, #24]
}
 800f76a:	e10f      	b.n	800f98c <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	69db      	ldr	r3, [r3, #28]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d02e      	beq.n	800f7d2 <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f774:	68bb      	ldr	r3, [r7, #8]
 800f776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f778:	68bb      	ldr	r3, [r7, #8]
 800f77a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f77c:	431a      	orrs	r2, r3
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f782:	431a      	orrs	r2, r3
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f788:	431a      	orrs	r2, r3
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	695b      	ldr	r3, [r3, #20]
 800f78e:	049b      	lsls	r3, r3, #18
 800f790:	431a      	orrs	r2, r3
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	6a1b      	ldr	r3, [r3, #32]
 800f796:	431a      	orrs	r2, r3
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	68db      	ldr	r3, [r3, #12]
 800f79c:	431a      	orrs	r2, r3
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	69db      	ldr	r3, [r3, #28]
 800f7a2:	431a      	orrs	r2, r3
 800f7a4:	68bb      	ldr	r3, [r7, #8]
 800f7a6:	699b      	ldr	r3, [r3, #24]
 800f7a8:	431a      	orrs	r2, r3
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	ea42 0103 	orr.w	r1, r2, r3
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	687a      	ldr	r2, [r7, #4]
 800f7b8:	430a      	orrs	r2, r1
 800f7ba:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f7c2:	f000 80e3 	beq.w	800f98c <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	68ba      	ldr	r2, [r7, #8]
 800f7cc:	6852      	ldr	r2, [r2, #4]
 800f7ce:	619a      	str	r2, [r3, #24]
}
 800f7d0:	e0dc      	b.n	800f98c <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7da:	431a      	orrs	r2, r3
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f7e0:	431a      	orrs	r2, r3
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7e6:	431a      	orrs	r2, r3
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	695b      	ldr	r3, [r3, #20]
 800f7ec:	049b      	lsls	r3, r3, #18
 800f7ee:	431a      	orrs	r2, r3
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	6a1b      	ldr	r3, [r3, #32]
 800f7f4:	431a      	orrs	r2, r3
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	69db      	ldr	r3, [r3, #28]
 800f7fa:	431a      	orrs	r2, r3
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	699b      	ldr	r3, [r3, #24]
 800f800:	431a      	orrs	r2, r3
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	ea42 0103 	orr.w	r1, r2, r3
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	687a      	ldr	r2, [r7, #4]
 800f810:	430a      	orrs	r2, r1
 800f812:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	2200      	movs	r2, #0
 800f81a:	619a      	str	r2, [r3, #24]
}
 800f81c:	e0b6      	b.n	800f98c <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	6a1b      	ldr	r3, [r3, #32]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d05d      	beq.n	800f8e2 <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	68ba      	ldr	r2, [r7, #8]
 800f82c:	6892      	ldr	r2, [r2, #8]
 800f82e:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	69db      	ldr	r3, [r3, #28]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d02e      	beq.n	800f896 <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f840:	431a      	orrs	r2, r3
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f846:	431a      	orrs	r2, r3
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f84c:	431a      	orrs	r2, r3
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	695b      	ldr	r3, [r3, #20]
 800f852:	049b      	lsls	r3, r3, #18
 800f854:	431a      	orrs	r2, r3
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	691b      	ldr	r3, [r3, #16]
 800f85a:	431a      	orrs	r2, r3
 800f85c:	68bb      	ldr	r3, [r7, #8]
 800f85e:	6a1b      	ldr	r3, [r3, #32]
 800f860:	431a      	orrs	r2, r3
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	68db      	ldr	r3, [r3, #12]
 800f866:	431a      	orrs	r2, r3
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	69db      	ldr	r3, [r3, #28]
 800f86c:	431a      	orrs	r2, r3
 800f86e:	68bb      	ldr	r3, [r7, #8]
 800f870:	699b      	ldr	r3, [r3, #24]
 800f872:	ea42 0103 	orr.w	r1, r2, r3
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	687a      	ldr	r2, [r7, #4]
 800f87c:	430a      	orrs	r2, r1
 800f87e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f886:	f000 8081 	beq.w	800f98c <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	68ba      	ldr	r2, [r7, #8]
 800f890:	6852      	ldr	r2, [r2, #4]
 800f892:	619a      	str	r2, [r3, #24]
}
 800f894:	e07a      	b.n	800f98c <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f896:	68bb      	ldr	r3, [r7, #8]
 800f898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f89e:	431a      	orrs	r2, r3
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8a4:	431a      	orrs	r2, r3
 800f8a6:	68bb      	ldr	r3, [r7, #8]
 800f8a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8aa:	431a      	orrs	r2, r3
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	695b      	ldr	r3, [r3, #20]
 800f8b0:	049b      	lsls	r3, r3, #18
 800f8b2:	431a      	orrs	r2, r3
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	691b      	ldr	r3, [r3, #16]
 800f8b8:	431a      	orrs	r2, r3
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	6a1b      	ldr	r3, [r3, #32]
 800f8be:	431a      	orrs	r2, r3
 800f8c0:	68bb      	ldr	r3, [r7, #8]
 800f8c2:	69db      	ldr	r3, [r3, #28]
 800f8c4:	431a      	orrs	r2, r3
 800f8c6:	68bb      	ldr	r3, [r7, #8]
 800f8c8:	699b      	ldr	r3, [r3, #24]
 800f8ca:	ea42 0103 	orr.w	r1, r2, r3
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	687a      	ldr	r2, [r7, #4]
 800f8d4:	430a      	orrs	r2, r1
 800f8d6:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	2200      	movs	r2, #0
 800f8de:	619a      	str	r2, [r3, #24]
}
 800f8e0:	e054      	b.n	800f98c <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f8e2:	68bb      	ldr	r3, [r7, #8]
 800f8e4:	69db      	ldr	r3, [r3, #28]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d02a      	beq.n	800f940 <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8f2:	431a      	orrs	r2, r3
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8f8:	431a      	orrs	r2, r3
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8fe:	431a      	orrs	r2, r3
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	695b      	ldr	r3, [r3, #20]
 800f904:	049b      	lsls	r3, r3, #18
 800f906:	431a      	orrs	r2, r3
 800f908:	68bb      	ldr	r3, [r7, #8]
 800f90a:	6a1b      	ldr	r3, [r3, #32]
 800f90c:	431a      	orrs	r2, r3
 800f90e:	68bb      	ldr	r3, [r7, #8]
 800f910:	68db      	ldr	r3, [r3, #12]
 800f912:	431a      	orrs	r2, r3
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	69db      	ldr	r3, [r3, #28]
 800f918:	431a      	orrs	r2, r3
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	699b      	ldr	r3, [r3, #24]
 800f91e:	ea42 0103 	orr.w	r1, r2, r3
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	687a      	ldr	r2, [r7, #4]
 800f928:	430a      	orrs	r2, r1
 800f92a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f932:	d02b      	beq.n	800f98c <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	68ba      	ldr	r2, [r7, #8]
 800f93a:	6852      	ldr	r2, [r2, #4]
 800f93c:	619a      	str	r2, [r3, #24]
}
 800f93e:	e025      	b.n	800f98c <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f944:	2b00      	cmp	r3, #0
 800f946:	d021      	beq.n	800f98c <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f950:	431a      	orrs	r2, r3
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f956:	431a      	orrs	r2, r3
 800f958:	68bb      	ldr	r3, [r7, #8]
 800f95a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f95c:	431a      	orrs	r2, r3
 800f95e:	68bb      	ldr	r3, [r7, #8]
 800f960:	695b      	ldr	r3, [r3, #20]
 800f962:	049b      	lsls	r3, r3, #18
 800f964:	431a      	orrs	r2, r3
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	6a1b      	ldr	r3, [r3, #32]
 800f96a:	431a      	orrs	r2, r3
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	69db      	ldr	r3, [r3, #28]
 800f970:	431a      	orrs	r2, r3
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	699b      	ldr	r3, [r3, #24]
 800f976:	ea42 0103 	orr.w	r1, r2, r3
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	687a      	ldr	r2, [r7, #4]
 800f980:	430a      	orrs	r2, r1
 800f982:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	2200      	movs	r2, #0
 800f98a:	619a      	str	r2, [r3, #24]
}
 800f98c:	bf00      	nop
 800f98e:	3714      	adds	r7, #20
 800f990:	46bd      	mov	sp, r7
 800f992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f996:	4770      	bx	lr

0800f998 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b088      	sub	sp, #32
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d101      	bne.n	800f9aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	e3ca      	b.n	8010140 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f9aa:	4b97      	ldr	r3, [pc, #604]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800f9ac:	689b      	ldr	r3, [r3, #8]
 800f9ae:	f003 030c 	and.w	r3, r3, #12
 800f9b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f9b4:	4b94      	ldr	r3, [pc, #592]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800f9b6:	68db      	ldr	r3, [r3, #12]
 800f9b8:	f003 0303 	and.w	r3, r3, #3
 800f9bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	f003 0310 	and.w	r3, r3, #16
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	f000 80e4 	beq.w	800fb94 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800f9cc:	69bb      	ldr	r3, [r7, #24]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d007      	beq.n	800f9e2 <HAL_RCC_OscConfig+0x4a>
 800f9d2:	69bb      	ldr	r3, [r7, #24]
 800f9d4:	2b0c      	cmp	r3, #12
 800f9d6:	f040 808b 	bne.w	800faf0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	2b01      	cmp	r3, #1
 800f9de:	f040 8087 	bne.w	800faf0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f9e2:	4b89      	ldr	r3, [pc, #548]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	f003 0302 	and.w	r3, r3, #2
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d005      	beq.n	800f9fa <HAL_RCC_OscConfig+0x62>
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	699b      	ldr	r3, [r3, #24]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d101      	bne.n	800f9fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	e3a2      	b.n	8010140 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6a1a      	ldr	r2, [r3, #32]
 800f9fe:	4b82      	ldr	r3, [pc, #520]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	f003 0308 	and.w	r3, r3, #8
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d004      	beq.n	800fa14 <HAL_RCC_OscConfig+0x7c>
 800fa0a:	4b7f      	ldr	r3, [pc, #508]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fa12:	e005      	b.n	800fa20 <HAL_RCC_OscConfig+0x88>
 800fa14:	4b7c      	ldr	r3, [pc, #496]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fa16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fa1a:	091b      	lsrs	r3, r3, #4
 800fa1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fa20:	4293      	cmp	r3, r2
 800fa22:	d223      	bcs.n	800fa6c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	6a1b      	ldr	r3, [r3, #32]
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f000 fd55 	bl	80104d8 <RCC_SetFlashLatencyFromMSIRange>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d001      	beq.n	800fa38 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800fa34:	2301      	movs	r3, #1
 800fa36:	e383      	b.n	8010140 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fa38:	4b73      	ldr	r3, [pc, #460]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	4a72      	ldr	r2, [pc, #456]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fa3e:	f043 0308 	orr.w	r3, r3, #8
 800fa42:	6013      	str	r3, [r2, #0]
 800fa44:	4b70      	ldr	r3, [pc, #448]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	6a1b      	ldr	r3, [r3, #32]
 800fa50:	496d      	ldr	r1, [pc, #436]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fa52:	4313      	orrs	r3, r2
 800fa54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fa56:	4b6c      	ldr	r3, [pc, #432]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fa58:	685b      	ldr	r3, [r3, #4]
 800fa5a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	69db      	ldr	r3, [r3, #28]
 800fa62:	021b      	lsls	r3, r3, #8
 800fa64:	4968      	ldr	r1, [pc, #416]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fa66:	4313      	orrs	r3, r2
 800fa68:	604b      	str	r3, [r1, #4]
 800fa6a:	e025      	b.n	800fab8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fa6c:	4b66      	ldr	r3, [pc, #408]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	4a65      	ldr	r2, [pc, #404]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fa72:	f043 0308 	orr.w	r3, r3, #8
 800fa76:	6013      	str	r3, [r2, #0]
 800fa78:	4b63      	ldr	r3, [pc, #396]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6a1b      	ldr	r3, [r3, #32]
 800fa84:	4960      	ldr	r1, [pc, #384]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fa86:	4313      	orrs	r3, r2
 800fa88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fa8a:	4b5f      	ldr	r3, [pc, #380]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fa8c:	685b      	ldr	r3, [r3, #4]
 800fa8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	69db      	ldr	r3, [r3, #28]
 800fa96:	021b      	lsls	r3, r3, #8
 800fa98:	495b      	ldr	r1, [pc, #364]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fa9a:	4313      	orrs	r3, r2
 800fa9c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800fa9e:	69bb      	ldr	r3, [r7, #24]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d109      	bne.n	800fab8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6a1b      	ldr	r3, [r3, #32]
 800faa8:	4618      	mov	r0, r3
 800faaa:	f000 fd15 	bl	80104d8 <RCC_SetFlashLatencyFromMSIRange>
 800faae:	4603      	mov	r3, r0
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d001      	beq.n	800fab8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800fab4:	2301      	movs	r3, #1
 800fab6:	e343      	b.n	8010140 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800fab8:	f000 fc4a 	bl	8010350 <HAL_RCC_GetSysClockFreq>
 800fabc:	4602      	mov	r2, r0
 800fabe:	4b52      	ldr	r3, [pc, #328]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fac0:	689b      	ldr	r3, [r3, #8]
 800fac2:	091b      	lsrs	r3, r3, #4
 800fac4:	f003 030f 	and.w	r3, r3, #15
 800fac8:	4950      	ldr	r1, [pc, #320]	@ (800fc0c <HAL_RCC_OscConfig+0x274>)
 800faca:	5ccb      	ldrb	r3, [r1, r3]
 800facc:	f003 031f 	and.w	r3, r3, #31
 800fad0:	fa22 f303 	lsr.w	r3, r2, r3
 800fad4:	4a4e      	ldr	r2, [pc, #312]	@ (800fc10 <HAL_RCC_OscConfig+0x278>)
 800fad6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800fad8:	4b4e      	ldr	r3, [pc, #312]	@ (800fc14 <HAL_RCC_OscConfig+0x27c>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	4618      	mov	r0, r3
 800fade:	f7fb fa4f 	bl	800af80 <HAL_InitTick>
 800fae2:	4603      	mov	r3, r0
 800fae4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800fae6:	7bfb      	ldrb	r3, [r7, #15]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d052      	beq.n	800fb92 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800faec:	7bfb      	ldrb	r3, [r7, #15]
 800faee:	e327      	b.n	8010140 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	699b      	ldr	r3, [r3, #24]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d032      	beq.n	800fb5e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800faf8:	4b43      	ldr	r3, [pc, #268]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	4a42      	ldr	r2, [pc, #264]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fafe:	f043 0301 	orr.w	r3, r3, #1
 800fb02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800fb04:	f7fb fa8c 	bl	800b020 <HAL_GetTick>
 800fb08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800fb0a:	e008      	b.n	800fb1e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fb0c:	f7fb fa88 	bl	800b020 <HAL_GetTick>
 800fb10:	4602      	mov	r2, r0
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	1ad3      	subs	r3, r2, r3
 800fb16:	2b02      	cmp	r3, #2
 800fb18:	d901      	bls.n	800fb1e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800fb1a:	2303      	movs	r3, #3
 800fb1c:	e310      	b.n	8010140 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800fb1e:	4b3a      	ldr	r3, [pc, #232]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	f003 0302 	and.w	r3, r3, #2
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d0f0      	beq.n	800fb0c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fb2a:	4b37      	ldr	r3, [pc, #220]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	4a36      	ldr	r2, [pc, #216]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fb30:	f043 0308 	orr.w	r3, r3, #8
 800fb34:	6013      	str	r3, [r2, #0]
 800fb36:	4b34      	ldr	r3, [pc, #208]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	6a1b      	ldr	r3, [r3, #32]
 800fb42:	4931      	ldr	r1, [pc, #196]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fb44:	4313      	orrs	r3, r2
 800fb46:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fb48:	4b2f      	ldr	r3, [pc, #188]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fb4a:	685b      	ldr	r3, [r3, #4]
 800fb4c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	69db      	ldr	r3, [r3, #28]
 800fb54:	021b      	lsls	r3, r3, #8
 800fb56:	492c      	ldr	r1, [pc, #176]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fb58:	4313      	orrs	r3, r2
 800fb5a:	604b      	str	r3, [r1, #4]
 800fb5c:	e01a      	b.n	800fb94 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800fb5e:	4b2a      	ldr	r3, [pc, #168]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	4a29      	ldr	r2, [pc, #164]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fb64:	f023 0301 	bic.w	r3, r3, #1
 800fb68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800fb6a:	f7fb fa59 	bl	800b020 <HAL_GetTick>
 800fb6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800fb70:	e008      	b.n	800fb84 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fb72:	f7fb fa55 	bl	800b020 <HAL_GetTick>
 800fb76:	4602      	mov	r2, r0
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	1ad3      	subs	r3, r2, r3
 800fb7c:	2b02      	cmp	r3, #2
 800fb7e:	d901      	bls.n	800fb84 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800fb80:	2303      	movs	r3, #3
 800fb82:	e2dd      	b.n	8010140 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800fb84:	4b20      	ldr	r3, [pc, #128]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	f003 0302 	and.w	r3, r3, #2
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d1f0      	bne.n	800fb72 <HAL_RCC_OscConfig+0x1da>
 800fb90:	e000      	b.n	800fb94 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800fb92:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	f003 0301 	and.w	r3, r3, #1
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d074      	beq.n	800fc8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800fba0:	69bb      	ldr	r3, [r7, #24]
 800fba2:	2b08      	cmp	r3, #8
 800fba4:	d005      	beq.n	800fbb2 <HAL_RCC_OscConfig+0x21a>
 800fba6:	69bb      	ldr	r3, [r7, #24]
 800fba8:	2b0c      	cmp	r3, #12
 800fbaa:	d10e      	bne.n	800fbca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	2b03      	cmp	r3, #3
 800fbb0:	d10b      	bne.n	800fbca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fbb2:	4b15      	ldr	r3, [pc, #84]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d064      	beq.n	800fc88 <HAL_RCC_OscConfig+0x2f0>
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	685b      	ldr	r3, [r3, #4]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d160      	bne.n	800fc88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	e2ba      	b.n	8010140 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	685b      	ldr	r3, [r3, #4]
 800fbce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fbd2:	d106      	bne.n	800fbe2 <HAL_RCC_OscConfig+0x24a>
 800fbd4:	4b0c      	ldr	r3, [pc, #48]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	4a0b      	ldr	r2, [pc, #44]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fbda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fbde:	6013      	str	r3, [r2, #0]
 800fbe0:	e026      	b.n	800fc30 <HAL_RCC_OscConfig+0x298>
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	685b      	ldr	r3, [r3, #4]
 800fbe6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800fbea:	d115      	bne.n	800fc18 <HAL_RCC_OscConfig+0x280>
 800fbec:	4b06      	ldr	r3, [pc, #24]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	4a05      	ldr	r2, [pc, #20]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fbf2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800fbf6:	6013      	str	r3, [r2, #0]
 800fbf8:	4b03      	ldr	r3, [pc, #12]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	4a02      	ldr	r2, [pc, #8]	@ (800fc08 <HAL_RCC_OscConfig+0x270>)
 800fbfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fc02:	6013      	str	r3, [r2, #0]
 800fc04:	e014      	b.n	800fc30 <HAL_RCC_OscConfig+0x298>
 800fc06:	bf00      	nop
 800fc08:	40021000 	.word	0x40021000
 800fc0c:	08017860 	.word	0x08017860
 800fc10:	20000268 	.word	0x20000268
 800fc14:	20000274 	.word	0x20000274
 800fc18:	4ba0      	ldr	r3, [pc, #640]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	4a9f      	ldr	r2, [pc, #636]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fc1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fc22:	6013      	str	r3, [r2, #0]
 800fc24:	4b9d      	ldr	r3, [pc, #628]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	4a9c      	ldr	r2, [pc, #624]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fc2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800fc2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	685b      	ldr	r3, [r3, #4]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d013      	beq.n	800fc60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fc38:	f7fb f9f2 	bl	800b020 <HAL_GetTick>
 800fc3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800fc3e:	e008      	b.n	800fc52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fc40:	f7fb f9ee 	bl	800b020 <HAL_GetTick>
 800fc44:	4602      	mov	r2, r0
 800fc46:	693b      	ldr	r3, [r7, #16]
 800fc48:	1ad3      	subs	r3, r2, r3
 800fc4a:	2b64      	cmp	r3, #100	@ 0x64
 800fc4c:	d901      	bls.n	800fc52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800fc4e:	2303      	movs	r3, #3
 800fc50:	e276      	b.n	8010140 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800fc52:	4b92      	ldr	r3, [pc, #584]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d0f0      	beq.n	800fc40 <HAL_RCC_OscConfig+0x2a8>
 800fc5e:	e014      	b.n	800fc8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fc60:	f7fb f9de 	bl	800b020 <HAL_GetTick>
 800fc64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800fc66:	e008      	b.n	800fc7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fc68:	f7fb f9da 	bl	800b020 <HAL_GetTick>
 800fc6c:	4602      	mov	r2, r0
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	1ad3      	subs	r3, r2, r3
 800fc72:	2b64      	cmp	r3, #100	@ 0x64
 800fc74:	d901      	bls.n	800fc7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800fc76:	2303      	movs	r3, #3
 800fc78:	e262      	b.n	8010140 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800fc7a:	4b88      	ldr	r3, [pc, #544]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d1f0      	bne.n	800fc68 <HAL_RCC_OscConfig+0x2d0>
 800fc86:	e000      	b.n	800fc8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fc88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	f003 0302 	and.w	r3, r3, #2
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d060      	beq.n	800fd58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800fc96:	69bb      	ldr	r3, [r7, #24]
 800fc98:	2b04      	cmp	r3, #4
 800fc9a:	d005      	beq.n	800fca8 <HAL_RCC_OscConfig+0x310>
 800fc9c:	69bb      	ldr	r3, [r7, #24]
 800fc9e:	2b0c      	cmp	r3, #12
 800fca0:	d119      	bne.n	800fcd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	2b02      	cmp	r3, #2
 800fca6:	d116      	bne.n	800fcd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800fca8:	4b7c      	ldr	r3, [pc, #496]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d005      	beq.n	800fcc0 <HAL_RCC_OscConfig+0x328>
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	68db      	ldr	r3, [r3, #12]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d101      	bne.n	800fcc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800fcbc:	2301      	movs	r3, #1
 800fcbe:	e23f      	b.n	8010140 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fcc0:	4b76      	ldr	r3, [pc, #472]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fcc2:	685b      	ldr	r3, [r3, #4]
 800fcc4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	691b      	ldr	r3, [r3, #16]
 800fccc:	061b      	lsls	r3, r3, #24
 800fcce:	4973      	ldr	r1, [pc, #460]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fcd0:	4313      	orrs	r3, r2
 800fcd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800fcd4:	e040      	b.n	800fd58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	68db      	ldr	r3, [r3, #12]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d023      	beq.n	800fd26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800fcde:	4b6f      	ldr	r3, [pc, #444]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	4a6e      	ldr	r2, [pc, #440]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fcea:	f7fb f999 	bl	800b020 <HAL_GetTick>
 800fcee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800fcf0:	e008      	b.n	800fd04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fcf2:	f7fb f995 	bl	800b020 <HAL_GetTick>
 800fcf6:	4602      	mov	r2, r0
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	1ad3      	subs	r3, r2, r3
 800fcfc:	2b02      	cmp	r3, #2
 800fcfe:	d901      	bls.n	800fd04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800fd00:	2303      	movs	r3, #3
 800fd02:	e21d      	b.n	8010140 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800fd04:	4b65      	ldr	r3, [pc, #404]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d0f0      	beq.n	800fcf2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fd10:	4b62      	ldr	r3, [pc, #392]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fd12:	685b      	ldr	r3, [r3, #4]
 800fd14:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	691b      	ldr	r3, [r3, #16]
 800fd1c:	061b      	lsls	r3, r3, #24
 800fd1e:	495f      	ldr	r1, [pc, #380]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fd20:	4313      	orrs	r3, r2
 800fd22:	604b      	str	r3, [r1, #4]
 800fd24:	e018      	b.n	800fd58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800fd26:	4b5d      	ldr	r3, [pc, #372]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	4a5c      	ldr	r2, [pc, #368]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fd2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fd30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fd32:	f7fb f975 	bl	800b020 <HAL_GetTick>
 800fd36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800fd38:	e008      	b.n	800fd4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fd3a:	f7fb f971 	bl	800b020 <HAL_GetTick>
 800fd3e:	4602      	mov	r2, r0
 800fd40:	693b      	ldr	r3, [r7, #16]
 800fd42:	1ad3      	subs	r3, r2, r3
 800fd44:	2b02      	cmp	r3, #2
 800fd46:	d901      	bls.n	800fd4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800fd48:	2303      	movs	r3, #3
 800fd4a:	e1f9      	b.n	8010140 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800fd4c:	4b53      	ldr	r3, [pc, #332]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d1f0      	bne.n	800fd3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	f003 0308 	and.w	r3, r3, #8
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d03c      	beq.n	800fdde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	695b      	ldr	r3, [r3, #20]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d01c      	beq.n	800fda6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fd6c:	4b4b      	ldr	r3, [pc, #300]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fd6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fd72:	4a4a      	ldr	r2, [pc, #296]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fd74:	f043 0301 	orr.w	r3, r3, #1
 800fd78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fd7c:	f7fb f950 	bl	800b020 <HAL_GetTick>
 800fd80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800fd82:	e008      	b.n	800fd96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fd84:	f7fb f94c 	bl	800b020 <HAL_GetTick>
 800fd88:	4602      	mov	r2, r0
 800fd8a:	693b      	ldr	r3, [r7, #16]
 800fd8c:	1ad3      	subs	r3, r2, r3
 800fd8e:	2b02      	cmp	r3, #2
 800fd90:	d901      	bls.n	800fd96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800fd92:	2303      	movs	r3, #3
 800fd94:	e1d4      	b.n	8010140 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800fd96:	4b41      	ldr	r3, [pc, #260]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fd98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fd9c:	f003 0302 	and.w	r3, r3, #2
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d0ef      	beq.n	800fd84 <HAL_RCC_OscConfig+0x3ec>
 800fda4:	e01b      	b.n	800fdde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fda6:	4b3d      	ldr	r3, [pc, #244]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fda8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fdac:	4a3b      	ldr	r2, [pc, #236]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fdae:	f023 0301 	bic.w	r3, r3, #1
 800fdb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fdb6:	f7fb f933 	bl	800b020 <HAL_GetTick>
 800fdba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800fdbc:	e008      	b.n	800fdd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fdbe:	f7fb f92f 	bl	800b020 <HAL_GetTick>
 800fdc2:	4602      	mov	r2, r0
 800fdc4:	693b      	ldr	r3, [r7, #16]
 800fdc6:	1ad3      	subs	r3, r2, r3
 800fdc8:	2b02      	cmp	r3, #2
 800fdca:	d901      	bls.n	800fdd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800fdcc:	2303      	movs	r3, #3
 800fdce:	e1b7      	b.n	8010140 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800fdd0:	4b32      	ldr	r3, [pc, #200]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fdd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fdd6:	f003 0302 	and.w	r3, r3, #2
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d1ef      	bne.n	800fdbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	f003 0304 	and.w	r3, r3, #4
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	f000 80a6 	beq.w	800ff38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fdec:	2300      	movs	r3, #0
 800fdee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800fdf0:	4b2a      	ldr	r3, [pc, #168]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fdf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fdf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d10d      	bne.n	800fe18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fdfc:	4b27      	ldr	r3, [pc, #156]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fdfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fe00:	4a26      	ldr	r2, [pc, #152]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fe02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fe06:	6593      	str	r3, [r2, #88]	@ 0x58
 800fe08:	4b24      	ldr	r3, [pc, #144]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fe0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fe0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fe10:	60bb      	str	r3, [r7, #8]
 800fe12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800fe14:	2301      	movs	r3, #1
 800fe16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fe18:	4b21      	ldr	r3, [pc, #132]	@ (800fea0 <HAL_RCC_OscConfig+0x508>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d118      	bne.n	800fe56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fe24:	4b1e      	ldr	r3, [pc, #120]	@ (800fea0 <HAL_RCC_OscConfig+0x508>)
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	4a1d      	ldr	r2, [pc, #116]	@ (800fea0 <HAL_RCC_OscConfig+0x508>)
 800fe2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fe2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fe30:	f7fb f8f6 	bl	800b020 <HAL_GetTick>
 800fe34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fe36:	e008      	b.n	800fe4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fe38:	f7fb f8f2 	bl	800b020 <HAL_GetTick>
 800fe3c:	4602      	mov	r2, r0
 800fe3e:	693b      	ldr	r3, [r7, #16]
 800fe40:	1ad3      	subs	r3, r2, r3
 800fe42:	2b02      	cmp	r3, #2
 800fe44:	d901      	bls.n	800fe4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800fe46:	2303      	movs	r3, #3
 800fe48:	e17a      	b.n	8010140 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fe4a:	4b15      	ldr	r3, [pc, #84]	@ (800fea0 <HAL_RCC_OscConfig+0x508>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d0f0      	beq.n	800fe38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	689b      	ldr	r3, [r3, #8]
 800fe5a:	2b01      	cmp	r3, #1
 800fe5c:	d108      	bne.n	800fe70 <HAL_RCC_OscConfig+0x4d8>
 800fe5e:	4b0f      	ldr	r3, [pc, #60]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fe60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe64:	4a0d      	ldr	r2, [pc, #52]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fe66:	f043 0301 	orr.w	r3, r3, #1
 800fe6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800fe6e:	e029      	b.n	800fec4 <HAL_RCC_OscConfig+0x52c>
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	689b      	ldr	r3, [r3, #8]
 800fe74:	2b05      	cmp	r3, #5
 800fe76:	d115      	bne.n	800fea4 <HAL_RCC_OscConfig+0x50c>
 800fe78:	4b08      	ldr	r3, [pc, #32]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fe7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe7e:	4a07      	ldr	r2, [pc, #28]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fe80:	f043 0304 	orr.w	r3, r3, #4
 800fe84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800fe88:	4b04      	ldr	r3, [pc, #16]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fe8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe8e:	4a03      	ldr	r2, [pc, #12]	@ (800fe9c <HAL_RCC_OscConfig+0x504>)
 800fe90:	f043 0301 	orr.w	r3, r3, #1
 800fe94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800fe98:	e014      	b.n	800fec4 <HAL_RCC_OscConfig+0x52c>
 800fe9a:	bf00      	nop
 800fe9c:	40021000 	.word	0x40021000
 800fea0:	40007000 	.word	0x40007000
 800fea4:	4b9c      	ldr	r3, [pc, #624]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 800fea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800feaa:	4a9b      	ldr	r2, [pc, #620]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 800feac:	f023 0301 	bic.w	r3, r3, #1
 800feb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800feb4:	4b98      	ldr	r3, [pc, #608]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 800feb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800feba:	4a97      	ldr	r2, [pc, #604]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 800febc:	f023 0304 	bic.w	r3, r3, #4
 800fec0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	689b      	ldr	r3, [r3, #8]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d016      	beq.n	800fefa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fecc:	f7fb f8a8 	bl	800b020 <HAL_GetTick>
 800fed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fed2:	e00a      	b.n	800feea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fed4:	f7fb f8a4 	bl	800b020 <HAL_GetTick>
 800fed8:	4602      	mov	r2, r0
 800feda:	693b      	ldr	r3, [r7, #16]
 800fedc:	1ad3      	subs	r3, r2, r3
 800fede:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fee2:	4293      	cmp	r3, r2
 800fee4:	d901      	bls.n	800feea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800fee6:	2303      	movs	r3, #3
 800fee8:	e12a      	b.n	8010140 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800feea:	4b8b      	ldr	r3, [pc, #556]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 800feec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fef0:	f003 0302 	and.w	r3, r3, #2
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d0ed      	beq.n	800fed4 <HAL_RCC_OscConfig+0x53c>
 800fef8:	e015      	b.n	800ff26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fefa:	f7fb f891 	bl	800b020 <HAL_GetTick>
 800fefe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ff00:	e00a      	b.n	800ff18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ff02:	f7fb f88d 	bl	800b020 <HAL_GetTick>
 800ff06:	4602      	mov	r2, r0
 800ff08:	693b      	ldr	r3, [r7, #16]
 800ff0a:	1ad3      	subs	r3, r2, r3
 800ff0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff10:	4293      	cmp	r3, r2
 800ff12:	d901      	bls.n	800ff18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800ff14:	2303      	movs	r3, #3
 800ff16:	e113      	b.n	8010140 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ff18:	4b7f      	ldr	r3, [pc, #508]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 800ff1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff1e:	f003 0302 	and.w	r3, r3, #2
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d1ed      	bne.n	800ff02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ff26:	7ffb      	ldrb	r3, [r7, #31]
 800ff28:	2b01      	cmp	r3, #1
 800ff2a:	d105      	bne.n	800ff38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ff2c:	4b7a      	ldr	r3, [pc, #488]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 800ff2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ff30:	4a79      	ldr	r2, [pc, #484]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 800ff32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ff36:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	f000 80fe 	beq.w	801013e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff46:	2b02      	cmp	r3, #2
 800ff48:	f040 80d0 	bne.w	80100ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800ff4c:	4b72      	ldr	r3, [pc, #456]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 800ff4e:	68db      	ldr	r3, [r3, #12]
 800ff50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ff52:	697b      	ldr	r3, [r7, #20]
 800ff54:	f003 0203 	and.w	r2, r3, #3
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff5c:	429a      	cmp	r2, r3
 800ff5e:	d130      	bne.n	800ffc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ff60:	697b      	ldr	r3, [r7, #20]
 800ff62:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff6a:	3b01      	subs	r3, #1
 800ff6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ff6e:	429a      	cmp	r2, r3
 800ff70:	d127      	bne.n	800ffc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	d11f      	bne.n	800ffc2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ff88:	687a      	ldr	r2, [r7, #4]
 800ff8a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ff8c:	2a07      	cmp	r2, #7
 800ff8e:	bf14      	ite	ne
 800ff90:	2201      	movne	r2, #1
 800ff92:	2200      	moveq	r2, #0
 800ff94:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ff96:	4293      	cmp	r3, r2
 800ff98:	d113      	bne.n	800ffc2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ff9a:	697b      	ldr	r3, [r7, #20]
 800ff9c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffa4:	085b      	lsrs	r3, r3, #1
 800ffa6:	3b01      	subs	r3, #1
 800ffa8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800ffaa:	429a      	cmp	r2, r3
 800ffac:	d109      	bne.n	800ffc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ffae:	697b      	ldr	r3, [r7, #20]
 800ffb0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffb8:	085b      	lsrs	r3, r3, #1
 800ffba:	3b01      	subs	r3, #1
 800ffbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d06e      	beq.n	80100a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ffc2:	69bb      	ldr	r3, [r7, #24]
 800ffc4:	2b0c      	cmp	r3, #12
 800ffc6:	d069      	beq.n	801009c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ffc8:	4b53      	ldr	r3, [pc, #332]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d105      	bne.n	800ffe0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800ffd4:	4b50      	ldr	r3, [pc, #320]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d001      	beq.n	800ffe4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800ffe0:	2301      	movs	r3, #1
 800ffe2:	e0ad      	b.n	8010140 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ffe4:	4b4c      	ldr	r3, [pc, #304]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	4a4b      	ldr	r2, [pc, #300]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 800ffea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ffee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800fff0:	f7fb f816 	bl	800b020 <HAL_GetTick>
 800fff4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fff6:	e008      	b.n	801000a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fff8:	f7fb f812 	bl	800b020 <HAL_GetTick>
 800fffc:	4602      	mov	r2, r0
 800fffe:	693b      	ldr	r3, [r7, #16]
 8010000:	1ad3      	subs	r3, r2, r3
 8010002:	2b02      	cmp	r3, #2
 8010004:	d901      	bls.n	801000a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8010006:	2303      	movs	r3, #3
 8010008:	e09a      	b.n	8010140 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801000a:	4b43      	ldr	r3, [pc, #268]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010012:	2b00      	cmp	r3, #0
 8010014:	d1f0      	bne.n	800fff8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010016:	4b40      	ldr	r3, [pc, #256]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 8010018:	68da      	ldr	r2, [r3, #12]
 801001a:	4b40      	ldr	r3, [pc, #256]	@ (801011c <HAL_RCC_OscConfig+0x784>)
 801001c:	4013      	ands	r3, r2
 801001e:	687a      	ldr	r2, [r7, #4]
 8010020:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8010022:	687a      	ldr	r2, [r7, #4]
 8010024:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010026:	3a01      	subs	r2, #1
 8010028:	0112      	lsls	r2, r2, #4
 801002a:	4311      	orrs	r1, r2
 801002c:	687a      	ldr	r2, [r7, #4]
 801002e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8010030:	0212      	lsls	r2, r2, #8
 8010032:	4311      	orrs	r1, r2
 8010034:	687a      	ldr	r2, [r7, #4]
 8010036:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8010038:	0852      	lsrs	r2, r2, #1
 801003a:	3a01      	subs	r2, #1
 801003c:	0552      	lsls	r2, r2, #21
 801003e:	4311      	orrs	r1, r2
 8010040:	687a      	ldr	r2, [r7, #4]
 8010042:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8010044:	0852      	lsrs	r2, r2, #1
 8010046:	3a01      	subs	r2, #1
 8010048:	0652      	lsls	r2, r2, #25
 801004a:	4311      	orrs	r1, r2
 801004c:	687a      	ldr	r2, [r7, #4]
 801004e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8010050:	0912      	lsrs	r2, r2, #4
 8010052:	0452      	lsls	r2, r2, #17
 8010054:	430a      	orrs	r2, r1
 8010056:	4930      	ldr	r1, [pc, #192]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 8010058:	4313      	orrs	r3, r2
 801005a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 801005c:	4b2e      	ldr	r3, [pc, #184]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	4a2d      	ldr	r2, [pc, #180]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 8010062:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010066:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8010068:	4b2b      	ldr	r3, [pc, #172]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 801006a:	68db      	ldr	r3, [r3, #12]
 801006c:	4a2a      	ldr	r2, [pc, #168]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 801006e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010072:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8010074:	f7fa ffd4 	bl	800b020 <HAL_GetTick>
 8010078:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801007a:	e008      	b.n	801008e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801007c:	f7fa ffd0 	bl	800b020 <HAL_GetTick>
 8010080:	4602      	mov	r2, r0
 8010082:	693b      	ldr	r3, [r7, #16]
 8010084:	1ad3      	subs	r3, r2, r3
 8010086:	2b02      	cmp	r3, #2
 8010088:	d901      	bls.n	801008e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 801008a:	2303      	movs	r3, #3
 801008c:	e058      	b.n	8010140 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801008e:	4b22      	ldr	r3, [pc, #136]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010096:	2b00      	cmp	r3, #0
 8010098:	d0f0      	beq.n	801007c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 801009a:	e050      	b.n	801013e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 801009c:	2301      	movs	r3, #1
 801009e:	e04f      	b.n	8010140 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80100a0:	4b1d      	ldr	r3, [pc, #116]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d148      	bne.n	801013e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80100ac:	4b1a      	ldr	r3, [pc, #104]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	4a19      	ldr	r2, [pc, #100]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 80100b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80100b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80100b8:	4b17      	ldr	r3, [pc, #92]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 80100ba:	68db      	ldr	r3, [r3, #12]
 80100bc:	4a16      	ldr	r2, [pc, #88]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 80100be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80100c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80100c4:	f7fa ffac 	bl	800b020 <HAL_GetTick>
 80100c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80100ca:	e008      	b.n	80100de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80100cc:	f7fa ffa8 	bl	800b020 <HAL_GetTick>
 80100d0:	4602      	mov	r2, r0
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	1ad3      	subs	r3, r2, r3
 80100d6:	2b02      	cmp	r3, #2
 80100d8:	d901      	bls.n	80100de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80100da:	2303      	movs	r3, #3
 80100dc:	e030      	b.n	8010140 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80100de:	4b0e      	ldr	r3, [pc, #56]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d0f0      	beq.n	80100cc <HAL_RCC_OscConfig+0x734>
 80100ea:	e028      	b.n	801013e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80100ec:	69bb      	ldr	r3, [r7, #24]
 80100ee:	2b0c      	cmp	r3, #12
 80100f0:	d023      	beq.n	801013a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80100f2:	4b09      	ldr	r3, [pc, #36]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	4a08      	ldr	r2, [pc, #32]	@ (8010118 <HAL_RCC_OscConfig+0x780>)
 80100f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80100fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80100fe:	f7fa ff8f 	bl	800b020 <HAL_GetTick>
 8010102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010104:	e00c      	b.n	8010120 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010106:	f7fa ff8b 	bl	800b020 <HAL_GetTick>
 801010a:	4602      	mov	r2, r0
 801010c:	693b      	ldr	r3, [r7, #16]
 801010e:	1ad3      	subs	r3, r2, r3
 8010110:	2b02      	cmp	r3, #2
 8010112:	d905      	bls.n	8010120 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8010114:	2303      	movs	r3, #3
 8010116:	e013      	b.n	8010140 <HAL_RCC_OscConfig+0x7a8>
 8010118:	40021000 	.word	0x40021000
 801011c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010120:	4b09      	ldr	r3, [pc, #36]	@ (8010148 <HAL_RCC_OscConfig+0x7b0>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010128:	2b00      	cmp	r3, #0
 801012a:	d1ec      	bne.n	8010106 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 801012c:	4b06      	ldr	r3, [pc, #24]	@ (8010148 <HAL_RCC_OscConfig+0x7b0>)
 801012e:	68da      	ldr	r2, [r3, #12]
 8010130:	4905      	ldr	r1, [pc, #20]	@ (8010148 <HAL_RCC_OscConfig+0x7b0>)
 8010132:	4b06      	ldr	r3, [pc, #24]	@ (801014c <HAL_RCC_OscConfig+0x7b4>)
 8010134:	4013      	ands	r3, r2
 8010136:	60cb      	str	r3, [r1, #12]
 8010138:	e001      	b.n	801013e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801013a:	2301      	movs	r3, #1
 801013c:	e000      	b.n	8010140 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 801013e:	2300      	movs	r3, #0
}
 8010140:	4618      	mov	r0, r3
 8010142:	3720      	adds	r7, #32
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}
 8010148:	40021000 	.word	0x40021000
 801014c:	feeefffc 	.word	0xfeeefffc

08010150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b084      	sub	sp, #16
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
 8010158:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d101      	bne.n	8010164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010160:	2301      	movs	r3, #1
 8010162:	e0e7      	b.n	8010334 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010164:	4b75      	ldr	r3, [pc, #468]	@ (801033c <HAL_RCC_ClockConfig+0x1ec>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	f003 0307 	and.w	r3, r3, #7
 801016c:	683a      	ldr	r2, [r7, #0]
 801016e:	429a      	cmp	r2, r3
 8010170:	d910      	bls.n	8010194 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010172:	4b72      	ldr	r3, [pc, #456]	@ (801033c <HAL_RCC_ClockConfig+0x1ec>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	f023 0207 	bic.w	r2, r3, #7
 801017a:	4970      	ldr	r1, [pc, #448]	@ (801033c <HAL_RCC_ClockConfig+0x1ec>)
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	4313      	orrs	r3, r2
 8010180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010182:	4b6e      	ldr	r3, [pc, #440]	@ (801033c <HAL_RCC_ClockConfig+0x1ec>)
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	f003 0307 	and.w	r3, r3, #7
 801018a:	683a      	ldr	r2, [r7, #0]
 801018c:	429a      	cmp	r2, r3
 801018e:	d001      	beq.n	8010194 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8010190:	2301      	movs	r3, #1
 8010192:	e0cf      	b.n	8010334 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	f003 0302 	and.w	r3, r3, #2
 801019c:	2b00      	cmp	r3, #0
 801019e:	d010      	beq.n	80101c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	689a      	ldr	r2, [r3, #8]
 80101a4:	4b66      	ldr	r3, [pc, #408]	@ (8010340 <HAL_RCC_ClockConfig+0x1f0>)
 80101a6:	689b      	ldr	r3, [r3, #8]
 80101a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80101ac:	429a      	cmp	r2, r3
 80101ae:	d908      	bls.n	80101c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80101b0:	4b63      	ldr	r3, [pc, #396]	@ (8010340 <HAL_RCC_ClockConfig+0x1f0>)
 80101b2:	689b      	ldr	r3, [r3, #8]
 80101b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	689b      	ldr	r3, [r3, #8]
 80101bc:	4960      	ldr	r1, [pc, #384]	@ (8010340 <HAL_RCC_ClockConfig+0x1f0>)
 80101be:	4313      	orrs	r3, r2
 80101c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	f003 0301 	and.w	r3, r3, #1
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d04c      	beq.n	8010268 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	2b03      	cmp	r3, #3
 80101d4:	d107      	bne.n	80101e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80101d6:	4b5a      	ldr	r3, [pc, #360]	@ (8010340 <HAL_RCC_ClockConfig+0x1f0>)
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d121      	bne.n	8010226 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80101e2:	2301      	movs	r3, #1
 80101e4:	e0a6      	b.n	8010334 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	685b      	ldr	r3, [r3, #4]
 80101ea:	2b02      	cmp	r3, #2
 80101ec:	d107      	bne.n	80101fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80101ee:	4b54      	ldr	r3, [pc, #336]	@ (8010340 <HAL_RCC_ClockConfig+0x1f0>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d115      	bne.n	8010226 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80101fa:	2301      	movs	r3, #1
 80101fc:	e09a      	b.n	8010334 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	685b      	ldr	r3, [r3, #4]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d107      	bne.n	8010216 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010206:	4b4e      	ldr	r3, [pc, #312]	@ (8010340 <HAL_RCC_ClockConfig+0x1f0>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	f003 0302 	and.w	r3, r3, #2
 801020e:	2b00      	cmp	r3, #0
 8010210:	d109      	bne.n	8010226 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8010212:	2301      	movs	r3, #1
 8010214:	e08e      	b.n	8010334 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010216:	4b4a      	ldr	r3, [pc, #296]	@ (8010340 <HAL_RCC_ClockConfig+0x1f0>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801021e:	2b00      	cmp	r3, #0
 8010220:	d101      	bne.n	8010226 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8010222:	2301      	movs	r3, #1
 8010224:	e086      	b.n	8010334 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010226:	4b46      	ldr	r3, [pc, #280]	@ (8010340 <HAL_RCC_ClockConfig+0x1f0>)
 8010228:	689b      	ldr	r3, [r3, #8]
 801022a:	f023 0203 	bic.w	r2, r3, #3
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	685b      	ldr	r3, [r3, #4]
 8010232:	4943      	ldr	r1, [pc, #268]	@ (8010340 <HAL_RCC_ClockConfig+0x1f0>)
 8010234:	4313      	orrs	r3, r2
 8010236:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010238:	f7fa fef2 	bl	800b020 <HAL_GetTick>
 801023c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801023e:	e00a      	b.n	8010256 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010240:	f7fa feee 	bl	800b020 <HAL_GetTick>
 8010244:	4602      	mov	r2, r0
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	1ad3      	subs	r3, r2, r3
 801024a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801024e:	4293      	cmp	r3, r2
 8010250:	d901      	bls.n	8010256 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8010252:	2303      	movs	r3, #3
 8010254:	e06e      	b.n	8010334 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010256:	4b3a      	ldr	r3, [pc, #232]	@ (8010340 <HAL_RCC_ClockConfig+0x1f0>)
 8010258:	689b      	ldr	r3, [r3, #8]
 801025a:	f003 020c 	and.w	r2, r3, #12
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	685b      	ldr	r3, [r3, #4]
 8010262:	009b      	lsls	r3, r3, #2
 8010264:	429a      	cmp	r2, r3
 8010266:	d1eb      	bne.n	8010240 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	f003 0302 	and.w	r3, r3, #2
 8010270:	2b00      	cmp	r3, #0
 8010272:	d010      	beq.n	8010296 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	689a      	ldr	r2, [r3, #8]
 8010278:	4b31      	ldr	r3, [pc, #196]	@ (8010340 <HAL_RCC_ClockConfig+0x1f0>)
 801027a:	689b      	ldr	r3, [r3, #8]
 801027c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010280:	429a      	cmp	r2, r3
 8010282:	d208      	bcs.n	8010296 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010284:	4b2e      	ldr	r3, [pc, #184]	@ (8010340 <HAL_RCC_ClockConfig+0x1f0>)
 8010286:	689b      	ldr	r3, [r3, #8]
 8010288:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	689b      	ldr	r3, [r3, #8]
 8010290:	492b      	ldr	r1, [pc, #172]	@ (8010340 <HAL_RCC_ClockConfig+0x1f0>)
 8010292:	4313      	orrs	r3, r2
 8010294:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010296:	4b29      	ldr	r3, [pc, #164]	@ (801033c <HAL_RCC_ClockConfig+0x1ec>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	f003 0307 	and.w	r3, r3, #7
 801029e:	683a      	ldr	r2, [r7, #0]
 80102a0:	429a      	cmp	r2, r3
 80102a2:	d210      	bcs.n	80102c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80102a4:	4b25      	ldr	r3, [pc, #148]	@ (801033c <HAL_RCC_ClockConfig+0x1ec>)
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	f023 0207 	bic.w	r2, r3, #7
 80102ac:	4923      	ldr	r1, [pc, #140]	@ (801033c <HAL_RCC_ClockConfig+0x1ec>)
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	4313      	orrs	r3, r2
 80102b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80102b4:	4b21      	ldr	r3, [pc, #132]	@ (801033c <HAL_RCC_ClockConfig+0x1ec>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	f003 0307 	and.w	r3, r3, #7
 80102bc:	683a      	ldr	r2, [r7, #0]
 80102be:	429a      	cmp	r2, r3
 80102c0:	d001      	beq.n	80102c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80102c2:	2301      	movs	r3, #1
 80102c4:	e036      	b.n	8010334 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	f003 0304 	and.w	r3, r3, #4
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d008      	beq.n	80102e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80102d2:	4b1b      	ldr	r3, [pc, #108]	@ (8010340 <HAL_RCC_ClockConfig+0x1f0>)
 80102d4:	689b      	ldr	r3, [r3, #8]
 80102d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	68db      	ldr	r3, [r3, #12]
 80102de:	4918      	ldr	r1, [pc, #96]	@ (8010340 <HAL_RCC_ClockConfig+0x1f0>)
 80102e0:	4313      	orrs	r3, r2
 80102e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	f003 0308 	and.w	r3, r3, #8
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d009      	beq.n	8010304 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80102f0:	4b13      	ldr	r3, [pc, #76]	@ (8010340 <HAL_RCC_ClockConfig+0x1f0>)
 80102f2:	689b      	ldr	r3, [r3, #8]
 80102f4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	691b      	ldr	r3, [r3, #16]
 80102fc:	00db      	lsls	r3, r3, #3
 80102fe:	4910      	ldr	r1, [pc, #64]	@ (8010340 <HAL_RCC_ClockConfig+0x1f0>)
 8010300:	4313      	orrs	r3, r2
 8010302:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8010304:	f000 f824 	bl	8010350 <HAL_RCC_GetSysClockFreq>
 8010308:	4602      	mov	r2, r0
 801030a:	4b0d      	ldr	r3, [pc, #52]	@ (8010340 <HAL_RCC_ClockConfig+0x1f0>)
 801030c:	689b      	ldr	r3, [r3, #8]
 801030e:	091b      	lsrs	r3, r3, #4
 8010310:	f003 030f 	and.w	r3, r3, #15
 8010314:	490b      	ldr	r1, [pc, #44]	@ (8010344 <HAL_RCC_ClockConfig+0x1f4>)
 8010316:	5ccb      	ldrb	r3, [r1, r3]
 8010318:	f003 031f 	and.w	r3, r3, #31
 801031c:	fa22 f303 	lsr.w	r3, r2, r3
 8010320:	4a09      	ldr	r2, [pc, #36]	@ (8010348 <HAL_RCC_ClockConfig+0x1f8>)
 8010322:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8010324:	4b09      	ldr	r3, [pc, #36]	@ (801034c <HAL_RCC_ClockConfig+0x1fc>)
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	4618      	mov	r0, r3
 801032a:	f7fa fe29 	bl	800af80 <HAL_InitTick>
 801032e:	4603      	mov	r3, r0
 8010330:	72fb      	strb	r3, [r7, #11]

  return status;
 8010332:	7afb      	ldrb	r3, [r7, #11]
}
 8010334:	4618      	mov	r0, r3
 8010336:	3710      	adds	r7, #16
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}
 801033c:	40022000 	.word	0x40022000
 8010340:	40021000 	.word	0x40021000
 8010344:	08017860 	.word	0x08017860
 8010348:	20000268 	.word	0x20000268
 801034c:	20000274 	.word	0x20000274

08010350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010350:	b480      	push	{r7}
 8010352:	b089      	sub	sp, #36	@ 0x24
 8010354:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8010356:	2300      	movs	r3, #0
 8010358:	61fb      	str	r3, [r7, #28]
 801035a:	2300      	movs	r3, #0
 801035c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801035e:	4b3e      	ldr	r3, [pc, #248]	@ (8010458 <HAL_RCC_GetSysClockFreq+0x108>)
 8010360:	689b      	ldr	r3, [r3, #8]
 8010362:	f003 030c 	and.w	r3, r3, #12
 8010366:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010368:	4b3b      	ldr	r3, [pc, #236]	@ (8010458 <HAL_RCC_GetSysClockFreq+0x108>)
 801036a:	68db      	ldr	r3, [r3, #12]
 801036c:	f003 0303 	and.w	r3, r3, #3
 8010370:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d005      	beq.n	8010384 <HAL_RCC_GetSysClockFreq+0x34>
 8010378:	693b      	ldr	r3, [r7, #16]
 801037a:	2b0c      	cmp	r3, #12
 801037c:	d121      	bne.n	80103c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	2b01      	cmp	r3, #1
 8010382:	d11e      	bne.n	80103c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8010384:	4b34      	ldr	r3, [pc, #208]	@ (8010458 <HAL_RCC_GetSysClockFreq+0x108>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	f003 0308 	and.w	r3, r3, #8
 801038c:	2b00      	cmp	r3, #0
 801038e:	d107      	bne.n	80103a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8010390:	4b31      	ldr	r3, [pc, #196]	@ (8010458 <HAL_RCC_GetSysClockFreq+0x108>)
 8010392:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010396:	0a1b      	lsrs	r3, r3, #8
 8010398:	f003 030f 	and.w	r3, r3, #15
 801039c:	61fb      	str	r3, [r7, #28]
 801039e:	e005      	b.n	80103ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80103a0:	4b2d      	ldr	r3, [pc, #180]	@ (8010458 <HAL_RCC_GetSysClockFreq+0x108>)
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	091b      	lsrs	r3, r3, #4
 80103a6:	f003 030f 	and.w	r3, r3, #15
 80103aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80103ac:	4a2b      	ldr	r2, [pc, #172]	@ (801045c <HAL_RCC_GetSysClockFreq+0x10c>)
 80103ae:	69fb      	ldr	r3, [r7, #28]
 80103b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d10d      	bne.n	80103d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80103bc:	69fb      	ldr	r3, [r7, #28]
 80103be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80103c0:	e00a      	b.n	80103d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80103c2:	693b      	ldr	r3, [r7, #16]
 80103c4:	2b04      	cmp	r3, #4
 80103c6:	d102      	bne.n	80103ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80103c8:	4b25      	ldr	r3, [pc, #148]	@ (8010460 <HAL_RCC_GetSysClockFreq+0x110>)
 80103ca:	61bb      	str	r3, [r7, #24]
 80103cc:	e004      	b.n	80103d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	2b08      	cmp	r3, #8
 80103d2:	d101      	bne.n	80103d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80103d4:	4b23      	ldr	r3, [pc, #140]	@ (8010464 <HAL_RCC_GetSysClockFreq+0x114>)
 80103d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80103d8:	693b      	ldr	r3, [r7, #16]
 80103da:	2b0c      	cmp	r3, #12
 80103dc:	d134      	bne.n	8010448 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80103de:	4b1e      	ldr	r3, [pc, #120]	@ (8010458 <HAL_RCC_GetSysClockFreq+0x108>)
 80103e0:	68db      	ldr	r3, [r3, #12]
 80103e2:	f003 0303 	and.w	r3, r3, #3
 80103e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	2b02      	cmp	r3, #2
 80103ec:	d003      	beq.n	80103f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	2b03      	cmp	r3, #3
 80103f2:	d003      	beq.n	80103fc <HAL_RCC_GetSysClockFreq+0xac>
 80103f4:	e005      	b.n	8010402 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80103f6:	4b1a      	ldr	r3, [pc, #104]	@ (8010460 <HAL_RCC_GetSysClockFreq+0x110>)
 80103f8:	617b      	str	r3, [r7, #20]
      break;
 80103fa:	e005      	b.n	8010408 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80103fc:	4b19      	ldr	r3, [pc, #100]	@ (8010464 <HAL_RCC_GetSysClockFreq+0x114>)
 80103fe:	617b      	str	r3, [r7, #20]
      break;
 8010400:	e002      	b.n	8010408 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8010402:	69fb      	ldr	r3, [r7, #28]
 8010404:	617b      	str	r3, [r7, #20]
      break;
 8010406:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8010408:	4b13      	ldr	r3, [pc, #76]	@ (8010458 <HAL_RCC_GetSysClockFreq+0x108>)
 801040a:	68db      	ldr	r3, [r3, #12]
 801040c:	091b      	lsrs	r3, r3, #4
 801040e:	f003 0307 	and.w	r3, r3, #7
 8010412:	3301      	adds	r3, #1
 8010414:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8010416:	4b10      	ldr	r3, [pc, #64]	@ (8010458 <HAL_RCC_GetSysClockFreq+0x108>)
 8010418:	68db      	ldr	r3, [r3, #12]
 801041a:	0a1b      	lsrs	r3, r3, #8
 801041c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010420:	697a      	ldr	r2, [r7, #20]
 8010422:	fb03 f202 	mul.w	r2, r3, r2
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	fbb2 f3f3 	udiv	r3, r2, r3
 801042c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801042e:	4b0a      	ldr	r3, [pc, #40]	@ (8010458 <HAL_RCC_GetSysClockFreq+0x108>)
 8010430:	68db      	ldr	r3, [r3, #12]
 8010432:	0e5b      	lsrs	r3, r3, #25
 8010434:	f003 0303 	and.w	r3, r3, #3
 8010438:	3301      	adds	r3, #1
 801043a:	005b      	lsls	r3, r3, #1
 801043c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 801043e:	697a      	ldr	r2, [r7, #20]
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	fbb2 f3f3 	udiv	r3, r2, r3
 8010446:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8010448:	69bb      	ldr	r3, [r7, #24]
}
 801044a:	4618      	mov	r0, r3
 801044c:	3724      	adds	r7, #36	@ 0x24
 801044e:	46bd      	mov	sp, r7
 8010450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010454:	4770      	bx	lr
 8010456:	bf00      	nop
 8010458:	40021000 	.word	0x40021000
 801045c:	08017878 	.word	0x08017878
 8010460:	00f42400 	.word	0x00f42400
 8010464:	007a1200 	.word	0x007a1200

08010468 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010468:	b480      	push	{r7}
 801046a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801046c:	4b03      	ldr	r3, [pc, #12]	@ (801047c <HAL_RCC_GetHCLKFreq+0x14>)
 801046e:	681b      	ldr	r3, [r3, #0]
}
 8010470:	4618      	mov	r0, r3
 8010472:	46bd      	mov	sp, r7
 8010474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010478:	4770      	bx	lr
 801047a:	bf00      	nop
 801047c:	20000268 	.word	0x20000268

08010480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8010484:	f7ff fff0 	bl	8010468 <HAL_RCC_GetHCLKFreq>
 8010488:	4602      	mov	r2, r0
 801048a:	4b06      	ldr	r3, [pc, #24]	@ (80104a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 801048c:	689b      	ldr	r3, [r3, #8]
 801048e:	0a1b      	lsrs	r3, r3, #8
 8010490:	f003 0307 	and.w	r3, r3, #7
 8010494:	4904      	ldr	r1, [pc, #16]	@ (80104a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8010496:	5ccb      	ldrb	r3, [r1, r3]
 8010498:	f003 031f 	and.w	r3, r3, #31
 801049c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80104a0:	4618      	mov	r0, r3
 80104a2:	bd80      	pop	{r7, pc}
 80104a4:	40021000 	.word	0x40021000
 80104a8:	08017870 	.word	0x08017870

080104ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80104b0:	f7ff ffda 	bl	8010468 <HAL_RCC_GetHCLKFreq>
 80104b4:	4602      	mov	r2, r0
 80104b6:	4b06      	ldr	r3, [pc, #24]	@ (80104d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80104b8:	689b      	ldr	r3, [r3, #8]
 80104ba:	0adb      	lsrs	r3, r3, #11
 80104bc:	f003 0307 	and.w	r3, r3, #7
 80104c0:	4904      	ldr	r1, [pc, #16]	@ (80104d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80104c2:	5ccb      	ldrb	r3, [r1, r3]
 80104c4:	f003 031f 	and.w	r3, r3, #31
 80104c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80104cc:	4618      	mov	r0, r3
 80104ce:	bd80      	pop	{r7, pc}
 80104d0:	40021000 	.word	0x40021000
 80104d4:	08017870 	.word	0x08017870

080104d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b086      	sub	sp, #24
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80104e0:	2300      	movs	r3, #0
 80104e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80104e4:	4b2a      	ldr	r3, [pc, #168]	@ (8010590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80104e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80104e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d003      	beq.n	80104f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80104f0:	f7fe fd8c 	bl	800f00c <HAL_PWREx_GetVoltageRange>
 80104f4:	6178      	str	r0, [r7, #20]
 80104f6:	e014      	b.n	8010522 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80104f8:	4b25      	ldr	r3, [pc, #148]	@ (8010590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80104fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80104fc:	4a24      	ldr	r2, [pc, #144]	@ (8010590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80104fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010502:	6593      	str	r3, [r2, #88]	@ 0x58
 8010504:	4b22      	ldr	r3, [pc, #136]	@ (8010590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801050c:	60fb      	str	r3, [r7, #12]
 801050e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8010510:	f7fe fd7c 	bl	800f00c <HAL_PWREx_GetVoltageRange>
 8010514:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8010516:	4b1e      	ldr	r3, [pc, #120]	@ (8010590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801051a:	4a1d      	ldr	r2, [pc, #116]	@ (8010590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801051c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010520:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8010522:	697b      	ldr	r3, [r7, #20]
 8010524:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010528:	d10b      	bne.n	8010542 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	2b80      	cmp	r3, #128	@ 0x80
 801052e:	d919      	bls.n	8010564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2ba0      	cmp	r3, #160	@ 0xa0
 8010534:	d902      	bls.n	801053c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8010536:	2302      	movs	r3, #2
 8010538:	613b      	str	r3, [r7, #16]
 801053a:	e013      	b.n	8010564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801053c:	2301      	movs	r3, #1
 801053e:	613b      	str	r3, [r7, #16]
 8010540:	e010      	b.n	8010564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2b80      	cmp	r3, #128	@ 0x80
 8010546:	d902      	bls.n	801054e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8010548:	2303      	movs	r3, #3
 801054a:	613b      	str	r3, [r7, #16]
 801054c:	e00a      	b.n	8010564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	2b80      	cmp	r3, #128	@ 0x80
 8010552:	d102      	bne.n	801055a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8010554:	2302      	movs	r3, #2
 8010556:	613b      	str	r3, [r7, #16]
 8010558:	e004      	b.n	8010564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2b70      	cmp	r3, #112	@ 0x70
 801055e:	d101      	bne.n	8010564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8010560:	2301      	movs	r3, #1
 8010562:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8010564:	4b0b      	ldr	r3, [pc, #44]	@ (8010594 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	f023 0207 	bic.w	r2, r3, #7
 801056c:	4909      	ldr	r1, [pc, #36]	@ (8010594 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	4313      	orrs	r3, r2
 8010572:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8010574:	4b07      	ldr	r3, [pc, #28]	@ (8010594 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	f003 0307 	and.w	r3, r3, #7
 801057c:	693a      	ldr	r2, [r7, #16]
 801057e:	429a      	cmp	r2, r3
 8010580:	d001      	beq.n	8010586 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8010582:	2301      	movs	r3, #1
 8010584:	e000      	b.n	8010588 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8010586:	2300      	movs	r3, #0
}
 8010588:	4618      	mov	r0, r3
 801058a:	3718      	adds	r7, #24
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}
 8010590:	40021000 	.word	0x40021000
 8010594:	40022000 	.word	0x40022000

08010598 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b086      	sub	sp, #24
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80105a0:	2300      	movs	r3, #0
 80105a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80105a4:	2300      	movs	r3, #0
 80105a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d041      	beq.n	8010638 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80105b8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80105bc:	d02a      	beq.n	8010614 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80105be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80105c2:	d824      	bhi.n	801060e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80105c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80105c8:	d008      	beq.n	80105dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80105ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80105ce:	d81e      	bhi.n	801060e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d00a      	beq.n	80105ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80105d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80105d8:	d010      	beq.n	80105fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80105da:	e018      	b.n	801060e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80105dc:	4b86      	ldr	r3, [pc, #536]	@ (80107f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80105de:	68db      	ldr	r3, [r3, #12]
 80105e0:	4a85      	ldr	r2, [pc, #532]	@ (80107f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80105e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80105e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80105e8:	e015      	b.n	8010616 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	3304      	adds	r3, #4
 80105ee:	2100      	movs	r1, #0
 80105f0:	4618      	mov	r0, r3
 80105f2:	f000 fabb 	bl	8010b6c <RCCEx_PLLSAI1_Config>
 80105f6:	4603      	mov	r3, r0
 80105f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80105fa:	e00c      	b.n	8010616 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	3320      	adds	r3, #32
 8010600:	2100      	movs	r1, #0
 8010602:	4618      	mov	r0, r3
 8010604:	f000 fba6 	bl	8010d54 <RCCEx_PLLSAI2_Config>
 8010608:	4603      	mov	r3, r0
 801060a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 801060c:	e003      	b.n	8010616 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801060e:	2301      	movs	r3, #1
 8010610:	74fb      	strb	r3, [r7, #19]
      break;
 8010612:	e000      	b.n	8010616 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8010614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010616:	7cfb      	ldrb	r3, [r7, #19]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d10b      	bne.n	8010634 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801061c:	4b76      	ldr	r3, [pc, #472]	@ (80107f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801061e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010622:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801062a:	4973      	ldr	r1, [pc, #460]	@ (80107f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801062c:	4313      	orrs	r3, r2
 801062e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8010632:	e001      	b.n	8010638 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010634:	7cfb      	ldrb	r3, [r7, #19]
 8010636:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010640:	2b00      	cmp	r3, #0
 8010642:	d041      	beq.n	80106c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010648:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801064c:	d02a      	beq.n	80106a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 801064e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010652:	d824      	bhi.n	801069e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8010654:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010658:	d008      	beq.n	801066c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801065a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801065e:	d81e      	bhi.n	801069e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8010660:	2b00      	cmp	r3, #0
 8010662:	d00a      	beq.n	801067a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8010664:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010668:	d010      	beq.n	801068c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 801066a:	e018      	b.n	801069e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 801066c:	4b62      	ldr	r3, [pc, #392]	@ (80107f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801066e:	68db      	ldr	r3, [r3, #12]
 8010670:	4a61      	ldr	r2, [pc, #388]	@ (80107f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010672:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010676:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010678:	e015      	b.n	80106a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	3304      	adds	r3, #4
 801067e:	2100      	movs	r1, #0
 8010680:	4618      	mov	r0, r3
 8010682:	f000 fa73 	bl	8010b6c <RCCEx_PLLSAI1_Config>
 8010686:	4603      	mov	r3, r0
 8010688:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801068a:	e00c      	b.n	80106a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	3320      	adds	r3, #32
 8010690:	2100      	movs	r1, #0
 8010692:	4618      	mov	r0, r3
 8010694:	f000 fb5e 	bl	8010d54 <RCCEx_PLLSAI2_Config>
 8010698:	4603      	mov	r3, r0
 801069a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801069c:	e003      	b.n	80106a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801069e:	2301      	movs	r3, #1
 80106a0:	74fb      	strb	r3, [r7, #19]
      break;
 80106a2:	e000      	b.n	80106a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80106a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80106a6:	7cfb      	ldrb	r3, [r7, #19]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d10b      	bne.n	80106c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80106ac:	4b52      	ldr	r3, [pc, #328]	@ (80107f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80106b2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80106ba:	494f      	ldr	r1, [pc, #316]	@ (80107f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106bc:	4313      	orrs	r3, r2
 80106be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80106c2:	e001      	b.n	80106c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80106c4:	7cfb      	ldrb	r3, [r7, #19]
 80106c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	f000 80a0 	beq.w	8010816 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80106d6:	2300      	movs	r3, #0
 80106d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80106da:	4b47      	ldr	r3, [pc, #284]	@ (80107f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80106de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d101      	bne.n	80106ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80106e6:	2301      	movs	r3, #1
 80106e8:	e000      	b.n	80106ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80106ea:	2300      	movs	r3, #0
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d00d      	beq.n	801070c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80106f0:	4b41      	ldr	r3, [pc, #260]	@ (80107f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80106f4:	4a40      	ldr	r2, [pc, #256]	@ (80107f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80106fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80106fc:	4b3e      	ldr	r3, [pc, #248]	@ (80107f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010704:	60bb      	str	r3, [r7, #8]
 8010706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010708:	2301      	movs	r3, #1
 801070a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801070c:	4b3b      	ldr	r3, [pc, #236]	@ (80107fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	4a3a      	ldr	r2, [pc, #232]	@ (80107fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8010712:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010716:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010718:	f7fa fc82 	bl	800b020 <HAL_GetTick>
 801071c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801071e:	e009      	b.n	8010734 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010720:	f7fa fc7e 	bl	800b020 <HAL_GetTick>
 8010724:	4602      	mov	r2, r0
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	1ad3      	subs	r3, r2, r3
 801072a:	2b02      	cmp	r3, #2
 801072c:	d902      	bls.n	8010734 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 801072e:	2303      	movs	r3, #3
 8010730:	74fb      	strb	r3, [r7, #19]
        break;
 8010732:	e005      	b.n	8010740 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8010734:	4b31      	ldr	r3, [pc, #196]	@ (80107fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801073c:	2b00      	cmp	r3, #0
 801073e:	d0ef      	beq.n	8010720 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8010740:	7cfb      	ldrb	r3, [r7, #19]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d15c      	bne.n	8010800 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8010746:	4b2c      	ldr	r3, [pc, #176]	@ (80107f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801074c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010750:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d01f      	beq.n	8010798 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801075e:	697a      	ldr	r2, [r7, #20]
 8010760:	429a      	cmp	r2, r3
 8010762:	d019      	beq.n	8010798 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8010764:	4b24      	ldr	r3, [pc, #144]	@ (80107f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801076a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801076e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8010770:	4b21      	ldr	r3, [pc, #132]	@ (80107f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010776:	4a20      	ldr	r2, [pc, #128]	@ (80107f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801077c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010780:	4b1d      	ldr	r3, [pc, #116]	@ (80107f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010786:	4a1c      	ldr	r2, [pc, #112]	@ (80107f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010788:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801078c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8010790:	4a19      	ldr	r2, [pc, #100]	@ (80107f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8010798:	697b      	ldr	r3, [r7, #20]
 801079a:	f003 0301 	and.w	r3, r3, #1
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d016      	beq.n	80107d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80107a2:	f7fa fc3d 	bl	800b020 <HAL_GetTick>
 80107a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80107a8:	e00b      	b.n	80107c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80107aa:	f7fa fc39 	bl	800b020 <HAL_GetTick>
 80107ae:	4602      	mov	r2, r0
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	1ad3      	subs	r3, r2, r3
 80107b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80107b8:	4293      	cmp	r3, r2
 80107ba:	d902      	bls.n	80107c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80107bc:	2303      	movs	r3, #3
 80107be:	74fb      	strb	r3, [r7, #19]
            break;
 80107c0:	e006      	b.n	80107d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80107c2:	4b0d      	ldr	r3, [pc, #52]	@ (80107f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80107c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80107c8:	f003 0302 	and.w	r3, r3, #2
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d0ec      	beq.n	80107aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80107d0:	7cfb      	ldrb	r3, [r7, #19]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d10c      	bne.n	80107f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80107d6:	4b08      	ldr	r3, [pc, #32]	@ (80107f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80107d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80107dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80107e6:	4904      	ldr	r1, [pc, #16]	@ (80107f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80107e8:	4313      	orrs	r3, r2
 80107ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80107ee:	e009      	b.n	8010804 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80107f0:	7cfb      	ldrb	r3, [r7, #19]
 80107f2:	74bb      	strb	r3, [r7, #18]
 80107f4:	e006      	b.n	8010804 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80107f6:	bf00      	nop
 80107f8:	40021000 	.word	0x40021000
 80107fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010800:	7cfb      	ldrb	r3, [r7, #19]
 8010802:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8010804:	7c7b      	ldrb	r3, [r7, #17]
 8010806:	2b01      	cmp	r3, #1
 8010808:	d105      	bne.n	8010816 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801080a:	4b9e      	ldr	r3, [pc, #632]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801080c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801080e:	4a9d      	ldr	r2, [pc, #628]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010810:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010814:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	f003 0301 	and.w	r3, r3, #1
 801081e:	2b00      	cmp	r3, #0
 8010820:	d00a      	beq.n	8010838 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8010822:	4b98      	ldr	r3, [pc, #608]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010828:	f023 0203 	bic.w	r2, r3, #3
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010830:	4994      	ldr	r1, [pc, #592]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010832:	4313      	orrs	r3, r2
 8010834:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	f003 0302 	and.w	r3, r3, #2
 8010840:	2b00      	cmp	r3, #0
 8010842:	d00a      	beq.n	801085a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010844:	4b8f      	ldr	r3, [pc, #572]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801084a:	f023 020c 	bic.w	r2, r3, #12
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010852:	498c      	ldr	r1, [pc, #560]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010854:	4313      	orrs	r3, r2
 8010856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	f003 0304 	and.w	r3, r3, #4
 8010862:	2b00      	cmp	r3, #0
 8010864:	d00a      	beq.n	801087c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8010866:	4b87      	ldr	r3, [pc, #540]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801086c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010874:	4983      	ldr	r1, [pc, #524]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010876:	4313      	orrs	r3, r2
 8010878:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	f003 0308 	and.w	r3, r3, #8
 8010884:	2b00      	cmp	r3, #0
 8010886:	d00a      	beq.n	801089e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8010888:	4b7e      	ldr	r3, [pc, #504]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801088a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801088e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010896:	497b      	ldr	r1, [pc, #492]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010898:	4313      	orrs	r3, r2
 801089a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	f003 0310 	and.w	r3, r3, #16
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d00a      	beq.n	80108c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80108aa:	4b76      	ldr	r3, [pc, #472]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80108ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80108b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80108b8:	4972      	ldr	r1, [pc, #456]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80108ba:	4313      	orrs	r3, r2
 80108bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	f003 0320 	and.w	r3, r3, #32
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d00a      	beq.n	80108e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80108cc:	4b6d      	ldr	r3, [pc, #436]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80108ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80108d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80108da:	496a      	ldr	r1, [pc, #424]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80108dc:	4313      	orrs	r3, r2
 80108de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d00a      	beq.n	8010904 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80108ee:	4b65      	ldr	r3, [pc, #404]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80108f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80108f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80108fc:	4961      	ldr	r1, [pc, #388]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80108fe:	4313      	orrs	r3, r2
 8010900:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801090c:	2b00      	cmp	r3, #0
 801090e:	d00a      	beq.n	8010926 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010910:	4b5c      	ldr	r3, [pc, #368]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010916:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801091e:	4959      	ldr	r1, [pc, #356]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010920:	4313      	orrs	r3, r2
 8010922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801092e:	2b00      	cmp	r3, #0
 8010930:	d00a      	beq.n	8010948 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010932:	4b54      	ldr	r3, [pc, #336]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010938:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010940:	4950      	ldr	r1, [pc, #320]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010942:	4313      	orrs	r3, r2
 8010944:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010950:	2b00      	cmp	r3, #0
 8010952:	d00a      	beq.n	801096a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8010954:	4b4b      	ldr	r3, [pc, #300]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801095a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010962:	4948      	ldr	r1, [pc, #288]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010964:	4313      	orrs	r3, r2
 8010966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010972:	2b00      	cmp	r3, #0
 8010974:	d00a      	beq.n	801098c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8010976:	4b43      	ldr	r3, [pc, #268]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801097c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010984:	493f      	ldr	r1, [pc, #252]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010986:	4313      	orrs	r3, r2
 8010988:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010994:	2b00      	cmp	r3, #0
 8010996:	d028      	beq.n	80109ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010998:	4b3a      	ldr	r3, [pc, #232]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801099a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801099e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80109a6:	4937      	ldr	r1, [pc, #220]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80109a8:	4313      	orrs	r3, r2
 80109aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80109b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80109b6:	d106      	bne.n	80109c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80109b8:	4b32      	ldr	r3, [pc, #200]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80109ba:	68db      	ldr	r3, [r3, #12]
 80109bc:	4a31      	ldr	r2, [pc, #196]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80109be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80109c2:	60d3      	str	r3, [r2, #12]
 80109c4:	e011      	b.n	80109ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80109ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80109ce:	d10c      	bne.n	80109ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	3304      	adds	r3, #4
 80109d4:	2101      	movs	r1, #1
 80109d6:	4618      	mov	r0, r3
 80109d8:	f000 f8c8 	bl	8010b6c <RCCEx_PLLSAI1_Config>
 80109dc:	4603      	mov	r3, r0
 80109de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80109e0:	7cfb      	ldrb	r3, [r7, #19]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d001      	beq.n	80109ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80109e6:	7cfb      	ldrb	r3, [r7, #19]
 80109e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d028      	beq.n	8010a48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80109f6:	4b23      	ldr	r3, [pc, #140]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80109f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80109fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a04:	491f      	ldr	r1, [pc, #124]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010a06:	4313      	orrs	r3, r2
 8010a08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010a14:	d106      	bne.n	8010a24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010a16:	4b1b      	ldr	r3, [pc, #108]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010a18:	68db      	ldr	r3, [r3, #12]
 8010a1a:	4a1a      	ldr	r2, [pc, #104]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010a1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010a20:	60d3      	str	r3, [r2, #12]
 8010a22:	e011      	b.n	8010a48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010a2c:	d10c      	bne.n	8010a48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	3304      	adds	r3, #4
 8010a32:	2101      	movs	r1, #1
 8010a34:	4618      	mov	r0, r3
 8010a36:	f000 f899 	bl	8010b6c <RCCEx_PLLSAI1_Config>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010a3e:	7cfb      	ldrb	r3, [r7, #19]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d001      	beq.n	8010a48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8010a44:	7cfb      	ldrb	r3, [r7, #19]
 8010a46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d02b      	beq.n	8010aac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010a54:	4b0b      	ldr	r3, [pc, #44]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010a5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a62:	4908      	ldr	r1, [pc, #32]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010a64:	4313      	orrs	r3, r2
 8010a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010a72:	d109      	bne.n	8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010a74:	4b03      	ldr	r3, [pc, #12]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010a76:	68db      	ldr	r3, [r3, #12]
 8010a78:	4a02      	ldr	r2, [pc, #8]	@ (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010a7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010a7e:	60d3      	str	r3, [r2, #12]
 8010a80:	e014      	b.n	8010aac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8010a82:	bf00      	nop
 8010a84:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010a90:	d10c      	bne.n	8010aac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	3304      	adds	r3, #4
 8010a96:	2101      	movs	r1, #1
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f000 f867 	bl	8010b6c <RCCEx_PLLSAI1_Config>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010aa2:	7cfb      	ldrb	r3, [r7, #19]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d001      	beq.n	8010aac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8010aa8:	7cfb      	ldrb	r3, [r7, #19]
 8010aaa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d02f      	beq.n	8010b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010ab8:	4b2b      	ldr	r3, [pc, #172]	@ (8010b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010abe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010ac6:	4928      	ldr	r1, [pc, #160]	@ (8010b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010ac8:	4313      	orrs	r3, r2
 8010aca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010ad2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010ad6:	d10d      	bne.n	8010af4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	3304      	adds	r3, #4
 8010adc:	2102      	movs	r1, #2
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f000 f844 	bl	8010b6c <RCCEx_PLLSAI1_Config>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010ae8:	7cfb      	ldrb	r3, [r7, #19]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d014      	beq.n	8010b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8010aee:	7cfb      	ldrb	r3, [r7, #19]
 8010af0:	74bb      	strb	r3, [r7, #18]
 8010af2:	e011      	b.n	8010b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010af8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010afc:	d10c      	bne.n	8010b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	3320      	adds	r3, #32
 8010b02:	2102      	movs	r1, #2
 8010b04:	4618      	mov	r0, r3
 8010b06:	f000 f925 	bl	8010d54 <RCCEx_PLLSAI2_Config>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010b0e:	7cfb      	ldrb	r3, [r7, #19]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d001      	beq.n	8010b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8010b14:	7cfb      	ldrb	r3, [r7, #19]
 8010b16:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d00a      	beq.n	8010b3a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010b24:	4b10      	ldr	r3, [pc, #64]	@ (8010b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010b2a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010b32:	490d      	ldr	r1, [pc, #52]	@ (8010b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010b34:	4313      	orrs	r3, r2
 8010b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d00b      	beq.n	8010b5e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8010b46:	4b08      	ldr	r3, [pc, #32]	@ (8010b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010b4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010b56:	4904      	ldr	r1, [pc, #16]	@ (8010b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010b58:	4313      	orrs	r3, r2
 8010b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8010b5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8010b60:	4618      	mov	r0, r3
 8010b62:	3718      	adds	r7, #24
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bd80      	pop	{r7, pc}
 8010b68:	40021000 	.word	0x40021000

08010b6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b084      	sub	sp, #16
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
 8010b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010b76:	2300      	movs	r3, #0
 8010b78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8010b7a:	4b75      	ldr	r3, [pc, #468]	@ (8010d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010b7c:	68db      	ldr	r3, [r3, #12]
 8010b7e:	f003 0303 	and.w	r3, r3, #3
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d018      	beq.n	8010bb8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8010b86:	4b72      	ldr	r3, [pc, #456]	@ (8010d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010b88:	68db      	ldr	r3, [r3, #12]
 8010b8a:	f003 0203 	and.w	r2, r3, #3
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	429a      	cmp	r2, r3
 8010b94:	d10d      	bne.n	8010bb2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	681b      	ldr	r3, [r3, #0]
       ||
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d009      	beq.n	8010bb2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8010b9e:	4b6c      	ldr	r3, [pc, #432]	@ (8010d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010ba0:	68db      	ldr	r3, [r3, #12]
 8010ba2:	091b      	lsrs	r3, r3, #4
 8010ba4:	f003 0307 	and.w	r3, r3, #7
 8010ba8:	1c5a      	adds	r2, r3, #1
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	685b      	ldr	r3, [r3, #4]
       ||
 8010bae:	429a      	cmp	r2, r3
 8010bb0:	d047      	beq.n	8010c42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8010bb2:	2301      	movs	r3, #1
 8010bb4:	73fb      	strb	r3, [r7, #15]
 8010bb6:	e044      	b.n	8010c42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	2b03      	cmp	r3, #3
 8010bbe:	d018      	beq.n	8010bf2 <RCCEx_PLLSAI1_Config+0x86>
 8010bc0:	2b03      	cmp	r3, #3
 8010bc2:	d825      	bhi.n	8010c10 <RCCEx_PLLSAI1_Config+0xa4>
 8010bc4:	2b01      	cmp	r3, #1
 8010bc6:	d002      	beq.n	8010bce <RCCEx_PLLSAI1_Config+0x62>
 8010bc8:	2b02      	cmp	r3, #2
 8010bca:	d009      	beq.n	8010be0 <RCCEx_PLLSAI1_Config+0x74>
 8010bcc:	e020      	b.n	8010c10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8010bce:	4b60      	ldr	r3, [pc, #384]	@ (8010d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	f003 0302 	and.w	r3, r3, #2
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d11d      	bne.n	8010c16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8010bda:	2301      	movs	r3, #1
 8010bdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010bde:	e01a      	b.n	8010c16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8010be0:	4b5b      	ldr	r3, [pc, #364]	@ (8010d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d116      	bne.n	8010c1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8010bec:	2301      	movs	r3, #1
 8010bee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010bf0:	e013      	b.n	8010c1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8010bf2:	4b57      	ldr	r3, [pc, #348]	@ (8010d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d10f      	bne.n	8010c1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8010bfe:	4b54      	ldr	r3, [pc, #336]	@ (8010d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d109      	bne.n	8010c1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010c0e:	e006      	b.n	8010c1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8010c10:	2301      	movs	r3, #1
 8010c12:	73fb      	strb	r3, [r7, #15]
      break;
 8010c14:	e004      	b.n	8010c20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8010c16:	bf00      	nop
 8010c18:	e002      	b.n	8010c20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8010c1a:	bf00      	nop
 8010c1c:	e000      	b.n	8010c20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8010c1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8010c20:	7bfb      	ldrb	r3, [r7, #15]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d10d      	bne.n	8010c42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8010c26:	4b4a      	ldr	r3, [pc, #296]	@ (8010d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010c28:	68db      	ldr	r3, [r3, #12]
 8010c2a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	6819      	ldr	r1, [r3, #0]
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	685b      	ldr	r3, [r3, #4]
 8010c36:	3b01      	subs	r3, #1
 8010c38:	011b      	lsls	r3, r3, #4
 8010c3a:	430b      	orrs	r3, r1
 8010c3c:	4944      	ldr	r1, [pc, #272]	@ (8010d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010c3e:	4313      	orrs	r3, r2
 8010c40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8010c42:	7bfb      	ldrb	r3, [r7, #15]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d17d      	bne.n	8010d44 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8010c48:	4b41      	ldr	r3, [pc, #260]	@ (8010d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	4a40      	ldr	r2, [pc, #256]	@ (8010d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010c4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010c52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010c54:	f7fa f9e4 	bl	800b020 <HAL_GetTick>
 8010c58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8010c5a:	e009      	b.n	8010c70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010c5c:	f7fa f9e0 	bl	800b020 <HAL_GetTick>
 8010c60:	4602      	mov	r2, r0
 8010c62:	68bb      	ldr	r3, [r7, #8]
 8010c64:	1ad3      	subs	r3, r2, r3
 8010c66:	2b02      	cmp	r3, #2
 8010c68:	d902      	bls.n	8010c70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8010c6a:	2303      	movs	r3, #3
 8010c6c:	73fb      	strb	r3, [r7, #15]
        break;
 8010c6e:	e005      	b.n	8010c7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8010c70:	4b37      	ldr	r3, [pc, #220]	@ (8010d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d1ef      	bne.n	8010c5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8010c7c:	7bfb      	ldrb	r3, [r7, #15]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d160      	bne.n	8010d44 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8010c82:	683b      	ldr	r3, [r7, #0]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d111      	bne.n	8010cac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010c88:	4b31      	ldr	r3, [pc, #196]	@ (8010d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010c8a:	691b      	ldr	r3, [r3, #16]
 8010c8c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8010c90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010c94:	687a      	ldr	r2, [r7, #4]
 8010c96:	6892      	ldr	r2, [r2, #8]
 8010c98:	0211      	lsls	r1, r2, #8
 8010c9a:	687a      	ldr	r2, [r7, #4]
 8010c9c:	68d2      	ldr	r2, [r2, #12]
 8010c9e:	0912      	lsrs	r2, r2, #4
 8010ca0:	0452      	lsls	r2, r2, #17
 8010ca2:	430a      	orrs	r2, r1
 8010ca4:	492a      	ldr	r1, [pc, #168]	@ (8010d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010ca6:	4313      	orrs	r3, r2
 8010ca8:	610b      	str	r3, [r1, #16]
 8010caa:	e027      	b.n	8010cfc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	2b01      	cmp	r3, #1
 8010cb0:	d112      	bne.n	8010cd8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010cb2:	4b27      	ldr	r3, [pc, #156]	@ (8010d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010cb4:	691b      	ldr	r3, [r3, #16]
 8010cb6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8010cba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8010cbe:	687a      	ldr	r2, [r7, #4]
 8010cc0:	6892      	ldr	r2, [r2, #8]
 8010cc2:	0211      	lsls	r1, r2, #8
 8010cc4:	687a      	ldr	r2, [r7, #4]
 8010cc6:	6912      	ldr	r2, [r2, #16]
 8010cc8:	0852      	lsrs	r2, r2, #1
 8010cca:	3a01      	subs	r2, #1
 8010ccc:	0552      	lsls	r2, r2, #21
 8010cce:	430a      	orrs	r2, r1
 8010cd0:	491f      	ldr	r1, [pc, #124]	@ (8010d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010cd2:	4313      	orrs	r3, r2
 8010cd4:	610b      	str	r3, [r1, #16]
 8010cd6:	e011      	b.n	8010cfc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8010d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010cda:	691b      	ldr	r3, [r3, #16]
 8010cdc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8010ce0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8010ce4:	687a      	ldr	r2, [r7, #4]
 8010ce6:	6892      	ldr	r2, [r2, #8]
 8010ce8:	0211      	lsls	r1, r2, #8
 8010cea:	687a      	ldr	r2, [r7, #4]
 8010cec:	6952      	ldr	r2, [r2, #20]
 8010cee:	0852      	lsrs	r2, r2, #1
 8010cf0:	3a01      	subs	r2, #1
 8010cf2:	0652      	lsls	r2, r2, #25
 8010cf4:	430a      	orrs	r2, r1
 8010cf6:	4916      	ldr	r1, [pc, #88]	@ (8010d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010cf8:	4313      	orrs	r3, r2
 8010cfa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8010cfc:	4b14      	ldr	r3, [pc, #80]	@ (8010d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	4a13      	ldr	r2, [pc, #76]	@ (8010d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010d02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010d06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010d08:	f7fa f98a 	bl	800b020 <HAL_GetTick>
 8010d0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8010d0e:	e009      	b.n	8010d24 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010d10:	f7fa f986 	bl	800b020 <HAL_GetTick>
 8010d14:	4602      	mov	r2, r0
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	1ad3      	subs	r3, r2, r3
 8010d1a:	2b02      	cmp	r3, #2
 8010d1c:	d902      	bls.n	8010d24 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8010d1e:	2303      	movs	r3, #3
 8010d20:	73fb      	strb	r3, [r7, #15]
          break;
 8010d22:	e005      	b.n	8010d30 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8010d24:	4b0a      	ldr	r3, [pc, #40]	@ (8010d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d0ef      	beq.n	8010d10 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8010d30:	7bfb      	ldrb	r3, [r7, #15]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d106      	bne.n	8010d44 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8010d36:	4b06      	ldr	r3, [pc, #24]	@ (8010d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010d38:	691a      	ldr	r2, [r3, #16]
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	699b      	ldr	r3, [r3, #24]
 8010d3e:	4904      	ldr	r1, [pc, #16]	@ (8010d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010d40:	4313      	orrs	r3, r2
 8010d42:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8010d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	3710      	adds	r7, #16
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd80      	pop	{r7, pc}
 8010d4e:	bf00      	nop
 8010d50:	40021000 	.word	0x40021000

08010d54 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b084      	sub	sp, #16
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
 8010d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010d5e:	2300      	movs	r3, #0
 8010d60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8010d62:	4b6a      	ldr	r3, [pc, #424]	@ (8010f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8010d64:	68db      	ldr	r3, [r3, #12]
 8010d66:	f003 0303 	and.w	r3, r3, #3
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d018      	beq.n	8010da0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8010d6e:	4b67      	ldr	r3, [pc, #412]	@ (8010f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8010d70:	68db      	ldr	r3, [r3, #12]
 8010d72:	f003 0203 	and.w	r2, r3, #3
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	d10d      	bne.n	8010d9a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
       ||
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d009      	beq.n	8010d9a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8010d86:	4b61      	ldr	r3, [pc, #388]	@ (8010f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8010d88:	68db      	ldr	r3, [r3, #12]
 8010d8a:	091b      	lsrs	r3, r3, #4
 8010d8c:	f003 0307 	and.w	r3, r3, #7
 8010d90:	1c5a      	adds	r2, r3, #1
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	685b      	ldr	r3, [r3, #4]
       ||
 8010d96:	429a      	cmp	r2, r3
 8010d98:	d047      	beq.n	8010e2a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	73fb      	strb	r3, [r7, #15]
 8010d9e:	e044      	b.n	8010e2a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	2b03      	cmp	r3, #3
 8010da6:	d018      	beq.n	8010dda <RCCEx_PLLSAI2_Config+0x86>
 8010da8:	2b03      	cmp	r3, #3
 8010daa:	d825      	bhi.n	8010df8 <RCCEx_PLLSAI2_Config+0xa4>
 8010dac:	2b01      	cmp	r3, #1
 8010dae:	d002      	beq.n	8010db6 <RCCEx_PLLSAI2_Config+0x62>
 8010db0:	2b02      	cmp	r3, #2
 8010db2:	d009      	beq.n	8010dc8 <RCCEx_PLLSAI2_Config+0x74>
 8010db4:	e020      	b.n	8010df8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8010db6:	4b55      	ldr	r3, [pc, #340]	@ (8010f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	f003 0302 	and.w	r3, r3, #2
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d11d      	bne.n	8010dfe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8010dc2:	2301      	movs	r3, #1
 8010dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010dc6:	e01a      	b.n	8010dfe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8010dc8:	4b50      	ldr	r3, [pc, #320]	@ (8010f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d116      	bne.n	8010e02 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8010dd4:	2301      	movs	r3, #1
 8010dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010dd8:	e013      	b.n	8010e02 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8010dda:	4b4c      	ldr	r3, [pc, #304]	@ (8010f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d10f      	bne.n	8010e06 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8010de6:	4b49      	ldr	r3, [pc, #292]	@ (8010f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d109      	bne.n	8010e06 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8010df2:	2301      	movs	r3, #1
 8010df4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010df6:	e006      	b.n	8010e06 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8010df8:	2301      	movs	r3, #1
 8010dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8010dfc:	e004      	b.n	8010e08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8010dfe:	bf00      	nop
 8010e00:	e002      	b.n	8010e08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8010e02:	bf00      	nop
 8010e04:	e000      	b.n	8010e08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8010e06:	bf00      	nop
    }

    if(status == HAL_OK)
 8010e08:	7bfb      	ldrb	r3, [r7, #15]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d10d      	bne.n	8010e2a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8010e0e:	4b3f      	ldr	r3, [pc, #252]	@ (8010f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8010e10:	68db      	ldr	r3, [r3, #12]
 8010e12:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	6819      	ldr	r1, [r3, #0]
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	685b      	ldr	r3, [r3, #4]
 8010e1e:	3b01      	subs	r3, #1
 8010e20:	011b      	lsls	r3, r3, #4
 8010e22:	430b      	orrs	r3, r1
 8010e24:	4939      	ldr	r1, [pc, #228]	@ (8010f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8010e26:	4313      	orrs	r3, r2
 8010e28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8010e2a:	7bfb      	ldrb	r3, [r7, #15]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d167      	bne.n	8010f00 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8010e30:	4b36      	ldr	r3, [pc, #216]	@ (8010f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	4a35      	ldr	r2, [pc, #212]	@ (8010f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8010e36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010e3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010e3c:	f7fa f8f0 	bl	800b020 <HAL_GetTick>
 8010e40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8010e42:	e009      	b.n	8010e58 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8010e44:	f7fa f8ec 	bl	800b020 <HAL_GetTick>
 8010e48:	4602      	mov	r2, r0
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	1ad3      	subs	r3, r2, r3
 8010e4e:	2b02      	cmp	r3, #2
 8010e50:	d902      	bls.n	8010e58 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8010e52:	2303      	movs	r3, #3
 8010e54:	73fb      	strb	r3, [r7, #15]
        break;
 8010e56:	e005      	b.n	8010e64 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8010e58:	4b2c      	ldr	r3, [pc, #176]	@ (8010f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d1ef      	bne.n	8010e44 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8010e64:	7bfb      	ldrb	r3, [r7, #15]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d14a      	bne.n	8010f00 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d111      	bne.n	8010e94 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8010e70:	4b26      	ldr	r3, [pc, #152]	@ (8010f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8010e72:	695b      	ldr	r3, [r3, #20]
 8010e74:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8010e78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010e7c:	687a      	ldr	r2, [r7, #4]
 8010e7e:	6892      	ldr	r2, [r2, #8]
 8010e80:	0211      	lsls	r1, r2, #8
 8010e82:	687a      	ldr	r2, [r7, #4]
 8010e84:	68d2      	ldr	r2, [r2, #12]
 8010e86:	0912      	lsrs	r2, r2, #4
 8010e88:	0452      	lsls	r2, r2, #17
 8010e8a:	430a      	orrs	r2, r1
 8010e8c:	491f      	ldr	r1, [pc, #124]	@ (8010f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8010e8e:	4313      	orrs	r3, r2
 8010e90:	614b      	str	r3, [r1, #20]
 8010e92:	e011      	b.n	8010eb8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8010e94:	4b1d      	ldr	r3, [pc, #116]	@ (8010f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8010e96:	695b      	ldr	r3, [r3, #20]
 8010e98:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8010e9c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8010ea0:	687a      	ldr	r2, [r7, #4]
 8010ea2:	6892      	ldr	r2, [r2, #8]
 8010ea4:	0211      	lsls	r1, r2, #8
 8010ea6:	687a      	ldr	r2, [r7, #4]
 8010ea8:	6912      	ldr	r2, [r2, #16]
 8010eaa:	0852      	lsrs	r2, r2, #1
 8010eac:	3a01      	subs	r2, #1
 8010eae:	0652      	lsls	r2, r2, #25
 8010eb0:	430a      	orrs	r2, r1
 8010eb2:	4916      	ldr	r1, [pc, #88]	@ (8010f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8010eb4:	4313      	orrs	r3, r2
 8010eb6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8010eb8:	4b14      	ldr	r3, [pc, #80]	@ (8010f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	4a13      	ldr	r2, [pc, #76]	@ (8010f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8010ebe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010ec2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010ec4:	f7fa f8ac 	bl	800b020 <HAL_GetTick>
 8010ec8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8010eca:	e009      	b.n	8010ee0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8010ecc:	f7fa f8a8 	bl	800b020 <HAL_GetTick>
 8010ed0:	4602      	mov	r2, r0
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	1ad3      	subs	r3, r2, r3
 8010ed6:	2b02      	cmp	r3, #2
 8010ed8:	d902      	bls.n	8010ee0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8010eda:	2303      	movs	r3, #3
 8010edc:	73fb      	strb	r3, [r7, #15]
          break;
 8010ede:	e005      	b.n	8010eec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8010ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8010f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d0ef      	beq.n	8010ecc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8010eec:	7bfb      	ldrb	r3, [r7, #15]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d106      	bne.n	8010f00 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8010ef2:	4b06      	ldr	r3, [pc, #24]	@ (8010f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8010ef4:	695a      	ldr	r2, [r3, #20]
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	695b      	ldr	r3, [r3, #20]
 8010efa:	4904      	ldr	r1, [pc, #16]	@ (8010f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8010efc:	4313      	orrs	r3, r2
 8010efe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8010f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	3710      	adds	r7, #16
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}
 8010f0a:	bf00      	nop
 8010f0c:	40021000 	.word	0x40021000

08010f10 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b084      	sub	sp, #16
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010f18:	2301      	movs	r3, #1
 8010f1a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d079      	beq.n	8011016 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8010f28:	b2db      	uxtb	r3, r3
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d106      	bne.n	8010f3c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2200      	movs	r2, #0
 8010f32:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8010f36:	6878      	ldr	r0, [r7, #4]
 8010f38:	f7f6 fc0e 	bl	8007758 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2202      	movs	r2, #2
 8010f40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	68db      	ldr	r3, [r3, #12]
 8010f4a:	f003 0310 	and.w	r3, r3, #16
 8010f4e:	2b10      	cmp	r3, #16
 8010f50:	d058      	beq.n	8011004 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	22ca      	movs	r2, #202	@ 0xca
 8010f58:	625a      	str	r2, [r3, #36]	@ 0x24
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	2253      	movs	r2, #83	@ 0x53
 8010f60:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8010f62:	6878      	ldr	r0, [r7, #4]
 8010f64:	f000 fb82 	bl	801166c <RTC_EnterInitMode>
 8010f68:	4603      	mov	r3, r0
 8010f6a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8010f6c:	7bfb      	ldrb	r3, [r7, #15]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d127      	bne.n	8010fc2 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	689b      	ldr	r3, [r3, #8]
 8010f78:	687a      	ldr	r2, [r7, #4]
 8010f7a:	6812      	ldr	r2, [r2, #0]
 8010f7c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010f80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010f84:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	6899      	ldr	r1, [r3, #8]
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	685a      	ldr	r2, [r3, #4]
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	691b      	ldr	r3, [r3, #16]
 8010f94:	431a      	orrs	r2, r3
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	699b      	ldr	r3, [r3, #24]
 8010f9a:	431a      	orrs	r2, r3
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	430a      	orrs	r2, r1
 8010fa2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	687a      	ldr	r2, [r7, #4]
 8010faa:	68d2      	ldr	r2, [r2, #12]
 8010fac:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	6919      	ldr	r1, [r3, #16]
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	689b      	ldr	r3, [r3, #8]
 8010fb8:	041a      	lsls	r2, r3, #16
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	430a      	orrs	r2, r1
 8010fc0:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8010fc2:	6878      	ldr	r0, [r7, #4]
 8010fc4:	f000 fb86 	bl	80116d4 <RTC_ExitInitMode>
 8010fc8:	4603      	mov	r3, r0
 8010fca:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8010fcc:	7bfb      	ldrb	r3, [r7, #15]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d113      	bne.n	8010ffa <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	f022 0203 	bic.w	r2, r2, #3
 8010fe0:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	69da      	ldr	r2, [r3, #28]
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	695b      	ldr	r3, [r3, #20]
 8010ff0:	431a      	orrs	r2, r3
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	430a      	orrs	r2, r1
 8010ff8:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	22ff      	movs	r2, #255	@ 0xff
 8011000:	625a      	str	r2, [r3, #36]	@ 0x24
 8011002:	e001      	b.n	8011008 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8011004:	2300      	movs	r3, #0
 8011006:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8011008:	7bfb      	ldrb	r3, [r7, #15]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d103      	bne.n	8011016 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	2201      	movs	r2, #1
 8011012:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8011016:	7bfb      	ldrb	r3, [r7, #15]
}
 8011018:	4618      	mov	r0, r3
 801101a:	3710      	adds	r7, #16
 801101c:	46bd      	mov	sp, r7
 801101e:	bd80      	pop	{r7, pc}

08011020 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011020:	b590      	push	{r4, r7, lr}
 8011022:	b087      	sub	sp, #28
 8011024:	af00      	add	r7, sp, #0
 8011026:	60f8      	str	r0, [r7, #12]
 8011028:	60b9      	str	r1, [r7, #8]
 801102a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011032:	2b01      	cmp	r3, #1
 8011034:	d101      	bne.n	801103a <HAL_RTC_SetTime+0x1a>
 8011036:	2302      	movs	r3, #2
 8011038:	e08b      	b.n	8011152 <HAL_RTC_SetTime+0x132>
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	2201      	movs	r2, #1
 801103e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	2202      	movs	r2, #2
 8011046:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	22ca      	movs	r2, #202	@ 0xca
 8011050:	625a      	str	r2, [r3, #36]	@ 0x24
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	2253      	movs	r2, #83	@ 0x53
 8011058:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801105a:	68f8      	ldr	r0, [r7, #12]
 801105c:	f000 fb06 	bl	801166c <RTC_EnterInitMode>
 8011060:	4603      	mov	r3, r0
 8011062:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011064:	7cfb      	ldrb	r3, [r7, #19]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d163      	bne.n	8011132 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d126      	bne.n	80110be <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	689b      	ldr	r3, [r3, #8]
 8011076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801107a:	2b00      	cmp	r3, #0
 801107c:	d102      	bne.n	8011084 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 801107e:	68bb      	ldr	r3, [r7, #8]
 8011080:	2200      	movs	r2, #0
 8011082:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	781b      	ldrb	r3, [r3, #0]
 8011088:	4618      	mov	r0, r3
 801108a:	f000 fb61 	bl	8011750 <RTC_ByteToBcd2>
 801108e:	4603      	mov	r3, r0
 8011090:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	785b      	ldrb	r3, [r3, #1]
 8011096:	4618      	mov	r0, r3
 8011098:	f000 fb5a 	bl	8011750 <RTC_ByteToBcd2>
 801109c:	4603      	mov	r3, r0
 801109e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80110a0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80110a2:	68bb      	ldr	r3, [r7, #8]
 80110a4:	789b      	ldrb	r3, [r3, #2]
 80110a6:	4618      	mov	r0, r3
 80110a8:	f000 fb52 	bl	8011750 <RTC_ByteToBcd2>
 80110ac:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80110ae:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80110b2:	68bb      	ldr	r3, [r7, #8]
 80110b4:	78db      	ldrb	r3, [r3, #3]
 80110b6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80110b8:	4313      	orrs	r3, r2
 80110ba:	617b      	str	r3, [r7, #20]
 80110bc:	e018      	b.n	80110f0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	689b      	ldr	r3, [r3, #8]
 80110c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d102      	bne.n	80110d2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80110cc:	68bb      	ldr	r3, [r7, #8]
 80110ce:	2200      	movs	r2, #0
 80110d0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80110d2:	68bb      	ldr	r3, [r7, #8]
 80110d4:	781b      	ldrb	r3, [r3, #0]
 80110d6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80110d8:	68bb      	ldr	r3, [r7, #8]
 80110da:	785b      	ldrb	r3, [r3, #1]
 80110dc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80110de:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80110e0:	68ba      	ldr	r2, [r7, #8]
 80110e2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80110e4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	78db      	ldrb	r3, [r3, #3]
 80110ea:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80110ec:	4313      	orrs	r3, r2
 80110ee:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	681a      	ldr	r2, [r3, #0]
 80110f4:	697b      	ldr	r3, [r7, #20]
 80110f6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80110fa:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80110fe:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	689a      	ldr	r2, [r3, #8]
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 801110e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	6899      	ldr	r1, [r3, #8]
 8011116:	68bb      	ldr	r3, [r7, #8]
 8011118:	68da      	ldr	r2, [r3, #12]
 801111a:	68bb      	ldr	r3, [r7, #8]
 801111c:	691b      	ldr	r3, [r3, #16]
 801111e:	431a      	orrs	r2, r3
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	430a      	orrs	r2, r1
 8011126:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011128:	68f8      	ldr	r0, [r7, #12]
 801112a:	f000 fad3 	bl	80116d4 <RTC_ExitInitMode>
 801112e:	4603      	mov	r3, r0
 8011130:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	22ff      	movs	r2, #255	@ 0xff
 8011138:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 801113a:	7cfb      	ldrb	r3, [r7, #19]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d103      	bne.n	8011148 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	2201      	movs	r2, #1
 8011144:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	2200      	movs	r2, #0
 801114c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011150:	7cfb      	ldrb	r3, [r7, #19]
}
 8011152:	4618      	mov	r0, r3
 8011154:	371c      	adds	r7, #28
 8011156:	46bd      	mov	sp, r7
 8011158:	bd90      	pop	{r4, r7, pc}

0801115a <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801115a:	b580      	push	{r7, lr}
 801115c:	b086      	sub	sp, #24
 801115e:	af00      	add	r7, sp, #0
 8011160:	60f8      	str	r0, [r7, #12]
 8011162:	60b9      	str	r1, [r7, #8]
 8011164:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	691b      	ldr	r3, [r3, #16]
 8011176:	f3c3 020e 	ubfx	r2, r3, #0, #15
 801117a:	68bb      	ldr	r3, [r7, #8]
 801117c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8011188:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 801118c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 801118e:	697b      	ldr	r3, [r7, #20]
 8011190:	0c1b      	lsrs	r3, r3, #16
 8011192:	b2db      	uxtb	r3, r3
 8011194:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011198:	b2da      	uxtb	r2, r3
 801119a:	68bb      	ldr	r3, [r7, #8]
 801119c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801119e:	697b      	ldr	r3, [r7, #20]
 80111a0:	0a1b      	lsrs	r3, r3, #8
 80111a2:	b2db      	uxtb	r3, r3
 80111a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80111a8:	b2da      	uxtb	r2, r3
 80111aa:	68bb      	ldr	r3, [r7, #8]
 80111ac:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80111ae:	697b      	ldr	r3, [r7, #20]
 80111b0:	b2db      	uxtb	r3, r3
 80111b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80111b6:	b2da      	uxtb	r2, r3
 80111b8:	68bb      	ldr	r3, [r7, #8]
 80111ba:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80111bc:	697b      	ldr	r3, [r7, #20]
 80111be:	0d9b      	lsrs	r3, r3, #22
 80111c0:	b2db      	uxtb	r3, r3
 80111c2:	f003 0301 	and.w	r3, r3, #1
 80111c6:	b2da      	uxtb	r2, r3
 80111c8:	68bb      	ldr	r3, [r7, #8]
 80111ca:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d11a      	bne.n	8011208 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80111d2:	68bb      	ldr	r3, [r7, #8]
 80111d4:	781b      	ldrb	r3, [r3, #0]
 80111d6:	4618      	mov	r0, r3
 80111d8:	f000 fada 	bl	8011790 <RTC_Bcd2ToByte>
 80111dc:	4603      	mov	r3, r0
 80111de:	461a      	mov	r2, r3
 80111e0:	68bb      	ldr	r3, [r7, #8]
 80111e2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	785b      	ldrb	r3, [r3, #1]
 80111e8:	4618      	mov	r0, r3
 80111ea:	f000 fad1 	bl	8011790 <RTC_Bcd2ToByte>
 80111ee:	4603      	mov	r3, r0
 80111f0:	461a      	mov	r2, r3
 80111f2:	68bb      	ldr	r3, [r7, #8]
 80111f4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80111f6:	68bb      	ldr	r3, [r7, #8]
 80111f8:	789b      	ldrb	r3, [r3, #2]
 80111fa:	4618      	mov	r0, r3
 80111fc:	f000 fac8 	bl	8011790 <RTC_Bcd2ToByte>
 8011200:	4603      	mov	r3, r0
 8011202:	461a      	mov	r2, r3
 8011204:	68bb      	ldr	r3, [r7, #8]
 8011206:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8011208:	2300      	movs	r3, #0
}
 801120a:	4618      	mov	r0, r3
 801120c:	3718      	adds	r7, #24
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}

08011212 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011212:	b590      	push	{r4, r7, lr}
 8011214:	b087      	sub	sp, #28
 8011216:	af00      	add	r7, sp, #0
 8011218:	60f8      	str	r0, [r7, #12]
 801121a:	60b9      	str	r1, [r7, #8]
 801121c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011224:	2b01      	cmp	r3, #1
 8011226:	d101      	bne.n	801122c <HAL_RTC_SetDate+0x1a>
 8011228:	2302      	movs	r3, #2
 801122a:	e075      	b.n	8011318 <HAL_RTC_SetDate+0x106>
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	2201      	movs	r2, #1
 8011230:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	2202      	movs	r2, #2
 8011238:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d10e      	bne.n	8011260 <HAL_RTC_SetDate+0x4e>
 8011242:	68bb      	ldr	r3, [r7, #8]
 8011244:	785b      	ldrb	r3, [r3, #1]
 8011246:	f003 0310 	and.w	r3, r3, #16
 801124a:	2b00      	cmp	r3, #0
 801124c:	d008      	beq.n	8011260 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	785b      	ldrb	r3, [r3, #1]
 8011252:	f023 0310 	bic.w	r3, r3, #16
 8011256:	b2db      	uxtb	r3, r3
 8011258:	330a      	adds	r3, #10
 801125a:	b2da      	uxtb	r2, r3
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d11c      	bne.n	80112a0 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8011266:	68bb      	ldr	r3, [r7, #8]
 8011268:	78db      	ldrb	r3, [r3, #3]
 801126a:	4618      	mov	r0, r3
 801126c:	f000 fa70 	bl	8011750 <RTC_ByteToBcd2>
 8011270:	4603      	mov	r3, r0
 8011272:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011274:	68bb      	ldr	r3, [r7, #8]
 8011276:	785b      	ldrb	r3, [r3, #1]
 8011278:	4618      	mov	r0, r3
 801127a:	f000 fa69 	bl	8011750 <RTC_ByteToBcd2>
 801127e:	4603      	mov	r3, r0
 8011280:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8011282:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	789b      	ldrb	r3, [r3, #2]
 8011288:	4618      	mov	r0, r3
 801128a:	f000 fa61 	bl	8011750 <RTC_ByteToBcd2>
 801128e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011290:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8011294:	68bb      	ldr	r3, [r7, #8]
 8011296:	781b      	ldrb	r3, [r3, #0]
 8011298:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 801129a:	4313      	orrs	r3, r2
 801129c:	617b      	str	r3, [r7, #20]
 801129e:	e00e      	b.n	80112be <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80112a0:	68bb      	ldr	r3, [r7, #8]
 80112a2:	78db      	ldrb	r3, [r3, #3]
 80112a4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	785b      	ldrb	r3, [r3, #1]
 80112aa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80112ac:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80112ae:	68ba      	ldr	r2, [r7, #8]
 80112b0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80112b2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80112b4:	68bb      	ldr	r3, [r7, #8]
 80112b6:	781b      	ldrb	r3, [r3, #0]
 80112b8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80112ba:	4313      	orrs	r3, r2
 80112bc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	22ca      	movs	r2, #202	@ 0xca
 80112c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	2253      	movs	r2, #83	@ 0x53
 80112cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80112ce:	68f8      	ldr	r0, [r7, #12]
 80112d0:	f000 f9cc 	bl	801166c <RTC_EnterInitMode>
 80112d4:	4603      	mov	r3, r0
 80112d6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80112d8:	7cfb      	ldrb	r3, [r7, #19]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d10c      	bne.n	80112f8 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	681a      	ldr	r2, [r3, #0]
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80112e8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80112ec:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80112ee:	68f8      	ldr	r0, [r7, #12]
 80112f0:	f000 f9f0 	bl	80116d4 <RTC_ExitInitMode>
 80112f4:	4603      	mov	r3, r0
 80112f6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	22ff      	movs	r2, #255	@ 0xff
 80112fe:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8011300:	7cfb      	ldrb	r3, [r7, #19]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d103      	bne.n	801130e <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	2201      	movs	r2, #1
 801130a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	2200      	movs	r2, #0
 8011312:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011316:	7cfb      	ldrb	r3, [r7, #19]
}
 8011318:	4618      	mov	r0, r3
 801131a:	371c      	adds	r7, #28
 801131c:	46bd      	mov	sp, r7
 801131e:	bd90      	pop	{r4, r7, pc}

08011320 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8011320:	b590      	push	{r4, r7, lr}
 8011322:	b089      	sub	sp, #36	@ 0x24
 8011324:	af00      	add	r7, sp, #0
 8011326:	60f8      	str	r0, [r7, #12]
 8011328:	60b9      	str	r1, [r7, #8]
 801132a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011332:	2b01      	cmp	r3, #1
 8011334:	d101      	bne.n	801133a <HAL_RTC_SetAlarm_IT+0x1a>
 8011336:	2302      	movs	r3, #2
 8011338:	e127      	b.n	801158a <HAL_RTC_SetAlarm_IT+0x26a>
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	2201      	movs	r2, #1
 801133e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	2202      	movs	r2, #2
 8011346:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d137      	bne.n	80113c0 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	689b      	ldr	r3, [r3, #8]
 8011356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801135a:	2b00      	cmp	r3, #0
 801135c:	d102      	bne.n	8011364 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	2200      	movs	r2, #0
 8011362:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011364:	68bb      	ldr	r3, [r7, #8]
 8011366:	781b      	ldrb	r3, [r3, #0]
 8011368:	4618      	mov	r0, r3
 801136a:	f000 f9f1 	bl	8011750 <RTC_ByteToBcd2>
 801136e:	4603      	mov	r3, r0
 8011370:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8011372:	68bb      	ldr	r3, [r7, #8]
 8011374:	785b      	ldrb	r3, [r3, #1]
 8011376:	4618      	mov	r0, r3
 8011378:	f000 f9ea 	bl	8011750 <RTC_ByteToBcd2>
 801137c:	4603      	mov	r3, r0
 801137e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011380:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8011382:	68bb      	ldr	r3, [r7, #8]
 8011384:	789b      	ldrb	r3, [r3, #2]
 8011386:	4618      	mov	r0, r3
 8011388:	f000 f9e2 	bl	8011750 <RTC_ByteToBcd2>
 801138c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 801138e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8011392:	68bb      	ldr	r3, [r7, #8]
 8011394:	78db      	ldrb	r3, [r3, #3]
 8011396:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8011398:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 801139c:	68bb      	ldr	r3, [r7, #8]
 801139e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80113a2:	4618      	mov	r0, r3
 80113a4:	f000 f9d4 	bl	8011750 <RTC_ByteToBcd2>
 80113a8:	4603      	mov	r3, r0
 80113aa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80113ac:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80113b4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80113ba:	4313      	orrs	r3, r2
 80113bc:	61fb      	str	r3, [r7, #28]
 80113be:	e023      	b.n	8011408 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	689b      	ldr	r3, [r3, #8]
 80113c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d102      	bne.n	80113d4 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80113ce:	68bb      	ldr	r3, [r7, #8]
 80113d0:	2200      	movs	r2, #0
 80113d2:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	781b      	ldrb	r3, [r3, #0]
 80113d8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	785b      	ldrb	r3, [r3, #1]
 80113de:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80113e0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80113e2:	68ba      	ldr	r2, [r7, #8]
 80113e4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80113e6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	78db      	ldrb	r3, [r3, #3]
 80113ec:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80113ee:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80113f6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80113f8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80113fe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011404:	4313      	orrs	r3, r2
 8011406:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8011408:	68bb      	ldr	r3, [r7, #8]
 801140a:	685a      	ldr	r2, [r3, #4]
 801140c:	68bb      	ldr	r3, [r7, #8]
 801140e:	69db      	ldr	r3, [r3, #28]
 8011410:	4313      	orrs	r3, r2
 8011412:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	22ca      	movs	r2, #202	@ 0xca
 801141a:	625a      	str	r2, [r3, #36]	@ 0x24
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	2253      	movs	r2, #83	@ 0x53
 8011422:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011428:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801142c:	d14a      	bne.n	80114c4 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	689a      	ldr	r2, [r3, #8]
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801143c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	68db      	ldr	r3, [r3, #12]
 8011444:	b2da      	uxtb	r2, r3
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 801144e:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8011450:	f7f9 fde6 	bl	800b020 <HAL_GetTick>
 8011454:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8011456:	e015      	b.n	8011484 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011458:	f7f9 fde2 	bl	800b020 <HAL_GetTick>
 801145c:	4602      	mov	r2, r0
 801145e:	693b      	ldr	r3, [r7, #16]
 8011460:	1ad3      	subs	r3, r2, r3
 8011462:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011466:	d90d      	bls.n	8011484 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	22ff      	movs	r2, #255	@ 0xff
 801146e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	2203      	movs	r2, #3
 8011474:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	2200      	movs	r2, #0
 801147c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8011480:	2303      	movs	r3, #3
 8011482:	e082      	b.n	801158a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	68db      	ldr	r3, [r3, #12]
 801148a:	f003 0301 	and.w	r3, r3, #1
 801148e:	2b00      	cmp	r3, #0
 8011490:	d0e2      	beq.n	8011458 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	69fa      	ldr	r2, [r7, #28]
 8011498:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	69ba      	ldr	r2, [r7, #24]
 80114a0:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	689a      	ldr	r2, [r3, #8]
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80114b0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	689a      	ldr	r2, [r3, #8]
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80114c0:	609a      	str	r2, [r3, #8]
 80114c2:	e049      	b.n	8011558 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	689a      	ldr	r2, [r3, #8]
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80114d2:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	68db      	ldr	r3, [r3, #12]
 80114da:	b2da      	uxtb	r2, r3
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80114e4:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80114e6:	f7f9 fd9b 	bl	800b020 <HAL_GetTick>
 80114ea:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80114ec:	e015      	b.n	801151a <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80114ee:	f7f9 fd97 	bl	800b020 <HAL_GetTick>
 80114f2:	4602      	mov	r2, r0
 80114f4:	697b      	ldr	r3, [r7, #20]
 80114f6:	1ad3      	subs	r3, r2, r3
 80114f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80114fc:	d90d      	bls.n	801151a <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	22ff      	movs	r2, #255	@ 0xff
 8011504:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	2203      	movs	r2, #3
 801150a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	2200      	movs	r2, #0
 8011512:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8011516:	2303      	movs	r3, #3
 8011518:	e037      	b.n	801158a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	68db      	ldr	r3, [r3, #12]
 8011520:	f003 0302 	and.w	r3, r3, #2
 8011524:	2b00      	cmp	r3, #0
 8011526:	d0e2      	beq.n	80114ee <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	69fa      	ldr	r2, [r7, #28]
 801152e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	69ba      	ldr	r2, [r7, #24]
 8011536:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	689a      	ldr	r2, [r3, #8]
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011546:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	689a      	ldr	r2, [r3, #8]
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8011556:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8011558:	4b0e      	ldr	r3, [pc, #56]	@ (8011594 <HAL_RTC_SetAlarm_IT+0x274>)
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	4a0d      	ldr	r2, [pc, #52]	@ (8011594 <HAL_RTC_SetAlarm_IT+0x274>)
 801155e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011562:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8011564:	4b0b      	ldr	r3, [pc, #44]	@ (8011594 <HAL_RTC_SetAlarm_IT+0x274>)
 8011566:	689b      	ldr	r3, [r3, #8]
 8011568:	4a0a      	ldr	r2, [pc, #40]	@ (8011594 <HAL_RTC_SetAlarm_IT+0x274>)
 801156a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801156e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	22ff      	movs	r2, #255	@ 0xff
 8011576:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	2201      	movs	r2, #1
 801157c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	2200      	movs	r2, #0
 8011584:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8011588:	2300      	movs	r3, #0
}
 801158a:	4618      	mov	r0, r3
 801158c:	3724      	adds	r7, #36	@ 0x24
 801158e:	46bd      	mov	sp, r7
 8011590:	bd90      	pop	{r4, r7, pc}
 8011592:	bf00      	nop
 8011594:	40010400 	.word	0x40010400

08011598 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b082      	sub	sp, #8
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80115a0:	4b1f      	ldr	r3, [pc, #124]	@ (8011620 <HAL_RTC_AlarmIRQHandler+0x88>)
 80115a2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80115a6:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	689b      	ldr	r3, [r3, #8]
 80115ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d012      	beq.n	80115dc <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	68db      	ldr	r3, [r3, #12]
 80115bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d00b      	beq.n	80115dc <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	68db      	ldr	r3, [r3, #12]
 80115ca:	b2da      	uxtb	r2, r3
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80115d4:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80115d6:	6878      	ldr	r0, [r7, #4]
 80115d8:	f7f1 faa0 	bl	8002b1c <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	689b      	ldr	r3, [r3, #8]
 80115e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d012      	beq.n	8011610 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	68db      	ldr	r3, [r3, #12]
 80115f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d00b      	beq.n	8011610 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	68db      	ldr	r3, [r3, #12]
 80115fe:	b2da      	uxtb	r2, r3
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8011608:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 801160a:	6878      	ldr	r0, [r7, #4]
 801160c:	f000 f8da 	bl	80117c4 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2201      	movs	r2, #1
 8011614:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8011618:	bf00      	nop
 801161a:	3708      	adds	r7, #8
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}
 8011620:	40010400 	.word	0x40010400

08011624 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b084      	sub	sp, #16
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	4a0d      	ldr	r2, [pc, #52]	@ (8011668 <HAL_RTC_WaitForSynchro+0x44>)
 8011632:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8011634:	f7f9 fcf4 	bl	800b020 <HAL_GetTick>
 8011638:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801163a:	e009      	b.n	8011650 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801163c:	f7f9 fcf0 	bl	800b020 <HAL_GetTick>
 8011640:	4602      	mov	r2, r0
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	1ad3      	subs	r3, r2, r3
 8011646:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801164a:	d901      	bls.n	8011650 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 801164c:	2303      	movs	r3, #3
 801164e:	e007      	b.n	8011660 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	68db      	ldr	r3, [r3, #12]
 8011656:	f003 0320 	and.w	r3, r3, #32
 801165a:	2b00      	cmp	r3, #0
 801165c:	d0ee      	beq.n	801163c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 801165e:	2300      	movs	r3, #0
}
 8011660:	4618      	mov	r0, r3
 8011662:	3710      	adds	r7, #16
 8011664:	46bd      	mov	sp, r7
 8011666:	bd80      	pop	{r7, pc}
 8011668:	0003ff5f 	.word	0x0003ff5f

0801166c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b084      	sub	sp, #16
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011674:	2300      	movs	r3, #0
 8011676:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	68db      	ldr	r3, [r3, #12]
 801167e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011682:	2b00      	cmp	r3, #0
 8011684:	d120      	bne.n	80116c8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	f04f 32ff 	mov.w	r2, #4294967295
 801168e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011690:	f7f9 fcc6 	bl	800b020 <HAL_GetTick>
 8011694:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011696:	e00d      	b.n	80116b4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011698:	f7f9 fcc2 	bl	800b020 <HAL_GetTick>
 801169c:	4602      	mov	r2, r0
 801169e:	68bb      	ldr	r3, [r7, #8]
 80116a0:	1ad3      	subs	r3, r2, r3
 80116a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80116a6:	d905      	bls.n	80116b4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80116a8:	2303      	movs	r3, #3
 80116aa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	2203      	movs	r2, #3
 80116b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	68db      	ldr	r3, [r3, #12]
 80116ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d102      	bne.n	80116c8 <RTC_EnterInitMode+0x5c>
 80116c2:	7bfb      	ldrb	r3, [r7, #15]
 80116c4:	2b03      	cmp	r3, #3
 80116c6:	d1e7      	bne.n	8011698 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80116c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80116ca:	4618      	mov	r0, r3
 80116cc:	3710      	adds	r7, #16
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd80      	pop	{r7, pc}
	...

080116d4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b084      	sub	sp, #16
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80116dc:	2300      	movs	r3, #0
 80116de:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80116e0:	4b1a      	ldr	r3, [pc, #104]	@ (801174c <RTC_ExitInitMode+0x78>)
 80116e2:	68db      	ldr	r3, [r3, #12]
 80116e4:	4a19      	ldr	r2, [pc, #100]	@ (801174c <RTC_ExitInitMode+0x78>)
 80116e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80116ea:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80116ec:	4b17      	ldr	r3, [pc, #92]	@ (801174c <RTC_ExitInitMode+0x78>)
 80116ee:	689b      	ldr	r3, [r3, #8]
 80116f0:	f003 0320 	and.w	r3, r3, #32
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d10c      	bne.n	8011712 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80116f8:	6878      	ldr	r0, [r7, #4]
 80116fa:	f7ff ff93 	bl	8011624 <HAL_RTC_WaitForSynchro>
 80116fe:	4603      	mov	r3, r0
 8011700:	2b00      	cmp	r3, #0
 8011702:	d01e      	beq.n	8011742 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2203      	movs	r2, #3
 8011708:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 801170c:	2303      	movs	r3, #3
 801170e:	73fb      	strb	r3, [r7, #15]
 8011710:	e017      	b.n	8011742 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011712:	4b0e      	ldr	r3, [pc, #56]	@ (801174c <RTC_ExitInitMode+0x78>)
 8011714:	689b      	ldr	r3, [r3, #8]
 8011716:	4a0d      	ldr	r2, [pc, #52]	@ (801174c <RTC_ExitInitMode+0x78>)
 8011718:	f023 0320 	bic.w	r3, r3, #32
 801171c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801171e:	6878      	ldr	r0, [r7, #4]
 8011720:	f7ff ff80 	bl	8011624 <HAL_RTC_WaitForSynchro>
 8011724:	4603      	mov	r3, r0
 8011726:	2b00      	cmp	r3, #0
 8011728:	d005      	beq.n	8011736 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	2203      	movs	r2, #3
 801172e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8011732:	2303      	movs	r3, #3
 8011734:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011736:	4b05      	ldr	r3, [pc, #20]	@ (801174c <RTC_ExitInitMode+0x78>)
 8011738:	689b      	ldr	r3, [r3, #8]
 801173a:	4a04      	ldr	r2, [pc, #16]	@ (801174c <RTC_ExitInitMode+0x78>)
 801173c:	f043 0320 	orr.w	r3, r3, #32
 8011740:	6093      	str	r3, [r2, #8]
  }

  return status;
 8011742:	7bfb      	ldrb	r3, [r7, #15]
}
 8011744:	4618      	mov	r0, r3
 8011746:	3710      	adds	r7, #16
 8011748:	46bd      	mov	sp, r7
 801174a:	bd80      	pop	{r7, pc}
 801174c:	40002800 	.word	0x40002800

08011750 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8011750:	b480      	push	{r7}
 8011752:	b085      	sub	sp, #20
 8011754:	af00      	add	r7, sp, #0
 8011756:	4603      	mov	r3, r0
 8011758:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 801175a:	2300      	movs	r3, #0
 801175c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 801175e:	79fb      	ldrb	r3, [r7, #7]
 8011760:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8011762:	e005      	b.n	8011770 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	3301      	adds	r3, #1
 8011768:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 801176a:	7afb      	ldrb	r3, [r7, #11]
 801176c:	3b0a      	subs	r3, #10
 801176e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8011770:	7afb      	ldrb	r3, [r7, #11]
 8011772:	2b09      	cmp	r3, #9
 8011774:	d8f6      	bhi.n	8011764 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	b2db      	uxtb	r3, r3
 801177a:	011b      	lsls	r3, r3, #4
 801177c:	b2da      	uxtb	r2, r3
 801177e:	7afb      	ldrb	r3, [r7, #11]
 8011780:	4313      	orrs	r3, r2
 8011782:	b2db      	uxtb	r3, r3
}
 8011784:	4618      	mov	r0, r3
 8011786:	3714      	adds	r7, #20
 8011788:	46bd      	mov	sp, r7
 801178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178e:	4770      	bx	lr

08011790 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011790:	b480      	push	{r7}
 8011792:	b085      	sub	sp, #20
 8011794:	af00      	add	r7, sp, #0
 8011796:	4603      	mov	r3, r0
 8011798:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 801179a:	79fb      	ldrb	r3, [r7, #7]
 801179c:	091b      	lsrs	r3, r3, #4
 801179e:	b2db      	uxtb	r3, r3
 80117a0:	461a      	mov	r2, r3
 80117a2:	0092      	lsls	r2, r2, #2
 80117a4:	4413      	add	r3, r2
 80117a6:	005b      	lsls	r3, r3, #1
 80117a8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80117aa:	79fb      	ldrb	r3, [r7, #7]
 80117ac:	f003 030f 	and.w	r3, r3, #15
 80117b0:	b2da      	uxtb	r2, r3
 80117b2:	7bfb      	ldrb	r3, [r7, #15]
 80117b4:	4413      	add	r3, r2
 80117b6:	b2db      	uxtb	r3, r3
}
 80117b8:	4618      	mov	r0, r3
 80117ba:	3714      	adds	r7, #20
 80117bc:	46bd      	mov	sp, r7
 80117be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c2:	4770      	bx	lr

080117c4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80117c4:	b480      	push	{r7}
 80117c6:	b083      	sub	sp, #12
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80117cc:	bf00      	nop
 80117ce:	370c      	adds	r7, #12
 80117d0:	46bd      	mov	sp, r7
 80117d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d6:	4770      	bx	lr

080117d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b084      	sub	sp, #16
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d101      	bne.n	80117ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80117e6:	2301      	movs	r3, #1
 80117e8:	e095      	b.n	8011916 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d108      	bne.n	8011804 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	685b      	ldr	r3, [r3, #4]
 80117f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80117fa:	d009      	beq.n	8011810 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2200      	movs	r2, #0
 8011800:	61da      	str	r2, [r3, #28]
 8011802:	e005      	b.n	8011810 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2200      	movs	r2, #0
 8011808:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2200      	movs	r2, #0
 801180e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	2200      	movs	r2, #0
 8011814:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801181c:	b2db      	uxtb	r3, r3
 801181e:	2b00      	cmp	r3, #0
 8011820:	d106      	bne.n	8011830 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	2200      	movs	r2, #0
 8011826:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801182a:	6878      	ldr	r0, [r7, #4]
 801182c:	f7f5 ffce 	bl	80077cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	2202      	movs	r2, #2
 8011834:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	681a      	ldr	r2, [r3, #0]
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011846:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	68db      	ldr	r3, [r3, #12]
 801184c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011850:	d902      	bls.n	8011858 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8011852:	2300      	movs	r3, #0
 8011854:	60fb      	str	r3, [r7, #12]
 8011856:	e002      	b.n	801185e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8011858:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801185c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	68db      	ldr	r3, [r3, #12]
 8011862:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8011866:	d007      	beq.n	8011878 <HAL_SPI_Init+0xa0>
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	68db      	ldr	r3, [r3, #12]
 801186c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011870:	d002      	beq.n	8011878 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	2200      	movs	r2, #0
 8011876:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	685b      	ldr	r3, [r3, #4]
 801187c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	689b      	ldr	r3, [r3, #8]
 8011884:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8011888:	431a      	orrs	r2, r3
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	691b      	ldr	r3, [r3, #16]
 801188e:	f003 0302 	and.w	r3, r3, #2
 8011892:	431a      	orrs	r2, r3
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	695b      	ldr	r3, [r3, #20]
 8011898:	f003 0301 	and.w	r3, r3, #1
 801189c:	431a      	orrs	r2, r3
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	699b      	ldr	r3, [r3, #24]
 80118a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80118a6:	431a      	orrs	r2, r3
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	69db      	ldr	r3, [r3, #28]
 80118ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80118b0:	431a      	orrs	r2, r3
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	6a1b      	ldr	r3, [r3, #32]
 80118b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80118ba:	ea42 0103 	orr.w	r1, r2, r3
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118c2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	430a      	orrs	r2, r1
 80118cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	699b      	ldr	r3, [r3, #24]
 80118d2:	0c1b      	lsrs	r3, r3, #16
 80118d4:	f003 0204 	and.w	r2, r3, #4
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118dc:	f003 0310 	and.w	r3, r3, #16
 80118e0:	431a      	orrs	r2, r3
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80118e6:	f003 0308 	and.w	r3, r3, #8
 80118ea:	431a      	orrs	r2, r3
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	68db      	ldr	r3, [r3, #12]
 80118f0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80118f4:	ea42 0103 	orr.w	r1, r2, r3
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	430a      	orrs	r2, r1
 8011904:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	2200      	movs	r2, #0
 801190a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2201      	movs	r2, #1
 8011910:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8011914:	2300      	movs	r3, #0
}
 8011916:	4618      	mov	r0, r3
 8011918:	3710      	adds	r7, #16
 801191a:	46bd      	mov	sp, r7
 801191c:	bd80      	pop	{r7, pc}

0801191e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801191e:	b580      	push	{r7, lr}
 8011920:	b088      	sub	sp, #32
 8011922:	af00      	add	r7, sp, #0
 8011924:	60f8      	str	r0, [r7, #12]
 8011926:	60b9      	str	r1, [r7, #8]
 8011928:	603b      	str	r3, [r7, #0]
 801192a:	4613      	mov	r3, r2
 801192c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801192e:	f7f9 fb77 	bl	800b020 <HAL_GetTick>
 8011932:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8011934:	88fb      	ldrh	r3, [r7, #6]
 8011936:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801193e:	b2db      	uxtb	r3, r3
 8011940:	2b01      	cmp	r3, #1
 8011942:	d001      	beq.n	8011948 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8011944:	2302      	movs	r3, #2
 8011946:	e15c      	b.n	8011c02 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8011948:	68bb      	ldr	r3, [r7, #8]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d002      	beq.n	8011954 <HAL_SPI_Transmit+0x36>
 801194e:	88fb      	ldrh	r3, [r7, #6]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d101      	bne.n	8011958 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8011954:	2301      	movs	r3, #1
 8011956:	e154      	b.n	8011c02 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 801195e:	2b01      	cmp	r3, #1
 8011960:	d101      	bne.n	8011966 <HAL_SPI_Transmit+0x48>
 8011962:	2302      	movs	r3, #2
 8011964:	e14d      	b.n	8011c02 <HAL_SPI_Transmit+0x2e4>
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	2201      	movs	r2, #1
 801196a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	2203      	movs	r2, #3
 8011972:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	2200      	movs	r2, #0
 801197a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	68ba      	ldr	r2, [r7, #8]
 8011980:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	88fa      	ldrh	r2, [r7, #6]
 8011986:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	88fa      	ldrh	r2, [r7, #6]
 801198c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	2200      	movs	r2, #0
 8011992:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	2200      	movs	r2, #0
 8011998:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	2200      	movs	r2, #0
 80119a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	2200      	movs	r2, #0
 80119a8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	2200      	movs	r2, #0
 80119ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	689b      	ldr	r3, [r3, #8]
 80119b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80119b8:	d10f      	bne.n	80119da <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	681a      	ldr	r2, [r3, #0]
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80119c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	681a      	ldr	r2, [r3, #0]
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80119d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119e4:	2b40      	cmp	r3, #64	@ 0x40
 80119e6:	d007      	beq.n	80119f8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	681a      	ldr	r2, [r3, #0]
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80119f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	68db      	ldr	r3, [r3, #12]
 80119fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011a00:	d952      	bls.n	8011aa8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	685b      	ldr	r3, [r3, #4]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d002      	beq.n	8011a10 <HAL_SPI_Transmit+0xf2>
 8011a0a:	8b7b      	ldrh	r3, [r7, #26]
 8011a0c:	2b01      	cmp	r3, #1
 8011a0e:	d145      	bne.n	8011a9c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a14:	881a      	ldrh	r2, [r3, #0]
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a20:	1c9a      	adds	r2, r3, #2
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011a2a:	b29b      	uxth	r3, r3
 8011a2c:	3b01      	subs	r3, #1
 8011a2e:	b29a      	uxth	r2, r3
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8011a34:	e032      	b.n	8011a9c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	689b      	ldr	r3, [r3, #8]
 8011a3c:	f003 0302 	and.w	r3, r3, #2
 8011a40:	2b02      	cmp	r3, #2
 8011a42:	d112      	bne.n	8011a6a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a48:	881a      	ldrh	r2, [r3, #0]
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a54:	1c9a      	adds	r2, r3, #2
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011a5e:	b29b      	uxth	r3, r3
 8011a60:	3b01      	subs	r3, #1
 8011a62:	b29a      	uxth	r2, r3
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011a68:	e018      	b.n	8011a9c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011a6a:	f7f9 fad9 	bl	800b020 <HAL_GetTick>
 8011a6e:	4602      	mov	r2, r0
 8011a70:	69fb      	ldr	r3, [r7, #28]
 8011a72:	1ad3      	subs	r3, r2, r3
 8011a74:	683a      	ldr	r2, [r7, #0]
 8011a76:	429a      	cmp	r2, r3
 8011a78:	d803      	bhi.n	8011a82 <HAL_SPI_Transmit+0x164>
 8011a7a:	683b      	ldr	r3, [r7, #0]
 8011a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a80:	d102      	bne.n	8011a88 <HAL_SPI_Transmit+0x16a>
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d109      	bne.n	8011a9c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	2201      	movs	r2, #1
 8011a8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	2200      	movs	r2, #0
 8011a94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8011a98:	2303      	movs	r3, #3
 8011a9a:	e0b2      	b.n	8011c02 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011aa0:	b29b      	uxth	r3, r3
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d1c7      	bne.n	8011a36 <HAL_SPI_Transmit+0x118>
 8011aa6:	e083      	b.n	8011bb0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	685b      	ldr	r3, [r3, #4]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d002      	beq.n	8011ab6 <HAL_SPI_Transmit+0x198>
 8011ab0:	8b7b      	ldrh	r3, [r7, #26]
 8011ab2:	2b01      	cmp	r3, #1
 8011ab4:	d177      	bne.n	8011ba6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011aba:	b29b      	uxth	r3, r3
 8011abc:	2b01      	cmp	r3, #1
 8011abe:	d912      	bls.n	8011ae6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ac4:	881a      	ldrh	r2, [r3, #0]
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ad0:	1c9a      	adds	r2, r3, #2
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011ada:	b29b      	uxth	r3, r3
 8011adc:	3b02      	subs	r3, #2
 8011ade:	b29a      	uxth	r2, r3
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011ae4:	e05f      	b.n	8011ba6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	330c      	adds	r3, #12
 8011af0:	7812      	ldrb	r2, [r2, #0]
 8011af2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011af8:	1c5a      	adds	r2, r3, #1
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011b02:	b29b      	uxth	r3, r3
 8011b04:	3b01      	subs	r3, #1
 8011b06:	b29a      	uxth	r2, r3
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8011b0c:	e04b      	b.n	8011ba6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	689b      	ldr	r3, [r3, #8]
 8011b14:	f003 0302 	and.w	r3, r3, #2
 8011b18:	2b02      	cmp	r3, #2
 8011b1a:	d12b      	bne.n	8011b74 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011b20:	b29b      	uxth	r3, r3
 8011b22:	2b01      	cmp	r3, #1
 8011b24:	d912      	bls.n	8011b4c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b2a:	881a      	ldrh	r2, [r3, #0]
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b36:	1c9a      	adds	r2, r3, #2
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011b40:	b29b      	uxth	r3, r3
 8011b42:	3b02      	subs	r3, #2
 8011b44:	b29a      	uxth	r2, r3
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011b4a:	e02c      	b.n	8011ba6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	330c      	adds	r3, #12
 8011b56:	7812      	ldrb	r2, [r2, #0]
 8011b58:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b5e:	1c5a      	adds	r2, r3, #1
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011b68:	b29b      	uxth	r3, r3
 8011b6a:	3b01      	subs	r3, #1
 8011b6c:	b29a      	uxth	r2, r3
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011b72:	e018      	b.n	8011ba6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011b74:	f7f9 fa54 	bl	800b020 <HAL_GetTick>
 8011b78:	4602      	mov	r2, r0
 8011b7a:	69fb      	ldr	r3, [r7, #28]
 8011b7c:	1ad3      	subs	r3, r2, r3
 8011b7e:	683a      	ldr	r2, [r7, #0]
 8011b80:	429a      	cmp	r2, r3
 8011b82:	d803      	bhi.n	8011b8c <HAL_SPI_Transmit+0x26e>
 8011b84:	683b      	ldr	r3, [r7, #0]
 8011b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b8a:	d102      	bne.n	8011b92 <HAL_SPI_Transmit+0x274>
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d109      	bne.n	8011ba6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	2201      	movs	r2, #1
 8011b96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8011ba2:	2303      	movs	r3, #3
 8011ba4:	e02d      	b.n	8011c02 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011baa:	b29b      	uxth	r3, r3
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d1ae      	bne.n	8011b0e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011bb0:	69fa      	ldr	r2, [r7, #28]
 8011bb2:	6839      	ldr	r1, [r7, #0]
 8011bb4:	68f8      	ldr	r0, [r7, #12]
 8011bb6:	f000 fcf5 	bl	80125a4 <SPI_EndRxTxTransaction>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d002      	beq.n	8011bc6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	2220      	movs	r2, #32
 8011bc4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	689b      	ldr	r3, [r3, #8]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d10a      	bne.n	8011be4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011bce:	2300      	movs	r3, #0
 8011bd0:	617b      	str	r3, [r7, #20]
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	68db      	ldr	r3, [r3, #12]
 8011bd8:	617b      	str	r3, [r7, #20]
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	689b      	ldr	r3, [r3, #8]
 8011be0:	617b      	str	r3, [r7, #20]
 8011be2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	2201      	movs	r2, #1
 8011be8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	2200      	movs	r2, #0
 8011bf0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d001      	beq.n	8011c00 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	e000      	b.n	8011c02 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8011c00:	2300      	movs	r3, #0
  }
}
 8011c02:	4618      	mov	r0, r3
 8011c04:	3720      	adds	r7, #32
 8011c06:	46bd      	mov	sp, r7
 8011c08:	bd80      	pop	{r7, pc}

08011c0a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011c0a:	b580      	push	{r7, lr}
 8011c0c:	b088      	sub	sp, #32
 8011c0e:	af02      	add	r7, sp, #8
 8011c10:	60f8      	str	r0, [r7, #12]
 8011c12:	60b9      	str	r1, [r7, #8]
 8011c14:	603b      	str	r3, [r7, #0]
 8011c16:	4613      	mov	r3, r2
 8011c18:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011c20:	b2db      	uxtb	r3, r3
 8011c22:	2b01      	cmp	r3, #1
 8011c24:	d001      	beq.n	8011c2a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8011c26:	2302      	movs	r3, #2
 8011c28:	e123      	b.n	8011e72 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	685b      	ldr	r3, [r3, #4]
 8011c2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011c32:	d112      	bne.n	8011c5a <HAL_SPI_Receive+0x50>
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	689b      	ldr	r3, [r3, #8]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d10e      	bne.n	8011c5a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	2204      	movs	r2, #4
 8011c40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8011c44:	88fa      	ldrh	r2, [r7, #6]
 8011c46:	683b      	ldr	r3, [r7, #0]
 8011c48:	9300      	str	r3, [sp, #0]
 8011c4a:	4613      	mov	r3, r2
 8011c4c:	68ba      	ldr	r2, [r7, #8]
 8011c4e:	68b9      	ldr	r1, [r7, #8]
 8011c50:	68f8      	ldr	r0, [r7, #12]
 8011c52:	f000 f912 	bl	8011e7a <HAL_SPI_TransmitReceive>
 8011c56:	4603      	mov	r3, r0
 8011c58:	e10b      	b.n	8011e72 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011c5a:	f7f9 f9e1 	bl	800b020 <HAL_GetTick>
 8011c5e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8011c60:	68bb      	ldr	r3, [r7, #8]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d002      	beq.n	8011c6c <HAL_SPI_Receive+0x62>
 8011c66:	88fb      	ldrh	r3, [r7, #6]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d101      	bne.n	8011c70 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	e100      	b.n	8011e72 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8011c76:	2b01      	cmp	r3, #1
 8011c78:	d101      	bne.n	8011c7e <HAL_SPI_Receive+0x74>
 8011c7a:	2302      	movs	r3, #2
 8011c7c:	e0f9      	b.n	8011e72 <HAL_SPI_Receive+0x268>
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	2201      	movs	r2, #1
 8011c82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	2204      	movs	r2, #4
 8011c8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	2200      	movs	r2, #0
 8011c92:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	68ba      	ldr	r2, [r7, #8]
 8011c98:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	88fa      	ldrh	r2, [r7, #6]
 8011c9e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	88fa      	ldrh	r2, [r7, #6]
 8011ca6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	2200      	movs	r2, #0
 8011cae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	2200      	movs	r2, #0
 8011cba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	68db      	ldr	r3, [r3, #12]
 8011ccc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011cd0:	d908      	bls.n	8011ce4 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	685a      	ldr	r2, [r3, #4]
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8011ce0:	605a      	str	r2, [r3, #4]
 8011ce2:	e007      	b.n	8011cf4 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	685a      	ldr	r2, [r3, #4]
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011cf2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	689b      	ldr	r3, [r3, #8]
 8011cf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011cfc:	d10f      	bne.n	8011d1e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	681a      	ldr	r2, [r3, #0]
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011d0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	681a      	ldr	r2, [r3, #0]
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8011d1c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011d28:	2b40      	cmp	r3, #64	@ 0x40
 8011d2a:	d007      	beq.n	8011d3c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	681a      	ldr	r2, [r3, #0]
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011d3a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	68db      	ldr	r3, [r3, #12]
 8011d40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011d44:	d875      	bhi.n	8011e32 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8011d46:	e037      	b.n	8011db8 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	689b      	ldr	r3, [r3, #8]
 8011d4e:	f003 0301 	and.w	r3, r3, #1
 8011d52:	2b01      	cmp	r3, #1
 8011d54:	d117      	bne.n	8011d86 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	f103 020c 	add.w	r2, r3, #12
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d62:	7812      	ldrb	r2, [r2, #0]
 8011d64:	b2d2      	uxtb	r2, r2
 8011d66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d6c:	1c5a      	adds	r2, r3, #1
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011d78:	b29b      	uxth	r3, r3
 8011d7a:	3b01      	subs	r3, #1
 8011d7c:	b29a      	uxth	r2, r3
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8011d84:	e018      	b.n	8011db8 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011d86:	f7f9 f94b 	bl	800b020 <HAL_GetTick>
 8011d8a:	4602      	mov	r2, r0
 8011d8c:	697b      	ldr	r3, [r7, #20]
 8011d8e:	1ad3      	subs	r3, r2, r3
 8011d90:	683a      	ldr	r2, [r7, #0]
 8011d92:	429a      	cmp	r2, r3
 8011d94:	d803      	bhi.n	8011d9e <HAL_SPI_Receive+0x194>
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d9c:	d102      	bne.n	8011da4 <HAL_SPI_Receive+0x19a>
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d109      	bne.n	8011db8 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	2201      	movs	r2, #1
 8011da8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	2200      	movs	r2, #0
 8011db0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8011db4:	2303      	movs	r3, #3
 8011db6:	e05c      	b.n	8011e72 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011dbe:	b29b      	uxth	r3, r3
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d1c1      	bne.n	8011d48 <HAL_SPI_Receive+0x13e>
 8011dc4:	e03b      	b.n	8011e3e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	689b      	ldr	r3, [r3, #8]
 8011dcc:	f003 0301 	and.w	r3, r3, #1
 8011dd0:	2b01      	cmp	r3, #1
 8011dd2:	d115      	bne.n	8011e00 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	68da      	ldr	r2, [r3, #12]
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011dde:	b292      	uxth	r2, r2
 8011de0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011de6:	1c9a      	adds	r2, r3, #2
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011df2:	b29b      	uxth	r3, r3
 8011df4:	3b01      	subs	r3, #1
 8011df6:	b29a      	uxth	r2, r3
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8011dfe:	e018      	b.n	8011e32 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011e00:	f7f9 f90e 	bl	800b020 <HAL_GetTick>
 8011e04:	4602      	mov	r2, r0
 8011e06:	697b      	ldr	r3, [r7, #20]
 8011e08:	1ad3      	subs	r3, r2, r3
 8011e0a:	683a      	ldr	r2, [r7, #0]
 8011e0c:	429a      	cmp	r2, r3
 8011e0e:	d803      	bhi.n	8011e18 <HAL_SPI_Receive+0x20e>
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e16:	d102      	bne.n	8011e1e <HAL_SPI_Receive+0x214>
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d109      	bne.n	8011e32 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	2201      	movs	r2, #1
 8011e22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	2200      	movs	r2, #0
 8011e2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8011e2e:	2303      	movs	r3, #3
 8011e30:	e01f      	b.n	8011e72 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011e38:	b29b      	uxth	r3, r3
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d1c3      	bne.n	8011dc6 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011e3e:	697a      	ldr	r2, [r7, #20]
 8011e40:	6839      	ldr	r1, [r7, #0]
 8011e42:	68f8      	ldr	r0, [r7, #12]
 8011e44:	f000 fb56 	bl	80124f4 <SPI_EndRxTransaction>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d002      	beq.n	8011e54 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	2220      	movs	r2, #32
 8011e52:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	2201      	movs	r2, #1
 8011e58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	2200      	movs	r2, #0
 8011e60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d001      	beq.n	8011e70 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8011e6c:	2301      	movs	r3, #1
 8011e6e:	e000      	b.n	8011e72 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8011e70:	2300      	movs	r3, #0
  }
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3718      	adds	r7, #24
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}

08011e7a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8011e7a:	b580      	push	{r7, lr}
 8011e7c:	b08a      	sub	sp, #40	@ 0x28
 8011e7e:	af00      	add	r7, sp, #0
 8011e80:	60f8      	str	r0, [r7, #12]
 8011e82:	60b9      	str	r1, [r7, #8]
 8011e84:	607a      	str	r2, [r7, #4]
 8011e86:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8011e88:	2301      	movs	r3, #1
 8011e8a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011e8c:	f7f9 f8c8 	bl	800b020 <HAL_GetTick>
 8011e90:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011e98:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	685b      	ldr	r3, [r3, #4]
 8011e9e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8011ea0:	887b      	ldrh	r3, [r7, #2]
 8011ea2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8011ea4:	887b      	ldrh	r3, [r7, #2]
 8011ea6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011ea8:	7ffb      	ldrb	r3, [r7, #31]
 8011eaa:	2b01      	cmp	r3, #1
 8011eac:	d00c      	beq.n	8011ec8 <HAL_SPI_TransmitReceive+0x4e>
 8011eae:	69bb      	ldr	r3, [r7, #24]
 8011eb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011eb4:	d106      	bne.n	8011ec4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	689b      	ldr	r3, [r3, #8]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d102      	bne.n	8011ec4 <HAL_SPI_TransmitReceive+0x4a>
 8011ebe:	7ffb      	ldrb	r3, [r7, #31]
 8011ec0:	2b04      	cmp	r3, #4
 8011ec2:	d001      	beq.n	8011ec8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8011ec4:	2302      	movs	r3, #2
 8011ec6:	e1f3      	b.n	80122b0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8011ec8:	68bb      	ldr	r3, [r7, #8]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d005      	beq.n	8011eda <HAL_SPI_TransmitReceive+0x60>
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d002      	beq.n	8011eda <HAL_SPI_TransmitReceive+0x60>
 8011ed4:	887b      	ldrh	r3, [r7, #2]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d101      	bne.n	8011ede <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8011eda:	2301      	movs	r3, #1
 8011edc:	e1e8      	b.n	80122b0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8011ee4:	2b01      	cmp	r3, #1
 8011ee6:	d101      	bne.n	8011eec <HAL_SPI_TransmitReceive+0x72>
 8011ee8:	2302      	movs	r3, #2
 8011eea:	e1e1      	b.n	80122b0 <HAL_SPI_TransmitReceive+0x436>
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	2201      	movs	r2, #1
 8011ef0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011efa:	b2db      	uxtb	r3, r3
 8011efc:	2b04      	cmp	r3, #4
 8011efe:	d003      	beq.n	8011f08 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	2205      	movs	r2, #5
 8011f04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	687a      	ldr	r2, [r7, #4]
 8011f12:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	887a      	ldrh	r2, [r7, #2]
 8011f18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	887a      	ldrh	r2, [r7, #2]
 8011f20:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	68ba      	ldr	r2, [r7, #8]
 8011f28:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	887a      	ldrh	r2, [r7, #2]
 8011f2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	887a      	ldrh	r2, [r7, #2]
 8011f34:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	2200      	movs	r2, #0
 8011f3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	2200      	movs	r2, #0
 8011f40:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	68db      	ldr	r3, [r3, #12]
 8011f46:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011f4a:	d802      	bhi.n	8011f52 <HAL_SPI_TransmitReceive+0xd8>
 8011f4c:	8abb      	ldrh	r3, [r7, #20]
 8011f4e:	2b01      	cmp	r3, #1
 8011f50:	d908      	bls.n	8011f64 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	685a      	ldr	r2, [r3, #4]
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8011f60:	605a      	str	r2, [r3, #4]
 8011f62:	e007      	b.n	8011f74 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	685a      	ldr	r2, [r3, #4]
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011f72:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f7e:	2b40      	cmp	r3, #64	@ 0x40
 8011f80:	d007      	beq.n	8011f92 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	681a      	ldr	r2, [r3, #0]
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011f90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	68db      	ldr	r3, [r3, #12]
 8011f96:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011f9a:	f240 8083 	bls.w	80120a4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	685b      	ldr	r3, [r3, #4]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d002      	beq.n	8011fac <HAL_SPI_TransmitReceive+0x132>
 8011fa6:	8afb      	ldrh	r3, [r7, #22]
 8011fa8:	2b01      	cmp	r3, #1
 8011faa:	d16f      	bne.n	801208c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fb0:	881a      	ldrh	r2, [r3, #0]
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fbc:	1c9a      	adds	r2, r3, #2
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011fc6:	b29b      	uxth	r3, r3
 8011fc8:	3b01      	subs	r3, #1
 8011fca:	b29a      	uxth	r2, r3
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011fd0:	e05c      	b.n	801208c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	689b      	ldr	r3, [r3, #8]
 8011fd8:	f003 0302 	and.w	r3, r3, #2
 8011fdc:	2b02      	cmp	r3, #2
 8011fde:	d11b      	bne.n	8012018 <HAL_SPI_TransmitReceive+0x19e>
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011fe4:	b29b      	uxth	r3, r3
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d016      	beq.n	8012018 <HAL_SPI_TransmitReceive+0x19e>
 8011fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fec:	2b01      	cmp	r3, #1
 8011fee:	d113      	bne.n	8012018 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ff4:	881a      	ldrh	r2, [r3, #0]
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012000:	1c9a      	adds	r2, r3, #2
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801200a:	b29b      	uxth	r3, r3
 801200c:	3b01      	subs	r3, #1
 801200e:	b29a      	uxth	r2, r3
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012014:	2300      	movs	r3, #0
 8012016:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	689b      	ldr	r3, [r3, #8]
 801201e:	f003 0301 	and.w	r3, r3, #1
 8012022:	2b01      	cmp	r3, #1
 8012024:	d11c      	bne.n	8012060 <HAL_SPI_TransmitReceive+0x1e6>
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801202c:	b29b      	uxth	r3, r3
 801202e:	2b00      	cmp	r3, #0
 8012030:	d016      	beq.n	8012060 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	68da      	ldr	r2, [r3, #12]
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801203c:	b292      	uxth	r2, r2
 801203e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012044:	1c9a      	adds	r2, r3, #2
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8012050:	b29b      	uxth	r3, r3
 8012052:	3b01      	subs	r3, #1
 8012054:	b29a      	uxth	r2, r3
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801205c:	2301      	movs	r3, #1
 801205e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8012060:	f7f8 ffde 	bl	800b020 <HAL_GetTick>
 8012064:	4602      	mov	r2, r0
 8012066:	6a3b      	ldr	r3, [r7, #32]
 8012068:	1ad3      	subs	r3, r2, r3
 801206a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801206c:	429a      	cmp	r2, r3
 801206e:	d80d      	bhi.n	801208c <HAL_SPI_TransmitReceive+0x212>
 8012070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012076:	d009      	beq.n	801208c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	2201      	movs	r2, #1
 801207c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	2200      	movs	r2, #0
 8012084:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8012088:	2303      	movs	r3, #3
 801208a:	e111      	b.n	80122b0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012090:	b29b      	uxth	r3, r3
 8012092:	2b00      	cmp	r3, #0
 8012094:	d19d      	bne.n	8011fd2 <HAL_SPI_TransmitReceive+0x158>
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801209c:	b29b      	uxth	r3, r3
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d197      	bne.n	8011fd2 <HAL_SPI_TransmitReceive+0x158>
 80120a2:	e0e5      	b.n	8012270 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	685b      	ldr	r3, [r3, #4]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d003      	beq.n	80120b4 <HAL_SPI_TransmitReceive+0x23a>
 80120ac:	8afb      	ldrh	r3, [r7, #22]
 80120ae:	2b01      	cmp	r3, #1
 80120b0:	f040 80d1 	bne.w	8012256 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80120b8:	b29b      	uxth	r3, r3
 80120ba:	2b01      	cmp	r3, #1
 80120bc:	d912      	bls.n	80120e4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80120c2:	881a      	ldrh	r2, [r3, #0]
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80120ce:	1c9a      	adds	r2, r3, #2
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80120d8:	b29b      	uxth	r3, r3
 80120da:	3b02      	subs	r3, #2
 80120dc:	b29a      	uxth	r2, r3
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80120e2:	e0b8      	b.n	8012256 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	330c      	adds	r3, #12
 80120ee:	7812      	ldrb	r2, [r2, #0]
 80120f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80120f6:	1c5a      	adds	r2, r3, #1
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012100:	b29b      	uxth	r3, r3
 8012102:	3b01      	subs	r3, #1
 8012104:	b29a      	uxth	r2, r3
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801210a:	e0a4      	b.n	8012256 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	689b      	ldr	r3, [r3, #8]
 8012112:	f003 0302 	and.w	r3, r3, #2
 8012116:	2b02      	cmp	r3, #2
 8012118:	d134      	bne.n	8012184 <HAL_SPI_TransmitReceive+0x30a>
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801211e:	b29b      	uxth	r3, r3
 8012120:	2b00      	cmp	r3, #0
 8012122:	d02f      	beq.n	8012184 <HAL_SPI_TransmitReceive+0x30a>
 8012124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012126:	2b01      	cmp	r3, #1
 8012128:	d12c      	bne.n	8012184 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801212e:	b29b      	uxth	r3, r3
 8012130:	2b01      	cmp	r3, #1
 8012132:	d912      	bls.n	801215a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012138:	881a      	ldrh	r2, [r3, #0]
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012144:	1c9a      	adds	r2, r3, #2
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801214e:	b29b      	uxth	r3, r3
 8012150:	3b02      	subs	r3, #2
 8012152:	b29a      	uxth	r2, r3
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8012158:	e012      	b.n	8012180 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	330c      	adds	r3, #12
 8012164:	7812      	ldrb	r2, [r2, #0]
 8012166:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801216c:	1c5a      	adds	r2, r3, #1
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012176:	b29b      	uxth	r3, r3
 8012178:	3b01      	subs	r3, #1
 801217a:	b29a      	uxth	r2, r3
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012180:	2300      	movs	r3, #0
 8012182:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	689b      	ldr	r3, [r3, #8]
 801218a:	f003 0301 	and.w	r3, r3, #1
 801218e:	2b01      	cmp	r3, #1
 8012190:	d148      	bne.n	8012224 <HAL_SPI_TransmitReceive+0x3aa>
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8012198:	b29b      	uxth	r3, r3
 801219a:	2b00      	cmp	r3, #0
 801219c:	d042      	beq.n	8012224 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80121a4:	b29b      	uxth	r3, r3
 80121a6:	2b01      	cmp	r3, #1
 80121a8:	d923      	bls.n	80121f2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	68da      	ldr	r2, [r3, #12]
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80121b4:	b292      	uxth	r2, r2
 80121b6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80121bc:	1c9a      	adds	r2, r3, #2
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80121c8:	b29b      	uxth	r3, r3
 80121ca:	3b02      	subs	r3, #2
 80121cc:	b29a      	uxth	r2, r3
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80121da:	b29b      	uxth	r3, r3
 80121dc:	2b01      	cmp	r3, #1
 80121de:	d81f      	bhi.n	8012220 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	685a      	ldr	r2, [r3, #4]
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80121ee:	605a      	str	r2, [r3, #4]
 80121f0:	e016      	b.n	8012220 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	f103 020c 	add.w	r2, r3, #12
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80121fe:	7812      	ldrb	r2, [r2, #0]
 8012200:	b2d2      	uxtb	r2, r2
 8012202:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012208:	1c5a      	adds	r2, r3, #1
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8012214:	b29b      	uxth	r3, r3
 8012216:	3b01      	subs	r3, #1
 8012218:	b29a      	uxth	r2, r3
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8012220:	2301      	movs	r3, #1
 8012222:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8012224:	f7f8 fefc 	bl	800b020 <HAL_GetTick>
 8012228:	4602      	mov	r2, r0
 801222a:	6a3b      	ldr	r3, [r7, #32]
 801222c:	1ad3      	subs	r3, r2, r3
 801222e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012230:	429a      	cmp	r2, r3
 8012232:	d803      	bhi.n	801223c <HAL_SPI_TransmitReceive+0x3c2>
 8012234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012236:	f1b3 3fff 	cmp.w	r3, #4294967295
 801223a:	d102      	bne.n	8012242 <HAL_SPI_TransmitReceive+0x3c8>
 801223c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801223e:	2b00      	cmp	r3, #0
 8012240:	d109      	bne.n	8012256 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	2201      	movs	r2, #1
 8012246:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	2200      	movs	r2, #0
 801224e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8012252:	2303      	movs	r3, #3
 8012254:	e02c      	b.n	80122b0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801225a:	b29b      	uxth	r3, r3
 801225c:	2b00      	cmp	r3, #0
 801225e:	f47f af55 	bne.w	801210c <HAL_SPI_TransmitReceive+0x292>
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8012268:	b29b      	uxth	r3, r3
 801226a:	2b00      	cmp	r3, #0
 801226c:	f47f af4e 	bne.w	801210c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012270:	6a3a      	ldr	r2, [r7, #32]
 8012272:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012274:	68f8      	ldr	r0, [r7, #12]
 8012276:	f000 f995 	bl	80125a4 <SPI_EndRxTxTransaction>
 801227a:	4603      	mov	r3, r0
 801227c:	2b00      	cmp	r3, #0
 801227e:	d008      	beq.n	8012292 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	2220      	movs	r2, #32
 8012284:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	2200      	movs	r2, #0
 801228a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 801228e:	2301      	movs	r3, #1
 8012290:	e00e      	b.n	80122b0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	2201      	movs	r2, #1
 8012296:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	2200      	movs	r2, #0
 801229e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d001      	beq.n	80122ae <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80122aa:	2301      	movs	r3, #1
 80122ac:	e000      	b.n	80122b0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80122ae:	2300      	movs	r3, #0
  }
}
 80122b0:	4618      	mov	r0, r3
 80122b2:	3728      	adds	r7, #40	@ 0x28
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bd80      	pop	{r7, pc}

080122b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b088      	sub	sp, #32
 80122bc:	af00      	add	r7, sp, #0
 80122be:	60f8      	str	r0, [r7, #12]
 80122c0:	60b9      	str	r1, [r7, #8]
 80122c2:	603b      	str	r3, [r7, #0]
 80122c4:	4613      	mov	r3, r2
 80122c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80122c8:	f7f8 feaa 	bl	800b020 <HAL_GetTick>
 80122cc:	4602      	mov	r2, r0
 80122ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122d0:	1a9b      	subs	r3, r3, r2
 80122d2:	683a      	ldr	r2, [r7, #0]
 80122d4:	4413      	add	r3, r2
 80122d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80122d8:	f7f8 fea2 	bl	800b020 <HAL_GetTick>
 80122dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80122de:	4b39      	ldr	r3, [pc, #228]	@ (80123c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	015b      	lsls	r3, r3, #5
 80122e4:	0d1b      	lsrs	r3, r3, #20
 80122e6:	69fa      	ldr	r2, [r7, #28]
 80122e8:	fb02 f303 	mul.w	r3, r2, r3
 80122ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80122ee:	e054      	b.n	801239a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122f6:	d050      	beq.n	801239a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80122f8:	f7f8 fe92 	bl	800b020 <HAL_GetTick>
 80122fc:	4602      	mov	r2, r0
 80122fe:	69bb      	ldr	r3, [r7, #24]
 8012300:	1ad3      	subs	r3, r2, r3
 8012302:	69fa      	ldr	r2, [r7, #28]
 8012304:	429a      	cmp	r2, r3
 8012306:	d902      	bls.n	801230e <SPI_WaitFlagStateUntilTimeout+0x56>
 8012308:	69fb      	ldr	r3, [r7, #28]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d13d      	bne.n	801238a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	685a      	ldr	r2, [r3, #4]
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 801231c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	685b      	ldr	r3, [r3, #4]
 8012322:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012326:	d111      	bne.n	801234c <SPI_WaitFlagStateUntilTimeout+0x94>
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	689b      	ldr	r3, [r3, #8]
 801232c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012330:	d004      	beq.n	801233c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	689b      	ldr	r3, [r3, #8]
 8012336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801233a:	d107      	bne.n	801234c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	681a      	ldr	r2, [r3, #0]
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801234a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012350:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012354:	d10f      	bne.n	8012376 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	681a      	ldr	r2, [r3, #0]
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8012364:	601a      	str	r2, [r3, #0]
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	681a      	ldr	r2, [r3, #0]
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8012374:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	2201      	movs	r2, #1
 801237a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	2200      	movs	r2, #0
 8012382:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8012386:	2303      	movs	r3, #3
 8012388:	e017      	b.n	80123ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801238a:	697b      	ldr	r3, [r7, #20]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d101      	bne.n	8012394 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8012390:	2300      	movs	r3, #0
 8012392:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8012394:	697b      	ldr	r3, [r7, #20]
 8012396:	3b01      	subs	r3, #1
 8012398:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	689a      	ldr	r2, [r3, #8]
 80123a0:	68bb      	ldr	r3, [r7, #8]
 80123a2:	4013      	ands	r3, r2
 80123a4:	68ba      	ldr	r2, [r7, #8]
 80123a6:	429a      	cmp	r2, r3
 80123a8:	bf0c      	ite	eq
 80123aa:	2301      	moveq	r3, #1
 80123ac:	2300      	movne	r3, #0
 80123ae:	b2db      	uxtb	r3, r3
 80123b0:	461a      	mov	r2, r3
 80123b2:	79fb      	ldrb	r3, [r7, #7]
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d19b      	bne.n	80122f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80123b8:	2300      	movs	r3, #0
}
 80123ba:	4618      	mov	r0, r3
 80123bc:	3720      	adds	r7, #32
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}
 80123c2:	bf00      	nop
 80123c4:	20000268 	.word	0x20000268

080123c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b08a      	sub	sp, #40	@ 0x28
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	60f8      	str	r0, [r7, #12]
 80123d0:	60b9      	str	r1, [r7, #8]
 80123d2:	607a      	str	r2, [r7, #4]
 80123d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80123d6:	2300      	movs	r3, #0
 80123d8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80123da:	f7f8 fe21 	bl	800b020 <HAL_GetTick>
 80123de:	4602      	mov	r2, r0
 80123e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123e2:	1a9b      	subs	r3, r3, r2
 80123e4:	683a      	ldr	r2, [r7, #0]
 80123e6:	4413      	add	r3, r2
 80123e8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80123ea:	f7f8 fe19 	bl	800b020 <HAL_GetTick>
 80123ee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	330c      	adds	r3, #12
 80123f6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80123f8:	4b3d      	ldr	r3, [pc, #244]	@ (80124f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80123fa:	681a      	ldr	r2, [r3, #0]
 80123fc:	4613      	mov	r3, r2
 80123fe:	009b      	lsls	r3, r3, #2
 8012400:	4413      	add	r3, r2
 8012402:	00da      	lsls	r2, r3, #3
 8012404:	1ad3      	subs	r3, r2, r3
 8012406:	0d1b      	lsrs	r3, r3, #20
 8012408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801240a:	fb02 f303 	mul.w	r3, r2, r3
 801240e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8012410:	e060      	b.n	80124d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8012418:	d107      	bne.n	801242a <SPI_WaitFifoStateUntilTimeout+0x62>
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d104      	bne.n	801242a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8012420:	69fb      	ldr	r3, [r7, #28]
 8012422:	781b      	ldrb	r3, [r3, #0]
 8012424:	b2db      	uxtb	r3, r3
 8012426:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8012428:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801242a:	683b      	ldr	r3, [r7, #0]
 801242c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012430:	d050      	beq.n	80124d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8012432:	f7f8 fdf5 	bl	800b020 <HAL_GetTick>
 8012436:	4602      	mov	r2, r0
 8012438:	6a3b      	ldr	r3, [r7, #32]
 801243a:	1ad3      	subs	r3, r2, r3
 801243c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801243e:	429a      	cmp	r2, r3
 8012440:	d902      	bls.n	8012448 <SPI_WaitFifoStateUntilTimeout+0x80>
 8012442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012444:	2b00      	cmp	r3, #0
 8012446:	d13d      	bne.n	80124c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	685a      	ldr	r2, [r3, #4]
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8012456:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	685b      	ldr	r3, [r3, #4]
 801245c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012460:	d111      	bne.n	8012486 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	689b      	ldr	r3, [r3, #8]
 8012466:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801246a:	d004      	beq.n	8012476 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	689b      	ldr	r3, [r3, #8]
 8012470:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012474:	d107      	bne.n	8012486 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	681a      	ldr	r2, [r3, #0]
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012484:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801248a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801248e:	d10f      	bne.n	80124b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	681a      	ldr	r2, [r3, #0]
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801249e:	601a      	str	r2, [r3, #0]
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	681a      	ldr	r2, [r3, #0]
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80124ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	2201      	movs	r2, #1
 80124b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	2200      	movs	r2, #0
 80124bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80124c0:	2303      	movs	r3, #3
 80124c2:	e010      	b.n	80124e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80124c4:	69bb      	ldr	r3, [r7, #24]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d101      	bne.n	80124ce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80124ca:	2300      	movs	r3, #0
 80124cc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80124ce:	69bb      	ldr	r3, [r7, #24]
 80124d0:	3b01      	subs	r3, #1
 80124d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	689a      	ldr	r2, [r3, #8]
 80124da:	68bb      	ldr	r3, [r7, #8]
 80124dc:	4013      	ands	r3, r2
 80124de:	687a      	ldr	r2, [r7, #4]
 80124e0:	429a      	cmp	r2, r3
 80124e2:	d196      	bne.n	8012412 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80124e4:	2300      	movs	r3, #0
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	3728      	adds	r7, #40	@ 0x28
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}
 80124ee:	bf00      	nop
 80124f0:	20000268 	.word	0x20000268

080124f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b086      	sub	sp, #24
 80124f8:	af02      	add	r7, sp, #8
 80124fa:	60f8      	str	r0, [r7, #12]
 80124fc:	60b9      	str	r1, [r7, #8]
 80124fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	685b      	ldr	r3, [r3, #4]
 8012504:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012508:	d111      	bne.n	801252e <SPI_EndRxTransaction+0x3a>
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	689b      	ldr	r3, [r3, #8]
 801250e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012512:	d004      	beq.n	801251e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	689b      	ldr	r3, [r3, #8]
 8012518:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801251c:	d107      	bne.n	801252e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	681a      	ldr	r2, [r3, #0]
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801252c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	9300      	str	r3, [sp, #0]
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	2200      	movs	r2, #0
 8012536:	2180      	movs	r1, #128	@ 0x80
 8012538:	68f8      	ldr	r0, [r7, #12]
 801253a:	f7ff febd 	bl	80122b8 <SPI_WaitFlagStateUntilTimeout>
 801253e:	4603      	mov	r3, r0
 8012540:	2b00      	cmp	r3, #0
 8012542:	d007      	beq.n	8012554 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012548:	f043 0220 	orr.w	r2, r3, #32
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8012550:	2303      	movs	r3, #3
 8012552:	e023      	b.n	801259c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	685b      	ldr	r3, [r3, #4]
 8012558:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801255c:	d11d      	bne.n	801259a <SPI_EndRxTransaction+0xa6>
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	689b      	ldr	r3, [r3, #8]
 8012562:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012566:	d004      	beq.n	8012572 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	689b      	ldr	r3, [r3, #8]
 801256c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012570:	d113      	bne.n	801259a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	9300      	str	r3, [sp, #0]
 8012576:	68bb      	ldr	r3, [r7, #8]
 8012578:	2200      	movs	r2, #0
 801257a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 801257e:	68f8      	ldr	r0, [r7, #12]
 8012580:	f7ff ff22 	bl	80123c8 <SPI_WaitFifoStateUntilTimeout>
 8012584:	4603      	mov	r3, r0
 8012586:	2b00      	cmp	r3, #0
 8012588:	d007      	beq.n	801259a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801258e:	f043 0220 	orr.w	r2, r3, #32
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8012596:	2303      	movs	r3, #3
 8012598:	e000      	b.n	801259c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801259a:	2300      	movs	r3, #0
}
 801259c:	4618      	mov	r0, r3
 801259e:	3710      	adds	r7, #16
 80125a0:	46bd      	mov	sp, r7
 80125a2:	bd80      	pop	{r7, pc}

080125a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b086      	sub	sp, #24
 80125a8:	af02      	add	r7, sp, #8
 80125aa:	60f8      	str	r0, [r7, #12]
 80125ac:	60b9      	str	r1, [r7, #8]
 80125ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	9300      	str	r3, [sp, #0]
 80125b4:	68bb      	ldr	r3, [r7, #8]
 80125b6:	2200      	movs	r2, #0
 80125b8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80125bc:	68f8      	ldr	r0, [r7, #12]
 80125be:	f7ff ff03 	bl	80123c8 <SPI_WaitFifoStateUntilTimeout>
 80125c2:	4603      	mov	r3, r0
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d007      	beq.n	80125d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80125cc:	f043 0220 	orr.w	r2, r3, #32
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80125d4:	2303      	movs	r3, #3
 80125d6:	e027      	b.n	8012628 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	9300      	str	r3, [sp, #0]
 80125dc:	68bb      	ldr	r3, [r7, #8]
 80125de:	2200      	movs	r2, #0
 80125e0:	2180      	movs	r1, #128	@ 0x80
 80125e2:	68f8      	ldr	r0, [r7, #12]
 80125e4:	f7ff fe68 	bl	80122b8 <SPI_WaitFlagStateUntilTimeout>
 80125e8:	4603      	mov	r3, r0
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d007      	beq.n	80125fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80125f2:	f043 0220 	orr.w	r2, r3, #32
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80125fa:	2303      	movs	r3, #3
 80125fc:	e014      	b.n	8012628 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	9300      	str	r3, [sp, #0]
 8012602:	68bb      	ldr	r3, [r7, #8]
 8012604:	2200      	movs	r2, #0
 8012606:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 801260a:	68f8      	ldr	r0, [r7, #12]
 801260c:	f7ff fedc 	bl	80123c8 <SPI_WaitFifoStateUntilTimeout>
 8012610:	4603      	mov	r3, r0
 8012612:	2b00      	cmp	r3, #0
 8012614:	d007      	beq.n	8012626 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801261a:	f043 0220 	orr.w	r2, r3, #32
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8012622:	2303      	movs	r3, #3
 8012624:	e000      	b.n	8012628 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8012626:	2300      	movs	r3, #0
}
 8012628:	4618      	mov	r0, r3
 801262a:	3710      	adds	r7, #16
 801262c:	46bd      	mov	sp, r7
 801262e:	bd80      	pop	{r7, pc}

08012630 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b082      	sub	sp, #8
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d101      	bne.n	8012642 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801263e:	2301      	movs	r3, #1
 8012640:	e049      	b.n	80126d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012648:	b2db      	uxtb	r3, r3
 801264a:	2b00      	cmp	r3, #0
 801264c:	d106      	bne.n	801265c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	2200      	movs	r2, #0
 8012652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012656:	6878      	ldr	r0, [r7, #4]
 8012658:	f7f5 f990 	bl	800797c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	2202      	movs	r2, #2
 8012660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	681a      	ldr	r2, [r3, #0]
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	3304      	adds	r3, #4
 801266c:	4619      	mov	r1, r3
 801266e:	4610      	mov	r0, r2
 8012670:	f001 fa58 	bl	8013b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	2201      	movs	r2, #1
 8012678:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	2201      	movs	r2, #1
 8012680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	2201      	movs	r2, #1
 8012688:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	2201      	movs	r2, #1
 8012690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	2201      	movs	r2, #1
 8012698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	2201      	movs	r2, #1
 80126a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	2201      	movs	r2, #1
 80126a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	2201      	movs	r2, #1
 80126b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2201      	movs	r2, #1
 80126b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2201      	movs	r2, #1
 80126c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	2201      	movs	r2, #1
 80126c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	2201      	movs	r2, #1
 80126d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80126d4:	2300      	movs	r3, #0
}
 80126d6:	4618      	mov	r0, r3
 80126d8:	3708      	adds	r7, #8
 80126da:	46bd      	mov	sp, r7
 80126dc:	bd80      	pop	{r7, pc}

080126de <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80126de:	b580      	push	{r7, lr}
 80126e0:	b082      	sub	sp, #8
 80126e2:	af00      	add	r7, sp, #0
 80126e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d101      	bne.n	80126f0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80126ec:	2301      	movs	r3, #1
 80126ee:	e049      	b.n	8012784 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80126f6:	b2db      	uxtb	r3, r3
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d106      	bne.n	801270a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	2200      	movs	r2, #0
 8012700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8012704:	6878      	ldr	r0, [r7, #4]
 8012706:	f000 f841 	bl	801278c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2202      	movs	r2, #2
 801270e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	681a      	ldr	r2, [r3, #0]
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	3304      	adds	r3, #4
 801271a:	4619      	mov	r1, r3
 801271c:	4610      	mov	r0, r2
 801271e:	f001 fa01 	bl	8013b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	2201      	movs	r2, #1
 8012726:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	2201      	movs	r2, #1
 801272e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	2201      	movs	r2, #1
 8012736:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	2201      	movs	r2, #1
 801273e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	2201      	movs	r2, #1
 8012746:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	2201      	movs	r2, #1
 801274e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	2201      	movs	r2, #1
 8012756:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	2201      	movs	r2, #1
 801275e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	2201      	movs	r2, #1
 8012766:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	2201      	movs	r2, #1
 801276e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	2201      	movs	r2, #1
 8012776:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	2201      	movs	r2, #1
 801277e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012782:	2300      	movs	r3, #0
}
 8012784:	4618      	mov	r0, r3
 8012786:	3708      	adds	r7, #8
 8012788:	46bd      	mov	sp, r7
 801278a:	bd80      	pop	{r7, pc}

0801278c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 801278c:	b480      	push	{r7}
 801278e:	b083      	sub	sp, #12
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8012794:	bf00      	nop
 8012796:	370c      	adds	r7, #12
 8012798:	46bd      	mov	sp, r7
 801279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279e:	4770      	bx	lr

080127a0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b084      	sub	sp, #16
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	6078      	str	r0, [r7, #4]
 80127a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80127aa:	2300      	movs	r3, #0
 80127ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80127ae:	683b      	ldr	r3, [r7, #0]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d109      	bne.n	80127c8 <HAL_TIM_OC_Start_IT+0x28>
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80127ba:	b2db      	uxtb	r3, r3
 80127bc:	2b01      	cmp	r3, #1
 80127be:	bf14      	ite	ne
 80127c0:	2301      	movne	r3, #1
 80127c2:	2300      	moveq	r3, #0
 80127c4:	b2db      	uxtb	r3, r3
 80127c6:	e03c      	b.n	8012842 <HAL_TIM_OC_Start_IT+0xa2>
 80127c8:	683b      	ldr	r3, [r7, #0]
 80127ca:	2b04      	cmp	r3, #4
 80127cc:	d109      	bne.n	80127e2 <HAL_TIM_OC_Start_IT+0x42>
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80127d4:	b2db      	uxtb	r3, r3
 80127d6:	2b01      	cmp	r3, #1
 80127d8:	bf14      	ite	ne
 80127da:	2301      	movne	r3, #1
 80127dc:	2300      	moveq	r3, #0
 80127de:	b2db      	uxtb	r3, r3
 80127e0:	e02f      	b.n	8012842 <HAL_TIM_OC_Start_IT+0xa2>
 80127e2:	683b      	ldr	r3, [r7, #0]
 80127e4:	2b08      	cmp	r3, #8
 80127e6:	d109      	bne.n	80127fc <HAL_TIM_OC_Start_IT+0x5c>
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80127ee:	b2db      	uxtb	r3, r3
 80127f0:	2b01      	cmp	r3, #1
 80127f2:	bf14      	ite	ne
 80127f4:	2301      	movne	r3, #1
 80127f6:	2300      	moveq	r3, #0
 80127f8:	b2db      	uxtb	r3, r3
 80127fa:	e022      	b.n	8012842 <HAL_TIM_OC_Start_IT+0xa2>
 80127fc:	683b      	ldr	r3, [r7, #0]
 80127fe:	2b0c      	cmp	r3, #12
 8012800:	d109      	bne.n	8012816 <HAL_TIM_OC_Start_IT+0x76>
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012808:	b2db      	uxtb	r3, r3
 801280a:	2b01      	cmp	r3, #1
 801280c:	bf14      	ite	ne
 801280e:	2301      	movne	r3, #1
 8012810:	2300      	moveq	r3, #0
 8012812:	b2db      	uxtb	r3, r3
 8012814:	e015      	b.n	8012842 <HAL_TIM_OC_Start_IT+0xa2>
 8012816:	683b      	ldr	r3, [r7, #0]
 8012818:	2b10      	cmp	r3, #16
 801281a:	d109      	bne.n	8012830 <HAL_TIM_OC_Start_IT+0x90>
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012822:	b2db      	uxtb	r3, r3
 8012824:	2b01      	cmp	r3, #1
 8012826:	bf14      	ite	ne
 8012828:	2301      	movne	r3, #1
 801282a:	2300      	moveq	r3, #0
 801282c:	b2db      	uxtb	r3, r3
 801282e:	e008      	b.n	8012842 <HAL_TIM_OC_Start_IT+0xa2>
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012836:	b2db      	uxtb	r3, r3
 8012838:	2b01      	cmp	r3, #1
 801283a:	bf14      	ite	ne
 801283c:	2301      	movne	r3, #1
 801283e:	2300      	moveq	r3, #0
 8012840:	b2db      	uxtb	r3, r3
 8012842:	2b00      	cmp	r3, #0
 8012844:	d001      	beq.n	801284a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8012846:	2301      	movs	r3, #1
 8012848:	e0e7      	b.n	8012a1a <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801284a:	683b      	ldr	r3, [r7, #0]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d104      	bne.n	801285a <HAL_TIM_OC_Start_IT+0xba>
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	2202      	movs	r2, #2
 8012854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012858:	e023      	b.n	80128a2 <HAL_TIM_OC_Start_IT+0x102>
 801285a:	683b      	ldr	r3, [r7, #0]
 801285c:	2b04      	cmp	r3, #4
 801285e:	d104      	bne.n	801286a <HAL_TIM_OC_Start_IT+0xca>
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2202      	movs	r2, #2
 8012864:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012868:	e01b      	b.n	80128a2 <HAL_TIM_OC_Start_IT+0x102>
 801286a:	683b      	ldr	r3, [r7, #0]
 801286c:	2b08      	cmp	r3, #8
 801286e:	d104      	bne.n	801287a <HAL_TIM_OC_Start_IT+0xda>
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	2202      	movs	r2, #2
 8012874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012878:	e013      	b.n	80128a2 <HAL_TIM_OC_Start_IT+0x102>
 801287a:	683b      	ldr	r3, [r7, #0]
 801287c:	2b0c      	cmp	r3, #12
 801287e:	d104      	bne.n	801288a <HAL_TIM_OC_Start_IT+0xea>
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	2202      	movs	r2, #2
 8012884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012888:	e00b      	b.n	80128a2 <HAL_TIM_OC_Start_IT+0x102>
 801288a:	683b      	ldr	r3, [r7, #0]
 801288c:	2b10      	cmp	r3, #16
 801288e:	d104      	bne.n	801289a <HAL_TIM_OC_Start_IT+0xfa>
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	2202      	movs	r2, #2
 8012894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012898:	e003      	b.n	80128a2 <HAL_TIM_OC_Start_IT+0x102>
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	2202      	movs	r2, #2
 801289e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80128a2:	683b      	ldr	r3, [r7, #0]
 80128a4:	2b0c      	cmp	r3, #12
 80128a6:	d841      	bhi.n	801292c <HAL_TIM_OC_Start_IT+0x18c>
 80128a8:	a201      	add	r2, pc, #4	@ (adr r2, 80128b0 <HAL_TIM_OC_Start_IT+0x110>)
 80128aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128ae:	bf00      	nop
 80128b0:	080128e5 	.word	0x080128e5
 80128b4:	0801292d 	.word	0x0801292d
 80128b8:	0801292d 	.word	0x0801292d
 80128bc:	0801292d 	.word	0x0801292d
 80128c0:	080128f7 	.word	0x080128f7
 80128c4:	0801292d 	.word	0x0801292d
 80128c8:	0801292d 	.word	0x0801292d
 80128cc:	0801292d 	.word	0x0801292d
 80128d0:	08012909 	.word	0x08012909
 80128d4:	0801292d 	.word	0x0801292d
 80128d8:	0801292d 	.word	0x0801292d
 80128dc:	0801292d 	.word	0x0801292d
 80128e0:	0801291b 	.word	0x0801291b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	68da      	ldr	r2, [r3, #12]
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	f042 0202 	orr.w	r2, r2, #2
 80128f2:	60da      	str	r2, [r3, #12]
      break;
 80128f4:	e01d      	b.n	8012932 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	68da      	ldr	r2, [r3, #12]
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	f042 0204 	orr.w	r2, r2, #4
 8012904:	60da      	str	r2, [r3, #12]
      break;
 8012906:	e014      	b.n	8012932 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	68da      	ldr	r2, [r3, #12]
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	f042 0208 	orr.w	r2, r2, #8
 8012916:	60da      	str	r2, [r3, #12]
      break;
 8012918:	e00b      	b.n	8012932 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	68da      	ldr	r2, [r3, #12]
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	f042 0210 	orr.w	r2, r2, #16
 8012928:	60da      	str	r2, [r3, #12]
      break;
 801292a:	e002      	b.n	8012932 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 801292c:	2301      	movs	r3, #1
 801292e:	73fb      	strb	r3, [r7, #15]
      break;
 8012930:	bf00      	nop
  }

  if (status == HAL_OK)
 8012932:	7bfb      	ldrb	r3, [r7, #15]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d16f      	bne.n	8012a18 <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	2201      	movs	r2, #1
 801293e:	6839      	ldr	r1, [r7, #0]
 8012940:	4618      	mov	r0, r3
 8012942:	f001 febd 	bl	80146c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	4a36      	ldr	r2, [pc, #216]	@ (8012a24 <HAL_TIM_OC_Start_IT+0x284>)
 801294c:	4293      	cmp	r3, r2
 801294e:	d013      	beq.n	8012978 <HAL_TIM_OC_Start_IT+0x1d8>
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	4a34      	ldr	r2, [pc, #208]	@ (8012a28 <HAL_TIM_OC_Start_IT+0x288>)
 8012956:	4293      	cmp	r3, r2
 8012958:	d00e      	beq.n	8012978 <HAL_TIM_OC_Start_IT+0x1d8>
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	4a33      	ldr	r2, [pc, #204]	@ (8012a2c <HAL_TIM_OC_Start_IT+0x28c>)
 8012960:	4293      	cmp	r3, r2
 8012962:	d009      	beq.n	8012978 <HAL_TIM_OC_Start_IT+0x1d8>
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	4a31      	ldr	r2, [pc, #196]	@ (8012a30 <HAL_TIM_OC_Start_IT+0x290>)
 801296a:	4293      	cmp	r3, r2
 801296c:	d004      	beq.n	8012978 <HAL_TIM_OC_Start_IT+0x1d8>
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	4a30      	ldr	r2, [pc, #192]	@ (8012a34 <HAL_TIM_OC_Start_IT+0x294>)
 8012974:	4293      	cmp	r3, r2
 8012976:	d101      	bne.n	801297c <HAL_TIM_OC_Start_IT+0x1dc>
 8012978:	2301      	movs	r3, #1
 801297a:	e000      	b.n	801297e <HAL_TIM_OC_Start_IT+0x1de>
 801297c:	2300      	movs	r3, #0
 801297e:	2b00      	cmp	r3, #0
 8012980:	d007      	beq.n	8012992 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012990:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	4a23      	ldr	r2, [pc, #140]	@ (8012a24 <HAL_TIM_OC_Start_IT+0x284>)
 8012998:	4293      	cmp	r3, r2
 801299a:	d01d      	beq.n	80129d8 <HAL_TIM_OC_Start_IT+0x238>
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80129a4:	d018      	beq.n	80129d8 <HAL_TIM_OC_Start_IT+0x238>
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	4a23      	ldr	r2, [pc, #140]	@ (8012a38 <HAL_TIM_OC_Start_IT+0x298>)
 80129ac:	4293      	cmp	r3, r2
 80129ae:	d013      	beq.n	80129d8 <HAL_TIM_OC_Start_IT+0x238>
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	4a21      	ldr	r2, [pc, #132]	@ (8012a3c <HAL_TIM_OC_Start_IT+0x29c>)
 80129b6:	4293      	cmp	r3, r2
 80129b8:	d00e      	beq.n	80129d8 <HAL_TIM_OC_Start_IT+0x238>
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	4a20      	ldr	r2, [pc, #128]	@ (8012a40 <HAL_TIM_OC_Start_IT+0x2a0>)
 80129c0:	4293      	cmp	r3, r2
 80129c2:	d009      	beq.n	80129d8 <HAL_TIM_OC_Start_IT+0x238>
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	4a17      	ldr	r2, [pc, #92]	@ (8012a28 <HAL_TIM_OC_Start_IT+0x288>)
 80129ca:	4293      	cmp	r3, r2
 80129cc:	d004      	beq.n	80129d8 <HAL_TIM_OC_Start_IT+0x238>
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	4a16      	ldr	r2, [pc, #88]	@ (8012a2c <HAL_TIM_OC_Start_IT+0x28c>)
 80129d4:	4293      	cmp	r3, r2
 80129d6:	d115      	bne.n	8012a04 <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	689a      	ldr	r2, [r3, #8]
 80129de:	4b19      	ldr	r3, [pc, #100]	@ (8012a44 <HAL_TIM_OC_Start_IT+0x2a4>)
 80129e0:	4013      	ands	r3, r2
 80129e2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80129e4:	68bb      	ldr	r3, [r7, #8]
 80129e6:	2b06      	cmp	r3, #6
 80129e8:	d015      	beq.n	8012a16 <HAL_TIM_OC_Start_IT+0x276>
 80129ea:	68bb      	ldr	r3, [r7, #8]
 80129ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80129f0:	d011      	beq.n	8012a16 <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	681a      	ldr	r2, [r3, #0]
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	f042 0201 	orr.w	r2, r2, #1
 8012a00:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a02:	e008      	b.n	8012a16 <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	681a      	ldr	r2, [r3, #0]
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	f042 0201 	orr.w	r2, r2, #1
 8012a12:	601a      	str	r2, [r3, #0]
 8012a14:	e000      	b.n	8012a18 <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a16:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	3710      	adds	r7, #16
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	bd80      	pop	{r7, pc}
 8012a22:	bf00      	nop
 8012a24:	40012c00 	.word	0x40012c00
 8012a28:	40013400 	.word	0x40013400
 8012a2c:	40014000 	.word	0x40014000
 8012a30:	40014400 	.word	0x40014400
 8012a34:	40014800 	.word	0x40014800
 8012a38:	40000400 	.word	0x40000400
 8012a3c:	40000800 	.word	0x40000800
 8012a40:	40000c00 	.word	0x40000c00
 8012a44:	00010007 	.word	0x00010007

08012a48 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b084      	sub	sp, #16
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
 8012a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012a52:	2300      	movs	r3, #0
 8012a54:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8012a56:	683b      	ldr	r3, [r7, #0]
 8012a58:	2b0c      	cmp	r3, #12
 8012a5a:	d841      	bhi.n	8012ae0 <HAL_TIM_OC_Stop_IT+0x98>
 8012a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8012a64 <HAL_TIM_OC_Stop_IT+0x1c>)
 8012a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a62:	bf00      	nop
 8012a64:	08012a99 	.word	0x08012a99
 8012a68:	08012ae1 	.word	0x08012ae1
 8012a6c:	08012ae1 	.word	0x08012ae1
 8012a70:	08012ae1 	.word	0x08012ae1
 8012a74:	08012aab 	.word	0x08012aab
 8012a78:	08012ae1 	.word	0x08012ae1
 8012a7c:	08012ae1 	.word	0x08012ae1
 8012a80:	08012ae1 	.word	0x08012ae1
 8012a84:	08012abd 	.word	0x08012abd
 8012a88:	08012ae1 	.word	0x08012ae1
 8012a8c:	08012ae1 	.word	0x08012ae1
 8012a90:	08012ae1 	.word	0x08012ae1
 8012a94:	08012acf 	.word	0x08012acf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	68da      	ldr	r2, [r3, #12]
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	f022 0202 	bic.w	r2, r2, #2
 8012aa6:	60da      	str	r2, [r3, #12]
      break;
 8012aa8:	e01d      	b.n	8012ae6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	68da      	ldr	r2, [r3, #12]
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	f022 0204 	bic.w	r2, r2, #4
 8012ab8:	60da      	str	r2, [r3, #12]
      break;
 8012aba:	e014      	b.n	8012ae6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	68da      	ldr	r2, [r3, #12]
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	f022 0208 	bic.w	r2, r2, #8
 8012aca:	60da      	str	r2, [r3, #12]
      break;
 8012acc:	e00b      	b.n	8012ae6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	68da      	ldr	r2, [r3, #12]
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	f022 0210 	bic.w	r2, r2, #16
 8012adc:	60da      	str	r2, [r3, #12]
      break;
 8012ade:	e002      	b.n	8012ae6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8012ae0:	2301      	movs	r3, #1
 8012ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8012ae4:	bf00      	nop
  }

  if (status == HAL_OK)
 8012ae6:	7bfb      	ldrb	r3, [r7, #15]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	f040 8081 	bne.w	8012bf0 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	2200      	movs	r2, #0
 8012af4:	6839      	ldr	r1, [r7, #0]
 8012af6:	4618      	mov	r0, r3
 8012af8:	f001 fde2 	bl	80146c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	4a3e      	ldr	r2, [pc, #248]	@ (8012bfc <HAL_TIM_OC_Stop_IT+0x1b4>)
 8012b02:	4293      	cmp	r3, r2
 8012b04:	d013      	beq.n	8012b2e <HAL_TIM_OC_Stop_IT+0xe6>
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	4a3d      	ldr	r2, [pc, #244]	@ (8012c00 <HAL_TIM_OC_Stop_IT+0x1b8>)
 8012b0c:	4293      	cmp	r3, r2
 8012b0e:	d00e      	beq.n	8012b2e <HAL_TIM_OC_Stop_IT+0xe6>
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	4a3b      	ldr	r2, [pc, #236]	@ (8012c04 <HAL_TIM_OC_Stop_IT+0x1bc>)
 8012b16:	4293      	cmp	r3, r2
 8012b18:	d009      	beq.n	8012b2e <HAL_TIM_OC_Stop_IT+0xe6>
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	4a3a      	ldr	r2, [pc, #232]	@ (8012c08 <HAL_TIM_OC_Stop_IT+0x1c0>)
 8012b20:	4293      	cmp	r3, r2
 8012b22:	d004      	beq.n	8012b2e <HAL_TIM_OC_Stop_IT+0xe6>
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	4a38      	ldr	r2, [pc, #224]	@ (8012c0c <HAL_TIM_OC_Stop_IT+0x1c4>)
 8012b2a:	4293      	cmp	r3, r2
 8012b2c:	d101      	bne.n	8012b32 <HAL_TIM_OC_Stop_IT+0xea>
 8012b2e:	2301      	movs	r3, #1
 8012b30:	e000      	b.n	8012b34 <HAL_TIM_OC_Stop_IT+0xec>
 8012b32:	2300      	movs	r3, #0
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d017      	beq.n	8012b68 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	6a1a      	ldr	r2, [r3, #32]
 8012b3e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012b42:	4013      	ands	r3, r2
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d10f      	bne.n	8012b68 <HAL_TIM_OC_Stop_IT+0x120>
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	6a1a      	ldr	r2, [r3, #32]
 8012b4e:	f240 4344 	movw	r3, #1092	@ 0x444
 8012b52:	4013      	ands	r3, r2
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d107      	bne.n	8012b68 <HAL_TIM_OC_Stop_IT+0x120>
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8012b66:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	6a1a      	ldr	r2, [r3, #32]
 8012b6e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012b72:	4013      	ands	r3, r2
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d10f      	bne.n	8012b98 <HAL_TIM_OC_Stop_IT+0x150>
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	6a1a      	ldr	r2, [r3, #32]
 8012b7e:	f240 4344 	movw	r3, #1092	@ 0x444
 8012b82:	4013      	ands	r3, r2
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d107      	bne.n	8012b98 <HAL_TIM_OC_Stop_IT+0x150>
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	681a      	ldr	r2, [r3, #0]
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	f022 0201 	bic.w	r2, r2, #1
 8012b96:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012b98:	683b      	ldr	r3, [r7, #0]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d104      	bne.n	8012ba8 <HAL_TIM_OC_Stop_IT+0x160>
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	2201      	movs	r2, #1
 8012ba2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012ba6:	e023      	b.n	8012bf0 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012ba8:	683b      	ldr	r3, [r7, #0]
 8012baa:	2b04      	cmp	r3, #4
 8012bac:	d104      	bne.n	8012bb8 <HAL_TIM_OC_Stop_IT+0x170>
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	2201      	movs	r2, #1
 8012bb2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012bb6:	e01b      	b.n	8012bf0 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012bb8:	683b      	ldr	r3, [r7, #0]
 8012bba:	2b08      	cmp	r3, #8
 8012bbc:	d104      	bne.n	8012bc8 <HAL_TIM_OC_Stop_IT+0x180>
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	2201      	movs	r2, #1
 8012bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012bc6:	e013      	b.n	8012bf0 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012bc8:	683b      	ldr	r3, [r7, #0]
 8012bca:	2b0c      	cmp	r3, #12
 8012bcc:	d104      	bne.n	8012bd8 <HAL_TIM_OC_Stop_IT+0x190>
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	2201      	movs	r2, #1
 8012bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012bd6:	e00b      	b.n	8012bf0 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	2b10      	cmp	r3, #16
 8012bdc:	d104      	bne.n	8012be8 <HAL_TIM_OC_Stop_IT+0x1a0>
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	2201      	movs	r2, #1
 8012be2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012be6:	e003      	b.n	8012bf0 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	2201      	movs	r2, #1
 8012bec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8012bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	3710      	adds	r7, #16
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	bd80      	pop	{r7, pc}
 8012bfa:	bf00      	nop
 8012bfc:	40012c00 	.word	0x40012c00
 8012c00:	40013400 	.word	0x40013400
 8012c04:	40014000 	.word	0x40014000
 8012c08:	40014400 	.word	0x40014400
 8012c0c:	40014800 	.word	0x40014800

08012c10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b082      	sub	sp, #8
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d101      	bne.n	8012c22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012c1e:	2301      	movs	r3, #1
 8012c20:	e049      	b.n	8012cb6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012c28:	b2db      	uxtb	r3, r3
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d106      	bne.n	8012c3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	2200      	movs	r2, #0
 8012c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012c36:	6878      	ldr	r0, [r7, #4]
 8012c38:	f7f4 fe40 	bl	80078bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	2202      	movs	r2, #2
 8012c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	681a      	ldr	r2, [r3, #0]
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	3304      	adds	r3, #4
 8012c4c:	4619      	mov	r1, r3
 8012c4e:	4610      	mov	r0, r2
 8012c50:	f000 ff68 	bl	8013b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	2201      	movs	r2, #1
 8012c58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	2201      	movs	r2, #1
 8012c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2201      	movs	r2, #1
 8012c68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	2201      	movs	r2, #1
 8012c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	2201      	movs	r2, #1
 8012c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	2201      	movs	r2, #1
 8012c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	2201      	movs	r2, #1
 8012c88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	2201      	movs	r2, #1
 8012c90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2201      	movs	r2, #1
 8012c98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	2201      	movs	r2, #1
 8012ca0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2201      	movs	r2, #1
 8012ca8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2201      	movs	r2, #1
 8012cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012cb4:	2300      	movs	r3, #0
}
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	3708      	adds	r7, #8
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bd80      	pop	{r7, pc}
	...

08012cc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b084      	sub	sp, #16
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]
 8012cc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012cca:	683b      	ldr	r3, [r7, #0]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d109      	bne.n	8012ce4 <HAL_TIM_PWM_Start+0x24>
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012cd6:	b2db      	uxtb	r3, r3
 8012cd8:	2b01      	cmp	r3, #1
 8012cda:	bf14      	ite	ne
 8012cdc:	2301      	movne	r3, #1
 8012cde:	2300      	moveq	r3, #0
 8012ce0:	b2db      	uxtb	r3, r3
 8012ce2:	e03c      	b.n	8012d5e <HAL_TIM_PWM_Start+0x9e>
 8012ce4:	683b      	ldr	r3, [r7, #0]
 8012ce6:	2b04      	cmp	r3, #4
 8012ce8:	d109      	bne.n	8012cfe <HAL_TIM_PWM_Start+0x3e>
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8012cf0:	b2db      	uxtb	r3, r3
 8012cf2:	2b01      	cmp	r3, #1
 8012cf4:	bf14      	ite	ne
 8012cf6:	2301      	movne	r3, #1
 8012cf8:	2300      	moveq	r3, #0
 8012cfa:	b2db      	uxtb	r3, r3
 8012cfc:	e02f      	b.n	8012d5e <HAL_TIM_PWM_Start+0x9e>
 8012cfe:	683b      	ldr	r3, [r7, #0]
 8012d00:	2b08      	cmp	r3, #8
 8012d02:	d109      	bne.n	8012d18 <HAL_TIM_PWM_Start+0x58>
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012d0a:	b2db      	uxtb	r3, r3
 8012d0c:	2b01      	cmp	r3, #1
 8012d0e:	bf14      	ite	ne
 8012d10:	2301      	movne	r3, #1
 8012d12:	2300      	moveq	r3, #0
 8012d14:	b2db      	uxtb	r3, r3
 8012d16:	e022      	b.n	8012d5e <HAL_TIM_PWM_Start+0x9e>
 8012d18:	683b      	ldr	r3, [r7, #0]
 8012d1a:	2b0c      	cmp	r3, #12
 8012d1c:	d109      	bne.n	8012d32 <HAL_TIM_PWM_Start+0x72>
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012d24:	b2db      	uxtb	r3, r3
 8012d26:	2b01      	cmp	r3, #1
 8012d28:	bf14      	ite	ne
 8012d2a:	2301      	movne	r3, #1
 8012d2c:	2300      	moveq	r3, #0
 8012d2e:	b2db      	uxtb	r3, r3
 8012d30:	e015      	b.n	8012d5e <HAL_TIM_PWM_Start+0x9e>
 8012d32:	683b      	ldr	r3, [r7, #0]
 8012d34:	2b10      	cmp	r3, #16
 8012d36:	d109      	bne.n	8012d4c <HAL_TIM_PWM_Start+0x8c>
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012d3e:	b2db      	uxtb	r3, r3
 8012d40:	2b01      	cmp	r3, #1
 8012d42:	bf14      	ite	ne
 8012d44:	2301      	movne	r3, #1
 8012d46:	2300      	moveq	r3, #0
 8012d48:	b2db      	uxtb	r3, r3
 8012d4a:	e008      	b.n	8012d5e <HAL_TIM_PWM_Start+0x9e>
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012d52:	b2db      	uxtb	r3, r3
 8012d54:	2b01      	cmp	r3, #1
 8012d56:	bf14      	ite	ne
 8012d58:	2301      	movne	r3, #1
 8012d5a:	2300      	moveq	r3, #0
 8012d5c:	b2db      	uxtb	r3, r3
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d001      	beq.n	8012d66 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8012d62:	2301      	movs	r3, #1
 8012d64:	e09c      	b.n	8012ea0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012d66:	683b      	ldr	r3, [r7, #0]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d104      	bne.n	8012d76 <HAL_TIM_PWM_Start+0xb6>
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	2202      	movs	r2, #2
 8012d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012d74:	e023      	b.n	8012dbe <HAL_TIM_PWM_Start+0xfe>
 8012d76:	683b      	ldr	r3, [r7, #0]
 8012d78:	2b04      	cmp	r3, #4
 8012d7a:	d104      	bne.n	8012d86 <HAL_TIM_PWM_Start+0xc6>
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	2202      	movs	r2, #2
 8012d80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012d84:	e01b      	b.n	8012dbe <HAL_TIM_PWM_Start+0xfe>
 8012d86:	683b      	ldr	r3, [r7, #0]
 8012d88:	2b08      	cmp	r3, #8
 8012d8a:	d104      	bne.n	8012d96 <HAL_TIM_PWM_Start+0xd6>
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	2202      	movs	r2, #2
 8012d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012d94:	e013      	b.n	8012dbe <HAL_TIM_PWM_Start+0xfe>
 8012d96:	683b      	ldr	r3, [r7, #0]
 8012d98:	2b0c      	cmp	r3, #12
 8012d9a:	d104      	bne.n	8012da6 <HAL_TIM_PWM_Start+0xe6>
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	2202      	movs	r2, #2
 8012da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012da4:	e00b      	b.n	8012dbe <HAL_TIM_PWM_Start+0xfe>
 8012da6:	683b      	ldr	r3, [r7, #0]
 8012da8:	2b10      	cmp	r3, #16
 8012daa:	d104      	bne.n	8012db6 <HAL_TIM_PWM_Start+0xf6>
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2202      	movs	r2, #2
 8012db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012db4:	e003      	b.n	8012dbe <HAL_TIM_PWM_Start+0xfe>
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	2202      	movs	r2, #2
 8012dba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	2201      	movs	r2, #1
 8012dc4:	6839      	ldr	r1, [r7, #0]
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	f001 fc7a 	bl	80146c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	4a35      	ldr	r2, [pc, #212]	@ (8012ea8 <HAL_TIM_PWM_Start+0x1e8>)
 8012dd2:	4293      	cmp	r3, r2
 8012dd4:	d013      	beq.n	8012dfe <HAL_TIM_PWM_Start+0x13e>
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	4a34      	ldr	r2, [pc, #208]	@ (8012eac <HAL_TIM_PWM_Start+0x1ec>)
 8012ddc:	4293      	cmp	r3, r2
 8012dde:	d00e      	beq.n	8012dfe <HAL_TIM_PWM_Start+0x13e>
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	4a32      	ldr	r2, [pc, #200]	@ (8012eb0 <HAL_TIM_PWM_Start+0x1f0>)
 8012de6:	4293      	cmp	r3, r2
 8012de8:	d009      	beq.n	8012dfe <HAL_TIM_PWM_Start+0x13e>
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	4a31      	ldr	r2, [pc, #196]	@ (8012eb4 <HAL_TIM_PWM_Start+0x1f4>)
 8012df0:	4293      	cmp	r3, r2
 8012df2:	d004      	beq.n	8012dfe <HAL_TIM_PWM_Start+0x13e>
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	4a2f      	ldr	r2, [pc, #188]	@ (8012eb8 <HAL_TIM_PWM_Start+0x1f8>)
 8012dfa:	4293      	cmp	r3, r2
 8012dfc:	d101      	bne.n	8012e02 <HAL_TIM_PWM_Start+0x142>
 8012dfe:	2301      	movs	r3, #1
 8012e00:	e000      	b.n	8012e04 <HAL_TIM_PWM_Start+0x144>
 8012e02:	2300      	movs	r3, #0
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d007      	beq.n	8012e18 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012e16:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	4a22      	ldr	r2, [pc, #136]	@ (8012ea8 <HAL_TIM_PWM_Start+0x1e8>)
 8012e1e:	4293      	cmp	r3, r2
 8012e20:	d01d      	beq.n	8012e5e <HAL_TIM_PWM_Start+0x19e>
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012e2a:	d018      	beq.n	8012e5e <HAL_TIM_PWM_Start+0x19e>
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	4a22      	ldr	r2, [pc, #136]	@ (8012ebc <HAL_TIM_PWM_Start+0x1fc>)
 8012e32:	4293      	cmp	r3, r2
 8012e34:	d013      	beq.n	8012e5e <HAL_TIM_PWM_Start+0x19e>
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	4a21      	ldr	r2, [pc, #132]	@ (8012ec0 <HAL_TIM_PWM_Start+0x200>)
 8012e3c:	4293      	cmp	r3, r2
 8012e3e:	d00e      	beq.n	8012e5e <HAL_TIM_PWM_Start+0x19e>
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	4a1f      	ldr	r2, [pc, #124]	@ (8012ec4 <HAL_TIM_PWM_Start+0x204>)
 8012e46:	4293      	cmp	r3, r2
 8012e48:	d009      	beq.n	8012e5e <HAL_TIM_PWM_Start+0x19e>
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	4a17      	ldr	r2, [pc, #92]	@ (8012eac <HAL_TIM_PWM_Start+0x1ec>)
 8012e50:	4293      	cmp	r3, r2
 8012e52:	d004      	beq.n	8012e5e <HAL_TIM_PWM_Start+0x19e>
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	4a15      	ldr	r2, [pc, #84]	@ (8012eb0 <HAL_TIM_PWM_Start+0x1f0>)
 8012e5a:	4293      	cmp	r3, r2
 8012e5c:	d115      	bne.n	8012e8a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	689a      	ldr	r2, [r3, #8]
 8012e64:	4b18      	ldr	r3, [pc, #96]	@ (8012ec8 <HAL_TIM_PWM_Start+0x208>)
 8012e66:	4013      	ands	r3, r2
 8012e68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	2b06      	cmp	r3, #6
 8012e6e:	d015      	beq.n	8012e9c <HAL_TIM_PWM_Start+0x1dc>
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012e76:	d011      	beq.n	8012e9c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	681a      	ldr	r2, [r3, #0]
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	f042 0201 	orr.w	r2, r2, #1
 8012e86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e88:	e008      	b.n	8012e9c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	681a      	ldr	r2, [r3, #0]
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	f042 0201 	orr.w	r2, r2, #1
 8012e98:	601a      	str	r2, [r3, #0]
 8012e9a:	e000      	b.n	8012e9e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012e9e:	2300      	movs	r3, #0
}
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	3710      	adds	r7, #16
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	bd80      	pop	{r7, pc}
 8012ea8:	40012c00 	.word	0x40012c00
 8012eac:	40013400 	.word	0x40013400
 8012eb0:	40014000 	.word	0x40014000
 8012eb4:	40014400 	.word	0x40014400
 8012eb8:	40014800 	.word	0x40014800
 8012ebc:	40000400 	.word	0x40000400
 8012ec0:	40000800 	.word	0x40000800
 8012ec4:	40000c00 	.word	0x40000c00
 8012ec8:	00010007 	.word	0x00010007

08012ecc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b082      	sub	sp, #8
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
 8012ed4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	2200      	movs	r2, #0
 8012edc:	6839      	ldr	r1, [r7, #0]
 8012ede:	4618      	mov	r0, r3
 8012ee0:	f001 fbee 	bl	80146c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	4a3e      	ldr	r2, [pc, #248]	@ (8012fe4 <HAL_TIM_PWM_Stop+0x118>)
 8012eea:	4293      	cmp	r3, r2
 8012eec:	d013      	beq.n	8012f16 <HAL_TIM_PWM_Stop+0x4a>
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	4a3d      	ldr	r2, [pc, #244]	@ (8012fe8 <HAL_TIM_PWM_Stop+0x11c>)
 8012ef4:	4293      	cmp	r3, r2
 8012ef6:	d00e      	beq.n	8012f16 <HAL_TIM_PWM_Stop+0x4a>
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	4a3b      	ldr	r2, [pc, #236]	@ (8012fec <HAL_TIM_PWM_Stop+0x120>)
 8012efe:	4293      	cmp	r3, r2
 8012f00:	d009      	beq.n	8012f16 <HAL_TIM_PWM_Stop+0x4a>
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	4a3a      	ldr	r2, [pc, #232]	@ (8012ff0 <HAL_TIM_PWM_Stop+0x124>)
 8012f08:	4293      	cmp	r3, r2
 8012f0a:	d004      	beq.n	8012f16 <HAL_TIM_PWM_Stop+0x4a>
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	4a38      	ldr	r2, [pc, #224]	@ (8012ff4 <HAL_TIM_PWM_Stop+0x128>)
 8012f12:	4293      	cmp	r3, r2
 8012f14:	d101      	bne.n	8012f1a <HAL_TIM_PWM_Stop+0x4e>
 8012f16:	2301      	movs	r3, #1
 8012f18:	e000      	b.n	8012f1c <HAL_TIM_PWM_Stop+0x50>
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d017      	beq.n	8012f50 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	6a1a      	ldr	r2, [r3, #32]
 8012f26:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012f2a:	4013      	ands	r3, r2
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d10f      	bne.n	8012f50 <HAL_TIM_PWM_Stop+0x84>
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	6a1a      	ldr	r2, [r3, #32]
 8012f36:	f240 4344 	movw	r3, #1092	@ 0x444
 8012f3a:	4013      	ands	r3, r2
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d107      	bne.n	8012f50 <HAL_TIM_PWM_Stop+0x84>
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8012f4e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	6a1a      	ldr	r2, [r3, #32]
 8012f56:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012f5a:	4013      	ands	r3, r2
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d10f      	bne.n	8012f80 <HAL_TIM_PWM_Stop+0xb4>
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	6a1a      	ldr	r2, [r3, #32]
 8012f66:	f240 4344 	movw	r3, #1092	@ 0x444
 8012f6a:	4013      	ands	r3, r2
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d107      	bne.n	8012f80 <HAL_TIM_PWM_Stop+0xb4>
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	681a      	ldr	r2, [r3, #0]
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	f022 0201 	bic.w	r2, r2, #1
 8012f7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012f80:	683b      	ldr	r3, [r7, #0]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d104      	bne.n	8012f90 <HAL_TIM_PWM_Stop+0xc4>
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	2201      	movs	r2, #1
 8012f8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012f8e:	e023      	b.n	8012fd8 <HAL_TIM_PWM_Stop+0x10c>
 8012f90:	683b      	ldr	r3, [r7, #0]
 8012f92:	2b04      	cmp	r3, #4
 8012f94:	d104      	bne.n	8012fa0 <HAL_TIM_PWM_Stop+0xd4>
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	2201      	movs	r2, #1
 8012f9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012f9e:	e01b      	b.n	8012fd8 <HAL_TIM_PWM_Stop+0x10c>
 8012fa0:	683b      	ldr	r3, [r7, #0]
 8012fa2:	2b08      	cmp	r3, #8
 8012fa4:	d104      	bne.n	8012fb0 <HAL_TIM_PWM_Stop+0xe4>
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	2201      	movs	r2, #1
 8012faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012fae:	e013      	b.n	8012fd8 <HAL_TIM_PWM_Stop+0x10c>
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	2b0c      	cmp	r3, #12
 8012fb4:	d104      	bne.n	8012fc0 <HAL_TIM_PWM_Stop+0xf4>
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	2201      	movs	r2, #1
 8012fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012fbe:	e00b      	b.n	8012fd8 <HAL_TIM_PWM_Stop+0x10c>
 8012fc0:	683b      	ldr	r3, [r7, #0]
 8012fc2:	2b10      	cmp	r3, #16
 8012fc4:	d104      	bne.n	8012fd0 <HAL_TIM_PWM_Stop+0x104>
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	2201      	movs	r2, #1
 8012fca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012fce:	e003      	b.n	8012fd8 <HAL_TIM_PWM_Stop+0x10c>
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	2201      	movs	r2, #1
 8012fd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8012fd8:	2300      	movs	r3, #0
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	3708      	adds	r7, #8
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bd80      	pop	{r7, pc}
 8012fe2:	bf00      	nop
 8012fe4:	40012c00 	.word	0x40012c00
 8012fe8:	40013400 	.word	0x40013400
 8012fec:	40014000 	.word	0x40014000
 8012ff0:	40014400 	.word	0x40014400
 8012ff4:	40014800 	.word	0x40014800

08012ff8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b082      	sub	sp, #8
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d101      	bne.n	801300a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8013006:	2301      	movs	r3, #1
 8013008:	e049      	b.n	801309e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013010:	b2db      	uxtb	r3, r3
 8013012:	2b00      	cmp	r3, #0
 8013014:	d106      	bne.n	8013024 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	2200      	movs	r2, #0
 801301a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801301e:	6878      	ldr	r0, [r7, #4]
 8013020:	f7f4 fc6c 	bl	80078fc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	2202      	movs	r2, #2
 8013028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	681a      	ldr	r2, [r3, #0]
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	3304      	adds	r3, #4
 8013034:	4619      	mov	r1, r3
 8013036:	4610      	mov	r0, r2
 8013038:	f000 fd74 	bl	8013b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	2201      	movs	r2, #1
 8013040:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	2201      	movs	r2, #1
 8013048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	2201      	movs	r2, #1
 8013050:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	2201      	movs	r2, #1
 8013058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	2201      	movs	r2, #1
 8013060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	2201      	movs	r2, #1
 8013068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	2201      	movs	r2, #1
 8013070:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	2201      	movs	r2, #1
 8013078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	2201      	movs	r2, #1
 8013080:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	2201      	movs	r2, #1
 8013088:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	2201      	movs	r2, #1
 8013090:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	2201      	movs	r2, #1
 8013098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801309c:	2300      	movs	r3, #0
}
 801309e:	4618      	mov	r0, r3
 80130a0:	3708      	adds	r7, #8
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}
	...

080130a8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b084      	sub	sp, #16
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
 80130b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80130b2:	2300      	movs	r3, #0
 80130b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80130b6:	683b      	ldr	r3, [r7, #0]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d104      	bne.n	80130c6 <HAL_TIM_IC_Start_IT+0x1e>
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80130c2:	b2db      	uxtb	r3, r3
 80130c4:	e023      	b.n	801310e <HAL_TIM_IC_Start_IT+0x66>
 80130c6:	683b      	ldr	r3, [r7, #0]
 80130c8:	2b04      	cmp	r3, #4
 80130ca:	d104      	bne.n	80130d6 <HAL_TIM_IC_Start_IT+0x2e>
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80130d2:	b2db      	uxtb	r3, r3
 80130d4:	e01b      	b.n	801310e <HAL_TIM_IC_Start_IT+0x66>
 80130d6:	683b      	ldr	r3, [r7, #0]
 80130d8:	2b08      	cmp	r3, #8
 80130da:	d104      	bne.n	80130e6 <HAL_TIM_IC_Start_IT+0x3e>
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80130e2:	b2db      	uxtb	r3, r3
 80130e4:	e013      	b.n	801310e <HAL_TIM_IC_Start_IT+0x66>
 80130e6:	683b      	ldr	r3, [r7, #0]
 80130e8:	2b0c      	cmp	r3, #12
 80130ea:	d104      	bne.n	80130f6 <HAL_TIM_IC_Start_IT+0x4e>
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80130f2:	b2db      	uxtb	r3, r3
 80130f4:	e00b      	b.n	801310e <HAL_TIM_IC_Start_IT+0x66>
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	2b10      	cmp	r3, #16
 80130fa:	d104      	bne.n	8013106 <HAL_TIM_IC_Start_IT+0x5e>
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013102:	b2db      	uxtb	r3, r3
 8013104:	e003      	b.n	801310e <HAL_TIM_IC_Start_IT+0x66>
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801310c:	b2db      	uxtb	r3, r3
 801310e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8013110:	683b      	ldr	r3, [r7, #0]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d104      	bne.n	8013120 <HAL_TIM_IC_Start_IT+0x78>
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801311c:	b2db      	uxtb	r3, r3
 801311e:	e013      	b.n	8013148 <HAL_TIM_IC_Start_IT+0xa0>
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	2b04      	cmp	r3, #4
 8013124:	d104      	bne.n	8013130 <HAL_TIM_IC_Start_IT+0x88>
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801312c:	b2db      	uxtb	r3, r3
 801312e:	e00b      	b.n	8013148 <HAL_TIM_IC_Start_IT+0xa0>
 8013130:	683b      	ldr	r3, [r7, #0]
 8013132:	2b08      	cmp	r3, #8
 8013134:	d104      	bne.n	8013140 <HAL_TIM_IC_Start_IT+0x98>
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 801313c:	b2db      	uxtb	r3, r3
 801313e:	e003      	b.n	8013148 <HAL_TIM_IC_Start_IT+0xa0>
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8013146:	b2db      	uxtb	r3, r3
 8013148:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801314a:	7bbb      	ldrb	r3, [r7, #14]
 801314c:	2b01      	cmp	r3, #1
 801314e:	d102      	bne.n	8013156 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8013150:	7b7b      	ldrb	r3, [r7, #13]
 8013152:	2b01      	cmp	r3, #1
 8013154:	d001      	beq.n	801315a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8013156:	2301      	movs	r3, #1
 8013158:	e0dd      	b.n	8013316 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801315a:	683b      	ldr	r3, [r7, #0]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d104      	bne.n	801316a <HAL_TIM_IC_Start_IT+0xc2>
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	2202      	movs	r2, #2
 8013164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013168:	e023      	b.n	80131b2 <HAL_TIM_IC_Start_IT+0x10a>
 801316a:	683b      	ldr	r3, [r7, #0]
 801316c:	2b04      	cmp	r3, #4
 801316e:	d104      	bne.n	801317a <HAL_TIM_IC_Start_IT+0xd2>
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	2202      	movs	r2, #2
 8013174:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013178:	e01b      	b.n	80131b2 <HAL_TIM_IC_Start_IT+0x10a>
 801317a:	683b      	ldr	r3, [r7, #0]
 801317c:	2b08      	cmp	r3, #8
 801317e:	d104      	bne.n	801318a <HAL_TIM_IC_Start_IT+0xe2>
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	2202      	movs	r2, #2
 8013184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013188:	e013      	b.n	80131b2 <HAL_TIM_IC_Start_IT+0x10a>
 801318a:	683b      	ldr	r3, [r7, #0]
 801318c:	2b0c      	cmp	r3, #12
 801318e:	d104      	bne.n	801319a <HAL_TIM_IC_Start_IT+0xf2>
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	2202      	movs	r2, #2
 8013194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013198:	e00b      	b.n	80131b2 <HAL_TIM_IC_Start_IT+0x10a>
 801319a:	683b      	ldr	r3, [r7, #0]
 801319c:	2b10      	cmp	r3, #16
 801319e:	d104      	bne.n	80131aa <HAL_TIM_IC_Start_IT+0x102>
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	2202      	movs	r2, #2
 80131a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80131a8:	e003      	b.n	80131b2 <HAL_TIM_IC_Start_IT+0x10a>
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	2202      	movs	r2, #2
 80131ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80131b2:	683b      	ldr	r3, [r7, #0]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d104      	bne.n	80131c2 <HAL_TIM_IC_Start_IT+0x11a>
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	2202      	movs	r2, #2
 80131bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80131c0:	e013      	b.n	80131ea <HAL_TIM_IC_Start_IT+0x142>
 80131c2:	683b      	ldr	r3, [r7, #0]
 80131c4:	2b04      	cmp	r3, #4
 80131c6:	d104      	bne.n	80131d2 <HAL_TIM_IC_Start_IT+0x12a>
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	2202      	movs	r2, #2
 80131cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80131d0:	e00b      	b.n	80131ea <HAL_TIM_IC_Start_IT+0x142>
 80131d2:	683b      	ldr	r3, [r7, #0]
 80131d4:	2b08      	cmp	r3, #8
 80131d6:	d104      	bne.n	80131e2 <HAL_TIM_IC_Start_IT+0x13a>
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	2202      	movs	r2, #2
 80131dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80131e0:	e003      	b.n	80131ea <HAL_TIM_IC_Start_IT+0x142>
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	2202      	movs	r2, #2
 80131e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80131ea:	683b      	ldr	r3, [r7, #0]
 80131ec:	2b0c      	cmp	r3, #12
 80131ee:	d841      	bhi.n	8013274 <HAL_TIM_IC_Start_IT+0x1cc>
 80131f0:	a201      	add	r2, pc, #4	@ (adr r2, 80131f8 <HAL_TIM_IC_Start_IT+0x150>)
 80131f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131f6:	bf00      	nop
 80131f8:	0801322d 	.word	0x0801322d
 80131fc:	08013275 	.word	0x08013275
 8013200:	08013275 	.word	0x08013275
 8013204:	08013275 	.word	0x08013275
 8013208:	0801323f 	.word	0x0801323f
 801320c:	08013275 	.word	0x08013275
 8013210:	08013275 	.word	0x08013275
 8013214:	08013275 	.word	0x08013275
 8013218:	08013251 	.word	0x08013251
 801321c:	08013275 	.word	0x08013275
 8013220:	08013275 	.word	0x08013275
 8013224:	08013275 	.word	0x08013275
 8013228:	08013263 	.word	0x08013263
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	68da      	ldr	r2, [r3, #12]
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	f042 0202 	orr.w	r2, r2, #2
 801323a:	60da      	str	r2, [r3, #12]
      break;
 801323c:	e01d      	b.n	801327a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	68da      	ldr	r2, [r3, #12]
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	f042 0204 	orr.w	r2, r2, #4
 801324c:	60da      	str	r2, [r3, #12]
      break;
 801324e:	e014      	b.n	801327a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	68da      	ldr	r2, [r3, #12]
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	f042 0208 	orr.w	r2, r2, #8
 801325e:	60da      	str	r2, [r3, #12]
      break;
 8013260:	e00b      	b.n	801327a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	68da      	ldr	r2, [r3, #12]
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	f042 0210 	orr.w	r2, r2, #16
 8013270:	60da      	str	r2, [r3, #12]
      break;
 8013272:	e002      	b.n	801327a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8013274:	2301      	movs	r3, #1
 8013276:	73fb      	strb	r3, [r7, #15]
      break;
 8013278:	bf00      	nop
  }

  if (status == HAL_OK)
 801327a:	7bfb      	ldrb	r3, [r7, #15]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d149      	bne.n	8013314 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	2201      	movs	r2, #1
 8013286:	6839      	ldr	r1, [r7, #0]
 8013288:	4618      	mov	r0, r3
 801328a:	f001 fa19 	bl	80146c0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	4a23      	ldr	r2, [pc, #140]	@ (8013320 <HAL_TIM_IC_Start_IT+0x278>)
 8013294:	4293      	cmp	r3, r2
 8013296:	d01d      	beq.n	80132d4 <HAL_TIM_IC_Start_IT+0x22c>
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80132a0:	d018      	beq.n	80132d4 <HAL_TIM_IC_Start_IT+0x22c>
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	4a1f      	ldr	r2, [pc, #124]	@ (8013324 <HAL_TIM_IC_Start_IT+0x27c>)
 80132a8:	4293      	cmp	r3, r2
 80132aa:	d013      	beq.n	80132d4 <HAL_TIM_IC_Start_IT+0x22c>
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	4a1d      	ldr	r2, [pc, #116]	@ (8013328 <HAL_TIM_IC_Start_IT+0x280>)
 80132b2:	4293      	cmp	r3, r2
 80132b4:	d00e      	beq.n	80132d4 <HAL_TIM_IC_Start_IT+0x22c>
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	4a1c      	ldr	r2, [pc, #112]	@ (801332c <HAL_TIM_IC_Start_IT+0x284>)
 80132bc:	4293      	cmp	r3, r2
 80132be:	d009      	beq.n	80132d4 <HAL_TIM_IC_Start_IT+0x22c>
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	4a1a      	ldr	r2, [pc, #104]	@ (8013330 <HAL_TIM_IC_Start_IT+0x288>)
 80132c6:	4293      	cmp	r3, r2
 80132c8:	d004      	beq.n	80132d4 <HAL_TIM_IC_Start_IT+0x22c>
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	4a19      	ldr	r2, [pc, #100]	@ (8013334 <HAL_TIM_IC_Start_IT+0x28c>)
 80132d0:	4293      	cmp	r3, r2
 80132d2:	d115      	bne.n	8013300 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	689a      	ldr	r2, [r3, #8]
 80132da:	4b17      	ldr	r3, [pc, #92]	@ (8013338 <HAL_TIM_IC_Start_IT+0x290>)
 80132dc:	4013      	ands	r3, r2
 80132de:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80132e0:	68bb      	ldr	r3, [r7, #8]
 80132e2:	2b06      	cmp	r3, #6
 80132e4:	d015      	beq.n	8013312 <HAL_TIM_IC_Start_IT+0x26a>
 80132e6:	68bb      	ldr	r3, [r7, #8]
 80132e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80132ec:	d011      	beq.n	8013312 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	681a      	ldr	r2, [r3, #0]
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	f042 0201 	orr.w	r2, r2, #1
 80132fc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80132fe:	e008      	b.n	8013312 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	681a      	ldr	r2, [r3, #0]
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	f042 0201 	orr.w	r2, r2, #1
 801330e:	601a      	str	r2, [r3, #0]
 8013310:	e000      	b.n	8013314 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013312:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8013314:	7bfb      	ldrb	r3, [r7, #15]
}
 8013316:	4618      	mov	r0, r3
 8013318:	3710      	adds	r7, #16
 801331a:	46bd      	mov	sp, r7
 801331c:	bd80      	pop	{r7, pc}
 801331e:	bf00      	nop
 8013320:	40012c00 	.word	0x40012c00
 8013324:	40000400 	.word	0x40000400
 8013328:	40000800 	.word	0x40000800
 801332c:	40000c00 	.word	0x40000c00
 8013330:	40013400 	.word	0x40013400
 8013334:	40014000 	.word	0x40014000
 8013338:	00010007 	.word	0x00010007

0801333c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b084      	sub	sp, #16
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
 8013344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013346:	2300      	movs	r3, #0
 8013348:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 801334a:	683b      	ldr	r3, [r7, #0]
 801334c:	2b0c      	cmp	r3, #12
 801334e:	d841      	bhi.n	80133d4 <HAL_TIM_IC_Stop_IT+0x98>
 8013350:	a201      	add	r2, pc, #4	@ (adr r2, 8013358 <HAL_TIM_IC_Stop_IT+0x1c>)
 8013352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013356:	bf00      	nop
 8013358:	0801338d 	.word	0x0801338d
 801335c:	080133d5 	.word	0x080133d5
 8013360:	080133d5 	.word	0x080133d5
 8013364:	080133d5 	.word	0x080133d5
 8013368:	0801339f 	.word	0x0801339f
 801336c:	080133d5 	.word	0x080133d5
 8013370:	080133d5 	.word	0x080133d5
 8013374:	080133d5 	.word	0x080133d5
 8013378:	080133b1 	.word	0x080133b1
 801337c:	080133d5 	.word	0x080133d5
 8013380:	080133d5 	.word	0x080133d5
 8013384:	080133d5 	.word	0x080133d5
 8013388:	080133c3 	.word	0x080133c3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	68da      	ldr	r2, [r3, #12]
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	f022 0202 	bic.w	r2, r2, #2
 801339a:	60da      	str	r2, [r3, #12]
      break;
 801339c:	e01d      	b.n	80133da <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	68da      	ldr	r2, [r3, #12]
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	f022 0204 	bic.w	r2, r2, #4
 80133ac:	60da      	str	r2, [r3, #12]
      break;
 80133ae:	e014      	b.n	80133da <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	68da      	ldr	r2, [r3, #12]
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	f022 0208 	bic.w	r2, r2, #8
 80133be:	60da      	str	r2, [r3, #12]
      break;
 80133c0:	e00b      	b.n	80133da <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	68da      	ldr	r2, [r3, #12]
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	f022 0210 	bic.w	r2, r2, #16
 80133d0:	60da      	str	r2, [r3, #12]
      break;
 80133d2:	e002      	b.n	80133da <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80133d4:	2301      	movs	r3, #1
 80133d6:	73fb      	strb	r3, [r7, #15]
      break;
 80133d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80133da:	7bfb      	ldrb	r3, [r7, #15]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d166      	bne.n	80134ae <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	2200      	movs	r2, #0
 80133e6:	6839      	ldr	r1, [r7, #0]
 80133e8:	4618      	mov	r0, r3
 80133ea:	f001 f969 	bl	80146c0 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	6a1a      	ldr	r2, [r3, #32]
 80133f4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80133f8:	4013      	ands	r3, r2
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d10f      	bne.n	801341e <HAL_TIM_IC_Stop_IT+0xe2>
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	6a1a      	ldr	r2, [r3, #32]
 8013404:	f240 4344 	movw	r3, #1092	@ 0x444
 8013408:	4013      	ands	r3, r2
 801340a:	2b00      	cmp	r3, #0
 801340c:	d107      	bne.n	801341e <HAL_TIM_IC_Stop_IT+0xe2>
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	681a      	ldr	r2, [r3, #0]
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	f022 0201 	bic.w	r2, r2, #1
 801341c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801341e:	683b      	ldr	r3, [r7, #0]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d104      	bne.n	801342e <HAL_TIM_IC_Stop_IT+0xf2>
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	2201      	movs	r2, #1
 8013428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801342c:	e023      	b.n	8013476 <HAL_TIM_IC_Stop_IT+0x13a>
 801342e:	683b      	ldr	r3, [r7, #0]
 8013430:	2b04      	cmp	r3, #4
 8013432:	d104      	bne.n	801343e <HAL_TIM_IC_Stop_IT+0x102>
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	2201      	movs	r2, #1
 8013438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801343c:	e01b      	b.n	8013476 <HAL_TIM_IC_Stop_IT+0x13a>
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	2b08      	cmp	r3, #8
 8013442:	d104      	bne.n	801344e <HAL_TIM_IC_Stop_IT+0x112>
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	2201      	movs	r2, #1
 8013448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801344c:	e013      	b.n	8013476 <HAL_TIM_IC_Stop_IT+0x13a>
 801344e:	683b      	ldr	r3, [r7, #0]
 8013450:	2b0c      	cmp	r3, #12
 8013452:	d104      	bne.n	801345e <HAL_TIM_IC_Stop_IT+0x122>
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	2201      	movs	r2, #1
 8013458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801345c:	e00b      	b.n	8013476 <HAL_TIM_IC_Stop_IT+0x13a>
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	2b10      	cmp	r3, #16
 8013462:	d104      	bne.n	801346e <HAL_TIM_IC_Stop_IT+0x132>
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	2201      	movs	r2, #1
 8013468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801346c:	e003      	b.n	8013476 <HAL_TIM_IC_Stop_IT+0x13a>
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	2201      	movs	r2, #1
 8013472:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d104      	bne.n	8013486 <HAL_TIM_IC_Stop_IT+0x14a>
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	2201      	movs	r2, #1
 8013480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013484:	e013      	b.n	80134ae <HAL_TIM_IC_Stop_IT+0x172>
 8013486:	683b      	ldr	r3, [r7, #0]
 8013488:	2b04      	cmp	r3, #4
 801348a:	d104      	bne.n	8013496 <HAL_TIM_IC_Stop_IT+0x15a>
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	2201      	movs	r2, #1
 8013490:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013494:	e00b      	b.n	80134ae <HAL_TIM_IC_Stop_IT+0x172>
 8013496:	683b      	ldr	r3, [r7, #0]
 8013498:	2b08      	cmp	r3, #8
 801349a:	d104      	bne.n	80134a6 <HAL_TIM_IC_Stop_IT+0x16a>
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	2201      	movs	r2, #1
 80134a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80134a4:	e003      	b.n	80134ae <HAL_TIM_IC_Stop_IT+0x172>
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	2201      	movs	r2, #1
 80134aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 80134ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80134b0:	4618      	mov	r0, r3
 80134b2:	3710      	adds	r7, #16
 80134b4:	46bd      	mov	sp, r7
 80134b6:	bd80      	pop	{r7, pc}

080134b8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b086      	sub	sp, #24
 80134bc:	af00      	add	r7, sp, #0
 80134be:	60f8      	str	r0, [r7, #12]
 80134c0:	60b9      	str	r1, [r7, #8]
 80134c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80134c4:	2300      	movs	r3, #0
 80134c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80134ce:	2b01      	cmp	r3, #1
 80134d0:	d101      	bne.n	80134d6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80134d2:	2302      	movs	r3, #2
 80134d4:	e066      	b.n	80135a4 <HAL_TIM_OC_ConfigChannel+0xec>
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	2201      	movs	r2, #1
 80134da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	2b14      	cmp	r3, #20
 80134e2:	d857      	bhi.n	8013594 <HAL_TIM_OC_ConfigChannel+0xdc>
 80134e4:	a201      	add	r2, pc, #4	@ (adr r2, 80134ec <HAL_TIM_OC_ConfigChannel+0x34>)
 80134e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134ea:	bf00      	nop
 80134ec:	08013541 	.word	0x08013541
 80134f0:	08013595 	.word	0x08013595
 80134f4:	08013595 	.word	0x08013595
 80134f8:	08013595 	.word	0x08013595
 80134fc:	0801354f 	.word	0x0801354f
 8013500:	08013595 	.word	0x08013595
 8013504:	08013595 	.word	0x08013595
 8013508:	08013595 	.word	0x08013595
 801350c:	0801355d 	.word	0x0801355d
 8013510:	08013595 	.word	0x08013595
 8013514:	08013595 	.word	0x08013595
 8013518:	08013595 	.word	0x08013595
 801351c:	0801356b 	.word	0x0801356b
 8013520:	08013595 	.word	0x08013595
 8013524:	08013595 	.word	0x08013595
 8013528:	08013595 	.word	0x08013595
 801352c:	08013579 	.word	0x08013579
 8013530:	08013595 	.word	0x08013595
 8013534:	08013595 	.word	0x08013595
 8013538:	08013595 	.word	0x08013595
 801353c:	08013587 	.word	0x08013587
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	68b9      	ldr	r1, [r7, #8]
 8013546:	4618      	mov	r0, r3
 8013548:	f000 fb92 	bl	8013c70 <TIM_OC1_SetConfig>
      break;
 801354c:	e025      	b.n	801359a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	68b9      	ldr	r1, [r7, #8]
 8013554:	4618      	mov	r0, r3
 8013556:	f000 fc1b 	bl	8013d90 <TIM_OC2_SetConfig>
      break;
 801355a:	e01e      	b.n	801359a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	68b9      	ldr	r1, [r7, #8]
 8013562:	4618      	mov	r0, r3
 8013564:	f000 fc9e 	bl	8013ea4 <TIM_OC3_SetConfig>
      break;
 8013568:	e017      	b.n	801359a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	68b9      	ldr	r1, [r7, #8]
 8013570:	4618      	mov	r0, r3
 8013572:	f000 fd1f 	bl	8013fb4 <TIM_OC4_SetConfig>
      break;
 8013576:	e010      	b.n	801359a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	68b9      	ldr	r1, [r7, #8]
 801357e:	4618      	mov	r0, r3
 8013580:	f000 fd82 	bl	8014088 <TIM_OC5_SetConfig>
      break;
 8013584:	e009      	b.n	801359a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	68b9      	ldr	r1, [r7, #8]
 801358c:	4618      	mov	r0, r3
 801358e:	f000 fddf 	bl	8014150 <TIM_OC6_SetConfig>
      break;
 8013592:	e002      	b.n	801359a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8013594:	2301      	movs	r3, #1
 8013596:	75fb      	strb	r3, [r7, #23]
      break;
 8013598:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	2200      	movs	r2, #0
 801359e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80135a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80135a4:	4618      	mov	r0, r3
 80135a6:	3718      	adds	r7, #24
 80135a8:	46bd      	mov	sp, r7
 80135aa:	bd80      	pop	{r7, pc}

080135ac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b086      	sub	sp, #24
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	60f8      	str	r0, [r7, #12]
 80135b4:	60b9      	str	r1, [r7, #8]
 80135b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80135b8:	2300      	movs	r3, #0
 80135ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80135c2:	2b01      	cmp	r3, #1
 80135c4:	d101      	bne.n	80135ca <HAL_TIM_IC_ConfigChannel+0x1e>
 80135c6:	2302      	movs	r3, #2
 80135c8:	e088      	b.n	80136dc <HAL_TIM_IC_ConfigChannel+0x130>
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	2201      	movs	r2, #1
 80135ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d11b      	bne.n	8013610 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80135dc:	68bb      	ldr	r3, [r7, #8]
 80135de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80135e0:	68bb      	ldr	r3, [r7, #8]
 80135e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80135e4:	68bb      	ldr	r3, [r7, #8]
 80135e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80135e8:	f000 feac 	bl	8014344 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	699a      	ldr	r2, [r3, #24]
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	f022 020c 	bic.w	r2, r2, #12
 80135fa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	6999      	ldr	r1, [r3, #24]
 8013602:	68bb      	ldr	r3, [r7, #8]
 8013604:	689a      	ldr	r2, [r3, #8]
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	430a      	orrs	r2, r1
 801360c:	619a      	str	r2, [r3, #24]
 801360e:	e060      	b.n	80136d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	2b04      	cmp	r3, #4
 8013614:	d11c      	bne.n	8013650 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801361a:	68bb      	ldr	r3, [r7, #8]
 801361c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801361e:	68bb      	ldr	r3, [r7, #8]
 8013620:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8013622:	68bb      	ldr	r3, [r7, #8]
 8013624:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8013626:	f000 ff2a 	bl	801447e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	699a      	ldr	r2, [r3, #24]
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8013638:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	6999      	ldr	r1, [r3, #24]
 8013640:	68bb      	ldr	r3, [r7, #8]
 8013642:	689b      	ldr	r3, [r3, #8]
 8013644:	021a      	lsls	r2, r3, #8
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	430a      	orrs	r2, r1
 801364c:	619a      	str	r2, [r3, #24]
 801364e:	e040      	b.n	80136d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	2b08      	cmp	r3, #8
 8013654:	d11b      	bne.n	801368e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801365a:	68bb      	ldr	r3, [r7, #8]
 801365c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801365e:	68bb      	ldr	r3, [r7, #8]
 8013660:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8013662:	68bb      	ldr	r3, [r7, #8]
 8013664:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8013666:	f000 ff77 	bl	8014558 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	69da      	ldr	r2, [r3, #28]
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	f022 020c 	bic.w	r2, r2, #12
 8013678:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	69d9      	ldr	r1, [r3, #28]
 8013680:	68bb      	ldr	r3, [r7, #8]
 8013682:	689a      	ldr	r2, [r3, #8]
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	430a      	orrs	r2, r1
 801368a:	61da      	str	r2, [r3, #28]
 801368c:	e021      	b.n	80136d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	2b0c      	cmp	r3, #12
 8013692:	d11c      	bne.n	80136ce <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8013698:	68bb      	ldr	r3, [r7, #8]
 801369a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801369c:	68bb      	ldr	r3, [r7, #8]
 801369e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80136a0:	68bb      	ldr	r3, [r7, #8]
 80136a2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80136a4:	f000 ff94 	bl	80145d0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	69da      	ldr	r2, [r3, #28]
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80136b6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	69d9      	ldr	r1, [r3, #28]
 80136be:	68bb      	ldr	r3, [r7, #8]
 80136c0:	689b      	ldr	r3, [r3, #8]
 80136c2:	021a      	lsls	r2, r3, #8
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	430a      	orrs	r2, r1
 80136ca:	61da      	str	r2, [r3, #28]
 80136cc:	e001      	b.n	80136d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80136ce:	2301      	movs	r3, #1
 80136d0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	2200      	movs	r2, #0
 80136d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80136da:	7dfb      	ldrb	r3, [r7, #23]
}
 80136dc:	4618      	mov	r0, r3
 80136de:	3718      	adds	r7, #24
 80136e0:	46bd      	mov	sp, r7
 80136e2:	bd80      	pop	{r7, pc}

080136e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b086      	sub	sp, #24
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	60f8      	str	r0, [r7, #12]
 80136ec:	60b9      	str	r1, [r7, #8]
 80136ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80136f0:	2300      	movs	r3, #0
 80136f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80136fa:	2b01      	cmp	r3, #1
 80136fc:	d101      	bne.n	8013702 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80136fe:	2302      	movs	r3, #2
 8013700:	e0ff      	b.n	8013902 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	2201      	movs	r2, #1
 8013706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	2b14      	cmp	r3, #20
 801370e:	f200 80f0 	bhi.w	80138f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8013712:	a201      	add	r2, pc, #4	@ (adr r2, 8013718 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8013714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013718:	0801376d 	.word	0x0801376d
 801371c:	080138f3 	.word	0x080138f3
 8013720:	080138f3 	.word	0x080138f3
 8013724:	080138f3 	.word	0x080138f3
 8013728:	080137ad 	.word	0x080137ad
 801372c:	080138f3 	.word	0x080138f3
 8013730:	080138f3 	.word	0x080138f3
 8013734:	080138f3 	.word	0x080138f3
 8013738:	080137ef 	.word	0x080137ef
 801373c:	080138f3 	.word	0x080138f3
 8013740:	080138f3 	.word	0x080138f3
 8013744:	080138f3 	.word	0x080138f3
 8013748:	0801382f 	.word	0x0801382f
 801374c:	080138f3 	.word	0x080138f3
 8013750:	080138f3 	.word	0x080138f3
 8013754:	080138f3 	.word	0x080138f3
 8013758:	08013871 	.word	0x08013871
 801375c:	080138f3 	.word	0x080138f3
 8013760:	080138f3 	.word	0x080138f3
 8013764:	080138f3 	.word	0x080138f3
 8013768:	080138b1 	.word	0x080138b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	68b9      	ldr	r1, [r7, #8]
 8013772:	4618      	mov	r0, r3
 8013774:	f000 fa7c 	bl	8013c70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	699a      	ldr	r2, [r3, #24]
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	f042 0208 	orr.w	r2, r2, #8
 8013786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	699a      	ldr	r2, [r3, #24]
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	f022 0204 	bic.w	r2, r2, #4
 8013796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	6999      	ldr	r1, [r3, #24]
 801379e:	68bb      	ldr	r3, [r7, #8]
 80137a0:	691a      	ldr	r2, [r3, #16]
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	430a      	orrs	r2, r1
 80137a8:	619a      	str	r2, [r3, #24]
      break;
 80137aa:	e0a5      	b.n	80138f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	68b9      	ldr	r1, [r7, #8]
 80137b2:	4618      	mov	r0, r3
 80137b4:	f000 faec 	bl	8013d90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	699a      	ldr	r2, [r3, #24]
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80137c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	699a      	ldr	r2, [r3, #24]
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80137d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	6999      	ldr	r1, [r3, #24]
 80137de:	68bb      	ldr	r3, [r7, #8]
 80137e0:	691b      	ldr	r3, [r3, #16]
 80137e2:	021a      	lsls	r2, r3, #8
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	430a      	orrs	r2, r1
 80137ea:	619a      	str	r2, [r3, #24]
      break;
 80137ec:	e084      	b.n	80138f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	68b9      	ldr	r1, [r7, #8]
 80137f4:	4618      	mov	r0, r3
 80137f6:	f000 fb55 	bl	8013ea4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	69da      	ldr	r2, [r3, #28]
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	f042 0208 	orr.w	r2, r2, #8
 8013808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	69da      	ldr	r2, [r3, #28]
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	f022 0204 	bic.w	r2, r2, #4
 8013818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	69d9      	ldr	r1, [r3, #28]
 8013820:	68bb      	ldr	r3, [r7, #8]
 8013822:	691a      	ldr	r2, [r3, #16]
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	430a      	orrs	r2, r1
 801382a:	61da      	str	r2, [r3, #28]
      break;
 801382c:	e064      	b.n	80138f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	68b9      	ldr	r1, [r7, #8]
 8013834:	4618      	mov	r0, r3
 8013836:	f000 fbbd 	bl	8013fb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	69da      	ldr	r2, [r3, #28]
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8013848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	69da      	ldr	r2, [r3, #28]
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8013858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	69d9      	ldr	r1, [r3, #28]
 8013860:	68bb      	ldr	r3, [r7, #8]
 8013862:	691b      	ldr	r3, [r3, #16]
 8013864:	021a      	lsls	r2, r3, #8
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	430a      	orrs	r2, r1
 801386c:	61da      	str	r2, [r3, #28]
      break;
 801386e:	e043      	b.n	80138f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	68b9      	ldr	r1, [r7, #8]
 8013876:	4618      	mov	r0, r3
 8013878:	f000 fc06 	bl	8014088 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	f042 0208 	orr.w	r2, r2, #8
 801388a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	f022 0204 	bic.w	r2, r2, #4
 801389a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80138a2:	68bb      	ldr	r3, [r7, #8]
 80138a4:	691a      	ldr	r2, [r3, #16]
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	430a      	orrs	r2, r1
 80138ac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80138ae:	e023      	b.n	80138f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	68b9      	ldr	r1, [r7, #8]
 80138b6:	4618      	mov	r0, r3
 80138b8:	f000 fc4a 	bl	8014150 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80138ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80138da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80138e2:	68bb      	ldr	r3, [r7, #8]
 80138e4:	691b      	ldr	r3, [r3, #16]
 80138e6:	021a      	lsls	r2, r3, #8
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	430a      	orrs	r2, r1
 80138ee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80138f0:	e002      	b.n	80138f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80138f2:	2301      	movs	r3, #1
 80138f4:	75fb      	strb	r3, [r7, #23]
      break;
 80138f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	2200      	movs	r2, #0
 80138fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8013900:	7dfb      	ldrb	r3, [r7, #23]
}
 8013902:	4618      	mov	r0, r3
 8013904:	3718      	adds	r7, #24
 8013906:	46bd      	mov	sp, r7
 8013908:	bd80      	pop	{r7, pc}
 801390a:	bf00      	nop

0801390c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801390c:	b580      	push	{r7, lr}
 801390e:	b084      	sub	sp, #16
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
 8013914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013916:	2300      	movs	r3, #0
 8013918:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013920:	2b01      	cmp	r3, #1
 8013922:	d101      	bne.n	8013928 <HAL_TIM_ConfigClockSource+0x1c>
 8013924:	2302      	movs	r3, #2
 8013926:	e0b6      	b.n	8013a96 <HAL_TIM_ConfigClockSource+0x18a>
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	2201      	movs	r2, #1
 801392c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	2202      	movs	r2, #2
 8013934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	689b      	ldr	r3, [r3, #8]
 801393e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8013940:	68bb      	ldr	r3, [r7, #8]
 8013942:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013946:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 801394a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801394c:	68bb      	ldr	r3, [r7, #8]
 801394e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013952:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	68ba      	ldr	r2, [r7, #8]
 801395a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801395c:	683b      	ldr	r3, [r7, #0]
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013964:	d03e      	beq.n	80139e4 <HAL_TIM_ConfigClockSource+0xd8>
 8013966:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801396a:	f200 8087 	bhi.w	8013a7c <HAL_TIM_ConfigClockSource+0x170>
 801396e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013972:	f000 8086 	beq.w	8013a82 <HAL_TIM_ConfigClockSource+0x176>
 8013976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801397a:	d87f      	bhi.n	8013a7c <HAL_TIM_ConfigClockSource+0x170>
 801397c:	2b70      	cmp	r3, #112	@ 0x70
 801397e:	d01a      	beq.n	80139b6 <HAL_TIM_ConfigClockSource+0xaa>
 8013980:	2b70      	cmp	r3, #112	@ 0x70
 8013982:	d87b      	bhi.n	8013a7c <HAL_TIM_ConfigClockSource+0x170>
 8013984:	2b60      	cmp	r3, #96	@ 0x60
 8013986:	d050      	beq.n	8013a2a <HAL_TIM_ConfigClockSource+0x11e>
 8013988:	2b60      	cmp	r3, #96	@ 0x60
 801398a:	d877      	bhi.n	8013a7c <HAL_TIM_ConfigClockSource+0x170>
 801398c:	2b50      	cmp	r3, #80	@ 0x50
 801398e:	d03c      	beq.n	8013a0a <HAL_TIM_ConfigClockSource+0xfe>
 8013990:	2b50      	cmp	r3, #80	@ 0x50
 8013992:	d873      	bhi.n	8013a7c <HAL_TIM_ConfigClockSource+0x170>
 8013994:	2b40      	cmp	r3, #64	@ 0x40
 8013996:	d058      	beq.n	8013a4a <HAL_TIM_ConfigClockSource+0x13e>
 8013998:	2b40      	cmp	r3, #64	@ 0x40
 801399a:	d86f      	bhi.n	8013a7c <HAL_TIM_ConfigClockSource+0x170>
 801399c:	2b30      	cmp	r3, #48	@ 0x30
 801399e:	d064      	beq.n	8013a6a <HAL_TIM_ConfigClockSource+0x15e>
 80139a0:	2b30      	cmp	r3, #48	@ 0x30
 80139a2:	d86b      	bhi.n	8013a7c <HAL_TIM_ConfigClockSource+0x170>
 80139a4:	2b20      	cmp	r3, #32
 80139a6:	d060      	beq.n	8013a6a <HAL_TIM_ConfigClockSource+0x15e>
 80139a8:	2b20      	cmp	r3, #32
 80139aa:	d867      	bhi.n	8013a7c <HAL_TIM_ConfigClockSource+0x170>
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d05c      	beq.n	8013a6a <HAL_TIM_ConfigClockSource+0x15e>
 80139b0:	2b10      	cmp	r3, #16
 80139b2:	d05a      	beq.n	8013a6a <HAL_TIM_ConfigClockSource+0x15e>
 80139b4:	e062      	b.n	8013a7c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80139ba:	683b      	ldr	r3, [r7, #0]
 80139bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80139be:	683b      	ldr	r3, [r7, #0]
 80139c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80139c2:	683b      	ldr	r3, [r7, #0]
 80139c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80139c6:	f000 fe5b 	bl	8014680 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	689b      	ldr	r3, [r3, #8]
 80139d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80139d2:	68bb      	ldr	r3, [r7, #8]
 80139d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80139d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	68ba      	ldr	r2, [r7, #8]
 80139e0:	609a      	str	r2, [r3, #8]
      break;
 80139e2:	e04f      	b.n	8013a84 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80139e8:	683b      	ldr	r3, [r7, #0]
 80139ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80139ec:	683b      	ldr	r3, [r7, #0]
 80139ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80139f0:	683b      	ldr	r3, [r7, #0]
 80139f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80139f4:	f000 fe44 	bl	8014680 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	689a      	ldr	r2, [r3, #8]
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8013a06:	609a      	str	r2, [r3, #8]
      break;
 8013a08:	e03c      	b.n	8013a84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013a0e:	683b      	ldr	r3, [r7, #0]
 8013a10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013a12:	683b      	ldr	r3, [r7, #0]
 8013a14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013a16:	461a      	mov	r2, r3
 8013a18:	f000 fd02 	bl	8014420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	2150      	movs	r1, #80	@ 0x50
 8013a22:	4618      	mov	r0, r3
 8013a24:	f000 fe11 	bl	801464a <TIM_ITRx_SetConfig>
      break;
 8013a28:	e02c      	b.n	8013a84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013a2e:	683b      	ldr	r3, [r7, #0]
 8013a30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013a32:	683b      	ldr	r3, [r7, #0]
 8013a34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013a36:	461a      	mov	r2, r3
 8013a38:	f000 fd5e 	bl	80144f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	2160      	movs	r1, #96	@ 0x60
 8013a42:	4618      	mov	r0, r3
 8013a44:	f000 fe01 	bl	801464a <TIM_ITRx_SetConfig>
      break;
 8013a48:	e01c      	b.n	8013a84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013a4e:	683b      	ldr	r3, [r7, #0]
 8013a50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013a52:	683b      	ldr	r3, [r7, #0]
 8013a54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013a56:	461a      	mov	r2, r3
 8013a58:	f000 fce2 	bl	8014420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	2140      	movs	r1, #64	@ 0x40
 8013a62:	4618      	mov	r0, r3
 8013a64:	f000 fdf1 	bl	801464a <TIM_ITRx_SetConfig>
      break;
 8013a68:	e00c      	b.n	8013a84 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	681a      	ldr	r2, [r3, #0]
 8013a6e:	683b      	ldr	r3, [r7, #0]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	4619      	mov	r1, r3
 8013a74:	4610      	mov	r0, r2
 8013a76:	f000 fde8 	bl	801464a <TIM_ITRx_SetConfig>
      break;
 8013a7a:	e003      	b.n	8013a84 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8013a7c:	2301      	movs	r3, #1
 8013a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8013a80:	e000      	b.n	8013a84 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8013a82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	2201      	movs	r2, #1
 8013a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	2200      	movs	r2, #0
 8013a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8013a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a96:	4618      	mov	r0, r3
 8013a98:	3710      	adds	r7, #16
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bd80      	pop	{r7, pc}

08013a9e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8013a9e:	b580      	push	{r7, lr}
 8013aa0:	b082      	sub	sp, #8
 8013aa2:	af00      	add	r7, sp, #0
 8013aa4:	6078      	str	r0, [r7, #4]
 8013aa6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013aae:	2b01      	cmp	r3, #1
 8013ab0:	d101      	bne.n	8013ab6 <HAL_TIM_SlaveConfigSynchro+0x18>
 8013ab2:	2302      	movs	r3, #2
 8013ab4:	e031      	b.n	8013b1a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	2201      	movs	r2, #1
 8013aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	2202      	movs	r2, #2
 8013ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8013ac6:	6839      	ldr	r1, [r7, #0]
 8013ac8:	6878      	ldr	r0, [r7, #4]
 8013aca:	f000 fba7 	bl	801421c <TIM_SlaveTimer_SetConfig>
 8013ace:	4603      	mov	r3, r0
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d009      	beq.n	8013ae8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	2201      	movs	r2, #1
 8013ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	2200      	movs	r2, #0
 8013ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8013ae4:	2301      	movs	r3, #1
 8013ae6:	e018      	b.n	8013b1a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	68da      	ldr	r2, [r3, #12]
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8013af6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	68da      	ldr	r2, [r3, #12]
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8013b06:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	2201      	movs	r2, #1
 8013b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	2200      	movs	r2, #0
 8013b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8013b18:	2300      	movs	r3, #0
}
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	3708      	adds	r7, #8
 8013b1e:	46bd      	mov	sp, r7
 8013b20:	bd80      	pop	{r7, pc}
	...

08013b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013b24:	b480      	push	{r7}
 8013b26:	b085      	sub	sp, #20
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
 8013b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	4a46      	ldr	r2, [pc, #280]	@ (8013c50 <TIM_Base_SetConfig+0x12c>)
 8013b38:	4293      	cmp	r3, r2
 8013b3a:	d013      	beq.n	8013b64 <TIM_Base_SetConfig+0x40>
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013b42:	d00f      	beq.n	8013b64 <TIM_Base_SetConfig+0x40>
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	4a43      	ldr	r2, [pc, #268]	@ (8013c54 <TIM_Base_SetConfig+0x130>)
 8013b48:	4293      	cmp	r3, r2
 8013b4a:	d00b      	beq.n	8013b64 <TIM_Base_SetConfig+0x40>
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	4a42      	ldr	r2, [pc, #264]	@ (8013c58 <TIM_Base_SetConfig+0x134>)
 8013b50:	4293      	cmp	r3, r2
 8013b52:	d007      	beq.n	8013b64 <TIM_Base_SetConfig+0x40>
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	4a41      	ldr	r2, [pc, #260]	@ (8013c5c <TIM_Base_SetConfig+0x138>)
 8013b58:	4293      	cmp	r3, r2
 8013b5a:	d003      	beq.n	8013b64 <TIM_Base_SetConfig+0x40>
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	4a40      	ldr	r2, [pc, #256]	@ (8013c60 <TIM_Base_SetConfig+0x13c>)
 8013b60:	4293      	cmp	r3, r2
 8013b62:	d108      	bne.n	8013b76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013b6c:	683b      	ldr	r3, [r7, #0]
 8013b6e:	685b      	ldr	r3, [r3, #4]
 8013b70:	68fa      	ldr	r2, [r7, #12]
 8013b72:	4313      	orrs	r3, r2
 8013b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	4a35      	ldr	r2, [pc, #212]	@ (8013c50 <TIM_Base_SetConfig+0x12c>)
 8013b7a:	4293      	cmp	r3, r2
 8013b7c:	d01f      	beq.n	8013bbe <TIM_Base_SetConfig+0x9a>
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013b84:	d01b      	beq.n	8013bbe <TIM_Base_SetConfig+0x9a>
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	4a32      	ldr	r2, [pc, #200]	@ (8013c54 <TIM_Base_SetConfig+0x130>)
 8013b8a:	4293      	cmp	r3, r2
 8013b8c:	d017      	beq.n	8013bbe <TIM_Base_SetConfig+0x9a>
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	4a31      	ldr	r2, [pc, #196]	@ (8013c58 <TIM_Base_SetConfig+0x134>)
 8013b92:	4293      	cmp	r3, r2
 8013b94:	d013      	beq.n	8013bbe <TIM_Base_SetConfig+0x9a>
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	4a30      	ldr	r2, [pc, #192]	@ (8013c5c <TIM_Base_SetConfig+0x138>)
 8013b9a:	4293      	cmp	r3, r2
 8013b9c:	d00f      	beq.n	8013bbe <TIM_Base_SetConfig+0x9a>
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	4a2f      	ldr	r2, [pc, #188]	@ (8013c60 <TIM_Base_SetConfig+0x13c>)
 8013ba2:	4293      	cmp	r3, r2
 8013ba4:	d00b      	beq.n	8013bbe <TIM_Base_SetConfig+0x9a>
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	4a2e      	ldr	r2, [pc, #184]	@ (8013c64 <TIM_Base_SetConfig+0x140>)
 8013baa:	4293      	cmp	r3, r2
 8013bac:	d007      	beq.n	8013bbe <TIM_Base_SetConfig+0x9a>
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	4a2d      	ldr	r2, [pc, #180]	@ (8013c68 <TIM_Base_SetConfig+0x144>)
 8013bb2:	4293      	cmp	r3, r2
 8013bb4:	d003      	beq.n	8013bbe <TIM_Base_SetConfig+0x9a>
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	4a2c      	ldr	r2, [pc, #176]	@ (8013c6c <TIM_Base_SetConfig+0x148>)
 8013bba:	4293      	cmp	r3, r2
 8013bbc:	d108      	bne.n	8013bd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013bc6:	683b      	ldr	r3, [r7, #0]
 8013bc8:	68db      	ldr	r3, [r3, #12]
 8013bca:	68fa      	ldr	r2, [r7, #12]
 8013bcc:	4313      	orrs	r3, r2
 8013bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8013bd6:	683b      	ldr	r3, [r7, #0]
 8013bd8:	695b      	ldr	r3, [r3, #20]
 8013bda:	4313      	orrs	r3, r2
 8013bdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	68fa      	ldr	r2, [r7, #12]
 8013be2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013be4:	683b      	ldr	r3, [r7, #0]
 8013be6:	689a      	ldr	r2, [r3, #8]
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013bec:	683b      	ldr	r3, [r7, #0]
 8013bee:	681a      	ldr	r2, [r3, #0]
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	4a16      	ldr	r2, [pc, #88]	@ (8013c50 <TIM_Base_SetConfig+0x12c>)
 8013bf8:	4293      	cmp	r3, r2
 8013bfa:	d00f      	beq.n	8013c1c <TIM_Base_SetConfig+0xf8>
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	4a18      	ldr	r2, [pc, #96]	@ (8013c60 <TIM_Base_SetConfig+0x13c>)
 8013c00:	4293      	cmp	r3, r2
 8013c02:	d00b      	beq.n	8013c1c <TIM_Base_SetConfig+0xf8>
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	4a17      	ldr	r2, [pc, #92]	@ (8013c64 <TIM_Base_SetConfig+0x140>)
 8013c08:	4293      	cmp	r3, r2
 8013c0a:	d007      	beq.n	8013c1c <TIM_Base_SetConfig+0xf8>
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	4a16      	ldr	r2, [pc, #88]	@ (8013c68 <TIM_Base_SetConfig+0x144>)
 8013c10:	4293      	cmp	r3, r2
 8013c12:	d003      	beq.n	8013c1c <TIM_Base_SetConfig+0xf8>
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	4a15      	ldr	r2, [pc, #84]	@ (8013c6c <TIM_Base_SetConfig+0x148>)
 8013c18:	4293      	cmp	r3, r2
 8013c1a:	d103      	bne.n	8013c24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013c1c:	683b      	ldr	r3, [r7, #0]
 8013c1e:	691a      	ldr	r2, [r3, #16]
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	2201      	movs	r2, #1
 8013c28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	691b      	ldr	r3, [r3, #16]
 8013c2e:	f003 0301 	and.w	r3, r3, #1
 8013c32:	2b01      	cmp	r3, #1
 8013c34:	d105      	bne.n	8013c42 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	691b      	ldr	r3, [r3, #16]
 8013c3a:	f023 0201 	bic.w	r2, r3, #1
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	611a      	str	r2, [r3, #16]
  }
}
 8013c42:	bf00      	nop
 8013c44:	3714      	adds	r7, #20
 8013c46:	46bd      	mov	sp, r7
 8013c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4c:	4770      	bx	lr
 8013c4e:	bf00      	nop
 8013c50:	40012c00 	.word	0x40012c00
 8013c54:	40000400 	.word	0x40000400
 8013c58:	40000800 	.word	0x40000800
 8013c5c:	40000c00 	.word	0x40000c00
 8013c60:	40013400 	.word	0x40013400
 8013c64:	40014000 	.word	0x40014000
 8013c68:	40014400 	.word	0x40014400
 8013c6c:	40014800 	.word	0x40014800

08013c70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013c70:	b480      	push	{r7}
 8013c72:	b087      	sub	sp, #28
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
 8013c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	6a1b      	ldr	r3, [r3, #32]
 8013c7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	6a1b      	ldr	r3, [r3, #32]
 8013c84:	f023 0201 	bic.w	r2, r3, #1
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	685b      	ldr	r3, [r3, #4]
 8013c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	699b      	ldr	r3, [r3, #24]
 8013c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	f023 0303 	bic.w	r3, r3, #3
 8013caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013cac:	683b      	ldr	r3, [r7, #0]
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	68fa      	ldr	r2, [r7, #12]
 8013cb2:	4313      	orrs	r3, r2
 8013cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013cb6:	697b      	ldr	r3, [r7, #20]
 8013cb8:	f023 0302 	bic.w	r3, r3, #2
 8013cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013cbe:	683b      	ldr	r3, [r7, #0]
 8013cc0:	689b      	ldr	r3, [r3, #8]
 8013cc2:	697a      	ldr	r2, [r7, #20]
 8013cc4:	4313      	orrs	r3, r2
 8013cc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	4a2c      	ldr	r2, [pc, #176]	@ (8013d7c <TIM_OC1_SetConfig+0x10c>)
 8013ccc:	4293      	cmp	r3, r2
 8013cce:	d00f      	beq.n	8013cf0 <TIM_OC1_SetConfig+0x80>
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	4a2b      	ldr	r2, [pc, #172]	@ (8013d80 <TIM_OC1_SetConfig+0x110>)
 8013cd4:	4293      	cmp	r3, r2
 8013cd6:	d00b      	beq.n	8013cf0 <TIM_OC1_SetConfig+0x80>
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	4a2a      	ldr	r2, [pc, #168]	@ (8013d84 <TIM_OC1_SetConfig+0x114>)
 8013cdc:	4293      	cmp	r3, r2
 8013cde:	d007      	beq.n	8013cf0 <TIM_OC1_SetConfig+0x80>
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	4a29      	ldr	r2, [pc, #164]	@ (8013d88 <TIM_OC1_SetConfig+0x118>)
 8013ce4:	4293      	cmp	r3, r2
 8013ce6:	d003      	beq.n	8013cf0 <TIM_OC1_SetConfig+0x80>
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	4a28      	ldr	r2, [pc, #160]	@ (8013d8c <TIM_OC1_SetConfig+0x11c>)
 8013cec:	4293      	cmp	r3, r2
 8013cee:	d10c      	bne.n	8013d0a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013cf0:	697b      	ldr	r3, [r7, #20]
 8013cf2:	f023 0308 	bic.w	r3, r3, #8
 8013cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013cf8:	683b      	ldr	r3, [r7, #0]
 8013cfa:	68db      	ldr	r3, [r3, #12]
 8013cfc:	697a      	ldr	r2, [r7, #20]
 8013cfe:	4313      	orrs	r3, r2
 8013d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013d02:	697b      	ldr	r3, [r7, #20]
 8013d04:	f023 0304 	bic.w	r3, r3, #4
 8013d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	4a1b      	ldr	r2, [pc, #108]	@ (8013d7c <TIM_OC1_SetConfig+0x10c>)
 8013d0e:	4293      	cmp	r3, r2
 8013d10:	d00f      	beq.n	8013d32 <TIM_OC1_SetConfig+0xc2>
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	4a1a      	ldr	r2, [pc, #104]	@ (8013d80 <TIM_OC1_SetConfig+0x110>)
 8013d16:	4293      	cmp	r3, r2
 8013d18:	d00b      	beq.n	8013d32 <TIM_OC1_SetConfig+0xc2>
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	4a19      	ldr	r2, [pc, #100]	@ (8013d84 <TIM_OC1_SetConfig+0x114>)
 8013d1e:	4293      	cmp	r3, r2
 8013d20:	d007      	beq.n	8013d32 <TIM_OC1_SetConfig+0xc2>
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	4a18      	ldr	r2, [pc, #96]	@ (8013d88 <TIM_OC1_SetConfig+0x118>)
 8013d26:	4293      	cmp	r3, r2
 8013d28:	d003      	beq.n	8013d32 <TIM_OC1_SetConfig+0xc2>
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	4a17      	ldr	r2, [pc, #92]	@ (8013d8c <TIM_OC1_SetConfig+0x11c>)
 8013d2e:	4293      	cmp	r3, r2
 8013d30:	d111      	bne.n	8013d56 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013d32:	693b      	ldr	r3, [r7, #16]
 8013d34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013d3a:	693b      	ldr	r3, [r7, #16]
 8013d3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8013d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013d42:	683b      	ldr	r3, [r7, #0]
 8013d44:	695b      	ldr	r3, [r3, #20]
 8013d46:	693a      	ldr	r2, [r7, #16]
 8013d48:	4313      	orrs	r3, r2
 8013d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013d4c:	683b      	ldr	r3, [r7, #0]
 8013d4e:	699b      	ldr	r3, [r3, #24]
 8013d50:	693a      	ldr	r2, [r7, #16]
 8013d52:	4313      	orrs	r3, r2
 8013d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	693a      	ldr	r2, [r7, #16]
 8013d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	68fa      	ldr	r2, [r7, #12]
 8013d60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013d62:	683b      	ldr	r3, [r7, #0]
 8013d64:	685a      	ldr	r2, [r3, #4]
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	697a      	ldr	r2, [r7, #20]
 8013d6e:	621a      	str	r2, [r3, #32]
}
 8013d70:	bf00      	nop
 8013d72:	371c      	adds	r7, #28
 8013d74:	46bd      	mov	sp, r7
 8013d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7a:	4770      	bx	lr
 8013d7c:	40012c00 	.word	0x40012c00
 8013d80:	40013400 	.word	0x40013400
 8013d84:	40014000 	.word	0x40014000
 8013d88:	40014400 	.word	0x40014400
 8013d8c:	40014800 	.word	0x40014800

08013d90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013d90:	b480      	push	{r7}
 8013d92:	b087      	sub	sp, #28
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
 8013d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	6a1b      	ldr	r3, [r3, #32]
 8013d9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	6a1b      	ldr	r3, [r3, #32]
 8013da4:	f023 0210 	bic.w	r2, r3, #16
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	685b      	ldr	r3, [r3, #4]
 8013db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	699b      	ldr	r3, [r3, #24]
 8013db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8013dbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013dcc:	683b      	ldr	r3, [r7, #0]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	021b      	lsls	r3, r3, #8
 8013dd2:	68fa      	ldr	r2, [r7, #12]
 8013dd4:	4313      	orrs	r3, r2
 8013dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013dd8:	697b      	ldr	r3, [r7, #20]
 8013dda:	f023 0320 	bic.w	r3, r3, #32
 8013dde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013de0:	683b      	ldr	r3, [r7, #0]
 8013de2:	689b      	ldr	r3, [r3, #8]
 8013de4:	011b      	lsls	r3, r3, #4
 8013de6:	697a      	ldr	r2, [r7, #20]
 8013de8:	4313      	orrs	r3, r2
 8013dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	4a28      	ldr	r2, [pc, #160]	@ (8013e90 <TIM_OC2_SetConfig+0x100>)
 8013df0:	4293      	cmp	r3, r2
 8013df2:	d003      	beq.n	8013dfc <TIM_OC2_SetConfig+0x6c>
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	4a27      	ldr	r2, [pc, #156]	@ (8013e94 <TIM_OC2_SetConfig+0x104>)
 8013df8:	4293      	cmp	r3, r2
 8013dfa:	d10d      	bne.n	8013e18 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013dfc:	697b      	ldr	r3, [r7, #20]
 8013dfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013e04:	683b      	ldr	r3, [r7, #0]
 8013e06:	68db      	ldr	r3, [r3, #12]
 8013e08:	011b      	lsls	r3, r3, #4
 8013e0a:	697a      	ldr	r2, [r7, #20]
 8013e0c:	4313      	orrs	r3, r2
 8013e0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013e10:	697b      	ldr	r3, [r7, #20]
 8013e12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013e16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	4a1d      	ldr	r2, [pc, #116]	@ (8013e90 <TIM_OC2_SetConfig+0x100>)
 8013e1c:	4293      	cmp	r3, r2
 8013e1e:	d00f      	beq.n	8013e40 <TIM_OC2_SetConfig+0xb0>
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	4a1c      	ldr	r2, [pc, #112]	@ (8013e94 <TIM_OC2_SetConfig+0x104>)
 8013e24:	4293      	cmp	r3, r2
 8013e26:	d00b      	beq.n	8013e40 <TIM_OC2_SetConfig+0xb0>
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8013e98 <TIM_OC2_SetConfig+0x108>)
 8013e2c:	4293      	cmp	r3, r2
 8013e2e:	d007      	beq.n	8013e40 <TIM_OC2_SetConfig+0xb0>
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	4a1a      	ldr	r2, [pc, #104]	@ (8013e9c <TIM_OC2_SetConfig+0x10c>)
 8013e34:	4293      	cmp	r3, r2
 8013e36:	d003      	beq.n	8013e40 <TIM_OC2_SetConfig+0xb0>
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	4a19      	ldr	r2, [pc, #100]	@ (8013ea0 <TIM_OC2_SetConfig+0x110>)
 8013e3c:	4293      	cmp	r3, r2
 8013e3e:	d113      	bne.n	8013e68 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013e40:	693b      	ldr	r3, [r7, #16]
 8013e42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8013e46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013e48:	693b      	ldr	r3, [r7, #16]
 8013e4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013e50:	683b      	ldr	r3, [r7, #0]
 8013e52:	695b      	ldr	r3, [r3, #20]
 8013e54:	009b      	lsls	r3, r3, #2
 8013e56:	693a      	ldr	r2, [r7, #16]
 8013e58:	4313      	orrs	r3, r2
 8013e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013e5c:	683b      	ldr	r3, [r7, #0]
 8013e5e:	699b      	ldr	r3, [r3, #24]
 8013e60:	009b      	lsls	r3, r3, #2
 8013e62:	693a      	ldr	r2, [r7, #16]
 8013e64:	4313      	orrs	r3, r2
 8013e66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	693a      	ldr	r2, [r7, #16]
 8013e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	68fa      	ldr	r2, [r7, #12]
 8013e72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013e74:	683b      	ldr	r3, [r7, #0]
 8013e76:	685a      	ldr	r2, [r3, #4]
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	697a      	ldr	r2, [r7, #20]
 8013e80:	621a      	str	r2, [r3, #32]
}
 8013e82:	bf00      	nop
 8013e84:	371c      	adds	r7, #28
 8013e86:	46bd      	mov	sp, r7
 8013e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e8c:	4770      	bx	lr
 8013e8e:	bf00      	nop
 8013e90:	40012c00 	.word	0x40012c00
 8013e94:	40013400 	.word	0x40013400
 8013e98:	40014000 	.word	0x40014000
 8013e9c:	40014400 	.word	0x40014400
 8013ea0:	40014800 	.word	0x40014800

08013ea4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013ea4:	b480      	push	{r7}
 8013ea6:	b087      	sub	sp, #28
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	6078      	str	r0, [r7, #4]
 8013eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	6a1b      	ldr	r3, [r3, #32]
 8013eb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	6a1b      	ldr	r3, [r3, #32]
 8013eb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	685b      	ldr	r3, [r3, #4]
 8013ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	69db      	ldr	r3, [r3, #28]
 8013eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	f023 0303 	bic.w	r3, r3, #3
 8013ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013ee0:	683b      	ldr	r3, [r7, #0]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	68fa      	ldr	r2, [r7, #12]
 8013ee6:	4313      	orrs	r3, r2
 8013ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013eea:	697b      	ldr	r3, [r7, #20]
 8013eec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8013ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013ef2:	683b      	ldr	r3, [r7, #0]
 8013ef4:	689b      	ldr	r3, [r3, #8]
 8013ef6:	021b      	lsls	r3, r3, #8
 8013ef8:	697a      	ldr	r2, [r7, #20]
 8013efa:	4313      	orrs	r3, r2
 8013efc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	4a27      	ldr	r2, [pc, #156]	@ (8013fa0 <TIM_OC3_SetConfig+0xfc>)
 8013f02:	4293      	cmp	r3, r2
 8013f04:	d003      	beq.n	8013f0e <TIM_OC3_SetConfig+0x6a>
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	4a26      	ldr	r2, [pc, #152]	@ (8013fa4 <TIM_OC3_SetConfig+0x100>)
 8013f0a:	4293      	cmp	r3, r2
 8013f0c:	d10d      	bne.n	8013f2a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013f0e:	697b      	ldr	r3, [r7, #20]
 8013f10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013f14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013f16:	683b      	ldr	r3, [r7, #0]
 8013f18:	68db      	ldr	r3, [r3, #12]
 8013f1a:	021b      	lsls	r3, r3, #8
 8013f1c:	697a      	ldr	r2, [r7, #20]
 8013f1e:	4313      	orrs	r3, r2
 8013f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013f22:	697b      	ldr	r3, [r7, #20]
 8013f24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8013f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	4a1c      	ldr	r2, [pc, #112]	@ (8013fa0 <TIM_OC3_SetConfig+0xfc>)
 8013f2e:	4293      	cmp	r3, r2
 8013f30:	d00f      	beq.n	8013f52 <TIM_OC3_SetConfig+0xae>
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	4a1b      	ldr	r2, [pc, #108]	@ (8013fa4 <TIM_OC3_SetConfig+0x100>)
 8013f36:	4293      	cmp	r3, r2
 8013f38:	d00b      	beq.n	8013f52 <TIM_OC3_SetConfig+0xae>
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	4a1a      	ldr	r2, [pc, #104]	@ (8013fa8 <TIM_OC3_SetConfig+0x104>)
 8013f3e:	4293      	cmp	r3, r2
 8013f40:	d007      	beq.n	8013f52 <TIM_OC3_SetConfig+0xae>
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	4a19      	ldr	r2, [pc, #100]	@ (8013fac <TIM_OC3_SetConfig+0x108>)
 8013f46:	4293      	cmp	r3, r2
 8013f48:	d003      	beq.n	8013f52 <TIM_OC3_SetConfig+0xae>
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	4a18      	ldr	r2, [pc, #96]	@ (8013fb0 <TIM_OC3_SetConfig+0x10c>)
 8013f4e:	4293      	cmp	r3, r2
 8013f50:	d113      	bne.n	8013f7a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013f52:	693b      	ldr	r3, [r7, #16]
 8013f54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013f58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013f5a:	693b      	ldr	r3, [r7, #16]
 8013f5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013f60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013f62:	683b      	ldr	r3, [r7, #0]
 8013f64:	695b      	ldr	r3, [r3, #20]
 8013f66:	011b      	lsls	r3, r3, #4
 8013f68:	693a      	ldr	r2, [r7, #16]
 8013f6a:	4313      	orrs	r3, r2
 8013f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013f6e:	683b      	ldr	r3, [r7, #0]
 8013f70:	699b      	ldr	r3, [r3, #24]
 8013f72:	011b      	lsls	r3, r3, #4
 8013f74:	693a      	ldr	r2, [r7, #16]
 8013f76:	4313      	orrs	r3, r2
 8013f78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	693a      	ldr	r2, [r7, #16]
 8013f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	68fa      	ldr	r2, [r7, #12]
 8013f84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013f86:	683b      	ldr	r3, [r7, #0]
 8013f88:	685a      	ldr	r2, [r3, #4]
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	697a      	ldr	r2, [r7, #20]
 8013f92:	621a      	str	r2, [r3, #32]
}
 8013f94:	bf00      	nop
 8013f96:	371c      	adds	r7, #28
 8013f98:	46bd      	mov	sp, r7
 8013f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f9e:	4770      	bx	lr
 8013fa0:	40012c00 	.word	0x40012c00
 8013fa4:	40013400 	.word	0x40013400
 8013fa8:	40014000 	.word	0x40014000
 8013fac:	40014400 	.word	0x40014400
 8013fb0:	40014800 	.word	0x40014800

08013fb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013fb4:	b480      	push	{r7}
 8013fb6:	b087      	sub	sp, #28
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
 8013fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	6a1b      	ldr	r3, [r3, #32]
 8013fc2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	6a1b      	ldr	r3, [r3, #32]
 8013fc8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	685b      	ldr	r3, [r3, #4]
 8013fd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	69db      	ldr	r3, [r3, #28]
 8013fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8013fe2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013ff0:	683b      	ldr	r3, [r7, #0]
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	021b      	lsls	r3, r3, #8
 8013ff6:	68fa      	ldr	r2, [r7, #12]
 8013ff8:	4313      	orrs	r3, r2
 8013ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013ffc:	693b      	ldr	r3, [r7, #16]
 8013ffe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8014002:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014004:	683b      	ldr	r3, [r7, #0]
 8014006:	689b      	ldr	r3, [r3, #8]
 8014008:	031b      	lsls	r3, r3, #12
 801400a:	693a      	ldr	r2, [r7, #16]
 801400c:	4313      	orrs	r3, r2
 801400e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	4a18      	ldr	r2, [pc, #96]	@ (8014074 <TIM_OC4_SetConfig+0xc0>)
 8014014:	4293      	cmp	r3, r2
 8014016:	d00f      	beq.n	8014038 <TIM_OC4_SetConfig+0x84>
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	4a17      	ldr	r2, [pc, #92]	@ (8014078 <TIM_OC4_SetConfig+0xc4>)
 801401c:	4293      	cmp	r3, r2
 801401e:	d00b      	beq.n	8014038 <TIM_OC4_SetConfig+0x84>
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	4a16      	ldr	r2, [pc, #88]	@ (801407c <TIM_OC4_SetConfig+0xc8>)
 8014024:	4293      	cmp	r3, r2
 8014026:	d007      	beq.n	8014038 <TIM_OC4_SetConfig+0x84>
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	4a15      	ldr	r2, [pc, #84]	@ (8014080 <TIM_OC4_SetConfig+0xcc>)
 801402c:	4293      	cmp	r3, r2
 801402e:	d003      	beq.n	8014038 <TIM_OC4_SetConfig+0x84>
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	4a14      	ldr	r2, [pc, #80]	@ (8014084 <TIM_OC4_SetConfig+0xd0>)
 8014034:	4293      	cmp	r3, r2
 8014036:	d109      	bne.n	801404c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014038:	697b      	ldr	r3, [r7, #20]
 801403a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801403e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014040:	683b      	ldr	r3, [r7, #0]
 8014042:	695b      	ldr	r3, [r3, #20]
 8014044:	019b      	lsls	r3, r3, #6
 8014046:	697a      	ldr	r2, [r7, #20]
 8014048:	4313      	orrs	r3, r2
 801404a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	697a      	ldr	r2, [r7, #20]
 8014050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	68fa      	ldr	r2, [r7, #12]
 8014056:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014058:	683b      	ldr	r3, [r7, #0]
 801405a:	685a      	ldr	r2, [r3, #4]
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	693a      	ldr	r2, [r7, #16]
 8014064:	621a      	str	r2, [r3, #32]
}
 8014066:	bf00      	nop
 8014068:	371c      	adds	r7, #28
 801406a:	46bd      	mov	sp, r7
 801406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014070:	4770      	bx	lr
 8014072:	bf00      	nop
 8014074:	40012c00 	.word	0x40012c00
 8014078:	40013400 	.word	0x40013400
 801407c:	40014000 	.word	0x40014000
 8014080:	40014400 	.word	0x40014400
 8014084:	40014800 	.word	0x40014800

08014088 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8014088:	b480      	push	{r7}
 801408a:	b087      	sub	sp, #28
 801408c:	af00      	add	r7, sp, #0
 801408e:	6078      	str	r0, [r7, #4]
 8014090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	6a1b      	ldr	r3, [r3, #32]
 8014096:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	6a1b      	ldr	r3, [r3, #32]
 801409c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	685b      	ldr	r3, [r3, #4]
 80140a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80140ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80140b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80140ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80140bc:	683b      	ldr	r3, [r7, #0]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	68fa      	ldr	r2, [r7, #12]
 80140c2:	4313      	orrs	r3, r2
 80140c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80140c6:	693b      	ldr	r3, [r7, #16]
 80140c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80140cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80140ce:	683b      	ldr	r3, [r7, #0]
 80140d0:	689b      	ldr	r3, [r3, #8]
 80140d2:	041b      	lsls	r3, r3, #16
 80140d4:	693a      	ldr	r2, [r7, #16]
 80140d6:	4313      	orrs	r3, r2
 80140d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	4a17      	ldr	r2, [pc, #92]	@ (801413c <TIM_OC5_SetConfig+0xb4>)
 80140de:	4293      	cmp	r3, r2
 80140e0:	d00f      	beq.n	8014102 <TIM_OC5_SetConfig+0x7a>
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	4a16      	ldr	r2, [pc, #88]	@ (8014140 <TIM_OC5_SetConfig+0xb8>)
 80140e6:	4293      	cmp	r3, r2
 80140e8:	d00b      	beq.n	8014102 <TIM_OC5_SetConfig+0x7a>
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	4a15      	ldr	r2, [pc, #84]	@ (8014144 <TIM_OC5_SetConfig+0xbc>)
 80140ee:	4293      	cmp	r3, r2
 80140f0:	d007      	beq.n	8014102 <TIM_OC5_SetConfig+0x7a>
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	4a14      	ldr	r2, [pc, #80]	@ (8014148 <TIM_OC5_SetConfig+0xc0>)
 80140f6:	4293      	cmp	r3, r2
 80140f8:	d003      	beq.n	8014102 <TIM_OC5_SetConfig+0x7a>
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	4a13      	ldr	r2, [pc, #76]	@ (801414c <TIM_OC5_SetConfig+0xc4>)
 80140fe:	4293      	cmp	r3, r2
 8014100:	d109      	bne.n	8014116 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8014102:	697b      	ldr	r3, [r7, #20]
 8014104:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8014108:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801410a:	683b      	ldr	r3, [r7, #0]
 801410c:	695b      	ldr	r3, [r3, #20]
 801410e:	021b      	lsls	r3, r3, #8
 8014110:	697a      	ldr	r2, [r7, #20]
 8014112:	4313      	orrs	r3, r2
 8014114:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	697a      	ldr	r2, [r7, #20]
 801411a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	68fa      	ldr	r2, [r7, #12]
 8014120:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8014122:	683b      	ldr	r3, [r7, #0]
 8014124:	685a      	ldr	r2, [r3, #4]
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	693a      	ldr	r2, [r7, #16]
 801412e:	621a      	str	r2, [r3, #32]
}
 8014130:	bf00      	nop
 8014132:	371c      	adds	r7, #28
 8014134:	46bd      	mov	sp, r7
 8014136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413a:	4770      	bx	lr
 801413c:	40012c00 	.word	0x40012c00
 8014140:	40013400 	.word	0x40013400
 8014144:	40014000 	.word	0x40014000
 8014148:	40014400 	.word	0x40014400
 801414c:	40014800 	.word	0x40014800

08014150 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8014150:	b480      	push	{r7}
 8014152:	b087      	sub	sp, #28
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
 8014158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	6a1b      	ldr	r3, [r3, #32]
 801415e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	6a1b      	ldr	r3, [r3, #32]
 8014164:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	685b      	ldr	r3, [r3, #4]
 8014170:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801417e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8014182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014184:	683b      	ldr	r3, [r7, #0]
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	021b      	lsls	r3, r3, #8
 801418a:	68fa      	ldr	r2, [r7, #12]
 801418c:	4313      	orrs	r3, r2
 801418e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8014190:	693b      	ldr	r3, [r7, #16]
 8014192:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8014196:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8014198:	683b      	ldr	r3, [r7, #0]
 801419a:	689b      	ldr	r3, [r3, #8]
 801419c:	051b      	lsls	r3, r3, #20
 801419e:	693a      	ldr	r2, [r7, #16]
 80141a0:	4313      	orrs	r3, r2
 80141a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	4a18      	ldr	r2, [pc, #96]	@ (8014208 <TIM_OC6_SetConfig+0xb8>)
 80141a8:	4293      	cmp	r3, r2
 80141aa:	d00f      	beq.n	80141cc <TIM_OC6_SetConfig+0x7c>
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	4a17      	ldr	r2, [pc, #92]	@ (801420c <TIM_OC6_SetConfig+0xbc>)
 80141b0:	4293      	cmp	r3, r2
 80141b2:	d00b      	beq.n	80141cc <TIM_OC6_SetConfig+0x7c>
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	4a16      	ldr	r2, [pc, #88]	@ (8014210 <TIM_OC6_SetConfig+0xc0>)
 80141b8:	4293      	cmp	r3, r2
 80141ba:	d007      	beq.n	80141cc <TIM_OC6_SetConfig+0x7c>
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	4a15      	ldr	r2, [pc, #84]	@ (8014214 <TIM_OC6_SetConfig+0xc4>)
 80141c0:	4293      	cmp	r3, r2
 80141c2:	d003      	beq.n	80141cc <TIM_OC6_SetConfig+0x7c>
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	4a14      	ldr	r2, [pc, #80]	@ (8014218 <TIM_OC6_SetConfig+0xc8>)
 80141c8:	4293      	cmp	r3, r2
 80141ca:	d109      	bne.n	80141e0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80141cc:	697b      	ldr	r3, [r7, #20]
 80141ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80141d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80141d4:	683b      	ldr	r3, [r7, #0]
 80141d6:	695b      	ldr	r3, [r3, #20]
 80141d8:	029b      	lsls	r3, r3, #10
 80141da:	697a      	ldr	r2, [r7, #20]
 80141dc:	4313      	orrs	r3, r2
 80141de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	697a      	ldr	r2, [r7, #20]
 80141e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	68fa      	ldr	r2, [r7, #12]
 80141ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80141ec:	683b      	ldr	r3, [r7, #0]
 80141ee:	685a      	ldr	r2, [r3, #4]
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	693a      	ldr	r2, [r7, #16]
 80141f8:	621a      	str	r2, [r3, #32]
}
 80141fa:	bf00      	nop
 80141fc:	371c      	adds	r7, #28
 80141fe:	46bd      	mov	sp, r7
 8014200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014204:	4770      	bx	lr
 8014206:	bf00      	nop
 8014208:	40012c00 	.word	0x40012c00
 801420c:	40013400 	.word	0x40013400
 8014210:	40014000 	.word	0x40014000
 8014214:	40014400 	.word	0x40014400
 8014218:	40014800 	.word	0x40014800

0801421c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 801421c:	b580      	push	{r7, lr}
 801421e:	b086      	sub	sp, #24
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]
 8014224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014226:	2300      	movs	r3, #0
 8014228:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	689b      	ldr	r3, [r3, #8]
 8014230:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014232:	693b      	ldr	r3, [r7, #16]
 8014234:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014238:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 801423a:	683b      	ldr	r3, [r7, #0]
 801423c:	685b      	ldr	r3, [r3, #4]
 801423e:	693a      	ldr	r2, [r7, #16]
 8014240:	4313      	orrs	r3, r2
 8014242:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8014244:	693b      	ldr	r3, [r7, #16]
 8014246:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801424a:	f023 0307 	bic.w	r3, r3, #7
 801424e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8014250:	683b      	ldr	r3, [r7, #0]
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	693a      	ldr	r2, [r7, #16]
 8014256:	4313      	orrs	r3, r2
 8014258:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	693a      	ldr	r2, [r7, #16]
 8014260:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8014262:	683b      	ldr	r3, [r7, #0]
 8014264:	685b      	ldr	r3, [r3, #4]
 8014266:	2b70      	cmp	r3, #112	@ 0x70
 8014268:	d01a      	beq.n	80142a0 <TIM_SlaveTimer_SetConfig+0x84>
 801426a:	2b70      	cmp	r3, #112	@ 0x70
 801426c:	d860      	bhi.n	8014330 <TIM_SlaveTimer_SetConfig+0x114>
 801426e:	2b60      	cmp	r3, #96	@ 0x60
 8014270:	d054      	beq.n	801431c <TIM_SlaveTimer_SetConfig+0x100>
 8014272:	2b60      	cmp	r3, #96	@ 0x60
 8014274:	d85c      	bhi.n	8014330 <TIM_SlaveTimer_SetConfig+0x114>
 8014276:	2b50      	cmp	r3, #80	@ 0x50
 8014278:	d046      	beq.n	8014308 <TIM_SlaveTimer_SetConfig+0xec>
 801427a:	2b50      	cmp	r3, #80	@ 0x50
 801427c:	d858      	bhi.n	8014330 <TIM_SlaveTimer_SetConfig+0x114>
 801427e:	2b40      	cmp	r3, #64	@ 0x40
 8014280:	d019      	beq.n	80142b6 <TIM_SlaveTimer_SetConfig+0x9a>
 8014282:	2b40      	cmp	r3, #64	@ 0x40
 8014284:	d854      	bhi.n	8014330 <TIM_SlaveTimer_SetConfig+0x114>
 8014286:	2b30      	cmp	r3, #48	@ 0x30
 8014288:	d055      	beq.n	8014336 <TIM_SlaveTimer_SetConfig+0x11a>
 801428a:	2b30      	cmp	r3, #48	@ 0x30
 801428c:	d850      	bhi.n	8014330 <TIM_SlaveTimer_SetConfig+0x114>
 801428e:	2b20      	cmp	r3, #32
 8014290:	d051      	beq.n	8014336 <TIM_SlaveTimer_SetConfig+0x11a>
 8014292:	2b20      	cmp	r3, #32
 8014294:	d84c      	bhi.n	8014330 <TIM_SlaveTimer_SetConfig+0x114>
 8014296:	2b00      	cmp	r3, #0
 8014298:	d04d      	beq.n	8014336 <TIM_SlaveTimer_SetConfig+0x11a>
 801429a:	2b10      	cmp	r3, #16
 801429c:	d04b      	beq.n	8014336 <TIM_SlaveTimer_SetConfig+0x11a>
 801429e:	e047      	b.n	8014330 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80142a4:	683b      	ldr	r3, [r7, #0]
 80142a6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80142a8:	683b      	ldr	r3, [r7, #0]
 80142aa:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80142ac:	683b      	ldr	r3, [r7, #0]
 80142ae:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80142b0:	f000 f9e6 	bl	8014680 <TIM_ETR_SetConfig>
      break;
 80142b4:	e040      	b.n	8014338 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80142b6:	683b      	ldr	r3, [r7, #0]
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	2b05      	cmp	r3, #5
 80142bc:	d101      	bne.n	80142c2 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80142be:	2301      	movs	r3, #1
 80142c0:	e03b      	b.n	801433a <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	6a1b      	ldr	r3, [r3, #32]
 80142c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	6a1a      	ldr	r2, [r3, #32]
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	f022 0201 	bic.w	r2, r2, #1
 80142d8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	699b      	ldr	r3, [r3, #24]
 80142e0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80142e2:	68bb      	ldr	r3, [r7, #8]
 80142e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80142e8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80142ea:	683b      	ldr	r3, [r7, #0]
 80142ec:	691b      	ldr	r3, [r3, #16]
 80142ee:	011b      	lsls	r3, r3, #4
 80142f0:	68ba      	ldr	r2, [r7, #8]
 80142f2:	4313      	orrs	r3, r2
 80142f4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	68ba      	ldr	r2, [r7, #8]
 80142fc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	68fa      	ldr	r2, [r7, #12]
 8014304:	621a      	str	r2, [r3, #32]
      break;
 8014306:	e017      	b.n	8014338 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 801430c:	683b      	ldr	r3, [r7, #0]
 801430e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8014310:	683b      	ldr	r3, [r7, #0]
 8014312:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014314:	461a      	mov	r2, r3
 8014316:	f000 f883 	bl	8014420 <TIM_TI1_ConfigInputStage>
      break;
 801431a:	e00d      	b.n	8014338 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8014320:	683b      	ldr	r3, [r7, #0]
 8014322:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8014324:	683b      	ldr	r3, [r7, #0]
 8014326:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8014328:	461a      	mov	r2, r3
 801432a:	f000 f8e5 	bl	80144f8 <TIM_TI2_ConfigInputStage>
      break;
 801432e:	e003      	b.n	8014338 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8014330:	2301      	movs	r3, #1
 8014332:	75fb      	strb	r3, [r7, #23]
      break;
 8014334:	e000      	b.n	8014338 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8014336:	bf00      	nop
  }

  return status;
 8014338:	7dfb      	ldrb	r3, [r7, #23]
}
 801433a:	4618      	mov	r0, r3
 801433c:	3718      	adds	r7, #24
 801433e:	46bd      	mov	sp, r7
 8014340:	bd80      	pop	{r7, pc}
	...

08014344 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8014344:	b480      	push	{r7}
 8014346:	b087      	sub	sp, #28
 8014348:	af00      	add	r7, sp, #0
 801434a:	60f8      	str	r0, [r7, #12]
 801434c:	60b9      	str	r1, [r7, #8]
 801434e:	607a      	str	r2, [r7, #4]
 8014350:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	6a1b      	ldr	r3, [r3, #32]
 8014356:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	6a1b      	ldr	r3, [r3, #32]
 801435c:	f023 0201 	bic.w	r2, r3, #1
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	699b      	ldr	r3, [r3, #24]
 8014368:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	4a26      	ldr	r2, [pc, #152]	@ (8014408 <TIM_TI1_SetConfig+0xc4>)
 801436e:	4293      	cmp	r3, r2
 8014370:	d017      	beq.n	80143a2 <TIM_TI1_SetConfig+0x5e>
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014378:	d013      	beq.n	80143a2 <TIM_TI1_SetConfig+0x5e>
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	4a23      	ldr	r2, [pc, #140]	@ (801440c <TIM_TI1_SetConfig+0xc8>)
 801437e:	4293      	cmp	r3, r2
 8014380:	d00f      	beq.n	80143a2 <TIM_TI1_SetConfig+0x5e>
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	4a22      	ldr	r2, [pc, #136]	@ (8014410 <TIM_TI1_SetConfig+0xcc>)
 8014386:	4293      	cmp	r3, r2
 8014388:	d00b      	beq.n	80143a2 <TIM_TI1_SetConfig+0x5e>
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	4a21      	ldr	r2, [pc, #132]	@ (8014414 <TIM_TI1_SetConfig+0xd0>)
 801438e:	4293      	cmp	r3, r2
 8014390:	d007      	beq.n	80143a2 <TIM_TI1_SetConfig+0x5e>
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	4a20      	ldr	r2, [pc, #128]	@ (8014418 <TIM_TI1_SetConfig+0xd4>)
 8014396:	4293      	cmp	r3, r2
 8014398:	d003      	beq.n	80143a2 <TIM_TI1_SetConfig+0x5e>
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	4a1f      	ldr	r2, [pc, #124]	@ (801441c <TIM_TI1_SetConfig+0xd8>)
 801439e:	4293      	cmp	r3, r2
 80143a0:	d101      	bne.n	80143a6 <TIM_TI1_SetConfig+0x62>
 80143a2:	2301      	movs	r3, #1
 80143a4:	e000      	b.n	80143a8 <TIM_TI1_SetConfig+0x64>
 80143a6:	2300      	movs	r3, #0
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d008      	beq.n	80143be <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80143ac:	697b      	ldr	r3, [r7, #20]
 80143ae:	f023 0303 	bic.w	r3, r3, #3
 80143b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80143b4:	697a      	ldr	r2, [r7, #20]
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	4313      	orrs	r3, r2
 80143ba:	617b      	str	r3, [r7, #20]
 80143bc:	e003      	b.n	80143c6 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80143be:	697b      	ldr	r3, [r7, #20]
 80143c0:	f043 0301 	orr.w	r3, r3, #1
 80143c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80143c6:	697b      	ldr	r3, [r7, #20]
 80143c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80143cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80143ce:	683b      	ldr	r3, [r7, #0]
 80143d0:	011b      	lsls	r3, r3, #4
 80143d2:	b2db      	uxtb	r3, r3
 80143d4:	697a      	ldr	r2, [r7, #20]
 80143d6:	4313      	orrs	r3, r2
 80143d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80143da:	693b      	ldr	r3, [r7, #16]
 80143dc:	f023 030a 	bic.w	r3, r3, #10
 80143e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80143e2:	68bb      	ldr	r3, [r7, #8]
 80143e4:	f003 030a 	and.w	r3, r3, #10
 80143e8:	693a      	ldr	r2, [r7, #16]
 80143ea:	4313      	orrs	r3, r2
 80143ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	697a      	ldr	r2, [r7, #20]
 80143f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	693a      	ldr	r2, [r7, #16]
 80143f8:	621a      	str	r2, [r3, #32]
}
 80143fa:	bf00      	nop
 80143fc:	371c      	adds	r7, #28
 80143fe:	46bd      	mov	sp, r7
 8014400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014404:	4770      	bx	lr
 8014406:	bf00      	nop
 8014408:	40012c00 	.word	0x40012c00
 801440c:	40000400 	.word	0x40000400
 8014410:	40000800 	.word	0x40000800
 8014414:	40000c00 	.word	0x40000c00
 8014418:	40013400 	.word	0x40013400
 801441c:	40014000 	.word	0x40014000

08014420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014420:	b480      	push	{r7}
 8014422:	b087      	sub	sp, #28
 8014424:	af00      	add	r7, sp, #0
 8014426:	60f8      	str	r0, [r7, #12]
 8014428:	60b9      	str	r1, [r7, #8]
 801442a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	6a1b      	ldr	r3, [r3, #32]
 8014430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	6a1b      	ldr	r3, [r3, #32]
 8014436:	f023 0201 	bic.w	r2, r3, #1
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	699b      	ldr	r3, [r3, #24]
 8014442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014444:	693b      	ldr	r3, [r7, #16]
 8014446:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801444a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	011b      	lsls	r3, r3, #4
 8014450:	693a      	ldr	r2, [r7, #16]
 8014452:	4313      	orrs	r3, r2
 8014454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014456:	697b      	ldr	r3, [r7, #20]
 8014458:	f023 030a 	bic.w	r3, r3, #10
 801445c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801445e:	697a      	ldr	r2, [r7, #20]
 8014460:	68bb      	ldr	r3, [r7, #8]
 8014462:	4313      	orrs	r3, r2
 8014464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	693a      	ldr	r2, [r7, #16]
 801446a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	697a      	ldr	r2, [r7, #20]
 8014470:	621a      	str	r2, [r3, #32]
}
 8014472:	bf00      	nop
 8014474:	371c      	adds	r7, #28
 8014476:	46bd      	mov	sp, r7
 8014478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447c:	4770      	bx	lr

0801447e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801447e:	b480      	push	{r7}
 8014480:	b087      	sub	sp, #28
 8014482:	af00      	add	r7, sp, #0
 8014484:	60f8      	str	r0, [r7, #12]
 8014486:	60b9      	str	r1, [r7, #8]
 8014488:	607a      	str	r2, [r7, #4]
 801448a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	6a1b      	ldr	r3, [r3, #32]
 8014490:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	6a1b      	ldr	r3, [r3, #32]
 8014496:	f023 0210 	bic.w	r2, r3, #16
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	699b      	ldr	r3, [r3, #24]
 80144a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80144a4:	693b      	ldr	r3, [r7, #16]
 80144a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80144aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	021b      	lsls	r3, r3, #8
 80144b0:	693a      	ldr	r2, [r7, #16]
 80144b2:	4313      	orrs	r3, r2
 80144b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80144b6:	693b      	ldr	r3, [r7, #16]
 80144b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80144bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80144be:	683b      	ldr	r3, [r7, #0]
 80144c0:	031b      	lsls	r3, r3, #12
 80144c2:	b29b      	uxth	r3, r3
 80144c4:	693a      	ldr	r2, [r7, #16]
 80144c6:	4313      	orrs	r3, r2
 80144c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80144ca:	697b      	ldr	r3, [r7, #20]
 80144cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80144d0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80144d2:	68bb      	ldr	r3, [r7, #8]
 80144d4:	011b      	lsls	r3, r3, #4
 80144d6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80144da:	697a      	ldr	r2, [r7, #20]
 80144dc:	4313      	orrs	r3, r2
 80144de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	693a      	ldr	r2, [r7, #16]
 80144e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	697a      	ldr	r2, [r7, #20]
 80144ea:	621a      	str	r2, [r3, #32]
}
 80144ec:	bf00      	nop
 80144ee:	371c      	adds	r7, #28
 80144f0:	46bd      	mov	sp, r7
 80144f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f6:	4770      	bx	lr

080144f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80144f8:	b480      	push	{r7}
 80144fa:	b087      	sub	sp, #28
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	60f8      	str	r0, [r7, #12]
 8014500:	60b9      	str	r1, [r7, #8]
 8014502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	6a1b      	ldr	r3, [r3, #32]
 8014508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	6a1b      	ldr	r3, [r3, #32]
 801450e:	f023 0210 	bic.w	r2, r3, #16
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	699b      	ldr	r3, [r3, #24]
 801451a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801451c:	693b      	ldr	r3, [r7, #16]
 801451e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8014522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	031b      	lsls	r3, r3, #12
 8014528:	693a      	ldr	r2, [r7, #16]
 801452a:	4313      	orrs	r3, r2
 801452c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801452e:	697b      	ldr	r3, [r7, #20]
 8014530:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8014534:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8014536:	68bb      	ldr	r3, [r7, #8]
 8014538:	011b      	lsls	r3, r3, #4
 801453a:	697a      	ldr	r2, [r7, #20]
 801453c:	4313      	orrs	r3, r2
 801453e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	693a      	ldr	r2, [r7, #16]
 8014544:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	697a      	ldr	r2, [r7, #20]
 801454a:	621a      	str	r2, [r3, #32]
}
 801454c:	bf00      	nop
 801454e:	371c      	adds	r7, #28
 8014550:	46bd      	mov	sp, r7
 8014552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014556:	4770      	bx	lr

08014558 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8014558:	b480      	push	{r7}
 801455a:	b087      	sub	sp, #28
 801455c:	af00      	add	r7, sp, #0
 801455e:	60f8      	str	r0, [r7, #12]
 8014560:	60b9      	str	r1, [r7, #8]
 8014562:	607a      	str	r2, [r7, #4]
 8014564:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	6a1b      	ldr	r3, [r3, #32]
 801456a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	6a1b      	ldr	r3, [r3, #32]
 8014570:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	69db      	ldr	r3, [r3, #28]
 801457c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 801457e:	693b      	ldr	r3, [r7, #16]
 8014580:	f023 0303 	bic.w	r3, r3, #3
 8014584:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8014586:	693a      	ldr	r2, [r7, #16]
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	4313      	orrs	r3, r2
 801458c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 801458e:	693b      	ldr	r3, [r7, #16]
 8014590:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8014594:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8014596:	683b      	ldr	r3, [r7, #0]
 8014598:	011b      	lsls	r3, r3, #4
 801459a:	b2db      	uxtb	r3, r3
 801459c:	693a      	ldr	r2, [r7, #16]
 801459e:	4313      	orrs	r3, r2
 80145a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80145a2:	697b      	ldr	r3, [r7, #20]
 80145a4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80145a8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80145aa:	68bb      	ldr	r3, [r7, #8]
 80145ac:	021b      	lsls	r3, r3, #8
 80145ae:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80145b2:	697a      	ldr	r2, [r7, #20]
 80145b4:	4313      	orrs	r3, r2
 80145b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	693a      	ldr	r2, [r7, #16]
 80145bc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	697a      	ldr	r2, [r7, #20]
 80145c2:	621a      	str	r2, [r3, #32]
}
 80145c4:	bf00      	nop
 80145c6:	371c      	adds	r7, #28
 80145c8:	46bd      	mov	sp, r7
 80145ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ce:	4770      	bx	lr

080145d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80145d0:	b480      	push	{r7}
 80145d2:	b087      	sub	sp, #28
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	60f8      	str	r0, [r7, #12]
 80145d8:	60b9      	str	r1, [r7, #8]
 80145da:	607a      	str	r2, [r7, #4]
 80145dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	6a1b      	ldr	r3, [r3, #32]
 80145e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	6a1b      	ldr	r3, [r3, #32]
 80145e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	69db      	ldr	r3, [r3, #28]
 80145f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80145f6:	693b      	ldr	r3, [r7, #16]
 80145f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80145fc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	021b      	lsls	r3, r3, #8
 8014602:	693a      	ldr	r2, [r7, #16]
 8014604:	4313      	orrs	r3, r2
 8014606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8014608:	693b      	ldr	r3, [r7, #16]
 801460a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801460e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8014610:	683b      	ldr	r3, [r7, #0]
 8014612:	031b      	lsls	r3, r3, #12
 8014614:	b29b      	uxth	r3, r3
 8014616:	693a      	ldr	r2, [r7, #16]
 8014618:	4313      	orrs	r3, r2
 801461a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 801461c:	697b      	ldr	r3, [r7, #20]
 801461e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8014622:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8014624:	68bb      	ldr	r3, [r7, #8]
 8014626:	031b      	lsls	r3, r3, #12
 8014628:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 801462c:	697a      	ldr	r2, [r7, #20]
 801462e:	4313      	orrs	r3, r2
 8014630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	693a      	ldr	r2, [r7, #16]
 8014636:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	697a      	ldr	r2, [r7, #20]
 801463c:	621a      	str	r2, [r3, #32]
}
 801463e:	bf00      	nop
 8014640:	371c      	adds	r7, #28
 8014642:	46bd      	mov	sp, r7
 8014644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014648:	4770      	bx	lr

0801464a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801464a:	b480      	push	{r7}
 801464c:	b085      	sub	sp, #20
 801464e:	af00      	add	r7, sp, #0
 8014650:	6078      	str	r0, [r7, #4]
 8014652:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	689b      	ldr	r3, [r3, #8]
 8014658:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014660:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8014662:	683a      	ldr	r2, [r7, #0]
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	4313      	orrs	r3, r2
 8014668:	f043 0307 	orr.w	r3, r3, #7
 801466c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	68fa      	ldr	r2, [r7, #12]
 8014672:	609a      	str	r2, [r3, #8]
}
 8014674:	bf00      	nop
 8014676:	3714      	adds	r7, #20
 8014678:	46bd      	mov	sp, r7
 801467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467e:	4770      	bx	lr

08014680 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8014680:	b480      	push	{r7}
 8014682:	b087      	sub	sp, #28
 8014684:	af00      	add	r7, sp, #0
 8014686:	60f8      	str	r0, [r7, #12]
 8014688:	60b9      	str	r1, [r7, #8]
 801468a:	607a      	str	r2, [r7, #4]
 801468c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	689b      	ldr	r3, [r3, #8]
 8014692:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014694:	697b      	ldr	r3, [r7, #20]
 8014696:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801469a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801469c:	683b      	ldr	r3, [r7, #0]
 801469e:	021a      	lsls	r2, r3, #8
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	431a      	orrs	r2, r3
 80146a4:	68bb      	ldr	r3, [r7, #8]
 80146a6:	4313      	orrs	r3, r2
 80146a8:	697a      	ldr	r2, [r7, #20]
 80146aa:	4313      	orrs	r3, r2
 80146ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	697a      	ldr	r2, [r7, #20]
 80146b2:	609a      	str	r2, [r3, #8]
}
 80146b4:	bf00      	nop
 80146b6:	371c      	adds	r7, #28
 80146b8:	46bd      	mov	sp, r7
 80146ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146be:	4770      	bx	lr

080146c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80146c0:	b480      	push	{r7}
 80146c2:	b087      	sub	sp, #28
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	60f8      	str	r0, [r7, #12]
 80146c8:	60b9      	str	r1, [r7, #8]
 80146ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80146cc:	68bb      	ldr	r3, [r7, #8]
 80146ce:	f003 031f 	and.w	r3, r3, #31
 80146d2:	2201      	movs	r2, #1
 80146d4:	fa02 f303 	lsl.w	r3, r2, r3
 80146d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	6a1a      	ldr	r2, [r3, #32]
 80146de:	697b      	ldr	r3, [r7, #20]
 80146e0:	43db      	mvns	r3, r3
 80146e2:	401a      	ands	r2, r3
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	6a1a      	ldr	r2, [r3, #32]
 80146ec:	68bb      	ldr	r3, [r7, #8]
 80146ee:	f003 031f 	and.w	r3, r3, #31
 80146f2:	6879      	ldr	r1, [r7, #4]
 80146f4:	fa01 f303 	lsl.w	r3, r1, r3
 80146f8:	431a      	orrs	r2, r3
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	621a      	str	r2, [r3, #32]
}
 80146fe:	bf00      	nop
 8014700:	371c      	adds	r7, #28
 8014702:	46bd      	mov	sp, r7
 8014704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014708:	4770      	bx	lr
	...

0801470c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801470c:	b480      	push	{r7}
 801470e:	b085      	sub	sp, #20
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
 8014714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801471c:	2b01      	cmp	r3, #1
 801471e:	d101      	bne.n	8014724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014720:	2302      	movs	r3, #2
 8014722:	e068      	b.n	80147f6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	2201      	movs	r2, #1
 8014728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	2202      	movs	r2, #2
 8014730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	685b      	ldr	r3, [r3, #4]
 801473a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	689b      	ldr	r3, [r3, #8]
 8014742:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	4a2e      	ldr	r2, [pc, #184]	@ (8014804 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801474a:	4293      	cmp	r3, r2
 801474c:	d004      	beq.n	8014758 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	4a2d      	ldr	r2, [pc, #180]	@ (8014808 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8014754:	4293      	cmp	r3, r2
 8014756:	d108      	bne.n	801476a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801475e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8014760:	683b      	ldr	r3, [r7, #0]
 8014762:	685b      	ldr	r3, [r3, #4]
 8014764:	68fa      	ldr	r2, [r7, #12]
 8014766:	4313      	orrs	r3, r2
 8014768:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014770:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014772:	683b      	ldr	r3, [r7, #0]
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	68fa      	ldr	r2, [r7, #12]
 8014778:	4313      	orrs	r3, r2
 801477a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	68fa      	ldr	r2, [r7, #12]
 8014782:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	4a1e      	ldr	r2, [pc, #120]	@ (8014804 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801478a:	4293      	cmp	r3, r2
 801478c:	d01d      	beq.n	80147ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014796:	d018      	beq.n	80147ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	4a1b      	ldr	r2, [pc, #108]	@ (801480c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801479e:	4293      	cmp	r3, r2
 80147a0:	d013      	beq.n	80147ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	4a1a      	ldr	r2, [pc, #104]	@ (8014810 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80147a8:	4293      	cmp	r3, r2
 80147aa:	d00e      	beq.n	80147ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	4a18      	ldr	r2, [pc, #96]	@ (8014814 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80147b2:	4293      	cmp	r3, r2
 80147b4:	d009      	beq.n	80147ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	4a13      	ldr	r2, [pc, #76]	@ (8014808 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80147bc:	4293      	cmp	r3, r2
 80147be:	d004      	beq.n	80147ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	4a14      	ldr	r2, [pc, #80]	@ (8014818 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80147c6:	4293      	cmp	r3, r2
 80147c8:	d10c      	bne.n	80147e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80147ca:	68bb      	ldr	r3, [r7, #8]
 80147cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80147d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80147d2:	683b      	ldr	r3, [r7, #0]
 80147d4:	689b      	ldr	r3, [r3, #8]
 80147d6:	68ba      	ldr	r2, [r7, #8]
 80147d8:	4313      	orrs	r3, r2
 80147da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	68ba      	ldr	r2, [r7, #8]
 80147e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	2201      	movs	r2, #1
 80147e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	2200      	movs	r2, #0
 80147f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80147f4:	2300      	movs	r3, #0
}
 80147f6:	4618      	mov	r0, r3
 80147f8:	3714      	adds	r7, #20
 80147fa:	46bd      	mov	sp, r7
 80147fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014800:	4770      	bx	lr
 8014802:	bf00      	nop
 8014804:	40012c00 	.word	0x40012c00
 8014808:	40013400 	.word	0x40013400
 801480c:	40000400 	.word	0x40000400
 8014810:	40000800 	.word	0x40000800
 8014814:	40000c00 	.word	0x40000c00
 8014818:	40014000 	.word	0x40014000

0801481c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801481c:	b480      	push	{r7}
 801481e:	b085      	sub	sp, #20
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
 8014824:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8014826:	2300      	movs	r3, #0
 8014828:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014830:	2b01      	cmp	r3, #1
 8014832:	d101      	bne.n	8014838 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8014834:	2302      	movs	r3, #2
 8014836:	e065      	b.n	8014904 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	2201      	movs	r2, #1
 801483c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8014846:	683b      	ldr	r3, [r7, #0]
 8014848:	68db      	ldr	r3, [r3, #12]
 801484a:	4313      	orrs	r3, r2
 801484c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8014854:	683b      	ldr	r3, [r7, #0]
 8014856:	689b      	ldr	r3, [r3, #8]
 8014858:	4313      	orrs	r3, r2
 801485a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8014862:	683b      	ldr	r3, [r7, #0]
 8014864:	685b      	ldr	r3, [r3, #4]
 8014866:	4313      	orrs	r3, r2
 8014868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8014870:	683b      	ldr	r3, [r7, #0]
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	4313      	orrs	r3, r2
 8014876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801487e:	683b      	ldr	r3, [r7, #0]
 8014880:	691b      	ldr	r3, [r3, #16]
 8014882:	4313      	orrs	r3, r2
 8014884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801488c:	683b      	ldr	r3, [r7, #0]
 801488e:	695b      	ldr	r3, [r3, #20]
 8014890:	4313      	orrs	r3, r2
 8014892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801489a:	683b      	ldr	r3, [r7, #0]
 801489c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801489e:	4313      	orrs	r3, r2
 80148a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80148a8:	683b      	ldr	r3, [r7, #0]
 80148aa:	699b      	ldr	r3, [r3, #24]
 80148ac:	041b      	lsls	r3, r3, #16
 80148ae:	4313      	orrs	r3, r2
 80148b0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	4a16      	ldr	r2, [pc, #88]	@ (8014910 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80148b8:	4293      	cmp	r3, r2
 80148ba:	d004      	beq.n	80148c6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	4a14      	ldr	r2, [pc, #80]	@ (8014914 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80148c2:	4293      	cmp	r3, r2
 80148c4:	d115      	bne.n	80148f2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80148cc:	683b      	ldr	r3, [r7, #0]
 80148ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148d0:	051b      	lsls	r3, r3, #20
 80148d2:	4313      	orrs	r3, r2
 80148d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80148dc:	683b      	ldr	r3, [r7, #0]
 80148de:	69db      	ldr	r3, [r3, #28]
 80148e0:	4313      	orrs	r3, r2
 80148e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80148ea:	683b      	ldr	r3, [r7, #0]
 80148ec:	6a1b      	ldr	r3, [r3, #32]
 80148ee:	4313      	orrs	r3, r2
 80148f0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	68fa      	ldr	r2, [r7, #12]
 80148f8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	2200      	movs	r2, #0
 80148fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8014902:	2300      	movs	r3, #0
}
 8014904:	4618      	mov	r0, r3
 8014906:	3714      	adds	r7, #20
 8014908:	46bd      	mov	sp, r7
 801490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801490e:	4770      	bx	lr
 8014910:	40012c00 	.word	0x40012c00
 8014914:	40013400 	.word	0x40013400

08014918 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014918:	b580      	push	{r7, lr}
 801491a:	b082      	sub	sp, #8
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d101      	bne.n	801492a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014926:	2301      	movs	r3, #1
 8014928:	e040      	b.n	80149ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801492e:	2b00      	cmp	r3, #0
 8014930:	d106      	bne.n	8014940 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	2200      	movs	r2, #0
 8014936:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801493a:	6878      	ldr	r0, [r7, #4]
 801493c:	f7f3 f8b0 	bl	8007aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	2224      	movs	r2, #36	@ 0x24
 8014944:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	681a      	ldr	r2, [r3, #0]
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	f022 0201 	bic.w	r2, r2, #1
 8014954:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801495a:	2b00      	cmp	r3, #0
 801495c:	d002      	beq.n	8014964 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 801495e:	6878      	ldr	r0, [r7, #4]
 8014960:	f000 fdb4 	bl	80154cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014964:	6878      	ldr	r0, [r7, #4]
 8014966:	f000 faf9 	bl	8014f5c <UART_SetConfig>
 801496a:	4603      	mov	r3, r0
 801496c:	2b01      	cmp	r3, #1
 801496e:	d101      	bne.n	8014974 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8014970:	2301      	movs	r3, #1
 8014972:	e01b      	b.n	80149ac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	685a      	ldr	r2, [r3, #4]
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8014982:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	689a      	ldr	r2, [r3, #8]
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8014992:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	681a      	ldr	r2, [r3, #0]
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	f042 0201 	orr.w	r2, r2, #1
 80149a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80149a4:	6878      	ldr	r0, [r7, #4]
 80149a6:	f000 fe33 	bl	8015610 <UART_CheckIdleState>
 80149aa:	4603      	mov	r3, r0
}
 80149ac:	4618      	mov	r0, r3
 80149ae:	3708      	adds	r7, #8
 80149b0:	46bd      	mov	sp, r7
 80149b2:	bd80      	pop	{r7, pc}

080149b4 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b082      	sub	sp, #8
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d101      	bne.n	80149c6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80149c2:	2301      	movs	r3, #1
 80149c4:	e048      	b.n	8014a58 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d106      	bne.n	80149dc <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	2200      	movs	r2, #0
 80149d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80149d6:	6878      	ldr	r0, [r7, #4]
 80149d8:	f7f3 f862 	bl	8007aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	2224      	movs	r2, #36	@ 0x24
 80149e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	681a      	ldr	r2, [r3, #0]
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	f022 0201 	bic.w	r2, r2, #1
 80149f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d002      	beq.n	8014a00 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80149fa:	6878      	ldr	r0, [r7, #4]
 80149fc:	f000 fd66 	bl	80154cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014a00:	6878      	ldr	r0, [r7, #4]
 8014a02:	f000 faab 	bl	8014f5c <UART_SetConfig>
 8014a06:	4603      	mov	r3, r0
 8014a08:	2b01      	cmp	r3, #1
 8014a0a:	d101      	bne.n	8014a10 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 8014a0c:	2301      	movs	r3, #1
 8014a0e:	e023      	b.n	8014a58 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	685a      	ldr	r2, [r3, #4]
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8014a1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	689a      	ldr	r2, [r3, #8]
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8014a2e:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	689a      	ldr	r2, [r3, #8]
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	f042 0208 	orr.w	r2, r2, #8
 8014a3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	681a      	ldr	r2, [r3, #0]
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	f042 0201 	orr.w	r2, r2, #1
 8014a4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8014a50:	6878      	ldr	r0, [r7, #4]
 8014a52:	f000 fddd 	bl	8015610 <UART_CheckIdleState>
 8014a56:	4603      	mov	r3, r0
}
 8014a58:	4618      	mov	r0, r3
 8014a5a:	3708      	adds	r7, #8
 8014a5c:	46bd      	mov	sp, r7
 8014a5e:	bd80      	pop	{r7, pc}

08014a60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014a60:	b580      	push	{r7, lr}
 8014a62:	b08a      	sub	sp, #40	@ 0x28
 8014a64:	af02      	add	r7, sp, #8
 8014a66:	60f8      	str	r0, [r7, #12]
 8014a68:	60b9      	str	r1, [r7, #8]
 8014a6a:	603b      	str	r3, [r7, #0]
 8014a6c:	4613      	mov	r3, r2
 8014a6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014a74:	2b20      	cmp	r3, #32
 8014a76:	d177      	bne.n	8014b68 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8014a78:	68bb      	ldr	r3, [r7, #8]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d002      	beq.n	8014a84 <HAL_UART_Transmit+0x24>
 8014a7e:	88fb      	ldrh	r3, [r7, #6]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d101      	bne.n	8014a88 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8014a84:	2301      	movs	r3, #1
 8014a86:	e070      	b.n	8014b6a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	2221      	movs	r2, #33	@ 0x21
 8014a94:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014a96:	f7f6 fac3 	bl	800b020 <HAL_GetTick>
 8014a9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	88fa      	ldrh	r2, [r7, #6]
 8014aa0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	88fa      	ldrh	r2, [r7, #6]
 8014aa8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	689b      	ldr	r3, [r3, #8]
 8014ab0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014ab4:	d108      	bne.n	8014ac8 <HAL_UART_Transmit+0x68>
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	691b      	ldr	r3, [r3, #16]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d104      	bne.n	8014ac8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8014abe:	2300      	movs	r3, #0
 8014ac0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8014ac2:	68bb      	ldr	r3, [r7, #8]
 8014ac4:	61bb      	str	r3, [r7, #24]
 8014ac6:	e003      	b.n	8014ad0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8014ac8:	68bb      	ldr	r3, [r7, #8]
 8014aca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014acc:	2300      	movs	r3, #0
 8014ace:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8014ad0:	e02f      	b.n	8014b32 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014ad2:	683b      	ldr	r3, [r7, #0]
 8014ad4:	9300      	str	r3, [sp, #0]
 8014ad6:	697b      	ldr	r3, [r7, #20]
 8014ad8:	2200      	movs	r2, #0
 8014ada:	2180      	movs	r1, #128	@ 0x80
 8014adc:	68f8      	ldr	r0, [r7, #12]
 8014ade:	f000 fe3f 	bl	8015760 <UART_WaitOnFlagUntilTimeout>
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d004      	beq.n	8014af2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	2220      	movs	r2, #32
 8014aec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8014aee:	2303      	movs	r3, #3
 8014af0:	e03b      	b.n	8014b6a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8014af2:	69fb      	ldr	r3, [r7, #28]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d10b      	bne.n	8014b10 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8014af8:	69bb      	ldr	r3, [r7, #24]
 8014afa:	881a      	ldrh	r2, [r3, #0]
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014b04:	b292      	uxth	r2, r2
 8014b06:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8014b08:	69bb      	ldr	r3, [r7, #24]
 8014b0a:	3302      	adds	r3, #2
 8014b0c:	61bb      	str	r3, [r7, #24]
 8014b0e:	e007      	b.n	8014b20 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8014b10:	69fb      	ldr	r3, [r7, #28]
 8014b12:	781a      	ldrb	r2, [r3, #0]
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8014b1a:	69fb      	ldr	r3, [r7, #28]
 8014b1c:	3301      	adds	r3, #1
 8014b1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8014b26:	b29b      	uxth	r3, r3
 8014b28:	3b01      	subs	r3, #1
 8014b2a:	b29a      	uxth	r2, r3
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8014b38:	b29b      	uxth	r3, r3
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d1c9      	bne.n	8014ad2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014b3e:	683b      	ldr	r3, [r7, #0]
 8014b40:	9300      	str	r3, [sp, #0]
 8014b42:	697b      	ldr	r3, [r7, #20]
 8014b44:	2200      	movs	r2, #0
 8014b46:	2140      	movs	r1, #64	@ 0x40
 8014b48:	68f8      	ldr	r0, [r7, #12]
 8014b4a:	f000 fe09 	bl	8015760 <UART_WaitOnFlagUntilTimeout>
 8014b4e:	4603      	mov	r3, r0
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d004      	beq.n	8014b5e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	2220      	movs	r2, #32
 8014b58:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8014b5a:	2303      	movs	r3, #3
 8014b5c:	e005      	b.n	8014b6a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	2220      	movs	r2, #32
 8014b62:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8014b64:	2300      	movs	r3, #0
 8014b66:	e000      	b.n	8014b6a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8014b68:	2302      	movs	r3, #2
  }
}
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	3720      	adds	r7, #32
 8014b6e:	46bd      	mov	sp, r7
 8014b70:	bd80      	pop	{r7, pc}

08014b72 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014b72:	b580      	push	{r7, lr}
 8014b74:	b08a      	sub	sp, #40	@ 0x28
 8014b76:	af02      	add	r7, sp, #8
 8014b78:	60f8      	str	r0, [r7, #12]
 8014b7a:	60b9      	str	r1, [r7, #8]
 8014b7c:	603b      	str	r3, [r7, #0]
 8014b7e:	4613      	mov	r3, r2
 8014b80:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014b88:	2b20      	cmp	r3, #32
 8014b8a:	f040 80b6 	bne.w	8014cfa <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8014b8e:	68bb      	ldr	r3, [r7, #8]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d002      	beq.n	8014b9a <HAL_UART_Receive+0x28>
 8014b94:	88fb      	ldrh	r3, [r7, #6]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d101      	bne.n	8014b9e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8014b9a:	2301      	movs	r3, #1
 8014b9c:	e0ae      	b.n	8014cfc <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	2222      	movs	r2, #34	@ 0x22
 8014baa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014bb4:	f7f6 fa34 	bl	800b020 <HAL_GetTick>
 8014bb8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	88fa      	ldrh	r2, [r7, #6]
 8014bbe:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	88fa      	ldrh	r2, [r7, #6]
 8014bc6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	689b      	ldr	r3, [r3, #8]
 8014bce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014bd2:	d10e      	bne.n	8014bf2 <HAL_UART_Receive+0x80>
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	691b      	ldr	r3, [r3, #16]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d105      	bne.n	8014be8 <HAL_UART_Receive+0x76>
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8014be2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014be6:	e02d      	b.n	8014c44 <HAL_UART_Receive+0xd2>
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	22ff      	movs	r2, #255	@ 0xff
 8014bec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014bf0:	e028      	b.n	8014c44 <HAL_UART_Receive+0xd2>
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	689b      	ldr	r3, [r3, #8]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d10d      	bne.n	8014c16 <HAL_UART_Receive+0xa4>
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	691b      	ldr	r3, [r3, #16]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d104      	bne.n	8014c0c <HAL_UART_Receive+0x9a>
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	22ff      	movs	r2, #255	@ 0xff
 8014c06:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014c0a:	e01b      	b.n	8014c44 <HAL_UART_Receive+0xd2>
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	227f      	movs	r2, #127	@ 0x7f
 8014c10:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014c14:	e016      	b.n	8014c44 <HAL_UART_Receive+0xd2>
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	689b      	ldr	r3, [r3, #8]
 8014c1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014c1e:	d10d      	bne.n	8014c3c <HAL_UART_Receive+0xca>
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	691b      	ldr	r3, [r3, #16]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d104      	bne.n	8014c32 <HAL_UART_Receive+0xc0>
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	227f      	movs	r2, #127	@ 0x7f
 8014c2c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014c30:	e008      	b.n	8014c44 <HAL_UART_Receive+0xd2>
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	223f      	movs	r2, #63	@ 0x3f
 8014c36:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014c3a:	e003      	b.n	8014c44 <HAL_UART_Receive+0xd2>
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	2200      	movs	r2, #0
 8014c40:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8014c4a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	689b      	ldr	r3, [r3, #8]
 8014c50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014c54:	d108      	bne.n	8014c68 <HAL_UART_Receive+0xf6>
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	691b      	ldr	r3, [r3, #16]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d104      	bne.n	8014c68 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8014c5e:	2300      	movs	r3, #0
 8014c60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8014c62:	68bb      	ldr	r3, [r7, #8]
 8014c64:	61bb      	str	r3, [r7, #24]
 8014c66:	e003      	b.n	8014c70 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8014c68:	68bb      	ldr	r3, [r7, #8]
 8014c6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014c6c:	2300      	movs	r3, #0
 8014c6e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8014c70:	e037      	b.n	8014ce2 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8014c72:	683b      	ldr	r3, [r7, #0]
 8014c74:	9300      	str	r3, [sp, #0]
 8014c76:	697b      	ldr	r3, [r7, #20]
 8014c78:	2200      	movs	r2, #0
 8014c7a:	2120      	movs	r1, #32
 8014c7c:	68f8      	ldr	r0, [r7, #12]
 8014c7e:	f000 fd6f 	bl	8015760 <UART_WaitOnFlagUntilTimeout>
 8014c82:	4603      	mov	r3, r0
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d005      	beq.n	8014c94 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	2220      	movs	r2, #32
 8014c8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8014c90:	2303      	movs	r3, #3
 8014c92:	e033      	b.n	8014cfc <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8014c94:	69fb      	ldr	r3, [r7, #28]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d10c      	bne.n	8014cb4 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014ca0:	b29a      	uxth	r2, r3
 8014ca2:	8a7b      	ldrh	r3, [r7, #18]
 8014ca4:	4013      	ands	r3, r2
 8014ca6:	b29a      	uxth	r2, r3
 8014ca8:	69bb      	ldr	r3, [r7, #24]
 8014caa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8014cac:	69bb      	ldr	r3, [r7, #24]
 8014cae:	3302      	adds	r3, #2
 8014cb0:	61bb      	str	r3, [r7, #24]
 8014cb2:	e00d      	b.n	8014cd0 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014cba:	b29b      	uxth	r3, r3
 8014cbc:	b2da      	uxtb	r2, r3
 8014cbe:	8a7b      	ldrh	r3, [r7, #18]
 8014cc0:	b2db      	uxtb	r3, r3
 8014cc2:	4013      	ands	r3, r2
 8014cc4:	b2da      	uxtb	r2, r3
 8014cc6:	69fb      	ldr	r3, [r7, #28]
 8014cc8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8014cca:	69fb      	ldr	r3, [r7, #28]
 8014ccc:	3301      	adds	r3, #1
 8014cce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8014cd6:	b29b      	uxth	r3, r3
 8014cd8:	3b01      	subs	r3, #1
 8014cda:	b29a      	uxth	r2, r3
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8014ce8:	b29b      	uxth	r3, r3
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d1c1      	bne.n	8014c72 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	2220      	movs	r2, #32
 8014cf2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	e000      	b.n	8014cfc <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8014cfa:	2302      	movs	r3, #2
  }
}
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	3720      	adds	r7, #32
 8014d00:	46bd      	mov	sp, r7
 8014d02:	bd80      	pop	{r7, pc}

08014d04 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b08a      	sub	sp, #40	@ 0x28
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	60f8      	str	r0, [r7, #12]
 8014d0c:	60b9      	str	r1, [r7, #8]
 8014d0e:	4613      	mov	r3, r2
 8014d10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014d16:	2b20      	cmp	r3, #32
 8014d18:	d165      	bne.n	8014de6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8014d1a:	68bb      	ldr	r3, [r7, #8]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d002      	beq.n	8014d26 <HAL_UART_Transmit_DMA+0x22>
 8014d20:	88fb      	ldrh	r3, [r7, #6]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d101      	bne.n	8014d2a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8014d26:	2301      	movs	r3, #1
 8014d28:	e05e      	b.n	8014de8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	68ba      	ldr	r2, [r7, #8]
 8014d2e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	88fa      	ldrh	r2, [r7, #6]
 8014d34:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	88fa      	ldrh	r2, [r7, #6]
 8014d3c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	2200      	movs	r2, #0
 8014d44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	2221      	movs	r2, #33	@ 0x21
 8014d4c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d027      	beq.n	8014da6 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014d5a:	4a25      	ldr	r2, [pc, #148]	@ (8014df0 <HAL_UART_Transmit_DMA+0xec>)
 8014d5c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014d62:	4a24      	ldr	r2, [pc, #144]	@ (8014df4 <HAL_UART_Transmit_DMA+0xf0>)
 8014d64:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014d6a:	4a23      	ldr	r2, [pc, #140]	@ (8014df8 <HAL_UART_Transmit_DMA+0xf4>)
 8014d6c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014d72:	2200      	movs	r2, #0
 8014d74:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014d7e:	4619      	mov	r1, r3
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	3328      	adds	r3, #40	@ 0x28
 8014d86:	461a      	mov	r2, r3
 8014d88:	88fb      	ldrh	r3, [r7, #6]
 8014d8a:	f7f8 f92f 	bl	800cfec <HAL_DMA_Start_IT>
 8014d8e:	4603      	mov	r3, r0
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d008      	beq.n	8014da6 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	2210      	movs	r2, #16
 8014d98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	2220      	movs	r2, #32
 8014da0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8014da2:	2301      	movs	r3, #1
 8014da4:	e020      	b.n	8014de8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	2240      	movs	r2, #64	@ 0x40
 8014dac:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	3308      	adds	r3, #8
 8014db4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014db6:	697b      	ldr	r3, [r7, #20]
 8014db8:	e853 3f00 	ldrex	r3, [r3]
 8014dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8014dbe:	693b      	ldr	r3, [r7, #16]
 8014dc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	3308      	adds	r3, #8
 8014dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014dce:	623a      	str	r2, [r7, #32]
 8014dd0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014dd2:	69f9      	ldr	r1, [r7, #28]
 8014dd4:	6a3a      	ldr	r2, [r7, #32]
 8014dd6:	e841 2300 	strex	r3, r2, [r1]
 8014dda:	61bb      	str	r3, [r7, #24]
   return(result);
 8014ddc:	69bb      	ldr	r3, [r7, #24]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d1e5      	bne.n	8014dae <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8014de2:	2300      	movs	r3, #0
 8014de4:	e000      	b.n	8014de8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8014de6:	2302      	movs	r3, #2
  }
}
 8014de8:	4618      	mov	r0, r3
 8014dea:	3728      	adds	r7, #40	@ 0x28
 8014dec:	46bd      	mov	sp, r7
 8014dee:	bd80      	pop	{r7, pc}
 8014df0:	08015a91 	.word	0x08015a91
 8014df4:	08015b2b 	.word	0x08015b2b
 8014df8:	08015cb1 	.word	0x08015cb1

08014dfc <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8014dfc:	b580      	push	{r7, lr}
 8014dfe:	b090      	sub	sp, #64	@ 0x40
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014e10:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	689b      	ldr	r3, [r3, #8]
 8014e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014e1c:	2b80      	cmp	r3, #128	@ 0x80
 8014e1e:	d139      	bne.n	8014e94 <HAL_UART_DMAStop+0x98>
 8014e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014e22:	2b21      	cmp	r3, #33	@ 0x21
 8014e24:	d136      	bne.n	8014e94 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	3308      	adds	r3, #8
 8014e2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e2e:	6a3b      	ldr	r3, [r7, #32]
 8014e30:	e853 3f00 	ldrex	r3, [r3]
 8014e34:	61fb      	str	r3, [r7, #28]
   return(result);
 8014e36:	69fb      	ldr	r3, [r7, #28]
 8014e38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	3308      	adds	r3, #8
 8014e44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014e46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8014e48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014e4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014e4e:	e841 2300 	strex	r3, r2, [r1]
 8014e52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d1e5      	bne.n	8014e26 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d015      	beq.n	8014e8e <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014e66:	4618      	mov	r0, r3
 8014e68:	f7f8 f920 	bl	800d0ac <HAL_DMA_Abort>
 8014e6c:	4603      	mov	r3, r0
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d00d      	beq.n	8014e8e <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014e76:	4618      	mov	r0, r3
 8014e78:	f7f8 fa05 	bl	800d286 <HAL_DMA_GetError>
 8014e7c:	4603      	mov	r3, r0
 8014e7e:	2b20      	cmp	r3, #32
 8014e80:	d105      	bne.n	8014e8e <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	2210      	movs	r2, #16
 8014e86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8014e8a:	2303      	movs	r3, #3
 8014e8c:	e044      	b.n	8014f18 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8014e8e:	6878      	ldr	r0, [r7, #4]
 8014e90:	f000 fd74 	bl	801597c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	689b      	ldr	r3, [r3, #8]
 8014e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014e9e:	2b40      	cmp	r3, #64	@ 0x40
 8014ea0:	d139      	bne.n	8014f16 <HAL_UART_DMAStop+0x11a>
 8014ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ea4:	2b22      	cmp	r3, #34	@ 0x22
 8014ea6:	d136      	bne.n	8014f16 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	3308      	adds	r3, #8
 8014eae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	e853 3f00 	ldrex	r3, [r3]
 8014eb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8014eb8:	68bb      	ldr	r3, [r7, #8]
 8014eba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014ebe:	633b      	str	r3, [r7, #48]	@ 0x30
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	3308      	adds	r3, #8
 8014ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014ec8:	61ba      	str	r2, [r7, #24]
 8014eca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ecc:	6979      	ldr	r1, [r7, #20]
 8014ece:	69ba      	ldr	r2, [r7, #24]
 8014ed0:	e841 2300 	strex	r3, r2, [r1]
 8014ed4:	613b      	str	r3, [r7, #16]
   return(result);
 8014ed6:	693b      	ldr	r3, [r7, #16]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d1e5      	bne.n	8014ea8 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d015      	beq.n	8014f10 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014ee8:	4618      	mov	r0, r3
 8014eea:	f7f8 f8df 	bl	800d0ac <HAL_DMA_Abort>
 8014eee:	4603      	mov	r3, r0
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d00d      	beq.n	8014f10 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014ef8:	4618      	mov	r0, r3
 8014efa:	f7f8 f9c4 	bl	800d286 <HAL_DMA_GetError>
 8014efe:	4603      	mov	r3, r0
 8014f00:	2b20      	cmp	r3, #32
 8014f02:	d105      	bne.n	8014f10 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	2210      	movs	r2, #16
 8014f08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8014f0c:	2303      	movs	r3, #3
 8014f0e:	e003      	b.n	8014f18 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8014f10:	6878      	ldr	r0, [r7, #4]
 8014f12:	f000 fd59 	bl	80159c8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8014f16:	2300      	movs	r3, #0
}
 8014f18:	4618      	mov	r0, r3
 8014f1a:	3740      	adds	r7, #64	@ 0x40
 8014f1c:	46bd      	mov	sp, r7
 8014f1e:	bd80      	pop	{r7, pc}

08014f20 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8014f20:	b480      	push	{r7}
 8014f22:	b083      	sub	sp, #12
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8014f28:	bf00      	nop
 8014f2a:	370c      	adds	r7, #12
 8014f2c:	46bd      	mov	sp, r7
 8014f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f32:	4770      	bx	lr

08014f34 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8014f34:	b480      	push	{r7}
 8014f36:	b083      	sub	sp, #12
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8014f3c:	bf00      	nop
 8014f3e:	370c      	adds	r7, #12
 8014f40:	46bd      	mov	sp, r7
 8014f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f46:	4770      	bx	lr

08014f48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014f48:	b480      	push	{r7}
 8014f4a:	b083      	sub	sp, #12
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8014f50:	bf00      	nop
 8014f52:	370c      	adds	r7, #12
 8014f54:	46bd      	mov	sp, r7
 8014f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f5a:	4770      	bx	lr

08014f5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014f60:	b08a      	sub	sp, #40	@ 0x28
 8014f62:	af00      	add	r7, sp, #0
 8014f64:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014f66:	2300      	movs	r3, #0
 8014f68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	689a      	ldr	r2, [r3, #8]
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	691b      	ldr	r3, [r3, #16]
 8014f74:	431a      	orrs	r2, r3
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	695b      	ldr	r3, [r3, #20]
 8014f7a:	431a      	orrs	r2, r3
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	69db      	ldr	r3, [r3, #28]
 8014f80:	4313      	orrs	r3, r2
 8014f82:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	681a      	ldr	r2, [r3, #0]
 8014f8a:	4ba4      	ldr	r3, [pc, #656]	@ (801521c <UART_SetConfig+0x2c0>)
 8014f8c:	4013      	ands	r3, r2
 8014f8e:	68fa      	ldr	r2, [r7, #12]
 8014f90:	6812      	ldr	r2, [r2, #0]
 8014f92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014f94:	430b      	orrs	r3, r1
 8014f96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	685b      	ldr	r3, [r3, #4]
 8014f9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	68da      	ldr	r2, [r3, #12]
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	430a      	orrs	r2, r1
 8014fac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	699b      	ldr	r3, [r3, #24]
 8014fb2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	4a99      	ldr	r2, [pc, #612]	@ (8015220 <UART_SetConfig+0x2c4>)
 8014fba:	4293      	cmp	r3, r2
 8014fbc:	d004      	beq.n	8014fc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	6a1b      	ldr	r3, [r3, #32]
 8014fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014fc4:	4313      	orrs	r3, r2
 8014fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	689b      	ldr	r3, [r3, #8]
 8014fce:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014fd8:	430a      	orrs	r2, r1
 8014fda:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	4a90      	ldr	r2, [pc, #576]	@ (8015224 <UART_SetConfig+0x2c8>)
 8014fe2:	4293      	cmp	r3, r2
 8014fe4:	d126      	bne.n	8015034 <UART_SetConfig+0xd8>
 8014fe6:	4b90      	ldr	r3, [pc, #576]	@ (8015228 <UART_SetConfig+0x2cc>)
 8014fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014fec:	f003 0303 	and.w	r3, r3, #3
 8014ff0:	2b03      	cmp	r3, #3
 8014ff2:	d81b      	bhi.n	801502c <UART_SetConfig+0xd0>
 8014ff4:	a201      	add	r2, pc, #4	@ (adr r2, 8014ffc <UART_SetConfig+0xa0>)
 8014ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ffa:	bf00      	nop
 8014ffc:	0801500d 	.word	0x0801500d
 8015000:	0801501d 	.word	0x0801501d
 8015004:	08015015 	.word	0x08015015
 8015008:	08015025 	.word	0x08015025
 801500c:	2301      	movs	r3, #1
 801500e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015012:	e116      	b.n	8015242 <UART_SetConfig+0x2e6>
 8015014:	2302      	movs	r3, #2
 8015016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801501a:	e112      	b.n	8015242 <UART_SetConfig+0x2e6>
 801501c:	2304      	movs	r3, #4
 801501e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015022:	e10e      	b.n	8015242 <UART_SetConfig+0x2e6>
 8015024:	2308      	movs	r3, #8
 8015026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801502a:	e10a      	b.n	8015242 <UART_SetConfig+0x2e6>
 801502c:	2310      	movs	r3, #16
 801502e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015032:	e106      	b.n	8015242 <UART_SetConfig+0x2e6>
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	4a7c      	ldr	r2, [pc, #496]	@ (801522c <UART_SetConfig+0x2d0>)
 801503a:	4293      	cmp	r3, r2
 801503c:	d138      	bne.n	80150b0 <UART_SetConfig+0x154>
 801503e:	4b7a      	ldr	r3, [pc, #488]	@ (8015228 <UART_SetConfig+0x2cc>)
 8015040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015044:	f003 030c 	and.w	r3, r3, #12
 8015048:	2b0c      	cmp	r3, #12
 801504a:	d82d      	bhi.n	80150a8 <UART_SetConfig+0x14c>
 801504c:	a201      	add	r2, pc, #4	@ (adr r2, 8015054 <UART_SetConfig+0xf8>)
 801504e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015052:	bf00      	nop
 8015054:	08015089 	.word	0x08015089
 8015058:	080150a9 	.word	0x080150a9
 801505c:	080150a9 	.word	0x080150a9
 8015060:	080150a9 	.word	0x080150a9
 8015064:	08015099 	.word	0x08015099
 8015068:	080150a9 	.word	0x080150a9
 801506c:	080150a9 	.word	0x080150a9
 8015070:	080150a9 	.word	0x080150a9
 8015074:	08015091 	.word	0x08015091
 8015078:	080150a9 	.word	0x080150a9
 801507c:	080150a9 	.word	0x080150a9
 8015080:	080150a9 	.word	0x080150a9
 8015084:	080150a1 	.word	0x080150a1
 8015088:	2300      	movs	r3, #0
 801508a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801508e:	e0d8      	b.n	8015242 <UART_SetConfig+0x2e6>
 8015090:	2302      	movs	r3, #2
 8015092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015096:	e0d4      	b.n	8015242 <UART_SetConfig+0x2e6>
 8015098:	2304      	movs	r3, #4
 801509a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801509e:	e0d0      	b.n	8015242 <UART_SetConfig+0x2e6>
 80150a0:	2308      	movs	r3, #8
 80150a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80150a6:	e0cc      	b.n	8015242 <UART_SetConfig+0x2e6>
 80150a8:	2310      	movs	r3, #16
 80150aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80150ae:	e0c8      	b.n	8015242 <UART_SetConfig+0x2e6>
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	4a5e      	ldr	r2, [pc, #376]	@ (8015230 <UART_SetConfig+0x2d4>)
 80150b6:	4293      	cmp	r3, r2
 80150b8:	d125      	bne.n	8015106 <UART_SetConfig+0x1aa>
 80150ba:	4b5b      	ldr	r3, [pc, #364]	@ (8015228 <UART_SetConfig+0x2cc>)
 80150bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80150c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80150c4:	2b30      	cmp	r3, #48	@ 0x30
 80150c6:	d016      	beq.n	80150f6 <UART_SetConfig+0x19a>
 80150c8:	2b30      	cmp	r3, #48	@ 0x30
 80150ca:	d818      	bhi.n	80150fe <UART_SetConfig+0x1a2>
 80150cc:	2b20      	cmp	r3, #32
 80150ce:	d00a      	beq.n	80150e6 <UART_SetConfig+0x18a>
 80150d0:	2b20      	cmp	r3, #32
 80150d2:	d814      	bhi.n	80150fe <UART_SetConfig+0x1a2>
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d002      	beq.n	80150de <UART_SetConfig+0x182>
 80150d8:	2b10      	cmp	r3, #16
 80150da:	d008      	beq.n	80150ee <UART_SetConfig+0x192>
 80150dc:	e00f      	b.n	80150fe <UART_SetConfig+0x1a2>
 80150de:	2300      	movs	r3, #0
 80150e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80150e4:	e0ad      	b.n	8015242 <UART_SetConfig+0x2e6>
 80150e6:	2302      	movs	r3, #2
 80150e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80150ec:	e0a9      	b.n	8015242 <UART_SetConfig+0x2e6>
 80150ee:	2304      	movs	r3, #4
 80150f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80150f4:	e0a5      	b.n	8015242 <UART_SetConfig+0x2e6>
 80150f6:	2308      	movs	r3, #8
 80150f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80150fc:	e0a1      	b.n	8015242 <UART_SetConfig+0x2e6>
 80150fe:	2310      	movs	r3, #16
 8015100:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015104:	e09d      	b.n	8015242 <UART_SetConfig+0x2e6>
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	4a4a      	ldr	r2, [pc, #296]	@ (8015234 <UART_SetConfig+0x2d8>)
 801510c:	4293      	cmp	r3, r2
 801510e:	d125      	bne.n	801515c <UART_SetConfig+0x200>
 8015110:	4b45      	ldr	r3, [pc, #276]	@ (8015228 <UART_SetConfig+0x2cc>)
 8015112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015116:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801511a:	2bc0      	cmp	r3, #192	@ 0xc0
 801511c:	d016      	beq.n	801514c <UART_SetConfig+0x1f0>
 801511e:	2bc0      	cmp	r3, #192	@ 0xc0
 8015120:	d818      	bhi.n	8015154 <UART_SetConfig+0x1f8>
 8015122:	2b80      	cmp	r3, #128	@ 0x80
 8015124:	d00a      	beq.n	801513c <UART_SetConfig+0x1e0>
 8015126:	2b80      	cmp	r3, #128	@ 0x80
 8015128:	d814      	bhi.n	8015154 <UART_SetConfig+0x1f8>
 801512a:	2b00      	cmp	r3, #0
 801512c:	d002      	beq.n	8015134 <UART_SetConfig+0x1d8>
 801512e:	2b40      	cmp	r3, #64	@ 0x40
 8015130:	d008      	beq.n	8015144 <UART_SetConfig+0x1e8>
 8015132:	e00f      	b.n	8015154 <UART_SetConfig+0x1f8>
 8015134:	2300      	movs	r3, #0
 8015136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801513a:	e082      	b.n	8015242 <UART_SetConfig+0x2e6>
 801513c:	2302      	movs	r3, #2
 801513e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015142:	e07e      	b.n	8015242 <UART_SetConfig+0x2e6>
 8015144:	2304      	movs	r3, #4
 8015146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801514a:	e07a      	b.n	8015242 <UART_SetConfig+0x2e6>
 801514c:	2308      	movs	r3, #8
 801514e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015152:	e076      	b.n	8015242 <UART_SetConfig+0x2e6>
 8015154:	2310      	movs	r3, #16
 8015156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801515a:	e072      	b.n	8015242 <UART_SetConfig+0x2e6>
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	4a35      	ldr	r2, [pc, #212]	@ (8015238 <UART_SetConfig+0x2dc>)
 8015162:	4293      	cmp	r3, r2
 8015164:	d12a      	bne.n	80151bc <UART_SetConfig+0x260>
 8015166:	4b30      	ldr	r3, [pc, #192]	@ (8015228 <UART_SetConfig+0x2cc>)
 8015168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801516c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8015170:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015174:	d01a      	beq.n	80151ac <UART_SetConfig+0x250>
 8015176:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801517a:	d81b      	bhi.n	80151b4 <UART_SetConfig+0x258>
 801517c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015180:	d00c      	beq.n	801519c <UART_SetConfig+0x240>
 8015182:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015186:	d815      	bhi.n	80151b4 <UART_SetConfig+0x258>
 8015188:	2b00      	cmp	r3, #0
 801518a:	d003      	beq.n	8015194 <UART_SetConfig+0x238>
 801518c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015190:	d008      	beq.n	80151a4 <UART_SetConfig+0x248>
 8015192:	e00f      	b.n	80151b4 <UART_SetConfig+0x258>
 8015194:	2300      	movs	r3, #0
 8015196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801519a:	e052      	b.n	8015242 <UART_SetConfig+0x2e6>
 801519c:	2302      	movs	r3, #2
 801519e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80151a2:	e04e      	b.n	8015242 <UART_SetConfig+0x2e6>
 80151a4:	2304      	movs	r3, #4
 80151a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80151aa:	e04a      	b.n	8015242 <UART_SetConfig+0x2e6>
 80151ac:	2308      	movs	r3, #8
 80151ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80151b2:	e046      	b.n	8015242 <UART_SetConfig+0x2e6>
 80151b4:	2310      	movs	r3, #16
 80151b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80151ba:	e042      	b.n	8015242 <UART_SetConfig+0x2e6>
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	4a17      	ldr	r2, [pc, #92]	@ (8015220 <UART_SetConfig+0x2c4>)
 80151c2:	4293      	cmp	r3, r2
 80151c4:	d13a      	bne.n	801523c <UART_SetConfig+0x2e0>
 80151c6:	4b18      	ldr	r3, [pc, #96]	@ (8015228 <UART_SetConfig+0x2cc>)
 80151c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80151cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80151d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80151d4:	d01a      	beq.n	801520c <UART_SetConfig+0x2b0>
 80151d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80151da:	d81b      	bhi.n	8015214 <UART_SetConfig+0x2b8>
 80151dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80151e0:	d00c      	beq.n	80151fc <UART_SetConfig+0x2a0>
 80151e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80151e6:	d815      	bhi.n	8015214 <UART_SetConfig+0x2b8>
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d003      	beq.n	80151f4 <UART_SetConfig+0x298>
 80151ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80151f0:	d008      	beq.n	8015204 <UART_SetConfig+0x2a8>
 80151f2:	e00f      	b.n	8015214 <UART_SetConfig+0x2b8>
 80151f4:	2300      	movs	r3, #0
 80151f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80151fa:	e022      	b.n	8015242 <UART_SetConfig+0x2e6>
 80151fc:	2302      	movs	r3, #2
 80151fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015202:	e01e      	b.n	8015242 <UART_SetConfig+0x2e6>
 8015204:	2304      	movs	r3, #4
 8015206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801520a:	e01a      	b.n	8015242 <UART_SetConfig+0x2e6>
 801520c:	2308      	movs	r3, #8
 801520e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015212:	e016      	b.n	8015242 <UART_SetConfig+0x2e6>
 8015214:	2310      	movs	r3, #16
 8015216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801521a:	e012      	b.n	8015242 <UART_SetConfig+0x2e6>
 801521c:	efff69f3 	.word	0xefff69f3
 8015220:	40008000 	.word	0x40008000
 8015224:	40013800 	.word	0x40013800
 8015228:	40021000 	.word	0x40021000
 801522c:	40004400 	.word	0x40004400
 8015230:	40004800 	.word	0x40004800
 8015234:	40004c00 	.word	0x40004c00
 8015238:	40005000 	.word	0x40005000
 801523c:	2310      	movs	r3, #16
 801523e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	4a9f      	ldr	r2, [pc, #636]	@ (80154c4 <UART_SetConfig+0x568>)
 8015248:	4293      	cmp	r3, r2
 801524a:	d17a      	bne.n	8015342 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801524c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015250:	2b08      	cmp	r3, #8
 8015252:	d824      	bhi.n	801529e <UART_SetConfig+0x342>
 8015254:	a201      	add	r2, pc, #4	@ (adr r2, 801525c <UART_SetConfig+0x300>)
 8015256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801525a:	bf00      	nop
 801525c:	08015281 	.word	0x08015281
 8015260:	0801529f 	.word	0x0801529f
 8015264:	08015289 	.word	0x08015289
 8015268:	0801529f 	.word	0x0801529f
 801526c:	0801528f 	.word	0x0801528f
 8015270:	0801529f 	.word	0x0801529f
 8015274:	0801529f 	.word	0x0801529f
 8015278:	0801529f 	.word	0x0801529f
 801527c:	08015297 	.word	0x08015297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015280:	f7fb f8fe 	bl	8010480 <HAL_RCC_GetPCLK1Freq>
 8015284:	61f8      	str	r0, [r7, #28]
        break;
 8015286:	e010      	b.n	80152aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015288:	4b8f      	ldr	r3, [pc, #572]	@ (80154c8 <UART_SetConfig+0x56c>)
 801528a:	61fb      	str	r3, [r7, #28]
        break;
 801528c:	e00d      	b.n	80152aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801528e:	f7fb f85f 	bl	8010350 <HAL_RCC_GetSysClockFreq>
 8015292:	61f8      	str	r0, [r7, #28]
        break;
 8015294:	e009      	b.n	80152aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801529a:	61fb      	str	r3, [r7, #28]
        break;
 801529c:	e005      	b.n	80152aa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 801529e:	2300      	movs	r3, #0
 80152a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80152a2:	2301      	movs	r3, #1
 80152a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80152a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80152aa:	69fb      	ldr	r3, [r7, #28]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	f000 80fb 	beq.w	80154a8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	685a      	ldr	r2, [r3, #4]
 80152b6:	4613      	mov	r3, r2
 80152b8:	005b      	lsls	r3, r3, #1
 80152ba:	4413      	add	r3, r2
 80152bc:	69fa      	ldr	r2, [r7, #28]
 80152be:	429a      	cmp	r2, r3
 80152c0:	d305      	bcc.n	80152ce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	685b      	ldr	r3, [r3, #4]
 80152c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80152c8:	69fa      	ldr	r2, [r7, #28]
 80152ca:	429a      	cmp	r2, r3
 80152cc:	d903      	bls.n	80152d6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80152ce:	2301      	movs	r3, #1
 80152d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80152d4:	e0e8      	b.n	80154a8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80152d6:	69fb      	ldr	r3, [r7, #28]
 80152d8:	2200      	movs	r2, #0
 80152da:	461c      	mov	r4, r3
 80152dc:	4615      	mov	r5, r2
 80152de:	f04f 0200 	mov.w	r2, #0
 80152e2:	f04f 0300 	mov.w	r3, #0
 80152e6:	022b      	lsls	r3, r5, #8
 80152e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80152ec:	0222      	lsls	r2, r4, #8
 80152ee:	68f9      	ldr	r1, [r7, #12]
 80152f0:	6849      	ldr	r1, [r1, #4]
 80152f2:	0849      	lsrs	r1, r1, #1
 80152f4:	2000      	movs	r0, #0
 80152f6:	4688      	mov	r8, r1
 80152f8:	4681      	mov	r9, r0
 80152fa:	eb12 0a08 	adds.w	sl, r2, r8
 80152fe:	eb43 0b09 	adc.w	fp, r3, r9
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	685b      	ldr	r3, [r3, #4]
 8015306:	2200      	movs	r2, #0
 8015308:	603b      	str	r3, [r7, #0]
 801530a:	607a      	str	r2, [r7, #4]
 801530c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015310:	4650      	mov	r0, sl
 8015312:	4659      	mov	r1, fp
 8015314:	f7eb fbb2 	bl	8000a7c <__aeabi_uldivmod>
 8015318:	4602      	mov	r2, r0
 801531a:	460b      	mov	r3, r1
 801531c:	4613      	mov	r3, r2
 801531e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015320:	69bb      	ldr	r3, [r7, #24]
 8015322:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015326:	d308      	bcc.n	801533a <UART_SetConfig+0x3de>
 8015328:	69bb      	ldr	r3, [r7, #24]
 801532a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801532e:	d204      	bcs.n	801533a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	69ba      	ldr	r2, [r7, #24]
 8015336:	60da      	str	r2, [r3, #12]
 8015338:	e0b6      	b.n	80154a8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 801533a:	2301      	movs	r3, #1
 801533c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8015340:	e0b2      	b.n	80154a8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	69db      	ldr	r3, [r3, #28]
 8015346:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801534a:	d15e      	bne.n	801540a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 801534c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015350:	2b08      	cmp	r3, #8
 8015352:	d828      	bhi.n	80153a6 <UART_SetConfig+0x44a>
 8015354:	a201      	add	r2, pc, #4	@ (adr r2, 801535c <UART_SetConfig+0x400>)
 8015356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801535a:	bf00      	nop
 801535c:	08015381 	.word	0x08015381
 8015360:	08015389 	.word	0x08015389
 8015364:	08015391 	.word	0x08015391
 8015368:	080153a7 	.word	0x080153a7
 801536c:	08015397 	.word	0x08015397
 8015370:	080153a7 	.word	0x080153a7
 8015374:	080153a7 	.word	0x080153a7
 8015378:	080153a7 	.word	0x080153a7
 801537c:	0801539f 	.word	0x0801539f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015380:	f7fb f87e 	bl	8010480 <HAL_RCC_GetPCLK1Freq>
 8015384:	61f8      	str	r0, [r7, #28]
        break;
 8015386:	e014      	b.n	80153b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015388:	f7fb f890 	bl	80104ac <HAL_RCC_GetPCLK2Freq>
 801538c:	61f8      	str	r0, [r7, #28]
        break;
 801538e:	e010      	b.n	80153b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015390:	4b4d      	ldr	r3, [pc, #308]	@ (80154c8 <UART_SetConfig+0x56c>)
 8015392:	61fb      	str	r3, [r7, #28]
        break;
 8015394:	e00d      	b.n	80153b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015396:	f7fa ffdb 	bl	8010350 <HAL_RCC_GetSysClockFreq>
 801539a:	61f8      	str	r0, [r7, #28]
        break;
 801539c:	e009      	b.n	80153b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801539e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80153a2:	61fb      	str	r3, [r7, #28]
        break;
 80153a4:	e005      	b.n	80153b2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80153a6:	2300      	movs	r3, #0
 80153a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80153aa:	2301      	movs	r3, #1
 80153ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80153b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80153b2:	69fb      	ldr	r3, [r7, #28]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d077      	beq.n	80154a8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80153b8:	69fb      	ldr	r3, [r7, #28]
 80153ba:	005a      	lsls	r2, r3, #1
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	685b      	ldr	r3, [r3, #4]
 80153c0:	085b      	lsrs	r3, r3, #1
 80153c2:	441a      	add	r2, r3
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	685b      	ldr	r3, [r3, #4]
 80153c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80153cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80153ce:	69bb      	ldr	r3, [r7, #24]
 80153d0:	2b0f      	cmp	r3, #15
 80153d2:	d916      	bls.n	8015402 <UART_SetConfig+0x4a6>
 80153d4:	69bb      	ldr	r3, [r7, #24]
 80153d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80153da:	d212      	bcs.n	8015402 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80153dc:	69bb      	ldr	r3, [r7, #24]
 80153de:	b29b      	uxth	r3, r3
 80153e0:	f023 030f 	bic.w	r3, r3, #15
 80153e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80153e6:	69bb      	ldr	r3, [r7, #24]
 80153e8:	085b      	lsrs	r3, r3, #1
 80153ea:	b29b      	uxth	r3, r3
 80153ec:	f003 0307 	and.w	r3, r3, #7
 80153f0:	b29a      	uxth	r2, r3
 80153f2:	8afb      	ldrh	r3, [r7, #22]
 80153f4:	4313      	orrs	r3, r2
 80153f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	8afa      	ldrh	r2, [r7, #22]
 80153fe:	60da      	str	r2, [r3, #12]
 8015400:	e052      	b.n	80154a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8015402:	2301      	movs	r3, #1
 8015404:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8015408:	e04e      	b.n	80154a8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801540a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801540e:	2b08      	cmp	r3, #8
 8015410:	d827      	bhi.n	8015462 <UART_SetConfig+0x506>
 8015412:	a201      	add	r2, pc, #4	@ (adr r2, 8015418 <UART_SetConfig+0x4bc>)
 8015414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015418:	0801543d 	.word	0x0801543d
 801541c:	08015445 	.word	0x08015445
 8015420:	0801544d 	.word	0x0801544d
 8015424:	08015463 	.word	0x08015463
 8015428:	08015453 	.word	0x08015453
 801542c:	08015463 	.word	0x08015463
 8015430:	08015463 	.word	0x08015463
 8015434:	08015463 	.word	0x08015463
 8015438:	0801545b 	.word	0x0801545b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801543c:	f7fb f820 	bl	8010480 <HAL_RCC_GetPCLK1Freq>
 8015440:	61f8      	str	r0, [r7, #28]
        break;
 8015442:	e014      	b.n	801546e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015444:	f7fb f832 	bl	80104ac <HAL_RCC_GetPCLK2Freq>
 8015448:	61f8      	str	r0, [r7, #28]
        break;
 801544a:	e010      	b.n	801546e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801544c:	4b1e      	ldr	r3, [pc, #120]	@ (80154c8 <UART_SetConfig+0x56c>)
 801544e:	61fb      	str	r3, [r7, #28]
        break;
 8015450:	e00d      	b.n	801546e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015452:	f7fa ff7d 	bl	8010350 <HAL_RCC_GetSysClockFreq>
 8015456:	61f8      	str	r0, [r7, #28]
        break;
 8015458:	e009      	b.n	801546e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801545a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801545e:	61fb      	str	r3, [r7, #28]
        break;
 8015460:	e005      	b.n	801546e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8015462:	2300      	movs	r3, #0
 8015464:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8015466:	2301      	movs	r3, #1
 8015468:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 801546c:	bf00      	nop
    }

    if (pclk != 0U)
 801546e:	69fb      	ldr	r3, [r7, #28]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d019      	beq.n	80154a8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	685b      	ldr	r3, [r3, #4]
 8015478:	085a      	lsrs	r2, r3, #1
 801547a:	69fb      	ldr	r3, [r7, #28]
 801547c:	441a      	add	r2, r3
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	685b      	ldr	r3, [r3, #4]
 8015482:	fbb2 f3f3 	udiv	r3, r2, r3
 8015486:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015488:	69bb      	ldr	r3, [r7, #24]
 801548a:	2b0f      	cmp	r3, #15
 801548c:	d909      	bls.n	80154a2 <UART_SetConfig+0x546>
 801548e:	69bb      	ldr	r3, [r7, #24]
 8015490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015494:	d205      	bcs.n	80154a2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8015496:	69bb      	ldr	r3, [r7, #24]
 8015498:	b29a      	uxth	r2, r3
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	60da      	str	r2, [r3, #12]
 80154a0:	e002      	b.n	80154a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80154a2:	2301      	movs	r3, #1
 80154a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	2200      	movs	r2, #0
 80154ac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	2200      	movs	r2, #0
 80154b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80154b4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80154b8:	4618      	mov	r0, r3
 80154ba:	3728      	adds	r7, #40	@ 0x28
 80154bc:	46bd      	mov	sp, r7
 80154be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80154c2:	bf00      	nop
 80154c4:	40008000 	.word	0x40008000
 80154c8:	00f42400 	.word	0x00f42400

080154cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80154cc:	b480      	push	{r7}
 80154ce:	b083      	sub	sp, #12
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154d8:	f003 0308 	and.w	r3, r3, #8
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d00a      	beq.n	80154f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	685b      	ldr	r3, [r3, #4]
 80154e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	430a      	orrs	r2, r1
 80154f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154fa:	f003 0301 	and.w	r3, r3, #1
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d00a      	beq.n	8015518 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	685b      	ldr	r3, [r3, #4]
 8015508:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	430a      	orrs	r2, r1
 8015516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801551c:	f003 0302 	and.w	r3, r3, #2
 8015520:	2b00      	cmp	r3, #0
 8015522:	d00a      	beq.n	801553a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	685b      	ldr	r3, [r3, #4]
 801552a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	430a      	orrs	r2, r1
 8015538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801553e:	f003 0304 	and.w	r3, r3, #4
 8015542:	2b00      	cmp	r3, #0
 8015544:	d00a      	beq.n	801555c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	685b      	ldr	r3, [r3, #4]
 801554c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	430a      	orrs	r2, r1
 801555a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015560:	f003 0310 	and.w	r3, r3, #16
 8015564:	2b00      	cmp	r3, #0
 8015566:	d00a      	beq.n	801557e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	689b      	ldr	r3, [r3, #8]
 801556e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	430a      	orrs	r2, r1
 801557c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015582:	f003 0320 	and.w	r3, r3, #32
 8015586:	2b00      	cmp	r3, #0
 8015588:	d00a      	beq.n	80155a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	689b      	ldr	r3, [r3, #8]
 8015590:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	430a      	orrs	r2, r1
 801559e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80155a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d01a      	beq.n	80155e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	685b      	ldr	r3, [r3, #4]
 80155b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	430a      	orrs	r2, r1
 80155c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80155c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80155ca:	d10a      	bne.n	80155e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	685b      	ldr	r3, [r3, #4]
 80155d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	430a      	orrs	r2, r1
 80155e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80155e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d00a      	beq.n	8015604 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	685b      	ldr	r3, [r3, #4]
 80155f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	430a      	orrs	r2, r1
 8015602:	605a      	str	r2, [r3, #4]
  }
}
 8015604:	bf00      	nop
 8015606:	370c      	adds	r7, #12
 8015608:	46bd      	mov	sp, r7
 801560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801560e:	4770      	bx	lr

08015610 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015610:	b580      	push	{r7, lr}
 8015612:	b098      	sub	sp, #96	@ 0x60
 8015614:	af02      	add	r7, sp, #8
 8015616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	2200      	movs	r2, #0
 801561c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015620:	f7f5 fcfe 	bl	800b020 <HAL_GetTick>
 8015624:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	f003 0308 	and.w	r3, r3, #8
 8015630:	2b08      	cmp	r3, #8
 8015632:	d12e      	bne.n	8015692 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015634:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8015638:	9300      	str	r3, [sp, #0]
 801563a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801563c:	2200      	movs	r2, #0
 801563e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8015642:	6878      	ldr	r0, [r7, #4]
 8015644:	f000 f88c 	bl	8015760 <UART_WaitOnFlagUntilTimeout>
 8015648:	4603      	mov	r3, r0
 801564a:	2b00      	cmp	r3, #0
 801564c:	d021      	beq.n	8015692 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015656:	e853 3f00 	ldrex	r3, [r3]
 801565a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801565c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801565e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015662:	653b      	str	r3, [r7, #80]	@ 0x50
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	461a      	mov	r2, r3
 801566a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801566c:	647b      	str	r3, [r7, #68]	@ 0x44
 801566e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015670:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015672:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015674:	e841 2300 	strex	r3, r2, [r1]
 8015678:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801567a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801567c:	2b00      	cmp	r3, #0
 801567e:	d1e6      	bne.n	801564e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	2220      	movs	r2, #32
 8015684:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	2200      	movs	r2, #0
 801568a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801568e:	2303      	movs	r3, #3
 8015690:	e062      	b.n	8015758 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	f003 0304 	and.w	r3, r3, #4
 801569c:	2b04      	cmp	r3, #4
 801569e:	d149      	bne.n	8015734 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80156a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80156a4:	9300      	str	r3, [sp, #0]
 80156a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80156a8:	2200      	movs	r2, #0
 80156aa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80156ae:	6878      	ldr	r0, [r7, #4]
 80156b0:	f000 f856 	bl	8015760 <UART_WaitOnFlagUntilTimeout>
 80156b4:	4603      	mov	r3, r0
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d03c      	beq.n	8015734 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156c2:	e853 3f00 	ldrex	r3, [r3]
 80156c6:	623b      	str	r3, [r7, #32]
   return(result);
 80156c8:	6a3b      	ldr	r3, [r7, #32]
 80156ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80156ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	461a      	mov	r2, r3
 80156d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80156d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80156da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80156de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80156e0:	e841 2300 	strex	r3, r2, [r1]
 80156e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80156e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d1e6      	bne.n	80156ba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	3308      	adds	r3, #8
 80156f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156f4:	693b      	ldr	r3, [r7, #16]
 80156f6:	e853 3f00 	ldrex	r3, [r3]
 80156fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	f023 0301 	bic.w	r3, r3, #1
 8015702:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	3308      	adds	r3, #8
 801570a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801570c:	61fa      	str	r2, [r7, #28]
 801570e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015710:	69b9      	ldr	r1, [r7, #24]
 8015712:	69fa      	ldr	r2, [r7, #28]
 8015714:	e841 2300 	strex	r3, r2, [r1]
 8015718:	617b      	str	r3, [r7, #20]
   return(result);
 801571a:	697b      	ldr	r3, [r7, #20]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d1e5      	bne.n	80156ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	2220      	movs	r2, #32
 8015724:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	2200      	movs	r2, #0
 801572c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015730:	2303      	movs	r3, #3
 8015732:	e011      	b.n	8015758 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	2220      	movs	r2, #32
 8015738:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	2220      	movs	r2, #32
 801573e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	2200      	movs	r2, #0
 8015746:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	2200      	movs	r2, #0
 801574c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	2200      	movs	r2, #0
 8015752:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8015756:	2300      	movs	r3, #0
}
 8015758:	4618      	mov	r0, r3
 801575a:	3758      	adds	r7, #88	@ 0x58
 801575c:	46bd      	mov	sp, r7
 801575e:	bd80      	pop	{r7, pc}

08015760 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015760:	b580      	push	{r7, lr}
 8015762:	b084      	sub	sp, #16
 8015764:	af00      	add	r7, sp, #0
 8015766:	60f8      	str	r0, [r7, #12]
 8015768:	60b9      	str	r1, [r7, #8]
 801576a:	603b      	str	r3, [r7, #0]
 801576c:	4613      	mov	r3, r2
 801576e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015770:	e04f      	b.n	8015812 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015772:	69bb      	ldr	r3, [r7, #24]
 8015774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015778:	d04b      	beq.n	8015812 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801577a:	f7f5 fc51 	bl	800b020 <HAL_GetTick>
 801577e:	4602      	mov	r2, r0
 8015780:	683b      	ldr	r3, [r7, #0]
 8015782:	1ad3      	subs	r3, r2, r3
 8015784:	69ba      	ldr	r2, [r7, #24]
 8015786:	429a      	cmp	r2, r3
 8015788:	d302      	bcc.n	8015790 <UART_WaitOnFlagUntilTimeout+0x30>
 801578a:	69bb      	ldr	r3, [r7, #24]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d101      	bne.n	8015794 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015790:	2303      	movs	r3, #3
 8015792:	e04e      	b.n	8015832 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	f003 0304 	and.w	r3, r3, #4
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d037      	beq.n	8015812 <UART_WaitOnFlagUntilTimeout+0xb2>
 80157a2:	68bb      	ldr	r3, [r7, #8]
 80157a4:	2b80      	cmp	r3, #128	@ 0x80
 80157a6:	d034      	beq.n	8015812 <UART_WaitOnFlagUntilTimeout+0xb2>
 80157a8:	68bb      	ldr	r3, [r7, #8]
 80157aa:	2b40      	cmp	r3, #64	@ 0x40
 80157ac:	d031      	beq.n	8015812 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	69db      	ldr	r3, [r3, #28]
 80157b4:	f003 0308 	and.w	r3, r3, #8
 80157b8:	2b08      	cmp	r3, #8
 80157ba:	d110      	bne.n	80157de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	2208      	movs	r2, #8
 80157c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80157c4:	68f8      	ldr	r0, [r7, #12]
 80157c6:	f000 f8ff 	bl	80159c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	2208      	movs	r2, #8
 80157ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	2200      	movs	r2, #0
 80157d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80157da:	2301      	movs	r3, #1
 80157dc:	e029      	b.n	8015832 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	69db      	ldr	r3, [r3, #28]
 80157e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80157e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80157ec:	d111      	bne.n	8015812 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80157f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80157f8:	68f8      	ldr	r0, [r7, #12]
 80157fa:	f000 f8e5 	bl	80159c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	2220      	movs	r2, #32
 8015802:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	2200      	movs	r2, #0
 801580a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 801580e:	2303      	movs	r3, #3
 8015810:	e00f      	b.n	8015832 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	69da      	ldr	r2, [r3, #28]
 8015818:	68bb      	ldr	r3, [r7, #8]
 801581a:	4013      	ands	r3, r2
 801581c:	68ba      	ldr	r2, [r7, #8]
 801581e:	429a      	cmp	r2, r3
 8015820:	bf0c      	ite	eq
 8015822:	2301      	moveq	r3, #1
 8015824:	2300      	movne	r3, #0
 8015826:	b2db      	uxtb	r3, r3
 8015828:	461a      	mov	r2, r3
 801582a:	79fb      	ldrb	r3, [r7, #7]
 801582c:	429a      	cmp	r2, r3
 801582e:	d0a0      	beq.n	8015772 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015830:	2300      	movs	r3, #0
}
 8015832:	4618      	mov	r0, r3
 8015834:	3710      	adds	r7, #16
 8015836:	46bd      	mov	sp, r7
 8015838:	bd80      	pop	{r7, pc}
	...

0801583c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801583c:	b580      	push	{r7, lr}
 801583e:	b096      	sub	sp, #88	@ 0x58
 8015840:	af00      	add	r7, sp, #0
 8015842:	60f8      	str	r0, [r7, #12]
 8015844:	60b9      	str	r1, [r7, #8]
 8015846:	4613      	mov	r3, r2
 8015848:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	68ba      	ldr	r2, [r7, #8]
 801584e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	88fa      	ldrh	r2, [r7, #6]
 8015854:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	2200      	movs	r2, #0
 801585c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	2222      	movs	r2, #34	@ 0x22
 8015864:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801586c:	2b00      	cmp	r3, #0
 801586e:	d028      	beq.n	80158c2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015874:	4a3e      	ldr	r2, [pc, #248]	@ (8015970 <UART_Start_Receive_DMA+0x134>)
 8015876:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801587c:	4a3d      	ldr	r2, [pc, #244]	@ (8015974 <UART_Start_Receive_DMA+0x138>)
 801587e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015884:	4a3c      	ldr	r2, [pc, #240]	@ (8015978 <UART_Start_Receive_DMA+0x13c>)
 8015886:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801588c:	2200      	movs	r2, #0
 801588e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	3324      	adds	r3, #36	@ 0x24
 801589a:	4619      	mov	r1, r3
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80158a0:	461a      	mov	r2, r3
 80158a2:	88fb      	ldrh	r3, [r7, #6]
 80158a4:	f7f7 fba2 	bl	800cfec <HAL_DMA_Start_IT>
 80158a8:	4603      	mov	r3, r0
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d009      	beq.n	80158c2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	2210      	movs	r2, #16
 80158b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	2220      	movs	r2, #32
 80158ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80158be:	2301      	movs	r3, #1
 80158c0:	e051      	b.n	8015966 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	691b      	ldr	r3, [r3, #16]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d018      	beq.n	80158fc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80158d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158d2:	e853 3f00 	ldrex	r3, [r3]
 80158d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80158d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80158de:	657b      	str	r3, [r7, #84]	@ 0x54
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	461a      	mov	r2, r3
 80158e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80158e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80158ea:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80158ec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80158ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80158f0:	e841 2300 	strex	r3, r2, [r1]
 80158f4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80158f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d1e6      	bne.n	80158ca <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	3308      	adds	r3, #8
 8015902:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015906:	e853 3f00 	ldrex	r3, [r3]
 801590a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801590c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801590e:	f043 0301 	orr.w	r3, r3, #1
 8015912:	653b      	str	r3, [r7, #80]	@ 0x50
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	3308      	adds	r3, #8
 801591a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801591c:	637a      	str	r2, [r7, #52]	@ 0x34
 801591e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015920:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015922:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015924:	e841 2300 	strex	r3, r2, [r1]
 8015928:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801592a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801592c:	2b00      	cmp	r3, #0
 801592e:	d1e5      	bne.n	80158fc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	3308      	adds	r3, #8
 8015936:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015938:	697b      	ldr	r3, [r7, #20]
 801593a:	e853 3f00 	ldrex	r3, [r3]
 801593e:	613b      	str	r3, [r7, #16]
   return(result);
 8015940:	693b      	ldr	r3, [r7, #16]
 8015942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015946:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	3308      	adds	r3, #8
 801594e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015950:	623a      	str	r2, [r7, #32]
 8015952:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015954:	69f9      	ldr	r1, [r7, #28]
 8015956:	6a3a      	ldr	r2, [r7, #32]
 8015958:	e841 2300 	strex	r3, r2, [r1]
 801595c:	61bb      	str	r3, [r7, #24]
   return(result);
 801595e:	69bb      	ldr	r3, [r7, #24]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d1e5      	bne.n	8015930 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8015964:	2300      	movs	r3, #0
}
 8015966:	4618      	mov	r0, r3
 8015968:	3758      	adds	r7, #88	@ 0x58
 801596a:	46bd      	mov	sp, r7
 801596c:	bd80      	pop	{r7, pc}
 801596e:	bf00      	nop
 8015970:	08015b47 	.word	0x08015b47
 8015974:	08015c73 	.word	0x08015c73
 8015978:	08015cb1 	.word	0x08015cb1

0801597c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801597c:	b480      	push	{r7}
 801597e:	b089      	sub	sp, #36	@ 0x24
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	e853 3f00 	ldrex	r3, [r3]
 8015990:	60bb      	str	r3, [r7, #8]
   return(result);
 8015992:	68bb      	ldr	r3, [r7, #8]
 8015994:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8015998:	61fb      	str	r3, [r7, #28]
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	461a      	mov	r2, r3
 80159a0:	69fb      	ldr	r3, [r7, #28]
 80159a2:	61bb      	str	r3, [r7, #24]
 80159a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159a6:	6979      	ldr	r1, [r7, #20]
 80159a8:	69ba      	ldr	r2, [r7, #24]
 80159aa:	e841 2300 	strex	r3, r2, [r1]
 80159ae:	613b      	str	r3, [r7, #16]
   return(result);
 80159b0:	693b      	ldr	r3, [r7, #16]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d1e6      	bne.n	8015984 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	2220      	movs	r2, #32
 80159ba:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80159bc:	bf00      	nop
 80159be:	3724      	adds	r7, #36	@ 0x24
 80159c0:	46bd      	mov	sp, r7
 80159c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159c6:	4770      	bx	lr

080159c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80159c8:	b480      	push	{r7}
 80159ca:	b095      	sub	sp, #84	@ 0x54
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80159d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80159d8:	e853 3f00 	ldrex	r3, [r3]
 80159dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80159de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80159e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	461a      	mov	r2, r3
 80159ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80159ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80159f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80159f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80159f6:	e841 2300 	strex	r3, r2, [r1]
 80159fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80159fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d1e6      	bne.n	80159d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	3308      	adds	r3, #8
 8015a08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a0a:	6a3b      	ldr	r3, [r7, #32]
 8015a0c:	e853 3f00 	ldrex	r3, [r3]
 8015a10:	61fb      	str	r3, [r7, #28]
   return(result);
 8015a12:	69fb      	ldr	r3, [r7, #28]
 8015a14:	f023 0301 	bic.w	r3, r3, #1
 8015a18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	3308      	adds	r3, #8
 8015a20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015a22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8015a24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015a28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015a2a:	e841 2300 	strex	r3, r2, [r1]
 8015a2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d1e5      	bne.n	8015a02 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015a3a:	2b01      	cmp	r3, #1
 8015a3c:	d118      	bne.n	8015a70 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	e853 3f00 	ldrex	r3, [r3]
 8015a4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8015a4c:	68bb      	ldr	r3, [r7, #8]
 8015a4e:	f023 0310 	bic.w	r3, r3, #16
 8015a52:	647b      	str	r3, [r7, #68]	@ 0x44
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	461a      	mov	r2, r3
 8015a5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015a5c:	61bb      	str	r3, [r7, #24]
 8015a5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a60:	6979      	ldr	r1, [r7, #20]
 8015a62:	69ba      	ldr	r2, [r7, #24]
 8015a64:	e841 2300 	strex	r3, r2, [r1]
 8015a68:	613b      	str	r3, [r7, #16]
   return(result);
 8015a6a:	693b      	ldr	r3, [r7, #16]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d1e6      	bne.n	8015a3e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	2220      	movs	r2, #32
 8015a74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	2200      	movs	r2, #0
 8015a7c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	2200      	movs	r2, #0
 8015a82:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8015a84:	bf00      	nop
 8015a86:	3754      	adds	r7, #84	@ 0x54
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a8e:	4770      	bx	lr

08015a90 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b090      	sub	sp, #64	@ 0x40
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	f003 0320 	and.w	r3, r3, #32
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d137      	bne.n	8015b1c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8015aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015aae:	2200      	movs	r2, #0
 8015ab0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	3308      	adds	r3, #8
 8015aba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015abe:	e853 3f00 	ldrex	r3, [r3]
 8015ac2:	623b      	str	r3, [r7, #32]
   return(result);
 8015ac4:	6a3b      	ldr	r3, [r7, #32]
 8015ac6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015aca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015acc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	3308      	adds	r3, #8
 8015ad2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015ad4:	633a      	str	r2, [r7, #48]	@ 0x30
 8015ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ad8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015ada:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015adc:	e841 2300 	strex	r3, r2, [r1]
 8015ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d1e5      	bne.n	8015ab4 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015aee:	693b      	ldr	r3, [r7, #16]
 8015af0:	e853 3f00 	ldrex	r3, [r3]
 8015af4:	60fb      	str	r3, [r7, #12]
   return(result);
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015afc:	637b      	str	r3, [r7, #52]	@ 0x34
 8015afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	461a      	mov	r2, r3
 8015b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015b06:	61fb      	str	r3, [r7, #28]
 8015b08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b0a:	69b9      	ldr	r1, [r7, #24]
 8015b0c:	69fa      	ldr	r2, [r7, #28]
 8015b0e:	e841 2300 	strex	r3, r2, [r1]
 8015b12:	617b      	str	r3, [r7, #20]
   return(result);
 8015b14:	697b      	ldr	r3, [r7, #20]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d1e6      	bne.n	8015ae8 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015b1a:	e002      	b.n	8015b22 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8015b1c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015b1e:	f7ec ffbb 	bl	8002a98 <HAL_UART_TxCpltCallback>
}
 8015b22:	bf00      	nop
 8015b24:	3740      	adds	r7, #64	@ 0x40
 8015b26:	46bd      	mov	sp, r7
 8015b28:	bd80      	pop	{r7, pc}

08015b2a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8015b2a:	b580      	push	{r7, lr}
 8015b2c:	b084      	sub	sp, #16
 8015b2e:	af00      	add	r7, sp, #0
 8015b30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b36:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8015b38:	68f8      	ldr	r0, [r7, #12]
 8015b3a:	f7ff f9f1 	bl	8014f20 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015b3e:	bf00      	nop
 8015b40:	3710      	adds	r7, #16
 8015b42:	46bd      	mov	sp, r7
 8015b44:	bd80      	pop	{r7, pc}

08015b46 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015b46:	b580      	push	{r7, lr}
 8015b48:	b09c      	sub	sp, #112	@ 0x70
 8015b4a:	af00      	add	r7, sp, #0
 8015b4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b52:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	f003 0320 	and.w	r3, r3, #32
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d171      	bne.n	8015c46 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8015b62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015b64:	2200      	movs	r2, #0
 8015b66:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015b6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015b72:	e853 3f00 	ldrex	r3, [r3]
 8015b76:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8015b78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015b7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8015b7e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015b80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	461a      	mov	r2, r3
 8015b86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015b88:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015b8a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8015b8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015b90:	e841 2300 	strex	r3, r2, [r1]
 8015b94:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8015b96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d1e6      	bne.n	8015b6a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015b9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	3308      	adds	r3, #8
 8015ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ba6:	e853 3f00 	ldrex	r3, [r3]
 8015baa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8015bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015bae:	f023 0301 	bic.w	r3, r3, #1
 8015bb2:	667b      	str	r3, [r7, #100]	@ 0x64
 8015bb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	3308      	adds	r3, #8
 8015bba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8015bbc:	647a      	str	r2, [r7, #68]	@ 0x44
 8015bbe:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015bc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015bc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015bc4:	e841 2300 	strex	r3, r2, [r1]
 8015bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8015bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d1e5      	bne.n	8015b9c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015bd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	3308      	adds	r3, #8
 8015bd6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bda:	e853 3f00 	ldrex	r3, [r3]
 8015bde:	623b      	str	r3, [r7, #32]
   return(result);
 8015be0:	6a3b      	ldr	r3, [r7, #32]
 8015be2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8015be6:	663b      	str	r3, [r7, #96]	@ 0x60
 8015be8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	3308      	adds	r3, #8
 8015bee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8015bf0:	633a      	str	r2, [r7, #48]	@ 0x30
 8015bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015bf4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015bf8:	e841 2300 	strex	r3, r2, [r1]
 8015bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d1e5      	bne.n	8015bd0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015c04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015c06:	2220      	movs	r2, #32
 8015c08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015c0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015c10:	2b01      	cmp	r3, #1
 8015c12:	d118      	bne.n	8015c46 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015c14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c1a:	693b      	ldr	r3, [r7, #16]
 8015c1c:	e853 3f00 	ldrex	r3, [r3]
 8015c20:	60fb      	str	r3, [r7, #12]
   return(result);
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	f023 0310 	bic.w	r3, r3, #16
 8015c28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015c2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	461a      	mov	r2, r3
 8015c30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015c32:	61fb      	str	r3, [r7, #28]
 8015c34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c36:	69b9      	ldr	r1, [r7, #24]
 8015c38:	69fa      	ldr	r2, [r7, #28]
 8015c3a:	e841 2300 	strex	r3, r2, [r1]
 8015c3e:	617b      	str	r3, [r7, #20]
   return(result);
 8015c40:	697b      	ldr	r3, [r7, #20]
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d1e6      	bne.n	8015c14 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015c46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015c48:	2200      	movs	r2, #0
 8015c4a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015c4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015c50:	2b01      	cmp	r3, #1
 8015c52:	d107      	bne.n	8015c64 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015c54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015c56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8015c5a:	4619      	mov	r1, r3
 8015c5c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015c5e:	f7ec fe7d 	bl	800295c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015c62:	e002      	b.n	8015c6a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8015c64:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015c66:	f7ec ff0d 	bl	8002a84 <HAL_UART_RxCpltCallback>
}
 8015c6a:	bf00      	nop
 8015c6c:	3770      	adds	r7, #112	@ 0x70
 8015c6e:	46bd      	mov	sp, r7
 8015c70:	bd80      	pop	{r7, pc}

08015c72 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8015c72:	b580      	push	{r7, lr}
 8015c74:	b084      	sub	sp, #16
 8015c76:	af00      	add	r7, sp, #0
 8015c78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c7e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	2201      	movs	r2, #1
 8015c84:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015c8a:	2b01      	cmp	r3, #1
 8015c8c:	d109      	bne.n	8015ca2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8015c94:	085b      	lsrs	r3, r3, #1
 8015c96:	b29b      	uxth	r3, r3
 8015c98:	4619      	mov	r1, r3
 8015c9a:	68f8      	ldr	r0, [r7, #12]
 8015c9c:	f7ec fe5e 	bl	800295c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015ca0:	e002      	b.n	8015ca8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8015ca2:	68f8      	ldr	r0, [r7, #12]
 8015ca4:	f7ff f946 	bl	8014f34 <HAL_UART_RxHalfCpltCallback>
}
 8015ca8:	bf00      	nop
 8015caa:	3710      	adds	r7, #16
 8015cac:	46bd      	mov	sp, r7
 8015cae:	bd80      	pop	{r7, pc}

08015cb0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8015cb0:	b580      	push	{r7, lr}
 8015cb2:	b086      	sub	sp, #24
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015cbc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8015cbe:	697b      	ldr	r3, [r7, #20]
 8015cc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015cc2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8015cc4:	697b      	ldr	r3, [r7, #20]
 8015cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015cca:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8015ccc:	697b      	ldr	r3, [r7, #20]
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	689b      	ldr	r3, [r3, #8]
 8015cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015cd6:	2b80      	cmp	r3, #128	@ 0x80
 8015cd8:	d109      	bne.n	8015cee <UART_DMAError+0x3e>
 8015cda:	693b      	ldr	r3, [r7, #16]
 8015cdc:	2b21      	cmp	r3, #33	@ 0x21
 8015cde:	d106      	bne.n	8015cee <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8015ce0:	697b      	ldr	r3, [r7, #20]
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8015ce8:	6978      	ldr	r0, [r7, #20]
 8015cea:	f7ff fe47 	bl	801597c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8015cee:	697b      	ldr	r3, [r7, #20]
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	689b      	ldr	r3, [r3, #8]
 8015cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015cf8:	2b40      	cmp	r3, #64	@ 0x40
 8015cfa:	d109      	bne.n	8015d10 <UART_DMAError+0x60>
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	2b22      	cmp	r3, #34	@ 0x22
 8015d00:	d106      	bne.n	8015d10 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8015d02:	697b      	ldr	r3, [r7, #20]
 8015d04:	2200      	movs	r2, #0
 8015d06:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8015d0a:	6978      	ldr	r0, [r7, #20]
 8015d0c:	f7ff fe5c 	bl	80159c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8015d10:	697b      	ldr	r3, [r7, #20]
 8015d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015d16:	f043 0210 	orr.w	r2, r3, #16
 8015d1a:	697b      	ldr	r3, [r7, #20]
 8015d1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015d20:	6978      	ldr	r0, [r7, #20]
 8015d22:	f7ff f911 	bl	8014f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015d26:	bf00      	nop
 8015d28:	3718      	adds	r7, #24
 8015d2a:	46bd      	mov	sp, r7
 8015d2c:	bd80      	pop	{r7, pc}

08015d2e <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8015d2e:	b580      	push	{r7, lr}
 8015d30:	b088      	sub	sp, #32
 8015d32:	af00      	add	r7, sp, #0
 8015d34:	60f8      	str	r0, [r7, #12]
 8015d36:	60b9      	str	r1, [r7, #8]
 8015d38:	603b      	str	r3, [r7, #0]
 8015d3a:	4613      	mov	r3, r2
 8015d3c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015d44:	2b20      	cmp	r3, #32
 8015d46:	f040 80f0 	bne.w	8015f2a <HAL_UARTEx_ReceiveToIdle+0x1fc>
  {
    if ((pData == NULL) || (Size == 0U))
 8015d4a:	68bb      	ldr	r3, [r7, #8]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d002      	beq.n	8015d56 <HAL_UARTEx_ReceiveToIdle+0x28>
 8015d50:	88fb      	ldrh	r3, [r7, #6]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d101      	bne.n	8015d5a <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 8015d56:	2301      	movs	r3, #1
 8015d58:	e0e8      	b.n	8015f2c <HAL_UARTEx_ReceiveToIdle+0x1fe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	2200      	movs	r2, #0
 8015d5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	2222      	movs	r2, #34	@ 0x22
 8015d66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	2201      	movs	r2, #1
 8015d6e:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	2200      	movs	r2, #0
 8015d74:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015d76:	f7f5 f953 	bl	800b020 <HAL_GetTick>
 8015d7a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	88fa      	ldrh	r2, [r7, #6]
 8015d80:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	88fa      	ldrh	r2, [r7, #6]
 8015d88:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	689b      	ldr	r3, [r3, #8]
 8015d90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015d94:	d10e      	bne.n	8015db4 <HAL_UARTEx_ReceiveToIdle+0x86>
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	691b      	ldr	r3, [r3, #16]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d105      	bne.n	8015daa <HAL_UARTEx_ReceiveToIdle+0x7c>
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8015da4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015da8:	e02d      	b.n	8015e06 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	22ff      	movs	r2, #255	@ 0xff
 8015dae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015db2:	e028      	b.n	8015e06 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	689b      	ldr	r3, [r3, #8]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d10d      	bne.n	8015dd8 <HAL_UARTEx_ReceiveToIdle+0xaa>
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	691b      	ldr	r3, [r3, #16]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d104      	bne.n	8015dce <HAL_UARTEx_ReceiveToIdle+0xa0>
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	22ff      	movs	r2, #255	@ 0xff
 8015dc8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015dcc:	e01b      	b.n	8015e06 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	227f      	movs	r2, #127	@ 0x7f
 8015dd2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015dd6:	e016      	b.n	8015e06 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	689b      	ldr	r3, [r3, #8]
 8015ddc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015de0:	d10d      	bne.n	8015dfe <HAL_UARTEx_ReceiveToIdle+0xd0>
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	691b      	ldr	r3, [r3, #16]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d104      	bne.n	8015df4 <HAL_UARTEx_ReceiveToIdle+0xc6>
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	227f      	movs	r2, #127	@ 0x7f
 8015dee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015df2:	e008      	b.n	8015e06 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	223f      	movs	r2, #63	@ 0x3f
 8015df8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015dfc:	e003      	b.n	8015e06 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	2200      	movs	r2, #0
 8015e02:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8015e0c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	689b      	ldr	r3, [r3, #8]
 8015e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015e16:	d108      	bne.n	8015e2a <HAL_UARTEx_ReceiveToIdle+0xfc>
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	691b      	ldr	r3, [r3, #16]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d104      	bne.n	8015e2a <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 8015e20:	2300      	movs	r3, #0
 8015e22:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015e24:	68bb      	ldr	r3, [r7, #8]
 8015e26:	61bb      	str	r3, [r7, #24]
 8015e28:	e003      	b.n	8015e32 <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 8015e2a:	68bb      	ldr	r3, [r7, #8]
 8015e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015e2e:	2300      	movs	r3, #0
 8015e30:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8015e32:	683b      	ldr	r3, [r7, #0]
 8015e34:	2200      	movs	r2, #0
 8015e36:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8015e38:	e060      	b.n	8015efc <HAL_UARTEx_ReceiveToIdle+0x1ce>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	69db      	ldr	r3, [r3, #28]
 8015e40:	f003 0310 	and.w	r3, r3, #16
 8015e44:	2b10      	cmp	r3, #16
 8015e46:	d110      	bne.n	8015e6a <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	2210      	movs	r2, #16
 8015e4e:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8015e50:	683b      	ldr	r3, [r7, #0]
 8015e52:	881b      	ldrh	r3, [r3, #0]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d008      	beq.n	8015e6a <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	2202      	movs	r2, #2
 8015e5c:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	2220      	movs	r2, #32
 8015e62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_OK;
 8015e66:	2300      	movs	r3, #0
 8015e68:	e060      	b.n	8015f2c <HAL_UARTEx_ReceiveToIdle+0x1fe>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	69db      	ldr	r3, [r3, #28]
 8015e70:	f003 0320 	and.w	r3, r3, #32
 8015e74:	2b20      	cmp	r3, #32
 8015e76:	d12c      	bne.n	8015ed2 <HAL_UARTEx_ReceiveToIdle+0x1a4>
      {
        if (pdata8bits == NULL)
 8015e78:	69fb      	ldr	r3, [r7, #28]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d10c      	bne.n	8015e98 <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015e84:	b29a      	uxth	r2, r3
 8015e86:	8a7b      	ldrh	r3, [r7, #18]
 8015e88:	4013      	ands	r3, r2
 8015e8a:	b29a      	uxth	r2, r3
 8015e8c:	69bb      	ldr	r3, [r7, #24]
 8015e8e:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8015e90:	69bb      	ldr	r3, [r7, #24]
 8015e92:	3302      	adds	r3, #2
 8015e94:	61bb      	str	r3, [r7, #24]
 8015e96:	e00d      	b.n	8015eb4 <HAL_UARTEx_ReceiveToIdle+0x186>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015e9e:	b29b      	uxth	r3, r3
 8015ea0:	b2da      	uxtb	r2, r3
 8015ea2:	8a7b      	ldrh	r3, [r7, #18]
 8015ea4:	b2db      	uxtb	r3, r3
 8015ea6:	4013      	ands	r3, r2
 8015ea8:	b2da      	uxtb	r2, r3
 8015eaa:	69fb      	ldr	r3, [r7, #28]
 8015eac:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 8015eae:	69fb      	ldr	r3, [r7, #28]
 8015eb0:	3301      	adds	r3, #1
 8015eb2:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8015eb4:	683b      	ldr	r3, [r7, #0]
 8015eb6:	881b      	ldrh	r3, [r3, #0]
 8015eb8:	3301      	adds	r3, #1
 8015eba:	b29a      	uxth	r2, r3
 8015ebc:	683b      	ldr	r3, [r7, #0]
 8015ebe:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015ec6:	b29b      	uxth	r3, r3
 8015ec8:	3b01      	subs	r3, #1
 8015eca:	b29a      	uxth	r2, r3
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8015ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ed8:	d010      	beq.n	8015efc <HAL_UARTEx_ReceiveToIdle+0x1ce>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8015eda:	f7f5 f8a1 	bl	800b020 <HAL_GetTick>
 8015ede:	4602      	mov	r2, r0
 8015ee0:	697b      	ldr	r3, [r7, #20]
 8015ee2:	1ad3      	subs	r3, r2, r3
 8015ee4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015ee6:	429a      	cmp	r2, r3
 8015ee8:	d302      	bcc.n	8015ef0 <HAL_UARTEx_ReceiveToIdle+0x1c2>
 8015eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d105      	bne.n	8015efc <HAL_UARTEx_ReceiveToIdle+0x1ce>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	2220      	movs	r2, #32
 8015ef4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8015ef8:	2303      	movs	r3, #3
 8015efa:	e017      	b.n	8015f2c <HAL_UARTEx_ReceiveToIdle+0x1fe>
    while (huart->RxXferCount > 0U)
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015f02:	b29b      	uxth	r3, r3
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d198      	bne.n	8015e3a <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015f14:	b29b      	uxth	r3, r3
 8015f16:	1ad3      	subs	r3, r2, r3
 8015f18:	b29a      	uxth	r2, r3
 8015f1a:	683b      	ldr	r3, [r7, #0]
 8015f1c:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	2220      	movs	r2, #32
 8015f22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8015f26:	2300      	movs	r3, #0
 8015f28:	e000      	b.n	8015f2c <HAL_UARTEx_ReceiveToIdle+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8015f2a:	2302      	movs	r3, #2
  }
}
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	3720      	adds	r7, #32
 8015f30:	46bd      	mov	sp, r7
 8015f32:	bd80      	pop	{r7, pc}

08015f34 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015f34:	b580      	push	{r7, lr}
 8015f36:	b08c      	sub	sp, #48	@ 0x30
 8015f38:	af00      	add	r7, sp, #0
 8015f3a:	60f8      	str	r0, [r7, #12]
 8015f3c:	60b9      	str	r1, [r7, #8]
 8015f3e:	4613      	mov	r3, r2
 8015f40:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015f48:	2b20      	cmp	r3, #32
 8015f4a:	d142      	bne.n	8015fd2 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8015f4c:	68bb      	ldr	r3, [r7, #8]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d002      	beq.n	8015f58 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8015f52:	88fb      	ldrh	r3, [r7, #6]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d101      	bne.n	8015f5c <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8015f58:	2301      	movs	r3, #1
 8015f5a:	e03b      	b.n	8015fd4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	2201      	movs	r2, #1
 8015f60:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	2200      	movs	r2, #0
 8015f66:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8015f68:	88fb      	ldrh	r3, [r7, #6]
 8015f6a:	461a      	mov	r2, r3
 8015f6c:	68b9      	ldr	r1, [r7, #8]
 8015f6e:	68f8      	ldr	r0, [r7, #12]
 8015f70:	f7ff fc64 	bl	801583c <UART_Start_Receive_DMA>
 8015f74:	4603      	mov	r3, r0
 8015f76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8015f7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d124      	bne.n	8015fcc <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015f86:	2b01      	cmp	r3, #1
 8015f88:	d11d      	bne.n	8015fc6 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	2210      	movs	r2, #16
 8015f90:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f98:	69bb      	ldr	r3, [r7, #24]
 8015f9a:	e853 3f00 	ldrex	r3, [r3]
 8015f9e:	617b      	str	r3, [r7, #20]
   return(result);
 8015fa0:	697b      	ldr	r3, [r7, #20]
 8015fa2:	f043 0310 	orr.w	r3, r3, #16
 8015fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	461a      	mov	r2, r3
 8015fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8015fb2:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fb4:	6a39      	ldr	r1, [r7, #32]
 8015fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015fb8:	e841 2300 	strex	r3, r2, [r1]
 8015fbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8015fbe:	69fb      	ldr	r3, [r7, #28]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d1e6      	bne.n	8015f92 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8015fc4:	e002      	b.n	8015fcc <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8015fc6:	2301      	movs	r3, #1
 8015fc8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8015fcc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015fd0:	e000      	b.n	8015fd4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8015fd2:	2302      	movs	r3, #2
  }
}
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	3730      	adds	r7, #48	@ 0x30
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	bd80      	pop	{r7, pc}

08015fdc <atoi>:
 8015fdc:	220a      	movs	r2, #10
 8015fde:	2100      	movs	r1, #0
 8015fe0:	f000 b87c 	b.w	80160dc <strtol>

08015fe4 <_strtol_l.isra.0>:
 8015fe4:	2b24      	cmp	r3, #36	@ 0x24
 8015fe6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fea:	4686      	mov	lr, r0
 8015fec:	4690      	mov	r8, r2
 8015fee:	d801      	bhi.n	8015ff4 <_strtol_l.isra.0+0x10>
 8015ff0:	2b01      	cmp	r3, #1
 8015ff2:	d106      	bne.n	8016002 <_strtol_l.isra.0+0x1e>
 8015ff4:	f000 f92c 	bl	8016250 <__errno>
 8015ff8:	2316      	movs	r3, #22
 8015ffa:	6003      	str	r3, [r0, #0]
 8015ffc:	2000      	movs	r0, #0
 8015ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016002:	4834      	ldr	r0, [pc, #208]	@ (80160d4 <_strtol_l.isra.0+0xf0>)
 8016004:	460d      	mov	r5, r1
 8016006:	462a      	mov	r2, r5
 8016008:	f815 4b01 	ldrb.w	r4, [r5], #1
 801600c:	5d06      	ldrb	r6, [r0, r4]
 801600e:	f016 0608 	ands.w	r6, r6, #8
 8016012:	d1f8      	bne.n	8016006 <_strtol_l.isra.0+0x22>
 8016014:	2c2d      	cmp	r4, #45	@ 0x2d
 8016016:	d110      	bne.n	801603a <_strtol_l.isra.0+0x56>
 8016018:	782c      	ldrb	r4, [r5, #0]
 801601a:	2601      	movs	r6, #1
 801601c:	1c95      	adds	r5, r2, #2
 801601e:	f033 0210 	bics.w	r2, r3, #16
 8016022:	d115      	bne.n	8016050 <_strtol_l.isra.0+0x6c>
 8016024:	2c30      	cmp	r4, #48	@ 0x30
 8016026:	d10d      	bne.n	8016044 <_strtol_l.isra.0+0x60>
 8016028:	782a      	ldrb	r2, [r5, #0]
 801602a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801602e:	2a58      	cmp	r2, #88	@ 0x58
 8016030:	d108      	bne.n	8016044 <_strtol_l.isra.0+0x60>
 8016032:	786c      	ldrb	r4, [r5, #1]
 8016034:	3502      	adds	r5, #2
 8016036:	2310      	movs	r3, #16
 8016038:	e00a      	b.n	8016050 <_strtol_l.isra.0+0x6c>
 801603a:	2c2b      	cmp	r4, #43	@ 0x2b
 801603c:	bf04      	itt	eq
 801603e:	782c      	ldrbeq	r4, [r5, #0]
 8016040:	1c95      	addeq	r5, r2, #2
 8016042:	e7ec      	b.n	801601e <_strtol_l.isra.0+0x3a>
 8016044:	2b00      	cmp	r3, #0
 8016046:	d1f6      	bne.n	8016036 <_strtol_l.isra.0+0x52>
 8016048:	2c30      	cmp	r4, #48	@ 0x30
 801604a:	bf14      	ite	ne
 801604c:	230a      	movne	r3, #10
 801604e:	2308      	moveq	r3, #8
 8016050:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016054:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016058:	2200      	movs	r2, #0
 801605a:	fbbc f9f3 	udiv	r9, ip, r3
 801605e:	4610      	mov	r0, r2
 8016060:	fb03 ca19 	mls	sl, r3, r9, ip
 8016064:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8016068:	2f09      	cmp	r7, #9
 801606a:	d80f      	bhi.n	801608c <_strtol_l.isra.0+0xa8>
 801606c:	463c      	mov	r4, r7
 801606e:	42a3      	cmp	r3, r4
 8016070:	dd1b      	ble.n	80160aa <_strtol_l.isra.0+0xc6>
 8016072:	1c57      	adds	r7, r2, #1
 8016074:	d007      	beq.n	8016086 <_strtol_l.isra.0+0xa2>
 8016076:	4581      	cmp	r9, r0
 8016078:	d314      	bcc.n	80160a4 <_strtol_l.isra.0+0xc0>
 801607a:	d101      	bne.n	8016080 <_strtol_l.isra.0+0x9c>
 801607c:	45a2      	cmp	sl, r4
 801607e:	db11      	blt.n	80160a4 <_strtol_l.isra.0+0xc0>
 8016080:	fb00 4003 	mla	r0, r0, r3, r4
 8016084:	2201      	movs	r2, #1
 8016086:	f815 4b01 	ldrb.w	r4, [r5], #1
 801608a:	e7eb      	b.n	8016064 <_strtol_l.isra.0+0x80>
 801608c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016090:	2f19      	cmp	r7, #25
 8016092:	d801      	bhi.n	8016098 <_strtol_l.isra.0+0xb4>
 8016094:	3c37      	subs	r4, #55	@ 0x37
 8016096:	e7ea      	b.n	801606e <_strtol_l.isra.0+0x8a>
 8016098:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801609c:	2f19      	cmp	r7, #25
 801609e:	d804      	bhi.n	80160aa <_strtol_l.isra.0+0xc6>
 80160a0:	3c57      	subs	r4, #87	@ 0x57
 80160a2:	e7e4      	b.n	801606e <_strtol_l.isra.0+0x8a>
 80160a4:	f04f 32ff 	mov.w	r2, #4294967295
 80160a8:	e7ed      	b.n	8016086 <_strtol_l.isra.0+0xa2>
 80160aa:	1c53      	adds	r3, r2, #1
 80160ac:	d108      	bne.n	80160c0 <_strtol_l.isra.0+0xdc>
 80160ae:	2322      	movs	r3, #34	@ 0x22
 80160b0:	f8ce 3000 	str.w	r3, [lr]
 80160b4:	4660      	mov	r0, ip
 80160b6:	f1b8 0f00 	cmp.w	r8, #0
 80160ba:	d0a0      	beq.n	8015ffe <_strtol_l.isra.0+0x1a>
 80160bc:	1e69      	subs	r1, r5, #1
 80160be:	e006      	b.n	80160ce <_strtol_l.isra.0+0xea>
 80160c0:	b106      	cbz	r6, 80160c4 <_strtol_l.isra.0+0xe0>
 80160c2:	4240      	negs	r0, r0
 80160c4:	f1b8 0f00 	cmp.w	r8, #0
 80160c8:	d099      	beq.n	8015ffe <_strtol_l.isra.0+0x1a>
 80160ca:	2a00      	cmp	r2, #0
 80160cc:	d1f6      	bne.n	80160bc <_strtol_l.isra.0+0xd8>
 80160ce:	f8c8 1000 	str.w	r1, [r8]
 80160d2:	e794      	b.n	8015ffe <_strtol_l.isra.0+0x1a>
 80160d4:	08017957 	.word	0x08017957

080160d8 <_strtol_r>:
 80160d8:	f7ff bf84 	b.w	8015fe4 <_strtol_l.isra.0>

080160dc <strtol>:
 80160dc:	4613      	mov	r3, r2
 80160de:	460a      	mov	r2, r1
 80160e0:	4601      	mov	r1, r0
 80160e2:	4802      	ldr	r0, [pc, #8]	@ (80160ec <strtol+0x10>)
 80160e4:	6800      	ldr	r0, [r0, #0]
 80160e6:	f7ff bf7d 	b.w	8015fe4 <_strtol_l.isra.0>
 80160ea:	bf00      	nop
 80160ec:	2000029c 	.word	0x2000029c

080160f0 <siprintf>:
 80160f0:	b40e      	push	{r1, r2, r3}
 80160f2:	b510      	push	{r4, lr}
 80160f4:	b09d      	sub	sp, #116	@ 0x74
 80160f6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80160f8:	9002      	str	r0, [sp, #8]
 80160fa:	9006      	str	r0, [sp, #24]
 80160fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016100:	480a      	ldr	r0, [pc, #40]	@ (801612c <siprintf+0x3c>)
 8016102:	9107      	str	r1, [sp, #28]
 8016104:	9104      	str	r1, [sp, #16]
 8016106:	490a      	ldr	r1, [pc, #40]	@ (8016130 <siprintf+0x40>)
 8016108:	f853 2b04 	ldr.w	r2, [r3], #4
 801610c:	9105      	str	r1, [sp, #20]
 801610e:	2400      	movs	r4, #0
 8016110:	a902      	add	r1, sp, #8
 8016112:	6800      	ldr	r0, [r0, #0]
 8016114:	9301      	str	r3, [sp, #4]
 8016116:	941b      	str	r4, [sp, #108]	@ 0x6c
 8016118:	f000 fa30 	bl	801657c <_svfiprintf_r>
 801611c:	9b02      	ldr	r3, [sp, #8]
 801611e:	701c      	strb	r4, [r3, #0]
 8016120:	b01d      	add	sp, #116	@ 0x74
 8016122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016126:	b003      	add	sp, #12
 8016128:	4770      	bx	lr
 801612a:	bf00      	nop
 801612c:	2000029c 	.word	0x2000029c
 8016130:	ffff0208 	.word	0xffff0208

08016134 <siscanf>:
 8016134:	b40e      	push	{r1, r2, r3}
 8016136:	b570      	push	{r4, r5, r6, lr}
 8016138:	b09d      	sub	sp, #116	@ 0x74
 801613a:	ac21      	add	r4, sp, #132	@ 0x84
 801613c:	2500      	movs	r5, #0
 801613e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8016142:	f854 6b04 	ldr.w	r6, [r4], #4
 8016146:	f8ad 2014 	strh.w	r2, [sp, #20]
 801614a:	951b      	str	r5, [sp, #108]	@ 0x6c
 801614c:	9002      	str	r0, [sp, #8]
 801614e:	9006      	str	r0, [sp, #24]
 8016150:	f7ea f848 	bl	80001e4 <strlen>
 8016154:	4b0b      	ldr	r3, [pc, #44]	@ (8016184 <siscanf+0x50>)
 8016156:	9003      	str	r0, [sp, #12]
 8016158:	9007      	str	r0, [sp, #28]
 801615a:	480b      	ldr	r0, [pc, #44]	@ (8016188 <siscanf+0x54>)
 801615c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801615e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016162:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016166:	4632      	mov	r2, r6
 8016168:	4623      	mov	r3, r4
 801616a:	a902      	add	r1, sp, #8
 801616c:	6800      	ldr	r0, [r0, #0]
 801616e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8016170:	9514      	str	r5, [sp, #80]	@ 0x50
 8016172:	9401      	str	r4, [sp, #4]
 8016174:	f000 fb58 	bl	8016828 <__ssvfiscanf_r>
 8016178:	b01d      	add	sp, #116	@ 0x74
 801617a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801617e:	b003      	add	sp, #12
 8016180:	4770      	bx	lr
 8016182:	bf00      	nop
 8016184:	0801618d 	.word	0x0801618d
 8016188:	2000029c 	.word	0x2000029c

0801618c <__seofread>:
 801618c:	2000      	movs	r0, #0
 801618e:	4770      	bx	lr

08016190 <memcmp>:
 8016190:	b510      	push	{r4, lr}
 8016192:	3901      	subs	r1, #1
 8016194:	4402      	add	r2, r0
 8016196:	4290      	cmp	r0, r2
 8016198:	d101      	bne.n	801619e <memcmp+0xe>
 801619a:	2000      	movs	r0, #0
 801619c:	e005      	b.n	80161aa <memcmp+0x1a>
 801619e:	7803      	ldrb	r3, [r0, #0]
 80161a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80161a4:	42a3      	cmp	r3, r4
 80161a6:	d001      	beq.n	80161ac <memcmp+0x1c>
 80161a8:	1b18      	subs	r0, r3, r4
 80161aa:	bd10      	pop	{r4, pc}
 80161ac:	3001      	adds	r0, #1
 80161ae:	e7f2      	b.n	8016196 <memcmp+0x6>

080161b0 <memset>:
 80161b0:	4402      	add	r2, r0
 80161b2:	4603      	mov	r3, r0
 80161b4:	4293      	cmp	r3, r2
 80161b6:	d100      	bne.n	80161ba <memset+0xa>
 80161b8:	4770      	bx	lr
 80161ba:	f803 1b01 	strb.w	r1, [r3], #1
 80161be:	e7f9      	b.n	80161b4 <memset+0x4>

080161c0 <strchr>:
 80161c0:	b2c9      	uxtb	r1, r1
 80161c2:	4603      	mov	r3, r0
 80161c4:	4618      	mov	r0, r3
 80161c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80161ca:	b112      	cbz	r2, 80161d2 <strchr+0x12>
 80161cc:	428a      	cmp	r2, r1
 80161ce:	d1f9      	bne.n	80161c4 <strchr+0x4>
 80161d0:	4770      	bx	lr
 80161d2:	2900      	cmp	r1, #0
 80161d4:	bf18      	it	ne
 80161d6:	2000      	movne	r0, #0
 80161d8:	4770      	bx	lr

080161da <strncmp>:
 80161da:	b510      	push	{r4, lr}
 80161dc:	b16a      	cbz	r2, 80161fa <strncmp+0x20>
 80161de:	3901      	subs	r1, #1
 80161e0:	1884      	adds	r4, r0, r2
 80161e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80161e6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80161ea:	429a      	cmp	r2, r3
 80161ec:	d103      	bne.n	80161f6 <strncmp+0x1c>
 80161ee:	42a0      	cmp	r0, r4
 80161f0:	d001      	beq.n	80161f6 <strncmp+0x1c>
 80161f2:	2a00      	cmp	r2, #0
 80161f4:	d1f5      	bne.n	80161e2 <strncmp+0x8>
 80161f6:	1ad0      	subs	r0, r2, r3
 80161f8:	bd10      	pop	{r4, pc}
 80161fa:	4610      	mov	r0, r2
 80161fc:	e7fc      	b.n	80161f8 <strncmp+0x1e>

080161fe <strncpy>:
 80161fe:	b510      	push	{r4, lr}
 8016200:	3901      	subs	r1, #1
 8016202:	4603      	mov	r3, r0
 8016204:	b132      	cbz	r2, 8016214 <strncpy+0x16>
 8016206:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801620a:	f803 4b01 	strb.w	r4, [r3], #1
 801620e:	3a01      	subs	r2, #1
 8016210:	2c00      	cmp	r4, #0
 8016212:	d1f7      	bne.n	8016204 <strncpy+0x6>
 8016214:	441a      	add	r2, r3
 8016216:	2100      	movs	r1, #0
 8016218:	4293      	cmp	r3, r2
 801621a:	d100      	bne.n	801621e <strncpy+0x20>
 801621c:	bd10      	pop	{r4, pc}
 801621e:	f803 1b01 	strb.w	r1, [r3], #1
 8016222:	e7f9      	b.n	8016218 <strncpy+0x1a>

08016224 <strstr>:
 8016224:	780a      	ldrb	r2, [r1, #0]
 8016226:	b570      	push	{r4, r5, r6, lr}
 8016228:	b96a      	cbnz	r2, 8016246 <strstr+0x22>
 801622a:	bd70      	pop	{r4, r5, r6, pc}
 801622c:	429a      	cmp	r2, r3
 801622e:	d109      	bne.n	8016244 <strstr+0x20>
 8016230:	460c      	mov	r4, r1
 8016232:	4605      	mov	r5, r0
 8016234:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016238:	2b00      	cmp	r3, #0
 801623a:	d0f6      	beq.n	801622a <strstr+0x6>
 801623c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8016240:	429e      	cmp	r6, r3
 8016242:	d0f7      	beq.n	8016234 <strstr+0x10>
 8016244:	3001      	adds	r0, #1
 8016246:	7803      	ldrb	r3, [r0, #0]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d1ef      	bne.n	801622c <strstr+0x8>
 801624c:	4618      	mov	r0, r3
 801624e:	e7ec      	b.n	801622a <strstr+0x6>

08016250 <__errno>:
 8016250:	4b01      	ldr	r3, [pc, #4]	@ (8016258 <__errno+0x8>)
 8016252:	6818      	ldr	r0, [r3, #0]
 8016254:	4770      	bx	lr
 8016256:	bf00      	nop
 8016258:	2000029c 	.word	0x2000029c

0801625c <__libc_init_array>:
 801625c:	b570      	push	{r4, r5, r6, lr}
 801625e:	4d0d      	ldr	r5, [pc, #52]	@ (8016294 <__libc_init_array+0x38>)
 8016260:	4c0d      	ldr	r4, [pc, #52]	@ (8016298 <__libc_init_array+0x3c>)
 8016262:	1b64      	subs	r4, r4, r5
 8016264:	10a4      	asrs	r4, r4, #2
 8016266:	2600      	movs	r6, #0
 8016268:	42a6      	cmp	r6, r4
 801626a:	d109      	bne.n	8016280 <__libc_init_array+0x24>
 801626c:	4d0b      	ldr	r5, [pc, #44]	@ (801629c <__libc_init_array+0x40>)
 801626e:	4c0c      	ldr	r4, [pc, #48]	@ (80162a0 <__libc_init_array+0x44>)
 8016270:	f001 f86e 	bl	8017350 <_init>
 8016274:	1b64      	subs	r4, r4, r5
 8016276:	10a4      	asrs	r4, r4, #2
 8016278:	2600      	movs	r6, #0
 801627a:	42a6      	cmp	r6, r4
 801627c:	d105      	bne.n	801628a <__libc_init_array+0x2e>
 801627e:	bd70      	pop	{r4, r5, r6, pc}
 8016280:	f855 3b04 	ldr.w	r3, [r5], #4
 8016284:	4798      	blx	r3
 8016286:	3601      	adds	r6, #1
 8016288:	e7ee      	b.n	8016268 <__libc_init_array+0xc>
 801628a:	f855 3b04 	ldr.w	r3, [r5], #4
 801628e:	4798      	blx	r3
 8016290:	3601      	adds	r6, #1
 8016292:	e7f2      	b.n	801627a <__libc_init_array+0x1e>
 8016294:	08017ab0 	.word	0x08017ab0
 8016298:	08017ab0 	.word	0x08017ab0
 801629c:	08017ab0 	.word	0x08017ab0
 80162a0:	08017ab4 	.word	0x08017ab4

080162a4 <__retarget_lock_acquire_recursive>:
 80162a4:	4770      	bx	lr

080162a6 <__retarget_lock_release_recursive>:
 80162a6:	4770      	bx	lr

080162a8 <strcpy>:
 80162a8:	4603      	mov	r3, r0
 80162aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80162ae:	f803 2b01 	strb.w	r2, [r3], #1
 80162b2:	2a00      	cmp	r2, #0
 80162b4:	d1f9      	bne.n	80162aa <strcpy+0x2>
 80162b6:	4770      	bx	lr

080162b8 <memcpy>:
 80162b8:	440a      	add	r2, r1
 80162ba:	4291      	cmp	r1, r2
 80162bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80162c0:	d100      	bne.n	80162c4 <memcpy+0xc>
 80162c2:	4770      	bx	lr
 80162c4:	b510      	push	{r4, lr}
 80162c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80162ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80162ce:	4291      	cmp	r1, r2
 80162d0:	d1f9      	bne.n	80162c6 <memcpy+0xe>
 80162d2:	bd10      	pop	{r4, pc}

080162d4 <_free_r>:
 80162d4:	b538      	push	{r3, r4, r5, lr}
 80162d6:	4605      	mov	r5, r0
 80162d8:	2900      	cmp	r1, #0
 80162da:	d041      	beq.n	8016360 <_free_r+0x8c>
 80162dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80162e0:	1f0c      	subs	r4, r1, #4
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	bfb8      	it	lt
 80162e6:	18e4      	addlt	r4, r4, r3
 80162e8:	f000 f8e0 	bl	80164ac <__malloc_lock>
 80162ec:	4a1d      	ldr	r2, [pc, #116]	@ (8016364 <_free_r+0x90>)
 80162ee:	6813      	ldr	r3, [r2, #0]
 80162f0:	b933      	cbnz	r3, 8016300 <_free_r+0x2c>
 80162f2:	6063      	str	r3, [r4, #4]
 80162f4:	6014      	str	r4, [r2, #0]
 80162f6:	4628      	mov	r0, r5
 80162f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80162fc:	f000 b8dc 	b.w	80164b8 <__malloc_unlock>
 8016300:	42a3      	cmp	r3, r4
 8016302:	d908      	bls.n	8016316 <_free_r+0x42>
 8016304:	6820      	ldr	r0, [r4, #0]
 8016306:	1821      	adds	r1, r4, r0
 8016308:	428b      	cmp	r3, r1
 801630a:	bf01      	itttt	eq
 801630c:	6819      	ldreq	r1, [r3, #0]
 801630e:	685b      	ldreq	r3, [r3, #4]
 8016310:	1809      	addeq	r1, r1, r0
 8016312:	6021      	streq	r1, [r4, #0]
 8016314:	e7ed      	b.n	80162f2 <_free_r+0x1e>
 8016316:	461a      	mov	r2, r3
 8016318:	685b      	ldr	r3, [r3, #4]
 801631a:	b10b      	cbz	r3, 8016320 <_free_r+0x4c>
 801631c:	42a3      	cmp	r3, r4
 801631e:	d9fa      	bls.n	8016316 <_free_r+0x42>
 8016320:	6811      	ldr	r1, [r2, #0]
 8016322:	1850      	adds	r0, r2, r1
 8016324:	42a0      	cmp	r0, r4
 8016326:	d10b      	bne.n	8016340 <_free_r+0x6c>
 8016328:	6820      	ldr	r0, [r4, #0]
 801632a:	4401      	add	r1, r0
 801632c:	1850      	adds	r0, r2, r1
 801632e:	4283      	cmp	r3, r0
 8016330:	6011      	str	r1, [r2, #0]
 8016332:	d1e0      	bne.n	80162f6 <_free_r+0x22>
 8016334:	6818      	ldr	r0, [r3, #0]
 8016336:	685b      	ldr	r3, [r3, #4]
 8016338:	6053      	str	r3, [r2, #4]
 801633a:	4408      	add	r0, r1
 801633c:	6010      	str	r0, [r2, #0]
 801633e:	e7da      	b.n	80162f6 <_free_r+0x22>
 8016340:	d902      	bls.n	8016348 <_free_r+0x74>
 8016342:	230c      	movs	r3, #12
 8016344:	602b      	str	r3, [r5, #0]
 8016346:	e7d6      	b.n	80162f6 <_free_r+0x22>
 8016348:	6820      	ldr	r0, [r4, #0]
 801634a:	1821      	adds	r1, r4, r0
 801634c:	428b      	cmp	r3, r1
 801634e:	bf04      	itt	eq
 8016350:	6819      	ldreq	r1, [r3, #0]
 8016352:	685b      	ldreq	r3, [r3, #4]
 8016354:	6063      	str	r3, [r4, #4]
 8016356:	bf04      	itt	eq
 8016358:	1809      	addeq	r1, r1, r0
 801635a:	6021      	streq	r1, [r4, #0]
 801635c:	6054      	str	r4, [r2, #4]
 801635e:	e7ca      	b.n	80162f6 <_free_r+0x22>
 8016360:	bd38      	pop	{r3, r4, r5, pc}
 8016362:	bf00      	nop
 8016364:	20005b58 	.word	0x20005b58

08016368 <sbrk_aligned>:
 8016368:	b570      	push	{r4, r5, r6, lr}
 801636a:	4e0f      	ldr	r6, [pc, #60]	@ (80163a8 <sbrk_aligned+0x40>)
 801636c:	460c      	mov	r4, r1
 801636e:	6831      	ldr	r1, [r6, #0]
 8016370:	4605      	mov	r5, r0
 8016372:	b911      	cbnz	r1, 801637a <sbrk_aligned+0x12>
 8016374:	f000 ff36 	bl	80171e4 <_sbrk_r>
 8016378:	6030      	str	r0, [r6, #0]
 801637a:	4621      	mov	r1, r4
 801637c:	4628      	mov	r0, r5
 801637e:	f000 ff31 	bl	80171e4 <_sbrk_r>
 8016382:	1c43      	adds	r3, r0, #1
 8016384:	d103      	bne.n	801638e <sbrk_aligned+0x26>
 8016386:	f04f 34ff 	mov.w	r4, #4294967295
 801638a:	4620      	mov	r0, r4
 801638c:	bd70      	pop	{r4, r5, r6, pc}
 801638e:	1cc4      	adds	r4, r0, #3
 8016390:	f024 0403 	bic.w	r4, r4, #3
 8016394:	42a0      	cmp	r0, r4
 8016396:	d0f8      	beq.n	801638a <sbrk_aligned+0x22>
 8016398:	1a21      	subs	r1, r4, r0
 801639a:	4628      	mov	r0, r5
 801639c:	f000 ff22 	bl	80171e4 <_sbrk_r>
 80163a0:	3001      	adds	r0, #1
 80163a2:	d1f2      	bne.n	801638a <sbrk_aligned+0x22>
 80163a4:	e7ef      	b.n	8016386 <sbrk_aligned+0x1e>
 80163a6:	bf00      	nop
 80163a8:	20005b54 	.word	0x20005b54

080163ac <_malloc_r>:
 80163ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163b0:	1ccd      	adds	r5, r1, #3
 80163b2:	f025 0503 	bic.w	r5, r5, #3
 80163b6:	3508      	adds	r5, #8
 80163b8:	2d0c      	cmp	r5, #12
 80163ba:	bf38      	it	cc
 80163bc:	250c      	movcc	r5, #12
 80163be:	2d00      	cmp	r5, #0
 80163c0:	4606      	mov	r6, r0
 80163c2:	db01      	blt.n	80163c8 <_malloc_r+0x1c>
 80163c4:	42a9      	cmp	r1, r5
 80163c6:	d904      	bls.n	80163d2 <_malloc_r+0x26>
 80163c8:	230c      	movs	r3, #12
 80163ca:	6033      	str	r3, [r6, #0]
 80163cc:	2000      	movs	r0, #0
 80163ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80163d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80164a8 <_malloc_r+0xfc>
 80163d6:	f000 f869 	bl	80164ac <__malloc_lock>
 80163da:	f8d8 3000 	ldr.w	r3, [r8]
 80163de:	461c      	mov	r4, r3
 80163e0:	bb44      	cbnz	r4, 8016434 <_malloc_r+0x88>
 80163e2:	4629      	mov	r1, r5
 80163e4:	4630      	mov	r0, r6
 80163e6:	f7ff ffbf 	bl	8016368 <sbrk_aligned>
 80163ea:	1c43      	adds	r3, r0, #1
 80163ec:	4604      	mov	r4, r0
 80163ee:	d158      	bne.n	80164a2 <_malloc_r+0xf6>
 80163f0:	f8d8 4000 	ldr.w	r4, [r8]
 80163f4:	4627      	mov	r7, r4
 80163f6:	2f00      	cmp	r7, #0
 80163f8:	d143      	bne.n	8016482 <_malloc_r+0xd6>
 80163fa:	2c00      	cmp	r4, #0
 80163fc:	d04b      	beq.n	8016496 <_malloc_r+0xea>
 80163fe:	6823      	ldr	r3, [r4, #0]
 8016400:	4639      	mov	r1, r7
 8016402:	4630      	mov	r0, r6
 8016404:	eb04 0903 	add.w	r9, r4, r3
 8016408:	f000 feec 	bl	80171e4 <_sbrk_r>
 801640c:	4581      	cmp	r9, r0
 801640e:	d142      	bne.n	8016496 <_malloc_r+0xea>
 8016410:	6821      	ldr	r1, [r4, #0]
 8016412:	1a6d      	subs	r5, r5, r1
 8016414:	4629      	mov	r1, r5
 8016416:	4630      	mov	r0, r6
 8016418:	f7ff ffa6 	bl	8016368 <sbrk_aligned>
 801641c:	3001      	adds	r0, #1
 801641e:	d03a      	beq.n	8016496 <_malloc_r+0xea>
 8016420:	6823      	ldr	r3, [r4, #0]
 8016422:	442b      	add	r3, r5
 8016424:	6023      	str	r3, [r4, #0]
 8016426:	f8d8 3000 	ldr.w	r3, [r8]
 801642a:	685a      	ldr	r2, [r3, #4]
 801642c:	bb62      	cbnz	r2, 8016488 <_malloc_r+0xdc>
 801642e:	f8c8 7000 	str.w	r7, [r8]
 8016432:	e00f      	b.n	8016454 <_malloc_r+0xa8>
 8016434:	6822      	ldr	r2, [r4, #0]
 8016436:	1b52      	subs	r2, r2, r5
 8016438:	d420      	bmi.n	801647c <_malloc_r+0xd0>
 801643a:	2a0b      	cmp	r2, #11
 801643c:	d917      	bls.n	801646e <_malloc_r+0xc2>
 801643e:	1961      	adds	r1, r4, r5
 8016440:	42a3      	cmp	r3, r4
 8016442:	6025      	str	r5, [r4, #0]
 8016444:	bf18      	it	ne
 8016446:	6059      	strne	r1, [r3, #4]
 8016448:	6863      	ldr	r3, [r4, #4]
 801644a:	bf08      	it	eq
 801644c:	f8c8 1000 	streq.w	r1, [r8]
 8016450:	5162      	str	r2, [r4, r5]
 8016452:	604b      	str	r3, [r1, #4]
 8016454:	4630      	mov	r0, r6
 8016456:	f000 f82f 	bl	80164b8 <__malloc_unlock>
 801645a:	f104 000b 	add.w	r0, r4, #11
 801645e:	1d23      	adds	r3, r4, #4
 8016460:	f020 0007 	bic.w	r0, r0, #7
 8016464:	1ac2      	subs	r2, r0, r3
 8016466:	bf1c      	itt	ne
 8016468:	1a1b      	subne	r3, r3, r0
 801646a:	50a3      	strne	r3, [r4, r2]
 801646c:	e7af      	b.n	80163ce <_malloc_r+0x22>
 801646e:	6862      	ldr	r2, [r4, #4]
 8016470:	42a3      	cmp	r3, r4
 8016472:	bf0c      	ite	eq
 8016474:	f8c8 2000 	streq.w	r2, [r8]
 8016478:	605a      	strne	r2, [r3, #4]
 801647a:	e7eb      	b.n	8016454 <_malloc_r+0xa8>
 801647c:	4623      	mov	r3, r4
 801647e:	6864      	ldr	r4, [r4, #4]
 8016480:	e7ae      	b.n	80163e0 <_malloc_r+0x34>
 8016482:	463c      	mov	r4, r7
 8016484:	687f      	ldr	r7, [r7, #4]
 8016486:	e7b6      	b.n	80163f6 <_malloc_r+0x4a>
 8016488:	461a      	mov	r2, r3
 801648a:	685b      	ldr	r3, [r3, #4]
 801648c:	42a3      	cmp	r3, r4
 801648e:	d1fb      	bne.n	8016488 <_malloc_r+0xdc>
 8016490:	2300      	movs	r3, #0
 8016492:	6053      	str	r3, [r2, #4]
 8016494:	e7de      	b.n	8016454 <_malloc_r+0xa8>
 8016496:	230c      	movs	r3, #12
 8016498:	6033      	str	r3, [r6, #0]
 801649a:	4630      	mov	r0, r6
 801649c:	f000 f80c 	bl	80164b8 <__malloc_unlock>
 80164a0:	e794      	b.n	80163cc <_malloc_r+0x20>
 80164a2:	6005      	str	r5, [r0, #0]
 80164a4:	e7d6      	b.n	8016454 <_malloc_r+0xa8>
 80164a6:	bf00      	nop
 80164a8:	20005b58 	.word	0x20005b58

080164ac <__malloc_lock>:
 80164ac:	4801      	ldr	r0, [pc, #4]	@ (80164b4 <__malloc_lock+0x8>)
 80164ae:	f7ff bef9 	b.w	80162a4 <__retarget_lock_acquire_recursive>
 80164b2:	bf00      	nop
 80164b4:	20005b50 	.word	0x20005b50

080164b8 <__malloc_unlock>:
 80164b8:	4801      	ldr	r0, [pc, #4]	@ (80164c0 <__malloc_unlock+0x8>)
 80164ba:	f7ff bef4 	b.w	80162a6 <__retarget_lock_release_recursive>
 80164be:	bf00      	nop
 80164c0:	20005b50 	.word	0x20005b50

080164c4 <__ssputs_r>:
 80164c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164c8:	688e      	ldr	r6, [r1, #8]
 80164ca:	461f      	mov	r7, r3
 80164cc:	42be      	cmp	r6, r7
 80164ce:	680b      	ldr	r3, [r1, #0]
 80164d0:	4682      	mov	sl, r0
 80164d2:	460c      	mov	r4, r1
 80164d4:	4690      	mov	r8, r2
 80164d6:	d82d      	bhi.n	8016534 <__ssputs_r+0x70>
 80164d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80164dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80164e0:	d026      	beq.n	8016530 <__ssputs_r+0x6c>
 80164e2:	6965      	ldr	r5, [r4, #20]
 80164e4:	6909      	ldr	r1, [r1, #16]
 80164e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80164ea:	eba3 0901 	sub.w	r9, r3, r1
 80164ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80164f2:	1c7b      	adds	r3, r7, #1
 80164f4:	444b      	add	r3, r9
 80164f6:	106d      	asrs	r5, r5, #1
 80164f8:	429d      	cmp	r5, r3
 80164fa:	bf38      	it	cc
 80164fc:	461d      	movcc	r5, r3
 80164fe:	0553      	lsls	r3, r2, #21
 8016500:	d527      	bpl.n	8016552 <__ssputs_r+0x8e>
 8016502:	4629      	mov	r1, r5
 8016504:	f7ff ff52 	bl	80163ac <_malloc_r>
 8016508:	4606      	mov	r6, r0
 801650a:	b360      	cbz	r0, 8016566 <__ssputs_r+0xa2>
 801650c:	6921      	ldr	r1, [r4, #16]
 801650e:	464a      	mov	r2, r9
 8016510:	f7ff fed2 	bl	80162b8 <memcpy>
 8016514:	89a3      	ldrh	r3, [r4, #12]
 8016516:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801651a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801651e:	81a3      	strh	r3, [r4, #12]
 8016520:	6126      	str	r6, [r4, #16]
 8016522:	6165      	str	r5, [r4, #20]
 8016524:	444e      	add	r6, r9
 8016526:	eba5 0509 	sub.w	r5, r5, r9
 801652a:	6026      	str	r6, [r4, #0]
 801652c:	60a5      	str	r5, [r4, #8]
 801652e:	463e      	mov	r6, r7
 8016530:	42be      	cmp	r6, r7
 8016532:	d900      	bls.n	8016536 <__ssputs_r+0x72>
 8016534:	463e      	mov	r6, r7
 8016536:	6820      	ldr	r0, [r4, #0]
 8016538:	4632      	mov	r2, r6
 801653a:	4641      	mov	r1, r8
 801653c:	f000 fe37 	bl	80171ae <memmove>
 8016540:	68a3      	ldr	r3, [r4, #8]
 8016542:	1b9b      	subs	r3, r3, r6
 8016544:	60a3      	str	r3, [r4, #8]
 8016546:	6823      	ldr	r3, [r4, #0]
 8016548:	4433      	add	r3, r6
 801654a:	6023      	str	r3, [r4, #0]
 801654c:	2000      	movs	r0, #0
 801654e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016552:	462a      	mov	r2, r5
 8016554:	f000 fe56 	bl	8017204 <_realloc_r>
 8016558:	4606      	mov	r6, r0
 801655a:	2800      	cmp	r0, #0
 801655c:	d1e0      	bne.n	8016520 <__ssputs_r+0x5c>
 801655e:	6921      	ldr	r1, [r4, #16]
 8016560:	4650      	mov	r0, sl
 8016562:	f7ff feb7 	bl	80162d4 <_free_r>
 8016566:	230c      	movs	r3, #12
 8016568:	f8ca 3000 	str.w	r3, [sl]
 801656c:	89a3      	ldrh	r3, [r4, #12]
 801656e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016572:	81a3      	strh	r3, [r4, #12]
 8016574:	f04f 30ff 	mov.w	r0, #4294967295
 8016578:	e7e9      	b.n	801654e <__ssputs_r+0x8a>
	...

0801657c <_svfiprintf_r>:
 801657c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016580:	4698      	mov	r8, r3
 8016582:	898b      	ldrh	r3, [r1, #12]
 8016584:	061b      	lsls	r3, r3, #24
 8016586:	b09d      	sub	sp, #116	@ 0x74
 8016588:	4607      	mov	r7, r0
 801658a:	460d      	mov	r5, r1
 801658c:	4614      	mov	r4, r2
 801658e:	d510      	bpl.n	80165b2 <_svfiprintf_r+0x36>
 8016590:	690b      	ldr	r3, [r1, #16]
 8016592:	b973      	cbnz	r3, 80165b2 <_svfiprintf_r+0x36>
 8016594:	2140      	movs	r1, #64	@ 0x40
 8016596:	f7ff ff09 	bl	80163ac <_malloc_r>
 801659a:	6028      	str	r0, [r5, #0]
 801659c:	6128      	str	r0, [r5, #16]
 801659e:	b930      	cbnz	r0, 80165ae <_svfiprintf_r+0x32>
 80165a0:	230c      	movs	r3, #12
 80165a2:	603b      	str	r3, [r7, #0]
 80165a4:	f04f 30ff 	mov.w	r0, #4294967295
 80165a8:	b01d      	add	sp, #116	@ 0x74
 80165aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165ae:	2340      	movs	r3, #64	@ 0x40
 80165b0:	616b      	str	r3, [r5, #20]
 80165b2:	2300      	movs	r3, #0
 80165b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80165b6:	2320      	movs	r3, #32
 80165b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80165bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80165c0:	2330      	movs	r3, #48	@ 0x30
 80165c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016760 <_svfiprintf_r+0x1e4>
 80165c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80165ca:	f04f 0901 	mov.w	r9, #1
 80165ce:	4623      	mov	r3, r4
 80165d0:	469a      	mov	sl, r3
 80165d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80165d6:	b10a      	cbz	r2, 80165dc <_svfiprintf_r+0x60>
 80165d8:	2a25      	cmp	r2, #37	@ 0x25
 80165da:	d1f9      	bne.n	80165d0 <_svfiprintf_r+0x54>
 80165dc:	ebba 0b04 	subs.w	fp, sl, r4
 80165e0:	d00b      	beq.n	80165fa <_svfiprintf_r+0x7e>
 80165e2:	465b      	mov	r3, fp
 80165e4:	4622      	mov	r2, r4
 80165e6:	4629      	mov	r1, r5
 80165e8:	4638      	mov	r0, r7
 80165ea:	f7ff ff6b 	bl	80164c4 <__ssputs_r>
 80165ee:	3001      	adds	r0, #1
 80165f0:	f000 80a7 	beq.w	8016742 <_svfiprintf_r+0x1c6>
 80165f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80165f6:	445a      	add	r2, fp
 80165f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80165fa:	f89a 3000 	ldrb.w	r3, [sl]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	f000 809f 	beq.w	8016742 <_svfiprintf_r+0x1c6>
 8016604:	2300      	movs	r3, #0
 8016606:	f04f 32ff 	mov.w	r2, #4294967295
 801660a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801660e:	f10a 0a01 	add.w	sl, sl, #1
 8016612:	9304      	str	r3, [sp, #16]
 8016614:	9307      	str	r3, [sp, #28]
 8016616:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801661a:	931a      	str	r3, [sp, #104]	@ 0x68
 801661c:	4654      	mov	r4, sl
 801661e:	2205      	movs	r2, #5
 8016620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016624:	484e      	ldr	r0, [pc, #312]	@ (8016760 <_svfiprintf_r+0x1e4>)
 8016626:	f7e9 fdeb 	bl	8000200 <memchr>
 801662a:	9a04      	ldr	r2, [sp, #16]
 801662c:	b9d8      	cbnz	r0, 8016666 <_svfiprintf_r+0xea>
 801662e:	06d0      	lsls	r0, r2, #27
 8016630:	bf44      	itt	mi
 8016632:	2320      	movmi	r3, #32
 8016634:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016638:	0711      	lsls	r1, r2, #28
 801663a:	bf44      	itt	mi
 801663c:	232b      	movmi	r3, #43	@ 0x2b
 801663e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016642:	f89a 3000 	ldrb.w	r3, [sl]
 8016646:	2b2a      	cmp	r3, #42	@ 0x2a
 8016648:	d015      	beq.n	8016676 <_svfiprintf_r+0xfa>
 801664a:	9a07      	ldr	r2, [sp, #28]
 801664c:	4654      	mov	r4, sl
 801664e:	2000      	movs	r0, #0
 8016650:	f04f 0c0a 	mov.w	ip, #10
 8016654:	4621      	mov	r1, r4
 8016656:	f811 3b01 	ldrb.w	r3, [r1], #1
 801665a:	3b30      	subs	r3, #48	@ 0x30
 801665c:	2b09      	cmp	r3, #9
 801665e:	d94b      	bls.n	80166f8 <_svfiprintf_r+0x17c>
 8016660:	b1b0      	cbz	r0, 8016690 <_svfiprintf_r+0x114>
 8016662:	9207      	str	r2, [sp, #28]
 8016664:	e014      	b.n	8016690 <_svfiprintf_r+0x114>
 8016666:	eba0 0308 	sub.w	r3, r0, r8
 801666a:	fa09 f303 	lsl.w	r3, r9, r3
 801666e:	4313      	orrs	r3, r2
 8016670:	9304      	str	r3, [sp, #16]
 8016672:	46a2      	mov	sl, r4
 8016674:	e7d2      	b.n	801661c <_svfiprintf_r+0xa0>
 8016676:	9b03      	ldr	r3, [sp, #12]
 8016678:	1d19      	adds	r1, r3, #4
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	9103      	str	r1, [sp, #12]
 801667e:	2b00      	cmp	r3, #0
 8016680:	bfbb      	ittet	lt
 8016682:	425b      	neglt	r3, r3
 8016684:	f042 0202 	orrlt.w	r2, r2, #2
 8016688:	9307      	strge	r3, [sp, #28]
 801668a:	9307      	strlt	r3, [sp, #28]
 801668c:	bfb8      	it	lt
 801668e:	9204      	strlt	r2, [sp, #16]
 8016690:	7823      	ldrb	r3, [r4, #0]
 8016692:	2b2e      	cmp	r3, #46	@ 0x2e
 8016694:	d10a      	bne.n	80166ac <_svfiprintf_r+0x130>
 8016696:	7863      	ldrb	r3, [r4, #1]
 8016698:	2b2a      	cmp	r3, #42	@ 0x2a
 801669a:	d132      	bne.n	8016702 <_svfiprintf_r+0x186>
 801669c:	9b03      	ldr	r3, [sp, #12]
 801669e:	1d1a      	adds	r2, r3, #4
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	9203      	str	r2, [sp, #12]
 80166a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80166a8:	3402      	adds	r4, #2
 80166aa:	9305      	str	r3, [sp, #20]
 80166ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016770 <_svfiprintf_r+0x1f4>
 80166b0:	7821      	ldrb	r1, [r4, #0]
 80166b2:	2203      	movs	r2, #3
 80166b4:	4650      	mov	r0, sl
 80166b6:	f7e9 fda3 	bl	8000200 <memchr>
 80166ba:	b138      	cbz	r0, 80166cc <_svfiprintf_r+0x150>
 80166bc:	9b04      	ldr	r3, [sp, #16]
 80166be:	eba0 000a 	sub.w	r0, r0, sl
 80166c2:	2240      	movs	r2, #64	@ 0x40
 80166c4:	4082      	lsls	r2, r0
 80166c6:	4313      	orrs	r3, r2
 80166c8:	3401      	adds	r4, #1
 80166ca:	9304      	str	r3, [sp, #16]
 80166cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80166d0:	4824      	ldr	r0, [pc, #144]	@ (8016764 <_svfiprintf_r+0x1e8>)
 80166d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80166d6:	2206      	movs	r2, #6
 80166d8:	f7e9 fd92 	bl	8000200 <memchr>
 80166dc:	2800      	cmp	r0, #0
 80166de:	d036      	beq.n	801674e <_svfiprintf_r+0x1d2>
 80166e0:	4b21      	ldr	r3, [pc, #132]	@ (8016768 <_svfiprintf_r+0x1ec>)
 80166e2:	bb1b      	cbnz	r3, 801672c <_svfiprintf_r+0x1b0>
 80166e4:	9b03      	ldr	r3, [sp, #12]
 80166e6:	3307      	adds	r3, #7
 80166e8:	f023 0307 	bic.w	r3, r3, #7
 80166ec:	3308      	adds	r3, #8
 80166ee:	9303      	str	r3, [sp, #12]
 80166f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80166f2:	4433      	add	r3, r6
 80166f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80166f6:	e76a      	b.n	80165ce <_svfiprintf_r+0x52>
 80166f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80166fc:	460c      	mov	r4, r1
 80166fe:	2001      	movs	r0, #1
 8016700:	e7a8      	b.n	8016654 <_svfiprintf_r+0xd8>
 8016702:	2300      	movs	r3, #0
 8016704:	3401      	adds	r4, #1
 8016706:	9305      	str	r3, [sp, #20]
 8016708:	4619      	mov	r1, r3
 801670a:	f04f 0c0a 	mov.w	ip, #10
 801670e:	4620      	mov	r0, r4
 8016710:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016714:	3a30      	subs	r2, #48	@ 0x30
 8016716:	2a09      	cmp	r2, #9
 8016718:	d903      	bls.n	8016722 <_svfiprintf_r+0x1a6>
 801671a:	2b00      	cmp	r3, #0
 801671c:	d0c6      	beq.n	80166ac <_svfiprintf_r+0x130>
 801671e:	9105      	str	r1, [sp, #20]
 8016720:	e7c4      	b.n	80166ac <_svfiprintf_r+0x130>
 8016722:	fb0c 2101 	mla	r1, ip, r1, r2
 8016726:	4604      	mov	r4, r0
 8016728:	2301      	movs	r3, #1
 801672a:	e7f0      	b.n	801670e <_svfiprintf_r+0x192>
 801672c:	ab03      	add	r3, sp, #12
 801672e:	9300      	str	r3, [sp, #0]
 8016730:	462a      	mov	r2, r5
 8016732:	4b0e      	ldr	r3, [pc, #56]	@ (801676c <_svfiprintf_r+0x1f0>)
 8016734:	a904      	add	r1, sp, #16
 8016736:	4638      	mov	r0, r7
 8016738:	f3af 8000 	nop.w
 801673c:	1c42      	adds	r2, r0, #1
 801673e:	4606      	mov	r6, r0
 8016740:	d1d6      	bne.n	80166f0 <_svfiprintf_r+0x174>
 8016742:	89ab      	ldrh	r3, [r5, #12]
 8016744:	065b      	lsls	r3, r3, #25
 8016746:	f53f af2d 	bmi.w	80165a4 <_svfiprintf_r+0x28>
 801674a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801674c:	e72c      	b.n	80165a8 <_svfiprintf_r+0x2c>
 801674e:	ab03      	add	r3, sp, #12
 8016750:	9300      	str	r3, [sp, #0]
 8016752:	462a      	mov	r2, r5
 8016754:	4b05      	ldr	r3, [pc, #20]	@ (801676c <_svfiprintf_r+0x1f0>)
 8016756:	a904      	add	r1, sp, #16
 8016758:	4638      	mov	r0, r7
 801675a:	f000 fa49 	bl	8016bf0 <_printf_i>
 801675e:	e7ed      	b.n	801673c <_svfiprintf_r+0x1c0>
 8016760:	08017a57 	.word	0x08017a57
 8016764:	08017a61 	.word	0x08017a61
 8016768:	00000000 	.word	0x00000000
 801676c:	080164c5 	.word	0x080164c5
 8016770:	08017a5d 	.word	0x08017a5d

08016774 <_sungetc_r>:
 8016774:	b538      	push	{r3, r4, r5, lr}
 8016776:	1c4b      	adds	r3, r1, #1
 8016778:	4614      	mov	r4, r2
 801677a:	d103      	bne.n	8016784 <_sungetc_r+0x10>
 801677c:	f04f 35ff 	mov.w	r5, #4294967295
 8016780:	4628      	mov	r0, r5
 8016782:	bd38      	pop	{r3, r4, r5, pc}
 8016784:	8993      	ldrh	r3, [r2, #12]
 8016786:	f023 0320 	bic.w	r3, r3, #32
 801678a:	8193      	strh	r3, [r2, #12]
 801678c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801678e:	6852      	ldr	r2, [r2, #4]
 8016790:	b2cd      	uxtb	r5, r1
 8016792:	b18b      	cbz	r3, 80167b8 <_sungetc_r+0x44>
 8016794:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8016796:	4293      	cmp	r3, r2
 8016798:	dd08      	ble.n	80167ac <_sungetc_r+0x38>
 801679a:	6823      	ldr	r3, [r4, #0]
 801679c:	1e5a      	subs	r2, r3, #1
 801679e:	6022      	str	r2, [r4, #0]
 80167a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80167a4:	6863      	ldr	r3, [r4, #4]
 80167a6:	3301      	adds	r3, #1
 80167a8:	6063      	str	r3, [r4, #4]
 80167aa:	e7e9      	b.n	8016780 <_sungetc_r+0xc>
 80167ac:	4621      	mov	r1, r4
 80167ae:	f000 fcc4 	bl	801713a <__submore>
 80167b2:	2800      	cmp	r0, #0
 80167b4:	d0f1      	beq.n	801679a <_sungetc_r+0x26>
 80167b6:	e7e1      	b.n	801677c <_sungetc_r+0x8>
 80167b8:	6921      	ldr	r1, [r4, #16]
 80167ba:	6823      	ldr	r3, [r4, #0]
 80167bc:	b151      	cbz	r1, 80167d4 <_sungetc_r+0x60>
 80167be:	4299      	cmp	r1, r3
 80167c0:	d208      	bcs.n	80167d4 <_sungetc_r+0x60>
 80167c2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80167c6:	42a9      	cmp	r1, r5
 80167c8:	d104      	bne.n	80167d4 <_sungetc_r+0x60>
 80167ca:	3b01      	subs	r3, #1
 80167cc:	3201      	adds	r2, #1
 80167ce:	6023      	str	r3, [r4, #0]
 80167d0:	6062      	str	r2, [r4, #4]
 80167d2:	e7d5      	b.n	8016780 <_sungetc_r+0xc>
 80167d4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80167d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80167dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80167de:	2303      	movs	r3, #3
 80167e0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80167e2:	4623      	mov	r3, r4
 80167e4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80167e8:	6023      	str	r3, [r4, #0]
 80167ea:	2301      	movs	r3, #1
 80167ec:	e7dc      	b.n	80167a8 <_sungetc_r+0x34>

080167ee <__ssrefill_r>:
 80167ee:	b510      	push	{r4, lr}
 80167f0:	460c      	mov	r4, r1
 80167f2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80167f4:	b169      	cbz	r1, 8016812 <__ssrefill_r+0x24>
 80167f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80167fa:	4299      	cmp	r1, r3
 80167fc:	d001      	beq.n	8016802 <__ssrefill_r+0x14>
 80167fe:	f7ff fd69 	bl	80162d4 <_free_r>
 8016802:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016804:	6063      	str	r3, [r4, #4]
 8016806:	2000      	movs	r0, #0
 8016808:	6360      	str	r0, [r4, #52]	@ 0x34
 801680a:	b113      	cbz	r3, 8016812 <__ssrefill_r+0x24>
 801680c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801680e:	6023      	str	r3, [r4, #0]
 8016810:	bd10      	pop	{r4, pc}
 8016812:	6923      	ldr	r3, [r4, #16]
 8016814:	6023      	str	r3, [r4, #0]
 8016816:	2300      	movs	r3, #0
 8016818:	6063      	str	r3, [r4, #4]
 801681a:	89a3      	ldrh	r3, [r4, #12]
 801681c:	f043 0320 	orr.w	r3, r3, #32
 8016820:	81a3      	strh	r3, [r4, #12]
 8016822:	f04f 30ff 	mov.w	r0, #4294967295
 8016826:	e7f3      	b.n	8016810 <__ssrefill_r+0x22>

08016828 <__ssvfiscanf_r>:
 8016828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801682c:	460c      	mov	r4, r1
 801682e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8016832:	2100      	movs	r1, #0
 8016834:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8016838:	49a6      	ldr	r1, [pc, #664]	@ (8016ad4 <__ssvfiscanf_r+0x2ac>)
 801683a:	91a0      	str	r1, [sp, #640]	@ 0x280
 801683c:	f10d 0804 	add.w	r8, sp, #4
 8016840:	49a5      	ldr	r1, [pc, #660]	@ (8016ad8 <__ssvfiscanf_r+0x2b0>)
 8016842:	4fa6      	ldr	r7, [pc, #664]	@ (8016adc <__ssvfiscanf_r+0x2b4>)
 8016844:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8016848:	4606      	mov	r6, r0
 801684a:	91a1      	str	r1, [sp, #644]	@ 0x284
 801684c:	9300      	str	r3, [sp, #0]
 801684e:	f892 9000 	ldrb.w	r9, [r2]
 8016852:	f1b9 0f00 	cmp.w	r9, #0
 8016856:	f000 8158 	beq.w	8016b0a <__ssvfiscanf_r+0x2e2>
 801685a:	f817 3009 	ldrb.w	r3, [r7, r9]
 801685e:	f013 0308 	ands.w	r3, r3, #8
 8016862:	f102 0501 	add.w	r5, r2, #1
 8016866:	d019      	beq.n	801689c <__ssvfiscanf_r+0x74>
 8016868:	6863      	ldr	r3, [r4, #4]
 801686a:	2b00      	cmp	r3, #0
 801686c:	dd0f      	ble.n	801688e <__ssvfiscanf_r+0x66>
 801686e:	6823      	ldr	r3, [r4, #0]
 8016870:	781a      	ldrb	r2, [r3, #0]
 8016872:	5cba      	ldrb	r2, [r7, r2]
 8016874:	0712      	lsls	r2, r2, #28
 8016876:	d401      	bmi.n	801687c <__ssvfiscanf_r+0x54>
 8016878:	462a      	mov	r2, r5
 801687a:	e7e8      	b.n	801684e <__ssvfiscanf_r+0x26>
 801687c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801687e:	3201      	adds	r2, #1
 8016880:	9245      	str	r2, [sp, #276]	@ 0x114
 8016882:	6862      	ldr	r2, [r4, #4]
 8016884:	3301      	adds	r3, #1
 8016886:	3a01      	subs	r2, #1
 8016888:	6062      	str	r2, [r4, #4]
 801688a:	6023      	str	r3, [r4, #0]
 801688c:	e7ec      	b.n	8016868 <__ssvfiscanf_r+0x40>
 801688e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016890:	4621      	mov	r1, r4
 8016892:	4630      	mov	r0, r6
 8016894:	4798      	blx	r3
 8016896:	2800      	cmp	r0, #0
 8016898:	d0e9      	beq.n	801686e <__ssvfiscanf_r+0x46>
 801689a:	e7ed      	b.n	8016878 <__ssvfiscanf_r+0x50>
 801689c:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80168a0:	f040 8085 	bne.w	80169ae <__ssvfiscanf_r+0x186>
 80168a4:	9341      	str	r3, [sp, #260]	@ 0x104
 80168a6:	9343      	str	r3, [sp, #268]	@ 0x10c
 80168a8:	7853      	ldrb	r3, [r2, #1]
 80168aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80168ac:	bf02      	ittt	eq
 80168ae:	2310      	moveq	r3, #16
 80168b0:	1c95      	addeq	r5, r2, #2
 80168b2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80168b4:	220a      	movs	r2, #10
 80168b6:	46aa      	mov	sl, r5
 80168b8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80168bc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80168c0:	2b09      	cmp	r3, #9
 80168c2:	d91e      	bls.n	8016902 <__ssvfiscanf_r+0xda>
 80168c4:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8016ae0 <__ssvfiscanf_r+0x2b8>
 80168c8:	2203      	movs	r2, #3
 80168ca:	4658      	mov	r0, fp
 80168cc:	f7e9 fc98 	bl	8000200 <memchr>
 80168d0:	b138      	cbz	r0, 80168e2 <__ssvfiscanf_r+0xba>
 80168d2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80168d4:	eba0 000b 	sub.w	r0, r0, fp
 80168d8:	2301      	movs	r3, #1
 80168da:	4083      	lsls	r3, r0
 80168dc:	4313      	orrs	r3, r2
 80168de:	9341      	str	r3, [sp, #260]	@ 0x104
 80168e0:	4655      	mov	r5, sl
 80168e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80168e6:	2b78      	cmp	r3, #120	@ 0x78
 80168e8:	d806      	bhi.n	80168f8 <__ssvfiscanf_r+0xd0>
 80168ea:	2b57      	cmp	r3, #87	@ 0x57
 80168ec:	d810      	bhi.n	8016910 <__ssvfiscanf_r+0xe8>
 80168ee:	2b25      	cmp	r3, #37	@ 0x25
 80168f0:	d05d      	beq.n	80169ae <__ssvfiscanf_r+0x186>
 80168f2:	d857      	bhi.n	80169a4 <__ssvfiscanf_r+0x17c>
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d075      	beq.n	80169e4 <__ssvfiscanf_r+0x1bc>
 80168f8:	2303      	movs	r3, #3
 80168fa:	9347      	str	r3, [sp, #284]	@ 0x11c
 80168fc:	230a      	movs	r3, #10
 80168fe:	9342      	str	r3, [sp, #264]	@ 0x108
 8016900:	e088      	b.n	8016a14 <__ssvfiscanf_r+0x1ec>
 8016902:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8016904:	fb02 1103 	mla	r1, r2, r3, r1
 8016908:	3930      	subs	r1, #48	@ 0x30
 801690a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801690c:	4655      	mov	r5, sl
 801690e:	e7d2      	b.n	80168b6 <__ssvfiscanf_r+0x8e>
 8016910:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8016914:	2a20      	cmp	r2, #32
 8016916:	d8ef      	bhi.n	80168f8 <__ssvfiscanf_r+0xd0>
 8016918:	a101      	add	r1, pc, #4	@ (adr r1, 8016920 <__ssvfiscanf_r+0xf8>)
 801691a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801691e:	bf00      	nop
 8016920:	080169f3 	.word	0x080169f3
 8016924:	080168f9 	.word	0x080168f9
 8016928:	080168f9 	.word	0x080168f9
 801692c:	08016a4d 	.word	0x08016a4d
 8016930:	080168f9 	.word	0x080168f9
 8016934:	080168f9 	.word	0x080168f9
 8016938:	080168f9 	.word	0x080168f9
 801693c:	080168f9 	.word	0x080168f9
 8016940:	080168f9 	.word	0x080168f9
 8016944:	080168f9 	.word	0x080168f9
 8016948:	080168f9 	.word	0x080168f9
 801694c:	08016a63 	.word	0x08016a63
 8016950:	08016a49 	.word	0x08016a49
 8016954:	080169ab 	.word	0x080169ab
 8016958:	080169ab 	.word	0x080169ab
 801695c:	080169ab 	.word	0x080169ab
 8016960:	080168f9 	.word	0x080168f9
 8016964:	08016a05 	.word	0x08016a05
 8016968:	080168f9 	.word	0x080168f9
 801696c:	080168f9 	.word	0x080168f9
 8016970:	080168f9 	.word	0x080168f9
 8016974:	080168f9 	.word	0x080168f9
 8016978:	08016a73 	.word	0x08016a73
 801697c:	08016a0d 	.word	0x08016a0d
 8016980:	080169eb 	.word	0x080169eb
 8016984:	080168f9 	.word	0x080168f9
 8016988:	080168f9 	.word	0x080168f9
 801698c:	08016a6f 	.word	0x08016a6f
 8016990:	080168f9 	.word	0x080168f9
 8016994:	08016a49 	.word	0x08016a49
 8016998:	080168f9 	.word	0x080168f9
 801699c:	080168f9 	.word	0x080168f9
 80169a0:	080169f3 	.word	0x080169f3
 80169a4:	3b45      	subs	r3, #69	@ 0x45
 80169a6:	2b02      	cmp	r3, #2
 80169a8:	d8a6      	bhi.n	80168f8 <__ssvfiscanf_r+0xd0>
 80169aa:	2305      	movs	r3, #5
 80169ac:	e031      	b.n	8016a12 <__ssvfiscanf_r+0x1ea>
 80169ae:	6863      	ldr	r3, [r4, #4]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	dd0d      	ble.n	80169d0 <__ssvfiscanf_r+0x1a8>
 80169b4:	6823      	ldr	r3, [r4, #0]
 80169b6:	781a      	ldrb	r2, [r3, #0]
 80169b8:	454a      	cmp	r2, r9
 80169ba:	f040 80a6 	bne.w	8016b0a <__ssvfiscanf_r+0x2e2>
 80169be:	3301      	adds	r3, #1
 80169c0:	6862      	ldr	r2, [r4, #4]
 80169c2:	6023      	str	r3, [r4, #0]
 80169c4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80169c6:	3a01      	subs	r2, #1
 80169c8:	3301      	adds	r3, #1
 80169ca:	6062      	str	r2, [r4, #4]
 80169cc:	9345      	str	r3, [sp, #276]	@ 0x114
 80169ce:	e753      	b.n	8016878 <__ssvfiscanf_r+0x50>
 80169d0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80169d2:	4621      	mov	r1, r4
 80169d4:	4630      	mov	r0, r6
 80169d6:	4798      	blx	r3
 80169d8:	2800      	cmp	r0, #0
 80169da:	d0eb      	beq.n	80169b4 <__ssvfiscanf_r+0x18c>
 80169dc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80169de:	2800      	cmp	r0, #0
 80169e0:	f040 808b 	bne.w	8016afa <__ssvfiscanf_r+0x2d2>
 80169e4:	f04f 30ff 	mov.w	r0, #4294967295
 80169e8:	e08b      	b.n	8016b02 <__ssvfiscanf_r+0x2da>
 80169ea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80169ec:	f042 0220 	orr.w	r2, r2, #32
 80169f0:	9241      	str	r2, [sp, #260]	@ 0x104
 80169f2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80169f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80169f8:	9241      	str	r2, [sp, #260]	@ 0x104
 80169fa:	2210      	movs	r2, #16
 80169fc:	2b6e      	cmp	r3, #110	@ 0x6e
 80169fe:	9242      	str	r2, [sp, #264]	@ 0x108
 8016a00:	d902      	bls.n	8016a08 <__ssvfiscanf_r+0x1e0>
 8016a02:	e005      	b.n	8016a10 <__ssvfiscanf_r+0x1e8>
 8016a04:	2300      	movs	r3, #0
 8016a06:	9342      	str	r3, [sp, #264]	@ 0x108
 8016a08:	2303      	movs	r3, #3
 8016a0a:	e002      	b.n	8016a12 <__ssvfiscanf_r+0x1ea>
 8016a0c:	2308      	movs	r3, #8
 8016a0e:	9342      	str	r3, [sp, #264]	@ 0x108
 8016a10:	2304      	movs	r3, #4
 8016a12:	9347      	str	r3, [sp, #284]	@ 0x11c
 8016a14:	6863      	ldr	r3, [r4, #4]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	dd39      	ble.n	8016a8e <__ssvfiscanf_r+0x266>
 8016a1a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8016a1c:	0659      	lsls	r1, r3, #25
 8016a1e:	d404      	bmi.n	8016a2a <__ssvfiscanf_r+0x202>
 8016a20:	6823      	ldr	r3, [r4, #0]
 8016a22:	781a      	ldrb	r2, [r3, #0]
 8016a24:	5cba      	ldrb	r2, [r7, r2]
 8016a26:	0712      	lsls	r2, r2, #28
 8016a28:	d438      	bmi.n	8016a9c <__ssvfiscanf_r+0x274>
 8016a2a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8016a2c:	2b02      	cmp	r3, #2
 8016a2e:	dc47      	bgt.n	8016ac0 <__ssvfiscanf_r+0x298>
 8016a30:	466b      	mov	r3, sp
 8016a32:	4622      	mov	r2, r4
 8016a34:	a941      	add	r1, sp, #260	@ 0x104
 8016a36:	4630      	mov	r0, r6
 8016a38:	f000 f9f8 	bl	8016e2c <_scanf_chars>
 8016a3c:	2801      	cmp	r0, #1
 8016a3e:	d064      	beq.n	8016b0a <__ssvfiscanf_r+0x2e2>
 8016a40:	2802      	cmp	r0, #2
 8016a42:	f47f af19 	bne.w	8016878 <__ssvfiscanf_r+0x50>
 8016a46:	e7c9      	b.n	80169dc <__ssvfiscanf_r+0x1b4>
 8016a48:	220a      	movs	r2, #10
 8016a4a:	e7d7      	b.n	80169fc <__ssvfiscanf_r+0x1d4>
 8016a4c:	4629      	mov	r1, r5
 8016a4e:	4640      	mov	r0, r8
 8016a50:	f000 fb3a 	bl	80170c8 <__sccl>
 8016a54:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8016a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016a5a:	9341      	str	r3, [sp, #260]	@ 0x104
 8016a5c:	4605      	mov	r5, r0
 8016a5e:	2301      	movs	r3, #1
 8016a60:	e7d7      	b.n	8016a12 <__ssvfiscanf_r+0x1ea>
 8016a62:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8016a64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016a68:	9341      	str	r3, [sp, #260]	@ 0x104
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	e7d1      	b.n	8016a12 <__ssvfiscanf_r+0x1ea>
 8016a6e:	2302      	movs	r3, #2
 8016a70:	e7cf      	b.n	8016a12 <__ssvfiscanf_r+0x1ea>
 8016a72:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8016a74:	06c3      	lsls	r3, r0, #27
 8016a76:	f53f aeff 	bmi.w	8016878 <__ssvfiscanf_r+0x50>
 8016a7a:	9b00      	ldr	r3, [sp, #0]
 8016a7c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8016a7e:	1d19      	adds	r1, r3, #4
 8016a80:	9100      	str	r1, [sp, #0]
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	07c0      	lsls	r0, r0, #31
 8016a86:	bf4c      	ite	mi
 8016a88:	801a      	strhmi	r2, [r3, #0]
 8016a8a:	601a      	strpl	r2, [r3, #0]
 8016a8c:	e6f4      	b.n	8016878 <__ssvfiscanf_r+0x50>
 8016a8e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016a90:	4621      	mov	r1, r4
 8016a92:	4630      	mov	r0, r6
 8016a94:	4798      	blx	r3
 8016a96:	2800      	cmp	r0, #0
 8016a98:	d0bf      	beq.n	8016a1a <__ssvfiscanf_r+0x1f2>
 8016a9a:	e79f      	b.n	80169dc <__ssvfiscanf_r+0x1b4>
 8016a9c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8016a9e:	3201      	adds	r2, #1
 8016aa0:	9245      	str	r2, [sp, #276]	@ 0x114
 8016aa2:	6862      	ldr	r2, [r4, #4]
 8016aa4:	3a01      	subs	r2, #1
 8016aa6:	2a00      	cmp	r2, #0
 8016aa8:	6062      	str	r2, [r4, #4]
 8016aaa:	dd02      	ble.n	8016ab2 <__ssvfiscanf_r+0x28a>
 8016aac:	3301      	adds	r3, #1
 8016aae:	6023      	str	r3, [r4, #0]
 8016ab0:	e7b6      	b.n	8016a20 <__ssvfiscanf_r+0x1f8>
 8016ab2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016ab4:	4621      	mov	r1, r4
 8016ab6:	4630      	mov	r0, r6
 8016ab8:	4798      	blx	r3
 8016aba:	2800      	cmp	r0, #0
 8016abc:	d0b0      	beq.n	8016a20 <__ssvfiscanf_r+0x1f8>
 8016abe:	e78d      	b.n	80169dc <__ssvfiscanf_r+0x1b4>
 8016ac0:	2b04      	cmp	r3, #4
 8016ac2:	dc0f      	bgt.n	8016ae4 <__ssvfiscanf_r+0x2bc>
 8016ac4:	466b      	mov	r3, sp
 8016ac6:	4622      	mov	r2, r4
 8016ac8:	a941      	add	r1, sp, #260	@ 0x104
 8016aca:	4630      	mov	r0, r6
 8016acc:	f000 fa08 	bl	8016ee0 <_scanf_i>
 8016ad0:	e7b4      	b.n	8016a3c <__ssvfiscanf_r+0x214>
 8016ad2:	bf00      	nop
 8016ad4:	08016775 	.word	0x08016775
 8016ad8:	080167ef 	.word	0x080167ef
 8016adc:	08017957 	.word	0x08017957
 8016ae0:	08017a5d 	.word	0x08017a5d
 8016ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8016b10 <__ssvfiscanf_r+0x2e8>)
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	f43f aec6 	beq.w	8016878 <__ssvfiscanf_r+0x50>
 8016aec:	466b      	mov	r3, sp
 8016aee:	4622      	mov	r2, r4
 8016af0:	a941      	add	r1, sp, #260	@ 0x104
 8016af2:	4630      	mov	r0, r6
 8016af4:	f3af 8000 	nop.w
 8016af8:	e7a0      	b.n	8016a3c <__ssvfiscanf_r+0x214>
 8016afa:	89a3      	ldrh	r3, [r4, #12]
 8016afc:	065b      	lsls	r3, r3, #25
 8016afe:	f53f af71 	bmi.w	80169e4 <__ssvfiscanf_r+0x1bc>
 8016b02:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8016b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b0a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8016b0c:	e7f9      	b.n	8016b02 <__ssvfiscanf_r+0x2da>
 8016b0e:	bf00      	nop
 8016b10:	00000000 	.word	0x00000000

08016b14 <_printf_common>:
 8016b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b18:	4616      	mov	r6, r2
 8016b1a:	4698      	mov	r8, r3
 8016b1c:	688a      	ldr	r2, [r1, #8]
 8016b1e:	690b      	ldr	r3, [r1, #16]
 8016b20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016b24:	4293      	cmp	r3, r2
 8016b26:	bfb8      	it	lt
 8016b28:	4613      	movlt	r3, r2
 8016b2a:	6033      	str	r3, [r6, #0]
 8016b2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016b30:	4607      	mov	r7, r0
 8016b32:	460c      	mov	r4, r1
 8016b34:	b10a      	cbz	r2, 8016b3a <_printf_common+0x26>
 8016b36:	3301      	adds	r3, #1
 8016b38:	6033      	str	r3, [r6, #0]
 8016b3a:	6823      	ldr	r3, [r4, #0]
 8016b3c:	0699      	lsls	r1, r3, #26
 8016b3e:	bf42      	ittt	mi
 8016b40:	6833      	ldrmi	r3, [r6, #0]
 8016b42:	3302      	addmi	r3, #2
 8016b44:	6033      	strmi	r3, [r6, #0]
 8016b46:	6825      	ldr	r5, [r4, #0]
 8016b48:	f015 0506 	ands.w	r5, r5, #6
 8016b4c:	d106      	bne.n	8016b5c <_printf_common+0x48>
 8016b4e:	f104 0a19 	add.w	sl, r4, #25
 8016b52:	68e3      	ldr	r3, [r4, #12]
 8016b54:	6832      	ldr	r2, [r6, #0]
 8016b56:	1a9b      	subs	r3, r3, r2
 8016b58:	42ab      	cmp	r3, r5
 8016b5a:	dc26      	bgt.n	8016baa <_printf_common+0x96>
 8016b5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016b60:	6822      	ldr	r2, [r4, #0]
 8016b62:	3b00      	subs	r3, #0
 8016b64:	bf18      	it	ne
 8016b66:	2301      	movne	r3, #1
 8016b68:	0692      	lsls	r2, r2, #26
 8016b6a:	d42b      	bmi.n	8016bc4 <_printf_common+0xb0>
 8016b6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016b70:	4641      	mov	r1, r8
 8016b72:	4638      	mov	r0, r7
 8016b74:	47c8      	blx	r9
 8016b76:	3001      	adds	r0, #1
 8016b78:	d01e      	beq.n	8016bb8 <_printf_common+0xa4>
 8016b7a:	6823      	ldr	r3, [r4, #0]
 8016b7c:	6922      	ldr	r2, [r4, #16]
 8016b7e:	f003 0306 	and.w	r3, r3, #6
 8016b82:	2b04      	cmp	r3, #4
 8016b84:	bf02      	ittt	eq
 8016b86:	68e5      	ldreq	r5, [r4, #12]
 8016b88:	6833      	ldreq	r3, [r6, #0]
 8016b8a:	1aed      	subeq	r5, r5, r3
 8016b8c:	68a3      	ldr	r3, [r4, #8]
 8016b8e:	bf0c      	ite	eq
 8016b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016b94:	2500      	movne	r5, #0
 8016b96:	4293      	cmp	r3, r2
 8016b98:	bfc4      	itt	gt
 8016b9a:	1a9b      	subgt	r3, r3, r2
 8016b9c:	18ed      	addgt	r5, r5, r3
 8016b9e:	2600      	movs	r6, #0
 8016ba0:	341a      	adds	r4, #26
 8016ba2:	42b5      	cmp	r5, r6
 8016ba4:	d11a      	bne.n	8016bdc <_printf_common+0xc8>
 8016ba6:	2000      	movs	r0, #0
 8016ba8:	e008      	b.n	8016bbc <_printf_common+0xa8>
 8016baa:	2301      	movs	r3, #1
 8016bac:	4652      	mov	r2, sl
 8016bae:	4641      	mov	r1, r8
 8016bb0:	4638      	mov	r0, r7
 8016bb2:	47c8      	blx	r9
 8016bb4:	3001      	adds	r0, #1
 8016bb6:	d103      	bne.n	8016bc0 <_printf_common+0xac>
 8016bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8016bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bc0:	3501      	adds	r5, #1
 8016bc2:	e7c6      	b.n	8016b52 <_printf_common+0x3e>
 8016bc4:	18e1      	adds	r1, r4, r3
 8016bc6:	1c5a      	adds	r2, r3, #1
 8016bc8:	2030      	movs	r0, #48	@ 0x30
 8016bca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016bce:	4422      	add	r2, r4
 8016bd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016bd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016bd8:	3302      	adds	r3, #2
 8016bda:	e7c7      	b.n	8016b6c <_printf_common+0x58>
 8016bdc:	2301      	movs	r3, #1
 8016bde:	4622      	mov	r2, r4
 8016be0:	4641      	mov	r1, r8
 8016be2:	4638      	mov	r0, r7
 8016be4:	47c8      	blx	r9
 8016be6:	3001      	adds	r0, #1
 8016be8:	d0e6      	beq.n	8016bb8 <_printf_common+0xa4>
 8016bea:	3601      	adds	r6, #1
 8016bec:	e7d9      	b.n	8016ba2 <_printf_common+0x8e>
	...

08016bf0 <_printf_i>:
 8016bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016bf4:	7e0f      	ldrb	r7, [r1, #24]
 8016bf6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016bf8:	2f78      	cmp	r7, #120	@ 0x78
 8016bfa:	4691      	mov	r9, r2
 8016bfc:	4680      	mov	r8, r0
 8016bfe:	460c      	mov	r4, r1
 8016c00:	469a      	mov	sl, r3
 8016c02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016c06:	d807      	bhi.n	8016c18 <_printf_i+0x28>
 8016c08:	2f62      	cmp	r7, #98	@ 0x62
 8016c0a:	d80a      	bhi.n	8016c22 <_printf_i+0x32>
 8016c0c:	2f00      	cmp	r7, #0
 8016c0e:	f000 80d1 	beq.w	8016db4 <_printf_i+0x1c4>
 8016c12:	2f58      	cmp	r7, #88	@ 0x58
 8016c14:	f000 80b8 	beq.w	8016d88 <_printf_i+0x198>
 8016c18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016c1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016c20:	e03a      	b.n	8016c98 <_printf_i+0xa8>
 8016c22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016c26:	2b15      	cmp	r3, #21
 8016c28:	d8f6      	bhi.n	8016c18 <_printf_i+0x28>
 8016c2a:	a101      	add	r1, pc, #4	@ (adr r1, 8016c30 <_printf_i+0x40>)
 8016c2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016c30:	08016c89 	.word	0x08016c89
 8016c34:	08016c9d 	.word	0x08016c9d
 8016c38:	08016c19 	.word	0x08016c19
 8016c3c:	08016c19 	.word	0x08016c19
 8016c40:	08016c19 	.word	0x08016c19
 8016c44:	08016c19 	.word	0x08016c19
 8016c48:	08016c9d 	.word	0x08016c9d
 8016c4c:	08016c19 	.word	0x08016c19
 8016c50:	08016c19 	.word	0x08016c19
 8016c54:	08016c19 	.word	0x08016c19
 8016c58:	08016c19 	.word	0x08016c19
 8016c5c:	08016d9b 	.word	0x08016d9b
 8016c60:	08016cc7 	.word	0x08016cc7
 8016c64:	08016d55 	.word	0x08016d55
 8016c68:	08016c19 	.word	0x08016c19
 8016c6c:	08016c19 	.word	0x08016c19
 8016c70:	08016dbd 	.word	0x08016dbd
 8016c74:	08016c19 	.word	0x08016c19
 8016c78:	08016cc7 	.word	0x08016cc7
 8016c7c:	08016c19 	.word	0x08016c19
 8016c80:	08016c19 	.word	0x08016c19
 8016c84:	08016d5d 	.word	0x08016d5d
 8016c88:	6833      	ldr	r3, [r6, #0]
 8016c8a:	1d1a      	adds	r2, r3, #4
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	6032      	str	r2, [r6, #0]
 8016c90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016c94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016c98:	2301      	movs	r3, #1
 8016c9a:	e09c      	b.n	8016dd6 <_printf_i+0x1e6>
 8016c9c:	6833      	ldr	r3, [r6, #0]
 8016c9e:	6820      	ldr	r0, [r4, #0]
 8016ca0:	1d19      	adds	r1, r3, #4
 8016ca2:	6031      	str	r1, [r6, #0]
 8016ca4:	0606      	lsls	r6, r0, #24
 8016ca6:	d501      	bpl.n	8016cac <_printf_i+0xbc>
 8016ca8:	681d      	ldr	r5, [r3, #0]
 8016caa:	e003      	b.n	8016cb4 <_printf_i+0xc4>
 8016cac:	0645      	lsls	r5, r0, #25
 8016cae:	d5fb      	bpl.n	8016ca8 <_printf_i+0xb8>
 8016cb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016cb4:	2d00      	cmp	r5, #0
 8016cb6:	da03      	bge.n	8016cc0 <_printf_i+0xd0>
 8016cb8:	232d      	movs	r3, #45	@ 0x2d
 8016cba:	426d      	negs	r5, r5
 8016cbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016cc0:	4858      	ldr	r0, [pc, #352]	@ (8016e24 <_printf_i+0x234>)
 8016cc2:	230a      	movs	r3, #10
 8016cc4:	e011      	b.n	8016cea <_printf_i+0xfa>
 8016cc6:	6821      	ldr	r1, [r4, #0]
 8016cc8:	6833      	ldr	r3, [r6, #0]
 8016cca:	0608      	lsls	r0, r1, #24
 8016ccc:	f853 5b04 	ldr.w	r5, [r3], #4
 8016cd0:	d402      	bmi.n	8016cd8 <_printf_i+0xe8>
 8016cd2:	0649      	lsls	r1, r1, #25
 8016cd4:	bf48      	it	mi
 8016cd6:	b2ad      	uxthmi	r5, r5
 8016cd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8016cda:	4852      	ldr	r0, [pc, #328]	@ (8016e24 <_printf_i+0x234>)
 8016cdc:	6033      	str	r3, [r6, #0]
 8016cde:	bf14      	ite	ne
 8016ce0:	230a      	movne	r3, #10
 8016ce2:	2308      	moveq	r3, #8
 8016ce4:	2100      	movs	r1, #0
 8016ce6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016cea:	6866      	ldr	r6, [r4, #4]
 8016cec:	60a6      	str	r6, [r4, #8]
 8016cee:	2e00      	cmp	r6, #0
 8016cf0:	db05      	blt.n	8016cfe <_printf_i+0x10e>
 8016cf2:	6821      	ldr	r1, [r4, #0]
 8016cf4:	432e      	orrs	r6, r5
 8016cf6:	f021 0104 	bic.w	r1, r1, #4
 8016cfa:	6021      	str	r1, [r4, #0]
 8016cfc:	d04b      	beq.n	8016d96 <_printf_i+0x1a6>
 8016cfe:	4616      	mov	r6, r2
 8016d00:	fbb5 f1f3 	udiv	r1, r5, r3
 8016d04:	fb03 5711 	mls	r7, r3, r1, r5
 8016d08:	5dc7      	ldrb	r7, [r0, r7]
 8016d0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016d0e:	462f      	mov	r7, r5
 8016d10:	42bb      	cmp	r3, r7
 8016d12:	460d      	mov	r5, r1
 8016d14:	d9f4      	bls.n	8016d00 <_printf_i+0x110>
 8016d16:	2b08      	cmp	r3, #8
 8016d18:	d10b      	bne.n	8016d32 <_printf_i+0x142>
 8016d1a:	6823      	ldr	r3, [r4, #0]
 8016d1c:	07df      	lsls	r7, r3, #31
 8016d1e:	d508      	bpl.n	8016d32 <_printf_i+0x142>
 8016d20:	6923      	ldr	r3, [r4, #16]
 8016d22:	6861      	ldr	r1, [r4, #4]
 8016d24:	4299      	cmp	r1, r3
 8016d26:	bfde      	ittt	le
 8016d28:	2330      	movle	r3, #48	@ 0x30
 8016d2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016d2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016d32:	1b92      	subs	r2, r2, r6
 8016d34:	6122      	str	r2, [r4, #16]
 8016d36:	f8cd a000 	str.w	sl, [sp]
 8016d3a:	464b      	mov	r3, r9
 8016d3c:	aa03      	add	r2, sp, #12
 8016d3e:	4621      	mov	r1, r4
 8016d40:	4640      	mov	r0, r8
 8016d42:	f7ff fee7 	bl	8016b14 <_printf_common>
 8016d46:	3001      	adds	r0, #1
 8016d48:	d14a      	bne.n	8016de0 <_printf_i+0x1f0>
 8016d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8016d4e:	b004      	add	sp, #16
 8016d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d54:	6823      	ldr	r3, [r4, #0]
 8016d56:	f043 0320 	orr.w	r3, r3, #32
 8016d5a:	6023      	str	r3, [r4, #0]
 8016d5c:	4832      	ldr	r0, [pc, #200]	@ (8016e28 <_printf_i+0x238>)
 8016d5e:	2778      	movs	r7, #120	@ 0x78
 8016d60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016d64:	6823      	ldr	r3, [r4, #0]
 8016d66:	6831      	ldr	r1, [r6, #0]
 8016d68:	061f      	lsls	r7, r3, #24
 8016d6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8016d6e:	d402      	bmi.n	8016d76 <_printf_i+0x186>
 8016d70:	065f      	lsls	r7, r3, #25
 8016d72:	bf48      	it	mi
 8016d74:	b2ad      	uxthmi	r5, r5
 8016d76:	6031      	str	r1, [r6, #0]
 8016d78:	07d9      	lsls	r1, r3, #31
 8016d7a:	bf44      	itt	mi
 8016d7c:	f043 0320 	orrmi.w	r3, r3, #32
 8016d80:	6023      	strmi	r3, [r4, #0]
 8016d82:	b11d      	cbz	r5, 8016d8c <_printf_i+0x19c>
 8016d84:	2310      	movs	r3, #16
 8016d86:	e7ad      	b.n	8016ce4 <_printf_i+0xf4>
 8016d88:	4826      	ldr	r0, [pc, #152]	@ (8016e24 <_printf_i+0x234>)
 8016d8a:	e7e9      	b.n	8016d60 <_printf_i+0x170>
 8016d8c:	6823      	ldr	r3, [r4, #0]
 8016d8e:	f023 0320 	bic.w	r3, r3, #32
 8016d92:	6023      	str	r3, [r4, #0]
 8016d94:	e7f6      	b.n	8016d84 <_printf_i+0x194>
 8016d96:	4616      	mov	r6, r2
 8016d98:	e7bd      	b.n	8016d16 <_printf_i+0x126>
 8016d9a:	6833      	ldr	r3, [r6, #0]
 8016d9c:	6825      	ldr	r5, [r4, #0]
 8016d9e:	6961      	ldr	r1, [r4, #20]
 8016da0:	1d18      	adds	r0, r3, #4
 8016da2:	6030      	str	r0, [r6, #0]
 8016da4:	062e      	lsls	r6, r5, #24
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	d501      	bpl.n	8016dae <_printf_i+0x1be>
 8016daa:	6019      	str	r1, [r3, #0]
 8016dac:	e002      	b.n	8016db4 <_printf_i+0x1c4>
 8016dae:	0668      	lsls	r0, r5, #25
 8016db0:	d5fb      	bpl.n	8016daa <_printf_i+0x1ba>
 8016db2:	8019      	strh	r1, [r3, #0]
 8016db4:	2300      	movs	r3, #0
 8016db6:	6123      	str	r3, [r4, #16]
 8016db8:	4616      	mov	r6, r2
 8016dba:	e7bc      	b.n	8016d36 <_printf_i+0x146>
 8016dbc:	6833      	ldr	r3, [r6, #0]
 8016dbe:	1d1a      	adds	r2, r3, #4
 8016dc0:	6032      	str	r2, [r6, #0]
 8016dc2:	681e      	ldr	r6, [r3, #0]
 8016dc4:	6862      	ldr	r2, [r4, #4]
 8016dc6:	2100      	movs	r1, #0
 8016dc8:	4630      	mov	r0, r6
 8016dca:	f7e9 fa19 	bl	8000200 <memchr>
 8016dce:	b108      	cbz	r0, 8016dd4 <_printf_i+0x1e4>
 8016dd0:	1b80      	subs	r0, r0, r6
 8016dd2:	6060      	str	r0, [r4, #4]
 8016dd4:	6863      	ldr	r3, [r4, #4]
 8016dd6:	6123      	str	r3, [r4, #16]
 8016dd8:	2300      	movs	r3, #0
 8016dda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016dde:	e7aa      	b.n	8016d36 <_printf_i+0x146>
 8016de0:	6923      	ldr	r3, [r4, #16]
 8016de2:	4632      	mov	r2, r6
 8016de4:	4649      	mov	r1, r9
 8016de6:	4640      	mov	r0, r8
 8016de8:	47d0      	blx	sl
 8016dea:	3001      	adds	r0, #1
 8016dec:	d0ad      	beq.n	8016d4a <_printf_i+0x15a>
 8016dee:	6823      	ldr	r3, [r4, #0]
 8016df0:	079b      	lsls	r3, r3, #30
 8016df2:	d413      	bmi.n	8016e1c <_printf_i+0x22c>
 8016df4:	68e0      	ldr	r0, [r4, #12]
 8016df6:	9b03      	ldr	r3, [sp, #12]
 8016df8:	4298      	cmp	r0, r3
 8016dfa:	bfb8      	it	lt
 8016dfc:	4618      	movlt	r0, r3
 8016dfe:	e7a6      	b.n	8016d4e <_printf_i+0x15e>
 8016e00:	2301      	movs	r3, #1
 8016e02:	4632      	mov	r2, r6
 8016e04:	4649      	mov	r1, r9
 8016e06:	4640      	mov	r0, r8
 8016e08:	47d0      	blx	sl
 8016e0a:	3001      	adds	r0, #1
 8016e0c:	d09d      	beq.n	8016d4a <_printf_i+0x15a>
 8016e0e:	3501      	adds	r5, #1
 8016e10:	68e3      	ldr	r3, [r4, #12]
 8016e12:	9903      	ldr	r1, [sp, #12]
 8016e14:	1a5b      	subs	r3, r3, r1
 8016e16:	42ab      	cmp	r3, r5
 8016e18:	dcf2      	bgt.n	8016e00 <_printf_i+0x210>
 8016e1a:	e7eb      	b.n	8016df4 <_printf_i+0x204>
 8016e1c:	2500      	movs	r5, #0
 8016e1e:	f104 0619 	add.w	r6, r4, #25
 8016e22:	e7f5      	b.n	8016e10 <_printf_i+0x220>
 8016e24:	08017a68 	.word	0x08017a68
 8016e28:	08017a79 	.word	0x08017a79

08016e2c <_scanf_chars>:
 8016e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e30:	4615      	mov	r5, r2
 8016e32:	688a      	ldr	r2, [r1, #8]
 8016e34:	4680      	mov	r8, r0
 8016e36:	460c      	mov	r4, r1
 8016e38:	b932      	cbnz	r2, 8016e48 <_scanf_chars+0x1c>
 8016e3a:	698a      	ldr	r2, [r1, #24]
 8016e3c:	2a00      	cmp	r2, #0
 8016e3e:	bf14      	ite	ne
 8016e40:	f04f 32ff 	movne.w	r2, #4294967295
 8016e44:	2201      	moveq	r2, #1
 8016e46:	608a      	str	r2, [r1, #8]
 8016e48:	6822      	ldr	r2, [r4, #0]
 8016e4a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8016edc <_scanf_chars+0xb0>
 8016e4e:	06d1      	lsls	r1, r2, #27
 8016e50:	bf5f      	itttt	pl
 8016e52:	681a      	ldrpl	r2, [r3, #0]
 8016e54:	1d11      	addpl	r1, r2, #4
 8016e56:	6019      	strpl	r1, [r3, #0]
 8016e58:	6816      	ldrpl	r6, [r2, #0]
 8016e5a:	2700      	movs	r7, #0
 8016e5c:	69a0      	ldr	r0, [r4, #24]
 8016e5e:	b188      	cbz	r0, 8016e84 <_scanf_chars+0x58>
 8016e60:	2801      	cmp	r0, #1
 8016e62:	d107      	bne.n	8016e74 <_scanf_chars+0x48>
 8016e64:	682b      	ldr	r3, [r5, #0]
 8016e66:	781a      	ldrb	r2, [r3, #0]
 8016e68:	6963      	ldr	r3, [r4, #20]
 8016e6a:	5c9b      	ldrb	r3, [r3, r2]
 8016e6c:	b953      	cbnz	r3, 8016e84 <_scanf_chars+0x58>
 8016e6e:	2f00      	cmp	r7, #0
 8016e70:	d031      	beq.n	8016ed6 <_scanf_chars+0xaa>
 8016e72:	e022      	b.n	8016eba <_scanf_chars+0x8e>
 8016e74:	2802      	cmp	r0, #2
 8016e76:	d120      	bne.n	8016eba <_scanf_chars+0x8e>
 8016e78:	682b      	ldr	r3, [r5, #0]
 8016e7a:	781b      	ldrb	r3, [r3, #0]
 8016e7c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8016e80:	071b      	lsls	r3, r3, #28
 8016e82:	d41a      	bmi.n	8016eba <_scanf_chars+0x8e>
 8016e84:	6823      	ldr	r3, [r4, #0]
 8016e86:	06da      	lsls	r2, r3, #27
 8016e88:	bf5e      	ittt	pl
 8016e8a:	682b      	ldrpl	r3, [r5, #0]
 8016e8c:	781b      	ldrbpl	r3, [r3, #0]
 8016e8e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8016e92:	682a      	ldr	r2, [r5, #0]
 8016e94:	686b      	ldr	r3, [r5, #4]
 8016e96:	3201      	adds	r2, #1
 8016e98:	602a      	str	r2, [r5, #0]
 8016e9a:	68a2      	ldr	r2, [r4, #8]
 8016e9c:	3b01      	subs	r3, #1
 8016e9e:	3a01      	subs	r2, #1
 8016ea0:	606b      	str	r3, [r5, #4]
 8016ea2:	3701      	adds	r7, #1
 8016ea4:	60a2      	str	r2, [r4, #8]
 8016ea6:	b142      	cbz	r2, 8016eba <_scanf_chars+0x8e>
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	dcd7      	bgt.n	8016e5c <_scanf_chars+0x30>
 8016eac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8016eb0:	4629      	mov	r1, r5
 8016eb2:	4640      	mov	r0, r8
 8016eb4:	4798      	blx	r3
 8016eb6:	2800      	cmp	r0, #0
 8016eb8:	d0d0      	beq.n	8016e5c <_scanf_chars+0x30>
 8016eba:	6823      	ldr	r3, [r4, #0]
 8016ebc:	f013 0310 	ands.w	r3, r3, #16
 8016ec0:	d105      	bne.n	8016ece <_scanf_chars+0xa2>
 8016ec2:	68e2      	ldr	r2, [r4, #12]
 8016ec4:	3201      	adds	r2, #1
 8016ec6:	60e2      	str	r2, [r4, #12]
 8016ec8:	69a2      	ldr	r2, [r4, #24]
 8016eca:	b102      	cbz	r2, 8016ece <_scanf_chars+0xa2>
 8016ecc:	7033      	strb	r3, [r6, #0]
 8016ece:	6923      	ldr	r3, [r4, #16]
 8016ed0:	443b      	add	r3, r7
 8016ed2:	6123      	str	r3, [r4, #16]
 8016ed4:	2000      	movs	r0, #0
 8016ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016eda:	bf00      	nop
 8016edc:	08017957 	.word	0x08017957

08016ee0 <_scanf_i>:
 8016ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ee4:	4698      	mov	r8, r3
 8016ee6:	4b74      	ldr	r3, [pc, #464]	@ (80170b8 <_scanf_i+0x1d8>)
 8016ee8:	460c      	mov	r4, r1
 8016eea:	4682      	mov	sl, r0
 8016eec:	4616      	mov	r6, r2
 8016eee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016ef2:	b087      	sub	sp, #28
 8016ef4:	ab03      	add	r3, sp, #12
 8016ef6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016efa:	4b70      	ldr	r3, [pc, #448]	@ (80170bc <_scanf_i+0x1dc>)
 8016efc:	69a1      	ldr	r1, [r4, #24]
 8016efe:	4a70      	ldr	r2, [pc, #448]	@ (80170c0 <_scanf_i+0x1e0>)
 8016f00:	2903      	cmp	r1, #3
 8016f02:	bf08      	it	eq
 8016f04:	461a      	moveq	r2, r3
 8016f06:	68a3      	ldr	r3, [r4, #8]
 8016f08:	9201      	str	r2, [sp, #4]
 8016f0a:	1e5a      	subs	r2, r3, #1
 8016f0c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8016f10:	bf88      	it	hi
 8016f12:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8016f16:	4627      	mov	r7, r4
 8016f18:	bf82      	ittt	hi
 8016f1a:	eb03 0905 	addhi.w	r9, r3, r5
 8016f1e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8016f22:	60a3      	strhi	r3, [r4, #8]
 8016f24:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016f28:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8016f2c:	bf98      	it	ls
 8016f2e:	f04f 0900 	movls.w	r9, #0
 8016f32:	6023      	str	r3, [r4, #0]
 8016f34:	463d      	mov	r5, r7
 8016f36:	f04f 0b00 	mov.w	fp, #0
 8016f3a:	6831      	ldr	r1, [r6, #0]
 8016f3c:	ab03      	add	r3, sp, #12
 8016f3e:	7809      	ldrb	r1, [r1, #0]
 8016f40:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016f44:	2202      	movs	r2, #2
 8016f46:	f7e9 f95b 	bl	8000200 <memchr>
 8016f4a:	b328      	cbz	r0, 8016f98 <_scanf_i+0xb8>
 8016f4c:	f1bb 0f01 	cmp.w	fp, #1
 8016f50:	d159      	bne.n	8017006 <_scanf_i+0x126>
 8016f52:	6862      	ldr	r2, [r4, #4]
 8016f54:	b92a      	cbnz	r2, 8016f62 <_scanf_i+0x82>
 8016f56:	6822      	ldr	r2, [r4, #0]
 8016f58:	2108      	movs	r1, #8
 8016f5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016f5e:	6061      	str	r1, [r4, #4]
 8016f60:	6022      	str	r2, [r4, #0]
 8016f62:	6822      	ldr	r2, [r4, #0]
 8016f64:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8016f68:	6022      	str	r2, [r4, #0]
 8016f6a:	68a2      	ldr	r2, [r4, #8]
 8016f6c:	1e51      	subs	r1, r2, #1
 8016f6e:	60a1      	str	r1, [r4, #8]
 8016f70:	b192      	cbz	r2, 8016f98 <_scanf_i+0xb8>
 8016f72:	6832      	ldr	r2, [r6, #0]
 8016f74:	1c51      	adds	r1, r2, #1
 8016f76:	6031      	str	r1, [r6, #0]
 8016f78:	7812      	ldrb	r2, [r2, #0]
 8016f7a:	f805 2b01 	strb.w	r2, [r5], #1
 8016f7e:	6872      	ldr	r2, [r6, #4]
 8016f80:	3a01      	subs	r2, #1
 8016f82:	2a00      	cmp	r2, #0
 8016f84:	6072      	str	r2, [r6, #4]
 8016f86:	dc07      	bgt.n	8016f98 <_scanf_i+0xb8>
 8016f88:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8016f8c:	4631      	mov	r1, r6
 8016f8e:	4650      	mov	r0, sl
 8016f90:	4790      	blx	r2
 8016f92:	2800      	cmp	r0, #0
 8016f94:	f040 8085 	bne.w	80170a2 <_scanf_i+0x1c2>
 8016f98:	f10b 0b01 	add.w	fp, fp, #1
 8016f9c:	f1bb 0f03 	cmp.w	fp, #3
 8016fa0:	d1cb      	bne.n	8016f3a <_scanf_i+0x5a>
 8016fa2:	6863      	ldr	r3, [r4, #4]
 8016fa4:	b90b      	cbnz	r3, 8016faa <_scanf_i+0xca>
 8016fa6:	230a      	movs	r3, #10
 8016fa8:	6063      	str	r3, [r4, #4]
 8016faa:	6863      	ldr	r3, [r4, #4]
 8016fac:	4945      	ldr	r1, [pc, #276]	@ (80170c4 <_scanf_i+0x1e4>)
 8016fae:	6960      	ldr	r0, [r4, #20]
 8016fb0:	1ac9      	subs	r1, r1, r3
 8016fb2:	f000 f889 	bl	80170c8 <__sccl>
 8016fb6:	f04f 0b00 	mov.w	fp, #0
 8016fba:	68a3      	ldr	r3, [r4, #8]
 8016fbc:	6822      	ldr	r2, [r4, #0]
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d03d      	beq.n	801703e <_scanf_i+0x15e>
 8016fc2:	6831      	ldr	r1, [r6, #0]
 8016fc4:	6960      	ldr	r0, [r4, #20]
 8016fc6:	f891 c000 	ldrb.w	ip, [r1]
 8016fca:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016fce:	2800      	cmp	r0, #0
 8016fd0:	d035      	beq.n	801703e <_scanf_i+0x15e>
 8016fd2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8016fd6:	d124      	bne.n	8017022 <_scanf_i+0x142>
 8016fd8:	0510      	lsls	r0, r2, #20
 8016fda:	d522      	bpl.n	8017022 <_scanf_i+0x142>
 8016fdc:	f10b 0b01 	add.w	fp, fp, #1
 8016fe0:	f1b9 0f00 	cmp.w	r9, #0
 8016fe4:	d003      	beq.n	8016fee <_scanf_i+0x10e>
 8016fe6:	3301      	adds	r3, #1
 8016fe8:	f109 39ff 	add.w	r9, r9, #4294967295
 8016fec:	60a3      	str	r3, [r4, #8]
 8016fee:	6873      	ldr	r3, [r6, #4]
 8016ff0:	3b01      	subs	r3, #1
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	6073      	str	r3, [r6, #4]
 8016ff6:	dd1b      	ble.n	8017030 <_scanf_i+0x150>
 8016ff8:	6833      	ldr	r3, [r6, #0]
 8016ffa:	3301      	adds	r3, #1
 8016ffc:	6033      	str	r3, [r6, #0]
 8016ffe:	68a3      	ldr	r3, [r4, #8]
 8017000:	3b01      	subs	r3, #1
 8017002:	60a3      	str	r3, [r4, #8]
 8017004:	e7d9      	b.n	8016fba <_scanf_i+0xda>
 8017006:	f1bb 0f02 	cmp.w	fp, #2
 801700a:	d1ae      	bne.n	8016f6a <_scanf_i+0x8a>
 801700c:	6822      	ldr	r2, [r4, #0]
 801700e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8017012:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8017016:	d1c4      	bne.n	8016fa2 <_scanf_i+0xc2>
 8017018:	2110      	movs	r1, #16
 801701a:	6061      	str	r1, [r4, #4]
 801701c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8017020:	e7a2      	b.n	8016f68 <_scanf_i+0x88>
 8017022:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8017026:	6022      	str	r2, [r4, #0]
 8017028:	780b      	ldrb	r3, [r1, #0]
 801702a:	f805 3b01 	strb.w	r3, [r5], #1
 801702e:	e7de      	b.n	8016fee <_scanf_i+0x10e>
 8017030:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8017034:	4631      	mov	r1, r6
 8017036:	4650      	mov	r0, sl
 8017038:	4798      	blx	r3
 801703a:	2800      	cmp	r0, #0
 801703c:	d0df      	beq.n	8016ffe <_scanf_i+0x11e>
 801703e:	6823      	ldr	r3, [r4, #0]
 8017040:	05d9      	lsls	r1, r3, #23
 8017042:	d50d      	bpl.n	8017060 <_scanf_i+0x180>
 8017044:	42bd      	cmp	r5, r7
 8017046:	d909      	bls.n	801705c <_scanf_i+0x17c>
 8017048:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801704c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017050:	4632      	mov	r2, r6
 8017052:	4650      	mov	r0, sl
 8017054:	4798      	blx	r3
 8017056:	f105 39ff 	add.w	r9, r5, #4294967295
 801705a:	464d      	mov	r5, r9
 801705c:	42bd      	cmp	r5, r7
 801705e:	d028      	beq.n	80170b2 <_scanf_i+0x1d2>
 8017060:	6822      	ldr	r2, [r4, #0]
 8017062:	f012 0210 	ands.w	r2, r2, #16
 8017066:	d113      	bne.n	8017090 <_scanf_i+0x1b0>
 8017068:	702a      	strb	r2, [r5, #0]
 801706a:	6863      	ldr	r3, [r4, #4]
 801706c:	9e01      	ldr	r6, [sp, #4]
 801706e:	4639      	mov	r1, r7
 8017070:	4650      	mov	r0, sl
 8017072:	47b0      	blx	r6
 8017074:	f8d8 3000 	ldr.w	r3, [r8]
 8017078:	6821      	ldr	r1, [r4, #0]
 801707a:	1d1a      	adds	r2, r3, #4
 801707c:	f8c8 2000 	str.w	r2, [r8]
 8017080:	f011 0f20 	tst.w	r1, #32
 8017084:	681b      	ldr	r3, [r3, #0]
 8017086:	d00f      	beq.n	80170a8 <_scanf_i+0x1c8>
 8017088:	6018      	str	r0, [r3, #0]
 801708a:	68e3      	ldr	r3, [r4, #12]
 801708c:	3301      	adds	r3, #1
 801708e:	60e3      	str	r3, [r4, #12]
 8017090:	6923      	ldr	r3, [r4, #16]
 8017092:	1bed      	subs	r5, r5, r7
 8017094:	445d      	add	r5, fp
 8017096:	442b      	add	r3, r5
 8017098:	6123      	str	r3, [r4, #16]
 801709a:	2000      	movs	r0, #0
 801709c:	b007      	add	sp, #28
 801709e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170a2:	f04f 0b00 	mov.w	fp, #0
 80170a6:	e7ca      	b.n	801703e <_scanf_i+0x15e>
 80170a8:	07ca      	lsls	r2, r1, #31
 80170aa:	bf4c      	ite	mi
 80170ac:	8018      	strhmi	r0, [r3, #0]
 80170ae:	6018      	strpl	r0, [r3, #0]
 80170b0:	e7eb      	b.n	801708a <_scanf_i+0x1aa>
 80170b2:	2001      	movs	r0, #1
 80170b4:	e7f2      	b.n	801709c <_scanf_i+0x1bc>
 80170b6:	bf00      	nop
 80170b8:	08017814 	.word	0x08017814
 80170bc:	080160d9 	.word	0x080160d9
 80170c0:	0801733d 	.word	0x0801733d
 80170c4:	08017a9a 	.word	0x08017a9a

080170c8 <__sccl>:
 80170c8:	b570      	push	{r4, r5, r6, lr}
 80170ca:	780b      	ldrb	r3, [r1, #0]
 80170cc:	4604      	mov	r4, r0
 80170ce:	2b5e      	cmp	r3, #94	@ 0x5e
 80170d0:	bf0b      	itete	eq
 80170d2:	784b      	ldrbeq	r3, [r1, #1]
 80170d4:	1c4a      	addne	r2, r1, #1
 80170d6:	1c8a      	addeq	r2, r1, #2
 80170d8:	2100      	movne	r1, #0
 80170da:	bf08      	it	eq
 80170dc:	2101      	moveq	r1, #1
 80170de:	3801      	subs	r0, #1
 80170e0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80170e4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80170e8:	42a8      	cmp	r0, r5
 80170ea:	d1fb      	bne.n	80170e4 <__sccl+0x1c>
 80170ec:	b90b      	cbnz	r3, 80170f2 <__sccl+0x2a>
 80170ee:	1e50      	subs	r0, r2, #1
 80170f0:	bd70      	pop	{r4, r5, r6, pc}
 80170f2:	f081 0101 	eor.w	r1, r1, #1
 80170f6:	54e1      	strb	r1, [r4, r3]
 80170f8:	4610      	mov	r0, r2
 80170fa:	4602      	mov	r2, r0
 80170fc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8017100:	2d2d      	cmp	r5, #45	@ 0x2d
 8017102:	d005      	beq.n	8017110 <__sccl+0x48>
 8017104:	2d5d      	cmp	r5, #93	@ 0x5d
 8017106:	d016      	beq.n	8017136 <__sccl+0x6e>
 8017108:	2d00      	cmp	r5, #0
 801710a:	d0f1      	beq.n	80170f0 <__sccl+0x28>
 801710c:	462b      	mov	r3, r5
 801710e:	e7f2      	b.n	80170f6 <__sccl+0x2e>
 8017110:	7846      	ldrb	r6, [r0, #1]
 8017112:	2e5d      	cmp	r6, #93	@ 0x5d
 8017114:	d0fa      	beq.n	801710c <__sccl+0x44>
 8017116:	42b3      	cmp	r3, r6
 8017118:	dcf8      	bgt.n	801710c <__sccl+0x44>
 801711a:	3002      	adds	r0, #2
 801711c:	461a      	mov	r2, r3
 801711e:	3201      	adds	r2, #1
 8017120:	4296      	cmp	r6, r2
 8017122:	54a1      	strb	r1, [r4, r2]
 8017124:	dcfb      	bgt.n	801711e <__sccl+0x56>
 8017126:	1af2      	subs	r2, r6, r3
 8017128:	3a01      	subs	r2, #1
 801712a:	1c5d      	adds	r5, r3, #1
 801712c:	42b3      	cmp	r3, r6
 801712e:	bfa8      	it	ge
 8017130:	2200      	movge	r2, #0
 8017132:	18ab      	adds	r3, r5, r2
 8017134:	e7e1      	b.n	80170fa <__sccl+0x32>
 8017136:	4610      	mov	r0, r2
 8017138:	e7da      	b.n	80170f0 <__sccl+0x28>

0801713a <__submore>:
 801713a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801713e:	460c      	mov	r4, r1
 8017140:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8017142:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017146:	4299      	cmp	r1, r3
 8017148:	d11d      	bne.n	8017186 <__submore+0x4c>
 801714a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801714e:	f7ff f92d 	bl	80163ac <_malloc_r>
 8017152:	b918      	cbnz	r0, 801715c <__submore+0x22>
 8017154:	f04f 30ff 	mov.w	r0, #4294967295
 8017158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801715c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017160:	63a3      	str	r3, [r4, #56]	@ 0x38
 8017162:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8017166:	6360      	str	r0, [r4, #52]	@ 0x34
 8017168:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801716c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8017170:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8017174:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8017178:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801717c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8017180:	6020      	str	r0, [r4, #0]
 8017182:	2000      	movs	r0, #0
 8017184:	e7e8      	b.n	8017158 <__submore+0x1e>
 8017186:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8017188:	0077      	lsls	r7, r6, #1
 801718a:	463a      	mov	r2, r7
 801718c:	f000 f83a 	bl	8017204 <_realloc_r>
 8017190:	4605      	mov	r5, r0
 8017192:	2800      	cmp	r0, #0
 8017194:	d0de      	beq.n	8017154 <__submore+0x1a>
 8017196:	eb00 0806 	add.w	r8, r0, r6
 801719a:	4601      	mov	r1, r0
 801719c:	4632      	mov	r2, r6
 801719e:	4640      	mov	r0, r8
 80171a0:	f7ff f88a 	bl	80162b8 <memcpy>
 80171a4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80171a8:	f8c4 8000 	str.w	r8, [r4]
 80171ac:	e7e9      	b.n	8017182 <__submore+0x48>

080171ae <memmove>:
 80171ae:	4288      	cmp	r0, r1
 80171b0:	b510      	push	{r4, lr}
 80171b2:	eb01 0402 	add.w	r4, r1, r2
 80171b6:	d902      	bls.n	80171be <memmove+0x10>
 80171b8:	4284      	cmp	r4, r0
 80171ba:	4623      	mov	r3, r4
 80171bc:	d807      	bhi.n	80171ce <memmove+0x20>
 80171be:	1e43      	subs	r3, r0, #1
 80171c0:	42a1      	cmp	r1, r4
 80171c2:	d008      	beq.n	80171d6 <memmove+0x28>
 80171c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80171c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80171cc:	e7f8      	b.n	80171c0 <memmove+0x12>
 80171ce:	4402      	add	r2, r0
 80171d0:	4601      	mov	r1, r0
 80171d2:	428a      	cmp	r2, r1
 80171d4:	d100      	bne.n	80171d8 <memmove+0x2a>
 80171d6:	bd10      	pop	{r4, pc}
 80171d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80171dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80171e0:	e7f7      	b.n	80171d2 <memmove+0x24>
	...

080171e4 <_sbrk_r>:
 80171e4:	b538      	push	{r3, r4, r5, lr}
 80171e6:	4d06      	ldr	r5, [pc, #24]	@ (8017200 <_sbrk_r+0x1c>)
 80171e8:	2300      	movs	r3, #0
 80171ea:	4604      	mov	r4, r0
 80171ec:	4608      	mov	r0, r1
 80171ee:	602b      	str	r3, [r5, #0]
 80171f0:	f7f0 fdaa 	bl	8007d48 <_sbrk>
 80171f4:	1c43      	adds	r3, r0, #1
 80171f6:	d102      	bne.n	80171fe <_sbrk_r+0x1a>
 80171f8:	682b      	ldr	r3, [r5, #0]
 80171fa:	b103      	cbz	r3, 80171fe <_sbrk_r+0x1a>
 80171fc:	6023      	str	r3, [r4, #0]
 80171fe:	bd38      	pop	{r3, r4, r5, pc}
 8017200:	20005b4c 	.word	0x20005b4c

08017204 <_realloc_r>:
 8017204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017208:	4607      	mov	r7, r0
 801720a:	4614      	mov	r4, r2
 801720c:	460d      	mov	r5, r1
 801720e:	b921      	cbnz	r1, 801721a <_realloc_r+0x16>
 8017210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017214:	4611      	mov	r1, r2
 8017216:	f7ff b8c9 	b.w	80163ac <_malloc_r>
 801721a:	b92a      	cbnz	r2, 8017228 <_realloc_r+0x24>
 801721c:	f7ff f85a 	bl	80162d4 <_free_r>
 8017220:	4625      	mov	r5, r4
 8017222:	4628      	mov	r0, r5
 8017224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017228:	f000 f88a 	bl	8017340 <_malloc_usable_size_r>
 801722c:	4284      	cmp	r4, r0
 801722e:	4606      	mov	r6, r0
 8017230:	d802      	bhi.n	8017238 <_realloc_r+0x34>
 8017232:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017236:	d8f4      	bhi.n	8017222 <_realloc_r+0x1e>
 8017238:	4621      	mov	r1, r4
 801723a:	4638      	mov	r0, r7
 801723c:	f7ff f8b6 	bl	80163ac <_malloc_r>
 8017240:	4680      	mov	r8, r0
 8017242:	b908      	cbnz	r0, 8017248 <_realloc_r+0x44>
 8017244:	4645      	mov	r5, r8
 8017246:	e7ec      	b.n	8017222 <_realloc_r+0x1e>
 8017248:	42b4      	cmp	r4, r6
 801724a:	4622      	mov	r2, r4
 801724c:	4629      	mov	r1, r5
 801724e:	bf28      	it	cs
 8017250:	4632      	movcs	r2, r6
 8017252:	f7ff f831 	bl	80162b8 <memcpy>
 8017256:	4629      	mov	r1, r5
 8017258:	4638      	mov	r0, r7
 801725a:	f7ff f83b 	bl	80162d4 <_free_r>
 801725e:	e7f1      	b.n	8017244 <_realloc_r+0x40>

08017260 <_strtoul_l.isra.0>:
 8017260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017264:	4e34      	ldr	r6, [pc, #208]	@ (8017338 <_strtoul_l.isra.0+0xd8>)
 8017266:	4686      	mov	lr, r0
 8017268:	460d      	mov	r5, r1
 801726a:	4628      	mov	r0, r5
 801726c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017270:	5d37      	ldrb	r7, [r6, r4]
 8017272:	f017 0708 	ands.w	r7, r7, #8
 8017276:	d1f8      	bne.n	801726a <_strtoul_l.isra.0+0xa>
 8017278:	2c2d      	cmp	r4, #45	@ 0x2d
 801727a:	d110      	bne.n	801729e <_strtoul_l.isra.0+0x3e>
 801727c:	782c      	ldrb	r4, [r5, #0]
 801727e:	2701      	movs	r7, #1
 8017280:	1c85      	adds	r5, r0, #2
 8017282:	f033 0010 	bics.w	r0, r3, #16
 8017286:	d115      	bne.n	80172b4 <_strtoul_l.isra.0+0x54>
 8017288:	2c30      	cmp	r4, #48	@ 0x30
 801728a:	d10d      	bne.n	80172a8 <_strtoul_l.isra.0+0x48>
 801728c:	7828      	ldrb	r0, [r5, #0]
 801728e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8017292:	2858      	cmp	r0, #88	@ 0x58
 8017294:	d108      	bne.n	80172a8 <_strtoul_l.isra.0+0x48>
 8017296:	786c      	ldrb	r4, [r5, #1]
 8017298:	3502      	adds	r5, #2
 801729a:	2310      	movs	r3, #16
 801729c:	e00a      	b.n	80172b4 <_strtoul_l.isra.0+0x54>
 801729e:	2c2b      	cmp	r4, #43	@ 0x2b
 80172a0:	bf04      	itt	eq
 80172a2:	782c      	ldrbeq	r4, [r5, #0]
 80172a4:	1c85      	addeq	r5, r0, #2
 80172a6:	e7ec      	b.n	8017282 <_strtoul_l.isra.0+0x22>
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d1f6      	bne.n	801729a <_strtoul_l.isra.0+0x3a>
 80172ac:	2c30      	cmp	r4, #48	@ 0x30
 80172ae:	bf14      	ite	ne
 80172b0:	230a      	movne	r3, #10
 80172b2:	2308      	moveq	r3, #8
 80172b4:	f04f 38ff 	mov.w	r8, #4294967295
 80172b8:	2600      	movs	r6, #0
 80172ba:	fbb8 f8f3 	udiv	r8, r8, r3
 80172be:	fb03 f908 	mul.w	r9, r3, r8
 80172c2:	ea6f 0909 	mvn.w	r9, r9
 80172c6:	4630      	mov	r0, r6
 80172c8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80172cc:	f1bc 0f09 	cmp.w	ip, #9
 80172d0:	d810      	bhi.n	80172f4 <_strtoul_l.isra.0+0x94>
 80172d2:	4664      	mov	r4, ip
 80172d4:	42a3      	cmp	r3, r4
 80172d6:	dd1e      	ble.n	8017316 <_strtoul_l.isra.0+0xb6>
 80172d8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80172dc:	d007      	beq.n	80172ee <_strtoul_l.isra.0+0x8e>
 80172de:	4580      	cmp	r8, r0
 80172e0:	d316      	bcc.n	8017310 <_strtoul_l.isra.0+0xb0>
 80172e2:	d101      	bne.n	80172e8 <_strtoul_l.isra.0+0x88>
 80172e4:	45a1      	cmp	r9, r4
 80172e6:	db13      	blt.n	8017310 <_strtoul_l.isra.0+0xb0>
 80172e8:	fb00 4003 	mla	r0, r0, r3, r4
 80172ec:	2601      	movs	r6, #1
 80172ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80172f2:	e7e9      	b.n	80172c8 <_strtoul_l.isra.0+0x68>
 80172f4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80172f8:	f1bc 0f19 	cmp.w	ip, #25
 80172fc:	d801      	bhi.n	8017302 <_strtoul_l.isra.0+0xa2>
 80172fe:	3c37      	subs	r4, #55	@ 0x37
 8017300:	e7e8      	b.n	80172d4 <_strtoul_l.isra.0+0x74>
 8017302:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8017306:	f1bc 0f19 	cmp.w	ip, #25
 801730a:	d804      	bhi.n	8017316 <_strtoul_l.isra.0+0xb6>
 801730c:	3c57      	subs	r4, #87	@ 0x57
 801730e:	e7e1      	b.n	80172d4 <_strtoul_l.isra.0+0x74>
 8017310:	f04f 36ff 	mov.w	r6, #4294967295
 8017314:	e7eb      	b.n	80172ee <_strtoul_l.isra.0+0x8e>
 8017316:	1c73      	adds	r3, r6, #1
 8017318:	d106      	bne.n	8017328 <_strtoul_l.isra.0+0xc8>
 801731a:	2322      	movs	r3, #34	@ 0x22
 801731c:	f8ce 3000 	str.w	r3, [lr]
 8017320:	4630      	mov	r0, r6
 8017322:	b932      	cbnz	r2, 8017332 <_strtoul_l.isra.0+0xd2>
 8017324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017328:	b107      	cbz	r7, 801732c <_strtoul_l.isra.0+0xcc>
 801732a:	4240      	negs	r0, r0
 801732c:	2a00      	cmp	r2, #0
 801732e:	d0f9      	beq.n	8017324 <_strtoul_l.isra.0+0xc4>
 8017330:	b106      	cbz	r6, 8017334 <_strtoul_l.isra.0+0xd4>
 8017332:	1e69      	subs	r1, r5, #1
 8017334:	6011      	str	r1, [r2, #0]
 8017336:	e7f5      	b.n	8017324 <_strtoul_l.isra.0+0xc4>
 8017338:	08017957 	.word	0x08017957

0801733c <_strtoul_r>:
 801733c:	f7ff bf90 	b.w	8017260 <_strtoul_l.isra.0>

08017340 <_malloc_usable_size_r>:
 8017340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017344:	1f18      	subs	r0, r3, #4
 8017346:	2b00      	cmp	r3, #0
 8017348:	bfbc      	itt	lt
 801734a:	580b      	ldrlt	r3, [r1, r0]
 801734c:	18c0      	addlt	r0, r0, r3
 801734e:	4770      	bx	lr

08017350 <_init>:
 8017350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017352:	bf00      	nop
 8017354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017356:	bc08      	pop	{r3}
 8017358:	469e      	mov	lr, r3
 801735a:	4770      	bx	lr

0801735c <_fini>:
 801735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801735e:	bf00      	nop
 8017360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017362:	bc08      	pop	{r3}
 8017364:	469e      	mov	lr, r3
 8017366:	4770      	bx	lr
