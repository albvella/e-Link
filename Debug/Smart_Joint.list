
Smart_Joint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016d4c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  08016edc  08016edc  00017edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801768c  0801768c  000191ec  2**0
                  CONTENTS
  4 .ARM          00000008  0801768c  0801768c  0001868c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017694  08017694  000191ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017694  08017694  00018694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017698  08017698  00018698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0801769c  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c64  200001f0  08017888  000191f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005e54  08017888  00019e54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000191ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039bf9  00000000  00000000  0001921c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000675b  00000000  00000000  00052e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e38  00000000  00000000  00059570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002418  00000000  00000000  0005c3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000310ea  00000000  00000000  0005e7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037bca  00000000  00000000  0008f8aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012496e  00000000  00000000  000c7474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ebde2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d08c  00000000  00000000  001ebe28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001f8eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016ec4 	.word	0x08016ec4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08016ec4 	.word	0x08016ec4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b988 	b.w	8000da4 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	468e      	mov	lr, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	4688      	mov	r8, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d962      	bls.n	8000b88 <__udivmoddi4+0xdc>
 8000ac2:	fab2 f682 	clz	r6, r2
 8000ac6:	b14e      	cbz	r6, 8000adc <__udivmoddi4+0x30>
 8000ac8:	f1c6 0320 	rsb	r3, r6, #32
 8000acc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ad0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad4:	40b7      	lsls	r7, r6
 8000ad6:	ea43 0808 	orr.w	r8, r3, r8
 8000ada:	40b4      	lsls	r4, r6
 8000adc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae0:	fa1f fc87 	uxth.w	ip, r7
 8000ae4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	fb0e 8811 	mls	r8, lr, r1, r8
 8000aee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af2:	fb01 f20c 	mul.w	r2, r1, ip
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b00:	f080 80ea 	bcs.w	8000cd8 <__udivmoddi4+0x22c>
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f240 80e7 	bls.w	8000cd8 <__udivmoddi4+0x22c>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	1a9a      	subs	r2, r3, r2
 8000b10:	b2a3      	uxth	r3, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b22:	459c      	cmp	ip, r3
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0x8e>
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2c:	f080 80d6 	bcs.w	8000cdc <__udivmoddi4+0x230>
 8000b30:	459c      	cmp	ip, r3
 8000b32:	f240 80d3 	bls.w	8000cdc <__udivmoddi4+0x230>
 8000b36:	443b      	add	r3, r7
 8000b38:	3802      	subs	r0, #2
 8000b3a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b3e:	eba3 030c 	sub.w	r3, r3, ip
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11d      	cbz	r5, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40f3      	lsrs	r3, r6
 8000b48:	2200      	movs	r2, #0
 8000b4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d905      	bls.n	8000b62 <__udivmoddi4+0xb6>
 8000b56:	b10d      	cbz	r5, 8000b5c <__udivmoddi4+0xb0>
 8000b58:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e7f5      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b62:	fab3 f183 	clz	r1, r3
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d146      	bne.n	8000bf8 <__udivmoddi4+0x14c>
 8000b6a:	4573      	cmp	r3, lr
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0xc8>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 8105 	bhi.w	8000d7e <__udivmoddi4+0x2d2>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0e5      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b82:	e9c5 4800 	strd	r4, r8, [r5]
 8000b86:	e7e2      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f000 8090 	beq.w	8000cae <__udivmoddi4+0x202>
 8000b8e:	fab2 f682 	clz	r6, r2
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	f040 80a4 	bne.w	8000ce0 <__udivmoddi4+0x234>
 8000b98:	1a8a      	subs	r2, r1, r2
 8000b9a:	0c03      	lsrs	r3, r0, #16
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	b280      	uxth	r0, r0
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000baa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb2:	fb04 f20c 	mul.w	r2, r4, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <__udivmoddi4+0x11e>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x11c>
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f200 80e0 	bhi.w	8000d88 <__udivmoddi4+0x2dc>
 8000bc8:	46c4      	mov	ip, r8
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bd0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bd4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bd8:	fb02 f404 	mul.w	r4, r2, r4
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x144>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x142>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f200 80ca 	bhi.w	8000d82 <__udivmoddi4+0x2d6>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	1b1b      	subs	r3, r3, r4
 8000bf2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bf6:	e7a5      	b.n	8000b44 <__udivmoddi4+0x98>
 8000bf8:	f1c1 0620 	rsb	r6, r1, #32
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000c02:	431f      	orrs	r7, r3
 8000c04:	fa0e f401 	lsl.w	r4, lr, r1
 8000c08:	fa20 f306 	lsr.w	r3, r0, r6
 8000c0c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c10:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c14:	4323      	orrs	r3, r4
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	fa1f fc87 	uxth.w	ip, r7
 8000c1e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c22:	0c1c      	lsrs	r4, r3, #16
 8000c24:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c2c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	fa02 f201 	lsl.w	r2, r2, r1
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x1a0>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c3e:	f080 809c 	bcs.w	8000d7a <__udivmoddi4+0x2ce>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8099 	bls.w	8000d7a <__udivmoddi4+0x2ce>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	fa1f fe83 	uxth.w	lr, r3
 8000c54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c58:	fb09 4413 	mls	r4, r9, r3, r4
 8000c5c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c60:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c64:	45a4      	cmp	ip, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x1ce>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c6e:	f080 8082 	bcs.w	8000d76 <__udivmoddi4+0x2ca>
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	d97f      	bls.n	8000d76 <__udivmoddi4+0x2ca>
 8000c76:	3b02      	subs	r3, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c7e:	eba4 040c 	sub.w	r4, r4, ip
 8000c82:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c86:	4564      	cmp	r4, ip
 8000c88:	4673      	mov	r3, lr
 8000c8a:	46e1      	mov	r9, ip
 8000c8c:	d362      	bcc.n	8000d54 <__udivmoddi4+0x2a8>
 8000c8e:	d05f      	beq.n	8000d50 <__udivmoddi4+0x2a4>
 8000c90:	b15d      	cbz	r5, 8000caa <__udivmoddi4+0x1fe>
 8000c92:	ebb8 0203 	subs.w	r2, r8, r3
 8000c96:	eb64 0409 	sbc.w	r4, r4, r9
 8000c9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000ca2:	431e      	orrs	r6, r3
 8000ca4:	40cc      	lsrs	r4, r1
 8000ca6:	e9c5 6400 	strd	r6, r4, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	e74f      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000cae:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cb2:	0c01      	lsrs	r1, r0, #16
 8000cb4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cb8:	b280      	uxth	r0, r0
 8000cba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	463c      	mov	r4, r7
 8000cc4:	46b8      	mov	r8, r7
 8000cc6:	46be      	mov	lr, r7
 8000cc8:	2620      	movs	r6, #32
 8000cca:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cce:	eba2 0208 	sub.w	r2, r2, r8
 8000cd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cd6:	e766      	b.n	8000ba6 <__udivmoddi4+0xfa>
 8000cd8:	4601      	mov	r1, r0
 8000cda:	e718      	b.n	8000b0e <__udivmoddi4+0x62>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	e72c      	b.n	8000b3a <__udivmoddi4+0x8e>
 8000ce0:	f1c6 0220 	rsb	r2, r6, #32
 8000ce4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ce8:	40b7      	lsls	r7, r6
 8000cea:	40b1      	lsls	r1, r6
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cfa:	b2bc      	uxth	r4, r7
 8000cfc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb08 f904 	mul.w	r9, r8, r4
 8000d0a:	40b0      	lsls	r0, r6
 8000d0c:	4589      	cmp	r9, r1
 8000d0e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d12:	b280      	uxth	r0, r0
 8000d14:	d93e      	bls.n	8000d94 <__udivmoddi4+0x2e8>
 8000d16:	1879      	adds	r1, r7, r1
 8000d18:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d1c:	d201      	bcs.n	8000d22 <__udivmoddi4+0x276>
 8000d1e:	4589      	cmp	r9, r1
 8000d20:	d81f      	bhi.n	8000d62 <__udivmoddi4+0x2b6>
 8000d22:	eba1 0109 	sub.w	r1, r1, r9
 8000d26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2a:	fb09 f804 	mul.w	r8, r9, r4
 8000d2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d32:	b292      	uxth	r2, r2
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	4542      	cmp	r2, r8
 8000d3a:	d229      	bcs.n	8000d90 <__udivmoddi4+0x2e4>
 8000d3c:	18ba      	adds	r2, r7, r2
 8000d3e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d42:	d2c4      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d44:	4542      	cmp	r2, r8
 8000d46:	d2c2      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d48:	f1a9 0102 	sub.w	r1, r9, #2
 8000d4c:	443a      	add	r2, r7
 8000d4e:	e7be      	b.n	8000cce <__udivmoddi4+0x222>
 8000d50:	45f0      	cmp	r8, lr
 8000d52:	d29d      	bcs.n	8000c90 <__udivmoddi4+0x1e4>
 8000d54:	ebbe 0302 	subs.w	r3, lr, r2
 8000d58:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	46e1      	mov	r9, ip
 8000d60:	e796      	b.n	8000c90 <__udivmoddi4+0x1e4>
 8000d62:	eba7 0909 	sub.w	r9, r7, r9
 8000d66:	4449      	add	r1, r9
 8000d68:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d6c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d70:	fb09 f804 	mul.w	r8, r9, r4
 8000d74:	e7db      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d76:	4673      	mov	r3, lr
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1ce>
 8000d7a:	4650      	mov	r0, sl
 8000d7c:	e766      	b.n	8000c4c <__udivmoddi4+0x1a0>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e6fd      	b.n	8000b7e <__udivmoddi4+0xd2>
 8000d82:	443b      	add	r3, r7
 8000d84:	3a02      	subs	r2, #2
 8000d86:	e733      	b.n	8000bf0 <__udivmoddi4+0x144>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	e71c      	b.n	8000bca <__udivmoddi4+0x11e>
 8000d90:	4649      	mov	r1, r9
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x222>
 8000d94:	eba1 0109 	sub.w	r1, r1, r9
 8000d98:	46c4      	mov	ip, r8
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fb09 f804 	mul.w	r8, r9, r4
 8000da2:	e7c4      	b.n	8000d2e <__udivmoddi4+0x282>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
 8000da8:	b480      	push	{r7}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	603b      	str	r3, [r7, #0]
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
#else
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000dbc:	d11a      	bne.n	8000df4 <LL_USART_SetBaudRate+0x4c>
#endif /* USART_PRESC_PRESCALER */
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	005a      	lsls	r2, r3, #1
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	085b      	lsrs	r3, r3, #1
 8000dc6:	441a      	add	r2, r3
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
    brrtemp = usartdiv & 0xFFF0U;
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	085b      	lsrs	r3, r3, #1
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	60da      	str	r2, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif /* USART_PRESC_PRESCALER */
  }
}
 8000df2:	e00a      	b.n	8000e0a <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	085a      	lsrs	r2, r3, #1
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	441a      	add	r2, r3
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	461a      	mov	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	60da      	str	r2, [r3, #12]
}
 8000e0a:	bf00      	nop
 8000e0c:	371c      	adds	r7, #28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <Temp_Sensor_Init>:
#include "stm32l4xx_ll_usart.h"


/*------INIZIALIZZAZIONE SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Init(void)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
	uint8_t data = 0xF0;
 8000e1e:	23f0      	movs	r3, #240	@ 0xf0
 8000e20:	71fb      	strb	r3, [r7, #7]

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 9600);
 8000e22:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e24:	681c      	ldr	r4, [r3, #0]
 8000e26:	f00f f8fb 	bl	8010020 <HAL_RCC_GetPCLK2Freq>
 8000e2a:	4601      	mov	r1, r0
 8000e2c:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000e30:	2200      	movs	r2, #0
 8000e32:	4620      	mov	r0, r4
 8000e34:	f7ff ffb8 	bl	8000da8 <LL_USART_SetBaudRate>

	HAL_UART_Transmit(TEMP_UART, &data, 1, 100);  // low for 500+us
 8000e38:	1df9      	adds	r1, r7, #7
 8000e3a:	2364      	movs	r3, #100	@ 0x64
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	4813      	ldr	r0, [pc, #76]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e40:	f013 fbc8 	bl	80145d4 <HAL_UART_Transmit>
	if (HAL_UART_Receive(TEMP_UART, &data, 1, 1000) != HAL_OK)
 8000e44:	1df9      	adds	r1, r7, #7
 8000e46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	480f      	ldr	r0, [pc, #60]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e4e:	f013 fc4a 	bl	80146e6 <HAL_UART_Receive>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <Temp_Sensor_Init+0x44>
		while(1);
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <Temp_Sensor_Init+0x40>

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 115200);
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e5e:	681c      	ldr	r4, [r3, #0]
 8000e60:	f00f f8de 	bl	8010020 <HAL_RCC_GetPCLK2Freq>
 8000e64:	4601      	mov	r1, r0
 8000e66:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	f7ff ff9b 	bl	8000da8 <LL_USART_SetBaudRate>

	if (data == 0xF0)
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2bf0      	cmp	r3, #240	@ 0xf0
 8000e76:	d101      	bne.n	8000e7c <Temp_Sensor_Init+0x64>
		while(1);
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <Temp_Sensor_Init+0x60>

	Temp_Sensor_Write(0xCC);  // skip ROM
 8000e7c:	20cc      	movs	r0, #204	@ 0xcc
 8000e7e:	f000 f807 	bl	8000e90 <Temp_Sensor_Write>
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd90      	pop	{r4, r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000059c 	.word	0x2000059c

08000e90 <Temp_Sensor_Write>:

/*------SCRITTURA SU SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Write(uint8_t data)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[8];

	for (int i=0; i<8; i++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	e017      	b.n	8000ed0 <Temp_Sensor_Write+0x40>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 8000ea0:	79fa      	ldrb	r2, [r7, #7]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	fa42 f303 	asr.w	r3, r2, r3
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d006      	beq.n	8000ebe <Temp_Sensor_Write+0x2e>
		{
			buffer[i] = 0xFF;  // write 1
 8000eb0:	f107 020c 	add.w	r2, r7, #12
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	22ff      	movs	r2, #255	@ 0xff
 8000eba:	701a      	strb	r2, [r3, #0]
 8000ebc:	e005      	b.n	8000eca <Temp_Sensor_Write+0x3a>
		}
		else  // if the bit is low
		{
			buffer[i] = 0;  // write 0
 8000ebe:	f107 020c 	add.w	r2, r7, #12
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<8; i++)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	2b07      	cmp	r3, #7
 8000ed4:	dde4      	ble.n	8000ea0 <Temp_Sensor_Write+0x10>
		}
	}

	HAL_UART_Transmit(TEMP_UART, buffer, 8, 100);
 8000ed6:	f107 010c 	add.w	r1, r7, #12
 8000eda:	2364      	movs	r3, #100	@ 0x64
 8000edc:	2208      	movs	r2, #8
 8000ede:	4803      	ldr	r0, [pc, #12]	@ (8000eec <Temp_Sensor_Write+0x5c>)
 8000ee0:	f013 fb78 	bl	80145d4 <HAL_UART_Transmit>
}
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	2000059c 	.word	0x2000059c

08000ef0 <Temp_Sensor_ReadByte>:

/*------LETTURA BYTE DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadByte(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
	uint8_t RxByte = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	71bb      	strb	r3, [r7, #6]
 8000efe:	e00e      	b.n	8000f1e <Temp_Sensor_ReadByte+0x2e>
	{
		RxByte >>= 1;
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	085b      	lsrs	r3, r3, #1
 8000f04:	71fb      	strb	r3, [r7, #7]
		if (Temp_Sensor_ReadBit())
 8000f06:	f000 f813 	bl	8000f30 <Temp_Sensor_ReadBit>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <Temp_Sensor_ReadByte+0x28>
		{
			RxByte |= 0x80;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f16:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8000f18:	79bb      	ldrb	r3, [r7, #6]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	71bb      	strb	r3, [r7, #6]
 8000f1e:	79bb      	ldrb	r3, [r7, #6]
 8000f20:	2b07      	cmp	r3, #7
 8000f22:	d9ed      	bls.n	8000f00 <Temp_Sensor_ReadByte+0x10>
		}
	}
	return RxByte;
 8000f24:	79fb      	ldrb	r3, [r7, #7]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <Temp_Sensor_ReadBit>:

/*------LETTURA BIT DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadBit(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
    uint8_t ReadBitCMD = 0xFF;
 8000f36:	23ff      	movs	r3, #255	@ 0xff
 8000f38:	71fb      	strb	r3, [r7, #7]
    uint8_t RxBit;

    // Send Read Bit CMD
    HAL_UART_Transmit(&huart1, &ReadBitCMD, 1, 1);
 8000f3a:	1df9      	adds	r1, r7, #7
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4808      	ldr	r0, [pc, #32]	@ (8000f64 <Temp_Sensor_ReadBit+0x34>)
 8000f42:	f013 fb47 	bl	80145d4 <HAL_UART_Transmit>
    // Receive The Bit
    HAL_UART_Receive(&huart1, &RxBit, 1, 1);
 8000f46:	1db9      	adds	r1, r7, #6
 8000f48:	2301      	movs	r3, #1
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <Temp_Sensor_ReadBit+0x34>)
 8000f4e:	f013 fbca 	bl	80146e6 <HAL_UART_Receive>

    return (RxBit & 0x01);
 8000f52:	79bb      	ldrb	r3, [r7, #6]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000624 	.word	0x20000624

08000f68 <Read_Temperature>:

/*------LETTURA TEMPERATURA------*/
uint16_t Read_Temperature(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
	uint8_t Temp_LSB = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_MSB = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	71bb      	strb	r3, [r7, #6]
	uint16_t Temp = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	80bb      	strh	r3, [r7, #4]
	
	Temp_Sensor_Init();
 8000f7a:	f7ff ff4d 	bl	8000e18 <Temp_Sensor_Init>
	Temp_Sensor_Write(0xCC);  // skip ROM
 8000f7e:	20cc      	movs	r0, #204	@ 0xcc
 8000f80:	f7ff ff86 	bl	8000e90 <Temp_Sensor_Write>

	uint8_t status = Temp_Sensor_ReadBit();
 8000f84:	f7ff ffd4 	bl	8000f30 <Temp_Sensor_ReadBit>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	70fb      	strb	r3, [r7, #3]

	if (status) 
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d01d      	beq.n	8000fce <Read_Temperature+0x66>
	{
		Temp_Sensor_Write(0xBE);  // read Scratch-pad
 8000f92:	20be      	movs	r0, #190	@ 0xbe
 8000f94:	f7ff ff7c 	bl	8000e90 <Temp_Sensor_Write>
		Temp_LSB = Temp_Sensor_ReadByte();
 8000f98:	f7ff ffaa 	bl	8000ef0 <Temp_Sensor_ReadByte>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	71fb      	strb	r3, [r7, #7]
	    Temp_MSB = Temp_Sensor_ReadByte();
 8000fa0:	f7ff ffa6 	bl	8000ef0 <Temp_Sensor_ReadByte>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	71bb      	strb	r3, [r7, #6]
		Temp_Sensor_Init();
 8000fa8:	f7ff ff36 	bl	8000e18 <Temp_Sensor_Init>
		Temp_Sensor_Write(0xCC);  // skip ROM
 8000fac:	20cc      	movs	r0, #204	@ 0xcc
 8000fae:	f7ff ff6f 	bl	8000e90 <Temp_Sensor_Write>
		Temp_Sensor_Write(0x44);  // convert t
 8000fb2:	2044      	movs	r0, #68	@ 0x44
 8000fb4:	f7ff ff6c 	bl	8000e90 <Temp_Sensor_Write>
		Temp = ((Temp_MSB << 8)) | Temp_LSB;
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	80bb      	strh	r3, [r7, #4]
		return Temp;
 8000fca:	88bb      	ldrh	r3, [r7, #4]
 8000fcc:	e000      	b.n	8000fd0 <Read_Temperature+0x68>
	}
	
	return 0; 
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <INA3221_Init>:
#include "INA3221.h"
#include "INA3221_reg.h"
#include "peripherals.h"

void INA3221_Init()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
	uint16_t rcheck = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	80fb      	strh	r3, [r7, #6]

	INA3221_write_reg(INA3221_REG_CONFIG, 0x8000);   //RESET
 8000fe2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 f87a 	bl	80010e0 <INA3221_write_reg>

	HAL_Delay(100);
 8000fec:	2064      	movs	r0, #100	@ 0x64
 8000fee:	f009 fe25 	bl	800ac3c <HAL_Delay>

	INA3221_read_reg(INA3221_REG_MID, &rcheck);
 8000ff2:	1dbb      	adds	r3, r7, #6
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	20fe      	movs	r0, #254	@ 0xfe
 8000ff8:	f000 f83c 	bl	8001074 <INA3221_read_reg>

	if(rcheck != INA3221_DEFAULT_MID)
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	f245 4249 	movw	r2, #21577	@ 0x5449
 8001002:	4293      	cmp	r3, r2
 8001004:	d001      	beq.n	800100a <INA3221_Init+0x32>
		while(1);
 8001006:	bf00      	nop
 8001008:	e7fd      	b.n	8001006 <INA3221_Init+0x2e>

	INA3221_write_reg(INA3221_REG_CONFIG, 0x7D27);   //CH1 CH2 CH3 Enabled, 512 AVG, 1.1ms conv time, continous mode
 800100a:	f647 5127 	movw	r1, #32039	@ 0x7d27
 800100e:	2000      	movs	r0, #0
 8001010:	f000 f866 	bl	80010e0 <INA3221_write_reg>
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <INA3221_Read_Measure>:

void INA3221_Read_Measure(supply_bus_t *measure)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_1, (uint16_t *)&(measure->v1));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4619      	mov	r1, r3
 8001028:	2002      	movs	r0, #2
 800102a:	f000 f823 	bl	8001074 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_2, (uint16_t *)&(measure->v2));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3302      	adds	r3, #2
 8001032:	4619      	mov	r1, r3
 8001034:	2004      	movs	r0, #4
 8001036:	f000 f81d 	bl	8001074 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_3, (uint16_t *)&(measure->v3));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3304      	adds	r3, #4
 800103e:	4619      	mov	r1, r3
 8001040:	2006      	movs	r0, #6
 8001042:	f000 f817 	bl	8001074 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_1, (uint16_t *)&(measure->i1));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3306      	adds	r3, #6
 800104a:	4619      	mov	r1, r3
 800104c:	2001      	movs	r0, #1
 800104e:	f000 f811 	bl	8001074 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_2, (uint16_t *)&(measure->i2));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3308      	adds	r3, #8
 8001056:	4619      	mov	r1, r3
 8001058:	2003      	movs	r0, #3
 800105a:	f000 f80b 	bl	8001074 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_3, (uint16_t *)&(measure->i3));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	330a      	adds	r3, #10
 8001062:	4619      	mov	r1, r3
 8001064:	2005      	movs	r0, #5
 8001066:	f000 f805 	bl	8001074 <INA3221_read_reg>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <INA3221_read_reg>:


int INA3221_read_reg(uint8_t reg, uint16_t *rdata)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af02      	add	r7, sp, #8
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
 8001084:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 8001086:	2300      	movs	r3, #0
 8001088:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, &reg, 1, 100) == HAL_OK)
 800108a:	1dfa      	adds	r2, r7, #7
 800108c:	2364      	movs	r3, #100	@ 0x64
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	2180      	movs	r1, #128	@ 0x80
 8001094:	4811      	ldr	r0, [pc, #68]	@ (80010dc <INA3221_read_reg+0x68>)
 8001096:	f00d f827 	bl	800e0e8 <HAL_I2C_Master_Transmit>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d118      	bne.n	80010d2 <INA3221_read_reg+0x5e>
	{

		if(HAL_I2C_Master_Receive(I2C,  INA3221_ADDR_0 << 1, data, 2, 100) == HAL_OK)
 80010a0:	f107 0208 	add.w	r2, r7, #8
 80010a4:	2364      	movs	r3, #100	@ 0x64
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2302      	movs	r3, #2
 80010aa:	2180      	movs	r1, #128	@ 0x80
 80010ac:	480b      	ldr	r0, [pc, #44]	@ (80010dc <INA3221_read_reg+0x68>)
 80010ae:	f00d f933 	bl	800e318 <HAL_I2C_Master_Receive>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10c      	bne.n	80010d2 <INA3221_read_reg+0x5e>
		{
			result = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 80010bc:	7a3b      	ldrb	r3, [r7, #8]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	7a7b      	ldrb	r3, [r7, #9]
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200002e8 	.word	0x200002e8

080010e0 <INA3221_write_reg>:


int INA3221_write_reg(uint8_t reg, uint16_t wdata)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	4603      	mov	r3, r0
 80010e8:	460a      	mov	r2, r1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	4613      	mov	r3, r2
 80010ee:	80bb      	strh	r3, [r7, #4]
    int result = -1;
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
 80010f4:	60fb      	str	r3, [r7, #12]
    uint8_t data[3];
    
    data[0] = reg;                    
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	723b      	strb	r3, [r7, #8]
    data[1] = (wdata >> 8);          
 80010fa:	88bb      	ldrh	r3, [r7, #4]
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	b29b      	uxth	r3, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	727b      	strb	r3, [r7, #9]
    data[2] = (wdata & 0xFF);        
 8001104:	88bb      	ldrh	r3, [r7, #4]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	72bb      	strb	r3, [r7, #10]

    if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, data, 3, 100) == HAL_OK)
 800110a:	f107 0208 	add.w	r2, r7, #8
 800110e:	2364      	movs	r3, #100	@ 0x64
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2303      	movs	r3, #3
 8001114:	2180      	movs	r1, #128	@ 0x80
 8001116:	4806      	ldr	r0, [pc, #24]	@ (8001130 <INA3221_write_reg+0x50>)
 8001118:	f00c ffe6 	bl	800e0e8 <HAL_I2C_Master_Transmit>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <INA3221_write_reg+0x46>
    {
        result = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
    }
    
    return result;
 8001126:	68fb      	ldr	r3, [r7, #12]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200002e8 	.word	0x200002e8

08001134 <RTC_Init>:
#include "RTC.h"


/*-----INIZiALIZZAZIONE ORA RTC-----*/
void RTC_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
	for (int retry = 0; retry < 3; retry++)
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	e00b      	b.n	8001158 <RTC_Init+0x24>
	{
		if (Get_DateTime_From_Network())
 8001140:	f000 f814 	bl	800116c <Get_DateTime_From_Network>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10c      	bne.n	8001164 <RTC_Init+0x30>
		{
			return;
		}
		HAL_Delay(1000);
 800114a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800114e:	f009 fd75 	bl	800ac3c <HAL_Delay>
	for (int retry = 0; retry < 3; retry++)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3301      	adds	r3, #1
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b02      	cmp	r3, #2
 800115c:	ddf0      	ble.n	8001140 <RTC_Init+0xc>
	}
	Set_Default_DateTime();
 800115e:	f000 f903 	bl	8001368 <Set_Default_DateTime>
 8001162:	e000      	b.n	8001166 <RTC_Init+0x32>
			return;
 8001164:	bf00      	nop
}
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <Get_DateTime_From_Network>:

/*-----SINCRONIZZAZIONE RTC DA RETE-----*/
int Get_DateTime_From_Network(void)
{
 800116c:	b5b0      	push	{r4, r5, r7, lr}
 800116e:	b0a2      	sub	sp, #136	@ 0x88
 8001170:	af00      	add	r7, sp, #0
	char response[100] = {0};
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	2264      	movs	r2, #100	@ 0x64
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f014 fdd2 	bl	8015d24 <memset>
	RTC_DateTypeDef sDate = {0};
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
	RTC_TimeTypeDef sTime = {0};
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

	SIM_Send_Command("AT+CCLK?\r");
 8001192:	4871      	ldr	r0, [pc, #452]	@ (8001358 <Get_DateTime_From_Network+0x1ec>)
 8001194:	f000 fc4c 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8001198:	f107 031c 	add.w	r3, r7, #28
 800119c:	4618      	mov	r0, r3
 800119e:	f000 fc73 	bl	8001a88 <SIM_Receive_Response>

    char* cclk_pos = strstr(response, "+CCLK: \"");
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	496d      	ldr	r1, [pc, #436]	@ (800135c <Get_DateTime_From_Network+0x1f0>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f014 fdf5 	bl	8015d98 <strstr>
 80011ae:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (cclk_pos == NULL)
 80011b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <Get_DateTime_From_Network+0x52>
	{
        return 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e0c8      	b.n	8001350 <Get_DateTime_From_Network+0x1e4>
    }

    char* time_start = cclk_pos + 8;
 80011be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011c2:	3308      	adds	r3, #8
 80011c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    if (strlen(time_start) < 17)
 80011c8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80011cc:	f7ff f80a 	bl	80001e4 <strlen>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b10      	cmp	r3, #16
 80011d4:	d801      	bhi.n	80011da <Get_DateTime_From_Network+0x6e>
	{
		return 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e0ba      	b.n	8001350 <Get_DateTime_From_Network+0x1e4>
	}

	sDate.Year = (time_start[0] - '0') * 10 + (time_start[1] - '0');
 80011da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	3b30      	subs	r3, #48	@ 0x30
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	461a      	mov	r2, r3
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80011f2:	3301      	adds	r3, #1
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	3b30      	subs	r3, #48	@ 0x30
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	76fb      	strb	r3, [r7, #27]
	sDate.Month = (time_start[3] - '0') * 10 + (time_start[4] - '0');
 8001200:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001204:	3303      	adds	r3, #3
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	3b30      	subs	r3, #48	@ 0x30
 800120a:	b2db      	uxtb	r3, r3
 800120c:	461a      	mov	r2, r3
 800120e:	0092      	lsls	r2, r2, #2
 8001210:	4413      	add	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	b2da      	uxtb	r2, r3
 8001216:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800121a:	3304      	adds	r3, #4
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	b2db      	uxtb	r3, r3
 8001222:	3b30      	subs	r3, #48	@ 0x30
 8001224:	b2db      	uxtb	r3, r3
 8001226:	767b      	strb	r3, [r7, #25]
	sDate.Date = (time_start[6] - '0') * 10 + (time_start[7] - '0');
 8001228:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800122c:	3306      	adds	r3, #6
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	3b30      	subs	r3, #48	@ 0x30
 8001232:	b2db      	uxtb	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	4413      	add	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	b2da      	uxtb	r2, r3
 800123e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001242:	3307      	adds	r3, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	b2db      	uxtb	r3, r3
 800124a:	3b30      	subs	r3, #48	@ 0x30
 800124c:	b2db      	uxtb	r3, r3
 800124e:	76bb      	strb	r3, [r7, #26]

	sTime.Hours = (time_start[9] - '0') * 10 + (time_start[10] - '0');
 8001250:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001254:	3309      	adds	r3, #9
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	3b30      	subs	r3, #48	@ 0x30
 800125a:	b2db      	uxtb	r3, r3
 800125c:	461a      	mov	r2, r3
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4413      	add	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	b2da      	uxtb	r2, r3
 8001266:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800126a:	330a      	adds	r3, #10
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	b2db      	uxtb	r3, r3
 8001272:	3b30      	subs	r3, #48	@ 0x30
 8001274:	b2db      	uxtb	r3, r3
 8001276:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = (time_start[12] - '0') * 10 + (time_start[13] - '0');
 8001278:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800127c:	330c      	adds	r3, #12
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	3b30      	subs	r3, #48	@ 0x30
 8001282:	b2db      	uxtb	r3, r3
 8001284:	461a      	mov	r2, r3
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	4413      	add	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	b2da      	uxtb	r2, r3
 800128e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001292:	330d      	adds	r3, #13
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	4413      	add	r3, r2
 8001298:	b2db      	uxtb	r3, r3
 800129a:	3b30      	subs	r3, #48	@ 0x30
 800129c:	b2db      	uxtb	r3, r3
 800129e:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = (time_start[15] - '0') * 10 + (time_start[16] - '0');
 80012a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012a4:	330f      	adds	r3, #15
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	3b30      	subs	r3, #48	@ 0x30
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	461a      	mov	r2, r3
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012ba:	3310      	adds	r3, #16
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	3b30      	subs	r3, #48	@ 0x30
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	71bb      	strb	r3, [r7, #6]

	if (sDate.Month < 1 || sDate.Month > 12 ||
 80012c8:	7e7b      	ldrb	r3, [r7, #25]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d011      	beq.n	80012f2 <Get_DateTime_From_Network+0x186>
 80012ce:	7e7b      	ldrb	r3, [r7, #25]
 80012d0:	2b0c      	cmp	r3, #12
 80012d2:	d80e      	bhi.n	80012f2 <Get_DateTime_From_Network+0x186>
        sDate.Date < 1 || sDate.Date > 31 ||
 80012d4:	7ebb      	ldrb	r3, [r7, #26]
	if (sDate.Month < 1 || sDate.Month > 12 ||
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00b      	beq.n	80012f2 <Get_DateTime_From_Network+0x186>
        sDate.Date < 1 || sDate.Date > 31 ||
 80012da:	7ebb      	ldrb	r3, [r7, #26]
 80012dc:	2b1f      	cmp	r3, #31
 80012de:	d808      	bhi.n	80012f2 <Get_DateTime_From_Network+0x186>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 80012e0:	793b      	ldrb	r3, [r7, #4]
        sDate.Date < 1 || sDate.Date > 31 ||
 80012e2:	2b17      	cmp	r3, #23
 80012e4:	d805      	bhi.n	80012f2 <Get_DateTime_From_Network+0x186>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 80012e6:	797b      	ldrb	r3, [r7, #5]
 80012e8:	2b3b      	cmp	r3, #59	@ 0x3b
 80012ea:	d802      	bhi.n	80012f2 <Get_DateTime_From_Network+0x186>
 80012ec:	79bb      	ldrb	r3, [r7, #6]
 80012ee:	2b3b      	cmp	r3, #59	@ 0x3b
 80012f0:	d901      	bls.n	80012f6 <Get_DateTime_From_Network+0x18a>
        return 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e02c      	b.n	8001350 <Get_DateTime_From_Network+0x1e4>
    }

	sDate.WeekDay = Calculate_Weekday(sDate.Year + 2000, sDate.Month, sDate.Date);
 80012f6:	7efb      	ldrb	r3, [r7, #27]
 80012f8:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	7e79      	ldrb	r1, [r7, #25]
 8001300:	7eba      	ldrb	r2, [r7, #26]
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f874 	bl	80013f0 <Calculate_Weekday>
 8001308:	4603      	mov	r3, r0
 800130a:	763b      	strb	r3, [r7, #24]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001314:	f107 0318 	add.w	r3, r7, #24
 8001318:	2200      	movs	r2, #0
 800131a:	4619      	mov	r1, r3
 800131c:	4810      	ldr	r0, [pc, #64]	@ (8001360 <Get_DateTime_From_Network+0x1f4>)
 800131e:	f00f fd32 	bl	8010d86 <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	4619      	mov	r1, r3
 8001328:	480d      	ldr	r0, [pc, #52]	@ (8001360 <Get_DateTime_From_Network+0x1f4>)
 800132a:	f00f fc33 	bl	8010b94 <HAL_RTC_SetTime>

    sys.onDate = sDate;
 800132e:	4b0d      	ldr	r3, [pc, #52]	@ (8001364 <Get_DateTime_From_Network+0x1f8>)
 8001330:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001334:	461a      	mov	r2, r3
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	6413      	str	r3, [r2, #64]	@ 0x40
    sys.onTime = sTime;
 800133a:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <Get_DateTime_From_Network+0x1f8>)
 800133c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001340:	f103 0444 	add.w	r4, r3, #68	@ 0x44
 8001344:	1d3d      	adds	r5, r7, #4
 8001346:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001348:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800134a:	682b      	ldr	r3, [r5, #0]
 800134c:	6023      	str	r3, [r4, #0]
    
	return 1;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	3788      	adds	r7, #136	@ 0x88
 8001354:	46bd      	mov	sp, r7
 8001356:	bdb0      	pop	{r4, r5, r7, pc}
 8001358:	08016edc 	.word	0x08016edc
 800135c:	08016ee8 	.word	0x08016ee8
 8001360:	20000380 	.word	0x20000380
 8001364:	20000740 	.word	0x20000740

08001368 <Set_Default_DateTime>:

/*-----DATA E ORA DI DEFAULT 1/1/2020 00:00:00-----*/
void Set_Default_DateTime(void)
{
 8001368:	b5b0      	push	{r4, r5, r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
    RTC_DateTypeDef sDate = {0};
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
    RTC_TimeTypeDef sTime = {0};
 8001372:	463b      	mov	r3, r7
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]

    // Default: 01/01/2020 00:00:00
    sDate.Year = 20;  // 2020
 8001380:	2314      	movs	r3, #20
 8001382:	75fb      	strb	r3, [r7, #23]
    sDate.Month = RTC_MONTH_JANUARY;
 8001384:	2301      	movs	r3, #1
 8001386:	757b      	strb	r3, [r7, #21]
    sDate.Date = 1;
 8001388:	2301      	movs	r3, #1
 800138a:	75bb      	strb	r3, [r7, #22]
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY; // 1 Jan 2020 era mercoledì
 800138c:	2303      	movs	r3, #3
 800138e:	753b      	strb	r3, [r7, #20]

    sTime.Hours = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	703b      	strb	r3, [r7, #0]
    sTime.Minutes = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	707b      	strb	r3, [r7, #1]
    sTime.Seconds = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	70bb      	strb	r3, [r7, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]

    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	4619      	mov	r1, r3
 80013ac:	480e      	ldr	r0, [pc, #56]	@ (80013e8 <Set_Default_DateTime+0x80>)
 80013ae:	f00f fcea 	bl	8010d86 <HAL_RTC_SetDate>
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80013b2:	463b      	mov	r3, r7
 80013b4:	2200      	movs	r2, #0
 80013b6:	4619      	mov	r1, r3
 80013b8:	480b      	ldr	r0, [pc, #44]	@ (80013e8 <Set_Default_DateTime+0x80>)
 80013ba:	f00f fbeb 	bl	8010b94 <HAL_RTC_SetTime>

    sys.onDate = sDate;
 80013be:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <Set_Default_DateTime+0x84>)
 80013c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013c4:	461a      	mov	r2, r3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	6413      	str	r3, [r2, #64]	@ 0x40
    sys.onTime = sTime;
 80013ca:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <Set_Default_DateTime+0x84>)
 80013cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013d0:	f103 0444 	add.w	r4, r3, #68	@ 0x44
 80013d4:	463d      	mov	r5, r7
 80013d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013da:	682b      	ldr	r3, [r5, #0]
 80013dc:	6023      	str	r3, [r4, #0]
}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bdb0      	pop	{r4, r5, r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000380 	.word	0x20000380
 80013ec:	20000740 	.word	0x20000740

080013f0 <Calculate_Weekday>:

/*-----CALCOLO GIORNO SETTIMANA-----*/
uint8_t Calculate_Weekday(uint16_t year, uint8_t month, uint8_t day)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
 80013fa:	460b      	mov	r3, r1
 80013fc:	717b      	strb	r3, [r7, #5]
 80013fe:	4613      	mov	r3, r2
 8001400:	713b      	strb	r3, [r7, #4]
    // Algoritmo di Zeller per calcolo giorno settimana
    if (month < 3) {
 8001402:	797b      	ldrb	r3, [r7, #5]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d805      	bhi.n	8001414 <Calculate_Weekday+0x24>
        month += 12;
 8001408:	797b      	ldrb	r3, [r7, #5]
 800140a:	330c      	adds	r3, #12
 800140c:	717b      	strb	r3, [r7, #5]
        year--;
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	3b01      	subs	r3, #1
 8001412:	80fb      	strh	r3, [r7, #6]
    }
    uint8_t zeller_day = (day + ((13 * (month + 1)) / 5) + year + (year / 4) - (year / 100) + (year / 400)) % 7;
 8001414:	7939      	ldrb	r1, [r7, #4]
 8001416:	797b      	ldrb	r3, [r7, #5]
 8001418:	1c5a      	adds	r2, r3, #1
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	4a1e      	ldr	r2, [pc, #120]	@ (80014a0 <Calculate_Weekday+0xb0>)
 8001426:	fb82 0203 	smull	r0, r2, r2, r3
 800142a:	1052      	asrs	r2, r2, #1
 800142c:	17db      	asrs	r3, r3, #31
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	18ca      	adds	r2, r1, r3
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	4413      	add	r3, r2
 8001436:	88fa      	ldrh	r2, [r7, #6]
 8001438:	0892      	lsrs	r2, r2, #2
 800143a:	b292      	uxth	r2, r2
 800143c:	4413      	add	r3, r2
 800143e:	88fa      	ldrh	r2, [r7, #6]
 8001440:	4918      	ldr	r1, [pc, #96]	@ (80014a4 <Calculate_Weekday+0xb4>)
 8001442:	fba1 1202 	umull	r1, r2, r1, r2
 8001446:	0952      	lsrs	r2, r2, #5
 8001448:	b292      	uxth	r2, r2
 800144a:	1a9b      	subs	r3, r3, r2
 800144c:	88fa      	ldrh	r2, [r7, #6]
 800144e:	4915      	ldr	r1, [pc, #84]	@ (80014a4 <Calculate_Weekday+0xb4>)
 8001450:	fba1 1202 	umull	r1, r2, r1, r2
 8001454:	09d2      	lsrs	r2, r2, #7
 8001456:	b292      	uxth	r2, r2
 8001458:	441a      	add	r2, r3
 800145a:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <Calculate_Weekday+0xb8>)
 800145c:	fb83 1302 	smull	r1, r3, r3, r2
 8001460:	4413      	add	r3, r2
 8001462:	1099      	asrs	r1, r3, #2
 8001464:	17d3      	asrs	r3, r2, #31
 8001466:	1ac9      	subs	r1, r1, r3
 8001468:	460b      	mov	r3, r1
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	1a5b      	subs	r3, r3, r1
 800146e:	1ad1      	subs	r1, r2, r3
 8001470:	460b      	mov	r3, r1
 8001472:	73fb      	strb	r3, [r7, #15]

    uint8_t hal_weekday_map[] = {RTC_WEEKDAY_SATURDAY, RTC_WEEKDAY_SUNDAY, RTC_WEEKDAY_MONDAY,
 8001474:	4a0d      	ldr	r2, [pc, #52]	@ (80014ac <Calculate_Weekday+0xbc>)
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800147e:	6018      	str	r0, [r3, #0]
 8001480:	3304      	adds	r3, #4
 8001482:	8019      	strh	r1, [r3, #0]
 8001484:	3302      	adds	r3, #2
 8001486:	0c0a      	lsrs	r2, r1, #16
 8001488:	701a      	strb	r2, [r3, #0]
                                 RTC_WEEKDAY_TUESDAY, RTC_WEEKDAY_WEDNESDAY, RTC_WEEKDAY_THURSDAY, RTC_WEEKDAY_FRIDAY};

    return hal_weekday_map[zeller_day];
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	3310      	adds	r3, #16
 800148e:	443b      	add	r3, r7
 8001490:	f813 3c08 	ldrb.w	r3, [r3, #-8]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	66666667 	.word	0x66666667
 80014a4:	51eb851f 	.word	0x51eb851f
 80014a8:	92492493 	.word	0x92492493
 80014ac:	08016ef4 	.word	0x08016ef4

080014b0 <SIM_Init>:
#include "DS18B20.h"
#include "process.h"

/*------INIZIALIZZAZIONE DEL MODULO LTE------*/
int SIM_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80014b6:	af00      	add	r7, sp, #0
	char command[256];
	char response[256];
	sprintf(sys.apn, "a");
 80014b8:	49bb      	ldr	r1, [pc, #748]	@ (80017a8 <SIM_Init+0x2f8>)
 80014ba:	48bc      	ldr	r0, [pc, #752]	@ (80017ac <SIM_Init+0x2fc>)
 80014bc:	f014 fbd2 	bl	8015c64 <siprintf>
	sprintf(sys.MQTT.clientID, "a");
 80014c0:	49b9      	ldr	r1, [pc, #740]	@ (80017a8 <SIM_Init+0x2f8>)
 80014c2:	48bb      	ldr	r0, [pc, #748]	@ (80017b0 <SIM_Init+0x300>)
 80014c4:	f014 fbce 	bl	8015c64 <siprintf>
	sprintf(sys.MQTT.server_name, "a");
 80014c8:	49b7      	ldr	r1, [pc, #732]	@ (80017a8 <SIM_Init+0x2f8>)
 80014ca:	48ba      	ldr	r0, [pc, #744]	@ (80017b4 <SIM_Init+0x304>)
 80014cc:	f014 fbca 	bl	8015c64 <siprintf>
	sprintf(sys.MQTT.port, "a");
 80014d0:	49b5      	ldr	r1, [pc, #724]	@ (80017a8 <SIM_Init+0x2f8>)
 80014d2:	48b9      	ldr	r0, [pc, #740]	@ (80017b8 <SIM_Init+0x308>)
 80014d4:	f014 fbc6 	bl	8015c64 <siprintf>
	sprintf(sys.MQTT.username, "a");
 80014d8:	49b3      	ldr	r1, [pc, #716]	@ (80017a8 <SIM_Init+0x2f8>)
 80014da:	48b8      	ldr	r0, [pc, #736]	@ (80017bc <SIM_Init+0x30c>)
 80014dc:	f014 fbc2 	bl	8015c64 <siprintf>
	sprintf(sys.MQTT.password, "a");
 80014e0:	49b1      	ldr	r1, [pc, #708]	@ (80017a8 <SIM_Init+0x2f8>)
 80014e2:	48b7      	ldr	r0, [pc, #732]	@ (80017c0 <SIM_Init+0x310>)
 80014e4:	f014 fbbe 	bl	8015c64 <siprintf>
	sprintf(sys.TCP.IP_address, "a");
 80014e8:	49af      	ldr	r1, [pc, #700]	@ (80017a8 <SIM_Init+0x2f8>)
 80014ea:	48b6      	ldr	r0, [pc, #728]	@ (80017c4 <SIM_Init+0x314>)
 80014ec:	f014 fbba 	bl	8015c64 <siprintf>
	sprintf(sys.TCP.Port, "a");
 80014f0:	49ad      	ldr	r1, [pc, #692]	@ (80017a8 <SIM_Init+0x2f8>)
 80014f2:	48b5      	ldr	r0, [pc, #724]	@ (80017c8 <SIM_Init+0x318>)
 80014f4:	f014 fbb6 	bl	8015c64 <siprintf>
	strcpy(sys.MQTT.Data_Topic, config.data_topic);
 80014f8:	49b4      	ldr	r1, [pc, #720]	@ (80017cc <SIM_Init+0x31c>)
 80014fa:	48b5      	ldr	r0, [pc, #724]	@ (80017d0 <SIM_Init+0x320>)
 80014fc:	f014 fc8e 	bl	8015e1c <strcpy>
	strcpy(sys.MQTT.Command_Topic, config.command_topic);
 8001500:	49b4      	ldr	r1, [pc, #720]	@ (80017d4 <SIM_Init+0x324>)
 8001502:	48b5      	ldr	r0, [pc, #724]	@ (80017d8 <SIM_Init+0x328>)
 8001504:	f014 fc8a 	bl	8015e1c <strcpy>
	strcpy(sys.MQTT.OTA_Topic, config.ota_topic);
 8001508:	49b4      	ldr	r1, [pc, #720]	@ (80017dc <SIM_Init+0x32c>)
 800150a:	48b5      	ldr	r0, [pc, #724]	@ (80017e0 <SIM_Init+0x330>)
 800150c:	f014 fc86 	bl	8015e1c <strcpy>
	strcpy(sys.MQTT.Info_Topic, config.info_topic);
 8001510:	49b4      	ldr	r1, [pc, #720]	@ (80017e4 <SIM_Init+0x334>)
 8001512:	48b5      	ldr	r0, [pc, #724]	@ (80017e8 <SIM_Init+0x338>)
 8001514:	f014 fc82 	bl	8015e1c <strcpy>

	SIM_Power_On();
 8001518:	f000 fa74 	bl	8001a04 <SIM_Power_On>
	HAL_Delay(5000);
 800151c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001520:	f009 fb8c 	bl	800ac3c <HAL_Delay>

	SIM_Send_Command("AT\r");                                                                     //Verifica comunicazione
 8001524:	48b1      	ldr	r0, [pc, #708]	@ (80017ec <SIM_Init+0x33c>)
 8001526:	f000 fa83 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 800152a:	48b1      	ldr	r0, [pc, #708]	@ (80017f0 <SIM_Init+0x340>)
 800152c:	f000 feb4 	bl	8002298 <SIM_Wait_Response>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d002      	beq.n	800153c <SIM_Init+0x8c>
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	e23c      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+IPR=921600\r");                                                          //Baudrate a 921600
 800153c:	48ad      	ldr	r0, [pc, #692]	@ (80017f4 <SIM_Init+0x344>)
 800153e:	f000 fa77 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001542:	48ab      	ldr	r0, [pc, #684]	@ (80017f0 <SIM_Init+0x340>)
 8001544:	f000 fea8 	bl	8002298 <SIM_Wait_Response>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d002      	beq.n	8001554 <SIM_Init+0xa4>
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
 8001552:	e230      	b.n	80019b6 <SIM_Init+0x506>

	huart1.Init.BaudRate = 921600;
 8001554:	4ba8      	ldr	r3, [pc, #672]	@ (80017f8 <SIM_Init+0x348>)
 8001556:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800155a:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(SIM_UART);
 800155c:	48a6      	ldr	r0, [pc, #664]	@ (80017f8 <SIM_Init+0x348>)
 800155e:	f012 ff95 	bl	801448c <HAL_UART_Init>

	SIM_Send_Command("AT+CFUN=1\r");                                                              //Full functionality
 8001562:	48a6      	ldr	r0, [pc, #664]	@ (80017fc <SIM_Init+0x34c>)
 8001564:	f000 fa64 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001568:	48a1      	ldr	r0, [pc, #644]	@ (80017f0 <SIM_Init+0x340>)
 800156a:	f000 fe95 	bl	8002298 <SIM_Wait_Response>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <SIM_Init+0xca>
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
 8001578:	e21d      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+CNMP=38\r");                                                             //Modalità solo LTE o NB-IoT
 800157a:	48a1      	ldr	r0, [pc, #644]	@ (8001800 <SIM_Init+0x350>)
 800157c:	f000 fa58 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001580:	489b      	ldr	r0, [pc, #620]	@ (80017f0 <SIM_Init+0x340>)
 8001582:	f000 fe89 	bl	8002298 <SIM_Wait_Response>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d002      	beq.n	8001592 <SIM_Init+0xe2>
 800158c:	f04f 33ff 	mov.w	r3, #4294967295
 8001590:	e211      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+CMNB=2\r");                                                              //NB-IoT
 8001592:	489c      	ldr	r0, [pc, #624]	@ (8001804 <SIM_Init+0x354>)
 8001594:	f000 fa4c 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001598:	4895      	ldr	r0, [pc, #596]	@ (80017f0 <SIM_Init+0x340>)
 800159a:	f000 fe7d 	bl	8002298 <SIM_Wait_Response>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d002      	beq.n	80015aa <SIM_Init+0xfa>
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295
 80015a8:	e205      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+NBSC=1\r");                                                              //Abilitazione scrambling feature DA VEDERE SE L'OPERATORE LA RICHIEDE
 80015aa:	4897      	ldr	r0, [pc, #604]	@ (8001808 <SIM_Init+0x358>)
 80015ac:	f000 fa40 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80015b0:	488f      	ldr	r0, [pc, #572]	@ (80017f0 <SIM_Init+0x340>)
 80015b2:	f000 fe71 	bl	8002298 <SIM_Wait_Response>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d002      	beq.n	80015c2 <SIM_Init+0x112>
 80015bc:	f04f 33ff 	mov.w	r3, #4294967295
 80015c0:	e1f9      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+CEREG?\r");                                                              //Controllo registrazione alla rete
 80015c2:	4892      	ldr	r0, [pc, #584]	@ (800180c <SIM_Init+0x35c>)
 80015c4:	f000 fa34 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response);
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 fa5b 	bl	8001a88 <SIM_Receive_Response>
	int stat = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
	int n, stat_value;
	if(strstr(response, "+CEREG: ") != NULL)
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	498c      	ldr	r1, [pc, #560]	@ (8001810 <SIM_Init+0x360>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f014 fbda 	bl	8015d98 <strstr>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d03a      	beq.n	8001660 <SIM_Init+0x1b0>
	{
		while(stat != 1)
 80015ea:	e035      	b.n	8001658 <SIM_Init+0x1a8>
		{
			if(sscanf(response, "+CEREG: %d,%d", &n, &stat_value) >= 2) 
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	f107 0208 	add.w	r2, r7, #8
 80015f2:	f107 000c 	add.w	r0, r7, #12
 80015f6:	4987      	ldr	r1, [pc, #540]	@ (8001814 <SIM_Init+0x364>)
 80015f8:	f014 fb56 	bl	8015ca8 <siscanf>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b01      	cmp	r3, #1
 8001600:	dd1e      	ble.n	8001640 <SIM_Init+0x190>
			{
				if(stat_value == 1 || stat_value == 5)
 8001602:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001606:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d006      	beq.n	800161e <SIM_Init+0x16e>
 8001610:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001614:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b05      	cmp	r3, #5
 800161c:	d103      	bne.n	8001626 <SIM_Init+0x176>
			    {
					 stat = 1;
 800161e:	2301      	movs	r3, #1
 8001620:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8001624:	e018      	b.n	8001658 <SIM_Init+0x1a8>
				}
				 else
				{
					SIM_Send_Command("AT+CEREG?\r");
 8001626:	4879      	ldr	r0, [pc, #484]	@ (800180c <SIM_Init+0x35c>)
 8001628:	f000 fa02 	bl	8001a30 <SIM_Send_Command>
					SIM_Receive_Response(response);
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	4618      	mov	r0, r3
 8001632:	f000 fa29 	bl	8001a88 <SIM_Receive_Response>
					HAL_Delay(1000);
 8001636:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800163a:	f009 faff 	bl	800ac3c <HAL_Delay>
 800163e:	e00b      	b.n	8001658 <SIM_Init+0x1a8>
				}
			}
			else  
			{
				SIM_Send_Command("AT+CEREG?\r");
 8001640:	4872      	ldr	r0, [pc, #456]	@ (800180c <SIM_Init+0x35c>)
 8001642:	f000 f9f5 	bl	8001a30 <SIM_Send_Command>
				SIM_Receive_Response(response);
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	4618      	mov	r0, r3
 800164c:	f000 fa1c 	bl	8001a88 <SIM_Receive_Response>
				HAL_Delay(1000);
 8001650:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001654:	f009 faf2 	bl	800ac3c <HAL_Delay>
		while(stat != 1)
 8001658:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800165c:	2b01      	cmp	r3, #1
 800165e:	d1c5      	bne.n	80015ec <SIM_Init+0x13c>
			}
		}

	}

	sprintf(command, "AT+CGDCONT=1,\"IP\",\"%s\"\r", sys.apn);                                    //Configurazione APN
 8001660:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001664:	4a51      	ldr	r2, [pc, #324]	@ (80017ac <SIM_Init+0x2fc>)
 8001666:	496c      	ldr	r1, [pc, #432]	@ (8001818 <SIM_Init+0x368>)
 8001668:	4618      	mov	r0, r3
 800166a:	f014 fafb 	bl	8015c64 <siprintf>
	SIM_Send_Command(command);
 800166e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f9dc 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001678:	485d      	ldr	r0, [pc, #372]	@ (80017f0 <SIM_Init+0x340>)
 800167a:	f000 fe0d 	bl	8002298 <SIM_Wait_Response>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <SIM_Init+0x1da>
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
 8001688:	e195      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+CNACT=1\r");                                                             //Attivazione della rete
 800168a:	4864      	ldr	r0, [pc, #400]	@ (800181c <SIM_Init+0x36c>)
 800168c:	f000 f9d0 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	4618      	mov	r0, r3
 8001696:	f000 f9f7 	bl	8001a88 <SIM_Receive_Response>
	if(strstr(response, "+APP PDP: ACTIVE") == NULL)
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	4960      	ldr	r1, [pc, #384]	@ (8001820 <SIM_Init+0x370>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f014 fb79 	bl	8015d98 <strstr>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d115      	bne.n	80016d8 <SIM_Init+0x228>
	{
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 80016ac:	e00b      	b.n	80016c6 <SIM_Init+0x216>
		{
			SIM_Send_Command("AT+CNACT=1\r");
 80016ae:	485b      	ldr	r0, [pc, #364]	@ (800181c <SIM_Init+0x36c>)
 80016b0:	f000 f9be 	bl	8001a30 <SIM_Send_Command>
			SIM_Receive_Response(response);
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 f9e5 	bl	8001a88 <SIM_Receive_Response>
			HAL_Delay(1000);
 80016be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016c2:	f009 fabb 	bl	800ac3c <HAL_Delay>
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	4955      	ldr	r1, [pc, #340]	@ (8001820 <SIM_Init+0x370>)
 80016cc:	4618      	mov	r0, r3
 80016ce:	f014 fb63 	bl	8015d98 <strstr>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0ea      	beq.n	80016ae <SIM_Init+0x1fe>
		}
	}

	SIM_Send_Command("AT+CNACT?\r");                                                              //Verifica indirizzo IP
 80016d8:	4852      	ldr	r0, [pc, #328]	@ (8001824 <SIM_Init+0x374>)
 80016da:	f000 f9a9 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response);
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f9d0 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_IP(response))
 80016e8:	e00b      	b.n	8001702 <SIM_Init+0x252>
	{
		SIM_Send_Command("AT+CNACT?\r");
 80016ea:	484e      	ldr	r0, [pc, #312]	@ (8001824 <SIM_Init+0x374>)
 80016ec:	f000 f9a0 	bl	8001a30 <SIM_Send_Command>
		SIM_Receive_Response(response);
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 f9c7 	bl	8001a88 <SIM_Receive_Response>
		HAL_Delay(1000);
 80016fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016fe:	f009 fa9d 	bl	800ac3c <HAL_Delay>
	while(!SIM_Check_IP(response))
 8001702:	f107 030c 	add.w	r3, r7, #12
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f9d8 	bl	8001abc <SIM_Check_IP>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0eb      	beq.n	80016ea <SIM_Init+0x23a>
	}

	sprintf(command, "AT+SMCONF=\"URL\",\"%s\",%s\r", sys.MQTT.server_name, sys.MQTT.port);       //Configurazione MQTT
 8001712:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8001716:	4b28      	ldr	r3, [pc, #160]	@ (80017b8 <SIM_Init+0x308>)
 8001718:	4a26      	ldr	r2, [pc, #152]	@ (80017b4 <SIM_Init+0x304>)
 800171a:	4943      	ldr	r1, [pc, #268]	@ (8001828 <SIM_Init+0x378>)
 800171c:	f014 faa2 	bl	8015c64 <siprintf>
	SIM_Send_Command(command);
 8001720:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001724:	4618      	mov	r0, r3
 8001726:	f000 f983 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 800172a:	4831      	ldr	r0, [pc, #196]	@ (80017f0 <SIM_Init+0x340>)
 800172c:	f000 fdb4 	bl	8002298 <SIM_Wait_Response>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <SIM_Init+0x28c>
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
 800173a:	e13c      	b.n	80019b6 <SIM_Init+0x506>

	sprintf(command, "AT+SMCONF=\"CLIENTID\",\"%s\"\r", sys.MQTT.clientID);
 800173c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001740:	4a1b      	ldr	r2, [pc, #108]	@ (80017b0 <SIM_Init+0x300>)
 8001742:	493a      	ldr	r1, [pc, #232]	@ (800182c <SIM_Init+0x37c>)
 8001744:	4618      	mov	r0, r3
 8001746:	f014 fa8d 	bl	8015c64 <siprintf>
	SIM_Send_Command(command);
 800174a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800174e:	4618      	mov	r0, r3
 8001750:	f000 f96e 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001754:	4826      	ldr	r0, [pc, #152]	@ (80017f0 <SIM_Init+0x340>)
 8001756:	f000 fd9f 	bl	8002298 <SIM_Wait_Response>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <SIM_Init+0x2b6>
 8001760:	f04f 33ff 	mov.w	r3, #4294967295
 8001764:	e127      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+SMCONF=\"KEEPTIME\",60\r");
 8001766:	4832      	ldr	r0, [pc, #200]	@ (8001830 <SIM_Init+0x380>)
 8001768:	f000 f962 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 800176c:	4820      	ldr	r0, [pc, #128]	@ (80017f0 <SIM_Init+0x340>)
 800176e:	f000 fd93 	bl	8002298 <SIM_Wait_Response>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <SIM_Init+0x2ce>
 8001778:	f04f 33ff 	mov.w	r3, #4294967295
 800177c:	e11b      	b.n	80019b6 <SIM_Init+0x506>

	sprintf(command, "AT+SMCONF=\"USERNAME\",\"%s\"\r", sys.MQTT.username);
 800177e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001782:	4a0e      	ldr	r2, [pc, #56]	@ (80017bc <SIM_Init+0x30c>)
 8001784:	492b      	ldr	r1, [pc, #172]	@ (8001834 <SIM_Init+0x384>)
 8001786:	4618      	mov	r0, r3
 8001788:	f014 fa6c 	bl	8015c64 <siprintf>
	SIM_Send_Command(command);
 800178c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001790:	4618      	mov	r0, r3
 8001792:	f000 f94d 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001796:	4816      	ldr	r0, [pc, #88]	@ (80017f0 <SIM_Init+0x340>)
 8001798:	f000 fd7e 	bl	8002298 <SIM_Wait_Response>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d04a      	beq.n	8001838 <SIM_Init+0x388>
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	e106      	b.n	80019b6 <SIM_Init+0x506>
 80017a8:	08016efc 	.word	0x08016efc
 80017ac:	20001798 	.word	0x20001798
 80017b0:	200019ac 	.word	0x200019ac
 80017b4:	2000181c 	.word	0x2000181c
 80017b8:	20001880 	.word	0x20001880
 80017bc:	200018e4 	.word	0x200018e4
 80017c0:	20001948 	.word	0x20001948
 80017c4:	20001ba0 	.word	0x20001ba0
 80017c8:	20001c04 	.word	0x20001c04
 80017cc:	20001cda 	.word	0x20001cda
 80017d0:	20001a10 	.word	0x20001a10
 80017d4:	20001d1a 	.word	0x20001d1a
 80017d8:	20001a74 	.word	0x20001a74
 80017dc:	20001d5a 	.word	0x20001d5a
 80017e0:	20001ad8 	.word	0x20001ad8
 80017e4:	20001d9a 	.word	0x20001d9a
 80017e8:	20001b3c 	.word	0x20001b3c
 80017ec:	08016f00 	.word	0x08016f00
 80017f0:	08016f04 	.word	0x08016f04
 80017f4:	08016f08 	.word	0x08016f08
 80017f8:	20000624 	.word	0x20000624
 80017fc:	08016f18 	.word	0x08016f18
 8001800:	08016f24 	.word	0x08016f24
 8001804:	08016f30 	.word	0x08016f30
 8001808:	08016f3c 	.word	0x08016f3c
 800180c:	08016f48 	.word	0x08016f48
 8001810:	08016f54 	.word	0x08016f54
 8001814:	08016f60 	.word	0x08016f60
 8001818:	08016f70 	.word	0x08016f70
 800181c:	08016f88 	.word	0x08016f88
 8001820:	08016f94 	.word	0x08016f94
 8001824:	08016fa8 	.word	0x08016fa8
 8001828:	08016fb4 	.word	0x08016fb4
 800182c:	08016fd0 	.word	0x08016fd0
 8001830:	08016fec 	.word	0x08016fec
 8001834:	08017008 	.word	0x08017008

	sprintf(command, "AT+SMCONF=\"PASSWORD\",\"%s\"\r", sys.MQTT.password);
 8001838:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800183c:	4a60      	ldr	r2, [pc, #384]	@ (80019c0 <SIM_Init+0x510>)
 800183e:	4961      	ldr	r1, [pc, #388]	@ (80019c4 <SIM_Init+0x514>)
 8001840:	4618      	mov	r0, r3
 8001842:	f014 fa0f 	bl	8015c64 <siprintf>
	SIM_Send_Command(command);
 8001846:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f8f0 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001850:	485d      	ldr	r0, [pc, #372]	@ (80019c8 <SIM_Init+0x518>)
 8001852:	f000 fd21 	bl	8002298 <SIM_Wait_Response>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <SIM_Init+0x3b2>
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
 8001860:	e0a9      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+SMCONF=\"QOS\",1\r");
 8001862:	485a      	ldr	r0, [pc, #360]	@ (80019cc <SIM_Init+0x51c>)
 8001864:	f000 f8e4 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001868:	4857      	ldr	r0, [pc, #348]	@ (80019c8 <SIM_Init+0x518>)
 800186a:	f000 fd15 	bl	8002298 <SIM_Wait_Response>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <SIM_Init+0x3ca>
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
 8001878:	e09d      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+SMCONF=\"RETAIN\",0\r");
 800187a:	4855      	ldr	r0, [pc, #340]	@ (80019d0 <SIM_Init+0x520>)
 800187c:	f000 f8d8 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001880:	4851      	ldr	r0, [pc, #324]	@ (80019c8 <SIM_Init+0x518>)
 8001882:	f000 fd09 	bl	8002298 <SIM_Wait_Response>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d002      	beq.n	8001892 <SIM_Init+0x3e2>
 800188c:	f04f 33ff 	mov.w	r3, #4294967295
 8001890:	e091      	b.n	80019b6 <SIM_Init+0x506>

	sprintf(command, "AT+SMCONF=\"TOPIC\",\"%s\"\r", sys.MQTT.Data_Topic);
 8001892:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001896:	4a4f      	ldr	r2, [pc, #316]	@ (80019d4 <SIM_Init+0x524>)
 8001898:	494f      	ldr	r1, [pc, #316]	@ (80019d8 <SIM_Init+0x528>)
 800189a:	4618      	mov	r0, r3
 800189c:	f014 f9e2 	bl	8015c64 <siprintf>
	SIM_Send_Command(command);
 80018a0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 f8c3 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80018aa:	4847      	ldr	r0, [pc, #284]	@ (80019c8 <SIM_Init+0x518>)
 80018ac:	f000 fcf4 	bl	8002298 <SIM_Wait_Response>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <SIM_Init+0x40c>
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ba:	e07c      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+SMCONN\r");                                                              //Connessione al broker MQTT
 80018bc:	4847      	ldr	r0, [pc, #284]	@ (80019dc <SIM_Init+0x52c>)
 80018be:	f000 f8b7 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80018c2:	4841      	ldr	r0, [pc, #260]	@ (80019c8 <SIM_Init+0x518>)
 80018c4:	f000 fce8 	bl	8002298 <SIM_Wait_Response>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <SIM_Init+0x424>
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	e070      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+SMSTATE?\r");                                                            //Verifica connessione al broker MQTT
 80018d4:	4842      	ldr	r0, [pc, #264]	@ (80019e0 <SIM_Init+0x530>)
 80018d6:	f000 f8ab 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response);
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 f8d2 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_MQTT_State(response))
 80018e4:	e00b      	b.n	80018fe <SIM_Init+0x44e>
	{
		SIM_Send_Command("AT+SMSTATE?\r");
 80018e6:	483e      	ldr	r0, [pc, #248]	@ (80019e0 <SIM_Init+0x530>)
 80018e8:	f000 f8a2 	bl	8001a30 <SIM_Send_Command>
		SIM_Receive_Response(response);
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 f8c9 	bl	8001a88 <SIM_Receive_Response>
		HAL_Delay(1000);
 80018f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018fa:	f009 f99f 	bl	800ac3c <HAL_Delay>
	while(!SIM_Check_MQTT_State(response))
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	4618      	mov	r0, r3
 8001904:	f000 f904 	bl	8001b10 <SIM_Check_MQTT_State>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0eb      	beq.n	80018e6 <SIM_Init+0x436>
	}

	sprintf(command, "AT+SMSUB=\"%s\",1\r", sys.MQTT.Command_Topic);                              //Iscrizione al topic per ricezione comandi dal server
 800190e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001912:	4a34      	ldr	r2, [pc, #208]	@ (80019e4 <SIM_Init+0x534>)
 8001914:	4934      	ldr	r1, [pc, #208]	@ (80019e8 <SIM_Init+0x538>)
 8001916:	4618      	mov	r0, r3
 8001918:	f014 f9a4 	bl	8015c64 <siprintf>
	SIM_Send_Command(command);
 800191c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001920:	4618      	mov	r0, r3
 8001922:	f000 f885 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001926:	4828      	ldr	r0, [pc, #160]	@ (80019c8 <SIM_Init+0x518>)
 8001928:	f000 fcb6 	bl	8002298 <SIM_Wait_Response>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <SIM_Init+0x488>
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	e03e      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+CIPRXGET=1\r");                                                         //Impostazione ricezione manuale da server TCP
 8001938:	482c      	ldr	r0, [pc, #176]	@ (80019ec <SIM_Init+0x53c>)
 800193a:	f000 f879 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 800193e:	4822      	ldr	r0, [pc, #136]	@ (80019c8 <SIM_Init+0x518>)
 8001940:	f000 fcaa 	bl	8002298 <SIM_Wait_Response>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <SIM_Init+0x4a0>
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	e032      	b.n	80019b6 <SIM_Init+0x506>

	sprintf(command, "AT+CIPSTART=\"TCP\",\"%s\",%s\r", sys.TCP.IP_address, sys.TCP.Port);        //Connessione TCP
 8001950:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8001954:	4b26      	ldr	r3, [pc, #152]	@ (80019f0 <SIM_Init+0x540>)
 8001956:	4a27      	ldr	r2, [pc, #156]	@ (80019f4 <SIM_Init+0x544>)
 8001958:	4927      	ldr	r1, [pc, #156]	@ (80019f8 <SIM_Init+0x548>)
 800195a:	f014 f983 	bl	8015c64 <siprintf>
	SIM_Send_Command(command);
 800195e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f864 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("CONNECT OK") != HAL_OK) return -1;
 8001968:	4824      	ldr	r0, [pc, #144]	@ (80019fc <SIM_Init+0x54c>)
 800196a:	f000 fc95 	bl	8002298 <SIM_Wait_Response>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <SIM_Init+0x4ca>
 8001974:	f04f 33ff 	mov.w	r3, #4294967295
 8001978:	e01d      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        //Verifica connessione al server TCP
 800197a:	4821      	ldr	r0, [pc, #132]	@ (8001a00 <SIM_Init+0x550>)
 800197c:	f000 f858 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	4618      	mov	r0, r3
 8001986:	f000 f87f 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_TCP_State(response))
 800198a:	e00b      	b.n	80019a4 <SIM_Init+0x4f4>
	{
		SIM_Send_Command("AT+CIPSTATUS=0\r");
 800198c:	481c      	ldr	r0, [pc, #112]	@ (8001a00 <SIM_Init+0x550>)
 800198e:	f000 f84f 	bl	8001a30 <SIM_Send_Command>
		SIM_Receive_Response(response);
 8001992:	f107 030c 	add.w	r3, r7, #12
 8001996:	4618      	mov	r0, r3
 8001998:	f000 f876 	bl	8001a88 <SIM_Receive_Response>
		HAL_Delay(1000);
 800199c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019a0:	f009 f94c 	bl	800ac3c <HAL_Delay>
	while(!SIM_Check_TCP_State(response))
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 f8d7 	bl	8001b5c <SIM_Check_TCP_State>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0eb      	beq.n	800198c <SIM_Init+0x4dc>
	}

	return 0;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20001948 	.word	0x20001948
 80019c4:	08017024 	.word	0x08017024
 80019c8:	08016f04 	.word	0x08016f04
 80019cc:	08017040 	.word	0x08017040
 80019d0:	08017054 	.word	0x08017054
 80019d4:	20001a10 	.word	0x20001a10
 80019d8:	0801706c 	.word	0x0801706c
 80019dc:	08017084 	.word	0x08017084
 80019e0:	08017090 	.word	0x08017090
 80019e4:	20001a74 	.word	0x20001a74
 80019e8:	080170a0 	.word	0x080170a0
 80019ec:	080170b4 	.word	0x080170b4
 80019f0:	20001c04 	.word	0x20001c04
 80019f4:	20001ba0 	.word	0x20001ba0
 80019f8:	080170c4 	.word	0x080170c4
 80019fc:	080170e0 	.word	0x080170e0
 8001a00:	080170ec 	.word	0x080170ec

08001a04 <SIM_Power_On>:

/*------ACCENSIONE DEL MODULO LTE------*/
void SIM_Power_On(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a12:	f00c fab5 	bl	800df80 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001a16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a1a:	f009 f90f 	bl	800ac3c <HAL_Delay>
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a28:	f00c faaa 	bl	800df80 <HAL_GPIO_WritePin>
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <SIM_Send_Command>:
	HAL_GPIO_WritePin(LTE_RESET_GPIO_Port, LTE_RESET_Pin, GPIO_PIN_RESET);
}

/*------INVIO COMANDO AL MODULO LTE------*/
void SIM_Send_Command(char* command)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7fe fbd3 	bl	80001e4 <strlen>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(SIM_UART, (uint8_t*)command, len, 100);
 8001a42:	89fa      	ldrh	r2, [r7, #14]
 8001a44:	2364      	movs	r3, #100	@ 0x64
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4803      	ldr	r0, [pc, #12]	@ (8001a58 <SIM_Send_Command+0x28>)
 8001a4a:	f012 fdc3 	bl	80145d4 <HAL_UART_Transmit>
}
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000624 	.word	0x20000624

08001a5c <SIM_Send_Command_DMA>:

/*------INVIO COMANDO AL MODULO LTE (DMA)------*/
void SIM_Send_Command_DMA(char* command)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7fe fbbd 	bl	80001e4 <strlen>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit_DMA(SIM_UART, (uint8_t*)command, len);
 8001a6e:	89fb      	ldrh	r3, [r7, #14]
 8001a70:	461a      	mov	r2, r3
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4803      	ldr	r0, [pc, #12]	@ (8001a84 <SIM_Send_Command_DMA+0x28>)
 8001a76:	f012 feff 	bl	8014878 <HAL_UART_Transmit_DMA>
}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000624 	.word	0x20000624

08001a88 <SIM_Receive_Response>:

/*------RICEZIONE RISPOSTA DAL MODULO LTE------*/
uint16_t SIM_Receive_Response(char* response)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af02      	add	r7, sp, #8
 8001a8e:	6078      	str	r0, [r7, #4]
	uint16_t max_size = 256;
 8001a90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a94:	81fb      	strh	r3, [r7, #14]
	uint16_t RxLen = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	81bb      	strh	r3, [r7, #12]

	HAL_UARTEx_ReceiveToIdle(SIM_UART, (uint8_t *)response, max_size, &RxLen, 1000);
 8001a9a:	f107 030c 	add.w	r3, r7, #12
 8001a9e:	89fa      	ldrh	r2, [r7, #14]
 8001aa0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001aa4:	9100      	str	r1, [sp, #0]
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	4803      	ldr	r0, [pc, #12]	@ (8001ab8 <SIM_Receive_Response+0x30>)
 8001aaa:	f013 fefa 	bl	80158a2 <HAL_UARTEx_ReceiveToIdle>
	return RxLen;
 8001aae:	89bb      	ldrh	r3, [r7, #12]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000624 	.word	0x20000624

08001abc <SIM_Check_IP>:

/*------CONTROLLO INDIRIZZO IP------*/
int SIM_Check_IP(const char* response)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	char* cnact_pos = strstr(response, "+CNACT:");
 8001ac4:	4910      	ldr	r1, [pc, #64]	@ (8001b08 <SIM_Check_IP+0x4c>)
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f014 f966 	bl	8015d98 <strstr>
 8001acc:	6178      	str	r0, [r7, #20]
    if(cnact_pos != NULL) {
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d014      	beq.n	8001afe <SIM_Check_IP+0x42>
        int context_id, status;
        if(sscanf(cnact_pos, "+CNACT: %d,%d", &context_id, &status) >= 2) {
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	f107 0210 	add.w	r2, r7, #16
 8001adc:	490b      	ldr	r1, [pc, #44]	@ (8001b0c <SIM_Check_IP+0x50>)
 8001ade:	6978      	ldr	r0, [r7, #20]
 8001ae0:	f014 f8e2 	bl	8015ca8 <siscanf>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	dd09      	ble.n	8001afe <SIM_Check_IP+0x42>
            return (context_id == 1 && status == 1) ? 1 : 0;
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d104      	bne.n	8001afa <SIM_Check_IP+0x3e>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <SIM_Check_IP+0x3e>
 8001af6:	2301      	movs	r3, #1
 8001af8:	e002      	b.n	8001b00 <SIM_Check_IP+0x44>
 8001afa:	2300      	movs	r3, #0
 8001afc:	e000      	b.n	8001b00 <SIM_Check_IP+0x44>
        }
    }
    return 0;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	080170fc 	.word	0x080170fc
 8001b0c:	08017104 	.word	0x08017104

08001b10 <SIM_Check_MQTT_State>:

/*------CONTROLLO STATO CONNESSIONE MQTT------*/
int SIM_Check_MQTT_State(const char* response)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
    char* smstate_pos = strstr(response, "+SMSTATE:");
 8001b18:	490e      	ldr	r1, [pc, #56]	@ (8001b54 <SIM_Check_MQTT_State+0x44>)
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f014 f93c 	bl	8015d98 <strstr>
 8001b20:	60f8      	str	r0, [r7, #12]
    if(smstate_pos != NULL) {
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d010      	beq.n	8001b4a <SIM_Check_MQTT_State+0x3a>
        int mqtt_state;
        if(sscanf(smstate_pos, "+SMSTATE: %d", &mqtt_state) >= 1) {
 8001b28:	f107 0308 	add.w	r3, r7, #8
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	490a      	ldr	r1, [pc, #40]	@ (8001b58 <SIM_Check_MQTT_State+0x48>)
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f014 f8b9 	bl	8015ca8 <siscanf>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	dd06      	ble.n	8001b4a <SIM_Check_MQTT_State+0x3a>
            return (mqtt_state == 1) ? 1 : 0;
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	bf0c      	ite	eq
 8001b42:	2301      	moveq	r3, #1
 8001b44:	2300      	movne	r3, #0
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	e000      	b.n	8001b4c <SIM_Check_MQTT_State+0x3c>
        }
    }
    return 0;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	08017114 	.word	0x08017114
 8001b58:	08017120 	.word	0x08017120

08001b5c <SIM_Check_TCP_State>:

/*------CONTROLLO STATO CONNESSIONE TCP------*/
int SIM_Check_TCP_State(const char* response)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
    char* cipstatus_pos = strstr(response, "+CIPSTATUS: 0");
 8001b64:	490a      	ldr	r1, [pc, #40]	@ (8001b90 <SIM_Check_TCP_State+0x34>)
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f014 f916 	bl	8015d98 <strstr>
 8001b6c:	60f8      	str	r0, [r7, #12]
    if(cipstatus_pos != NULL) {
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <SIM_Check_TCP_State+0x2a>
        // Cerca "CONNECTED" nella stessa riga
        if(strstr(cipstatus_pos, "CONNECTED") != NULL) {
 8001b74:	4907      	ldr	r1, [pc, #28]	@ (8001b94 <SIM_Check_TCP_State+0x38>)
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f014 f90e 	bl	8015d98 <strstr>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <SIM_Check_TCP_State+0x2a>
            return 1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <SIM_Check_TCP_State+0x2c>
        }
    }
    return 0;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	08017130 	.word	0x08017130
 8001b94:	08017140 	.word	0x08017140

08001b98 <SIM_Parse_Command>:

/*------PARSING MESSAGGIO MQTT------*/
void SIM_Parse_Command(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
    char* buf = (char*)sim_rx_buffer;
 8001b9e:	4b75      	ldr	r3, [pc, #468]	@ (8001d74 <SIM_Parse_Command+0x1dc>)
 8001ba0:	61fb      	str	r3, [r7, #28]

    if(strncmp(buf, "+SMSUB: ", 8) == 0)
 8001ba2:	2208      	movs	r2, #8
 8001ba4:	4974      	ldr	r1, [pc, #464]	@ (8001d78 <SIM_Parse_Command+0x1e0>)
 8001ba6:	69f8      	ldr	r0, [r7, #28]
 8001ba8:	f014 f8d1 	bl	8015d4e <strncmp>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 80dc 	bne.w	8001d6c <SIM_Parse_Command+0x1d4>
    {
        char* pos = buf + 8;
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	3308      	adds	r3, #8
 8001bb8:	61bb      	str	r3, [r7, #24]

        char* first_quote = strchr(pos, '"');
 8001bba:	2122      	movs	r1, #34	@ 0x22
 8001bbc:	69b8      	ldr	r0, [r7, #24]
 8001bbe:	f014 f8b9 	bl	8015d34 <strchr>
 8001bc2:	6178      	str	r0, [r7, #20]
        if(first_quote) {
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 80d0 	beq.w	8001d6c <SIM_Parse_Command+0x1d4>
            char* second_quote = strchr(first_quote + 1, '"');
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	2122      	movs	r1, #34	@ 0x22
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f014 f8ae 	bl	8015d34 <strchr>
 8001bd8:	6138      	str	r0, [r7, #16]

            if(second_quote) {
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80c5 	beq.w	8001d6c <SIM_Parse_Command+0x1d4>
                char* third_quote = strchr(second_quote + 1, '"');
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	3301      	adds	r3, #1
 8001be6:	2122      	movs	r1, #34	@ 0x22
 8001be8:	4618      	mov	r0, r3
 8001bea:	f014 f8a3 	bl	8015d34 <strchr>
 8001bee:	60f8      	str	r0, [r7, #12]

                if(third_quote) {
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 80ba 	beq.w	8001d6c <SIM_Parse_Command+0x1d4>
                    char* cmd_pos = third_quote + 1;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	60bb      	str	r3, [r7, #8]
                    char* fourth_quote = strchr(cmd_pos, '"');
 8001bfe:	2122      	movs	r1, #34	@ 0x22
 8001c00:	68b8      	ldr	r0, [r7, #8]
 8001c02:	f014 f897 	bl	8015d34 <strchr>
 8001c06:	6078      	str	r0, [r7, #4]

                    if(fourth_quote && (fourth_quote - cmd_pos) >= 3) {
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 80ae 	beq.w	8001d6c <SIM_Parse_Command+0x1d4>
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	f340 80a8 	ble.w	8001d6c <SIM_Parse_Command+0x1d4>

                        uint32_t cmd_val = (cmd_pos[2] << 16) | (cmd_pos[1] << 8) | cmd_pos[0];
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	3302      	adds	r3, #2
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	041a      	lsls	r2, r3, #16
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	3301      	adds	r3, #1
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	7812      	ldrb	r2, [r2, #0]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	603b      	str	r3, [r7, #0]

                        switch(cmd_val) {
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	4a50      	ldr	r2, [pc, #320]	@ (8001d7c <SIM_Parse_Command+0x1e4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	f000 808e 	beq.w	8001d5c <SIM_Parse_Command+0x1c4>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	4a4e      	ldr	r2, [pc, #312]	@ (8001d7c <SIM_Parse_Command+0x1e4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	f200 808c 	bhi.w	8001d62 <SIM_Parse_Command+0x1ca>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	4a4c      	ldr	r2, [pc, #304]	@ (8001d80 <SIM_Parse_Command+0x1e8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d03b      	beq.n	8001cca <SIM_Parse_Command+0x132>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	4a4b      	ldr	r2, [pc, #300]	@ (8001d84 <SIM_Parse_Command+0x1ec>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	f080 8083 	bcs.w	8001d62 <SIM_Parse_Command+0x1ca>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	4a4a      	ldr	r2, [pc, #296]	@ (8001d88 <SIM_Parse_Command+0x1f0>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d061      	beq.n	8001d28 <SIM_Parse_Command+0x190>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	4a49      	ldr	r2, [pc, #292]	@ (8001d8c <SIM_Parse_Command+0x1f4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d27a      	bcs.n	8001d62 <SIM_Parse_Command+0x1ca>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	4a48      	ldr	r2, [pc, #288]	@ (8001d90 <SIM_Parse_Command+0x1f8>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d066      	beq.n	8001d42 <SIM_Parse_Command+0x1aa>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	4a46      	ldr	r2, [pc, #280]	@ (8001d90 <SIM_Parse_Command+0x1f8>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d872      	bhi.n	8001d62 <SIM_Parse_Command+0x1ca>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	4a45      	ldr	r2, [pc, #276]	@ (8001d94 <SIM_Parse_Command+0x1fc>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d034      	beq.n	8001cee <SIM_Parse_Command+0x156>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	4a43      	ldr	r2, [pc, #268]	@ (8001d94 <SIM_Parse_Command+0x1fc>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d86a      	bhi.n	8001d62 <SIM_Parse_Command+0x1ca>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	4a42      	ldr	r2, [pc, #264]	@ (8001d98 <SIM_Parse_Command+0x200>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d014      	beq.n	8001cbe <SIM_Parse_Command+0x126>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	4a40      	ldr	r2, [pc, #256]	@ (8001d98 <SIM_Parse_Command+0x200>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d862      	bhi.n	8001d62 <SIM_Parse_Command+0x1ca>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	4a3f      	ldr	r2, [pc, #252]	@ (8001d9c <SIM_Parse_Command+0x204>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d018      	beq.n	8001cd6 <SIM_Parse_Command+0x13e>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	4a3d      	ldr	r2, [pc, #244]	@ (8001d9c <SIM_Parse_Command+0x204>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d85a      	bhi.n	8001d62 <SIM_Parse_Command+0x1ca>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	4a3c      	ldr	r2, [pc, #240]	@ (8001da0 <SIM_Parse_Command+0x208>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d02f      	beq.n	8001d14 <SIM_Parse_Command+0x17c>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	4a3b      	ldr	r2, [pc, #236]	@ (8001da4 <SIM_Parse_Command+0x20c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d012      	beq.n	8001ce2 <SIM_Parse_Command+0x14a>
								}
							case 0x545352: // RST
								HAL_NVIC_SystemReset();
								break;
							default: 
								break;
 8001cbc:	e051      	b.n	8001d62 <SIM_Parse_Command+0x1ca>
								flags.CMD.Idle = 1; 
 8001cbe:	4a3a      	ldr	r2, [pc, #232]	@ (8001da8 <SIM_Parse_Command+0x210>)
 8001cc0:	7893      	ldrb	r3, [r2, #2]
 8001cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cc6:	7093      	strb	r3, [r2, #2]
								break;    
 8001cc8:	e050      	b.n	8001d6c <SIM_Parse_Command+0x1d4>
								flags.CMD.Start_Meas = 1; 
 8001cca:	4a37      	ldr	r2, [pc, #220]	@ (8001da8 <SIM_Parse_Command+0x210>)
 8001ccc:	7893      	ldrb	r3, [r2, #2]
 8001cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cd2:	7093      	strb	r3, [r2, #2]
								break;
 8001cd4:	e04a      	b.n	8001d6c <SIM_Parse_Command+0x1d4>
								flags.CMD.Ping = 1; 
 8001cd6:	4a34      	ldr	r2, [pc, #208]	@ (8001da8 <SIM_Parse_Command+0x210>)
 8001cd8:	7893      	ldrb	r3, [r2, #2]
 8001cda:	f043 0308 	orr.w	r3, r3, #8
 8001cde:	7093      	strb	r3, [r2, #2]
								break;
 8001ce0:	e044      	b.n	8001d6c <SIM_Parse_Command+0x1d4>
								flags.CMD.Data_Request = 1; 
 8001ce2:	4a31      	ldr	r2, [pc, #196]	@ (8001da8 <SIM_Parse_Command+0x210>)
 8001ce4:	7893      	ldrb	r3, [r2, #2]
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	7093      	strb	r3, [r2, #2]
								break;
 8001cec:	e03e      	b.n	8001d6c <SIM_Parse_Command+0x1d4>
								if(!flags.CMD.Measure_Request)
 8001cee:	4b2e      	ldr	r3, [pc, #184]	@ (8001da8 <SIM_Parse_Command+0x210>)
 8001cf0:	789b      	ldrb	r3, [r3, #2]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d134      	bne.n	8001d66 <SIM_Parse_Command+0x1ce>
									Send_Measure_Addr = Saved_Bytes;
 8001cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8001dac <SIM_Parse_Command+0x214>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a2b      	ldr	r2, [pc, #172]	@ (8001db0 <SIM_Parse_Command+0x218>)
 8001d02:	6013      	str	r3, [r2, #0]
									flags.CMD.Measure_Request = 1; 
 8001d04:	4a28      	ldr	r2, [pc, #160]	@ (8001da8 <SIM_Parse_Command+0x210>)
 8001d06:	7893      	ldrb	r3, [r2, #2]
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	7093      	strb	r3, [r2, #2]
									Switch_Buffer();
 8001d0e:	f003 fe7d 	bl	8005a0c <Switch_Buffer>
								break;
 8001d12:	e028      	b.n	8001d66 <SIM_Parse_Command+0x1ce>
								if(state == IDLE)
 8001d14:	4b27      	ldr	r3, [pc, #156]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d126      	bne.n	8001d6a <SIM_Parse_Command+0x1d2>
									flags.CMD.Start_OTA = 1;
 8001d1c:	4a22      	ldr	r2, [pc, #136]	@ (8001da8 <SIM_Parse_Command+0x210>)
 8001d1e:	7893      	ldrb	r3, [r2, #2]
 8001d20:	f043 0304 	orr.w	r3, r3, #4
 8001d24:	7093      	strb	r3, [r2, #2]
								break;
 8001d26:	e020      	b.n	8001d6a <SIM_Parse_Command+0x1d2>
								if(state == IDLE)
 8001d28:	4b22      	ldr	r3, [pc, #136]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d108      	bne.n	8001d42 <SIM_Parse_Command+0x1aa>
									flags.CMD.Set_Config = 1;
 8001d30:	4a1d      	ldr	r2, [pc, #116]	@ (8001da8 <SIM_Parse_Command+0x210>)
 8001d32:	7893      	ldrb	r3, [r2, #2]
 8001d34:	f043 0310 	orr.w	r3, r3, #16
 8001d38:	7093      	strb	r3, [r2, #2]
									SIM_Parse_Cfg(cmd_pos, fourth_quote);
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	68b8      	ldr	r0, [r7, #8]
 8001d3e:	f000 f83b 	bl	8001db8 <SIM_Parse_Cfg>
								if(state == IDLE)
 8001d42:	4b1c      	ldr	r3, [pc, #112]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d108      	bne.n	8001d5c <SIM_Parse_Command+0x1c4>
									flags.CMD.Get_Config = 1;
 8001d4a:	4a17      	ldr	r2, [pc, #92]	@ (8001da8 <SIM_Parse_Command+0x210>)
 8001d4c:	7893      	ldrb	r3, [r2, #2]
 8001d4e:	f043 0320 	orr.w	r3, r3, #32
 8001d52:	7093      	strb	r3, [r2, #2]
									SIM_Get_Cfg(cmd_pos, fourth_quote);
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	68b8      	ldr	r0, [r7, #8]
 8001d58:	f000 f8ae 	bl	8001eb8 <SIM_Get_Cfg>
								HAL_NVIC_SystemReset();
 8001d5c:	f00a fc47 	bl	800c5ee <HAL_NVIC_SystemReset>
								break;
 8001d60:	e004      	b.n	8001d6c <SIM_Parse_Command+0x1d4>
								break;
 8001d62:	bf00      	nop
 8001d64:	e002      	b.n	8001d6c <SIM_Parse_Command+0x1d4>
								break;
 8001d66:	bf00      	nop
 8001d68:	e000      	b.n	8001d6c <SIM_Parse_Command+0x1d4>
								break;
 8001d6a:	bf00      	nop
                    }
                }
            }
        }
    }
}
 8001d6c:	bf00      	nop
 8001d6e:	3720      	adds	r7, #32
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	200054f4 	.word	0x200054f4
 8001d78:	0801714c 	.word	0x0801714c
 8001d7c:	00545352 	.word	0x00545352
 8001d80:	00545253 	.word	0x00545253
 8001d84:	00545254 	.word	0x00545254
 8001d88:	00544553 	.word	0x00544553
 8001d8c:	00544554 	.word	0x00544554
 8001d90:	00544547 	.word	0x00544547
 8001d94:	0052534d 	.word	0x0052534d
 8001d98:	004c4449 	.word	0x004c4449
 8001d9c:	00474e50 	.word	0x00474e50
 8001da0:	0041544f 	.word	0x0041544f
 8001da4:	00444e53 	.word	0x00444e53
 8001da8:	20001c68 	.word	0x20001c68
 8001dac:	20004ec0 	.word	0x20004ec0
 8001db0:	20004ec8 	.word	0x20004ec8
 8001db4:	2000073c 	.word	0x2000073c

08001db8 <SIM_Parse_Cfg>:

/*-----PARSING CONFIGURAZIONE-----*/
void SIM_Parse_Cfg(char* cmd_start, char* cmd_end)
{   
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
    memset(cfg_var, 0, sizeof(cfg_var));
 8001dc2:	2214      	movs	r2, #20
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4839      	ldr	r0, [pc, #228]	@ (8001eac <SIM_Parse_Cfg+0xf4>)
 8001dc8:	f013 ffac 	bl	8015d24 <memset>
    memset(new_cfg_val, 0, sizeof(new_cfg_val));
 8001dcc:	220a      	movs	r2, #10
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4837      	ldr	r0, [pc, #220]	@ (8001eb0 <SIM_Parse_Cfg+0xf8>)
 8001dd2:	f013 ffa7 	bl	8015d24 <memset>
    
    char* pos = cmd_start + 4; // Salta "SET,"
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	61fb      	str	r3, [r7, #28]
    
    // Prima virgola (dopo SET)
    char* comma1 = strchr(pos, ',');
 8001ddc:	212c      	movs	r1, #44	@ 0x2c
 8001dde:	69f8      	ldr	r0, [r7, #28]
 8001de0:	f013 ffa8 	bl	8015d34 <strchr>
 8001de4:	61b8      	str	r0, [r7, #24]
    if(!comma1 || comma1 >= cmd_end) return;
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d056      	beq.n	8001e9a <SIM_Parse_Cfg+0xe2>
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d252      	bcs.n	8001e9a <SIM_Parse_Cfg+0xe2>
    
    // Seconda virgola
    char* comma2 = strchr(comma1 + 1, ',');
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	3301      	adds	r3, #1
 8001df8:	212c      	movs	r1, #44	@ 0x2c
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f013 ff9a 	bl	8015d34 <strchr>
 8001e00:	6178      	str	r0, [r7, #20]
    if(!comma2 || comma2 >= cmd_end) return;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d04a      	beq.n	8001e9e <SIM_Parse_Cfg+0xe6>
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d246      	bcs.n	8001e9e <SIM_Parse_Cfg+0xe6>
    
    // Terza virgola
    char* comma3 = strchr(comma2 + 1, ',');
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	3301      	adds	r3, #1
 8001e14:	212c      	movs	r1, #44	@ 0x2c
 8001e16:	4618      	mov	r0, r3
 8001e18:	f013 ff8c 	bl	8015d34 <strchr>
 8001e1c:	6138      	str	r0, [r7, #16]
    if(!comma3 || comma3 >= cmd_end) return;
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d03e      	beq.n	8001ea2 <SIM_Parse_Cfg+0xea>
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d23a      	bcs.n	8001ea2 <SIM_Parse_Cfg+0xea>
    
    // Estrai cfg_var (tra SET, e prima virgola)
    int var_len = comma2 - comma1 - 1;
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	3b01      	subs	r3, #1
 8001e34:	60fb      	str	r3, [r7, #12]
    if(var_len > 0 && var_len < sizeof(cfg_var)) 
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	dd0e      	ble.n	8001e5a <SIM_Parse_Cfg+0xa2>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b13      	cmp	r3, #19
 8001e40:	d80b      	bhi.n	8001e5a <SIM_Parse_Cfg+0xa2>
	{
        strncpy(cfg_var, comma1 + 1, var_len);
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	3301      	adds	r3, #1
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4818      	ldr	r0, [pc, #96]	@ (8001eac <SIM_Parse_Cfg+0xf4>)
 8001e4c:	f013 ff91 	bl	8015d72 <strncpy>
        cfg_var[var_len] = '\0';
 8001e50:	4a16      	ldr	r2, [pc, #88]	@ (8001eac <SIM_Parse_Cfg+0xf4>)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	4413      	add	r3, r2
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
    }
    
    // Estrai cfg_idx
    cfg_idx = atoi(comma2 + 1);
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f013 fe76 	bl	8015b50 <atoi>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4a13      	ldr	r2, [pc, #76]	@ (8001eb4 <SIM_Parse_Cfg+0xfc>)
 8001e68:	6013      	str	r3, [r2, #0]
    
    // Estrai new_cfg_val
    int val_len = cmd_end - comma3 - 1;
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	3b01      	subs	r3, #1
 8001e72:	60bb      	str	r3, [r7, #8]
    if(val_len > 0 && val_len < sizeof(new_cfg_val)) 
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	dd14      	ble.n	8001ea4 <SIM_Parse_Cfg+0xec>
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b09      	cmp	r3, #9
 8001e7e:	d811      	bhi.n	8001ea4 <SIM_Parse_Cfg+0xec>
	{
        strncpy(new_cfg_val, comma3 + 1, val_len);
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	3301      	adds	r3, #1
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	4619      	mov	r1, r3
 8001e88:	4809      	ldr	r0, [pc, #36]	@ (8001eb0 <SIM_Parse_Cfg+0xf8>)
 8001e8a:	f013 ff72 	bl	8015d72 <strncpy>
        new_cfg_val[val_len] = '\0';
 8001e8e:	4a08      	ldr	r2, [pc, #32]	@ (8001eb0 <SIM_Parse_Cfg+0xf8>)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4413      	add	r3, r2
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]
 8001e98:	e004      	b.n	8001ea4 <SIM_Parse_Cfg+0xec>
    if(!comma1 || comma1 >= cmd_end) return;
 8001e9a:	bf00      	nop
 8001e9c:	e002      	b.n	8001ea4 <SIM_Parse_Cfg+0xec>
    if(!comma2 || comma2 >= cmd_end) return;
 8001e9e:	bf00      	nop
 8001ea0:	e000      	b.n	8001ea4 <SIM_Parse_Cfg+0xec>
    if(!comma3 || comma3 >= cmd_end) return;
 8001ea2:	bf00      	nop
    }
}
 8001ea4:	3720      	adds	r7, #32
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20005cc4 	.word	0x20005cc4
 8001eb0:	20005cdc 	.word	0x20005cdc
 8001eb4:	20005cd8 	.word	0x20005cd8

08001eb8 <SIM_Get_Cfg>:

/*-----RECUPERO VALORE DI CONFIGURAZIONE-----*/
void SIM_Get_Cfg(char* cmd_start, char* cmd_end)
{   
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
	memset(cfg_var, 0, sizeof(cfg_var));
 8001ec2:	2214      	movs	r2, #20
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4825      	ldr	r0, [pc, #148]	@ (8001f5c <SIM_Get_Cfg+0xa4>)
 8001ec8:	f013 ff2c 	bl	8015d24 <memset>
	memset(new_cfg_val, 0, sizeof(new_cfg_val));
 8001ecc:	220a      	movs	r2, #10
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4823      	ldr	r0, [pc, #140]	@ (8001f60 <SIM_Get_Cfg+0xa8>)
 8001ed2:	f013 ff27 	bl	8015d24 <memset>
	
	char* pos = cmd_start + 4; // Salta "GET,"
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	617b      	str	r3, [r7, #20]
	
	// Prima virgola (dopo GET)
	char* comma1 = strchr(pos, ',');
 8001edc:	212c      	movs	r1, #44	@ 0x2c
 8001ede:	6978      	ldr	r0, [r7, #20]
 8001ee0:	f013 ff28 	bl	8015d34 <strchr>
 8001ee4:	6138      	str	r0, [r7, #16]
	if(!comma1 || comma1 >= cmd_end) return;
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d031      	beq.n	8001f50 <SIM_Get_Cfg+0x98>
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d22d      	bcs.n	8001f50 <SIM_Get_Cfg+0x98>
	
	// Seconda virgola
	char* comma2 = strchr(comma1 + 1, ',');
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	212c      	movs	r1, #44	@ 0x2c
 8001efa:	4618      	mov	r0, r3
 8001efc:	f013 ff1a 	bl	8015d34 <strchr>
 8001f00:	60f8      	str	r0, [r7, #12]
	if(!comma2 || comma2 >= cmd_end) return;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d025      	beq.n	8001f54 <SIM_Get_Cfg+0x9c>
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d221      	bcs.n	8001f54 <SIM_Get_Cfg+0x9c>
	
	// Estrai cfg_var (tra GET, e prima virgola)
	int var_len = comma2 - comma1 - 1;
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	3b01      	subs	r3, #1
 8001f18:	60bb      	str	r3, [r7, #8]
	if(var_len > 0 && var_len < sizeof(cfg_var)) 
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	dd0e      	ble.n	8001f3e <SIM_Get_Cfg+0x86>
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2b13      	cmp	r3, #19
 8001f24:	d80b      	bhi.n	8001f3e <SIM_Get_Cfg+0x86>
	{
		strncpy(cfg_var, comma1 + 1, var_len);
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	480b      	ldr	r0, [pc, #44]	@ (8001f5c <SIM_Get_Cfg+0xa4>)
 8001f30:	f013 ff1f 	bl	8015d72 <strncpy>
		cfg_var[var_len] = '\0';
 8001f34:	4a09      	ldr	r2, [pc, #36]	@ (8001f5c <SIM_Get_Cfg+0xa4>)
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	4413      	add	r3, r2
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
	}
	
	// Estrai cfg_idx
	cfg_idx = atoi(comma2 + 1);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	3301      	adds	r3, #1
 8001f42:	4618      	mov	r0, r3
 8001f44:	f013 fe04 	bl	8015b50 <atoi>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	4a06      	ldr	r2, [pc, #24]	@ (8001f64 <SIM_Get_Cfg+0xac>)
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e002      	b.n	8001f56 <SIM_Get_Cfg+0x9e>
	if(!comma1 || comma1 >= cmd_end) return;
 8001f50:	bf00      	nop
 8001f52:	e000      	b.n	8001f56 <SIM_Get_Cfg+0x9e>
	if(!comma2 || comma2 >= cmd_end) return;
 8001f54:	bf00      	nop
}
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20005cc4 	.word	0x20005cc4
 8001f60:	20005cdc 	.word	0x20005cdc
 8001f64:	20005cd8 	.word	0x20005cd8

08001f68 <SIM_publish_MQTT_Message_DMA>:

/*------PUBBLICAZIONE MESSAGGIO MQTT IN MODALITA' DMA------*/
void SIM_publish_MQTT_Message_DMA(const char* topic, const char* message)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b0c4      	sub	sp, #272	@ 0x110
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f72:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f76:	6018      	str	r0, [r3, #0]
 8001f78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f7c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001f80:	6019      	str	r1, [r3, #0]
    char command[256];
    uint16_t len = (uint16_t)strlen(message);
 8001f82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f86:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	f7fe f92a 	bl	80001e4 <strlen>
 8001f90:	4603      	mov	r3, r0
 8001f92:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

    if(topic != NULL && strlen(topic) > 0)
 8001f96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f9a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d014      	beq.n	8001fce <SIM_publish_MQTT_Message_DMA+0x66>
 8001fa4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001fa8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00c      	beq.n	8001fce <SIM_publish_MQTT_Message_DMA+0x66>
	{
        sprintf(command, "AT+SMPUB=\"%s\",%d,1,0\r", topic, len);
 8001fb4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8001fb8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001fbc:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001fc0:	f107 000c 	add.w	r0, r7, #12
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	490b      	ldr	r1, [pc, #44]	@ (8001ff4 <SIM_publish_MQTT_Message_DMA+0x8c>)
 8001fc8:	f013 fe4c 	bl	8015c64 <siprintf>
 8001fcc:	e007      	b.n	8001fde <SIM_publish_MQTT_Message_DMA+0x76>
    } 
	else 
	{
        sprintf(command, "AT+SMPUB=%d\r", len);
 8001fce:	f8b7 210e 	ldrh.w	r2, [r7, #270]	@ 0x10e
 8001fd2:	f107 030c 	add.w	r3, r7, #12
 8001fd6:	4908      	ldr	r1, [pc, #32]	@ (8001ff8 <SIM_publish_MQTT_Message_DMA+0x90>)
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f013 fe43 	bl	8015c64 <siprintf>
    }
    
    SIM_Send_Command_DMA(command);
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff fd3a 	bl	8001a5c <SIM_Send_Command_DMA>
}
 8001fe8:	bf00      	nop
 8001fea:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	08017158 	.word	0x08017158
 8001ff8:	08017170 	.word	0x08017170

08001ffc <SIM_publish_MQTT_Message>:

/*-----PUBBLICAZIONE MESSAGGIO MQTT-----*/
void SIM_publish_MQTT_Message(const char* topic, const char* message)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b0c4      	sub	sp, #272	@ 0x110
 8002000:	af00      	add	r7, sp, #0
 8002002:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002006:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800200a:	6018      	str	r0, [r3, #0]
 800200c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002010:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002014:	6019      	str	r1, [r3, #0]
	char command[256];
	uint16_t len = (uint16_t)strlen(message);
 8002016:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800201a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	f7fe f8e0 	bl	80001e4 <strlen>
 8002024:	4603      	mov	r3, r0
 8002026:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

	if(topic != NULL && strlen(topic) > 0)
 800202a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800202e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d014      	beq.n	8002062 <SIM_publish_MQTT_Message+0x66>
 8002038:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800203c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00c      	beq.n	8002062 <SIM_publish_MQTT_Message+0x66>
	{
		sprintf(command, "AT+SMPUB=\"%s\",%d,1,0\r", topic, len);
 8002048:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800204c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002050:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002054:	f107 000c 	add.w	r0, r7, #12
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	4917      	ldr	r1, [pc, #92]	@ (80020b8 <SIM_publish_MQTT_Message+0xbc>)
 800205c:	f013 fe02 	bl	8015c64 <siprintf>
 8002060:	e007      	b.n	8002072 <SIM_publish_MQTT_Message+0x76>
	} 
	else 
	{
		sprintf(command, "AT+SMPUB=%d\r", len);
 8002062:	f8b7 210e 	ldrh.w	r2, [r7, #270]	@ 0x10e
 8002066:	f107 030c 	add.w	r3, r7, #12
 800206a:	4914      	ldr	r1, [pc, #80]	@ (80020bc <SIM_publish_MQTT_Message+0xc0>)
 800206c:	4618      	mov	r0, r3
 800206e:	f013 fdf9 	bl	8015c64 <siprintf>
	}
	
	SIM_Send_Command(command);
 8002072:	f107 030c 	add.w	r3, r7, #12
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fcda 	bl	8001a30 <SIM_Send_Command>
	SIM_Wait_Response(">");                       
 800207c:	4810      	ldr	r0, [pc, #64]	@ (80020c0 <SIM_publish_MQTT_Message+0xc4>)
 800207e:	f000 f90b 	bl	8002298 <SIM_Wait_Response>
	HAL_UART_Transmit(SIM_UART, (uint8_t*)message, strlen(message), 1000);
 8002082:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002086:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800208a:	6818      	ldr	r0, [r3, #0]
 800208c:	f7fe f8aa 	bl	80001e4 <strlen>
 8002090:	4603      	mov	r3, r0
 8002092:	b29a      	uxth	r2, r3
 8002094:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002098:	f5a3 7188 	sub.w	r1, r3, #272	@ 0x110
 800209c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020a0:	6809      	ldr	r1, [r1, #0]
 80020a2:	4808      	ldr	r0, [pc, #32]	@ (80020c4 <SIM_publish_MQTT_Message+0xc8>)
 80020a4:	f012 fa96 	bl	80145d4 <HAL_UART_Transmit>
    SIM_Wait_Response("OK");
 80020a8:	4807      	ldr	r0, [pc, #28]	@ (80020c8 <SIM_publish_MQTT_Message+0xcc>)
 80020aa:	f000 f8f5 	bl	8002298 <SIM_Wait_Response>
}
 80020ae:	bf00      	nop
 80020b0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	08017158 	.word	0x08017158
 80020bc:	08017170 	.word	0x08017170
 80020c0:	08017180 	.word	0x08017180
 80020c4:	20000624 	.word	0x20000624
 80020c8:	08016f04 	.word	0x08016f04

080020cc <SIM_Send_TCP_Chunk_DMA>:
    SIM_Wait_Response("SEND OK");                              // Attesa invio avvenuto
}

/*-----INVIO DATI AL SERVER TCP CON DMA-----*/
void SIM_Send_TCP_Chunk_DMA(uint8_t* data, uint16_t size)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b090      	sub	sp, #64	@ 0x40
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	807b      	strh	r3, [r7, #2]
    char cmd[50];

    sprintf(cmd, "AT+CIPSEND=%u\r", size);
 80020d8:	887a      	ldrh	r2, [r7, #2]
 80020da:	f107 030c 	add.w	r3, r7, #12
 80020de:	490d      	ldr	r1, [pc, #52]	@ (8002114 <SIM_Send_TCP_Chunk_DMA+0x48>)
 80020e0:	4618      	mov	r0, r3
 80020e2:	f013 fdbf 	bl	8015c64 <siprintf>
    SIM_Send_Command_DMA(cmd);
 80020e6:	f107 030c 	add.w	r3, r7, #12
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fcb6 	bl	8001a5c <SIM_Send_Command_DMA>

    SIM_Wait_Response(">");                                    // Attesa prompt '>'
 80020f0:	4809      	ldr	r0, [pc, #36]	@ (8002118 <SIM_Send_TCP_Chunk_DMA+0x4c>)
 80020f2:	f000 f8d1 	bl	8002298 <SIM_Wait_Response>

    HAL_UART_Transmit(SIM_UART, data, size, 1000);             // Invia dati binari
 80020f6:	887a      	ldrh	r2, [r7, #2]
 80020f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4807      	ldr	r0, [pc, #28]	@ (800211c <SIM_Send_TCP_Chunk_DMA+0x50>)
 8002100:	f012 fa68 	bl	80145d4 <HAL_UART_Transmit>
    
    SIM_Wait_Response("SEND OK");                              // Attesa invio avvenuto
 8002104:	4806      	ldr	r0, [pc, #24]	@ (8002120 <SIM_Send_TCP_Chunk_DMA+0x54>)
 8002106:	f000 f8c7 	bl	8002298 <SIM_Wait_Response>
}
 800210a:	bf00      	nop
 800210c:	3740      	adds	r7, #64	@ 0x40
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	08017184 	.word	0x08017184
 8002118:	08017180 	.word	0x08017180
 800211c:	20000624 	.word	0x20000624
 8002120:	08017194 	.word	0x08017194

08002124 <SIM_Send_Infos>:

/*-----INVIO INFORMAZIONI AL SERVER MQTT-----*/
void SIM_Send_Infos(void)
{
 8002124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002126:	f5ad 7d3d 	sub.w	sp, sp, #756	@ 0x2f4
 800212a:	af10      	add	r7, sp, #64	@ 0x40
	uint16_t len = 0;
 800212c:	2300      	movs	r3, #0
 800212e:	f8a7 32ae 	strh.w	r3, [r7, #686]	@ 0x2ae
	char command[128];
	char infos[512];
	uint16_t new_temp = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	f8a7 32ac 	strh.w	r3, [r7, #684]	@ 0x2ac

	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 8002138:	494c      	ldr	r1, [pc, #304]	@ (800226c <SIM_Send_Infos+0x148>)
 800213a:	203b      	movs	r0, #59	@ 0x3b
 800213c:	f000 fa04 	bl	8002548 <BC_MultiRead_Reg>
	INA3221_Read_Measure(&Supply);
 8002140:	484b      	ldr	r0, [pc, #300]	@ (8002270 <SIM_Send_Infos+0x14c>)
 8002142:	f7fe ff6b 	bl	800101c <INA3221_Read_Measure>
	if((new_temp = Read_Temperature()) != 0)
 8002146:	f7fe ff0f 	bl	8000f68 <Read_Temperature>
 800214a:	4603      	mov	r3, r0
 800214c:	f8a7 32ac 	strh.w	r3, [r7, #684]	@ 0x2ac
 8002150:	f8b7 32ac 	ldrh.w	r3, [r7, #684]	@ 0x2ac
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <SIM_Send_Infos+0x3c>
	{
		Temperature = new_temp;
 8002158:	4a46      	ldr	r2, [pc, #280]	@ (8002274 <SIM_Send_Infos+0x150>)
 800215a:	f8b7 32ac 	ldrh.w	r3, [r7, #684]	@ 0x2ac
 800215e:	8013      	strh	r3, [r2, #0]
	}

	sprintf(infos, "%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", config.device_id, sys.onDate.Year, sys.onDate.Month, sys.onDate.Date, sys.onTime.Hours, sys.onTime.Minutes, sys.onTime.Seconds, Vbatt, config.samp_freq, config.buffering_secs, Supply.v1, Supply.v2, Supply.v3, Supply.i1, Supply.i2, Supply.i3, Temperature);
 8002160:	4b45      	ldr	r3, [pc, #276]	@ (8002278 <SIM_Send_Infos+0x154>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	469c      	mov	ip, r3
 8002166:	4b45      	ldr	r3, [pc, #276]	@ (800227c <SIM_Send_Infos+0x158>)
 8002168:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800216c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002170:	469e      	mov	lr, r3
 8002172:	4b42      	ldr	r3, [pc, #264]	@ (800227c <SIM_Send_Infos+0x158>)
 8002174:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800217c:	461d      	mov	r5, r3
 800217e:	4b3f      	ldr	r3, [pc, #252]	@ (800227c <SIM_Send_Infos+0x158>)
 8002180:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002184:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002188:	461e      	mov	r6, r3
 800218a:	4b3c      	ldr	r3, [pc, #240]	@ (800227c <SIM_Send_Infos+0x158>)
 800218c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002190:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24
 8002196:	4b39      	ldr	r3, [pc, #228]	@ (800227c <SIM_Send_Infos+0x158>)
 8002198:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800219c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80021a0:	623b      	str	r3, [r7, #32]
 80021a2:	4b36      	ldr	r3, [pc, #216]	@ (800227c <SIM_Send_Infos+0x158>)
 80021a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021a8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	4b2f      	ldr	r3, [pc, #188]	@ (800226c <SIM_Send_Infos+0x148>)
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	61bb      	str	r3, [r7, #24]
 80021b4:	4b30      	ldr	r3, [pc, #192]	@ (8002278 <SIM_Send_Infos+0x154>)
 80021b6:	885b      	ldrh	r3, [r3, #2]
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002278 <SIM_Send_Infos+0x154>)
 80021bc:	791b      	ldrb	r3, [r3, #4]
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002270 <SIM_Send_Infos+0x14c>)
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002270 <SIM_Send_Infos+0x14c>)
 80021c8:	885b      	ldrh	r3, [r3, #2]
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	4b28      	ldr	r3, [pc, #160]	@ (8002270 <SIM_Send_Infos+0x14c>)
 80021ce:	889b      	ldrh	r3, [r3, #4]
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	4b27      	ldr	r3, [pc, #156]	@ (8002270 <SIM_Send_Infos+0x14c>)
 80021d4:	88db      	ldrh	r3, [r3, #6]
 80021d6:	461c      	mov	r4, r3
 80021d8:	4b25      	ldr	r3, [pc, #148]	@ (8002270 <SIM_Send_Infos+0x14c>)
 80021da:	891b      	ldrh	r3, [r3, #8]
 80021dc:	4619      	mov	r1, r3
 80021de:	4b24      	ldr	r3, [pc, #144]	@ (8002270 <SIM_Send_Infos+0x14c>)
 80021e0:	895b      	ldrh	r3, [r3, #10]
 80021e2:	461a      	mov	r2, r3
 80021e4:	4b23      	ldr	r3, [pc, #140]	@ (8002274 <SIM_Send_Infos+0x150>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80021ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80021ee:	920d      	str	r2, [sp, #52]	@ 0x34
 80021f0:	910c      	str	r1, [sp, #48]	@ 0x30
 80021f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	920a      	str	r2, [sp, #40]	@ 0x28
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	9208      	str	r2, [sp, #32]
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	9207      	str	r2, [sp, #28]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	9206      	str	r2, [sp, #24]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	9205      	str	r2, [sp, #20]
 800220c:	69fa      	ldr	r2, [r7, #28]
 800220e:	9204      	str	r2, [sp, #16]
 8002210:	6a3a      	ldr	r2, [r7, #32]
 8002212:	9203      	str	r2, [sp, #12]
 8002214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002216:	9302      	str	r3, [sp, #8]
 8002218:	9601      	str	r6, [sp, #4]
 800221a:	9500      	str	r5, [sp, #0]
 800221c:	4673      	mov	r3, lr
 800221e:	4662      	mov	r2, ip
 8002220:	4917      	ldr	r1, [pc, #92]	@ (8002280 <SIM_Send_Infos+0x15c>)
 8002222:	f013 fd1f 	bl	8015c64 <siprintf>
	len = (uint16_t)strlen(infos);
 8002226:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800222a:	4618      	mov	r0, r3
 800222c:	f7fd ffda 	bl	80001e4 <strlen>
 8002230:	4603      	mov	r3, r0
 8002232:	f8a7 32ae 	strh.w	r3, [r7, #686]	@ 0x2ae

	sprintf(command, "AT+SMPUB=\"%s\",%d,1,0\r", sys.MQTT.Info_Topic, len);
 8002236:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	@ 0x2ae
 800223a:	f507 700b 	add.w	r0, r7, #556	@ 0x22c
 800223e:	4a11      	ldr	r2, [pc, #68]	@ (8002284 <SIM_Send_Infos+0x160>)
 8002240:	4911      	ldr	r1, [pc, #68]	@ (8002288 <SIM_Send_Infos+0x164>)
 8002242:	f013 fd0f 	bl	8015c64 <siprintf>
	SIM_Wait_Response(">"); 
 8002246:	4811      	ldr	r0, [pc, #68]	@ (800228c <SIM_Send_Infos+0x168>)
 8002248:	f000 f826 	bl	8002298 <SIM_Wait_Response>
	HAL_UART_Transmit(SIM_UART, (uint8_t*)infos, len, 100);
 800224c:	f8b7 22ae 	ldrh.w	r2, [r7, #686]	@ 0x2ae
 8002250:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8002254:	2364      	movs	r3, #100	@ 0x64
 8002256:	480e      	ldr	r0, [pc, #56]	@ (8002290 <SIM_Send_Infos+0x16c>)
 8002258:	f012 f9bc 	bl	80145d4 <HAL_UART_Transmit>
	SIM_Wait_Response("OK");
 800225c:	480d      	ldr	r0, [pc, #52]	@ (8002294 <SIM_Send_Infos+0x170>)
 800225e:	f000 f81b 	bl	8002298 <SIM_Wait_Response>
}
 8002262:	bf00      	nop
 8002264:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 8002268:	46bd      	mov	sp, r7
 800226a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800226c:	20004722 	.word	0x20004722
 8002270:	20003e44 	.word	0x20003e44
 8002274:	20004720 	.word	0x20004720
 8002278:	20001c6c 	.word	0x20001c6c
 800227c:	20000740 	.word	0x20000740
 8002280:	0801719c 	.word	0x0801719c
 8002284:	20001b3c 	.word	0x20001b3c
 8002288:	08017158 	.word	0x08017158
 800228c:	08017180 	.word	0x08017180
 8002290:	20000624 	.word	0x20000624
 8002294:	08016f04 	.word	0x08016f04

08002298 <SIM_Wait_Response>:

/*-----ATTESA RISPOSTA-----*/
int SIM_Wait_Response(const char* expected)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b0c8      	sub	sp, #288	@ 0x120
 800229c:	af02      	add	r7, sp, #8
 800229e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022a2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80022a6:	6018      	str	r0, [r3, #0]
    char response[256];
    uint16_t timeout = 10000; // 10 secondi
 80022a8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80022ac:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    uint32_t start_time = HAL_GetTick();
 80022b0:	f008 fcb8 	bl	800ac24 <HAL_GetTick>
 80022b4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    
    while((HAL_GetTick() - start_time) < timeout)
 80022b8:	e02a      	b.n	8002310 <SIM_Wait_Response+0x78>
    {
        uint16_t RxLen = 0;
 80022ba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022be:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80022c2:	2200      	movs	r2, #0
 80022c4:	801a      	strh	r2, [r3, #0]
        HAL_UARTEx_ReceiveToIdle(SIM_UART, (uint8_t*)response, sizeof(response), &RxLen, 500);
 80022c6:	f107 030e 	add.w	r3, r7, #14
 80022ca:	f107 0110 	add.w	r1, r7, #16
 80022ce:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80022d2:	9200      	str	r2, [sp, #0]
 80022d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022d8:	4816      	ldr	r0, [pc, #88]	@ (8002334 <SIM_Wait_Response+0x9c>)
 80022da:	f013 fae2 	bl	80158a2 <HAL_UARTEx_ReceiveToIdle>
        
        if(RxLen > 0 && strstr(response, expected) != NULL)
 80022de:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022e2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00e      	beq.n	800230a <SIM_Wait_Response+0x72>
 80022ec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022f0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80022f4:	f107 0210 	add.w	r2, r7, #16
 80022f8:	6819      	ldr	r1, [r3, #0]
 80022fa:	4610      	mov	r0, r2
 80022fc:	f013 fd4c 	bl	8015d98 <strstr>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <SIM_Wait_Response+0x72>
        {
            return 0; 
 8002306:	2300      	movs	r3, #0
 8002308:	e00e      	b.n	8002328 <SIM_Wait_Response+0x90>
        }
        
        HAL_Delay(10);
 800230a:	200a      	movs	r0, #10
 800230c:	f008 fc96 	bl	800ac3c <HAL_Delay>
    while((HAL_GetTick() - start_time) < timeout)
 8002310:	f008 fc88 	bl	800ac24 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800231a:	1ad2      	subs	r2, r2, r3
 800231c:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8002320:	429a      	cmp	r2, r3
 8002322:	d3ca      	bcc.n	80022ba <SIM_Wait_Response+0x22>
    }
	return -1;
 8002324:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002328:	4618      	mov	r0, r3
 800232a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000624 	.word	0x20000624

08002338 <SIM_Check_Connection>:

/*-----CONTROLLA STATO CONNESSIONE MQTT E TCP-----*/
void SIM_Check_Connection(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800233e:	af00      	add	r7, sp, #0
	char command_sim[256];
	char response_sim[256];

	SIM_Send_Command("AT+SMSTATE?\r");                                                            
 8002340:	4823      	ldr	r0, [pc, #140]	@ (80023d0 <SIM_Check_Connection+0x98>)
 8002342:	f7ff fb75 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response_sim);
 8002346:	463b      	mov	r3, r7
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fb9d 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_MQTT_State(response_sim))
 800234e:	e00c      	b.n	800236a <SIM_Check_Connection+0x32>
	{
		SIM_Send_Command("AT+SMCONN\r");                                                              
 8002350:	4820      	ldr	r0, [pc, #128]	@ (80023d4 <SIM_Check_Connection+0x9c>)
 8002352:	f7ff fb6d 	bl	8001a30 <SIM_Send_Command>
		SIM_Wait_Response("OK");
 8002356:	4820      	ldr	r0, [pc, #128]	@ (80023d8 <SIM_Check_Connection+0xa0>)
 8002358:	f7ff ff9e 	bl	8002298 <SIM_Wait_Response>
		SIM_Send_Command("AT+SMSTATE?\r");                                                            
 800235c:	481c      	ldr	r0, [pc, #112]	@ (80023d0 <SIM_Check_Connection+0x98>)
 800235e:	f7ff fb67 	bl	8001a30 <SIM_Send_Command>
		SIM_Receive_Response(response_sim);
 8002362:	463b      	mov	r3, r7
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fb8f 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_MQTT_State(response_sim))
 800236a:	463b      	mov	r3, r7
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fbcf 	bl	8001b10 <SIM_Check_MQTT_State>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0eb      	beq.n	8002350 <SIM_Check_Connection+0x18>
	}
	SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        
 8002378:	4818      	ldr	r0, [pc, #96]	@ (80023dc <SIM_Check_Connection+0xa4>)
 800237a:	f7ff fb59 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response_sim);
 800237e:	463b      	mov	r3, r7
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fb81 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_TCP_State(response_sim))
 8002386:	e015      	b.n	80023b4 <SIM_Check_Connection+0x7c>
	{
		sprintf(command_sim, "AT+CIPSTART=\"TCP\",\"%s\",%s\r", sys.TCP.IP_address, sys.TCP.Port);       
 8002388:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 800238c:	4b14      	ldr	r3, [pc, #80]	@ (80023e0 <SIM_Check_Connection+0xa8>)
 800238e:	4a15      	ldr	r2, [pc, #84]	@ (80023e4 <SIM_Check_Connection+0xac>)
 8002390:	4915      	ldr	r1, [pc, #84]	@ (80023e8 <SIM_Check_Connection+0xb0>)
 8002392:	f013 fc67 	bl	8015c64 <siprintf>
		SIM_Send_Command(command_sim);
 8002396:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fb48 	bl	8001a30 <SIM_Send_Command>
		SIM_Wait_Response("CONNECT OK");
 80023a0:	4812      	ldr	r0, [pc, #72]	@ (80023ec <SIM_Check_Connection+0xb4>)
 80023a2:	f7ff ff79 	bl	8002298 <SIM_Wait_Response>
		SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        
 80023a6:	480d      	ldr	r0, [pc, #52]	@ (80023dc <SIM_Check_Connection+0xa4>)
 80023a8:	f7ff fb42 	bl	8001a30 <SIM_Send_Command>
		SIM_Receive_Response(response_sim);
 80023ac:	463b      	mov	r3, r7
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fb6a 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_TCP_State(response_sim))
 80023b4:	463b      	mov	r3, r7
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fbd0 	bl	8001b5c <SIM_Check_TCP_State>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0e2      	beq.n	8002388 <SIM_Check_Connection+0x50>
	}
}
 80023c2:	bf00      	nop
 80023c4:	bf00      	nop
 80023c6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	08017090 	.word	0x08017090
 80023d4:	08017084 	.word	0x08017084
 80023d8:	08016f04 	.word	0x08016f04
 80023dc:	080170ec 	.word	0x080170ec
 80023e0:	20001c04 	.word	0x20001c04
 80023e4:	20001ba0 	.word	0x20001ba0
 80023e8:	080170c4 	.word	0x080170c4
 80023ec:	080170e0 	.word	0x080170e0

080023f0 <BC_Init>:
#include "global_variables.h"


/*------INIZIALIZZAZIONE BATTERY CHARGER------*/
void BC_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
	BC_Write_Reg(REG00_MINIMAL_SYSTEM_VOLTAGE, 0x1A);           //Tensione minima di uscita con 3 celle = 9V   <----- Senza Batteria il sistema fornisce questa tensione
 80023f4:	211a      	movs	r1, #26
 80023f6:	2000      	movs	r0, #0
 80023f8:	f000 f830 	bl	800245c <BC_Write_Reg>
	BC_MultiWrite_Reg(REG01_CHARGE_VOLTAGE_LIMIT, 0x04EC);      //Limite tensione di carica con 3 celle = 12.6V
 80023fc:	f240 41ec 	movw	r1, #1260	@ 0x4ec
 8002400:	2001      	movs	r0, #1
 8002402:	f000 f877 	bl	80024f4 <BC_MultiWrite_Reg>
	BC_MultiWrite_Reg(REG03_CHARGE_CURRENT_LIMIT, 0x0064);      //Limite corrente di carica con 3 celle = 1A
 8002406:	2164      	movs	r1, #100	@ 0x64
 8002408:	2003      	movs	r0, #3
 800240a:	f000 f873 	bl	80024f4 <BC_MultiWrite_Reg>
	BC_Write_Reg(REG10_CHARGER_CONTROL_1, 0x85);                //Tensione di OVP in ingresso = 26V
 800240e:	2185      	movs	r1, #133	@ 0x85
 8002410:	2010      	movs	r0, #16
 8002412:	f000 f823 	bl	800245c <BC_Write_Reg>
	BC_Write_Reg(REG14_CHARGER_CONTROL_5, 0x96);                //Informazione sulla presenza dello Ship-FET
 8002416:	2196      	movs	r1, #150	@ 0x96
 8002418:	2014      	movs	r0, #20
 800241a:	f000 f81f 	bl	800245c <BC_Write_Reg>
	BC_Write_Reg(REG15_MPPT_CONTROL, 0xAB);                     //MPPT attivato, tensione di MPP = 0.875*Vin, misura di 300ms ogni 2 minuti della Vin
 800241e:	21ab      	movs	r1, #171	@ 0xab
 8002420:	2015      	movs	r0, #21
 8002422:	f000 f81b 	bl	800245c <BC_Write_Reg>
	BC_Write_Reg(REG28_CHARGER_MASK_0, 0xE1);                   //Interrupt attivati: Poor source, Power good, VAC2 present, VAC1 present
 8002426:	21e1      	movs	r1, #225	@ 0xe1
 8002428:	2028      	movs	r0, #40	@ 0x28
 800242a:	f000 f817 	bl	800245c <BC_Write_Reg>
	BC_Write_Reg(REG29_CHARGER_MASK_1, 0xD7);                   //Interrupt attivati: nessuno
 800242e:	21d7      	movs	r1, #215	@ 0xd7
 8002430:	2029      	movs	r0, #41	@ 0x29
 8002432:	f000 f813 	bl	800245c <BC_Write_Reg>
	BC_Write_Reg(REG2A_CHARGER_MASK_2, 0x7F);                   //Interrupt attivati: nessuno
 8002436:	217f      	movs	r1, #127	@ 0x7f
 8002438:	202a      	movs	r0, #42	@ 0x2a
 800243a:	f000 f80f 	bl	800245c <BC_Write_Reg>
	BC_Write_Reg(REG2B_CHARGER_MASK_3, 0x1F);                   //Interrupt attivati: nessuno
 800243e:	211f      	movs	r1, #31
 8002440:	202b      	movs	r0, #43	@ 0x2b
 8002442:	f000 f80b 	bl	800245c <BC_Write_Reg>
	BC_Write_Reg(REG2C_FAULT_MASK_0, 0xFC);                     //Interrupt attivati: VAC2 over-voltage, VAC1 over-voltage
 8002446:	21fc      	movs	r1, #252	@ 0xfc
 8002448:	202c      	movs	r0, #44	@ 0x2c
 800244a:	f000 f807 	bl	800245c <BC_Write_Reg>
	BC_Write_Reg(REG2D_FAULT_MASK_1, 0xF4);                     //Interrupt attivati: nessuno
 800244e:	21f4      	movs	r1, #244	@ 0xf4
 8002450:	202d      	movs	r0, #45	@ 0x2d
 8002452:	f000 f803 	bl	800245c <BC_Write_Reg>
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <BC_Write_Reg>:

/*------SCRITTURA REGISTRO 8 BIT------*/
int BC_Write_Reg(uint8_t reg, uint8_t wdata)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af02      	add	r7, sp, #8
 8002462:	4603      	mov	r3, r0
 8002464:	460a      	mov	r2, r1
 8002466:	71fb      	strb	r3, [r7, #7]
 8002468:	4613      	mov	r3, r2
 800246a:	71bb      	strb	r3, [r7, #6]
	int result = -1;
 800246c:	f04f 33ff 	mov.w	r3, #4294967295
 8002470:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[2];
	toSend[0] = reg;
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	723b      	strb	r3, [r7, #8]
	toSend[1] = wdata;
 8002476:	79bb      	ldrb	r3, [r7, #6]
 8002478:	727b      	strb	r3, [r7, #9]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 2, 100) == HAL_OK)
 800247a:	f107 0208 	add.w	r2, r7, #8
 800247e:	2364      	movs	r3, #100	@ 0x64
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2302      	movs	r3, #2
 8002484:	21d6      	movs	r1, #214	@ 0xd6
 8002486:	4806      	ldr	r0, [pc, #24]	@ (80024a0 <BC_Write_Reg+0x44>)
 8002488:	f00b fe2e 	bl	800e0e8 <HAL_I2C_Master_Transmit>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <BC_Write_Reg+0x3a>
	{
		result = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8002496:	68fb      	ldr	r3, [r7, #12]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	200002e8 	.word	0x200002e8

080024a4 <BC_Read_Reg>:

/*------LETTURA REGISTRO 8 BIT------*/
int BC_Read_Reg(uint8_t reg, uint8_t *rdata)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	4603      	mov	r3, r0
 80024ac:	6039      	str	r1, [r7, #0]
 80024ae:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 80024b0:	f04f 33ff 	mov.w	r3, #4294967295
 80024b4:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 80024b6:	1dfa      	adds	r2, r7, #7
 80024b8:	2364      	movs	r3, #100	@ 0x64
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	2301      	movs	r3, #1
 80024be:	21d6      	movs	r1, #214	@ 0xd6
 80024c0:	480b      	ldr	r0, [pc, #44]	@ (80024f0 <BC_Read_Reg+0x4c>)
 80024c2:	f00b fe11 	bl	800e0e8 <HAL_I2C_Master_Transmit>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10c      	bne.n	80024e6 <BC_Read_Reg+0x42>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, rdata, 1, 100) == HAL_OK)
 80024cc:	2364      	movs	r3, #100	@ 0x64
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2301      	movs	r3, #1
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	21d6      	movs	r1, #214	@ 0xd6
 80024d6:	4806      	ldr	r0, [pc, #24]	@ (80024f0 <BC_Read_Reg+0x4c>)
 80024d8:	f00b ff1e 	bl	800e318 <HAL_I2C_Master_Receive>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <BC_Read_Reg+0x42>
		{
			result = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
		}
	}

	return result;
 80024e6:	68fb      	ldr	r3, [r7, #12]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	200002e8 	.word	0x200002e8

080024f4 <BC_MultiWrite_Reg>:

/*------SCRITTURA REGISTRO 16 BIT------*/
int BC_MultiWrite_Reg(uint8_t reg, uint16_t wdata)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	4603      	mov	r3, r0
 80024fc:	460a      	mov	r2, r1
 80024fe:	71fb      	strb	r3, [r7, #7]
 8002500:	4613      	mov	r3, r2
 8002502:	80bb      	strh	r3, [r7, #4]
	int result = -1;
 8002504:	f04f 33ff 	mov.w	r3, #4294967295
 8002508:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[3];
	toSend[0] = reg;
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	723b      	strb	r3, [r7, #8]
	toSend[1] = (wdata & 0xFF00) >> 8;
 800250e:	88bb      	ldrh	r3, [r7, #4]
 8002510:	0a1b      	lsrs	r3, r3, #8
 8002512:	b29b      	uxth	r3, r3
 8002514:	b2db      	uxtb	r3, r3
 8002516:	727b      	strb	r3, [r7, #9]
	toSend[2] = wdata & 0x00FF;
 8002518:	88bb      	ldrh	r3, [r7, #4]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 3, 100) == HAL_OK)
 800251e:	f107 0208 	add.w	r2, r7, #8
 8002522:	2364      	movs	r3, #100	@ 0x64
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	2303      	movs	r3, #3
 8002528:	21d6      	movs	r1, #214	@ 0xd6
 800252a:	4806      	ldr	r0, [pc, #24]	@ (8002544 <BC_MultiWrite_Reg+0x50>)
 800252c:	f00b fddc 	bl	800e0e8 <HAL_I2C_Master_Transmit>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <BC_MultiWrite_Reg+0x46>
	{
		result = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
	}

	return result;
 800253a:	68fb      	ldr	r3, [r7, #12]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	200002e8 	.word	0x200002e8

08002548 <BC_MultiRead_Reg>:

/*------LETTURA REGISTRO 16 BIT------*/
int BC_MultiRead_Reg(uint8_t reg, uint16_t *rdata)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af02      	add	r7, sp, #8
 800254e:	4603      	mov	r3, r0
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8002554:	f04f 33ff 	mov.w	r3, #4294967295
 8002558:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 800255a:	2300      	movs	r3, #0
 800255c:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 800255e:	1dfa      	adds	r2, r7, #7
 8002560:	2364      	movs	r3, #100	@ 0x64
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	2301      	movs	r3, #1
 8002566:	21d6      	movs	r1, #214	@ 0xd6
 8002568:	4811      	ldr	r0, [pc, #68]	@ (80025b0 <BC_MultiRead_Reg+0x68>)
 800256a:	f00b fdbd 	bl	800e0e8 <HAL_I2C_Master_Transmit>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d118      	bne.n	80025a6 <BC_MultiRead_Reg+0x5e>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, data, 2, 100) == HAL_OK)
 8002574:	f107 0208 	add.w	r2, r7, #8
 8002578:	2364      	movs	r3, #100	@ 0x64
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	2302      	movs	r3, #2
 800257e:	21d6      	movs	r1, #214	@ 0xd6
 8002580:	480b      	ldr	r0, [pc, #44]	@ (80025b0 <BC_MultiRead_Reg+0x68>)
 8002582:	f00b fec9 	bl	800e318 <HAL_I2C_Master_Receive>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10c      	bne.n	80025a6 <BC_MultiRead_Reg+0x5e>
		{
			result = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 8002590:	7a3b      	ldrb	r3, [r7, #8]
 8002592:	b21b      	sxth	r3, r3
 8002594:	021b      	lsls	r3, r3, #8
 8002596:	b21a      	sxth	r2, r3
 8002598:	7a7b      	ldrb	r3, [r7, #9]
 800259a:	b21b      	sxth	r3, r3
 800259c:	4313      	orrs	r3, r2
 800259e:	b21b      	sxth	r3, r3
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 80025a6:	68fb      	ldr	r3, [r7, #12]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	200002e8 	.word	0x200002e8

080025b4 <BC_Read_Flags>:

/*------LETTURA FLAGS DI INTERRUZIONE------*/
int BC_Read_Flags(uint64_t *flags)
{
 80025b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025b8:	b09b      	sub	sp, #108	@ 0x6c
 80025ba:	af02      	add	r7, sp, #8
 80025bc:	64f8      	str	r0, [r7, #76]	@ 0x4c
	int result = -1;
 80025be:	f04f 33ff 	mov.w	r3, #4294967295
 80025c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint8_t data[6] = {0};
 80025c4:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80025c8:	2300      	movs	r3, #0
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	8093      	strh	r3, [r2, #4]
	uint8_t reg = REG22_CHARGER_FLAG_0;
 80025ce:	2322      	movs	r3, #34	@ 0x22
 80025d0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 80025d4:	f107 0253 	add.w	r2, r7, #83	@ 0x53
 80025d8:	2364      	movs	r3, #100	@ 0x64
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	2301      	movs	r3, #1
 80025de:	21d6      	movs	r1, #214	@ 0xd6
 80025e0:	484a      	ldr	r0, [pc, #296]	@ (800270c <BC_Read_Flags+0x158>)
 80025e2:	f00b fd81 	bl	800e0e8 <HAL_I2C_Master_Transmit>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f040 8089 	bne.w	8002700 <BC_Read_Flags+0x14c>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1 , (uint8_t *)data, 6, 100) == HAL_OK)
 80025ee:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80025f2:	2364      	movs	r3, #100	@ 0x64
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	2306      	movs	r3, #6
 80025f8:	21d6      	movs	r1, #214	@ 0xd6
 80025fa:	4844      	ldr	r0, [pc, #272]	@ (800270c <BC_Read_Flags+0x158>)
 80025fc:	f00b fe8c 	bl	800e318 <HAL_I2C_Master_Receive>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d17c      	bne.n	8002700 <BC_Read_Flags+0x14c>
		{
			result = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	65fb      	str	r3, [r7, #92]	@ 0x5c
			*flags = ((uint64_t)data[0] << 40) | ((uint64_t)data[1] << 32) | ((uint64_t)data[2] << 24) | ((uint64_t)data[3] << 16) | ((uint64_t)data[4] << 8) | (uint64_t)data[5];
 800260a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2200      	movs	r2, #0
 8002612:	643b      	str	r3, [r7, #64]	@ 0x40
 8002614:	647a      	str	r2, [r7, #68]	@ 0x44
 8002616:	f04f 0000 	mov.w	r0, #0
 800261a:	f04f 0100 	mov.w	r1, #0
 800261e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002620:	0219      	lsls	r1, r3, #8
 8002622:	2000      	movs	r0, #0
 8002624:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2200      	movs	r2, #0
 800262c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800262e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 800263a:	0033      	movs	r3, r6
 800263c:	2200      	movs	r2, #0
 800263e:	ea40 0802 	orr.w	r8, r0, r2
 8002642:	ea41 0903 	orr.w	r9, r1, r3
 8002646:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2200      	movs	r2, #0
 800264e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002650:	637a      	str	r2, [r7, #52]	@ 0x34
 8002652:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8002656:	460b      	mov	r3, r1
 8002658:	0a1d      	lsrs	r5, r3, #8
 800265a:	460b      	mov	r3, r1
 800265c:	061c      	lsls	r4, r3, #24
 800265e:	ea48 0304 	orr.w	r3, r8, r4
 8002662:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002664:	ea49 0305 	orr.w	r3, r9, r5
 8002668:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800266a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2200      	movs	r2, #0
 8002672:	623b      	str	r3, [r7, #32]
 8002674:	627a      	str	r2, [r7, #36]	@ 0x24
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002682:	4629      	mov	r1, r5
 8002684:	040b      	lsls	r3, r1, #16
 8002686:	4621      	mov	r1, r4
 8002688:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800268c:	4621      	mov	r1, r4
 800268e:	040a      	lsls	r2, r1, #16
 8002690:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002694:	4621      	mov	r1, r4
 8002696:	4311      	orrs	r1, r2
 8002698:	61b9      	str	r1, [r7, #24]
 800269a:	4629      	mov	r1, r5
 800269c:	4319      	orrs	r1, r3
 800269e:	61f9      	str	r1, [r7, #28]
 80026a0:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2200      	movs	r2, #0
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	617a      	str	r2, [r7, #20]
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80026b8:	4629      	mov	r1, r5
 80026ba:	020b      	lsls	r3, r1, #8
 80026bc:	4621      	mov	r1, r4
 80026be:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80026c2:	4621      	mov	r1, r4
 80026c4:	020a      	lsls	r2, r1, #8
 80026c6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80026ca:	4621      	mov	r1, r4
 80026cc:	ea41 0a02 	orr.w	sl, r1, r2
 80026d0:	4629      	mov	r1, r5
 80026d2:	ea41 0b03 	orr.w	fp, r1, r3
 80026d6:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2200      	movs	r2, #0
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	60fa      	str	r2, [r7, #12]
 80026e2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80026e6:	460b      	mov	r3, r1
 80026e8:	ea4a 0303 	orr.w	r3, sl, r3
 80026ec:	603b      	str	r3, [r7, #0]
 80026ee:	4613      	mov	r3, r2
 80026f0:	ea4b 0303 	orr.w	r3, fp, r3
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026f8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80026fc:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}

	return result;
 8002700:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8002702:	4618      	mov	r0, r3
 8002704:	3764      	adds	r7, #100	@ 0x64
 8002706:	46bd      	mov	sp, r7
 8002708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800270c:	200002e8 	.word	0x200002e8

08002710 <BC_Manage_Interrupts>:

/*------GESTIONE DELLE INTERRUZIONI------*/
void BC_Manage_Interrupts(uint64_t flags)
{
 8002710:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t status = 0;
 800271c:	2100      	movs	r1, #0
 800271e:	73f9      	strb	r1, [r7, #15]

	if((flags & POOR_SOURCE_MASK) != 0)   //INGRESSO NON BUONO
 8002720:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002724:	2200      	movs	r2, #0
 8002726:	f401 5380 	and.w	r3, r1, #4096	@ 0x1000
 800272a:	4313      	orrs	r3, r2
 800272c:	d00c      	beq.n	8002748 <BC_Manage_Interrupts+0x38>
	{
		// ...gestione evento...
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 800272e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	0a0a      	lsrs	r2, r1, #8
 800273c:	2300      	movs	r3, #0
 800273e:	b2d3      	uxtb	r3, r2
 8002740:	4619      	mov	r1, r3
 8002742:	2022      	movs	r0, #34	@ 0x22
 8002744:	f7ff fe8a 	bl	800245c <BC_Write_Reg>
	}

	if((flags & VAC2_CHANGE_MASK) != 0)  //PANNELLO INSERITO O RIMOSSO
 8002748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800274c:	f04f 0800 	mov.w	r8, #0
 8002750:	f403 6980 	and.w	r9, r3, #1024	@ 0x400
 8002754:	ea58 0309 	orrs.w	r3, r8, r9
 8002758:	d020      	beq.n	800279c <BC_Manage_Interrupts+0x8c>
	{
		BC_Read_Reg(REG1B_CHARGER_STATUS_0, &status);
 800275a:	f107 030f 	add.w	r3, r7, #15
 800275e:	4619      	mov	r1, r3
 8002760:	201b      	movs	r0, #27
 8002762:	f7ff fe9f 	bl	80024a4 <BC_Read_Reg>
		if((status & VAC2_PRESENT_MASK) != 0)
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d004      	beq.n	800277a <BC_Manage_Interrupts+0x6a>
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x80);                //Usa Pannello
 8002770:	2180      	movs	r1, #128	@ 0x80
 8002772:	2013      	movs	r0, #19
 8002774:	f7ff fe72 	bl	800245c <BC_Write_Reg>
 8002778:	e003      	b.n	8002782 <BC_Manage_Interrupts+0x72>
		}
		else
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x40);                //Usa Turbina
 800277a:	2140      	movs	r1, #64	@ 0x40
 800277c:	2013      	movs	r0, #19
 800277e:	f7ff fe6d 	bl	800245c <BC_Write_Reg>
		}
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 8002782:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	0a0a      	lsrs	r2, r1, #8
 8002790:	2300      	movs	r3, #0
 8002792:	b2d3      	uxtb	r3, r2
 8002794:	4619      	mov	r1, r3
 8002796:	2022      	movs	r0, #34	@ 0x22
 8002798:	f7ff fe60 	bl	800245c <BC_Write_Reg>
	}

	if((flags & VAC1_CHANGE_MASK) != 0)  //TURBINA INSERITA O RIMOSSA
 800279c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027a0:	2400      	movs	r4, #0
 80027a2:	f403 7500 	and.w	r5, r3, #512	@ 0x200
 80027a6:	ea54 0305 	orrs.w	r3, r4, r5
 80027aa:	d00c      	beq.n	80027c6 <BC_Manage_Interrupts+0xb6>
	{
		// ...gestione evento...
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 80027ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	0a0a      	lsrs	r2, r1, #8
 80027ba:	2300      	movs	r3, #0
 80027bc:	b2d3      	uxtb	r3, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	2022      	movs	r0, #34	@ 0x22
 80027c2:	f7ff fe4b 	bl	800245c <BC_Write_Reg>
	}

	flags = 0;
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	e9c7 2300 	strd	r2, r3, [r7]
}
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080027dc <HAL_UARTEx_RxEventCallback>:
	}
}

/* ------CALLBACK UART RX IDLE------*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	807b      	strh	r3, [r7, #2]
	if(huart == SIM_UART)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a31      	ldr	r2, [pc, #196]	@ (80028b0 <HAL_UARTEx_RxEventCallback+0xd4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d155      	bne.n	800289c <HAL_UARTEx_RxEventCallback+0xc0>
	{
		if(*(uint8_t*)sim_rx_buffer == '>')
 80027f0:	4b30      	ldr	r3, [pc, #192]	@ (80028b4 <HAL_UARTEx_RxEventCallback+0xd8>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80027f6:	d120      	bne.n	800283a <HAL_UARTEx_RxEventCallback+0x5e>
		{
			if(flags.CMD.Measure_Request)
 80027f8:	4b2f      	ldr	r3, [pc, #188]	@ (80028b8 <HAL_UARTEx_RxEventCallback+0xdc>)
 80027fa:	789b      	ldrb	r3, [r3, #2]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d005      	beq.n	8002812 <HAL_UARTEx_RxEventCallback+0x36>
			{
				flags.TCP_ReadytoSend = 1;
 8002806:	4a2c      	ldr	r2, [pc, #176]	@ (80028b8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002808:	7853      	ldrb	r3, [r2, #1]
 800280a:	f043 0302 	orr.w	r3, r3, #2
 800280e:	7053      	strb	r3, [r2, #1]
 8002810:	e044      	b.n	800289c <HAL_UARTEx_RxEventCallback+0xc0>
			}
			else if(flags.CMD.Data_Request)
 8002812:	4b29      	ldr	r3, [pc, #164]	@ (80028b8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002814:	789b      	ldrb	r3, [r3, #2]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d03d      	beq.n	800289c <HAL_UARTEx_RxEventCallback+0xc0>
			{
				flags.MQTT_ReadytoSend = 1;
 8002820:	4a25      	ldr	r2, [pc, #148]	@ (80028b8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002822:	7853      	ldrb	r3, [r2, #1]
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	7053      	strb	r3, [r2, #1]
				sys.SIM_Prompt_Status = 0;
 800282a:	4b24      	ldr	r3, [pc, #144]	@ (80028bc <HAL_UARTEx_RxEventCallback+0xe0>)
 800282c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002830:	461a      	mov	r2, r3
 8002832:	2300      	movs	r3, #0
 8002834:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002838:	e030      	b.n	800289c <HAL_UARTEx_RxEventCallback+0xc0>
			}
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 800283a:	4b1e      	ldr	r3, [pc, #120]	@ (80028b4 <HAL_UARTEx_RxEventCallback+0xd8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a20      	ldr	r2, [pc, #128]	@ (80028c0 <HAL_UARTEx_RxEventCallback+0xe4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d10a      	bne.n	800285a <HAL_UARTEx_RxEventCallback+0x7e>
				*(uint32_t*)(sim_rx_buffer + 4) == 0x203A4255)       // "UB: "
 8002844:	4b1f      	ldr	r3, [pc, #124]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0xe8>)
 8002846:	681b      	ldr	r3, [r3, #0]
		else if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 8002848:	4a1f      	ldr	r2, [pc, #124]	@ (80028c8 <HAL_UARTEx_RxEventCallback+0xec>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d105      	bne.n	800285a <HAL_UARTEx_RxEventCallback+0x7e>
		{     
			flags.MQTT_Message_Rx = 1;
 800284e:	4a1a      	ldr	r2, [pc, #104]	@ (80028b8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002850:	7813      	ldrb	r3, [r2, #0]
 8002852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002856:	7013      	strb	r3, [r2, #0]
 8002858:	e020      	b.n	800289c <HAL_UARTEx_RxEventCallback+0xc0>
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x444E4553 &&           // "SEND"
 800285a:	4b16      	ldr	r3, [pc, #88]	@ (80028b4 <HAL_UARTEx_RxEventCallback+0xd8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1b      	ldr	r2, [pc, #108]	@ (80028cc <HAL_UARTEx_RxEventCallback+0xf0>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d10a      	bne.n	800287a <HAL_UARTEx_RxEventCallback+0x9e>
       			*(uint32_t*)(sim_rx_buffer + 4) == 0x004B204F)       // " OK\0"
 8002864:	4b17      	ldr	r3, [pc, #92]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0xe8>)
 8002866:	681b      	ldr	r3, [r3, #0]
		else if(*(uint32_t*)sim_rx_buffer == 0x444E4553 &&           // "SEND"
 8002868:	4a19      	ldr	r2, [pc, #100]	@ (80028d0 <HAL_UARTEx_RxEventCallback+0xf4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d105      	bne.n	800287a <HAL_UARTEx_RxEventCallback+0x9e>
		{
			flags.TCP_isSending = 0;
 800286e:	4a12      	ldr	r2, [pc, #72]	@ (80028b8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002870:	7853      	ldrb	r3, [r2, #1]
 8002872:	f023 0304 	bic.w	r3, r3, #4
 8002876:	7053      	strb	r3, [r2, #1]
 8002878:	e010      	b.n	800289c <HAL_UARTEx_RxEventCallback+0xc0>
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x4552524F)            //"ERRO"
 800287a:	4b0e      	ldr	r3, [pc, #56]	@ (80028b4 <HAL_UARTEx_RxEventCallback+0xd8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a15      	ldr	r2, [pc, #84]	@ (80028d4 <HAL_UARTEx_RxEventCallback+0xf8>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d10b      	bne.n	800289c <HAL_UARTEx_RxEventCallback+0xc0>
		{
			flags.MQTT_ReadytoSend = 0;
 8002884:	4a0c      	ldr	r2, [pc, #48]	@ (80028b8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002886:	7853      	ldrb	r3, [r2, #1]
 8002888:	f023 0301 	bic.w	r3, r3, #1
 800288c:	7053      	strb	r3, [r2, #1]
			sys.SIM_Prompt_Status = 0;
 800288e:	4b0b      	ldr	r3, [pc, #44]	@ (80028bc <HAL_UARTEx_RxEventCallback+0xe0>)
 8002890:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002894:	461a      	mov	r2, r3
 8002896:	2300      	movs	r3, #0
 8002898:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
		}
	}
	
	HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 800289c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80028a0:	4904      	ldr	r1, [pc, #16]	@ (80028b4 <HAL_UARTEx_RxEventCallback+0xd8>)
 80028a2:	4803      	ldr	r0, [pc, #12]	@ (80028b0 <HAL_UARTEx_RxEventCallback+0xd4>)
 80028a4:	f013 f900 	bl	8015aa8 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20000624 	.word	0x20000624
 80028b4:	200054f4 	.word	0x200054f4
 80028b8:	20001c68 	.word	0x20001c68
 80028bc:	20000740 	.word	0x20000740
 80028c0:	534d532b 	.word	0x534d532b
 80028c4:	200054f8 	.word	0x200054f8
 80028c8:	203a4255 	.word	0x203a4255
 80028cc:	444e4553 	.word	0x444e4553
 80028d0:	004b204f 	.word	0x004b204f
 80028d4:	4552524f 	.word	0x4552524f

080028d8 <HAL_UART_RxCpltCallback>:

/* ------CALLBACK UART RX COMPLETE------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
	if (huart == SIM_UART)
	{

	}

}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_UART_TxCpltCallback>:

/* ------CALLBACK UART TX COMPLETE------*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
	if (huart == SIM_UART)
	{

	}

}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_ADC_ConvHalfCpltCallback>:

/* ------CALLBACK HALF ADC------*/
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a09      	ldr	r2, [pc, #36]	@ (8002930 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d109      	bne.n	8002924 <HAL_ADC_ConvHalfCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8002910:	4a08      	ldr	r2, [pc, #32]	@ (8002934 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8002912:	7813      	ldrb	r3, [r2, #0]
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	7013      	strb	r3, [r2, #0]
		flags.ADC_Half_Buffer = 1;
 800291a:	4a06      	ldr	r2, [pc, #24]	@ (8002934 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 800291c:	7813      	ldrb	r3, [r2, #0]
 800291e:	f043 0302 	orr.w	r3, r3, #2
 8002922:	7013      	strb	r3, [r2, #0]
	}
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	20000218 	.word	0x20000218
 8002934:	20001c68 	.word	0x20001c68

08002938 <HAL_ADC_ConvCpltCallback>:

/*------CALLBACK FULL ADC------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a09      	ldr	r2, [pc, #36]	@ (8002968 <HAL_ADC_ConvCpltCallback+0x30>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d109      	bne.n	800295c <HAL_ADC_ConvCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8002948:	4a08      	ldr	r2, [pc, #32]	@ (800296c <HAL_ADC_ConvCpltCallback+0x34>)
 800294a:	7813      	ldrb	r3, [r2, #0]
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	7013      	strb	r3, [r2, #0]
		flags.ADC_Full_Buffer = 1;
 8002952:	4a06      	ldr	r2, [pc, #24]	@ (800296c <HAL_ADC_ConvCpltCallback+0x34>)
 8002954:	7813      	ldrb	r3, [r2, #0]
 8002956:	f043 0304 	orr.w	r3, r3, #4
 800295a:	7013      	strb	r3, [r2, #0]
	}
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	20000218 	.word	0x20000218
 800296c:	20001c68 	.word	0x20001c68

08002970 <HAL_RTC_AlarmAEventCallback>:

/*------CALLBACK RTC CAMBIO ORA------*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b092      	sub	sp, #72	@ 0x48
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef gTime;
	RTC_AlarmTypeDef sAlarm = {0};
 8002978:	f107 0308 	add.w	r3, r7, #8
 800297c:	222c      	movs	r2, #44	@ 0x2c
 800297e:	2100      	movs	r1, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f013 f9cf 	bl	8015d24 <memset>

	HAL_RTC_GetTime(hrtc, &gTime, RTC_FORMAT_BIN);
 8002986:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800298a:	2200      	movs	r2, #0
 800298c:	4619      	mov	r1, r3
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f00e f99d 	bl	8010cce <HAL_RTC_GetTime>

	sys.Low_th = Low_TH_Array[gTime.Hours];
 8002994:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002998:	461a      	mov	r2, r3
 800299a:	4b17      	ldr	r3, [pc, #92]	@ (80029f8 <HAL_RTC_AlarmAEventCallback+0x88>)
 800299c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80029a0:	4b16      	ldr	r3, [pc, #88]	@ (80029fc <HAL_RTC_AlarmAEventCallback+0x8c>)
 80029a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
	sys.High_th = High_TH_Array[gTime.Hours];
 80029a8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80029ac:	461a      	mov	r2, r3
 80029ae:	4b14      	ldr	r3, [pc, #80]	@ (8002a00 <HAL_RTC_AlarmAEventCallback+0x90>)
 80029b0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80029b4:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <HAL_RTC_AlarmAEventCallback+0x8c>)
 80029b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029ba:	861a      	strh	r2, [r3, #48]	@ 0x30

	sAlarm.AlarmTime.Hours = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	723b      	strb	r3, [r7, #8]
    sAlarm.AlarmTime.Minutes = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	727b      	strb	r3, [r7, #9]
    sAlarm.AlarmTime.Seconds = 0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	72bb      	strb	r3, [r7, #10]
    sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS | RTC_ALARMMASK_SECONDS;
 80029c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002a04 <HAL_RTC_AlarmAEventCallback+0x94>)
 80029ca:	61fb      	str	r3, [r7, #28]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	627b      	str	r3, [r7, #36]	@ 0x24
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80029d0:	2300      	movs	r3, #0
 80029d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    sAlarm.AlarmDateWeekDay = 1;
 80029d4:	2301      	movs	r3, #1
 80029d6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    sAlarm.Alarm = RTC_ALARM_A;
 80029da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029de:	633b      	str	r3, [r7, #48]	@ 0x30
    
    HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BIN);
 80029e0:	f107 0308 	add.w	r3, r7, #8
 80029e4:	2200      	movs	r2, #0
 80029e6:	4619      	mov	r1, r3
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f00e fa53 	bl	8010e94 <HAL_RTC_SetAlarm_IT>
}
 80029ee:	bf00      	nop
 80029f0:	3748      	adds	r7, #72	@ 0x48
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	200054b4 	.word	0x200054b4
 80029fc:	20000740 	.word	0x20000740
 8002a00:	20005484 	.word	0x20005484
 8002a04:	80800080 	.word	0x80800080

08002a08 <extflash_cs_set>:
uint32_t	exflashNumSectors = 0;
uint8_t		exflashInitDone = 0;


void extflash_cs_set()
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_RESET);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a12:	4802      	ldr	r0, [pc, #8]	@ (8002a1c <extflash_cs_set+0x14>)
 8002a14:	f00b fab4 	bl	800df80 <HAL_GPIO_WritePin>
}
 8002a18:	bf00      	nop
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	48000400 	.word	0x48000400

08002a20 <extflash_cs_reset>:

void extflash_cs_reset()
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 8002a24:	2201      	movs	r2, #1
 8002a26:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a2a:	4802      	ldr	r0, [pc, #8]	@ (8002a34 <extflash_cs_reset+0x14>)
 8002a2c:	f00b faa8 	bl	800df80 <HAL_GPIO_WritePin>
}
 8002a30:	bf00      	nop
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	48000400 	.word	0x48000400

08002a38 <extflash_wp_reset>:
{
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_RESET);
}

void extflash_wp_reset()
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_SET);
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	2140      	movs	r1, #64	@ 0x40
 8002a40:	4802      	ldr	r0, [pc, #8]	@ (8002a4c <extflash_wp_reset+0x14>)
 8002a42:	f00b fa9d 	bl	800df80 <HAL_GPIO_WritePin>
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	48000800 	.word	0x48000800

08002a50 <extflash_hard_reset>:


void extflash_hard_reset()
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_RESET);
 8002a54:	2200      	movs	r2, #0
 8002a56:	2180      	movs	r1, #128	@ 0x80
 8002a58:	4806      	ldr	r0, [pc, #24]	@ (8002a74 <extflash_hard_reset+0x24>)
 8002a5a:	f00b fa91 	bl	800df80 <HAL_GPIO_WritePin>

	HAL_Delay(50);
 8002a5e:	2032      	movs	r0, #50	@ 0x32
 8002a60:	f008 f8ec 	bl	800ac3c <HAL_Delay>

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_SET);
 8002a64:	2201      	movs	r2, #1
 8002a66:	2180      	movs	r1, #128	@ 0x80
 8002a68:	4802      	ldr	r0, [pc, #8]	@ (8002a74 <extflash_hard_reset+0x24>)
 8002a6a:	f00b fa89 	bl	800df80 <HAL_GPIO_WritePin>

	return;
 8002a6e:	bf00      	nop
}
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	48000800 	.word	0x48000800

08002a78 <extflash_send_cmd>:


int32_t extflash_send_cmd(extflash_cmd_t command)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

	uint8_t addr_bytes[4] = {0};
 8002a80:	2300      	movs	r3, #0
 8002a82:	61bb      	str	r3, [r7, #24]
	uint8_t dummy_bytes[8] = {0};
 8002a84:	f107 0310 	add.w	r3, r7, #16
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
	uint8_t dummy = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	77fb      	strb	r3, [r7, #31]
	uint8_t cmd_data = command->cmd;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	73fb      	strb	r3, [r7, #15]

	if(command->address_en != 0)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	785b      	ldrb	r3, [r3, #1]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00d      	beq.n	8002abc <extflash_send_cmd+0x44>
	{
		addr_bytes[0] = (command->address >> 16) & 0xFF;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	0c1b      	lsrs	r3, r3, #16
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	763b      	strb	r3, [r7, #24]
		addr_bytes[1] = (command->address >> 8) & 0xFF;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	0a1b      	lsrs	r3, r3, #8
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	767b      	strb	r3, [r7, #25]
		addr_bytes[2] = (command->address) & 0xFF;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	76bb      	strb	r3, [r7, #26]
	}

	extflash_cs_set();
 8002abc:	f7ff ffa4 	bl	8002a08 <extflash_cs_set>

	HAL_SPI_Transmit(EXTFLASH_SPI, &cmd_data, 1, FLASH_SPI_DEF_TIMEOUT);
 8002ac0:	f107 010f 	add.w	r1, r7, #15
 8002ac4:	2364      	movs	r3, #100	@ 0x64
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	4823      	ldr	r0, [pc, #140]	@ (8002b58 <extflash_send_cmd+0xe0>)
 8002aca:	f00e fce2 	bl	8011492 <HAL_SPI_Transmit>

	if(command->address_en != 0)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	785b      	ldrb	r3, [r3, #1]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d006      	beq.n	8002ae4 <extflash_send_cmd+0x6c>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, addr_bytes, 3, FLASH_SPI_DEF_TIMEOUT);
 8002ad6:	f107 0118 	add.w	r1, r7, #24
 8002ada:	2364      	movs	r3, #100	@ 0x64
 8002adc:	2203      	movs	r2, #3
 8002ade:	481e      	ldr	r0, [pc, #120]	@ (8002b58 <extflash_send_cmd+0xe0>)
 8002ae0:	f00e fcd7 	bl	8011492 <HAL_SPI_Transmit>
	}

	if(command->dummy_nb > 0)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	88db      	ldrh	r3, [r3, #6]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00e      	beq.n	8002b0a <extflash_send_cmd+0x92>
	{
		dummy = command->dummy_nb > sizeof(dummy_bytes) ? sizeof(dummy_bytes) : command->dummy_nb;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	88db      	ldrh	r3, [r3, #6]
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	bf28      	it	cs
 8002af4:	2308      	movcs	r3, #8
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	77fb      	strb	r3, [r7, #31]
		HAL_SPI_Transmit(EXTFLASH_SPI, dummy_bytes, dummy, FLASH_SPI_DEF_TIMEOUT);
 8002afa:	7ffb      	ldrb	r3, [r7, #31]
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	f107 0110 	add.w	r1, r7, #16
 8002b02:	2364      	movs	r3, #100	@ 0x64
 8002b04:	4814      	ldr	r0, [pc, #80]	@ (8002b58 <extflash_send_cmd+0xe0>)
 8002b06:	f00e fcc4 	bl	8011492 <HAL_SPI_Transmit>
	}

	if(command->tx_nb > 0 && command->tx_data != NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	885b      	ldrh	r3, [r3, #2]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <extflash_send_cmd+0xb2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d007      	beq.n	8002b2a <extflash_send_cmd+0xb2>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, command->tx_data, command->tx_nb, FLASH_SPI_DEF_TIMEOUT);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68d9      	ldr	r1, [r3, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	885a      	ldrh	r2, [r3, #2]
 8002b22:	2364      	movs	r3, #100	@ 0x64
 8002b24:	480c      	ldr	r0, [pc, #48]	@ (8002b58 <extflash_send_cmd+0xe0>)
 8002b26:	f00e fcb4 	bl	8011492 <HAL_SPI_Transmit>
	}

	if(command->rx_nb > 0 && command->rx_data != NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	889b      	ldrh	r3, [r3, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00b      	beq.n	8002b4a <extflash_send_cmd+0xd2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d007      	beq.n	8002b4a <extflash_send_cmd+0xd2>
	{
		HAL_SPI_Receive(EXTFLASH_SPI, command->rx_data, command->rx_nb, FLASH_SPI_DEF_TIMEOUT);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6919      	ldr	r1, [r3, #16]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	889a      	ldrh	r2, [r3, #4]
 8002b42:	2364      	movs	r3, #100	@ 0x64
 8002b44:	4804      	ldr	r0, [pc, #16]	@ (8002b58 <extflash_send_cmd+0xe0>)
 8002b46:	f00e fe1a 	bl	801177e <HAL_SPI_Receive>
	}

	extflash_cs_reset();
 8002b4a:	f7ff ff69 	bl	8002a20 <extflash_cs_reset>

	return 0;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3720      	adds	r7, #32
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	200003a4 	.word	0x200003a4

08002b5c <extflash_read_extended_read_reg>:

}


int extflash_read_extended_read_reg(uint8_t *ereg)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 8002b64:	f107 030c 	add.w	r3, r7, #12
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	60da      	str	r2, [r3, #12]
 8002b72:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDERP;
 8002b74:	2381      	movs	r3, #129	@ 0x81
 8002b76:	733b      	strb	r3, [r7, #12]
	command.address_en = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	737b      	strb	r3, [r7, #13]
	command.address = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
	command.rx_nb = 1;
 8002b80:	2301      	movs	r3, #1
 8002b82:	823b      	strh	r3, [r7, #16]
	command.rx_data = ereg;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	61fb      	str	r3, [r7, #28]

	return extflash_send_cmd(&command);
 8002b88:	f107 030c 	add.w	r3, r7, #12
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff ff73 	bl	8002a78 <extflash_send_cmd>
 8002b92:	4603      	mov	r3, r0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3720      	adds	r7, #32
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <extflash_clear_extended_read_reg>:


int extflash_clear_extended_read_reg()
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
	extflash_cmd command = {0};
 8002ba2:	1d3b      	adds	r3, r7, #4
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_CLERP;
 8002bb0:	2382      	movs	r3, #130	@ 0x82
 8002bb2:	713b      	strb	r3, [r7, #4]

	return extflash_send_cmd(&command);
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff ff5e 	bl	8002a78 <extflash_send_cmd>
 8002bbc:	4603      	mov	r3, r0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <extflash_set_write_protection>:
	return extflash_send_cmd(&command);

}

int extflash_set_write_protection(uint8_t enable)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b088      	sub	sp, #32
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	4603      	mov	r3, r0
 8002bce:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 8002bd0:	f107 030c 	add.w	r3, r7, #12
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
	command.cmd = enable==0 ? EFLASH_CMD_WREN : EFLASH_CMD_WRDI;
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <extflash_set_write_protection+0x24>
 8002be6:	2306      	movs	r3, #6
 8002be8:	e000      	b.n	8002bec <extflash_set_write_protection+0x26>
 8002bea:	2304      	movs	r3, #4
 8002bec:	733b      	strb	r3, [r7, #12]

	return extflash_send_cmd(&command);
 8002bee:	f107 030c 	add.w	r3, r7, #12
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff ff40 	bl	8002a78 <extflash_send_cmd>
 8002bf8:	4603      	mov	r3, r0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3720      	adds	r7, #32
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <extflash_read_sfdp>:

int extflash_read_sfdp(uint32_t regaddr, uint8_t *reg, uint8_t nregs)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b08a      	sub	sp, #40	@ 0x28
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 8002c10:	f107 0314 	add.w	r3, r7, #20
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
 8002c1e:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDSFDP;
 8002c20:	235a      	movs	r3, #90	@ 0x5a
 8002c22:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 8002c24:	2301      	movs	r3, #1
 8002c26:	757b      	strb	r3, [r7, #21]
	command.address = regaddr;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nregs;
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	833b      	strh	r3, [r7, #24]
	command.rx_data = reg;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8002c3a:	f107 0314 	add.w	r3, r7, #20
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff ff1a 	bl	8002a78 <extflash_send_cmd>
 8002c44:	4603      	mov	r3, r0

}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3728      	adds	r7, #40	@ 0x28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <extflash_raw_read>:

int extflash_raw_read(uint32_t address, uint8_t *pBuffer, uint16_t nbytes)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b08a      	sub	sp, #40	@ 0x28
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	80fb      	strh	r3, [r7, #6]

	extflash_cmd command = {0};
 8002c5c:	f107 0314 	add.w	r3, r7, #20
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_FRD;
 8002c6c:	230b      	movs	r3, #11
 8002c6e:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 8002c70:	2301      	movs	r3, #1
 8002c72:	757b      	strb	r3, [r7, #21]
	command.address = address;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nbytes;
 8002c7c:	88fb      	ldrh	r3, [r7, #6]
 8002c7e:	833b      	strh	r3, [r7, #24]
	command.rx_data = pBuffer;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8002c84:	f107 0314 	add.w	r3, r7, #20
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fef5 	bl	8002a78 <extflash_send_cmd>
 8002c8e:	4603      	mov	r3, r0

}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3728      	adds	r7, #40	@ 0x28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <extflash_raw_erase>:

int extflash_raw_erase(uint32_t address)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 8002ca0:	f107 030c 	add.w	r3, r7, #12
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_SER;
 8002cb0:	23d7      	movs	r3, #215	@ 0xd7
 8002cb2:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	737b      	strb	r3, [r7, #13]
	command.address = address;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	617b      	str	r3, [r7, #20]

	return extflash_send_cmd(&command);
 8002cbc:	f107 030c 	add.w	r3, r7, #12
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fed9 	bl	8002a78 <extflash_send_cmd>
 8002cc6:	4603      	mov	r3, r0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3720      	adds	r7, #32
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <extflash_raw_page_write>:

int extflash_raw_page_write(uint32_t address, const uint8_t *pBuffer)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]

	extflash_cmd command = {0};
 8002cda:	f107 030c 	add.w	r3, r7, #12
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	605a      	str	r2, [r3, #4]
 8002ce4:	609a      	str	r2, [r3, #8]
 8002ce6:	60da      	str	r2, [r3, #12]
 8002ce8:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_PP;
 8002cea:	2302      	movs	r3, #2
 8002cec:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	737b      	strb	r3, [r7, #13]
	command.address = address;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	617b      	str	r3, [r7, #20]
	command.tx_nb = EFLASH_DEF_PAGE_SIZE;
 8002cf6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cfa:	81fb      	strh	r3, [r7, #14]
	command.tx_data = pBuffer;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	61bb      	str	r3, [r7, #24]

	return extflash_send_cmd(&command);
 8002d00:	f107 030c 	add.w	r3, r7, #12
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff feb7 	bl	8002a78 <extflash_send_cmd>
 8002d0a:	4603      	mov	r3, r0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3720      	adds	r7, #32
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <extflash_sector_read>:


int extflash_sector_read(uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08a      	sub	sp, #40	@ 0x28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
	int result = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	61fb      	str	r3, [r7, #28]
	uint8_t ereg = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	75fb      	strb	r3, [r7, #23]
	uint32_t tmo = HAL_GetTick();
 8002d28:	f007 ff7c 	bl	800ac24 <HAL_GetTick>
 8002d2c:	61b8      	str	r0, [r7, #24]
	uint8_t *wPtr = pBuffer;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	031b      	lsls	r3, r3, #12
 8002d36:	623b      	str	r3, [r7, #32]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002d38:	f107 0317 	add.w	r3, r7, #23
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ff0d 	bl	8002b5c <extflash_read_extended_read_reg>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	da10      	bge.n	8002d6a <extflash_sector_read+0x56>
 8002d48:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4c:	e037      	b.n	8002dbe <extflash_sector_read+0xaa>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002d4e:	f107 0317 	add.w	r3, r7, #23
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff ff02 	bl	8002b5c <extflash_read_extended_read_reg>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	da02      	bge.n	8002d64 <extflash_sector_read+0x50>
 8002d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d62:	e02c      	b.n	8002dbe <extflash_sector_read+0xaa>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8002d64:	2001      	movs	r0, #1
 8002d66:	f007 ff69 	bl	800ac3c <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
 8002d6a:	7dfb      	ldrb	r3, [r7, #23]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d020      	beq.n	8002db6 <extflash_sector_read+0xa2>
 8002d74:	f007 ff56 	bl	800ac24 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d82:	d3e4      	bcc.n	8002d4e <extflash_sector_read+0x3a>
	}

	while(nsectors > 0)
 8002d84:	e017      	b.n	8002db6 <extflash_sector_read+0xa2>
	{
		result = extflash_raw_read(address, wPtr, EFLASH_DEF_SECTOR_SIZE);
 8002d86:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d8c:	6a38      	ldr	r0, [r7, #32]
 8002d8e:	f7ff ff5e 	bl	8002c4e <extflash_raw_read>
 8002d92:	61f8      	str	r0, [r7, #28]
		if(result < 0)return -1;
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	da02      	bge.n	8002da0 <extflash_sector_read+0x8c>
 8002d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9e:	e00e      	b.n	8002dbe <extflash_sector_read+0xaa>

		address += EFLASH_DEF_SECTOR_SIZE;
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002da6:	623b      	str	r3, [r7, #32]
		wPtr += EFLASH_DEF_SECTOR_SIZE;
 8002da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002daa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dae:	627b      	str	r3, [r7, #36]	@ 0x24
		nsectors--;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e4      	bne.n	8002d86 <extflash_sector_read+0x72>
	}

	return 0;
 8002dbc:	2300      	movs	r3, #0

}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3728      	adds	r7, #40	@ 0x28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <extflash_wait_for_wop>:

int extflash_wait_for_wop(uint32_t timeout)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
	uint8_t ereg = 0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	72fb      	strb	r3, [r7, #11]
	uint32_t tmo = HAL_GetTick();
 8002dd2:	f007 ff27 	bl	800ac24 <HAL_GetTick>
 8002dd6:	60f8      	str	r0, [r7, #12]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002dd8:	f107 030b 	add.w	r3, r7, #11
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff febd 	bl	8002b5c <extflash_read_extended_read_reg>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	da10      	bge.n	8002e0a <extflash_wait_for_wop+0x44>
 8002de8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dec:	e023      	b.n	8002e36 <extflash_wait_for_wop+0x70>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002dee:	f107 030b 	add.w	r3, r7, #11
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff feb2 	bl	8002b5c <extflash_read_extended_read_reg>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	da02      	bge.n	8002e04 <extflash_wait_for_wop+0x3e>
 8002dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002e02:	e018      	b.n	8002e36 <extflash_wait_for_wop+0x70>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8002e04:	2001      	movs	r0, #1
 8002e06:	f007 ff19 	bl	800ac3c <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
 8002e0a:	7afb      	ldrb	r3, [r7, #11]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d007      	beq.n	8002e24 <extflash_wait_for_wop+0x5e>
 8002e14:	f007 ff06 	bl	800ac24 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d8e4      	bhi.n	8002dee <extflash_wait_for_wop+0x28>
	}

	if(ereg & (ESTATUS_PROT_ERR | ESTATUS_P_ERR | ESTATUS_E_ERR))
 8002e24:	7afb      	ldrb	r3, [r7, #11]
 8002e26:	f003 030e 	and.w	r3, r3, #14
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <extflash_wait_for_wop+0x6e>
	{
		return -2; //Erase o write error
 8002e2e:	f06f 0301 	mvn.w	r3, #1
 8002e32:	e000      	b.n	8002e36 <extflash_wait_for_wop+0x70>
	}

	return 0;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <extflash_sector_write>:

int extflash_sector_write(uint32_t sector, uint32_t nsectors, const uint8_t *pBuffer)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b088      	sub	sp, #32
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
	int result = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
	const uint8_t *wPtr = pBuffer;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	031b      	lsls	r3, r3, #12
 8002e56:	61bb      	str	r3, [r7, #24]

	extflash_clear_extended_read_reg();
 8002e58:	f7ff fea0 	bl	8002b9c <extflash_clear_extended_read_reg>

	while(nsectors > 0)
 8002e5c:	e04e      	b.n	8002efc <extflash_sector_write+0xbe>
	{
		//Controllo operazioni in corso
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8002e5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e62:	f7ff ffb0 	bl	8002dc6 <extflash_wait_for_wop>
 8002e66:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	db4a      	blt.n	8002f04 <extflash_sector_write+0xc6>

		//Erase del settore
		result = extflash_set_write_protection(0);
 8002e6e:	2000      	movs	r0, #0
 8002e70:	f7ff fea9 	bl	8002bc6 <extflash_set_write_protection>
 8002e74:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	db45      	blt.n	8002f08 <extflash_sector_write+0xca>
		result = extflash_raw_erase(address);
 8002e7c:	69b8      	ldr	r0, [r7, #24]
 8002e7e:	f7ff ff0b 	bl	8002c98 <extflash_raw_erase>
 8002e82:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	db40      	blt.n	8002f0c <extflash_sector_write+0xce>

		//Attesa ERASE
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8002e8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e8e:	f7ff ff9a 	bl	8002dc6 <extflash_wait_for_wop>
 8002e92:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	db3a      	blt.n	8002f10 <extflash_sector_write+0xd2>

		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]
 8002e9e:	e021      	b.n	8002ee4 <extflash_sector_write+0xa6>
		{
			result = extflash_set_write_protection(0);
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	f7ff fe90 	bl	8002bc6 <extflash_set_write_protection>
 8002ea6:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	db1e      	blt.n	8002eec <extflash_sector_write+0xae>
			result = extflash_raw_page_write(address, wPtr);
 8002eae:	69f9      	ldr	r1, [r7, #28]
 8002eb0:	69b8      	ldr	r0, [r7, #24]
 8002eb2:	f7ff ff0d 	bl	8002cd0 <extflash_raw_page_write>
 8002eb6:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	db18      	blt.n	8002ef0 <extflash_sector_write+0xb2>

			address += EFLASH_DEF_PAGE_SIZE;
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002ec4:	61bb      	str	r3, [r7, #24]
			wPtr += EFLASH_DEF_PAGE_SIZE;
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002ecc:	61fb      	str	r3, [r7, #28]
			//Attesa write
			result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8002ece:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ed2:	f7ff ff78 	bl	8002dc6 <extflash_wait_for_wop>
 8002ed6:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	db0a      	blt.n	8002ef4 <extflash_sector_write+0xb6>
		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	2b0f      	cmp	r3, #15
 8002ee8:	ddda      	ble.n	8002ea0 <extflash_sector_write+0x62>
 8002eea:	e004      	b.n	8002ef6 <extflash_sector_write+0xb8>
			if(result < 0)break;
 8002eec:	bf00      	nop
 8002eee:	e002      	b.n	8002ef6 <extflash_sector_write+0xb8>
			if(result < 0)break;
 8002ef0:	bf00      	nop
 8002ef2:	e000      	b.n	8002ef6 <extflash_sector_write+0xb8>
			if(result < 0)break;
 8002ef4:	bf00      	nop
		}

		nsectors--;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1ad      	bne.n	8002e5e <extflash_sector_write+0x20>
 8002f02:	e006      	b.n	8002f12 <extflash_sector_write+0xd4>
		if(result < 0)break;
 8002f04:	bf00      	nop
 8002f06:	e004      	b.n	8002f12 <extflash_sector_write+0xd4>
		if(result < 0)break;
 8002f08:	bf00      	nop
 8002f0a:	e002      	b.n	8002f12 <extflash_sector_write+0xd4>
		if(result < 0)break;
 8002f0c:	bf00      	nop
 8002f0e:	e000      	b.n	8002f12 <extflash_sector_write+0xd4>
		if(result < 0)break;
 8002f10:	bf00      	nop
	}

	extflash_set_write_protection(1);
 8002f12:	2001      	movs	r0, #1
 8002f14:	f7ff fe57 	bl	8002bc6 <extflash_set_write_protection>

	return 0;
 8002f18:	2300      	movs	r3, #0

}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3720      	adds	r7, #32
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <extflash_get_sector_size>:


unsigned int extflash_get_sector_size()
{
 8002f22:	b480      	push	{r7}
 8002f24:	af00      	add	r7, sp, #0
	return EFLASH_DEF_SECTOR_SIZE;
 8002f26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <extflash_get_sector_count>:

unsigned int extflash_get_sector_count()
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
	return exflashNumSectors;
 8002f38:	4b03      	ldr	r3, [pc, #12]	@ (8002f48 <extflash_get_sector_count+0x14>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	20000210 	.word	0x20000210

08002f4c <extflash_is_initialized>:
{
	return exflashSize;
}

int extflash_is_initialized()
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
	return exflashInitDone;
 8002f50:	4b03      	ldr	r3, [pc, #12]	@ (8002f60 <extflash_is_initialized+0x14>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	20000214 	.word	0x20000214

08002f64 <extflash_init>:

int extflash_init()
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0
	uint8_t manufacturer_id[2] = {0};
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	83bb      	strh	r3, [r7, #28]
	extflash_cmd command = {0};
 8002f6e:	f107 0308 	add.w	r3, r7, #8
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	605a      	str	r2, [r3, #4]
 8002f78:	609a      	str	r2, [r3, #8]
 8002f7a:	60da      	str	r2, [r3, #12]
 8002f7c:	611a      	str	r2, [r3, #16]
	uint8_t density[4] = {0};
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]

	exflashInitDone = 0;
 8002f82:	4b26      	ldr	r3, [pc, #152]	@ (800301c <extflash_init+0xb8>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	701a      	strb	r2, [r3, #0]
	exflashNumSectors = 0;
 8002f88:	4b25      	ldr	r3, [pc, #148]	@ (8003020 <extflash_init+0xbc>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]

	extflash_hard_reset();
 8002f8e:	f7ff fd5f 	bl	8002a50 <extflash_hard_reset>
	extflash_cs_reset();
 8002f92:	f7ff fd45 	bl	8002a20 <extflash_cs_reset>
	extflash_wp_reset();
 8002f96:	f7ff fd4f 	bl	8002a38 <extflash_wp_reset>

	command.cmd = EFLASH_CMD_RDMDID;
 8002f9a:	2390      	movs	r3, #144	@ 0x90
 8002f9c:	723b      	strb	r3, [r7, #8]
	command.address_en = 1;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	727b      	strb	r3, [r7, #9]
	command.address = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]
	command.rx_nb = 2;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	81bb      	strh	r3, [r7, #12]
	command.rx_data = manufacturer_id;
 8002faa:	f107 031c 	add.w	r3, r7, #28
 8002fae:	61bb      	str	r3, [r7, #24]

	extflash_send_cmd(&command);
 8002fb0:	f107 0308 	add.w	r3, r7, #8
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff fd5f 	bl	8002a78 <extflash_send_cmd>

	if(manufacturer_id[0] != EFLASH_DEF_MANIFACTURER || manufacturer_id[1] != EFLASH_DEF_DEVID)
 8002fba:	7f3b      	ldrb	r3, [r7, #28]
 8002fbc:	2b9d      	cmp	r3, #157	@ 0x9d
 8002fbe:	d102      	bne.n	8002fc6 <extflash_init+0x62>
 8002fc0:	7f7b      	ldrb	r3, [r7, #29]
 8002fc2:	2b17      	cmp	r3, #23
 8002fc4:	d002      	beq.n	8002fcc <extflash_init+0x68>
	{
		return -1;
 8002fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fca:	e022      	b.n	8003012 <extflash_init+0xae>
	}

	memset((void *)&command, 0, sizeof(command));
 8002fcc:	f107 0308 	add.w	r3, r7, #8
 8002fd0:	2214      	movs	r2, #20
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f012 fea5 	bl	8015d24 <memset>

	extflash_read_sfdp(SFDP_FLASH_DENSITY, density, sizeof(density));
 8002fda:	1d3b      	adds	r3, r7, #4
 8002fdc:	2204      	movs	r2, #4
 8002fde:	4619      	mov	r1, r3
 8002fe0:	2034      	movs	r0, #52	@ 0x34
 8002fe2:	f7ff fe0e 	bl	8002c02 <extflash_read_sfdp>

	memcpy(&exflashSize, density, sizeof(uint32_t));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a0e      	ldr	r2, [pc, #56]	@ (8003024 <extflash_init+0xc0>)
 8002fea:	6013      	str	r3, [r2, #0]

	exflashSize += 1;
 8002fec:	4b0d      	ldr	r3, [pc, #52]	@ (8003024 <extflash_init+0xc0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	4a0c      	ldr	r2, [pc, #48]	@ (8003024 <extflash_init+0xc0>)
 8002ff4:	6013      	str	r3, [r2, #0]
	exflashSize >>= 3;
 8002ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8003024 <extflash_init+0xc0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	08db      	lsrs	r3, r3, #3
 8002ffc:	4a09      	ldr	r2, [pc, #36]	@ (8003024 <extflash_init+0xc0>)
 8002ffe:	6013      	str	r3, [r2, #0]

	exflashNumSectors = exflashSize / EFLASH_DEF_SECTOR_SIZE;
 8003000:	4b08      	ldr	r3, [pc, #32]	@ (8003024 <extflash_init+0xc0>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	0b1b      	lsrs	r3, r3, #12
 8003006:	4a06      	ldr	r2, [pc, #24]	@ (8003020 <extflash_init+0xbc>)
 8003008:	6013      	str	r3, [r2, #0]

	exflashInitDone = 1;
 800300a:	4b04      	ldr	r3, [pc, #16]	@ (800301c <extflash_init+0xb8>)
 800300c:	2201      	movs	r2, #1
 800300e:	701a      	strb	r2, [r3, #0]

	return 0;
 8003010:	2300      	movs	r3, #0

}
 8003012:	4618      	mov	r0, r3
 8003014:	3720      	adds	r7, #32
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000214 	.word	0x20000214
 8003020:	20000210 	.word	0x20000210
 8003024:	2000020c 	.word	0x2000020c

08003028 <System_Init>:
#include "lsm6dsv16x_rw.h"
#include "DS18B20.h"

/*-----INIZiALIZZAZIONE SISTEMA-----*/
void System_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
	acc.write_reg = acc_write;
 800302c:	4b1e      	ldr	r3, [pc, #120]	@ (80030a8 <System_Init+0x80>)
 800302e:	4a1f      	ldr	r2, [pc, #124]	@ (80030ac <System_Init+0x84>)
 8003030:	601a      	str	r2, [r3, #0]
	acc.read_reg = acc_read;
 8003032:	4b1d      	ldr	r3, [pc, #116]	@ (80030a8 <System_Init+0x80>)
 8003034:	4a1e      	ldr	r2, [pc, #120]	@ (80030b0 <System_Init+0x88>)
 8003036:	605a      	str	r2, [r3, #4]
	acc.handle = &hspi3;
 8003038:	4b1b      	ldr	r3, [pc, #108]	@ (80030a8 <System_Init+0x80>)
 800303a:	4a1e      	ldr	r2, [pc, #120]	@ (80030b4 <System_Init+0x8c>)
 800303c:	60da      	str	r2, [r3, #12]

	LED_Start(ORG_LED, FAST, HIGH);
 800303e:	2205      	movs	r2, #5
 8003040:	2100      	movs	r1, #0
 8003042:	2000      	movs	r0, #0
 8003044:	f000 fa6c 	bl	8003520 <LED_Start>

	BC_Init();
 8003048:	f7ff f9d2 	bl	80023f0 <BC_Init>
	INA3221_Init();
 800304c:	f7fd ffc4 	bl	8000fd8 <INA3221_Init>
	FatFS_Init();
 8003050:	f000 f838 	bl	80030c4 <FatFS_Init>
	Config_Init();
 8003054:	f000 f97e 	bl	8003354 <Config_Init>
	Acc_Init(&acc);
 8003058:	4813      	ldr	r0, [pc, #76]	@ (80030a8 <System_Init+0x80>)
 800305a:	f000 f8cf 	bl	80031fc <Acc_Init>
	while(SIM_Init() != HAL_OK);
 800305e:	bf00      	nop
 8003060:	f7fe fa26 	bl	80014b0 <SIM_Init>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1fa      	bne.n	8003060 <System_Init+0x38>
	RTC_Init();
 800306a:	f7fe f863 	bl	8001134 <RTC_Init>
	Temperature = Read_Temperature();
 800306e:	f7fd ff7b 	bl	8000f68 <Read_Temperature>
 8003072:	4603      	mov	r3, r0
 8003074:	461a      	mov	r2, r3
 8003076:	4b10      	ldr	r3, [pc, #64]	@ (80030b8 <System_Init+0x90>)
 8003078:	801a      	strh	r2, [r3, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 800307a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800307e:	490f      	ldr	r1, [pc, #60]	@ (80030bc <System_Init+0x94>)
 8003080:	480f      	ldr	r0, [pc, #60]	@ (80030c0 <System_Init+0x98>)
 8003082:	f012 fd11 	bl	8015aa8 <HAL_UARTEx_ReceiveToIdle_DMA>

	LED_Start(RED_LED, SLOW, FULL);
 8003086:	2204      	movs	r2, #4
 8003088:	2102      	movs	r1, #2
 800308a:	2004      	movs	r0, #4
 800308c:	f000 fa48 	bl	8003520 <LED_Start>
	HAL_Delay(9000);
 8003090:	f242 3028 	movw	r0, #9000	@ 0x2328
 8003094:	f007 fdd2 	bl	800ac3c <HAL_Delay>

	LED_Stop(RED_LED);
 8003098:	2004      	movs	r0, #4
 800309a:	f000 fb33 	bl	8003704 <LED_Stop>
	LED_Stop(ORG_LED);
 800309e:	2000      	movs	r0, #0
 80030a0:	f000 fb30 	bl	8003704 <LED_Stop>
}
 80030a4:	bf00      	nop
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	200054e4 	.word	0x200054e4
 80030ac:	08003f27 	.word	0x08003f27
 80030b0:	08003f7f 	.word	0x08003f7f
 80030b4:	20000408 	.word	0x20000408
 80030b8:	20004720 	.word	0x20004720
 80030bc:	200054f4 	.word	0x200054f4
 80030c0:	20000624 	.word	0x20000624

080030c4 <FatFS_Init>:

/*-----INIZiALIZZAZIONE MEMORIE-----*/
void FatFS_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	75fb      	strb	r3, [r7, #23]
	MKFS_PARM mkfs_opt = {0};
 80030ce:	1d3b      	adds	r3, r7, #4
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]

	do
	{
		sys.RAM_Mounted = 0;
 80030da:	4b41      	ldr	r3, [pc, #260]	@ (80031e0 <FatFS_Init+0x11c>)
 80030dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030e0:	461a      	mov	r2, r3
 80030e2:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80030e6:	f023 0302 	bic.w	r3, r3, #2
 80030ea:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		
		mkfs_opt.fmt = FM_FAT32;
 80030ee:	2302      	movs	r3, #2
 80030f0:	713b      	strb	r3, [r7, #4]
		mkfs_opt.au_size = 1024; 
 80030f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030f6:	613b      	str	r3, [r7, #16]
		mkfs_opt.n_fat = 1;
 80030f8:	2301      	movs	r3, #1
 80030fa:	717b      	strb	r3, [r7, #5]
		mkfs_opt.align = 1;
 80030fc:	2301      	movs	r3, #1
 80030fe:	60bb      	str	r3, [r7, #8]

		fRes = f_mkfs("/ram", &mkfs_opt, psram_fs.win, sizeof(psram_fs.win));
 8003100:	1d39      	adds	r1, r7, #4
 8003102:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003106:	4a37      	ldr	r2, [pc, #220]	@ (80031e4 <FatFS_Init+0x120>)
 8003108:	4837      	ldr	r0, [pc, #220]	@ (80031e8 <FatFS_Init+0x124>)
 800310a:	f007 f8a9 	bl	800a260 <f_mkfs>
 800310e:	4603      	mov	r3, r0
 8003110:	75fb      	strb	r3, [r7, #23]
		if (fRes != FR_OK)
 8003112:	7dfb      	ldrb	r3, [r7, #23]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d114      	bne.n	8003142 <FatFS_Init+0x7e>
		{
			break;
		}

		fRes = f_mount(&psram_fs, "/ram", 1);
 8003118:	2201      	movs	r2, #1
 800311a:	4933      	ldr	r1, [pc, #204]	@ (80031e8 <FatFS_Init+0x124>)
 800311c:	4833      	ldr	r0, [pc, #204]	@ (80031ec <FatFS_Init+0x128>)
 800311e:	f006 fa1d 	bl	800955c <f_mount>
 8003122:	4603      	mov	r3, r0
 8003124:	75fb      	strb	r3, [r7, #23]

		if (fRes != FR_OK)
 8003126:	7dfb      	ldrb	r3, [r7, #23]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10c      	bne.n	8003146 <FatFS_Init+0x82>
		{
			break;
		}

		sys.RAM_Mounted = 1;
 800312c:	4b2c      	ldr	r3, [pc, #176]	@ (80031e0 <FatFS_Init+0x11c>)
 800312e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003132:	461a      	mov	r2, r3
 8003134:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003138:	f043 0302 	orr.w	r3, r3, #2
 800313c:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 8003140:	e002      	b.n	8003148 <FatFS_Init+0x84>
			break;
 8003142:	bf00      	nop
 8003144:	e000      	b.n	8003148 <FatFS_Init+0x84>
			break;
 8003146:	bf00      	nop
	} while (1);

	do
	{
		sys.FLASH_Mounted = 0;
 8003148:	4b25      	ldr	r3, [pc, #148]	@ (80031e0 <FatFS_Init+0x11c>)
 800314a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800314e:	461a      	mov	r2, r3
 8003150:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003154:	f023 0304 	bic.w	r3, r3, #4
 8003158:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		fRes = f_mount(&flash_fs, "/flash", 1);
 800315c:	2201      	movs	r2, #1
 800315e:	4924      	ldr	r1, [pc, #144]	@ (80031f0 <FatFS_Init+0x12c>)
 8003160:	4824      	ldr	r0, [pc, #144]	@ (80031f4 <FatFS_Init+0x130>)
 8003162:	f006 f9fb 	bl	800955c <f_mount>
 8003166:	4603      	mov	r3, r0
 8003168:	75fb      	strb	r3, [r7, #23]

		if (fRes == FR_NO_FILESYSTEM)
 800316a:	7dfb      	ldrb	r3, [r7, #23]
 800316c:	2b0d      	cmp	r3, #13
 800316e:	d124      	bne.n	80031ba <FatFS_Init+0xf6>
		{
			memset((void *)&mkfs_opt, 0, sizeof(mkfs_opt));
 8003170:	1d3b      	adds	r3, r7, #4
 8003172:	2210      	movs	r2, #16
 8003174:	2100      	movs	r1, #0
 8003176:	4618      	mov	r0, r3
 8003178:	f012 fdd4 	bl	8015d24 <memset>
			mkfs_opt.fmt = FM_FAT32;
 800317c:	2302      	movs	r3, #2
 800317e:	713b      	strb	r3, [r7, #4]
			mkfs_opt.au_size = 4096;    
 8003180:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003184:	613b      	str	r3, [r7, #16]
			mkfs_opt.n_fat = 1;
 8003186:	2301      	movs	r3, #1
 8003188:	717b      	strb	r3, [r7, #5]
			mkfs_opt.align = 1;
 800318a:	2301      	movs	r3, #1
 800318c:	60bb      	str	r3, [r7, #8]

			fRes = f_mkfs("/flash", &mkfs_opt, flash_fs.win, sizeof(flash_fs.win));
 800318e:	1d39      	adds	r1, r7, #4
 8003190:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003194:	4a18      	ldr	r2, [pc, #96]	@ (80031f8 <FatFS_Init+0x134>)
 8003196:	4816      	ldr	r0, [pc, #88]	@ (80031f0 <FatFS_Init+0x12c>)
 8003198:	f007 f862 	bl	800a260 <f_mkfs>
 800319c:	4603      	mov	r3, r0
 800319e:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 80031a0:	7dfb      	ldrb	r3, [r7, #23]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d114      	bne.n	80031d0 <FatFS_Init+0x10c>
			{
				break;
			}

			fRes = f_mount(&flash_fs, "/flash", 1);
 80031a6:	2201      	movs	r2, #1
 80031a8:	4911      	ldr	r1, [pc, #68]	@ (80031f0 <FatFS_Init+0x12c>)
 80031aa:	4812      	ldr	r0, [pc, #72]	@ (80031f4 <FatFS_Init+0x130>)
 80031ac:	f006 f9d6 	bl	800955c <f_mount>
 80031b0:	4603      	mov	r3, r0
 80031b2:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10c      	bne.n	80031d4 <FatFS_Init+0x110>
			{
				break;
			}
		}

		sys.FLASH_Mounted = 1;
 80031ba:	4b09      	ldr	r3, [pc, #36]	@ (80031e0 <FatFS_Init+0x11c>)
 80031bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031c0:	461a      	mov	r2, r3
 80031c2:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80031c6:	f043 0304 	orr.w	r3, r3, #4
 80031ca:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 80031ce:	e002      	b.n	80031d6 <FatFS_Init+0x112>
				break;
 80031d0:	bf00      	nop
 80031d2:	e000      	b.n	80031d6 <FatFS_Init+0x112>
				break;
 80031d4:	bf00      	nop
	} while (1);


}
 80031d6:	bf00      	nop
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000740 	.word	0x20000740
 80031e4:	20001e10 	.word	0x20001e10
 80031e8:	080171d0 	.word	0x080171d0
 80031ec:	20001ddc 	.word	0x20001ddc
 80031f0:	080171d8 	.word	0x080171d8
 80031f4:	20002e10 	.word	0x20002e10
 80031f8:	20002e44 	.word	0x20002e44

080031fc <Acc_Init>:

/*-----INIZiALIZZAZIONE ACCELEROMETRO-----*/
void Acc_Init(stmdev_ctx_t* acc)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
	lsm6dsv16x_reset_t rst;
	lsm6dsv16x_pin_int_route_t pin_int = {0};
 8003204:	f107 0310 	add.w	r3, r7, #16
 8003208:	2100      	movs	r1, #0
 800320a:	460a      	mov	r2, r1
 800320c:	801a      	strh	r2, [r3, #0]
 800320e:	460a      	mov	r2, r1
 8003210:	709a      	strb	r2, [r3, #2]
	uint8_t acc_whoamI = 0;
 8003212:	2300      	movs	r3, #0
 8003214:	73fb      	strb	r3, [r7, #15]
	uint8_t wmi_cnt = 0;
 8003216:	2300      	movs	r3, #0
 8003218:	75fb      	strb	r3, [r7, #23]

	pin_int.fifo_th = PROPERTY_ENABLE;
 800321a:	7c3b      	ldrb	r3, [r7, #16]
 800321c:	f043 0308 	orr.w	r3, r3, #8
 8003220:	743b      	strb	r3, [r7, #16]


	lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 8003222:	f107 030f 	add.w	r3, r7, #15
 8003226:	4619      	mov	r1, r3
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 fb4f 	bl	80038cc <lsm6dsv16x_device_id_get>
	if (acc_whoamI != LSM6DSV16X_ID)
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	2b70      	cmp	r3, #112	@ 0x70
 8003232:	d01f      	beq.n	8003274 <Acc_Init+0x78>
		while (acc_whoamI != LSM6DSV16X_ID)
 8003234:	e01b      	b.n	800326e <Acc_Init+0x72>
		{
			lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 8003236:	f107 030f 	add.w	r3, r7, #15
 800323a:	4619      	mov	r1, r3
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fb45 	bl	80038cc <lsm6dsv16x_device_id_get>
			wmi_cnt++;
 8003242:	7dfb      	ldrb	r3, [r7, #23]
 8003244:	3301      	adds	r3, #1
 8003246:	75fb      	strb	r3, [r7, #23]
			if (wmi_cnt == 3)
 8003248:	7dfb      	ldrb	r3, [r7, #23]
 800324a:	2b03      	cmp	r3, #3
 800324c:	d10f      	bne.n	800326e <Acc_Init+0x72>
			{
				sys.ACC_Present = 0;
 800324e:	4b3e      	ldr	r3, [pc, #248]	@ (8003348 <Acc_Init+0x14c>)
 8003250:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003254:	461a      	mov	r2, r3
 8003256:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800325a:	f023 0301 	bic.w	r3, r3, #1
 800325e:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
				flags.ACC_Complete = 1;
 8003262:	4a3a      	ldr	r2, [pc, #232]	@ (800334c <Acc_Init+0x150>)
 8003264:	7813      	ldrb	r3, [r2, #0]
 8003266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800326a:	7013      	strb	r3, [r2, #0]
 800326c:	e069      	b.n	8003342 <Acc_Init+0x146>
		while (acc_whoamI != LSM6DSV16X_ID)
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	2b70      	cmp	r3, #112	@ 0x70
 8003272:	d1e0      	bne.n	8003236 <Acc_Init+0x3a>
				return;
			}
		}
	sys.ACC_Present = 1;
 8003274:	4b34      	ldr	r3, [pc, #208]	@ (8003348 <Acc_Init+0x14c>)
 8003276:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800327a:	461a      	mov	r2, r3
 800327c:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
	lsm6dsv16x_reset_set(acc, LSM6DSV16X_GLOBAL_RST);
 8003288:	2101      	movs	r1, #1
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fa78 	bl	8003780 <lsm6dsv16x_reset_set>
	do {
		lsm6dsv16x_reset_get(acc, &rst);
 8003290:	f107 0316 	add.w	r3, r7, #22
 8003294:	4619      	mov	r1, r3
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fac2 	bl	8003820 <lsm6dsv16x_reset_get>
		HAL_Delay(10);
 800329c:	200a      	movs	r0, #10
 800329e:	f007 fccd 	bl	800ac3c <HAL_Delay>
	} while (rst != LSM6DSV16X_READY);
 80032a2:	7dbb      	ldrb	r3, [r7, #22]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1f3      	bne.n	8003290 <Acc_Init+0x94>

	lsm6dsv16x_block_data_update_set(acc, PROPERTY_ENABLE);
 80032a8:	2101      	movs	r1, #1
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 fc0b 	bl	8003ac6 <lsm6dsv16x_block_data_update_set>
	lsm6dsv16x_ui_i2c_i3c_mode_set(acc, LSM6DSV16X_I2C_I3C_DISABLE);
 80032b0:	2101      	movs	r1, #1
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 fe11 	bl	8003eda <lsm6dsv16x_ui_i2c_i3c_mode_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_HIGH_PERFORMANCE_MD);
 80032b8:	2100      	movs	r1, #0
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fb68 	bl	8003990 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_HIGH_PERFORMANCE_MD);
 80032c0:	2100      	movs	r1, #0
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fbd9 	bl	8003a7a <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_fifo_xl_batch_set(acc, LSM6DSV16X_XL_BATCHED_AT_960Hz);
 80032c8:	2109      	movs	r1, #9
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fd93 	bl	8003df6 <lsm6dsv16x_fifo_xl_batch_set>
	lsm6dsv16x_fifo_gy_batch_set(acc, LSM6DSV16X_GY_NOT_BATCHED);
 80032d0:	2100      	movs	r1, #0
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fdb5 	bl	8003e42 <lsm6dsv16x_fifo_gy_batch_set>
	lsm6dsv16x_fifo_mode_set(acc, LSM6DSV16X_BYPASS_MODE);
 80032d8:	2100      	movs	r1, #0
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fdd7 	bl	8003e8e <lsm6dsv16x_fifo_mode_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 80032e0:	2100      	movs	r1, #0
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fb03 	bl	80038ee <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_gy_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 80032e8:	2100      	movs	r1, #0
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fb76 	bl	80039dc <lsm6dsv16x_gy_data_rate_set>
	lsm6dsv16x_odr_trig_cfg_set(acc, 16);  //800SPS
 80032f0:	2110      	movs	r1, #16
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 fc0d 	bl	8003b12 <lsm6dsv16x_odr_trig_cfg_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_ODR_TRIGGERED_MD);
 80032f8:	2103      	movs	r1, #3
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 fb48 	bl	8003990 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_ODR_TRIGGERED_MD);
 8003300:	2103      	movs	r1, #3
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 fbb9 	bl	8003a7a <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_den_polarity_set(acc, LSM6DSV16X_DEN_ACT_HIGH);
 8003308:	2101      	movs	r1, #1
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fd2d 	bl	8003d6a <lsm6dsv16x_den_polarity_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_AT_960Hz);
 8003310:	2109      	movs	r1, #9
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 faeb 	bl	80038ee <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_xl_full_scale_set(acc, LSM6DSV16X_2g);
 8003318:	2100      	movs	r1, #0
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 fc48 	bl	8003bb0 <lsm6dsv16x_xl_full_scale_set>
	lsm6dsv16x_gy_full_scale_set(acc, LSM6DSV16X_2000dps);
 8003320:	2104      	movs	r1, #4
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 fc1e 	bl	8003b64 <lsm6dsv16x_gy_full_scale_set>
	lsm6dsv16x_fifo_watermark_set(acc, ACC_FIFO_WATERMARK);
 8003328:	21c8      	movs	r1, #200	@ 0xc8
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 fd43 	bl	8003db6 <lsm6dsv16x_fifo_watermark_set>
	lsm6dsv16x_pin_int1_route_set(acc, &pin_int);
 8003330:	f107 0310 	add.w	r3, r7, #16
 8003334:	4619      	mov	r1, r3
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fc60 	bl	8003bfc <lsm6dsv16x_pin_int1_route_set>

	__HAL_GPIO_EXTI_CLEAR_IT(ACC_INTERRUPT);
 800333c:	4b04      	ldr	r3, [pc, #16]	@ (8003350 <Acc_Init+0x154>)
 800333e:	2204      	movs	r2, #4
 8003340:	615a      	str	r2, [r3, #20]
}
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20000740 	.word	0x20000740
 800334c:	20001c68 	.word	0x20001c68
 8003350:	40010400 	.word	0x40010400

08003354 <Config_Init>:

/*-----INIZiALIZZAZIONE CONFIGURAZIONE-----*/
void Config_Init(void)
{
 8003354:	b590      	push	{r4, r7, lr}
 8003356:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
    FIL config_file;
    UINT bytes_read;
    UINT bytes_written;

    if (f_open(&config_file, CONFIG_FILE, FA_READ) == FR_OK) 
 800335e:	f107 0318 	add.w	r3, r7, #24
 8003362:	3b0c      	subs	r3, #12
 8003364:	2201      	movs	r2, #1
 8003366:	4963      	ldr	r1, [pc, #396]	@ (80034f4 <Config_Init+0x1a0>)
 8003368:	4618      	mov	r0, r3
 800336a:	f006 f941 	bl	80095f0 <f_open>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d121      	bne.n	80033b8 <Config_Init+0x64>
	{
        if (f_read(&config_file, &config, sizeof(config), &bytes_read) == FR_OK && bytes_read == sizeof(config))
 8003374:	f107 0318 	add.w	r3, r7, #24
 8003378:	3b10      	subs	r3, #16
 800337a:	f107 0018 	add.w	r0, r7, #24
 800337e:	380c      	subs	r0, #12
 8003380:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8003384:	495c      	ldr	r1, [pc, #368]	@ (80034f8 <Config_Init+0x1a4>)
 8003386:	f006 facb 	bl	8009920 <f_read>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10d      	bne.n	80033ac <Config_Init+0x58>
 8003390:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003394:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8003398:	f5b3 7fb8 	cmp.w	r3, #368	@ 0x170
 800339c:	d106      	bne.n	80033ac <Config_Init+0x58>
		{
			f_close(&config_file);
 800339e:	f107 0318 	add.w	r3, r7, #24
 80033a2:	3b0c      	subs	r3, #12
 80033a4:	4618      	mov	r0, r3
 80033a6:	f006 fe17 	bl	8009fd8 <f_close>
			return;
 80033aa:	e09e      	b.n	80034ea <Config_Init+0x196>
        }
        f_close(&config_file);
 80033ac:	f107 0318 	add.w	r3, r7, #24
 80033b0:	3b0c      	subs	r3, #12
 80033b2:	4618      	mov	r0, r3
 80033b4:	f006 fe10 	bl	8009fd8 <f_close>
    }

    config.device_id = 0;
 80033b8:	4b4f      	ldr	r3, [pc, #316]	@ (80034f8 <Config_Init+0x1a4>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	701a      	strb	r2, [r3, #0]
	config.samp_freq = 800;
 80033be:	4b4e      	ldr	r3, [pc, #312]	@ (80034f8 <Config_Init+0x1a4>)
 80033c0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80033c4:	805a      	strh	r2, [r3, #2]
	config.buffering_secs = 30;
 80033c6:	4b4c      	ldr	r3, [pc, #304]	@ (80034f8 <Config_Init+0x1a4>)
 80033c8:	221e      	movs	r2, #30
 80033ca:	711a      	strb	r2, [r3, #4]
	config.connection_timeout = 60000;
 80033cc:	4b4a      	ldr	r3, [pc, #296]	@ (80034f8 <Config_Init+0x1a4>)
 80033ce:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80033d2:	609a      	str	r2, [r3, #8]
	config.hammer_th = 2048;
 80033d4:	4b48      	ldr	r3, [pc, #288]	@ (80034f8 <Config_Init+0x1a4>)
 80033d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033da:	819a      	strh	r2, [r3, #12]
    for(int i = 0; i < 24; i++) 
 80033dc:	2300      	movs	r3, #0
 80033de:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80033e2:	f102 0214 	add.w	r2, r2, #20
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	e021      	b.n	800342e <Config_Init+0xda>
	{
        config.low_th[i] = 0;
 80033ea:	4a43      	ldr	r2, [pc, #268]	@ (80034f8 <Config_Init+0x1a4>)
 80033ec:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80033f0:	f103 0314 	add.w	r3, r3, #20
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	3304      	adds	r3, #4
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	4413      	add	r3, r2
 80033fc:	2200      	movs	r2, #0
 80033fe:	80da      	strh	r2, [r3, #6]
        config.high_th[i] = 4096;
 8003400:	4a3d      	ldr	r2, [pc, #244]	@ (80034f8 <Config_Init+0x1a4>)
 8003402:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8003406:	f103 0314 	add.w	r3, r3, #20
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	331c      	adds	r3, #28
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	4413      	add	r3, r2
 8003412:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003416:	80da      	strh	r2, [r3, #6]
    for(int i = 0; i < 24; i++) 
 8003418:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800341c:	f103 0314 	add.w	r3, r3, #20
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3301      	adds	r3, #1
 8003424:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8003428:	f102 0214 	add.w	r2, r2, #20
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8003432:	f103 0314 	add.w	r3, r3, #20
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b17      	cmp	r3, #23
 800343a:	ddd6      	ble.n	80033ea <Config_Init+0x96>
    }
    strcpy(config.data_topic, "Data_Topic");
 800343c:	4a2f      	ldr	r2, [pc, #188]	@ (80034fc <Config_Init+0x1a8>)
 800343e:	4b30      	ldr	r3, [pc, #192]	@ (8003500 <Config_Init+0x1ac>)
 8003440:	cb03      	ldmia	r3!, {r0, r1}
 8003442:	6010      	str	r0, [r2, #0]
 8003444:	6051      	str	r1, [r2, #4]
 8003446:	8819      	ldrh	r1, [r3, #0]
 8003448:	789b      	ldrb	r3, [r3, #2]
 800344a:	8111      	strh	r1, [r2, #8]
 800344c:	7293      	strb	r3, [r2, #10]
    strcpy(config.command_topic, "Command_Topic");  
 800344e:	4a2d      	ldr	r2, [pc, #180]	@ (8003504 <Config_Init+0x1b0>)
 8003450:	4b2d      	ldr	r3, [pc, #180]	@ (8003508 <Config_Init+0x1b4>)
 8003452:	4614      	mov	r4, r2
 8003454:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003456:	6020      	str	r0, [r4, #0]
 8003458:	6061      	str	r1, [r4, #4]
 800345a:	60a2      	str	r2, [r4, #8]
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	81a3      	strh	r3, [r4, #12]
    strcpy(config.ota_topic, "OTA_Topic");
 8003460:	4a2a      	ldr	r2, [pc, #168]	@ (800350c <Config_Init+0x1b8>)
 8003462:	4b2b      	ldr	r3, [pc, #172]	@ (8003510 <Config_Init+0x1bc>)
 8003464:	cb03      	ldmia	r3!, {r0, r1}
 8003466:	6010      	str	r0, [r2, #0]
 8003468:	6051      	str	r1, [r2, #4]
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	8113      	strh	r3, [r2, #8]
	strcpy(config.info_topic, "Info_Topic");
 800346e:	4a29      	ldr	r2, [pc, #164]	@ (8003514 <Config_Init+0x1c0>)
 8003470:	4b29      	ldr	r3, [pc, #164]	@ (8003518 <Config_Init+0x1c4>)
 8003472:	cb03      	ldmia	r3!, {r0, r1}
 8003474:	6010      	str	r0, [r2, #0]
 8003476:	6051      	str	r1, [r2, #4]
 8003478:	8819      	ldrh	r1, [r3, #0]
 800347a:	789b      	ldrb	r3, [r3, #2]
 800347c:	8111      	strh	r1, [r2, #8]
 800347e:	7293      	strb	r3, [r2, #10]
    
    if (f_open(&config_file, CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8003480:	f107 0318 	add.w	r3, r7, #24
 8003484:	3b0c      	subs	r3, #12
 8003486:	220a      	movs	r2, #10
 8003488:	491a      	ldr	r1, [pc, #104]	@ (80034f4 <Config_Init+0x1a0>)
 800348a:	4618      	mov	r0, r3
 800348c:	f006 f8b0 	bl	80095f0 <f_open>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d128      	bne.n	80034e8 <Config_Init+0x194>
    {
        return;
    }

    if (f_write(&config_file, &config, sizeof(Config_Typedef), &bytes_written) != FR_OK || bytes_written != sizeof(Config_Typedef)) 
 8003496:	f107 0318 	add.w	r3, r7, #24
 800349a:	3b14      	subs	r3, #20
 800349c:	f107 0018 	add.w	r0, r7, #24
 80034a0:	380c      	subs	r0, #12
 80034a2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80034a6:	4914      	ldr	r1, [pc, #80]	@ (80034f8 <Config_Init+0x1a4>)
 80034a8:	f006 fb8d 	bl	8009bc6 <f_write>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d106      	bne.n	80034c0 <Config_Init+0x16c>
 80034b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80034b6:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80034ba:	f5b3 7fb8 	cmp.w	r3, #368	@ 0x170
 80034be:	d006      	beq.n	80034ce <Config_Init+0x17a>
	{
        f_close(&config_file);
 80034c0:	f107 0318 	add.w	r3, r7, #24
 80034c4:	3b0c      	subs	r3, #12
 80034c6:	4618      	mov	r0, r3
 80034c8:	f006 fd86 	bl	8009fd8 <f_close>
        return;
 80034cc:	e00d      	b.n	80034ea <Config_Init+0x196>
    }
    
    f_sync(&config_file);
 80034ce:	f107 0318 	add.w	r3, r7, #24
 80034d2:	3b0c      	subs	r3, #12
 80034d4:	4618      	mov	r0, r3
 80034d6:	f006 fcff 	bl	8009ed8 <f_sync>
    f_close(&config_file);
 80034da:	f107 0318 	add.w	r3, r7, #24
 80034de:	3b0c      	subs	r3, #12
 80034e0:	4618      	mov	r0, r3
 80034e2:	f006 fd79 	bl	8009fd8 <f_close>
 80034e6:	e000      	b.n	80034ea <Config_Init+0x196>
        return;
 80034e8:	bf00      	nop
}
 80034ea:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 80034ee:	371c      	adds	r7, #28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd90      	pop	{r4, r7, pc}
 80034f4:	080171e0 	.word	0x080171e0
 80034f8:	20001c6c 	.word	0x20001c6c
 80034fc:	20001cda 	.word	0x20001cda
 8003500:	080171f4 	.word	0x080171f4
 8003504:	20001d1a 	.word	0x20001d1a
 8003508:	08017200 	.word	0x08017200
 800350c:	20001d5a 	.word	0x20001d5a
 8003510:	08017210 	.word	0x08017210
 8003514:	20001d9a 	.word	0x20001d9a
 8003518:	0801721c 	.word	0x0801721c
 800351c:	00000000 	.word	0x00000000

08003520 <LED_Start>:
#include "leds.h"
#include "peripherals.h"

/*------ACCENSIONE LED------*/
void LED_Start(uint32_t LED, uint8_t freq, uint8_t duty)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	70fb      	strb	r3, [r7, #3]
 800352c:	4613      	mov	r3, r2
 800352e:	70bb      	strb	r3, [r7, #2]
    TIM_HandleTypeDef *htim = LED_TIMER;
 8003530:	4b6f      	ldr	r3, [pc, #444]	@ (80036f0 <LED_Start+0x1d0>)
 8003532:	60fb      	str	r3, [r7, #12]
	uint16_t pulse = 0;
 8003534:	2300      	movs	r3, #0
 8003536:	82fb      	strh	r3, [r7, #22]

    uint16_t prescaler = (uint16_t)(SystemCoreClock / 5000 - 1);
 8003538:	4b6e      	ldr	r3, [pc, #440]	@ (80036f4 <LED_Start+0x1d4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a6e      	ldr	r2, [pc, #440]	@ (80036f8 <LED_Start+0x1d8>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	0b1b      	lsrs	r3, r3, #12
 8003544:	b29b      	uxth	r3, r3
 8003546:	3b01      	subs	r3, #1
 8003548:	82bb      	strh	r3, [r7, #20]
    uint16_t period = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	827b      	strh	r3, [r7, #18]

    switch(freq)
 800354e:	78fb      	ldrb	r3, [r7, #3]
 8003550:	2b03      	cmp	r3, #3
 8003552:	f200 80c3 	bhi.w	80036dc <LED_Start+0x1bc>
 8003556:	a201      	add	r2, pc, #4	@ (adr r2, 800355c <LED_Start+0x3c>)
 8003558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355c:	0800356d 	.word	0x0800356d
 8003560:	08003579 	.word	0x08003579
 8003564:	08003581 	.word	0x08003581
 8003568:	080035b9 	.word	0x080035b9
    {
        case FAST:  
            period = (uint16_t)((prescaler / 2) - 1);
 800356c:	8abb      	ldrh	r3, [r7, #20]
 800356e:	085b      	lsrs	r3, r3, #1
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	827b      	strh	r3, [r7, #18]
            break;
 8003576:	e03b      	b.n	80035f0 <LED_Start+0xd0>
        case MEDIUM:
            period = (uint16_t)(prescaler / 1 - 1);
 8003578:	8abb      	ldrh	r3, [r7, #20]
 800357a:	3b01      	subs	r3, #1
 800357c:	827b      	strh	r3, [r7, #18]
            break;
 800357e:	e037      	b.n	80035f0 <LED_Start+0xd0>
        case SLOW:
            prescaler = (uint16_t)(SystemCoreClock / 0.5 - 1);
 8003580:	4b5c      	ldr	r3, [pc, #368]	@ (80036f4 <LED_Start+0x1d4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f7fc ffcd 	bl	8000524 <__aeabi_ui2d>
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	4b5b      	ldr	r3, [pc, #364]	@ (80036fc <LED_Start+0x1dc>)
 8003590:	f7fd f96c 	bl	800086c <__aeabi_ddiv>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4610      	mov	r0, r2
 800359a:	4619      	mov	r1, r3
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	4b57      	ldr	r3, [pc, #348]	@ (8003700 <LED_Start+0x1e0>)
 80035a2:	f7fc fe81 	bl	80002a8 <__aeabi_dsub>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4610      	mov	r0, r2
 80035ac:	4619      	mov	r1, r3
 80035ae:	f7fd fa45 	bl	8000a3c <__aeabi_d2uiz>
 80035b2:	4603      	mov	r3, r0
 80035b4:	82bb      	strh	r3, [r7, #20]
            break;
 80035b6:	e01b      	b.n	80035f0 <LED_Start+0xd0>
        case VERY_SLOW:
            prescaler = (uint16_t)(SystemCoreClock / 0.1 - 1);
 80035b8:	4b4e      	ldr	r3, [pc, #312]	@ (80036f4 <LED_Start+0x1d4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fc ffb1 	bl	8000524 <__aeabi_ui2d>
 80035c2:	a349      	add	r3, pc, #292	@ (adr r3, 80036e8 <LED_Start+0x1c8>)
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	f7fd f950 	bl	800086c <__aeabi_ddiv>
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4610      	mov	r0, r2
 80035d2:	4619      	mov	r1, r3
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	4b49      	ldr	r3, [pc, #292]	@ (8003700 <LED_Start+0x1e0>)
 80035da:	f7fc fe65 	bl	80002a8 <__aeabi_dsub>
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	4610      	mov	r0, r2
 80035e4:	4619      	mov	r1, r3
 80035e6:	f7fd fa29 	bl	8000a3c <__aeabi_d2uiz>
 80035ea:	4603      	mov	r3, r0
 80035ec:	82bb      	strh	r3, [r7, #20]
            break;
 80035ee:	bf00      	nop
        default:
            return;
    }

	switch(duty)
 80035f0:	78bb      	ldrb	r3, [r7, #2]
 80035f2:	3b04      	subs	r3, #4
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d873      	bhi.n	80036e0 <LED_Start+0x1c0>
 80035f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003600 <LED_Start+0xe0>)
 80035fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fe:	bf00      	nop
 8003600:	08003611 	.word	0x08003611
 8003604:	08003617 	.word	0x08003617
 8003608:	0800362b 	.word	0x0800362b
 800360c:	08003633 	.word	0x08003633
	{
		case FULL:
			pulse = period; 
 8003610:	8a7b      	ldrh	r3, [r7, #18]
 8003612:	82fb      	strh	r3, [r7, #22]
		    break;
 8003614:	e011      	b.n	800363a <LED_Start+0x11a>
        case HIGH:
			pulse = period * 3 / 4;
 8003616:	8a7a      	ldrh	r2, [r7, #18]
 8003618:	4613      	mov	r3, r2
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	4413      	add	r3, r2
 800361e:	2b00      	cmp	r3, #0
 8003620:	da00      	bge.n	8003624 <LED_Start+0x104>
 8003622:	3303      	adds	r3, #3
 8003624:	109b      	asrs	r3, r3, #2
 8003626:	82fb      	strh	r3, [r7, #22]
			break;
 8003628:	e007      	b.n	800363a <LED_Start+0x11a>
		case HALF:
			pulse = period / 2;
 800362a:	8a7b      	ldrh	r3, [r7, #18]
 800362c:	085b      	lsrs	r3, r3, #1
 800362e:	82fb      	strh	r3, [r7, #22]
			break;
 8003630:	e003      	b.n	800363a <LED_Start+0x11a>
		case LOW:
			pulse = period / 4;
 8003632:	8a7b      	ldrh	r3, [r7, #18]
 8003634:	089b      	lsrs	r3, r3, #2
 8003636:	82fb      	strh	r3, [r7, #22]
			break;
 8003638:	bf00      	nop
        default:
            return;
	}

    // Imposta periodo e prescaler
    htim->Instance->PSC = prescaler;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	8aba      	ldrh	r2, [r7, #20]
 8003640:	629a      	str	r2, [r3, #40]	@ 0x28
    htim->Instance->ARR = period;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	8a7a      	ldrh	r2, [r7, #18]
 8003648:	62da      	str	r2, [r3, #44]	@ 0x2c
    htim->Instance->CCR1 = (LED == GRN_LED) ? pulse : htim->Instance->CCR1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b08      	cmp	r3, #8
 800364e:	d101      	bne.n	8003654 <LED_Start+0x134>
 8003650:	8afb      	ldrh	r3, [r7, #22]
 8003652:	e002      	b.n	800365a <LED_Start+0x13a>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	6812      	ldr	r2, [r2, #0]
 800365e:	6353      	str	r3, [r2, #52]	@ 0x34
    htim->Instance->CCR2 = (LED == ORG_LED) ? pulse : htim->Instance->CCR2;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <LED_Start+0x14a>
 8003666:	8afb      	ldrh	r3, [r7, #22]
 8003668:	e002      	b.n	8003670 <LED_Start+0x150>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	6393      	str	r3, [r2, #56]	@ 0x38
    htim->Instance->CCR3 = (LED == RED_LED) ? pulse : htim->Instance->CCR3;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b04      	cmp	r3, #4
 800367a:	d101      	bne.n	8003680 <LED_Start+0x160>
 800367c:	8afb      	ldrh	r3, [r7, #22]
 800367e:	e002      	b.n	8003686 <LED_Start+0x166>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	6812      	ldr	r2, [r2, #0]
 800368a:	63d3      	str	r3, [r2, #60]	@ 0x3c

    // Avvia PWM solo se non già attivo
    switch(LED)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b08      	cmp	r3, #8
 8003690:	d009      	beq.n	80036a6 <LED_Start+0x186>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b08      	cmp	r3, #8
 8003696:	d824      	bhi.n	80036e2 <LED_Start+0x1c2>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00c      	beq.n	80036b8 <LED_Start+0x198>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d012      	beq.n	80036ca <LED_Start+0x1aa>
 80036a4:	e01d      	b.n	80036e2 <LED_Start+0x1c2>
    {
        case GRN_LED:
            htim->Instance->CCER |= TIM_CCER_CC1E;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6a1a      	ldr	r2, [r3, #32]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0201 	orr.w	r2, r2, #1
 80036b4:	621a      	str	r2, [r3, #32]
            break;
 80036b6:	e014      	b.n	80036e2 <LED_Start+0x1c2>
        case ORG_LED:
            htim->Instance->CCER |= TIM_CCER_CC2E;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6a1a      	ldr	r2, [r3, #32]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0210 	orr.w	r2, r2, #16
 80036c6:	621a      	str	r2, [r3, #32]
            break;
 80036c8:	e00b      	b.n	80036e2 <LED_Start+0x1c2>
        case RED_LED:
            htim->Instance->CCER |= TIM_CCER_CC3E;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6a1a      	ldr	r2, [r3, #32]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036d8:	621a      	str	r2, [r3, #32]
            break;
 80036da:	e002      	b.n	80036e2 <LED_Start+0x1c2>
            return;
 80036dc:	bf00      	nop
 80036de:	e000      	b.n	80036e2 <LED_Start+0x1c2>
            return;
 80036e0:	bf00      	nop
    }
}
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	9999999a 	.word	0x9999999a
 80036ec:	3fb99999 	.word	0x3fb99999
 80036f0:	2000046c 	.word	0x2000046c
 80036f4:	20000168 	.word	0x20000168
 80036f8:	d1b71759 	.word	0xd1b71759
 80036fc:	3fe00000 	.word	0x3fe00000
 8003700:	3ff00000 	.word	0x3ff00000

08003704 <LED_Stop>:

/*------SPEGNIMENTO LED------*/
void LED_Stop(uint32_t LED)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(LED_TIMER, LED);
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4803      	ldr	r0, [pc, #12]	@ (800371c <LED_Stop+0x18>)
 8003710:	f00f f996 	bl	8012a40 <HAL_TIM_PWM_Stop>
}
 8003714:	bf00      	nop
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	2000046c 	.word	0x2000046c

08003720 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8003720:	b590      	push	{r4, r7, lr}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	607a      	str	r2, [r7, #4]
 800372a:	461a      	mov	r2, r3
 800372c:	460b      	mov	r3, r1
 800372e:	72fb      	strb	r3, [r7, #11]
 8003730:	4613      	mov	r3, r2
 8003732:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	685c      	ldr	r4, [r3, #4]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	68d8      	ldr	r0, [r3, #12]
 800373c:	893b      	ldrh	r3, [r7, #8]
 800373e:	7af9      	ldrb	r1, [r7, #11]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	47a0      	blx	r4
 8003744:	6178      	str	r0, [r7, #20]

  return ret;
 8003746:	697b      	ldr	r3, [r7, #20]
}
 8003748:	4618      	mov	r0, r3
 800374a:	371c      	adds	r7, #28
 800374c:	46bd      	mov	sp, r7
 800374e:	bd90      	pop	{r4, r7, pc}

08003750 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8003750:	b590      	push	{r4, r7, lr}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	461a      	mov	r2, r3
 800375c:	460b      	mov	r3, r1
 800375e:	72fb      	strb	r3, [r7, #11]
 8003760:	4613      	mov	r3, r2
 8003762:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681c      	ldr	r4, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	68d8      	ldr	r0, [r3, #12]
 800376c:	893b      	ldrh	r3, [r7, #8]
 800376e:	7af9      	ldrb	r1, [r7, #11]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	47a0      	blx	r4
 8003774:	6178      	str	r0, [r7, #20]

  return ret;
 8003776:	697b      	ldr	r3, [r7, #20]
}
 8003778:	4618      	mov	r0, r3
 800377a:	371c      	adds	r7, #28
 800377c:	46bd      	mov	sp, r7
 800377e:	bd90      	pop	{r4, r7, pc}

08003780 <lsm6dsv16x_reset_set>:
  * @param  val      Reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_set(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t val)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800378c:	f107 020c 	add.w	r2, r7, #12
 8003790:	2301      	movs	r3, #1
 8003792:	2112      	movs	r1, #18
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff ffc3 	bl	8003720 <lsm6dsv16x_read_reg>
 800379a:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 800379c:	f107 0210 	add.w	r2, r7, #16
 80037a0:	2301      	movs	r3, #1
 80037a2:	2101      	movs	r1, #1
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff ffbb 	bl	8003720 <lsm6dsv16x_read_reg>
 80037aa:	4602      	mov	r2, r0
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	4413      	add	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <lsm6dsv16x_reset_set+0x3c>
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	e02d      	b.n	8003818 <lsm6dsv16x_reset_set+0x98>

  ctrl3.boot = ((uint8_t)val & 0x04U) >> 2;
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	089b      	lsrs	r3, r3, #2
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	7b3b      	ldrb	r3, [r7, #12]
 80037c8:	f362 13c7 	bfi	r3, r2, #7, #1
 80037cc:	733b      	strb	r3, [r7, #12]
  ctrl3.sw_reset = ((uint8_t)val & 0x02U) >> 1;
 80037ce:	78fb      	ldrb	r3, [r7, #3]
 80037d0:	085b      	lsrs	r3, r3, #1
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	7b3b      	ldrb	r3, [r7, #12]
 80037da:	f362 0300 	bfi	r3, r2, #0, #1
 80037de:	733b      	strb	r3, [r7, #12]
  func_cfg_access.sw_por = (uint8_t)val & 0x01U;
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	7c3b      	ldrb	r3, [r7, #16]
 80037ea:	f362 0382 	bfi	r3, r2, #2, #1
 80037ee:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80037f0:	f107 020c 	add.w	r2, r7, #12
 80037f4:	2301      	movs	r3, #1
 80037f6:	2112      	movs	r1, #18
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff ffa9 	bl	8003750 <lsm6dsv16x_write_reg>
 80037fe:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8003800:	f107 0210 	add.w	r2, r7, #16
 8003804:	2301      	movs	r3, #1
 8003806:	2101      	movs	r1, #1
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff ffa1 	bl	8003750 <lsm6dsv16x_write_reg>
 800380e:	4602      	mov	r2, r0
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	4413      	add	r3, r2
 8003814:	617b      	str	r3, [r7, #20]

  return ret;
 8003816:	697b      	ldr	r3, [r7, #20]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <lsm6dsv16x_reset_get>:
  * @param  val      Global reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_get(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t *val)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800382a:	f107 020c 	add.w	r2, r7, #12
 800382e:	2301      	movs	r3, #1
 8003830:	2112      	movs	r1, #18
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff ff74 	bl	8003720 <lsm6dsv16x_read_reg>
 8003838:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 800383a:	f107 0210 	add.w	r2, r7, #16
 800383e:	2301      	movs	r3, #1
 8003840:	2101      	movs	r1, #1
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff ff6c 	bl	8003720 <lsm6dsv16x_read_reg>
 8003848:	4602      	mov	r2, r0
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	4413      	add	r3, r2
 800384e:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <lsm6dsv16x_reset_get+0x3a>
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	e033      	b.n	80038c2 <lsm6dsv16x_reset_get+0xa2>

  switch ((ctrl3.sw_reset << 2) + (ctrl3.boot << 1) + func_cfg_access.sw_por)
 800385a:	7b3b      	ldrb	r3, [r7, #12]
 800385c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003860:	b2db      	uxtb	r3, r3
 8003862:	009a      	lsls	r2, r3, #2
 8003864:	7b3b      	ldrb	r3, [r7, #12]
 8003866:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800386a:	b2db      	uxtb	r3, r3
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	4413      	add	r3, r2
 8003870:	7c3a      	ldrb	r2, [r7, #16]
 8003872:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	4413      	add	r3, r2
 800387a:	2b04      	cmp	r3, #4
 800387c:	d81c      	bhi.n	80038b8 <lsm6dsv16x_reset_get+0x98>
 800387e:	a201      	add	r2, pc, #4	@ (adr r2, 8003884 <lsm6dsv16x_reset_get+0x64>)
 8003880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003884:	08003899 	.word	0x08003899
 8003888:	080038a1 	.word	0x080038a1
 800388c:	080038a9 	.word	0x080038a9
 8003890:	080038b9 	.word	0x080038b9
 8003894:	080038b1 	.word	0x080038b1
  {
    case LSM6DSV16X_READY:
      *val = LSM6DSV16X_READY;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2200      	movs	r2, #0
 800389c:	701a      	strb	r2, [r3, #0]
      break;
 800389e:	e00f      	b.n	80038c0 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_GLOBAL_RST:
      *val = LSM6DSV16X_GLOBAL_RST;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
      break;
 80038a6:	e00b      	b.n	80038c0 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CAL_PARAM:
      *val = LSM6DSV16X_RESTORE_CAL_PARAM;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	2202      	movs	r2, #2
 80038ac:	701a      	strb	r2, [r3, #0]
      break;
 80038ae:	e007      	b.n	80038c0 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CTRL_REGS:
      *val = LSM6DSV16X_RESTORE_CTRL_REGS;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2204      	movs	r2, #4
 80038b4:	701a      	strb	r2, [r3, #0]
      break;
 80038b6:	e003      	b.n	80038c0 <lsm6dsv16x_reset_get+0xa0>

    default:
      *val = LSM6DSV16X_GLOBAL_RST;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2201      	movs	r2, #1
 80038bc:	701a      	strb	r2, [r3, #0]
      break;
 80038be:	bf00      	nop
  }

  return ret;
 80038c0:	697b      	ldr	r3, [r7, #20]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop

080038cc <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 80038d6:	2301      	movs	r3, #1
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	210f      	movs	r1, #15
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7ff ff1f 	bl	8003720 <lsm6dsv16x_read_reg>
 80038e2:	60f8      	str	r0, [r7, #12]

  return ret;
 80038e4:	68fb      	ldr	r3, [r7, #12]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b086      	sub	sp, #24
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	460b      	mov	r3, r1
 80038f8:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80038fa:	f107 0210 	add.w	r2, r7, #16
 80038fe:	2301      	movs	r3, #1
 8003900:	2110      	movs	r1, #16
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7ff ff0c 	bl	8003720 <lsm6dsv16x_read_reg>
 8003908:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <lsm6dsv16x_xl_data_rate_set+0x26>
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	e039      	b.n	8003988 <lsm6dsv16x_xl_data_rate_set+0x9a>

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	b2da      	uxtb	r2, r3
 800391c:	7c3b      	ldrb	r3, [r7, #16]
 800391e:	f362 0303 	bfi	r3, r2, #0, #4
 8003922:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8003924:	f107 0210 	add.w	r2, r7, #16
 8003928:	2301      	movs	r3, #1
 800392a:	2110      	movs	r1, #16
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff ff0f 	bl	8003750 <lsm6dsv16x_write_reg>
 8003932:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <lsm6dsv16x_xl_data_rate_set+0x50>
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	e024      	b.n	8003988 <lsm6dsv16x_xl_data_rate_set+0x9a>

  sel = ((uint8_t)val >> 4) & 0xFU;
 800393e:	78fb      	ldrb	r3, [r7, #3]
 8003940:	091b      	lsrs	r3, r3, #4
 8003942:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8003944:	7cfb      	ldrb	r3, [r7, #19]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d01d      	beq.n	8003986 <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800394a:	f107 020c 	add.w	r2, r7, #12
 800394e:	2301      	movs	r3, #1
 8003950:	2162      	movs	r1, #98	@ 0x62
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff fee4 	bl	8003720 <lsm6dsv16x_read_reg>
 8003958:	4602      	mov	r2, r0
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	4413      	add	r3, r2
 800395e:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8003960:	7cfb      	ldrb	r3, [r7, #19]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	b2da      	uxtb	r2, r3
 8003968:	7b3b      	ldrb	r3, [r7, #12]
 800396a:	f362 0301 	bfi	r3, r2, #0, #2
 800396e:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003970:	f107 020c 	add.w	r2, r7, #12
 8003974:	2301      	movs	r3, #1
 8003976:	2162      	movs	r1, #98	@ 0x62
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff fee9 	bl	8003750 <lsm6dsv16x_write_reg>
 800397e:	4602      	mov	r2, r0
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	4413      	add	r3, r2
 8003984:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003986:	697b      	ldr	r3, [r7, #20]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <lsm6dsv16x_xl_mode_set>:
  * @param  val      XL_HIGH_PERFORMANCE_MD, XL_HIGH_ACCURACY_ODR_MD, XL_LOW_POWER_2_AVG_MD, XL_LOW_POWER_4_AVG_MD, XL_LOW_POWER_8_AVG_MD, XL_NORMAL_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_xl_mode_t val)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 800399c:	f107 0208 	add.w	r2, r7, #8
 80039a0:	2301      	movs	r3, #1
 80039a2:	2110      	movs	r1, #16
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7ff febb 	bl	8003720 <lsm6dsv16x_read_reg>
 80039aa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10f      	bne.n	80039d2 <lsm6dsv16x_xl_mode_set+0x42>
  {
    ctrl1.op_mode_xl = (uint8_t)val & 0x07U;
 80039b2:	78fb      	ldrb	r3, [r7, #3]
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	7a3b      	ldrb	r3, [r7, #8]
 80039bc:	f362 1306 	bfi	r3, r2, #4, #3
 80039c0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80039c2:	f107 0208 	add.w	r2, r7, #8
 80039c6:	2301      	movs	r3, #1
 80039c8:	2110      	movs	r1, #16
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff fec0 	bl	8003750 <lsm6dsv16x_write_reg>
 80039d0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80039d2:	68fb      	ldr	r3, [r7, #12]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 80039e8:	f107 0210 	add.w	r2, r7, #16
 80039ec:	2301      	movs	r3, #1
 80039ee:	2111      	movs	r1, #17
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff fe95 	bl	8003720 <lsm6dsv16x_read_reg>
 80039f6:	6178      	str	r0, [r7, #20]
  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	7c3b      	ldrb	r3, [r7, #16]
 8003a02:	f362 0303 	bfi	r3, r2, #0, #4
 8003a06:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003a08:	f107 0210 	add.w	r2, r7, #16
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	2111      	movs	r1, #17
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff fe9d 	bl	8003750 <lsm6dsv16x_write_reg>
 8003a16:	4602      	mov	r2, r0
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <lsm6dsv16x_gy_data_rate_set+0x4c>
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	e024      	b.n	8003a72 <lsm6dsv16x_gy_data_rate_set+0x96>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	091b      	lsrs	r3, r3, #4
 8003a2c:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8003a2e:	7cfb      	ldrb	r3, [r7, #19]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d01d      	beq.n	8003a70 <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003a34:	f107 020c 	add.w	r2, r7, #12
 8003a38:	2301      	movs	r3, #1
 8003a3a:	2162      	movs	r1, #98	@ 0x62
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff fe6f 	bl	8003720 <lsm6dsv16x_read_reg>
 8003a42:	4602      	mov	r2, r0
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	4413      	add	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8003a4a:	7cfb      	ldrb	r3, [r7, #19]
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	7b3b      	ldrb	r3, [r7, #12]
 8003a54:	f362 0301 	bfi	r3, r2, #0, #2
 8003a58:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003a5a:	f107 020c 	add.w	r2, r7, #12
 8003a5e:	2301      	movs	r3, #1
 8003a60:	2162      	movs	r1, #98	@ 0x62
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7ff fe74 	bl	8003750 <lsm6dsv16x_write_reg>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003a70:	697b      	ldr	r3, [r7, #20]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <lsm6dsv16x_gy_mode_set>:
  * @param  val      GY_HIGH_PERFORMANCE_MD, GY_HIGH_ACCURACY_ODR_MD, GY_SLEEP_MD, GY_LOW_POWER_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_gy_mode_t val)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b084      	sub	sp, #16
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	460b      	mov	r3, r1
 8003a84:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003a86:	f107 0208 	add.w	r2, r7, #8
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	2111      	movs	r1, #17
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7ff fe46 	bl	8003720 <lsm6dsv16x_read_reg>
 8003a94:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10f      	bne.n	8003abc <lsm6dsv16x_gy_mode_set+0x42>
  {
    ctrl2.op_mode_g = (uint8_t)val & 0x07U;
 8003a9c:	78fb      	ldrb	r3, [r7, #3]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	7a3b      	ldrb	r3, [r7, #8]
 8003aa6:	f362 1306 	bfi	r3, r2, #4, #3
 8003aaa:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003aac:	f107 0208 	add.w	r2, r7, #8
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	2111      	movs	r1, #17
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7ff fe4b 	bl	8003750 <lsm6dsv16x_write_reg>
 8003aba:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003abc:	68fb      	ldr	r3, [r7, #12]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b084      	sub	sp, #16
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003ad2:	f107 0208 	add.w	r2, r7, #8
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	2112      	movs	r1, #18
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff fe20 	bl	8003720 <lsm6dsv16x_read_reg>
 8003ae0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10f      	bne.n	8003b08 <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	7a3b      	ldrb	r3, [r7, #8]
 8003af2:	f362 1386 	bfi	r3, r2, #6, #1
 8003af6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003af8:	f107 0208 	add.w	r2, r7, #8
 8003afc:	2301      	movs	r3, #1
 8003afe:	2112      	movs	r1, #18
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff fe25 	bl	8003750 <lsm6dsv16x_write_reg>
 8003b06:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003b08:	68fb      	ldr	r3, [r7, #12]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <lsm6dsv16x_odr_trig_cfg_set>:
  * @param  val      number of data in the reference period.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_odr_trig_cfg_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_odr_trig_cfg_t odr_trig;
  int32_t ret;

  if (val >= 1U && val <= 3U) {
 8003b1e:	78fb      	ldrb	r3, [r7, #3]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d802      	bhi.n	8003b30 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
    return -1;
 8003b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2e:	e015      	b.n	8003b5c <lsm6dsv16x_odr_trig_cfg_set+0x4a>
  }

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 8003b30:	f107 0208 	add.w	r2, r7, #8
 8003b34:	2301      	movs	r3, #1
 8003b36:	2106      	movs	r1, #6
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7ff fdf1 	bl	8003720 <lsm6dsv16x_read_reg>
 8003b3e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d109      	bne.n	8003b5a <lsm6dsv16x_odr_trig_cfg_set+0x48>
  {
    odr_trig.odr_trig_nodr = val;
 8003b46:	78fb      	ldrb	r3, [r7, #3]
 8003b48:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 8003b4a:	f107 0208 	add.w	r2, r7, #8
 8003b4e:	2301      	movs	r3, #1
 8003b50:	2106      	movs	r1, #6
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff fdfc 	bl	8003750 <lsm6dsv16x_write_reg>
 8003b58:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8003b70:	f107 0208 	add.w	r2, r7, #8
 8003b74:	2301      	movs	r3, #1
 8003b76:	2115      	movs	r1, #21
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff fdd1 	bl	8003720 <lsm6dsv16x_read_reg>
 8003b7e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10f      	bne.n	8003ba6 <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 8003b86:	78fb      	ldrb	r3, [r7, #3]
 8003b88:	f003 030f 	and.w	r3, r3, #15
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	7a3b      	ldrb	r3, [r7, #8]
 8003b90:	f362 0303 	bfi	r3, r2, #0, #4
 8003b94:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8003b96:	f107 0208 	add.w	r2, r7, #8
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	2115      	movs	r1, #21
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff fdd6 	bl	8003750 <lsm6dsv16x_write_reg>
 8003ba4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8003bbc:	f107 0208 	add.w	r2, r7, #8
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	2117      	movs	r1, #23
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff fdab 	bl	8003720 <lsm6dsv16x_read_reg>
 8003bca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10f      	bne.n	8003bf2 <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	7a3b      	ldrb	r3, [r7, #8]
 8003bdc:	f362 0301 	bfi	r3, r2, #0, #2
 8003be0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8003be2:	f107 0208 	add.w	r2, r7, #8
 8003be6:	2301      	movs	r3, #1
 8003be8:	2117      	movs	r1, #23
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7ff fdb0 	bl	8003750 <lsm6dsv16x_write_reg>
 8003bf0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <lsm6dsv16x_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsv16x_pin_int1_route_set(stmdev_ctx_t *ctx,
                                      lsm6dsv16x_pin_int_route_t *val)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_int1_ctrl_t          int1_ctrl;
  lsm6dsv16x_md1_cfg_t            md1_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003c06:	f107 0210 	add.w	r2, r7, #16
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	210d      	movs	r1, #13
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff fd86 	bl	8003720 <lsm6dsv16x_read_reg>
 8003c14:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <lsm6dsv16x_pin_int1_route_set+0x24>
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	e0a0      	b.n	8003d62 <lsm6dsv16x_pin_int1_route_set+0x166>

  int1_ctrl.int1_drdy_xl       = val->drdy_xl;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	7c3b      	ldrb	r3, [r7, #16]
 8003c2c:	f362 0300 	bfi	r3, r2, #0, #1
 8003c30:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_drdy_g        = val->drdy_g;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	7c3b      	ldrb	r3, [r7, #16]
 8003c3e:	f362 0341 	bfi	r3, r2, #1, #1
 8003c42:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_th       = val->fifo_th;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	7c3b      	ldrb	r3, [r7, #16]
 8003c50:	f362 03c3 	bfi	r3, r2, #3, #1
 8003c54:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_ovr      = val->fifo_ovr;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	7c3b      	ldrb	r3, [r7, #16]
 8003c62:	f362 1304 	bfi	r3, r2, #4, #1
 8003c66:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_full     = val->fifo_full;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	7c3b      	ldrb	r3, [r7, #16]
 8003c74:	f362 1345 	bfi	r3, r2, #5, #1
 8003c78:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_cnt_bdr       = val->cnt_bdr;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	7c3b      	ldrb	r3, [r7, #16]
 8003c86:	f362 1386 	bfi	r3, r2, #6, #1
 8003c8a:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003c8c:	f107 0210 	add.w	r2, r7, #16
 8003c90:	2301      	movs	r3, #1
 8003c92:	210d      	movs	r1, #13
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff fd5b 	bl	8003750 <lsm6dsv16x_write_reg>
 8003c9a:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <lsm6dsv16x_pin_int1_route_set+0xaa>
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	e05d      	b.n	8003d62 <lsm6dsv16x_pin_int1_route_set+0x166>

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8003ca6:	f107 020c 	add.w	r2, r7, #12
 8003caa:	2301      	movs	r3, #1
 8003cac:	215e      	movs	r1, #94	@ 0x5e
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff fd36 	bl	8003720 <lsm6dsv16x_read_reg>
 8003cb4:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <lsm6dsv16x_pin_int1_route_set+0xc4>
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	e050      	b.n	8003d62 <lsm6dsv16x_pin_int1_route_set+0x166>

  md1_cfg.int1_shub            = val->shub;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	785b      	ldrb	r3, [r3, #1]
 8003cc4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	7b3b      	ldrb	r3, [r7, #12]
 8003ccc:	f362 0300 	bfi	r3, r2, #0, #1
 8003cd0:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_emb_func        = val->emb_func;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	785b      	ldrb	r3, [r3, #1]
 8003cd6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	7b3b      	ldrb	r3, [r7, #12]
 8003cde:	f362 0341 	bfi	r3, r2, #1, #1
 8003ce2:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_6d              = val->sixd;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	785b      	ldrb	r3, [r3, #1]
 8003ce8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	7b3b      	ldrb	r3, [r7, #12]
 8003cf0:	f362 0382 	bfi	r3, r2, #2, #1
 8003cf4:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_single_tap      = val->single_tap;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	785b      	ldrb	r3, [r3, #1]
 8003cfa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	7b3b      	ldrb	r3, [r7, #12]
 8003d02:	f362 1386 	bfi	r3, r2, #6, #1
 8003d06:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_double_tap      = val->double_tap;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	785b      	ldrb	r3, [r3, #1]
 8003d0c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	7b3b      	ldrb	r3, [r7, #12]
 8003d14:	f362 03c3 	bfi	r3, r2, #3, #1
 8003d18:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_wu              = val->wakeup;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	785b      	ldrb	r3, [r3, #1]
 8003d1e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	7b3b      	ldrb	r3, [r7, #12]
 8003d26:	f362 1345 	bfi	r3, r2, #5, #1
 8003d2a:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_ff              = val->freefall;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	785b      	ldrb	r3, [r3, #1]
 8003d30:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	7b3b      	ldrb	r3, [r7, #12]
 8003d38:	f362 1304 	bfi	r3, r2, #4, #1
 8003d3c:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_sleep_change    = val->sleep_change;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	789b      	ldrb	r3, [r3, #2]
 8003d42:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	7b3b      	ldrb	r3, [r7, #12]
 8003d4a:	f362 13c7 	bfi	r3, r2, #7, #1
 8003d4e:	733b      	strb	r3, [r7, #12]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8003d50:	f107 020c 	add.w	r2, r7, #12
 8003d54:	2301      	movs	r3, #1
 8003d56:	215e      	movs	r1, #94	@ 0x5e
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff fcf9 	bl	8003750 <lsm6dsv16x_write_reg>
 8003d5e:	6178      	str	r0, [r7, #20]

  return ret;
 8003d60:	697b      	ldr	r3, [r7, #20]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <lsm6dsv16x_den_polarity_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_den_polarity_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_den_polarity_t val)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	460b      	mov	r3, r1
 8003d74:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl4_t ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 8003d76:	f107 0208 	add.w	r2, r7, #8
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	2113      	movs	r1, #19
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff fcce 	bl	8003720 <lsm6dsv16x_read_reg>
 8003d84:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10f      	bne.n	8003dac <lsm6dsv16x_den_polarity_set+0x42>
  {
    ctrl4.int2_in_lh = (uint8_t)val & 0x1U;
 8003d8c:	78fb      	ldrb	r3, [r7, #3]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	7a3b      	ldrb	r3, [r7, #8]
 8003d96:	f362 0300 	bfi	r3, r2, #0, #1
 8003d9a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 8003d9c:	f107 0208 	add.w	r2, r7, #8
 8003da0:	2301      	movs	r3, #1
 8003da2:	2113      	movs	r1, #19
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff fcd3 	bl	8003750 <lsm6dsv16x_write_reg>
 8003daa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003dac:	68fb      	ldr	r3, [r7, #12]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <lsm6dsv16x_fifo_watermark_set>:
  * @param  val      FIFO watermark threshold (1 LSb = TAG (1 Byte) + 1 sensor (6 Bytes) written in FIFO).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_watermark_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl1_t fifo_ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8003dc2:	f107 0208 	add.w	r2, r7, #8
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	2107      	movs	r1, #7
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff fca8 	bl	8003720 <lsm6dsv16x_read_reg>
 8003dd0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d109      	bne.n	8003dec <lsm6dsv16x_fifo_watermark_set+0x36>
  {
    fifo_ctrl1.wtm = val;
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8003ddc:	f107 0208 	add.w	r2, r7, #8
 8003de0:	2301      	movs	r3, #1
 8003de2:	2107      	movs	r1, #7
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff fcb3 	bl	8003750 <lsm6dsv16x_write_reg>
 8003dea:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003dec:	68fb      	ldr	r3, [r7, #12]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <lsm6dsv16x_fifo_xl_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_xl_batch_t val)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8003e02:	f107 0208 	add.w	r2, r7, #8
 8003e06:	2301      	movs	r3, #1
 8003e08:	2109      	movs	r1, #9
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff fc88 	bl	8003720 <lsm6dsv16x_read_reg>
 8003e10:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10f      	bne.n	8003e38 <lsm6dsv16x_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val & 0xFu;
 8003e18:	78fb      	ldrb	r3, [r7, #3]
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	7a3b      	ldrb	r3, [r7, #8]
 8003e22:	f362 0303 	bfi	r3, r2, #0, #4
 8003e26:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8003e28:	f107 0208 	add.w	r2, r7, #8
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	2109      	movs	r1, #9
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff fc8d 	bl	8003750 <lsm6dsv16x_write_reg>
 8003e36:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003e38:	68fb      	ldr	r3, [r7, #12]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <lsm6dsv16x_fifo_gy_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_gy_batch_t val)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b084      	sub	sp, #16
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8003e4e:	f107 0208 	add.w	r2, r7, #8
 8003e52:	2301      	movs	r3, #1
 8003e54:	2109      	movs	r1, #9
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff fc62 	bl	8003720 <lsm6dsv16x_read_reg>
 8003e5c:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10f      	bne.n	8003e84 <lsm6dsv16x_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val & 0x0Fu;
 8003e64:	78fb      	ldrb	r3, [r7, #3]
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	7a3b      	ldrb	r3, [r7, #8]
 8003e6e:	f362 1307 	bfi	r3, r2, #4, #4
 8003e72:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8003e74:	f107 0208 	add.w	r2, r7, #8
 8003e78:	2301      	movs	r3, #1
 8003e7a:	2109      	movs	r1, #9
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff fc67 	bl	8003750 <lsm6dsv16x_write_reg>
 8003e82:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003e84:	68fb      	ldr	r3, [r7, #12]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b084      	sub	sp, #16
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	460b      	mov	r3, r1
 8003e98:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8003e9a:	f107 0208 	add.w	r2, r7, #8
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	210a      	movs	r1, #10
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7ff fc3c 	bl	8003720 <lsm6dsv16x_read_reg>
 8003ea8:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10f      	bne.n	8003ed0 <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 8003eb0:	78fb      	ldrb	r3, [r7, #3]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	7a3b      	ldrb	r3, [r7, #8]
 8003eba:	f362 0302 	bfi	r3, r2, #0, #3
 8003ebe:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8003ec0:	f107 0208 	add.w	r2, r7, #8
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	210a      	movs	r1, #10
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7ff fc41 	bl	8003750 <lsm6dsv16x_write_reg>
 8003ece:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <lsm6dsv16x_ui_i2c_i3c_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ui_i2c_i3c_mode_set(stmdev_ctx_t *ctx,
                                       lsm6dsv16x_ui_i2c_i3c_mode_t val)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b084      	sub	sp, #16
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_if_cfg_t if_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 8003ee6:	f107 0208 	add.w	r2, r7, #8
 8003eea:	2301      	movs	r3, #1
 8003eec:	2103      	movs	r1, #3
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff fc16 	bl	8003720 <lsm6dsv16x_read_reg>
 8003ef4:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10f      	bne.n	8003f1c <lsm6dsv16x_ui_i2c_i3c_mode_set+0x42>
  {
    if_cfg.i2c_i3c_disable = (uint8_t)val & 0x1U;
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	7a3b      	ldrb	r3, [r7, #8]
 8003f06:	f362 0300 	bfi	r3, r2, #0, #1
 8003f0a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 8003f0c:	f107 0208 	add.w	r2, r7, #8
 8003f10:	2301      	movs	r3, #1
 8003f12:	2103      	movs	r1, #3
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7ff fc1b 	bl	8003750 <lsm6dsv16x_write_reg>
 8003f1a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <acc_write>:
#include "global_variables.h"
#include "peripherals.h"

/* -------------SCRITTURA ACCELEROMETRO-------------*/
int32_t acc_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b084      	sub	sp, #16
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	461a      	mov	r2, r3
 8003f32:	460b      	mov	r3, r1
 8003f34:	72fb      	strb	r3, [r7, #11]
 8003f36:	4613      	mov	r3, r2
 8003f38:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f44:	f00a f81c 	bl	800df80 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8003f48:	f107 010b 	add.w	r1, r7, #11
 8003f4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f50:	2201      	movs	r2, #1
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f00d fa9d 	bl	8011492 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 8003f58:	893a      	ldrh	r2, [r7, #8]
 8003f5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f00d fa96 	bl	8011492 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 8003f66:	2201      	movs	r2, #1
 8003f68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f70:	f00a f806 	bl	800df80 <HAL_GPIO_WritePin>
	return 0;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <acc_read>:

/* -------------LETTURA ACCELEROMETRO-------------*/
int32_t acc_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b084      	sub	sp, #16
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	72fb      	strb	r3, [r7, #11]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	813b      	strh	r3, [r7, #8]
	reg |= 0x80;
 8003f92:	7afb      	ldrb	r3, [r7, #11]
 8003f94:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fa2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fa6:	f009 ffeb 	bl	800df80 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8003faa:	f107 010b 	add.w	r1, r7, #11
 8003fae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f00d fa6c 	bl	8011492 <HAL_SPI_Transmit>
	HAL_SPI_Receive(handle, bufp, len, 1000);
 8003fba:	893a      	ldrh	r2, [r7, #8]
 8003fbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f00d fbdb 	bl	801177e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fd2:	f009 ffd5 	bl	800df80 <HAL_GPIO_WritePin>
	return 0;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003fe4:	f3bf 8f4f 	dsb	sy
}
 8003fe8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003fea:	4b06      	ldr	r3, [pc, #24]	@ (8004004 <__NVIC_SystemReset+0x24>)
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003ff2:	4904      	ldr	r1, [pc, #16]	@ (8004004 <__NVIC_SystemReset+0x24>)
 8003ff4:	4b04      	ldr	r3, [pc, #16]	@ (8004008 <__NVIC_SystemReset+0x28>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ffa:	f3bf 8f4f 	dsb	sy
}
 8003ffe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004000:	bf00      	nop
 8004002:	e7fd      	b.n	8004000 <__NVIC_SystemReset+0x20>
 8004004:	e000ed00 	.word	0xe000ed00
 8004008:	05fa0004 	.word	0x05fa0004

0800400c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800400c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800400e:	b093      	sub	sp, #76	@ 0x4c
 8004010:	af0c      	add	r7, sp, #48	@ 0x30
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004012:	f006 fd9e 	bl	800ab52 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004016:	f000 fa9b 	bl	8004550 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800401a:	f000 ff6f 	bl	8004efc <MX_GPIO_Init>
	MX_DMA_Init();
 800401e:	f000 ff3f 	bl	8004ea0 <MX_DMA_Init>
	MX_QUADSPI_Init();
 8004022:	f000 fbc1 	bl	80047a8 <MX_QUADSPI_Init>
	MX_SPI2_Init();
 8004026:	f000 fc77 	bl	8004918 <MX_SPI2_Init>
	MX_USART1_UART_Init();
 800402a:	f000 ff09 	bl	8004e40 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 800402e:	f000 fae1 	bl	80045f4 <MX_ADC1_Init>
	MX_I2C3_Init();
 8004032:	f000 fb79 	bl	8004728 <MX_I2C3_Init>
	MX_TIM2_Init();
 8004036:	f000 fd93 	bl	8004b60 <MX_TIM2_Init>
	MX_UART4_Init();
 800403a:	f000 fed1 	bl	8004de0 <MX_UART4_Init>
	MX_TIM1_Init();
 800403e:	f000 fce7 	bl	8004a10 <MX_TIM1_Init>
	MX_CRC_Init();
 8004042:	f000 fb4f 	bl	80046e4 <MX_CRC_Init>
	MX_TIM4_Init();
 8004046:	f000 fe57 	bl	8004cf8 <MX_TIM4_Init>
	MX_RTC_Init();
 800404a:	f000 fbd3 	bl	80047f4 <MX_RTC_Init>
	MX_SPI3_Init();
 800404e:	f000 fca1 	bl	8004994 <MX_SPI3_Init>
	MX_TIM3_Init();
 8004052:	f000 fdd9 	bl	8004c08 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	System_Init();
 8004056:	f7fe ffe7 	bl	8003028 <System_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		switch(state)
 800405a:	4b9a      	ldr	r3, [pc, #616]	@ (80042c4 <main+0x2b8>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b03      	cmp	r3, #3
 8004060:	f200 824a 	bhi.w	80044f8 <main+0x4ec>
 8004064:	a201      	add	r2, pc, #4	@ (adr r2, 800406c <main+0x60>)
 8004066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406a:	bf00      	nop
 800406c:	0800407d 	.word	0x0800407d
 8004070:	08004167 	.word	0x08004167
 8004074:	08004173 	.word	0x08004173
 8004078:	08004427 	.word	0x08004427
		{
		case IDLE:
			if(flags.MQTT_Message_Rx)
 800407c:	4b92      	ldr	r3, [pc, #584]	@ (80042c8 <main+0x2bc>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d054      	beq.n	8004134 <main+0x128>
			{
				SIM_Parse_Command();
 800408a:	f7fd fd85 	bl	8001b98 <SIM_Parse_Command>
				flags.MQTT_Message_Rx = 0;
 800408e:	4a8e      	ldr	r2, [pc, #568]	@ (80042c8 <main+0x2bc>)
 8004090:	7813      	ldrb	r3, [r2, #0]
 8004092:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004096:	7013      	strb	r3, [r2, #0]
				if(flags.CMD.Start_Meas)
 8004098:	4b8b      	ldr	r3, [pc, #556]	@ (80042c8 <main+0x2bc>)
 800409a:	789b      	ldrb	r3, [r3, #2]
 800409c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d008      	beq.n	80040b8 <main+0xac>
				{
					state = MEASURE_INIT_STATE;
 80040a6:	4b87      	ldr	r3, [pc, #540]	@ (80042c4 <main+0x2b8>)
 80040a8:	2201      	movs	r2, #1
 80040aa:	701a      	strb	r2, [r3, #0]
					flags.CMD.Start_Meas = 0;
 80040ac:	4a86      	ldr	r2, [pc, #536]	@ (80042c8 <main+0x2bc>)
 80040ae:	7893      	ldrb	r3, [r2, #2]
 80040b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040b4:	7093      	strb	r3, [r2, #2]
			else if(HAL_GetTick() - sys.SIM_Connection_Status > config.connection_timeout)                  // Controllo connessione MQTT e TCP ogni 60 secondi
			{
				SIM_Check_Connection();
				sys.SIM_Connection_Status = HAL_GetTick();
			}
			break;
 80040b6:	e221      	b.n	80044fc <main+0x4f0>
				else if(flags.CMD.Set_Config)
 80040b8:	4b83      	ldr	r3, [pc, #524]	@ (80042c8 <main+0x2bc>)
 80040ba:	789b      	ldrb	r3, [r3, #2]
 80040bc:	f003 0310 	and.w	r3, r3, #16
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d007      	beq.n	80040d6 <main+0xca>
					Apply_Config();
 80040c6:	f002 fa09 	bl	80064dc <Apply_Config>
					flags.CMD.Set_Config = 0;
 80040ca:	4a7f      	ldr	r2, [pc, #508]	@ (80042c8 <main+0x2bc>)
 80040cc:	7893      	ldrb	r3, [r2, #2]
 80040ce:	f023 0310 	bic.w	r3, r3, #16
 80040d2:	7093      	strb	r3, [r2, #2]
			break;
 80040d4:	e212      	b.n	80044fc <main+0x4f0>
				else if(flags.CMD.Get_Config)
 80040d6:	4b7c      	ldr	r3, [pc, #496]	@ (80042c8 <main+0x2bc>)
 80040d8:	789b      	ldrb	r3, [r3, #2]
 80040da:	f003 0320 	and.w	r3, r3, #32
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d007      	beq.n	80040f4 <main+0xe8>
					Get_Config();
 80040e4:	f002 fb96 	bl	8006814 <Get_Config>
					flags.CMD.Get_Config = 0;
 80040e8:	4a77      	ldr	r2, [pc, #476]	@ (80042c8 <main+0x2bc>)
 80040ea:	7893      	ldrb	r3, [r2, #2]
 80040ec:	f023 0320 	bic.w	r3, r3, #32
 80040f0:	7093      	strb	r3, [r2, #2]
			break;
 80040f2:	e203      	b.n	80044fc <main+0x4f0>
				else if(flags.CMD.Start_OTA)
 80040f4:	4b74      	ldr	r3, [pc, #464]	@ (80042c8 <main+0x2bc>)
 80040f6:	789b      	ldrb	r3, [r3, #2]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d008      	beq.n	8004114 <main+0x108>
					state = OTA_STATE;
 8004102:	4b70      	ldr	r3, [pc, #448]	@ (80042c4 <main+0x2b8>)
 8004104:	2203      	movs	r2, #3
 8004106:	701a      	strb	r2, [r3, #0]
					flags.CMD.Start_OTA = 0;
 8004108:	4a6f      	ldr	r2, [pc, #444]	@ (80042c8 <main+0x2bc>)
 800410a:	7893      	ldrb	r3, [r2, #2]
 800410c:	f023 0304 	bic.w	r3, r3, #4
 8004110:	7093      	strb	r3, [r2, #2]
			break;
 8004112:	e1f3      	b.n	80044fc <main+0x4f0>
				else if(flags.CMD.Ping)
 8004114:	4b6c      	ldr	r3, [pc, #432]	@ (80042c8 <main+0x2bc>)
 8004116:	789b      	ldrb	r3, [r3, #2]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 81ec 	beq.w	80044fc <main+0x4f0>
					SIM_Send_Infos();
 8004124:	f7fd fffe 	bl	8002124 <SIM_Send_Infos>
					flags.CMD.Ping = 0;
 8004128:	4a67      	ldr	r2, [pc, #412]	@ (80042c8 <main+0x2bc>)
 800412a:	7893      	ldrb	r3, [r2, #2]
 800412c:	f023 0308 	bic.w	r3, r3, #8
 8004130:	7093      	strb	r3, [r2, #2]
			break;
 8004132:	e1e3      	b.n	80044fc <main+0x4f0>
			else if(HAL_GetTick() - sys.SIM_Connection_Status > config.connection_timeout)                  // Controllo connessione MQTT e TCP ogni 60 secondi
 8004134:	f006 fd76 	bl	800ac24 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	4b64      	ldr	r3, [pc, #400]	@ (80042cc <main+0x2c0>)
 800413c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004140:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004144:	1ad2      	subs	r2, r2, r3
 8004146:	4b62      	ldr	r3, [pc, #392]	@ (80042d0 <main+0x2c4>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	429a      	cmp	r2, r3
 800414c:	f240 81d6 	bls.w	80044fc <main+0x4f0>
				SIM_Check_Connection();
 8004150:	f7fe f8f2 	bl	8002338 <SIM_Check_Connection>
				sys.SIM_Connection_Status = HAL_GetTick();
 8004154:	f006 fd66 	bl	800ac24 <HAL_GetTick>
 8004158:	4603      	mov	r3, r0
 800415a:	4a5c      	ldr	r2, [pc, #368]	@ (80042cc <main+0x2c0>)
 800415c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004160:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
			break;
 8004164:	e1ca      	b.n	80044fc <main+0x4f0>

		case MEASURE_INIT_STATE:
			Start_Measure();
 8004166:	f001 fcc9 	bl	8005afc <Start_Measure>
			state = MEASURING_STATE;
 800416a:	4b56      	ldr	r3, [pc, #344]	@ (80042c4 <main+0x2b8>)
 800416c:	2202      	movs	r2, #2
 800416e:	701a      	strb	r2, [r3, #0]
			break;
 8004170:	e1c7      	b.n	8004502 <main+0x4f6>

		case MEASURING_STATE:
			if(flags.ADC_Complete && flags.ACC_Complete)
 8004172:	4b55      	ldr	r3, [pc, #340]	@ (80042c8 <main+0x2bc>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 81bf 	beq.w	8004500 <main+0x4f4>
 8004182:	4b51      	ldr	r3, [pc, #324]	@ (80042c8 <main+0x2bc>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 81b7 	beq.w	8004500 <main+0x4f4>
			{
				Save_Data();
 8004192:	f001 fa09 	bl	80055a8 <Save_Data>
				if(flags.BC_Interrupt)
 8004196:	4b4c      	ldr	r3, [pc, #304]	@ (80042c8 <main+0x2bc>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d010      	beq.n	80041c6 <main+0x1ba>
				{
					BC_Read_Flags(&sys.BC_Flags);
 80041a4:	484b      	ldr	r0, [pc, #300]	@ (80042d4 <main+0x2c8>)
 80041a6:	f7fe fa05 	bl	80025b4 <BC_Read_Flags>
					BC_Manage_Interrupts(sys.BC_Flags);
 80041aa:	4b48      	ldr	r3, [pc, #288]	@ (80042cc <main+0x2c0>)
 80041ac:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 80041b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80041b4:	4610      	mov	r0, r2
 80041b6:	4619      	mov	r1, r3
 80041b8:	f7fe faaa 	bl	8002710 <BC_Manage_Interrupts>
					flags.BC_Interrupt = 0;
 80041bc:	4a42      	ldr	r2, [pc, #264]	@ (80042c8 <main+0x2bc>)
 80041be:	7813      	ldrb	r3, [r2, #0]
 80041c0:	f023 0320 	bic.w	r3, r3, #32
 80041c4:	7013      	strb	r3, [r2, #0]
				}
				if(flags.MQTT_Message_Rx)
 80041c6:	4b40      	ldr	r3, [pc, #256]	@ (80042c8 <main+0x2bc>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00b      	beq.n	80041ec <main+0x1e0>
				{
					SIM_Parse_Command();
 80041d4:	f7fd fce0 	bl	8001b98 <SIM_Parse_Command>
					flags.SIM_isConnected = 1;
 80041d8:	4a3b      	ldr	r2, [pc, #236]	@ (80042c8 <main+0x2bc>)
 80041da:	7853      	ldrb	r3, [r2, #1]
 80041dc:	f043 0308 	orr.w	r3, r3, #8
 80041e0:	7053      	strb	r3, [r2, #1]
					flags.MQTT_Message_Rx = 0;
 80041e2:	4a39      	ldr	r2, [pc, #228]	@ (80042c8 <main+0x2bc>)
 80041e4:	7813      	ldrb	r3, [r2, #0]
 80041e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041ea:	7013      	strb	r3, [r2, #0]
				}
				if(flags.CMD.Data_Request)
 80041ec:	4b36      	ldr	r3, [pc, #216]	@ (80042c8 <main+0x2bc>)
 80041ee:	789b      	ldrb	r3, [r3, #2]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d051      	beq.n	800429e <main+0x292>
				{
					sprintf(MQTT_Logging, "%u:%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", config.device_id, Last_Pressure, Last_Volume, Last_Acceleration.x, Last_Acceleration.y, Last_Acceleration.z, Vbatt, Supply.i1, Supply.i2, Supply.i3, Supply.v1, Supply.v2, Supply.v3, Temperature);
 80041fa:	4b35      	ldr	r3, [pc, #212]	@ (80042d0 <main+0x2c4>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	469c      	mov	ip, r3
 8004200:	4b35      	ldr	r3, [pc, #212]	@ (80042d8 <main+0x2cc>)
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	469e      	mov	lr, r3
 8004206:	4b35      	ldr	r3, [pc, #212]	@ (80042dc <main+0x2d0>)
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	4b34      	ldr	r3, [pc, #208]	@ (80042e0 <main+0x2d4>)
 800420e:	885b      	ldrh	r3, [r3, #2]
 8004210:	4619      	mov	r1, r3
 8004212:	4b33      	ldr	r3, [pc, #204]	@ (80042e0 <main+0x2d4>)
 8004214:	889b      	ldrh	r3, [r3, #4]
 8004216:	4618      	mov	r0, r3
 8004218:	4b31      	ldr	r3, [pc, #196]	@ (80042e0 <main+0x2d4>)
 800421a:	88db      	ldrh	r3, [r3, #6]
 800421c:	461c      	mov	r4, r3
 800421e:	4b31      	ldr	r3, [pc, #196]	@ (80042e4 <main+0x2d8>)
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	461d      	mov	r5, r3
 8004224:	4b30      	ldr	r3, [pc, #192]	@ (80042e8 <main+0x2dc>)
 8004226:	88db      	ldrh	r3, [r3, #6]
 8004228:	461e      	mov	r6, r3
 800422a:	4b2f      	ldr	r3, [pc, #188]	@ (80042e8 <main+0x2dc>)
 800422c:	891b      	ldrh	r3, [r3, #8]
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	4b2d      	ldr	r3, [pc, #180]	@ (80042e8 <main+0x2dc>)
 8004232:	895b      	ldrh	r3, [r3, #10]
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	4b2c      	ldr	r3, [pc, #176]	@ (80042e8 <main+0x2dc>)
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	4b2a      	ldr	r3, [pc, #168]	@ (80042e8 <main+0x2dc>)
 800423e:	885b      	ldrh	r3, [r3, #2]
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	4b29      	ldr	r3, [pc, #164]	@ (80042e8 <main+0x2dc>)
 8004244:	889b      	ldrh	r3, [r3, #4]
 8004246:	607b      	str	r3, [r7, #4]
 8004248:	4b28      	ldr	r3, [pc, #160]	@ (80042ec <main+0x2e0>)
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	930a      	str	r3, [sp, #40]	@ 0x28
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	9309      	str	r3, [sp, #36]	@ 0x24
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	9308      	str	r3, [sp, #32]
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	9307      	str	r3, [sp, #28]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	9306      	str	r3, [sp, #24]
 8004262:	9605      	str	r6, [sp, #20]
 8004264:	9504      	str	r5, [sp, #16]
 8004266:	9403      	str	r4, [sp, #12]
 8004268:	9002      	str	r0, [sp, #8]
 800426a:	9101      	str	r1, [sp, #4]
 800426c:	9200      	str	r2, [sp, #0]
 800426e:	4673      	mov	r3, lr
 8004270:	4662      	mov	r2, ip
 8004272:	491f      	ldr	r1, [pc, #124]	@ (80042f0 <main+0x2e4>)
 8004274:	481f      	ldr	r0, [pc, #124]	@ (80042f4 <main+0x2e8>)
 8004276:	f011 fcf5 	bl	8015c64 <siprintf>
					SIM_publish_MQTT_Message_DMA(NULL, MQTT_Logging);
 800427a:	491e      	ldr	r1, [pc, #120]	@ (80042f4 <main+0x2e8>)
 800427c:	2000      	movs	r0, #0
 800427e:	f7fd fe73 	bl	8001f68 <SIM_publish_MQTT_Message_DMA>
					sys.SIM_Prompt_Status = HAL_GetTick();
 8004282:	f006 fccf 	bl	800ac24 <HAL_GetTick>
 8004286:	4603      	mov	r3, r0
 8004288:	4a10      	ldr	r2, [pc, #64]	@ (80042cc <main+0x2c0>)
 800428a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800428e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
					flags.CMD.Data_Request = 0;
 8004292:	4a0d      	ldr	r2, [pc, #52]	@ (80042c8 <main+0x2bc>)
 8004294:	7893      	ldrb	r3, [r2, #2]
 8004296:	f023 0301 	bic.w	r3, r3, #1
 800429a:	7093      	strb	r3, [r2, #2]
 800429c:	e06f      	b.n	800437e <main+0x372>
				}
				else if(flags.CMD.Idle)
 800429e:	4b0a      	ldr	r3, [pc, #40]	@ (80042c8 <main+0x2bc>)
 80042a0:	789b      	ldrb	r3, [r3, #2]
 80042a2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d025      	beq.n	80042f8 <main+0x2ec>
				{
					state = IDLE;
 80042ac:	4b05      	ldr	r3, [pc, #20]	@ (80042c4 <main+0x2b8>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	701a      	strb	r2, [r3, #0]
					Stop_Measure();
 80042b2:	f001 fce1 	bl	8005c78 <Stop_Measure>
					flags.CMD.Idle = 0;
 80042b6:	4a04      	ldr	r2, [pc, #16]	@ (80042c8 <main+0x2bc>)
 80042b8:	7893      	ldrb	r3, [r2, #2]
 80042ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042be:	7093      	strb	r3, [r2, #2]
 80042c0:	e05d      	b.n	800437e <main+0x372>
 80042c2:	bf00      	nop
 80042c4:	2000073c 	.word	0x2000073c
 80042c8:	20001c68 	.word	0x20001c68
 80042cc:	20000740 	.word	0x20000740
 80042d0:	20001c6c 	.word	0x20001c6c
 80042d4:	20001778 	.word	0x20001778
 80042d8:	20004714 	.word	0x20004714
 80042dc:	20004716 	.word	0x20004716
 80042e0:	20004718 	.word	0x20004718
 80042e4:	20004722 	.word	0x20004722
 80042e8:	20003e44 	.word	0x20003e44
 80042ec:	20004720 	.word	0x20004720
 80042f0:	08017228 	.word	0x08017228
 80042f4:	20004724 	.word	0x20004724
				}
				else if(flags.CMD.Measure_Request)
 80042f8:	4b82      	ldr	r3, [pc, #520]	@ (8004504 <main+0x4f8>)
 80042fa:	789b      	ldrb	r3, [r3, #2]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d03b      	beq.n	800437e <main+0x372>
				{
					if(!flags.TCP_isSending)
 8004306:	4b7f      	ldr	r3, [pc, #508]	@ (8004504 <main+0x4f8>)
 8004308:	785b      	ldrb	r3, [r3, #1]
 800430a:	f003 0304 	and.w	r3, r3, #4
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	d134      	bne.n	800437e <main+0x372>
					{
						Send_Measure_Addr = Send_Measure_Chunk(sys.RAM_Buffer_Base_tosend, sys.Inactive_RAM_Len, Send_Measure_Addr);
 8004314:	4b7c      	ldr	r3, [pc, #496]	@ (8004508 <main+0x4fc>)
 8004316:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800431a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800431e:	4a7a      	ldr	r2, [pc, #488]	@ (8004508 <main+0x4fc>)
 8004320:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004324:	f8d2 10d0 	ldr.w	r1, [r2, #208]	@ 0xd0
 8004328:	4a78      	ldr	r2, [pc, #480]	@ (800450c <main+0x500>)
 800432a:	6812      	ldr	r2, [r2, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f001 fd85 	bl	8005e3c <Send_Measure_Chunk>
 8004332:	4603      	mov	r3, r0
 8004334:	4a75      	ldr	r2, [pc, #468]	@ (800450c <main+0x500>)
 8004336:	6013      	str	r3, [r2, #0]
						if(flags.TCP_ReadytoSend)
 8004338:	4b72      	ldr	r3, [pc, #456]	@ (8004504 <main+0x4f8>)
 800433a:	785b      	ldrb	r3, [r3, #1]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d01b      	beq.n	800437e <main+0x372>
						{
							SIM_Send_Command_DMA(MQTT_Logging);
 8004346:	4872      	ldr	r0, [pc, #456]	@ (8004510 <main+0x504>)
 8004348:	f7fd fb88 	bl	8001a5c <SIM_Send_Command_DMA>
							flags.TCP_isSending = 1;
 800434c:	4a6d      	ldr	r2, [pc, #436]	@ (8004504 <main+0x4f8>)
 800434e:	7853      	ldrb	r3, [r2, #1]
 8004350:	f043 0304 	orr.w	r3, r3, #4
 8004354:	7053      	strb	r3, [r2, #1]
							flags.TCP_ReadytoSend = 0;
 8004356:	4a6b      	ldr	r2, [pc, #428]	@ (8004504 <main+0x4f8>)
 8004358:	7853      	ldrb	r3, [r2, #1]
 800435a:	f023 0302 	bic.w	r3, r3, #2
 800435e:	7053      	strb	r3, [r2, #1]
							if (Send_Measure_Addr == 0)
 8004360:	4b6a      	ldr	r3, [pc, #424]	@ (800450c <main+0x500>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10a      	bne.n	800437e <main+0x372>
							{
								memset(tcp_chunk, 0, 1460);
 8004368:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800436c:	2100      	movs	r1, #0
 800436e:	4869      	ldr	r0, [pc, #420]	@ (8004514 <main+0x508>)
 8004370:	f011 fcd8 	bl	8015d24 <memset>
								flags.CMD.Measure_Request = 0;
 8004374:	4a63      	ldr	r2, [pc, #396]	@ (8004504 <main+0x4f8>)
 8004376:	7893      	ldrb	r3, [r2, #2]
 8004378:	f023 0302 	bic.w	r3, r3, #2
 800437c:	7093      	strb	r3, [r2, #2]
							}
						}
					}
				}
				if(flags.MQTT_ReadytoSend)
 800437e:	4b61      	ldr	r3, [pc, #388]	@ (8004504 <main+0x4f8>)
 8004380:	785b      	ldrb	r3, [r3, #1]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d007      	beq.n	800439c <main+0x390>
				{
					SIM_Send_Command_DMA(MQTT_Logging);
 800438c:	4860      	ldr	r0, [pc, #384]	@ (8004510 <main+0x504>)
 800438e:	f7fd fb65 	bl	8001a5c <SIM_Send_Command_DMA>
					flags.MQTT_ReadytoSend = 0;
 8004392:	4a5c      	ldr	r2, [pc, #368]	@ (8004504 <main+0x4f8>)
 8004394:	7853      	ldrb	r3, [r2, #1]
 8004396:	f023 0301 	bic.w	r3, r3, #1
 800439a:	7053      	strb	r3, [r2, #1]
				}
				if(sys.SIM_Prompt_Status > 0 && (HAL_GetTick() - sys.SIM_Prompt_Status) > SIM_PROMPT_TIMEOUT_MS)
 800439c:	4b5a      	ldr	r3, [pc, #360]	@ (8004508 <main+0x4fc>)
 800439e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d016      	beq.n	80043d8 <main+0x3cc>
 80043aa:	f006 fc3b 	bl	800ac24 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	4b55      	ldr	r3, [pc, #340]	@ (8004508 <main+0x4fc>)
 80043b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d909      	bls.n	80043d8 <main+0x3cc>
				{
					SIM_Send_Command_DMA("AT+SMCONN\r");
 80043c4:	4854      	ldr	r0, [pc, #336]	@ (8004518 <main+0x50c>)
 80043c6:	f7fd fb49 	bl	8001a5c <SIM_Send_Command_DMA>
					sys.SIM_Prompt_Status = 0;
 80043ca:	4b4f      	ldr	r3, [pc, #316]	@ (8004508 <main+0x4fc>)
 80043cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043d0:	461a      	mov	r2, r3
 80043d2:	2300      	movs	r3, #0
 80043d4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
				}
				if(HAL_GetTick() - sys.SIM_Connection_Status > config.connection_timeout)
 80043d8:	f006 fc24 	bl	800ac24 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	4b4a      	ldr	r3, [pc, #296]	@ (8004508 <main+0x4fc>)
 80043e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80043e8:	1ad2      	subs	r2, r2, r3
 80043ea:	4b4c      	ldr	r3, [pc, #304]	@ (800451c <main+0x510>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	f240 8086 	bls.w	8004500 <main+0x4f4>
				{
					sys.SIM_Connection_Status = HAL_GetTick();
 80043f4:	f006 fc16 	bl	800ac24 <HAL_GetTick>
 80043f8:	4603      	mov	r3, r0
 80043fa:	4a43      	ldr	r2, [pc, #268]	@ (8004508 <main+0x4fc>)
 80043fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004400:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
					if(flags.SIM_isConnected)
 8004404:	4b3f      	ldr	r3, [pc, #252]	@ (8004504 <main+0x4f8>)
 8004406:	785b      	ldrb	r3, [r3, #1]
 8004408:	f003 0308 	and.w	r3, r3, #8
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d005      	beq.n	800441e <main+0x412>
					{
						flags.SIM_isConnected = 0;
 8004412:	4a3c      	ldr	r2, [pc, #240]	@ (8004504 <main+0x4f8>)
 8004414:	7853      	ldrb	r3, [r2, #1]
 8004416:	f023 0308 	bic.w	r3, r3, #8
 800441a:	7053      	strb	r3, [r2, #1]
					{
						state = IDLE;
					}
				}
			}
			break;
 800441c:	e070      	b.n	8004500 <main+0x4f4>
						state = IDLE;
 800441e:	4b40      	ldr	r3, [pc, #256]	@ (8004520 <main+0x514>)
 8004420:	2200      	movs	r2, #0
 8004422:	701a      	strb	r2, [r3, #0]
			break;
 8004424:	e06c      	b.n	8004500 <main+0x4f4>

		case OTA_STATE:
			if(OTA_Init() == HAL_OK)
 8004426:	f000 fe65 	bl	80050f4 <OTA_Init>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d155      	bne.n	80044dc <main+0x4d0>
			{
				HAL_UART_DMAStop(SIM_UART);
 8004430:	483c      	ldr	r0, [pc, #240]	@ (8004524 <main+0x518>)
 8004432:	f010 fa9d 	bl	8014970 <HAL_UART_DMAStop>
				HAL_Delay(100);
 8004436:	2064      	movs	r0, #100	@ 0x64
 8004438:	f006 fc00 	bl	800ac3c <HAL_Delay>
				SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_READY");
 800443c:	493a      	ldr	r1, [pc, #232]	@ (8004528 <main+0x51c>)
 800443e:	483b      	ldr	r0, [pc, #236]	@ (800452c <main+0x520>)
 8004440:	f7fd fddc 	bl	8001ffc <SIM_publish_MQTT_Message>
				if(OTA_Receive() == HAL_OK)
 8004444:	f000 fe82 	bl	800514c <OTA_Receive>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d138      	bne.n	80044c0 <main+0x4b4>
				{
					SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_RECEIVED");
 800444e:	4938      	ldr	r1, [pc, #224]	@ (8004530 <main+0x524>)
 8004450:	4836      	ldr	r0, [pc, #216]	@ (800452c <main+0x520>)
 8004452:	f7fd fdd3 	bl	8001ffc <SIM_publish_MQTT_Message>
					if(OTA_CRC_Check() == HAL_OK)
 8004456:	f000 fefd 	bl	8005254 <OTA_CRC_Check>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d109      	bne.n	8004474 <main+0x468>
					{
						SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_CRC_OK");
 8004460:	4934      	ldr	r1, [pc, #208]	@ (8004534 <main+0x528>)
 8004462:	4832      	ldr	r0, [pc, #200]	@ (800452c <main+0x520>)
 8004464:	f7fd fdca 	bl	8001ffc <SIM_publish_MQTT_Message>
						HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
						state = IDLE;
						break;
					}

					if(OTA_Apply() == HAL_OK)
 8004468:	f000 ff9c 	bl	80053a4 <OTA_Apply>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d118      	bne.n	80044a4 <main+0x498>
 8004472:	e00d      	b.n	8004490 <main+0x484>
						SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_CRC_ERROR");
 8004474:	4930      	ldr	r1, [pc, #192]	@ (8004538 <main+0x52c>)
 8004476:	482d      	ldr	r0, [pc, #180]	@ (800452c <main+0x520>)
 8004478:	f7fd fdc0 	bl	8001ffc <SIM_publish_MQTT_Message>
						HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 800447c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004480:	492e      	ldr	r1, [pc, #184]	@ (800453c <main+0x530>)
 8004482:	4828      	ldr	r0, [pc, #160]	@ (8004524 <main+0x518>)
 8004484:	f011 fb10 	bl	8015aa8 <HAL_UARTEx_ReceiveToIdle_DMA>
						state = IDLE;
 8004488:	4b25      	ldr	r3, [pc, #148]	@ (8004520 <main+0x514>)
 800448a:	2200      	movs	r2, #0
 800448c:	701a      	strb	r2, [r3, #0]
						break;
 800448e:	e038      	b.n	8004502 <main+0x4f6>
					{
						SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_SUCCESS");
 8004490:	492b      	ldr	r1, [pc, #172]	@ (8004540 <main+0x534>)
 8004492:	4826      	ldr	r0, [pc, #152]	@ (800452c <main+0x520>)
 8004494:	f7fd fdb2 	bl	8001ffc <SIM_publish_MQTT_Message>
						HAL_Delay(500);
 8004498:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800449c:	f006 fbce 	bl	800ac3c <HAL_Delay>
						NVIC_SystemReset();
 80044a0:	f7ff fd9e 	bl	8003fe0 <__NVIC_SystemReset>
					}
					else
					{
						SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_APPLY_ERROR");
 80044a4:	4927      	ldr	r1, [pc, #156]	@ (8004544 <main+0x538>)
 80044a6:	4821      	ldr	r0, [pc, #132]	@ (800452c <main+0x520>)
 80044a8:	f7fd fda8 	bl	8001ffc <SIM_publish_MQTT_Message>
						HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 80044ac:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80044b0:	4922      	ldr	r1, [pc, #136]	@ (800453c <main+0x530>)
 80044b2:	481c      	ldr	r0, [pc, #112]	@ (8004524 <main+0x518>)
 80044b4:	f011 faf8 	bl	8015aa8 <HAL_UARTEx_ReceiveToIdle_DMA>
						state = IDLE;
 80044b8:	4b19      	ldr	r3, [pc, #100]	@ (8004520 <main+0x514>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	701a      	strb	r2, [r3, #0]
			{
				SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_INIT_ERROR");
				HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
				state = IDLE;
			}
			break;
 80044be:	e020      	b.n	8004502 <main+0x4f6>
					SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_RECEIVE_ERROR");
 80044c0:	4921      	ldr	r1, [pc, #132]	@ (8004548 <main+0x53c>)
 80044c2:	481a      	ldr	r0, [pc, #104]	@ (800452c <main+0x520>)
 80044c4:	f7fd fd9a 	bl	8001ffc <SIM_publish_MQTT_Message>
					HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 80044c8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80044cc:	491b      	ldr	r1, [pc, #108]	@ (800453c <main+0x530>)
 80044ce:	4815      	ldr	r0, [pc, #84]	@ (8004524 <main+0x518>)
 80044d0:	f011 faea 	bl	8015aa8 <HAL_UARTEx_ReceiveToIdle_DMA>
					state = IDLE;
 80044d4:	4b12      	ldr	r3, [pc, #72]	@ (8004520 <main+0x514>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	701a      	strb	r2, [r3, #0]
			break;
 80044da:	e012      	b.n	8004502 <main+0x4f6>
				SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_INIT_ERROR");
 80044dc:	491b      	ldr	r1, [pc, #108]	@ (800454c <main+0x540>)
 80044de:	4813      	ldr	r0, [pc, #76]	@ (800452c <main+0x520>)
 80044e0:	f7fd fd8c 	bl	8001ffc <SIM_publish_MQTT_Message>
				HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 80044e4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80044e8:	4914      	ldr	r1, [pc, #80]	@ (800453c <main+0x530>)
 80044ea:	480e      	ldr	r0, [pc, #56]	@ (8004524 <main+0x518>)
 80044ec:	f011 fadc 	bl	8015aa8 <HAL_UARTEx_ReceiveToIdle_DMA>
				state = IDLE;
 80044f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004520 <main+0x514>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	701a      	strb	r2, [r3, #0]
			break;
 80044f6:	e004      	b.n	8004502 <main+0x4f6>

		default:
			break;
 80044f8:	bf00      	nop
 80044fa:	e5ae      	b.n	800405a <main+0x4e>
			break;
 80044fc:	bf00      	nop
 80044fe:	e5ac      	b.n	800405a <main+0x4e>
			break;
 8004500:	bf00      	nop
		switch(state)
 8004502:	e5aa      	b.n	800405a <main+0x4e>
 8004504:	20001c68 	.word	0x20001c68
 8004508:	20000740 	.word	0x20000740
 800450c:	20004ec8 	.word	0x20004ec8
 8004510:	20004724 	.word	0x20004724
 8004514:	20004ecc 	.word	0x20004ecc
 8004518:	08017254 	.word	0x08017254
 800451c:	20001c6c 	.word	0x20001c6c
 8004520:	2000073c 	.word	0x2000073c
 8004524:	20000624 	.word	0x20000624
 8004528:	08017260 	.word	0x08017260
 800452c:	20001b3c 	.word	0x20001b3c
 8004530:	0801726c 	.word	0x0801726c
 8004534:	0801727c 	.word	0x0801727c
 8004538:	08017288 	.word	0x08017288
 800453c:	200054f4 	.word	0x200054f4
 8004540:	08017298 	.word	0x08017298
 8004544:	080172a4 	.word	0x080172a4
 8004548:	080172b4 	.word	0x080172b4
 800454c:	080172c8 	.word	0x080172c8

08004550 <SystemClock_Config>:
	/**
	 * @brief System Clock Configuration
	 * @retval None
	 */
	void SystemClock_Config(void)
	{
 8004550:	b580      	push	{r7, lr}
 8004552:	b096      	sub	sp, #88	@ 0x58
 8004554:	af00      	add	r7, sp, #0
		RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004556:	f107 0314 	add.w	r3, r7, #20
 800455a:	2244      	movs	r2, #68	@ 0x44
 800455c:	2100      	movs	r1, #0
 800455e:	4618      	mov	r0, r3
 8004560:	f011 fbe0 	bl	8015d24 <memset>
		RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004564:	463b      	mov	r3, r7
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	605a      	str	r2, [r3, #4]
 800456c:	609a      	str	r2, [r3, #8]
 800456e:	60da      	str	r2, [r3, #12]
 8004570:	611a      	str	r2, [r3, #16]

		/** Configure the main internal regulator output voltage
		 */
		if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004572:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004576:	f00a fb11 	bl	800eb9c <HAL_PWREx_ControlVoltageScaling>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <SystemClock_Config+0x34>
		{
			Error_Handler();
 8004580:	f000 fdb2 	bl	80050e8 <Error_Handler>
		}

		/** Initializes the RCC Oscillators according to the specified parameters
		 * in the RCC_OscInitTypeDef structure.
		 */
		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004584:	2309      	movs	r3, #9
 8004586:	617b      	str	r3, [r7, #20]
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004588:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800458c:	61bb      	str	r3, [r7, #24]
		RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800458e:	2301      	movs	r3, #1
 8004590:	62bb      	str	r3, [r7, #40]	@ 0x28
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004592:	2302      	movs	r3, #2
 8004594:	63fb      	str	r3, [r7, #60]	@ 0x3c
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004596:	2303      	movs	r3, #3
 8004598:	643b      	str	r3, [r7, #64]	@ 0x40
		RCC_OscInitStruct.PLL.PLLM = 1;
 800459a:	2301      	movs	r3, #1
 800459c:	647b      	str	r3, [r7, #68]	@ 0x44
		RCC_OscInitStruct.PLL.PLLN = 20;
 800459e:	2314      	movs	r3, #20
 80045a0:	64bb      	str	r3, [r7, #72]	@ 0x48
		RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80045a2:	2307      	movs	r3, #7
 80045a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
		RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80045a6:	2302      	movs	r3, #2
 80045a8:	653b      	str	r3, [r7, #80]	@ 0x50
		RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80045aa:	2302      	movs	r3, #2
 80045ac:	657b      	str	r3, [r7, #84]	@ 0x54
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045ae:	f107 0314 	add.w	r3, r7, #20
 80045b2:	4618      	mov	r0, r3
 80045b4:	f00a ffaa 	bl	800f50c <HAL_RCC_OscConfig>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <SystemClock_Config+0x72>
		{
			Error_Handler();
 80045be:	f000 fd93 	bl	80050e8 <Error_Handler>
		}

		/** Initializes the CPU, AHB and APB buses clocks
		 */
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045c2:	230f      	movs	r3, #15
 80045c4:	603b      	str	r3, [r7, #0]
				|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045c6:	2303      	movs	r3, #3
 80045c8:	607b      	str	r3, [r7, #4]
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045ca:	2300      	movs	r3, #0
 80045cc:	60bb      	str	r3, [r7, #8]
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80045ce:	2300      	movs	r3, #0
 80045d0:	60fb      	str	r3, [r7, #12]
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045d2:	2300      	movs	r3, #0
 80045d4:	613b      	str	r3, [r7, #16]

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80045d6:	463b      	mov	r3, r7
 80045d8:	2104      	movs	r1, #4
 80045da:	4618      	mov	r0, r3
 80045dc:	f00b fb72 	bl	800fcc4 <HAL_RCC_ClockConfig>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <SystemClock_Config+0x9a>
		{
			Error_Handler();
 80045e6:	f000 fd7f 	bl	80050e8 <Error_Handler>
		}
	}
 80045ea:	bf00      	nop
 80045ec:	3758      	adds	r7, #88	@ 0x58
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <MX_ADC1_Init>:
	 * @brief ADC1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_ADC1_Init(void)
	{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08a      	sub	sp, #40	@ 0x28
 80045f8:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN ADC1_Init 0 */

		/* USER CODE END ADC1_Init 0 */

		ADC_MultiModeTypeDef multimode = {0};
 80045fa:	f107 031c 	add.w	r3, r7, #28
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	605a      	str	r2, [r3, #4]
 8004604:	609a      	str	r2, [r3, #8]
		ADC_ChannelConfTypeDef sConfig = {0};
 8004606:	1d3b      	adds	r3, r7, #4
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]
 800460c:	605a      	str	r2, [r3, #4]
 800460e:	609a      	str	r2, [r3, #8]
 8004610:	60da      	str	r2, [r3, #12]
 8004612:	611a      	str	r2, [r3, #16]
 8004614:	615a      	str	r2, [r3, #20]

		/* USER CODE END ADC1_Init 1 */

		/** Common config
		 */
		hadc1.Instance = ADC1;
 8004616:	4b30      	ldr	r3, [pc, #192]	@ (80046d8 <MX_ADC1_Init+0xe4>)
 8004618:	4a30      	ldr	r2, [pc, #192]	@ (80046dc <MX_ADC1_Init+0xe8>)
 800461a:	601a      	str	r2, [r3, #0]
		hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800461c:	4b2e      	ldr	r3, [pc, #184]	@ (80046d8 <MX_ADC1_Init+0xe4>)
 800461e:	2200      	movs	r2, #0
 8004620:	605a      	str	r2, [r3, #4]
		hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004622:	4b2d      	ldr	r3, [pc, #180]	@ (80046d8 <MX_ADC1_Init+0xe4>)
 8004624:	2200      	movs	r2, #0
 8004626:	609a      	str	r2, [r3, #8]
		hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004628:	4b2b      	ldr	r3, [pc, #172]	@ (80046d8 <MX_ADC1_Init+0xe4>)
 800462a:	2200      	movs	r2, #0
 800462c:	60da      	str	r2, [r3, #12]
		hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800462e:	4b2a      	ldr	r3, [pc, #168]	@ (80046d8 <MX_ADC1_Init+0xe4>)
 8004630:	2200      	movs	r2, #0
 8004632:	611a      	str	r2, [r3, #16]
		hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004634:	4b28      	ldr	r3, [pc, #160]	@ (80046d8 <MX_ADC1_Init+0xe4>)
 8004636:	2208      	movs	r2, #8
 8004638:	615a      	str	r2, [r3, #20]
		hadc1.Init.LowPowerAutoWait = DISABLE;
 800463a:	4b27      	ldr	r3, [pc, #156]	@ (80046d8 <MX_ADC1_Init+0xe4>)
 800463c:	2200      	movs	r2, #0
 800463e:	761a      	strb	r2, [r3, #24]
		hadc1.Init.ContinuousConvMode = DISABLE;
 8004640:	4b25      	ldr	r3, [pc, #148]	@ (80046d8 <MX_ADC1_Init+0xe4>)
 8004642:	2200      	movs	r2, #0
 8004644:	765a      	strb	r2, [r3, #25]
		hadc1.Init.NbrOfConversion = 1;
 8004646:	4b24      	ldr	r3, [pc, #144]	@ (80046d8 <MX_ADC1_Init+0xe4>)
 8004648:	2201      	movs	r2, #1
 800464a:	61da      	str	r2, [r3, #28]
		hadc1.Init.DiscontinuousConvMode = DISABLE;
 800464c:	4b22      	ldr	r3, [pc, #136]	@ (80046d8 <MX_ADC1_Init+0xe4>)
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2020 	strb.w	r2, [r3, #32]
		hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8004654:	4b20      	ldr	r3, [pc, #128]	@ (80046d8 <MX_ADC1_Init+0xe4>)
 8004656:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800465a:	629a      	str	r2, [r3, #40]	@ 0x28
		hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800465c:	4b1e      	ldr	r3, [pc, #120]	@ (80046d8 <MX_ADC1_Init+0xe4>)
 800465e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004662:	62da      	str	r2, [r3, #44]	@ 0x2c
		hadc1.Init.DMAContinuousRequests = ENABLE;
 8004664:	4b1c      	ldr	r3, [pc, #112]	@ (80046d8 <MX_ADC1_Init+0xe4>)
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800466c:	4b1a      	ldr	r3, [pc, #104]	@ (80046d8 <MX_ADC1_Init+0xe4>)
 800466e:	2200      	movs	r2, #0
 8004670:	635a      	str	r2, [r3, #52]	@ 0x34
		hadc1.Init.OversamplingMode = DISABLE;
 8004672:	4b19      	ldr	r3, [pc, #100]	@ (80046d8 <MX_ADC1_Init+0xe4>)
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800467a:	4817      	ldr	r0, [pc, #92]	@ (80046d8 <MX_ADC1_Init+0xe4>)
 800467c:	f006 fd26 	bl	800b0cc <HAL_ADC_Init>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <MX_ADC1_Init+0x96>
		{
			Error_Handler();
 8004686:	f000 fd2f 	bl	80050e8 <Error_Handler>
		}

		/** Configure the ADC multi-mode
		 */
		multimode.Mode = ADC_MODE_INDEPENDENT;
 800468a:	2300      	movs	r3, #0
 800468c:	61fb      	str	r3, [r7, #28]
		if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800468e:	f107 031c 	add.w	r3, r7, #28
 8004692:	4619      	mov	r1, r3
 8004694:	4810      	ldr	r0, [pc, #64]	@ (80046d8 <MX_ADC1_Init+0xe4>)
 8004696:	f007 fddf 	bl	800c258 <HAL_ADCEx_MultiModeConfigChannel>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <MX_ADC1_Init+0xb0>
		{
			Error_Handler();
 80046a0:	f000 fd22 	bl	80050e8 <Error_Handler>
		}

		/** Configure Regular Channel
		 */
		sConfig.Channel = ADC_CHANNEL_9;
 80046a4:	4b0e      	ldr	r3, [pc, #56]	@ (80046e0 <MX_ADC1_Init+0xec>)
 80046a6:	607b      	str	r3, [r7, #4]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 80046a8:	2306      	movs	r3, #6
 80046aa:	60bb      	str	r3, [r7, #8]
		sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80046ac:	2300      	movs	r3, #0
 80046ae:	60fb      	str	r3, [r7, #12]
		sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80046b0:	237f      	movs	r3, #127	@ 0x7f
 80046b2:	613b      	str	r3, [r7, #16]
		sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80046b4:	2304      	movs	r3, #4
 80046b6:	617b      	str	r3, [r7, #20]
		sConfig.Offset = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	61bb      	str	r3, [r7, #24]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80046bc:	1d3b      	adds	r3, r7, #4
 80046be:	4619      	mov	r1, r3
 80046c0:	4805      	ldr	r0, [pc, #20]	@ (80046d8 <MX_ADC1_Init+0xe4>)
 80046c2:	f006 ff7b 	bl	800b5bc <HAL_ADC_ConfigChannel>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <MX_ADC1_Init+0xdc>
		{
			Error_Handler();
 80046cc:	f000 fd0c 	bl	80050e8 <Error_Handler>
		}
		/* USER CODE BEGIN ADC1_Init 2 */

		/* USER CODE END ADC1_Init 2 */

	}
 80046d0:	bf00      	nop
 80046d2:	3728      	adds	r7, #40	@ 0x28
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	20000218 	.word	0x20000218
 80046dc:	50040000 	.word	0x50040000
 80046e0:	25b00200 	.word	0x25b00200

080046e4 <MX_CRC_Init>:
	 * @brief CRC Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_CRC_Init(void)
	{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
		/* USER CODE END CRC_Init 0 */

		/* USER CODE BEGIN CRC_Init 1 */

		/* USER CODE END CRC_Init 1 */
		hcrc.Instance = CRC;
 80046e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004720 <MX_CRC_Init+0x3c>)
 80046ea:	4a0e      	ldr	r2, [pc, #56]	@ (8004724 <MX_CRC_Init+0x40>)
 80046ec:	601a      	str	r2, [r3, #0]
		hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80046ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004720 <MX_CRC_Init+0x3c>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	711a      	strb	r2, [r3, #4]
		hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80046f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004720 <MX_CRC_Init+0x3c>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	715a      	strb	r2, [r3, #5]
		hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80046fa:	4b09      	ldr	r3, [pc, #36]	@ (8004720 <MX_CRC_Init+0x3c>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	615a      	str	r2, [r3, #20]
		hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004700:	4b07      	ldr	r3, [pc, #28]	@ (8004720 <MX_CRC_Init+0x3c>)
 8004702:	2200      	movs	r2, #0
 8004704:	619a      	str	r2, [r3, #24]
		hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004706:	4b06      	ldr	r3, [pc, #24]	@ (8004720 <MX_CRC_Init+0x3c>)
 8004708:	2201      	movs	r2, #1
 800470a:	621a      	str	r2, [r3, #32]
		if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800470c:	4804      	ldr	r0, [pc, #16]	@ (8004720 <MX_CRC_Init+0x3c>)
 800470e:	f007 ff7f 	bl	800c610 <HAL_CRC_Init>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <MX_CRC_Init+0x38>
		{
			Error_Handler();
 8004718:	f000 fce6 	bl	80050e8 <Error_Handler>
		}
		/* USER CODE BEGIN CRC_Init 2 */

		/* USER CODE END CRC_Init 2 */

	}
 800471c:	bf00      	nop
 800471e:	bd80      	pop	{r7, pc}
 8004720:	200002c4 	.word	0x200002c4
 8004724:	40023000 	.word	0x40023000

08004728 <MX_I2C3_Init>:
	 * @brief I2C3 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_I2C3_Init(void)
	{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
		/* USER CODE END I2C3_Init 0 */

		/* USER CODE BEGIN I2C3_Init 1 */

		/* USER CODE END I2C3_Init 1 */
		hi2c3.Instance = I2C3;
 800472c:	4b1b      	ldr	r3, [pc, #108]	@ (800479c <MX_I2C3_Init+0x74>)
 800472e:	4a1c      	ldr	r2, [pc, #112]	@ (80047a0 <MX_I2C3_Init+0x78>)
 8004730:	601a      	str	r2, [r3, #0]
		hi2c3.Init.Timing = 0x10909CEC;
 8004732:	4b1a      	ldr	r3, [pc, #104]	@ (800479c <MX_I2C3_Init+0x74>)
 8004734:	4a1b      	ldr	r2, [pc, #108]	@ (80047a4 <MX_I2C3_Init+0x7c>)
 8004736:	605a      	str	r2, [r3, #4]
		hi2c3.Init.OwnAddress1 = 0;
 8004738:	4b18      	ldr	r3, [pc, #96]	@ (800479c <MX_I2C3_Init+0x74>)
 800473a:	2200      	movs	r2, #0
 800473c:	609a      	str	r2, [r3, #8]
		hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800473e:	4b17      	ldr	r3, [pc, #92]	@ (800479c <MX_I2C3_Init+0x74>)
 8004740:	2201      	movs	r2, #1
 8004742:	60da      	str	r2, [r3, #12]
		hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004744:	4b15      	ldr	r3, [pc, #84]	@ (800479c <MX_I2C3_Init+0x74>)
 8004746:	2200      	movs	r2, #0
 8004748:	611a      	str	r2, [r3, #16]
		hi2c3.Init.OwnAddress2 = 0;
 800474a:	4b14      	ldr	r3, [pc, #80]	@ (800479c <MX_I2C3_Init+0x74>)
 800474c:	2200      	movs	r2, #0
 800474e:	615a      	str	r2, [r3, #20]
		hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004750:	4b12      	ldr	r3, [pc, #72]	@ (800479c <MX_I2C3_Init+0x74>)
 8004752:	2200      	movs	r2, #0
 8004754:	619a      	str	r2, [r3, #24]
		hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004756:	4b11      	ldr	r3, [pc, #68]	@ (800479c <MX_I2C3_Init+0x74>)
 8004758:	2200      	movs	r2, #0
 800475a:	61da      	str	r2, [r3, #28]
		hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800475c:	4b0f      	ldr	r3, [pc, #60]	@ (800479c <MX_I2C3_Init+0x74>)
 800475e:	2200      	movs	r2, #0
 8004760:	621a      	str	r2, [r3, #32]
		if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004762:	480e      	ldr	r0, [pc, #56]	@ (800479c <MX_I2C3_Init+0x74>)
 8004764:	f009 fc24 	bl	800dfb0 <HAL_I2C_Init>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <MX_I2C3_Init+0x4a>
		{
			Error_Handler();
 800476e:	f000 fcbb 	bl	80050e8 <Error_Handler>
		}

		/** Configure Analogue filter
		 */
		if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004772:	2100      	movs	r1, #0
 8004774:	4809      	ldr	r0, [pc, #36]	@ (800479c <MX_I2C3_Init+0x74>)
 8004776:	f00a f96b 	bl	800ea50 <HAL_I2CEx_ConfigAnalogFilter>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <MX_I2C3_Init+0x5c>
		{
			Error_Handler();
 8004780:	f000 fcb2 	bl	80050e8 <Error_Handler>
		}

		/** Configure Digital filter
		 */
		if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8004784:	2100      	movs	r1, #0
 8004786:	4805      	ldr	r0, [pc, #20]	@ (800479c <MX_I2C3_Init+0x74>)
 8004788:	f00a f9ad 	bl	800eae6 <HAL_I2CEx_ConfigDigitalFilter>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <MX_I2C3_Init+0x6e>
		{
			Error_Handler();
 8004792:	f000 fca9 	bl	80050e8 <Error_Handler>
		}
		/* USER CODE BEGIN I2C3_Init 2 */

		/* USER CODE END I2C3_Init 2 */

	}
 8004796:	bf00      	nop
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	200002e8 	.word	0x200002e8
 80047a0:	40005c00 	.word	0x40005c00
 80047a4:	10909cec 	.word	0x10909cec

080047a8 <MX_QUADSPI_Init>:
	 * @brief QUADSPI Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_QUADSPI_Init(void)
	{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN QUADSPI_Init 1 */

		/* USER CODE END QUADSPI_Init 1 */
		/* QUADSPI parameter configuration*/
		hqspi.Instance = QUADSPI;
 80047ac:	4b0f      	ldr	r3, [pc, #60]	@ (80047ec <MX_QUADSPI_Init+0x44>)
 80047ae:	4a10      	ldr	r2, [pc, #64]	@ (80047f0 <MX_QUADSPI_Init+0x48>)
 80047b0:	601a      	str	r2, [r3, #0]
		hqspi.Init.ClockPrescaler = 1;
 80047b2:	4b0e      	ldr	r3, [pc, #56]	@ (80047ec <MX_QUADSPI_Init+0x44>)
 80047b4:	2201      	movs	r2, #1
 80047b6:	605a      	str	r2, [r3, #4]
		hqspi.Init.FifoThreshold = 1;
 80047b8:	4b0c      	ldr	r3, [pc, #48]	@ (80047ec <MX_QUADSPI_Init+0x44>)
 80047ba:	2201      	movs	r2, #1
 80047bc:	609a      	str	r2, [r3, #8]
		hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80047be:	4b0b      	ldr	r3, [pc, #44]	@ (80047ec <MX_QUADSPI_Init+0x44>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	60da      	str	r2, [r3, #12]
		hqspi.Init.FlashSize = 1;
 80047c4:	4b09      	ldr	r3, [pc, #36]	@ (80047ec <MX_QUADSPI_Init+0x44>)
 80047c6:	2201      	movs	r2, #1
 80047c8:	611a      	str	r2, [r3, #16]
		hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80047ca:	4b08      	ldr	r3, [pc, #32]	@ (80047ec <MX_QUADSPI_Init+0x44>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	615a      	str	r2, [r3, #20]
		hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80047d0:	4b06      	ldr	r3, [pc, #24]	@ (80047ec <MX_QUADSPI_Init+0x44>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	619a      	str	r2, [r3, #24]
		if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80047d6:	4805      	ldr	r0, [pc, #20]	@ (80047ec <MX_QUADSPI_Init+0x44>)
 80047d8:	f00a fa36 	bl	800ec48 <HAL_QSPI_Init>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <MX_QUADSPI_Init+0x3e>
		{
			Error_Handler();
 80047e2:	f000 fc81 	bl	80050e8 <Error_Handler>
		}
		/* USER CODE BEGIN QUADSPI_Init 2 */

		/* USER CODE END QUADSPI_Init 2 */

	}
 80047e6:	bf00      	nop
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	2000033c 	.word	0x2000033c
 80047f0:	a0001000 	.word	0xa0001000

080047f4 <MX_RTC_Init>:
	 * @brief RTC Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_RTC_Init(void)
	{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b092      	sub	sp, #72	@ 0x48
 80047f8:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN RTC_Init 0 */

		/* USER CODE END RTC_Init 0 */

		RTC_TimeTypeDef sTime = {0};
 80047fa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	605a      	str	r2, [r3, #4]
 8004804:	609a      	str	r2, [r3, #8]
 8004806:	60da      	str	r2, [r3, #12]
 8004808:	611a      	str	r2, [r3, #16]
		RTC_DateTypeDef sDate = {0};
 800480a:	2300      	movs	r3, #0
 800480c:	633b      	str	r3, [r7, #48]	@ 0x30
		RTC_AlarmTypeDef sAlarm = {0};
 800480e:	1d3b      	adds	r3, r7, #4
 8004810:	222c      	movs	r2, #44	@ 0x2c
 8004812:	2100      	movs	r1, #0
 8004814:	4618      	mov	r0, r3
 8004816:	f011 fa85 	bl	8015d24 <memset>

		/* USER CODE END RTC_Init 1 */

		/** Initialize RTC Only
		 */
		hrtc.Instance = RTC;
 800481a:	4b3c      	ldr	r3, [pc, #240]	@ (800490c <MX_RTC_Init+0x118>)
 800481c:	4a3c      	ldr	r2, [pc, #240]	@ (8004910 <MX_RTC_Init+0x11c>)
 800481e:	601a      	str	r2, [r3, #0]
		hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004820:	4b3a      	ldr	r3, [pc, #232]	@ (800490c <MX_RTC_Init+0x118>)
 8004822:	2200      	movs	r2, #0
 8004824:	605a      	str	r2, [r3, #4]
		hrtc.Init.AsynchPrediv = 127;
 8004826:	4b39      	ldr	r3, [pc, #228]	@ (800490c <MX_RTC_Init+0x118>)
 8004828:	227f      	movs	r2, #127	@ 0x7f
 800482a:	609a      	str	r2, [r3, #8]
		hrtc.Init.SynchPrediv = 255;
 800482c:	4b37      	ldr	r3, [pc, #220]	@ (800490c <MX_RTC_Init+0x118>)
 800482e:	22ff      	movs	r2, #255	@ 0xff
 8004830:	60da      	str	r2, [r3, #12]
		hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004832:	4b36      	ldr	r3, [pc, #216]	@ (800490c <MX_RTC_Init+0x118>)
 8004834:	2200      	movs	r2, #0
 8004836:	611a      	str	r2, [r3, #16]
		hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004838:	4b34      	ldr	r3, [pc, #208]	@ (800490c <MX_RTC_Init+0x118>)
 800483a:	2200      	movs	r2, #0
 800483c:	615a      	str	r2, [r3, #20]
		hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800483e:	4b33      	ldr	r3, [pc, #204]	@ (800490c <MX_RTC_Init+0x118>)
 8004840:	2200      	movs	r2, #0
 8004842:	619a      	str	r2, [r3, #24]
		hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004844:	4b31      	ldr	r3, [pc, #196]	@ (800490c <MX_RTC_Init+0x118>)
 8004846:	2200      	movs	r2, #0
 8004848:	61da      	str	r2, [r3, #28]
		if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800484a:	4830      	ldr	r0, [pc, #192]	@ (800490c <MX_RTC_Init+0x118>)
 800484c:	f00c f91a 	bl	8010a84 <HAL_RTC_Init>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <MX_RTC_Init+0x66>
		{
			Error_Handler();
 8004856:	f000 fc47 	bl	80050e8 <Error_Handler>

		/* USER CODE END Check_RTC_BKUP */

		/** Initialize RTC and set the Time and Date
		 */
		sTime.Hours = 0;
 800485a:	2300      	movs	r3, #0
 800485c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
		sTime.Minutes = 0;
 8004860:	2300      	movs	r3, #0
 8004862:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
		sTime.Seconds = 0;
 8004866:	2300      	movs	r3, #0
 8004868:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800486c:	2300      	movs	r3, #0
 800486e:	643b      	str	r3, [r7, #64]	@ 0x40
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004870:	2300      	movs	r3, #0
 8004872:	647b      	str	r3, [r7, #68]	@ 0x44
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004874:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004878:	2200      	movs	r2, #0
 800487a:	4619      	mov	r1, r3
 800487c:	4823      	ldr	r0, [pc, #140]	@ (800490c <MX_RTC_Init+0x118>)
 800487e:	f00c f989 	bl	8010b94 <HAL_RTC_SetTime>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <MX_RTC_Init+0x98>
		{
			Error_Handler();
 8004888:	f000 fc2e 	bl	80050e8 <Error_Handler>
		}
		sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800488c:	2301      	movs	r3, #1
 800488e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
		sDate.Month = RTC_MONTH_JANUARY;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
		sDate.Date = 1;
 8004898:	2301      	movs	r3, #1
 800489a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
		sDate.Year = 0;
 800489e:	2300      	movs	r3, #0
 80048a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80048a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80048a8:	2200      	movs	r2, #0
 80048aa:	4619      	mov	r1, r3
 80048ac:	4817      	ldr	r0, [pc, #92]	@ (800490c <MX_RTC_Init+0x118>)
 80048ae:	f00c fa6a 	bl	8010d86 <HAL_RTC_SetDate>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <MX_RTC_Init+0xc8>
		{
			Error_Handler();
 80048b8:	f000 fc16 	bl	80050e8 <Error_Handler>
		}

		/** Enable the Alarm A
		 */
		sAlarm.AlarmTime.Hours = 0;
 80048bc:	2300      	movs	r3, #0
 80048be:	713b      	strb	r3, [r7, #4]
		sAlarm.AlarmTime.Minutes = 0;
 80048c0:	2300      	movs	r3, #0
 80048c2:	717b      	strb	r3, [r7, #5]
		sAlarm.AlarmTime.Seconds = 0;
 80048c4:	2300      	movs	r3, #0
 80048c6:	71bb      	strb	r3, [r7, #6]
		sAlarm.AlarmTime.SubSeconds = 0;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60bb      	str	r3, [r7, #8]
		sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80048cc:	2300      	movs	r3, #0
 80048ce:	613b      	str	r3, [r7, #16]
		sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80048d0:	2300      	movs	r3, #0
 80048d2:	617b      	str	r3, [r7, #20]
		sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80048d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004914 <MX_RTC_Init+0x120>)
 80048d6:	61bb      	str	r3, [r7, #24]
				|RTC_ALARMMASK_SECONDS;
		sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80048d8:	2300      	movs	r3, #0
 80048da:	623b      	str	r3, [r7, #32]
		sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80048dc:	2300      	movs	r3, #0
 80048de:	627b      	str	r3, [r7, #36]	@ 0x24
		sAlarm.AlarmDateWeekDay = 1;
 80048e0:	2301      	movs	r3, #1
 80048e2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		sAlarm.Alarm = RTC_ALARM_A;
 80048e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80048ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80048ec:	1d3b      	adds	r3, r7, #4
 80048ee:	2200      	movs	r2, #0
 80048f0:	4619      	mov	r1, r3
 80048f2:	4806      	ldr	r0, [pc, #24]	@ (800490c <MX_RTC_Init+0x118>)
 80048f4:	f00c face 	bl	8010e94 <HAL_RTC_SetAlarm_IT>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <MX_RTC_Init+0x10e>
		{
			Error_Handler();
 80048fe:	f000 fbf3 	bl	80050e8 <Error_Handler>
		}
		/* USER CODE BEGIN RTC_Init 2 */

		/* USER CODE END RTC_Init 2 */

	}
 8004902:	bf00      	nop
 8004904:	3748      	adds	r7, #72	@ 0x48
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	20000380 	.word	0x20000380
 8004910:	40002800 	.word	0x40002800
 8004914:	80800080 	.word	0x80800080

08004918 <MX_SPI2_Init>:
	 * @brief SPI2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_SPI2_Init(void)
	{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN SPI2_Init 1 */

		/* USER CODE END SPI2_Init 1 */
		/* SPI2 parameter configuration*/
		hspi2.Instance = SPI2;
 800491c:	4b1b      	ldr	r3, [pc, #108]	@ (800498c <MX_SPI2_Init+0x74>)
 800491e:	4a1c      	ldr	r2, [pc, #112]	@ (8004990 <MX_SPI2_Init+0x78>)
 8004920:	601a      	str	r2, [r3, #0]
		hspi2.Init.Mode = SPI_MODE_MASTER;
 8004922:	4b1a      	ldr	r3, [pc, #104]	@ (800498c <MX_SPI2_Init+0x74>)
 8004924:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004928:	605a      	str	r2, [r3, #4]
		hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800492a:	4b18      	ldr	r3, [pc, #96]	@ (800498c <MX_SPI2_Init+0x74>)
 800492c:	2200      	movs	r2, #0
 800492e:	609a      	str	r2, [r3, #8]
		hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004930:	4b16      	ldr	r3, [pc, #88]	@ (800498c <MX_SPI2_Init+0x74>)
 8004932:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004936:	60da      	str	r2, [r3, #12]
		hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004938:	4b14      	ldr	r3, [pc, #80]	@ (800498c <MX_SPI2_Init+0x74>)
 800493a:	2200      	movs	r2, #0
 800493c:	611a      	str	r2, [r3, #16]
		hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800493e:	4b13      	ldr	r3, [pc, #76]	@ (800498c <MX_SPI2_Init+0x74>)
 8004940:	2200      	movs	r2, #0
 8004942:	615a      	str	r2, [r3, #20]
		hspi2.Init.NSS = SPI_NSS_SOFT;
 8004944:	4b11      	ldr	r3, [pc, #68]	@ (800498c <MX_SPI2_Init+0x74>)
 8004946:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800494a:	619a      	str	r2, [r3, #24]
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800494c:	4b0f      	ldr	r3, [pc, #60]	@ (800498c <MX_SPI2_Init+0x74>)
 800494e:	2200      	movs	r2, #0
 8004950:	61da      	str	r2, [r3, #28]
		hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004952:	4b0e      	ldr	r3, [pc, #56]	@ (800498c <MX_SPI2_Init+0x74>)
 8004954:	2200      	movs	r2, #0
 8004956:	621a      	str	r2, [r3, #32]
		hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004958:	4b0c      	ldr	r3, [pc, #48]	@ (800498c <MX_SPI2_Init+0x74>)
 800495a:	2200      	movs	r2, #0
 800495c:	625a      	str	r2, [r3, #36]	@ 0x24
		hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800495e:	4b0b      	ldr	r3, [pc, #44]	@ (800498c <MX_SPI2_Init+0x74>)
 8004960:	2200      	movs	r2, #0
 8004962:	629a      	str	r2, [r3, #40]	@ 0x28
		hspi2.Init.CRCPolynomial = 7;
 8004964:	4b09      	ldr	r3, [pc, #36]	@ (800498c <MX_SPI2_Init+0x74>)
 8004966:	2207      	movs	r2, #7
 8004968:	62da      	str	r2, [r3, #44]	@ 0x2c
		hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800496a:	4b08      	ldr	r3, [pc, #32]	@ (800498c <MX_SPI2_Init+0x74>)
 800496c:	2200      	movs	r2, #0
 800496e:	631a      	str	r2, [r3, #48]	@ 0x30
		hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004970:	4b06      	ldr	r3, [pc, #24]	@ (800498c <MX_SPI2_Init+0x74>)
 8004972:	2208      	movs	r2, #8
 8004974:	635a      	str	r2, [r3, #52]	@ 0x34
		if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004976:	4805      	ldr	r0, [pc, #20]	@ (800498c <MX_SPI2_Init+0x74>)
 8004978:	f00c fce8 	bl	801134c <HAL_SPI_Init>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <MX_SPI2_Init+0x6e>
		{
			Error_Handler();
 8004982:	f000 fbb1 	bl	80050e8 <Error_Handler>
		}
		/* USER CODE BEGIN SPI2_Init 2 */

		/* USER CODE END SPI2_Init 2 */

	}
 8004986:	bf00      	nop
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	200003a4 	.word	0x200003a4
 8004990:	40003800 	.word	0x40003800

08004994 <MX_SPI3_Init>:
	 * @brief SPI3 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_SPI3_Init(void)
	{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN SPI3_Init 1 */

		/* USER CODE END SPI3_Init 1 */
		/* SPI3 parameter configuration*/
		hspi3.Instance = SPI3;
 8004998:	4b1b      	ldr	r3, [pc, #108]	@ (8004a08 <MX_SPI3_Init+0x74>)
 800499a:	4a1c      	ldr	r2, [pc, #112]	@ (8004a0c <MX_SPI3_Init+0x78>)
 800499c:	601a      	str	r2, [r3, #0]
		hspi3.Init.Mode = SPI_MODE_MASTER;
 800499e:	4b1a      	ldr	r3, [pc, #104]	@ (8004a08 <MX_SPI3_Init+0x74>)
 80049a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80049a4:	605a      	str	r2, [r3, #4]
		hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80049a6:	4b18      	ldr	r3, [pc, #96]	@ (8004a08 <MX_SPI3_Init+0x74>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	609a      	str	r2, [r3, #8]
		hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80049ac:	4b16      	ldr	r3, [pc, #88]	@ (8004a08 <MX_SPI3_Init+0x74>)
 80049ae:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80049b2:	60da      	str	r2, [r3, #12]
		hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80049b4:	4b14      	ldr	r3, [pc, #80]	@ (8004a08 <MX_SPI3_Init+0x74>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	611a      	str	r2, [r3, #16]
		hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80049ba:	4b13      	ldr	r3, [pc, #76]	@ (8004a08 <MX_SPI3_Init+0x74>)
 80049bc:	2200      	movs	r2, #0
 80049be:	615a      	str	r2, [r3, #20]
		hspi3.Init.NSS = SPI_NSS_SOFT;
 80049c0:	4b11      	ldr	r3, [pc, #68]	@ (8004a08 <MX_SPI3_Init+0x74>)
 80049c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049c6:	619a      	str	r2, [r3, #24]
		hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004a08 <MX_SPI3_Init+0x74>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	61da      	str	r2, [r3, #28]
		hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80049ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004a08 <MX_SPI3_Init+0x74>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	621a      	str	r2, [r3, #32]
		hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80049d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a08 <MX_SPI3_Init+0x74>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	625a      	str	r2, [r3, #36]	@ 0x24
		hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049da:	4b0b      	ldr	r3, [pc, #44]	@ (8004a08 <MX_SPI3_Init+0x74>)
 80049dc:	2200      	movs	r2, #0
 80049de:	629a      	str	r2, [r3, #40]	@ 0x28
		hspi3.Init.CRCPolynomial = 7;
 80049e0:	4b09      	ldr	r3, [pc, #36]	@ (8004a08 <MX_SPI3_Init+0x74>)
 80049e2:	2207      	movs	r2, #7
 80049e4:	62da      	str	r2, [r3, #44]	@ 0x2c
		hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80049e6:	4b08      	ldr	r3, [pc, #32]	@ (8004a08 <MX_SPI3_Init+0x74>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	631a      	str	r2, [r3, #48]	@ 0x30
		hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80049ec:	4b06      	ldr	r3, [pc, #24]	@ (8004a08 <MX_SPI3_Init+0x74>)
 80049ee:	2208      	movs	r2, #8
 80049f0:	635a      	str	r2, [r3, #52]	@ 0x34
		if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80049f2:	4805      	ldr	r0, [pc, #20]	@ (8004a08 <MX_SPI3_Init+0x74>)
 80049f4:	f00c fcaa 	bl	801134c <HAL_SPI_Init>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <MX_SPI3_Init+0x6e>
		{
			Error_Handler();
 80049fe:	f000 fb73 	bl	80050e8 <Error_Handler>
		}
		/* USER CODE BEGIN SPI3_Init 2 */

		/* USER CODE END SPI3_Init 2 */

	}
 8004a02:	bf00      	nop
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000408 	.word	0x20000408
 8004a0c:	40003c00 	.word	0x40003c00

08004a10 <MX_TIM1_Init>:
	 * @brief TIM1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM1_Init(void)
	{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b096      	sub	sp, #88	@ 0x58
 8004a14:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM1_Init 0 */

		/* USER CODE END TIM1_Init 0 */

		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a16:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	605a      	str	r2, [r3, #4]
 8004a20:	609a      	str	r2, [r3, #8]
		TIM_OC_InitTypeDef sConfigOC = {0};
 8004a22:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	605a      	str	r2, [r3, #4]
 8004a2c:	609a      	str	r2, [r3, #8]
 8004a2e:	60da      	str	r2, [r3, #12]
 8004a30:	611a      	str	r2, [r3, #16]
 8004a32:	615a      	str	r2, [r3, #20]
 8004a34:	619a      	str	r2, [r3, #24]
		TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004a36:	1d3b      	adds	r3, r7, #4
 8004a38:	222c      	movs	r2, #44	@ 0x2c
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f011 f971 	bl	8015d24 <memset>

		/* USER CODE BEGIN TIM1_Init 1 */

		/* USER CODE END TIM1_Init 1 */
		htim1.Instance = TIM1;
 8004a42:	4b45      	ldr	r3, [pc, #276]	@ (8004b58 <MX_TIM1_Init+0x148>)
 8004a44:	4a45      	ldr	r2, [pc, #276]	@ (8004b5c <MX_TIM1_Init+0x14c>)
 8004a46:	601a      	str	r2, [r3, #0]
		htim1.Init.Prescaler = 1599;
 8004a48:	4b43      	ldr	r3, [pc, #268]	@ (8004b58 <MX_TIM1_Init+0x148>)
 8004a4a:	f240 623f 	movw	r2, #1599	@ 0x63f
 8004a4e:	605a      	str	r2, [r3, #4]
		htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a50:	4b41      	ldr	r3, [pc, #260]	@ (8004b58 <MX_TIM1_Init+0x148>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	609a      	str	r2, [r3, #8]
		htim1.Init.Period = 49999;
 8004a56:	4b40      	ldr	r3, [pc, #256]	@ (8004b58 <MX_TIM1_Init+0x148>)
 8004a58:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8004a5c:	60da      	str	r2, [r3, #12]
		htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a5e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b58 <MX_TIM1_Init+0x148>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	611a      	str	r2, [r3, #16]
		htim1.Init.RepetitionCounter = 0;
 8004a64:	4b3c      	ldr	r3, [pc, #240]	@ (8004b58 <MX_TIM1_Init+0x148>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	615a      	str	r2, [r3, #20]
		htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a6a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b58 <MX_TIM1_Init+0x148>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8004a70:	4839      	ldr	r0, [pc, #228]	@ (8004b58 <MX_TIM1_Init+0x148>)
 8004a72:	f00d fbee 	bl	8012252 <HAL_TIM_OC_Init>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <MX_TIM1_Init+0x70>
		{
			Error_Handler();
 8004a7c:	f000 fb34 	bl	80050e8 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a80:	2300      	movs	r3, #0
 8004a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
		sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004a84:	2300      	movs	r3, #0
 8004a86:	653b      	str	r3, [r7, #80]	@ 0x50
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	657b      	str	r3, [r7, #84]	@ 0x54
		if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004a8c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004a90:	4619      	mov	r1, r3
 8004a92:	4831      	ldr	r0, [pc, #196]	@ (8004b58 <MX_TIM1_Init+0x148>)
 8004a94:	f00f fbf4 	bl	8014280 <HAL_TIMEx_MasterConfigSynchronization>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <MX_TIM1_Init+0x92>
		{
			Error_Handler();
 8004a9e:	f000 fb23 	bl	80050e8 <Error_Handler>
		}
		sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	633b      	str	r3, [r7, #48]	@ 0x30
		sConfigOC.Pulse = 0;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	637b      	str	r3, [r7, #52]	@ 0x34
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	63bb      	str	r3, [r7, #56]	@ 0x38
		sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	643b      	str	r3, [r7, #64]	@ 0x40
		sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	647b      	str	r3, [r7, #68]	@ 0x44
		sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004aba:	2300      	movs	r3, #0
 8004abc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004abe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4824      	ldr	r0, [pc, #144]	@ (8004b58 <MX_TIM1_Init+0x148>)
 8004ac8:	f00e fab0 	bl	801302c <HAL_TIM_OC_ConfigChannel>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <MX_TIM1_Init+0xc6>
		{
			Error_Handler();
 8004ad2:	f000 fb09 	bl	80050e8 <Error_Handler>
		}
		if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004ad6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004ada:	2204      	movs	r2, #4
 8004adc:	4619      	mov	r1, r3
 8004ade:	481e      	ldr	r0, [pc, #120]	@ (8004b58 <MX_TIM1_Init+0x148>)
 8004ae0:	f00e faa4 	bl	801302c <HAL_TIM_OC_ConfigChannel>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <MX_TIM1_Init+0xde>
		{
			Error_Handler();
 8004aea:	f000 fafd 	bl	80050e8 <Error_Handler>
		}
		if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004aee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004af2:	2208      	movs	r2, #8
 8004af4:	4619      	mov	r1, r3
 8004af6:	4818      	ldr	r0, [pc, #96]	@ (8004b58 <MX_TIM1_Init+0x148>)
 8004af8:	f00e fa98 	bl	801302c <HAL_TIM_OC_ConfigChannel>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <MX_TIM1_Init+0xf6>
		{
			Error_Handler();
 8004b02:	f000 faf1 	bl	80050e8 <Error_Handler>
		}
		sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004b06:	2300      	movs	r3, #0
 8004b08:	607b      	str	r3, [r7, #4]
		sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60bb      	str	r3, [r7, #8]
		sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60fb      	str	r3, [r7, #12]
		sBreakDeadTimeConfig.DeadTime = 0;
 8004b12:	2300      	movs	r3, #0
 8004b14:	613b      	str	r3, [r7, #16]
		sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004b16:	2300      	movs	r3, #0
 8004b18:	617b      	str	r3, [r7, #20]
		sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004b1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004b1e:	61bb      	str	r3, [r7, #24]
		sBreakDeadTimeConfig.BreakFilter = 0;
 8004b20:	2300      	movs	r3, #0
 8004b22:	61fb      	str	r3, [r7, #28]
		sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004b24:	2300      	movs	r3, #0
 8004b26:	623b      	str	r3, [r7, #32]
		sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004b28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b2c:	627b      	str	r3, [r7, #36]	@ 0x24
		sBreakDeadTimeConfig.Break2Filter = 0;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	62bb      	str	r3, [r7, #40]	@ 0x28
		sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004b32:	2300      	movs	r3, #0
 8004b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004b36:	1d3b      	adds	r3, r7, #4
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4807      	ldr	r0, [pc, #28]	@ (8004b58 <MX_TIM1_Init+0x148>)
 8004b3c:	f00f fc28 	bl	8014390 <HAL_TIMEx_ConfigBreakDeadTime>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <MX_TIM1_Init+0x13a>
		{
			Error_Handler();
 8004b46:	f000 facf 	bl	80050e8 <Error_Handler>
		}
		/* USER CODE BEGIN TIM1_Init 2 */

		/* USER CODE END TIM1_Init 2 */
		HAL_TIM_MspPostInit(&htim1);
 8004b4a:	4803      	ldr	r0, [pc, #12]	@ (8004b58 <MX_TIM1_Init+0x148>)
 8004b4c:	f002 fd4c 	bl	80075e8 <HAL_TIM_MspPostInit>

	}
 8004b50:	bf00      	nop
 8004b52:	3758      	adds	r7, #88	@ 0x58
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	2000046c 	.word	0x2000046c
 8004b5c:	40012c00 	.word	0x40012c00

08004b60 <MX_TIM2_Init>:
	 * @brief TIM2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM2_Init(void)
	{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM2_Init 0 */

		/* USER CODE END TIM2_Init 0 */

		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b66:	f107 0314 	add.w	r3, r7, #20
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	605a      	str	r2, [r3, #4]
 8004b70:	609a      	str	r2, [r3, #8]
		TIM_IC_InitTypeDef sConfigIC = {0};
 8004b72:	1d3b      	adds	r3, r7, #4
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	605a      	str	r2, [r3, #4]
 8004b7a:	609a      	str	r2, [r3, #8]
 8004b7c:	60da      	str	r2, [r3, #12]

		/* USER CODE BEGIN TIM2_Init 1 */

		/* USER CODE END TIM2_Init 1 */
		htim2.Instance = TIM2;
 8004b7e:	4b21      	ldr	r3, [pc, #132]	@ (8004c04 <MX_TIM2_Init+0xa4>)
 8004b80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004b84:	601a      	str	r2, [r3, #0]
		htim2.Init.Prescaler = 0;
 8004b86:	4b1f      	ldr	r3, [pc, #124]	@ (8004c04 <MX_TIM2_Init+0xa4>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	605a      	str	r2, [r3, #4]
		htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004c04 <MX_TIM2_Init+0xa4>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	609a      	str	r2, [r3, #8]
		htim2.Init.Period = 4294967295;
 8004b92:	4b1c      	ldr	r3, [pc, #112]	@ (8004c04 <MX_TIM2_Init+0xa4>)
 8004b94:	f04f 32ff 	mov.w	r2, #4294967295
 8004b98:	60da      	str	r2, [r3, #12]
		htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8004c04 <MX_TIM2_Init+0xa4>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	611a      	str	r2, [r3, #16]
		htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ba0:	4b18      	ldr	r3, [pc, #96]	@ (8004c04 <MX_TIM2_Init+0xa4>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004ba6:	4817      	ldr	r0, [pc, #92]	@ (8004c04 <MX_TIM2_Init+0xa4>)
 8004ba8:	f00d ffe0 	bl	8012b6c <HAL_TIM_IC_Init>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <MX_TIM2_Init+0x56>
		{
			Error_Handler();
 8004bb2:	f000 fa99 	bl	80050e8 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	617b      	str	r3, [r7, #20]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61fb      	str	r3, [r7, #28]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004bbe:	f107 0314 	add.w	r3, r7, #20
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	480f      	ldr	r0, [pc, #60]	@ (8004c04 <MX_TIM2_Init+0xa4>)
 8004bc6:	f00f fb5b 	bl	8014280 <HAL_TIMEx_MasterConfigSynchronization>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <MX_TIM2_Init+0x74>
		{
			Error_Handler();
 8004bd0:	f000 fa8a 	bl	80050e8 <Error_Handler>
		}
		sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	607b      	str	r3, [r7, #4]
		sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	60bb      	str	r3, [r7, #8]
		sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60fb      	str	r3, [r7, #12]
		sConfigIC.ICFilter = 0;
 8004be0:	2300      	movs	r3, #0
 8004be2:	613b      	str	r3, [r7, #16]
		if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004be4:	1d3b      	adds	r3, r7, #4
 8004be6:	2200      	movs	r2, #0
 8004be8:	4619      	mov	r1, r3
 8004bea:	4806      	ldr	r0, [pc, #24]	@ (8004c04 <MX_TIM2_Init+0xa4>)
 8004bec:	f00e fa98 	bl	8013120 <HAL_TIM_IC_ConfigChannel>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <MX_TIM2_Init+0x9a>
		{
			Error_Handler();
 8004bf6:	f000 fa77 	bl	80050e8 <Error_Handler>
		}
		/* USER CODE BEGIN TIM2_Init 2 */

		/* USER CODE END TIM2_Init 2 */

	}
 8004bfa:	bf00      	nop
 8004bfc:	3720      	adds	r7, #32
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	200004b8 	.word	0x200004b8

08004c08 <MX_TIM3_Init>:
	 * @brief TIM3 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM3_Init(void)
	{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b090      	sub	sp, #64	@ 0x40
 8004c0c:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM3_Init 0 */

		/* USER CODE END TIM3_Init 0 */

		TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004c0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c12:	2200      	movs	r2, #0
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	605a      	str	r2, [r3, #4]
 8004c18:	609a      	str	r2, [r3, #8]
 8004c1a:	60da      	str	r2, [r3, #12]
 8004c1c:	611a      	str	r2, [r3, #16]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c1e:	f107 0320 	add.w	r3, r7, #32
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	605a      	str	r2, [r3, #4]
 8004c28:	609a      	str	r2, [r3, #8]
		TIM_OC_InitTypeDef sConfigOC = {0};
 8004c2a:	1d3b      	adds	r3, r7, #4
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	605a      	str	r2, [r3, #4]
 8004c32:	609a      	str	r2, [r3, #8]
 8004c34:	60da      	str	r2, [r3, #12]
 8004c36:	611a      	str	r2, [r3, #16]
 8004c38:	615a      	str	r2, [r3, #20]
 8004c3a:	619a      	str	r2, [r3, #24]

		/* USER CODE BEGIN TIM3_Init 1 */

		/* USER CODE END TIM3_Init 1 */
		htim3.Instance = TIM3;
 8004c3c:	4b2c      	ldr	r3, [pc, #176]	@ (8004cf0 <MX_TIM3_Init+0xe8>)
 8004c3e:	4a2d      	ldr	r2, [pc, #180]	@ (8004cf4 <MX_TIM3_Init+0xec>)
 8004c40:	601a      	str	r2, [r3, #0]
		htim3.Init.Prescaler = 0;
 8004c42:	4b2b      	ldr	r3, [pc, #172]	@ (8004cf0 <MX_TIM3_Init+0xe8>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	605a      	str	r2, [r3, #4]
		htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c48:	4b29      	ldr	r3, [pc, #164]	@ (8004cf0 <MX_TIM3_Init+0xe8>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	609a      	str	r2, [r3, #8]
		htim3.Init.Period = 31;
 8004c4e:	4b28      	ldr	r3, [pc, #160]	@ (8004cf0 <MX_TIM3_Init+0xe8>)
 8004c50:	221f      	movs	r2, #31
 8004c52:	60da      	str	r2, [r3, #12]
		htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c54:	4b26      	ldr	r3, [pc, #152]	@ (8004cf0 <MX_TIM3_Init+0xe8>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	611a      	str	r2, [r3, #16]
		htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c5a:	4b25      	ldr	r3, [pc, #148]	@ (8004cf0 <MX_TIM3_Init+0xe8>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004c60:	4823      	ldr	r0, [pc, #140]	@ (8004cf0 <MX_TIM3_Init+0xe8>)
 8004c62:	f00d fa9f 	bl	80121a4 <HAL_TIM_Base_Init>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <MX_TIM3_Init+0x68>
		{
			Error_Handler();
 8004c6c:	f000 fa3c 	bl	80050e8 <Error_Handler>
		}
		if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004c70:	481f      	ldr	r0, [pc, #124]	@ (8004cf0 <MX_TIM3_Init+0xe8>)
 8004c72:	f00d fd7d 	bl	8012770 <HAL_TIM_PWM_Init>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <MX_TIM3_Init+0x78>
		{
			Error_Handler();
 8004c7c:	f000 fa34 	bl	80050e8 <Error_Handler>
		}
		sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8004c80:	2307      	movs	r3, #7
 8004c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8004c84:	2330      	movs	r3, #48	@ 0x30
 8004c86:	633b      	str	r3, [r7, #48]	@ 0x30
		if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8004c88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4818      	ldr	r0, [pc, #96]	@ (8004cf0 <MX_TIM3_Init+0xe8>)
 8004c90:	f00e fcbf 	bl	8013612 <HAL_TIM_SlaveConfigSynchro>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <MX_TIM3_Init+0x96>
		{
			Error_Handler();
 8004c9a:	f000 fa25 	bl	80050e8 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	623b      	str	r3, [r7, #32]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004ca6:	f107 0320 	add.w	r3, r7, #32
 8004caa:	4619      	mov	r1, r3
 8004cac:	4810      	ldr	r0, [pc, #64]	@ (8004cf0 <MX_TIM3_Init+0xe8>)
 8004cae:	f00f fae7 	bl	8014280 <HAL_TIMEx_MasterConfigSynchronization>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <MX_TIM3_Init+0xb4>
		{
			Error_Handler();
 8004cb8:	f000 fa16 	bl	80050e8 <Error_Handler>
		}
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004cbc:	2360      	movs	r3, #96	@ 0x60
 8004cbe:	607b      	str	r3, [r7, #4]
		sConfigOC.Pulse = 15;
 8004cc0:	230f      	movs	r3, #15
 8004cc2:	60bb      	str	r3, [r7, #8]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]
		if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004ccc:	1d3b      	adds	r3, r7, #4
 8004cce:	2208      	movs	r2, #8
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4807      	ldr	r0, [pc, #28]	@ (8004cf0 <MX_TIM3_Init+0xe8>)
 8004cd4:	f00e fac0 	bl	8013258 <HAL_TIM_PWM_ConfigChannel>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <MX_TIM3_Init+0xda>
		{
			Error_Handler();
 8004cde:	f000 fa03 	bl	80050e8 <Error_Handler>
		}
		/* USER CODE BEGIN TIM3_Init 2 */

		/* USER CODE END TIM3_Init 2 */
		HAL_TIM_MspPostInit(&htim3);
 8004ce2:	4803      	ldr	r0, [pc, #12]	@ (8004cf0 <MX_TIM3_Init+0xe8>)
 8004ce4:	f002 fc80 	bl	80075e8 <HAL_TIM_MspPostInit>

	}
 8004ce8:	bf00      	nop
 8004cea:	3740      	adds	r7, #64	@ 0x40
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	20000504 	.word	0x20000504
 8004cf4:	40000400 	.word	0x40000400

08004cf8 <MX_TIM4_Init>:
	 * @brief TIM4 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM4_Init(void)
	{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08e      	sub	sp, #56	@ 0x38
 8004cfc:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM4_Init 0 */

		/* USER CODE END TIM4_Init 0 */

		TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	605a      	str	r2, [r3, #4]
 8004d08:	609a      	str	r2, [r3, #8]
 8004d0a:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d0c:	f107 031c 	add.w	r3, r7, #28
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	605a      	str	r2, [r3, #4]
 8004d16:	609a      	str	r2, [r3, #8]
		TIM_OC_InitTypeDef sConfigOC = {0};
 8004d18:	463b      	mov	r3, r7
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	605a      	str	r2, [r3, #4]
 8004d20:	609a      	str	r2, [r3, #8]
 8004d22:	60da      	str	r2, [r3, #12]
 8004d24:	611a      	str	r2, [r3, #16]
 8004d26:	615a      	str	r2, [r3, #20]
 8004d28:	619a      	str	r2, [r3, #24]

		/* USER CODE BEGIN TIM4_Init 1 */

		/* USER CODE END TIM4_Init 1 */
		htim4.Instance = TIM4;
 8004d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8004dd8 <MX_TIM4_Init+0xe0>)
 8004d2c:	4a2b      	ldr	r2, [pc, #172]	@ (8004ddc <MX_TIM4_Init+0xe4>)
 8004d2e:	601a      	str	r2, [r3, #0]
		htim4.Init.Prescaler = 99;
 8004d30:	4b29      	ldr	r3, [pc, #164]	@ (8004dd8 <MX_TIM4_Init+0xe0>)
 8004d32:	2263      	movs	r2, #99	@ 0x63
 8004d34:	605a      	str	r2, [r3, #4]
		htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d36:	4b28      	ldr	r3, [pc, #160]	@ (8004dd8 <MX_TIM4_Init+0xe0>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	609a      	str	r2, [r3, #8]
		htim4.Init.Period = 999;
 8004d3c:	4b26      	ldr	r3, [pc, #152]	@ (8004dd8 <MX_TIM4_Init+0xe0>)
 8004d3e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004d42:	60da      	str	r2, [r3, #12]
		htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d44:	4b24      	ldr	r3, [pc, #144]	@ (8004dd8 <MX_TIM4_Init+0xe0>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	611a      	str	r2, [r3, #16]
		htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d4a:	4b23      	ldr	r3, [pc, #140]	@ (8004dd8 <MX_TIM4_Init+0xe0>)
 8004d4c:	2280      	movs	r2, #128	@ 0x80
 8004d4e:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004d50:	4821      	ldr	r0, [pc, #132]	@ (8004dd8 <MX_TIM4_Init+0xe0>)
 8004d52:	f00d fa27 	bl	80121a4 <HAL_TIM_Base_Init>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <MX_TIM4_Init+0x68>
		{
			Error_Handler();
 8004d5c:	f000 f9c4 	bl	80050e8 <Error_Handler>
		}
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d64:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004d66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	481a      	ldr	r0, [pc, #104]	@ (8004dd8 <MX_TIM4_Init+0xe0>)
 8004d6e:	f00e fb87 	bl	8013480 <HAL_TIM_ConfigClockSource>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <MX_TIM4_Init+0x84>
		{
			Error_Handler();
 8004d78:	f000 f9b6 	bl	80050e8 <Error_Handler>
		}
		if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8004d7c:	4816      	ldr	r0, [pc, #88]	@ (8004dd8 <MX_TIM4_Init+0xe0>)
 8004d7e:	f00d fa68 	bl	8012252 <HAL_TIM_OC_Init>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <MX_TIM4_Init+0x94>
		{
			Error_Handler();
 8004d88:	f000 f9ae 	bl	80050e8 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004d8c:	2320      	movs	r3, #32
 8004d8e:	61fb      	str	r3, [r7, #28]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d90:	2300      	movs	r3, #0
 8004d92:	627b      	str	r3, [r7, #36]	@ 0x24
		if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004d94:	f107 031c 	add.w	r3, r7, #28
 8004d98:	4619      	mov	r1, r3
 8004d9a:	480f      	ldr	r0, [pc, #60]	@ (8004dd8 <MX_TIM4_Init+0xe0>)
 8004d9c:	f00f fa70 	bl	8014280 <HAL_TIMEx_MasterConfigSynchronization>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <MX_TIM4_Init+0xb2>
		{
			Error_Handler();
 8004da6:	f000 f99f 	bl	80050e8 <Error_Handler>
		}
		sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004daa:	2300      	movs	r3, #0
 8004dac:	603b      	str	r3, [r7, #0]
		sConfigOC.Pulse = 0;
 8004dae:	2300      	movs	r3, #0
 8004db0:	607b      	str	r3, [r7, #4]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004db2:	2300      	movs	r3, #0
 8004db4:	60bb      	str	r3, [r7, #8]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004db6:	2300      	movs	r3, #0
 8004db8:	613b      	str	r3, [r7, #16]
		if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004dba:	463b      	mov	r3, r7
 8004dbc:	2208      	movs	r2, #8
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4805      	ldr	r0, [pc, #20]	@ (8004dd8 <MX_TIM4_Init+0xe0>)
 8004dc2:	f00e f933 	bl	801302c <HAL_TIM_OC_ConfigChannel>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <MX_TIM4_Init+0xd8>
		{
			Error_Handler();
 8004dcc:	f000 f98c 	bl	80050e8 <Error_Handler>
		}
		/* USER CODE BEGIN TIM4_Init 2 */

		/* USER CODE END TIM4_Init 2 */

	}
 8004dd0:	bf00      	nop
 8004dd2:	3738      	adds	r7, #56	@ 0x38
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	20000550 	.word	0x20000550
 8004ddc:	40000800 	.word	0x40000800

08004de0 <MX_UART4_Init>:
	 * @brief UART4 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_UART4_Init(void)
	{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
		/* USER CODE END UART4_Init 0 */

		/* USER CODE BEGIN UART4_Init 1 */

		/* USER CODE END UART4_Init 1 */
		huart4.Instance = UART4;
 8004de4:	4b14      	ldr	r3, [pc, #80]	@ (8004e38 <MX_UART4_Init+0x58>)
 8004de6:	4a15      	ldr	r2, [pc, #84]	@ (8004e3c <MX_UART4_Init+0x5c>)
 8004de8:	601a      	str	r2, [r3, #0]
		huart4.Init.BaudRate = 115200;
 8004dea:	4b13      	ldr	r3, [pc, #76]	@ (8004e38 <MX_UART4_Init+0x58>)
 8004dec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004df0:	605a      	str	r2, [r3, #4]
		huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004df2:	4b11      	ldr	r3, [pc, #68]	@ (8004e38 <MX_UART4_Init+0x58>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	609a      	str	r2, [r3, #8]
		huart4.Init.StopBits = UART_STOPBITS_1;
 8004df8:	4b0f      	ldr	r3, [pc, #60]	@ (8004e38 <MX_UART4_Init+0x58>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	60da      	str	r2, [r3, #12]
		huart4.Init.Parity = UART_PARITY_NONE;
 8004dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8004e38 <MX_UART4_Init+0x58>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	611a      	str	r2, [r3, #16]
		huart4.Init.Mode = UART_MODE_TX_RX;
 8004e04:	4b0c      	ldr	r3, [pc, #48]	@ (8004e38 <MX_UART4_Init+0x58>)
 8004e06:	220c      	movs	r2, #12
 8004e08:	615a      	str	r2, [r3, #20]
		huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e38 <MX_UART4_Init+0x58>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	619a      	str	r2, [r3, #24]
		huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e10:	4b09      	ldr	r3, [pc, #36]	@ (8004e38 <MX_UART4_Init+0x58>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	61da      	str	r2, [r3, #28]
		huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004e16:	4b08      	ldr	r3, [pc, #32]	@ (8004e38 <MX_UART4_Init+0x58>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	621a      	str	r2, [r3, #32]
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004e1c:	4b06      	ldr	r3, [pc, #24]	@ (8004e38 <MX_UART4_Init+0x58>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	625a      	str	r2, [r3, #36]	@ 0x24
		if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8004e22:	4805      	ldr	r0, [pc, #20]	@ (8004e38 <MX_UART4_Init+0x58>)
 8004e24:	f00f fb80 	bl	8014528 <HAL_HalfDuplex_Init>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <MX_UART4_Init+0x52>
		{
			Error_Handler();
 8004e2e:	f000 f95b 	bl	80050e8 <Error_Handler>
		}
		/* USER CODE BEGIN UART4_Init 2 */

		/* USER CODE END UART4_Init 2 */

	}
 8004e32:	bf00      	nop
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	2000059c 	.word	0x2000059c
 8004e3c:	40004c00 	.word	0x40004c00

08004e40 <MX_USART1_UART_Init>:
	 * @brief USART1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_USART1_UART_Init(void)
	{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
		/* USER CODE END USART1_Init 0 */

		/* USER CODE BEGIN USART1_Init 1 */

		/* USER CODE END USART1_Init 1 */
		huart1.Instance = USART1;
 8004e44:	4b14      	ldr	r3, [pc, #80]	@ (8004e98 <MX_USART1_UART_Init+0x58>)
 8004e46:	4a15      	ldr	r2, [pc, #84]	@ (8004e9c <MX_USART1_UART_Init+0x5c>)
 8004e48:	601a      	str	r2, [r3, #0]
		huart1.Init.BaudRate = 115200;
 8004e4a:	4b13      	ldr	r3, [pc, #76]	@ (8004e98 <MX_USART1_UART_Init+0x58>)
 8004e4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004e50:	605a      	str	r2, [r3, #4]
		huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004e52:	4b11      	ldr	r3, [pc, #68]	@ (8004e98 <MX_USART1_UART_Init+0x58>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	609a      	str	r2, [r3, #8]
		huart1.Init.StopBits = UART_STOPBITS_1;
 8004e58:	4b0f      	ldr	r3, [pc, #60]	@ (8004e98 <MX_USART1_UART_Init+0x58>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	60da      	str	r2, [r3, #12]
		huart1.Init.Parity = UART_PARITY_NONE;
 8004e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8004e98 <MX_USART1_UART_Init+0x58>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	611a      	str	r2, [r3, #16]
		huart1.Init.Mode = UART_MODE_TX_RX;
 8004e64:	4b0c      	ldr	r3, [pc, #48]	@ (8004e98 <MX_USART1_UART_Init+0x58>)
 8004e66:	220c      	movs	r2, #12
 8004e68:	615a      	str	r2, [r3, #20]
		huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8004e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e98 <MX_USART1_UART_Init+0x58>)
 8004e6c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004e70:	619a      	str	r2, [r3, #24]
		huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e72:	4b09      	ldr	r3, [pc, #36]	@ (8004e98 <MX_USART1_UART_Init+0x58>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	61da      	str	r2, [r3, #28]
		huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004e78:	4b07      	ldr	r3, [pc, #28]	@ (8004e98 <MX_USART1_UART_Init+0x58>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	621a      	str	r2, [r3, #32]
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004e7e:	4b06      	ldr	r3, [pc, #24]	@ (8004e98 <MX_USART1_UART_Init+0x58>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	625a      	str	r2, [r3, #36]	@ 0x24
		if (HAL_UART_Init(&huart1) != HAL_OK)
 8004e84:	4804      	ldr	r0, [pc, #16]	@ (8004e98 <MX_USART1_UART_Init+0x58>)
 8004e86:	f00f fb01 	bl	801448c <HAL_UART_Init>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <MX_USART1_UART_Init+0x54>
		{
			Error_Handler();
 8004e90:	f000 f92a 	bl	80050e8 <Error_Handler>
		}
		/* USER CODE BEGIN USART1_Init 2 */

		/* USER CODE END USART1_Init 2 */

	}
 8004e94:	bf00      	nop
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	20000624 	.word	0x20000624
 8004e9c:	40013800 	.word	0x40013800

08004ea0 <MX_DMA_Init>:

	/**
	 * Enable DMA controller clock
	 */
	static void MX_DMA_Init(void)
	{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0

		/* DMA controller clock enable */
		__HAL_RCC_DMA1_CLK_ENABLE();
 8004ea6:	4b14      	ldr	r3, [pc, #80]	@ (8004ef8 <MX_DMA_Init+0x58>)
 8004ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eaa:	4a13      	ldr	r2, [pc, #76]	@ (8004ef8 <MX_DMA_Init+0x58>)
 8004eac:	f043 0301 	orr.w	r3, r3, #1
 8004eb0:	6493      	str	r3, [r2, #72]	@ 0x48
 8004eb2:	4b11      	ldr	r3, [pc, #68]	@ (8004ef8 <MX_DMA_Init+0x58>)
 8004eb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	607b      	str	r3, [r7, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]

		/* DMA interrupt init */
		/* DMA1_Channel1_IRQn interrupt configuration */
		HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	200b      	movs	r0, #11
 8004ec4:	f007 fb69 	bl	800c59a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004ec8:	200b      	movs	r0, #11
 8004eca:	f007 fb82 	bl	800c5d2 <HAL_NVIC_EnableIRQ>
		/* DMA1_Channel4_IRQn interrupt configuration */
		HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004ece:	2200      	movs	r2, #0
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	200e      	movs	r0, #14
 8004ed4:	f007 fb61 	bl	800c59a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004ed8:	200e      	movs	r0, #14
 8004eda:	f007 fb7a 	bl	800c5d2 <HAL_NVIC_EnableIRQ>
		/* DMA1_Channel5_IRQn interrupt configuration */
		HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8004ede:	2200      	movs	r2, #0
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	200f      	movs	r0, #15
 8004ee4:	f007 fb59 	bl	800c59a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004ee8:	200f      	movs	r0, #15
 8004eea:	f007 fb72 	bl	800c5d2 <HAL_NVIC_EnableIRQ>

	}
 8004eee:	bf00      	nop
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40021000 	.word	0x40021000

08004efc <MX_GPIO_Init>:
	 * @brief GPIO Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_GPIO_Init(void)
	{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08a      	sub	sp, #40	@ 0x28
 8004f00:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f02:	f107 0314 	add.w	r3, r7, #20
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	605a      	str	r2, [r3, #4]
 8004f0c:	609a      	str	r2, [r3, #8]
 8004f0e:	60da      	str	r2, [r3, #12]
 8004f10:	611a      	str	r2, [r3, #16]
		/* USER CODE BEGIN MX_GPIO_Init_1 */
		/* USER CODE END MX_GPIO_Init_1 */

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8004f12:	4b71      	ldr	r3, [pc, #452]	@ (80050d8 <MX_GPIO_Init+0x1dc>)
 8004f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f16:	4a70      	ldr	r2, [pc, #448]	@ (80050d8 <MX_GPIO_Init+0x1dc>)
 8004f18:	f043 0304 	orr.w	r3, r3, #4
 8004f1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f1e:	4b6e      	ldr	r3, [pc, #440]	@ (80050d8 <MX_GPIO_Init+0x1dc>)
 8004f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f22:	f003 0304 	and.w	r3, r3, #4
 8004f26:	613b      	str	r3, [r7, #16]
 8004f28:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOH_CLK_ENABLE();
 8004f2a:	4b6b      	ldr	r3, [pc, #428]	@ (80050d8 <MX_GPIO_Init+0x1dc>)
 8004f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f2e:	4a6a      	ldr	r2, [pc, #424]	@ (80050d8 <MX_GPIO_Init+0x1dc>)
 8004f30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f36:	4b68      	ldr	r3, [pc, #416]	@ (80050d8 <MX_GPIO_Init+0x1dc>)
 8004f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8004f42:	4b65      	ldr	r3, [pc, #404]	@ (80050d8 <MX_GPIO_Init+0x1dc>)
 8004f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f46:	4a64      	ldr	r2, [pc, #400]	@ (80050d8 <MX_GPIO_Init+0x1dc>)
 8004f48:	f043 0301 	orr.w	r3, r3, #1
 8004f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f4e:	4b62      	ldr	r3, [pc, #392]	@ (80050d8 <MX_GPIO_Init+0x1dc>)
 8004f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	60bb      	str	r3, [r7, #8]
 8004f58:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8004f5a:	4b5f      	ldr	r3, [pc, #380]	@ (80050d8 <MX_GPIO_Init+0x1dc>)
 8004f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f5e:	4a5e      	ldr	r2, [pc, #376]	@ (80050d8 <MX_GPIO_Init+0x1dc>)
 8004f60:	f043 0302 	orr.w	r3, r3, #2
 8004f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f66:	4b5c      	ldr	r3, [pc, #368]	@ (80050d8 <MX_GPIO_Init+0x1dc>)
 8004f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	607b      	str	r3, [r7, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8004f72:	4b59      	ldr	r3, [pc, #356]	@ (80050d8 <MX_GPIO_Init+0x1dc>)
 8004f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f76:	4a58      	ldr	r2, [pc, #352]	@ (80050d8 <MX_GPIO_Init+0x1dc>)
 8004f78:	f043 0308 	orr.w	r3, r3, #8
 8004f7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f7e:	4b56      	ldr	r3, [pc, #344]	@ (80050d8 <MX_GPIO_Init+0x1dc>)
 8004f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	683b      	ldr	r3, [r7, #0]

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(DBG_GPIO_Port, DBG_Pin, GPIO_PIN_RESET);
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	2108      	movs	r1, #8
 8004f8e:	4853      	ldr	r0, [pc, #332]	@ (80050dc <MX_GPIO_Init+0x1e0>)
 8004f90:	f008 fff6 	bl	800df80 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 8004f94:	2201      	movs	r2, #1
 8004f96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004f9a:	4851      	ldr	r0, [pc, #324]	@ (80050e0 <MX_GPIO_Init+0x1e4>)
 8004f9c:	f008 fff0 	bl	800df80 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOC, FLASH_nWP_Pin|FLASH_nRESET_Pin, GPIO_PIN_SET);
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	21c0      	movs	r1, #192	@ 0xc0
 8004fa4:	484d      	ldr	r0, [pc, #308]	@ (80050dc <MX_GPIO_Init+0x1e0>)
 8004fa6:	f008 ffeb 	bl	800df80 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOA, LTE_POWER_ON_Pin|LTE_RESET_Pin, GPIO_PIN_SET);
 8004faa:	2201      	movs	r2, #1
 8004fac:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004fb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004fb4:	f008 ffe4 	bl	800df80 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004fbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004fc2:	f008 ffdd 	bl	800df80 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(DTR_GPIO_Port, DTR_Pin, GPIO_PIN_RESET);
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004fcc:	4844      	ldr	r0, [pc, #272]	@ (80050e0 <MX_GPIO_Init+0x1e4>)
 8004fce:	f008 ffd7 	bl	800df80 <HAL_GPIO_WritePin>

		/*Configure GPIO pins : USR_BTN_Pin PC4 */
		GPIO_InitStruct.Pin = USR_BTN_Pin|GPIO_PIN_4;
 8004fd2:	f242 0310 	movw	r3, #8208	@ 0x2010
 8004fd6:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fd8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004fdc:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fe2:	f107 0314 	add.w	r3, r7, #20
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	483c      	ldr	r0, [pc, #240]	@ (80050dc <MX_GPIO_Init+0x1e0>)
 8004fea:	f008 fe1f 	bl	800dc2c <HAL_GPIO_Init>

		/*Configure GPIO pins : DBG_Pin FLASH_nWP_Pin FLASH_nRESET_Pin */
		GPIO_InitStruct.Pin = DBG_Pin|FLASH_nWP_Pin|FLASH_nRESET_Pin;
 8004fee:	23c8      	movs	r3, #200	@ 0xc8
 8004ff0:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ffe:	f107 0314 	add.w	r3, r7, #20
 8005002:	4619      	mov	r1, r3
 8005004:	4835      	ldr	r0, [pc, #212]	@ (80050dc <MX_GPIO_Init+0x1e0>)
 8005006:	f008 fe11 	bl	800dc2c <HAL_GPIO_Init>

		/*Configure GPIO pin : PA3 */
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 800500a:	2308      	movs	r3, #8
 800500c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800500e:	2300      	movs	r3, #0
 8005010:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005012:	2300      	movs	r3, #0
 8005014:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005016:	f107 0314 	add.w	r3, r7, #20
 800501a:	4619      	mov	r1, r3
 800501c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005020:	f008 fe04 	bl	800dc2c <HAL_GPIO_Init>

		/*Configure GPIO pins : FLASH_nCS_Pin DTR_Pin */
		GPIO_InitStruct.Pin = FLASH_nCS_Pin|DTR_Pin;
 8005024:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8005028:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800502a:	2301      	movs	r3, #1
 800502c:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800502e:	2300      	movs	r3, #0
 8005030:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005032:	2300      	movs	r3, #0
 8005034:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005036:	f107 0314 	add.w	r3, r7, #20
 800503a:	4619      	mov	r1, r3
 800503c:	4828      	ldr	r0, [pc, #160]	@ (80050e0 <MX_GPIO_Init+0x1e4>)
 800503e:	f008 fdf5 	bl	800dc2c <HAL_GPIO_Init>

		/*Configure GPIO pins : LTE_POWER_ON_Pin LTE_RESET_Pin */
		GPIO_InitStruct.Pin = LTE_POWER_ON_Pin|LTE_RESET_Pin;
 8005042:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005046:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005048:	2311      	movs	r3, #17
 800504a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800504c:	2300      	movs	r3, #0
 800504e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005050:	2300      	movs	r3, #0
 8005052:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005054:	f107 0314 	add.w	r3, r7, #20
 8005058:	4619      	mov	r1, r3
 800505a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800505e:	f008 fde5 	bl	800dc2c <HAL_GPIO_Init>

		/*Configure GPIO pin : ACC_nCS_Pin */
		GPIO_InitStruct.Pin = ACC_nCS_Pin;
 8005062:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005066:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005068:	2301      	movs	r3, #1
 800506a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506c:	2300      	movs	r3, #0
 800506e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005070:	2300      	movs	r3, #0
 8005072:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(ACC_nCS_GPIO_Port, &GPIO_InitStruct);
 8005074:	f107 0314 	add.w	r3, r7, #20
 8005078:	4619      	mov	r1, r3
 800507a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800507e:	f008 fdd5 	bl	800dc2c <HAL_GPIO_Init>

		/*Configure GPIO pin : PD2 */
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005082:	2304      	movs	r3, #4
 8005084:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005086:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800508a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508c:	2300      	movs	r3, #0
 800508e:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005090:	f107 0314 	add.w	r3, r7, #20
 8005094:	4619      	mov	r1, r3
 8005096:	4813      	ldr	r0, [pc, #76]	@ (80050e4 <MX_GPIO_Init+0x1e8>)
 8005098:	f008 fdc8 	bl	800dc2c <HAL_GPIO_Init>

		/*Configure GPIO pin : DCD_Pin */
		GPIO_InitStruct.Pin = DCD_Pin;
 800509c:	2320      	movs	r3, #32
 800509e:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050a0:	2300      	movs	r3, #0
 80050a2:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a4:	2300      	movs	r3, #0
 80050a6:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(DCD_GPIO_Port, &GPIO_InitStruct);
 80050a8:	f107 0314 	add.w	r3, r7, #20
 80050ac:	4619      	mov	r1, r3
 80050ae:	480c      	ldr	r0, [pc, #48]	@ (80050e0 <MX_GPIO_Init+0x1e4>)
 80050b0:	f008 fdbc 	bl	800dc2c <HAL_GPIO_Init>

		/*Configure GPIO pin : PB8 */
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 80050b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80050b8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80050ba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80050be:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050c4:	f107 0314 	add.w	r3, r7, #20
 80050c8:	4619      	mov	r1, r3
 80050ca:	4805      	ldr	r0, [pc, #20]	@ (80050e0 <MX_GPIO_Init+0x1e4>)
 80050cc:	f008 fdae 	bl	800dc2c <HAL_GPIO_Init>

		/* USER CODE BEGIN MX_GPIO_Init_2 */
		/* USER CODE END MX_GPIO_Init_2 */
	}
 80050d0:	bf00      	nop
 80050d2:	3728      	adds	r7, #40	@ 0x28
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	40021000 	.word	0x40021000
 80050dc:	48000800 	.word	0x48000800
 80050e0:	48000400 	.word	0x48000400
 80050e4:	48000c00 	.word	0x48000c00

080050e8 <Error_Handler>:
	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval None
	 */
	void Error_Handler(void)
	{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80050ec:	b672      	cpsid	i
}
 80050ee:	bf00      	nop
		/* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 80050f0:	bf00      	nop
 80050f2:	e7fd      	b.n	80050f0 <Error_Handler+0x8>

080050f4 <OTA_Init>:
#include "string.h"


/*-----INIZIALIZZAZIONE OTA-----*/
int OTA_Init(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 80050fa:	2300      	movs	r3, #0
 80050fc:	71fb      	strb	r3, [r7, #7]

	if (sys.OTA_File_isOpen)
 80050fe:	4b10      	ldr	r3, [pc, #64]	@ (8005140 <OTA_Init+0x4c>)
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <OTA_Init+0x1e>
	{
		f_close(&sys.OTA_File);
 800510c:	480d      	ldr	r0, [pc, #52]	@ (8005144 <OTA_Init+0x50>)
 800510e:	f004 ff63 	bl	8009fd8 <f_close>
	}

	sys.OTA_File_isOpen = 0;
 8005112:	4a0b      	ldr	r2, [pc, #44]	@ (8005140 <OTA_Init+0x4c>)
 8005114:	7813      	ldrb	r3, [r2, #0]
 8005116:	f023 0301 	bic.w	r3, r3, #1
 800511a:	7013      	strb	r3, [r2, #0]

	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ | FA_WRITE | FA_CREATE_ALWAYS);
 800511c:	220b      	movs	r2, #11
 800511e:	490a      	ldr	r1, [pc, #40]	@ (8005148 <OTA_Init+0x54>)
 8005120:	4808      	ldr	r0, [pc, #32]	@ (8005144 <OTA_Init+0x50>)
 8005122:	f004 fa65 	bl	80095f0 <f_open>
 8005126:	4603      	mov	r3, r0
 8005128:	71fb      	strb	r3, [r7, #7]

	if (fRes != FR_OK)
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <OTA_Init+0x42>
	{
		return -1;
 8005130:	f04f 33ff 	mov.w	r3, #4294967295
 8005134:	e000      	b.n	8005138 <OTA_Init+0x44>
	}

	return 0;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	20000740 	.word	0x20000740
 8005144:	20000744 	.word	0x20000744
 8005148:	080172d8 	.word	0x080172d8

0800514c <OTA_Receive>:

/*-----RICEZIONE FILE OTA-----*/
int OTA_Receive(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	f5ad 6d99 	sub.w	sp, sp, #1224	@ 0x4c8
 8005152:	af00      	add	r7, sp, #0
	uint8_t rx_buffer[1200];
	uint16_t rx_len = 0;
 8005154:	2300      	movs	r3, #0
 8005156:	f8a7 34c6 	strh.w	r3, [r7, #1222]	@ 0x4c6
	UINT bytes_written = 0;
 800515a:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800515e:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]
	
	SIM_Wait_Response("+CIPRXGET: 1");
 8005166:	4834      	ldr	r0, [pc, #208]	@ (8005238 <OTA_Receive+0xec>)
 8005168:	f7fd f896 	bl	8002298 <SIM_Wait_Response>

	while(1)
	{
		SIM_Send_Command("AT+CIPRXGET=2,1024\r");
 800516c:	4833      	ldr	r0, [pc, #204]	@ (800523c <OTA_Receive+0xf0>)
 800516e:	f7fc fc5f 	bl	8001a30 <SIM_Send_Command>
		rx_len = SIM_Receive_Response((char*)rx_buffer);
 8005172:	f107 0308 	add.w	r3, r7, #8
 8005176:	4618      	mov	r0, r3
 8005178:	f7fc fc86 	bl	8001a88 <SIM_Receive_Response>
 800517c:	4603      	mov	r3, r0
 800517e:	f8a7 34c6 	strh.w	r3, [r7, #1222]	@ 0x4c6

		char *info = strstr((char*)rx_buffer, "+CIPRXGET: 2,");
 8005182:	f107 0308 	add.w	r3, r7, #8
 8005186:	492e      	ldr	r1, [pc, #184]	@ (8005240 <OTA_Receive+0xf4>)
 8005188:	4618      	mov	r0, r3
 800518a:	f010 fe05 	bl	8015d98 <strstr>
 800518e:	f8c7 04c0 	str.w	r0, [r7, #1216]	@ 0x4c0
		if (info) 
 8005192:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0e8      	beq.n	800516c <OTA_Receive+0x20>
		{
			int actual_len = atoi(info + strlen("+CIPRXGET: 2,"));
 800519a:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 800519e:	330d      	adds	r3, #13
 80051a0:	4618      	mov	r0, r3
 80051a2:	f010 fcd5 	bl	8015b50 <atoi>
 80051a6:	f8c7 04bc 	str.w	r0, [r7, #1212]	@ 0x4bc
			char *data_start = strstr(info, "\r\n");
 80051aa:	4926      	ldr	r1, [pc, #152]	@ (8005244 <OTA_Receive+0xf8>)
 80051ac:	f8d7 04c0 	ldr.w	r0, [r7, #1216]	@ 0x4c0
 80051b0:	f010 fdf2 	bl	8015d98 <strstr>
 80051b4:	f8c7 04b8 	str.w	r0, [r7, #1208]	@ 0x4b8
			if (actual_len == 0)
 80051b8:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d02b      	beq.n	8005218 <OTA_Receive+0xcc>
            {
                break;           // Fine file
            }
			if (data_start) 
 80051c0:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d021      	beq.n	800520c <OTA_Receive+0xc0>
			{
				data_start += 2; // Salta "\r\n"
 80051c8:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 80051cc:	3302      	adds	r3, #2
 80051ce:	f8c7 34b8 	str.w	r3, [r7, #1208]	@ 0x4b8
				SIM_Wait_Response("OK");
 80051d2:	481d      	ldr	r0, [pc, #116]	@ (8005248 <OTA_Receive+0xfc>)
 80051d4:	f7fd f860 	bl	8002298 <SIM_Wait_Response>
				SIM_Wait_Response("+CIPRXGET: 1");
 80051d8:	4817      	ldr	r0, [pc, #92]	@ (8005238 <OTA_Receive+0xec>)
 80051da:	f7fd f85d 	bl	8002298 <SIM_Wait_Response>
				f_write(&sys.OTA_File, data_start, actual_len, &bytes_written);
 80051de:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	@ 0x4bc
 80051e2:	1d3b      	adds	r3, r7, #4
 80051e4:	f8d7 14b8 	ldr.w	r1, [r7, #1208]	@ 0x4b8
 80051e8:	4818      	ldr	r0, [pc, #96]	@ (800524c <OTA_Receive+0x100>)
 80051ea:	f004 fcec 	bl	8009bc6 <f_write>
				if(bytes_written != actual_len)
 80051ee:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 80051f2:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d0b5      	beq.n	800516c <OTA_Receive+0x20>
				{
					f_close(&sys.OTA_File);
 8005200:	4812      	ldr	r0, [pc, #72]	@ (800524c <OTA_Receive+0x100>)
 8005202:	f004 fee9 	bl	8009fd8 <f_close>
					return -1; 
 8005206:	f04f 33ff 	mov.w	r3, #4294967295
 800520a:	e00f      	b.n	800522c <OTA_Receive+0xe0>
				}
			}
			else
			{
				f_close(&sys.OTA_File);
 800520c:	480f      	ldr	r0, [pc, #60]	@ (800524c <OTA_Receive+0x100>)
 800520e:	f004 fee3 	bl	8009fd8 <f_close>
				return -1; 
 8005212:	f04f 33ff 	mov.w	r3, #4294967295
 8005216:	e009      	b.n	800522c <OTA_Receive+0xe0>
                break;           // Fine file
 8005218:	bf00      	nop
			}
		}
	}

	f_close(&sys.OTA_File);
 800521a:	480c      	ldr	r0, [pc, #48]	@ (800524c <OTA_Receive+0x100>)
 800521c:	f004 fedc 	bl	8009fd8 <f_close>
    sys.OTA_File_isOpen = 0;
 8005220:	4a0b      	ldr	r2, [pc, #44]	@ (8005250 <OTA_Receive+0x104>)
 8005222:	7813      	ldrb	r3, [r2, #0]
 8005224:	f023 0301 	bic.w	r3, r3, #1
 8005228:	7013      	strb	r3, [r2, #0]
	return 0;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	f507 6799 	add.w	r7, r7, #1224	@ 0x4c8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	080172e8 	.word	0x080172e8
 800523c:	080172f8 	.word	0x080172f8
 8005240:	0801730c 	.word	0x0801730c
 8005244:	0801731c 	.word	0x0801731c
 8005248:	08017320 	.word	0x08017320
 800524c:	20000744 	.word	0x20000744
 8005250:	20000740 	.word	0x20000740

08005254 <OTA_CRC_Check>:

int OTA_CRC_Check(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b0cc      	sub	sp, #304	@ 0x130
 8005258:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 800525a:	2300      	movs	r3, #0
 800525c:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
	UINT read = 0;
 8005260:	2300      	movs	r3, #0
 8005262:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	uint16_t ota_crc = 0;
 8005266:	2300      	movs	r3, #0
 8005268:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
	uint8_t rx_buffer[20];

	SIM_Wait_Response("+CIPRXGET: 1");
 800526c:	4846      	ldr	r0, [pc, #280]	@ (8005388 <OTA_CRC_Check+0x134>)
 800526e:	f7fd f813 	bl	8002298 <SIM_Wait_Response>
	SIM_Send_Command("AT+CIPRXGET=2,2\r");
 8005272:	4846      	ldr	r0, [pc, #280]	@ (800538c <OTA_CRC_Check+0x138>)
 8005274:	f7fc fbdc 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response((char*)rx_buffer);
 8005278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800527c:	4618      	mov	r0, r3
 800527e:	f7fc fc03 	bl	8001a88 <SIM_Receive_Response>
	char *info = strstr((char*)rx_buffer, "+CIPRXGET: 2,");
 8005282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005286:	4942      	ldr	r1, [pc, #264]	@ (8005390 <OTA_CRC_Check+0x13c>)
 8005288:	4618      	mov	r0, r3
 800528a:	f010 fd85 	bl	8015d98 <strstr>
 800528e:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124

	if (info)
 8005292:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005296:	2b00      	cmp	r3, #0
 8005298:	d008      	beq.n	80052ac <OTA_CRC_Check+0x58>
	{
		ota_crc = atoi(info + strlen("+CIPRXGET: 2,"));
 800529a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800529e:	330d      	adds	r3, #13
 80052a0:	4618      	mov	r0, r3
 80052a2:	f010 fc55 	bl	8015b50 <atoi>
 80052a6:	4603      	mov	r3, r0
 80052a8:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
	}

	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ);
 80052ac:	2201      	movs	r2, #1
 80052ae:	4939      	ldr	r1, [pc, #228]	@ (8005394 <OTA_CRC_Check+0x140>)
 80052b0:	4839      	ldr	r0, [pc, #228]	@ (8005398 <OTA_CRC_Check+0x144>)
 80052b2:	f004 f99d 	bl	80095f0 <f_open>
 80052b6:	4603      	mov	r3, r0
 80052b8:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
	if (fRes != FR_OK)
 80052bc:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <OTA_CRC_Check+0x76>
	{
		return -1;
 80052c4:	f04f 33ff 	mov.w	r3, #4294967295
 80052c8:	e059      	b.n	800537e <OTA_CRC_Check+0x12a>
	}
	uint32_t size = f_size(&sys.OTA_File);
 80052ca:	4b34      	ldr	r3, [pc, #208]	@ (800539c <OTA_CRC_Check+0x148>)
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	uint16_t calc_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&size, 1);
 80052d2:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80052d6:	2201      	movs	r2, #1
 80052d8:	4619      	mov	r1, r3
 80052da:	4831      	ldr	r0, [pc, #196]	@ (80053a0 <OTA_CRC_Check+0x14c>)
 80052dc:	f007 f9fc 	bl	800c6d8 <HAL_CRC_Calculate>
 80052e0:	4603      	mov	r3, r0
 80052e2:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
	while (size > 0)
 80052e6:	e039      	b.n	800535c <OTA_CRC_Check+0x108>
	{
		uint8_t buffer[256];
		UINT to_read = (size > sizeof(buffer)) ? sizeof(buffer) : size;
 80052e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052f0:	bf28      	it	cs
 80052f2:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80052f6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		if (f_read(&sys.OTA_File, buffer, to_read, &read) != FR_OK || read == 0)
 80052fa:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80052fe:	1d39      	adds	r1, r7, #4
 8005300:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8005304:	4824      	ldr	r0, [pc, #144]	@ (8005398 <OTA_CRC_Check+0x144>)
 8005306:	f004 fb0b 	bl	8009920 <f_read>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d103      	bne.n	8005318 <OTA_CRC_Check+0xc4>
 8005310:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005314:	2b00      	cmp	r3, #0
 8005316:	d105      	bne.n	8005324 <OTA_CRC_Check+0xd0>
		{
			f_close(&sys.OTA_File);
 8005318:	481f      	ldr	r0, [pc, #124]	@ (8005398 <OTA_CRC_Check+0x144>)
 800531a:	f004 fe5d 	bl	8009fd8 <f_close>
			return -1;
 800531e:	f04f 33ff 	mov.w	r3, #4294967295
 8005322:	e02c      	b.n	800537e <OTA_CRC_Check+0x12a>
		}
		calc_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buffer, read / 4 + (read % 4 != 0));
 8005324:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005328:	089b      	lsrs	r3, r3, #2
 800532a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800532e:	f002 0203 	and.w	r2, r2, #3
 8005332:	2a00      	cmp	r2, #0
 8005334:	bf14      	ite	ne
 8005336:	2201      	movne	r2, #1
 8005338:	2200      	moveq	r2, #0
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	441a      	add	r2, r3
 800533e:	1d3b      	adds	r3, r7, #4
 8005340:	4619      	mov	r1, r3
 8005342:	4817      	ldr	r0, [pc, #92]	@ (80053a0 <OTA_CRC_Check+0x14c>)
 8005344:	f007 f9c8 	bl	800c6d8 <HAL_CRC_Calculate>
 8005348:	4603      	mov	r3, r0
 800534a:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
		size -= read;
 800534e:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8005352:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	while (size > 0)
 800535c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1c1      	bne.n	80052e8 <OTA_CRC_Check+0x94>
	}

	f_close(&sys.OTA_File);
 8005364:	480c      	ldr	r0, [pc, #48]	@ (8005398 <OTA_CRC_Check+0x144>)
 8005366:	f004 fe37 	bl	8009fd8 <f_close>

	if (calc_crc != ota_crc)
 800536a:	f8b7 212c 	ldrh.w	r2, [r7, #300]	@ 0x12c
 800536e:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8005372:	429a      	cmp	r2, r3
 8005374:	d002      	beq.n	800537c <OTA_CRC_Check+0x128>
	{
		return -1; // CRC non corrisponde
 8005376:	f04f 33ff 	mov.w	r3, #4294967295
 800537a:	e000      	b.n	800537e <OTA_CRC_Check+0x12a>
	}
	
	return 0; // CRC OK
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	080172e8 	.word	0x080172e8
 800538c:	08017324 	.word	0x08017324
 8005390:	0801730c 	.word	0x0801730c
 8005394:	080172d8 	.word	0x080172d8
 8005398:	20000744 	.word	0x20000744
 800539c:	20000740 	.word	0x20000740
 80053a0:	200002c4 	.word	0x200002c4

080053a4 <OTA_Apply>:


/*-----APPLICAZIONE UPDATE-----*/
int OTA_Apply(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b09a      	sub	sp, #104	@ 0x68
 80053a8:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 80053aa:	2300      	movs	r3, #0
 80053ac:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	int32_t result = 0;
 80053b0:	2300      	movs	r3, #0
 80053b2:	667b      	str	r3, [r7, #100]	@ 0x64
	uint8_t ota_bank = 0;
 80053b4:	2300      	movs	r3, #0
 80053b6:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	uint32_t faddr = 0;
 80053ba:	2300      	movs	r3, #0
 80053bc:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t size = 0;
 80053be:	2300      	movs	r3, #0
 80053c0:	663b      	str	r3, [r7, #96]	@ 0x60
	uint64_t pword = 0;
 80053c2:	f04f 0200 	mov.w	r2, #0
 80053c6:	f04f 0300 	mov.w	r3, #0
 80053ca:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	uint32_t faddr_off = 0;
 80053ce:	2300      	movs	r3, #0
 80053d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint16_t crc = 0;
 80053d2:	2300      	movs	r3, #0
 80053d4:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
	UINT read = 0;
 80053d8:	2300      	movs	r3, #0
 80053da:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t PageError = 0;
 80053dc:	2300      	movs	r3, #0
 80053de:	63bb      	str	r3, [r7, #56]	@ 0x38
	FLASH_EraseInitTypeDef erase_cfg = {0};
 80053e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	605a      	str	r2, [r3, #4]
 80053ea:	609a      	str	r2, [r3, #8]
 80053ec:	60da      	str	r2, [r3, #12]

	const uint32_t BANKSIZE = FLASH_SIZE >> 1;
 80053ee:	4b69      	ldr	r3, [pc, #420]	@ (8005594 <OTA_Apply+0x1f0>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d006      	beq.n	800540a <OTA_Apply+0x66>
 80053fc:	4b65      	ldr	r3, [pc, #404]	@ (8005594 <OTA_Apply+0x1f0>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	029b      	lsls	r3, r3, #10
 8005402:	085a      	lsrs	r2, r3, #1
 8005404:	4b64      	ldr	r3, [pc, #400]	@ (8005598 <OTA_Apply+0x1f4>)
 8005406:	4013      	ands	r3, r2
 8005408:	e001      	b.n	800540e <OTA_Apply+0x6a>
 800540a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800540e:	64fb      	str	r3, [r7, #76]	@ 0x4c

	FLASH_OBProgramInitTypeDef ob = {0};
 8005410:	463b      	mov	r3, r7
 8005412:	2228      	movs	r2, #40	@ 0x28
 8005414:	2100      	movs	r1, #0
 8005416:	4618      	mov	r0, r3
 8005418:	f010 fc84 	bl	8015d24 <memset>

	HAL_FLASHEx_OBGetConfig(&ob);
 800541c:	463b      	mov	r3, r7
 800541e:	4618      	mov	r0, r3
 8005420:	f007 ffd8 	bl	800d3d4 <HAL_FLASHEx_OBGetConfig>

	if ((ob.USERConfig & FLASH_OPTR_DUALBANK) == 0)
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d102      	bne.n	8005434 <OTA_Apply+0x90>
	{
		return -1;
 800542e:	f04f 33ff 	mov.w	r3, #4294967295
 8005432:	e0aa      	b.n	800558a <OTA_Apply+0x1e6>
	}

	ota_bank = (ob.USERConfig & FLASH_OPTR_BFB2) ? FLASH_BANK_1 : FLASH_BANK_2;
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <OTA_Apply+0x9e>
 800543e:	2301      	movs	r3, #1
 8005440:	e000      	b.n	8005444 <OTA_Apply+0xa0>
 8005442:	2302      	movs	r3, #2
 8005444:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a

	// L'indirizzo deve essere sempre quello del banco 2 (se fa il boot da BANK2 il BANK1 viene rimappato)
	faddr = FLASH_BASE + BANKSIZE;
 8005448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800544a:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800544e:	657b      	str	r3, [r7, #84]	@ 0x54

	if (HAL_FLASH_Unlock() != HAL_OK)
 8005450:	f007 fd94 	bl	800cf7c <HAL_FLASH_Unlock>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <OTA_Apply+0xbc>
	{
		return -1;
 800545a:	f04f 33ff 	mov.w	r3, #4294967295
 800545e:	e094      	b.n	800558a <OTA_Apply+0x1e6>
	}

	f_close(&sys.OTA_File);
 8005460:	484e      	ldr	r0, [pc, #312]	@ (800559c <OTA_Apply+0x1f8>)
 8005462:	f004 fdb9 	bl	8009fd8 <f_close>
	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ);
 8005466:	2201      	movs	r2, #1
 8005468:	494d      	ldr	r1, [pc, #308]	@ (80055a0 <OTA_Apply+0x1fc>)
 800546a:	484c      	ldr	r0, [pc, #304]	@ (800559c <OTA_Apply+0x1f8>)
 800546c:	f004 f8c0 	bl	80095f0 <f_open>
 8005470:	4603      	mov	r3, r0
 8005472:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

	if (fRes != FR_OK)
 8005476:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <OTA_Apply+0xe2>
	{
		result = -1;
 800547e:	f04f 33ff 	mov.w	r3, #4294967295
 8005482:	667b      	str	r3, [r7, #100]	@ 0x64
		goto DONE;
 8005484:	e07b      	b.n	800557e <OTA_Apply+0x1da>
	}

	if ((size = f_size(&sys.OTA_File)) > BANKSIZE)
 8005486:	4b47      	ldr	r3, [pc, #284]	@ (80055a4 <OTA_Apply+0x200>)
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	663b      	str	r3, [r7, #96]	@ 0x60
 800548c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800548e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005490:	429a      	cmp	r2, r3
 8005492:	d903      	bls.n	800549c <OTA_Apply+0xf8>
	{
		result = -1;
 8005494:	f04f 33ff 	mov.w	r3, #4294967295
 8005498:	667b      	str	r3, [r7, #100]	@ 0x64
		goto DONE;
 800549a:	e070      	b.n	800557e <OTA_Apply+0x1da>
	}

	erase_cfg.TypeErase = FLASH_TYPEERASE_MASSERASE;
 800549c:	2301      	movs	r3, #1
 800549e:	62bb      	str	r3, [r7, #40]	@ 0x28
	erase_cfg.Banks = ota_bank;
 80054a0:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80054a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_FLASHEx_Erase(&erase_cfg, &PageError) != HAL_OK)
 80054a6:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80054aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80054ae:	4611      	mov	r1, r2
 80054b0:	4618      	mov	r0, r3
 80054b2:	f007 fe85 	bl	800d1c0 <HAL_FLASHEx_Erase>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d026      	beq.n	800550a <OTA_Apply+0x166>
	{
		result = -1;
 80054bc:	f04f 33ff 	mov.w	r3, #4294967295
 80054c0:	667b      	str	r3, [r7, #100]	@ 0x64
		goto DONE;
 80054c2:	e05c      	b.n	800557e <OTA_Apply+0x1da>
	}

	while (size > 0)
	{
		pword = 0;
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		if (f_read(&sys.OTA_File, (uint8_t *)&pword, sizeof(pword), &read) < 0)
 80054d0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80054d4:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80054d8:	2208      	movs	r2, #8
 80054da:	4830      	ldr	r0, [pc, #192]	@ (800559c <OTA_Apply+0x1f8>)
 80054dc:	f004 fa20 	bl	8009920 <f_read>
			break;
		if (read == 0)
 80054e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d015      	beq.n	8005512 <OTA_Apply+0x16e>
			break;
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, faddr + faddr_off, pword) != HAL_OK)
 80054e6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80054e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054ea:	18d1      	adds	r1, r2, r3
 80054ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80054f0:	2000      	movs	r0, #0
 80054f2:	f007 fcd7 	bl	800cea4 <HAL_FLASH_Program>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10c      	bne.n	8005516 <OTA_Apply+0x172>
			break;
		faddr_off += sizeof(pword);
 80054fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054fe:	3308      	adds	r3, #8
 8005500:	65fb      	str	r3, [r7, #92]	@ 0x5c
		size -= read;
 8005502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005504:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	663b      	str	r3, [r7, #96]	@ 0x60
	while (size > 0)
 800550a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1d9      	bne.n	80054c4 <OTA_Apply+0x120>
 8005510:	e002      	b.n	8005518 <OTA_Apply+0x174>
			break;
 8005512:	bf00      	nop
 8005514:	e000      	b.n	8005518 <OTA_Apply+0x174>
			break;
 8005516:	bf00      	nop
	}

	if (size > 0)
 8005518:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <OTA_Apply+0x182>
	{
		result = -1;
 800551e:	f04f 33ff 	mov.w	r3, #4294967295
 8005522:	667b      	str	r3, [r7, #100]	@ 0x64
		goto DONE;
 8005524:	e02b      	b.n	800557e <OTA_Apply+0x1da>
	}

	HAL_FLASH_Lock();
 8005526:	f007 fd4b 	bl	800cfc0 <HAL_FLASH_Lock>

	HAL_FLASHEx_OBGetConfig(&ob);
 800552a:	463b      	mov	r3, r7
 800552c:	4618      	mov	r0, r3
 800552e:	f007 ff51 	bl	800d3d4 <HAL_FLASHEx_OBGetConfig>
	HAL_FLASH_Unlock();
 8005532:	f007 fd23 	bl	800cf7c <HAL_FLASH_Unlock>
	HAL_FLASH_OB_Unlock();
 8005536:	f007 fd53 	bl	800cfe0 <HAL_FLASH_OB_Unlock>

	ob.OptionType = OPTIONBYTE_USER;
 800553a:	2304      	movs	r3, #4
 800553c:	603b      	str	r3, [r7, #0]
	ob.USERType = OB_USER_BFB2;
 800553e:	2380      	movs	r3, #128	@ 0x80
 8005540:	617b      	str	r3, [r7, #20]
	ob.USERConfig = (ota_bank == FLASH_BANK_2) ? FLASH_OPTR_BFB2 : 0;
 8005542:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8005546:	2b02      	cmp	r3, #2
 8005548:	d102      	bne.n	8005550 <OTA_Apply+0x1ac>
 800554a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800554e:	e000      	b.n	8005552 <OTA_Apply+0x1ae>
 8005550:	2300      	movs	r3, #0
 8005552:	61bb      	str	r3, [r7, #24]

	if (HAL_FLASHEx_OBProgram(&ob) != HAL_OK)
 8005554:	463b      	mov	r3, r7
 8005556:	4618      	mov	r0, r3
 8005558:	f007 fece 	bl	800d2f8 <HAL_FLASHEx_OBProgram>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d007      	beq.n	8005572 <OTA_Apply+0x1ce>
	{
		HAL_FLASH_OB_Lock();
 8005562:	f007 fd59 	bl	800d018 <HAL_FLASH_OB_Lock>
		HAL_FLASH_Lock();
 8005566:	f007 fd2b 	bl	800cfc0 <HAL_FLASH_Lock>
		result = -1;
 800556a:	f04f 33ff 	mov.w	r3, #4294967295
 800556e:	667b      	str	r3, [r7, #100]	@ 0x64
		goto DONE;
 8005570:	e005      	b.n	800557e <OTA_Apply+0x1da>
	}

	HAL_FLASH_OB_Launch();
 8005572:	f007 fd61 	bl	800d038 <HAL_FLASH_OB_Launch>
	HAL_FLASH_OB_Lock();
 8005576:	f007 fd4f 	bl	800d018 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 800557a:	f007 fd21 	bl	800cfc0 <HAL_FLASH_Lock>

	DONE:

	f_close(&sys.OTA_File);
 800557e:	4807      	ldr	r0, [pc, #28]	@ (800559c <OTA_Apply+0x1f8>)
 8005580:	f004 fd2a 	bl	8009fd8 <f_close>

	HAL_FLASH_Lock();
 8005584:	f007 fd1c 	bl	800cfc0 <HAL_FLASH_Lock>

	return result;
 8005588:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
}
 800558a:	4618      	mov	r0, r3
 800558c:	3768      	adds	r7, #104	@ 0x68
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	1fff75e0 	.word	0x1fff75e0
 8005598:	01fffe00 	.word	0x01fffe00
 800559c:	20000744 	.word	0x20000744
 80055a0:	080172d8 	.word	0x080172d8
 80055a4:	20000740 	.word	0x20000740

080055a8 <Save_Data>:
#include "battery_charger.h"


/*-----ACQUISIZIONE MISURE E LOG DEI DATI-----*/
void Save_Data(void)
{
 80055a8:	b590      	push	{r4, r7, lr}
 80055aa:	f2ad 4ddc 	subw	sp, sp, #1244	@ 0x4dc
 80055ae:	af00      	add	r7, sp, #0
	if(flags.ADC_Half_Buffer)
 80055b0:	4b78      	ldr	r3, [pc, #480]	@ (8005794 <Save_Data+0x1ec>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d037      	beq.n	800562e <Save_Data+0x86>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[0], PRESS_HALF_LEN);
 80055be:	4b76      	ldr	r3, [pc, #472]	@ (8005798 <Save_Data+0x1f0>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	4b75      	ldr	r3, [pc, #468]	@ (800579c <Save_Data+0x1f4>)
 80055c6:	4413      	add	r3, r2
 80055c8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80055cc:	4974      	ldr	r1, [pc, #464]	@ (80057a0 <Save_Data+0x1f8>)
 80055ce:	4618      	mov	r0, r3
 80055d0:	f010 fc2c 	bl	8015e2c <memcpy>
		Last_Pressure = 0;
 80055d4:	4b73      	ldr	r3, [pc, #460]	@ (80057a4 <Save_Data+0x1fc>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 80055da:	2300      	movs	r3, #0
 80055dc:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 80055e0:	e00f      	b.n	8005602 <Save_Data+0x5a>
		{
			Last_Pressure += Pressure[i];
 80055e2:	4a6f      	ldr	r2, [pc, #444]	@ (80057a0 <Save_Data+0x1f8>)
 80055e4:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 80055e8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80055ec:	4b6d      	ldr	r3, [pc, #436]	@ (80057a4 <Save_Data+0x1fc>)
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	4413      	add	r3, r2
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	4b6b      	ldr	r3, [pc, #428]	@ (80057a4 <Save_Data+0x1fc>)
 80055f6:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 80055f8:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 80055fc:	3301      	adds	r3, #1
 80055fe:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 8005602:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 8005606:	2bc7      	cmp	r3, #199	@ 0xc7
 8005608:	ddeb      	ble.n	80055e2 <Save_Data+0x3a>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 800560a:	4b66      	ldr	r3, [pc, #408]	@ (80057a4 <Save_Data+0x1fc>)
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	4a66      	ldr	r2, [pc, #408]	@ (80057a8 <Save_Data+0x200>)
 8005610:	fba2 2303 	umull	r2, r3, r2, r3
 8005614:	099b      	lsrs	r3, r3, #6
 8005616:	b29a      	uxth	r2, r3
 8005618:	4b62      	ldr	r3, [pc, #392]	@ (80057a4 <Save_Data+0x1fc>)
 800561a:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[0]);
 800561c:	4860      	ldr	r0, [pc, #384]	@ (80057a0 <Save_Data+0x1f8>)
 800561e:	f000 fb47 	bl	8005cb0 <Warning_Detection>
		flags.ADC_Half_Buffer = 0;
 8005622:	4a5c      	ldr	r2, [pc, #368]	@ (8005794 <Save_Data+0x1ec>)
 8005624:	7813      	ldrb	r3, [r2, #0]
 8005626:	f023 0302 	bic.w	r3, r3, #2
 800562a:	7013      	strb	r3, [r2, #0]
 800562c:	e03e      	b.n	80056ac <Save_Data+0x104>
	}
	else if(flags.ADC_Full_Buffer)
 800562e:	4b59      	ldr	r3, [pc, #356]	@ (8005794 <Save_Data+0x1ec>)
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	f003 0304 	and.w	r3, r3, #4
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d037      	beq.n	80056ac <Save_Data+0x104>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[PRESS_HALF_SAMPLES], PRESS_HALF_LEN);
 800563c:	4b56      	ldr	r3, [pc, #344]	@ (8005798 <Save_Data+0x1f0>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	461a      	mov	r2, r3
 8005642:	4b56      	ldr	r3, [pc, #344]	@ (800579c <Save_Data+0x1f4>)
 8005644:	4413      	add	r3, r2
 8005646:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800564a:	4958      	ldr	r1, [pc, #352]	@ (80057ac <Save_Data+0x204>)
 800564c:	4618      	mov	r0, r3
 800564e:	f010 fbed 	bl	8015e2c <memcpy>
		Last_Pressure = 0;
 8005652:	4b54      	ldr	r3, [pc, #336]	@ (80057a4 <Save_Data+0x1fc>)
 8005654:	2200      	movs	r2, #0
 8005656:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 8005658:	23c8      	movs	r3, #200	@ 0xc8
 800565a:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 800565e:	e00f      	b.n	8005680 <Save_Data+0xd8>
		{
			Last_Pressure += Pressure[i];
 8005660:	4a4f      	ldr	r2, [pc, #316]	@ (80057a0 <Save_Data+0x1f8>)
 8005662:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 8005666:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800566a:	4b4e      	ldr	r3, [pc, #312]	@ (80057a4 <Save_Data+0x1fc>)
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	4413      	add	r3, r2
 8005670:	b29a      	uxth	r2, r3
 8005672:	4b4c      	ldr	r3, [pc, #304]	@ (80057a4 <Save_Data+0x1fc>)
 8005674:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 8005676:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 800567a:	3301      	adds	r3, #1
 800567c:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 8005680:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 8005684:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8005688:	dbea      	blt.n	8005660 <Save_Data+0xb8>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 800568a:	4b46      	ldr	r3, [pc, #280]	@ (80057a4 <Save_Data+0x1fc>)
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	4a46      	ldr	r2, [pc, #280]	@ (80057a8 <Save_Data+0x200>)
 8005690:	fba2 2303 	umull	r2, r3, r2, r3
 8005694:	099b      	lsrs	r3, r3, #6
 8005696:	b29a      	uxth	r2, r3
 8005698:	4b42      	ldr	r3, [pc, #264]	@ (80057a4 <Save_Data+0x1fc>)
 800569a:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[PRESS_HALF_SAMPLES]);
 800569c:	4843      	ldr	r0, [pc, #268]	@ (80057ac <Save_Data+0x204>)
 800569e:	f000 fb07 	bl	8005cb0 <Warning_Detection>
		flags.ADC_Full_Buffer = 0;
 80056a2:	4a3c      	ldr	r2, [pc, #240]	@ (8005794 <Save_Data+0x1ec>)
 80056a4:	7813      	ldrb	r3, [r2, #0]
 80056a6:	f023 0304 	bic.w	r3, r3, #4
 80056aa:	7013      	strb	r3, [r2, #0]
	}
	flags.ADC_Complete = 0;
 80056ac:	4a39      	ldr	r2, [pc, #228]	@ (8005794 <Save_Data+0x1ec>)
 80056ae:	7813      	ldrb	r3, [r2, #0]
 80056b0:	f023 0301 	bic.w	r3, r3, #1
 80056b4:	7013      	strb	r3, [r2, #0]
	Address_Offset += PRESS_HALF_LEN;
 80056b6:	4b38      	ldr	r3, [pc, #224]	@ (8005798 <Save_Data+0x1f0>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80056be:	4a36      	ldr	r2, [pc, #216]	@ (8005798 <Save_Data+0x1f0>)
 80056c0:	6013      	str	r3, [r2, #0]

	memcpy(Saving_Buffer + Address_Offset, Volume_Period, MAX_VOLUME_LEN);
 80056c2:	4b35      	ldr	r3, [pc, #212]	@ (8005798 <Save_Data+0x1f0>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	4b34      	ldr	r3, [pc, #208]	@ (800579c <Save_Data+0x1f4>)
 80056ca:	4413      	add	r3, r2
 80056cc:	2228      	movs	r2, #40	@ 0x28
 80056ce:	4938      	ldr	r1, [pc, #224]	@ (80057b0 <Save_Data+0x208>)
 80056d0:	4618      	mov	r0, r3
 80056d2:	f010 fbab 	bl	8015e2c <memcpy>
	uint8_t current_period_cnt = Period_cnt;
 80056d6:	4b37      	ldr	r3, [pc, #220]	@ (80057b4 <Save_Data+0x20c>)
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
	Last_Volume = 0;
 80056de:	4b36      	ldr	r3, [pc, #216]	@ (80057b8 <Save_Data+0x210>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < current_period_cnt; i++)
 80056e4:	2300      	movs	r3, #0
 80056e6:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 80056ea:	e010      	b.n	800570e <Save_Data+0x166>
	{
		Last_Volume += Volume_Period[i];
 80056ec:	4a30      	ldr	r2, [pc, #192]	@ (80057b0 <Save_Data+0x208>)
 80056ee:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 80056f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	4b2f      	ldr	r3, [pc, #188]	@ (80057b8 <Save_Data+0x210>)
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	4413      	add	r3, r2
 80056fe:	b29a      	uxth	r2, r3
 8005700:	4b2d      	ldr	r3, [pc, #180]	@ (80057b8 <Save_Data+0x210>)
 8005702:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < current_period_cnt; i++)
 8005704:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8005708:	3301      	adds	r3, #1
 800570a:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 800570e:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 8005712:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	@ 0x4cc
 8005716:	429a      	cmp	r2, r3
 8005718:	dbe8      	blt.n	80056ec <Save_Data+0x144>
	}
	Last_Volume = (uint16_t)(Last_Volume / current_period_cnt);
 800571a:	4b27      	ldr	r3, [pc, #156]	@ (80057b8 <Save_Data+0x210>)
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 8005724:	fb92 f3f3 	sdiv	r3, r2, r3
 8005728:	b29a      	uxth	r2, r3
 800572a:	4b23      	ldr	r3, [pc, #140]	@ (80057b8 <Save_Data+0x210>)
 800572c:	801a      	strh	r2, [r3, #0]
	memset(Volume_Period, 0, sizeof(Volume_Period));
 800572e:	2228      	movs	r2, #40	@ 0x28
 8005730:	2100      	movs	r1, #0
 8005732:	481f      	ldr	r0, [pc, #124]	@ (80057b0 <Save_Data+0x208>)
 8005734:	f010 faf6 	bl	8015d24 <memset>
	Period_cnt = 0;
 8005738:	4b1e      	ldr	r3, [pc, #120]	@ (80057b4 <Save_Data+0x20c>)
 800573a:	2200      	movs	r2, #0
 800573c:	701a      	strb	r2, [r3, #0]
	Address_Offset += MAX_VOLUME_LEN;
 800573e:	4b16      	ldr	r3, [pc, #88]	@ (8005798 <Save_Data+0x1f0>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3328      	adds	r3, #40	@ 0x28
 8005744:	4a14      	ldr	r2, [pc, #80]	@ (8005798 <Save_Data+0x1f0>)
 8005746:	6013      	str	r3, [r2, #0]

	if(sys.ACC_Present)
 8005748:	4b1c      	ldr	r3, [pc, #112]	@ (80057bc <Save_Data+0x214>)
 800574a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800574e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 80a4 	beq.w	80058a6 <Save_Data+0x2fe>
	{
		memcpy(Saving_Buffer + Address_Offset, Acceleration, ACCELERATION_LEN);
 800575e:	4b0e      	ldr	r3, [pc, #56]	@ (8005798 <Save_Data+0x1f0>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	461a      	mov	r2, r3
 8005764:	4b0d      	ldr	r3, [pc, #52]	@ (800579c <Save_Data+0x1f4>)
 8005766:	4413      	add	r3, r2
 8005768:	4a15      	ldr	r2, [pc, #84]	@ (80057c0 <Save_Data+0x218>)
 800576a:	4618      	mov	r0, r3
 800576c:	4611      	mov	r1, r2
 800576e:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8005772:	461a      	mov	r2, r3
 8005774:	f010 fb5a 	bl	8015e2c <memcpy>
		Last_Acceleration.x = 0;
 8005778:	4b12      	ldr	r3, [pc, #72]	@ (80057c4 <Save_Data+0x21c>)
 800577a:	2200      	movs	r2, #0
 800577c:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = 0;
 800577e:	4b11      	ldr	r3, [pc, #68]	@ (80057c4 <Save_Data+0x21c>)
 8005780:	2200      	movs	r2, #0
 8005782:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = 0;
 8005784:	4b0f      	ldr	r3, [pc, #60]	@ (80057c4 <Save_Data+0x21c>)
 8005786:	2200      	movs	r2, #0
 8005788:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 800578a:	2300      	movs	r3, #0
 800578c:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 8005790:	e064      	b.n	800585c <Save_Data+0x2b4>
 8005792:	bf00      	nop
 8005794:	20001c68 	.word	0x20001c68
 8005798:	20004eb8 	.word	0x20004eb8
 800579c:	20004788 	.word	0x20004788
 80057a0:	20003e54 	.word	0x20003e54
 80057a4:	20004714 	.word	0x20004714
 80057a8:	51eb851f 	.word	0x51eb851f
 80057ac:	20003fe4 	.word	0x20003fe4
 80057b0:	20004174 	.word	0x20004174
 80057b4:	20003e50 	.word	0x20003e50
 80057b8:	20004716 	.word	0x20004716
 80057bc:	20000740 	.word	0x20000740
 80057c0:	2000419c 	.word	0x2000419c
 80057c4:	20004718 	.word	0x20004718
		{
			Last_Acceleration.x += Acceleration[i+1] | (Acceleration[i+2] << 8); 
 80057c8:	4b83      	ldr	r3, [pc, #524]	@ (80059d8 <Save_Data+0x430>)
 80057ca:	885a      	ldrh	r2, [r3, #2]
 80057cc:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 80057d0:	3301      	adds	r3, #1
 80057d2:	4982      	ldr	r1, [pc, #520]	@ (80059dc <Save_Data+0x434>)
 80057d4:	5ccb      	ldrb	r3, [r1, r3]
 80057d6:	b219      	sxth	r1, r3
 80057d8:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 80057dc:	3302      	adds	r3, #2
 80057de:	487f      	ldr	r0, [pc, #508]	@ (80059dc <Save_Data+0x434>)
 80057e0:	5cc3      	ldrb	r3, [r0, r3]
 80057e2:	b21b      	sxth	r3, r3
 80057e4:	021b      	lsls	r3, r3, #8
 80057e6:	b21b      	sxth	r3, r3
 80057e8:	430b      	orrs	r3, r1
 80057ea:	b21b      	sxth	r3, r3
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	4413      	add	r3, r2
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	4b79      	ldr	r3, [pc, #484]	@ (80059d8 <Save_Data+0x430>)
 80057f4:	805a      	strh	r2, [r3, #2]
			Last_Acceleration.y += Acceleration[i+3] | (Acceleration[i+4] << 8); 
 80057f6:	4b78      	ldr	r3, [pc, #480]	@ (80059d8 <Save_Data+0x430>)
 80057f8:	889a      	ldrh	r2, [r3, #4]
 80057fa:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 80057fe:	3303      	adds	r3, #3
 8005800:	4976      	ldr	r1, [pc, #472]	@ (80059dc <Save_Data+0x434>)
 8005802:	5ccb      	ldrb	r3, [r1, r3]
 8005804:	b219      	sxth	r1, r3
 8005806:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 800580a:	3304      	adds	r3, #4
 800580c:	4873      	ldr	r0, [pc, #460]	@ (80059dc <Save_Data+0x434>)
 800580e:	5cc3      	ldrb	r3, [r0, r3]
 8005810:	b21b      	sxth	r3, r3
 8005812:	021b      	lsls	r3, r3, #8
 8005814:	b21b      	sxth	r3, r3
 8005816:	430b      	orrs	r3, r1
 8005818:	b21b      	sxth	r3, r3
 800581a:	b29b      	uxth	r3, r3
 800581c:	4413      	add	r3, r2
 800581e:	b29a      	uxth	r2, r3
 8005820:	4b6d      	ldr	r3, [pc, #436]	@ (80059d8 <Save_Data+0x430>)
 8005822:	809a      	strh	r2, [r3, #4]
			Last_Acceleration.z += Acceleration[i+5] | (Acceleration[i+6] << 8); 
 8005824:	4b6c      	ldr	r3, [pc, #432]	@ (80059d8 <Save_Data+0x430>)
 8005826:	88da      	ldrh	r2, [r3, #6]
 8005828:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 800582c:	3305      	adds	r3, #5
 800582e:	496b      	ldr	r1, [pc, #428]	@ (80059dc <Save_Data+0x434>)
 8005830:	5ccb      	ldrb	r3, [r1, r3]
 8005832:	b219      	sxth	r1, r3
 8005834:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005838:	3306      	adds	r3, #6
 800583a:	4868      	ldr	r0, [pc, #416]	@ (80059dc <Save_Data+0x434>)
 800583c:	5cc3      	ldrb	r3, [r0, r3]
 800583e:	b21b      	sxth	r3, r3
 8005840:	021b      	lsls	r3, r3, #8
 8005842:	b21b      	sxth	r3, r3
 8005844:	430b      	orrs	r3, r1
 8005846:	b21b      	sxth	r3, r3
 8005848:	b29b      	uxth	r3, r3
 800584a:	4413      	add	r3, r2
 800584c:	b29a      	uxth	r2, r3
 800584e:	4b62      	ldr	r3, [pc, #392]	@ (80059d8 <Save_Data+0x430>)
 8005850:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 8005852:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005856:	3307      	adds	r3, #7
 8005858:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 800585c:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005860:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 8005864:	dbb0      	blt.n	80057c8 <Save_Data+0x220>
		}
		Last_Acceleration.x = (uint16_t)(Last_Acceleration.x / (ACCELERATION_LEN / 7));
 8005866:	4b5c      	ldr	r3, [pc, #368]	@ (80059d8 <Save_Data+0x430>)
 8005868:	885b      	ldrh	r3, [r3, #2]
 800586a:	4a5d      	ldr	r2, [pc, #372]	@ (80059e0 <Save_Data+0x438>)
 800586c:	fba2 2303 	umull	r2, r3, r2, r3
 8005870:	099b      	lsrs	r3, r3, #6
 8005872:	b29a      	uxth	r2, r3
 8005874:	4b58      	ldr	r3, [pc, #352]	@ (80059d8 <Save_Data+0x430>)
 8005876:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = (uint16_t)(Last_Acceleration.y / (ACCELERATION_LEN / 7));
 8005878:	4b57      	ldr	r3, [pc, #348]	@ (80059d8 <Save_Data+0x430>)
 800587a:	889b      	ldrh	r3, [r3, #4]
 800587c:	4a58      	ldr	r2, [pc, #352]	@ (80059e0 <Save_Data+0x438>)
 800587e:	fba2 2303 	umull	r2, r3, r2, r3
 8005882:	099b      	lsrs	r3, r3, #6
 8005884:	b29a      	uxth	r2, r3
 8005886:	4b54      	ldr	r3, [pc, #336]	@ (80059d8 <Save_Data+0x430>)
 8005888:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = (uint16_t)(Last_Acceleration.z / (ACCELERATION_LEN / 7));
 800588a:	4b53      	ldr	r3, [pc, #332]	@ (80059d8 <Save_Data+0x430>)
 800588c:	88db      	ldrh	r3, [r3, #6]
 800588e:	4a54      	ldr	r2, [pc, #336]	@ (80059e0 <Save_Data+0x438>)
 8005890:	fba2 2303 	umull	r2, r3, r2, r3
 8005894:	099b      	lsrs	r3, r3, #6
 8005896:	b29a      	uxth	r2, r3
 8005898:	4b4f      	ldr	r3, [pc, #316]	@ (80059d8 <Save_Data+0x430>)
 800589a:	80da      	strh	r2, [r3, #6]
		flags.ACC_Complete = 0;
 800589c:	4a51      	ldr	r2, [pc, #324]	@ (80059e4 <Save_Data+0x43c>)
 800589e:	7813      	ldrb	r3, [r2, #0]
 80058a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058a4:	7013      	strb	r3, [r2, #0]
	}
	Address_Offset += ACCELERATION_LEN;
 80058a6:	4b50      	ldr	r3, [pc, #320]	@ (80059e8 <Save_Data+0x440>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 80058ae:	4a4e      	ldr	r2, [pc, #312]	@ (80059e8 <Save_Data+0x440>)
 80058b0:	6013      	str	r3, [r2, #0]

	INA3221_Read_Measure(&Supply);
 80058b2:	484e      	ldr	r0, [pc, #312]	@ (80059ec <Save_Data+0x444>)
 80058b4:	f7fb fbb2 	bl	800101c <INA3221_Read_Measure>
	uint16_t new_temp = 0;
 80058b8:	2300      	movs	r3, #0
 80058ba:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4
	if((new_temp = Read_Temperature()) != 0)
 80058be:	f7fb fb53 	bl	8000f68 <Read_Temperature>
 80058c2:	4603      	mov	r3, r0
 80058c4:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4
 80058c8:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <Save_Data+0x330>
	{
		Temperature = new_temp;
 80058d0:	4a47      	ldr	r2, [pc, #284]	@ (80059f0 <Save_Data+0x448>)
 80058d2:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 80058d6:	8013      	strh	r3, [r2, #0]
	}
	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 80058d8:	4946      	ldr	r1, [pc, #280]	@ (80059f4 <Save_Data+0x44c>)
 80058da:	203b      	movs	r0, #59	@ 0x3b
 80058dc:	f7fc fe34 	bl	8002548 <BC_MultiRead_Reg>

	uint8_t compressed_data[MAX_COMPRESSED_SIZE];
	Compressed_Sample_Typedef sample;
    sample.compressed_size = Compress_Sample(Saving_Buffer, SAVING_BUFFER_LEN, compressed_data);
 80058e0:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80058e4:	f2a3 44cc 	subw	r4, r3, #1228	@ 0x4cc
 80058e8:	4638      	mov	r0, r7
 80058ea:	f107 0314 	add.w	r3, r7, #20
 80058ee:	f44f 62e6 	mov.w	r2, #1840	@ 0x730
 80058f2:	4941      	ldr	r1, [pc, #260]	@ (80059f8 <Save_Data+0x450>)
 80058f4:	f000 fb40 	bl	8005f78 <Compress_Sample>
 80058f8:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80058fc:	f5a3 629b 	sub.w	r2, r3, #1240	@ 0x4d8
 8005900:	4623      	mov	r3, r4
 8005902:	6810      	ldr	r0, [r2, #0]
 8005904:	6018      	str	r0, [r3, #0]
 8005906:	8892      	ldrh	r2, [r2, #4]
 8005908:	809a      	strh	r2, [r3, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800590a:	b672      	cpsid	i
}
 800590c:	bf00      	nop

	__disable_irq();
	RAM_Save_Measure(&sample, compressed_data);
 800590e:	f107 0214 	add.w	r2, r7, #20
 8005912:	f107 030c 	add.w	r3, r7, #12
 8005916:	4611      	mov	r1, r2
 8005918:	4618      	mov	r0, r3
 800591a:	f000 fa2d 	bl	8005d78 <RAM_Save_Measure>
  __ASM volatile ("cpsie i" : : : "memory");
 800591e:	b662      	cpsie	i
}
 8005920:	bf00      	nop
	__enable_irq();

	Address_Offset = 0;
 8005922:	4b31      	ldr	r3, [pc, #196]	@ (80059e8 <Save_Data+0x440>)
 8005924:	2200      	movs	r2, #0
 8005926:	601a      	str	r2, [r3, #0]

	if(flags.Hammer_Detected || flags.Threshold_Detected)
 8005928:	4b2e      	ldr	r3, [pc, #184]	@ (80059e4 <Save_Data+0x43c>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	f003 0308 	and.w	r3, r3, #8
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d106      	bne.n	8005944 <Save_Data+0x39c>
 8005936:	4b2b      	ldr	r3, [pc, #172]	@ (80059e4 <Save_Data+0x43c>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	f003 0310 	and.w	r3, r3, #16
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	d043      	beq.n	80059cc <Save_Data+0x424>
	{
		Cycles_After_Warning++;
 8005944:	4b2d      	ldr	r3, [pc, #180]	@ (80059fc <Save_Data+0x454>)
 8005946:	881b      	ldrh	r3, [r3, #0]
 8005948:	3301      	adds	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	4b2b      	ldr	r3, [pc, #172]	@ (80059fc <Save_Data+0x454>)
 800594e:	801a      	strh	r2, [r3, #0]
		if(Cycles_After_Warning >= config.buffering_secs * (config.samp_freq / ACC_FIFO_WATERMARK))
 8005950:	4b2a      	ldr	r3, [pc, #168]	@ (80059fc <Save_Data+0x454>)
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	4619      	mov	r1, r3
 8005956:	4b2a      	ldr	r3, [pc, #168]	@ (8005a00 <Save_Data+0x458>)
 8005958:	791b      	ldrb	r3, [r3, #4]
 800595a:	4618      	mov	r0, r3
 800595c:	4b28      	ldr	r3, [pc, #160]	@ (8005a00 <Save_Data+0x458>)
 800595e:	885b      	ldrh	r3, [r3, #2]
 8005960:	4a1f      	ldr	r2, [pc, #124]	@ (80059e0 <Save_Data+0x438>)
 8005962:	fba2 2303 	umull	r2, r3, r2, r3
 8005966:	099b      	lsrs	r3, r3, #6
 8005968:	b29b      	uxth	r3, r3
 800596a:	fb00 f303 	mul.w	r3, r0, r3
 800596e:	4299      	cmp	r1, r3
 8005970:	db2c      	blt.n	80059cc <Save_Data+0x424>
		{
			if(!flags.CMD.Measure_Request)
 8005972:	4b1c      	ldr	r3, [pc, #112]	@ (80059e4 <Save_Data+0x43c>)
 8005974:	789b      	ldrb	r3, [r3, #2]
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	d125      	bne.n	80059cc <Save_Data+0x424>
			{
				Switch_Buffer();
 8005980:	f000 f844 	bl	8005a0c <Switch_Buffer>
				flags.CMD.Measure_Request = 1;
 8005984:	4a17      	ldr	r2, [pc, #92]	@ (80059e4 <Save_Data+0x43c>)
 8005986:	7893      	ldrb	r3, [r2, #2]
 8005988:	f043 0302 	orr.w	r3, r3, #2
 800598c:	7093      	strb	r3, [r2, #2]
				Send_Measure_Addr = Saved_Bytes;
 800598e:	4b1d      	ldr	r3, [pc, #116]	@ (8005a04 <Save_Data+0x45c>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a1d      	ldr	r2, [pc, #116]	@ (8005a08 <Save_Data+0x460>)
 8005994:	6013      	str	r3, [r2, #0]
				Cycles_After_Warning = 0;
 8005996:	4b19      	ldr	r3, [pc, #100]	@ (80059fc <Save_Data+0x454>)
 8005998:	2200      	movs	r2, #0
 800599a:	801a      	strh	r2, [r3, #0]
				if(flags.Hammer_Detected)
 800599c:	4b11      	ldr	r3, [pc, #68]	@ (80059e4 <Save_Data+0x43c>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	f003 0308 	and.w	r3, r3, #8
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d004      	beq.n	80059b4 <Save_Data+0x40c>
				{
					flags.Hammer_Detected = 0;
 80059aa:	4a0e      	ldr	r2, [pc, #56]	@ (80059e4 <Save_Data+0x43c>)
 80059ac:	7813      	ldrb	r3, [r2, #0]
 80059ae:	f023 0308 	bic.w	r3, r3, #8
 80059b2:	7013      	strb	r3, [r2, #0]
				}
				if(flags.Threshold_Detected)
 80059b4:	4b0b      	ldr	r3, [pc, #44]	@ (80059e4 <Save_Data+0x43c>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	f003 0310 	and.w	r3, r3, #16
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d004      	beq.n	80059cc <Save_Data+0x424>
				{
					flags.Threshold_Detected = 0;
 80059c2:	4a08      	ldr	r2, [pc, #32]	@ (80059e4 <Save_Data+0x43c>)
 80059c4:	7813      	ldrb	r3, [r2, #0]
 80059c6:	f023 0310 	bic.w	r3, r3, #16
 80059ca:	7013      	strb	r3, [r2, #0]
				}
			}
		}
	}

}
 80059cc:	bf00      	nop
 80059ce:	f207 47dc 	addw	r7, r7, #1244	@ 0x4dc
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd90      	pop	{r4, r7, pc}
 80059d6:	bf00      	nop
 80059d8:	20004718 	.word	0x20004718
 80059dc:	2000419c 	.word	0x2000419c
 80059e0:	51eb851f 	.word	0x51eb851f
 80059e4:	20001c68 	.word	0x20001c68
 80059e8:	20004eb8 	.word	0x20004eb8
 80059ec:	20003e44 	.word	0x20003e44
 80059f0:	20004720 	.word	0x20004720
 80059f4:	20004722 	.word	0x20004722
 80059f8:	20004788 	.word	0x20004788
 80059fc:	20004ebc 	.word	0x20004ebc
 8005a00:	20001c6c 	.word	0x20001c6c
 8005a04:	20004ec0 	.word	0x20004ec0
 8005a08:	20004ec8 	.word	0x20004ec8

08005a0c <Switch_Buffer>:

/*-----CAMBIO BUFFER-----*/
void Switch_Buffer(void)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	af00      	add	r7, sp, #0
    sys.Inactive_RAM_Len = sys.Current_RAM_Len;
 8005a10:	4b23      	ldr	r3, [pc, #140]	@ (8005aa0 <Switch_Buffer+0x94>)
 8005a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a16:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005a1a:	4a21      	ldr	r2, [pc, #132]	@ (8005aa0 <Switch_Buffer+0x94>)
 8005a1c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005a20:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

    if (sys.Active_RAM_Buffer == 0) 
 8005a24:	4b1e      	ldr	r3, [pc, #120]	@ (8005aa0 <Switch_Buffer+0x94>)
 8005a26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a2a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d116      	bne.n	8005a60 <Switch_Buffer+0x54>
	{
		sys.RAM_Buffer_Base_tosend = RAM_SECOND_BUFFER_ADD;
 8005a32:	4b1b      	ldr	r3, [pc, #108]	@ (8005aa0 <Switch_Buffer+0x94>)
 8005a34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a38:	461a      	mov	r2, r3
 8005a3a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005a3e:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
        sys.Active_RAM_Buffer = 1;
 8005a42:	4b17      	ldr	r3, [pc, #92]	@ (8005aa0 <Switch_Buffer+0x94>)
 8005a44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        sys.Current_RAM_Base = RAM_SECOND_BUFFER_ADD;
 8005a4e:	4b14      	ldr	r3, [pc, #80]	@ (8005aa0 <Switch_Buffer+0x94>)
 8005a50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a54:	461a      	mov	r2, r3
 8005a56:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005a5a:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
 8005a5e:	e013      	b.n	8005a88 <Switch_Buffer+0x7c>
    } 
	else 
	{
		sys.RAM_Buffer_Base_tosend = RAM_FIRST_BUFFER_ADD;
 8005a60:	4b0f      	ldr	r3, [pc, #60]	@ (8005aa0 <Switch_Buffer+0x94>)
 8005a62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a66:	461a      	mov	r2, r3
 8005a68:	2300      	movs	r3, #0
 8005a6a:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
        sys.Active_RAM_Buffer = 0;
 8005a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005aa0 <Switch_Buffer+0x94>)
 8005a70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        sys.Current_RAM_Base = RAM_FIRST_BUFFER_ADD;
 8005a7a:	4b09      	ldr	r3, [pc, #36]	@ (8005aa0 <Switch_Buffer+0x94>)
 8005a7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a80:	461a      	mov	r2, r3
 8005a82:	2300      	movs	r3, #0
 8005a84:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
    }

    sys.Current_RAM_Len = 0;
 8005a88:	4b05      	ldr	r3, [pc, #20]	@ (8005aa0 <Switch_Buffer+0x94>)
 8005a8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a8e:	461a      	mov	r2, r3
 8005a90:	2300      	movs	r3, #0
 8005a92:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8005a96:	bf00      	nop
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	20000740 	.word	0x20000740

08005aa4 <Erase_RAM_Data>:

/*-----CANCELLAZIONE DATI RAM-----*/
void Erase_RAM_Data(void)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8005aaa:	af00      	add	r7, sp, #0
	uint8_t zero_buffer[1024] = {0};
 8005aac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8005ab0:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005aba:	461a      	mov	r2, r3
 8005abc:	2100      	movs	r1, #0
 8005abe:	f010 f931 	bl	8015d24 <memset>
	for (uint32_t addr = 0; addr < 0x800000; addr += sizeof(zero_buffer)) 
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8005ac8:	e00d      	b.n	8005ae6 <Erase_RAM_Data+0x42>
	{
		RAM_Write(addr, sizeof(zero_buffer), zero_buffer);
 8005aca:	1d3b      	adds	r3, r7, #4
 8005acc:	461a      	mov	r2, r3
 8005ace:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005ad2:	f8d7 0404 	ldr.w	r0, [r7, #1028]	@ 0x404
 8005ad6:	f001 fa07 	bl	8006ee8 <RAM_Write>
	for (uint32_t addr = 0; addr < 0x800000; addr += sizeof(zero_buffer)) 
 8005ada:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8005ade:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ae2:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8005ae6:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8005aea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005aee:	d3ec      	bcc.n	8005aca <Erase_RAM_Data+0x26>
	}
}
 8005af0:	bf00      	nop
 8005af2:	bf00      	nop
 8005af4:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <Start_Measure>:


/*-----AVVIO MISURA-----*/
void Start_Measure(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	af00      	add	r7, sp, #0
	Erase_RAM_Data();
 8005b00:	f7ff ffd0 	bl	8005aa4 <Erase_RAM_Data>
	sys.RAM_Samples_Number = (config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * 2;
 8005b04:	4b4a      	ldr	r3, [pc, #296]	@ (8005c30 <Start_Measure+0x134>)
 8005b06:	885b      	ldrh	r3, [r3, #2]
 8005b08:	4a4a      	ldr	r2, [pc, #296]	@ (8005c34 <Start_Measure+0x138>)
 8005b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0e:	099b      	lsrs	r3, r3, #6
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	461a      	mov	r2, r3
 8005b14:	4b46      	ldr	r3, [pc, #280]	@ (8005c30 <Start_Measure+0x134>)
 8005b16:	791b      	ldrb	r3, [r3, #4]
 8005b18:	fb02 f303 	mul.w	r3, r2, r3
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	461a      	mov	r2, r3
 8005b20:	4b45      	ldr	r3, [pc, #276]	@ (8005c38 <Start_Measure+0x13c>)
 8005b22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b26:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	sys.Active_RAM_Buffer = 0;
 8005b2a:	4b43      	ldr	r3, [pc, #268]	@ (8005c38 <Start_Measure+0x13c>)
 8005b2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
	sys.Inactive_RAM_Len = 0;
 8005b36:	4b40      	ldr	r3, [pc, #256]	@ (8005c38 <Start_Measure+0x13c>)
 8005b38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
	sys.Current_RAM_Base = RAM_FIRST_BUFFER_ADD;
 8005b44:	4b3c      	ldr	r3, [pc, #240]	@ (8005c38 <Start_Measure+0x13c>)
 8005b46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
	sys.Current_RAM_Len = 0;
 8005b52:	4b39      	ldr	r3, [pc, #228]	@ (8005c38 <Start_Measure+0x13c>)
 8005b54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b58:	461a      	mov	r2, r3
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
	flags.SIM_isConnected = 1;
 8005b60:	4a36      	ldr	r2, [pc, #216]	@ (8005c3c <Start_Measure+0x140>)
 8005b62:	7853      	ldrb	r3, [r2, #1]
 8005b64:	f043 0308 	orr.w	r3, r3, #8
 8005b68:	7053      	strb	r3, [r2, #1]
	memset(Pressure, 0, sizeof(Pressure));
 8005b6a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8005b6e:	2100      	movs	r1, #0
 8005b70:	4833      	ldr	r0, [pc, #204]	@ (8005c40 <Start_Measure+0x144>)
 8005b72:	f010 f8d7 	bl	8015d24 <memset>
	memset(Volume_Period, 0, sizeof(Volume_Period));
 8005b76:	2228      	movs	r2, #40	@ 0x28
 8005b78:	2100      	movs	r1, #0
 8005b7a:	4832      	ldr	r0, [pc, #200]	@ (8005c44 <Start_Measure+0x148>)
 8005b7c:	f010 f8d2 	bl	8015d24 <memset>
	memset(Acceleration, 0, sizeof(Acceleration));
 8005b80:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8005b84:	2100      	movs	r1, #0
 8005b86:	4830      	ldr	r0, [pc, #192]	@ (8005c48 <Start_Measure+0x14c>)
 8005b88:	f010 f8cc 	bl	8015d24 <memset>
	memset(&Supply, 0, sizeof(Supply));
 8005b8c:	220c      	movs	r2, #12
 8005b8e:	2100      	movs	r1, #0
 8005b90:	482e      	ldr	r0, [pc, #184]	@ (8005c4c <Start_Measure+0x150>)
 8005b92:	f010 f8c7 	bl	8015d24 <memset>
	Temperature = 0;
 8005b96:	4b2e      	ldr	r3, [pc, #184]	@ (8005c50 <Start_Measure+0x154>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	801a      	strh	r2, [r3, #0]
	Saved_Bytes = 0;
 8005b9c:	4b2d      	ldr	r3, [pc, #180]	@ (8005c54 <Start_Measure+0x158>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]
	Saved_Samples = 0;
 8005ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8005c58 <Start_Measure+0x15c>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	801a      	strh	r2, [r3, #0]
	Address_Offset = 0;
 8005ba8:	4b2c      	ldr	r3, [pc, #176]	@ (8005c5c <Start_Measure+0x160>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	601a      	str	r2, [r3, #0]
	Cycles_After_Warning = 0;
 8005bae:	4b2c      	ldr	r3, [pc, #176]	@ (8005c60 <Start_Measure+0x164>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	801a      	strh	r2, [r3, #0]
	Clear_Flags();
 8005bb4:	f000 ff46 	bl	8006a44 <Clear_Flags>

	ADC_TIMER->Instance->PSC = 100 - 1;
 8005bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8005c64 <Start_Measure+0x168>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2263      	movs	r2, #99	@ 0x63
 8005bbe:	629a      	str	r2, [r3, #40]	@ 0x28
	ADC_TIMER->Instance->ARR = (uint32_t)(SystemCoreClock / (ADC_TIMER->Instance->PSC * config.samp_freq)) - 1;
 8005bc0:	4b29      	ldr	r3, [pc, #164]	@ (8005c68 <Start_Measure+0x16c>)
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	4b27      	ldr	r3, [pc, #156]	@ (8005c64 <Start_Measure+0x168>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bca:	4919      	ldr	r1, [pc, #100]	@ (8005c30 <Start_Measure+0x134>)
 8005bcc:	8849      	ldrh	r1, [r1, #2]
 8005bce:	fb01 f303 	mul.w	r3, r1, r3
 8005bd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bd6:	4b23      	ldr	r3, [pc, #140]	@ (8005c64 <Start_Measure+0x168>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3a01      	subs	r2, #1
 8005bdc:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->ARR = (uint32_t)(config.samp_freq / 25) - 1;
 8005bde:	4b14      	ldr	r3, [pc, #80]	@ (8005c30 <Start_Measure+0x134>)
 8005be0:	885b      	ldrh	r3, [r3, #2]
 8005be2:	4a14      	ldr	r2, [pc, #80]	@ (8005c34 <Start_Measure+0x138>)
 8005be4:	fba2 2303 	umull	r2, r3, r2, r3
 8005be8:	08db      	lsrs	r3, r3, #3
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	461a      	mov	r2, r3
 8005bee:	4b1f      	ldr	r3, [pc, #124]	@ (8005c6c <Start_Measure+0x170>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3a01      	subs	r2, #1
 8005bf4:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->CCR3 = (uint32_t)((ACC_TIMER->Instance->ARR + 1) / 2);
 8005bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8005c6c <Start_Measure+0x170>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8005c6c <Start_Measure+0x170>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	0852      	lsrs	r2, r2, #1
 8005c04:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_IC_Start_IT(VOLUME_TIMER, TIM_CHANNEL_1);
 8005c06:	2100      	movs	r1, #0
 8005c08:	4819      	ldr	r0, [pc, #100]	@ (8005c70 <Start_Measure+0x174>)
 8005c0a:	f00d f807 	bl	8012c1c <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(ACC_TIMER, TIM_CHANNEL_3);
 8005c0e:	2108      	movs	r1, #8
 8005c10:	4816      	ldr	r0, [pc, #88]	@ (8005c6c <Start_Measure+0x170>)
 8005c12:	f00c fe0f 	bl	8012834 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(PRESSURE_ADC, (uint32_t*)&Pressure, PRESS_FULL_SAMPLES);
 8005c16:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005c1a:	4909      	ldr	r1, [pc, #36]	@ (8005c40 <Start_Measure+0x144>)
 8005c1c:	4815      	ldr	r0, [pc, #84]	@ (8005c74 <Start_Measure+0x178>)
 8005c1e:	f005 fba5 	bl	800b36c <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start_IT(ADC_TIMER, TIM_CHANNEL_3);
 8005c22:	2108      	movs	r1, #8
 8005c24:	480f      	ldr	r0, [pc, #60]	@ (8005c64 <Start_Measure+0x168>)
 8005c26:	f00c fb6b 	bl	8012300 <HAL_TIM_OC_Start_IT>
}
 8005c2a:	bf00      	nop
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	20001c6c 	.word	0x20001c6c
 8005c34:	51eb851f 	.word	0x51eb851f
 8005c38:	20000740 	.word	0x20000740
 8005c3c:	20001c68 	.word	0x20001c68
 8005c40:	20003e54 	.word	0x20003e54
 8005c44:	20004174 	.word	0x20004174
 8005c48:	2000419c 	.word	0x2000419c
 8005c4c:	20003e44 	.word	0x20003e44
 8005c50:	20004720 	.word	0x20004720
 8005c54:	20004ec0 	.word	0x20004ec0
 8005c58:	20004ec4 	.word	0x20004ec4
 8005c5c:	20004eb8 	.word	0x20004eb8
 8005c60:	20004ebc 	.word	0x20004ebc
 8005c64:	20000550 	.word	0x20000550
 8005c68:	20000168 	.word	0x20000168
 8005c6c:	20000504 	.word	0x20000504
 8005c70:	200004b8 	.word	0x200004b8
 8005c74:	20000218 	.word	0x20000218

08005c78 <Stop_Measure>:

/*-----FINE MISURA-----*/
void Stop_Measure(void)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(PRESSURE_ADC);
 8005c7c:	4808      	ldr	r0, [pc, #32]	@ (8005ca0 <Stop_Measure+0x28>)
 8005c7e:	f005 fc31 	bl	800b4e4 <HAL_ADC_Stop_DMA>
	HAL_TIM_OC_Stop_IT(ADC_TIMER, TIM_CHANNEL_3);
 8005c82:	2108      	movs	r1, #8
 8005c84:	4807      	ldr	r0, [pc, #28]	@ (8005ca4 <Stop_Measure+0x2c>)
 8005c86:	f00c fc8f 	bl	80125a8 <HAL_TIM_OC_Stop_IT>
	HAL_TIM_PWM_Stop(ACC_TIMER, TIM_CHANNEL_3);
 8005c8a:	2108      	movs	r1, #8
 8005c8c:	4806      	ldr	r0, [pc, #24]	@ (8005ca8 <Stop_Measure+0x30>)
 8005c8e:	f00c fed7 	bl	8012a40 <HAL_TIM_PWM_Stop>
	HAL_TIM_IC_Stop_IT(VOLUME_TIMER, TIM_CHANNEL_1);
 8005c92:	2100      	movs	r1, #0
 8005c94:	4805      	ldr	r0, [pc, #20]	@ (8005cac <Stop_Measure+0x34>)
 8005c96:	f00d f90b 	bl	8012eb0 <HAL_TIM_IC_Stop_IT>
}
 8005c9a:	bf00      	nop
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	20000218 	.word	0x20000218
 8005ca4:	20000550 	.word	0x20000550
 8005ca8:	20000504 	.word	0x20000504
 8005cac:	200004b8 	.word	0x200004b8

08005cb0 <Warning_Detection>:

/*-----DETECTION COLPO D'ARIETE-----*/
void Warning_Detection(uint16_t* Data)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
	uint16_t max = Data[0];
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	81fb      	strh	r3, [r7, #14]
	uint16_t min = Data[0];
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	81bb      	strh	r3, [r7, #12]

	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	60bb      	str	r3, [r7, #8]
 8005cc8:	e03a      	b.n	8005d40 <Warning_Detection+0x90>
	{
		if(Data[i] > max)
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	89fa      	ldrh	r2, [r7, #14]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d206      	bcs.n	8005ce8 <Warning_Detection+0x38>
		{
			max = Data[i];
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	81fb      	strh	r3, [r7, #14]
 8005ce6:	e00d      	b.n	8005d04 <Warning_Detection+0x54>
		}
		else if(Data[i] < min)
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	4413      	add	r3, r2
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	89ba      	ldrh	r2, [r7, #12]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d905      	bls.n	8005d04 <Warning_Detection+0x54>
		{
			min = Data[i];
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	4413      	add	r3, r2
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	81bb      	strh	r3, [r7, #12]
		}

		if(Data[i] < sys.Low_th || Data[i] > sys.High_th)
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	881a      	ldrh	r2, [r3, #0]
 8005d0e:	4b17      	ldr	r3, [pc, #92]	@ (8005d6c <Warning_Detection+0xbc>)
 8005d10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d14:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d30a      	bcc.n	8005d30 <Warning_Detection+0x80>
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	4413      	add	r3, r2
 8005d22:	881a      	ldrh	r2, [r3, #0]
 8005d24:	4b11      	ldr	r3, [pc, #68]	@ (8005d6c <Warning_Detection+0xbc>)
 8005d26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d2a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d904      	bls.n	8005d3a <Warning_Detection+0x8a>
		{
			flags.Threshold_Detected= 1;
 8005d30:	4a0f      	ldr	r2, [pc, #60]	@ (8005d70 <Warning_Detection+0xc0>)
 8005d32:	7813      	ldrb	r3, [r2, #0]
 8005d34:	f043 0310 	orr.w	r3, r3, #16
 8005d38:	7013      	strb	r3, [r2, #0]
	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	60bb      	str	r3, [r7, #8]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2bc7      	cmp	r3, #199	@ 0xc7
 8005d44:	ddc1      	ble.n	8005cca <Warning_Detection+0x1a>
		}
	}

	if(max - min >= Hammer_Th)
 8005d46:	89fa      	ldrh	r2, [r7, #14]
 8005d48:	89bb      	ldrh	r3, [r7, #12]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	4a09      	ldr	r2, [pc, #36]	@ (8005d74 <Warning_Detection+0xc4>)
 8005d4e:	8812      	ldrh	r2, [r2, #0]
 8005d50:	4293      	cmp	r3, r2
 8005d52:	db04      	blt.n	8005d5e <Warning_Detection+0xae>
	{
		flags.Hammer_Detected = 1;
 8005d54:	4a06      	ldr	r2, [pc, #24]	@ (8005d70 <Warning_Detection+0xc0>)
 8005d56:	7813      	ldrb	r3, [r2, #0]
 8005d58:	f043 0308 	orr.w	r3, r3, #8
 8005d5c:	7013      	strb	r3, [r2, #0]
	}

}
 8005d5e:	bf00      	nop
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	20000740 	.word	0x20000740
 8005d70:	20001c68 	.word	0x20001c68
 8005d74:	20005480 	.word	0x20005480

08005d78 <RAM_Save_Measure>:

/*-----SALVATAGGIO MISURA IN RAM-----*/
void RAM_Save_Measure(Compressed_Sample_Typedef* sample, uint8_t* compressed_data)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
    uint32_t samples_size = sample->compressed_size.pressure_size +
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	461a      	mov	r2, r3
                            sample->compressed_size.volume_size +
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	885b      	ldrh	r3, [r3, #2]
 8005d8e:	b29b      	uxth	r3, r3
    uint32_t samples_size = sample->compressed_size.pressure_size +
 8005d90:	4413      	add	r3, r2
                            sample->compressed_size.acceleration_size;
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	8892      	ldrh	r2, [r2, #4]
 8005d96:	b292      	uxth	r2, r2
                            sample->compressed_size.volume_size +
 8005d98:	4413      	add	r3, r2
    uint32_t samples_size = sample->compressed_size.pressure_size +
 8005d9a:	613b      	str	r3, [r7, #16]
    uint32_t total_size = METADATA_SIZE + samples_size;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	3306      	adds	r3, #6
 8005da0:	60fb      	str	r3, [r7, #12]
    uint32_t address = sys.Current_RAM_Base + sys.Current_RAM_Len;
 8005da2:	4b23      	ldr	r3, [pc, #140]	@ (8005e30 <RAM_Save_Measure+0xb8>)
 8005da4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005da8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8005dac:	4b20      	ldr	r3, [pc, #128]	@ (8005e30 <RAM_Save_Measure+0xb8>)
 8005dae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005db2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005db6:	4413      	add	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]

	if(Saved_Samples >= sys.RAM_Samples_Number) 
 8005dba:	4b1e      	ldr	r3, [pc, #120]	@ (8005e34 <RAM_Save_Measure+0xbc>)
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8005e30 <RAM_Save_Measure+0xb8>)
 8005dc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dc6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d312      	bcc.n	8005df4 <RAM_Save_Measure+0x7c>
	{
		sys.Current_RAM_Len = Saved_Bytes;
 8005dce:	4b1a      	ldr	r3, [pc, #104]	@ (8005e38 <RAM_Save_Measure+0xc0>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a17      	ldr	r2, [pc, #92]	@ (8005e30 <RAM_Save_Measure+0xb8>)
 8005dd4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005dd8:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
		Saved_Bytes = 0;
 8005ddc:	4b16      	ldr	r3, [pc, #88]	@ (8005e38 <RAM_Save_Measure+0xc0>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	601a      	str	r2, [r3, #0]
		Saved_Samples = 0;
 8005de2:	4b14      	ldr	r3, [pc, #80]	@ (8005e34 <RAM_Save_Measure+0xbc>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	801a      	strh	r2, [r3, #0]
		address = sys.Current_RAM_Base;
 8005de8:	4b11      	ldr	r3, [pc, #68]	@ (8005e30 <RAM_Save_Measure+0xb8>)
 8005dea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005df2:	617b      	str	r3, [r7, #20]
    }

	RAM_Write(address, METADATA_SIZE, (uint8_t*)sample);
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	2106      	movs	r1, #6
 8005df8:	6978      	ldr	r0, [r7, #20]
 8005dfa:	f001 f875 	bl	8006ee8 <RAM_Write>
    address += METADATA_SIZE;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	3306      	adds	r3, #6
 8005e02:	617b      	str	r3, [r7, #20]

	RAM_Write(address, samples_size, compressed_data);
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	6939      	ldr	r1, [r7, #16]
 8005e08:	6978      	ldr	r0, [r7, #20]
 8005e0a:	f001 f86d 	bl	8006ee8 <RAM_Write>
    
    Saved_Bytes += total_size;
 8005e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8005e38 <RAM_Save_Measure+0xc0>)
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	4413      	add	r3, r2
 8005e16:	4a08      	ldr	r2, [pc, #32]	@ (8005e38 <RAM_Save_Measure+0xc0>)
 8005e18:	6013      	str	r3, [r2, #0]
	Saved_Samples++;
 8005e1a:	4b06      	ldr	r3, [pc, #24]	@ (8005e34 <RAM_Save_Measure+0xbc>)
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	4b04      	ldr	r3, [pc, #16]	@ (8005e34 <RAM_Save_Measure+0xbc>)
 8005e24:	801a      	strh	r2, [r3, #0]
}
 8005e26:	bf00      	nop
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	20000740 	.word	0x20000740
 8005e34:	20004ec4 	.word	0x20004ec4
 8005e38:	20004ec0 	.word	0x20004ec0

08005e3c <Send_Measure_Chunk>:

/*-----INVIO CHUNK MISURA-----*/
uint32_t Send_Measure_Chunk(uint32_t buffer_base, uint32_t buffer_len, uint32_t start_address)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08c      	sub	sp, #48	@ 0x30
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
    uint32_t chunk_fill = 0;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t address = start_address;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t end_address = start_address; // Per fermarsi quando si torna al punto di partenza
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	623b      	str	r3, [r7, #32]
    uint8_t first_loop = 1;
 8005e54:	2301      	movs	r3, #1
 8005e56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (buffer_len == 0) 
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <Send_Measure_Chunk+0x28>
	{
        return 0;
 8005e60:	2300      	movs	r3, #0
 8005e62:	e083      	b.n	8005f6c <Send_Measure_Chunk+0x130>
    }

    do {
        // Gestione wrap-around circolare
        if (address >= buffer_base + buffer_len) 
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	4413      	add	r3, r2
 8005e6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d301      	bcc.n	8005e74 <Send_Measure_Chunk+0x38>
		{
            address = buffer_base;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        // Controlla se c'è spazio per i metadata
        if ((buffer_base + buffer_len - address) < METADATA_SIZE && address < buffer_base + buffer_len) 
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	441a      	add	r2, r3
 8005e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b05      	cmp	r3, #5
 8005e80:	d805      	bhi.n	8005e8e <Send_Measure_Chunk+0x52>
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4413      	add	r3, r2
 8005e88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d357      	bcc.n	8005f3e <Send_Measure_Chunk+0x102>
		{
            break;
        }
        if ((chunk_fill + METADATA_SIZE) > sizeof(tcp_chunk)) 
 8005e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e90:	3306      	adds	r3, #6
 8005e92:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d853      	bhi.n	8005f42 <Send_Measure_Chunk+0x106>
            break;
        }

        // Leggi header sample
        Compressed_Sample_Typedef sample_header;
        RAM_Read(address, METADATA_SIZE, (uint8_t*)&sample_header);
 8005e9a:	f107 0310 	add.w	r3, r7, #16
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	2106      	movs	r1, #6
 8005ea2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ea4:	f001 f831 	bl	8006f0a <RAM_Read>

        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 8005ea8:	8a3b      	ldrh	r3, [r7, #16]
 8005eaa:	461a      	mov	r2, r3
                               sample_header.compressed_size.volume_size +
 8005eac:	8a7b      	ldrh	r3, [r7, #18]
        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 8005eae:	4413      	add	r3, r2
                               sample_header.compressed_size.acceleration_size;
 8005eb0:	8aba      	ldrh	r2, [r7, #20]
                               sample_header.compressed_size.volume_size +
 8005eb2:	4413      	add	r3, r2
        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 8005eb4:	61fb      	str	r3, [r7, #28]
        uint32_t sample_total_size = METADATA_SIZE + sample_size;
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	3306      	adds	r3, #6
 8005eba:	61bb      	str	r3, [r7, #24]

        if ((chunk_fill + sample_total_size) > sizeof(tcp_chunk)) 
 8005ebc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d83d      	bhi.n	8005f46 <Send_Measure_Chunk+0x10a>
		{
            break;
        }

        RAM_Read(address, METADATA_SIZE, tcp_chunk + chunk_fill);
 8005eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ecc:	4a29      	ldr	r2, [pc, #164]	@ (8005f74 <Send_Measure_Chunk+0x138>)
 8005ece:	4413      	add	r3, r2
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	2106      	movs	r1, #6
 8005ed4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ed6:	f001 f818 	bl	8006f0a <RAM_Read>
        chunk_fill += METADATA_SIZE;
 8005eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005edc:	3306      	adds	r3, #6
 8005ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
        address += METADATA_SIZE;
 8005ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee2:	3306      	adds	r3, #6
 8005ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (address >= buffer_base + buffer_len) address = buffer_base;
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	4413      	add	r3, r2
 8005eec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d301      	bcc.n	8005ef6 <Send_Measure_Chunk+0xba>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	62bb      	str	r3, [r7, #40]	@ 0x28

        RAM_Read(address, sample_size, tcp_chunk + chunk_fill);
 8005ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef8:	4a1e      	ldr	r2, [pc, #120]	@ (8005f74 <Send_Measure_Chunk+0x138>)
 8005efa:	4413      	add	r3, r2
 8005efc:	461a      	mov	r2, r3
 8005efe:	69f9      	ldr	r1, [r7, #28]
 8005f00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f02:	f001 f802 	bl	8006f0a <RAM_Read>
        chunk_fill += sample_size;
 8005f06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        address += sample_size;
 8005f0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	4413      	add	r3, r2
 8005f14:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (address >= buffer_base + buffer_len) address = buffer_base;
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d301      	bcc.n	8005f26 <Send_Measure_Chunk+0xea>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	62bb      	str	r3, [r7, #40]	@ 0x28

        // Fermati se hai completato il giro
        if (address == end_address && !first_loop) 
 8005f26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f28:	6a3b      	ldr	r3, [r7, #32]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d103      	bne.n	8005f36 <Send_Measure_Chunk+0xfa>
 8005f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d009      	beq.n	8005f4a <Send_Measure_Chunk+0x10e>
		{
            break;
        }
        first_loop = 0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    do {
 8005f3c:	e792      	b.n	8005e64 <Send_Measure_Chunk+0x28>
            break;
 8005f3e:	bf00      	nop
 8005f40:	e004      	b.n	8005f4c <Send_Measure_Chunk+0x110>
            break;
 8005f42:	bf00      	nop
 8005f44:	e002      	b.n	8005f4c <Send_Measure_Chunk+0x110>
            break;
 8005f46:	bf00      	nop
 8005f48:	e000      	b.n	8005f4c <Send_Measure_Chunk+0x110>
            break;
 8005f4a:	bf00      	nop
    } while (1);

    if (chunk_fill > 0) 
 8005f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d005      	beq.n	8005f5e <Send_Measure_Chunk+0x122>
	{
        SIM_Send_TCP_Chunk_DMA(tcp_chunk, chunk_fill);
 8005f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	4619      	mov	r1, r3
 8005f58:	4806      	ldr	r0, [pc, #24]	@ (8005f74 <Send_Measure_Chunk+0x138>)
 8005f5a:	f7fc f8b7 	bl	80020cc <SIM_Send_TCP_Chunk_DMA>
    }

    // Se hai completato il giro, ritorna 0
    if (address == end_address) 
 8005f5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d101      	bne.n	8005f6a <Send_Measure_Chunk+0x12e>
	{
        return 0;
 8005f66:	2300      	movs	r3, #0
 8005f68:	e000      	b.n	8005f6c <Send_Measure_Chunk+0x130>
    }
    return address;
 8005f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3730      	adds	r7, #48	@ 0x30
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	20004ecc 	.word	0x20004ecc

08005f78 <Compress_Sample>:

/*-----COMPRESSIONE DATI-----*/
Compressed_Sizes_Typedef Compress_Sample(uint8_t *input, uint16_t input_len, uint8_t *output)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b09a      	sub	sp, #104	@ 0x68
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	603b      	str	r3, [r7, #0]
 8005f84:	4613      	mov	r3, r2
 8005f86:	80fb      	strh	r3, [r7, #6]
	uint16_t out_idx = 0;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	uint8_t packed_byte = 0;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	Compressed_Sizes_Typedef sizes = {0, 0, 0};
 8005f94:	2300      	movs	r3, #0
 8005f96:	843b      	strh	r3, [r7, #32]
 8005f98:	2300      	movs	r3, #0
 8005f9a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	84bb      	strh	r3, [r7, #36]	@ 0x24

    AdpcmState_Typedef press_state = {0, 0};
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	83bb      	strh	r3, [r7, #28]
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	77bb      	strb	r3, [r7, #30]
    AdpcmState_Typedef acc_x_state = {0, 0}, acc_y_state = {0, 0}, acc_z_state = {0, 0};
 8005fa8:	2300      	movs	r3, #0
 8005faa:	833b      	strh	r3, [r7, #24]
 8005fac:	2300      	movs	r3, #0
 8005fae:	76bb      	strb	r3, [r7, #26]
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	82bb      	strh	r3, [r7, #20]
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	75bb      	strb	r3, [r7, #22]
 8005fb8:	2300      	movs	r3, #0
 8005fba:	823b      	strh	r3, [r7, #16]
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	74bb      	strb	r3, [r7, #18]

	// --- 1. Pressione ---
	uint16_t *adc = (uint16_t*)input;
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint16_t pressure_start = out_idx;
 8005fc4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005fc8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	output[out_idx++] = adc[0] & 0xFF;
 8005fcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fce:	881a      	ldrh	r2, [r3, #0]
 8005fd0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005fd4:	1c59      	adds	r1, r3, #1
 8005fd6:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8005fda:	4619      	mov	r1, r3
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	440b      	add	r3, r1
 8005fe0:	b2d2      	uxtb	r2, r2
 8005fe2:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = adc[0] >> 8;
 8005fe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	0a1b      	lsrs	r3, r3, #8
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005ff0:	1c59      	adds	r1, r3, #1
 8005ff2:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	440b      	add	r3, r1
 8005ffc:	b2d2      	uxtb	r2, r2
 8005ffe:	701a      	strb	r2, [r3, #0]
	press_state.previous_value = adc[0];
 8006000:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006002:	881b      	ldrh	r3, [r3, #0]
 8006004:	b21b      	sxth	r3, r3
 8006006:	83bb      	strh	r3, [r7, #28]
	for (int i = 1; i < PRESS_HALF_SAMPLES; i++) 
 8006008:	2301      	movs	r3, #1
 800600a:	663b      	str	r3, [r7, #96]	@ 0x60
 800600c:	e033      	b.n	8006076 <Compress_Sample+0xfe>
	{
		uint8_t nibble = ADPCM_Compression(adc[i], &press_state, step_size_table_12bit);
 800600e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006014:	4413      	add	r3, r2
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	b21b      	sxth	r3, r3
 800601a:	f107 011c 	add.w	r1, r7, #28
 800601e:	4a99      	ldr	r2, [pc, #612]	@ (8006284 <Compress_Sample+0x30c>)
 8006020:	4618      	mov	r0, r3
 8006022:	f000 f9cf 	bl	80063c4 <ADPCM_Compression>
 8006026:	4603      	mov	r3, r0
 8006028:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (i % 2 != 0) 
 800602c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d004      	beq.n	8006040 <Compress_Sample+0xc8>
		{
			packed_byte = nibble;
 8006036:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800603a:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 800603e:	e017      	b.n	8006070 <Compress_Sample+0xf8>
		} else 
		{
			packed_byte |= (nibble << 4);
 8006040:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006044:	011b      	lsls	r3, r3, #4
 8006046:	b25a      	sxtb	r2, r3
 8006048:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 800604c:	4313      	orrs	r3, r2
 800604e:	b25b      	sxtb	r3, r3
 8006050:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
			output[out_idx++] = packed_byte;
 8006054:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 800605e:	461a      	mov	r2, r3
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	4413      	add	r3, r2
 8006064:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 8006068:	701a      	strb	r2, [r3, #0]
			packed_byte = 0;
 800606a:	2300      	movs	r3, #0
 800606c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	for (int i = 1; i < PRESS_HALF_SAMPLES; i++) 
 8006070:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006072:	3301      	adds	r3, #1
 8006074:	663b      	str	r3, [r7, #96]	@ 0x60
 8006076:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006078:	2bc7      	cmp	r3, #199	@ 0xc7
 800607a:	ddc8      	ble.n	800600e <Compress_Sample+0x96>
	if (PRESS_HALF_SAMPLES % 2 != 0) 
	{
		output[out_idx++] = packed_byte;
		packed_byte = 0;
	}
	sizes.pressure_size = out_idx - pressure_start;
 800607c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8006080:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	b29b      	uxth	r3, r3
 8006088:	843b      	strh	r3, [r7, #32]

	// --- 2. Flusso (RLE) ---
	uint32_t *counter = (uint32_t*)(input + PRESS_HALF_LEN);
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006090:	643b      	str	r3, [r7, #64]	@ 0x40
	uint16_t volume_start = out_idx;
 8006092:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006096:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	uint32_t prev = counter[0];
 8006098:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint16_t run_len = 1;
 800609e:	2301      	movs	r3, #1
 80060a0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

	for (int i = 1; i < MAX_VOLUME_SAMPLES; i++) {
 80060a4:	2301      	movs	r3, #1
 80060a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80060a8:	e058      	b.n	800615c <Compress_Sample+0x1e4>
		if (counter[i] == prev && run_len < 255) {
 80060aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060b0:	4413      	add	r3, r2
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d109      	bne.n	80060ce <Compress_Sample+0x156>
 80060ba:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80060be:	2bfe      	cmp	r3, #254	@ 0xfe
 80060c0:	d805      	bhi.n	80060ce <Compress_Sample+0x156>
			run_len++;
 80060c2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80060c6:	3301      	adds	r3, #1
 80060c8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80060cc:	e043      	b.n	8006156 <Compress_Sample+0x1de>
		} else {
			// Scrivi valore e run_len (4 byte valore + 1 byte run_len)
			output[out_idx++] = prev & 0xFF;
 80060ce:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80060d2:	1c5a      	adds	r2, r3, #1
 80060d4:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 80060d8:	461a      	mov	r2, r3
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	4413      	add	r3, r2
 80060de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 8) & 0xFF;
 80060e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060e6:	0a1a      	lsrs	r2, r3, #8
 80060e8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80060ec:	1c59      	adds	r1, r3, #1
 80060ee:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80060f2:	4619      	mov	r1, r3
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	440b      	add	r3, r1
 80060f8:	b2d2      	uxtb	r2, r2
 80060fa:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 16) & 0xFF;
 80060fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060fe:	0c1a      	lsrs	r2, r3, #16
 8006100:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006104:	1c59      	adds	r1, r3, #1
 8006106:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800610a:	4619      	mov	r1, r3
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	440b      	add	r3, r1
 8006110:	b2d2      	uxtb	r2, r2
 8006112:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 24) & 0xFF;
 8006114:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006116:	0e1a      	lsrs	r2, r3, #24
 8006118:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800611c:	1c59      	adds	r1, r3, #1
 800611e:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006122:	4619      	mov	r1, r3
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	440b      	add	r3, r1
 8006128:	b2d2      	uxtb	r2, r2
 800612a:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = run_len;
 800612c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8006136:	461a      	mov	r2, r3
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	4413      	add	r3, r2
 800613c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	701a      	strb	r2, [r3, #0]
			prev = counter[i];
 8006144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800614a:	4413      	add	r3, r2
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	65fb      	str	r3, [r7, #92]	@ 0x5c
			run_len = 1;
 8006150:	2301      	movs	r3, #1
 8006152:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	for (int i = 1; i < MAX_VOLUME_SAMPLES; i++) {
 8006156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006158:	3301      	adds	r3, #1
 800615a:	657b      	str	r3, [r7, #84]	@ 0x54
 800615c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800615e:	2b09      	cmp	r3, #9
 8006160:	dda3      	ble.n	80060aa <Compress_Sample+0x132>
		}
	}
	// Scrivi l'ultimo run
	output[out_idx++] = prev & 0xFF;
 8006162:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 800616c:	461a      	mov	r2, r3
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	4413      	add	r3, r2
 8006172:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006174:	b2d2      	uxtb	r2, r2
 8006176:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 8) & 0xFF;
 8006178:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800617a:	0a1a      	lsrs	r2, r3, #8
 800617c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006180:	1c59      	adds	r1, r3, #1
 8006182:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006186:	4619      	mov	r1, r3
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	440b      	add	r3, r1
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 16) & 0xFF;
 8006190:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006192:	0c1a      	lsrs	r2, r3, #16
 8006194:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006198:	1c59      	adds	r1, r3, #1
 800619a:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800619e:	4619      	mov	r1, r3
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	440b      	add	r3, r1
 80061a4:	b2d2      	uxtb	r2, r2
 80061a6:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 24) & 0xFF;
 80061a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061aa:	0e1a      	lsrs	r2, r3, #24
 80061ac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80061b0:	1c59      	adds	r1, r3, #1
 80061b2:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80061b6:	4619      	mov	r1, r3
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	440b      	add	r3, r1
 80061bc:	b2d2      	uxtb	r2, r2
 80061be:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = run_len;
 80061c0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 80061ca:	461a      	mov	r2, r3
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	4413      	add	r3, r2
 80061d0:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	701a      	strb	r2, [r3, #0]

	sizes.volume_size = out_idx - volume_start;
 80061d8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 80061dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	847b      	strh	r3, [r7, #34]	@ 0x22

	// --- 3. Accelerometro (3 canali separati) ---
	uint8_t *accel = input + PRESS_HALF_LEN + MAX_VOLUME_LEN;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80061ea:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint16_t accel_start = out_idx;
 80061ec:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80061f0:	86fb      	strh	r3, [r7, #54]	@ 0x36

	uint16_t x0 = accel[1] | (accel[2] << 8);
 80061f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f4:	3301      	adds	r3, #1
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	b21a      	sxth	r2, r3
 80061fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061fc:	3302      	adds	r3, #2
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	b21b      	sxth	r3, r3
 8006202:	021b      	lsls	r3, r3, #8
 8006204:	b21b      	sxth	r3, r3
 8006206:	4313      	orrs	r3, r2
 8006208:	b21b      	sxth	r3, r3
 800620a:	86bb      	strh	r3, [r7, #52]	@ 0x34
	uint16_t y0 = accel[3] | (accel[4] << 8);
 800620c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800620e:	3303      	adds	r3, #3
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	b21a      	sxth	r2, r3
 8006214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006216:	3304      	adds	r3, #4
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	b21b      	sxth	r3, r3
 800621c:	021b      	lsls	r3, r3, #8
 800621e:	b21b      	sxth	r3, r3
 8006220:	4313      	orrs	r3, r2
 8006222:	b21b      	sxth	r3, r3
 8006224:	867b      	strh	r3, [r7, #50]	@ 0x32
	uint16_t z0 = accel[5] | (accel[6] << 8);
 8006226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006228:	3305      	adds	r3, #5
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	b21a      	sxth	r2, r3
 800622e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006230:	3306      	adds	r3, #6
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	b21b      	sxth	r3, r3
 8006236:	021b      	lsls	r3, r3, #8
 8006238:	b21b      	sxth	r3, r3
 800623a:	4313      	orrs	r3, r2
 800623c:	b21b      	sxth	r3, r3
 800623e:	863b      	strh	r3, [r7, #48]	@ 0x30
	acc_x_state.previous_value = x0;
 8006240:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8006244:	833b      	strh	r3, [r7, #24]
	acc_y_state.previous_value = y0;
 8006246:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800624a:	82bb      	strh	r3, [r7, #20]
	acc_z_state.previous_value = z0;
 800624c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8006250:	823b      	strh	r3, [r7, #16]
	for(int k=0; k<7; ++k) output[out_idx++] = accel[k];
 8006252:	2300      	movs	r3, #0
 8006254:	653b      	str	r3, [r7, #80]	@ 0x50
 8006256:	e00f      	b.n	8006278 <Compress_Sample+0x300>
 8006258:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800625a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800625c:	441a      	add	r2, r3
 800625e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006262:	1c59      	adds	r1, r3, #1
 8006264:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006268:	4619      	mov	r1, r3
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	440b      	add	r3, r1
 800626e:	7812      	ldrb	r2, [r2, #0]
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006274:	3301      	adds	r3, #1
 8006276:	653b      	str	r3, [r7, #80]	@ 0x50
 8006278:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800627a:	2b06      	cmp	r3, #6
 800627c:	ddec      	ble.n	8006258 <Compress_Sample+0x2e0>
	for (int i = 1; i < ACC_FIFO_WATERMARK; i++) 
 800627e:	2301      	movs	r3, #1
 8006280:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006282:	e087      	b.n	8006394 <Compress_Sample+0x41c>
 8006284:	200000b0 	.word	0x200000b0
	{
		uint16_t x = accel[i*7+1] | (accel[i*7+2] << 8);
 8006288:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800628a:	4613      	mov	r3, r2
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	1a9b      	subs	r3, r3, r2
 8006290:	3301      	adds	r3, #1
 8006292:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006294:	4413      	add	r3, r2
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	b219      	sxth	r1, r3
 800629a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800629c:	4613      	mov	r3, r2
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	1a9b      	subs	r3, r3, r2
 80062a2:	3302      	adds	r3, #2
 80062a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062a6:	4413      	add	r3, r2
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	b21b      	sxth	r3, r3
 80062ac:	021b      	lsls	r3, r3, #8
 80062ae:	b21b      	sxth	r3, r3
 80062b0:	430b      	orrs	r3, r1
 80062b2:	b21b      	sxth	r3, r3
 80062b4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		uint16_t y = accel[i*7+3] | (accel[i*7+4] << 8);
 80062b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062b8:	4613      	mov	r3, r2
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	3303      	adds	r3, #3
 80062c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062c2:	4413      	add	r3, r2
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	b219      	sxth	r1, r3
 80062c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062ca:	4613      	mov	r3, r2
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	1a9b      	subs	r3, r3, r2
 80062d0:	3304      	adds	r3, #4
 80062d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062d4:	4413      	add	r3, r2
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	b21b      	sxth	r3, r3
 80062da:	021b      	lsls	r3, r3, #8
 80062dc:	b21b      	sxth	r3, r3
 80062de:	430b      	orrs	r3, r1
 80062e0:	b21b      	sxth	r3, r3
 80062e2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		uint16_t z = accel[i*7+5] | (accel[i*7+6] << 8);
 80062e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062e6:	4613      	mov	r3, r2
 80062e8:	00db      	lsls	r3, r3, #3
 80062ea:	1a9b      	subs	r3, r3, r2
 80062ec:	3305      	adds	r3, #5
 80062ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062f0:	4413      	add	r3, r2
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	b219      	sxth	r1, r3
 80062f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062f8:	4613      	mov	r3, r2
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	1a9b      	subs	r3, r3, r2
 80062fe:	3306      	adds	r3, #6
 8006300:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006302:	4413      	add	r3, r2
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	b21b      	sxth	r3, r3
 8006308:	021b      	lsls	r3, r3, #8
 800630a:	b21b      	sxth	r3, r3
 800630c:	430b      	orrs	r3, r1
 800630e:	b21b      	sxth	r3, r3
 8006310:	857b      	strh	r3, [r7, #42]	@ 0x2a
		uint8_t nibble_x = ADPCM_Compression(x, &acc_x_state, step_size_table_16bit);
 8006312:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8006316:	f107 0118 	add.w	r1, r7, #24
 800631a:	4a29      	ldr	r2, [pc, #164]	@ (80063c0 <Compress_Sample+0x448>)
 800631c:	4618      	mov	r0, r3
 800631e:	f000 f851 	bl	80063c4 <ADPCM_Compression>
 8006322:	4603      	mov	r3, r0
 8006324:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		uint8_t nibble_y = ADPCM_Compression(y, &acc_y_state, step_size_table_16bit);
 8006328:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800632c:	f107 0114 	add.w	r1, r7, #20
 8006330:	4a23      	ldr	r2, [pc, #140]	@ (80063c0 <Compress_Sample+0x448>)
 8006332:	4618      	mov	r0, r3
 8006334:	f000 f846 	bl	80063c4 <ADPCM_Compression>
 8006338:	4603      	mov	r3, r0
 800633a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		uint8_t nibble_z = ADPCM_Compression(z, &acc_z_state, step_size_table_16bit);
 800633e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8006342:	f107 0110 	add.w	r1, r7, #16
 8006346:	4a1e      	ldr	r2, [pc, #120]	@ (80063c0 <Compress_Sample+0x448>)
 8006348:	4618      	mov	r0, r3
 800634a:	f000 f83b 	bl	80063c4 <ADPCM_Compression>
 800634e:	4603      	mov	r3, r0
 8006350:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		output[out_idx++] = nibble_x | (nibble_y << 4);
 8006354:	f997 3028 	ldrsb.w	r3, [r7, #40]	@ 0x28
 8006358:	011b      	lsls	r3, r3, #4
 800635a:	b25a      	sxtb	r2, r3
 800635c:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 8006360:	4313      	orrs	r3, r2
 8006362:	b25a      	sxtb	r2, r3
 8006364:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006368:	1c59      	adds	r1, r3, #1
 800636a:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800636e:	4619      	mov	r1, r3
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	440b      	add	r3, r1
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]
		output[out_idx++] = nibble_z;
 8006378:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8006382:	461a      	mov	r2, r3
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	4413      	add	r3, r2
 8006388:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800638c:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < ACC_FIFO_WATERMARK; i++) 
 800638e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006390:	3301      	adds	r3, #1
 8006392:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006394:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006396:	2bc7      	cmp	r3, #199	@ 0xc7
 8006398:	f77f af76 	ble.w	8006288 <Compress_Sample+0x310>
	}
	sizes.acceleration_size = out_idx - accel_start;
 800639c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 80063a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	84bb      	strh	r3, [r7, #36]	@ 0x24

	return sizes;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	461a      	mov	r2, r3
 80063ac:	f107 0320 	add.w	r3, r7, #32
 80063b0:	6818      	ldr	r0, [r3, #0]
 80063b2:	6010      	str	r0, [r2, #0]
 80063b4:	889b      	ldrh	r3, [r3, #4]
 80063b6:	8093      	strh	r3, [r2, #4]
}
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	3768      	adds	r7, #104	@ 0x68
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20000000 	.word	0x20000000

080063c4 <ADPCM_Compression>:

/*-----FUNZIONE DI COMPRESSIONE ADPCM-----*/
uint8_t ADPCM_Compression(int16_t sample, AdpcmState_Typedef* state, uint16_t* step_size_table) 
{
 80063c4:	b480      	push	{r7}
 80063c6:	b08b      	sub	sp, #44	@ 0x2c
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	4603      	mov	r3, r0
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	81fb      	strh	r3, [r7, #14]
    int32_t diff = (int32_t)sample - state->previous_value;
 80063d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80063dc:	1a9b      	subs	r3, r3, r2
 80063de:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t step = step_size_table[state->step_index];
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	4413      	add	r3, r2
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	837b      	strh	r3, [r7, #26]
    uint8_t nibble = 0;
 80063f0:	2300      	movs	r3, #0
 80063f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    if (diff < 0) 
 80063f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	da05      	bge.n	8006408 <ADPCM_Compression+0x44>
	{
        nibble = 8; // Bit di segno
 80063fc:	2308      	movs	r3, #8
 80063fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        diff = -diff;
 8006402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006404:	425b      	negs	r3, r3
 8006406:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Calcola il nibble quantizzato
    uint32_t temp = (uint32_t)diff * 4;
 8006408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	617b      	str	r3, [r7, #20]
    if (temp < step) 
 800640e:	8b7b      	ldrh	r3, [r7, #26]
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	429a      	cmp	r2, r3
 8006414:	d312      	bcc.n	800643c <ADPCM_Compression+0x78>
	{
        nibble |= 0;
    } 
	else 
	{
        nibble |= (uint8_t)((temp / step > 7) ? 7 : (temp / step));
 8006416:	8b7b      	ldrh	r3, [r7, #26]
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	fbb2 f3f3 	udiv	r3, r2, r3
 800641e:	2b07      	cmp	r3, #7
 8006420:	d805      	bhi.n	800642e <ADPCM_Compression+0x6a>
 8006422:	8b7b      	ldrh	r3, [r7, #26]
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	fbb2 f3f3 	udiv	r3, r2, r3
 800642a:	b25b      	sxtb	r3, r3
 800642c:	e000      	b.n	8006430 <ADPCM_Compression+0x6c>
 800642e:	2307      	movs	r3, #7
 8006430:	f997 2023 	ldrsb.w	r2, [r7, #35]	@ 0x23
 8006434:	4313      	orrs	r3, r2
 8006436:	b25b      	sxtb	r3, r3
 8006438:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }

    // Ricostruisci il valore per la predizione successiva (usando solo il nibble)
    int32_t reconstructed_diff = (step * (nibble & 7)) / 4 + step / 8;
 800643c:	8b7b      	ldrh	r3, [r7, #26]
 800643e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8006442:	f002 0207 	and.w	r2, r2, #7
 8006446:	fb02 f303 	mul.w	r3, r2, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	da00      	bge.n	8006450 <ADPCM_Compression+0x8c>
 800644e:	3303      	adds	r3, #3
 8006450:	109b      	asrs	r3, r3, #2
 8006452:	461a      	mov	r2, r3
 8006454:	8b7b      	ldrh	r3, [r7, #26]
 8006456:	08db      	lsrs	r3, r3, #3
 8006458:	b29b      	uxth	r3, r3
 800645a:	4413      	add	r3, r2
 800645c:	61fb      	str	r3, [r7, #28]
    if (nibble & 8) {
 800645e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006462:	f003 0308 	and.w	r3, r3, #8
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <ADPCM_Compression+0xac>
        reconstructed_diff = -reconstructed_diff;
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	425b      	negs	r3, r3
 800646e:	61fb      	str	r3, [r7, #28]
    }
    
    state->previous_value += reconstructed_diff;
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006476:	b29a      	uxth	r2, r3
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	b29b      	uxth	r3, r3
 800647c:	4413      	add	r3, r2
 800647e:	b29b      	uxth	r3, r3
 8006480:	b21a      	sxth	r2, r3
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	801a      	strh	r2, [r3, #0]
    // Clamp del valore predetto
    if (state->previous_value > 32767) state->previous_value = 32767;
    if (state->previous_value < -32768) state->previous_value = -32768;

    // Aggiorna l'indice dello step
    state->step_index += index_adjustment_table[nibble & 7];
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800648c:	b2da      	uxtb	r2, r3
 800648e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006492:	f003 0307 	and.w	r3, r3, #7
 8006496:	4910      	ldr	r1, [pc, #64]	@ (80064d8 <ADPCM_Compression+0x114>)
 8006498:	56cb      	ldrsb	r3, [r1, r3]
 800649a:	b2db      	uxtb	r3, r3
 800649c:	4413      	add	r3, r2
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	b25a      	sxtb	r2, r3
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	709a      	strb	r2, [r3, #2]
    if (state->step_index < 0) state->step_index = 0;
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	da02      	bge.n	80064b6 <ADPCM_Compression+0xf2>
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2200      	movs	r2, #0
 80064b4:	709a      	strb	r2, [r3, #2]
    if (state->step_index > 87) state->step_index = 87;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80064bc:	2b57      	cmp	r3, #87	@ 0x57
 80064be:	dd02      	ble.n	80064c6 <ADPCM_Compression+0x102>
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2257      	movs	r2, #87	@ 0x57
 80064c4:	709a      	strb	r2, [r3, #2]

    return nibble;
 80064c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	372c      	adds	r7, #44	@ 0x2c
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	20000160 	.word	0x20000160

080064dc <Apply_Config>:


/*-----APPLICA VALORI CONFIGURAZIONE-----*/
void Apply_Config(void)
{
 80064dc:	b590      	push	{r4, r7, lr}
 80064de:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
	FIL config_file;
	UINT bytes_written;
	
	if(strcmp(cfg_var, "DEVICE_ID") == 0) 
 80064e6:	49af      	ldr	r1, [pc, #700]	@ (80067a4 <Apply_Config+0x2c8>)
 80064e8:	48af      	ldr	r0, [pc, #700]	@ (80067a8 <Apply_Config+0x2cc>)
 80064ea:	f7f9 fe71 	bl	80001d0 <strcmp>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d107      	bne.n	8006504 <Apply_Config+0x28>
	{
		config.device_id = (uint8_t)atoi(new_cfg_val);
 80064f4:	48ad      	ldr	r0, [pc, #692]	@ (80067ac <Apply_Config+0x2d0>)
 80064f6:	f00f fb2b 	bl	8015b50 <atoi>
 80064fa:	4603      	mov	r3, r0
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	4bac      	ldr	r3, [pc, #688]	@ (80067b0 <Apply_Config+0x2d4>)
 8006500:	701a      	strb	r2, [r3, #0]
 8006502:	e11e      	b.n	8006742 <Apply_Config+0x266>
    }
	else if(strcmp(cfg_var, "SAMP_FREQ") == 0)
 8006504:	49ab      	ldr	r1, [pc, #684]	@ (80067b4 <Apply_Config+0x2d8>)
 8006506:	48a8      	ldr	r0, [pc, #672]	@ (80067a8 <Apply_Config+0x2cc>)
 8006508:	f7f9 fe62 	bl	80001d0 <strcmp>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d132      	bne.n	8006578 <Apply_Config+0x9c>
	{
		if((uint16_t)atoi(new_cfg_val) != 800 && (uint16_t)atoi(new_cfg_val) != 1600)
 8006512:	48a6      	ldr	r0, [pc, #664]	@ (80067ac <Apply_Config+0x2d0>)
 8006514:	f00f fb1c 	bl	8015b50 <atoi>
 8006518:	4603      	mov	r3, r0
 800651a:	b29b      	uxth	r3, r3
 800651c:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8006520:	d008      	beq.n	8006534 <Apply_Config+0x58>
 8006522:	48a2      	ldr	r0, [pc, #648]	@ (80067ac <Apply_Config+0x2d0>)
 8006524:	f00f fb14 	bl	8015b50 <atoi>
 8006528:	4603      	mov	r3, r0
 800652a:	b29b      	uxth	r3, r3
 800652c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006530:	f040 8131 	bne.w	8006796 <Apply_Config+0x2ba>
		{
			return;
		}
		else
		{
			if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 8006534:	4b9e      	ldr	r3, [pc, #632]	@ (80067b0 <Apply_Config+0x2d4>)
 8006536:	885b      	ldrh	r3, [r3, #2]
 8006538:	4a9f      	ldr	r2, [pc, #636]	@ (80067b8 <Apply_Config+0x2dc>)
 800653a:	fba2 2303 	umull	r2, r3, r2, r3
 800653e:	099b      	lsrs	r3, r3, #6
 8006540:	b29b      	uxth	r3, r3
 8006542:	461a      	mov	r2, r3
 8006544:	4b9a      	ldr	r3, [pc, #616]	@ (80067b0 <Apply_Config+0x2d4>)
 8006546:	791b      	ldrb	r3, [r3, #4]
 8006548:	fb02 f303 	mul.w	r3, r2, r3
 800654c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006550:	fb02 f303 	mul.w	r3, r2, r3
 8006554:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	461c      	mov	r4, r3
 800655c:	f000 fd08 	bl	8006f70 <psram_get_size>
 8006560:	4603      	mov	r3, r0
 8006562:	429c      	cmp	r4, r3
 8006564:	f240 80ed 	bls.w	8006742 <Apply_Config+0x266>
			{
				config.samp_freq = (uint16_t)atoi(new_cfg_val);
 8006568:	4890      	ldr	r0, [pc, #576]	@ (80067ac <Apply_Config+0x2d0>)
 800656a:	f00f faf1 	bl	8015b50 <atoi>
 800656e:	4603      	mov	r3, r0
 8006570:	b29a      	uxth	r2, r3
 8006572:	4b8f      	ldr	r3, [pc, #572]	@ (80067b0 <Apply_Config+0x2d4>)
 8006574:	805a      	strh	r2, [r3, #2]
 8006576:	e0e4      	b.n	8006742 <Apply_Config+0x266>
			}
		}
	}
	else if(strcmp(cfg_var, "BUFFER_SECS") == 0)
 8006578:	4990      	ldr	r1, [pc, #576]	@ (80067bc <Apply_Config+0x2e0>)
 800657a:	488b      	ldr	r0, [pc, #556]	@ (80067a8 <Apply_Config+0x2cc>)
 800657c:	f7f9 fe28 	bl	80001d0 <strcmp>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d131      	bne.n	80065ea <Apply_Config+0x10e>
	{
		if((uint8_t)atoi(new_cfg_val) < 5 || (uint8_t)atoi(new_cfg_val) > 30)
 8006586:	4889      	ldr	r0, [pc, #548]	@ (80067ac <Apply_Config+0x2d0>)
 8006588:	f00f fae2 	bl	8015b50 <atoi>
 800658c:	4603      	mov	r3, r0
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b04      	cmp	r3, #4
 8006592:	f240 8102 	bls.w	800679a <Apply_Config+0x2be>
 8006596:	4885      	ldr	r0, [pc, #532]	@ (80067ac <Apply_Config+0x2d0>)
 8006598:	f00f fada 	bl	8015b50 <atoi>
 800659c:	4603      	mov	r3, r0
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b1e      	cmp	r3, #30
 80065a2:	f200 80fa 	bhi.w	800679a <Apply_Config+0x2be>
		{
			return;
		}
		else
		{
			if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 80065a6:	4b82      	ldr	r3, [pc, #520]	@ (80067b0 <Apply_Config+0x2d4>)
 80065a8:	885b      	ldrh	r3, [r3, #2]
 80065aa:	4a83      	ldr	r2, [pc, #524]	@ (80067b8 <Apply_Config+0x2dc>)
 80065ac:	fba2 2303 	umull	r2, r3, r2, r3
 80065b0:	099b      	lsrs	r3, r3, #6
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	461a      	mov	r2, r3
 80065b6:	4b7e      	ldr	r3, [pc, #504]	@ (80067b0 <Apply_Config+0x2d4>)
 80065b8:	791b      	ldrb	r3, [r3, #4]
 80065ba:	fb02 f303 	mul.w	r3, r2, r3
 80065be:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80065c2:	fb02 f303 	mul.w	r3, r2, r3
 80065c6:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 80065ca:	005b      	lsls	r3, r3, #1
 80065cc:	461c      	mov	r4, r3
 80065ce:	f000 fccf 	bl	8006f70 <psram_get_size>
 80065d2:	4603      	mov	r3, r0
 80065d4:	429c      	cmp	r4, r3
 80065d6:	f240 80b4 	bls.w	8006742 <Apply_Config+0x266>
			{
				config.buffering_secs = (uint8_t)atoi(new_cfg_val);
 80065da:	4874      	ldr	r0, [pc, #464]	@ (80067ac <Apply_Config+0x2d0>)
 80065dc:	f00f fab8 	bl	8015b50 <atoi>
 80065e0:	4603      	mov	r3, r0
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	4b72      	ldr	r3, [pc, #456]	@ (80067b0 <Apply_Config+0x2d4>)
 80065e6:	711a      	strb	r2, [r3, #4]
 80065e8:	e0ab      	b.n	8006742 <Apply_Config+0x266>
			}
		}
	}
	else if(strcmp(cfg_var, "CONN_TIMEOUT") == 0)
 80065ea:	4975      	ldr	r1, [pc, #468]	@ (80067c0 <Apply_Config+0x2e4>)
 80065ec:	486e      	ldr	r0, [pc, #440]	@ (80067a8 <Apply_Config+0x2cc>)
 80065ee:	f7f9 fdef 	bl	80001d0 <strcmp>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d107      	bne.n	8006608 <Apply_Config+0x12c>
	{
		config.connection_timeout = (uint32_t)atoi(new_cfg_val);
 80065f8:	486c      	ldr	r0, [pc, #432]	@ (80067ac <Apply_Config+0x2d0>)
 80065fa:	f00f faa9 	bl	8015b50 <atoi>
 80065fe:	4603      	mov	r3, r0
 8006600:	461a      	mov	r2, r3
 8006602:	4b6b      	ldr	r3, [pc, #428]	@ (80067b0 <Apply_Config+0x2d4>)
 8006604:	609a      	str	r2, [r3, #8]
 8006606:	e09c      	b.n	8006742 <Apply_Config+0x266>
	}
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 8006608:	496e      	ldr	r1, [pc, #440]	@ (80067c4 <Apply_Config+0x2e8>)
 800660a:	4867      	ldr	r0, [pc, #412]	@ (80067a8 <Apply_Config+0x2cc>)
 800660c:	f7f9 fde0 	bl	80001d0 <strcmp>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d107      	bne.n	8006626 <Apply_Config+0x14a>
	{
		config.hammer_th = (uint16_t)atoi(new_cfg_val);
 8006616:	4865      	ldr	r0, [pc, #404]	@ (80067ac <Apply_Config+0x2d0>)
 8006618:	f00f fa9a 	bl	8015b50 <atoi>
 800661c:	4603      	mov	r3, r0
 800661e:	b29a      	uxth	r2, r3
 8006620:	4b63      	ldr	r3, [pc, #396]	@ (80067b0 <Apply_Config+0x2d4>)
 8006622:	819a      	strh	r2, [r3, #12]
 8006624:	e08d      	b.n	8006742 <Apply_Config+0x266>
	}
    else if(strcmp(cfg_var, "HIGH_TH") == 0) 
 8006626:	4968      	ldr	r1, [pc, #416]	@ (80067c8 <Apply_Config+0x2ec>)
 8006628:	485f      	ldr	r0, [pc, #380]	@ (80067a8 <Apply_Config+0x2cc>)
 800662a:	f7f9 fdd1 	bl	80001d0 <strcmp>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d116      	bne.n	8006662 <Apply_Config+0x186>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 8006634:	4b65      	ldr	r3, [pc, #404]	@ (80067cc <Apply_Config+0x2f0>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	f2c0 8082 	blt.w	8006742 <Apply_Config+0x266>
 800663e:	4b63      	ldr	r3, [pc, #396]	@ (80067cc <Apply_Config+0x2f0>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b17      	cmp	r3, #23
 8006644:	dc7d      	bgt.n	8006742 <Apply_Config+0x266>
		{
            config.high_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 8006646:	4859      	ldr	r0, [pc, #356]	@ (80067ac <Apply_Config+0x2d0>)
 8006648:	f00f fa82 	bl	8015b50 <atoi>
 800664c:	4602      	mov	r2, r0
 800664e:	4b5f      	ldr	r3, [pc, #380]	@ (80067cc <Apply_Config+0x2f0>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	b291      	uxth	r1, r2
 8006654:	4a56      	ldr	r2, [pc, #344]	@ (80067b0 <Apply_Config+0x2d4>)
 8006656:	331c      	adds	r3, #28
 8006658:	005b      	lsls	r3, r3, #1
 800665a:	4413      	add	r3, r2
 800665c:	460a      	mov	r2, r1
 800665e:	80da      	strh	r2, [r3, #6]
 8006660:	e06f      	b.n	8006742 <Apply_Config+0x266>
        }
    }
    else if(strcmp(cfg_var, "LOW_TH") == 0) 
 8006662:	495b      	ldr	r1, [pc, #364]	@ (80067d0 <Apply_Config+0x2f4>)
 8006664:	4850      	ldr	r0, [pc, #320]	@ (80067a8 <Apply_Config+0x2cc>)
 8006666:	f7f9 fdb3 	bl	80001d0 <strcmp>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d115      	bne.n	800669c <Apply_Config+0x1c0>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 8006670:	4b56      	ldr	r3, [pc, #344]	@ (80067cc <Apply_Config+0x2f0>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	db64      	blt.n	8006742 <Apply_Config+0x266>
 8006678:	4b54      	ldr	r3, [pc, #336]	@ (80067cc <Apply_Config+0x2f0>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b17      	cmp	r3, #23
 800667e:	dc60      	bgt.n	8006742 <Apply_Config+0x266>
		{
            config.low_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 8006680:	484a      	ldr	r0, [pc, #296]	@ (80067ac <Apply_Config+0x2d0>)
 8006682:	f00f fa65 	bl	8015b50 <atoi>
 8006686:	4602      	mov	r2, r0
 8006688:	4b50      	ldr	r3, [pc, #320]	@ (80067cc <Apply_Config+0x2f0>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	b291      	uxth	r1, r2
 800668e:	4a48      	ldr	r2, [pc, #288]	@ (80067b0 <Apply_Config+0x2d4>)
 8006690:	3304      	adds	r3, #4
 8006692:	005b      	lsls	r3, r3, #1
 8006694:	4413      	add	r3, r2
 8006696:	460a      	mov	r2, r1
 8006698:	80da      	strh	r2, [r3, #6]
 800669a:	e052      	b.n	8006742 <Apply_Config+0x266>
        }
    }
    else if(strcmp(cfg_var, "DATA_TOPIC") == 0) 
 800669c:	494d      	ldr	r1, [pc, #308]	@ (80067d4 <Apply_Config+0x2f8>)
 800669e:	4842      	ldr	r0, [pc, #264]	@ (80067a8 <Apply_Config+0x2cc>)
 80066a0:	f7f9 fd96 	bl	80001d0 <strcmp>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10d      	bne.n	80066c6 <Apply_Config+0x1ea>
	{
        strncpy(config.data_topic, new_cfg_val, sizeof(config.data_topic) - 1);
 80066aa:	223f      	movs	r2, #63	@ 0x3f
 80066ac:	493f      	ldr	r1, [pc, #252]	@ (80067ac <Apply_Config+0x2d0>)
 80066ae:	484a      	ldr	r0, [pc, #296]	@ (80067d8 <Apply_Config+0x2fc>)
 80066b0:	f00f fb5f 	bl	8015d72 <strncpy>
        config.data_topic[sizeof(config.data_topic) - 1] = '\0';
 80066b4:	4b3e      	ldr	r3, [pc, #248]	@ (80067b0 <Apply_Config+0x2d4>)
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
		strcpy(sys.MQTT.Data_Topic, config.data_topic);
 80066bc:	4946      	ldr	r1, [pc, #280]	@ (80067d8 <Apply_Config+0x2fc>)
 80066be:	4847      	ldr	r0, [pc, #284]	@ (80067dc <Apply_Config+0x300>)
 80066c0:	f00f fbac 	bl	8015e1c <strcpy>
 80066c4:	e03d      	b.n	8006742 <Apply_Config+0x266>
    }
    else if(strcmp(cfg_var, "CMD_TOPIC") == 0) 
 80066c6:	4946      	ldr	r1, [pc, #280]	@ (80067e0 <Apply_Config+0x304>)
 80066c8:	4837      	ldr	r0, [pc, #220]	@ (80067a8 <Apply_Config+0x2cc>)
 80066ca:	f7f9 fd81 	bl	80001d0 <strcmp>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10d      	bne.n	80066f0 <Apply_Config+0x214>
	{
        strncpy(config.command_topic, new_cfg_val, sizeof(config.command_topic) - 1);
 80066d4:	223f      	movs	r2, #63	@ 0x3f
 80066d6:	4935      	ldr	r1, [pc, #212]	@ (80067ac <Apply_Config+0x2d0>)
 80066d8:	4842      	ldr	r0, [pc, #264]	@ (80067e4 <Apply_Config+0x308>)
 80066da:	f00f fb4a 	bl	8015d72 <strncpy>
        config.command_topic[sizeof(config.command_topic) - 1] = '\0';
 80066de:	4b34      	ldr	r3, [pc, #208]	@ (80067b0 <Apply_Config+0x2d4>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
		strcpy(sys.MQTT.Command_Topic, config.command_topic);
 80066e6:	493f      	ldr	r1, [pc, #252]	@ (80067e4 <Apply_Config+0x308>)
 80066e8:	483f      	ldr	r0, [pc, #252]	@ (80067e8 <Apply_Config+0x30c>)
 80066ea:	f00f fb97 	bl	8015e1c <strcpy>
 80066ee:	e028      	b.n	8006742 <Apply_Config+0x266>
    }
	else if(strcmp(cfg_var, "INFO_TOPIC") == 0)
 80066f0:	493e      	ldr	r1, [pc, #248]	@ (80067ec <Apply_Config+0x310>)
 80066f2:	482d      	ldr	r0, [pc, #180]	@ (80067a8 <Apply_Config+0x2cc>)
 80066f4:	f7f9 fd6c 	bl	80001d0 <strcmp>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10d      	bne.n	800671a <Apply_Config+0x23e>
	{
		strncpy(config.info_topic, new_cfg_val, sizeof(config.info_topic) - 1);
 80066fe:	223f      	movs	r2, #63	@ 0x3f
 8006700:	492a      	ldr	r1, [pc, #168]	@ (80067ac <Apply_Config+0x2d0>)
 8006702:	483b      	ldr	r0, [pc, #236]	@ (80067f0 <Apply_Config+0x314>)
 8006704:	f00f fb35 	bl	8015d72 <strncpy>
		config.info_topic[sizeof(config.info_topic) - 1] = '\0';
 8006708:	4b29      	ldr	r3, [pc, #164]	@ (80067b0 <Apply_Config+0x2d4>)
 800670a:	2200      	movs	r2, #0
 800670c:	f883 216d 	strb.w	r2, [r3, #365]	@ 0x16d
		strcpy(sys.MQTT.Info_Topic, config.info_topic);
 8006710:	4937      	ldr	r1, [pc, #220]	@ (80067f0 <Apply_Config+0x314>)
 8006712:	4838      	ldr	r0, [pc, #224]	@ (80067f4 <Apply_Config+0x318>)
 8006714:	f00f fb82 	bl	8015e1c <strcpy>
 8006718:	e013      	b.n	8006742 <Apply_Config+0x266>
	}
	else if(strcmp(cfg_var, "OTA_TOPIC") == 0)
 800671a:	4937      	ldr	r1, [pc, #220]	@ (80067f8 <Apply_Config+0x31c>)
 800671c:	4822      	ldr	r0, [pc, #136]	@ (80067a8 <Apply_Config+0x2cc>)
 800671e:	f7f9 fd57 	bl	80001d0 <strcmp>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d13a      	bne.n	800679e <Apply_Config+0x2c2>
	{
		strncpy(config.ota_topic, new_cfg_val, sizeof(config.ota_topic) - 1);
 8006728:	223f      	movs	r2, #63	@ 0x3f
 800672a:	4920      	ldr	r1, [pc, #128]	@ (80067ac <Apply_Config+0x2d0>)
 800672c:	4833      	ldr	r0, [pc, #204]	@ (80067fc <Apply_Config+0x320>)
 800672e:	f00f fb20 	bl	8015d72 <strncpy>
		config.ota_topic[sizeof(config.ota_topic) - 1] = '\0';
 8006732:	4b1f      	ldr	r3, [pc, #124]	@ (80067b0 <Apply_Config+0x2d4>)
 8006734:	2200      	movs	r2, #0
 8006736:	f883 212d 	strb.w	r2, [r3, #301]	@ 0x12d
		strcpy(sys.MQTT.OTA_Topic, config.ota_topic);
 800673a:	4930      	ldr	r1, [pc, #192]	@ (80067fc <Apply_Config+0x320>)
 800673c:	4830      	ldr	r0, [pc, #192]	@ (8006800 <Apply_Config+0x324>)
 800673e:	f00f fb6d 	bl	8015e1c <strcpy>
	else
	{
		return;
	}

	if (f_open(&config_file, CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) == FR_OK)
 8006742:	f107 0310 	add.w	r3, r7, #16
 8006746:	3b08      	subs	r3, #8
 8006748:	220a      	movs	r2, #10
 800674a:	492e      	ldr	r1, [pc, #184]	@ (8006804 <Apply_Config+0x328>)
 800674c:	4618      	mov	r0, r3
 800674e:	f002 ff4f 	bl	80095f0 <f_open>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d157      	bne.n	8006808 <Apply_Config+0x32c>
	{
		f_write(&config_file, &config, sizeof(config), &bytes_written);
 8006758:	f107 0310 	add.w	r3, r7, #16
 800675c:	3b0c      	subs	r3, #12
 800675e:	f107 0010 	add.w	r0, r7, #16
 8006762:	3808      	subs	r0, #8
 8006764:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8006768:	4911      	ldr	r1, [pc, #68]	@ (80067b0 <Apply_Config+0x2d4>)
 800676a:	f003 fa2c 	bl	8009bc6 <f_write>
		f_close(&config_file);
 800676e:	f107 0310 	add.w	r3, r7, #16
 8006772:	3b08      	subs	r3, #8
 8006774:	4618      	mov	r0, r3
 8006776:	f003 fc2f 	bl	8009fd8 <f_close>
	else
	{
		return;
	}
	
	memset(cfg_var, 0, sizeof(cfg_var));
 800677a:	2214      	movs	r2, #20
 800677c:	2100      	movs	r1, #0
 800677e:	480a      	ldr	r0, [pc, #40]	@ (80067a8 <Apply_Config+0x2cc>)
 8006780:	f00f fad0 	bl	8015d24 <memset>
	cfg_idx = 0;
 8006784:	4b11      	ldr	r3, [pc, #68]	@ (80067cc <Apply_Config+0x2f0>)
 8006786:	2200      	movs	r2, #0
 8006788:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 800678a:	220a      	movs	r2, #10
 800678c:	2100      	movs	r1, #0
 800678e:	4807      	ldr	r0, [pc, #28]	@ (80067ac <Apply_Config+0x2d0>)
 8006790:	f00f fac8 	bl	8015d24 <memset>
 8006794:	e039      	b.n	800680a <Apply_Config+0x32e>
			return;
 8006796:	bf00      	nop
 8006798:	e037      	b.n	800680a <Apply_Config+0x32e>
			return;
 800679a:	bf00      	nop
 800679c:	e035      	b.n	800680a <Apply_Config+0x32e>
		return;
 800679e:	bf00      	nop
 80067a0:	e033      	b.n	800680a <Apply_Config+0x32e>
 80067a2:	bf00      	nop
 80067a4:	08017338 	.word	0x08017338
 80067a8:	20005cc4 	.word	0x20005cc4
 80067ac:	20005cdc 	.word	0x20005cdc
 80067b0:	20001c6c 	.word	0x20001c6c
 80067b4:	08017344 	.word	0x08017344
 80067b8:	51eb851f 	.word	0x51eb851f
 80067bc:	08017350 	.word	0x08017350
 80067c0:	0801735c 	.word	0x0801735c
 80067c4:	0801736c 	.word	0x0801736c
 80067c8:	08017378 	.word	0x08017378
 80067cc:	20005cd8 	.word	0x20005cd8
 80067d0:	08017380 	.word	0x08017380
 80067d4:	08017388 	.word	0x08017388
 80067d8:	20001cda 	.word	0x20001cda
 80067dc:	20001a10 	.word	0x20001a10
 80067e0:	08017394 	.word	0x08017394
 80067e4:	20001d1a 	.word	0x20001d1a
 80067e8:	20001a74 	.word	0x20001a74
 80067ec:	080173a0 	.word	0x080173a0
 80067f0:	20001d9a 	.word	0x20001d9a
 80067f4:	20001b3c 	.word	0x20001b3c
 80067f8:	080173ac 	.word	0x080173ac
 80067fc:	20001d5a 	.word	0x20001d5a
 8006800:	20001ad8 	.word	0x20001ad8
 8006804:	080173b8 	.word	0x080173b8
		return;
 8006808:	bf00      	nop
}
 800680a:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	bd90      	pop	{r4, r7, pc}

08006814 <Get_Config>:

/*-----RECUPERO E INVIO VALORE DI CONFIGURAZIONE-----*/
void Get_Config(void)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b0a2      	sub	sp, #136	@ 0x88
 8006818:	af00      	add	r7, sp, #0
	char value_str[128] = {0};
 800681a:	1d3b      	adds	r3, r7, #4
 800681c:	2280      	movs	r2, #128	@ 0x80
 800681e:	2100      	movs	r1, #0
 8006820:	4618      	mov	r0, r3
 8006822:	f00f fa7f 	bl	8015d24 <memset>
	const char* topic = sys.MQTT.Info_Topic;
 8006826:	4b70      	ldr	r3, [pc, #448]	@ (80069e8 <Get_Config+0x1d4>)
 8006828:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

	if(strcmp(cfg_var, "DEVICE_ID") == 0)
 800682c:	496f      	ldr	r1, [pc, #444]	@ (80069ec <Get_Config+0x1d8>)
 800682e:	4870      	ldr	r0, [pc, #448]	@ (80069f0 <Get_Config+0x1dc>)
 8006830:	f7f9 fcce 	bl	80001d0 <strcmp>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d108      	bne.n	800684c <Get_Config+0x38>
	{
		sprintf(value_str, "%u", config.device_id);
 800683a:	4b6e      	ldr	r3, [pc, #440]	@ (80069f4 <Get_Config+0x1e0>)
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	461a      	mov	r2, r3
 8006840:	1d3b      	adds	r3, r7, #4
 8006842:	496d      	ldr	r1, [pc, #436]	@ (80069f8 <Get_Config+0x1e4>)
 8006844:	4618      	mov	r0, r3
 8006846:	f00f fa0d 	bl	8015c64 <siprintf>
 800684a:	e0b6      	b.n	80069ba <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "SAMP_FREQ") == 0)
 800684c:	496b      	ldr	r1, [pc, #428]	@ (80069fc <Get_Config+0x1e8>)
 800684e:	4868      	ldr	r0, [pc, #416]	@ (80069f0 <Get_Config+0x1dc>)
 8006850:	f7f9 fcbe 	bl	80001d0 <strcmp>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d108      	bne.n	800686c <Get_Config+0x58>
	{
		sprintf(value_str, "%u", config.samp_freq);
 800685a:	4b66      	ldr	r3, [pc, #408]	@ (80069f4 <Get_Config+0x1e0>)
 800685c:	885b      	ldrh	r3, [r3, #2]
 800685e:	461a      	mov	r2, r3
 8006860:	1d3b      	adds	r3, r7, #4
 8006862:	4965      	ldr	r1, [pc, #404]	@ (80069f8 <Get_Config+0x1e4>)
 8006864:	4618      	mov	r0, r3
 8006866:	f00f f9fd 	bl	8015c64 <siprintf>
 800686a:	e0a6      	b.n	80069ba <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "BUFFER_SECS") == 0)
 800686c:	4964      	ldr	r1, [pc, #400]	@ (8006a00 <Get_Config+0x1ec>)
 800686e:	4860      	ldr	r0, [pc, #384]	@ (80069f0 <Get_Config+0x1dc>)
 8006870:	f7f9 fcae 	bl	80001d0 <strcmp>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d108      	bne.n	800688c <Get_Config+0x78>
	{
		sprintf(value_str, "%u", config.buffering_secs);
 800687a:	4b5e      	ldr	r3, [pc, #376]	@ (80069f4 <Get_Config+0x1e0>)
 800687c:	791b      	ldrb	r3, [r3, #4]
 800687e:	461a      	mov	r2, r3
 8006880:	1d3b      	adds	r3, r7, #4
 8006882:	495d      	ldr	r1, [pc, #372]	@ (80069f8 <Get_Config+0x1e4>)
 8006884:	4618      	mov	r0, r3
 8006886:	f00f f9ed 	bl	8015c64 <siprintf>
 800688a:	e096      	b.n	80069ba <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "CONN_TIMEOUT") == 0)
 800688c:	495d      	ldr	r1, [pc, #372]	@ (8006a04 <Get_Config+0x1f0>)
 800688e:	4858      	ldr	r0, [pc, #352]	@ (80069f0 <Get_Config+0x1dc>)
 8006890:	f7f9 fc9e 	bl	80001d0 <strcmp>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d107      	bne.n	80068aa <Get_Config+0x96>
	{
		sprintf(value_str, "%lu", config.connection_timeout);
 800689a:	4b56      	ldr	r3, [pc, #344]	@ (80069f4 <Get_Config+0x1e0>)
 800689c:	689a      	ldr	r2, [r3, #8]
 800689e:	1d3b      	adds	r3, r7, #4
 80068a0:	4959      	ldr	r1, [pc, #356]	@ (8006a08 <Get_Config+0x1f4>)
 80068a2:	4618      	mov	r0, r3
 80068a4:	f00f f9de 	bl	8015c64 <siprintf>
 80068a8:	e087      	b.n	80069ba <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 80068aa:	4958      	ldr	r1, [pc, #352]	@ (8006a0c <Get_Config+0x1f8>)
 80068ac:	4850      	ldr	r0, [pc, #320]	@ (80069f0 <Get_Config+0x1dc>)
 80068ae:	f7f9 fc8f 	bl	80001d0 <strcmp>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d108      	bne.n	80068ca <Get_Config+0xb6>
	{
		sprintf(value_str, "%u", config.hammer_th);
 80068b8:	4b4e      	ldr	r3, [pc, #312]	@ (80069f4 <Get_Config+0x1e0>)
 80068ba:	899b      	ldrh	r3, [r3, #12]
 80068bc:	461a      	mov	r2, r3
 80068be:	1d3b      	adds	r3, r7, #4
 80068c0:	494d      	ldr	r1, [pc, #308]	@ (80069f8 <Get_Config+0x1e4>)
 80068c2:	4618      	mov	r0, r3
 80068c4:	f00f f9ce 	bl	8015c64 <siprintf>
 80068c8:	e077      	b.n	80069ba <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "HIGH_TH") == 0 && cfg_idx >= 0 && cfg_idx < 24)
 80068ca:	4951      	ldr	r1, [pc, #324]	@ (8006a10 <Get_Config+0x1fc>)
 80068cc:	4848      	ldr	r0, [pc, #288]	@ (80069f0 <Get_Config+0x1dc>)
 80068ce:	f7f9 fc7f 	bl	80001d0 <strcmp>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d115      	bne.n	8006904 <Get_Config+0xf0>
 80068d8:	4b4e      	ldr	r3, [pc, #312]	@ (8006a14 <Get_Config+0x200>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	db11      	blt.n	8006904 <Get_Config+0xf0>
 80068e0:	4b4c      	ldr	r3, [pc, #304]	@ (8006a14 <Get_Config+0x200>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b17      	cmp	r3, #23
 80068e6:	dc0d      	bgt.n	8006904 <Get_Config+0xf0>
	{
		sprintf(value_str, "%u", config.high_th[cfg_idx]);
 80068e8:	4b4a      	ldr	r3, [pc, #296]	@ (8006a14 <Get_Config+0x200>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a41      	ldr	r2, [pc, #260]	@ (80069f4 <Get_Config+0x1e0>)
 80068ee:	331c      	adds	r3, #28
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	4413      	add	r3, r2
 80068f4:	88db      	ldrh	r3, [r3, #6]
 80068f6:	461a      	mov	r2, r3
 80068f8:	1d3b      	adds	r3, r7, #4
 80068fa:	493f      	ldr	r1, [pc, #252]	@ (80069f8 <Get_Config+0x1e4>)
 80068fc:	4618      	mov	r0, r3
 80068fe:	f00f f9b1 	bl	8015c64 <siprintf>
 8006902:	e05a      	b.n	80069ba <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "LOW_TH") == 0 && cfg_idx >= 0 && cfg_idx < 24)
 8006904:	4944      	ldr	r1, [pc, #272]	@ (8006a18 <Get_Config+0x204>)
 8006906:	483a      	ldr	r0, [pc, #232]	@ (80069f0 <Get_Config+0x1dc>)
 8006908:	f7f9 fc62 	bl	80001d0 <strcmp>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d115      	bne.n	800693e <Get_Config+0x12a>
 8006912:	4b40      	ldr	r3, [pc, #256]	@ (8006a14 <Get_Config+0x200>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	db11      	blt.n	800693e <Get_Config+0x12a>
 800691a:	4b3e      	ldr	r3, [pc, #248]	@ (8006a14 <Get_Config+0x200>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b17      	cmp	r3, #23
 8006920:	dc0d      	bgt.n	800693e <Get_Config+0x12a>
	{
		sprintf(value_str, "%u", config.low_th[cfg_idx]);
 8006922:	4b3c      	ldr	r3, [pc, #240]	@ (8006a14 <Get_Config+0x200>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a33      	ldr	r2, [pc, #204]	@ (80069f4 <Get_Config+0x1e0>)
 8006928:	3304      	adds	r3, #4
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	4413      	add	r3, r2
 800692e:	88db      	ldrh	r3, [r3, #6]
 8006930:	461a      	mov	r2, r3
 8006932:	1d3b      	adds	r3, r7, #4
 8006934:	4930      	ldr	r1, [pc, #192]	@ (80069f8 <Get_Config+0x1e4>)
 8006936:	4618      	mov	r0, r3
 8006938:	f00f f994 	bl	8015c64 <siprintf>
 800693c:	e03d      	b.n	80069ba <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "DATA_TOPIC") == 0)
 800693e:	4937      	ldr	r1, [pc, #220]	@ (8006a1c <Get_Config+0x208>)
 8006940:	482b      	ldr	r0, [pc, #172]	@ (80069f0 <Get_Config+0x1dc>)
 8006942:	f7f9 fc45 	bl	80001d0 <strcmp>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d106      	bne.n	800695a <Get_Config+0x146>
	{
		strncpy(value_str, config.data_topic, sizeof(value_str)-1);
 800694c:	1d3b      	adds	r3, r7, #4
 800694e:	227f      	movs	r2, #127	@ 0x7f
 8006950:	4933      	ldr	r1, [pc, #204]	@ (8006a20 <Get_Config+0x20c>)
 8006952:	4618      	mov	r0, r3
 8006954:	f00f fa0d 	bl	8015d72 <strncpy>
 8006958:	e02f      	b.n	80069ba <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "CMD_TOPIC") == 0)
 800695a:	4932      	ldr	r1, [pc, #200]	@ (8006a24 <Get_Config+0x210>)
 800695c:	4824      	ldr	r0, [pc, #144]	@ (80069f0 <Get_Config+0x1dc>)
 800695e:	f7f9 fc37 	bl	80001d0 <strcmp>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d106      	bne.n	8006976 <Get_Config+0x162>
	{
		strncpy(value_str, config.command_topic, sizeof(value_str)-1);
 8006968:	1d3b      	adds	r3, r7, #4
 800696a:	227f      	movs	r2, #127	@ 0x7f
 800696c:	492e      	ldr	r1, [pc, #184]	@ (8006a28 <Get_Config+0x214>)
 800696e:	4618      	mov	r0, r3
 8006970:	f00f f9ff 	bl	8015d72 <strncpy>
 8006974:	e021      	b.n	80069ba <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "INFO_TOPIC") == 0)
 8006976:	492d      	ldr	r1, [pc, #180]	@ (8006a2c <Get_Config+0x218>)
 8006978:	481d      	ldr	r0, [pc, #116]	@ (80069f0 <Get_Config+0x1dc>)
 800697a:	f7f9 fc29 	bl	80001d0 <strcmp>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d106      	bne.n	8006992 <Get_Config+0x17e>
	{
		strncpy(value_str, config.info_topic, sizeof(value_str)-1);
 8006984:	1d3b      	adds	r3, r7, #4
 8006986:	227f      	movs	r2, #127	@ 0x7f
 8006988:	4929      	ldr	r1, [pc, #164]	@ (8006a30 <Get_Config+0x21c>)
 800698a:	4618      	mov	r0, r3
 800698c:	f00f f9f1 	bl	8015d72 <strncpy>
 8006990:	e013      	b.n	80069ba <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "OTA_TOPIC") == 0)
 8006992:	4928      	ldr	r1, [pc, #160]	@ (8006a34 <Get_Config+0x220>)
 8006994:	4816      	ldr	r0, [pc, #88]	@ (80069f0 <Get_Config+0x1dc>)
 8006996:	f7f9 fc1b 	bl	80001d0 <strcmp>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d106      	bne.n	80069ae <Get_Config+0x19a>
	{
		strncpy(value_str, config.ota_topic, sizeof(value_str)-1);
 80069a0:	1d3b      	adds	r3, r7, #4
 80069a2:	227f      	movs	r2, #127	@ 0x7f
 80069a4:	4924      	ldr	r1, [pc, #144]	@ (8006a38 <Get_Config+0x224>)
 80069a6:	4618      	mov	r0, r3
 80069a8:	f00f f9e3 	bl	8015d72 <strncpy>
 80069ac:	e005      	b.n	80069ba <Get_Config+0x1a6>
	}
	else
	{
		strncpy(value_str, "UNKNOWN", sizeof(value_str)-1);
 80069ae:	1d3b      	adds	r3, r7, #4
 80069b0:	227f      	movs	r2, #127	@ 0x7f
 80069b2:	4922      	ldr	r1, [pc, #136]	@ (8006a3c <Get_Config+0x228>)
 80069b4:	4618      	mov	r0, r3
 80069b6:	f00f f9dc 	bl	8015d72 <strncpy>
	}

	memset(cfg_var, 0, sizeof(cfg_var));
 80069ba:	2214      	movs	r2, #20
 80069bc:	2100      	movs	r1, #0
 80069be:	480c      	ldr	r0, [pc, #48]	@ (80069f0 <Get_Config+0x1dc>)
 80069c0:	f00f f9b0 	bl	8015d24 <memset>
	cfg_idx = 0;
 80069c4:	4b13      	ldr	r3, [pc, #76]	@ (8006a14 <Get_Config+0x200>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 80069ca:	220a      	movs	r2, #10
 80069cc:	2100      	movs	r1, #0
 80069ce:	481c      	ldr	r0, [pc, #112]	@ (8006a40 <Get_Config+0x22c>)
 80069d0:	f00f f9a8 	bl	8015d24 <memset>

	SIM_publish_MQTT_Message(topic, value_str);
 80069d4:	1d3b      	adds	r3, r7, #4
 80069d6:	4619      	mov	r1, r3
 80069d8:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80069dc:	f7fb fb0e 	bl	8001ffc <SIM_publish_MQTT_Message>
}
 80069e0:	bf00      	nop
 80069e2:	3788      	adds	r7, #136	@ 0x88
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	20001b3c 	.word	0x20001b3c
 80069ec:	08017338 	.word	0x08017338
 80069f0:	20005cc4 	.word	0x20005cc4
 80069f4:	20001c6c 	.word	0x20001c6c
 80069f8:	080173cc 	.word	0x080173cc
 80069fc:	08017344 	.word	0x08017344
 8006a00:	08017350 	.word	0x08017350
 8006a04:	0801735c 	.word	0x0801735c
 8006a08:	080173d0 	.word	0x080173d0
 8006a0c:	0801736c 	.word	0x0801736c
 8006a10:	08017378 	.word	0x08017378
 8006a14:	20005cd8 	.word	0x20005cd8
 8006a18:	08017380 	.word	0x08017380
 8006a1c:	08017388 	.word	0x08017388
 8006a20:	20001cda 	.word	0x20001cda
 8006a24:	08017394 	.word	0x08017394
 8006a28:	20001d1a 	.word	0x20001d1a
 8006a2c:	080173a0 	.word	0x080173a0
 8006a30:	20001d9a 	.word	0x20001d9a
 8006a34:	080173ac 	.word	0x080173ac
 8006a38:	20001d5a 	.word	0x20001d5a
 8006a3c:	080173d4 	.word	0x080173d4
 8006a40:	20005cdc 	.word	0x20005cdc

08006a44 <Clear_Flags>:

/*-----AZZERAMENTO FLAG-----*/
void Clear_Flags(void)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	af00      	add	r7, sp, #0
	memset(&sys, 0, sizeof(sys));
 8006a48:	f241 5228 	movw	r2, #5416	@ 0x1528
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	480c      	ldr	r0, [pc, #48]	@ (8006a80 <Clear_Flags+0x3c>)
 8006a50:	f00f f968 	bl	8015d24 <memset>
	if(!sys.ACC_Present)
 8006a54:	4b0a      	ldr	r3, [pc, #40]	@ (8006a80 <Clear_Flags+0x3c>)
 8006a56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a5a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d109      	bne.n	8006a7c <Clear_Flags+0x38>
	{
		sys.ACC_Present = 1;
 8006a68:	4b05      	ldr	r3, [pc, #20]	@ (8006a80 <Clear_Flags+0x3c>)
 8006a6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a6e:	461a      	mov	r2, r3
 8006a70:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8006a74:	f043 0301 	orr.w	r3, r3, #1
 8006a78:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
	}
}
 8006a7c:	bf00      	nop
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	20000740 	.word	0x20000740

08006a84 <psram_reset>:
uint32_t	psramSize = 0;
uint32_t	psramNumPages = 0;


int psram_reset()
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08e      	sub	sp, #56	@ 0x38
 8006a88:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = {0};
 8006a8a:	463b      	mov	r3, r7
 8006a8c:	2238      	movs	r2, #56	@ 0x38
 8006a8e:	2100      	movs	r1, #0
 8006a90:	4618      	mov	r0, r3
 8006a92:	f00f f947 	bl	8015d24 <memset>

	sCommand.Instruction = 0x66;
 8006a96:	2366      	movs	r3, #102	@ 0x66
 8006a98:	603b      	str	r3, [r7, #0]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8006a9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006a9e:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_NONE;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	60fb      	str	r3, [r7, #12]
	sCommand.NbData = 0;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006aa8:	463b      	mov	r3, r7
 8006aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aae:	4619      	mov	r1, r3
 8006ab0:	480e      	ldr	r0, [pc, #56]	@ (8006aec <psram_reset+0x68>)
 8006ab2:	f008 f93f 	bl	800ed34 <HAL_QSPI_Command>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <psram_reset+0x3e>
	{
		return -1;
 8006abc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac0:	e00f      	b.n	8006ae2 <psram_reset+0x5e>
	}

	sCommand.Instruction = 0x99;
 8006ac2:	2399      	movs	r3, #153	@ 0x99
 8006ac4:	603b      	str	r3, [r7, #0]

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006ac6:	463b      	mov	r3, r7
 8006ac8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006acc:	4619      	mov	r1, r3
 8006ace:	4807      	ldr	r0, [pc, #28]	@ (8006aec <psram_reset+0x68>)
 8006ad0:	f008 f930 	bl	800ed34 <HAL_QSPI_Command>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <psram_reset+0x5c>
	{
		return -1;
 8006ada:	f04f 33ff 	mov.w	r3, #4294967295
 8006ade:	e000      	b.n	8006ae2 <psram_reset+0x5e>
	}

	return 0;
 8006ae0:	2300      	movs	r3, #0

}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3738      	adds	r7, #56	@ 0x38
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	2000033c 	.word	0x2000033c

08006af0 <psram_qpi_mode>:
{
	return psramQSPI;
}

int psram_qpi_mode(uint8_t enable)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b090      	sub	sp, #64	@ 0x40
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	4603      	mov	r3, r0
 8006af8:	71fb      	strb	r3, [r7, #7]

	QSPI_CommandTypeDef sCommand = {0};
 8006afa:	f107 0308 	add.w	r3, r7, #8
 8006afe:	2238      	movs	r2, #56	@ 0x38
 8006b00:	2100      	movs	r1, #0
 8006b02:	4618      	mov	r0, r3
 8006b04:	f00f f90e 	bl	8015d24 <memset>

	if(!psramInitDone)return -1;
 8006b08:	4b1c      	ldr	r3, [pc, #112]	@ (8006b7c <psram_qpi_mode+0x8c>)
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d102      	bne.n	8006b16 <psram_qpi_mode+0x26>
 8006b10:	f04f 33ff 	mov.w	r3, #4294967295
 8006b14:	e02d      	b.n	8006b72 <psram_qpi_mode+0x82>

	if(psramQSPI==1 && enable == 0)
 8006b16:	4b1a      	ldr	r3, [pc, #104]	@ (8006b80 <psram_qpi_mode+0x90>)
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d108      	bne.n	8006b30 <psram_qpi_mode+0x40>
 8006b1e:	79fb      	ldrb	r3, [r7, #7]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d105      	bne.n	8006b30 <psram_qpi_mode+0x40>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_DISABLE;
 8006b24:	23f5      	movs	r3, #245	@ 0xf5
 8006b26:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8006b28:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006b2c:	623b      	str	r3, [r7, #32]
 8006b2e:	e00e      	b.n	8006b4e <psram_qpi_mode+0x5e>

	}else if(psramQSPI==0 && enable == 1)
 8006b30:	4b13      	ldr	r3, [pc, #76]	@ (8006b80 <psram_qpi_mode+0x90>)
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d108      	bne.n	8006b4a <psram_qpi_mode+0x5a>
 8006b38:	79fb      	ldrb	r3, [r7, #7]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d105      	bne.n	8006b4a <psram_qpi_mode+0x5a>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_ENABLE;
 8006b3e:	2335      	movs	r3, #53	@ 0x35
 8006b40:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8006b42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006b46:	623b      	str	r3, [r7, #32]
 8006b48:	e001      	b.n	8006b4e <psram_qpi_mode+0x5e>

	}else{

		return 0;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	e011      	b.n	8006b72 <psram_qpi_mode+0x82>

	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006b4e:	f107 0308 	add.w	r3, r7, #8
 8006b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b56:	4619      	mov	r1, r3
 8006b58:	480a      	ldr	r0, [pc, #40]	@ (8006b84 <psram_qpi_mode+0x94>)
 8006b5a:	f008 f8eb 	bl	800ed34 <HAL_QSPI_Command>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <psram_qpi_mode+0x7a>
	{
		return -1;
 8006b64:	f04f 33ff 	mov.w	r3, #4294967295
 8006b68:	e003      	b.n	8006b72 <psram_qpi_mode+0x82>
	}

	psramQSPI = enable;
 8006b6a:	4a05      	ldr	r2, [pc, #20]	@ (8006b80 <psram_qpi_mode+0x90>)
 8006b6c:	79fb      	ldrb	r3, [r7, #7]
 8006b6e:	7013      	strb	r3, [r2, #0]

	return 0;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3740      	adds	r7, #64	@ 0x40
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20005ce6 	.word	0x20005ce6
 8006b80:	20005ce7 	.word	0x20005ce7
 8006b84:	2000033c 	.word	0x2000033c

08006b88 <psram_read_id>:

int psram_read_id(uint8_t *id_data, int id_data_size)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b090      	sub	sp, #64	@ 0x40
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef sCommand = {0};
 8006b92:	f107 0308 	add.w	r3, r7, #8
 8006b96:	2238      	movs	r2, #56	@ 0x38
 8006b98:	2100      	movs	r1, #0
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f00f f8c2 	bl	8015d24 <memset>

	if(id_data == NULL || id_data_size < 8)return -2;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <psram_read_id+0x24>
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b07      	cmp	r3, #7
 8006baa:	dc02      	bgt.n	8006bb2 <psram_read_id+0x2a>
 8006bac:	f06f 0301 	mvn.w	r3, #1
 8006bb0:	e034      	b.n	8006c1c <psram_read_id+0x94>

	sCommand.Instruction = 0x9F;
 8006bb2:	239f      	movs	r3, #159	@ 0x9f
 8006bb4:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8006bb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006bba:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	60fb      	str	r3, [r7, #12]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8006bc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006bc4:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8006bc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006bca:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode    = QSPI_DATA_1_LINE;
 8006bcc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.NbData = 8;
 8006bd2:	2308      	movs	r3, #8
 8006bd4:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006bde:	2300      	movs	r3, #0
 8006be0:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006be2:	2300      	movs	r3, #0
 8006be4:	63fb      	str	r3, [r7, #60]	@ 0x3c

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006be6:	f107 0308 	add.w	r3, r7, #8
 8006bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bee:	4619      	mov	r1, r3
 8006bf0:	480c      	ldr	r0, [pc, #48]	@ (8006c24 <psram_read_id+0x9c>)
 8006bf2:	f008 f89f 	bl	800ed34 <HAL_QSPI_Command>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d002      	beq.n	8006c02 <psram_read_id+0x7a>
	{
		return -1;
 8006bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8006c00:	e00c      	b.n	8006c1c <psram_read_id+0x94>
	}

	if (HAL_QSPI_Receive(PSRAM_SPI, id_data, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c06:	6879      	ldr	r1, [r7, #4]
 8006c08:	4806      	ldr	r0, [pc, #24]	@ (8006c24 <psram_read_id+0x9c>)
 8006c0a:	f008 f988 	bl	800ef1e <HAL_QSPI_Receive>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d002      	beq.n	8006c1a <psram_read_id+0x92>
	{
		return -1;
 8006c14:	f04f 33ff 	mov.w	r3, #4294967295
 8006c18:	e000      	b.n	8006c1c <psram_read_id+0x94>
	}


	return 0;
 8006c1a:	2300      	movs	r3, #0

}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3740      	adds	r7, #64	@ 0x40
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	2000033c 	.word	0x2000033c

08006c28 <psram_internal_read_write>:

int psram_internal_read_write(uint8_t write, uint32_t address, uint16_t nbytes, uint8_t *pBuffer)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b092      	sub	sp, #72	@ 0x48
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60b9      	str	r1, [r7, #8]
 8006c30:	607b      	str	r3, [r7, #4]
 8006c32:	4603      	mov	r3, r0
 8006c34:	73fb      	strb	r3, [r7, #15]
 8006c36:	4613      	mov	r3, r2
 8006c38:	81bb      	strh	r3, [r7, #12]

	QSPI_CommandTypeDef sCommand = {0};
 8006c3a:	f107 0310 	add.w	r3, r7, #16
 8006c3e:	2238      	movs	r2, #56	@ 0x38
 8006c40:	2100      	movs	r1, #0
 8006c42:	4618      	mov	r0, r3
 8006c44:	f00f f86e 	bl	8015d24 <memset>

	sCommand.Address = address;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006c50:	2300      	movs	r3, #0
 8006c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006c54:	2300      	movs	r3, #0
 8006c56:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.NbData = nbytes;
 8006c5c:	89bb      	ldrh	r3, [r7, #12]
 8006c5e:	63bb      	str	r3, [r7, #56]	@ 0x38

	if(psramQSPI)
 8006c60:	4b33      	ldr	r3, [pc, #204]	@ (8006d30 <psram_internal_read_write+0x108>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d01a      	beq.n	8006c9e <psram_internal_read_write+0x76>
	{
		//QSPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE_QUAD : PSRAM_CMD_READ_FAST_QIO;
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <psram_internal_read_write+0x4a>
 8006c6e:	2338      	movs	r3, #56	@ 0x38
 8006c70:	e000      	b.n	8006c74 <psram_internal_read_write+0x4c>
 8006c72:	23eb      	movs	r3, #235	@ 0xeb
 8006c74:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8006c76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8006c7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006c80:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 8006c82:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_4_LINES;
 8006c88:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8006c8c:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_QPI_READ_FAST_QIO_WAIT;
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <psram_internal_read_write+0x70>
 8006c94:	2300      	movs	r3, #0
 8006c96:	e000      	b.n	8006c9a <psram_internal_read_write+0x72>
 8006c98:	2306      	movs	r3, #6
 8006c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c9c:	e019      	b.n	8006cd2 <psram_internal_read_write+0xaa>
	}else{
		//SPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE : PSRAM_CMD_READ_FAST;
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <psram_internal_read_write+0x80>
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	e000      	b.n	8006caa <psram_internal_read_write+0x82>
 8006ca8:	230b      	movs	r3, #11
 8006caa:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8006cac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8006cb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006cb6:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8006cb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_1_LINE;
 8006cbe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006cc2:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_READ_FAST_WAIT;
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d001      	beq.n	8006cce <psram_internal_read_write+0xa6>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	e000      	b.n	8006cd0 <psram_internal_read_write+0xa8>
 8006cce:	2308      	movs	r3, #8
 8006cd0:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006cd2:	f107 0310 	add.w	r3, r7, #16
 8006cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cda:	4619      	mov	r1, r3
 8006cdc:	4815      	ldr	r0, [pc, #84]	@ (8006d34 <psram_internal_read_write+0x10c>)
 8006cde:	f008 f829 	bl	800ed34 <HAL_QSPI_Command>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d002      	beq.n	8006cee <psram_internal_read_write+0xc6>
	{
		return -1;
 8006ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cec:	e01b      	b.n	8006d26 <psram_internal_read_write+0xfe>
	}

	if(write)
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00b      	beq.n	8006d0c <psram_internal_read_write+0xe4>
	{
		if (HAL_QSPI_Transmit(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006cf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cf8:	6879      	ldr	r1, [r7, #4]
 8006cfa:	480e      	ldr	r0, [pc, #56]	@ (8006d34 <psram_internal_read_write+0x10c>)
 8006cfc:	f008 f878 	bl	800edf0 <HAL_QSPI_Transmit>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00e      	beq.n	8006d24 <psram_internal_read_write+0xfc>
		{
			return -1;
 8006d06:	f04f 33ff 	mov.w	r3, #4294967295
 8006d0a:	e00c      	b.n	8006d26 <psram_internal_read_write+0xfe>
		}

	}else{

		if (HAL_QSPI_Receive(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d10:	6879      	ldr	r1, [r7, #4]
 8006d12:	4808      	ldr	r0, [pc, #32]	@ (8006d34 <psram_internal_read_write+0x10c>)
 8006d14:	f008 f903 	bl	800ef1e <HAL_QSPI_Receive>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d002      	beq.n	8006d24 <psram_internal_read_write+0xfc>
		{
			return -1;
 8006d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d22:	e000      	b.n	8006d26 <psram_internal_read_write+0xfe>
		}

	}

	return 0;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3748      	adds	r7, #72	@ 0x48
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20005ce7 	.word	0x20005ce7
 8006d34:	2000033c 	.word	0x2000033c

08006d38 <psram_sector_read_write>:


//Funzione usata da FatFs
int psram_sector_read_write(uint8_t write, uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b088      	sub	sp, #32
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60b9      	str	r1, [r7, #8]
 8006d40:	607a      	str	r2, [r7, #4]
 8006d42:	603b      	str	r3, [r7, #0]
 8006d44:	4603      	mov	r3, r0
 8006d46:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * PSRAM_PAGE_SIZE;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	029b      	lsls	r3, r3, #10
 8006d54:	61bb      	str	r3, [r7, #24]

	while(nsectors > 0)
 8006d56:	e018      	b.n	8006d8a <psram_sector_read_write+0x52>
	{
		result = psram_internal_read_write(write, address, PSRAM_PAGE_SIZE, wPtr);
 8006d58:	7bf8      	ldrb	r0, [r7, #15]
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006d60:	69b9      	ldr	r1, [r7, #24]
 8006d62:	f7ff ff61 	bl	8006c28 <psram_internal_read_write>
 8006d66:	6178      	str	r0, [r7, #20]
		if(result < 0)return -1;
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	da02      	bge.n	8006d74 <psram_sector_read_write+0x3c>
 8006d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d72:	e00e      	b.n	8006d92 <psram_sector_read_write+0x5a>
		address += PSRAM_PAGE_SIZE;
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d7a:	61bb      	str	r3, [r7, #24]
		wPtr += PSRAM_PAGE_SIZE;
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d82:	61fb      	str	r3, [r7, #28]
		nsectors--;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3b01      	subs	r3, #1
 8006d88:	607b      	str	r3, [r7, #4]
	while(nsectors > 0)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1e3      	bne.n	8006d58 <psram_sector_read_write+0x20>
	}

	return 0;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3720      	adds	r7, #32
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
	...

08006d9c <psram_read_write>:



int psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b088      	sub	sp, #32
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60b9      	str	r1, [r7, #8]
 8006da4:	607a      	str	r2, [r7, #4]
 8006da6:	603b      	str	r3, [r7, #0]
 8006da8:	4603      	mov	r3, r0
 8006daa:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8006dac:	2300      	movs	r3, #0
 8006dae:	61bb      	str	r3, [r7, #24]
	uint32_t trBytes = 0;
 8006db0:	2300      	movs	r3, #0
 8006db2:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	61fb      	str	r3, [r7, #28]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 8006db8:	4b1e      	ldr	r3, [pc, #120]	@ (8006e34 <psram_read_write+0x98>)
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <psram_read_write+0x2a>
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d102      	bne.n	8006dcc <psram_read_write+0x30>
 8006dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8006dca:	e02e      	b.n	8006e2a <psram_read_write+0x8e>
	if(address + nbytes >= psramSize)return -2;
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	441a      	add	r2, r3
 8006dd2:	4b19      	ldr	r3, [pc, #100]	@ (8006e38 <psram_read_write+0x9c>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d323      	bcc.n	8006e22 <psram_read_write+0x86>
 8006dda:	f06f 0301 	mvn.w	r3, #1
 8006dde:	e024      	b.n	8006e2a <psram_read_write+0x8e>

	while(nbytes > 0)
	{
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006de6:	bf28      	it	cs
 8006de8:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8006dec:	617b      	str	r3, [r7, #20]
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	7bf8      	ldrb	r0, [r7, #15]
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	68b9      	ldr	r1, [r7, #8]
 8006df8:	f7ff ff16 	bl	8006c28 <psram_internal_read_write>
 8006dfc:	61b8      	str	r0, [r7, #24]

		if(result < 0)return -1;
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	da02      	bge.n	8006e0a <psram_read_write+0x6e>
 8006e04:	f04f 33ff 	mov.w	r3, #4294967295
 8006e08:	e00f      	b.n	8006e2a <psram_read_write+0x8e>

		address += trBytes;
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	4413      	add	r3, r2
 8006e10:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 8006e12:	69fa      	ldr	r2, [r7, #28]
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	4413      	add	r3, r2
 8006e18:	61fb      	str	r3, [r7, #28]
		nbytes -= trBytes;
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	607b      	str	r3, [r7, #4]
	while(nbytes > 0)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1db      	bne.n	8006de0 <psram_read_write+0x44>
	}

	return 0;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3720      	adds	r7, #32
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	20005ce6 	.word	0x20005ce6
 8006e38:	20005cf0 	.word	0x20005cf0

08006e3c <raw_psram_read_write>:

int raw_psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60b9      	str	r1, [r7, #8]
 8006e44:	607a      	str	r2, [r7, #4]
 8006e46:	603b      	str	r3, [r7, #0]
 8006e48:	4603      	mov	r3, r0
 8006e4a:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	617b      	str	r3, [r7, #20]
	uint32_t trBytes = 0;
 8006e50:	2300      	movs	r3, #0
 8006e52:	61fb      	str	r3, [r7, #28]
	uint8_t *wPtr = pBuffer;
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	61bb      	str	r3, [r7, #24]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 8006e58:	4b21      	ldr	r3, [pc, #132]	@ (8006ee0 <raw_psram_read_write+0xa4>)
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d002      	beq.n	8006e66 <raw_psram_read_write+0x2a>
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d102      	bne.n	8006e6c <raw_psram_read_write+0x30>
 8006e66:	f04f 33ff 	mov.w	r3, #4294967295
 8006e6a:	e035      	b.n	8006ed8 <raw_psram_read_write+0x9c>
	if(address + nbytes >= psramSize)return -2;
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	441a      	add	r2, r3
 8006e72:	4b1c      	ldr	r3, [pc, #112]	@ (8006ee4 <raw_psram_read_write+0xa8>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d302      	bcc.n	8006e80 <raw_psram_read_write+0x44>
 8006e7a:	f06f 0301 	mvn.w	r3, #1
 8006e7e:	e02b      	b.n	8006ed8 <raw_psram_read_write+0x9c>

	trBytes = 1024 - address % 1024;
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e86:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8006e8a:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 8006e8c:	e020      	b.n	8006ed0 <raw_psram_read_write+0x94>
	{
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	7bf8      	ldrb	r0, [r7, #15]
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	68b9      	ldr	r1, [r7, #8]
 8006e98:	f7ff fec6 	bl	8006c28 <psram_internal_read_write>
 8006e9c:	6178      	str	r0, [r7, #20]

		if(result < 0)return -1;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	da02      	bge.n	8006eaa <raw_psram_read_write+0x6e>
 8006ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea8:	e016      	b.n	8006ed8 <raw_psram_read_write+0x9c>

		address += trBytes;
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	4413      	add	r3, r2
 8006eb0:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 8006eb2:	69ba      	ldr	r2, [r7, #24]
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	61bb      	str	r3, [r7, #24]
		nbytes -= trBytes;
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	607b      	str	r3, [r7, #4]
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ec8:	bf28      	it	cs
 8006eca:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8006ece:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1db      	bne.n	8006e8e <raw_psram_read_write+0x52>
	}

	return 0;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3720      	adds	r7, #32
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20005ce6 	.word	0x20005ce6
 8006ee4:	20005cf0 	.word	0x20005cf0

08006ee8 <RAM_Write>:
{
	return psram_read_write(1, address, nbytes, pBuffer);
}

int RAM_Write(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
	return raw_psram_read_write(1, address, nbytes, pBuffer);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	68f9      	ldr	r1, [r7, #12]
 8006efa:	2001      	movs	r0, #1
 8006efc:	f7ff ff9e 	bl	8006e3c <raw_psram_read_write>
 8006f00:	4603      	mov	r3, r0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <RAM_Read>:

int RAM_Read(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	60f8      	str	r0, [r7, #12]
 8006f12:	60b9      	str	r1, [r7, #8]
 8006f14:	607a      	str	r2, [r7, #4]
	return psram_read_write(0, address, nbytes, pBuffer);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	68f9      	ldr	r1, [r7, #12]
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	f7ff ff3d 	bl	8006d9c <psram_read_write>
 8006f22:	4603      	mov	r3, r0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <psram_is_initialized>:


int psram_is_initialized()
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
	return psramInitDone;
 8006f30:	4b03      	ldr	r3, [pc, #12]	@ (8006f40 <psram_is_initialized+0x14>)
 8006f32:	781b      	ldrb	r3, [r3, #0]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	20005ce6 	.word	0x20005ce6

08006f44 <psram_get_sector_size>:

unsigned int psram_get_sector_size()
{
 8006f44:	b480      	push	{r7}
 8006f46:	af00      	add	r7, sp, #0
	return PSRAM_PAGE_SIZE;
 8006f48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
	...

08006f58 <psram_get_sector_count>:

unsigned int psram_get_sector_count()
{
 8006f58:	b480      	push	{r7}
 8006f5a:	af00      	add	r7, sp, #0
	return psramNumPages;
 8006f5c:	4b03      	ldr	r3, [pc, #12]	@ (8006f6c <psram_get_sector_count+0x14>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	20005cf4 	.word	0x20005cf4

08006f70 <psram_get_size>:

unsigned int psram_get_size()
{
 8006f70:	b480      	push	{r7}
 8006f72:	af00      	add	r7, sp, #0
	return psramSize;
 8006f74:	4b03      	ldr	r3, [pc, #12]	@ (8006f84 <psram_get_size+0x14>)
 8006f76:	681b      	ldr	r3, [r3, #0]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	20005cf0 	.word	0x20005cf0

08006f88 <psram_init>:

int psram_init()
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0

	uint8_t density = 0xFF;
 8006f8e:	23ff      	movs	r3, #255	@ 0xff
 8006f90:	71fb      	strb	r3, [r7, #7]

	psramInitDone = 0;
 8006f92:	4b20      	ldr	r3, [pc, #128]	@ (8007014 <psram_init+0x8c>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	701a      	strb	r2, [r3, #0]

	if(psram_reset() < 0)return -1;
 8006f98:	f7ff fd74 	bl	8006a84 <psram_reset>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	da02      	bge.n	8006fa8 <psram_init+0x20>
 8006fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa6:	e030      	b.n	800700a <psram_init+0x82>

	memset(psramId, 0xFF, sizeof(psramId));
 8006fa8:	2208      	movs	r2, #8
 8006faa:	21ff      	movs	r1, #255	@ 0xff
 8006fac:	481a      	ldr	r0, [pc, #104]	@ (8007018 <psram_init+0x90>)
 8006fae:	f00e feb9 	bl	8015d24 <memset>

	if(psram_read_id(psramId, sizeof(psramId)) < 0)return -1;
 8006fb2:	2108      	movs	r1, #8
 8006fb4:	4818      	ldr	r0, [pc, #96]	@ (8007018 <psram_init+0x90>)
 8006fb6:	f7ff fde7 	bl	8006b88 <psram_read_id>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	da02      	bge.n	8006fc6 <psram_init+0x3e>
 8006fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc4:	e021      	b.n	800700a <psram_init+0x82>

	density = psramId[2] >> 5;
 8006fc6:	4b14      	ldr	r3, [pc, #80]	@ (8007018 <psram_init+0x90>)
 8006fc8:	789b      	ldrb	r3, [r3, #2]
 8006fca:	095b      	lsrs	r3, r3, #5
 8006fcc:	71fb      	strb	r3, [r7, #7]

	if(psramId[0] == PSRAM_MANUFACTURER && psramId[1] == PSRAM_KGD && density <= PSRAM_DENSITY_64MB)
 8006fce:	4b12      	ldr	r3, [pc, #72]	@ (8007018 <psram_init+0x90>)
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	2b0d      	cmp	r3, #13
 8006fd4:	d117      	bne.n	8007006 <psram_init+0x7e>
 8006fd6:	4b10      	ldr	r3, [pc, #64]	@ (8007018 <psram_init+0x90>)
 8006fd8:	785b      	ldrb	r3, [r3, #1]
 8006fda:	2b5d      	cmp	r3, #93	@ 0x5d
 8006fdc:	d113      	bne.n	8007006 <psram_init+0x7e>
 8006fde:	79fb      	ldrb	r3, [r7, #7]
 8006fe0:	2b03      	cmp	r3, #3
 8006fe2:	d810      	bhi.n	8007006 <psram_init+0x7e>
	{
		psramSize = PSRAM_DENSITY_64MB_EADDR;
 8006fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800701c <psram_init+0x94>)
 8006fe6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006fea:	601a      	str	r2, [r3, #0]
		psramNumPages = psramSize / PSRAM_PAGE_SIZE;
 8006fec:	4b0b      	ldr	r3, [pc, #44]	@ (800701c <psram_init+0x94>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	0a9b      	lsrs	r3, r3, #10
 8006ff2:	4a0b      	ldr	r2, [pc, #44]	@ (8007020 <psram_init+0x98>)
 8006ff4:	6013      	str	r3, [r2, #0]

		psram_qpi_mode(1);
 8006ff6:	2001      	movs	r0, #1
 8006ff8:	f7ff fd7a 	bl	8006af0 <psram_qpi_mode>

		psramInitDone = 1;
 8006ffc:	4b05      	ldr	r3, [pc, #20]	@ (8007014 <psram_init+0x8c>)
 8006ffe:	2201      	movs	r2, #1
 8007000:	701a      	strb	r2, [r3, #0]
		return 0;
 8007002:	2300      	movs	r3, #0
 8007004:	e001      	b.n	800700a <psram_init+0x82>
	}else{
		return -1;
 8007006:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20005ce6 	.word	0x20005ce6
 8007018:	20005ce8 	.word	0x20005ce8
 800701c:	20005cf0 	.word	0x20005cf0
 8007020:	20005cf4 	.word	0x20005cf4

08007024 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800702a:	4b0f      	ldr	r3, [pc, #60]	@ (8007068 <HAL_MspInit+0x44>)
 800702c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800702e:	4a0e      	ldr	r2, [pc, #56]	@ (8007068 <HAL_MspInit+0x44>)
 8007030:	f043 0301 	orr.w	r3, r3, #1
 8007034:	6613      	str	r3, [r2, #96]	@ 0x60
 8007036:	4b0c      	ldr	r3, [pc, #48]	@ (8007068 <HAL_MspInit+0x44>)
 8007038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	607b      	str	r3, [r7, #4]
 8007040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007042:	4b09      	ldr	r3, [pc, #36]	@ (8007068 <HAL_MspInit+0x44>)
 8007044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007046:	4a08      	ldr	r2, [pc, #32]	@ (8007068 <HAL_MspInit+0x44>)
 8007048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800704c:	6593      	str	r3, [r2, #88]	@ 0x58
 800704e:	4b06      	ldr	r3, [pc, #24]	@ (8007068 <HAL_MspInit+0x44>)
 8007050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007056:	603b      	str	r3, [r7, #0]
 8007058:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800705a:	bf00      	nop
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	40021000 	.word	0x40021000

0800706c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b0ac      	sub	sp, #176	@ 0xb0
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007074:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007078:	2200      	movs	r2, #0
 800707a:	601a      	str	r2, [r3, #0]
 800707c:	605a      	str	r2, [r3, #4]
 800707e:	609a      	str	r2, [r3, #8]
 8007080:	60da      	str	r2, [r3, #12]
 8007082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007084:	f107 0314 	add.w	r3, r7, #20
 8007088:	2288      	movs	r2, #136	@ 0x88
 800708a:	2100      	movs	r1, #0
 800708c:	4618      	mov	r0, r3
 800708e:	f00e fe49 	bl	8015d24 <memset>
  if(hadc->Instance==ADC1)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a3d      	ldr	r2, [pc, #244]	@ (800718c <HAL_ADC_MspInit+0x120>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d172      	bne.n	8007182 <HAL_ADC_MspInit+0x116>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800709c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80070a0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80070a2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80070a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80070aa:	2303      	movs	r3, #3
 80070ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80070ae:	2301      	movs	r3, #1
 80070b0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80070b2:	2308      	movs	r3, #8
 80070b4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80070b6:	2307      	movs	r3, #7
 80070b8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80070ba:	2302      	movs	r3, #2
 80070bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80070be:	2302      	movs	r3, #2
 80070c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80070c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80070c6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80070c8:	f107 0314 	add.w	r3, r7, #20
 80070cc:	4618      	mov	r0, r3
 80070ce:	f009 f81d 	bl	801010c <HAL_RCCEx_PeriphCLKConfig>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d001      	beq.n	80070dc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80070d8:	f7fe f806 	bl	80050e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80070dc:	4b2c      	ldr	r3, [pc, #176]	@ (8007190 <HAL_ADC_MspInit+0x124>)
 80070de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070e0:	4a2b      	ldr	r2, [pc, #172]	@ (8007190 <HAL_ADC_MspInit+0x124>)
 80070e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80070e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80070e8:	4b29      	ldr	r3, [pc, #164]	@ (8007190 <HAL_ADC_MspInit+0x124>)
 80070ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070f0:	613b      	str	r3, [r7, #16]
 80070f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070f4:	4b26      	ldr	r3, [pc, #152]	@ (8007190 <HAL_ADC_MspInit+0x124>)
 80070f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070f8:	4a25      	ldr	r2, [pc, #148]	@ (8007190 <HAL_ADC_MspInit+0x124>)
 80070fa:	f043 0301 	orr.w	r3, r3, #1
 80070fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007100:	4b23      	ldr	r3, [pc, #140]	@ (8007190 <HAL_ADC_MspInit+0x124>)
 8007102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	60fb      	str	r3, [r7, #12]
 800710a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800710c:	2310      	movs	r3, #16
 800710e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8007112:	230b      	movs	r3, #11
 8007114:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007118:	2300      	movs	r3, #0
 800711a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800711e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007122:	4619      	mov	r1, r3
 8007124:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007128:	f006 fd80 	bl	800dc2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800712c:	4b19      	ldr	r3, [pc, #100]	@ (8007194 <HAL_ADC_MspInit+0x128>)
 800712e:	4a1a      	ldr	r2, [pc, #104]	@ (8007198 <HAL_ADC_MspInit+0x12c>)
 8007130:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8007132:	4b18      	ldr	r3, [pc, #96]	@ (8007194 <HAL_ADC_MspInit+0x128>)
 8007134:	2200      	movs	r2, #0
 8007136:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007138:	4b16      	ldr	r3, [pc, #88]	@ (8007194 <HAL_ADC_MspInit+0x128>)
 800713a:	2200      	movs	r2, #0
 800713c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800713e:	4b15      	ldr	r3, [pc, #84]	@ (8007194 <HAL_ADC_MspInit+0x128>)
 8007140:	2200      	movs	r2, #0
 8007142:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007144:	4b13      	ldr	r3, [pc, #76]	@ (8007194 <HAL_ADC_MspInit+0x128>)
 8007146:	2280      	movs	r2, #128	@ 0x80
 8007148:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800714a:	4b12      	ldr	r3, [pc, #72]	@ (8007194 <HAL_ADC_MspInit+0x128>)
 800714c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007150:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007152:	4b10      	ldr	r3, [pc, #64]	@ (8007194 <HAL_ADC_MspInit+0x128>)
 8007154:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007158:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800715a:	4b0e      	ldr	r3, [pc, #56]	@ (8007194 <HAL_ADC_MspInit+0x128>)
 800715c:	2220      	movs	r2, #32
 800715e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007160:	4b0c      	ldr	r3, [pc, #48]	@ (8007194 <HAL_ADC_MspInit+0x128>)
 8007162:	2200      	movs	r2, #0
 8007164:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007166:	480b      	ldr	r0, [pc, #44]	@ (8007194 <HAL_ADC_MspInit+0x128>)
 8007168:	f005 fc5a 	bl	800ca20 <HAL_DMA_Init>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8007172:	f7fd ffb9 	bl	80050e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a06      	ldr	r2, [pc, #24]	@ (8007194 <HAL_ADC_MspInit+0x128>)
 800717a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800717c:	4a05      	ldr	r2, [pc, #20]	@ (8007194 <HAL_ADC_MspInit+0x128>)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8007182:	bf00      	nop
 8007184:	37b0      	adds	r7, #176	@ 0xb0
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	50040000 	.word	0x50040000
 8007190:	40021000 	.word	0x40021000
 8007194:	2000027c 	.word	0x2000027c
 8007198:	40020008 	.word	0x40020008

0800719c <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a0a      	ldr	r2, [pc, #40]	@ (80071d4 <HAL_CRC_MspInit+0x38>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d10b      	bne.n	80071c6 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80071ae:	4b0a      	ldr	r3, [pc, #40]	@ (80071d8 <HAL_CRC_MspInit+0x3c>)
 80071b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071b2:	4a09      	ldr	r2, [pc, #36]	@ (80071d8 <HAL_CRC_MspInit+0x3c>)
 80071b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80071b8:	6493      	str	r3, [r2, #72]	@ 0x48
 80071ba:	4b07      	ldr	r3, [pc, #28]	@ (80071d8 <HAL_CRC_MspInit+0x3c>)
 80071bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80071c6:	bf00      	nop
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	40023000 	.word	0x40023000
 80071d8:	40021000 	.word	0x40021000

080071dc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b0ac      	sub	sp, #176	@ 0xb0
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80071e8:	2200      	movs	r2, #0
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	605a      	str	r2, [r3, #4]
 80071ee:	609a      	str	r2, [r3, #8]
 80071f0:	60da      	str	r2, [r3, #12]
 80071f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80071f4:	f107 0314 	add.w	r3, r7, #20
 80071f8:	2288      	movs	r2, #136	@ 0x88
 80071fa:	2100      	movs	r1, #0
 80071fc:	4618      	mov	r0, r3
 80071fe:	f00e fd91 	bl	8015d24 <memset>
  if(hi2c->Instance==I2C3)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a21      	ldr	r2, [pc, #132]	@ (800728c <HAL_I2C_MspInit+0xb0>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d13b      	bne.n	8007284 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800720c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007210:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8007212:	2300      	movs	r3, #0
 8007214:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007216:	f107 0314 	add.w	r3, r7, #20
 800721a:	4618      	mov	r0, r3
 800721c:	f008 ff76 	bl	801010c <HAL_RCCEx_PeriphCLKConfig>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8007226:	f7fd ff5f 	bl	80050e8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800722a:	4b19      	ldr	r3, [pc, #100]	@ (8007290 <HAL_I2C_MspInit+0xb4>)
 800722c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800722e:	4a18      	ldr	r2, [pc, #96]	@ (8007290 <HAL_I2C_MspInit+0xb4>)
 8007230:	f043 0304 	orr.w	r3, r3, #4
 8007234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007236:	4b16      	ldr	r3, [pc, #88]	@ (8007290 <HAL_I2C_MspInit+0xb4>)
 8007238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800723a:	f003 0304 	and.w	r3, r3, #4
 800723e:	613b      	str	r3, [r7, #16]
 8007240:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007242:	2303      	movs	r3, #3
 8007244:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007248:	2312      	movs	r3, #18
 800724a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800724e:	2300      	movs	r3, #0
 8007250:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007254:	2303      	movs	r3, #3
 8007256:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800725a:	2304      	movs	r3, #4
 800725c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007260:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007264:	4619      	mov	r1, r3
 8007266:	480b      	ldr	r0, [pc, #44]	@ (8007294 <HAL_I2C_MspInit+0xb8>)
 8007268:	f006 fce0 	bl	800dc2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800726c:	4b08      	ldr	r3, [pc, #32]	@ (8007290 <HAL_I2C_MspInit+0xb4>)
 800726e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007270:	4a07      	ldr	r2, [pc, #28]	@ (8007290 <HAL_I2C_MspInit+0xb4>)
 8007272:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007276:	6593      	str	r3, [r2, #88]	@ 0x58
 8007278:	4b05      	ldr	r3, [pc, #20]	@ (8007290 <HAL_I2C_MspInit+0xb4>)
 800727a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800727c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007280:	60fb      	str	r3, [r7, #12]
 8007282:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8007284:	bf00      	nop
 8007286:	37b0      	adds	r7, #176	@ 0xb0
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	40005c00 	.word	0x40005c00
 8007290:	40021000 	.word	0x40021000
 8007294:	48000800 	.word	0x48000800

08007298 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b08a      	sub	sp, #40	@ 0x28
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072a0:	f107 0314 	add.w	r3, r7, #20
 80072a4:	2200      	movs	r2, #0
 80072a6:	601a      	str	r2, [r3, #0]
 80072a8:	605a      	str	r2, [r3, #4]
 80072aa:	609a      	str	r2, [r3, #8]
 80072ac:	60da      	str	r2, [r3, #12]
 80072ae:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a26      	ldr	r2, [pc, #152]	@ (8007350 <HAL_QSPI_MspInit+0xb8>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d145      	bne.n	8007346 <HAL_QSPI_MspInit+0xae>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80072ba:	4b26      	ldr	r3, [pc, #152]	@ (8007354 <HAL_QSPI_MspInit+0xbc>)
 80072bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072be:	4a25      	ldr	r2, [pc, #148]	@ (8007354 <HAL_QSPI_MspInit+0xbc>)
 80072c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072c4:	6513      	str	r3, [r2, #80]	@ 0x50
 80072c6:	4b23      	ldr	r3, [pc, #140]	@ (8007354 <HAL_QSPI_MspInit+0xbc>)
 80072c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072ce:	613b      	str	r3, [r7, #16]
 80072d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072d2:	4b20      	ldr	r3, [pc, #128]	@ (8007354 <HAL_QSPI_MspInit+0xbc>)
 80072d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072d6:	4a1f      	ldr	r2, [pc, #124]	@ (8007354 <HAL_QSPI_MspInit+0xbc>)
 80072d8:	f043 0301 	orr.w	r3, r3, #1
 80072dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80072de:	4b1d      	ldr	r3, [pc, #116]	@ (8007354 <HAL_QSPI_MspInit+0xbc>)
 80072e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072ea:	4b1a      	ldr	r3, [pc, #104]	@ (8007354 <HAL_QSPI_MspInit+0xbc>)
 80072ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072ee:	4a19      	ldr	r2, [pc, #100]	@ (8007354 <HAL_QSPI_MspInit+0xbc>)
 80072f0:	f043 0302 	orr.w	r3, r3, #2
 80072f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80072f6:	4b17      	ldr	r3, [pc, #92]	@ (8007354 <HAL_QSPI_MspInit+0xbc>)
 80072f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	60bb      	str	r3, [r7, #8]
 8007300:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007302:	23c0      	movs	r3, #192	@ 0xc0
 8007304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007306:	2302      	movs	r3, #2
 8007308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800730a:	2300      	movs	r3, #0
 800730c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800730e:	2303      	movs	r3, #3
 8007310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8007312:	230a      	movs	r3, #10
 8007314:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007316:	f107 0314 	add.w	r3, r7, #20
 800731a:	4619      	mov	r1, r3
 800731c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007320:	f006 fc84 	bl	800dc2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8007324:	f640 4303 	movw	r3, #3075	@ 0xc03
 8007328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800732a:	2302      	movs	r3, #2
 800732c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800732e:	2300      	movs	r3, #0
 8007330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007332:	2303      	movs	r3, #3
 8007334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8007336:	230a      	movs	r3, #10
 8007338:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800733a:	f107 0314 	add.w	r3, r7, #20
 800733e:	4619      	mov	r1, r3
 8007340:	4805      	ldr	r0, [pc, #20]	@ (8007358 <HAL_QSPI_MspInit+0xc0>)
 8007342:	f006 fc73 	bl	800dc2c <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8007346:	bf00      	nop
 8007348:	3728      	adds	r7, #40	@ 0x28
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	a0001000 	.word	0xa0001000
 8007354:	40021000 	.word	0x40021000
 8007358:	48000400 	.word	0x48000400

0800735c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b0a4      	sub	sp, #144	@ 0x90
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007364:	f107 0308 	add.w	r3, r7, #8
 8007368:	2288      	movs	r2, #136	@ 0x88
 800736a:	2100      	movs	r1, #0
 800736c:	4618      	mov	r0, r3
 800736e:	f00e fcd9 	bl	8015d24 <memset>
  if(hrtc->Instance==RTC)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a14      	ldr	r2, [pc, #80]	@ (80073c8 <HAL_RTC_MspInit+0x6c>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d120      	bne.n	80073be <HAL_RTC_MspInit+0x62>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800737c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007380:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007382:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007386:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800738a:	f107 0308 	add.w	r3, r7, #8
 800738e:	4618      	mov	r0, r3
 8007390:	f008 febc 	bl	801010c <HAL_RCCEx_PeriphCLKConfig>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800739a:	f7fd fea5 	bl	80050e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800739e:	4b0b      	ldr	r3, [pc, #44]	@ (80073cc <HAL_RTC_MspInit+0x70>)
 80073a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073a4:	4a09      	ldr	r2, [pc, #36]	@ (80073cc <HAL_RTC_MspInit+0x70>)
 80073a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80073ae:	2200      	movs	r2, #0
 80073b0:	2100      	movs	r1, #0
 80073b2:	2029      	movs	r0, #41	@ 0x29
 80073b4:	f005 f8f1 	bl	800c59a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80073b8:	2029      	movs	r0, #41	@ 0x29
 80073ba:	f005 f90a 	bl	800c5d2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80073be:	bf00      	nop
 80073c0:	3790      	adds	r7, #144	@ 0x90
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	40002800 	.word	0x40002800
 80073cc:	40021000 	.word	0x40021000

080073d0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08c      	sub	sp, #48	@ 0x30
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073d8:	f107 031c 	add.w	r3, r7, #28
 80073dc:	2200      	movs	r2, #0
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	605a      	str	r2, [r3, #4]
 80073e2:	609a      	str	r2, [r3, #8]
 80073e4:	60da      	str	r2, [r3, #12]
 80073e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a2f      	ldr	r2, [pc, #188]	@ (80074ac <HAL_SPI_MspInit+0xdc>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d129      	bne.n	8007446 <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80073f2:	4b2f      	ldr	r3, [pc, #188]	@ (80074b0 <HAL_SPI_MspInit+0xe0>)
 80073f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073f6:	4a2e      	ldr	r2, [pc, #184]	@ (80074b0 <HAL_SPI_MspInit+0xe0>)
 80073f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80073fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80073fe:	4b2c      	ldr	r3, [pc, #176]	@ (80074b0 <HAL_SPI_MspInit+0xe0>)
 8007400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007402:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007406:	61bb      	str	r3, [r7, #24]
 8007408:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800740a:	4b29      	ldr	r3, [pc, #164]	@ (80074b0 <HAL_SPI_MspInit+0xe0>)
 800740c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800740e:	4a28      	ldr	r2, [pc, #160]	@ (80074b0 <HAL_SPI_MspInit+0xe0>)
 8007410:	f043 0302 	orr.w	r3, r3, #2
 8007414:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007416:	4b26      	ldr	r3, [pc, #152]	@ (80074b0 <HAL_SPI_MspInit+0xe0>)
 8007418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800741a:	f003 0302 	and.w	r3, r3, #2
 800741e:	617b      	str	r3, [r7, #20]
 8007420:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007422:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8007426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007428:	2302      	movs	r3, #2
 800742a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800742c:	2300      	movs	r3, #0
 800742e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007430:	2303      	movs	r3, #3
 8007432:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007434:	2305      	movs	r3, #5
 8007436:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007438:	f107 031c 	add.w	r3, r7, #28
 800743c:	4619      	mov	r1, r3
 800743e:	481d      	ldr	r0, [pc, #116]	@ (80074b4 <HAL_SPI_MspInit+0xe4>)
 8007440:	f006 fbf4 	bl	800dc2c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007444:	e02d      	b.n	80074a2 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a1b      	ldr	r2, [pc, #108]	@ (80074b8 <HAL_SPI_MspInit+0xe8>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d128      	bne.n	80074a2 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007450:	4b17      	ldr	r3, [pc, #92]	@ (80074b0 <HAL_SPI_MspInit+0xe0>)
 8007452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007454:	4a16      	ldr	r2, [pc, #88]	@ (80074b0 <HAL_SPI_MspInit+0xe0>)
 8007456:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800745a:	6593      	str	r3, [r2, #88]	@ 0x58
 800745c:	4b14      	ldr	r3, [pc, #80]	@ (80074b0 <HAL_SPI_MspInit+0xe0>)
 800745e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007460:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007464:	613b      	str	r3, [r7, #16]
 8007466:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007468:	4b11      	ldr	r3, [pc, #68]	@ (80074b0 <HAL_SPI_MspInit+0xe0>)
 800746a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800746c:	4a10      	ldr	r2, [pc, #64]	@ (80074b0 <HAL_SPI_MspInit+0xe0>)
 800746e:	f043 0304 	orr.w	r3, r3, #4
 8007472:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007474:	4b0e      	ldr	r3, [pc, #56]	@ (80074b0 <HAL_SPI_MspInit+0xe0>)
 8007476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007478:	f003 0304 	and.w	r3, r3, #4
 800747c:	60fb      	str	r3, [r7, #12]
 800747e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007480:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8007484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007486:	2302      	movs	r3, #2
 8007488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800748a:	2300      	movs	r3, #0
 800748c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800748e:	2303      	movs	r3, #3
 8007490:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007492:	2306      	movs	r3, #6
 8007494:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007496:	f107 031c 	add.w	r3, r7, #28
 800749a:	4619      	mov	r1, r3
 800749c:	4807      	ldr	r0, [pc, #28]	@ (80074bc <HAL_SPI_MspInit+0xec>)
 800749e:	f006 fbc5 	bl	800dc2c <HAL_GPIO_Init>
}
 80074a2:	bf00      	nop
 80074a4:	3730      	adds	r7, #48	@ 0x30
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	40003800 	.word	0x40003800
 80074b0:	40021000 	.word	0x40021000
 80074b4:	48000400 	.word	0x48000400
 80074b8:	40003c00 	.word	0x40003c00
 80074bc:	48000800 	.word	0x48000800

080074c0 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a0a      	ldr	r2, [pc, #40]	@ (80074f8 <HAL_TIM_OC_MspInit+0x38>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d10b      	bne.n	80074ea <HAL_TIM_OC_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80074d2:	4b0a      	ldr	r3, [pc, #40]	@ (80074fc <HAL_TIM_OC_MspInit+0x3c>)
 80074d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074d6:	4a09      	ldr	r2, [pc, #36]	@ (80074fc <HAL_TIM_OC_MspInit+0x3c>)
 80074d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80074dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80074de:	4b07      	ldr	r3, [pc, #28]	@ (80074fc <HAL_TIM_OC_MspInit+0x3c>)
 80074e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074e6:	60fb      	str	r3, [r7, #12]
 80074e8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80074ea:	bf00      	nop
 80074ec:	3714      	adds	r7, #20
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	40012c00 	.word	0x40012c00
 80074fc:	40021000 	.word	0x40021000

08007500 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b08a      	sub	sp, #40	@ 0x28
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007508:	f107 0314 	add.w	r3, r7, #20
 800750c:	2200      	movs	r2, #0
 800750e:	601a      	str	r2, [r3, #0]
 8007510:	605a      	str	r2, [r3, #4]
 8007512:	609a      	str	r2, [r3, #8]
 8007514:	60da      	str	r2, [r3, #12]
 8007516:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007520:	d128      	bne.n	8007574 <HAL_TIM_IC_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007522:	4b16      	ldr	r3, [pc, #88]	@ (800757c <HAL_TIM_IC_MspInit+0x7c>)
 8007524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007526:	4a15      	ldr	r2, [pc, #84]	@ (800757c <HAL_TIM_IC_MspInit+0x7c>)
 8007528:	f043 0301 	orr.w	r3, r3, #1
 800752c:	6593      	str	r3, [r2, #88]	@ 0x58
 800752e:	4b13      	ldr	r3, [pc, #76]	@ (800757c <HAL_TIM_IC_MspInit+0x7c>)
 8007530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	613b      	str	r3, [r7, #16]
 8007538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800753a:	4b10      	ldr	r3, [pc, #64]	@ (800757c <HAL_TIM_IC_MspInit+0x7c>)
 800753c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800753e:	4a0f      	ldr	r2, [pc, #60]	@ (800757c <HAL_TIM_IC_MspInit+0x7c>)
 8007540:	f043 0301 	orr.w	r3, r3, #1
 8007544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007546:	4b0d      	ldr	r3, [pc, #52]	@ (800757c <HAL_TIM_IC_MspInit+0x7c>)
 8007548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	60fb      	str	r3, [r7, #12]
 8007550:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007552:	2320      	movs	r3, #32
 8007554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007556:	2302      	movs	r3, #2
 8007558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800755a:	2301      	movs	r3, #1
 800755c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800755e:	2300      	movs	r3, #0
 8007560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007562:	2301      	movs	r3, #1
 8007564:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007566:	f107 0314 	add.w	r3, r7, #20
 800756a:	4619      	mov	r1, r3
 800756c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007570:	f006 fb5c 	bl	800dc2c <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8007574:	bf00      	nop
 8007576:	3728      	adds	r7, #40	@ 0x28
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	40021000 	.word	0x40021000

08007580 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a13      	ldr	r2, [pc, #76]	@ (80075dc <HAL_TIM_Base_MspInit+0x5c>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d10c      	bne.n	80075ac <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007592:	4b13      	ldr	r3, [pc, #76]	@ (80075e0 <HAL_TIM_Base_MspInit+0x60>)
 8007594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007596:	4a12      	ldr	r2, [pc, #72]	@ (80075e0 <HAL_TIM_Base_MspInit+0x60>)
 8007598:	f043 0302 	orr.w	r3, r3, #2
 800759c:	6593      	str	r3, [r2, #88]	@ 0x58
 800759e:	4b10      	ldr	r3, [pc, #64]	@ (80075e0 <HAL_TIM_Base_MspInit+0x60>)
 80075a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075a2:	f003 0302 	and.w	r3, r3, #2
 80075a6:	60fb      	str	r3, [r7, #12]
 80075a8:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80075aa:	e010      	b.n	80075ce <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a0c      	ldr	r2, [pc, #48]	@ (80075e4 <HAL_TIM_Base_MspInit+0x64>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d10b      	bne.n	80075ce <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80075b6:	4b0a      	ldr	r3, [pc, #40]	@ (80075e0 <HAL_TIM_Base_MspInit+0x60>)
 80075b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075ba:	4a09      	ldr	r2, [pc, #36]	@ (80075e0 <HAL_TIM_Base_MspInit+0x60>)
 80075bc:	f043 0304 	orr.w	r3, r3, #4
 80075c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80075c2:	4b07      	ldr	r3, [pc, #28]	@ (80075e0 <HAL_TIM_Base_MspInit+0x60>)
 80075c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075c6:	f003 0304 	and.w	r3, r3, #4
 80075ca:	60bb      	str	r3, [r7, #8]
 80075cc:	68bb      	ldr	r3, [r7, #8]
}
 80075ce:	bf00      	nop
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	40000400 	.word	0x40000400
 80075e0:	40021000 	.word	0x40021000
 80075e4:	40000800 	.word	0x40000800

080075e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08a      	sub	sp, #40	@ 0x28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075f0:	f107 0314 	add.w	r3, r7, #20
 80075f4:	2200      	movs	r2, #0
 80075f6:	601a      	str	r2, [r3, #0]
 80075f8:	605a      	str	r2, [r3, #4]
 80075fa:	609a      	str	r2, [r3, #8]
 80075fc:	60da      	str	r2, [r3, #12]
 80075fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a23      	ldr	r2, [pc, #140]	@ (8007694 <HAL_TIM_MspPostInit+0xac>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d11e      	bne.n	8007648 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800760a:	4b23      	ldr	r3, [pc, #140]	@ (8007698 <HAL_TIM_MspPostInit+0xb0>)
 800760c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800760e:	4a22      	ldr	r2, [pc, #136]	@ (8007698 <HAL_TIM_MspPostInit+0xb0>)
 8007610:	f043 0301 	orr.w	r3, r3, #1
 8007614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007616:	4b20      	ldr	r3, [pc, #128]	@ (8007698 <HAL_TIM_MspPostInit+0xb0>)
 8007618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	613b      	str	r3, [r7, #16]
 8007620:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8007622:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8007626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007628:	2302      	movs	r3, #2
 800762a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800762c:	2300      	movs	r3, #0
 800762e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007630:	2300      	movs	r3, #0
 8007632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007634:	2301      	movs	r3, #1
 8007636:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007638:	f107 0314 	add.w	r3, r7, #20
 800763c:	4619      	mov	r1, r3
 800763e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007642:	f006 faf3 	bl	800dc2c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8007646:	e021      	b.n	800768c <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a13      	ldr	r2, [pc, #76]	@ (800769c <HAL_TIM_MspPostInit+0xb4>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d11c      	bne.n	800768c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007652:	4b11      	ldr	r3, [pc, #68]	@ (8007698 <HAL_TIM_MspPostInit+0xb0>)
 8007654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007656:	4a10      	ldr	r2, [pc, #64]	@ (8007698 <HAL_TIM_MspPostInit+0xb0>)
 8007658:	f043 0304 	orr.w	r3, r3, #4
 800765c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800765e:	4b0e      	ldr	r3, [pc, #56]	@ (8007698 <HAL_TIM_MspPostInit+0xb0>)
 8007660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007662:	f003 0304 	and.w	r3, r3, #4
 8007666:	60fb      	str	r3, [r7, #12]
 8007668:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800766a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800766e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007670:	2302      	movs	r3, #2
 8007672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007674:	2300      	movs	r3, #0
 8007676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007678:	2300      	movs	r3, #0
 800767a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800767c:	2302      	movs	r3, #2
 800767e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007680:	f107 0314 	add.w	r3, r7, #20
 8007684:	4619      	mov	r1, r3
 8007686:	4806      	ldr	r0, [pc, #24]	@ (80076a0 <HAL_TIM_MspPostInit+0xb8>)
 8007688:	f006 fad0 	bl	800dc2c <HAL_GPIO_Init>
}
 800768c:	bf00      	nop
 800768e:	3728      	adds	r7, #40	@ 0x28
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	40012c00 	.word	0x40012c00
 8007698:	40021000 	.word	0x40021000
 800769c:	40000400 	.word	0x40000400
 80076a0:	48000800 	.word	0x48000800

080076a4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b0ae      	sub	sp, #184	@ 0xb8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076ac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80076b0:	2200      	movs	r2, #0
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	605a      	str	r2, [r3, #4]
 80076b6:	609a      	str	r2, [r3, #8]
 80076b8:	60da      	str	r2, [r3, #12]
 80076ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80076bc:	f107 031c 	add.w	r3, r7, #28
 80076c0:	2288      	movs	r2, #136	@ 0x88
 80076c2:	2100      	movs	r1, #0
 80076c4:	4618      	mov	r0, r3
 80076c6:	f00e fb2d 	bl	8015d24 <memset>
  if(huart->Instance==UART4)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a6b      	ldr	r2, [pc, #428]	@ (800787c <HAL_UART_MspInit+0x1d8>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d13c      	bne.n	800774e <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80076d4:	2308      	movs	r3, #8
 80076d6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80076d8:	2300      	movs	r3, #0
 80076da:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80076dc:	f107 031c 	add.w	r3, r7, #28
 80076e0:	4618      	mov	r0, r3
 80076e2:	f008 fd13 	bl	801010c <HAL_RCCEx_PeriphCLKConfig>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80076ec:	f7fd fcfc 	bl	80050e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80076f0:	4b63      	ldr	r3, [pc, #396]	@ (8007880 <HAL_UART_MspInit+0x1dc>)
 80076f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076f4:	4a62      	ldr	r2, [pc, #392]	@ (8007880 <HAL_UART_MspInit+0x1dc>)
 80076f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80076fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80076fc:	4b60      	ldr	r3, [pc, #384]	@ (8007880 <HAL_UART_MspInit+0x1dc>)
 80076fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007700:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007704:	61bb      	str	r3, [r7, #24]
 8007706:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007708:	4b5d      	ldr	r3, [pc, #372]	@ (8007880 <HAL_UART_MspInit+0x1dc>)
 800770a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800770c:	4a5c      	ldr	r2, [pc, #368]	@ (8007880 <HAL_UART_MspInit+0x1dc>)
 800770e:	f043 0301 	orr.w	r3, r3, #1
 8007712:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007714:	4b5a      	ldr	r3, [pc, #360]	@ (8007880 <HAL_UART_MspInit+0x1dc>)
 8007716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007718:	f003 0301 	and.w	r3, r3, #1
 800771c:	617b      	str	r3, [r7, #20]
 800771e:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007720:	2301      	movs	r3, #1
 8007722:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007726:	2312      	movs	r3, #18
 8007728:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800772c:	2301      	movs	r3, #1
 800772e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007732:	2303      	movs	r3, #3
 8007734:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007738:	2308      	movs	r3, #8
 800773a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800773e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8007742:	4619      	mov	r1, r3
 8007744:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007748:	f006 fa70 	bl	800dc2c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 800774c:	e092      	b.n	8007874 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART1)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a4c      	ldr	r2, [pc, #304]	@ (8007884 <HAL_UART_MspInit+0x1e0>)
 8007754:	4293      	cmp	r3, r2
 8007756:	f040 808d 	bne.w	8007874 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800775a:	2301      	movs	r3, #1
 800775c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800775e:	2300      	movs	r3, #0
 8007760:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007762:	f107 031c 	add.w	r3, r7, #28
 8007766:	4618      	mov	r0, r3
 8007768:	f008 fcd0 	bl	801010c <HAL_RCCEx_PeriphCLKConfig>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8007772:	f7fd fcb9 	bl	80050e8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8007776:	4b42      	ldr	r3, [pc, #264]	@ (8007880 <HAL_UART_MspInit+0x1dc>)
 8007778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800777a:	4a41      	ldr	r2, [pc, #260]	@ (8007880 <HAL_UART_MspInit+0x1dc>)
 800777c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007780:	6613      	str	r3, [r2, #96]	@ 0x60
 8007782:	4b3f      	ldr	r3, [pc, #252]	@ (8007880 <HAL_UART_MspInit+0x1dc>)
 8007784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007786:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800778a:	613b      	str	r3, [r7, #16]
 800778c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800778e:	4b3c      	ldr	r3, [pc, #240]	@ (8007880 <HAL_UART_MspInit+0x1dc>)
 8007790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007792:	4a3b      	ldr	r2, [pc, #236]	@ (8007880 <HAL_UART_MspInit+0x1dc>)
 8007794:	f043 0302 	orr.w	r3, r3, #2
 8007798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800779a:	4b39      	ldr	r3, [pc, #228]	@ (8007880 <HAL_UART_MspInit+0x1dc>)
 800779c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800779e:	f003 0302 	and.w	r3, r3, #2
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 80077a6:	23d8      	movs	r3, #216	@ 0xd8
 80077a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077ac:	2302      	movs	r3, #2
 80077ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077b2:	2300      	movs	r3, #0
 80077b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077b8:	2303      	movs	r3, #3
 80077ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80077be:	2307      	movs	r3, #7
 80077c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077c4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80077c8:	4619      	mov	r1, r3
 80077ca:	482f      	ldr	r0, [pc, #188]	@ (8007888 <HAL_UART_MspInit+0x1e4>)
 80077cc:	f006 fa2e 	bl	800dc2c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80077d0:	4b2e      	ldr	r3, [pc, #184]	@ (800788c <HAL_UART_MspInit+0x1e8>)
 80077d2:	4a2f      	ldr	r2, [pc, #188]	@ (8007890 <HAL_UART_MspInit+0x1ec>)
 80077d4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80077d6:	4b2d      	ldr	r3, [pc, #180]	@ (800788c <HAL_UART_MspInit+0x1e8>)
 80077d8:	2202      	movs	r2, #2
 80077da:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80077dc:	4b2b      	ldr	r3, [pc, #172]	@ (800788c <HAL_UART_MspInit+0x1e8>)
 80077de:	2200      	movs	r2, #0
 80077e0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80077e2:	4b2a      	ldr	r3, [pc, #168]	@ (800788c <HAL_UART_MspInit+0x1e8>)
 80077e4:	2200      	movs	r2, #0
 80077e6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80077e8:	4b28      	ldr	r3, [pc, #160]	@ (800788c <HAL_UART_MspInit+0x1e8>)
 80077ea:	2280      	movs	r2, #128	@ 0x80
 80077ec:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80077ee:	4b27      	ldr	r3, [pc, #156]	@ (800788c <HAL_UART_MspInit+0x1e8>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80077f4:	4b25      	ldr	r3, [pc, #148]	@ (800788c <HAL_UART_MspInit+0x1e8>)
 80077f6:	2200      	movs	r2, #0
 80077f8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80077fa:	4b24      	ldr	r3, [pc, #144]	@ (800788c <HAL_UART_MspInit+0x1e8>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007800:	4b22      	ldr	r3, [pc, #136]	@ (800788c <HAL_UART_MspInit+0x1e8>)
 8007802:	2200      	movs	r2, #0
 8007804:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007806:	4821      	ldr	r0, [pc, #132]	@ (800788c <HAL_UART_MspInit+0x1e8>)
 8007808:	f005 f90a 	bl	800ca20 <HAL_DMA_Init>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d001      	beq.n	8007816 <HAL_UART_MspInit+0x172>
      Error_Handler();
 8007812:	f7fd fc69 	bl	80050e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a1c      	ldr	r2, [pc, #112]	@ (800788c <HAL_UART_MspInit+0x1e8>)
 800781a:	675a      	str	r2, [r3, #116]	@ 0x74
 800781c:	4a1b      	ldr	r2, [pc, #108]	@ (800788c <HAL_UART_MspInit+0x1e8>)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007822:	4b1c      	ldr	r3, [pc, #112]	@ (8007894 <HAL_UART_MspInit+0x1f0>)
 8007824:	4a1c      	ldr	r2, [pc, #112]	@ (8007898 <HAL_UART_MspInit+0x1f4>)
 8007826:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8007828:	4b1a      	ldr	r3, [pc, #104]	@ (8007894 <HAL_UART_MspInit+0x1f0>)
 800782a:	2202      	movs	r2, #2
 800782c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800782e:	4b19      	ldr	r3, [pc, #100]	@ (8007894 <HAL_UART_MspInit+0x1f0>)
 8007830:	2210      	movs	r2, #16
 8007832:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007834:	4b17      	ldr	r3, [pc, #92]	@ (8007894 <HAL_UART_MspInit+0x1f0>)
 8007836:	2200      	movs	r2, #0
 8007838:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800783a:	4b16      	ldr	r3, [pc, #88]	@ (8007894 <HAL_UART_MspInit+0x1f0>)
 800783c:	2280      	movs	r2, #128	@ 0x80
 800783e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007840:	4b14      	ldr	r3, [pc, #80]	@ (8007894 <HAL_UART_MspInit+0x1f0>)
 8007842:	2200      	movs	r2, #0
 8007844:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007846:	4b13      	ldr	r3, [pc, #76]	@ (8007894 <HAL_UART_MspInit+0x1f0>)
 8007848:	2200      	movs	r2, #0
 800784a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800784c:	4b11      	ldr	r3, [pc, #68]	@ (8007894 <HAL_UART_MspInit+0x1f0>)
 800784e:	2200      	movs	r2, #0
 8007850:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007852:	4b10      	ldr	r3, [pc, #64]	@ (8007894 <HAL_UART_MspInit+0x1f0>)
 8007854:	2200      	movs	r2, #0
 8007856:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007858:	480e      	ldr	r0, [pc, #56]	@ (8007894 <HAL_UART_MspInit+0x1f0>)
 800785a:	f005 f8e1 	bl	800ca20 <HAL_DMA_Init>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d001      	beq.n	8007868 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8007864:	f7fd fc40 	bl	80050e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a0a      	ldr	r2, [pc, #40]	@ (8007894 <HAL_UART_MspInit+0x1f0>)
 800786c:	671a      	str	r2, [r3, #112]	@ 0x70
 800786e:	4a09      	ldr	r2, [pc, #36]	@ (8007894 <HAL_UART_MspInit+0x1f0>)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8007874:	bf00      	nop
 8007876:	37b8      	adds	r7, #184	@ 0xb8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	40004c00 	.word	0x40004c00
 8007880:	40021000 	.word	0x40021000
 8007884:	40013800 	.word	0x40013800
 8007888:	48000400 	.word	0x48000400
 800788c:	200006ac 	.word	0x200006ac
 8007890:	40020058 	.word	0x40020058
 8007894:	200006f4 	.word	0x200006f4
 8007898:	40020044 	.word	0x40020044

0800789c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800789c:	b480      	push	{r7}
 800789e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80078a0:	bf00      	nop
 80078a2:	e7fd      	b.n	80078a0 <NMI_Handler+0x4>

080078a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80078a4:	b480      	push	{r7}
 80078a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80078a8:	bf00      	nop
 80078aa:	e7fd      	b.n	80078a8 <HardFault_Handler+0x4>

080078ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80078ac:	b480      	push	{r7}
 80078ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80078b0:	bf00      	nop
 80078b2:	e7fd      	b.n	80078b0 <MemManage_Handler+0x4>

080078b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80078b4:	b480      	push	{r7}
 80078b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80078b8:	bf00      	nop
 80078ba:	e7fd      	b.n	80078b8 <BusFault_Handler+0x4>

080078bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80078bc:	b480      	push	{r7}
 80078be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80078c0:	bf00      	nop
 80078c2:	e7fd      	b.n	80078c0 <UsageFault_Handler+0x4>

080078c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80078c4:	b480      	push	{r7}
 80078c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80078c8:	bf00      	nop
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80078d2:	b480      	push	{r7}
 80078d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80078d6:	bf00      	nop
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80078e0:	b480      	push	{r7}
 80078e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80078e4:	bf00      	nop
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr

080078ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80078f2:	f003 f983 	bl	800abfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80078f6:	bf00      	nop
 80078f8:	bd80      	pop	{r7, pc}
	...

080078fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007900:	4802      	ldr	r0, [pc, #8]	@ (800790c <DMA1_Channel1_IRQHandler+0x10>)
 8007902:	f005 f9e3 	bl	800cccc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007906:	bf00      	nop
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	2000027c 	.word	0x2000027c

08007910 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8007914:	4802      	ldr	r0, [pc, #8]	@ (8007920 <DMA1_Channel4_IRQHandler+0x10>)
 8007916:	f005 f9d9 	bl	800cccc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800791a:	bf00      	nop
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	200006f4 	.word	0x200006f4

08007924 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007928:	4802      	ldr	r0, [pc, #8]	@ (8007934 <DMA1_Channel5_IRQHandler+0x10>)
 800792a:	f005 f9cf 	bl	800cccc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800792e:	bf00      	nop
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	200006ac 	.word	0x200006ac

08007938 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800793c:	4802      	ldr	r0, [pc, #8]	@ (8007948 <RTC_Alarm_IRQHandler+0x10>)
 800793e:	f009 fbe5 	bl	801110c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8007942:	bf00      	nop
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	20000380 	.word	0x20000380

0800794c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b086      	sub	sp, #24
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007954:	4a14      	ldr	r2, [pc, #80]	@ (80079a8 <_sbrk+0x5c>)
 8007956:	4b15      	ldr	r3, [pc, #84]	@ (80079ac <_sbrk+0x60>)
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007960:	4b13      	ldr	r3, [pc, #76]	@ (80079b0 <_sbrk+0x64>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d102      	bne.n	800796e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007968:	4b11      	ldr	r3, [pc, #68]	@ (80079b0 <_sbrk+0x64>)
 800796a:	4a12      	ldr	r2, [pc, #72]	@ (80079b4 <_sbrk+0x68>)
 800796c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800796e:	4b10      	ldr	r3, [pc, #64]	@ (80079b0 <_sbrk+0x64>)
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4413      	add	r3, r2
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	429a      	cmp	r2, r3
 800797a:	d207      	bcs.n	800798c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800797c:	f00e fa22 	bl	8015dc4 <__errno>
 8007980:	4603      	mov	r3, r0
 8007982:	220c      	movs	r2, #12
 8007984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007986:	f04f 33ff 	mov.w	r3, #4294967295
 800798a:	e009      	b.n	80079a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800798c:	4b08      	ldr	r3, [pc, #32]	@ (80079b0 <_sbrk+0x64>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007992:	4b07      	ldr	r3, [pc, #28]	@ (80079b0 <_sbrk+0x64>)
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4413      	add	r3, r2
 800799a:	4a05      	ldr	r2, [pc, #20]	@ (80079b0 <_sbrk+0x64>)
 800799c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800799e:	68fb      	ldr	r3, [r7, #12]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3718      	adds	r7, #24
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	20018000 	.word	0x20018000
 80079ac:	00000400 	.word	0x00000400
 80079b0:	20005cf8 	.word	0x20005cf8
 80079b4:	20005e58 	.word	0x20005e58

080079b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80079b8:	b480      	push	{r7}
 80079ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80079bc:	4b06      	ldr	r3, [pc, #24]	@ (80079d8 <SystemInit+0x20>)
 80079be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079c2:	4a05      	ldr	r2, [pc, #20]	@ (80079d8 <SystemInit+0x20>)
 80079c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80079c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80079cc:	bf00      	nop
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	e000ed00 	.word	0xe000ed00

080079dc <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	4603      	mov	r3, r0
 80079e4:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;

	switch (pdrv) {
 80079e6:	79fb      	ldrb	r3, [r7, #7]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <disk_status+0x16>
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d00c      	beq.n	8007a0a <disk_status+0x2e>
 80079f0:	e017      	b.n	8007a22 <disk_status+0x46>
	case DEV_RAM :

		if(!psram_is_initialized())
 80079f2:	f7ff fa9b 	bl	8006f2c <psram_is_initialized>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d102      	bne.n	8007a02 <disk_status+0x26>
		{
			stat = STA_NOINIT;
 80079fc:	2301      	movs	r3, #1
 80079fe:	73fb      	strb	r3, [r7, #15]
 8007a00:	e001      	b.n	8007a06 <disk_status+0x2a>
		}else{
			stat = 0;
 8007a02:	2300      	movs	r3, #0
 8007a04:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
 8007a08:	e00c      	b.n	8007a24 <disk_status+0x48>

	case DEV_MMC :

		if(!extflash_is_initialized())
 8007a0a:	f7fb fa9f 	bl	8002f4c <extflash_is_initialized>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d102      	bne.n	8007a1a <disk_status+0x3e>
		{
			stat = STA_NOINIT;
 8007a14:	2301      	movs	r3, #1
 8007a16:	73fb      	strb	r3, [r7, #15]
 8007a18:	e001      	b.n	8007a1e <disk_status+0x42>
		}else{
			stat = 0;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
 8007a20:	e000      	b.n	8007a24 <disk_status+0x48>

	}
	return STA_NOINIT;
 8007a22:	2301      	movs	r3, #1
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	4603      	mov	r3, r0
 8007a34:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;
	switch (pdrv) {
 8007a36:	79fb      	ldrb	r3, [r7, #7]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d002      	beq.n	8007a42 <disk_initialize+0x16>
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d00c      	beq.n	8007a5a <disk_initialize+0x2e>
 8007a40:	e017      	b.n	8007a72 <disk_initialize+0x46>
	case DEV_RAM :

		if(psram_init() < 0)
 8007a42:	f7ff faa1 	bl	8006f88 <psram_init>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	da02      	bge.n	8007a52 <disk_initialize+0x26>
		{
			stat = STA_NODISK;
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	73fb      	strb	r3, [r7, #15]
 8007a50:	e001      	b.n	8007a56 <disk_initialize+0x2a>
		}else{
			stat = 0;
 8007a52:	2300      	movs	r3, #0
 8007a54:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
 8007a58:	e00c      	b.n	8007a74 <disk_initialize+0x48>

	case DEV_MMC :

		if(extflash_init() < 0)
 8007a5a:	f7fb fa83 	bl	8002f64 <extflash_init>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	da02      	bge.n	8007a6a <disk_initialize+0x3e>
		{
			stat = STA_NODISK;
 8007a64:	2302      	movs	r3, #2
 8007a66:	73fb      	strb	r3, [r7, #15]
 8007a68:	e001      	b.n	8007a6e <disk_initialize+0x42>
		}else{
			stat = 0;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
 8007a70:	e000      	b.n	8007a74 <disk_initialize+0x48>

	}
	return STA_NOINIT;
 8007a72:	2301      	movs	r3, #1
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60b9      	str	r1, [r7, #8]
 8007a84:	607a      	str	r2, [r7, #4]
 8007a86:	603b      	str	r3, [r7, #0]
 8007a88:	4603      	mov	r3, r0
 8007a8a:	73fb      	strb	r3, [r7, #15]
	DRESULT res;
	int result;

	switch (pdrv) {
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d002      	beq.n	8007a98 <disk_read+0x1c>
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d010      	beq.n	8007ab8 <disk_read+0x3c>
 8007a96:	e01e      	b.n	8007ad6 <disk_read+0x5a>
	case DEV_RAM :

		if(psram_sector_read_write(0, sector, count, buff) < 0)
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	6879      	ldr	r1, [r7, #4]
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	f7ff f94a 	bl	8006d38 <psram_sector_read_write>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	da02      	bge.n	8007ab0 <disk_read+0x34>
		{
			res = RES_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	75fb      	strb	r3, [r7, #23]
 8007aae:	e001      	b.n	8007ab4 <disk_read+0x38>
		}else{

			res = 0;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
 8007ab6:	e00f      	b.n	8007ad8 <disk_read+0x5c>

	case DEV_MMC :

		if(extflash_sector_read(sector, count, buff) < 0)
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7fb f929 	bl	8002d14 <extflash_sector_read>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	da02      	bge.n	8007ace <disk_read+0x52>
		{
			res = RES_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	75fb      	strb	r3, [r7, #23]
 8007acc:	e001      	b.n	8007ad2 <disk_read+0x56>
		}else{

			res = 0;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007ad2:	7dfb      	ldrb	r3, [r7, #23]
 8007ad4:	e000      	b.n	8007ad8 <disk_read+0x5c>

	}

	return RES_PARERR;
 8007ad6:	2304      	movs	r3, #4
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3718      	adds	r7, #24
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60b9      	str	r1, [r7, #8]
 8007ae8:	607a      	str	r2, [r7, #4]
 8007aea:	603b      	str	r3, [r7, #0]
 8007aec:	4603      	mov	r3, r0
 8007aee:	73fb      	strb	r3, [r7, #15]
	DRESULT res = RES_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	75fb      	strb	r3, [r7, #23]

	switch (pdrv) {
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d002      	beq.n	8007b00 <disk_write+0x20>
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d010      	beq.n	8007b20 <disk_write+0x40>
 8007afe:	e01e      	b.n	8007b3e <disk_write+0x5e>
	case DEV_RAM :

		if(psram_sector_read_write(1, sector, count, (const uint8_t *)buff) < 0)
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	6879      	ldr	r1, [r7, #4]
 8007b06:	2001      	movs	r0, #1
 8007b08:	f7ff f916 	bl	8006d38 <psram_sector_read_write>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	da02      	bge.n	8007b18 <disk_write+0x38>
		{
			res = RES_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	75fb      	strb	r3, [r7, #23]
 8007b16:	e001      	b.n	8007b1c <disk_write+0x3c>
		}else{

			res = 0;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007b1c:	7dfb      	ldrb	r3, [r7, #23]
 8007b1e:	e00f      	b.n	8007b40 <disk_write+0x60>

	case DEV_MMC :

		if(extflash_sector_write(sector, count, buff) < 0)
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7fb f98a 	bl	8002e3e <extflash_sector_write>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	da02      	bge.n	8007b36 <disk_write+0x56>
		{
			res = RES_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	75fb      	strb	r3, [r7, #23]
 8007b34:	e001      	b.n	8007b3a <disk_write+0x5a>
		}else{

			res = 0;
 8007b36:	2300      	movs	r3, #0
 8007b38:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007b3a:	7dfb      	ldrb	r3, [r7, #23]
 8007b3c:	e000      	b.n	8007b40 <disk_write+0x60>

	}

	return RES_PARERR;
 8007b3e:	2304      	movs	r3, #4
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3718      	adds	r7, #24
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	4603      	mov	r3, r0
 8007b50:	603a      	str	r2, [r7, #0]
 8007b52:	71fb      	strb	r3, [r7, #7]
 8007b54:	460b      	mov	r3, r1
 8007b56:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_PARERR;
 8007b58:	2304      	movs	r3, #4
 8007b5a:	73fb      	strb	r3, [r7, #15]

	switch (pdrv) {
 8007b5c:	79fb      	ldrb	r3, [r7, #7]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d002      	beq.n	8007b68 <disk_ioctl+0x20>
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d036      	beq.n	8007bd4 <disk_ioctl+0x8c>
 8007b66:	e06b      	b.n	8007c40 <disk_ioctl+0xf8>
	case DEV_RAM :

		if(!psram_is_initialized())return RES_NOTRDY;
 8007b68:	f7ff f9e0 	bl	8006f2c <psram_is_initialized>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d101      	bne.n	8007b76 <disk_ioctl+0x2e>
 8007b72:	2303      	movs	r3, #3
 8007b74:	e065      	b.n	8007c42 <disk_ioctl+0xfa>

		switch(cmd)
 8007b76:	79bb      	ldrb	r3, [r7, #6]
 8007b78:	2b04      	cmp	r3, #4
 8007b7a:	d826      	bhi.n	8007bca <disk_ioctl+0x82>
 8007b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b84 <disk_ioctl+0x3c>)
 8007b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b82:	bf00      	nop
 8007b84:	08007bc5 	.word	0x08007bc5
 8007b88:	08007b99 	.word	0x08007b99
 8007b8c:	08007ba9 	.word	0x08007ba9
 8007b90:	08007bb9 	.word	0x08007bb9
 8007b94:	08007bc5 	.word	0x08007bc5
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = psram_get_sector_count();
 8007b98:	f7ff f9de 	bl	8006f58 <psram_get_sector_count>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	601a      	str	r2, [r3, #0]
				res = 0;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	73fb      	strb	r3, [r7, #15]
				break;
 8007ba6:	e013      	b.n	8007bd0 <disk_ioctl+0x88>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = psram_get_sector_size();
 8007ba8:	f7ff f9cc 	bl	8006f44 <psram_get_sector_size>
 8007bac:	4602      	mov	r2, r0
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	601a      	str	r2, [r3, #0]
				res = 0;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	73fb      	strb	r3, [r7, #15]
				break;
 8007bb6:	e00b      	b.n	8007bd0 <disk_ioctl+0x88>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	601a      	str	r2, [r3, #0]
				res = 0;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	73fb      	strb	r3, [r7, #15]
				break;
 8007bc2:	e005      	b.n	8007bd0 <disk_ioctl+0x88>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	73fb      	strb	r3, [r7, #15]
				break;
 8007bc8:	e002      	b.n	8007bd0 <disk_ioctl+0x88>

			default:
				res = RES_PARERR;
 8007bca:	2304      	movs	r3, #4
 8007bcc:	73fb      	strb	r3, [r7, #15]
				break;
 8007bce:	bf00      	nop
		}

		return res;
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
 8007bd2:	e036      	b.n	8007c42 <disk_ioctl+0xfa>

	case DEV_MMC :

		if(!extflash_is_initialized())return RES_NOTRDY;
 8007bd4:	f7fb f9ba 	bl	8002f4c <extflash_is_initialized>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <disk_ioctl+0x9a>
 8007bde:	2303      	movs	r3, #3
 8007be0:	e02f      	b.n	8007c42 <disk_ioctl+0xfa>

		switch(cmd)
 8007be2:	79bb      	ldrb	r3, [r7, #6]
 8007be4:	2b04      	cmp	r3, #4
 8007be6:	d826      	bhi.n	8007c36 <disk_ioctl+0xee>
 8007be8:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf0 <disk_ioctl+0xa8>)
 8007bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bee:	bf00      	nop
 8007bf0:	08007c31 	.word	0x08007c31
 8007bf4:	08007c05 	.word	0x08007c05
 8007bf8:	08007c15 	.word	0x08007c15
 8007bfc:	08007c25 	.word	0x08007c25
 8007c00:	08007c31 	.word	0x08007c31
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = extflash_get_sector_count();
 8007c04:	f7fb f996 	bl	8002f34 <extflash_get_sector_count>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	601a      	str	r2, [r3, #0]
				res = 0;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73fb      	strb	r3, [r7, #15]
				break;
 8007c12:	e013      	b.n	8007c3c <disk_ioctl+0xf4>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = extflash_get_sector_size();
 8007c14:	f7fb f985 	bl	8002f22 <extflash_get_sector_size>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	601a      	str	r2, [r3, #0]
				res = 0;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	73fb      	strb	r3, [r7, #15]
				break;
 8007c22:	e00b      	b.n	8007c3c <disk_ioctl+0xf4>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2201      	movs	r2, #1
 8007c28:	601a      	str	r2, [r3, #0]
				res = 0;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	73fb      	strb	r3, [r7, #15]
				break;
 8007c2e:	e005      	b.n	8007c3c <disk_ioctl+0xf4>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 8007c30:	2300      	movs	r3, #0
 8007c32:	73fb      	strb	r3, [r7, #15]
				break;
 8007c34:	e002      	b.n	8007c3c <disk_ioctl+0xf4>

			default:
				res = RES_PARERR;
 8007c36:	2304      	movs	r3, #4
 8007c38:	73fb      	strb	r3, [r7, #15]
				break;
 8007c3a:	bf00      	nop
		}

		return res;
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
 8007c3e:	e000      	b.n	8007c42 <disk_ioctl+0xfa>

	}

	return RES_PARERR;
 8007c40:	2304      	movs	r3, #4
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop

08007c4c <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	3301      	adds	r3, #1
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007c5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007c60:	021b      	lsls	r3, r3, #8
 8007c62:	b21a      	sxth	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	b21b      	sxth	r3, r3
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	b21b      	sxth	r3, r3
 8007c6e:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007c70:	89fb      	ldrh	r3, [r7, #14]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007c7e:	b480      	push	{r7}
 8007c80:	b085      	sub	sp, #20
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	3303      	adds	r3, #3
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	021b      	lsls	r3, r3, #8
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	3202      	adds	r2, #2
 8007c96:	7812      	ldrb	r2, [r2, #0]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	021b      	lsls	r3, r3, #8
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	3201      	adds	r2, #1
 8007ca4:	7812      	ldrb	r2, [r2, #0]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	021b      	lsls	r3, r3, #8
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	7812      	ldrb	r2, [r2, #0]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	60fb      	str	r3, [r7, #12]
	return rv;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	1c5a      	adds	r2, r3, #1
 8007cd4:	607a      	str	r2, [r7, #4]
 8007cd6:	887a      	ldrh	r2, [r7, #2]
 8007cd8:	b2d2      	uxtb	r2, r2
 8007cda:	701a      	strb	r2, [r3, #0]
 8007cdc:	887b      	ldrh	r3, [r7, #2]
 8007cde:	0a1b      	lsrs	r3, r3, #8
 8007ce0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	1c5a      	adds	r2, r3, #1
 8007ce6:	607a      	str	r2, [r7, #4]
 8007ce8:	887a      	ldrh	r2, [r7, #2]
 8007cea:	b2d2      	uxtb	r2, r2
 8007cec:	701a      	strb	r2, [r3, #0]
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b083      	sub	sp, #12
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	1c5a      	adds	r2, r3, #1
 8007d08:	607a      	str	r2, [r7, #4]
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	b2d2      	uxtb	r2, r2
 8007d0e:	701a      	strb	r2, [r3, #0]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	0a1b      	lsrs	r3, r3, #8
 8007d14:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	1c5a      	adds	r2, r3, #1
 8007d1a:	607a      	str	r2, [r7, #4]
 8007d1c:	683a      	ldr	r2, [r7, #0]
 8007d1e:	b2d2      	uxtb	r2, r2
 8007d20:	701a      	strb	r2, [r3, #0]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	0a1b      	lsrs	r3, r3, #8
 8007d26:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	1c5a      	adds	r2, r3, #1
 8007d2c:	607a      	str	r2, [r7, #4]
 8007d2e:	683a      	ldr	r2, [r7, #0]
 8007d30:	b2d2      	uxtb	r2, r2
 8007d32:	701a      	strb	r2, [r3, #0]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	0a1b      	lsrs	r3, r3, #8
 8007d38:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	1c5a      	adds	r2, r3, #1
 8007d3e:	607a      	str	r2, [r7, #4]
 8007d40:	683a      	ldr	r2, [r7, #0]
 8007d42:	b2d2      	uxtb	r2, r2
 8007d44:	701a      	strb	r2, [r3, #0]
}
 8007d46:	bf00      	nop
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b083      	sub	sp, #12
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	4603      	mov	r3, r0
 8007d5a:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8007d5c:	79fb      	ldrb	r3, [r7, #7]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d001      	beq.n	8007d66 <dbc_1st+0x14>
 8007d62:	2300      	movs	r3, #0
 8007d64:	e000      	b.n	8007d68 <dbc_1st+0x16>
#endif
	return 0;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8007d7e:	79fb      	ldrb	r3, [r7, #7]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <dbc_2nd+0x14>
 8007d84:	2300      	movs	r3, #0
 8007d86:	e000      	b.n	8007d8a <dbc_2nd+0x16>
#endif
	return 0;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b084      	sub	sp, #16
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	791b      	ldrb	r3, [r3, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d02c      	beq.n	8007e04 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	7858      	ldrb	r0, [r3, #1]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007db8:	2301      	movs	r3, #1
 8007dba:	f7ff fe91 	bl	8007ae0 <disk_write>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d11d      	bne.n	8007e00 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd2:	1ad2      	subs	r2, r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	69db      	ldr	r3, [r3, #28]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d213      	bcs.n	8007e04 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	78db      	ldrb	r3, [r3, #3]
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d10f      	bne.n	8007e04 <sync_window+0x6e>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	7858      	ldrb	r0, [r3, #1]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	441a      	add	r2, r3
 8007df8:	2301      	movs	r3, #1
 8007dfa:	f7ff fe71 	bl	8007ae0 <disk_write>
 8007dfe:	e001      	b.n	8007e04 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b084      	sub	sp, #16
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
 8007e16:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d01b      	beq.n	8007e5e <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f7ff ffb5 	bl	8007d96 <sync_window>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007e30:	7bfb      	ldrb	r3, [r7, #15]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d113      	bne.n	8007e5e <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	7858      	ldrb	r0, [r3, #1]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007e40:	2301      	movs	r3, #1
 8007e42:	683a      	ldr	r2, [r7, #0]
 8007e44:	f7ff fe1a 	bl	8007a7c <disk_read>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d004      	beq.n	8007e58 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8007e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e52:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	683a      	ldr	r2, [r7, #0]
 8007e5c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8007e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f7ff ff90 	bl	8007d96 <sync_window>
 8007e76:	4603      	mov	r3, r0
 8007e78:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d158      	bne.n	8007f32 <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d148      	bne.n	8007f1a <sync_fs+0xb2>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	795b      	ldrb	r3, [r3, #5]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d144      	bne.n	8007f1a <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	3334      	adds	r3, #52	@ 0x34
 8007e94:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007e98:	2100      	movs	r1, #0
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f00d ff42 	bl	8015d24 <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	3334      	adds	r3, #52	@ 0x34
 8007ea4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007ea8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7ff ff09 	bl	8007cc4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	3334      	adds	r3, #52	@ 0x34
 8007eb6:	4921      	ldr	r1, [pc, #132]	@ (8007f3c <sync_fs+0xd4>)
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7ff ff1e 	bl	8007cfa <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	3334      	adds	r3, #52	@ 0x34
 8007ec2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007ec6:	491e      	ldr	r1, [pc, #120]	@ (8007f40 <sync_fs+0xd8>)
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7ff ff16 	bl	8007cfa <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	3334      	adds	r3, #52	@ 0x34
 8007ed2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	4619      	mov	r1, r3
 8007edc:	4610      	mov	r0, r2
 8007ede:	f7ff ff0c 	bl	8007cfa <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	3334      	adds	r3, #52	@ 0x34
 8007ee6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	4619      	mov	r1, r3
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	f7ff ff02 	bl	8007cfa <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a1b      	ldr	r3, [r3, #32]
 8007efa:	1c5a      	adds	r2, r3, #1
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	7858      	ldrb	r0, [r3, #1]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f0e:	2301      	movs	r3, #1
 8007f10:	f7ff fde6 	bl	8007ae0 <disk_write>
			fs->fsi_flag = 0;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	785b      	ldrb	r3, [r3, #1]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	2100      	movs	r1, #0
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7ff fe10 	bl	8007b48 <disk_ioctl>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <sync_fs+0xca>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	41615252 	.word	0x41615252
 8007f40:	61417272 	.word	0x61417272

08007f44 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	3b02      	subs	r3, #2
 8007f52:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	3b02      	subs	r3, #2
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d301      	bcc.n	8007f64 <clst2sect+0x20>
 8007f60:	2300      	movs	r3, #0
 8007f62:	e008      	b.n	8007f76 <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	895b      	ldrh	r3, [r3, #10]
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	fb01 f303 	mul.w	r3, r1, r3
 8007f74:	4413      	add	r3, r2
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b086      	sub	sp, #24
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d904      	bls.n	8007fa2 <get_fat+0x20>
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	683a      	ldr	r2, [r7, #0]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d302      	bcc.n	8007fa8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	617b      	str	r3, [r7, #20]
 8007fa6:	e0ba      	b.n	800811e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8007fac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	2b03      	cmp	r3, #3
 8007fb4:	f000 8082 	beq.w	80080bc <get_fat+0x13a>
 8007fb8:	2b03      	cmp	r3, #3
 8007fba:	f300 80a6 	bgt.w	800810a <get_fat+0x188>
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d002      	beq.n	8007fc8 <get_fat+0x46>
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d055      	beq.n	8008072 <get_fat+0xf0>
 8007fc6:	e0a0      	b.n	800810a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	60fb      	str	r3, [r7, #12]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	085b      	lsrs	r3, r3, #1
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	899b      	ldrh	r3, [r3, #12]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fe6:	4413      	add	r3, r2
 8007fe8:	4619      	mov	r1, r3
 8007fea:	6938      	ldr	r0, [r7, #16]
 8007fec:	f7ff ff0f 	bl	8007e0e <move_window>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f040 808c 	bne.w	8008110 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	1c5a      	adds	r2, r3, #1
 8007ffc:	60fa      	str	r2, [r7, #12]
 8007ffe:	693a      	ldr	r2, [r7, #16]
 8008000:	8992      	ldrh	r2, [r2, #12]
 8008002:	fbb3 f1f2 	udiv	r1, r3, r2
 8008006:	fb01 f202 	mul.w	r2, r1, r2
 800800a:	1a9b      	subs	r3, r3, r2
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	4413      	add	r3, r2
 8008010:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008014:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	899b      	ldrh	r3, [r3, #12]
 800801e:	4619      	mov	r1, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	fbb3 f3f1 	udiv	r3, r3, r1
 8008026:	4413      	add	r3, r2
 8008028:	4619      	mov	r1, r3
 800802a:	6938      	ldr	r0, [r7, #16]
 800802c:	f7ff feef 	bl	8007e0e <move_window>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d16e      	bne.n	8008114 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	899b      	ldrh	r3, [r3, #12]
 800803a:	461a      	mov	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008042:	fb01 f202 	mul.w	r2, r1, r2
 8008046:	1a9b      	subs	r3, r3, r2
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	4413      	add	r3, r2
 800804c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008050:	021b      	lsls	r3, r3, #8
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	4313      	orrs	r3, r2
 8008056:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	2b00      	cmp	r3, #0
 8008060:	d002      	beq.n	8008068 <get_fat+0xe6>
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	091b      	lsrs	r3, r3, #4
 8008066:	e002      	b.n	800806e <get_fat+0xec>
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800806e:	617b      	str	r3, [r7, #20]
			break;
 8008070:	e055      	b.n	800811e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	899b      	ldrh	r3, [r3, #12]
 800807a:	085b      	lsrs	r3, r3, #1
 800807c:	b29b      	uxth	r3, r3
 800807e:	4619      	mov	r1, r3
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	fbb3 f3f1 	udiv	r3, r3, r1
 8008086:	4413      	add	r3, r2
 8008088:	4619      	mov	r1, r3
 800808a:	6938      	ldr	r0, [r7, #16]
 800808c:	f7ff febf 	bl	8007e0e <move_window>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d140      	bne.n	8008118 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	005b      	lsls	r3, r3, #1
 80080a0:	693a      	ldr	r2, [r7, #16]
 80080a2:	8992      	ldrh	r2, [r2, #12]
 80080a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80080a8:	fb00 f202 	mul.w	r2, r0, r2
 80080ac:	1a9b      	subs	r3, r3, r2
 80080ae:	440b      	add	r3, r1
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7ff fdcb 	bl	8007c4c <ld_word>
 80080b6:	4603      	mov	r3, r0
 80080b8:	617b      	str	r3, [r7, #20]
			break;
 80080ba:	e030      	b.n	800811e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	899b      	ldrh	r3, [r3, #12]
 80080c4:	089b      	lsrs	r3, r3, #2
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	4619      	mov	r1, r3
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80080d0:	4413      	add	r3, r2
 80080d2:	4619      	mov	r1, r3
 80080d4:	6938      	ldr	r0, [r7, #16]
 80080d6:	f7ff fe9a 	bl	8007e0e <move_window>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d11d      	bne.n	800811c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	8992      	ldrh	r2, [r2, #12]
 80080ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80080f2:	fb00 f202 	mul.w	r2, r0, r2
 80080f6:	1a9b      	subs	r3, r3, r2
 80080f8:	440b      	add	r3, r1
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7ff fdbf 	bl	8007c7e <ld_dword>
 8008100:	4603      	mov	r3, r0
 8008102:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008106:	617b      	str	r3, [r7, #20]
			break;
 8008108:	e009      	b.n	800811e <get_fat+0x19c>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 800810a:	2301      	movs	r3, #1
 800810c:	617b      	str	r3, [r7, #20]
 800810e:	e006      	b.n	800811e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008110:	bf00      	nop
 8008112:	e004      	b.n	800811e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008114:	bf00      	nop
 8008116:	e002      	b.n	800811e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008118:	bf00      	nop
 800811a:	e000      	b.n	800811e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800811c:	bf00      	nop
		}
	}

	return val;
 800811e:	697b      	ldr	r3, [r7, #20]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3718      	adds	r7, #24
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008128:	b590      	push	{r4, r7, lr}
 800812a:	b089      	sub	sp, #36	@ 0x24
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008134:	2302      	movs	r3, #2
 8008136:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2b01      	cmp	r3, #1
 800813c:	f240 8109 	bls.w	8008352 <put_fat+0x22a>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	699b      	ldr	r3, [r3, #24]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	429a      	cmp	r2, r3
 8008148:	f080 8103 	bcs.w	8008352 <put_fat+0x22a>
		switch (fs->fs_type) {
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	2b03      	cmp	r3, #3
 8008152:	f000 80b6 	beq.w	80082c2 <put_fat+0x19a>
 8008156:	2b03      	cmp	r3, #3
 8008158:	f300 80fb 	bgt.w	8008352 <put_fat+0x22a>
 800815c:	2b01      	cmp	r3, #1
 800815e:	d003      	beq.n	8008168 <put_fat+0x40>
 8008160:	2b02      	cmp	r3, #2
 8008162:	f000 8083 	beq.w	800826c <put_fat+0x144>
 8008166:	e0f4      	b.n	8008352 <put_fat+0x22a>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	61bb      	str	r3, [r7, #24]
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	085b      	lsrs	r3, r3, #1
 8008170:	69ba      	ldr	r2, [r7, #24]
 8008172:	4413      	add	r3, r2
 8008174:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	899b      	ldrh	r3, [r3, #12]
 800817e:	4619      	mov	r1, r3
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	fbb3 f3f1 	udiv	r3, r3, r1
 8008186:	4413      	add	r3, r2
 8008188:	4619      	mov	r1, r3
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f7ff fe3f 	bl	8007e0e <move_window>
 8008190:	4603      	mov	r3, r0
 8008192:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008194:	7ffb      	ldrb	r3, [r7, #31]
 8008196:	2b00      	cmp	r3, #0
 8008198:	f040 80d4 	bne.w	8008344 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	1c5a      	adds	r2, r3, #1
 80081a6:	61ba      	str	r2, [r7, #24]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	8992      	ldrh	r2, [r2, #12]
 80081ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80081b0:	fb00 f202 	mul.w	r2, r0, r2
 80081b4:	1a9b      	subs	r3, r3, r2
 80081b6:	440b      	add	r3, r1
 80081b8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	f003 0301 	and.w	r3, r3, #1
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00d      	beq.n	80081e0 <put_fat+0xb8>
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	b25b      	sxtb	r3, r3
 80081ca:	f003 030f 	and.w	r3, r3, #15
 80081ce:	b25a      	sxtb	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	b25b      	sxtb	r3, r3
 80081d4:	011b      	lsls	r3, r3, #4
 80081d6:	b25b      	sxtb	r3, r3
 80081d8:	4313      	orrs	r3, r2
 80081da:	b25b      	sxtb	r3, r3
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	e001      	b.n	80081e4 <put_fat+0xbc>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2201      	movs	r2, #1
 80081ec:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	899b      	ldrh	r3, [r3, #12]
 80081f6:	4619      	mov	r1, r3
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80081fe:	4413      	add	r3, r2
 8008200:	4619      	mov	r1, r3
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f7ff fe03 	bl	8007e0e <move_window>
 8008208:	4603      	mov	r3, r0
 800820a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800820c:	7ffb      	ldrb	r3, [r7, #31]
 800820e:	2b00      	cmp	r3, #0
 8008210:	f040 809a 	bne.w	8008348 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	899b      	ldrh	r3, [r3, #12]
 800821e:	461a      	mov	r2, r3
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	fbb3 f0f2 	udiv	r0, r3, r2
 8008226:	fb00 f202 	mul.w	r2, r0, r2
 800822a:	1a9b      	subs	r3, r3, r2
 800822c:	440b      	add	r3, r1
 800822e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <put_fat+0x11a>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	091b      	lsrs	r3, r3, #4
 800823e:	b2db      	uxtb	r3, r3
 8008240:	e00e      	b.n	8008260 <put_fat+0x138>
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	b25b      	sxtb	r3, r3
 8008248:	f023 030f 	bic.w	r3, r3, #15
 800824c:	b25a      	sxtb	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	0a1b      	lsrs	r3, r3, #8
 8008252:	b25b      	sxtb	r3, r3
 8008254:	f003 030f 	and.w	r3, r3, #15
 8008258:	b25b      	sxtb	r3, r3
 800825a:	4313      	orrs	r3, r2
 800825c:	b25b      	sxtb	r3, r3
 800825e:	b2db      	uxtb	r3, r3
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2201      	movs	r2, #1
 8008268:	711a      	strb	r2, [r3, #4]
			break;
 800826a:	e072      	b.n	8008352 <put_fat+0x22a>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	899b      	ldrh	r3, [r3, #12]
 8008274:	085b      	lsrs	r3, r3, #1
 8008276:	b29b      	uxth	r3, r3
 8008278:	4619      	mov	r1, r3
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008280:	4413      	add	r3, r2
 8008282:	4619      	mov	r1, r3
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f7ff fdc2 	bl	8007e0e <move_window>
 800828a:	4603      	mov	r3, r0
 800828c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800828e:	7ffb      	ldrb	r3, [r7, #31]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d15b      	bne.n	800834c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	005b      	lsls	r3, r3, #1
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	8992      	ldrh	r2, [r2, #12]
 80082a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80082a6:	fb00 f202 	mul.w	r2, r0, r2
 80082aa:	1a9b      	subs	r3, r3, r2
 80082ac:	440b      	add	r3, r1
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	b292      	uxth	r2, r2
 80082b2:	4611      	mov	r1, r2
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7ff fd05 	bl	8007cc4 <st_word>
			fs->wflag = 1;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2201      	movs	r2, #1
 80082be:	711a      	strb	r2, [r3, #4]
			break;
 80082c0:	e047      	b.n	8008352 <put_fat+0x22a>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	899b      	ldrh	r3, [r3, #12]
 80082ca:	089b      	lsrs	r3, r3, #2
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	4619      	mov	r1, r3
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80082d6:	4413      	add	r3, r2
 80082d8:	4619      	mov	r1, r3
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f7ff fd97 	bl	8007e0e <move_window>
 80082e0:	4603      	mov	r3, r0
 80082e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80082e4:	7ffb      	ldrb	r3, [r7, #31]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d132      	bne.n	8008350 <put_fat+0x228>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	8992      	ldrh	r2, [r2, #12]
 80082fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8008302:	fb00 f202 	mul.w	r2, r0, r2
 8008306:	1a9b      	subs	r3, r3, r2
 8008308:	440b      	add	r3, r1
 800830a:	4618      	mov	r0, r3
 800830c:	f7ff fcb7 	bl	8007c7e <ld_dword>
 8008310:	4603      	mov	r3, r0
 8008312:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008316:	4323      	orrs	r3, r4
 8008318:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	8992      	ldrh	r2, [r2, #12]
 8008328:	fbb3 f0f2 	udiv	r0, r3, r2
 800832c:	fb00 f202 	mul.w	r2, r0, r2
 8008330:	1a9b      	subs	r3, r3, r2
 8008332:	440b      	add	r3, r1
 8008334:	6879      	ldr	r1, [r7, #4]
 8008336:	4618      	mov	r0, r3
 8008338:	f7ff fcdf 	bl	8007cfa <st_dword>
			fs->wflag = 1;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2201      	movs	r2, #1
 8008340:	711a      	strb	r2, [r3, #4]
			break;
 8008342:	e006      	b.n	8008352 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008344:	bf00      	nop
 8008346:	e004      	b.n	8008352 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008348:	bf00      	nop
 800834a:	e002      	b.n	8008352 <put_fat+0x22a>
			if (res != FR_OK) break;
 800834c:	bf00      	nop
 800834e:	e000      	b.n	8008352 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008350:	bf00      	nop
		}
	}
	return res;
 8008352:	7ffb      	ldrb	r3, [r7, #31]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3724      	adds	r7, #36	@ 0x24
 8008358:	46bd      	mov	sp, r7
 800835a:	bd90      	pop	{r4, r7, pc}

0800835c <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b088      	sub	sp, #32
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d904      	bls.n	8008382 <remove_chain+0x26>
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	429a      	cmp	r2, r3
 8008380:	d301      	bcc.n	8008386 <remove_chain+0x2a>
 8008382:	2302      	movs	r3, #2
 8008384:	e04b      	b.n	800841e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00c      	beq.n	80083a6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800838c:	f04f 32ff 	mov.w	r2, #4294967295
 8008390:	6879      	ldr	r1, [r7, #4]
 8008392:	69b8      	ldr	r0, [r7, #24]
 8008394:	f7ff fec8 	bl	8008128 <put_fat>
 8008398:	4603      	mov	r3, r0
 800839a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800839c:	7ffb      	ldrb	r3, [r7, #31]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d001      	beq.n	80083a6 <remove_chain+0x4a>
 80083a2:	7ffb      	ldrb	r3, [r7, #31]
 80083a4:	e03b      	b.n	800841e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80083a6:	68b9      	ldr	r1, [r7, #8]
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f7ff fdea 	bl	8007f82 <get_fat>
 80083ae:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d031      	beq.n	800841a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d101      	bne.n	80083c0 <remove_chain+0x64>
 80083bc:	2302      	movs	r3, #2
 80083be:	e02e      	b.n	800841e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c6:	d101      	bne.n	80083cc <remove_chain+0x70>
 80083c8:	2301      	movs	r3, #1
 80083ca:	e028      	b.n	800841e <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80083cc:	2200      	movs	r2, #0
 80083ce:	68b9      	ldr	r1, [r7, #8]
 80083d0:	69b8      	ldr	r0, [r7, #24]
 80083d2:	f7ff fea9 	bl	8008128 <put_fat>
 80083d6:	4603      	mov	r3, r0
 80083d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80083da:	7ffb      	ldrb	r3, [r7, #31]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d001      	beq.n	80083e4 <remove_chain+0x88>
 80083e0:	7ffb      	ldrb	r3, [r7, #31]
 80083e2:	e01c      	b.n	800841e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	695a      	ldr	r2, [r3, #20]
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	3b02      	subs	r3, #2
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d20b      	bcs.n	800840a <remove_chain+0xae>
			fs->free_clst++;
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	695b      	ldr	r3, [r3, #20]
 80083f6:	1c5a      	adds	r2, r3, #1
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	795b      	ldrb	r3, [r3, #5]
 8008400:	f043 0301 	orr.w	r3, r3, #1
 8008404:	b2da      	uxtb	r2, r3
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	715a      	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	699b      	ldr	r3, [r3, #24]
 8008412:	68ba      	ldr	r2, [r7, #8]
 8008414:	429a      	cmp	r2, r3
 8008416:	d3c6      	bcc.n	80083a6 <remove_chain+0x4a>
 8008418:	e000      	b.n	800841c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800841a:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3720      	adds	r7, #32
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b088      	sub	sp, #32
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
 800842e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d10d      	bne.n	8008458 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d004      	beq.n	8008452 <create_chain+0x2c>
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	699b      	ldr	r3, [r3, #24]
 800844c:	69ba      	ldr	r2, [r7, #24]
 800844e:	429a      	cmp	r2, r3
 8008450:	d31b      	bcc.n	800848a <create_chain+0x64>
 8008452:	2301      	movs	r3, #1
 8008454:	61bb      	str	r3, [r7, #24]
 8008456:	e018      	b.n	800848a <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008458:	6839      	ldr	r1, [r7, #0]
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7ff fd91 	bl	8007f82 <get_fat>
 8008460:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d801      	bhi.n	800846c <create_chain+0x46>
 8008468:	2301      	movs	r3, #1
 800846a:	e0a9      	b.n	80085c0 <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008472:	d101      	bne.n	8008478 <create_chain+0x52>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	e0a3      	b.n	80085c0 <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	429a      	cmp	r2, r3
 8008480:	d201      	bcs.n	8008486 <create_chain+0x60>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	e09c      	b.n	80085c0 <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d101      	bne.n	8008496 <create_chain+0x70>
 8008492:	2300      	movs	r3, #0
 8008494:	e094      	b.n	80085c0 <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8008496:	2300      	movs	r3, #0
 8008498:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 800849a:	69ba      	ldr	r2, [r7, #24]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d129      	bne.n	80084f6 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	3301      	adds	r3, #1
 80084a6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	69fa      	ldr	r2, [r7, #28]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d301      	bcc.n	80084b6 <create_chain+0x90>
 80084b2:	2302      	movs	r3, #2
 80084b4:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 80084b6:	69f9      	ldr	r1, [r7, #28]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7ff fd62 	bl	8007f82 <get_fat>
 80084be:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d003      	beq.n	80084ce <create_chain+0xa8>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084cc:	d101      	bne.n	80084d2 <create_chain+0xac>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	e076      	b.n	80085c0 <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00e      	beq.n	80084f6 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d906      	bls.n	80084f2 <create_chain+0xcc>
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d201      	bcs.n	80084f2 <create_chain+0xcc>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 80084f2:	2300      	movs	r3, #0
 80084f4:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d129      	bne.n	8008550 <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	3301      	adds	r3, #1
 8008504:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	69fa      	ldr	r2, [r7, #28]
 800850c:	429a      	cmp	r2, r3
 800850e:	d307      	bcc.n	8008520 <create_chain+0xfa>
					ncl = 2;
 8008510:	2302      	movs	r3, #2
 8008512:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8008514:	69fa      	ldr	r2, [r7, #28]
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	429a      	cmp	r2, r3
 800851a:	d901      	bls.n	8008520 <create_chain+0xfa>
 800851c:	2300      	movs	r3, #0
 800851e:	e04f      	b.n	80085c0 <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008520:	69f9      	ldr	r1, [r7, #28]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f7ff fd2d 	bl	8007f82 <get_fat>
 8008528:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00e      	beq.n	800854e <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d003      	beq.n	800853e <create_chain+0x118>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800853c:	d101      	bne.n	8008542 <create_chain+0x11c>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	e03e      	b.n	80085c0 <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8008542:	69fa      	ldr	r2, [r7, #28]
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	429a      	cmp	r2, r3
 8008548:	d1da      	bne.n	8008500 <create_chain+0xda>
 800854a:	2300      	movs	r3, #0
 800854c:	e038      	b.n	80085c0 <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 800854e:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8008550:	f04f 32ff 	mov.w	r2, #4294967295
 8008554:	69f9      	ldr	r1, [r7, #28]
 8008556:	6938      	ldr	r0, [r7, #16]
 8008558:	f7ff fde6 	bl	8008128 <put_fat>
 800855c:	4603      	mov	r3, r0
 800855e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008560:	7dfb      	ldrb	r3, [r7, #23]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d109      	bne.n	800857a <create_chain+0x154>
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d006      	beq.n	800857a <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 800856c:	69fa      	ldr	r2, [r7, #28]
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	6938      	ldr	r0, [r7, #16]
 8008572:	f7ff fdd9 	bl	8008128 <put_fat>
 8008576:	4603      	mov	r3, r0
 8008578:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800857a:	7dfb      	ldrb	r3, [r7, #23]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d116      	bne.n	80085ae <create_chain+0x188>
		fs->last_clst = ncl;
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	69fa      	ldr	r2, [r7, #28]
 8008584:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	695a      	ldr	r2, [r3, #20]
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	3b02      	subs	r3, #2
 8008590:	429a      	cmp	r2, r3
 8008592:	d804      	bhi.n	800859e <create_chain+0x178>
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	695b      	ldr	r3, [r3, #20]
 8008598:	1e5a      	subs	r2, r3, #1
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	795b      	ldrb	r3, [r3, #5]
 80085a2:	f043 0301 	orr.w	r3, r3, #1
 80085a6:	b2da      	uxtb	r2, r3
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	715a      	strb	r2, [r3, #5]
 80085ac:	e007      	b.n	80085be <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80085ae:	7dfb      	ldrb	r3, [r7, #23]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d102      	bne.n	80085ba <create_chain+0x194>
 80085b4:	f04f 33ff 	mov.w	r3, #4294967295
 80085b8:	e000      	b.n	80085bc <create_chain+0x196>
 80085ba:	2301      	movs	r3, #1
 80085bc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80085be:	69fb      	ldr	r3, [r7, #28]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3720      	adds	r7, #32
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f7ff fbdf 	bl	8007d96 <sync_window>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <dir_clear+0x1a>
 80085de:	2301      	movs	r3, #1
 80085e0:	e036      	b.n	8008650 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7ff fcad 	bl	8007f44 <clst2sect>
 80085ea:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	693a      	ldr	r2, [r7, #16]
 80085f0:	631a      	str	r2, [r3, #48]	@ 0x30
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	3334      	adds	r3, #52	@ 0x34
 80085f6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80085fa:	2100      	movs	r1, #0
 80085fc:	4618      	mov	r0, r3
 80085fe:	f00d fb91 	bl	8015d24 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	3334      	adds	r3, #52	@ 0x34
 8008606:	60fb      	str	r3, [r7, #12]
 8008608:	2301      	movs	r3, #1
 800860a:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800860c:	2300      	movs	r3, #0
 800860e:	617b      	str	r3, [r7, #20]
 8008610:	e003      	b.n	800861a <dir_clear+0x52>
 8008612:	697a      	ldr	r2, [r7, #20]
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	4413      	add	r3, r2
 8008618:	617b      	str	r3, [r7, #20]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	895b      	ldrh	r3, [r3, #10]
 800861e:	461a      	mov	r2, r3
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	4293      	cmp	r3, r2
 8008624:	d20b      	bcs.n	800863e <dir_clear+0x76>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	7858      	ldrb	r0, [r3, #1]
 800862a:	693a      	ldr	r2, [r7, #16]
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	441a      	add	r2, r3
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	68f9      	ldr	r1, [r7, #12]
 8008634:	f7ff fa54 	bl	8007ae0 <disk_write>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d0e9      	beq.n	8008612 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	895b      	ldrh	r3, [r3, #10]
 8008642:	461a      	mov	r2, r3
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	4293      	cmp	r3, r2
 8008648:	bf14      	ite	ne
 800864a:	2301      	movne	r3, #1
 800864c:	2300      	moveq	r3, #0
 800864e:	b2db      	uxtb	r3, r3
}
 8008650:	4618      	mov	r0, r3
 8008652:	3718      	adds	r7, #24
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b086      	sub	sp, #24
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800866e:	d204      	bcs.n	800867a <dir_sdi+0x22>
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	f003 031f 	and.w	r3, r3, #31
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <dir_sdi+0x26>
		return FR_INT_ERR;
 800867a:	2302      	movs	r3, #2
 800867c:	e071      	b.n	8008762 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	683a      	ldr	r2, [r7, #0]
 8008682:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d106      	bne.n	800869e <dir_sdi+0x46>
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	2b02      	cmp	r3, #2
 8008696:	d902      	bls.n	800869e <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800869c:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10c      	bne.n	80086be <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	095b      	lsrs	r3, r3, #5
 80086a8:	693a      	ldr	r2, [r7, #16]
 80086aa:	8912      	ldrh	r2, [r2, #8]
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d301      	bcc.n	80086b4 <dir_sdi+0x5c>
 80086b0:	2302      	movs	r3, #2
 80086b2:	e056      	b.n	8008762 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	619a      	str	r2, [r3, #24]
 80086bc:	e02d      	b.n	800871a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	895b      	ldrh	r3, [r3, #10]
 80086c2:	461a      	mov	r2, r3
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	899b      	ldrh	r3, [r3, #12]
 80086c8:	fb02 f303 	mul.w	r3, r2, r3
 80086cc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80086ce:	e019      	b.n	8008704 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6979      	ldr	r1, [r7, #20]
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7ff fc54 	bl	8007f82 <get_fat>
 80086da:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e2:	d101      	bne.n	80086e8 <dir_sdi+0x90>
 80086e4:	2301      	movs	r3, #1
 80086e6:	e03c      	b.n	8008762 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d904      	bls.n	80086f8 <dir_sdi+0xa0>
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	697a      	ldr	r2, [r7, #20]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d301      	bcc.n	80086fc <dir_sdi+0xa4>
 80086f8:	2302      	movs	r3, #2
 80086fa:	e032      	b.n	8008762 <dir_sdi+0x10a>
			ofs -= csz;
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008704:	683a      	ldr	r2, [r7, #0]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	429a      	cmp	r2, r3
 800870a:	d2e1      	bcs.n	80086d0 <dir_sdi+0x78>
		}
		dp->sect = clst2sect(fs, clst);
 800870c:	6979      	ldr	r1, [r7, #20]
 800870e:	6938      	ldr	r0, [r7, #16]
 8008710:	f7ff fc18 	bl	8007f44 <clst2sect>
 8008714:	4602      	mov	r2, r0
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	697a      	ldr	r2, [r7, #20]
 800871e:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d101      	bne.n	800872c <dir_sdi+0xd4>
 8008728:	2302      	movs	r3, #2
 800872a:	e01a      	b.n	8008762 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	699a      	ldr	r2, [r3, #24]
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	899b      	ldrh	r3, [r3, #12]
 8008734:	4619      	mov	r1, r3
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	fbb3 f3f1 	udiv	r3, r3, r1
 800873c:	441a      	add	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	899b      	ldrh	r3, [r3, #12]
 800874c:	461a      	mov	r2, r3
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	fbb3 f0f2 	udiv	r0, r3, r2
 8008754:	fb00 f202 	mul.w	r2, r0, r2
 8008758:	1a9b      	subs	r3, r3, r2
 800875a:	18ca      	adds	r2, r1, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3718      	adds	r7, #24
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b086      	sub	sp, #24
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
 8008772:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	3320      	adds	r3, #32
 8008780:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008788:	d302      	bcc.n	8008790 <dir_next+0x26>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	699b      	ldr	r3, [r3, #24]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d101      	bne.n	800879c <dir_next+0x32>
 8008798:	2304      	movs	r3, #4
 800879a:	e088      	b.n	80088ae <dir_next+0x144>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	899b      	ldrh	r3, [r3, #12]
 80087a0:	461a      	mov	r2, r3
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80087a8:	fb01 f202 	mul.w	r2, r1, r2
 80087ac:	1a9b      	subs	r3, r3, r2
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d16a      	bne.n	8008888 <dir_next+0x11e>
		dp->sect++;				/* Next sector */
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	1c5a      	adds	r2, r3, #1
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10a      	bne.n	80087da <dir_next+0x70>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	095b      	lsrs	r3, r3, #5
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	8912      	ldrh	r2, [r2, #8]
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d35b      	bcc.n	8008888 <dir_next+0x11e>
				dp->sect = 0; return FR_NO_FILE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	619a      	str	r2, [r3, #24]
 80087d6:	2304      	movs	r3, #4
 80087d8:	e069      	b.n	80088ae <dir_next+0x144>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	899b      	ldrh	r3, [r3, #12]
 80087de:	461a      	mov	r2, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80087e6:	693a      	ldr	r2, [r7, #16]
 80087e8:	8952      	ldrh	r2, [r2, #10]
 80087ea:	3a01      	subs	r2, #1
 80087ec:	4013      	ands	r3, r2
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d14a      	bne.n	8008888 <dir_next+0x11e>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	695b      	ldr	r3, [r3, #20]
 80087f8:	4619      	mov	r1, r3
 80087fa:	4610      	mov	r0, r2
 80087fc:	f7ff fbc1 	bl	8007f82 <get_fat>
 8008800:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d801      	bhi.n	800880c <dir_next+0xa2>
 8008808:	2302      	movs	r3, #2
 800880a:	e050      	b.n	80088ae <dir_next+0x144>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008812:	d101      	bne.n	8008818 <dir_next+0xae>
 8008814:	2301      	movs	r3, #1
 8008816:	e04a      	b.n	80088ae <dir_next+0x144>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	699b      	ldr	r3, [r3, #24]
 800881c:	697a      	ldr	r2, [r7, #20]
 800881e:	429a      	cmp	r2, r3
 8008820:	d328      	bcc.n	8008874 <dir_next+0x10a>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d104      	bne.n	8008832 <dir_next+0xc8>
						dp->sect = 0; return FR_NO_FILE;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	619a      	str	r2, [r3, #24]
 800882e:	2304      	movs	r3, #4
 8008830:	e03d      	b.n	80088ae <dir_next+0x144>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	695b      	ldr	r3, [r3, #20]
 8008838:	4619      	mov	r1, r3
 800883a:	4610      	mov	r0, r2
 800883c:	f7ff fdf3 	bl	8008426 <create_chain>
 8008840:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d101      	bne.n	800884c <dir_next+0xe2>
 8008848:	2307      	movs	r3, #7
 800884a:	e030      	b.n	80088ae <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	2b01      	cmp	r3, #1
 8008850:	d101      	bne.n	8008856 <dir_next+0xec>
 8008852:	2302      	movs	r3, #2
 8008854:	e02b      	b.n	80088ae <dir_next+0x144>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885c:	d101      	bne.n	8008862 <dir_next+0xf8>
 800885e:	2301      	movs	r3, #1
 8008860:	e025      	b.n	80088ae <dir_next+0x144>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8008862:	6979      	ldr	r1, [r7, #20]
 8008864:	6938      	ldr	r0, [r7, #16]
 8008866:	f7ff feaf 	bl	80085c8 <dir_clear>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d001      	beq.n	8008874 <dir_next+0x10a>
 8008870:	2301      	movs	r3, #1
 8008872:	e01c      	b.n	80088ae <dir_next+0x144>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 800887a:	6979      	ldr	r1, [r7, #20]
 800887c:	6938      	ldr	r0, [r7, #16]
 800887e:	f7ff fb61 	bl	8007f44 <clst2sect>
 8008882:	4602      	mov	r2, r0
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	899b      	ldrh	r3, [r3, #12]
 8008898:	461a      	mov	r2, r3
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	fbb3 f0f2 	udiv	r0, r3, r2
 80088a0:	fb00 f202 	mul.w	r2, r0, r2
 80088a4:	1a9b      	subs	r3, r3, r2
 80088a6:	18ca      	adds	r2, r1, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3718      	adds	r7, #24
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b086      	sub	sp, #24
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80088c6:	2100      	movs	r1, #0
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f7ff fec5 	bl	8008658 <dir_sdi>
 80088ce:	4603      	mov	r3, r0
 80088d0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80088d2:	7dfb      	ldrb	r3, [r7, #23]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d12b      	bne.n	8008930 <dir_alloc+0x7a>
		n = 0;
 80088d8:	2300      	movs	r3, #0
 80088da:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	699b      	ldr	r3, [r3, #24]
 80088e0:	4619      	mov	r1, r3
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f7ff fa93 	bl	8007e0e <move_window>
 80088e8:	4603      	mov	r3, r0
 80088ea:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80088ec:	7dfb      	ldrb	r3, [r7, #23]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d11d      	bne.n	800892e <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	69db      	ldr	r3, [r3, #28]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	2be5      	cmp	r3, #229	@ 0xe5
 80088fa:	d004      	beq.n	8008906 <dir_alloc+0x50>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	69db      	ldr	r3, [r3, #28]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d107      	bne.n	8008916 <dir_alloc+0x60>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	3301      	adds	r3, #1
 800890a:	613b      	str	r3, [r7, #16]
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	429a      	cmp	r2, r3
 8008912:	d102      	bne.n	800891a <dir_alloc+0x64>
 8008914:	e00c      	b.n	8008930 <dir_alloc+0x7a>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 8008916:	2300      	movs	r3, #0
 8008918:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 800891a:	2101      	movs	r1, #1
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f7ff ff24 	bl	800876a <dir_next>
 8008922:	4603      	mov	r3, r0
 8008924:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8008926:	7dfb      	ldrb	r3, [r7, #23]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d0d7      	beq.n	80088dc <dir_alloc+0x26>
 800892c:	e000      	b.n	8008930 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800892e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008930:	7dfb      	ldrb	r3, [r7, #23]
 8008932:	2b04      	cmp	r3, #4
 8008934:	d101      	bne.n	800893a <dir_alloc+0x84>
 8008936:	2307      	movs	r3, #7
 8008938:	75fb      	strb	r3, [r7, #23]
	return res;
 800893a:	7dfb      	ldrb	r3, [r7, #23]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3718      	adds	r7, #24
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	331a      	adds	r3, #26
 8008952:	4618      	mov	r0, r3
 8008954:	f7ff f97a 	bl	8007c4c <ld_word>
 8008958:	4603      	mov	r3, r0
 800895a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	2b03      	cmp	r3, #3
 8008962:	d109      	bne.n	8008978 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	3314      	adds	r3, #20
 8008968:	4618      	mov	r0, r3
 800896a:	f7ff f96f 	bl	8007c4c <ld_word>
 800896e:	4603      	mov	r3, r0
 8008970:	041b      	lsls	r3, r3, #16
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	4313      	orrs	r3, r2
 8008976:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008978:	68fb      	ldr	r3, [r7, #12]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b084      	sub	sp, #16
 8008986:	af00      	add	r7, sp, #0
 8008988:	60f8      	str	r0, [r7, #12]
 800898a:	60b9      	str	r1, [r7, #8]
 800898c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	331a      	adds	r3, #26
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	b292      	uxth	r2, r2
 8008996:	4611      	mov	r1, r2
 8008998:	4618      	mov	r0, r3
 800899a:	f7ff f993 	bl	8007cc4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	2b03      	cmp	r3, #3
 80089a4:	d109      	bne.n	80089ba <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	f103 0214 	add.w	r2, r3, #20
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	0c1b      	lsrs	r3, r3, #16
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	4619      	mov	r1, r3
 80089b4:	4610      	mov	r0, r2
 80089b6:	f7ff f985 	bl	8007cc4 <st_word>
	}
}
 80089ba:	bf00      	nop
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b086      	sub	sp, #24
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80089d0:	2100      	movs	r1, #0
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7ff fe40 	bl	8008658 <dir_sdi>
 80089d8:	4603      	mov	r3, r0
 80089da:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80089dc:	7dfb      	ldrb	r3, [r7, #23]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d001      	beq.n	80089e6 <dir_find+0x24>
 80089e2:	7dfb      	ldrb	r3, [r7, #23]
 80089e4:	e03e      	b.n	8008a64 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	699b      	ldr	r3, [r3, #24]
 80089ea:	4619      	mov	r1, r3
 80089ec:	6938      	ldr	r0, [r7, #16]
 80089ee:	f7ff fa0e 	bl	8007e0e <move_window>
 80089f2:	4603      	mov	r3, r0
 80089f4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d12f      	bne.n	8008a5c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	69db      	ldr	r3, [r3, #28]
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d102      	bne.n	8008a10 <dir_find+0x4e>
 8008a0a:	2304      	movs	r3, #4
 8008a0c:	75fb      	strb	r3, [r7, #23]
 8008a0e:	e028      	b.n	8008a62 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	69db      	ldr	r3, [r3, #28]
 8008a14:	330b      	adds	r3, #11
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a1c:	b2da      	uxtb	r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	69db      	ldr	r3, [r3, #28]
 8008a26:	330b      	adds	r3, #11
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	f003 0308 	and.w	r3, r3, #8
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10a      	bne.n	8008a48 <dir_find+0x86>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	69d8      	ldr	r0, [r3, #28]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	3320      	adds	r3, #32
 8008a3a:	220b      	movs	r2, #11
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	f00d f961 	bl	8015d04 <memcmp>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00b      	beq.n	8008a60 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008a48:	2100      	movs	r1, #0
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7ff fe8d 	bl	800876a <dir_next>
 8008a50:	4603      	mov	r3, r0
 8008a52:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008a54:	7dfb      	ldrb	r3, [r7, #23]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d0c5      	beq.n	80089e6 <dir_find+0x24>
 8008a5a:	e002      	b.n	8008a62 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008a5c:	bf00      	nop
 8008a5e:	e000      	b.n	8008a62 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008a60:	bf00      	nop

	return res;
 8008a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3718      	adds	r7, #24
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --n_ent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008a7a:	2101      	movs	r1, #1
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f7ff ff1a 	bl	80088b6 <dir_alloc>
 8008a82:	4603      	mov	r3, r0
 8008a84:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008a86:	7bfb      	ldrb	r3, [r7, #15]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d11c      	bne.n	8008ac6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	4619      	mov	r1, r3
 8008a92:	68b8      	ldr	r0, [r7, #8]
 8008a94:	f7ff f9bb 	bl	8007e0e <move_window>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d111      	bne.n	8008ac6 <dir_register+0x5a>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	69db      	ldr	r3, [r3, #28]
 8008aa6:	2220      	movs	r2, #32
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f00d f93a 	bl	8015d24 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	69d8      	ldr	r0, [r3, #28]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	3320      	adds	r3, #32
 8008ab8:	220b      	movs	r2, #11
 8008aba:	4619      	mov	r1, r3
 8008abc:	f00d f9b6 	bl	8015e2c <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b08a      	sub	sp, #40	@ 0x28
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
	BYTE *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	617b      	str	r3, [r7, #20]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	3320      	adds	r3, #32
 8008ae4:	613b      	str	r3, [r7, #16]
	memset(sfn, ' ', 11);
 8008ae6:	220b      	movs	r2, #11
 8008ae8:	2120      	movs	r1, #32
 8008aea:	6938      	ldr	r0, [r7, #16]
 8008aec:	f00d f91a 	bl	8015d24 <memset>
	si = i = 0; ni = 8;
 8008af0:	2300      	movs	r3, #0
 8008af2:	61bb      	str	r3, [r7, #24]
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	61fb      	str	r3, [r7, #28]
 8008af8:	2308      	movs	r3, #8
 8008afa:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	1c5a      	adds	r2, r3, #1
 8008b00:	61fa      	str	r2, [r7, #28]
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	4413      	add	r3, r2
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b10:	2b20      	cmp	r3, #32
 8008b12:	f240 8089 	bls.w	8008c28 <create_name+0x158>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 8008b16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b1a:	2b2f      	cmp	r3, #47	@ 0x2f
 8008b1c:	d007      	beq.n	8008b2e <create_name+0x5e>
 8008b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b22:	2b5c      	cmp	r3, #92	@ 0x5c
 8008b24:	d110      	bne.n	8008b48 <create_name+0x78>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 8008b26:	e002      	b.n	8008b2e <create_name+0x5e>
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	61fb      	str	r3, [r7, #28]
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	4413      	add	r3, r2
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	2b2f      	cmp	r3, #47	@ 0x2f
 8008b38:	d0f6      	beq.n	8008b28 <create_name+0x58>
 8008b3a:	697a      	ldr	r2, [r7, #20]
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	4413      	add	r3, r2
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	2b5c      	cmp	r3, #92	@ 0x5c
 8008b44:	d0f0      	beq.n	8008b28 <create_name+0x58>
			break;
 8008b46:	e070      	b.n	8008c2a <create_name+0x15a>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8008b48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b4e:	d003      	beq.n	8008b58 <create_name+0x88>
 8008b50:	69ba      	ldr	r2, [r7, #24]
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d30d      	bcc.n	8008b74 <create_name+0xa4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8008b58:	6a3b      	ldr	r3, [r7, #32]
 8008b5a:	2b0b      	cmp	r3, #11
 8008b5c:	d003      	beq.n	8008b66 <create_name+0x96>
 8008b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b62:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b64:	d001      	beq.n	8008b6a <create_name+0x9a>
 8008b66:	2306      	movs	r3, #6
 8008b68:	e081      	b.n	8008c6e <create_name+0x19e>
			i = 8; ni = 11;				/* Enter file extension field */
 8008b6a:	2308      	movs	r3, #8
 8008b6c:	61bb      	str	r3, [r7, #24]
 8008b6e:	230b      	movs	r3, #11
 8008b70:	623b      	str	r3, [r7, #32]
			continue;
 8008b72:	e058      	b.n	8008c26 <create_name+0x156>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
 8008b74:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	da07      	bge.n	8008b8c <create_name+0xbc>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 8008b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b84:	4a3c      	ldr	r2, [pc, #240]	@ (8008c78 <create_name+0x1a8>)
 8008b86:	5cd3      	ldrb	r3, [r2, r3]
 8008b88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 8008b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7ff f8de 	bl	8007d52 <dbc_1st>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d024      	beq.n	8008be6 <create_name+0x116>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	1c5a      	adds	r2, r3, #1
 8008ba0:	61fa      	str	r2, [r7, #28]
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8008baa:	7bfb      	ldrb	r3, [r7, #15]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7ff f8e1 	bl	8007d74 <dbc_2nd>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d004      	beq.n	8008bc2 <create_name+0xf2>
 8008bb8:	6a3b      	ldr	r3, [r7, #32]
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	69ba      	ldr	r2, [r7, #24]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d301      	bcc.n	8008bc6 <create_name+0xf6>
 8008bc2:	2306      	movs	r3, #6
 8008bc4:	e053      	b.n	8008c6e <create_name+0x19e>
			sfn[i++] = c;
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	1c5a      	adds	r2, r3, #1
 8008bca:	61ba      	str	r2, [r7, #24]
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008bd4:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	1c5a      	adds	r2, r3, #1
 8008bda:	61ba      	str	r2, [r7, #24]
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	4413      	add	r3, r2
 8008be0:	7bfa      	ldrb	r2, [r7, #15]
 8008be2:	701a      	strb	r2, [r3, #0]
 8008be4:	e78a      	b.n	8008afc <create_name+0x2c>
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008be6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bea:	4619      	mov	r1, r3
 8008bec:	4823      	ldr	r0, [pc, #140]	@ (8008c7c <create_name+0x1ac>)
 8008bee:	f00d f8a1 	bl	8015d34 <strchr>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d001      	beq.n	8008bfc <create_name+0x12c>
 8008bf8:	2306      	movs	r3, #6
 8008bfa:	e038      	b.n	8008c6e <create_name+0x19e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c00:	2b60      	cmp	r3, #96	@ 0x60
 8008c02:	d908      	bls.n	8008c16 <create_name+0x146>
 8008c04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c08:	2b7a      	cmp	r3, #122	@ 0x7a
 8008c0a:	d804      	bhi.n	8008c16 <create_name+0x146>
 8008c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c10:	3b20      	subs	r3, #32
 8008c12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			sfn[i++] = c;
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	61ba      	str	r2, [r7, #24]
 8008c1c:	693a      	ldr	r2, [r7, #16]
 8008c1e:	4413      	add	r3, r2
 8008c20:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008c24:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 8008c26:	e769      	b.n	8008afc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008c28:	bf00      	nop
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	441a      	add	r2, r3
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d101      	bne.n	8008c3e <create_name+0x16e>
 8008c3a:	2306      	movs	r3, #6
 8008c3c:	e017      	b.n	8008c6e <create_name+0x19e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	2be5      	cmp	r3, #229	@ 0xe5
 8008c44:	d102      	bne.n	8008c4c <create_name+0x17c>
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	2205      	movs	r2, #5
 8008c4a:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 8008c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c50:	2b20      	cmp	r3, #32
 8008c52:	d905      	bls.n	8008c60 <create_name+0x190>
 8008c54:	697a      	ldr	r2, [r7, #20]
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	4413      	add	r3, r2
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	2b20      	cmp	r3, #32
 8008c5e:	d801      	bhi.n	8008c64 <create_name+0x194>
 8008c60:	2204      	movs	r2, #4
 8008c62:	e000      	b.n	8008c66 <create_name+0x196>
 8008c64:	2200      	movs	r2, #0
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	330b      	adds	r3, #11
 8008c6a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008c6c:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3728      	adds	r7, #40	@ 0x28
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	0801748c 	.word	0x0801748c
 8008c7c:	080173e8 	.word	0x080173e8

08008c80 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 8008c90:	e002      	b.n	8008c98 <follow_path+0x18>
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	3301      	adds	r3, #1
 8008c96:	603b      	str	r3, [r7, #0]
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	2b2f      	cmp	r3, #47	@ 0x2f
 8008c9e:	d0f8      	beq.n	8008c92 <follow_path+0x12>
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	2b5c      	cmp	r3, #92	@ 0x5c
 8008ca6:	d0f4      	beq.n	8008c92 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	2b1f      	cmp	r3, #31
 8008cb4:	d80a      	bhi.n	8008ccc <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2280      	movs	r2, #128	@ 0x80
 8008cba:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f7ff fcc9 	bl	8008658 <dir_sdi>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	75fb      	strb	r3, [r7, #23]
 8008cca:	e048      	b.n	8008d5e <follow_path+0xde>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008ccc:	463b      	mov	r3, r7
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f7ff fefd 	bl	8008ad0 <create_name>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008cda:	7dfb      	ldrb	r3, [r7, #23]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d139      	bne.n	8008d54 <follow_path+0xd4>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f7ff fe6e 	bl	80089c2 <dir_find>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8008cf0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 8008cf2:	7dfb      	ldrb	r3, [r7, #23]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00a      	beq.n	8008d0e <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008cf8:	7dfb      	ldrb	r3, [r7, #23]
 8008cfa:	2b04      	cmp	r3, #4
 8008cfc:	d12c      	bne.n	8008d58 <follow_path+0xd8>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008cfe:	7bfb      	ldrb	r3, [r7, #15]
 8008d00:	f003 0304 	and.w	r3, r3, #4
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d127      	bne.n	8008d58 <follow_path+0xd8>
 8008d08:	2305      	movs	r3, #5
 8008d0a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008d0c:	e024      	b.n	8008d58 <follow_path+0xd8>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8008d0e:	7bfb      	ldrb	r3, [r7, #15]
 8008d10:	f003 0304 	and.w	r3, r3, #4
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d121      	bne.n	8008d5c <follow_path+0xdc>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	799b      	ldrb	r3, [r3, #6]
 8008d1c:	f003 0310 	and.w	r3, r3, #16
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d102      	bne.n	8008d2a <follow_path+0xaa>
				res = FR_NO_PATH; break;
 8008d24:	2305      	movs	r3, #5
 8008d26:	75fb      	strb	r3, [r7, #23]
 8008d28:	e019      	b.n	8008d5e <follow_path+0xde>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	693a      	ldr	r2, [r7, #16]
 8008d36:	8992      	ldrh	r2, [r2, #12]
 8008d38:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d3c:	fb00 f202 	mul.w	r2, r0, r2
 8008d40:	1a9b      	subs	r3, r3, r2
 8008d42:	440b      	add	r3, r1
 8008d44:	4619      	mov	r1, r3
 8008d46:	6938      	ldr	r0, [r7, #16]
 8008d48:	f7ff fdfc 	bl	8008944 <ld_clust>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008d52:	e7bb      	b.n	8008ccc <follow_path+0x4c>
			if (res != FR_OK) break;
 8008d54:	bf00      	nop
 8008d56:	e002      	b.n	8008d5e <follow_path+0xde>
				break;
 8008d58:	bf00      	nop
 8008d5a:	e000      	b.n	8008d5e <follow_path+0xde>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8008d5c:	bf00      	nop
			}
		}
	}

	return res;
 8008d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3718      	adds	r7, #24
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b08b      	sub	sp, #44	@ 0x2c
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 8008d70:	f04f 33ff 	mov.w	r3, #4294967295
 8008d74:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7e:	623b      	str	r3, [r7, #32]
	if (!tp) return vol;	/* Invalid path name? */
 8008d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d101      	bne.n	8008d8a <get_ldnumber+0x22>
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	e080      	b.n	8008e8c <get_ldnumber+0x124>
	do {					/* Find a colon in the path */
		tc = *tt++;
 8008d8a:	6a3b      	ldr	r3, [r7, #32]
 8008d8c:	1c5a      	adds	r2, r3, #1
 8008d8e:	623a      	str	r2, [r7, #32]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	77fb      	strb	r3, [r7, #31]
	} while (!IsTerminator(tc) && tc != ':');
 8008d94:	7ffb      	ldrb	r3, [r7, #31]
 8008d96:	2b20      	cmp	r3, #32
 8008d98:	d902      	bls.n	8008da0 <get_ldnumber+0x38>
 8008d9a:	7ffb      	ldrb	r3, [r7, #31]
 8008d9c:	2b3a      	cmp	r3, #58	@ 0x3a
 8008d9e:	d1f4      	bne.n	8008d8a <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8008da0:	7ffb      	ldrb	r3, [r7, #31]
 8008da2:	2b3a      	cmp	r3, #58	@ 0x3a
 8008da4:	d11c      	bne.n	8008de0 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8008da6:	2302      	movs	r3, #2
 8008da8:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8008daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	2b2f      	cmp	r3, #47	@ 0x2f
 8008db0:	d90c      	bls.n	8008dcc <get_ldnumber+0x64>
 8008db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	2b39      	cmp	r3, #57	@ 0x39
 8008db8:	d808      	bhi.n	8008dcc <get_ldnumber+0x64>
 8008dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dbc:	3302      	adds	r3, #2
 8008dbe:	6a3a      	ldr	r2, [r7, #32]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d103      	bne.n	8008dcc <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8008dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	3b30      	subs	r3, #48	@ 0x30
 8008dca:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	dc04      	bgt.n	8008ddc <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a3a      	ldr	r2, [r7, #32]
 8008dda:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	e055      	b.n	8008e8c <get_ldnumber+0x124>
	}
#if FF_STR_VOLUME_ID == 2		/* Unix style volume ID is enabled */
	if (*tp == '/') {			/* Is there a volume ID? */
 8008de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	2b2f      	cmp	r3, #47	@ 0x2f
 8008de6:	d14e      	bne.n	8008e86 <get_ldnumber+0x11e>
		while (*(tp + 1) == '/') tp++;	/* Skip duplicated separator */
 8008de8:	e002      	b.n	8008df0 <get_ldnumber+0x88>
 8008dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dec:	3301      	adds	r3, #1
 8008dee:	627b      	str	r3, [r7, #36]	@ 0x24
 8008df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df2:	3301      	adds	r3, #1
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	2b2f      	cmp	r3, #47	@ 0x2f
 8008df8:	d0f7      	beq.n	8008dea <get_ldnumber+0x82>
		i = 0;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	61bb      	str	r3, [r7, #24]
		do {
			tt = tp; sp = VolumeStr[i]; /* Path name and this string volume ID */
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e00:	623b      	str	r3, [r7, #32]
 8008e02:	4a25      	ldr	r2, [pc, #148]	@ (8008e98 <get_ldnumber+0x130>)
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e0a:	613b      	str	r3, [r7, #16]
			do {	/* Compare the volume ID with path name */
				c = *sp++; tc = *(++tt);
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	1c5a      	adds	r2, r3, #1
 8008e10:	613a      	str	r2, [r7, #16]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	73fb      	strb	r3, [r7, #15]
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	623b      	str	r3, [r7, #32]
 8008e1c:	6a3b      	ldr	r3, [r7, #32]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	77fb      	strb	r3, [r7, #31]
				if (IsLower(c)) c -= 0x20;
 8008e22:	7bfb      	ldrb	r3, [r7, #15]
 8008e24:	2b60      	cmp	r3, #96	@ 0x60
 8008e26:	d905      	bls.n	8008e34 <get_ldnumber+0xcc>
 8008e28:	7bfb      	ldrb	r3, [r7, #15]
 8008e2a:	2b7a      	cmp	r3, #122	@ 0x7a
 8008e2c:	d802      	bhi.n	8008e34 <get_ldnumber+0xcc>
 8008e2e:	7bfb      	ldrb	r3, [r7, #15]
 8008e30:	3b20      	subs	r3, #32
 8008e32:	73fb      	strb	r3, [r7, #15]
				if (IsLower(tc)) tc -= 0x20;
 8008e34:	7ffb      	ldrb	r3, [r7, #31]
 8008e36:	2b60      	cmp	r3, #96	@ 0x60
 8008e38:	d905      	bls.n	8008e46 <get_ldnumber+0xde>
 8008e3a:	7ffb      	ldrb	r3, [r7, #31]
 8008e3c:	2b7a      	cmp	r3, #122	@ 0x7a
 8008e3e:	d802      	bhi.n	8008e46 <get_ldnumber+0xde>
 8008e40:	7ffb      	ldrb	r3, [r7, #31]
 8008e42:	3b20      	subs	r3, #32
 8008e44:	77fb      	strb	r3, [r7, #31]
			} while (c && (TCHAR)c == tc);
 8008e46:	7bfb      	ldrb	r3, [r7, #15]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d003      	beq.n	8008e54 <get_ldnumber+0xec>
 8008e4c:	7bfa      	ldrb	r2, [r7, #15]
 8008e4e:	7ffb      	ldrb	r3, [r7, #31]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d0db      	beq.n	8008e0c <get_ldnumber+0xa4>
		} while ((c || (tc != '/' && !IsTerminator(tc))) && ++i < FF_VOLUMES);	/* Repeat for each ID until pattern match */
 8008e54:	7bfb      	ldrb	r3, [r7, #15]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d105      	bne.n	8008e66 <get_ldnumber+0xfe>
 8008e5a:	7ffb      	ldrb	r3, [r7, #31]
 8008e5c:	2b2f      	cmp	r3, #47	@ 0x2f
 8008e5e:	d008      	beq.n	8008e72 <get_ldnumber+0x10a>
 8008e60:	7ffb      	ldrb	r3, [r7, #31]
 8008e62:	2b20      	cmp	r3, #32
 8008e64:	d905      	bls.n	8008e72 <get_ldnumber+0x10a>
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	61bb      	str	r3, [r7, #24]
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	ddc5      	ble.n	8008dfe <get_ldnumber+0x96>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	dc04      	bgt.n	8008e82 <get_ldnumber+0x11a>
			vol = i;		/* Drive number */
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a3a      	ldr	r2, [r7, #32]
 8008e80:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	e002      	b.n	8008e8c <get_ldnumber+0x124>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8008e86:	2300      	movs	r3, #0
 8008e88:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8008e8a:	697b      	ldr	r3, [r7, #20]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	372c      	adds	r7, #44	@ 0x2c
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr
 8008e98:	2000016c 	.word	0x2000016c

08008e9c <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	711a      	strb	r2, [r3, #4]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f04f 32ff 	mov.w	r2, #4294967295
 8008eb2:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8008eb4:	6839      	ldr	r1, [r7, #0]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f7fe ffa9 	bl	8007e0e <move_window>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d001      	beq.n	8008ec6 <check_fs+0x2a>
 8008ec2:	2304      	movs	r3, #4
 8008ec4:	e088      	b.n	8008fd8 <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	3334      	adds	r3, #52	@ 0x34
 8008eca:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fe febc 	bl	8007c4c <ld_word>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008ede:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 8008ee0:	7b7b      	ldrb	r3, [r7, #13]
 8008ee2:	2beb      	cmp	r3, #235	@ 0xeb
 8008ee4:	d005      	beq.n	8008ef2 <check_fs+0x56>
 8008ee6:	7b7b      	ldrb	r3, [r7, #13]
 8008ee8:	2be9      	cmp	r3, #233	@ 0xe9
 8008eea:	d002      	beq.n	8008ef2 <check_fs+0x56>
 8008eec:	7b7b      	ldrb	r3, [r7, #13]
 8008eee:	2be8      	cmp	r3, #232	@ 0xe8
 8008ef0:	d16a      	bne.n	8008fc8 <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 8008ef2:	89fb      	ldrh	r3, [r7, #14]
 8008ef4:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d10c      	bne.n	8008f16 <check_fs+0x7a>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	3334      	adds	r3, #52	@ 0x34
 8008f00:	3352      	adds	r3, #82	@ 0x52
 8008f02:	2208      	movs	r2, #8
 8008f04:	4936      	ldr	r1, [pc, #216]	@ (8008fe0 <check_fs+0x144>)
 8008f06:	4618      	mov	r0, r3
 8008f08:	f00c fefc 	bl	8015d04 <memcmp>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d101      	bne.n	8008f16 <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 8008f12:	2300      	movs	r3, #0
 8008f14:	e060      	b.n	8008fd8 <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	3334      	adds	r3, #52	@ 0x34
 8008f1a:	330b      	adds	r3, #11
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7fe fe95 	bl	8007c4c <ld_word>
 8008f22:	4603      	mov	r3, r0
 8008f24:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f2c:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 8008f2e:	897a      	ldrh	r2, [r7, #10]
 8008f30:	897b      	ldrh	r3, [r7, #10]
 8008f32:	3b01      	subs	r3, #1
 8008f34:	4013      	ands	r3, r2
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d146      	bne.n	8008fc8 <check_fs+0x12c>
 8008f3a:	897b      	ldrh	r3, [r7, #10]
 8008f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f40:	d342      	bcc.n	8008fc8 <check_fs+0x12c>
 8008f42:	897b      	ldrh	r3, [r7, #10]
 8008f44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f48:	d83e      	bhi.n	8008fc8 <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 8008f4a:	7b7b      	ldrb	r3, [r7, #13]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d03b      	beq.n	8008fc8 <check_fs+0x12c>
 8008f50:	7b7a      	ldrb	r2, [r7, #13]
 8008f52:	7b7b      	ldrb	r3, [r7, #13]
 8008f54:	3b01      	subs	r3, #1
 8008f56:	4013      	ands	r3, r2
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d135      	bne.n	8008fc8 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	3334      	adds	r3, #52	@ 0x34
 8008f60:	330e      	adds	r3, #14
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fe fe72 	bl	8007c4c <ld_word>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d02c      	beq.n	8008fc8 <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f74:	3b01      	subs	r3, #1
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d826      	bhi.n	8008fc8 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	3334      	adds	r3, #52	@ 0x34
 8008f7e:	3311      	adds	r3, #17
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7fe fe63 	bl	8007c4c <ld_word>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d01d      	beq.n	8008fc8 <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	3334      	adds	r3, #52	@ 0x34
 8008f90:	3313      	adds	r3, #19
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fe fe5a 	bl	8007c4c <ld_word>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8008f9c:	d809      	bhi.n	8008fb2 <check_fs+0x116>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	3334      	adds	r3, #52	@ 0x34
 8008fa2:	3320      	adds	r3, #32
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7fe fe6a 	bl	8007c7e <ld_dword>
 8008faa:	4603      	mov	r3, r0
 8008fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fb0:	d30a      	bcc.n	8008fc8 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	3334      	adds	r3, #52	@ 0x34
 8008fb6:	3316      	adds	r3, #22
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fe fe47 	bl	8007c4c <ld_word>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d001      	beq.n	8008fc8 <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	e007      	b.n	8008fd8 <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 8008fc8:	89fb      	ldrh	r3, [r7, #14]
 8008fca:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d101      	bne.n	8008fd6 <check_fs+0x13a>
 8008fd2:	2302      	movs	r3, #2
 8008fd4:	e000      	b.n	8008fd8 <check_fs+0x13c>
 8008fd6:	2303      	movs	r3, #3
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	080173f8 	.word	0x080173f8

08008fe4 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b088      	sub	sp, #32
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 8008fee:	2100      	movs	r1, #0
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f7ff ff53 	bl	8008e9c <check_fs>
 8008ff6:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d007      	beq.n	800900e <find_volume+0x2a>
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	2b02      	cmp	r3, #2
 8009002:	d802      	bhi.n	800900a <find_volume+0x26>
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d101      	bne.n	800900e <find_volume+0x2a>
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	e045      	b.n	800909a <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800900e:	2300      	movs	r3, #0
 8009010:	61fb      	str	r3, [r7, #28]
 8009012:	e014      	b.n	800903e <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	011b      	lsls	r3, r3, #4
 800901e:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 8009022:	4413      	add	r3, r2
 8009024:	4618      	mov	r0, r3
 8009026:	f7fe fe2a 	bl	8007c7e <ld_dword>
 800902a:	4602      	mov	r2, r0
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	3320      	adds	r3, #32
 8009032:	443b      	add	r3, r7
 8009034:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	3301      	adds	r3, #1
 800903c:	61fb      	str	r3, [r7, #28]
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	2b03      	cmp	r3, #3
 8009042:	d9e7      	bls.n	8009014 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d002      	beq.n	8009050 <find_volume+0x6c>
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	3b01      	subs	r3, #1
 800904e:	e000      	b.n	8009052 <find_volume+0x6e>
 8009050:	2300      	movs	r3, #0
 8009052:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	3320      	adds	r3, #32
 800905a:	443b      	add	r3, r7
 800905c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00b      	beq.n	800907c <find_volume+0x98>
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	3320      	adds	r3, #32
 800906a:	443b      	add	r3, r7
 800906c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8009070:	4619      	mov	r1, r3
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f7ff ff12 	bl	8008e9c <check_fs>
 8009078:	4603      	mov	r3, r0
 800907a:	e000      	b.n	800907e <find_volume+0x9a>
 800907c:	2303      	movs	r3, #3
 800907e:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d108      	bne.n	8009098 <find_volume+0xb4>
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d905      	bls.n	8009098 <find_volume+0xb4>
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	3301      	adds	r3, #1
 8009090:	61fb      	str	r3, [r7, #28]
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	2b03      	cmp	r3, #3
 8009096:	d9dd      	bls.n	8009054 <find_volume+0x70>
	return fmt;
 8009098:	69bb      	ldr	r3, [r7, #24]
}
 800909a:	4618      	mov	r0, r3
 800909c:	3720      	adds	r7, #32
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
	...

080090a4 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b090      	sub	sp, #64	@ 0x40
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	4613      	mov	r3, r2
 80090b0:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	2200      	movs	r2, #0
 80090b6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80090b8:	68f8      	ldr	r0, [r7, #12]
 80090ba:	f7ff fe55 	bl	8008d68 <get_ldnumber>
 80090be:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 80090c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	da01      	bge.n	80090ca <mount_volume+0x26>
 80090c6:	230b      	movs	r3, #11
 80090c8:	e207      	b.n	80094da <mount_volume+0x436>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 80090ca:	4aa2      	ldr	r2, [pc, #648]	@ (8009354 <mount_volume+0x2b0>)
 80090cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 80090d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d101      	bne.n	80090de <mount_volume+0x3a>
 80090da:	230c      	movs	r3, #12
 80090dc:	e1fd      	b.n	80094da <mount_volume+0x436>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090e2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80090e4:	79fb      	ldrb	r3, [r7, #7]
 80090e6:	f023 0301 	bic.w	r3, r3, #1
 80090ea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 80090ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d01a      	beq.n	800912a <mount_volume+0x86>
		stat = disk_status(fs->pdrv);
 80090f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f6:	785b      	ldrb	r3, [r3, #1]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7fe fc6f 	bl	80079dc <disk_status>
 80090fe:	4603      	mov	r3, r0
 8009100:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009104:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009108:	f003 0301 	and.w	r3, r3, #1
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10c      	bne.n	800912a <mount_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009110:	79fb      	ldrb	r3, [r7, #7]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d007      	beq.n	8009126 <mount_volume+0x82>
 8009116:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800911a:	f003 0304 	and.w	r3, r3, #4
 800911e:	2b00      	cmp	r3, #0
 8009120:	d001      	beq.n	8009126 <mount_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009122:	230a      	movs	r3, #10
 8009124:	e1d9      	b.n	80094da <mount_volume+0x436>
			}
			return FR_OK;				/* The filesystem object is already valid */
 8009126:	2300      	movs	r3, #0
 8009128:	e1d7      	b.n	80094da <mount_volume+0x436>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 800912a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800912c:	2200      	movs	r2, #0
 800912e:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8009130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009132:	785b      	ldrb	r3, [r3, #1]
 8009134:	4618      	mov	r0, r3
 8009136:	f7fe fc79 	bl	8007a2c <disk_initialize>
 800913a:	4603      	mov	r3, r0
 800913c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009140:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009144:	f003 0301 	and.w	r3, r3, #1
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <mount_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800914c:	2303      	movs	r3, #3
 800914e:	e1c4      	b.n	80094da <mount_volume+0x436>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009150:	79fb      	ldrb	r3, [r7, #7]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d007      	beq.n	8009166 <mount_volume+0xc2>
 8009156:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800915a:	f003 0304 	and.w	r3, r3, #4
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <mount_volume+0xc2>
		return FR_WRITE_PROTECTED;
 8009162:	230a      	movs	r3, #10
 8009164:	e1b9      	b.n	80094da <mount_volume+0x436>
	}
#if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009168:	7858      	ldrb	r0, [r3, #1]
 800916a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800916c:	330c      	adds	r3, #12
 800916e:	461a      	mov	r2, r3
 8009170:	2102      	movs	r1, #2
 8009172:	f7fe fce9 	bl	8007b48 <disk_ioctl>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d001      	beq.n	8009180 <mount_volume+0xdc>
 800917c:	2301      	movs	r3, #1
 800917e:	e1ac      	b.n	80094da <mount_volume+0x436>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009182:	899b      	ldrh	r3, [r3, #12]
 8009184:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009188:	d80d      	bhi.n	80091a6 <mount_volume+0x102>
 800918a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800918c:	899b      	ldrh	r3, [r3, #12]
 800918e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009192:	d308      	bcc.n	80091a6 <mount_volume+0x102>
 8009194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009196:	899b      	ldrh	r3, [r3, #12]
 8009198:	461a      	mov	r2, r3
 800919a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800919c:	899b      	ldrh	r3, [r3, #12]
 800919e:	3b01      	subs	r3, #1
 80091a0:	4013      	ands	r3, r2
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d001      	beq.n	80091aa <mount_volume+0x106>
 80091a6:	2301      	movs	r3, #1
 80091a8:	e197      	b.n	80094da <mount_volume+0x436>
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 80091aa:	2100      	movs	r1, #0
 80091ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091ae:	f7ff ff19 	bl	8008fe4 <find_volume>
 80091b2:	6338      	str	r0, [r7, #48]	@ 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 80091b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b6:	2b04      	cmp	r3, #4
 80091b8:	d101      	bne.n	80091be <mount_volume+0x11a>
 80091ba:	2301      	movs	r3, #1
 80091bc:	e18d      	b.n	80094da <mount_volume+0x436>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80091be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d901      	bls.n	80091c8 <mount_volume+0x124>
 80091c4:	230d      	movs	r3, #13
 80091c6:	e188      	b.n	80094da <mount_volume+0x436>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 80091c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091cc:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80091ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091d0:	3334      	adds	r3, #52	@ 0x34
 80091d2:	330b      	adds	r3, #11
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7fe fd39 	bl	8007c4c <ld_word>
 80091da:	4603      	mov	r3, r0
 80091dc:	461a      	mov	r2, r3
 80091de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e0:	899b      	ldrh	r3, [r3, #12]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d001      	beq.n	80091ea <mount_volume+0x146>
 80091e6:	230d      	movs	r3, #13
 80091e8:	e177      	b.n	80094da <mount_volume+0x436>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80091ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ec:	3334      	adds	r3, #52	@ 0x34
 80091ee:	3316      	adds	r3, #22
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fe fd2b 	bl	8007c4c <ld_word>
 80091f6:	4603      	mov	r3, r0
 80091f8:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80091fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d106      	bne.n	800920e <mount_volume+0x16a>
 8009200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009202:	3334      	adds	r3, #52	@ 0x34
 8009204:	3324      	adds	r3, #36	@ 0x24
 8009206:	4618      	mov	r0, r3
 8009208:	f7fe fd39 	bl	8007c7e <ld_dword>
 800920c:	63b8      	str	r0, [r7, #56]	@ 0x38
		fs->fsize = fasize;
 800920e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009210:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009212:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009216:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800921a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800921c:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800921e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009220:	78db      	ldrb	r3, [r3, #3]
 8009222:	2b01      	cmp	r3, #1
 8009224:	d005      	beq.n	8009232 <mount_volume+0x18e>
 8009226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009228:	78db      	ldrb	r3, [r3, #3]
 800922a:	2b02      	cmp	r3, #2
 800922c:	d001      	beq.n	8009232 <mount_volume+0x18e>
 800922e:	230d      	movs	r3, #13
 8009230:	e153      	b.n	80094da <mount_volume+0x436>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009234:	78db      	ldrb	r3, [r3, #3]
 8009236:	461a      	mov	r2, r3
 8009238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800923a:	fb02 f303 	mul.w	r3, r2, r3
 800923e:	63bb      	str	r3, [r7, #56]	@ 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009242:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009246:	461a      	mov	r2, r3
 8009248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800924a:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800924c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800924e:	895b      	ldrh	r3, [r3, #10]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d008      	beq.n	8009266 <mount_volume+0x1c2>
 8009254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009256:	895b      	ldrh	r3, [r3, #10]
 8009258:	461a      	mov	r2, r3
 800925a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800925c:	895b      	ldrh	r3, [r3, #10]
 800925e:	3b01      	subs	r3, #1
 8009260:	4013      	ands	r3, r2
 8009262:	2b00      	cmp	r3, #0
 8009264:	d001      	beq.n	800926a <mount_volume+0x1c6>
 8009266:	230d      	movs	r3, #13
 8009268:	e137      	b.n	80094da <mount_volume+0x436>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800926a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800926c:	3334      	adds	r3, #52	@ 0x34
 800926e:	3311      	adds	r3, #17
 8009270:	4618      	mov	r0, r3
 8009272:	f7fe fceb 	bl	8007c4c <ld_word>
 8009276:	4603      	mov	r3, r0
 8009278:	461a      	mov	r2, r3
 800927a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800927c:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800927e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009280:	891b      	ldrh	r3, [r3, #8]
 8009282:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009284:	8992      	ldrh	r2, [r2, #12]
 8009286:	0952      	lsrs	r2, r2, #5
 8009288:	b292      	uxth	r2, r2
 800928a:	fbb3 f1f2 	udiv	r1, r3, r2
 800928e:	fb01 f202 	mul.w	r2, r1, r2
 8009292:	1a9b      	subs	r3, r3, r2
 8009294:	b29b      	uxth	r3, r3
 8009296:	2b00      	cmp	r3, #0
 8009298:	d001      	beq.n	800929e <mount_volume+0x1fa>
 800929a:	230d      	movs	r3, #13
 800929c:	e11d      	b.n	80094da <mount_volume+0x436>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800929e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a0:	3334      	adds	r3, #52	@ 0x34
 80092a2:	3313      	adds	r3, #19
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7fe fcd1 	bl	8007c4c <ld_word>
 80092aa:	4603      	mov	r3, r0
 80092ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80092ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d106      	bne.n	80092c2 <mount_volume+0x21e>
 80092b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b6:	3334      	adds	r3, #52	@ 0x34
 80092b8:	3320      	adds	r3, #32
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7fe fcdf 	bl	8007c7e <ld_dword>
 80092c0:	63f8      	str	r0, [r7, #60]	@ 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80092c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c4:	3334      	adds	r3, #52	@ 0x34
 80092c6:	330e      	adds	r3, #14
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7fe fcbf 	bl	8007c4c <ld_word>
 80092ce:	4603      	mov	r3, r0
 80092d0:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80092d2:	8bfb      	ldrh	r3, [r7, #30]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d101      	bne.n	80092dc <mount_volume+0x238>
 80092d8:	230d      	movs	r3, #13
 80092da:	e0fe      	b.n	80094da <mount_volume+0x436>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80092dc:	8bfa      	ldrh	r2, [r7, #30]
 80092de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e0:	4413      	add	r3, r2
 80092e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092e4:	8911      	ldrh	r1, [r2, #8]
 80092e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092e8:	8992      	ldrh	r2, [r2, #12]
 80092ea:	0952      	lsrs	r2, r2, #5
 80092ec:	b292      	uxth	r2, r2
 80092ee:	fbb1 f2f2 	udiv	r2, r1, r2
 80092f2:	b292      	uxth	r2, r2
 80092f4:	4413      	add	r3, r2
 80092f6:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80092f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d201      	bcs.n	8009304 <mount_volume+0x260>
 8009300:	230d      	movs	r3, #13
 8009302:	e0ea      	b.n	80094da <mount_volume+0x436>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009304:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800930c:	8952      	ldrh	r2, [r2, #10]
 800930e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009312:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d101      	bne.n	800931e <mount_volume+0x27a>
 800931a:	230d      	movs	r3, #13
 800931c:	e0dd      	b.n	80094da <mount_volume+0x436>
		fmt = 0;
 800931e:	2300      	movs	r3, #0
 8009320:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	4a0c      	ldr	r2, [pc, #48]	@ (8009358 <mount_volume+0x2b4>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d801      	bhi.n	800932e <mount_volume+0x28a>
 800932a:	2303      	movs	r3, #3
 800932c:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009334:	4293      	cmp	r3, r2
 8009336:	d801      	bhi.n	800933c <mount_volume+0x298>
 8009338:	2302      	movs	r3, #2
 800933a:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009342:	4293      	cmp	r3, r2
 8009344:	d801      	bhi.n	800934a <mount_volume+0x2a6>
 8009346:	2301      	movs	r3, #1
 8009348:	633b      	str	r3, [r7, #48]	@ 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 800934a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934c:	2b00      	cmp	r3, #0
 800934e:	d105      	bne.n	800935c <mount_volume+0x2b8>
 8009350:	230d      	movs	r3, #13
 8009352:	e0c2      	b.n	80094da <mount_volume+0x436>
 8009354:	20005cfc 	.word	0x20005cfc
 8009358:	0ffffff5 	.word	0x0ffffff5

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	1c9a      	adds	r2, r3, #2
 8009360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009362:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009366:	6a3a      	ldr	r2, [r7, #32]
 8009368:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800936a:	8bfa      	ldrh	r2, [r7, #30]
 800936c:	6a3b      	ldr	r3, [r7, #32]
 800936e:	441a      	add	r2, r3
 8009370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009372:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009374:	6a3a      	ldr	r2, [r7, #32]
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	441a      	add	r2, r3
 800937a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800937c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800937e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009380:	2b03      	cmp	r3, #3
 8009382:	d11e      	bne.n	80093c2 <mount_volume+0x31e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009386:	3334      	adds	r3, #52	@ 0x34
 8009388:	332a      	adds	r3, #42	@ 0x2a
 800938a:	4618      	mov	r0, r3
 800938c:	f7fe fc5e 	bl	8007c4c <ld_word>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <mount_volume+0x2f6>
 8009396:	230d      	movs	r3, #13
 8009398:	e09f      	b.n	80094da <mount_volume+0x436>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800939a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800939c:	891b      	ldrh	r3, [r3, #8]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d001      	beq.n	80093a6 <mount_volume+0x302>
 80093a2:	230d      	movs	r3, #13
 80093a4:	e099      	b.n	80094da <mount_volume+0x436>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80093a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a8:	3334      	adds	r3, #52	@ 0x34
 80093aa:	332c      	adds	r3, #44	@ 0x2c
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7fe fc66 	bl	8007c7e <ld_dword>
 80093b2:	4602      	mov	r2, r0
 80093b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b6:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80093b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ba:	699b      	ldr	r3, [r3, #24]
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	637b      	str	r3, [r7, #52]	@ 0x34
 80093c0:	e01e      	b.n	8009400 <mount_volume+0x35c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80093c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c4:	891b      	ldrh	r3, [r3, #8]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <mount_volume+0x32a>
 80093ca:	230d      	movs	r3, #13
 80093cc:	e085      	b.n	80094da <mount_volume+0x436>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80093ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d4:	441a      	add	r2, r3
 80093d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d8:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80093da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d103      	bne.n	80093e8 <mount_volume+0x344>
 80093e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	005b      	lsls	r3, r3, #1
 80093e6:	e00a      	b.n	80093fe <mount_volume+0x35a>
 80093e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ea:	699a      	ldr	r2, [r3, #24]
 80093ec:	4613      	mov	r3, r2
 80093ee:	005b      	lsls	r3, r3, #1
 80093f0:	4413      	add	r3, r2
 80093f2:	085a      	lsrs	r2, r3, #1
 80093f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f6:	699b      	ldr	r3, [r3, #24]
 80093f8:	f003 0301 	and.w	r3, r3, #1
 80093fc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80093fe:	637b      	str	r3, [r7, #52]	@ 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009402:	69da      	ldr	r2, [r3, #28]
 8009404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009406:	899b      	ldrh	r3, [r3, #12]
 8009408:	4619      	mov	r1, r3
 800940a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800940c:	440b      	add	r3, r1
 800940e:	3b01      	subs	r3, #1
 8009410:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009412:	8989      	ldrh	r1, [r1, #12]
 8009414:	fbb3 f3f1 	udiv	r3, r3, r1
 8009418:	429a      	cmp	r2, r3
 800941a:	d201      	bcs.n	8009420 <mount_volume+0x37c>
 800941c:	230d      	movs	r3, #13
 800941e:	e05c      	b.n	80094da <mount_volume+0x436>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009422:	f04f 32ff 	mov.w	r2, #4294967295
 8009426:	615a      	str	r2, [r3, #20]
 8009428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800942a:	695a      	ldr	r2, [r3, #20]
 800942c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800942e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009432:	2280      	movs	r2, #128	@ 0x80
 8009434:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8009436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009438:	2b03      	cmp	r3, #3
 800943a:	d13f      	bne.n	80094bc <mount_volume+0x418>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800943c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800943e:	3334      	adds	r3, #52	@ 0x34
 8009440:	3330      	adds	r3, #48	@ 0x30
 8009442:	4618      	mov	r0, r3
 8009444:	f7fe fc02 	bl	8007c4c <ld_word>
 8009448:	4603      	mov	r3, r0
 800944a:	2b01      	cmp	r3, #1
 800944c:	d136      	bne.n	80094bc <mount_volume+0x418>
			&& move_window(fs, bsect + 1) == FR_OK)
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	3301      	adds	r3, #1
 8009452:	4619      	mov	r1, r3
 8009454:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009456:	f7fe fcda 	bl	8007e0e <move_window>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d12d      	bne.n	80094bc <mount_volume+0x418>
		{
			fs->fsi_flag = 0;
 8009460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009462:	2200      	movs	r2, #0
 8009464:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8009466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009468:	3334      	adds	r3, #52	@ 0x34
 800946a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800946e:	4618      	mov	r0, r3
 8009470:	f7fe fbec 	bl	8007c4c <ld_word>
 8009474:	4603      	mov	r3, r0
 8009476:	461a      	mov	r2, r3
 8009478:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800947c:	429a      	cmp	r2, r3
 800947e:	d11d      	bne.n	80094bc <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009482:	3334      	adds	r3, #52	@ 0x34
 8009484:	4618      	mov	r0, r3
 8009486:	f7fe fbfa 	bl	8007c7e <ld_dword>
 800948a:	4603      	mov	r3, r0
 800948c:	4a15      	ldr	r2, [pc, #84]	@ (80094e4 <mount_volume+0x440>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d114      	bne.n	80094bc <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009494:	3334      	adds	r3, #52	@ 0x34
 8009496:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800949a:	4618      	mov	r0, r3
 800949c:	f7fe fbef 	bl	8007c7e <ld_dword>
 80094a0:	4603      	mov	r3, r0
 80094a2:	4a11      	ldr	r2, [pc, #68]	@ (80094e8 <mount_volume+0x444>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d109      	bne.n	80094bc <mount_volume+0x418>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80094a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094aa:	3334      	adds	r3, #52	@ 0x34
 80094ac:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fe fbe4 	bl	8007c7e <ld_dword>
 80094b6:	4602      	mov	r2, r0
 80094b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ba:	611a      	str	r2, [r3, #16]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 80094bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094be:	b2da      	uxtb	r2, r3
 80094c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 80094c4:	4b09      	ldr	r3, [pc, #36]	@ (80094ec <mount_volume+0x448>)
 80094c6:	881b      	ldrh	r3, [r3, #0]
 80094c8:	3301      	adds	r3, #1
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	4b07      	ldr	r3, [pc, #28]	@ (80094ec <mount_volume+0x448>)
 80094ce:	801a      	strh	r2, [r3, #0]
 80094d0:	4b06      	ldr	r3, [pc, #24]	@ (80094ec <mount_volume+0x448>)
 80094d2:	881a      	ldrh	r2, [r3, #0]
 80094d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d6:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3740      	adds	r7, #64	@ 0x40
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	41615252 	.word	0x41615252
 80094e8:	61417272 	.word	0x61417272
 80094ec:	20005d04 	.word	0x20005d04

080094f0 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80094fa:	2309      	movs	r3, #9
 80094fc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d01c      	beq.n	800953e <validate+0x4e>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d018      	beq.n	800953e <validate+0x4e>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d013      	beq.n	800953e <validate+0x4e>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	889a      	ldrh	r2, [r3, #4]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	88db      	ldrh	r3, [r3, #6]
 8009520:	429a      	cmp	r2, r3
 8009522:	d10c      	bne.n	800953e <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	785b      	ldrb	r3, [r3, #1]
 800952a:	4618      	mov	r0, r3
 800952c:	f7fe fa56 	bl	80079dc <disk_status>
 8009530:	4603      	mov	r3, r0
 8009532:	f003 0301 	and.w	r3, r3, #1
 8009536:	2b00      	cmp	r3, #0
 8009538:	d101      	bne.n	800953e <validate+0x4e>
			res = FR_OK;
 800953a:	2300      	movs	r3, #0
 800953c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 800953e:	7bfb      	ldrb	r3, [r7, #15]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d102      	bne.n	800954a <validate+0x5a>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	e000      	b.n	800954c <validate+0x5c>
 800954a:	2300      	movs	r3, #0
 800954c:	683a      	ldr	r2, [r7, #0]
 800954e:	6013      	str	r3, [r2, #0]
	return res;
 8009550:	7bfb      	ldrb	r3, [r7, #15]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
	...

0800955c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b088      	sub	sp, #32
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	4613      	mov	r3, r2
 8009568:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 800956e:	f107 0310 	add.w	r3, r7, #16
 8009572:	4618      	mov	r0, r3
 8009574:	f7ff fbf8 	bl	8008d68 <get_ldnumber>
 8009578:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	2b00      	cmp	r3, #0
 800957e:	da01      	bge.n	8009584 <f_mount+0x28>
 8009580:	230b      	movs	r3, #11
 8009582:	e02e      	b.n	80095e2 <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 8009584:	4a19      	ldr	r2, [pc, #100]	@ (80095ec <f_mount+0x90>)
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800958c:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d007      	beq.n	80095a4 <f_mount+0x48>
		FatFs[vol] = 0;
 8009594:	4a15      	ldr	r2, [pc, #84]	@ (80095ec <f_mount+0x90>)
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	2100      	movs	r1, #0
 800959a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	2200      	movs	r2, #0
 80095a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00b      	beq.n	80095c2 <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	69fa      	ldr	r2, [r7, #28]
 80095ae:	b2d2      	uxtb	r2, r2
 80095b0:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2200      	movs	r2, #0
 80095b6:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	490c      	ldr	r1, [pc, #48]	@ (80095ec <f_mount+0x90>)
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 80095c2:	79fb      	ldrb	r3, [r7, #7]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <f_mount+0x70>
 80095c8:	2300      	movs	r3, #0
 80095ca:	e00a      	b.n	80095e2 <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 80095cc:	f107 010c 	add.w	r1, r7, #12
 80095d0:	f107 0308 	add.w	r3, r7, #8
 80095d4:	2200      	movs	r2, #0
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7ff fd64 	bl	80090a4 <mount_volume>
 80095dc:	4603      	mov	r3, r0
 80095de:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80095e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3720      	adds	r7, #32
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	20005cfc 	.word	0x20005cfc

080095f0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b098      	sub	sp, #96	@ 0x60
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	4613      	mov	r3, r2
 80095fc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d101      	bne.n	8009608 <f_open+0x18>
 8009604:	2309      	movs	r3, #9
 8009606:	e184      	b.n	8009912 <f_open+0x322>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8009608:	79fb      	ldrb	r3, [r7, #7]
 800960a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800960e:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 8009610:	79fa      	ldrb	r2, [r7, #7]
 8009612:	f107 0114 	add.w	r1, r7, #20
 8009616:	f107 0308 	add.w	r3, r7, #8
 800961a:	4618      	mov	r0, r3
 800961c:	f7ff fd42 	bl	80090a4 <mount_volume>
 8009620:	4603      	mov	r3, r0
 8009622:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8009626:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800962a:	2b00      	cmp	r3, #0
 800962c:	f040 8168 	bne.w	8009900 <f_open+0x310>
		dj.obj.fs = fs;
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009634:	68ba      	ldr	r2, [r7, #8]
 8009636:	f107 0318 	add.w	r3, r7, #24
 800963a:	4611      	mov	r1, r2
 800963c:	4618      	mov	r0, r3
 800963e:	f7ff fb1f 	bl	8008c80 <follow_path>
 8009642:	4603      	mov	r3, r0
 8009644:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8009648:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800964c:	2b00      	cmp	r3, #0
 800964e:	d107      	bne.n	8009660 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009650:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009654:	b25b      	sxtb	r3, r3
 8009656:	2b00      	cmp	r3, #0
 8009658:	da02      	bge.n	8009660 <f_open+0x70>
				res = FR_INVALID_NAME;
 800965a:	2306      	movs	r3, #6
 800965c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009660:	79fb      	ldrb	r3, [r7, #7]
 8009662:	f003 031c 	and.w	r3, r3, #28
 8009666:	2b00      	cmp	r3, #0
 8009668:	d077      	beq.n	800975a <f_open+0x16a>
			if (res != FR_OK) {					/* No file, create new */
 800966a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800966e:	2b00      	cmp	r3, #0
 8009670:	d010      	beq.n	8009694 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009672:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009676:	2b04      	cmp	r3, #4
 8009678:	d107      	bne.n	800968a <f_open+0x9a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800967a:	f107 0318 	add.w	r3, r7, #24
 800967e:	4618      	mov	r0, r3
 8009680:	f7ff f9f4 	bl	8008a6c <dir_register>
 8009684:	4603      	mov	r3, r0
 8009686:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800968a:	79fb      	ldrb	r3, [r7, #7]
 800968c:	f043 0308 	orr.w	r3, r3, #8
 8009690:	71fb      	strb	r3, [r7, #7]
 8009692:	e010      	b.n	80096b6 <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009694:	7fbb      	ldrb	r3, [r7, #30]
 8009696:	f003 0311 	and.w	r3, r3, #17
 800969a:	2b00      	cmp	r3, #0
 800969c:	d003      	beq.n	80096a6 <f_open+0xb6>
					res = FR_DENIED;
 800969e:	2307      	movs	r3, #7
 80096a0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80096a4:	e007      	b.n	80096b6 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80096a6:	79fb      	ldrb	r3, [r7, #7]
 80096a8:	f003 0304 	and.w	r3, r3, #4
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d002      	beq.n	80096b6 <f_open+0xc6>
 80096b0:	2308      	movs	r3, #8
 80096b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 80096b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d167      	bne.n	800978e <f_open+0x19e>
 80096be:	79fb      	ldrb	r3, [r7, #7]
 80096c0:	f003 0308 	and.w	r3, r3, #8
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d062      	beq.n	800978e <f_open+0x19e>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 80096c8:	4b94      	ldr	r3, [pc, #592]	@ (800991c <f_open+0x32c>)
 80096ca:	653b      	str	r3, [r7, #80]	@ 0x50
					st_dword(dj.dir + DIR_CrtTime, tm);
 80096cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096ce:	330e      	adds	r3, #14
 80096d0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7fe fb11 	bl	8007cfa <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 80096d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096da:	3316      	adds	r3, #22
 80096dc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fe fb0b 	bl	8007cfa <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80096e8:	4611      	mov	r1, r2
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7ff f92a 	bl	8008944 <ld_clust>
 80096f0:	64f8      	str	r0, [r7, #76]	@ 0x4c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80096f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096f4:	330b      	adds	r3, #11
 80096f6:	2220      	movs	r2, #32
 80096f8:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80096fe:	2200      	movs	r2, #0
 8009700:	4618      	mov	r0, r3
 8009702:	f7ff f93e 	bl	8008982 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009708:	331c      	adds	r3, #28
 800970a:	2100      	movs	r1, #0
 800970c:	4618      	mov	r0, r3
 800970e:	f7fe faf4 	bl	8007cfa <st_dword>
					fs->wflag = 1;
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	2201      	movs	r2, #1
 8009716:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8009718:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800971a:	2b00      	cmp	r3, #0
 800971c:	d037      	beq.n	800978e <f_open+0x19e>
						sc = fs->winsect;
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009722:	64bb      	str	r3, [r7, #72]	@ 0x48
						res = remove_chain(&dj.obj, cl, 0);
 8009724:	f107 0318 	add.w	r3, r7, #24
 8009728:	2200      	movs	r2, #0
 800972a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800972c:	4618      	mov	r0, r3
 800972e:	f7fe fe15 	bl	800835c <remove_chain>
 8009732:	4603      	mov	r3, r0
 8009734:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8009738:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800973c:	2b00      	cmp	r3, #0
 800973e:	d126      	bne.n	800978e <f_open+0x19e>
							res = move_window(fs, sc);
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009744:	4618      	mov	r0, r3
 8009746:	f7fe fb62 	bl	8007e0e <move_window>
 800974a:	4603      	mov	r3, r0
 800974c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009754:	3a01      	subs	r2, #1
 8009756:	611a      	str	r2, [r3, #16]
 8009758:	e019      	b.n	800978e <f_open+0x19e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 800975a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800975e:	2b00      	cmp	r3, #0
 8009760:	d115      	bne.n	800978e <f_open+0x19e>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8009762:	7fbb      	ldrb	r3, [r7, #30]
 8009764:	f003 0310 	and.w	r3, r3, #16
 8009768:	2b00      	cmp	r3, #0
 800976a:	d003      	beq.n	8009774 <f_open+0x184>
					res = FR_NO_FILE;
 800976c:	2304      	movs	r3, #4
 800976e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009772:	e00c      	b.n	800978e <f_open+0x19e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8009774:	79fb      	ldrb	r3, [r7, #7]
 8009776:	f003 0302 	and.w	r3, r3, #2
 800977a:	2b00      	cmp	r3, #0
 800977c:	d007      	beq.n	800978e <f_open+0x19e>
 800977e:	7fbb      	ldrb	r3, [r7, #30]
 8009780:	f003 0301 	and.w	r3, r3, #1
 8009784:	2b00      	cmp	r3, #0
 8009786:	d002      	beq.n	800978e <f_open+0x19e>
						res = FR_DENIED;
 8009788:	2307      	movs	r3, #7
 800978a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800978e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009792:	2b00      	cmp	r3, #0
 8009794:	d10f      	bne.n	80097b6 <f_open+0x1c6>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8009796:	79fb      	ldrb	r3, [r7, #7]
 8009798:	f003 0308 	and.w	r3, r3, #8
 800979c:	2b00      	cmp	r3, #0
 800979e:	d003      	beq.n	80097a8 <f_open+0x1b8>
 80097a0:	79fb      	ldrb	r3, [r7, #7]
 80097a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097a6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 80097b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 80097b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f040 80a0 	bne.w	8009900 <f_open+0x310>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80097c4:	4611      	mov	r1, r2
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7ff f8bc 	bl	8008944 <ld_clust>
 80097cc:	4602      	mov	r2, r0
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80097d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097d4:	331c      	adds	r3, #28
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7fe fa51 	bl	8007c7e <ld_dword>
 80097dc:	4602      	mov	r2, r0
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 80097e2:	697a      	ldr	r2, [r7, #20]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	88da      	ldrh	r2, [r3, #6]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	79fa      	ldrb	r2, [r7, #7]
 80097f4:	741a      	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2200      	movs	r2, #0
 80097fa:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2200      	movs	r2, #0
 8009800:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2200      	movs	r2, #0
 8009806:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	3328      	adds	r3, #40	@ 0x28
 800980c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009810:	2100      	movs	r1, #0
 8009812:	4618      	mov	r0, r3
 8009814:	f00c fa86 	bl	8015d24 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009818:	79fb      	ldrb	r3, [r7, #7]
 800981a:	f003 0320 	and.w	r3, r3, #32
 800981e:	2b00      	cmp	r3, #0
 8009820:	d06e      	beq.n	8009900 <f_open+0x310>
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d06a      	beq.n	8009900 <f_open+0x310>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	68da      	ldr	r2, [r3, #12]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	895b      	ldrh	r3, [r3, #10]
 8009836:	461a      	mov	r2, r3
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	899b      	ldrh	r3, [r3, #12]
 800983c:	fb02 f303 	mul.w	r3, r2, r3
 8009840:	647b      	str	r3, [r7, #68]	@ 0x44
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	657b      	str	r3, [r7, #84]	@ 0x54
 800984e:	e016      	b.n	800987e <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009854:	4618      	mov	r0, r3
 8009856:	f7fe fb94 	bl	8007f82 <get_fat>
 800985a:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800985c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800985e:	2b01      	cmp	r3, #1
 8009860:	d802      	bhi.n	8009868 <f_open+0x278>
 8009862:	2302      	movs	r3, #2
 8009864:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009868:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800986a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800986e:	d102      	bne.n	8009876 <f_open+0x286>
 8009870:	2301      	movs	r3, #1
 8009872:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009876:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009878:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	657b      	str	r3, [r7, #84]	@ 0x54
 800987e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009882:	2b00      	cmp	r3, #0
 8009884:	d103      	bne.n	800988e <f_open+0x29e>
 8009886:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800988a:	429a      	cmp	r2, r3
 800988c:	d8e0      	bhi.n	8009850 <f_open+0x260>
				}
				fp->clust = clst;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009892:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009894:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009898:	2b00      	cmp	r3, #0
 800989a:	d131      	bne.n	8009900 <f_open+0x310>
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	899b      	ldrh	r3, [r3, #12]
 80098a0:	461a      	mov	r2, r3
 80098a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80098a8:	fb01 f202 	mul.w	r2, r1, r2
 80098ac:	1a9b      	subs	r3, r3, r2
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d026      	beq.n	8009900 <f_open+0x310>
					sc = clst2sect(fs, clst);
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7fe fb44 	bl	8007f44 <clst2sect>
 80098bc:	64b8      	str	r0, [r7, #72]	@ 0x48
					if (sc == 0) {
 80098be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d103      	bne.n	80098cc <f_open+0x2dc>
						res = FR_INT_ERR;
 80098c4:	2302      	movs	r3, #2
 80098c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80098ca:	e019      	b.n	8009900 <f_open+0x310>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	899b      	ldrh	r3, [r3, #12]
 80098d0:	461a      	mov	r2, r3
 80098d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80098d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098da:	441a      	add	r2, r3
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	7858      	ldrb	r0, [r3, #1]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	69da      	ldr	r2, [r3, #28]
 80098ee:	2301      	movs	r3, #1
 80098f0:	f7fe f8c4 	bl	8007a7c <disk_read>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d002      	beq.n	8009900 <f_open+0x310>
 80098fa:	2301      	movs	r3, #1
 80098fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009900:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009904:	2b00      	cmp	r3, #0
 8009906:	d002      	beq.n	800990e <f_open+0x31e>
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800990e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8009912:	4618      	mov	r0, r3
 8009914:	3760      	adds	r7, #96	@ 0x60
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	54210000 	.word	0x54210000

08009920 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b08e      	sub	sp, #56	@ 0x38
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	607a      	str	r2, [r7, #4]
 800992c:	603b      	str	r3, [r7, #0]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	2200      	movs	r2, #0
 8009936:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f107 0214 	add.w	r2, r7, #20
 800993e:	4611      	mov	r1, r2
 8009940:	4618      	mov	r0, r3
 8009942:	f7ff fdd5 	bl	80094f0 <validate>
 8009946:	4603      	mov	r3, r0
 8009948:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800994c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009950:	2b00      	cmp	r3, #0
 8009952:	d107      	bne.n	8009964 <f_read+0x44>
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	7c5b      	ldrb	r3, [r3, #17]
 8009958:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800995c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009960:	2b00      	cmp	r3, #0
 8009962:	d002      	beq.n	800996a <f_read+0x4a>
 8009964:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009968:	e129      	b.n	8009bbe <f_read+0x29e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	7c1b      	ldrb	r3, [r3, #16]
 800996e:	f003 0301 	and.w	r3, r3, #1
 8009972:	2b00      	cmp	r3, #0
 8009974:	d101      	bne.n	800997a <f_read+0x5a>
 8009976:	2307      	movs	r3, #7
 8009978:	e121      	b.n	8009bbe <f_read+0x29e>
	remain = fp->obj.objsize - fp->fptr;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	68da      	ldr	r2, [r3, #12]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	695b      	ldr	r3, [r3, #20]
 8009982:	1ad3      	subs	r3, r2, r3
 8009984:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	6a3b      	ldr	r3, [r7, #32]
 800998a:	429a      	cmp	r2, r3
 800998c:	f240 8112 	bls.w	8009bb4 <f_read+0x294>
 8009990:	6a3b      	ldr	r3, [r7, #32]
 8009992:	607b      	str	r3, [r7, #4]

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8009994:	e10e      	b.n	8009bb4 <f_read+0x294>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	695b      	ldr	r3, [r3, #20]
 800999a:	697a      	ldr	r2, [r7, #20]
 800999c:	8992      	ldrh	r2, [r2, #12]
 800999e:	fbb3 f1f2 	udiv	r1, r3, r2
 80099a2:	fb01 f202 	mul.w	r2, r1, r2
 80099a6:	1a9b      	subs	r3, r3, r2
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f040 80c9 	bne.w	8009b40 <f_read+0x220>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	695b      	ldr	r3, [r3, #20]
 80099b2:	697a      	ldr	r2, [r7, #20]
 80099b4:	8992      	ldrh	r2, [r2, #12]
 80099b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80099ba:	697a      	ldr	r2, [r7, #20]
 80099bc:	8952      	ldrh	r2, [r2, #10]
 80099be:	3a01      	subs	r2, #1
 80099c0:	4013      	ands	r3, r2
 80099c2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d123      	bne.n	8009a12 <f_read+0xf2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	695b      	ldr	r3, [r3, #20]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d103      	bne.n	80099da <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80099d8:	e007      	b.n	80099ea <f_read+0xca>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	699b      	ldr	r3, [r3, #24]
 80099e0:	4619      	mov	r1, r3
 80099e2:	4610      	mov	r0, r2
 80099e4:	f7fe facd 	bl	8007f82 <get_fat>
 80099e8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80099ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d804      	bhi.n	80099fa <f_read+0xda>
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2202      	movs	r2, #2
 80099f4:	745a      	strb	r2, [r3, #17]
 80099f6:	2302      	movs	r3, #2
 80099f8:	e0e1      	b.n	8009bbe <f_read+0x29e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80099fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a00:	d104      	bne.n	8009a0c <f_read+0xec>
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2201      	movs	r2, #1
 8009a06:	745a      	strb	r2, [r3, #17]
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e0d8      	b.n	8009bbe <f_read+0x29e>
				fp->clust = clst;				/* Update current cluster */
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a10:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8009a12:	697a      	ldr	r2, [r7, #20]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	4619      	mov	r1, r3
 8009a1a:	4610      	mov	r0, r2
 8009a1c:	f7fe fa92 	bl	8007f44 <clst2sect>
 8009a20:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d104      	bne.n	8009a32 <f_read+0x112>
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2202      	movs	r2, #2
 8009a2c:	745a      	strb	r2, [r3, #17]
 8009a2e:	2302      	movs	r3, #2
 8009a30:	e0c5      	b.n	8009bbe <f_read+0x29e>
			sect += csect;
 8009a32:	69ba      	ldr	r2, [r7, #24]
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	4413      	add	r3, r2
 8009a38:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	899b      	ldrh	r3, [r3, #12]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a46:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8009a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d041      	beq.n	8009ad2 <f_read+0x1b2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009a4e:	69fa      	ldr	r2, [r7, #28]
 8009a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a52:	4413      	add	r3, r2
 8009a54:	697a      	ldr	r2, [r7, #20]
 8009a56:	8952      	ldrh	r2, [r2, #10]
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d905      	bls.n	8009a68 <f_read+0x148>
					cc = fs->csize - csect;
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	895b      	ldrh	r3, [r3, #10]
 8009a60:	461a      	mov	r2, r3
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	1ad3      	subs	r3, r2, r3
 8009a66:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	7858      	ldrb	r0, [r3, #1]
 8009a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a6e:	69ba      	ldr	r2, [r7, #24]
 8009a70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009a72:	f7fe f803 	bl	8007a7c <disk_read>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d004      	beq.n	8009a86 <f_read+0x166>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	745a      	strb	r2, [r3, #17]
 8009a82:	2301      	movs	r3, #1
 8009a84:	e09b      	b.n	8009bbe <f_read+0x29e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	7c1b      	ldrb	r3, [r3, #16]
 8009a8a:	b25b      	sxtb	r3, r3
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	da18      	bge.n	8009ac2 <f_read+0x1a2>
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	69da      	ldr	r2, [r3, #28]
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	1ad3      	subs	r3, r2, r3
 8009a98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d911      	bls.n	8009ac2 <f_read+0x1a2>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	69da      	ldr	r2, [r3, #28]
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	1ad3      	subs	r3, r2, r3
 8009aa6:	697a      	ldr	r2, [r7, #20]
 8009aa8:	8992      	ldrh	r2, [r2, #12]
 8009aaa:	fb02 f303 	mul.w	r3, r2, r3
 8009aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ab0:	18d0      	adds	r0, r2, r3
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	899b      	ldrh	r3, [r3, #12]
 8009abc:	461a      	mov	r2, r3
 8009abe:	f00c f9b5 	bl	8015e2c <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	899b      	ldrh	r3, [r3, #12]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aca:	fb02 f303 	mul.w	r3, r2, r3
 8009ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009ad0:	e05c      	b.n	8009b8c <f_read+0x26c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	69db      	ldr	r3, [r3, #28]
 8009ad6:	69ba      	ldr	r2, [r7, #24]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d02e      	beq.n	8009b3a <f_read+0x21a>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	7c1b      	ldrb	r3, [r3, #16]
 8009ae0:	b25b      	sxtb	r3, r3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	da18      	bge.n	8009b18 <f_read+0x1f8>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	7858      	ldrb	r0, [r3, #1]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	69da      	ldr	r2, [r3, #28]
 8009af4:	2301      	movs	r3, #1
 8009af6:	f7fd fff3 	bl	8007ae0 <disk_write>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d004      	beq.n	8009b0a <f_read+0x1ea>
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2201      	movs	r2, #1
 8009b04:	745a      	strb	r2, [r3, #17]
 8009b06:	2301      	movs	r3, #1
 8009b08:	e059      	b.n	8009bbe <f_read+0x29e>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	7c1b      	ldrb	r3, [r3, #16]
 8009b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b12:	b2da      	uxtb	r2, r3
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	7858      	ldrb	r0, [r3, #1]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009b22:	2301      	movs	r3, #1
 8009b24:	69ba      	ldr	r2, [r7, #24]
 8009b26:	f7fd ffa9 	bl	8007a7c <disk_read>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d004      	beq.n	8009b3a <f_read+0x21a>
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2201      	movs	r2, #1
 8009b34:	745a      	strb	r2, [r3, #17]
 8009b36:	2301      	movs	r3, #1
 8009b38:	e041      	b.n	8009bbe <f_read+0x29e>
			}
#endif
			fp->sect = sect;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	69ba      	ldr	r2, [r7, #24]
 8009b3e:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	899b      	ldrh	r3, [r3, #12]
 8009b44:	4618      	mov	r0, r3
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	695b      	ldr	r3, [r3, #20]
 8009b4a:	697a      	ldr	r2, [r7, #20]
 8009b4c:	8992      	ldrh	r2, [r2, #12]
 8009b4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b52:	fb01 f202 	mul.w	r2, r1, r2
 8009b56:	1a9b      	subs	r3, r3, r2
 8009b58:	1ac3      	subs	r3, r0, r3
 8009b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009b5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d901      	bls.n	8009b68 <f_read+0x248>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	695b      	ldr	r3, [r3, #20]
 8009b72:	697a      	ldr	r2, [r7, #20]
 8009b74:	8992      	ldrh	r2, [r2, #12]
 8009b76:	fbb3 f0f2 	udiv	r0, r3, r2
 8009b7a:	fb00 f202 	mul.w	r2, r0, r2
 8009b7e:	1a9b      	subs	r3, r3, r2
 8009b80:	440b      	add	r3, r1
 8009b82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b84:	4619      	mov	r1, r3
 8009b86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009b88:	f00c f950 	bl	8015e2c <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b90:	1ad3      	subs	r3, r2, r3
 8009b92:	607b      	str	r3, [r7, #4]
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b9a:	441a      	add	r2, r3
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	601a      	str	r2, [r3, #0]
 8009ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ba4:	4413      	add	r3, r2
 8009ba6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	695a      	ldr	r2, [r3, #20]
 8009bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bae:	441a      	add	r2, r3
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	615a      	str	r2, [r3, #20]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f47f aeed 	bne.w	8009996 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3738      	adds	r7, #56	@ 0x38
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b08c      	sub	sp, #48	@ 0x30
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	60f8      	str	r0, [r7, #12]
 8009bce:	60b9      	str	r1, [r7, #8]
 8009bd0:	607a      	str	r2, [r7, #4]
 8009bd2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f107 0210 	add.w	r2, r7, #16
 8009be4:	4611      	mov	r1, r2
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7ff fc82 	bl	80094f0 <validate>
 8009bec:	4603      	mov	r3, r0
 8009bee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009bf2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d107      	bne.n	8009c0a <f_write+0x44>
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	7c5b      	ldrb	r3, [r3, #17]
 8009bfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009c02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d002      	beq.n	8009c10 <f_write+0x4a>
 8009c0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009c0e:	e15e      	b.n	8009ece <f_write+0x308>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	7c1b      	ldrb	r3, [r3, #16]
 8009c14:	f003 0302 	and.w	r3, r3, #2
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d101      	bne.n	8009c20 <f_write+0x5a>
 8009c1c:	2307      	movs	r3, #7
 8009c1e:	e156      	b.n	8009ece <f_write+0x308>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	695a      	ldr	r2, [r3, #20]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	441a      	add	r2, r3
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	695b      	ldr	r3, [r3, #20]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	f080 8140 	bcs.w	8009eb2 <f_write+0x2ec>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	695b      	ldr	r3, [r3, #20]
 8009c36:	43db      	mvns	r3, r3
 8009c38:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8009c3a:	e13a      	b.n	8009eb2 <f_write+0x2ec>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	695b      	ldr	r3, [r3, #20]
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	8992      	ldrh	r2, [r2, #12]
 8009c44:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c48:	fb01 f202 	mul.w	r2, r1, r2
 8009c4c:	1a9b      	subs	r3, r3, r2
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	f040 80e5 	bne.w	8009e1e <f_write+0x258>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	695b      	ldr	r3, [r3, #20]
 8009c58:	693a      	ldr	r2, [r7, #16]
 8009c5a:	8992      	ldrh	r2, [r2, #12]
 8009c5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c60:	693a      	ldr	r2, [r7, #16]
 8009c62:	8952      	ldrh	r2, [r2, #10]
 8009c64:	3a01      	subs	r2, #1
 8009c66:	4013      	ands	r3, r2
 8009c68:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d137      	bne.n	8009ce0 <f_write+0x11a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	695b      	ldr	r3, [r3, #20]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10c      	bne.n	8009c92 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10e      	bne.n	8009ca2 <f_write+0xdc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2100      	movs	r1, #0
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7fe fbcc 	bl	8008426 <create_chain>
 8009c8e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009c90:	e007      	b.n	8009ca2 <f_write+0xdc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	699b      	ldr	r3, [r3, #24]
 8009c98:	4619      	mov	r1, r3
 8009c9a:	4610      	mov	r0, r2
 8009c9c:	f7fe fbc3 	bl	8008426 <create_chain>
 8009ca0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f000 8109 	beq.w	8009ebc <f_write+0x2f6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d104      	bne.n	8009cba <f_write+0xf4>
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2202      	movs	r2, #2
 8009cb4:	745a      	strb	r2, [r3, #17]
 8009cb6:	2302      	movs	r3, #2
 8009cb8:	e109      	b.n	8009ece <f_write+0x308>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc0:	d104      	bne.n	8009ccc <f_write+0x106>
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	745a      	strb	r2, [r3, #17]
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e100      	b.n	8009ece <f_write+0x308>
				fp->clust = clst;			/* Update current cluster */
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009cd0:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d102      	bne.n	8009ce0 <f_write+0x11a>
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009cde:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	7c1b      	ldrb	r3, [r3, #16]
 8009ce4:	b25b      	sxtb	r3, r3
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	da18      	bge.n	8009d1c <f_write+0x156>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	7858      	ldrb	r0, [r3, #1]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	69da      	ldr	r2, [r3, #28]
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	f7fd fef1 	bl	8007ae0 <disk_write>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d004      	beq.n	8009d0e <f_write+0x148>
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2201      	movs	r2, #1
 8009d08:	745a      	strb	r2, [r3, #17]
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e0df      	b.n	8009ece <f_write+0x308>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	7c1b      	ldrb	r3, [r3, #16]
 8009d12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d16:	b2da      	uxtb	r2, r3
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8009d1c:	693a      	ldr	r2, [r7, #16]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	699b      	ldr	r3, [r3, #24]
 8009d22:	4619      	mov	r1, r3
 8009d24:	4610      	mov	r0, r2
 8009d26:	f7fe f90d 	bl	8007f44 <clst2sect>
 8009d2a:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d104      	bne.n	8009d3c <f_write+0x176>
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2202      	movs	r2, #2
 8009d36:	745a      	strb	r2, [r3, #17]
 8009d38:	2302      	movs	r3, #2
 8009d3a:	e0c8      	b.n	8009ece <f_write+0x308>
			sect += csect;
 8009d3c:	697a      	ldr	r2, [r7, #20]
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	4413      	add	r3, r2
 8009d42:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	899b      	ldrh	r3, [r3, #12]
 8009d48:	461a      	mov	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d50:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8009d52:	6a3b      	ldr	r3, [r7, #32]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d043      	beq.n	8009de0 <f_write+0x21a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009d58:	69ba      	ldr	r2, [r7, #24]
 8009d5a:	6a3b      	ldr	r3, [r7, #32]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	693a      	ldr	r2, [r7, #16]
 8009d60:	8952      	ldrh	r2, [r2, #10]
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d905      	bls.n	8009d72 <f_write+0x1ac>
					cc = fs->csize - csect;
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	895b      	ldrh	r3, [r3, #10]
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	1ad3      	subs	r3, r2, r3
 8009d70:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	7858      	ldrb	r0, [r3, #1]
 8009d76:	6a3b      	ldr	r3, [r7, #32]
 8009d78:	697a      	ldr	r2, [r7, #20]
 8009d7a:	69f9      	ldr	r1, [r7, #28]
 8009d7c:	f7fd feb0 	bl	8007ae0 <disk_write>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d004      	beq.n	8009d90 <f_write+0x1ca>
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	745a      	strb	r2, [r3, #17]
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e09e      	b.n	8009ece <f_write+0x308>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	69da      	ldr	r2, [r3, #28]
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	1ad3      	subs	r3, r2, r3
 8009d98:	6a3a      	ldr	r2, [r7, #32]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d918      	bls.n	8009dd0 <f_write+0x20a>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	69da      	ldr	r2, [r3, #28]
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	1ad3      	subs	r3, r2, r3
 8009dac:	693a      	ldr	r2, [r7, #16]
 8009dae:	8992      	ldrh	r2, [r2, #12]
 8009db0:	fb02 f303 	mul.w	r3, r2, r3
 8009db4:	69fa      	ldr	r2, [r7, #28]
 8009db6:	18d1      	adds	r1, r2, r3
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	899b      	ldrh	r3, [r3, #12]
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	f00c f835 	bl	8015e2c <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	7c1b      	ldrb	r3, [r3, #16]
 8009dc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dca:	b2da      	uxtb	r2, r3
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	899b      	ldrh	r3, [r3, #12]
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	6a3b      	ldr	r3, [r7, #32]
 8009dd8:	fb02 f303 	mul.w	r3, r2, r3
 8009ddc:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8009dde:	e04b      	b.n	8009e78 <f_write+0x2b2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	69db      	ldr	r3, [r3, #28]
 8009de4:	697a      	ldr	r2, [r7, #20]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d016      	beq.n	8009e18 <f_write+0x252>
				fp->fptr < fp->obj.objsize &&
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	695a      	ldr	r2, [r3, #20]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d210      	bcs.n	8009e18 <f_write+0x252>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	7858      	ldrb	r0, [r3, #1]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009e00:	2301      	movs	r3, #1
 8009e02:	697a      	ldr	r2, [r7, #20]
 8009e04:	f7fd fe3a 	bl	8007a7c <disk_read>
 8009e08:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d004      	beq.n	8009e18 <f_write+0x252>
					ABORT(fs, FR_DISK_ERR);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2201      	movs	r2, #1
 8009e12:	745a      	strb	r2, [r3, #17]
 8009e14:	2301      	movs	r3, #1
 8009e16:	e05a      	b.n	8009ece <f_write+0x308>
			}
#endif
			fp->sect = sect;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	697a      	ldr	r2, [r7, #20]
 8009e1c:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	899b      	ldrh	r3, [r3, #12]
 8009e22:	4618      	mov	r0, r3
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	695b      	ldr	r3, [r3, #20]
 8009e28:	693a      	ldr	r2, [r7, #16]
 8009e2a:	8992      	ldrh	r2, [r2, #12]
 8009e2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e30:	fb01 f202 	mul.w	r2, r1, r2
 8009e34:	1a9b      	subs	r3, r3, r2
 8009e36:	1ac3      	subs	r3, r0, r3
 8009e38:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d901      	bls.n	8009e46 <f_write+0x280>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	627b      	str	r3, [r7, #36]	@ 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	695b      	ldr	r3, [r3, #20]
 8009e50:	693a      	ldr	r2, [r7, #16]
 8009e52:	8992      	ldrh	r2, [r2, #12]
 8009e54:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e58:	fb00 f202 	mul.w	r2, r0, r2
 8009e5c:	1a9b      	subs	r3, r3, r2
 8009e5e:	440b      	add	r3, r1
 8009e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e62:	69f9      	ldr	r1, [r7, #28]
 8009e64:	4618      	mov	r0, r3
 8009e66:	f00b ffe1 	bl	8015e2c <memcpy>
		fp->flag |= FA_DIRTY;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	7c1b      	ldrb	r3, [r3, #16]
 8009e6e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009e72:	b2da      	uxtb	r2, r3
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	741a      	strb	r2, [r3, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	607b      	str	r3, [r7, #4]
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e86:	441a      	add	r2, r3
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	601a      	str	r2, [r3, #0]
 8009e8c:	69fa      	ldr	r2, [r7, #28]
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e90:	4413      	add	r3, r2
 8009e92:	61fb      	str	r3, [r7, #28]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	695a      	ldr	r2, [r3, #20]
 8009e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e9a:	441a      	add	r2, r3
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	615a      	str	r2, [r3, #20]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	68da      	ldr	r2, [r3, #12]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	695b      	ldr	r3, [r3, #20]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	bf38      	it	cc
 8009eac:	461a      	movcc	r2, r3
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	60da      	str	r2, [r3, #12]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f47f aec1 	bne.w	8009c3c <f_write+0x76>
 8009eba:	e000      	b.n	8009ebe <f_write+0x2f8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009ebc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	7c1b      	ldrb	r3, [r3, #16]
 8009ec2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ec6:	b2da      	uxtb	r2, r3
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3730      	adds	r7, #48	@ 0x30
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
	...

08009ed8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b086      	sub	sp, #24
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f107 0208 	add.w	r2, r7, #8
 8009ee6:	4611      	mov	r1, r2
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7ff fb01 	bl	80094f0 <validate>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009ef2:	7dfb      	ldrb	r3, [r7, #23]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d167      	bne.n	8009fc8 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	7c1b      	ldrb	r3, [r3, #16]
 8009efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d061      	beq.n	8009fc8 <f_sync+0xf0>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	7c1b      	ldrb	r3, [r3, #16]
 8009f08:	b25b      	sxtb	r3, r3
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	da15      	bge.n	8009f3a <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	7858      	ldrb	r0, [r3, #1]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	69da      	ldr	r2, [r3, #28]
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	f7fd fddf 	bl	8007ae0 <disk_write>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d001      	beq.n	8009f2c <f_sync+0x54>
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e04e      	b.n	8009fca <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	7c1b      	ldrb	r3, [r3, #16]
 8009f30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f34:	b2da      	uxtb	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009f3a:	4b26      	ldr	r3, [pc, #152]	@ (8009fd4 <f_sync+0xfc>)
 8009f3c:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6a1b      	ldr	r3, [r3, #32]
 8009f44:	4619      	mov	r1, r3
 8009f46:	4610      	mov	r0, r2
 8009f48:	f7fd ff61 	bl	8007e0e <move_window>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009f50:	7dfb      	ldrb	r3, [r7, #23]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d138      	bne.n	8009fc8 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f5a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	330b      	adds	r3, #11
 8009f60:	781a      	ldrb	r2, [r3, #0]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	330b      	adds	r3, #11
 8009f66:	f042 0220 	orr.w	r2, r2, #32
 8009f6a:	b2d2      	uxtb	r2, r2
 8009f6c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6818      	ldr	r0, [r3, #0]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	461a      	mov	r2, r3
 8009f78:	68f9      	ldr	r1, [r7, #12]
 8009f7a:	f7fe fd02 	bl	8008982 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f103 021c 	add.w	r2, r3, #28
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	4619      	mov	r1, r3
 8009f8a:	4610      	mov	r0, r2
 8009f8c:	f7fd feb5 	bl	8007cfa <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	3316      	adds	r3, #22
 8009f94:	6939      	ldr	r1, [r7, #16]
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7fd feaf 	bl	8007cfa <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	3312      	adds	r3, #18
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7fd fe8e 	bl	8007cc4 <st_word>
					fs->wflag = 1;
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	2201      	movs	r2, #1
 8009fac:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7fd ff59 	bl	8007e68 <sync_fs>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	7c1b      	ldrb	r3, [r3, #16]
 8009fbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fc2:	b2da      	uxtb	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3718      	adds	r7, #24
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	54210000 	.word	0x54210000

08009fd8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f7ff ff79 	bl	8009ed8 <f_sync>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009fea:	7bfb      	ldrb	r3, [r7, #15]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d10e      	bne.n	800a00e <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f107 0208 	add.w	r2, r7, #8
 8009ff6:	4611      	mov	r1, r2
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7ff fa79 	bl	80094f0 <validate>
 8009ffe:	4603      	mov	r3, r0
 800a000:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a002:	7bfb      	ldrb	r3, [r7, #15]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d102      	bne.n	800a00e <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a00e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a010:	4618      	mov	r0, r3
 800a012:	3710      	adds	r7, #16
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID for each partition (for only MBR) */
	BYTE *buf			/* Working buffer for a sector */
)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b08e      	sub	sp, #56	@ 0x38
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60b9      	str	r1, [r7, #8]
 800a020:	607b      	str	r3, [r7, #4]
 800a022:	4603      	mov	r3, r0
 800a024:	73fb      	strb	r3, [r7, #15]
 800a026:	4613      	mov	r3, r2
 800a028:	73bb      	strb	r3, [r7, #14]
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 800a02a:	f107 0210 	add.w	r2, r7, #16
 800a02e:	7bfb      	ldrb	r3, [r7, #15]
 800a030:	2101      	movs	r1, #1
 800a032:	4618      	mov	r0, r3
 800a034:	f7fd fd88 	bl	8007b48 <disk_ioctl>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d001      	beq.n	800a042 <create_partition+0x2a>
 800a03e:	2301      	movs	r3, #1
 800a040:	e108      	b.n	800a254 <create_partition+0x23c>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	623b      	str	r3, [r7, #32]
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
 800a046:	233f      	movs	r3, #63	@ 0x3f
 800a048:	77fb      	strb	r3, [r7, #31]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 800a04a:	2308      	movs	r3, #8
 800a04c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a050:	e004      	b.n	800a05c <create_partition+0x44>
 800a052:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a056:	005b      	lsls	r3, r3, #1
 800a058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a05c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00a      	beq.n	800a07a <create_partition+0x62>
 800a064:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a068:	6a3a      	ldr	r2, [r7, #32]
 800a06a:	fbb2 f2f3 	udiv	r2, r2, r3
 800a06e:	7ffb      	ldrb	r3, [r7, #31]
 800a070:	fbb2 f3f3 	udiv	r3, r2, r3
 800a074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a078:	d8eb      	bhi.n	800a052 <create_partition+0x3a>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 800a07a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d102      	bne.n	800a088 <create_partition+0x70>
 800a082:	23ff      	movs	r3, #255	@ 0xff
 800a084:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 800a088:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a08c:	2100      	movs	r1, #0
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f00b fe48 	bl	8015d24 <memset>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a09a:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800a09c:	2300      	movs	r3, #0
 800a09e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0a0:	7ffb      	ldrb	r3, [r7, #31]
 800a0a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0a4:	e0b5      	b.n	800a212 <create_partition+0x1fa>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 800a0a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 800a0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0b4:	2b64      	cmp	r3, #100	@ 0x64
 800a0b6:	d80d      	bhi.n	800a0d4 <create_partition+0xbc>
 800a0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ba:	2b64      	cmp	r3, #100	@ 0x64
 800a0bc:	d008      	beq.n	800a0d0 <create_partition+0xb8>
 800a0be:	6a3b      	ldr	r3, [r7, #32]
 800a0c0:	4a66      	ldr	r2, [pc, #408]	@ (800a25c <create_partition+0x244>)
 800a0c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0c6:	095b      	lsrs	r3, r3, #5
 800a0c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0ca:	fb02 f303 	mul.w	r3, r2, r3
 800a0ce:	e000      	b.n	800a0d2 <create_partition+0xba>
 800a0d0:	6a3b      	ldr	r3, [r7, #32]
 800a0d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 800a0d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0d8:	4413      	add	r3, r2
 800a0da:	6a3a      	ldr	r2, [r7, #32]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d305      	bcc.n	800a0ec <create_partition+0xd4>
 800a0e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0e4:	4413      	add	r3, r2
 800a0e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d903      	bls.n	800a0f4 <create_partition+0xdc>
 800a0ec:	6a3a      	ldr	r2, [r7, #32]
 800a0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f0:	1ad3      	subs	r3, r2, r3
 800a0f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800a0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f000 8097 	beq.w	800a22a <create_partition+0x212>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 800a0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0fe:	3308      	adds	r3, #8
 800a100:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a102:	4618      	mov	r0, r3
 800a104:	f7fd fdf9 	bl	8007cfa <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 800a108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a10a:	330c      	adds	r3, #12
 800a10c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a10e:	4618      	mov	r0, r3
 800a110:	f7fd fdf3 	bl	8007cfa <st_dword>
			pte[PTE_System] = sys;					/* System type */
 800a114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a116:	3304      	adds	r3, #4
 800a118:	7bba      	ldrb	r2, [r7, #14]
 800a11a:	701a      	strb	r2, [r3, #0]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 800a11c:	7ffb      	ldrb	r3, [r7, #31]
 800a11e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a120:	fbb2 f2f3 	udiv	r2, r2, r3
 800a124:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a128:	fbb2 f3f3 	udiv	r3, r2, r3
 800a12c:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 800a12e:	7ffb      	ldrb	r3, [r7, #31]
 800a130:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a132:	fbb2 f3f3 	udiv	r3, r2, r3
 800a136:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a13a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a13e:	fb01 f202 	mul.w	r2, r1, r2
 800a142:	1a9b      	subs	r3, r3, r2
 800a144:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 800a146:	7ffa      	ldrb	r2, [r7, #31]
 800a148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a14a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a14e:	fb01 f202 	mul.w	r2, r1, r2
 800a152:	1a9b      	subs	r3, r3, r2
 800a154:	b2db      	uxtb	r3, r3
 800a156:	3301      	adds	r3, #1
 800a158:	75bb      	strb	r3, [r7, #22]
			pte[PTE_StHead] = hd;
 800a15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a15c:	3301      	adds	r3, #1
 800a15e:	7dfa      	ldrb	r2, [r7, #23]
 800a160:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	089b      	lsrs	r3, r3, #2
 800a166:	b2db      	uxtb	r3, r3
 800a168:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a16c:	b2d9      	uxtb	r1, r3
 800a16e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a170:	3302      	adds	r3, #2
 800a172:	7dba      	ldrb	r2, [r7, #22]
 800a174:	430a      	orrs	r2, r1
 800a176:	b2d2      	uxtb	r2, r2
 800a178:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = (BYTE)cy;
 800a17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a17c:	3303      	adds	r3, #3
 800a17e:	69ba      	ldr	r2, [r7, #24]
 800a180:	b2d2      	uxtb	r2, r2
 800a182:	701a      	strb	r2, [r3, #0]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 800a184:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a188:	4413      	add	r3, r2
 800a18a:	1e5a      	subs	r2, r3, #1
 800a18c:	7ffb      	ldrb	r3, [r7, #31]
 800a18e:	fbb2 f2f3 	udiv	r2, r2, r3
 800a192:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a196:	fbb2 f3f3 	udiv	r3, r2, r3
 800a19a:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 800a19c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a19e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a0:	4413      	add	r3, r2
 800a1a2:	1e5a      	subs	r2, r3, #1
 800a1a4:	7ffb      	ldrb	r3, [r7, #31]
 800a1a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1aa:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a1ae:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1b2:	fb01 f202 	mul.w	r2, r1, r2
 800a1b6:	1a9b      	subs	r3, r3, r2
 800a1b8:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 800a1ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1be:	4413      	add	r3, r2
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	7ffa      	ldrb	r2, [r7, #31]
 800a1c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1c8:	fb01 f202 	mul.w	r2, r1, r2
 800a1cc:	1a9b      	subs	r3, r3, r2
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	75bb      	strb	r3, [r7, #22]
			pte[PTE_EdHead] = hd;
 800a1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d6:	3305      	adds	r3, #5
 800a1d8:	7dfa      	ldrb	r2, [r7, #23]
 800a1da:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	089b      	lsrs	r3, r3, #2
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a1e6:	b2d9      	uxtb	r1, r3
 800a1e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ea:	3306      	adds	r3, #6
 800a1ec:	7dba      	ldrb	r2, [r7, #22]
 800a1ee:	430a      	orrs	r2, r1
 800a1f0:	b2d2      	uxtb	r2, r2
 800a1f2:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)cy;
 800a1f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1f6:	3307      	adds	r3, #7
 800a1f8:	69ba      	ldr	r2, [r7, #24]
 800a1fa:	b2d2      	uxtb	r2, r2
 800a1fc:	701a      	strb	r2, [r3, #0]

			pte += SZ_PTE;		/* Next entry */
 800a1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a200:	3310      	adds	r3, #16
 800a202:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800a204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a206:	3301      	adds	r3, #1
 800a208:	637b      	str	r3, [r7, #52]	@ 0x34
 800a20a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a20e:	4413      	add	r3, r2
 800a210:	633b      	str	r3, [r7, #48]	@ 0x30
 800a212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a214:	2b03      	cmp	r3, #3
 800a216:	d809      	bhi.n	800a22c <create_partition+0x214>
 800a218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d006      	beq.n	800a22c <create_partition+0x214>
 800a21e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a220:	6a3b      	ldr	r3, [r7, #32]
 800a222:	429a      	cmp	r2, r3
 800a224:	f4ff af3f 	bcc.w	800a0a6 <create_partition+0x8e>
 800a228:	e000      	b.n	800a22c <create_partition+0x214>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800a22a:	bf00      	nop
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a232:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a236:	4618      	mov	r0, r3
 800a238:	f7fd fd44 	bl	8007cc4 <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800a23c:	7bf8      	ldrb	r0, [r7, #15]
 800a23e:	2301      	movs	r3, #1
 800a240:	2200      	movs	r2, #0
 800a242:	6879      	ldr	r1, [r7, #4]
 800a244:	f7fd fc4c 	bl	8007ae0 <disk_write>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d001      	beq.n	800a252 <create_partition+0x23a>
 800a24e:	2301      	movs	r3, #1
 800a250:	e000      	b.n	800a254 <create_partition+0x23c>
	}

	return FR_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	3738      	adds	r7, #56	@ 0x38
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	51eb851f 	.word	0x51eb851f

0800a260 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b09e      	sub	sp, #120	@ 0x78
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	607a      	str	r2, [r7, #4]
 800a26c:	603b      	str	r3, [r7, #0]
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800a26e:	f107 030c 	add.w	r3, r7, #12
 800a272:	4618      	mov	r0, r3
 800a274:	f7fe fd78 	bl	8008d68 <get_ldnumber>
 800a278:	6478      	str	r0, [r7, #68]	@ 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800a27a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	da02      	bge.n	800a286 <f_mkfs+0x26>
 800a280:	230b      	movs	r3, #11
 800a282:	f000 bc39 	b.w	800aaf8 <f_mkfs+0x898>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 800a286:	4a90      	ldr	r2, [pc, #576]	@ (800a4c8 <f_mkfs+0x268>)
 800a288:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a28a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d005      	beq.n	800a29e <f_mkfs+0x3e>
 800a292:	4a8d      	ldr	r2, [pc, #564]	@ (800a4c8 <f_mkfs+0x268>)
 800a294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a29a:	2200      	movs	r2, #0
 800a29c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 800a29e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2a0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 800a2aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7fd fbbc 	bl	8007a2c <disk_initialize>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	if (ds & STA_NOINIT) return FR_NOT_READY;
 800a2ba:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a2be:	f003 0301 	and.w	r3, r3, #1
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d002      	beq.n	800a2cc <f_mkfs+0x6c>
 800a2c6:	2303      	movs	r3, #3
 800a2c8:	f000 bc16 	b.w	800aaf8 <f_mkfs+0x898>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 800a2cc:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a2d0:	f003 0304 	and.w	r3, r3, #4
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d002      	beq.n	800a2de <f_mkfs+0x7e>
 800a2d8:	230a      	movs	r3, #10
 800a2da:	f000 bc0d 	b.w	800aaf8 <f_mkfs+0x898>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d101      	bne.n	800a2e8 <f_mkfs+0x88>
 800a2e4:	4b79      	ldr	r3, [pc, #484]	@ (800a4cc <f_mkfs+0x26c>)
 800a2e6:	60bb      	str	r3, [r7, #8]
	sz_blk = opt->align;
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	61fb      	str	r3, [r7, #28]
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the paramter or lower layer */
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d107      	bne.n	800a304 <f_mkfs+0xa4>
 800a2f4:	f107 021c 	add.w	r2, r7, #28
 800a2f8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a2fc:	2103      	movs	r1, #3
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7fd fc22 	bl	8007b48 <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d009      	beq.n	800a31e <f_mkfs+0xbe>
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a310:	d805      	bhi.n	800a31e <f_mkfs+0xbe>
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	1e5a      	subs	r2, r3, #1
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	4013      	ands	r3, r2
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <f_mkfs+0xc2>
 800a31e:	2301      	movs	r3, #1
 800a320:	61fb      	str	r3, [r7, #28]
#if FF_MAX_SS != FF_MIN_SS
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 800a322:	f107 0220 	add.w	r2, r7, #32
 800a326:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a32a:	2102      	movs	r1, #2
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7fd fc0b 	bl	8007b48 <disk_ioctl>
 800a332:	4603      	mov	r3, r0
 800a334:	2b00      	cmp	r3, #0
 800a336:	d001      	beq.n	800a33c <f_mkfs+0xdc>
 800a338:	2301      	movs	r3, #1
 800a33a:	e3dd      	b.n	800aaf8 <f_mkfs+0x898>
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 800a33c:	8c3b      	ldrh	r3, [r7, #32]
 800a33e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a342:	d80a      	bhi.n	800a35a <f_mkfs+0xfa>
 800a344:	8c3b      	ldrh	r3, [r7, #32]
 800a346:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a34a:	d306      	bcc.n	800a35a <f_mkfs+0xfa>
 800a34c:	8c3b      	ldrh	r3, [r7, #32]
 800a34e:	461a      	mov	r2, r3
 800a350:	8c3b      	ldrh	r3, [r7, #32]
 800a352:	3b01      	subs	r3, #1
 800a354:	4013      	ands	r3, r2
 800a356:	2b00      	cmp	r3, #0
 800a358:	d001      	beq.n	800a35e <f_mkfs+0xfe>
 800a35a:	2301      	movs	r3, #1
 800a35c:	e3cc      	b.n	800aaf8 <f_mkfs+0x898>
#else
	ss = FF_MAX_SS;
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	f003 030f 	and.w	r3, r3, #15
 800a366:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	785b      	ldrb	r3, [r3, #1]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d006      	beq.n	800a380 <f_mkfs+0x120>
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	785b      	ldrb	r3, [r3, #1]
 800a376:	2b02      	cmp	r3, #2
 800a378:	d802      	bhi.n	800a380 <f_mkfs+0x120>
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	785b      	ldrb	r3, [r3, #1]
 800a37e:	e000      	b.n	800a382 <f_mkfs+0x122>
 800a380:	2301      	movs	r3, #1
 800a382:	63fb      	str	r3, [r7, #60]	@ 0x3c
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d013      	beq.n	800a3b4 <f_mkfs+0x154>
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a394:	d80e      	bhi.n	800a3b4 <f_mkfs+0x154>
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	8c3a      	ldrh	r2, [r7, #32]
 800a39c:	0952      	lsrs	r2, r2, #5
 800a39e:	b292      	uxth	r2, r2
 800a3a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3a4:	fb01 f202 	mul.w	r2, r1, r2
 800a3a8:	1a9b      	subs	r3, r3, r2
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d102      	bne.n	800a3b4 <f_mkfs+0x154>
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	e001      	b.n	800a3b8 <f_mkfs+0x158>
 800a3b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a3b8:	63bb      	str	r3, [r7, #56]	@ 0x38
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a3c2:	d80a      	bhi.n	800a3da <f_mkfs+0x17a>
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	68da      	ldr	r2, [r3, #12]
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	4013      	ands	r3, r2
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d102      	bne.n	800a3da <f_mkfs+0x17a>
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	e000      	b.n	800a3dc <f_mkfs+0x17c>
 800a3da:	2300      	movs	r3, #0
 800a3dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sz_au /= ss;	/* Byte --> Sector */
 800a3de:	8c3b      	ldrh	r3, [r7, #32]
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3e8:	64fb      	str	r3, [r7, #76]	@ 0x4c

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 800a3ea:	8c3b      	ldrh	r3, [r7, #32]
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3f4:	637b      	str	r3, [r7, #52]	@ 0x34
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 800a3f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d101      	bne.n	800a400 <f_mkfs+0x1a0>
 800a3fc:	2311      	movs	r3, #17
 800a3fe:	e37b      	b.n	800aaf8 <f_mkfs+0x898>
	buf = (BYTE*)work;		/* Working buffer */
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	633b      	str	r3, [r7, #48]	@ 0x30
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 800a404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a406:	2b00      	cmp	r3, #0
 800a408:	d101      	bne.n	800a40e <f_mkfs+0x1ae>
 800a40a:	2311      	movs	r3, #17
 800a40c:	e374      	b.n	800aaf8 <f_mkfs+0x898>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 800a40e:	2300      	movs	r3, #0
 800a410:	61bb      	str	r3, [r7, #24]
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	66fb      	str	r3, [r7, #108]	@ 0x6c
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800a416:	f107 0218 	add.w	r2, r7, #24
 800a41a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a41e:	2101      	movs	r1, #1
 800a420:	4618      	mov	r0, r3
 800a422:	f7fd fb91 	bl	8007b48 <disk_ioctl>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <f_mkfs+0x1d0>
 800a42c:	2301      	movs	r3, #1
 800a42e:	e363      	b.n	800aaf8 <f_mkfs+0x898>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 800a430:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a434:	f003 0308 	and.w	r3, r3, #8
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d108      	bne.n	800a44e <f_mkfs+0x1ee>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	2b3f      	cmp	r3, #63	@ 0x3f
 800a440:	d905      	bls.n	800a44e <f_mkfs+0x1ee>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 800a442:	233f      	movs	r3, #63	@ 0x3f
 800a444:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a446:	69ba      	ldr	r2, [r7, #24]
 800a448:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	61bb      	str	r3, [r7, #24]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 800a44e:	69bb      	ldr	r3, [r7, #24]
 800a450:	2b7f      	cmp	r3, #127	@ 0x7f
 800a452:	d801      	bhi.n	800a458 <f_mkfs+0x1f8>
 800a454:	230e      	movs	r3, #14
 800a456:	e34f      	b.n	800aaf8 <f_mkfs+0x898>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 800a458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a45a:	2b80      	cmp	r3, #128	@ 0x80
 800a45c:	d901      	bls.n	800a462 <f_mkfs+0x202>
 800a45e:	2380      	movs	r3, #128	@ 0x80
 800a460:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 800a462:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a466:	f003 0302 	and.w	r3, r3, #2
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d009      	beq.n	800a482 <f_mkfs+0x222>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 800a46e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a472:	f003 0301 	and.w	r3, r3, #1
 800a476:	2b00      	cmp	r3, #0
 800a478:	d103      	bne.n	800a482 <f_mkfs+0x222>
				fsty = FS_FAT32; break;
 800a47a:	2303      	movs	r3, #3
 800a47c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800a480:	e00a      	b.n	800a498 <f_mkfs+0x238>
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 800a482:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a486:	f003 0301 	and.w	r3, r3, #1
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d101      	bne.n	800a492 <f_mkfs+0x232>
 800a48e:	2313      	movs	r3, #19
 800a490:	e332      	b.n	800aaf8 <f_mkfs+0x898>
		fsty = FS_FAT16;
 800a492:	2302      	movs	r3, #2
 800a494:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	f103 43a8 	add.w	r3, r3, #1409286144	@ 0x54000000
 800a49e:	f503 1304 	add.w	r3, r3, #2162688	@ 0x210000
 800a4a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
 800a4a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4a6:	663b      	str	r3, [r7, #96]	@ 0x60
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 800a4a8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a4ac:	2b03      	cmp	r3, #3
 800a4ae:	d141      	bne.n	800a534 <f_mkfs+0x2d4>
				if (pau == 0) {	/* AU auto-selection */
 800a4b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d120      	bne.n	800a4f8 <f_mkfs+0x298>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	0c5b      	lsrs	r3, r3, #17
 800a4ba:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a4bc:	2300      	movs	r3, #0
 800a4be:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	663b      	str	r3, [r7, #96]	@ 0x60
 800a4c4:	e00a      	b.n	800a4dc <f_mkfs+0x27c>
 800a4c6:	bf00      	nop
 800a4c8:	20005cfc 	.word	0x20005cfc
 800a4cc:	0801750c 	.word	0x0801750c
 800a4d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a4d8:	005b      	lsls	r3, r3, #1
 800a4da:	663b      	str	r3, [r7, #96]	@ 0x60
 800a4dc:	4a95      	ldr	r2, [pc, #596]	@ (800a734 <f_mkfs+0x4d4>)
 800a4de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d007      	beq.n	800a4f8 <f_mkfs+0x298>
 800a4e8:	4a92      	ldr	r2, [pc, #584]	@ (800a734 <f_mkfs+0x4d4>)
 800a4ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d2eb      	bcs.n	800a4d0 <f_mkfs+0x270>
				}
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 800a4f8:	69ba      	ldr	r2, [r7, #24]
 800a4fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a4fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a500:	62bb      	str	r3, [r7, #40]	@ 0x28
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800a502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a504:	3302      	adds	r3, #2
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	8c3a      	ldrh	r2, [r7, #32]
 800a50a:	4413      	add	r3, r2
 800a50c:	3b01      	subs	r3, #1
 800a50e:	8c3a      	ldrh	r2, [r7, #32]
 800a510:	fbb3 f3f2 	udiv	r3, r3, r2
 800a514:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 800a516:	2320      	movs	r3, #32
 800a518:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = 0;		/* No static directory */
 800a51a:	2300      	movs	r3, #0
 800a51c:	653b      	str	r3, [r7, #80]	@ 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800a51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a520:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a524:	4293      	cmp	r3, r2
 800a526:	d903      	bls.n	800a530 <f_mkfs+0x2d0>
 800a528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a52a:	4a83      	ldr	r2, [pc, #524]	@ (800a738 <f_mkfs+0x4d8>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d94b      	bls.n	800a5c8 <f_mkfs+0x368>
 800a530:	230e      	movs	r3, #14
 800a532:	e2e1      	b.n	800aaf8 <f_mkfs+0x898>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 800a534:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a536:	2b00      	cmp	r3, #0
 800a538:	d11b      	bne.n	800a572 <f_mkfs+0x312>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	0b1b      	lsrs	r3, r3, #12
 800a53e:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a540:	2300      	movs	r3, #0
 800a542:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a544:	2301      	movs	r3, #1
 800a546:	663b      	str	r3, [r7, #96]	@ 0x60
 800a548:	e005      	b.n	800a556 <f_mkfs+0x2f6>
 800a54a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a54c:	3301      	adds	r3, #1
 800a54e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a550:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a552:	005b      	lsls	r3, r3, #1
 800a554:	663b      	str	r3, [r7, #96]	@ 0x60
 800a556:	4a79      	ldr	r2, [pc, #484]	@ (800a73c <f_mkfs+0x4dc>)
 800a558:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a55a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d007      	beq.n	800a572 <f_mkfs+0x312>
 800a562:	4a76      	ldr	r2, [pc, #472]	@ (800a73c <f_mkfs+0x4dc>)
 800a564:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a56a:	461a      	mov	r2, r3
 800a56c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a56e:	4293      	cmp	r3, r2
 800a570:	d2eb      	bcs.n	800a54a <f_mkfs+0x2ea>
				}
				n_clst = (DWORD)sz_vol / pau;
 800a572:	69ba      	ldr	r2, [r7, #24]
 800a574:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a576:	fbb2 f3f3 	udiv	r3, r2, r3
 800a57a:	62bb      	str	r3, [r7, #40]	@ 0x28
				if (n_clst > MAX_FAT12) {
 800a57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a57e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a582:	4293      	cmp	r3, r2
 800a584:	d904      	bls.n	800a590 <f_mkfs+0x330>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800a586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a588:	3302      	adds	r3, #2
 800a58a:	005b      	lsls	r3, r3, #1
 800a58c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a58e:	e00a      	b.n	800a5a6 <f_mkfs+0x346>
				} else {
					fsty = FS_FAT12;
 800a590:	2301      	movs	r3, #1
 800a592:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800a596:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a598:	4613      	mov	r3, r2
 800a59a:	005b      	lsls	r3, r3, #1
 800a59c:	4413      	add	r3, r2
 800a59e:	3301      	adds	r3, #1
 800a5a0:	085b      	lsrs	r3, r3, #1
 800a5a2:	3303      	adds	r3, #3
 800a5a4:	667b      	str	r3, [r7, #100]	@ 0x64
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800a5a6:	8c3b      	ldrh	r3, [r7, #32]
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a5ac:	4413      	add	r3, r2
 800a5ae:	3b01      	subs	r3, #1
 800a5b0:	8c3a      	ldrh	r2, [r7, #32]
 800a5b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5b6:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 800a5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5be:	015b      	lsls	r3, r3, #5
 800a5c0:	8c3a      	ldrh	r2, [r7, #32]
 800a5c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5c6:	653b      	str	r3, [r7, #80]	@ 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800a5c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a5ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a5cc:	4413      	add	r3, r2
 800a5ce:	66bb      	str	r3, [r7, #104]	@ 0x68
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800a5d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a5d4:	fb03 f202 	mul.w	r2, r3, r2
 800a5d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a5da:	4413      	add	r3, r2
 800a5dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a5de:	4413      	add	r3, r2
 800a5e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 800a5e2:	69fa      	ldr	r2, [r7, #28]
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e6:	4413      	add	r3, r2
 800a5e8:	1e5a      	subs	r2, r3, #1
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	425b      	negs	r3, r3
 800a5ee:	401a      	ands	r2, r3
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f2:	1ad3      	subs	r3, r2, r3
 800a5f4:	667b      	str	r3, [r7, #100]	@ 0x64
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 800a5f6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a5fa:	2b03      	cmp	r3, #3
 800a5fc:	d108      	bne.n	800a610 <f_mkfs+0x3b0>
				sz_rsv += n; b_fat += n;
 800a5fe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a600:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a602:	4413      	add	r3, r2
 800a604:	677b      	str	r3, [r7, #116]	@ 0x74
 800a606:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a608:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a60a:	4413      	add	r3, r2
 800a60c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a60e:	e019      	b.n	800a644 <f_mkfs+0x3e4>
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
 800a610:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a612:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a614:	fbb3 f2f2 	udiv	r2, r3, r2
 800a618:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a61a:	fb01 f202 	mul.w	r2, r1, r2
 800a61e:	1a9b      	subs	r3, r3, r2
 800a620:	2b00      	cmp	r3, #0
 800a622:	d008      	beq.n	800a636 <f_mkfs+0x3d6>
					n--; sz_rsv++; b_fat++;
 800a624:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a626:	3b01      	subs	r3, #1
 800a628:	667b      	str	r3, [r7, #100]	@ 0x64
 800a62a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a62c:	3301      	adds	r3, #1
 800a62e:	677b      	str	r3, [r7, #116]	@ 0x74
 800a630:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a632:	3301      	adds	r3, #1
 800a634:	66bb      	str	r3, [r7, #104]	@ 0x68
				}
				sz_fat += n / n_fat;
 800a636:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a63a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a63e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a640:	4413      	add	r3, r2
 800a642:	657b      	str	r3, [r7, #84]	@ 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 800a644:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a646:	011a      	lsls	r2, r3, #4
 800a648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a64a:	441a      	add	r2, r3
 800a64c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a64e:	1ad2      	subs	r2, r2, r3
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	429a      	cmp	r2, r3
 800a654:	d901      	bls.n	800a65a <f_mkfs+0x3fa>
 800a656:	230e      	movs	r3, #14
 800a658:	e24e      	b.n	800aaf8 <f_mkfs+0x898>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 800a65a:	69ba      	ldr	r2, [r7, #24]
 800a65c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a65e:	1ad2      	subs	r2, r2, r3
 800a660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a662:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a664:	fb01 f303 	mul.w	r3, r1, r3
 800a668:	1ad2      	subs	r2, r2, r3
 800a66a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a66c:	1ad2      	subs	r2, r2, r3
 800a66e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a670:	fbb2 f3f3 	udiv	r3, r2, r3
 800a674:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (fsty == FS_FAT32) {
 800a676:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a67a:	2b03      	cmp	r3, #3
 800a67c:	d10f      	bne.n	800a69e <f_mkfs+0x43e>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 800a67e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a680:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a684:	4293      	cmp	r3, r2
 800a686:	d80a      	bhi.n	800a69e <f_mkfs+0x43e>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a688:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d105      	bne.n	800a69a <f_mkfs+0x43a>
 800a68e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a690:	085b      	lsrs	r3, r3, #1
 800a692:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a694:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a696:	2b00      	cmp	r3, #0
 800a698:	d145      	bne.n	800a726 <f_mkfs+0x4c6>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800a69a:	230e      	movs	r3, #14
 800a69c:	e22c      	b.n	800aaf8 <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT16) {
 800a69e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	d134      	bne.n	800a710 <f_mkfs+0x4b0>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800a6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d91f      	bls.n	800a6f0 <f_mkfs+0x490>
					if (sz_au == 0 && (pau * 2) <= 64) {
 800a6b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d107      	bne.n	800a6c6 <f_mkfs+0x466>
 800a6b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a6b8:	005b      	lsls	r3, r3, #1
 800a6ba:	2b40      	cmp	r3, #64	@ 0x40
 800a6bc:	d803      	bhi.n	800a6c6 <f_mkfs+0x466>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 800a6be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a6c0:	005b      	lsls	r3, r3, #1
 800a6c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6c4:	e034      	b.n	800a730 <f_mkfs+0x4d0>
					}
					if ((fsopt & FM_FAT32)) {
 800a6c6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a6ca:	f003 0302 	and.w	r3, r3, #2
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d003      	beq.n	800a6da <f_mkfs+0x47a>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800a6d8:	e02a      	b.n	800a730 <f_mkfs+0x4d0>
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a6da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d105      	bne.n	800a6ec <f_mkfs+0x48c>
 800a6e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a6e2:	005b      	lsls	r3, r3, #1
 800a6e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6e8:	2b80      	cmp	r3, #128	@ 0x80
 800a6ea:	d91e      	bls.n	800a72a <f_mkfs+0x4ca>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800a6ec:	230e      	movs	r3, #14
 800a6ee:	e203      	b.n	800aaf8 <f_mkfs+0x898>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800a6f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d80a      	bhi.n	800a710 <f_mkfs+0x4b0>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a6fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d105      	bne.n	800a70c <f_mkfs+0x4ac>
 800a700:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a702:	005b      	lsls	r3, r3, #1
 800a704:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a706:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a708:	2b80      	cmp	r3, #128	@ 0x80
 800a70a:	d910      	bls.n	800a72e <f_mkfs+0x4ce>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800a70c:	230e      	movs	r3, #14
 800a70e:	e1f3      	b.n	800aaf8 <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 800a710:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a714:	2b01      	cmp	r3, #1
 800a716:	d113      	bne.n	800a740 <f_mkfs+0x4e0>
 800a718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a71a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a71e:	4293      	cmp	r3, r2
 800a720:	d90e      	bls.n	800a740 <f_mkfs+0x4e0>
 800a722:	230e      	movs	r3, #14
 800a724:	e1e8      	b.n	800aaf8 <f_mkfs+0x898>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a726:	bf00      	nop
 800a728:	e6bc      	b.n	800a4a4 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a72a:	bf00      	nop
 800a72c:	e6ba      	b.n	800a4a4 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a72e:	bf00      	nop
			pau = sz_au;
 800a730:	e6b8      	b.n	800a4a4 <f_mkfs+0x244>
 800a732:	bf00      	nop
 800a734:	0801751c 	.word	0x0801751c
 800a738:	0ffffff5 	.word	0x0ffffff5
 800a73c:	0801752c 	.word	0x0801752c

			/* Ok, it is the valid cluster configuration */
			break;
 800a740:	bf00      	nop
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
 800a742:	8c3b      	ldrh	r3, [r7, #32]
 800a744:	461a      	mov	r2, r3
 800a746:	2100      	movs	r1, #0
 800a748:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a74a:	f00b faeb 	bl	8015d24 <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 800a74e:	220b      	movs	r2, #11
 800a750:	49b1      	ldr	r1, [pc, #708]	@ (800aa18 <f_mkfs+0x7b8>)
 800a752:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a754:	f00b fb6a 	bl	8015e2c <memcpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800a758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75a:	330b      	adds	r3, #11
 800a75c:	8c3a      	ldrh	r2, [r7, #32]
 800a75e:	4611      	mov	r1, r2
 800a760:	4618      	mov	r0, r3
 800a762:	f7fd faaf 	bl	8007cc4 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800a766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a768:	330d      	adds	r3, #13
 800a76a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a76c:	b2d2      	uxtb	r2, r2
 800a76e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800a770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a772:	330e      	adds	r3, #14
 800a774:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a776:	b292      	uxth	r2, r2
 800a778:	4611      	mov	r1, r2
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fd faa2 	bl	8007cc4 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 800a780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a782:	3310      	adds	r3, #16
 800a784:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a786:	b2d2      	uxtb	r2, r2
 800a788:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 800a78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78c:	f103 0211 	add.w	r2, r3, #17
 800a790:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a794:	2b03      	cmp	r3, #3
 800a796:	d002      	beq.n	800a79e <f_mkfs+0x53e>
 800a798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	e000      	b.n	800a7a0 <f_mkfs+0x540>
 800a79e:	2300      	movs	r3, #0
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	4610      	mov	r0, r2
 800a7a4:	f7fd fa8e 	bl	8007cc4 <st_word>
		if (sz_vol < 0x10000) {
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7ae:	d208      	bcs.n	800a7c2 <f_mkfs+0x562>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800a7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b2:	3313      	adds	r3, #19
 800a7b4:	69ba      	ldr	r2, [r7, #24]
 800a7b6:	b292      	uxth	r2, r2
 800a7b8:	4611      	mov	r1, r2
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7fd fa82 	bl	8007cc4 <st_word>
 800a7c0:	e006      	b.n	800a7d0 <f_mkfs+0x570>
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 800a7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c4:	3320      	adds	r3, #32
 800a7c6:	69ba      	ldr	r2, [r7, #24]
 800a7c8:	4611      	mov	r1, r2
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7fd fa95 	bl	8007cfa <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800a7d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d2:	3315      	adds	r3, #21
 800a7d4:	22f8      	movs	r2, #248	@ 0xf8
 800a7d6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7da:	3318      	adds	r3, #24
 800a7dc:	213f      	movs	r1, #63	@ 0x3f
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7fd fa70 	bl	8007cc4 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800a7e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e6:	331a      	adds	r3, #26
 800a7e8:	21ff      	movs	r1, #255	@ 0xff
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7fd fa6a 	bl	8007cc4 <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 800a7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f2:	331c      	adds	r3, #28
 800a7f4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7fd fa7f 	bl	8007cfa <st_dword>
		if (fsty == FS_FAT32) {
 800a7fc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a800:	2b03      	cmp	r3, #3
 800a802:	d12d      	bne.n	800a860 <f_mkfs+0x600>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 800a804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a806:	3343      	adds	r3, #67	@ 0x43
 800a808:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a80a:	4618      	mov	r0, r3
 800a80c:	f7fd fa75 	bl	8007cfa <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800a810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a812:	3324      	adds	r3, #36	@ 0x24
 800a814:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a816:	4618      	mov	r0, r3
 800a818:	f7fd fa6f 	bl	8007cfa <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800a81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a81e:	332c      	adds	r3, #44	@ 0x2c
 800a820:	2102      	movs	r1, #2
 800a822:	4618      	mov	r0, r3
 800a824:	f7fd fa69 	bl	8007cfa <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800a828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a82a:	3330      	adds	r3, #48	@ 0x30
 800a82c:	2101      	movs	r1, #1
 800a82e:	4618      	mov	r0, r3
 800a830:	f7fd fa48 	bl	8007cc4 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800a834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a836:	3332      	adds	r3, #50	@ 0x32
 800a838:	2106      	movs	r1, #6
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fd fa42 	bl	8007cc4 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800a840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a842:	3340      	adds	r3, #64	@ 0x40
 800a844:	2280      	movs	r2, #128	@ 0x80
 800a846:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800a848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a84a:	3342      	adds	r3, #66	@ 0x42
 800a84c:	2229      	movs	r2, #41	@ 0x29
 800a84e:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800a850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a852:	3347      	adds	r3, #71	@ 0x47
 800a854:	2213      	movs	r2, #19
 800a856:	4971      	ldr	r1, [pc, #452]	@ (800aa1c <f_mkfs+0x7bc>)
 800a858:	4618      	mov	r0, r3
 800a85a:	f00b fae7 	bl	8015e2c <memcpy>
 800a85e:	e01c      	b.n	800a89a <f_mkfs+0x63a>
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 800a860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a862:	3327      	adds	r3, #39	@ 0x27
 800a864:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a866:	4618      	mov	r0, r3
 800a868:	f7fd fa47 	bl	8007cfa <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800a86c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a86e:	3316      	adds	r3, #22
 800a870:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a872:	b292      	uxth	r2, r2
 800a874:	4611      	mov	r1, r2
 800a876:	4618      	mov	r0, r3
 800a878:	f7fd fa24 	bl	8007cc4 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800a87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a87e:	3324      	adds	r3, #36	@ 0x24
 800a880:	2280      	movs	r2, #128	@ 0x80
 800a882:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800a884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a886:	3326      	adds	r3, #38	@ 0x26
 800a888:	2229      	movs	r2, #41	@ 0x29
 800a88a:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800a88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a88e:	332b      	adds	r3, #43	@ 0x2b
 800a890:	2213      	movs	r2, #19
 800a892:	4963      	ldr	r1, [pc, #396]	@ (800aa20 <f_mkfs+0x7c0>)
 800a894:	4618      	mov	r0, r3
 800a896:	f00b fac9 	bl	8015e2c <memcpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800a89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a89c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a8a0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7fd fa0d 	bl	8007cc4 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 800a8aa:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a8b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a8b4:	f7fd f914 	bl	8007ae0 <disk_write>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d001      	beq.n	800a8c2 <f_mkfs+0x662>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e11a      	b.n	800aaf8 <f_mkfs+0x898>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 800a8c2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a8c6:	2b03      	cmp	r3, #3
 800a8c8:	d140      	bne.n	800a94c <f_mkfs+0x6ec>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800a8ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8cc:	1d9a      	adds	r2, r3, #6
 800a8ce:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a8d6:	f7fd f903 	bl	8007ae0 <disk_write>
			memset(buf, 0, ss);
 800a8da:	8c3b      	ldrh	r3, [r7, #32]
 800a8dc:	461a      	mov	r2, r3
 800a8de:	2100      	movs	r1, #0
 800a8e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a8e2:	f00b fa1f 	bl	8015d24 <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800a8e6:	494f      	ldr	r1, [pc, #316]	@ (800aa24 <f_mkfs+0x7c4>)
 800a8e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a8ea:	f7fd fa06 	bl	8007cfa <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800a8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a8f4:	494c      	ldr	r1, [pc, #304]	@ (800aa28 <f_mkfs+0x7c8>)
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7fd f9ff 	bl	8007cfa <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800a8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fe:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a904:	3b01      	subs	r3, #1
 800a906:	4619      	mov	r1, r3
 800a908:	4610      	mov	r0, r2
 800a90a:	f7fd f9f6 	bl	8007cfa <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800a90e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a910:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a914:	2102      	movs	r1, #2
 800a916:	4618      	mov	r0, r3
 800a918:	f7fd f9ef 	bl	8007cfa <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800a91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a91e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a922:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a926:	4618      	mov	r0, r3
 800a928:	f7fd f9cc 	bl	8007cc4 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800a92c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a92e:	1dda      	adds	r2, r3, #7
 800a930:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800a934:	2301      	movs	r3, #1
 800a936:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a938:	f7fd f8d2 	bl	8007ae0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800a93c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a93e:	1c5a      	adds	r2, r3, #1
 800a940:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800a944:	2301      	movs	r3, #1
 800a946:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a948:	f7fd f8ca 	bl	8007ae0 <disk_write>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
 800a94c:	8c3b      	ldrh	r3, [r7, #32]
 800a94e:	461a      	mov	r2, r3
 800a950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a952:	fb02 f303 	mul.w	r3, r2, r3
 800a956:	461a      	mov	r2, r3
 800a958:	2100      	movs	r1, #0
 800a95a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a95c:	f00b f9e2 	bl	8015d24 <memset>
		sect = b_fat;		/* FAT start sector */
 800a960:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a962:	673b      	str	r3, [r7, #112]	@ 0x70
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800a964:	2300      	movs	r3, #0
 800a966:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a968:	e04b      	b.n	800aa02 <f_mkfs+0x7a2>
			if (fsty == FS_FAT32) {
 800a96a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a96e:	2b03      	cmp	r3, #3
 800a970:	d113      	bne.n	800a99a <f_mkfs+0x73a>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
 800a972:	f06f 0107 	mvn.w	r1, #7
 800a976:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a978:	f7fd f9bf 	bl	8007cfa <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
 800a97c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a97e:	3304      	adds	r3, #4
 800a980:	f04f 31ff 	mov.w	r1, #4294967295
 800a984:	4618      	mov	r0, r3
 800a986:	f7fd f9b8 	bl	8007cfa <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
 800a98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a98c:	3308      	adds	r3, #8
 800a98e:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800a992:	4618      	mov	r0, r3
 800a994:	f7fd f9b1 	bl	8007cfa <st_dword>
 800a998:	e00b      	b.n	800a9b2 <f_mkfs+0x752>
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 800a99a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d101      	bne.n	800a9a6 <f_mkfs+0x746>
 800a9a2:	4b22      	ldr	r3, [pc, #136]	@ (800aa2c <f_mkfs+0x7cc>)
 800a9a4:	e001      	b.n	800a9aa <f_mkfs+0x74a>
 800a9a6:	f06f 0307 	mvn.w	r3, #7
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9ae:	f7fd f9a4 	bl	8007cfa <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800a9b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800a9b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a9b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	bf28      	it	cs
 800a9be:	4613      	movcs	r3, r2
 800a9c0:	667b      	str	r3, [r7, #100]	@ 0x64
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800a9c2:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800a9c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9c8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a9ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a9cc:	f7fd f888 	bl	8007ae0 <disk_write>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d001      	beq.n	800a9da <f_mkfs+0x77a>
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e08e      	b.n	800aaf8 <f_mkfs+0x898>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
 800a9da:	8c3b      	ldrh	r3, [r7, #32]
 800a9dc:	461a      	mov	r2, r3
 800a9de:	2100      	movs	r1, #0
 800a9e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9e2:	f00b f99f 	bl	8015d24 <memset>
				sect += n; nsect -= n;
 800a9e6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a9e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9ea:	4413      	add	r3, r2
 800a9ec:	673b      	str	r3, [r7, #112]	@ 0x70
 800a9ee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a9f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9f2:	1ad3      	subs	r3, r2, r3
 800a9f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
			} while (nsect);
 800a9f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d1dc      	bne.n	800a9b6 <f_mkfs+0x756>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800a9fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9fe:	3301      	adds	r3, #1
 800aa00:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d3af      	bcc.n	800a96a <f_mkfs+0x70a>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800aa0a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800aa0e:	2b03      	cmp	r3, #3
 800aa10:	d10e      	bne.n	800aa30 <f_mkfs+0x7d0>
 800aa12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa14:	e00d      	b.n	800aa32 <f_mkfs+0x7d2>
 800aa16:	bf00      	nop
 800aa18:	08017404 	.word	0x08017404
 800aa1c:	08017410 	.word	0x08017410
 800aa20:	08017424 	.word	0x08017424
 800aa24:	41615252 	.word	0x41615252
 800aa28:	61417272 	.word	0x61417272
 800aa2c:	00fffff8 	.word	0x00fffff8
 800aa30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa32:	65fb      	str	r3, [r7, #92]	@ 0x5c
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800aa34:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800aa36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	bf28      	it	cs
 800aa3c:	4613      	movcs	r3, r2
 800aa3e:	667b      	str	r3, [r7, #100]	@ 0x64
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800aa40:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800aa44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa46:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800aa48:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aa4a:	f7fd f849 	bl	8007ae0 <disk_write>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d001      	beq.n	800aa58 <f_mkfs+0x7f8>
 800aa54:	2301      	movs	r3, #1
 800aa56:	e04f      	b.n	800aaf8 <f_mkfs+0x898>
			sect += n; nsect -= n;
 800aa58:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800aa5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa5c:	4413      	add	r3, r2
 800aa5e:	673b      	str	r3, [r7, #112]	@ 0x70
 800aa60:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800aa62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa64:	1ad3      	subs	r3, r2, r3
 800aa66:	65fb      	str	r3, [r7, #92]	@ 0x5c
		} while (nsect);
 800aa68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d1e2      	bne.n	800aa34 <f_mkfs+0x7d4>
	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;		/* exFAT */
	} else if (fsty == FS_FAT32) {
 800aa6e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800aa72:	2b03      	cmp	r3, #3
 800aa74:	d103      	bne.n	800aa7e <f_mkfs+0x81e>
		sys = 0x0C;		/* FAT32X */
 800aa76:	230c      	movs	r3, #12
 800aa78:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800aa7c:	e012      	b.n	800aaa4 <f_mkfs+0x844>
	} else if (sz_vol >= 0x10000) {
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa84:	d303      	bcc.n	800aa8e <f_mkfs+0x82e>
		sys = 0x06;		/* FAT12/16 (large) */
 800aa86:	2306      	movs	r3, #6
 800aa88:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800aa8c:	e00a      	b.n	800aaa4 <f_mkfs+0x844>
	} else if (fsty == FS_FAT16) {
 800aa8e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800aa92:	2b02      	cmp	r3, #2
 800aa94:	d103      	bne.n	800aa9e <f_mkfs+0x83e>
		sys = 0x04;		/* FAT16 */
 800aa96:	2304      	movs	r3, #4
 800aa98:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800aa9c:	e002      	b.n	800aaa4 <f_mkfs+0x844>
	} else {
		sys = 0x01;		/* FAT12 */
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 800aaa4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800aaa8:	f003 0308 	and.w	r3, r3, #8
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d116      	bne.n	800aade <f_mkfs+0x87e>
			lba[0] = sz_vol; lba[1] = 0;
 800aab0:	69bb      	ldr	r3, [r7, #24]
 800aab2:	613b      	str	r3, [r7, #16]
 800aab4:	2300      	movs	r3, #0
 800aab6:	617b      	str	r3, [r7, #20]
			res = create_partition(pdrv, lba, sys, buf);
 800aab8:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 800aabc:	f107 0110 	add.w	r1, r7, #16
 800aac0:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800aac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac6:	f7ff faa7 	bl	800a018 <create_partition>
 800aaca:	4603      	mov	r3, r0
 800aacc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			if (res != FR_OK) LEAVE_MKFS(res);
 800aad0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d002      	beq.n	800aade <f_mkfs+0x87e>
 800aad8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aadc:	e00c      	b.n	800aaf8 <f_mkfs+0x898>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800aade:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aae2:	2200      	movs	r2, #0
 800aae4:	2100      	movs	r1, #0
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7fd f82e 	bl	8007b48 <disk_ioctl>
 800aaec:	4603      	mov	r3, r0
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d001      	beq.n	800aaf6 <f_mkfs+0x896>
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	e000      	b.n	800aaf8 <f_mkfs+0x898>

	LEAVE_MKFS(FR_OK);
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3778      	adds	r7, #120	@ 0x78
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800ab00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800ab38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800ab04:	f7fc ff58 	bl	80079b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ab08:	480c      	ldr	r0, [pc, #48]	@ (800ab3c <LoopForever+0x6>)
  ldr r1, =_edata
 800ab0a:	490d      	ldr	r1, [pc, #52]	@ (800ab40 <LoopForever+0xa>)
  ldr r2, =_sidata
 800ab0c:	4a0d      	ldr	r2, [pc, #52]	@ (800ab44 <LoopForever+0xe>)
  movs r3, #0
 800ab0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ab10:	e002      	b.n	800ab18 <LoopCopyDataInit>

0800ab12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ab12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ab14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ab16:	3304      	adds	r3, #4

0800ab18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ab18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ab1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ab1c:	d3f9      	bcc.n	800ab12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ab1e:	4a0a      	ldr	r2, [pc, #40]	@ (800ab48 <LoopForever+0x12>)
  ldr r4, =_ebss
 800ab20:	4c0a      	ldr	r4, [pc, #40]	@ (800ab4c <LoopForever+0x16>)
  movs r3, #0
 800ab22:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ab24:	e001      	b.n	800ab2a <LoopFillZerobss>

0800ab26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ab26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ab28:	3204      	adds	r2, #4

0800ab2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ab2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ab2c:	d3fb      	bcc.n	800ab26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800ab2e:	f00b f94f 	bl	8015dd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800ab32:	f7f9 fa6b 	bl	800400c <main>

0800ab36 <LoopForever>:

LoopForever:
    b LoopForever
 800ab36:	e7fe      	b.n	800ab36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800ab38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800ab3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ab40:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800ab44:	0801769c 	.word	0x0801769c
  ldr r2, =_sbss
 800ab48:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800ab4c:	20005e54 	.word	0x20005e54

0800ab50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800ab50:	e7fe      	b.n	800ab50 <ADC1_2_IRQHandler>

0800ab52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b082      	sub	sp, #8
 800ab56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ab5c:	2003      	movs	r0, #3
 800ab5e:	f001 fd11 	bl	800c584 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ab62:	200f      	movs	r0, #15
 800ab64:	f000 f80e 	bl	800ab84 <HAL_InitTick>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d002      	beq.n	800ab74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	71fb      	strb	r3, [r7, #7]
 800ab72:	e001      	b.n	800ab78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800ab74:	f7fc fa56 	bl	8007024 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800ab78:	79fb      	ldrb	r3, [r7, #7]
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
	...

0800ab84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800ab90:	4b17      	ldr	r3, [pc, #92]	@ (800abf0 <HAL_InitTick+0x6c>)
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d023      	beq.n	800abe0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800ab98:	4b16      	ldr	r3, [pc, #88]	@ (800abf4 <HAL_InitTick+0x70>)
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	4b14      	ldr	r3, [pc, #80]	@ (800abf0 <HAL_InitTick+0x6c>)
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	4619      	mov	r1, r3
 800aba2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800aba6:	fbb3 f3f1 	udiv	r3, r3, r1
 800abaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800abae:	4618      	mov	r0, r3
 800abb0:	f001 fd21 	bl	800c5f6 <HAL_SYSTICK_Config>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d10f      	bne.n	800abda <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2b0f      	cmp	r3, #15
 800abbe:	d809      	bhi.n	800abd4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800abc0:	2200      	movs	r2, #0
 800abc2:	6879      	ldr	r1, [r7, #4]
 800abc4:	f04f 30ff 	mov.w	r0, #4294967295
 800abc8:	f001 fce7 	bl	800c59a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800abcc:	4a0a      	ldr	r2, [pc, #40]	@ (800abf8 <HAL_InitTick+0x74>)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6013      	str	r3, [r2, #0]
 800abd2:	e007      	b.n	800abe4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800abd4:	2301      	movs	r3, #1
 800abd6:	73fb      	strb	r3, [r7, #15]
 800abd8:	e004      	b.n	800abe4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800abda:	2301      	movs	r3, #1
 800abdc:	73fb      	strb	r3, [r7, #15]
 800abde:	e001      	b.n	800abe4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800abe0:	2301      	movs	r3, #1
 800abe2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800abe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	20000178 	.word	0x20000178
 800abf4:	20000168 	.word	0x20000168
 800abf8:	20000174 	.word	0x20000174

0800abfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800abfc:	b480      	push	{r7}
 800abfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800ac00:	4b06      	ldr	r3, [pc, #24]	@ (800ac1c <HAL_IncTick+0x20>)
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	461a      	mov	r2, r3
 800ac06:	4b06      	ldr	r3, [pc, #24]	@ (800ac20 <HAL_IncTick+0x24>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	4a04      	ldr	r2, [pc, #16]	@ (800ac20 <HAL_IncTick+0x24>)
 800ac0e:	6013      	str	r3, [r2, #0]
}
 800ac10:	bf00      	nop
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	20000178 	.word	0x20000178
 800ac20:	20005d08 	.word	0x20005d08

0800ac24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ac24:	b480      	push	{r7}
 800ac26:	af00      	add	r7, sp, #0
  return uwTick;
 800ac28:	4b03      	ldr	r3, [pc, #12]	@ (800ac38 <HAL_GetTick+0x14>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr
 800ac36:	bf00      	nop
 800ac38:	20005d08 	.word	0x20005d08

0800ac3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b084      	sub	sp, #16
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ac44:	f7ff ffee 	bl	800ac24 <HAL_GetTick>
 800ac48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac54:	d005      	beq.n	800ac62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800ac56:	4b0a      	ldr	r3, [pc, #40]	@ (800ac80 <HAL_Delay+0x44>)
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	4413      	add	r3, r2
 800ac60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800ac62:	bf00      	nop
 800ac64:	f7ff ffde 	bl	800ac24 <HAL_GetTick>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	1ad3      	subs	r3, r2, r3
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d8f7      	bhi.n	800ac64 <HAL_Delay+0x28>
  {
  }
}
 800ac74:	bf00      	nop
 800ac76:	bf00      	nop
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	20000178 	.word	0x20000178

0800ac84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	431a      	orrs	r2, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	609a      	str	r2, [r3, #8]
}
 800ac9e:	bf00      	nop
 800aca0:	370c      	adds	r7, #12
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr

0800acaa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800acaa:	b480      	push	{r7}
 800acac:	b083      	sub	sp, #12
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
 800acb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	431a      	orrs	r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	609a      	str	r2, [r3, #8]
}
 800acc4:	bf00      	nop
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	370c      	adds	r7, #12
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800acec:	b480      	push	{r7}
 800acee:	b087      	sub	sp, #28
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
 800acf8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	3360      	adds	r3, #96	@ 0x60
 800acfe:	461a      	mov	r2, r3
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	4413      	add	r3, r2
 800ad06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	4b08      	ldr	r3, [pc, #32]	@ (800ad30 <LL_ADC_SetOffset+0x44>)
 800ad0e:	4013      	ands	r3, r2
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800ad16:	683a      	ldr	r2, [r7, #0]
 800ad18:	430a      	orrs	r2, r1
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800ad24:	bf00      	nop
 800ad26:	371c      	adds	r7, #28
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr
 800ad30:	03fff000 	.word	0x03fff000

0800ad34 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b085      	sub	sp, #20
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	3360      	adds	r3, #96	@ 0x60
 800ad42:	461a      	mov	r2, r3
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	4413      	add	r3, r2
 800ad4a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3714      	adds	r7, #20
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b087      	sub	sp, #28
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	3360      	adds	r3, #96	@ 0x60
 800ad70:	461a      	mov	r2, r3
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	4413      	add	r3, r2
 800ad78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	431a      	orrs	r2, r3
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800ad8a:	bf00      	nop
 800ad8c:	371c      	adds	r7, #28
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr

0800ad96 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800ad96:	b480      	push	{r7}
 800ad98:	b083      	sub	sp, #12
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	68db      	ldr	r3, [r3, #12]
 800ada2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d101      	bne.n	800adae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800adaa:	2301      	movs	r3, #1
 800adac:	e000      	b.n	800adb0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800adae:	2300      	movs	r3, #0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	370c      	adds	r7, #12
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b087      	sub	sp, #28
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	3330      	adds	r3, #48	@ 0x30
 800adcc:	461a      	mov	r2, r3
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	0a1b      	lsrs	r3, r3, #8
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	f003 030c 	and.w	r3, r3, #12
 800add8:	4413      	add	r3, r2
 800adda:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	f003 031f 	and.w	r3, r3, #31
 800ade6:	211f      	movs	r1, #31
 800ade8:	fa01 f303 	lsl.w	r3, r1, r3
 800adec:	43db      	mvns	r3, r3
 800adee:	401a      	ands	r2, r3
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	0e9b      	lsrs	r3, r3, #26
 800adf4:	f003 011f 	and.w	r1, r3, #31
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	f003 031f 	and.w	r3, r3, #31
 800adfe:	fa01 f303 	lsl.w	r3, r1, r3
 800ae02:	431a      	orrs	r2, r3
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800ae08:	bf00      	nop
 800ae0a:	371c      	adds	r7, #28
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b087      	sub	sp, #28
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	3314      	adds	r3, #20
 800ae24:	461a      	mov	r2, r3
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	0e5b      	lsrs	r3, r3, #25
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	f003 0304 	and.w	r3, r3, #4
 800ae30:	4413      	add	r3, r2
 800ae32:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	681a      	ldr	r2, [r3, #0]
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	0d1b      	lsrs	r3, r3, #20
 800ae3c:	f003 031f 	and.w	r3, r3, #31
 800ae40:	2107      	movs	r1, #7
 800ae42:	fa01 f303 	lsl.w	r3, r1, r3
 800ae46:	43db      	mvns	r3, r3
 800ae48:	401a      	ands	r2, r3
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	0d1b      	lsrs	r3, r3, #20
 800ae4e:	f003 031f 	and.w	r3, r3, #31
 800ae52:	6879      	ldr	r1, [r7, #4]
 800ae54:	fa01 f303 	lsl.w	r3, r1, r3
 800ae58:	431a      	orrs	r2, r3
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800ae5e:	bf00      	nop
 800ae60:	371c      	adds	r7, #28
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr
	...

0800ae6c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae84:	43db      	mvns	r3, r3
 800ae86:	401a      	ands	r2, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f003 0318 	and.w	r3, r3, #24
 800ae8e:	4908      	ldr	r1, [pc, #32]	@ (800aeb0 <LL_ADC_SetChannelSingleDiff+0x44>)
 800ae90:	40d9      	lsrs	r1, r3
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	400b      	ands	r3, r1
 800ae96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae9a:	431a      	orrs	r2, r3
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800aea2:	bf00      	nop
 800aea4:	3714      	adds	r7, #20
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	0007ffff 	.word	0x0007ffff

0800aeb4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	f003 031f 	and.w	r3, r3, #31
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b083      	sub	sp, #12
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	689b      	ldr	r3, [r3, #8]
 800aedc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800aee0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	6093      	str	r3, [r2, #8]
}
 800aee8:	bf00      	nop
 800aeea:	370c      	adds	r7, #12
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr

0800aef4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af08:	d101      	bne.n	800af0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800af0a:	2301      	movs	r3, #1
 800af0c:	e000      	b.n	800af10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800af0e:	2300      	movs	r3, #0
}
 800af10:	4618      	mov	r0, r3
 800af12:	370c      	adds	r7, #12
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr

0800af1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800af2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800af30:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800af38:	bf00      	nop
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af58:	d101      	bne.n	800af5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800af5a:	2301      	movs	r3, #1
 800af5c:	e000      	b.n	800af60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800af5e:	2300      	movs	r3, #0
}
 800af60:	4618      	mov	r0, r3
 800af62:	370c      	adds	r7, #12
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800af7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800af80:	f043 0201 	orr.w	r2, r3, #1
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800af88:	bf00      	nop
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	689b      	ldr	r3, [r3, #8]
 800afa0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800afa4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800afa8:	f043 0202 	orr.w	r2, r3, #2
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800afb0:	bf00      	nop
 800afb2:	370c      	adds	r7, #12
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr

0800afbc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	689b      	ldr	r3, [r3, #8]
 800afc8:	f003 0301 	and.w	r3, r3, #1
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d101      	bne.n	800afd4 <LL_ADC_IsEnabled+0x18>
 800afd0:	2301      	movs	r3, #1
 800afd2:	e000      	b.n	800afd6 <LL_ADC_IsEnabled+0x1a>
 800afd4:	2300      	movs	r3, #0
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	370c      	adds	r7, #12
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr

0800afe2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800afe2:	b480      	push	{r7}
 800afe4:	b083      	sub	sp, #12
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	f003 0302 	and.w	r3, r3, #2
 800aff2:	2b02      	cmp	r3, #2
 800aff4:	d101      	bne.n	800affa <LL_ADC_IsDisableOngoing+0x18>
 800aff6:	2301      	movs	r3, #1
 800aff8:	e000      	b.n	800affc <LL_ADC_IsDisableOngoing+0x1a>
 800affa:	2300      	movs	r3, #0
}
 800affc:	4618      	mov	r0, r3
 800affe:	370c      	adds	r7, #12
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr

0800b008 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b018:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b01c:	f043 0204 	orr.w	r2, r3, #4
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800b024:	bf00      	nop
 800b026:	370c      	adds	r7, #12
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b040:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b044:	f043 0210 	orr.w	r2, r3, #16
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800b04c:	bf00      	nop
 800b04e:	370c      	adds	r7, #12
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	f003 0304 	and.w	r3, r3, #4
 800b068:	2b04      	cmp	r3, #4
 800b06a:	d101      	bne.n	800b070 <LL_ADC_REG_IsConversionOngoing+0x18>
 800b06c:	2301      	movs	r3, #1
 800b06e:	e000      	b.n	800b072 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b070:	2300      	movs	r3, #0
}
 800b072:	4618      	mov	r0, r3
 800b074:	370c      	adds	r7, #12
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr

0800b07e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800b07e:	b480      	push	{r7}
 800b080:	b083      	sub	sp, #12
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b08e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b092:	f043 0220 	orr.w	r2, r3, #32
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800b09a:	bf00      	nop
 800b09c:	370c      	adds	r7, #12
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr

0800b0a6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b0a6:	b480      	push	{r7}
 800b0a8:	b083      	sub	sp, #12
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	689b      	ldr	r3, [r3, #8]
 800b0b2:	f003 0308 	and.w	r3, r3, #8
 800b0b6:	2b08      	cmp	r3, #8
 800b0b8:	d101      	bne.n	800b0be <LL_ADC_INJ_IsConversionOngoing+0x18>
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	e000      	b.n	800b0c0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800b0be:	2300      	movs	r3, #0
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	370c      	adds	r7, #12
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b0cc:	b590      	push	{r4, r7, lr}
 800b0ce:	b089      	sub	sp, #36	@ 0x24
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d101      	bne.n	800b0e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e130      	b.n	800b348 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	691b      	ldr	r3, [r3, #16]
 800b0ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d109      	bne.n	800b108 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f7fb ffb9 	bl	800706c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7ff fef1 	bl	800aef4 <LL_ADC_IsDeepPowerDownEnabled>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d004      	beq.n	800b122 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4618      	mov	r0, r3
 800b11e:	f7ff fed7 	bl	800aed0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4618      	mov	r0, r3
 800b128:	f7ff ff0c 	bl	800af44 <LL_ADC_IsInternalRegulatorEnabled>
 800b12c:	4603      	mov	r3, r0
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d115      	bne.n	800b15e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4618      	mov	r0, r3
 800b138:	f7ff fef0 	bl	800af1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b13c:	4b84      	ldr	r3, [pc, #528]	@ (800b350 <HAL_ADC_Init+0x284>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	099b      	lsrs	r3, r3, #6
 800b142:	4a84      	ldr	r2, [pc, #528]	@ (800b354 <HAL_ADC_Init+0x288>)
 800b144:	fba2 2303 	umull	r2, r3, r2, r3
 800b148:	099b      	lsrs	r3, r3, #6
 800b14a:	3301      	adds	r3, #1
 800b14c:	005b      	lsls	r3, r3, #1
 800b14e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b150:	e002      	b.n	800b158 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	3b01      	subs	r3, #1
 800b156:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d1f9      	bne.n	800b152 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4618      	mov	r0, r3
 800b164:	f7ff feee 	bl	800af44 <LL_ADC_IsInternalRegulatorEnabled>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d10d      	bne.n	800b18a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b172:	f043 0210 	orr.w	r2, r3, #16
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b17e:	f043 0201 	orr.w	r2, r3, #1
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800b186:	2301      	movs	r3, #1
 800b188:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4618      	mov	r0, r3
 800b190:	f7ff ff62 	bl	800b058 <LL_ADC_REG_IsConversionOngoing>
 800b194:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b19a:	f003 0310 	and.w	r3, r3, #16
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	f040 80c9 	bne.w	800b336 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	f040 80c5 	bne.w	800b336 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1b0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800b1b4:	f043 0202 	orr.w	r2, r3, #2
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7ff fefb 	bl	800afbc <LL_ADC_IsEnabled>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d115      	bne.n	800b1f8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b1cc:	4862      	ldr	r0, [pc, #392]	@ (800b358 <HAL_ADC_Init+0x28c>)
 800b1ce:	f7ff fef5 	bl	800afbc <LL_ADC_IsEnabled>
 800b1d2:	4604      	mov	r4, r0
 800b1d4:	4861      	ldr	r0, [pc, #388]	@ (800b35c <HAL_ADC_Init+0x290>)
 800b1d6:	f7ff fef1 	bl	800afbc <LL_ADC_IsEnabled>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	431c      	orrs	r4, r3
 800b1de:	4860      	ldr	r0, [pc, #384]	@ (800b360 <HAL_ADC_Init+0x294>)
 800b1e0:	f7ff feec 	bl	800afbc <LL_ADC_IsEnabled>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	4323      	orrs	r3, r4
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d105      	bne.n	800b1f8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	485c      	ldr	r0, [pc, #368]	@ (800b364 <HAL_ADC_Init+0x298>)
 800b1f4:	f7ff fd46 	bl	800ac84 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	7e5b      	ldrb	r3, [r3, #25]
 800b1fc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b202:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800b208:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800b20e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b216:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b218:	4313      	orrs	r3, r2
 800b21a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b222:	2b01      	cmp	r3, #1
 800b224:	d106      	bne.n	800b234 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b22a:	3b01      	subs	r3, #1
 800b22c:	045b      	lsls	r3, r3, #17
 800b22e:	69ba      	ldr	r2, [r7, #24]
 800b230:	4313      	orrs	r3, r2
 800b232:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d009      	beq.n	800b250 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b240:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b248:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b24a:	69ba      	ldr	r2, [r7, #24]
 800b24c:	4313      	orrs	r3, r2
 800b24e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	68da      	ldr	r2, [r3, #12]
 800b256:	4b44      	ldr	r3, [pc, #272]	@ (800b368 <HAL_ADC_Init+0x29c>)
 800b258:	4013      	ands	r3, r2
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	6812      	ldr	r2, [r2, #0]
 800b25e:	69b9      	ldr	r1, [r7, #24]
 800b260:	430b      	orrs	r3, r1
 800b262:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4618      	mov	r0, r3
 800b26a:	f7ff ff1c 	bl	800b0a6 <LL_ADC_INJ_IsConversionOngoing>
 800b26e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d13d      	bne.n	800b2f2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d13a      	bne.n	800b2f2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b280:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b288:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b28a:	4313      	orrs	r3, r2
 800b28c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	68db      	ldr	r3, [r3, #12]
 800b294:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b298:	f023 0302 	bic.w	r3, r3, #2
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	6812      	ldr	r2, [r2, #0]
 800b2a0:	69b9      	ldr	r1, [r7, #24]
 800b2a2:	430b      	orrs	r3, r1
 800b2a4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d118      	bne.n	800b2e2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b2ba:	f023 0304 	bic.w	r3, r3, #4
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b2c6:	4311      	orrs	r1, r2
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800b2cc:	4311      	orrs	r1, r2
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b2d2:	430a      	orrs	r2, r1
 800b2d4:	431a      	orrs	r2, r3
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f042 0201 	orr.w	r2, r2, #1
 800b2de:	611a      	str	r2, [r3, #16]
 800b2e0:	e007      	b.n	800b2f2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	691a      	ldr	r2, [r3, #16]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f022 0201 	bic.w	r2, r2, #1
 800b2f0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	691b      	ldr	r3, [r3, #16]
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d10c      	bne.n	800b314 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b300:	f023 010f 	bic.w	r1, r3, #15
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	69db      	ldr	r3, [r3, #28]
 800b308:	1e5a      	subs	r2, r3, #1
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	430a      	orrs	r2, r1
 800b310:	631a      	str	r2, [r3, #48]	@ 0x30
 800b312:	e007      	b.n	800b324 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f022 020f 	bic.w	r2, r2, #15
 800b322:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b328:	f023 0303 	bic.w	r3, r3, #3
 800b32c:	f043 0201 	orr.w	r2, r3, #1
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	655a      	str	r2, [r3, #84]	@ 0x54
 800b334:	e007      	b.n	800b346 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b33a:	f043 0210 	orr.w	r2, r3, #16
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800b342:	2301      	movs	r3, #1
 800b344:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800b346:	7ffb      	ldrb	r3, [r7, #31]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3724      	adds	r7, #36	@ 0x24
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd90      	pop	{r4, r7, pc}
 800b350:	20000168 	.word	0x20000168
 800b354:	053e2d63 	.word	0x053e2d63
 800b358:	50040000 	.word	0x50040000
 800b35c:	50040100 	.word	0x50040100
 800b360:	50040200 	.word	0x50040200
 800b364:	50040300 	.word	0x50040300
 800b368:	fff0c007 	.word	0xfff0c007

0800b36c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b086      	sub	sp, #24
 800b370:	af00      	add	r7, sp, #0
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b378:	4853      	ldr	r0, [pc, #332]	@ (800b4c8 <HAL_ADC_Start_DMA+0x15c>)
 800b37a:	f7ff fd9b 	bl	800aeb4 <LL_ADC_GetMultimode>
 800b37e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4618      	mov	r0, r3
 800b386:	f7ff fe67 	bl	800b058 <LL_ADC_REG_IsConversionOngoing>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f040 8093 	bne.w	800b4b8 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d101      	bne.n	800b3a0 <HAL_ADC_Start_DMA+0x34>
 800b39c:	2302      	movs	r3, #2
 800b39e:	e08e      	b.n	800b4be <HAL_ADC_Start_DMA+0x152>
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a47      	ldr	r2, [pc, #284]	@ (800b4cc <HAL_ADC_Start_DMA+0x160>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d008      	beq.n	800b3c4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d005      	beq.n	800b3c4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	2b05      	cmp	r3, #5
 800b3bc:	d002      	beq.n	800b3c4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	2b09      	cmp	r3, #9
 800b3c2:	d172      	bne.n	800b4aa <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	f000 fda7 	bl	800bf18 <ADC_Enable>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800b3ce:	7dfb      	ldrb	r3, [r7, #23]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d165      	bne.n	800b4a0 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b3dc:	f023 0301 	bic.w	r3, r3, #1
 800b3e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4a38      	ldr	r2, [pc, #224]	@ (800b4d0 <HAL_ADC_Start_DMA+0x164>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d002      	beq.n	800b3f8 <HAL_ADC_Start_DMA+0x8c>
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	e000      	b.n	800b3fa <HAL_ADC_Start_DMA+0x8e>
 800b3f8:	4b36      	ldr	r3, [pc, #216]	@ (800b4d4 <HAL_ADC_Start_DMA+0x168>)
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	6812      	ldr	r2, [r2, #0]
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d002      	beq.n	800b408 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d105      	bne.n	800b414 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b40c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b418:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d006      	beq.n	800b42e <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b424:	f023 0206 	bic.w	r2, r3, #6
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	659a      	str	r2, [r3, #88]	@ 0x58
 800b42c:	e002      	b.n	800b434 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2200      	movs	r2, #0
 800b432:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b438:	4a27      	ldr	r2, [pc, #156]	@ (800b4d8 <HAL_ADC_Start_DMA+0x16c>)
 800b43a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b440:	4a26      	ldr	r2, [pc, #152]	@ (800b4dc <HAL_ADC_Start_DMA+0x170>)
 800b442:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b448:	4a25      	ldr	r2, [pc, #148]	@ (800b4e0 <HAL_ADC_Start_DMA+0x174>)
 800b44a:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	221c      	movs	r2, #28
 800b452:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2200      	movs	r2, #0
 800b458:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	685a      	ldr	r2, [r3, #4]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f042 0210 	orr.w	r2, r2, #16
 800b46a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	68da      	ldr	r2, [r3, #12]
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f042 0201 	orr.w	r2, r2, #1
 800b47a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	3340      	adds	r3, #64	@ 0x40
 800b486:	4619      	mov	r1, r3
 800b488:	68ba      	ldr	r2, [r7, #8]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f001 fb80 	bl	800cb90 <HAL_DMA_Start_IT>
 800b490:	4603      	mov	r3, r0
 800b492:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4618      	mov	r0, r3
 800b49a:	f7ff fdb5 	bl	800b008 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800b49e:	e00d      	b.n	800b4bc <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800b4a8:	e008      	b.n	800b4bc <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800b4b6:	e001      	b.n	800b4bc <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800b4b8:	2302      	movs	r3, #2
 800b4ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800b4bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3718      	adds	r7, #24
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	50040300 	.word	0x50040300
 800b4cc:	50040200 	.word	0x50040200
 800b4d0:	50040100 	.word	0x50040100
 800b4d4:	50040000 	.word	0x50040000
 800b4d8:	0800c0e3 	.word	0x0800c0e3
 800b4dc:	0800c1bb 	.word	0x0800c1bb
 800b4e0:	0800c1d7 	.word	0x0800c1d7

0800b4e4 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d101      	bne.n	800b4fa <HAL_ADC_Stop_DMA+0x16>
 800b4f6:	2302      	movs	r3, #2
 800b4f8:	e051      	b.n	800b59e <HAL_ADC_Stop_DMA+0xba>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800b502:	2103      	movs	r1, #3
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 fc4b 	bl	800bda0 <ADC_ConversionStop>
 800b50a:	4603      	mov	r3, r0
 800b50c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800b50e:	7bfb      	ldrb	r3, [r7, #15]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d13f      	bne.n	800b594 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	68da      	ldr	r2, [r3, #12]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f022 0201 	bic.w	r2, r2, #1
 800b522:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b528:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	2b02      	cmp	r3, #2
 800b530:	d10f      	bne.n	800b552 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b536:	4618      	mov	r0, r3
 800b538:	f001 fb8a 	bl	800cc50 <HAL_DMA_Abort>
 800b53c:	4603      	mov	r3, r0
 800b53e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800b540:	7bfb      	ldrb	r3, [r7, #15]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d005      	beq.n	800b552 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b54a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	685a      	ldr	r2, [r3, #4]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f022 0210 	bic.w	r2, r2, #16
 800b560:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800b562:	7bfb      	ldrb	r3, [r7, #15]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d105      	bne.n	800b574 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 fd5b 	bl	800c024 <ADC_Disable>
 800b56e:	4603      	mov	r3, r0
 800b570:	73fb      	strb	r3, [r7, #15]
 800b572:	e002      	b.n	800b57a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 fd55 	bl	800c024 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800b57a:	7bfb      	ldrb	r3, [r7, #15]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d109      	bne.n	800b594 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b584:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800b588:	f023 0301 	bic.w	r3, r3, #1
 800b58c:	f043 0201 	orr.w	r2, r3, #1
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2200      	movs	r2, #0
 800b598:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800b59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}

0800b5a6 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800b5a6:	b480      	push	{r7}
 800b5a8:	b083      	sub	sp, #12
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800b5ae:	bf00      	nop
 800b5b0:	370c      	adds	r7, #12
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr
	...

0800b5bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b0b6      	sub	sp, #216	@ 0xd8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d101      	bne.n	800b5de <HAL_ADC_ConfigChannel+0x22>
 800b5da:	2302      	movs	r3, #2
 800b5dc:	e3c9      	b.n	800bd72 <HAL_ADC_ConfigChannel+0x7b6>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7ff fd34 	bl	800b058 <LL_ADC_REG_IsConversionOngoing>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	f040 83aa 	bne.w	800bd4c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	2b05      	cmp	r3, #5
 800b606:	d824      	bhi.n	800b652 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	3b02      	subs	r3, #2
 800b60e:	2b03      	cmp	r3, #3
 800b610:	d81b      	bhi.n	800b64a <HAL_ADC_ConfigChannel+0x8e>
 800b612:	a201      	add	r2, pc, #4	@ (adr r2, 800b618 <HAL_ADC_ConfigChannel+0x5c>)
 800b614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b618:	0800b629 	.word	0x0800b629
 800b61c:	0800b631 	.word	0x0800b631
 800b620:	0800b639 	.word	0x0800b639
 800b624:	0800b641 	.word	0x0800b641
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800b628:	230c      	movs	r3, #12
 800b62a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800b62e:	e010      	b.n	800b652 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800b630:	2312      	movs	r3, #18
 800b632:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800b636:	e00c      	b.n	800b652 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800b638:	2318      	movs	r3, #24
 800b63a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800b63e:	e008      	b.n	800b652 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800b640:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b644:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800b648:	e003      	b.n	800b652 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800b64a:	2306      	movs	r3, #6
 800b64c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800b650:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6818      	ldr	r0, [r3, #0]
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	461a      	mov	r2, r3
 800b65c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800b660:	f7ff fbac 	bl	800adbc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4618      	mov	r0, r3
 800b66a:	f7ff fcf5 	bl	800b058 <LL_ADC_REG_IsConversionOngoing>
 800b66e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4618      	mov	r0, r3
 800b678:	f7ff fd15 	bl	800b0a6 <LL_ADC_INJ_IsConversionOngoing>
 800b67c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b680:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b684:	2b00      	cmp	r3, #0
 800b686:	f040 81a4 	bne.w	800b9d2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b68a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b68e:	2b00      	cmp	r3, #0
 800b690:	f040 819f 	bne.w	800b9d2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6818      	ldr	r0, [r3, #0]
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	6819      	ldr	r1, [r3, #0]
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	f7ff fbb7 	bl	800ae14 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	695a      	ldr	r2, [r3, #20]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	68db      	ldr	r3, [r3, #12]
 800b6b0:	08db      	lsrs	r3, r3, #3
 800b6b2:	f003 0303 	and.w	r3, r3, #3
 800b6b6:	005b      	lsls	r3, r3, #1
 800b6b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b6bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	691b      	ldr	r3, [r3, #16]
 800b6c4:	2b04      	cmp	r3, #4
 800b6c6:	d00a      	beq.n	800b6de <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6818      	ldr	r0, [r3, #0]
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	6919      	ldr	r1, [r3, #16]
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b6d8:	f7ff fb08 	bl	800acec <LL_ADC_SetOffset>
 800b6dc:	e179      	b.n	800b9d2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	2100      	movs	r1, #0
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f7ff fb25 	bl	800ad34 <LL_ADC_GetOffsetChannel>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d10a      	bne.n	800b70a <HAL_ADC_ConfigChannel+0x14e>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	2100      	movs	r1, #0
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7ff fb1a 	bl	800ad34 <LL_ADC_GetOffsetChannel>
 800b700:	4603      	mov	r3, r0
 800b702:	0e9b      	lsrs	r3, r3, #26
 800b704:	f003 021f 	and.w	r2, r3, #31
 800b708:	e01e      	b.n	800b748 <HAL_ADC_ConfigChannel+0x18c>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	2100      	movs	r1, #0
 800b710:	4618      	mov	r0, r3
 800b712:	f7ff fb0f 	bl	800ad34 <LL_ADC_GetOffsetChannel>
 800b716:	4603      	mov	r3, r0
 800b718:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b71c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b720:	fa93 f3a3 	rbit	r3, r3
 800b724:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800b728:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b72c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800b730:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b734:	2b00      	cmp	r3, #0
 800b736:	d101      	bne.n	800b73c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800b738:	2320      	movs	r3, #32
 800b73a:	e004      	b.n	800b746 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800b73c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b740:	fab3 f383 	clz	r3, r3
 800b744:	b2db      	uxtb	r3, r3
 800b746:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b750:	2b00      	cmp	r3, #0
 800b752:	d105      	bne.n	800b760 <HAL_ADC_ConfigChannel+0x1a4>
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	0e9b      	lsrs	r3, r3, #26
 800b75a:	f003 031f 	and.w	r3, r3, #31
 800b75e:	e018      	b.n	800b792 <HAL_ADC_ConfigChannel+0x1d6>
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b768:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b76c:	fa93 f3a3 	rbit	r3, r3
 800b770:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800b774:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b778:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800b77c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b780:	2b00      	cmp	r3, #0
 800b782:	d101      	bne.n	800b788 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800b784:	2320      	movs	r3, #32
 800b786:	e004      	b.n	800b792 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800b788:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b78c:	fab3 f383 	clz	r3, r3
 800b790:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b792:	429a      	cmp	r2, r3
 800b794:	d106      	bne.n	800b7a4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2200      	movs	r2, #0
 800b79c:	2100      	movs	r1, #0
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7ff fade 	bl	800ad60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	2101      	movs	r1, #1
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7ff fac2 	bl	800ad34 <LL_ADC_GetOffsetChannel>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d10a      	bne.n	800b7d0 <HAL_ADC_ConfigChannel+0x214>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	2101      	movs	r1, #1
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7ff fab7 	bl	800ad34 <LL_ADC_GetOffsetChannel>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	0e9b      	lsrs	r3, r3, #26
 800b7ca:	f003 021f 	and.w	r2, r3, #31
 800b7ce:	e01e      	b.n	800b80e <HAL_ADC_ConfigChannel+0x252>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2101      	movs	r1, #1
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7ff faac 	bl	800ad34 <LL_ADC_GetOffsetChannel>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b7e6:	fa93 f3a3 	rbit	r3, r3
 800b7ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800b7ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b7f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800b7f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d101      	bne.n	800b802 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800b7fe:	2320      	movs	r3, #32
 800b800:	e004      	b.n	800b80c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800b802:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b806:	fab3 f383 	clz	r3, r3
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b816:	2b00      	cmp	r3, #0
 800b818:	d105      	bne.n	800b826 <HAL_ADC_ConfigChannel+0x26a>
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	0e9b      	lsrs	r3, r3, #26
 800b820:	f003 031f 	and.w	r3, r3, #31
 800b824:	e018      	b.n	800b858 <HAL_ADC_ConfigChannel+0x29c>
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b82e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b832:	fa93 f3a3 	rbit	r3, r3
 800b836:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800b83a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b83e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800b842:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b846:	2b00      	cmp	r3, #0
 800b848:	d101      	bne.n	800b84e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800b84a:	2320      	movs	r3, #32
 800b84c:	e004      	b.n	800b858 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800b84e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b852:	fab3 f383 	clz	r3, r3
 800b856:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b858:	429a      	cmp	r2, r3
 800b85a:	d106      	bne.n	800b86a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	2200      	movs	r2, #0
 800b862:	2101      	movs	r1, #1
 800b864:	4618      	mov	r0, r3
 800b866:	f7ff fa7b 	bl	800ad60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2102      	movs	r1, #2
 800b870:	4618      	mov	r0, r3
 800b872:	f7ff fa5f 	bl	800ad34 <LL_ADC_GetOffsetChannel>
 800b876:	4603      	mov	r3, r0
 800b878:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d10a      	bne.n	800b896 <HAL_ADC_ConfigChannel+0x2da>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	2102      	movs	r1, #2
 800b886:	4618      	mov	r0, r3
 800b888:	f7ff fa54 	bl	800ad34 <LL_ADC_GetOffsetChannel>
 800b88c:	4603      	mov	r3, r0
 800b88e:	0e9b      	lsrs	r3, r3, #26
 800b890:	f003 021f 	and.w	r2, r3, #31
 800b894:	e01e      	b.n	800b8d4 <HAL_ADC_ConfigChannel+0x318>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	2102      	movs	r1, #2
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7ff fa49 	bl	800ad34 <LL_ADC_GetOffsetChannel>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b8ac:	fa93 f3a3 	rbit	r3, r3
 800b8b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800b8b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b8b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800b8bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d101      	bne.n	800b8c8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800b8c4:	2320      	movs	r3, #32
 800b8c6:	e004      	b.n	800b8d2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800b8c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b8cc:	fab3 f383 	clz	r3, r3
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d105      	bne.n	800b8ec <HAL_ADC_ConfigChannel+0x330>
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	0e9b      	lsrs	r3, r3, #26
 800b8e6:	f003 031f 	and.w	r3, r3, #31
 800b8ea:	e014      	b.n	800b916 <HAL_ADC_ConfigChannel+0x35a>
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b8f4:	fa93 f3a3 	rbit	r3, r3
 800b8f8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800b8fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b8fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800b900:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b904:	2b00      	cmp	r3, #0
 800b906:	d101      	bne.n	800b90c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800b908:	2320      	movs	r3, #32
 800b90a:	e004      	b.n	800b916 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800b90c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b910:	fab3 f383 	clz	r3, r3
 800b914:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b916:	429a      	cmp	r2, r3
 800b918:	d106      	bne.n	800b928 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2200      	movs	r2, #0
 800b920:	2102      	movs	r1, #2
 800b922:	4618      	mov	r0, r3
 800b924:	f7ff fa1c 	bl	800ad60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2103      	movs	r1, #3
 800b92e:	4618      	mov	r0, r3
 800b930:	f7ff fa00 	bl	800ad34 <LL_ADC_GetOffsetChannel>
 800b934:	4603      	mov	r3, r0
 800b936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d10a      	bne.n	800b954 <HAL_ADC_ConfigChannel+0x398>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2103      	movs	r1, #3
 800b944:	4618      	mov	r0, r3
 800b946:	f7ff f9f5 	bl	800ad34 <LL_ADC_GetOffsetChannel>
 800b94a:	4603      	mov	r3, r0
 800b94c:	0e9b      	lsrs	r3, r3, #26
 800b94e:	f003 021f 	and.w	r2, r3, #31
 800b952:	e017      	b.n	800b984 <HAL_ADC_ConfigChannel+0x3c8>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2103      	movs	r1, #3
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7ff f9ea 	bl	800ad34 <LL_ADC_GetOffsetChannel>
 800b960:	4603      	mov	r3, r0
 800b962:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b964:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b966:	fa93 f3a3 	rbit	r3, r3
 800b96a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800b96c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b96e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800b970:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b972:	2b00      	cmp	r3, #0
 800b974:	d101      	bne.n	800b97a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800b976:	2320      	movs	r3, #32
 800b978:	e003      	b.n	800b982 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800b97a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b97c:	fab3 f383 	clz	r3, r3
 800b980:	b2db      	uxtb	r3, r3
 800b982:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d105      	bne.n	800b99c <HAL_ADC_ConfigChannel+0x3e0>
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	0e9b      	lsrs	r3, r3, #26
 800b996:	f003 031f 	and.w	r3, r3, #31
 800b99a:	e011      	b.n	800b9c0 <HAL_ADC_ConfigChannel+0x404>
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b9a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b9a4:	fa93 f3a3 	rbit	r3, r3
 800b9a8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800b9aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b9ac:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800b9ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d101      	bne.n	800b9b8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800b9b4:	2320      	movs	r3, #32
 800b9b6:	e003      	b.n	800b9c0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800b9b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b9ba:	fab3 f383 	clz	r3, r3
 800b9be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d106      	bne.n	800b9d2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	2103      	movs	r1, #3
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7ff f9c7 	bl	800ad60 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7ff faf0 	bl	800afbc <LL_ADC_IsEnabled>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	f040 8140 	bne.w	800bc64 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6818      	ldr	r0, [r3, #0]
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	6819      	ldr	r1, [r3, #0]
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	f7ff fa3b 	bl	800ae6c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	68db      	ldr	r3, [r3, #12]
 800b9fa:	4a8f      	ldr	r2, [pc, #572]	@ (800bc38 <HAL_ADC_ConfigChannel+0x67c>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	f040 8131 	bne.w	800bc64 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d10b      	bne.n	800ba2a <HAL_ADC_ConfigChannel+0x46e>
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	0e9b      	lsrs	r3, r3, #26
 800ba18:	3301      	adds	r3, #1
 800ba1a:	f003 031f 	and.w	r3, r3, #31
 800ba1e:	2b09      	cmp	r3, #9
 800ba20:	bf94      	ite	ls
 800ba22:	2301      	movls	r3, #1
 800ba24:	2300      	movhi	r3, #0
 800ba26:	b2db      	uxtb	r3, r3
 800ba28:	e019      	b.n	800ba5e <HAL_ADC_ConfigChannel+0x4a2>
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba32:	fa93 f3a3 	rbit	r3, r3
 800ba36:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800ba38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800ba3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d101      	bne.n	800ba46 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800ba42:	2320      	movs	r3, #32
 800ba44:	e003      	b.n	800ba4e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800ba46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba48:	fab3 f383 	clz	r3, r3
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	3301      	adds	r3, #1
 800ba50:	f003 031f 	and.w	r3, r3, #31
 800ba54:	2b09      	cmp	r3, #9
 800ba56:	bf94      	ite	ls
 800ba58:	2301      	movls	r3, #1
 800ba5a:	2300      	movhi	r3, #0
 800ba5c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d079      	beq.n	800bb56 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d107      	bne.n	800ba7e <HAL_ADC_ConfigChannel+0x4c2>
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	0e9b      	lsrs	r3, r3, #26
 800ba74:	3301      	adds	r3, #1
 800ba76:	069b      	lsls	r3, r3, #26
 800ba78:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ba7c:	e015      	b.n	800baaa <HAL_ADC_ConfigChannel+0x4ee>
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba86:	fa93 f3a3 	rbit	r3, r3
 800ba8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800ba8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba8e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800ba90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d101      	bne.n	800ba9a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800ba96:	2320      	movs	r3, #32
 800ba98:	e003      	b.n	800baa2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800ba9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba9c:	fab3 f383 	clz	r3, r3
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	3301      	adds	r3, #1
 800baa4:	069b      	lsls	r3, r3, #26
 800baa6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d109      	bne.n	800baca <HAL_ADC_ConfigChannel+0x50e>
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	0e9b      	lsrs	r3, r3, #26
 800babc:	3301      	adds	r3, #1
 800babe:	f003 031f 	and.w	r3, r3, #31
 800bac2:	2101      	movs	r1, #1
 800bac4:	fa01 f303 	lsl.w	r3, r1, r3
 800bac8:	e017      	b.n	800bafa <HAL_ADC_ConfigChannel+0x53e>
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bad0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bad2:	fa93 f3a3 	rbit	r3, r3
 800bad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800bad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bada:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800badc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d101      	bne.n	800bae6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800bae2:	2320      	movs	r3, #32
 800bae4:	e003      	b.n	800baee <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800bae6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bae8:	fab3 f383 	clz	r3, r3
 800baec:	b2db      	uxtb	r3, r3
 800baee:	3301      	adds	r3, #1
 800baf0:	f003 031f 	and.w	r3, r3, #31
 800baf4:	2101      	movs	r1, #1
 800baf6:	fa01 f303 	lsl.w	r3, r1, r3
 800bafa:	ea42 0103 	orr.w	r1, r2, r3
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d10a      	bne.n	800bb20 <HAL_ADC_ConfigChannel+0x564>
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	0e9b      	lsrs	r3, r3, #26
 800bb10:	3301      	adds	r3, #1
 800bb12:	f003 021f 	and.w	r2, r3, #31
 800bb16:	4613      	mov	r3, r2
 800bb18:	005b      	lsls	r3, r3, #1
 800bb1a:	4413      	add	r3, r2
 800bb1c:	051b      	lsls	r3, r3, #20
 800bb1e:	e018      	b.n	800bb52 <HAL_ADC_ConfigChannel+0x596>
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb28:	fa93 f3a3 	rbit	r3, r3
 800bb2c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800bb2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb30:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800bb32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d101      	bne.n	800bb3c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800bb38:	2320      	movs	r3, #32
 800bb3a:	e003      	b.n	800bb44 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800bb3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb3e:	fab3 f383 	clz	r3, r3
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	3301      	adds	r3, #1
 800bb46:	f003 021f 	and.w	r2, r3, #31
 800bb4a:	4613      	mov	r3, r2
 800bb4c:	005b      	lsls	r3, r3, #1
 800bb4e:	4413      	add	r3, r2
 800bb50:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bb52:	430b      	orrs	r3, r1
 800bb54:	e081      	b.n	800bc5a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d107      	bne.n	800bb72 <HAL_ADC_ConfigChannel+0x5b6>
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	0e9b      	lsrs	r3, r3, #26
 800bb68:	3301      	adds	r3, #1
 800bb6a:	069b      	lsls	r3, r3, #26
 800bb6c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bb70:	e015      	b.n	800bb9e <HAL_ADC_ConfigChannel+0x5e2>
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb7a:	fa93 f3a3 	rbit	r3, r3
 800bb7e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800bb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800bb84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d101      	bne.n	800bb8e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800bb8a:	2320      	movs	r3, #32
 800bb8c:	e003      	b.n	800bb96 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800bb8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb90:	fab3 f383 	clz	r3, r3
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	3301      	adds	r3, #1
 800bb98:	069b      	lsls	r3, r3, #26
 800bb9a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d109      	bne.n	800bbbe <HAL_ADC_ConfigChannel+0x602>
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	0e9b      	lsrs	r3, r3, #26
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	f003 031f 	and.w	r3, r3, #31
 800bbb6:	2101      	movs	r1, #1
 800bbb8:	fa01 f303 	lsl.w	r3, r1, r3
 800bbbc:	e017      	b.n	800bbee <HAL_ADC_ConfigChannel+0x632>
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bbc4:	69fb      	ldr	r3, [r7, #28]
 800bbc6:	fa93 f3a3 	rbit	r3, r3
 800bbca:	61bb      	str	r3, [r7, #24]
  return result;
 800bbcc:	69bb      	ldr	r3, [r7, #24]
 800bbce:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800bbd0:	6a3b      	ldr	r3, [r7, #32]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d101      	bne.n	800bbda <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800bbd6:	2320      	movs	r3, #32
 800bbd8:	e003      	b.n	800bbe2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800bbda:	6a3b      	ldr	r3, [r7, #32]
 800bbdc:	fab3 f383 	clz	r3, r3
 800bbe0:	b2db      	uxtb	r3, r3
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	f003 031f 	and.w	r3, r3, #31
 800bbe8:	2101      	movs	r1, #1
 800bbea:	fa01 f303 	lsl.w	r3, r1, r3
 800bbee:	ea42 0103 	orr.w	r1, r2, r3
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d10d      	bne.n	800bc1a <HAL_ADC_ConfigChannel+0x65e>
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	0e9b      	lsrs	r3, r3, #26
 800bc04:	3301      	adds	r3, #1
 800bc06:	f003 021f 	and.w	r2, r3, #31
 800bc0a:	4613      	mov	r3, r2
 800bc0c:	005b      	lsls	r3, r3, #1
 800bc0e:	4413      	add	r3, r2
 800bc10:	3b1e      	subs	r3, #30
 800bc12:	051b      	lsls	r3, r3, #20
 800bc14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bc18:	e01e      	b.n	800bc58 <HAL_ADC_ConfigChannel+0x69c>
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	fa93 f3a3 	rbit	r3, r3
 800bc26:	60fb      	str	r3, [r7, #12]
  return result;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d104      	bne.n	800bc3c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800bc32:	2320      	movs	r3, #32
 800bc34:	e006      	b.n	800bc44 <HAL_ADC_ConfigChannel+0x688>
 800bc36:	bf00      	nop
 800bc38:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	fab3 f383 	clz	r3, r3
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	3301      	adds	r3, #1
 800bc46:	f003 021f 	and.w	r2, r3, #31
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	005b      	lsls	r3, r3, #1
 800bc4e:	4413      	add	r3, r2
 800bc50:	3b1e      	subs	r3, #30
 800bc52:	051b      	lsls	r3, r3, #20
 800bc54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bc58:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800bc5a:	683a      	ldr	r2, [r7, #0]
 800bc5c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bc5e:	4619      	mov	r1, r3
 800bc60:	f7ff f8d8 	bl	800ae14 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	4b44      	ldr	r3, [pc, #272]	@ (800bd7c <HAL_ADC_ConfigChannel+0x7c0>)
 800bc6a:	4013      	ands	r3, r2
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d07a      	beq.n	800bd66 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800bc70:	4843      	ldr	r0, [pc, #268]	@ (800bd80 <HAL_ADC_ConfigChannel+0x7c4>)
 800bc72:	f7ff f82d 	bl	800acd0 <LL_ADC_GetCommonPathInternalCh>
 800bc76:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4a41      	ldr	r2, [pc, #260]	@ (800bd84 <HAL_ADC_ConfigChannel+0x7c8>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d12c      	bne.n	800bcde <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800bc84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bc88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d126      	bne.n	800bcde <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4a3c      	ldr	r2, [pc, #240]	@ (800bd88 <HAL_ADC_ConfigChannel+0x7cc>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d004      	beq.n	800bca4 <HAL_ADC_ConfigChannel+0x6e8>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4a3b      	ldr	r2, [pc, #236]	@ (800bd8c <HAL_ADC_ConfigChannel+0x7d0>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d15d      	bne.n	800bd60 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800bca4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bca8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bcac:	4619      	mov	r1, r3
 800bcae:	4834      	ldr	r0, [pc, #208]	@ (800bd80 <HAL_ADC_ConfigChannel+0x7c4>)
 800bcb0:	f7fe fffb 	bl	800acaa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800bcb4:	4b36      	ldr	r3, [pc, #216]	@ (800bd90 <HAL_ADC_ConfigChannel+0x7d4>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	099b      	lsrs	r3, r3, #6
 800bcba:	4a36      	ldr	r2, [pc, #216]	@ (800bd94 <HAL_ADC_ConfigChannel+0x7d8>)
 800bcbc:	fba2 2303 	umull	r2, r3, r2, r3
 800bcc0:	099b      	lsrs	r3, r3, #6
 800bcc2:	1c5a      	adds	r2, r3, #1
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	005b      	lsls	r3, r3, #1
 800bcc8:	4413      	add	r3, r2
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800bcce:	e002      	b.n	800bcd6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	3b01      	subs	r3, #1
 800bcd4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d1f9      	bne.n	800bcd0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800bcdc:	e040      	b.n	800bd60 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a2d      	ldr	r2, [pc, #180]	@ (800bd98 <HAL_ADC_ConfigChannel+0x7dc>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d118      	bne.n	800bd1a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800bce8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bcec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d112      	bne.n	800bd1a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a23      	ldr	r2, [pc, #140]	@ (800bd88 <HAL_ADC_ConfigChannel+0x7cc>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d004      	beq.n	800bd08 <HAL_ADC_ConfigChannel+0x74c>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a22      	ldr	r2, [pc, #136]	@ (800bd8c <HAL_ADC_ConfigChannel+0x7d0>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d12d      	bne.n	800bd64 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800bd08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bd0c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bd10:	4619      	mov	r1, r3
 800bd12:	481b      	ldr	r0, [pc, #108]	@ (800bd80 <HAL_ADC_ConfigChannel+0x7c4>)
 800bd14:	f7fe ffc9 	bl	800acaa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800bd18:	e024      	b.n	800bd64 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a1f      	ldr	r2, [pc, #124]	@ (800bd9c <HAL_ADC_ConfigChannel+0x7e0>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d120      	bne.n	800bd66 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800bd24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bd28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d11a      	bne.n	800bd66 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4a14      	ldr	r2, [pc, #80]	@ (800bd88 <HAL_ADC_ConfigChannel+0x7cc>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d115      	bne.n	800bd66 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800bd3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bd3e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bd42:	4619      	mov	r1, r3
 800bd44:	480e      	ldr	r0, [pc, #56]	@ (800bd80 <HAL_ADC_ConfigChannel+0x7c4>)
 800bd46:	f7fe ffb0 	bl	800acaa <LL_ADC_SetCommonPathInternalCh>
 800bd4a:	e00c      	b.n	800bd66 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd50:	f043 0220 	orr.w	r2, r3, #32
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800bd5e:	e002      	b.n	800bd66 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800bd60:	bf00      	nop
 800bd62:	e000      	b.n	800bd66 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800bd64:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800bd6e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	37d8      	adds	r7, #216	@ 0xd8
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	80080000 	.word	0x80080000
 800bd80:	50040300 	.word	0x50040300
 800bd84:	c7520000 	.word	0xc7520000
 800bd88:	50040000 	.word	0x50040000
 800bd8c:	50040200 	.word	0x50040200
 800bd90:	20000168 	.word	0x20000168
 800bd94:	053e2d63 	.word	0x053e2d63
 800bd98:	cb840000 	.word	0xcb840000
 800bd9c:	80000001 	.word	0x80000001

0800bda0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b088      	sub	sp, #32
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7ff f94e 	bl	800b058 <LL_ADC_REG_IsConversionOngoing>
 800bdbc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7ff f96f 	bl	800b0a6 <LL_ADC_INJ_IsConversionOngoing>
 800bdc8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d103      	bne.n	800bdd8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	f000 8098 	beq.w	800bf08 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	68db      	ldr	r3, [r3, #12]
 800bdde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d02a      	beq.n	800be3c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	7e5b      	ldrb	r3, [r3, #25]
 800bdea:	2b01      	cmp	r3, #1
 800bdec:	d126      	bne.n	800be3c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	7e1b      	ldrb	r3, [r3, #24]
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	d122      	bne.n	800be3c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800bdfa:	e014      	b.n	800be26 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	4a45      	ldr	r2, [pc, #276]	@ (800bf14 <ADC_ConversionStop+0x174>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d90d      	bls.n	800be20 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be08:	f043 0210 	orr.w	r2, r3, #16
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be14:	f043 0201 	orr.w	r2, r3, #1
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800be1c:	2301      	movs	r3, #1
 800be1e:	e074      	b.n	800bf0a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800be20:	69fb      	ldr	r3, [r7, #28]
 800be22:	3301      	adds	r3, #1
 800be24:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be30:	2b40      	cmp	r3, #64	@ 0x40
 800be32:	d1e3      	bne.n	800bdfc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2240      	movs	r2, #64	@ 0x40
 800be3a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800be3c:	69bb      	ldr	r3, [r7, #24]
 800be3e:	2b02      	cmp	r3, #2
 800be40:	d014      	beq.n	800be6c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	4618      	mov	r0, r3
 800be48:	f7ff f906 	bl	800b058 <LL_ADC_REG_IsConversionOngoing>
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d00c      	beq.n	800be6c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	4618      	mov	r0, r3
 800be58:	f7ff f8c3 	bl	800afe2 <LL_ADC_IsDisableOngoing>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d104      	bne.n	800be6c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4618      	mov	r0, r3
 800be68:	f7ff f8e2 	bl	800b030 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d014      	beq.n	800be9c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4618      	mov	r0, r3
 800be78:	f7ff f915 	bl	800b0a6 <LL_ADC_INJ_IsConversionOngoing>
 800be7c:	4603      	mov	r3, r0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d00c      	beq.n	800be9c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4618      	mov	r0, r3
 800be88:	f7ff f8ab 	bl	800afe2 <LL_ADC_IsDisableOngoing>
 800be8c:	4603      	mov	r3, r0
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d104      	bne.n	800be9c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	4618      	mov	r0, r3
 800be98:	f7ff f8f1 	bl	800b07e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800be9c:	69bb      	ldr	r3, [r7, #24]
 800be9e:	2b02      	cmp	r3, #2
 800bea0:	d005      	beq.n	800beae <ADC_ConversionStop+0x10e>
 800bea2:	69bb      	ldr	r3, [r7, #24]
 800bea4:	2b03      	cmp	r3, #3
 800bea6:	d105      	bne.n	800beb4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800bea8:	230c      	movs	r3, #12
 800beaa:	617b      	str	r3, [r7, #20]
        break;
 800beac:	e005      	b.n	800beba <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800beae:	2308      	movs	r3, #8
 800beb0:	617b      	str	r3, [r7, #20]
        break;
 800beb2:	e002      	b.n	800beba <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800beb4:	2304      	movs	r3, #4
 800beb6:	617b      	str	r3, [r7, #20]
        break;
 800beb8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800beba:	f7fe feb3 	bl	800ac24 <HAL_GetTick>
 800bebe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800bec0:	e01b      	b.n	800befa <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800bec2:	f7fe feaf 	bl	800ac24 <HAL_GetTick>
 800bec6:	4602      	mov	r2, r0
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	1ad3      	subs	r3, r2, r3
 800becc:	2b05      	cmp	r3, #5
 800bece:	d914      	bls.n	800befa <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	689a      	ldr	r2, [r3, #8]
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	4013      	ands	r3, r2
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d00d      	beq.n	800befa <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bee2:	f043 0210 	orr.w	r2, r3, #16
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800beee:	f043 0201 	orr.w	r2, r3, #1
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800bef6:	2301      	movs	r3, #1
 800bef8:	e007      	b.n	800bf0a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	689a      	ldr	r2, [r3, #8]
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	4013      	ands	r3, r2
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d1dc      	bne.n	800bec2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800bf08:	2300      	movs	r3, #0
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3720      	adds	r7, #32
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	a33fffff 	.word	0xa33fffff

0800bf18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800bf20:	2300      	movs	r3, #0
 800bf22:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f7ff f847 	bl	800afbc <LL_ADC_IsEnabled>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d169      	bne.n	800c008 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	689a      	ldr	r2, [r3, #8]
 800bf3a:	4b36      	ldr	r3, [pc, #216]	@ (800c014 <ADC_Enable+0xfc>)
 800bf3c:	4013      	ands	r3, r2
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d00d      	beq.n	800bf5e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf46:	f043 0210 	orr.w	r2, r3, #16
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf52:	f043 0201 	orr.w	r2, r3, #1
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e055      	b.n	800c00a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7ff f802 	bl	800af6c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800bf68:	482b      	ldr	r0, [pc, #172]	@ (800c018 <ADC_Enable+0x100>)
 800bf6a:	f7fe feb1 	bl	800acd0 <LL_ADC_GetCommonPathInternalCh>
 800bf6e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800bf70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d013      	beq.n	800bfa0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800bf78:	4b28      	ldr	r3, [pc, #160]	@ (800c01c <ADC_Enable+0x104>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	099b      	lsrs	r3, r3, #6
 800bf7e:	4a28      	ldr	r2, [pc, #160]	@ (800c020 <ADC_Enable+0x108>)
 800bf80:	fba2 2303 	umull	r2, r3, r2, r3
 800bf84:	099b      	lsrs	r3, r3, #6
 800bf86:	1c5a      	adds	r2, r3, #1
 800bf88:	4613      	mov	r3, r2
 800bf8a:	005b      	lsls	r3, r3, #1
 800bf8c:	4413      	add	r3, r2
 800bf8e:	009b      	lsls	r3, r3, #2
 800bf90:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800bf92:	e002      	b.n	800bf9a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	3b01      	subs	r3, #1
 800bf98:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d1f9      	bne.n	800bf94 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800bfa0:	f7fe fe40 	bl	800ac24 <HAL_GetTick>
 800bfa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800bfa6:	e028      	b.n	800bffa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4618      	mov	r0, r3
 800bfae:	f7ff f805 	bl	800afbc <LL_ADC_IsEnabled>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d104      	bne.n	800bfc2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7fe ffd5 	bl	800af6c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800bfc2:	f7fe fe2f 	bl	800ac24 <HAL_GetTick>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	1ad3      	subs	r3, r2, r3
 800bfcc:	2b02      	cmp	r3, #2
 800bfce:	d914      	bls.n	800bffa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f003 0301 	and.w	r3, r3, #1
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d00d      	beq.n	800bffa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfe2:	f043 0210 	orr.w	r2, r3, #16
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bfee:	f043 0201 	orr.w	r2, r3, #1
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800bff6:	2301      	movs	r3, #1
 800bff8:	e007      	b.n	800c00a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f003 0301 	and.w	r3, r3, #1
 800c004:	2b01      	cmp	r3, #1
 800c006:	d1cf      	bne.n	800bfa8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c008:	2300      	movs	r3, #0
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3710      	adds	r7, #16
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	8000003f 	.word	0x8000003f
 800c018:	50040300 	.word	0x50040300
 800c01c:	20000168 	.word	0x20000168
 800c020:	053e2d63 	.word	0x053e2d63

0800c024 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4618      	mov	r0, r3
 800c032:	f7fe ffd6 	bl	800afe2 <LL_ADC_IsDisableOngoing>
 800c036:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7fe ffbd 	bl	800afbc <LL_ADC_IsEnabled>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d047      	beq.n	800c0d8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d144      	bne.n	800c0d8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	689b      	ldr	r3, [r3, #8]
 800c054:	f003 030d 	and.w	r3, r3, #13
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d10c      	bne.n	800c076 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4618      	mov	r0, r3
 800c062:	f7fe ff97 	bl	800af94 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	2203      	movs	r2, #3
 800c06c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800c06e:	f7fe fdd9 	bl	800ac24 <HAL_GetTick>
 800c072:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c074:	e029      	b.n	800c0ca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c07a:	f043 0210 	orr.w	r2, r3, #16
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c086:	f043 0201 	orr.w	r2, r3, #1
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800c08e:	2301      	movs	r3, #1
 800c090:	e023      	b.n	800c0da <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800c092:	f7fe fdc7 	bl	800ac24 <HAL_GetTick>
 800c096:	4602      	mov	r2, r0
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	1ad3      	subs	r3, r2, r3
 800c09c:	2b02      	cmp	r3, #2
 800c09e:	d914      	bls.n	800c0ca <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	689b      	ldr	r3, [r3, #8]
 800c0a6:	f003 0301 	and.w	r3, r3, #1
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d00d      	beq.n	800c0ca <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0b2:	f043 0210 	orr.w	r2, r3, #16
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0be:	f043 0201 	orr.w	r2, r3, #1
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	e007      	b.n	800c0da <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	689b      	ldr	r3, [r3, #8]
 800c0d0:	f003 0301 	and.w	r3, r3, #1
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d1dc      	bne.n	800c092 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c0d8:	2300      	movs	r3, #0
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3710      	adds	r7, #16
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b084      	sub	sp, #16
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0ee:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d14b      	bne.n	800c194 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c100:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f003 0308 	and.w	r3, r3, #8
 800c112:	2b00      	cmp	r3, #0
 800c114:	d021      	beq.n	800c15a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7fe fe3b 	bl	800ad96 <LL_ADC_REG_IsTriggerSourceSWStart>
 800c120:	4603      	mov	r3, r0
 800c122:	2b00      	cmp	r3, #0
 800c124:	d032      	beq.n	800c18c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	68db      	ldr	r3, [r3, #12]
 800c12c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c130:	2b00      	cmp	r3, #0
 800c132:	d12b      	bne.n	800c18c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c138:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c144:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d11f      	bne.n	800c18c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c150:	f043 0201 	orr.w	r2, r3, #1
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	655a      	str	r2, [r3, #84]	@ 0x54
 800c158:	e018      	b.n	800c18c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	f003 0302 	and.w	r3, r3, #2
 800c164:	2b00      	cmp	r3, #0
 800c166:	d111      	bne.n	800c18c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c16c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c178:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d105      	bne.n	800c18c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c184:	f043 0201 	orr.w	r2, r3, #1
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c18c:	68f8      	ldr	r0, [r7, #12]
 800c18e:	f7f6 fbd3 	bl	8002938 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c192:	e00e      	b.n	800c1b2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c198:	f003 0310 	and.w	r3, r3, #16
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d003      	beq.n	800c1a8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	f7ff fa00 	bl	800b5a6 <HAL_ADC_ErrorCallback>
}
 800c1a6:	e004      	b.n	800c1b2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	4798      	blx	r3
}
 800c1b2:	bf00      	nop
 800c1b4:	3710      	adds	r7, #16
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800c1ba:	b580      	push	{r7, lr}
 800c1bc:	b084      	sub	sp, #16
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1c6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	f7f6 fb99 	bl	8002900 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c1ce:	bf00      	nop
 800c1d0:	3710      	adds	r7, #16
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}

0800c1d6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800c1d6:	b580      	push	{r7, lr}
 800c1d8:	b084      	sub	sp, #16
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1e2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1e8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1f4:	f043 0204 	orr.w	r2, r3, #4
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c1fc:	68f8      	ldr	r0, [r7, #12]
 800c1fe:	f7ff f9d2 	bl	800b5a6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c202:	bf00      	nop
 800c204:	3710      	adds	r7, #16
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <LL_ADC_IsEnabled>:
{
 800c20a:	b480      	push	{r7}
 800c20c:	b083      	sub	sp, #12
 800c20e:	af00      	add	r7, sp, #0
 800c210:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	689b      	ldr	r3, [r3, #8]
 800c216:	f003 0301 	and.w	r3, r3, #1
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d101      	bne.n	800c222 <LL_ADC_IsEnabled+0x18>
 800c21e:	2301      	movs	r3, #1
 800c220:	e000      	b.n	800c224 <LL_ADC_IsEnabled+0x1a>
 800c222:	2300      	movs	r3, #0
}
 800c224:	4618      	mov	r0, r3
 800c226:	370c      	adds	r7, #12
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <LL_ADC_REG_IsConversionOngoing>:
{
 800c230:	b480      	push	{r7}
 800c232:	b083      	sub	sp, #12
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	f003 0304 	and.w	r3, r3, #4
 800c240:	2b04      	cmp	r3, #4
 800c242:	d101      	bne.n	800c248 <LL_ADC_REG_IsConversionOngoing+0x18>
 800c244:	2301      	movs	r3, #1
 800c246:	e000      	b.n	800c24a <LL_ADC_REG_IsConversionOngoing+0x1a>
 800c248:	2300      	movs	r3, #0
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	370c      	adds	r7, #12
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr
	...

0800c258 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800c258:	b590      	push	{r4, r7, lr}
 800c25a:	b09f      	sub	sp, #124	@ 0x7c
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c262:	2300      	movs	r3, #0
 800c264:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d101      	bne.n	800c276 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800c272:	2302      	movs	r3, #2
 800c274:	e093      	b.n	800c39e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2201      	movs	r2, #1
 800c27a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800c27e:	2300      	movs	r3, #0
 800c280:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800c282:	2300      	movs	r3, #0
 800c284:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4a47      	ldr	r2, [pc, #284]	@ (800c3a8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d102      	bne.n	800c296 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800c290:	4b46      	ldr	r3, [pc, #280]	@ (800c3ac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c292:	60bb      	str	r3, [r7, #8]
 800c294:	e001      	b.n	800c29a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800c296:	2300      	movs	r3, #0
 800c298:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d10b      	bne.n	800c2b8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2a4:	f043 0220 	orr.w	r2, r3, #32
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	e072      	b.n	800c39e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7ff ffb8 	bl	800c230 <LL_ADC_REG_IsConversionOngoing>
 800c2c0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7ff ffb2 	bl	800c230 <LL_ADC_REG_IsConversionOngoing>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d154      	bne.n	800c37c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800c2d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d151      	bne.n	800c37c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800c2d8:	4b35      	ldr	r3, [pc, #212]	@ (800c3b0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800c2da:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d02c      	beq.n	800c33e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800c2e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	6859      	ldr	r1, [r3, #4]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c2f6:	035b      	lsls	r3, r3, #13
 800c2f8:	430b      	orrs	r3, r1
 800c2fa:	431a      	orrs	r2, r3
 800c2fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c300:	4829      	ldr	r0, [pc, #164]	@ (800c3a8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c302:	f7ff ff82 	bl	800c20a <LL_ADC_IsEnabled>
 800c306:	4604      	mov	r4, r0
 800c308:	4828      	ldr	r0, [pc, #160]	@ (800c3ac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c30a:	f7ff ff7e 	bl	800c20a <LL_ADC_IsEnabled>
 800c30e:	4603      	mov	r3, r0
 800c310:	431c      	orrs	r4, r3
 800c312:	4828      	ldr	r0, [pc, #160]	@ (800c3b4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800c314:	f7ff ff79 	bl	800c20a <LL_ADC_IsEnabled>
 800c318:	4603      	mov	r3, r0
 800c31a:	4323      	orrs	r3, r4
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d137      	bne.n	800c390 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800c320:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c322:	689b      	ldr	r3, [r3, #8]
 800c324:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c328:	f023 030f 	bic.w	r3, r3, #15
 800c32c:	683a      	ldr	r2, [r7, #0]
 800c32e:	6811      	ldr	r1, [r2, #0]
 800c330:	683a      	ldr	r2, [r7, #0]
 800c332:	6892      	ldr	r2, [r2, #8]
 800c334:	430a      	orrs	r2, r1
 800c336:	431a      	orrs	r2, r3
 800c338:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c33a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c33c:	e028      	b.n	800c390 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800c33e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c340:	689b      	ldr	r3, [r3, #8]
 800c342:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c346:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c348:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c34a:	4817      	ldr	r0, [pc, #92]	@ (800c3a8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c34c:	f7ff ff5d 	bl	800c20a <LL_ADC_IsEnabled>
 800c350:	4604      	mov	r4, r0
 800c352:	4816      	ldr	r0, [pc, #88]	@ (800c3ac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c354:	f7ff ff59 	bl	800c20a <LL_ADC_IsEnabled>
 800c358:	4603      	mov	r3, r0
 800c35a:	431c      	orrs	r4, r3
 800c35c:	4815      	ldr	r0, [pc, #84]	@ (800c3b4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800c35e:	f7ff ff54 	bl	800c20a <LL_ADC_IsEnabled>
 800c362:	4603      	mov	r3, r0
 800c364:	4323      	orrs	r3, r4
 800c366:	2b00      	cmp	r3, #0
 800c368:	d112      	bne.n	800c390 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800c36a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c36c:	689b      	ldr	r3, [r3, #8]
 800c36e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c372:	f023 030f 	bic.w	r3, r3, #15
 800c376:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c378:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c37a:	e009      	b.n	800c390 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c380:	f043 0220 	orr.w	r2, r3, #32
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800c388:	2301      	movs	r3, #1
 800c38a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800c38e:	e000      	b.n	800c392 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c390:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2200      	movs	r2, #0
 800c396:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800c39a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	377c      	adds	r7, #124	@ 0x7c
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd90      	pop	{r4, r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	50040000 	.word	0x50040000
 800c3ac:	50040100 	.word	0x50040100
 800c3b0:	50040300 	.word	0x50040300
 800c3b4:	50040200 	.word	0x50040200

0800c3b8 <__NVIC_SetPriorityGrouping>:
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b085      	sub	sp, #20
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f003 0307 	and.w	r3, r3, #7
 800c3c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c3c8:	4b0c      	ldr	r3, [pc, #48]	@ (800c3fc <__NVIC_SetPriorityGrouping+0x44>)
 800c3ca:	68db      	ldr	r3, [r3, #12]
 800c3cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c3ce:	68ba      	ldr	r2, [r7, #8]
 800c3d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c3d4:	4013      	ands	r3, r2
 800c3d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c3e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c3e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c3e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c3ea:	4a04      	ldr	r2, [pc, #16]	@ (800c3fc <__NVIC_SetPriorityGrouping+0x44>)
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	60d3      	str	r3, [r2, #12]
}
 800c3f0:	bf00      	nop
 800c3f2:	3714      	adds	r7, #20
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr
 800c3fc:	e000ed00 	.word	0xe000ed00

0800c400 <__NVIC_GetPriorityGrouping>:
{
 800c400:	b480      	push	{r7}
 800c402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c404:	4b04      	ldr	r3, [pc, #16]	@ (800c418 <__NVIC_GetPriorityGrouping+0x18>)
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	0a1b      	lsrs	r3, r3, #8
 800c40a:	f003 0307 	and.w	r3, r3, #7
}
 800c40e:	4618      	mov	r0, r3
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr
 800c418:	e000ed00 	.word	0xe000ed00

0800c41c <__NVIC_EnableIRQ>:
{
 800c41c:	b480      	push	{r7}
 800c41e:	b083      	sub	sp, #12
 800c420:	af00      	add	r7, sp, #0
 800c422:	4603      	mov	r3, r0
 800c424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	db0b      	blt.n	800c446 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c42e:	79fb      	ldrb	r3, [r7, #7]
 800c430:	f003 021f 	and.w	r2, r3, #31
 800c434:	4907      	ldr	r1, [pc, #28]	@ (800c454 <__NVIC_EnableIRQ+0x38>)
 800c436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c43a:	095b      	lsrs	r3, r3, #5
 800c43c:	2001      	movs	r0, #1
 800c43e:	fa00 f202 	lsl.w	r2, r0, r2
 800c442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c446:	bf00      	nop
 800c448:	370c      	adds	r7, #12
 800c44a:	46bd      	mov	sp, r7
 800c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c450:	4770      	bx	lr
 800c452:	bf00      	nop
 800c454:	e000e100 	.word	0xe000e100

0800c458 <__NVIC_SetPriority>:
{
 800c458:	b480      	push	{r7}
 800c45a:	b083      	sub	sp, #12
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	4603      	mov	r3, r0
 800c460:	6039      	str	r1, [r7, #0]
 800c462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	db0a      	blt.n	800c482 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	b2da      	uxtb	r2, r3
 800c470:	490c      	ldr	r1, [pc, #48]	@ (800c4a4 <__NVIC_SetPriority+0x4c>)
 800c472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c476:	0112      	lsls	r2, r2, #4
 800c478:	b2d2      	uxtb	r2, r2
 800c47a:	440b      	add	r3, r1
 800c47c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c480:	e00a      	b.n	800c498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	b2da      	uxtb	r2, r3
 800c486:	4908      	ldr	r1, [pc, #32]	@ (800c4a8 <__NVIC_SetPriority+0x50>)
 800c488:	79fb      	ldrb	r3, [r7, #7]
 800c48a:	f003 030f 	and.w	r3, r3, #15
 800c48e:	3b04      	subs	r3, #4
 800c490:	0112      	lsls	r2, r2, #4
 800c492:	b2d2      	uxtb	r2, r2
 800c494:	440b      	add	r3, r1
 800c496:	761a      	strb	r2, [r3, #24]
}
 800c498:	bf00      	nop
 800c49a:	370c      	adds	r7, #12
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr
 800c4a4:	e000e100 	.word	0xe000e100
 800c4a8:	e000ed00 	.word	0xe000ed00

0800c4ac <NVIC_EncodePriority>:
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b089      	sub	sp, #36	@ 0x24
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	60b9      	str	r1, [r7, #8]
 800c4b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f003 0307 	and.w	r3, r3, #7
 800c4be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c4c0:	69fb      	ldr	r3, [r7, #28]
 800c4c2:	f1c3 0307 	rsb	r3, r3, #7
 800c4c6:	2b04      	cmp	r3, #4
 800c4c8:	bf28      	it	cs
 800c4ca:	2304      	movcs	r3, #4
 800c4cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c4ce:	69fb      	ldr	r3, [r7, #28]
 800c4d0:	3304      	adds	r3, #4
 800c4d2:	2b06      	cmp	r3, #6
 800c4d4:	d902      	bls.n	800c4dc <NVIC_EncodePriority+0x30>
 800c4d6:	69fb      	ldr	r3, [r7, #28]
 800c4d8:	3b03      	subs	r3, #3
 800c4da:	e000      	b.n	800c4de <NVIC_EncodePriority+0x32>
 800c4dc:	2300      	movs	r3, #0
 800c4de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c4e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c4e4:	69bb      	ldr	r3, [r7, #24]
 800c4e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ea:	43da      	mvns	r2, r3
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	401a      	ands	r2, r3
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c4f4:	f04f 31ff 	mov.w	r1, #4294967295
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	fa01 f303 	lsl.w	r3, r1, r3
 800c4fe:	43d9      	mvns	r1, r3
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c504:	4313      	orrs	r3, r2
}
 800c506:	4618      	mov	r0, r3
 800c508:	3724      	adds	r7, #36	@ 0x24
 800c50a:	46bd      	mov	sp, r7
 800c50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c510:	4770      	bx	lr
	...

0800c514 <__NVIC_SystemReset>:
{
 800c514:	b480      	push	{r7}
 800c516:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800c518:	f3bf 8f4f 	dsb	sy
}
 800c51c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800c51e:	4b06      	ldr	r3, [pc, #24]	@ (800c538 <__NVIC_SystemReset+0x24>)
 800c520:	68db      	ldr	r3, [r3, #12]
 800c522:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800c526:	4904      	ldr	r1, [pc, #16]	@ (800c538 <__NVIC_SystemReset+0x24>)
 800c528:	4b04      	ldr	r3, [pc, #16]	@ (800c53c <__NVIC_SystemReset+0x28>)
 800c52a:	4313      	orrs	r3, r2
 800c52c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c52e:	f3bf 8f4f 	dsb	sy
}
 800c532:	bf00      	nop
    __NOP();
 800c534:	bf00      	nop
 800c536:	e7fd      	b.n	800c534 <__NVIC_SystemReset+0x20>
 800c538:	e000ed00 	.word	0xe000ed00
 800c53c:	05fa0004 	.word	0x05fa0004

0800c540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b082      	sub	sp, #8
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	3b01      	subs	r3, #1
 800c54c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c550:	d301      	bcc.n	800c556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c552:	2301      	movs	r3, #1
 800c554:	e00f      	b.n	800c576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c556:	4a0a      	ldr	r2, [pc, #40]	@ (800c580 <SysTick_Config+0x40>)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	3b01      	subs	r3, #1
 800c55c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c55e:	210f      	movs	r1, #15
 800c560:	f04f 30ff 	mov.w	r0, #4294967295
 800c564:	f7ff ff78 	bl	800c458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c568:	4b05      	ldr	r3, [pc, #20]	@ (800c580 <SysTick_Config+0x40>)
 800c56a:	2200      	movs	r2, #0
 800c56c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c56e:	4b04      	ldr	r3, [pc, #16]	@ (800c580 <SysTick_Config+0x40>)
 800c570:	2207      	movs	r2, #7
 800c572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c574:	2300      	movs	r3, #0
}
 800c576:	4618      	mov	r0, r3
 800c578:	3708      	adds	r7, #8
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop
 800c580:	e000e010 	.word	0xe000e010

0800c584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f7ff ff13 	bl	800c3b8 <__NVIC_SetPriorityGrouping>
}
 800c592:	bf00      	nop
 800c594:	3708      	adds	r7, #8
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}

0800c59a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b086      	sub	sp, #24
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	60b9      	str	r1, [r7, #8]
 800c5a4:	607a      	str	r2, [r7, #4]
 800c5a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c5ac:	f7ff ff28 	bl	800c400 <__NVIC_GetPriorityGrouping>
 800c5b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	68b9      	ldr	r1, [r7, #8]
 800c5b6:	6978      	ldr	r0, [r7, #20]
 800c5b8:	f7ff ff78 	bl	800c4ac <NVIC_EncodePriority>
 800c5bc:	4602      	mov	r2, r0
 800c5be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5c2:	4611      	mov	r1, r2
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7ff ff47 	bl	800c458 <__NVIC_SetPriority>
}
 800c5ca:	bf00      	nop
 800c5cc:	3718      	adds	r7, #24
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b082      	sub	sp, #8
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	4603      	mov	r3, r0
 800c5da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c5dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7ff ff1b 	bl	800c41c <__NVIC_EnableIRQ>
}
 800c5e6:	bf00      	nop
 800c5e8:	3708      	adds	r7, #8
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}

0800c5ee <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800c5ee:	b580      	push	{r7, lr}
 800c5f0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800c5f2:	f7ff ff8f 	bl	800c514 <__NVIC_SystemReset>

0800c5f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c5f6:	b580      	push	{r7, lr}
 800c5f8:	b082      	sub	sp, #8
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f7ff ff9e 	bl	800c540 <SysTick_Config>
 800c604:	4603      	mov	r3, r0
}
 800c606:	4618      	mov	r0, r3
 800c608:	3708      	adds	r7, #8
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
	...

0800c610 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d101      	bne.n	800c622 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800c61e:	2301      	movs	r3, #1
 800c620:	e054      	b.n	800c6cc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	7f5b      	ldrb	r3, [r3, #29]
 800c626:	b2db      	uxtb	r3, r3
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d105      	bne.n	800c638 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2200      	movs	r2, #0
 800c630:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f7fa fdb2 	bl	800719c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2202      	movs	r2, #2
 800c63c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	791b      	ldrb	r3, [r3, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d10c      	bne.n	800c660 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4a22      	ldr	r2, [pc, #136]	@ (800c6d4 <HAL_CRC_Init+0xc4>)
 800c64c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	689a      	ldr	r2, [r3, #8]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f022 0218 	bic.w	r2, r2, #24
 800c65c:	609a      	str	r2, [r3, #8]
 800c65e:	e00c      	b.n	800c67a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6899      	ldr	r1, [r3, #8]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	68db      	ldr	r3, [r3, #12]
 800c668:	461a      	mov	r2, r3
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 f94a 	bl	800c904 <HAL_CRCEx_Polynomial_Set>
 800c670:	4603      	mov	r3, r0
 800c672:	2b00      	cmp	r3, #0
 800c674:	d001      	beq.n	800c67a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800c676:	2301      	movs	r3, #1
 800c678:	e028      	b.n	800c6cc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	795b      	ldrb	r3, [r3, #5]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d105      	bne.n	800c68e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f04f 32ff 	mov.w	r2, #4294967295
 800c68a:	611a      	str	r2, [r3, #16]
 800c68c:	e004      	b.n	800c698 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	6912      	ldr	r2, [r2, #16]
 800c696:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	695a      	ldr	r2, [r3, #20]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	430a      	orrs	r2, r1
 800c6ac:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	699a      	ldr	r2, [r3, #24]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	430a      	orrs	r2, r1
 800c6c2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800c6ca:	2300      	movs	r3, #0
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3708      	adds	r7, #8
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	04c11db7 	.word	0x04c11db7

0800c6d8 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b086      	sub	sp, #24
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2202      	movs	r2, #2
 800c6ec:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	689a      	ldr	r2, [r3, #8]
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f042 0201 	orr.w	r2, r2, #1
 800c6fc:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	6a1b      	ldr	r3, [r3, #32]
 800c702:	2b03      	cmp	r3, #3
 800c704:	d006      	beq.n	800c714 <HAL_CRC_Calculate+0x3c>
 800c706:	2b03      	cmp	r3, #3
 800c708:	d829      	bhi.n	800c75e <HAL_CRC_Calculate+0x86>
 800c70a:	2b01      	cmp	r3, #1
 800c70c:	d019      	beq.n	800c742 <HAL_CRC_Calculate+0x6a>
 800c70e:	2b02      	cmp	r3, #2
 800c710:	d01e      	beq.n	800c750 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800c712:	e024      	b.n	800c75e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800c714:	2300      	movs	r3, #0
 800c716:	617b      	str	r3, [r7, #20]
 800c718:	e00a      	b.n	800c730 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	68ba      	ldr	r2, [r7, #8]
 800c720:	441a      	add	r2, r3
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	6812      	ldr	r2, [r2, #0]
 800c728:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	3301      	adds	r3, #1
 800c72e:	617b      	str	r3, [r7, #20]
 800c730:	697a      	ldr	r2, [r7, #20]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	429a      	cmp	r2, r3
 800c736:	d3f0      	bcc.n	800c71a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	613b      	str	r3, [r7, #16]
      break;
 800c740:	e00e      	b.n	800c760 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	68b9      	ldr	r1, [r7, #8]
 800c746:	68f8      	ldr	r0, [r7, #12]
 800c748:	f000 f812 	bl	800c770 <CRC_Handle_8>
 800c74c:	6138      	str	r0, [r7, #16]
      break;
 800c74e:	e007      	b.n	800c760 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	68b9      	ldr	r1, [r7, #8]
 800c754:	68f8      	ldr	r0, [r7, #12]
 800c756:	f000 f89b 	bl	800c890 <CRC_Handle_16>
 800c75a:	6138      	str	r0, [r7, #16]
      break;
 800c75c:	e000      	b.n	800c760 <HAL_CRC_Calculate+0x88>
      break;
 800c75e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2201      	movs	r2, #1
 800c764:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800c766:	693b      	ldr	r3, [r7, #16]
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3718      	adds	r7, #24
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800c770:	b480      	push	{r7}
 800c772:	b089      	sub	sp, #36	@ 0x24
 800c774:	af00      	add	r7, sp, #0
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	60b9      	str	r1, [r7, #8]
 800c77a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800c77c:	2300      	movs	r3, #0
 800c77e:	61fb      	str	r3, [r7, #28]
 800c780:	e023      	b.n	800c7ca <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800c782:	69fb      	ldr	r3, [r7, #28]
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	68ba      	ldr	r2, [r7, #8]
 800c788:	4413      	add	r3, r2
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800c78e:	69fb      	ldr	r3, [r7, #28]
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	3301      	adds	r3, #1
 800c794:	68b9      	ldr	r1, [r7, #8]
 800c796:	440b      	add	r3, r1
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800c79c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800c79e:	69fb      	ldr	r3, [r7, #28]
 800c7a0:	009b      	lsls	r3, r3, #2
 800c7a2:	3302      	adds	r3, #2
 800c7a4:	68b9      	ldr	r1, [r7, #8]
 800c7a6:	440b      	add	r3, r1
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800c7ac:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	3303      	adds	r3, #3
 800c7b4:	68b9      	ldr	r1, [r7, #8]
 800c7b6:	440b      	add	r3, r1
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800c7c0:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800c7c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	3301      	adds	r3, #1
 800c7c8:	61fb      	str	r3, [r7, #28]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	089b      	lsrs	r3, r3, #2
 800c7ce:	69fa      	ldr	r2, [r7, #28]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d3d6      	bcc.n	800c782 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f003 0303 	and.w	r3, r3, #3
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d04f      	beq.n	800c87e <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f003 0303 	and.w	r3, r3, #3
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d107      	bne.n	800c7f8 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800c7e8:	69fb      	ldr	r3, [r7, #28]
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	68ba      	ldr	r2, [r7, #8]
 800c7ee:	4413      	add	r3, r2
 800c7f0:	68fa      	ldr	r2, [r7, #12]
 800c7f2:	6812      	ldr	r2, [r2, #0]
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f003 0303 	and.w	r3, r3, #3
 800c7fe:	2b02      	cmp	r3, #2
 800c800:	d117      	bne.n	800c832 <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800c802:	69fb      	ldr	r3, [r7, #28]
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	68ba      	ldr	r2, [r7, #8]
 800c808:	4413      	add	r3, r2
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	b21b      	sxth	r3, r3
 800c80e:	021b      	lsls	r3, r3, #8
 800c810:	b21a      	sxth	r2, r3
 800c812:	69fb      	ldr	r3, [r7, #28]
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	3301      	adds	r3, #1
 800c818:	68b9      	ldr	r1, [r7, #8]
 800c81a:	440b      	add	r3, r1
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	b21b      	sxth	r3, r3
 800c820:	4313      	orrs	r3, r2
 800c822:	b21b      	sxth	r3, r3
 800c824:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	8b7a      	ldrh	r2, [r7, #26]
 800c830:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f003 0303 	and.w	r3, r3, #3
 800c838:	2b03      	cmp	r3, #3
 800c83a:	d120      	bne.n	800c87e <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	68ba      	ldr	r2, [r7, #8]
 800c842:	4413      	add	r3, r2
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	b21b      	sxth	r3, r3
 800c848:	021b      	lsls	r3, r3, #8
 800c84a:	b21a      	sxth	r2, r3
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	009b      	lsls	r3, r3, #2
 800c850:	3301      	adds	r3, #1
 800c852:	68b9      	ldr	r1, [r7, #8]
 800c854:	440b      	add	r3, r1
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	b21b      	sxth	r3, r3
 800c85a:	4313      	orrs	r3, r2
 800c85c:	b21b      	sxth	r3, r3
 800c85e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	8b7a      	ldrh	r2, [r7, #26]
 800c86a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800c86c:	69fb      	ldr	r3, [r7, #28]
 800c86e:	009b      	lsls	r3, r3, #2
 800c870:	3302      	adds	r3, #2
 800c872:	68ba      	ldr	r2, [r7, #8]
 800c874:	4413      	add	r3, r2
 800c876:	68fa      	ldr	r2, [r7, #12]
 800c878:	6812      	ldr	r2, [r2, #0]
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	681b      	ldr	r3, [r3, #0]
}
 800c884:	4618      	mov	r0, r3
 800c886:	3724      	adds	r7, #36	@ 0x24
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr

0800c890 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800c890:	b480      	push	{r7}
 800c892:	b087      	sub	sp, #28
 800c894:	af00      	add	r7, sp, #0
 800c896:	60f8      	str	r0, [r7, #12]
 800c898:	60b9      	str	r1, [r7, #8]
 800c89a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800c89c:	2300      	movs	r3, #0
 800c89e:	617b      	str	r3, [r7, #20]
 800c8a0:	e013      	b.n	800c8ca <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	009b      	lsls	r3, r3, #2
 800c8a6:	68ba      	ldr	r2, [r7, #8]
 800c8a8:	4413      	add	r3, r2
 800c8aa:	881b      	ldrh	r3, [r3, #0]
 800c8ac:	041a      	lsls	r2, r3, #16
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	009b      	lsls	r3, r3, #2
 800c8b2:	3302      	adds	r3, #2
 800c8b4:	68b9      	ldr	r1, [r7, #8]
 800c8b6:	440b      	add	r3, r1
 800c8b8:	881b      	ldrh	r3, [r3, #0]
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	430a      	orrs	r2, r1
 800c8c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	617b      	str	r3, [r7, #20]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	085b      	lsrs	r3, r3, #1
 800c8ce:	697a      	ldr	r2, [r7, #20]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d3e6      	bcc.n	800c8a2 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f003 0301 	and.w	r3, r3, #1
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d009      	beq.n	800c8f2 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	009b      	lsls	r3, r3, #2
 800c8e8:	68ba      	ldr	r2, [r7, #8]
 800c8ea:	4413      	add	r3, r2
 800c8ec:	881a      	ldrh	r2, [r3, #0]
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	681b      	ldr	r3, [r3, #0]
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	371c      	adds	r7, #28
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800c904:	b480      	push	{r7}
 800c906:	b087      	sub	sp, #28
 800c908:	af00      	add	r7, sp, #0
 800c90a:	60f8      	str	r0, [r7, #12]
 800c90c:	60b9      	str	r1, [r7, #8]
 800c90e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c910:	2300      	movs	r3, #0
 800c912:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800c914:	231f      	movs	r3, #31
 800c916:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	f003 0301 	and.w	r3, r3, #1
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d102      	bne.n	800c928 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800c922:	2301      	movs	r3, #1
 800c924:	75fb      	strb	r3, [r7, #23]
 800c926:	e063      	b.n	800c9f0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800c928:	bf00      	nop
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	1e5a      	subs	r2, r3, #1
 800c92e:	613a      	str	r2, [r7, #16]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d009      	beq.n	800c948 <HAL_CRCEx_Polynomial_Set+0x44>
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	f003 031f 	and.w	r3, r3, #31
 800c93a:	68ba      	ldr	r2, [r7, #8]
 800c93c:	fa22 f303 	lsr.w	r3, r2, r3
 800c940:	f003 0301 	and.w	r3, r3, #1
 800c944:	2b00      	cmp	r3, #0
 800c946:	d0f0      	beq.n	800c92a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2b18      	cmp	r3, #24
 800c94c:	d846      	bhi.n	800c9dc <HAL_CRCEx_Polynomial_Set+0xd8>
 800c94e:	a201      	add	r2, pc, #4	@ (adr r2, 800c954 <HAL_CRCEx_Polynomial_Set+0x50>)
 800c950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c954:	0800c9e3 	.word	0x0800c9e3
 800c958:	0800c9dd 	.word	0x0800c9dd
 800c95c:	0800c9dd 	.word	0x0800c9dd
 800c960:	0800c9dd 	.word	0x0800c9dd
 800c964:	0800c9dd 	.word	0x0800c9dd
 800c968:	0800c9dd 	.word	0x0800c9dd
 800c96c:	0800c9dd 	.word	0x0800c9dd
 800c970:	0800c9dd 	.word	0x0800c9dd
 800c974:	0800c9d1 	.word	0x0800c9d1
 800c978:	0800c9dd 	.word	0x0800c9dd
 800c97c:	0800c9dd 	.word	0x0800c9dd
 800c980:	0800c9dd 	.word	0x0800c9dd
 800c984:	0800c9dd 	.word	0x0800c9dd
 800c988:	0800c9dd 	.word	0x0800c9dd
 800c98c:	0800c9dd 	.word	0x0800c9dd
 800c990:	0800c9dd 	.word	0x0800c9dd
 800c994:	0800c9c5 	.word	0x0800c9c5
 800c998:	0800c9dd 	.word	0x0800c9dd
 800c99c:	0800c9dd 	.word	0x0800c9dd
 800c9a0:	0800c9dd 	.word	0x0800c9dd
 800c9a4:	0800c9dd 	.word	0x0800c9dd
 800c9a8:	0800c9dd 	.word	0x0800c9dd
 800c9ac:	0800c9dd 	.word	0x0800c9dd
 800c9b0:	0800c9dd 	.word	0x0800c9dd
 800c9b4:	0800c9b9 	.word	0x0800c9b9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	2b06      	cmp	r3, #6
 800c9bc:	d913      	bls.n	800c9e6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800c9c2:	e010      	b.n	800c9e6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	2b07      	cmp	r3, #7
 800c9c8:	d90f      	bls.n	800c9ea <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800c9ce:	e00c      	b.n	800c9ea <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	2b0f      	cmp	r3, #15
 800c9d4:	d90b      	bls.n	800c9ee <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800c9da:	e008      	b.n	800c9ee <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	75fb      	strb	r3, [r7, #23]
        break;
 800c9e0:	e006      	b.n	800c9f0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800c9e2:	bf00      	nop
 800c9e4:	e004      	b.n	800c9f0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800c9e6:	bf00      	nop
 800c9e8:	e002      	b.n	800c9f0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800c9ea:	bf00      	nop
 800c9ec:	e000      	b.n	800c9f0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800c9ee:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800c9f0:	7dfb      	ldrb	r3, [r7, #23]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d10d      	bne.n	800ca12 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	68ba      	ldr	r2, [r7, #8]
 800c9fc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	689b      	ldr	r3, [r3, #8]
 800ca04:	f023 0118 	bic.w	r1, r3, #24
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	687a      	ldr	r2, [r7, #4]
 800ca0e:	430a      	orrs	r2, r1
 800ca10:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800ca12:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	371c      	adds	r7, #28
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1e:	4770      	bx	lr

0800ca20 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b085      	sub	sp, #20
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d101      	bne.n	800ca32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	e098      	b.n	800cb64 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	461a      	mov	r2, r3
 800ca38:	4b4d      	ldr	r3, [pc, #308]	@ (800cb70 <HAL_DMA_Init+0x150>)
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d80f      	bhi.n	800ca5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	461a      	mov	r2, r3
 800ca44:	4b4b      	ldr	r3, [pc, #300]	@ (800cb74 <HAL_DMA_Init+0x154>)
 800ca46:	4413      	add	r3, r2
 800ca48:	4a4b      	ldr	r2, [pc, #300]	@ (800cb78 <HAL_DMA_Init+0x158>)
 800ca4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ca4e:	091b      	lsrs	r3, r3, #4
 800ca50:	009a      	lsls	r2, r3, #2
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	4a48      	ldr	r2, [pc, #288]	@ (800cb7c <HAL_DMA_Init+0x15c>)
 800ca5a:	641a      	str	r2, [r3, #64]	@ 0x40
 800ca5c:	e00e      	b.n	800ca7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	461a      	mov	r2, r3
 800ca64:	4b46      	ldr	r3, [pc, #280]	@ (800cb80 <HAL_DMA_Init+0x160>)
 800ca66:	4413      	add	r3, r2
 800ca68:	4a43      	ldr	r2, [pc, #268]	@ (800cb78 <HAL_DMA_Init+0x158>)
 800ca6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ca6e:	091b      	lsrs	r3, r3, #4
 800ca70:	009a      	lsls	r2, r3, #2
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	4a42      	ldr	r2, [pc, #264]	@ (800cb84 <HAL_DMA_Init+0x164>)
 800ca7a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2202      	movs	r2, #2
 800ca80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800ca92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800caa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	691b      	ldr	r3, [r3, #16]
 800caa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800caac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	699b      	ldr	r3, [r3, #24]
 800cab2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cab8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6a1b      	ldr	r3, [r3, #32]
 800cabe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800cac0:	68fa      	ldr	r2, [r7, #12]
 800cac2:	4313      	orrs	r3, r2
 800cac4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	68fa      	ldr	r2, [r7, #12]
 800cacc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	689b      	ldr	r3, [r3, #8]
 800cad2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cad6:	d039      	beq.n	800cb4c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cadc:	4a27      	ldr	r2, [pc, #156]	@ (800cb7c <HAL_DMA_Init+0x15c>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d11a      	bne.n	800cb18 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800cae2:	4b29      	ldr	r3, [pc, #164]	@ (800cb88 <HAL_DMA_Init+0x168>)
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800caea:	f003 031c 	and.w	r3, r3, #28
 800caee:	210f      	movs	r1, #15
 800caf0:	fa01 f303 	lsl.w	r3, r1, r3
 800caf4:	43db      	mvns	r3, r3
 800caf6:	4924      	ldr	r1, [pc, #144]	@ (800cb88 <HAL_DMA_Init+0x168>)
 800caf8:	4013      	ands	r3, r2
 800cafa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800cafc:	4b22      	ldr	r3, [pc, #136]	@ (800cb88 <HAL_DMA_Init+0x168>)
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6859      	ldr	r1, [r3, #4]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb08:	f003 031c 	and.w	r3, r3, #28
 800cb0c:	fa01 f303 	lsl.w	r3, r1, r3
 800cb10:	491d      	ldr	r1, [pc, #116]	@ (800cb88 <HAL_DMA_Init+0x168>)
 800cb12:	4313      	orrs	r3, r2
 800cb14:	600b      	str	r3, [r1, #0]
 800cb16:	e019      	b.n	800cb4c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800cb18:	4b1c      	ldr	r3, [pc, #112]	@ (800cb8c <HAL_DMA_Init+0x16c>)
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb20:	f003 031c 	and.w	r3, r3, #28
 800cb24:	210f      	movs	r1, #15
 800cb26:	fa01 f303 	lsl.w	r3, r1, r3
 800cb2a:	43db      	mvns	r3, r3
 800cb2c:	4917      	ldr	r1, [pc, #92]	@ (800cb8c <HAL_DMA_Init+0x16c>)
 800cb2e:	4013      	ands	r3, r2
 800cb30:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800cb32:	4b16      	ldr	r3, [pc, #88]	@ (800cb8c <HAL_DMA_Init+0x16c>)
 800cb34:	681a      	ldr	r2, [r3, #0]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6859      	ldr	r1, [r3, #4]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb3e:	f003 031c 	and.w	r3, r3, #28
 800cb42:	fa01 f303 	lsl.w	r3, r1, r3
 800cb46:	4911      	ldr	r1, [pc, #68]	@ (800cb8c <HAL_DMA_Init+0x16c>)
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2201      	movs	r2, #1
 800cb56:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800cb62:	2300      	movs	r3, #0
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3714      	adds	r7, #20
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6e:	4770      	bx	lr
 800cb70:	40020407 	.word	0x40020407
 800cb74:	bffdfff8 	.word	0xbffdfff8
 800cb78:	cccccccd 	.word	0xcccccccd
 800cb7c:	40020000 	.word	0x40020000
 800cb80:	bffdfbf8 	.word	0xbffdfbf8
 800cb84:	40020400 	.word	0x40020400
 800cb88:	400200a8 	.word	0x400200a8
 800cb8c:	400204a8 	.word	0x400204a8

0800cb90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b086      	sub	sp, #24
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	60f8      	str	r0, [r7, #12]
 800cb98:	60b9      	str	r1, [r7, #8]
 800cb9a:	607a      	str	r2, [r7, #4]
 800cb9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d101      	bne.n	800cbb0 <HAL_DMA_Start_IT+0x20>
 800cbac:	2302      	movs	r3, #2
 800cbae:	e04b      	b.n	800cc48 <HAL_DMA_Start_IT+0xb8>
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800cbbe:	b2db      	uxtb	r3, r3
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	d13a      	bne.n	800cc3a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2202      	movs	r2, #2
 800cbc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	681a      	ldr	r2, [r3, #0]
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f022 0201 	bic.w	r2, r2, #1
 800cbe0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	687a      	ldr	r2, [r7, #4]
 800cbe6:	68b9      	ldr	r1, [r7, #8]
 800cbe8:	68f8      	ldr	r0, [r7, #12]
 800cbea:	f000 f92a 	bl	800ce42 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d008      	beq.n	800cc08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	681a      	ldr	r2, [r3, #0]
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f042 020e 	orr.w	r2, r2, #14
 800cc04:	601a      	str	r2, [r3, #0]
 800cc06:	e00f      	b.n	800cc28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f022 0204 	bic.w	r2, r2, #4
 800cc16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	681a      	ldr	r2, [r3, #0]
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f042 020a 	orr.w	r2, r2, #10
 800cc26:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	681a      	ldr	r2, [r3, #0]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f042 0201 	orr.w	r2, r2, #1
 800cc36:	601a      	str	r2, [r3, #0]
 800cc38:	e005      	b.n	800cc46 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800cc42:	2302      	movs	r3, #2
 800cc44:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800cc46:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3718      	adds	r7, #24
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}

0800cc50 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b085      	sub	sp, #20
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	2b02      	cmp	r3, #2
 800cc66:	d008      	beq.n	800cc7a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2204      	movs	r2, #4
 800cc6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2200      	movs	r2, #0
 800cc72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800cc76:	2301      	movs	r3, #1
 800cc78:	e022      	b.n	800ccc0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	681a      	ldr	r2, [r3, #0]
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f022 020e 	bic.w	r2, r2, #14
 800cc88:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	681a      	ldr	r2, [r3, #0]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f022 0201 	bic.w	r2, r2, #1
 800cc98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc9e:	f003 021c 	and.w	r2, r3, #28
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cca6:	2101      	movs	r1, #1
 800cca8:	fa01 f202 	lsl.w	r2, r1, r2
 800ccac:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800ccbe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3714      	adds	r7, #20
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr

0800cccc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cce8:	f003 031c 	and.w	r3, r3, #28
 800ccec:	2204      	movs	r2, #4
 800ccee:	409a      	lsls	r2, r3
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	4013      	ands	r3, r2
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d026      	beq.n	800cd46 <HAL_DMA_IRQHandler+0x7a>
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	f003 0304 	and.w	r3, r3, #4
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d021      	beq.n	800cd46 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f003 0320 	and.w	r3, r3, #32
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d107      	bne.n	800cd20 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	681a      	ldr	r2, [r3, #0]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f022 0204 	bic.w	r2, r2, #4
 800cd1e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd24:	f003 021c 	and.w	r2, r3, #28
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd2c:	2104      	movs	r1, #4
 800cd2e:	fa01 f202 	lsl.w	r2, r1, r2
 800cd32:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d071      	beq.n	800ce20 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800cd44:	e06c      	b.n	800ce20 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd4a:	f003 031c 	and.w	r3, r3, #28
 800cd4e:	2202      	movs	r2, #2
 800cd50:	409a      	lsls	r2, r3
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	4013      	ands	r3, r2
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d02e      	beq.n	800cdb8 <HAL_DMA_IRQHandler+0xec>
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	f003 0302 	and.w	r3, r3, #2
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d029      	beq.n	800cdb8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f003 0320 	and.w	r3, r3, #32
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d10b      	bne.n	800cd8a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	681a      	ldr	r2, [r3, #0]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f022 020a 	bic.w	r2, r2, #10
 800cd80:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2201      	movs	r2, #1
 800cd86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd8e:	f003 021c 	and.w	r2, r3, #28
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd96:	2102      	movs	r1, #2
 800cd98:	fa01 f202 	lsl.w	r2, r1, r2
 800cd9c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2200      	movs	r2, #0
 800cda2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d038      	beq.n	800ce20 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800cdb6:	e033      	b.n	800ce20 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdbc:	f003 031c 	and.w	r3, r3, #28
 800cdc0:	2208      	movs	r2, #8
 800cdc2:	409a      	lsls	r2, r3
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	4013      	ands	r3, r2
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d02a      	beq.n	800ce22 <HAL_DMA_IRQHandler+0x156>
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	f003 0308 	and.w	r3, r3, #8
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d025      	beq.n	800ce22 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f022 020e 	bic.w	r2, r2, #14
 800cde4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdea:	f003 021c 	and.w	r2, r3, #28
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdf2:	2101      	movs	r1, #1
 800cdf4:	fa01 f202 	lsl.w	r2, r1, r2
 800cdf8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2201      	movs	r2, #1
 800ce04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d004      	beq.n	800ce22 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800ce20:	bf00      	nop
 800ce22:	bf00      	nop
}
 800ce24:	3710      	adds	r7, #16
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}

0800ce2a <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800ce2a:	b480      	push	{r7}
 800ce2c:	b083      	sub	sp, #12
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	370c      	adds	r7, #12
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr

0800ce42 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ce42:	b480      	push	{r7}
 800ce44:	b085      	sub	sp, #20
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	60f8      	str	r0, [r7, #12]
 800ce4a:	60b9      	str	r1, [r7, #8]
 800ce4c:	607a      	str	r2, [r7, #4]
 800ce4e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce54:	f003 021c 	and.w	r2, r3, #28
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce5c:	2101      	movs	r1, #1
 800ce5e:	fa01 f202 	lsl.w	r2, r1, r2
 800ce62:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	683a      	ldr	r2, [r7, #0]
 800ce6a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	689b      	ldr	r3, [r3, #8]
 800ce70:	2b10      	cmp	r3, #16
 800ce72:	d108      	bne.n	800ce86 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	687a      	ldr	r2, [r7, #4]
 800ce7a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	68ba      	ldr	r2, [r7, #8]
 800ce82:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ce84:	e007      	b.n	800ce96 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	68ba      	ldr	r2, [r7, #8]
 800ce8c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	60da      	str	r2, [r3, #12]
}
 800ce96:	bf00      	nop
 800ce98:	3714      	adds	r7, #20
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea0:	4770      	bx	lr
	...

0800cea4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b086      	sub	sp, #24
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	60f8      	str	r0, [r7, #12]
 800ceac:	60b9      	str	r1, [r7, #8]
 800ceae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ceb6:	4b2f      	ldr	r3, [pc, #188]	@ (800cf74 <HAL_FLASH_Program+0xd0>)
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d101      	bne.n	800cec2 <HAL_FLASH_Program+0x1e>
 800cebe:	2302      	movs	r3, #2
 800cec0:	e053      	b.n	800cf6a <HAL_FLASH_Program+0xc6>
 800cec2:	4b2c      	ldr	r3, [pc, #176]	@ (800cf74 <HAL_FLASH_Program+0xd0>)
 800cec4:	2201      	movs	r2, #1
 800cec6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cec8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800cecc:	f000 f8c6 	bl	800d05c <FLASH_WaitForLastOperation>
 800ced0:	4603      	mov	r3, r0
 800ced2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800ced4:	7dfb      	ldrb	r3, [r7, #23]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d143      	bne.n	800cf62 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ceda:	4b26      	ldr	r3, [pc, #152]	@ (800cf74 <HAL_FLASH_Program+0xd0>)
 800cedc:	2200      	movs	r2, #0
 800cede:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800cee0:	4b25      	ldr	r3, [pc, #148]	@ (800cf78 <HAL_FLASH_Program+0xd4>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d009      	beq.n	800cf00 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800ceec:	4b22      	ldr	r3, [pc, #136]	@ (800cf78 <HAL_FLASH_Program+0xd4>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4a21      	ldr	r2, [pc, #132]	@ (800cf78 <HAL_FLASH_Program+0xd4>)
 800cef2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cef6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800cef8:	4b1e      	ldr	r3, [pc, #120]	@ (800cf74 <HAL_FLASH_Program+0xd0>)
 800cefa:	2202      	movs	r2, #2
 800cefc:	771a      	strb	r2, [r3, #28]
 800cefe:	e002      	b.n	800cf06 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800cf00:	4b1c      	ldr	r3, [pc, #112]	@ (800cf74 <HAL_FLASH_Program+0xd0>)
 800cf02:	2200      	movs	r2, #0
 800cf04:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d107      	bne.n	800cf1c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800cf0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf10:	68b8      	ldr	r0, [r7, #8]
 800cf12:	f000 f8f9 	bl	800d108 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800cf16:	2301      	movs	r3, #1
 800cf18:	613b      	str	r3, [r7, #16]
 800cf1a:	e010      	b.n	800cf3e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d002      	beq.n	800cf28 <HAL_FLASH_Program+0x84>
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2b02      	cmp	r3, #2
 800cf26:	d10a      	bne.n	800cf3e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	4619      	mov	r1, r3
 800cf2c:	68b8      	ldr	r0, [r7, #8]
 800cf2e:	f000 f911 	bl	800d154 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2b02      	cmp	r3, #2
 800cf36:	d102      	bne.n	800cf3e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800cf38:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800cf3c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cf3e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800cf42:	f000 f88b 	bl	800d05c <FLASH_WaitForLastOperation>
 800cf46:	4603      	mov	r3, r0
 800cf48:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d006      	beq.n	800cf5e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800cf50:	4b09      	ldr	r3, [pc, #36]	@ (800cf78 <HAL_FLASH_Program+0xd4>)
 800cf52:	695a      	ldr	r2, [r3, #20]
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	43db      	mvns	r3, r3
 800cf58:	4907      	ldr	r1, [pc, #28]	@ (800cf78 <HAL_FLASH_Program+0xd4>)
 800cf5a:	4013      	ands	r3, r2
 800cf5c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800cf5e:	f000 fae5 	bl	800d52c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800cf62:	4b04      	ldr	r3, [pc, #16]	@ (800cf74 <HAL_FLASH_Program+0xd0>)
 800cf64:	2200      	movs	r2, #0
 800cf66:	701a      	strb	r2, [r3, #0]

  return status;
 800cf68:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3718      	adds	r7, #24
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
 800cf72:	bf00      	nop
 800cf74:	2000017c 	.word	0x2000017c
 800cf78:	40022000 	.word	0x40022000

0800cf7c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b083      	sub	sp, #12
 800cf80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800cf82:	2300      	movs	r3, #0
 800cf84:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800cf86:	4b0b      	ldr	r3, [pc, #44]	@ (800cfb4 <HAL_FLASH_Unlock+0x38>)
 800cf88:	695b      	ldr	r3, [r3, #20]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	da0b      	bge.n	800cfa6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800cf8e:	4b09      	ldr	r3, [pc, #36]	@ (800cfb4 <HAL_FLASH_Unlock+0x38>)
 800cf90:	4a09      	ldr	r2, [pc, #36]	@ (800cfb8 <HAL_FLASH_Unlock+0x3c>)
 800cf92:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800cf94:	4b07      	ldr	r3, [pc, #28]	@ (800cfb4 <HAL_FLASH_Unlock+0x38>)
 800cf96:	4a09      	ldr	r2, [pc, #36]	@ (800cfbc <HAL_FLASH_Unlock+0x40>)
 800cf98:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800cf9a:	4b06      	ldr	r3, [pc, #24]	@ (800cfb4 <HAL_FLASH_Unlock+0x38>)
 800cf9c:	695b      	ldr	r3, [r3, #20]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	da01      	bge.n	800cfa6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800cfa6:	79fb      	ldrb	r3, [r7, #7]
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	370c      	adds	r7, #12
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr
 800cfb4:	40022000 	.word	0x40022000
 800cfb8:	45670123 	.word	0x45670123
 800cfbc:	cdef89ab 	.word	0xcdef89ab

0800cfc0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800cfc4:	4b05      	ldr	r3, [pc, #20]	@ (800cfdc <HAL_FLASH_Lock+0x1c>)
 800cfc6:	695b      	ldr	r3, [r3, #20]
 800cfc8:	4a04      	ldr	r2, [pc, #16]	@ (800cfdc <HAL_FLASH_Lock+0x1c>)
 800cfca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cfce:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800cfd0:	2300      	movs	r3, #0
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr
 800cfdc:	40022000 	.word	0x40022000

0800cfe0 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 800cfe4:	4b09      	ldr	r3, [pc, #36]	@ (800d00c <HAL_FLASH_OB_Unlock+0x2c>)
 800cfe6:	695b      	ldr	r3, [r3, #20]
 800cfe8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d007      	beq.n	800d000 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800cff0:	4b06      	ldr	r3, [pc, #24]	@ (800d00c <HAL_FLASH_OB_Unlock+0x2c>)
 800cff2:	4a07      	ldr	r2, [pc, #28]	@ (800d010 <HAL_FLASH_OB_Unlock+0x30>)
 800cff4:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800cff6:	4b05      	ldr	r3, [pc, #20]	@ (800d00c <HAL_FLASH_OB_Unlock+0x2c>)
 800cff8:	4a06      	ldr	r2, [pc, #24]	@ (800d014 <HAL_FLASH_OB_Unlock+0x34>)
 800cffa:	60da      	str	r2, [r3, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800cffc:	2300      	movs	r3, #0
 800cffe:	e000      	b.n	800d002 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800d000:	2301      	movs	r3, #1
}
 800d002:	4618      	mov	r0, r3
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr
 800d00c:	40022000 	.word	0x40022000
 800d010:	08192a3b 	.word	0x08192a3b
 800d014:	4c5d6e7f 	.word	0x4c5d6e7f

0800d018 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800d018:	b480      	push	{r7}
 800d01a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 800d01c:	4b05      	ldr	r3, [pc, #20]	@ (800d034 <HAL_FLASH_OB_Lock+0x1c>)
 800d01e:	695b      	ldr	r3, [r3, #20]
 800d020:	4a04      	ldr	r2, [pc, #16]	@ (800d034 <HAL_FLASH_OB_Lock+0x1c>)
 800d022:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d026:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800d028:	2300      	movs	r3, #0
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr
 800d034:	40022000 	.word	0x40022000

0800d038 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 800d03c:	4b06      	ldr	r3, [pc, #24]	@ (800d058 <HAL_FLASH_OB_Launch+0x20>)
 800d03e:	695b      	ldr	r3, [r3, #20]
 800d040:	4a05      	ldr	r2, [pc, #20]	@ (800d058 <HAL_FLASH_OB_Launch+0x20>)
 800d042:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d046:	6153      	str	r3, [r2, #20]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 800d048:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d04c:	f000 f806 	bl	800d05c <FLASH_WaitForLastOperation>
 800d050:	4603      	mov	r3, r0
}
 800d052:	4618      	mov	r0, r3
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	40022000 	.word	0x40022000

0800d05c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800d064:	f7fd fdde 	bl	800ac24 <HAL_GetTick>
 800d068:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800d06a:	e00d      	b.n	800d088 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d072:	d009      	beq.n	800d088 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800d074:	f7fd fdd6 	bl	800ac24 <HAL_GetTick>
 800d078:	4602      	mov	r2, r0
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	1ad3      	subs	r3, r2, r3
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	429a      	cmp	r2, r3
 800d082:	d801      	bhi.n	800d088 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800d084:	2303      	movs	r3, #3
 800d086:	e036      	b.n	800d0f6 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800d088:	4b1d      	ldr	r3, [pc, #116]	@ (800d100 <FLASH_WaitForLastOperation+0xa4>)
 800d08a:	691b      	ldr	r3, [r3, #16]
 800d08c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d090:	2b00      	cmp	r3, #0
 800d092:	d1eb      	bne.n	800d06c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800d094:	4b1a      	ldr	r3, [pc, #104]	@ (800d100 <FLASH_WaitForLastOperation+0xa4>)
 800d096:	691a      	ldr	r2, [r3, #16]
 800d098:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800d09c:	4013      	ands	r3, r2
 800d09e:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d01d      	beq.n	800d0e2 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800d0a6:	4b17      	ldr	r3, [pc, #92]	@ (800d104 <FLASH_WaitForLastOperation+0xa8>)
 800d0a8:	685a      	ldr	r2, [r3, #4]
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	4313      	orrs	r3, r2
 800d0ae:	4a15      	ldr	r2, [pc, #84]	@ (800d104 <FLASH_WaitForLastOperation+0xa8>)
 800d0b0:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0b8:	d307      	bcc.n	800d0ca <FLASH_WaitForLastOperation+0x6e>
 800d0ba:	4b11      	ldr	r3, [pc, #68]	@ (800d100 <FLASH_WaitForLastOperation+0xa4>)
 800d0bc:	699a      	ldr	r2, [r3, #24]
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800d0c4:	490e      	ldr	r1, [pc, #56]	@ (800d100 <FLASH_WaitForLastOperation+0xa4>)
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	618b      	str	r3, [r1, #24]
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d004      	beq.n	800d0de <FLASH_WaitForLastOperation+0x82>
 800d0d4:	4a0a      	ldr	r2, [pc, #40]	@ (800d100 <FLASH_WaitForLastOperation+0xa4>)
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800d0dc:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	e009      	b.n	800d0f6 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800d0e2:	4b07      	ldr	r3, [pc, #28]	@ (800d100 <FLASH_WaitForLastOperation+0xa4>)
 800d0e4:	691b      	ldr	r3, [r3, #16]
 800d0e6:	f003 0301 	and.w	r3, r3, #1
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d002      	beq.n	800d0f4 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800d0ee:	4b04      	ldr	r3, [pc, #16]	@ (800d100 <FLASH_WaitForLastOperation+0xa4>)
 800d0f0:	2201      	movs	r2, #1
 800d0f2:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800d0f4:	2300      	movs	r3, #0
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3710      	adds	r7, #16
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	40022000 	.word	0x40022000
 800d104:	2000017c 	.word	0x2000017c

0800d108 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800d108:	b480      	push	{r7}
 800d10a:	b085      	sub	sp, #20
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	60f8      	str	r0, [r7, #12]
 800d110:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800d114:	4b0e      	ldr	r3, [pc, #56]	@ (800d150 <FLASH_Program_DoubleWord+0x48>)
 800d116:	695b      	ldr	r3, [r3, #20]
 800d118:	4a0d      	ldr	r2, [pc, #52]	@ (800d150 <FLASH_Program_DoubleWord+0x48>)
 800d11a:	f043 0301 	orr.w	r3, r3, #1
 800d11e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	683a      	ldr	r2, [r7, #0]
 800d124:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800d126:	f3bf 8f6f 	isb	sy
}
 800d12a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800d12c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d130:	f04f 0200 	mov.w	r2, #0
 800d134:	f04f 0300 	mov.w	r3, #0
 800d138:	000a      	movs	r2, r1
 800d13a:	2300      	movs	r3, #0
 800d13c:	68f9      	ldr	r1, [r7, #12]
 800d13e:	3104      	adds	r1, #4
 800d140:	4613      	mov	r3, r2
 800d142:	600b      	str	r3, [r1, #0]
}
 800d144:	bf00      	nop
 800d146:	3714      	adds	r7, #20
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr
 800d150:	40022000 	.word	0x40022000

0800d154 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800d154:	b480      	push	{r7}
 800d156:	b089      	sub	sp, #36	@ 0x24
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800d15e:	2340      	movs	r3, #64	@ 0x40
 800d160:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800d16a:	4b14      	ldr	r3, [pc, #80]	@ (800d1bc <FLASH_Program_Fast+0x68>)
 800d16c:	695b      	ldr	r3, [r3, #20]
 800d16e:	4a13      	ldr	r2, [pc, #76]	@ (800d1bc <FLASH_Program_Fast+0x68>)
 800d170:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d174:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d176:	f3ef 8310 	mrs	r3, PRIMASK
 800d17a:	60fb      	str	r3, [r7, #12]
  return(result);
 800d17c:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800d17e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d180:	b672      	cpsid	i
}
 800d182:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	69bb      	ldr	r3, [r7, #24]
 800d18a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800d18c:	69bb      	ldr	r3, [r7, #24]
 800d18e:	3304      	adds	r3, #4
 800d190:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	3304      	adds	r3, #4
 800d196:	617b      	str	r3, [r7, #20]
    row_index--;
 800d198:	7ffb      	ldrb	r3, [r7, #31]
 800d19a:	3b01      	subs	r3, #1
 800d19c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800d19e:	7ffb      	ldrb	r3, [r7, #31]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d1ef      	bne.n	800d184 <FLASH_Program_Fast+0x30>
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	f383 8810 	msr	PRIMASK, r3
}
 800d1ae:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800d1b0:	bf00      	nop
 800d1b2:	3724      	adds	r7, #36	@ 0x24
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ba:	4770      	bx	lr
 800d1bc:	40022000 	.word	0x40022000

0800d1c0 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b084      	sub	sp, #16
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d1ca:	4b49      	ldr	r3, [pc, #292]	@ (800d2f0 <HAL_FLASHEx_Erase+0x130>)
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	2b01      	cmp	r3, #1
 800d1d0:	d101      	bne.n	800d1d6 <HAL_FLASHEx_Erase+0x16>
 800d1d2:	2302      	movs	r3, #2
 800d1d4:	e087      	b.n	800d2e6 <HAL_FLASHEx_Erase+0x126>
 800d1d6:	4b46      	ldr	r3, [pc, #280]	@ (800d2f0 <HAL_FLASHEx_Erase+0x130>)
 800d1d8:	2201      	movs	r2, #1
 800d1da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d1dc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d1e0:	f7ff ff3c 	bl	800d05c <FLASH_WaitForLastOperation>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800d1e8:	7bfb      	ldrb	r3, [r7, #15]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d177      	bne.n	800d2de <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d1ee:	4b40      	ldr	r3, [pc, #256]	@ (800d2f0 <HAL_FLASHEx_Erase+0x130>)
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800d1f4:	4b3f      	ldr	r3, [pc, #252]	@ (800d2f4 <HAL_FLASHEx_Erase+0x134>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d013      	beq.n	800d228 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800d200:	4b3c      	ldr	r3, [pc, #240]	@ (800d2f4 <HAL_FLASHEx_Erase+0x134>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d009      	beq.n	800d220 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800d20c:	4b39      	ldr	r3, [pc, #228]	@ (800d2f4 <HAL_FLASHEx_Erase+0x134>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4a38      	ldr	r2, [pc, #224]	@ (800d2f4 <HAL_FLASHEx_Erase+0x134>)
 800d212:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d216:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800d218:	4b35      	ldr	r3, [pc, #212]	@ (800d2f0 <HAL_FLASHEx_Erase+0x130>)
 800d21a:	2203      	movs	r2, #3
 800d21c:	771a      	strb	r2, [r3, #28]
 800d21e:	e016      	b.n	800d24e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800d220:	4b33      	ldr	r3, [pc, #204]	@ (800d2f0 <HAL_FLASHEx_Erase+0x130>)
 800d222:	2201      	movs	r2, #1
 800d224:	771a      	strb	r2, [r3, #28]
 800d226:	e012      	b.n	800d24e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800d228:	4b32      	ldr	r3, [pc, #200]	@ (800d2f4 <HAL_FLASHEx_Erase+0x134>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d230:	2b00      	cmp	r3, #0
 800d232:	d009      	beq.n	800d248 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800d234:	4b2f      	ldr	r3, [pc, #188]	@ (800d2f4 <HAL_FLASHEx_Erase+0x134>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4a2e      	ldr	r2, [pc, #184]	@ (800d2f4 <HAL_FLASHEx_Erase+0x134>)
 800d23a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d23e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800d240:	4b2b      	ldr	r3, [pc, #172]	@ (800d2f0 <HAL_FLASHEx_Erase+0x130>)
 800d242:	2202      	movs	r2, #2
 800d244:	771a      	strb	r2, [r3, #28]
 800d246:	e002      	b.n	800d24e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800d248:	4b29      	ldr	r3, [pc, #164]	@ (800d2f0 <HAL_FLASHEx_Erase+0x130>)
 800d24a:	2200      	movs	r2, #0
 800d24c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	2b01      	cmp	r3, #1
 800d254:	d113      	bne.n	800d27e <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	4618      	mov	r0, r3
 800d25c:	f000 f908 	bl	800d470 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d260:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d264:	f7ff fefa 	bl	800d05c <FLASH_WaitForLastOperation>
 800d268:	4603      	mov	r3, r0
 800d26a:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800d26c:	4b21      	ldr	r3, [pc, #132]	@ (800d2f4 <HAL_FLASHEx_Erase+0x134>)
 800d26e:	695b      	ldr	r3, [r3, #20]
 800d270:	4a20      	ldr	r2, [pc, #128]	@ (800d2f4 <HAL_FLASHEx_Erase+0x134>)
 800d272:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d276:	f023 0304 	bic.w	r3, r3, #4
 800d27a:	6153      	str	r3, [r2, #20]
 800d27c:	e02d      	b.n	800d2da <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	f04f 32ff 	mov.w	r2, #4294967295
 800d284:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	689b      	ldr	r3, [r3, #8]
 800d28a:	60bb      	str	r3, [r7, #8]
 800d28c:	e01d      	b.n	800d2ca <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	4619      	mov	r1, r3
 800d294:	68b8      	ldr	r0, [r7, #8]
 800d296:	f000 f913 	bl	800d4c0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d29a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d29e:	f7ff fedd 	bl	800d05c <FLASH_WaitForLastOperation>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800d2a6:	4b13      	ldr	r3, [pc, #76]	@ (800d2f4 <HAL_FLASHEx_Erase+0x134>)
 800d2a8:	695b      	ldr	r3, [r3, #20]
 800d2aa:	4a12      	ldr	r2, [pc, #72]	@ (800d2f4 <HAL_FLASHEx_Erase+0x134>)
 800d2ac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800d2b0:	f023 0302 	bic.w	r3, r3, #2
 800d2b4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800d2b6:	7bfb      	ldrb	r3, [r7, #15]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d003      	beq.n	800d2c4 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	68ba      	ldr	r2, [r7, #8]
 800d2c0:	601a      	str	r2, [r3, #0]
          break;
 800d2c2:	e00a      	b.n	800d2da <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	60bb      	str	r3, [r7, #8]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	689a      	ldr	r2, [r3, #8]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	68db      	ldr	r3, [r3, #12]
 800d2d2:	4413      	add	r3, r2
 800d2d4:	68ba      	ldr	r2, [r7, #8]
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	d3d9      	bcc.n	800d28e <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800d2da:	f000 f927 	bl	800d52c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d2de:	4b04      	ldr	r3, [pc, #16]	@ (800d2f0 <HAL_FLASHEx_Erase+0x130>)
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	701a      	strb	r2, [r3, #0]

  return status;
 800d2e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3710      	adds	r7, #16
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	2000017c 	.word	0x2000017c
 800d2f4:	40022000 	.word	0x40022000

0800d2f8 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b084      	sub	sp, #16
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d300:	2300      	movs	r3, #0
 800d302:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d304:	4b32      	ldr	r3, [pc, #200]	@ (800d3d0 <HAL_FLASHEx_OBProgram+0xd8>)
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d101      	bne.n	800d310 <HAL_FLASHEx_OBProgram+0x18>
 800d30c:	2302      	movs	r3, #2
 800d30e:	e05a      	b.n	800d3c6 <HAL_FLASHEx_OBProgram+0xce>
 800d310:	4b2f      	ldr	r3, [pc, #188]	@ (800d3d0 <HAL_FLASHEx_OBProgram+0xd8>)
 800d312:	2201      	movs	r2, #1
 800d314:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d316:	4b2e      	ldr	r3, [pc, #184]	@ (800d3d0 <HAL_FLASHEx_OBProgram+0xd8>)
 800d318:	2200      	movs	r2, #0
 800d31a:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f003 0301 	and.w	r3, r3, #1
 800d324:	2b00      	cmp	r3, #0
 800d326:	d00d      	beq.n	800d344 <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if(FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6858      	ldr	r0, [r3, #4]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6899      	ldr	r1, [r3, #8]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	461a      	mov	r2, r3
 800d336:	f000 f943 	bl	800d5c0 <FLASH_OB_WRPConfig>
 800d33a:	4603      	mov	r3, r0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d001      	beq.n	800d344 <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 800d340:	2301      	movs	r3, #1
 800d342:	73fb      	strb	r3, [r7, #15]
    }

  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f003 0302 	and.w	r3, r3, #2
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d009      	beq.n	800d364 <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	691b      	ldr	r3, [r3, #16]
 800d354:	4618      	mov	r0, r3
 800d356:	f000 f997 	bl	800d688 <FLASH_OB_RDPConfig>
 800d35a:	4603      	mov	r3, r0
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d001      	beq.n	800d364 <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 800d360:	2301      	movs	r3, #1
 800d362:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* User Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f003 0304 	and.w	r3, r3, #4
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d00c      	beq.n	800d38a <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	695a      	ldr	r2, [r3, #20]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	699b      	ldr	r3, [r3, #24]
 800d378:	4619      	mov	r1, r3
 800d37a:	4610      	mov	r0, r2
 800d37c:	f000 f9b2 	bl	800d6e4 <FLASH_OB_UserConfig>
 800d380:	4603      	mov	r3, r0
 800d382:	2b00      	cmp	r3, #0
 800d384:	d001      	beq.n	800d38a <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 800d386:	2301      	movs	r3, #1
 800d388:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* PCROP Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f003 0308 	and.w	r3, r3, #8
 800d392:	2b00      	cmp	r3, #0
 800d394:	d013      	beq.n	800d3be <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6a1a      	ldr	r2, [r3, #32]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d00d      	beq.n	800d3be <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	69d8      	ldr	r0, [r3, #28]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6a19      	ldr	r1, [r3, #32]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	f000 fa90 	bl	800d8d4 <FLASH_OB_PCROPConfig>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d001      	beq.n	800d3be <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d3be:	4b04      	ldr	r3, [pc, #16]	@ (800d3d0 <HAL_FLASHEx_OBProgram+0xd8>)
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	701a      	strb	r2, [r3, #0]

  return status;
 800d3c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3710      	adds	r7, #16
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	bf00      	nop
 800d3d0:	2000017c 	.word	0x2000017c

0800d3d4 <HAL_FLASHEx_OBGetConfig>:
  *         which area is requested for the WRP and PCROP, else no information will be returned
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b082      	sub	sp, #8
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2206      	movs	r2, #6
 800d3e0:	601a      	str	r2, [r3, #0]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	685b      	ldr	r3, [r3, #4]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d00b      	beq.n	800d402 <HAL_FLASHEx_OBGetConfig+0x2e>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	685b      	ldr	r3, [r3, #4]
 800d3ee:	2b01      	cmp	r3, #1
 800d3f0:	d007      	beq.n	800d402 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	685b      	ldr	r3, [r3, #4]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800d3f6:	2b02      	cmp	r3, #2
 800d3f8:	d003      	beq.n	800d402 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	2b04      	cmp	r3, #4
 800d400:	d10f      	bne.n	800d422 <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f043 0201 	orr.w	r2, r3, #1
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6858      	ldr	r0, [r3, #4]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f103 0108 	add.w	r1, r3, #8
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	330c      	adds	r3, #12
 800d41c:	461a      	mov	r2, r3
 800d41e:	f000 fb05 	bl	800da2c <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800d422:	f000 fb4d 	bl	800dac0 <FLASH_OB_GetRDP>
 800d426:	4602      	mov	r2, r0
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800d42c:	f000 fb62 	bl	800daf4 <FLASH_OB_GetUser>
 800d430:	4602      	mov	r2, r0
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	619a      	str	r2, [r3, #24]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	69db      	ldr	r3, [r3, #28]
 800d43a:	2b01      	cmp	r3, #1
 800d43c:	d003      	beq.n	800d446 <HAL_FLASHEx_OBGetConfig+0x72>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	69db      	ldr	r3, [r3, #28]
 800d442:	2b02      	cmp	r3, #2
 800d444:	d110      	bne.n	800d468 <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if(pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f043 0208 	orr.w	r2, r3, #8
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f103 001c 	add.w	r0, r3, #28
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f103 0120 	add.w	r1, r3, #32
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	3324      	adds	r3, #36	@ 0x24
 800d462:	461a      	mov	r2, r3
 800d464:	f000 fb5a 	bl	800db1c <FLASH_OB_GetPCROP>
  }
}
 800d468:	bf00      	nop
 800d46a:	3708      	adds	r7, #8
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800d470:	b480      	push	{r7}
 800d472:	b083      	sub	sp, #12
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f003 0301 	and.w	r3, r3, #1
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d005      	beq.n	800d48e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800d482:	4b0e      	ldr	r3, [pc, #56]	@ (800d4bc <FLASH_MassErase+0x4c>)
 800d484:	695b      	ldr	r3, [r3, #20]
 800d486:	4a0d      	ldr	r2, [pc, #52]	@ (800d4bc <FLASH_MassErase+0x4c>)
 800d488:	f043 0304 	orr.w	r3, r3, #4
 800d48c:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f003 0302 	and.w	r3, r3, #2
 800d494:	2b00      	cmp	r3, #0
 800d496:	d005      	beq.n	800d4a4 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800d498:	4b08      	ldr	r3, [pc, #32]	@ (800d4bc <FLASH_MassErase+0x4c>)
 800d49a:	695b      	ldr	r3, [r3, #20]
 800d49c:	4a07      	ldr	r2, [pc, #28]	@ (800d4bc <FLASH_MassErase+0x4c>)
 800d49e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d4a2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d4a4:	4b05      	ldr	r3, [pc, #20]	@ (800d4bc <FLASH_MassErase+0x4c>)
 800d4a6:	695b      	ldr	r3, [r3, #20]
 800d4a8:	4a04      	ldr	r2, [pc, #16]	@ (800d4bc <FLASH_MassErase+0x4c>)
 800d4aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d4ae:	6153      	str	r3, [r2, #20]
}
 800d4b0:	bf00      	nop
 800d4b2:	370c      	adds	r7, #12
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr
 800d4bc:	40022000 	.word	0x40022000

0800d4c0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	f003 0301 	and.w	r3, r3, #1
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d006      	beq.n	800d4e2 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800d4d4:	4b14      	ldr	r3, [pc, #80]	@ (800d528 <FLASH_PageErase+0x68>)
 800d4d6:	695b      	ldr	r3, [r3, #20]
 800d4d8:	4a13      	ldr	r2, [pc, #76]	@ (800d528 <FLASH_PageErase+0x68>)
 800d4da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d4de:	6153      	str	r3, [r2, #20]
 800d4e0:	e005      	b.n	800d4ee <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800d4e2:	4b11      	ldr	r3, [pc, #68]	@ (800d528 <FLASH_PageErase+0x68>)
 800d4e4:	695b      	ldr	r3, [r3, #20]
 800d4e6:	4a10      	ldr	r2, [pc, #64]	@ (800d528 <FLASH_PageErase+0x68>)
 800d4e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d4ec:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800d4ee:	4b0e      	ldr	r3, [pc, #56]	@ (800d528 <FLASH_PageErase+0x68>)
 800d4f0:	695b      	ldr	r3, [r3, #20]
 800d4f2:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	00db      	lsls	r3, r3, #3
 800d4fa:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 800d4fe:	490a      	ldr	r1, [pc, #40]	@ (800d528 <FLASH_PageErase+0x68>)
 800d500:	4313      	orrs	r3, r2
 800d502:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800d504:	4b08      	ldr	r3, [pc, #32]	@ (800d528 <FLASH_PageErase+0x68>)
 800d506:	695b      	ldr	r3, [r3, #20]
 800d508:	4a07      	ldr	r2, [pc, #28]	@ (800d528 <FLASH_PageErase+0x68>)
 800d50a:	f043 0302 	orr.w	r3, r3, #2
 800d50e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d510:	4b05      	ldr	r3, [pc, #20]	@ (800d528 <FLASH_PageErase+0x68>)
 800d512:	695b      	ldr	r3, [r3, #20]
 800d514:	4a04      	ldr	r2, [pc, #16]	@ (800d528 <FLASH_PageErase+0x68>)
 800d516:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d51a:	6153      	str	r3, [r2, #20]
}
 800d51c:	bf00      	nop
 800d51e:	370c      	adds	r7, #12
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr
 800d528:	40022000 	.word	0x40022000

0800d52c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800d52c:	b480      	push	{r7}
 800d52e:	b083      	sub	sp, #12
 800d530:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800d532:	4b21      	ldr	r3, [pc, #132]	@ (800d5b8 <FLASH_FlushCaches+0x8c>)
 800d534:	7f1b      	ldrb	r3, [r3, #28]
 800d536:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800d538:	79fb      	ldrb	r3, [r7, #7]
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	d002      	beq.n	800d544 <FLASH_FlushCaches+0x18>
 800d53e:	79fb      	ldrb	r3, [r7, #7]
 800d540:	2b03      	cmp	r3, #3
 800d542:	d117      	bne.n	800d574 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800d544:	4b1d      	ldr	r3, [pc, #116]	@ (800d5bc <FLASH_FlushCaches+0x90>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4a1c      	ldr	r2, [pc, #112]	@ (800d5bc <FLASH_FlushCaches+0x90>)
 800d54a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d54e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800d550:	4b1a      	ldr	r3, [pc, #104]	@ (800d5bc <FLASH_FlushCaches+0x90>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4a19      	ldr	r2, [pc, #100]	@ (800d5bc <FLASH_FlushCaches+0x90>)
 800d556:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d55a:	6013      	str	r3, [r2, #0]
 800d55c:	4b17      	ldr	r3, [pc, #92]	@ (800d5bc <FLASH_FlushCaches+0x90>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a16      	ldr	r2, [pc, #88]	@ (800d5bc <FLASH_FlushCaches+0x90>)
 800d562:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d566:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d568:	4b14      	ldr	r3, [pc, #80]	@ (800d5bc <FLASH_FlushCaches+0x90>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4a13      	ldr	r2, [pc, #76]	@ (800d5bc <FLASH_FlushCaches+0x90>)
 800d56e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d572:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800d574:	79fb      	ldrb	r3, [r7, #7]
 800d576:	2b02      	cmp	r3, #2
 800d578:	d002      	beq.n	800d580 <FLASH_FlushCaches+0x54>
 800d57a:	79fb      	ldrb	r3, [r7, #7]
 800d57c:	2b03      	cmp	r3, #3
 800d57e:	d111      	bne.n	800d5a4 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800d580:	4b0e      	ldr	r3, [pc, #56]	@ (800d5bc <FLASH_FlushCaches+0x90>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	4a0d      	ldr	r2, [pc, #52]	@ (800d5bc <FLASH_FlushCaches+0x90>)
 800d586:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d58a:	6013      	str	r3, [r2, #0]
 800d58c:	4b0b      	ldr	r3, [pc, #44]	@ (800d5bc <FLASH_FlushCaches+0x90>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	4a0a      	ldr	r2, [pc, #40]	@ (800d5bc <FLASH_FlushCaches+0x90>)
 800d592:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d596:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800d598:	4b08      	ldr	r3, [pc, #32]	@ (800d5bc <FLASH_FlushCaches+0x90>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	4a07      	ldr	r2, [pc, #28]	@ (800d5bc <FLASH_FlushCaches+0x90>)
 800d59e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d5a2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800d5a4:	4b04      	ldr	r3, [pc, #16]	@ (800d5b8 <FLASH_FlushCaches+0x8c>)
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	771a      	strb	r2, [r3, #28]
}
 800d5aa:	bf00      	nop
 800d5ac:	370c      	adds	r7, #12
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b4:	4770      	bx	lr
 800d5b6:	bf00      	nop
 800d5b8:	2000017c 	.word	0x2000017c
 800d5bc:	40022000 	.word	0x40022000

0800d5c0 <FLASH_OB_WRPConfig>:
  *          This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1)
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b086      	sub	sp, #24
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	60f8      	str	r0, [r7, #12]
 800d5c8:	60b9      	str	r1, [r7, #8]
 800d5ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d5cc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d5d0:	f7ff fd44 	bl	800d05c <FLASH_WaitForLastOperation>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800d5d8:	7dfb      	ldrb	r3, [r7, #23]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d14c      	bne.n	800d678 <FLASH_OB_WRPConfig+0xb8>
  {
    /* Configure the write protected area */
    if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d10b      	bne.n	800d5fc <FLASH_OB_WRPConfig+0x3c>
    {
      MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
 800d5e4:	4b27      	ldr	r3, [pc, #156]	@ (800d684 <FLASH_OB_WRPConfig+0xc4>)
 800d5e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5e8:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	0419      	lsls	r1, r3, #16
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	430b      	orrs	r3, r1
 800d5f4:	4923      	ldr	r1, [pc, #140]	@ (800d684 <FLASH_OB_WRPConfig+0xc4>)
 800d5f6:	4313      	orrs	r3, r2
 800d5f8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800d5fa:	e02b      	b.n	800d654 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	2b01      	cmp	r3, #1
 800d600:	d10b      	bne.n	800d61a <FLASH_OB_WRPConfig+0x5a>
    {
      MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
 800d602:	4b20      	ldr	r3, [pc, #128]	@ (800d684 <FLASH_OB_WRPConfig+0xc4>)
 800d604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d606:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	0419      	lsls	r1, r3, #16
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	430b      	orrs	r3, r1
 800d612:	491c      	ldr	r1, [pc, #112]	@ (800d684 <FLASH_OB_WRPConfig+0xc4>)
 800d614:	4313      	orrs	r3, r2
 800d616:	630b      	str	r3, [r1, #48]	@ 0x30
 800d618:	e01c      	b.n	800d654 <FLASH_OB_WRPConfig+0x94>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	2b02      	cmp	r3, #2
 800d61e:	d10b      	bne.n	800d638 <FLASH_OB_WRPConfig+0x78>
    {
      MODIFY_REG(FLASH->WRP2AR, (FLASH_WRP2AR_WRP2A_STRT | FLASH_WRP2AR_WRP2A_END),
 800d620:	4b18      	ldr	r3, [pc, #96]	@ (800d684 <FLASH_OB_WRPConfig+0xc4>)
 800d622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d624:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	0419      	lsls	r1, r3, #16
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	430b      	orrs	r3, r1
 800d630:	4914      	ldr	r1, [pc, #80]	@ (800d684 <FLASH_OB_WRPConfig+0xc4>)
 800d632:	4313      	orrs	r3, r2
 800d634:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800d636:	e00d      	b.n	800d654 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2b04      	cmp	r3, #4
 800d63c:	d10a      	bne.n	800d654 <FLASH_OB_WRPConfig+0x94>
    {
      MODIFY_REG(FLASH->WRP2BR, (FLASH_WRP2BR_WRP2B_STRT | FLASH_WRP2BR_WRP2B_END),
 800d63e:	4b11      	ldr	r3, [pc, #68]	@ (800d684 <FLASH_OB_WRPConfig+0xc4>)
 800d640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d642:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	0419      	lsls	r1, r3, #16
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	430b      	orrs	r3, r1
 800d64e:	490d      	ldr	r1, [pc, #52]	@ (800d684 <FLASH_OB_WRPConfig+0xc4>)
 800d650:	4313      	orrs	r3, r2
 800d652:	650b      	str	r3, [r1, #80]	@ 0x50
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800d654:	4b0b      	ldr	r3, [pc, #44]	@ (800d684 <FLASH_OB_WRPConfig+0xc4>)
 800d656:	695b      	ldr	r3, [r3, #20]
 800d658:	4a0a      	ldr	r2, [pc, #40]	@ (800d684 <FLASH_OB_WRPConfig+0xc4>)
 800d65a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d65e:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d660:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d664:	f7ff fcfa 	bl	800d05c <FLASH_WaitForLastOperation>
 800d668:	4603      	mov	r3, r0
 800d66a:	75fb      	strb	r3, [r7, #23]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800d66c:	4b05      	ldr	r3, [pc, #20]	@ (800d684 <FLASH_OB_WRPConfig+0xc4>)
 800d66e:	695b      	ldr	r3, [r3, #20]
 800d670:	4a04      	ldr	r2, [pc, #16]	@ (800d684 <FLASH_OB_WRPConfig+0xc4>)
 800d672:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d676:	6153      	str	r3, [r2, #20]
  }

  return status;
 800d678:	7dfb      	ldrb	r3, [r7, #23]
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3718      	adds	r7, #24
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	40022000 	.word	0x40022000

0800d688 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d690:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d694:	f7ff fce2 	bl	800d05c <FLASH_WaitForLastOperation>
 800d698:	4603      	mov	r3, r0
 800d69a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800d69c:	7bfb      	ldrb	r3, [r7, #15]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d119      	bne.n	800d6d6 <FLASH_OB_RDPConfig+0x4e>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 800d6a2:	4b0f      	ldr	r3, [pc, #60]	@ (800d6e0 <FLASH_OB_RDPConfig+0x58>)
 800d6a4:	6a1b      	ldr	r3, [r3, #32]
 800d6a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d6aa:	490d      	ldr	r1, [pc, #52]	@ (800d6e0 <FLASH_OB_RDPConfig+0x58>)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	4313      	orrs	r3, r2
 800d6b0:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800d6b2:	4b0b      	ldr	r3, [pc, #44]	@ (800d6e0 <FLASH_OB_RDPConfig+0x58>)
 800d6b4:	695b      	ldr	r3, [r3, #20]
 800d6b6:	4a0a      	ldr	r2, [pc, #40]	@ (800d6e0 <FLASH_OB_RDPConfig+0x58>)
 800d6b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d6bc:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d6be:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d6c2:	f7ff fccb 	bl	800d05c <FLASH_WaitForLastOperation>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800d6ca:	4b05      	ldr	r3, [pc, #20]	@ (800d6e0 <FLASH_OB_RDPConfig+0x58>)
 800d6cc:	695b      	ldr	r3, [r3, #20]
 800d6ce:	4a04      	ldr	r2, [pc, #16]	@ (800d6e0 <FLASH_OB_RDPConfig+0x58>)
 800d6d0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d6d4:	6153      	str	r3, [r2, #20]
  }

  return status;
 800d6d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3710      	adds	r7, #16
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	40022000 	.word	0x40022000

0800d6e4 <FLASH_OB_UserConfig>:
  *         DUALBANK(Bit21), nBOOT1(Bit23), SRAM2_PE(Bit24) and SRAM2_RST(Bit25).
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b086      	sub	sp, #24
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d6f6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d6fa:	f7ff fcaf 	bl	800d05c <FLASH_WaitForLastOperation>
 800d6fe:	4603      	mov	r3, r0
 800d700:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800d702:	7bfb      	ldrb	r3, [r7, #15]
 800d704:	2b00      	cmp	r3, #0
 800d706:	f040 80de 	bne.w	800d8c6 <FLASH_OB_UserConfig+0x1e2>
  {
    if((UserType & OB_USER_BOR_LEV) != 0U)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f003 0301 	and.w	r3, r3, #1
 800d710:	2b00      	cmp	r3, #0
 800d712:	d009      	beq.n	800d728 <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d71a:	697a      	ldr	r2, [r7, #20]
 800d71c:	4313      	orrs	r3, r2
 800d71e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800d726:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STOP) != 0U)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f003 0302 	and.w	r3, r3, #2
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d009      	beq.n	800d746 <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d738:	697a      	ldr	r2, [r7, #20]
 800d73a:	4313      	orrs	r3, r2
 800d73c:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d744:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STDBY) != 0U)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f003 0304 	and.w	r3, r3, #4
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d009      	beq.n	800d764 <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d756:	697a      	ldr	r2, [r7, #20]
 800d758:	4313      	orrs	r3, r2
 800d75a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d762:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_SHDW) != 0U)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d009      	beq.n	800d782 <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d774:	697a      	ldr	r2, [r7, #20]
 800d776:	4313      	orrs	r3, r2
 800d778:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d780:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_SW) != 0U)
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f003 0308 	and.w	r3, r3, #8
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d009      	beq.n	800d7a0 <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d792:	697a      	ldr	r2, [r7, #20]
 800d794:	4313      	orrs	r3, r2
 800d796:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 800d798:	693b      	ldr	r3, [r7, #16]
 800d79a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d79e:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STOP) != 0U)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f003 0310 	and.w	r3, r3, #16
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d009      	beq.n	800d7be <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d7b0:	697a      	ldr	r2, [r7, #20]
 800d7b2:	4313      	orrs	r3, r2
 800d7b4:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d7bc:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STDBY) != 0U)
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f003 0320 	and.w	r3, r3, #32
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d009      	beq.n	800d7dc <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d7ce:	697a      	ldr	r2, [r7, #20]
 800d7d0:	4313      	orrs	r3, r2
 800d7d2:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d7da:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_WWDG_SW) != 0U)
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d009      	beq.n	800d7fa <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d7ec:	697a      	ldr	r2, [r7, #20]
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 800d7f2:	693b      	ldr	r3, [r7, #16]
 800d7f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d7f8:	613b      	str	r3, [r7, #16]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_BFB2) != 0U)
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d800:	2b00      	cmp	r3, #0
 800d802:	d009      	beq.n	800d818 <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d80a:	697a      	ldr	r2, [r7, #20]
 800d80c:	4313      	orrs	r3, r2
 800d80e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d816:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_DUALBANK) != 0U)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d009      	beq.n	800d836 <FLASH_OB_UserConfig+0x152>
#else
      /* DUALBANK option byte should be modified */
      assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));

      /* Set value and mask for DUALBANK option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d828:	697a      	ldr	r2, [r7, #20]
 800d82a:	4313      	orrs	r3, r2
 800d82c:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_DUALBANK;
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d834:	613b      	str	r3, [r7, #16]
#endif
    }
#endif

    if((UserType & OB_USER_nBOOT1) != 0U)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d009      	beq.n	800d854 <FLASH_OB_UserConfig+0x170>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d846:	697a      	ldr	r2, [r7, #20]
 800d848:	4313      	orrs	r3, r2
 800d84a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d852:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_PE) != 0U)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d009      	beq.n	800d872 <FLASH_OB_UserConfig+0x18e>
    {
      /* SRAM2_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_PARITY(UserConfig & FLASH_OPTR_SRAM2_PE));

      /* Set value and mask for SRAM2_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_PE);
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d864:	697a      	ldr	r2, [r7, #20]
 800d866:	4313      	orrs	r3, r2
 800d868:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_PE;
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d870:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_RST) != 0U)
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d009      	beq.n	800d890 <FLASH_OB_UserConfig+0x1ac>
    {
      /* SRAM2_RST option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));

      /* Set value and mask for SRAM2_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d882:	697a      	ldr	r2, [r7, #20]
 800d884:	4313      	orrs	r3, r2
 800d886:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800d88e:	613b      	str	r3, [r7, #16]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
    }
#endif

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 800d890:	4b0f      	ldr	r3, [pc, #60]	@ (800d8d0 <FLASH_OB_UserConfig+0x1ec>)
 800d892:	6a1a      	ldr	r2, [r3, #32]
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	43db      	mvns	r3, r3
 800d898:	401a      	ands	r2, r3
 800d89a:	490d      	ldr	r1, [pc, #52]	@ (800d8d0 <FLASH_OB_UserConfig+0x1ec>)
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	4313      	orrs	r3, r2
 800d8a0:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800d8a2:	4b0b      	ldr	r3, [pc, #44]	@ (800d8d0 <FLASH_OB_UserConfig+0x1ec>)
 800d8a4:	695b      	ldr	r3, [r3, #20]
 800d8a6:	4a0a      	ldr	r2, [pc, #40]	@ (800d8d0 <FLASH_OB_UserConfig+0x1ec>)
 800d8a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d8ac:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d8ae:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d8b2:	f7ff fbd3 	bl	800d05c <FLASH_WaitForLastOperation>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800d8ba:	4b05      	ldr	r3, [pc, #20]	@ (800d8d0 <FLASH_OB_UserConfig+0x1ec>)
 800d8bc:	695b      	ldr	r3, [r3, #20]
 800d8be:	4a04      	ldr	r2, [pc, #16]	@ (800d8d0 <FLASH_OB_UserConfig+0x1ec>)
 800d8c0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d8c4:	6153      	str	r3, [r2, #20]
  }

  return status;
 800d8c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3718      	adds	r7, #24
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	40022000 	.word	0x40022000

0800d8d4 <FLASH_OB_PCROPConfig>:
  *          This parameter can be an address between PCROPStartAddr and end of the bank
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b088      	sub	sp, #32
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	60f8      	str	r0, [r7, #12]
 800d8dc:	60b9      	str	r1, [r7, #8]
 800d8de:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d8e0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d8e4:	f7ff fbba 	bl	800d05c <FLASH_WaitForLastOperation>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	77fb      	strb	r3, [r7, #31]

  if(status == HAL_OK)
 800d8ec:	7ffb      	ldrb	r3, [r7, #31]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	f040 808c 	bne.w	800da0c <FLASH_OB_PCROPConfig+0x138>
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800d8f4:	4b48      	ldr	r3, [pc, #288]	@ (800da18 <FLASH_OB_PCROPConfig+0x144>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d115      	bne.n	800d92c <FLASH_OB_PCROPConfig+0x58>
    {
      bank1_addr = FLASH_BASE;
 800d900:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d904:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800d906:	4b45      	ldr	r3, [pc, #276]	@ (800da1c <FLASH_OB_PCROPConfig+0x148>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	b29b      	uxth	r3, r3
 800d90c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d910:	4293      	cmp	r3, r2
 800d912:	d008      	beq.n	800d926 <FLASH_OB_PCROPConfig+0x52>
 800d914:	4b41      	ldr	r3, [pc, #260]	@ (800da1c <FLASH_OB_PCROPConfig+0x148>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	029b      	lsls	r3, r3, #10
 800d91a:	085a      	lsrs	r2, r3, #1
 800d91c:	4b40      	ldr	r3, [pc, #256]	@ (800da20 <FLASH_OB_PCROPConfig+0x14c>)
 800d91e:	4013      	ands	r3, r2
 800d920:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800d924:	e000      	b.n	800d928 <FLASH_OB_PCROPConfig+0x54>
 800d926:	4b3f      	ldr	r3, [pc, #252]	@ (800da24 <FLASH_OB_PCROPConfig+0x150>)
 800d928:	617b      	str	r3, [r7, #20]
 800d92a:	e014      	b.n	800d956 <FLASH_OB_PCROPConfig+0x82>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800d92c:	4b3b      	ldr	r3, [pc, #236]	@ (800da1c <FLASH_OB_PCROPConfig+0x148>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	b29b      	uxth	r3, r3
 800d932:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d936:	4293      	cmp	r3, r2
 800d938:	d008      	beq.n	800d94c <FLASH_OB_PCROPConfig+0x78>
 800d93a:	4b38      	ldr	r3, [pc, #224]	@ (800da1c <FLASH_OB_PCROPConfig+0x148>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	029b      	lsls	r3, r3, #10
 800d940:	085a      	lsrs	r2, r3, #1
 800d942:	4b37      	ldr	r3, [pc, #220]	@ (800da20 <FLASH_OB_PCROPConfig+0x14c>)
 800d944:	4013      	ands	r3, r2
 800d946:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800d94a:	e000      	b.n	800d94e <FLASH_OB_PCROPConfig+0x7a>
 800d94c:	4b35      	ldr	r3, [pc, #212]	@ (800da24 <FLASH_OB_PCROPConfig+0x150>)
 800d94e:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 800d950:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d954:	617b      	str	r3, [r7, #20]
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	f003 0303 	and.w	r3, r3, #3
 800d95c:	2b01      	cmp	r3, #1
 800d95e:	d11a      	bne.n	800d996 <FLASH_OB_PCROPConfig+0xc2>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 800d960:	68ba      	ldr	r2, [r7, #8]
 800d962:	69bb      	ldr	r3, [r7, #24]
 800d964:	1ad3      	subs	r3, r2, r3
 800d966:	08db      	lsrs	r3, r3, #3
 800d968:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 800d96a:	4b2f      	ldr	r3, [pc, #188]	@ (800da28 <FLASH_OB_PCROPConfig+0x154>)
 800d96c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d96e:	0c1b      	lsrs	r3, r3, #16
 800d970:	041b      	lsls	r3, r3, #16
 800d972:	492d      	ldr	r1, [pc, #180]	@ (800da28 <FLASH_OB_PCROPConfig+0x154>)
 800d974:	693a      	ldr	r2, [r7, #16]
 800d976:	4313      	orrs	r3, r2
 800d978:	624b      	str	r3, [r1, #36]	@ 0x24

        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 800d97a:	687a      	ldr	r2, [r7, #4]
 800d97c:	69bb      	ldr	r3, [r7, #24]
 800d97e:	1ad3      	subs	r3, r2, r3
 800d980:	08db      	lsrs	r3, r3, #3
 800d982:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 800d984:	4b28      	ldr	r3, [pc, #160]	@ (800da28 <FLASH_OB_PCROPConfig+0x154>)
 800d986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d988:	0c1b      	lsrs	r3, r3, #16
 800d98a:	041b      	lsls	r3, r3, #16
 800d98c:	4926      	ldr	r1, [pc, #152]	@ (800da28 <FLASH_OB_PCROPConfig+0x154>)
 800d98e:	693a      	ldr	r2, [r7, #16]
 800d990:	4313      	orrs	r3, r2
 800d992:	628b      	str	r3, [r1, #40]	@ 0x28
 800d994:	e01e      	b.n	800d9d4 <FLASH_OB_PCROPConfig+0x100>
      }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	f003 0303 	and.w	r3, r3, #3
 800d99c:	2b02      	cmp	r3, #2
 800d99e:	d119      	bne.n	800d9d4 <FLASH_OB_PCROPConfig+0x100>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 800d9a0:	68ba      	ldr	r2, [r7, #8]
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	1ad3      	subs	r3, r2, r3
 800d9a6:	08db      	lsrs	r3, r3, #3
 800d9a8:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 800d9aa:	4b1f      	ldr	r3, [pc, #124]	@ (800da28 <FLASH_OB_PCROPConfig+0x154>)
 800d9ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9ae:	0c1b      	lsrs	r3, r3, #16
 800d9b0:	041b      	lsls	r3, r3, #16
 800d9b2:	491d      	ldr	r1, [pc, #116]	@ (800da28 <FLASH_OB_PCROPConfig+0x154>)
 800d9b4:	693a      	ldr	r2, [r7, #16]
 800d9b6:	4313      	orrs	r3, r2
 800d9b8:	644b      	str	r3, [r1, #68]	@ 0x44

        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 800d9ba:	687a      	ldr	r2, [r7, #4]
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	1ad3      	subs	r3, r2, r3
 800d9c0:	08db      	lsrs	r3, r3, #3
 800d9c2:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 800d9c4:	4b18      	ldr	r3, [pc, #96]	@ (800da28 <FLASH_OB_PCROPConfig+0x154>)
 800d9c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d9c8:	0c1b      	lsrs	r3, r3, #16
 800d9ca:	041b      	lsls	r3, r3, #16
 800d9cc:	4916      	ldr	r1, [pc, #88]	@ (800da28 <FLASH_OB_PCROPConfig+0x154>)
 800d9ce:	693a      	ldr	r2, [r7, #16]
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	648b      	str	r3, [r1, #72]	@ 0x48
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 800d9d4:	4b14      	ldr	r3, [pc, #80]	@ (800da28 <FLASH_OB_PCROPConfig+0x154>)
 800d9d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d9e2:	4911      	ldr	r1, [pc, #68]	@ (800da28 <FLASH_OB_PCROPConfig+0x154>)
 800d9e4:	4313      	orrs	r3, r2
 800d9e6:	628b      	str	r3, [r1, #40]	@ 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800d9e8:	4b0f      	ldr	r3, [pc, #60]	@ (800da28 <FLASH_OB_PCROPConfig+0x154>)
 800d9ea:	695b      	ldr	r3, [r3, #20]
 800d9ec:	4a0e      	ldr	r2, [pc, #56]	@ (800da28 <FLASH_OB_PCROPConfig+0x154>)
 800d9ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d9f2:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d9f4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d9f8:	f7ff fb30 	bl	800d05c <FLASH_WaitForLastOperation>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	77fb      	strb	r3, [r7, #31]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800da00:	4b09      	ldr	r3, [pc, #36]	@ (800da28 <FLASH_OB_PCROPConfig+0x154>)
 800da02:	695b      	ldr	r3, [r3, #20]
 800da04:	4a08      	ldr	r2, [pc, #32]	@ (800da28 <FLASH_OB_PCROPConfig+0x154>)
 800da06:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800da0a:	6153      	str	r3, [r2, #20]
  }

  return status;
 800da0c:	7ffb      	ldrb	r3, [r7, #31]
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3720      	adds	r7, #32
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
 800da16:	bf00      	nop
 800da18:	40010000 	.word	0x40010000
 800da1c:	1fff75e0 	.word	0x1fff75e0
 800da20:	01fffe00 	.word	0x01fffe00
 800da24:	08080000 	.word	0x08080000
 800da28:	40022000 	.word	0x40022000

0800da2c <FLASH_OB_GetWRP>:
  *                        the write protected area
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t * WRPStartOffset, uint32_t * WRDPEndOffset)
{
 800da2c:	b480      	push	{r7}
 800da2e:	b085      	sub	sp, #20
 800da30:	af00      	add	r7, sp, #0
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	60b9      	str	r1, [r7, #8]
 800da36:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d10b      	bne.n	800da56 <FLASH_OB_GetWRP+0x2a>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 800da3e:	4b1f      	ldr	r3, [pc, #124]	@ (800dabc <FLASH_OB_GetWRP+0x90>)
 800da40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da42:	b2da      	uxtb	r2, r3
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 800da48:	4b1c      	ldr	r3, [pc, #112]	@ (800dabc <FLASH_OB_GetWRP+0x90>)
 800da4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da4c:	0c1b      	lsrs	r3, r3, #16
 800da4e:	b2da      	uxtb	r2, r3
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 800da54:	e02b      	b.n	800daae <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2b01      	cmp	r3, #1
 800da5a:	d10b      	bne.n	800da74 <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 800da5c:	4b17      	ldr	r3, [pc, #92]	@ (800dabc <FLASH_OB_GetWRP+0x90>)
 800da5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da60:	b2da      	uxtb	r2, r3
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 800da66:	4b15      	ldr	r3, [pc, #84]	@ (800dabc <FLASH_OB_GetWRP+0x90>)
 800da68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da6a:	0c1b      	lsrs	r3, r3, #16
 800da6c:	b2da      	uxtb	r2, r3
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	601a      	str	r2, [r3, #0]
}
 800da72:	e01c      	b.n	800daae <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	2b02      	cmp	r3, #2
 800da78:	d10b      	bne.n	800da92 <FLASH_OB_GetWRP+0x66>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 800da7a:	4b10      	ldr	r3, [pc, #64]	@ (800dabc <FLASH_OB_GetWRP+0x90>)
 800da7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da7e:	b2da      	uxtb	r2, r3
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 800da84:	4b0d      	ldr	r3, [pc, #52]	@ (800dabc <FLASH_OB_GetWRP+0x90>)
 800da86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da88:	0c1b      	lsrs	r3, r3, #16
 800da8a:	b2da      	uxtb	r2, r3
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	601a      	str	r2, [r3, #0]
}
 800da90:	e00d      	b.n	800daae <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	2b04      	cmp	r3, #4
 800da96:	d10a      	bne.n	800daae <FLASH_OB_GetWRP+0x82>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 800da98:	4b08      	ldr	r3, [pc, #32]	@ (800dabc <FLASH_OB_GetWRP+0x90>)
 800da9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da9c:	b2da      	uxtb	r2, r3
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 800daa2:	4b06      	ldr	r3, [pc, #24]	@ (800dabc <FLASH_OB_GetWRP+0x90>)
 800daa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800daa6:	0c1b      	lsrs	r3, r3, #16
 800daa8:	b2da      	uxtb	r2, r3
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	601a      	str	r2, [r3, #0]
}
 800daae:	bf00      	nop
 800dab0:	3714      	adds	r7, #20
 800dab2:	46bd      	mov	sp, r7
 800dab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab8:	4770      	bx	lr
 800daba:	bf00      	nop
 800dabc:	40022000 	.word	0x40022000

0800dac0 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 800dac0:	b480      	push	{r7}
 800dac2:	b083      	sub	sp, #12
 800dac4:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800dac6:	4b0a      	ldr	r3, [pc, #40]	@ (800daf0 <FLASH_OB_GetRDP+0x30>)
 800dac8:	6a1b      	ldr	r3, [r3, #32]
 800daca:	b2db      	uxtb	r3, r3
 800dacc:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2baa      	cmp	r3, #170	@ 0xaa
 800dad2:	d004      	beq.n	800dade <FLASH_OB_GetRDP+0x1e>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2bcc      	cmp	r3, #204	@ 0xcc
 800dad8:	d001      	beq.n	800dade <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 800dada:	23bb      	movs	r3, #187	@ 0xbb
 800dadc:	e002      	b.n	800dae4 <FLASH_OB_GetRDP+0x24>
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 800dade:	4b04      	ldr	r3, [pc, #16]	@ (800daf0 <FLASH_OB_GetRDP+0x30>)
 800dae0:	6a1b      	ldr	r3, [r3, #32]
 800dae2:	b2db      	uxtb	r3, r3
  }
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	370c      	adds	r7, #12
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr
 800daf0:	40022000 	.word	0x40022000

0800daf4 <FLASH_OB_GetUser>:
  *         BOR_LEV(Bit8-10), nRST_STOP(Bit12), nRST_STDBY(Bit13), nRST_SHDW(Bit14),
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27).
  */
static uint32_t FLASH_OB_GetUser(void)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b083      	sub	sp, #12
 800daf8:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 800dafa:	4b07      	ldr	r3, [pc, #28]	@ (800db18 <FLASH_OB_GetUser+0x24>)
 800dafc:	6a1b      	ldr	r3, [r3, #32]
 800dafe:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800db06:	607b      	str	r3, [r7, #4]

  return user_config;
 800db08:	687b      	ldr	r3, [r7, #4]
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	370c      	adds	r7, #12
 800db0e:	46bd      	mov	sp, r7
 800db10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db14:	4770      	bx	lr
 800db16:	bf00      	nop
 800db18:	40022000 	.word	0x40022000

0800db1c <FLASH_OB_GetPCROP>:
  *                       the Proprietary code readout protection
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t * PCROPConfig, uint32_t * PCROPStartAddr, uint32_t * PCROPEndAddr)
{
 800db1c:	b480      	push	{r7}
 800db1e:	b089      	sub	sp, #36	@ 0x24
 800db20:	af00      	add	r7, sp, #0
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	607a      	str	r2, [r7, #4]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800db28:	4b3b      	ldr	r3, [pc, #236]	@ (800dc18 <FLASH_OB_GetPCROP+0xfc>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db30:	2b00      	cmp	r3, #0
 800db32:	d115      	bne.n	800db60 <FLASH_OB_GetPCROP+0x44>
  {
    bank1_addr = FLASH_BASE;
 800db34:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800db38:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800db3a:	4b38      	ldr	r3, [pc, #224]	@ (800dc1c <FLASH_OB_GetPCROP+0x100>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	b29b      	uxth	r3, r3
 800db40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800db44:	4293      	cmp	r3, r2
 800db46:	d008      	beq.n	800db5a <FLASH_OB_GetPCROP+0x3e>
 800db48:	4b34      	ldr	r3, [pc, #208]	@ (800dc1c <FLASH_OB_GetPCROP+0x100>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	029b      	lsls	r3, r3, #10
 800db4e:	085a      	lsrs	r2, r3, #1
 800db50:	4b33      	ldr	r3, [pc, #204]	@ (800dc20 <FLASH_OB_GetPCROP+0x104>)
 800db52:	4013      	ands	r3, r2
 800db54:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800db58:	e000      	b.n	800db5c <FLASH_OB_GetPCROP+0x40>
 800db5a:	4b32      	ldr	r3, [pc, #200]	@ (800dc24 <FLASH_OB_GetPCROP+0x108>)
 800db5c:	61bb      	str	r3, [r7, #24]
 800db5e:	e014      	b.n	800db8a <FLASH_OB_GetPCROP+0x6e>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800db60:	4b2e      	ldr	r3, [pc, #184]	@ (800dc1c <FLASH_OB_GetPCROP+0x100>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	b29b      	uxth	r3, r3
 800db66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800db6a:	4293      	cmp	r3, r2
 800db6c:	d008      	beq.n	800db80 <FLASH_OB_GetPCROP+0x64>
 800db6e:	4b2b      	ldr	r3, [pc, #172]	@ (800dc1c <FLASH_OB_GetPCROP+0x100>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	029b      	lsls	r3, r3, #10
 800db74:	085a      	lsrs	r2, r3, #1
 800db76:	4b2a      	ldr	r3, [pc, #168]	@ (800dc20 <FLASH_OB_GetPCROP+0x104>)
 800db78:	4013      	ands	r3, r2
 800db7a:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800db7e:	e000      	b.n	800db82 <FLASH_OB_GetPCROP+0x66>
 800db80:	4b28      	ldr	r3, [pc, #160]	@ (800dc24 <FLASH_OB_GetPCROP+0x108>)
 800db82:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 800db84:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800db88:	61bb      	str	r3, [r7, #24]
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	f003 0303 	and.w	r3, r3, #3
 800db92:	2b01      	cmp	r3, #1
 800db94:	d115      	bne.n	800dbc2 <FLASH_OB_GetPCROP+0xa6>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 800db96:	4b24      	ldr	r3, [pc, #144]	@ (800dc28 <FLASH_OB_GetPCROP+0x10c>)
 800db98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db9a:	b29b      	uxth	r3, r3
 800db9c:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	00da      	lsls	r2, r3, #3
 800dba2:	69fb      	ldr	r3, [r7, #28]
 800dba4:	441a      	add	r2, r3
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 800dbaa:	4b1f      	ldr	r3, [pc, #124]	@ (800dc28 <FLASH_OB_GetPCROP+0x10c>)
 800dbac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbae:	b29b      	uxth	r3, r3
 800dbb0:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	00da      	lsls	r2, r3, #3
 800dbb6:	69fb      	ldr	r3, [r7, #28]
 800dbb8:	4413      	add	r3, r2
 800dbba:	1dda      	adds	r2, r3, #7
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	601a      	str	r2, [r3, #0]
 800dbc0:	e01a      	b.n	800dbf8 <FLASH_OB_GetPCROP+0xdc>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	f003 0303 	and.w	r3, r3, #3
 800dbca:	2b02      	cmp	r3, #2
 800dbcc:	d114      	bne.n	800dbf8 <FLASH_OB_GetPCROP+0xdc>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 800dbce:	4b16      	ldr	r3, [pc, #88]	@ (800dc28 <FLASH_OB_GetPCROP+0x10c>)
 800dbd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dbd2:	b29b      	uxth	r3, r3
 800dbd4:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	00da      	lsls	r2, r3, #3
 800dbda:	69bb      	ldr	r3, [r7, #24]
 800dbdc:	441a      	add	r2, r3
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 800dbe2:	4b11      	ldr	r3, [pc, #68]	@ (800dc28 <FLASH_OB_GetPCROP+0x10c>)
 800dbe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dbe6:	b29b      	uxth	r3, r3
 800dbe8:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr + 0x7U;
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	00da      	lsls	r2, r3, #3
 800dbee:	69bb      	ldr	r3, [r7, #24]
 800dbf0:	4413      	add	r3, r2
 800dbf2:	1dda      	adds	r2, r3, #7
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 800dbf8:	4b0b      	ldr	r3, [pc, #44]	@ (800dc28 <FLASH_OB_GetPCROP+0x10c>)
 800dbfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbfc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	431a      	orrs	r2, r3
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	601a      	str	r2, [r3, #0]
}
 800dc0a:	bf00      	nop
 800dc0c:	3724      	adds	r7, #36	@ 0x24
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc14:	4770      	bx	lr
 800dc16:	bf00      	nop
 800dc18:	40010000 	.word	0x40010000
 800dc1c:	1fff75e0 	.word	0x1fff75e0
 800dc20:	01fffe00 	.word	0x01fffe00
 800dc24:	08080000 	.word	0x08080000
 800dc28:	40022000 	.word	0x40022000

0800dc2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b087      	sub	sp, #28
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800dc36:	2300      	movs	r3, #0
 800dc38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800dc3a:	e17f      	b.n	800df3c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	681a      	ldr	r2, [r3, #0]
 800dc40:	2101      	movs	r1, #1
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	fa01 f303 	lsl.w	r3, r1, r3
 800dc48:	4013      	ands	r3, r2
 800dc4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	f000 8171 	beq.w	800df36 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	685b      	ldr	r3, [r3, #4]
 800dc58:	f003 0303 	and.w	r3, r3, #3
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	d005      	beq.n	800dc6c <HAL_GPIO_Init+0x40>
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	685b      	ldr	r3, [r3, #4]
 800dc64:	f003 0303 	and.w	r3, r3, #3
 800dc68:	2b02      	cmp	r3, #2
 800dc6a:	d130      	bne.n	800dcce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	689b      	ldr	r3, [r3, #8]
 800dc70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	005b      	lsls	r3, r3, #1
 800dc76:	2203      	movs	r2, #3
 800dc78:	fa02 f303 	lsl.w	r3, r2, r3
 800dc7c:	43db      	mvns	r3, r3
 800dc7e:	693a      	ldr	r2, [r7, #16]
 800dc80:	4013      	ands	r3, r2
 800dc82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	68da      	ldr	r2, [r3, #12]
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	005b      	lsls	r3, r3, #1
 800dc8c:	fa02 f303 	lsl.w	r3, r2, r3
 800dc90:	693a      	ldr	r2, [r7, #16]
 800dc92:	4313      	orrs	r3, r2
 800dc94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	693a      	ldr	r2, [r7, #16]
 800dc9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	685b      	ldr	r3, [r3, #4]
 800dca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800dca2:	2201      	movs	r2, #1
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	fa02 f303 	lsl.w	r3, r2, r3
 800dcaa:	43db      	mvns	r3, r3
 800dcac:	693a      	ldr	r2, [r7, #16]
 800dcae:	4013      	ands	r3, r2
 800dcb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	685b      	ldr	r3, [r3, #4]
 800dcb6:	091b      	lsrs	r3, r3, #4
 800dcb8:	f003 0201 	and.w	r2, r3, #1
 800dcbc:	697b      	ldr	r3, [r7, #20]
 800dcbe:	fa02 f303 	lsl.w	r3, r2, r3
 800dcc2:	693a      	ldr	r2, [r7, #16]
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	693a      	ldr	r2, [r7, #16]
 800dccc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	685b      	ldr	r3, [r3, #4]
 800dcd2:	f003 0303 	and.w	r3, r3, #3
 800dcd6:	2b03      	cmp	r3, #3
 800dcd8:	d118      	bne.n	800dd0c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800dce0:	2201      	movs	r2, #1
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	fa02 f303 	lsl.w	r3, r2, r3
 800dce8:	43db      	mvns	r3, r3
 800dcea:	693a      	ldr	r2, [r7, #16]
 800dcec:	4013      	ands	r3, r2
 800dcee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	685b      	ldr	r3, [r3, #4]
 800dcf4:	08db      	lsrs	r3, r3, #3
 800dcf6:	f003 0201 	and.w	r2, r3, #1
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	fa02 f303 	lsl.w	r3, r2, r3
 800dd00:	693a      	ldr	r2, [r7, #16]
 800dd02:	4313      	orrs	r3, r2
 800dd04:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	693a      	ldr	r2, [r7, #16]
 800dd0a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	f003 0303 	and.w	r3, r3, #3
 800dd14:	2b03      	cmp	r3, #3
 800dd16:	d017      	beq.n	800dd48 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	68db      	ldr	r3, [r3, #12]
 800dd1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	005b      	lsls	r3, r3, #1
 800dd22:	2203      	movs	r2, #3
 800dd24:	fa02 f303 	lsl.w	r3, r2, r3
 800dd28:	43db      	mvns	r3, r3
 800dd2a:	693a      	ldr	r2, [r7, #16]
 800dd2c:	4013      	ands	r3, r2
 800dd2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	689a      	ldr	r2, [r3, #8]
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	005b      	lsls	r3, r3, #1
 800dd38:	fa02 f303 	lsl.w	r3, r2, r3
 800dd3c:	693a      	ldr	r2, [r7, #16]
 800dd3e:	4313      	orrs	r3, r2
 800dd40:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	693a      	ldr	r2, [r7, #16]
 800dd46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	685b      	ldr	r3, [r3, #4]
 800dd4c:	f003 0303 	and.w	r3, r3, #3
 800dd50:	2b02      	cmp	r3, #2
 800dd52:	d123      	bne.n	800dd9c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	08da      	lsrs	r2, r3, #3
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	3208      	adds	r2, #8
 800dd5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd60:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	f003 0307 	and.w	r3, r3, #7
 800dd68:	009b      	lsls	r3, r3, #2
 800dd6a:	220f      	movs	r2, #15
 800dd6c:	fa02 f303 	lsl.w	r3, r2, r3
 800dd70:	43db      	mvns	r3, r3
 800dd72:	693a      	ldr	r2, [r7, #16]
 800dd74:	4013      	ands	r3, r2
 800dd76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	691a      	ldr	r2, [r3, #16]
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	f003 0307 	and.w	r3, r3, #7
 800dd82:	009b      	lsls	r3, r3, #2
 800dd84:	fa02 f303 	lsl.w	r3, r2, r3
 800dd88:	693a      	ldr	r2, [r7, #16]
 800dd8a:	4313      	orrs	r3, r2
 800dd8c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	08da      	lsrs	r2, r3, #3
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	3208      	adds	r2, #8
 800dd96:	6939      	ldr	r1, [r7, #16]
 800dd98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	005b      	lsls	r3, r3, #1
 800dda6:	2203      	movs	r2, #3
 800dda8:	fa02 f303 	lsl.w	r3, r2, r3
 800ddac:	43db      	mvns	r3, r3
 800ddae:	693a      	ldr	r2, [r7, #16]
 800ddb0:	4013      	ands	r3, r2
 800ddb2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	685b      	ldr	r3, [r3, #4]
 800ddb8:	f003 0203 	and.w	r2, r3, #3
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	005b      	lsls	r3, r3, #1
 800ddc0:	fa02 f303 	lsl.w	r3, r2, r3
 800ddc4:	693a      	ldr	r2, [r7, #16]
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	693a      	ldr	r2, [r7, #16]
 800ddce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	685b      	ldr	r3, [r3, #4]
 800ddd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	f000 80ac 	beq.w	800df36 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ddde:	4b5f      	ldr	r3, [pc, #380]	@ (800df5c <HAL_GPIO_Init+0x330>)
 800dde0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dde2:	4a5e      	ldr	r2, [pc, #376]	@ (800df5c <HAL_GPIO_Init+0x330>)
 800dde4:	f043 0301 	orr.w	r3, r3, #1
 800dde8:	6613      	str	r3, [r2, #96]	@ 0x60
 800ddea:	4b5c      	ldr	r3, [pc, #368]	@ (800df5c <HAL_GPIO_Init+0x330>)
 800ddec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ddee:	f003 0301 	and.w	r3, r3, #1
 800ddf2:	60bb      	str	r3, [r7, #8]
 800ddf4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800ddf6:	4a5a      	ldr	r2, [pc, #360]	@ (800df60 <HAL_GPIO_Init+0x334>)
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	089b      	lsrs	r3, r3, #2
 800ddfc:	3302      	adds	r3, #2
 800ddfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de02:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	f003 0303 	and.w	r3, r3, #3
 800de0a:	009b      	lsls	r3, r3, #2
 800de0c:	220f      	movs	r2, #15
 800de0e:	fa02 f303 	lsl.w	r3, r2, r3
 800de12:	43db      	mvns	r3, r3
 800de14:	693a      	ldr	r2, [r7, #16]
 800de16:	4013      	ands	r3, r2
 800de18:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800de20:	d025      	beq.n	800de6e <HAL_GPIO_Init+0x242>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	4a4f      	ldr	r2, [pc, #316]	@ (800df64 <HAL_GPIO_Init+0x338>)
 800de26:	4293      	cmp	r3, r2
 800de28:	d01f      	beq.n	800de6a <HAL_GPIO_Init+0x23e>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	4a4e      	ldr	r2, [pc, #312]	@ (800df68 <HAL_GPIO_Init+0x33c>)
 800de2e:	4293      	cmp	r3, r2
 800de30:	d019      	beq.n	800de66 <HAL_GPIO_Init+0x23a>
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	4a4d      	ldr	r2, [pc, #308]	@ (800df6c <HAL_GPIO_Init+0x340>)
 800de36:	4293      	cmp	r3, r2
 800de38:	d013      	beq.n	800de62 <HAL_GPIO_Init+0x236>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	4a4c      	ldr	r2, [pc, #304]	@ (800df70 <HAL_GPIO_Init+0x344>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d00d      	beq.n	800de5e <HAL_GPIO_Init+0x232>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	4a4b      	ldr	r2, [pc, #300]	@ (800df74 <HAL_GPIO_Init+0x348>)
 800de46:	4293      	cmp	r3, r2
 800de48:	d007      	beq.n	800de5a <HAL_GPIO_Init+0x22e>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	4a4a      	ldr	r2, [pc, #296]	@ (800df78 <HAL_GPIO_Init+0x34c>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	d101      	bne.n	800de56 <HAL_GPIO_Init+0x22a>
 800de52:	2306      	movs	r3, #6
 800de54:	e00c      	b.n	800de70 <HAL_GPIO_Init+0x244>
 800de56:	2307      	movs	r3, #7
 800de58:	e00a      	b.n	800de70 <HAL_GPIO_Init+0x244>
 800de5a:	2305      	movs	r3, #5
 800de5c:	e008      	b.n	800de70 <HAL_GPIO_Init+0x244>
 800de5e:	2304      	movs	r3, #4
 800de60:	e006      	b.n	800de70 <HAL_GPIO_Init+0x244>
 800de62:	2303      	movs	r3, #3
 800de64:	e004      	b.n	800de70 <HAL_GPIO_Init+0x244>
 800de66:	2302      	movs	r3, #2
 800de68:	e002      	b.n	800de70 <HAL_GPIO_Init+0x244>
 800de6a:	2301      	movs	r3, #1
 800de6c:	e000      	b.n	800de70 <HAL_GPIO_Init+0x244>
 800de6e:	2300      	movs	r3, #0
 800de70:	697a      	ldr	r2, [r7, #20]
 800de72:	f002 0203 	and.w	r2, r2, #3
 800de76:	0092      	lsls	r2, r2, #2
 800de78:	4093      	lsls	r3, r2
 800de7a:	693a      	ldr	r2, [r7, #16]
 800de7c:	4313      	orrs	r3, r2
 800de7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800de80:	4937      	ldr	r1, [pc, #220]	@ (800df60 <HAL_GPIO_Init+0x334>)
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	089b      	lsrs	r3, r3, #2
 800de86:	3302      	adds	r3, #2
 800de88:	693a      	ldr	r2, [r7, #16]
 800de8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800de8e:	4b3b      	ldr	r3, [pc, #236]	@ (800df7c <HAL_GPIO_Init+0x350>)
 800de90:	689b      	ldr	r3, [r3, #8]
 800de92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	43db      	mvns	r3, r3
 800de98:	693a      	ldr	r2, [r7, #16]
 800de9a:	4013      	ands	r3, r2
 800de9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	685b      	ldr	r3, [r3, #4]
 800dea2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d003      	beq.n	800deb2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800deaa:	693a      	ldr	r2, [r7, #16]
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	4313      	orrs	r3, r2
 800deb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800deb2:	4a32      	ldr	r2, [pc, #200]	@ (800df7c <HAL_GPIO_Init+0x350>)
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800deb8:	4b30      	ldr	r3, [pc, #192]	@ (800df7c <HAL_GPIO_Init+0x350>)
 800deba:	68db      	ldr	r3, [r3, #12]
 800debc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	43db      	mvns	r3, r3
 800dec2:	693a      	ldr	r2, [r7, #16]
 800dec4:	4013      	ands	r3, r2
 800dec6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	685b      	ldr	r3, [r3, #4]
 800decc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d003      	beq.n	800dedc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800ded4:	693a      	ldr	r2, [r7, #16]
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	4313      	orrs	r3, r2
 800deda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800dedc:	4a27      	ldr	r2, [pc, #156]	@ (800df7c <HAL_GPIO_Init+0x350>)
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800dee2:	4b26      	ldr	r3, [pc, #152]	@ (800df7c <HAL_GPIO_Init+0x350>)
 800dee4:	685b      	ldr	r3, [r3, #4]
 800dee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	43db      	mvns	r3, r3
 800deec:	693a      	ldr	r2, [r7, #16]
 800deee:	4013      	ands	r3, r2
 800def0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	685b      	ldr	r3, [r3, #4]
 800def6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800defa:	2b00      	cmp	r3, #0
 800defc:	d003      	beq.n	800df06 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800defe:	693a      	ldr	r2, [r7, #16]
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	4313      	orrs	r3, r2
 800df04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800df06:	4a1d      	ldr	r2, [pc, #116]	@ (800df7c <HAL_GPIO_Init+0x350>)
 800df08:	693b      	ldr	r3, [r7, #16]
 800df0a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800df0c:	4b1b      	ldr	r3, [pc, #108]	@ (800df7c <HAL_GPIO_Init+0x350>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	43db      	mvns	r3, r3
 800df16:	693a      	ldr	r2, [r7, #16]
 800df18:	4013      	ands	r3, r2
 800df1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800df24:	2b00      	cmp	r3, #0
 800df26:	d003      	beq.n	800df30 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800df28:	693a      	ldr	r2, [r7, #16]
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	4313      	orrs	r3, r2
 800df2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800df30:	4a12      	ldr	r2, [pc, #72]	@ (800df7c <HAL_GPIO_Init+0x350>)
 800df32:	693b      	ldr	r3, [r7, #16]
 800df34:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	3301      	adds	r3, #1
 800df3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	fa22 f303 	lsr.w	r3, r2, r3
 800df46:	2b00      	cmp	r3, #0
 800df48:	f47f ae78 	bne.w	800dc3c <HAL_GPIO_Init+0x10>
  }
}
 800df4c:	bf00      	nop
 800df4e:	bf00      	nop
 800df50:	371c      	adds	r7, #28
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr
 800df5a:	bf00      	nop
 800df5c:	40021000 	.word	0x40021000
 800df60:	40010000 	.word	0x40010000
 800df64:	48000400 	.word	0x48000400
 800df68:	48000800 	.word	0x48000800
 800df6c:	48000c00 	.word	0x48000c00
 800df70:	48001000 	.word	0x48001000
 800df74:	48001400 	.word	0x48001400
 800df78:	48001800 	.word	0x48001800
 800df7c:	40010400 	.word	0x40010400

0800df80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800df80:	b480      	push	{r7}
 800df82:	b083      	sub	sp, #12
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	460b      	mov	r3, r1
 800df8a:	807b      	strh	r3, [r7, #2]
 800df8c:	4613      	mov	r3, r2
 800df8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800df90:	787b      	ldrb	r3, [r7, #1]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d003      	beq.n	800df9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800df96:	887a      	ldrh	r2, [r7, #2]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800df9c:	e002      	b.n	800dfa4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800df9e:	887a      	ldrh	r2, [r7, #2]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800dfa4:	bf00      	nop
 800dfa6:	370c      	adds	r7, #12
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfae:	4770      	bx	lr

0800dfb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d101      	bne.n	800dfc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	e08d      	b.n	800e0de <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dfc8:	b2db      	uxtb	r3, r3
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d106      	bne.n	800dfdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f7f9 f900 	bl	80071dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2224      	movs	r2, #36	@ 0x24
 800dfe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	681a      	ldr	r2, [r3, #0]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f022 0201 	bic.w	r2, r2, #1
 800dff2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	685a      	ldr	r2, [r3, #4]
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800e000:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	689a      	ldr	r2, [r3, #8]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e010:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	68db      	ldr	r3, [r3, #12]
 800e016:	2b01      	cmp	r3, #1
 800e018:	d107      	bne.n	800e02a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	689a      	ldr	r2, [r3, #8]
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e026:	609a      	str	r2, [r3, #8]
 800e028:	e006      	b.n	800e038 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	689a      	ldr	r2, [r3, #8]
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800e036:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	68db      	ldr	r3, [r3, #12]
 800e03c:	2b02      	cmp	r3, #2
 800e03e:	d108      	bne.n	800e052 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	685a      	ldr	r2, [r3, #4]
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e04e:	605a      	str	r2, [r3, #4]
 800e050:	e007      	b.n	800e062 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	685a      	ldr	r2, [r3, #4]
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e060:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	685b      	ldr	r3, [r3, #4]
 800e068:	687a      	ldr	r2, [r7, #4]
 800e06a:	6812      	ldr	r2, [r2, #0]
 800e06c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800e070:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e074:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	68da      	ldr	r2, [r3, #12]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e084:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	691a      	ldr	r2, [r3, #16]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	695b      	ldr	r3, [r3, #20]
 800e08e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	699b      	ldr	r3, [r3, #24]
 800e096:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	430a      	orrs	r2, r1
 800e09e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	69d9      	ldr	r1, [r3, #28]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6a1a      	ldr	r2, [r3, #32]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	430a      	orrs	r2, r1
 800e0ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	681a      	ldr	r2, [r3, #0]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f042 0201 	orr.w	r2, r2, #1
 800e0be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2220      	movs	r2, #32
 800e0ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800e0dc:	2300      	movs	r3, #0
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3708      	adds	r7, #8
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
	...

0800e0e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b088      	sub	sp, #32
 800e0ec:	af02      	add	r7, sp, #8
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	607a      	str	r2, [r7, #4]
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	460b      	mov	r3, r1
 800e0f6:	817b      	strh	r3, [r7, #10]
 800e0f8:	4613      	mov	r3, r2
 800e0fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e102:	b2db      	uxtb	r3, r3
 800e104:	2b20      	cmp	r3, #32
 800e106:	f040 80fd 	bne.w	800e304 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e110:	2b01      	cmp	r3, #1
 800e112:	d101      	bne.n	800e118 <HAL_I2C_Master_Transmit+0x30>
 800e114:	2302      	movs	r3, #2
 800e116:	e0f6      	b.n	800e306 <HAL_I2C_Master_Transmit+0x21e>
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	2201      	movs	r2, #1
 800e11c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e120:	f7fc fd80 	bl	800ac24 <HAL_GetTick>
 800e124:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	9300      	str	r3, [sp, #0]
 800e12a:	2319      	movs	r3, #25
 800e12c:	2201      	movs	r2, #1
 800e12e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e132:	68f8      	ldr	r0, [r7, #12]
 800e134:	f000 fa0a 	bl	800e54c <I2C_WaitOnFlagUntilTimeout>
 800e138:	4603      	mov	r3, r0
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d001      	beq.n	800e142 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800e13e:	2301      	movs	r3, #1
 800e140:	e0e1      	b.n	800e306 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2221      	movs	r2, #33	@ 0x21
 800e146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	2210      	movs	r2, #16
 800e14e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2200      	movs	r2, #0
 800e156:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	687a      	ldr	r2, [r7, #4]
 800e15c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	893a      	ldrh	r2, [r7, #8]
 800e162:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2200      	movs	r2, #0
 800e168:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e16e:	b29b      	uxth	r3, r3
 800e170:	2bff      	cmp	r3, #255	@ 0xff
 800e172:	d906      	bls.n	800e182 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	22ff      	movs	r2, #255	@ 0xff
 800e178:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800e17a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e17e:	617b      	str	r3, [r7, #20]
 800e180:	e007      	b.n	800e192 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e186:	b29a      	uxth	r2, r3
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800e18c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e190:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e196:	2b00      	cmp	r3, #0
 800e198:	d024      	beq.n	800e1e4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e19e:	781a      	ldrb	r2, [r3, #0]
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1aa:	1c5a      	adds	r2, r3, #1
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e1b4:	b29b      	uxth	r3, r3
 800e1b6:	3b01      	subs	r3, #1
 800e1b8:	b29a      	uxth	r2, r3
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1c2:	3b01      	subs	r3, #1
 800e1c4:	b29a      	uxth	r2, r3
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1ce:	b2db      	uxtb	r3, r3
 800e1d0:	3301      	adds	r3, #1
 800e1d2:	b2da      	uxtb	r2, r3
 800e1d4:	8979      	ldrh	r1, [r7, #10]
 800e1d6:	4b4e      	ldr	r3, [pc, #312]	@ (800e310 <HAL_I2C_Master_Transmit+0x228>)
 800e1d8:	9300      	str	r3, [sp, #0]
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	68f8      	ldr	r0, [r7, #12]
 800e1de:	f000 fc05 	bl	800e9ec <I2C_TransferConfig>
 800e1e2:	e066      	b.n	800e2b2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1e8:	b2da      	uxtb	r2, r3
 800e1ea:	8979      	ldrh	r1, [r7, #10]
 800e1ec:	4b48      	ldr	r3, [pc, #288]	@ (800e310 <HAL_I2C_Master_Transmit+0x228>)
 800e1ee:	9300      	str	r3, [sp, #0]
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	68f8      	ldr	r0, [r7, #12]
 800e1f4:	f000 fbfa 	bl	800e9ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800e1f8:	e05b      	b.n	800e2b2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e1fa:	693a      	ldr	r2, [r7, #16]
 800e1fc:	6a39      	ldr	r1, [r7, #32]
 800e1fe:	68f8      	ldr	r0, [r7, #12]
 800e200:	f000 f9fd 	bl	800e5fe <I2C_WaitOnTXISFlagUntilTimeout>
 800e204:	4603      	mov	r3, r0
 800e206:	2b00      	cmp	r3, #0
 800e208:	d001      	beq.n	800e20e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800e20a:	2301      	movs	r3, #1
 800e20c:	e07b      	b.n	800e306 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e212:	781a      	ldrb	r2, [r3, #0]
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e21e:	1c5a      	adds	r2, r3, #1
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e228:	b29b      	uxth	r3, r3
 800e22a:	3b01      	subs	r3, #1
 800e22c:	b29a      	uxth	r2, r3
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e236:	3b01      	subs	r3, #1
 800e238:	b29a      	uxth	r2, r3
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e242:	b29b      	uxth	r3, r3
 800e244:	2b00      	cmp	r3, #0
 800e246:	d034      	beq.n	800e2b2 <HAL_I2C_Master_Transmit+0x1ca>
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d130      	bne.n	800e2b2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	9300      	str	r3, [sp, #0]
 800e254:	6a3b      	ldr	r3, [r7, #32]
 800e256:	2200      	movs	r2, #0
 800e258:	2180      	movs	r1, #128	@ 0x80
 800e25a:	68f8      	ldr	r0, [r7, #12]
 800e25c:	f000 f976 	bl	800e54c <I2C_WaitOnFlagUntilTimeout>
 800e260:	4603      	mov	r3, r0
 800e262:	2b00      	cmp	r3, #0
 800e264:	d001      	beq.n	800e26a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800e266:	2301      	movs	r3, #1
 800e268:	e04d      	b.n	800e306 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e26e:	b29b      	uxth	r3, r3
 800e270:	2bff      	cmp	r3, #255	@ 0xff
 800e272:	d90e      	bls.n	800e292 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	22ff      	movs	r2, #255	@ 0xff
 800e278:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e27e:	b2da      	uxtb	r2, r3
 800e280:	8979      	ldrh	r1, [r7, #10]
 800e282:	2300      	movs	r3, #0
 800e284:	9300      	str	r3, [sp, #0]
 800e286:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e28a:	68f8      	ldr	r0, [r7, #12]
 800e28c:	f000 fbae 	bl	800e9ec <I2C_TransferConfig>
 800e290:	e00f      	b.n	800e2b2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e296:	b29a      	uxth	r2, r3
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e2a0:	b2da      	uxtb	r2, r3
 800e2a2:	8979      	ldrh	r1, [r7, #10]
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	9300      	str	r3, [sp, #0]
 800e2a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e2ac:	68f8      	ldr	r0, [r7, #12]
 800e2ae:	f000 fb9d 	bl	800e9ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d19e      	bne.n	800e1fa <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e2bc:	693a      	ldr	r2, [r7, #16]
 800e2be:	6a39      	ldr	r1, [r7, #32]
 800e2c0:	68f8      	ldr	r0, [r7, #12]
 800e2c2:	f000 f9e3 	bl	800e68c <I2C_WaitOnSTOPFlagUntilTimeout>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d001      	beq.n	800e2d0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	e01a      	b.n	800e306 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	2220      	movs	r2, #32
 800e2d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	6859      	ldr	r1, [r3, #4]
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	681a      	ldr	r2, [r3, #0]
 800e2e2:	4b0c      	ldr	r3, [pc, #48]	@ (800e314 <HAL_I2C_Master_Transmit+0x22c>)
 800e2e4:	400b      	ands	r3, r1
 800e2e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2220      	movs	r2, #32
 800e2ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e300:	2300      	movs	r3, #0
 800e302:	e000      	b.n	800e306 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800e304:	2302      	movs	r3, #2
  }
}
 800e306:	4618      	mov	r0, r3
 800e308:	3718      	adds	r7, #24
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
 800e30e:	bf00      	nop
 800e310:	80002000 	.word	0x80002000
 800e314:	fe00e800 	.word	0xfe00e800

0800e318 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b088      	sub	sp, #32
 800e31c:	af02      	add	r7, sp, #8
 800e31e:	60f8      	str	r0, [r7, #12]
 800e320:	607a      	str	r2, [r7, #4]
 800e322:	461a      	mov	r2, r3
 800e324:	460b      	mov	r3, r1
 800e326:	817b      	strh	r3, [r7, #10]
 800e328:	4613      	mov	r3, r2
 800e32a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e332:	b2db      	uxtb	r3, r3
 800e334:	2b20      	cmp	r3, #32
 800e336:	f040 80db 	bne.w	800e4f0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e340:	2b01      	cmp	r3, #1
 800e342:	d101      	bne.n	800e348 <HAL_I2C_Master_Receive+0x30>
 800e344:	2302      	movs	r3, #2
 800e346:	e0d4      	b.n	800e4f2 <HAL_I2C_Master_Receive+0x1da>
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2201      	movs	r2, #1
 800e34c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e350:	f7fc fc68 	bl	800ac24 <HAL_GetTick>
 800e354:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	9300      	str	r3, [sp, #0]
 800e35a:	2319      	movs	r3, #25
 800e35c:	2201      	movs	r2, #1
 800e35e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e362:	68f8      	ldr	r0, [r7, #12]
 800e364:	f000 f8f2 	bl	800e54c <I2C_WaitOnFlagUntilTimeout>
 800e368:	4603      	mov	r3, r0
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d001      	beq.n	800e372 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800e36e:	2301      	movs	r3, #1
 800e370:	e0bf      	b.n	800e4f2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	2222      	movs	r2, #34	@ 0x22
 800e376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	2210      	movs	r2, #16
 800e37e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2200      	movs	r2, #0
 800e386:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	687a      	ldr	r2, [r7, #4]
 800e38c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	893a      	ldrh	r2, [r7, #8]
 800e392:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2200      	movs	r2, #0
 800e398:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	2bff      	cmp	r3, #255	@ 0xff
 800e3a2:	d90e      	bls.n	800e3c2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	2201      	movs	r2, #1
 800e3a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e3ae:	b2da      	uxtb	r2, r3
 800e3b0:	8979      	ldrh	r1, [r7, #10]
 800e3b2:	4b52      	ldr	r3, [pc, #328]	@ (800e4fc <HAL_I2C_Master_Receive+0x1e4>)
 800e3b4:	9300      	str	r3, [sp, #0]
 800e3b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e3ba:	68f8      	ldr	r0, [r7, #12]
 800e3bc:	f000 fb16 	bl	800e9ec <I2C_TransferConfig>
 800e3c0:	e06d      	b.n	800e49e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e3c6:	b29a      	uxth	r2, r3
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e3d0:	b2da      	uxtb	r2, r3
 800e3d2:	8979      	ldrh	r1, [r7, #10]
 800e3d4:	4b49      	ldr	r3, [pc, #292]	@ (800e4fc <HAL_I2C_Master_Receive+0x1e4>)
 800e3d6:	9300      	str	r3, [sp, #0]
 800e3d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e3dc:	68f8      	ldr	r0, [r7, #12]
 800e3de:	f000 fb05 	bl	800e9ec <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800e3e2:	e05c      	b.n	800e49e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e3e4:	697a      	ldr	r2, [r7, #20]
 800e3e6:	6a39      	ldr	r1, [r7, #32]
 800e3e8:	68f8      	ldr	r0, [r7, #12]
 800e3ea:	f000 f993 	bl	800e714 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d001      	beq.n	800e3f8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	e07c      	b.n	800e4f2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e402:	b2d2      	uxtb	r2, r2
 800e404:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e40a:	1c5a      	adds	r2, r3, #1
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e414:	3b01      	subs	r3, #1
 800e416:	b29a      	uxth	r2, r3
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e420:	b29b      	uxth	r3, r3
 800e422:	3b01      	subs	r3, #1
 800e424:	b29a      	uxth	r2, r3
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e42e:	b29b      	uxth	r3, r3
 800e430:	2b00      	cmp	r3, #0
 800e432:	d034      	beq.n	800e49e <HAL_I2C_Master_Receive+0x186>
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d130      	bne.n	800e49e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	9300      	str	r3, [sp, #0]
 800e440:	6a3b      	ldr	r3, [r7, #32]
 800e442:	2200      	movs	r2, #0
 800e444:	2180      	movs	r1, #128	@ 0x80
 800e446:	68f8      	ldr	r0, [r7, #12]
 800e448:	f000 f880 	bl	800e54c <I2C_WaitOnFlagUntilTimeout>
 800e44c:	4603      	mov	r3, r0
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d001      	beq.n	800e456 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800e452:	2301      	movs	r3, #1
 800e454:	e04d      	b.n	800e4f2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e45a:	b29b      	uxth	r3, r3
 800e45c:	2bff      	cmp	r3, #255	@ 0xff
 800e45e:	d90e      	bls.n	800e47e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	22ff      	movs	r2, #255	@ 0xff
 800e464:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e46a:	b2da      	uxtb	r2, r3
 800e46c:	8979      	ldrh	r1, [r7, #10]
 800e46e:	2300      	movs	r3, #0
 800e470:	9300      	str	r3, [sp, #0]
 800e472:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e476:	68f8      	ldr	r0, [r7, #12]
 800e478:	f000 fab8 	bl	800e9ec <I2C_TransferConfig>
 800e47c:	e00f      	b.n	800e49e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e482:	b29a      	uxth	r2, r3
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e48c:	b2da      	uxtb	r2, r3
 800e48e:	8979      	ldrh	r1, [r7, #10]
 800e490:	2300      	movs	r3, #0
 800e492:	9300      	str	r3, [sp, #0]
 800e494:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e498:	68f8      	ldr	r0, [r7, #12]
 800e49a:	f000 faa7 	bl	800e9ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e4a2:	b29b      	uxth	r3, r3
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d19d      	bne.n	800e3e4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e4a8:	697a      	ldr	r2, [r7, #20]
 800e4aa:	6a39      	ldr	r1, [r7, #32]
 800e4ac:	68f8      	ldr	r0, [r7, #12]
 800e4ae:	f000 f8ed 	bl	800e68c <I2C_WaitOnSTOPFlagUntilTimeout>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d001      	beq.n	800e4bc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	e01a      	b.n	800e4f2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	2220      	movs	r2, #32
 800e4c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	6859      	ldr	r1, [r3, #4]
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	681a      	ldr	r2, [r3, #0]
 800e4ce:	4b0c      	ldr	r3, [pc, #48]	@ (800e500 <HAL_I2C_Master_Receive+0x1e8>)
 800e4d0:	400b      	ands	r3, r1
 800e4d2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	2220      	movs	r2, #32
 800e4d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	e000      	b.n	800e4f2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800e4f0:	2302      	movs	r3, #2
  }
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	3718      	adds	r7, #24
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}
 800e4fa:	bf00      	nop
 800e4fc:	80002400 	.word	0x80002400
 800e500:	fe00e800 	.word	0xfe00e800

0800e504 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e504:	b480      	push	{r7}
 800e506:	b083      	sub	sp, #12
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	699b      	ldr	r3, [r3, #24]
 800e512:	f003 0302 	and.w	r3, r3, #2
 800e516:	2b02      	cmp	r3, #2
 800e518:	d103      	bne.n	800e522 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	2200      	movs	r2, #0
 800e520:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	699b      	ldr	r3, [r3, #24]
 800e528:	f003 0301 	and.w	r3, r3, #1
 800e52c:	2b01      	cmp	r3, #1
 800e52e:	d007      	beq.n	800e540 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	699a      	ldr	r2, [r3, #24]
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	f042 0201 	orr.w	r2, r2, #1
 800e53e:	619a      	str	r2, [r3, #24]
  }
}
 800e540:	bf00      	nop
 800e542:	370c      	adds	r7, #12
 800e544:	46bd      	mov	sp, r7
 800e546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54a:	4770      	bx	lr

0800e54c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b084      	sub	sp, #16
 800e550:	af00      	add	r7, sp, #0
 800e552:	60f8      	str	r0, [r7, #12]
 800e554:	60b9      	str	r1, [r7, #8]
 800e556:	603b      	str	r3, [r7, #0]
 800e558:	4613      	mov	r3, r2
 800e55a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e55c:	e03b      	b.n	800e5d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e55e:	69ba      	ldr	r2, [r7, #24]
 800e560:	6839      	ldr	r1, [r7, #0]
 800e562:	68f8      	ldr	r0, [r7, #12]
 800e564:	f000 f962 	bl	800e82c <I2C_IsErrorOccurred>
 800e568:	4603      	mov	r3, r0
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d001      	beq.n	800e572 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800e56e:	2301      	movs	r3, #1
 800e570:	e041      	b.n	800e5f6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e578:	d02d      	beq.n	800e5d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e57a:	f7fc fb53 	bl	800ac24 <HAL_GetTick>
 800e57e:	4602      	mov	r2, r0
 800e580:	69bb      	ldr	r3, [r7, #24]
 800e582:	1ad3      	subs	r3, r2, r3
 800e584:	683a      	ldr	r2, [r7, #0]
 800e586:	429a      	cmp	r2, r3
 800e588:	d302      	bcc.n	800e590 <I2C_WaitOnFlagUntilTimeout+0x44>
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d122      	bne.n	800e5d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	699a      	ldr	r2, [r3, #24]
 800e596:	68bb      	ldr	r3, [r7, #8]
 800e598:	4013      	ands	r3, r2
 800e59a:	68ba      	ldr	r2, [r7, #8]
 800e59c:	429a      	cmp	r2, r3
 800e59e:	bf0c      	ite	eq
 800e5a0:	2301      	moveq	r3, #1
 800e5a2:	2300      	movne	r3, #0
 800e5a4:	b2db      	uxtb	r3, r3
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	79fb      	ldrb	r3, [r7, #7]
 800e5aa:	429a      	cmp	r2, r3
 800e5ac:	d113      	bne.n	800e5d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e5b2:	f043 0220 	orr.w	r2, r3, #32
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	2220      	movs	r2, #32
 800e5be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	e00f      	b.n	800e5f6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	699a      	ldr	r2, [r3, #24]
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	4013      	ands	r3, r2
 800e5e0:	68ba      	ldr	r2, [r7, #8]
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	bf0c      	ite	eq
 800e5e6:	2301      	moveq	r3, #1
 800e5e8:	2300      	movne	r3, #0
 800e5ea:	b2db      	uxtb	r3, r3
 800e5ec:	461a      	mov	r2, r3
 800e5ee:	79fb      	ldrb	r3, [r7, #7]
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d0b4      	beq.n	800e55e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e5f4:	2300      	movs	r3, #0
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3710      	adds	r7, #16
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}

0800e5fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e5fe:	b580      	push	{r7, lr}
 800e600:	b084      	sub	sp, #16
 800e602:	af00      	add	r7, sp, #0
 800e604:	60f8      	str	r0, [r7, #12]
 800e606:	60b9      	str	r1, [r7, #8]
 800e608:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e60a:	e033      	b.n	800e674 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e60c:	687a      	ldr	r2, [r7, #4]
 800e60e:	68b9      	ldr	r1, [r7, #8]
 800e610:	68f8      	ldr	r0, [r7, #12]
 800e612:	f000 f90b 	bl	800e82c <I2C_IsErrorOccurred>
 800e616:	4603      	mov	r3, r0
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d001      	beq.n	800e620 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e61c:	2301      	movs	r3, #1
 800e61e:	e031      	b.n	800e684 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e626:	d025      	beq.n	800e674 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e628:	f7fc fafc 	bl	800ac24 <HAL_GetTick>
 800e62c:	4602      	mov	r2, r0
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	1ad3      	subs	r3, r2, r3
 800e632:	68ba      	ldr	r2, [r7, #8]
 800e634:	429a      	cmp	r2, r3
 800e636:	d302      	bcc.n	800e63e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d11a      	bne.n	800e674 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	699b      	ldr	r3, [r3, #24]
 800e644:	f003 0302 	and.w	r3, r3, #2
 800e648:	2b02      	cmp	r3, #2
 800e64a:	d013      	beq.n	800e674 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e650:	f043 0220 	orr.w	r2, r3, #32
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	2220      	movs	r2, #32
 800e65c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	2200      	movs	r2, #0
 800e664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2200      	movs	r2, #0
 800e66c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800e670:	2301      	movs	r3, #1
 800e672:	e007      	b.n	800e684 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	699b      	ldr	r3, [r3, #24]
 800e67a:	f003 0302 	and.w	r3, r3, #2
 800e67e:	2b02      	cmp	r3, #2
 800e680:	d1c4      	bne.n	800e60c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e682:	2300      	movs	r3, #0
}
 800e684:	4618      	mov	r0, r3
 800e686:	3710      	adds	r7, #16
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b084      	sub	sp, #16
 800e690:	af00      	add	r7, sp, #0
 800e692:	60f8      	str	r0, [r7, #12]
 800e694:	60b9      	str	r1, [r7, #8]
 800e696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e698:	e02f      	b.n	800e6fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e69a:	687a      	ldr	r2, [r7, #4]
 800e69c:	68b9      	ldr	r1, [r7, #8]
 800e69e:	68f8      	ldr	r0, [r7, #12]
 800e6a0:	f000 f8c4 	bl	800e82c <I2C_IsErrorOccurred>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d001      	beq.n	800e6ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	e02d      	b.n	800e70a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e6ae:	f7fc fab9 	bl	800ac24 <HAL_GetTick>
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	1ad3      	subs	r3, r2, r3
 800e6b8:	68ba      	ldr	r2, [r7, #8]
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d302      	bcc.n	800e6c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d11a      	bne.n	800e6fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	699b      	ldr	r3, [r3, #24]
 800e6ca:	f003 0320 	and.w	r3, r3, #32
 800e6ce:	2b20      	cmp	r3, #32
 800e6d0:	d013      	beq.n	800e6fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e6d6:	f043 0220 	orr.w	r2, r3, #32
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	2220      	movs	r2, #32
 800e6e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	e007      	b.n	800e70a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	699b      	ldr	r3, [r3, #24]
 800e700:	f003 0320 	and.w	r3, r3, #32
 800e704:	2b20      	cmp	r3, #32
 800e706:	d1c8      	bne.n	800e69a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e708:	2300      	movs	r3, #0
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	3710      	adds	r7, #16
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}
	...

0800e714 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b086      	sub	sp, #24
 800e718:	af00      	add	r7, sp, #0
 800e71a:	60f8      	str	r0, [r7, #12]
 800e71c:	60b9      	str	r1, [r7, #8]
 800e71e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e720:	2300      	movs	r3, #0
 800e722:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800e724:	e071      	b.n	800e80a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e726:	687a      	ldr	r2, [r7, #4]
 800e728:	68b9      	ldr	r1, [r7, #8]
 800e72a:	68f8      	ldr	r0, [r7, #12]
 800e72c:	f000 f87e 	bl	800e82c <I2C_IsErrorOccurred>
 800e730:	4603      	mov	r3, r0
 800e732:	2b00      	cmp	r3, #0
 800e734:	d001      	beq.n	800e73a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800e736:	2301      	movs	r3, #1
 800e738:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	699b      	ldr	r3, [r3, #24]
 800e740:	f003 0320 	and.w	r3, r3, #32
 800e744:	2b20      	cmp	r3, #32
 800e746:	d13b      	bne.n	800e7c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800e748:	7dfb      	ldrb	r3, [r7, #23]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d138      	bne.n	800e7c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	699b      	ldr	r3, [r3, #24]
 800e754:	f003 0304 	and.w	r3, r3, #4
 800e758:	2b04      	cmp	r3, #4
 800e75a:	d105      	bne.n	800e768 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e760:	2b00      	cmp	r3, #0
 800e762:	d001      	beq.n	800e768 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800e764:	2300      	movs	r3, #0
 800e766:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	699b      	ldr	r3, [r3, #24]
 800e76e:	f003 0310 	and.w	r3, r3, #16
 800e772:	2b10      	cmp	r3, #16
 800e774:	d121      	bne.n	800e7ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	2210      	movs	r2, #16
 800e77c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	2204      	movs	r2, #4
 800e782:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	2220      	movs	r2, #32
 800e78a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	6859      	ldr	r1, [r3, #4]
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	681a      	ldr	r2, [r3, #0]
 800e796:	4b24      	ldr	r3, [pc, #144]	@ (800e828 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800e798:	400b      	ands	r3, r1
 800e79a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	2220      	movs	r2, #32
 800e7a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	75fb      	strb	r3, [r7, #23]
 800e7b8:	e002      	b.n	800e7c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800e7c0:	f7fc fa30 	bl	800ac24 <HAL_GetTick>
 800e7c4:	4602      	mov	r2, r0
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	1ad3      	subs	r3, r2, r3
 800e7ca:	68ba      	ldr	r2, [r7, #8]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d302      	bcc.n	800e7d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d119      	bne.n	800e80a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800e7d6:	7dfb      	ldrb	r3, [r7, #23]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d116      	bne.n	800e80a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	699b      	ldr	r3, [r3, #24]
 800e7e2:	f003 0304 	and.w	r3, r3, #4
 800e7e6:	2b04      	cmp	r3, #4
 800e7e8:	d00f      	beq.n	800e80a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e7ee:	f043 0220 	orr.w	r2, r3, #32
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2220      	movs	r2, #32
 800e7fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	2200      	movs	r2, #0
 800e802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800e806:	2301      	movs	r3, #1
 800e808:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	699b      	ldr	r3, [r3, #24]
 800e810:	f003 0304 	and.w	r3, r3, #4
 800e814:	2b04      	cmp	r3, #4
 800e816:	d002      	beq.n	800e81e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800e818:	7dfb      	ldrb	r3, [r7, #23]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d083      	beq.n	800e726 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800e81e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e820:	4618      	mov	r0, r3
 800e822:	3718      	adds	r7, #24
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}
 800e828:	fe00e800 	.word	0xfe00e800

0800e82c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b08a      	sub	sp, #40	@ 0x28
 800e830:	af00      	add	r7, sp, #0
 800e832:	60f8      	str	r0, [r7, #12]
 800e834:	60b9      	str	r1, [r7, #8]
 800e836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e838:	2300      	movs	r3, #0
 800e83a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	699b      	ldr	r3, [r3, #24]
 800e844:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800e846:	2300      	movs	r3, #0
 800e848:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800e84e:	69bb      	ldr	r3, [r7, #24]
 800e850:	f003 0310 	and.w	r3, r3, #16
 800e854:	2b00      	cmp	r3, #0
 800e856:	d068      	beq.n	800e92a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	2210      	movs	r2, #16
 800e85e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e860:	e049      	b.n	800e8f6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e868:	d045      	beq.n	800e8f6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e86a:	f7fc f9db 	bl	800ac24 <HAL_GetTick>
 800e86e:	4602      	mov	r2, r0
 800e870:	69fb      	ldr	r3, [r7, #28]
 800e872:	1ad3      	subs	r3, r2, r3
 800e874:	68ba      	ldr	r2, [r7, #8]
 800e876:	429a      	cmp	r2, r3
 800e878:	d302      	bcc.n	800e880 <I2C_IsErrorOccurred+0x54>
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d13a      	bne.n	800e8f6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	685b      	ldr	r3, [r3, #4]
 800e886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e88a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e892:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	699b      	ldr	r3, [r3, #24]
 800e89a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e89e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e8a2:	d121      	bne.n	800e8e8 <I2C_IsErrorOccurred+0xbc>
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e8aa:	d01d      	beq.n	800e8e8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800e8ac:	7cfb      	ldrb	r3, [r7, #19]
 800e8ae:	2b20      	cmp	r3, #32
 800e8b0:	d01a      	beq.n	800e8e8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	685a      	ldr	r2, [r3, #4]
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e8c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800e8c2:	f7fc f9af 	bl	800ac24 <HAL_GetTick>
 800e8c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e8c8:	e00e      	b.n	800e8e8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800e8ca:	f7fc f9ab 	bl	800ac24 <HAL_GetTick>
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	69fb      	ldr	r3, [r7, #28]
 800e8d2:	1ad3      	subs	r3, r2, r3
 800e8d4:	2b19      	cmp	r3, #25
 800e8d6:	d907      	bls.n	800e8e8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800e8d8:	6a3b      	ldr	r3, [r7, #32]
 800e8da:	f043 0320 	orr.w	r3, r3, #32
 800e8de:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800e8e6:	e006      	b.n	800e8f6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	699b      	ldr	r3, [r3, #24]
 800e8ee:	f003 0320 	and.w	r3, r3, #32
 800e8f2:	2b20      	cmp	r3, #32
 800e8f4:	d1e9      	bne.n	800e8ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	699b      	ldr	r3, [r3, #24]
 800e8fc:	f003 0320 	and.w	r3, r3, #32
 800e900:	2b20      	cmp	r3, #32
 800e902:	d003      	beq.n	800e90c <I2C_IsErrorOccurred+0xe0>
 800e904:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d0aa      	beq.n	800e862 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800e90c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e910:	2b00      	cmp	r3, #0
 800e912:	d103      	bne.n	800e91c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	2220      	movs	r2, #32
 800e91a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800e91c:	6a3b      	ldr	r3, [r7, #32]
 800e91e:	f043 0304 	orr.w	r3, r3, #4
 800e922:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800e924:	2301      	movs	r3, #1
 800e926:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	699b      	ldr	r3, [r3, #24]
 800e930:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800e932:	69bb      	ldr	r3, [r7, #24]
 800e934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d00b      	beq.n	800e954 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800e93c:	6a3b      	ldr	r3, [r7, #32]
 800e93e:	f043 0301 	orr.w	r3, r3, #1
 800e942:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e94c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e94e:	2301      	movs	r3, #1
 800e950:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800e954:	69bb      	ldr	r3, [r7, #24]
 800e956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d00b      	beq.n	800e976 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800e95e:	6a3b      	ldr	r3, [r7, #32]
 800e960:	f043 0308 	orr.w	r3, r3, #8
 800e964:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e96e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e970:	2301      	movs	r3, #1
 800e972:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800e976:	69bb      	ldr	r3, [r7, #24]
 800e978:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d00b      	beq.n	800e998 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800e980:	6a3b      	ldr	r3, [r7, #32]
 800e982:	f043 0302 	orr.w	r3, r3, #2
 800e986:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e990:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e992:	2301      	movs	r3, #1
 800e994:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800e998:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d01c      	beq.n	800e9da <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e9a0:	68f8      	ldr	r0, [r7, #12]
 800e9a2:	f7ff fdaf 	bl	800e504 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	6859      	ldr	r1, [r3, #4]
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	681a      	ldr	r2, [r3, #0]
 800e9b0:	4b0d      	ldr	r3, [pc, #52]	@ (800e9e8 <I2C_IsErrorOccurred+0x1bc>)
 800e9b2:	400b      	ands	r3, r1
 800e9b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e9ba:	6a3b      	ldr	r3, [r7, #32]
 800e9bc:	431a      	orrs	r2, r3
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	2220      	movs	r2, #32
 800e9c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800e9da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3728      	adds	r7, #40	@ 0x28
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}
 800e9e6:	bf00      	nop
 800e9e8:	fe00e800 	.word	0xfe00e800

0800e9ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b087      	sub	sp, #28
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	60f8      	str	r0, [r7, #12]
 800e9f4:	607b      	str	r3, [r7, #4]
 800e9f6:	460b      	mov	r3, r1
 800e9f8:	817b      	strh	r3, [r7, #10]
 800e9fa:	4613      	mov	r3, r2
 800e9fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e9fe:	897b      	ldrh	r3, [r7, #10]
 800ea00:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ea04:	7a7b      	ldrb	r3, [r7, #9]
 800ea06:	041b      	lsls	r3, r3, #16
 800ea08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ea0c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ea12:	6a3b      	ldr	r3, [r7, #32]
 800ea14:	4313      	orrs	r3, r2
 800ea16:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ea1a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	685a      	ldr	r2, [r3, #4]
 800ea22:	6a3b      	ldr	r3, [r7, #32]
 800ea24:	0d5b      	lsrs	r3, r3, #21
 800ea26:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800ea2a:	4b08      	ldr	r3, [pc, #32]	@ (800ea4c <I2C_TransferConfig+0x60>)
 800ea2c:	430b      	orrs	r3, r1
 800ea2e:	43db      	mvns	r3, r3
 800ea30:	ea02 0103 	and.w	r1, r2, r3
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	697a      	ldr	r2, [r7, #20]
 800ea3a:	430a      	orrs	r2, r1
 800ea3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ea3e:	bf00      	nop
 800ea40:	371c      	adds	r7, #28
 800ea42:	46bd      	mov	sp, r7
 800ea44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea48:	4770      	bx	lr
 800ea4a:	bf00      	nop
 800ea4c:	03ff63ff 	.word	0x03ff63ff

0800ea50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b083      	sub	sp, #12
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
 800ea58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ea60:	b2db      	uxtb	r3, r3
 800ea62:	2b20      	cmp	r3, #32
 800ea64:	d138      	bne.n	800ead8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ea6c:	2b01      	cmp	r3, #1
 800ea6e:	d101      	bne.n	800ea74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ea70:	2302      	movs	r3, #2
 800ea72:	e032      	b.n	800eada <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2201      	movs	r2, #1
 800ea78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2224      	movs	r2, #36	@ 0x24
 800ea80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	681a      	ldr	r2, [r3, #0]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f022 0201 	bic.w	r2, r2, #1
 800ea92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	681a      	ldr	r2, [r3, #0]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800eaa2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	6819      	ldr	r1, [r3, #0]
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	683a      	ldr	r2, [r7, #0]
 800eab0:	430a      	orrs	r2, r1
 800eab2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	681a      	ldr	r2, [r3, #0]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	f042 0201 	orr.w	r2, r2, #1
 800eac2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2220      	movs	r2, #32
 800eac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2200      	movs	r2, #0
 800ead0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ead4:	2300      	movs	r3, #0
 800ead6:	e000      	b.n	800eada <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ead8:	2302      	movs	r3, #2
  }
}
 800eada:	4618      	mov	r0, r3
 800eadc:	370c      	adds	r7, #12
 800eade:	46bd      	mov	sp, r7
 800eae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae4:	4770      	bx	lr

0800eae6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800eae6:	b480      	push	{r7}
 800eae8:	b085      	sub	sp, #20
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	6078      	str	r0, [r7, #4]
 800eaee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eaf6:	b2db      	uxtb	r3, r3
 800eaf8:	2b20      	cmp	r3, #32
 800eafa:	d139      	bne.n	800eb70 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eb02:	2b01      	cmp	r3, #1
 800eb04:	d101      	bne.n	800eb0a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800eb06:	2302      	movs	r3, #2
 800eb08:	e033      	b.n	800eb72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2201      	movs	r2, #1
 800eb0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2224      	movs	r2, #36	@ 0x24
 800eb16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	681a      	ldr	r2, [r3, #0]
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	f022 0201 	bic.w	r2, r2, #1
 800eb28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800eb38:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	021b      	lsls	r3, r3, #8
 800eb3e:	68fa      	ldr	r2, [r7, #12]
 800eb40:	4313      	orrs	r3, r2
 800eb42:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	68fa      	ldr	r2, [r7, #12]
 800eb4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	681a      	ldr	r2, [r3, #0]
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	f042 0201 	orr.w	r2, r2, #1
 800eb5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2220      	movs	r2, #32
 800eb60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	e000      	b.n	800eb72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800eb70:	2302      	movs	r3, #2
  }
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3714      	adds	r7, #20
 800eb76:	46bd      	mov	sp, r7
 800eb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7c:	4770      	bx	lr
	...

0800eb80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800eb80:	b480      	push	{r7}
 800eb82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800eb84:	4b04      	ldr	r3, [pc, #16]	@ (800eb98 <HAL_PWREx_GetVoltageRange+0x18>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb94:	4770      	bx	lr
 800eb96:	bf00      	nop
 800eb98:	40007000 	.word	0x40007000

0800eb9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b085      	sub	sp, #20
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ebaa:	d130      	bne.n	800ec0e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800ebac:	4b23      	ldr	r3, [pc, #140]	@ (800ec3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ebb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ebb8:	d038      	beq.n	800ec2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ebba:	4b20      	ldr	r3, [pc, #128]	@ (800ec3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800ebc2:	4a1e      	ldr	r2, [pc, #120]	@ (800ec3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ebc4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ebc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ebca:	4b1d      	ldr	r3, [pc, #116]	@ (800ec40 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	2232      	movs	r2, #50	@ 0x32
 800ebd0:	fb02 f303 	mul.w	r3, r2, r3
 800ebd4:	4a1b      	ldr	r2, [pc, #108]	@ (800ec44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800ebd6:	fba2 2303 	umull	r2, r3, r2, r3
 800ebda:	0c9b      	lsrs	r3, r3, #18
 800ebdc:	3301      	adds	r3, #1
 800ebde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ebe0:	e002      	b.n	800ebe8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	3b01      	subs	r3, #1
 800ebe6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ebe8:	4b14      	ldr	r3, [pc, #80]	@ (800ec3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ebea:	695b      	ldr	r3, [r3, #20]
 800ebec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ebf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ebf4:	d102      	bne.n	800ebfc <HAL_PWREx_ControlVoltageScaling+0x60>
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d1f2      	bne.n	800ebe2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ebfc:	4b0f      	ldr	r3, [pc, #60]	@ (800ec3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ebfe:	695b      	ldr	r3, [r3, #20]
 800ec00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ec04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ec08:	d110      	bne.n	800ec2c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800ec0a:	2303      	movs	r3, #3
 800ec0c:	e00f      	b.n	800ec2e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800ec0e:	4b0b      	ldr	r3, [pc, #44]	@ (800ec3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ec16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ec1a:	d007      	beq.n	800ec2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ec1c:	4b07      	ldr	r3, [pc, #28]	@ (800ec3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800ec24:	4a05      	ldr	r2, [pc, #20]	@ (800ec3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ec26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ec2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800ec2c:	2300      	movs	r3, #0
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3714      	adds	r7, #20
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr
 800ec3a:	bf00      	nop
 800ec3c:	40007000 	.word	0x40007000
 800ec40:	20000168 	.word	0x20000168
 800ec44:	431bde83 	.word	0x431bde83

0800ec48 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b086      	sub	sp, #24
 800ec4c:	af02      	add	r7, sp, #8
 800ec4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ec50:	f7fb ffe8 	bl	800ac24 <HAL_GetTick>
 800ec54:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d101      	bne.n	800ec60 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	e063      	b.n	800ed28 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800ec66:	b2db      	uxtb	r3, r3
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d10b      	bne.n	800ec84 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2200      	movs	r2, #0
 800ec70:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f7f8 fb0f 	bl	8007298 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800ec7a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f000 fa68 	bl	800f154 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	689b      	ldr	r3, [r3, #8]
 800ec92:	3b01      	subs	r3, #1
 800ec94:	021a      	lsls	r2, r3, #8
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	430a      	orrs	r2, r1
 800ec9c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eca2:	9300      	str	r3, [sp, #0]
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	2200      	movs	r2, #0
 800eca8:	2120      	movs	r1, #32
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f000 fa60 	bl	800f170 <QSPI_WaitFlagStateUntilTimeout>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800ecb4:	7afb      	ldrb	r3, [r7, #11]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d131      	bne.n	800ed1e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ecc4:	f023 0310 	bic.w	r3, r3, #16
 800ecc8:	687a      	ldr	r2, [r7, #4]
 800ecca:	6852      	ldr	r2, [r2, #4]
 800eccc:	0611      	lsls	r1, r2, #24
 800ecce:	687a      	ldr	r2, [r7, #4]
 800ecd0:	68d2      	ldr	r2, [r2, #12]
 800ecd2:	4311      	orrs	r1, r2
 800ecd4:	687a      	ldr	r2, [r7, #4]
 800ecd6:	6812      	ldr	r2, [r2, #0]
 800ecd8:	430b      	orrs	r3, r1
 800ecda:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	685a      	ldr	r2, [r3, #4]
 800ece2:	4b13      	ldr	r3, [pc, #76]	@ (800ed30 <HAL_QSPI_Init+0xe8>)
 800ece4:	4013      	ands	r3, r2
 800ece6:	687a      	ldr	r2, [r7, #4]
 800ece8:	6912      	ldr	r2, [r2, #16]
 800ecea:	0411      	lsls	r1, r2, #16
 800ecec:	687a      	ldr	r2, [r7, #4]
 800ecee:	6952      	ldr	r2, [r2, #20]
 800ecf0:	4311      	orrs	r1, r2
 800ecf2:	687a      	ldr	r2, [r7, #4]
 800ecf4:	6992      	ldr	r2, [r2, #24]
 800ecf6:	4311      	orrs	r1, r2
 800ecf8:	687a      	ldr	r2, [r7, #4]
 800ecfa:	6812      	ldr	r2, [r2, #0]
 800ecfc:	430b      	orrs	r3, r1
 800ecfe:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	681a      	ldr	r2, [r3, #0]
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	f042 0201 	orr.w	r2, r2, #1
 800ed0e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2200      	movs	r2, #0
 800ed14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2201      	movs	r2, #1
 800ed1a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2200      	movs	r2, #0
 800ed22:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800ed26:	7afb      	ldrb	r3, [r7, #11]
}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3710      	adds	r7, #16
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}
 800ed30:	ffe0f8fe 	.word	0xffe0f8fe

0800ed34 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b088      	sub	sp, #32
 800ed38:	af02      	add	r7, sp, #8
 800ed3a:	60f8      	str	r0, [r7, #12]
 800ed3c:	60b9      	str	r1, [r7, #8]
 800ed3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ed40:	f7fb ff70 	bl	800ac24 <HAL_GetTick>
 800ed44:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ed4c:	b2db      	uxtb	r3, r3
 800ed4e:	2b01      	cmp	r3, #1
 800ed50:	d101      	bne.n	800ed56 <HAL_QSPI_Command+0x22>
 800ed52:	2302      	movs	r3, #2
 800ed54:	e048      	b.n	800ede8 <HAL_QSPI_Command+0xb4>
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	2201      	movs	r2, #1
 800ed5a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800ed64:	b2db      	uxtb	r3, r3
 800ed66:	2b01      	cmp	r3, #1
 800ed68:	d137      	bne.n	800edda <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	2202      	movs	r2, #2
 800ed74:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	9300      	str	r3, [sp, #0]
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	2120      	movs	r1, #32
 800ed82:	68f8      	ldr	r0, [r7, #12]
 800ed84:	f000 f9f4 	bl	800f170 <QSPI_WaitFlagStateUntilTimeout>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800ed8c:	7dfb      	ldrb	r3, [r7, #23]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d125      	bne.n	800edde <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800ed92:	2200      	movs	r2, #0
 800ed94:	68b9      	ldr	r1, [r7, #8]
 800ed96:	68f8      	ldr	r0, [r7, #12]
 800ed98:	f000 fa21 	bl	800f1de <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800ed9c:	68bb      	ldr	r3, [r7, #8]
 800ed9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d115      	bne.n	800edd0 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	9300      	str	r3, [sp, #0]
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	2201      	movs	r2, #1
 800edac:	2102      	movs	r1, #2
 800edae:	68f8      	ldr	r0, [r7, #12]
 800edb0:	f000 f9de 	bl	800f170 <QSPI_WaitFlagStateUntilTimeout>
 800edb4:	4603      	mov	r3, r0
 800edb6:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800edb8:	7dfb      	ldrb	r3, [r7, #23]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d10f      	bne.n	800edde <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	2202      	movs	r2, #2
 800edc4:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	2201      	movs	r2, #1
 800edca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800edce:	e006      	b.n	800edde <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2201      	movs	r2, #1
 800edd4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800edd8:	e001      	b.n	800edde <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800edda:	2302      	movs	r3, #2
 800eddc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	2200      	movs	r2, #0
 800ede2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800ede6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3718      	adds	r7, #24
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b08a      	sub	sp, #40	@ 0x28
 800edf4:	af02      	add	r7, sp, #8
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	60b9      	str	r1, [r7, #8]
 800edfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800edfc:	2300      	movs	r3, #0
 800edfe:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800ee00:	f7fb ff10 	bl	800ac24 <HAL_GetTick>
 800ee04:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	3320      	adds	r3, #32
 800ee0c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ee14:	b2db      	uxtb	r3, r3
 800ee16:	2b01      	cmp	r3, #1
 800ee18:	d101      	bne.n	800ee1e <HAL_QSPI_Transmit+0x2e>
 800ee1a:	2302      	movs	r3, #2
 800ee1c:	e07b      	b.n	800ef16 <HAL_QSPI_Transmit+0x126>
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	2201      	movs	r2, #1
 800ee22:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800ee2c:	b2db      	uxtb	r3, r3
 800ee2e:	2b01      	cmp	r3, #1
 800ee30:	d16a      	bne.n	800ef08 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	2200      	movs	r2, #0
 800ee36:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d05b      	beq.n	800eef6 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	2212      	movs	r2, #18
 800ee42:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	691b      	ldr	r3, [r3, #16]
 800ee4c:	1c5a      	adds	r2, r3, #1
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	625a      	str	r2, [r3, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	691b      	ldr	r3, [r3, #16]
 800ee58:	1c5a      	adds	r2, r3, #1
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	68ba      	ldr	r2, [r7, #8]
 800ee62:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	695a      	ldr	r2, [r3, #20]
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800ee72:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800ee74:	e01b      	b.n	800eeae <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	9300      	str	r3, [sp, #0]
 800ee7a:	69bb      	ldr	r3, [r7, #24]
 800ee7c:	2201      	movs	r2, #1
 800ee7e:	2104      	movs	r1, #4
 800ee80:	68f8      	ldr	r0, [r7, #12]
 800ee82:	f000 f975 	bl	800f170 <QSPI_WaitFlagStateUntilTimeout>
 800ee86:	4603      	mov	r3, r0
 800ee88:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800ee8a:	7ffb      	ldrb	r3, [r7, #31]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d113      	bne.n	800eeb8 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	69db      	ldr	r3, [r3, #28]
 800ee94:	781a      	ldrb	r2, [r3, #0]
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	69db      	ldr	r3, [r3, #28]
 800ee9e:	1c5a      	adds	r2, r3, #1
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eea8:	1e5a      	subs	r2, r3, #1
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	625a      	str	r2, [r3, #36]	@ 0x24
      while(hqspi->TxXferCount > 0U)
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d1df      	bne.n	800ee76 <HAL_QSPI_Transmit+0x86>
 800eeb6:	e000      	b.n	800eeba <HAL_QSPI_Transmit+0xca>
          break;
 800eeb8:	bf00      	nop
      }

      if (status == HAL_OK)
 800eeba:	7ffb      	ldrb	r3, [r7, #31]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d115      	bne.n	800eeec <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	9300      	str	r3, [sp, #0]
 800eec4:	69bb      	ldr	r3, [r7, #24]
 800eec6:	2201      	movs	r2, #1
 800eec8:	2102      	movs	r1, #2
 800eeca:	68f8      	ldr	r0, [r7, #12]
 800eecc:	f000 f950 	bl	800f170 <QSPI_WaitFlagStateUntilTimeout>
 800eed0:	4603      	mov	r3, r0
 800eed2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800eed4:	7ffb      	ldrb	r3, [r7, #31]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d108      	bne.n	800eeec <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	2202      	movs	r2, #2
 800eee0:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800eee2:	68f8      	ldr	r0, [r7, #12]
 800eee4:	f000 f8bd 	bl	800f062 <HAL_QSPI_Abort>
 800eee8:	4603      	mov	r3, r0
 800eeea:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	2201      	movs	r2, #1
 800eef0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800eef4:	e00a      	b.n	800ef0c <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eefa:	f043 0208 	orr.w	r2, r3, #8
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800ef02:	2301      	movs	r3, #1
 800ef04:	77fb      	strb	r3, [r7, #31]
 800ef06:	e001      	b.n	800ef0c <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800ef08:	2302      	movs	r3, #2
 800ef0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	2200      	movs	r2, #0
 800ef10:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800ef14:	7ffb      	ldrb	r3, [r7, #31]
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3720      	adds	r7, #32
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}

0800ef1e <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800ef1e:	b580      	push	{r7, lr}
 800ef20:	b08a      	sub	sp, #40	@ 0x28
 800ef22:	af02      	add	r7, sp, #8
 800ef24:	60f8      	str	r0, [r7, #12]
 800ef26:	60b9      	str	r1, [r7, #8]
 800ef28:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800ef2e:	f7fb fe79 	bl	800ac24 <HAL_GetTick>
 800ef32:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	699b      	ldr	r3, [r3, #24]
 800ef3a:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	3320      	adds	r3, #32
 800ef42:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ef4a:	b2db      	uxtb	r3, r3
 800ef4c:	2b01      	cmp	r3, #1
 800ef4e:	d101      	bne.n	800ef54 <HAL_QSPI_Receive+0x36>
 800ef50:	2302      	movs	r3, #2
 800ef52:	e082      	b.n	800f05a <HAL_QSPI_Receive+0x13c>
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	2201      	movs	r2, #1
 800ef58:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800ef62:	b2db      	uxtb	r3, r3
 800ef64:	2b01      	cmp	r3, #1
 800ef66:	d171      	bne.n	800f04c <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d062      	beq.n	800f03a <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2222      	movs	r2, #34	@ 0x22
 800ef78:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	691b      	ldr	r3, [r3, #16]
 800ef82:	1c5a      	adds	r2, r3, #1
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	631a      	str	r2, [r3, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	691b      	ldr	r3, [r3, #16]
 800ef8e:	1c5a      	adds	r2, r3, #1
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->pRxBuffPtr = pData;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	68ba      	ldr	r2, [r7, #8]
 800ef98:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	695b      	ldr	r3, [r3, #20]
 800efa0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800efac:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	697a      	ldr	r2, [r7, #20]
 800efb4:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800efb6:	e01c      	b.n	800eff2 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	9300      	str	r3, [sp, #0]
 800efbc:	69bb      	ldr	r3, [r7, #24]
 800efbe:	2201      	movs	r2, #1
 800efc0:	2106      	movs	r1, #6
 800efc2:	68f8      	ldr	r0, [r7, #12]
 800efc4:	f000 f8d4 	bl	800f170 <QSPI_WaitFlagStateUntilTimeout>
 800efc8:	4603      	mov	r3, r0
 800efca:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800efcc:	7ffb      	ldrb	r3, [r7, #31]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d114      	bne.n	800effc <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efd6:	693a      	ldr	r2, [r7, #16]
 800efd8:	7812      	ldrb	r2, [r2, #0]
 800efda:	b2d2      	uxtb	r2, r2
 800efdc:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efe2:	1c5a      	adds	r2, r3, #1
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	629a      	str	r2, [r3, #40]	@ 0x28
        hqspi->RxXferCount--;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800efec:	1e5a      	subs	r2, r3, #1
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	631a      	str	r2, [r3, #48]	@ 0x30
      while(hqspi->RxXferCount > 0U)
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d1de      	bne.n	800efb8 <HAL_QSPI_Receive+0x9a>
 800effa:	e000      	b.n	800effe <HAL_QSPI_Receive+0xe0>
          break;
 800effc:	bf00      	nop
      }

      if (status == HAL_OK)
 800effe:	7ffb      	ldrb	r3, [r7, #31]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d115      	bne.n	800f030 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	9300      	str	r3, [sp, #0]
 800f008:	69bb      	ldr	r3, [r7, #24]
 800f00a:	2201      	movs	r2, #1
 800f00c:	2102      	movs	r1, #2
 800f00e:	68f8      	ldr	r0, [r7, #12]
 800f010:	f000 f8ae 	bl	800f170 <QSPI_WaitFlagStateUntilTimeout>
 800f014:	4603      	mov	r3, r0
 800f016:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800f018:	7ffb      	ldrb	r3, [r7, #31]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d108      	bne.n	800f030 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	2202      	movs	r2, #2
 800f024:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800f026:	68f8      	ldr	r0, [r7, #12]
 800f028:	f000 f81b 	bl	800f062 <HAL_QSPI_Abort>
 800f02c:	4603      	mov	r3, r0
 800f02e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	2201      	movs	r2, #1
 800f034:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f038:	e00a      	b.n	800f050 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f03e:	f043 0208 	orr.w	r2, r3, #8
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800f046:	2301      	movs	r3, #1
 800f048:	77fb      	strb	r3, [r7, #31]
 800f04a:	e001      	b.n	800f050 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800f04c:	2302      	movs	r3, #2
 800f04e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	2200      	movs	r2, #0
 800f054:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800f058:	7ffb      	ldrb	r3, [r7, #31]
}
 800f05a:	4618      	mov	r0, r3
 800f05c:	3720      	adds	r7, #32
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}

0800f062 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800f062:	b580      	push	{r7, lr}
 800f064:	b086      	sub	sp, #24
 800f066:	af02      	add	r7, sp, #8
 800f068:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f06a:	2300      	movs	r3, #0
 800f06c:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800f06e:	f7fb fdd9 	bl	800ac24 <HAL_GetTick>
 800f072:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f07a:	b2db      	uxtb	r3, r3
 800f07c:	f003 0302 	and.w	r3, r3, #2
 800f080:	2b00      	cmp	r3, #0
 800f082:	d062      	beq.n	800f14a <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2200      	movs	r2, #0
 800f088:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	f003 0304 	and.w	r3, r3, #4
 800f096:	2b00      	cmp	r3, #0
 800f098:	d017      	beq.n	800f0ca <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	681a      	ldr	r2, [r3, #0]
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	f022 0204 	bic.w	r2, r2, #4
 800f0a8:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f7fd fdce 	bl	800cc50 <HAL_DMA_Abort>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800f0b8:	7bfb      	ldrb	r3, [r7, #15]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d005      	beq.n	800f0ca <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f0c2:	f043 0204 	orr.w	r2, r3, #4
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	689b      	ldr	r3, [r3, #8]
 800f0d0:	f003 0320 	and.w	r3, r3, #32
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d034      	beq.n	800f142 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	681a      	ldr	r2, [r3, #0]
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	f042 0202 	orr.w	r2, r2, #2
 800f0e6:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0ec:	9300      	str	r3, [sp, #0]
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	2201      	movs	r2, #1
 800f0f2:	2102      	movs	r1, #2
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f000 f83b 	bl	800f170 <QSPI_WaitFlagStateUntilTimeout>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 800f0fe:	7bfb      	ldrb	r3, [r7, #15]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d10e      	bne.n	800f122 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	2202      	movs	r2, #2
 800f10a:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f110:	9300      	str	r3, [sp, #0]
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	2200      	movs	r2, #0
 800f116:	2120      	movs	r1, #32
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f000 f829 	bl	800f170 <QSPI_WaitFlagStateUntilTimeout>
 800f11e:	4603      	mov	r3, r0
 800f120:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800f122:	7bfb      	ldrb	r3, [r7, #15]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d110      	bne.n	800f14a <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	695a      	ldr	r2, [r3, #20]
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800f136:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2201      	movs	r2, #1
 800f13c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f140:	e003      	b.n	800f14a <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2201      	movs	r2, #1
 800f146:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    }
  }

  return status;
 800f14a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3710      	adds	r7, #16
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}

0800f154 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800f154:	b480      	push	{r7}
 800f156:	b083      	sub	sp, #12
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	683a      	ldr	r2, [r7, #0]
 800f162:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800f164:	bf00      	nop
 800f166:	370c      	adds	r7, #12
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr

0800f170 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b084      	sub	sp, #16
 800f174:	af00      	add	r7, sp, #0
 800f176:	60f8      	str	r0, [r7, #12]
 800f178:	60b9      	str	r1, [r7, #8]
 800f17a:	603b      	str	r3, [r7, #0]
 800f17c:	4613      	mov	r3, r2
 800f17e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f180:	e01a      	b.n	800f1b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f182:	69bb      	ldr	r3, [r7, #24]
 800f184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f188:	d016      	beq.n	800f1b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f18a:	f7fb fd4b 	bl	800ac24 <HAL_GetTick>
 800f18e:	4602      	mov	r2, r0
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	1ad3      	subs	r3, r2, r3
 800f194:	69ba      	ldr	r2, [r7, #24]
 800f196:	429a      	cmp	r2, r3
 800f198:	d302      	bcc.n	800f1a0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800f19a:	69bb      	ldr	r3, [r7, #24]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d10b      	bne.n	800f1b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	2204      	movs	r2, #4
 800f1a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f1ac:	f043 0201 	orr.w	r2, r3, #1
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800f1b4:	2301      	movs	r3, #1
 800f1b6:	e00e      	b.n	800f1d6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	689a      	ldr	r2, [r3, #8]
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	4013      	ands	r3, r2
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	bf14      	ite	ne
 800f1c6:	2301      	movne	r3, #1
 800f1c8:	2300      	moveq	r3, #0
 800f1ca:	b2db      	uxtb	r3, r3
 800f1cc:	461a      	mov	r2, r3
 800f1ce:	79fb      	ldrb	r3, [r7, #7]
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d1d6      	bne.n	800f182 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f1d4:	2300      	movs	r3, #0
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3710      	adds	r7, #16
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}

0800f1de <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800f1de:	b480      	push	{r7}
 800f1e0:	b085      	sub	sp, #20
 800f1e2:	af00      	add	r7, sp, #0
 800f1e4:	60f8      	str	r0, [r7, #12]
 800f1e6:	60b9      	str	r1, [r7, #8]
 800f1e8:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d009      	beq.n	800f206 <QSPI_Config+0x28>
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f1f8:	d005      	beq.n	800f206 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	3a01      	subs	r2, #1
 800f204:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	699b      	ldr	r3, [r3, #24]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	f000 80c1 	beq.w	800f392 <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	6a1b      	ldr	r3, [r3, #32]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d063      	beq.n	800f2e0 <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	68ba      	ldr	r2, [r7, #8]
 800f21e:	6892      	ldr	r2, [r2, #8]
 800f220:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	69db      	ldr	r3, [r3, #28]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d031      	beq.n	800f28e <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f232:	431a      	orrs	r2, r3
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f238:	431a      	orrs	r2, r3
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f23e:	431a      	orrs	r2, r3
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	695b      	ldr	r3, [r3, #20]
 800f244:	049b      	lsls	r3, r3, #18
 800f246:	431a      	orrs	r2, r3
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	691b      	ldr	r3, [r3, #16]
 800f24c:	431a      	orrs	r2, r3
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	6a1b      	ldr	r3, [r3, #32]
 800f252:	431a      	orrs	r2, r3
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	68db      	ldr	r3, [r3, #12]
 800f258:	431a      	orrs	r2, r3
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	69db      	ldr	r3, [r3, #28]
 800f25e:	431a      	orrs	r2, r3
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	699b      	ldr	r3, [r3, #24]
 800f264:	431a      	orrs	r2, r3
 800f266:	68bb      	ldr	r3, [r7, #8]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	ea42 0103 	orr.w	r1, r2, r3
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	687a      	ldr	r2, [r7, #4]
 800f274:	430a      	orrs	r2, r1
 800f276:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f27e:	f000 813f 	beq.w	800f500 <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	68ba      	ldr	r2, [r7, #8]
 800f288:	6852      	ldr	r2, [r2, #4]
 800f28a:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800f28c:	e138      	b.n	800f500 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f296:	431a      	orrs	r2, r3
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f29c:	431a      	orrs	r2, r3
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2a2:	431a      	orrs	r2, r3
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	695b      	ldr	r3, [r3, #20]
 800f2a8:	049b      	lsls	r3, r3, #18
 800f2aa:	431a      	orrs	r2, r3
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	691b      	ldr	r3, [r3, #16]
 800f2b0:	431a      	orrs	r2, r3
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	6a1b      	ldr	r3, [r3, #32]
 800f2b6:	431a      	orrs	r2, r3
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	69db      	ldr	r3, [r3, #28]
 800f2bc:	431a      	orrs	r2, r3
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	699b      	ldr	r3, [r3, #24]
 800f2c2:	431a      	orrs	r2, r3
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	ea42 0103 	orr.w	r1, r2, r3
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	687a      	ldr	r2, [r7, #4]
 800f2d2:	430a      	orrs	r2, r1
 800f2d4:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	619a      	str	r2, [r3, #24]
}
 800f2de:	e10f      	b.n	800f500 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	69db      	ldr	r3, [r3, #28]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d02e      	beq.n	800f346 <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2f0:	431a      	orrs	r2, r3
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2f6:	431a      	orrs	r2, r3
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2fc:	431a      	orrs	r2, r3
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	695b      	ldr	r3, [r3, #20]
 800f302:	049b      	lsls	r3, r3, #18
 800f304:	431a      	orrs	r2, r3
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	6a1b      	ldr	r3, [r3, #32]
 800f30a:	431a      	orrs	r2, r3
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	68db      	ldr	r3, [r3, #12]
 800f310:	431a      	orrs	r2, r3
 800f312:	68bb      	ldr	r3, [r7, #8]
 800f314:	69db      	ldr	r3, [r3, #28]
 800f316:	431a      	orrs	r2, r3
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	699b      	ldr	r3, [r3, #24]
 800f31c:	431a      	orrs	r2, r3
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	ea42 0103 	orr.w	r1, r2, r3
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	687a      	ldr	r2, [r7, #4]
 800f32c:	430a      	orrs	r2, r1
 800f32e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f336:	f000 80e3 	beq.w	800f500 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	68ba      	ldr	r2, [r7, #8]
 800f340:	6852      	ldr	r2, [r2, #4]
 800f342:	619a      	str	r2, [r3, #24]
}
 800f344:	e0dc      	b.n	800f500 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f34e:	431a      	orrs	r2, r3
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f354:	431a      	orrs	r2, r3
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f35a:	431a      	orrs	r2, r3
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	695b      	ldr	r3, [r3, #20]
 800f360:	049b      	lsls	r3, r3, #18
 800f362:	431a      	orrs	r2, r3
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	6a1b      	ldr	r3, [r3, #32]
 800f368:	431a      	orrs	r2, r3
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	69db      	ldr	r3, [r3, #28]
 800f36e:	431a      	orrs	r2, r3
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	699b      	ldr	r3, [r3, #24]
 800f374:	431a      	orrs	r2, r3
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	ea42 0103 	orr.w	r1, r2, r3
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	687a      	ldr	r2, [r7, #4]
 800f384:	430a      	orrs	r2, r1
 800f386:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	2200      	movs	r2, #0
 800f38e:	619a      	str	r2, [r3, #24]
}
 800f390:	e0b6      	b.n	800f500 <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	6a1b      	ldr	r3, [r3, #32]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d05d      	beq.n	800f456 <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	68ba      	ldr	r2, [r7, #8]
 800f3a0:	6892      	ldr	r2, [r2, #8]
 800f3a2:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	69db      	ldr	r3, [r3, #28]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d02e      	beq.n	800f40a <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3b4:	431a      	orrs	r2, r3
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f3ba:	431a      	orrs	r2, r3
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3c0:	431a      	orrs	r2, r3
 800f3c2:	68bb      	ldr	r3, [r7, #8]
 800f3c4:	695b      	ldr	r3, [r3, #20]
 800f3c6:	049b      	lsls	r3, r3, #18
 800f3c8:	431a      	orrs	r2, r3
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	691b      	ldr	r3, [r3, #16]
 800f3ce:	431a      	orrs	r2, r3
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	6a1b      	ldr	r3, [r3, #32]
 800f3d4:	431a      	orrs	r2, r3
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	68db      	ldr	r3, [r3, #12]
 800f3da:	431a      	orrs	r2, r3
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	69db      	ldr	r3, [r3, #28]
 800f3e0:	431a      	orrs	r2, r3
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	699b      	ldr	r3, [r3, #24]
 800f3e6:	ea42 0103 	orr.w	r1, r2, r3
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	687a      	ldr	r2, [r7, #4]
 800f3f0:	430a      	orrs	r2, r1
 800f3f2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f3fa:	f000 8081 	beq.w	800f500 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	68ba      	ldr	r2, [r7, #8]
 800f404:	6852      	ldr	r2, [r2, #4]
 800f406:	619a      	str	r2, [r3, #24]
}
 800f408:	e07a      	b.n	800f500 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f412:	431a      	orrs	r2, r3
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f418:	431a      	orrs	r2, r3
 800f41a:	68bb      	ldr	r3, [r7, #8]
 800f41c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f41e:	431a      	orrs	r2, r3
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	695b      	ldr	r3, [r3, #20]
 800f424:	049b      	lsls	r3, r3, #18
 800f426:	431a      	orrs	r2, r3
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	691b      	ldr	r3, [r3, #16]
 800f42c:	431a      	orrs	r2, r3
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	6a1b      	ldr	r3, [r3, #32]
 800f432:	431a      	orrs	r2, r3
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	69db      	ldr	r3, [r3, #28]
 800f438:	431a      	orrs	r2, r3
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	699b      	ldr	r3, [r3, #24]
 800f43e:	ea42 0103 	orr.w	r1, r2, r3
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	687a      	ldr	r2, [r7, #4]
 800f448:	430a      	orrs	r2, r1
 800f44a:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	2200      	movs	r2, #0
 800f452:	619a      	str	r2, [r3, #24]
}
 800f454:	e054      	b.n	800f500 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	69db      	ldr	r3, [r3, #28]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d02a      	beq.n	800f4b4 <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f466:	431a      	orrs	r2, r3
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f46c:	431a      	orrs	r2, r3
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f472:	431a      	orrs	r2, r3
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	695b      	ldr	r3, [r3, #20]
 800f478:	049b      	lsls	r3, r3, #18
 800f47a:	431a      	orrs	r2, r3
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	6a1b      	ldr	r3, [r3, #32]
 800f480:	431a      	orrs	r2, r3
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	68db      	ldr	r3, [r3, #12]
 800f486:	431a      	orrs	r2, r3
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	69db      	ldr	r3, [r3, #28]
 800f48c:	431a      	orrs	r2, r3
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	699b      	ldr	r3, [r3, #24]
 800f492:	ea42 0103 	orr.w	r1, r2, r3
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	687a      	ldr	r2, [r7, #4]
 800f49c:	430a      	orrs	r2, r1
 800f49e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f4a6:	d02b      	beq.n	800f500 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	68ba      	ldr	r2, [r7, #8]
 800f4ae:	6852      	ldr	r2, [r2, #4]
 800f4b0:	619a      	str	r2, [r3, #24]
}
 800f4b2:	e025      	b.n	800f500 <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d021      	beq.n	800f500 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4c4:	431a      	orrs	r2, r3
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f4ca:	431a      	orrs	r2, r3
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4d0:	431a      	orrs	r2, r3
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	695b      	ldr	r3, [r3, #20]
 800f4d6:	049b      	lsls	r3, r3, #18
 800f4d8:	431a      	orrs	r2, r3
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	6a1b      	ldr	r3, [r3, #32]
 800f4de:	431a      	orrs	r2, r3
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	69db      	ldr	r3, [r3, #28]
 800f4e4:	431a      	orrs	r2, r3
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	699b      	ldr	r3, [r3, #24]
 800f4ea:	ea42 0103 	orr.w	r1, r2, r3
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	430a      	orrs	r2, r1
 800f4f6:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	619a      	str	r2, [r3, #24]
}
 800f500:	bf00      	nop
 800f502:	3714      	adds	r7, #20
 800f504:	46bd      	mov	sp, r7
 800f506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50a:	4770      	bx	lr

0800f50c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b088      	sub	sp, #32
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d101      	bne.n	800f51e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f51a:	2301      	movs	r3, #1
 800f51c:	e3ca      	b.n	800fcb4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f51e:	4b97      	ldr	r3, [pc, #604]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f520:	689b      	ldr	r3, [r3, #8]
 800f522:	f003 030c 	and.w	r3, r3, #12
 800f526:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f528:	4b94      	ldr	r3, [pc, #592]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f52a:	68db      	ldr	r3, [r3, #12]
 800f52c:	f003 0303 	and.w	r3, r3, #3
 800f530:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	f003 0310 	and.w	r3, r3, #16
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	f000 80e4 	beq.w	800f708 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800f540:	69bb      	ldr	r3, [r7, #24]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d007      	beq.n	800f556 <HAL_RCC_OscConfig+0x4a>
 800f546:	69bb      	ldr	r3, [r7, #24]
 800f548:	2b0c      	cmp	r3, #12
 800f54a:	f040 808b 	bne.w	800f664 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	2b01      	cmp	r3, #1
 800f552:	f040 8087 	bne.w	800f664 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f556:	4b89      	ldr	r3, [pc, #548]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	f003 0302 	and.w	r3, r3, #2
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d005      	beq.n	800f56e <HAL_RCC_OscConfig+0x62>
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	699b      	ldr	r3, [r3, #24]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d101      	bne.n	800f56e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800f56a:	2301      	movs	r3, #1
 800f56c:	e3a2      	b.n	800fcb4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6a1a      	ldr	r2, [r3, #32]
 800f572:	4b82      	ldr	r3, [pc, #520]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	f003 0308 	and.w	r3, r3, #8
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d004      	beq.n	800f588 <HAL_RCC_OscConfig+0x7c>
 800f57e:	4b7f      	ldr	r3, [pc, #508]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f586:	e005      	b.n	800f594 <HAL_RCC_OscConfig+0x88>
 800f588:	4b7c      	ldr	r3, [pc, #496]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f58a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f58e:	091b      	lsrs	r3, r3, #4
 800f590:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f594:	4293      	cmp	r3, r2
 800f596:	d223      	bcs.n	800f5e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	6a1b      	ldr	r3, [r3, #32]
 800f59c:	4618      	mov	r0, r3
 800f59e:	f000 fd55 	bl	801004c <RCC_SetFlashLatencyFromMSIRange>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d001      	beq.n	800f5ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	e383      	b.n	800fcb4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f5ac:	4b73      	ldr	r3, [pc, #460]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	4a72      	ldr	r2, [pc, #456]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f5b2:	f043 0308 	orr.w	r3, r3, #8
 800f5b6:	6013      	str	r3, [r2, #0]
 800f5b8:	4b70      	ldr	r3, [pc, #448]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	6a1b      	ldr	r3, [r3, #32]
 800f5c4:	496d      	ldr	r1, [pc, #436]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f5c6:	4313      	orrs	r3, r2
 800f5c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f5ca:	4b6c      	ldr	r3, [pc, #432]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f5cc:	685b      	ldr	r3, [r3, #4]
 800f5ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	69db      	ldr	r3, [r3, #28]
 800f5d6:	021b      	lsls	r3, r3, #8
 800f5d8:	4968      	ldr	r1, [pc, #416]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f5da:	4313      	orrs	r3, r2
 800f5dc:	604b      	str	r3, [r1, #4]
 800f5de:	e025      	b.n	800f62c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f5e0:	4b66      	ldr	r3, [pc, #408]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	4a65      	ldr	r2, [pc, #404]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f5e6:	f043 0308 	orr.w	r3, r3, #8
 800f5ea:	6013      	str	r3, [r2, #0]
 800f5ec:	4b63      	ldr	r3, [pc, #396]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	6a1b      	ldr	r3, [r3, #32]
 800f5f8:	4960      	ldr	r1, [pc, #384]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f5fa:	4313      	orrs	r3, r2
 800f5fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f5fe:	4b5f      	ldr	r3, [pc, #380]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f600:	685b      	ldr	r3, [r3, #4]
 800f602:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	69db      	ldr	r3, [r3, #28]
 800f60a:	021b      	lsls	r3, r3, #8
 800f60c:	495b      	ldr	r1, [pc, #364]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f60e:	4313      	orrs	r3, r2
 800f610:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f612:	69bb      	ldr	r3, [r7, #24]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d109      	bne.n	800f62c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	6a1b      	ldr	r3, [r3, #32]
 800f61c:	4618      	mov	r0, r3
 800f61e:	f000 fd15 	bl	801004c <RCC_SetFlashLatencyFromMSIRange>
 800f622:	4603      	mov	r3, r0
 800f624:	2b00      	cmp	r3, #0
 800f626:	d001      	beq.n	800f62c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800f628:	2301      	movs	r3, #1
 800f62a:	e343      	b.n	800fcb4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800f62c:	f000 fc4a 	bl	800fec4 <HAL_RCC_GetSysClockFreq>
 800f630:	4602      	mov	r2, r0
 800f632:	4b52      	ldr	r3, [pc, #328]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f634:	689b      	ldr	r3, [r3, #8]
 800f636:	091b      	lsrs	r3, r3, #4
 800f638:	f003 030f 	and.w	r3, r3, #15
 800f63c:	4950      	ldr	r1, [pc, #320]	@ (800f780 <HAL_RCC_OscConfig+0x274>)
 800f63e:	5ccb      	ldrb	r3, [r1, r3]
 800f640:	f003 031f 	and.w	r3, r3, #31
 800f644:	fa22 f303 	lsr.w	r3, r2, r3
 800f648:	4a4e      	ldr	r2, [pc, #312]	@ (800f784 <HAL_RCC_OscConfig+0x278>)
 800f64a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800f64c:	4b4e      	ldr	r3, [pc, #312]	@ (800f788 <HAL_RCC_OscConfig+0x27c>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	4618      	mov	r0, r3
 800f652:	f7fb fa97 	bl	800ab84 <HAL_InitTick>
 800f656:	4603      	mov	r3, r0
 800f658:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800f65a:	7bfb      	ldrb	r3, [r7, #15]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d052      	beq.n	800f706 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800f660:	7bfb      	ldrb	r3, [r7, #15]
 800f662:	e327      	b.n	800fcb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	699b      	ldr	r3, [r3, #24]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d032      	beq.n	800f6d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800f66c:	4b43      	ldr	r3, [pc, #268]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	4a42      	ldr	r2, [pc, #264]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f672:	f043 0301 	orr.w	r3, r3, #1
 800f676:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f678:	f7fb fad4 	bl	800ac24 <HAL_GetTick>
 800f67c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f67e:	e008      	b.n	800f692 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f680:	f7fb fad0 	bl	800ac24 <HAL_GetTick>
 800f684:	4602      	mov	r2, r0
 800f686:	693b      	ldr	r3, [r7, #16]
 800f688:	1ad3      	subs	r3, r2, r3
 800f68a:	2b02      	cmp	r3, #2
 800f68c:	d901      	bls.n	800f692 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800f68e:	2303      	movs	r3, #3
 800f690:	e310      	b.n	800fcb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f692:	4b3a      	ldr	r3, [pc, #232]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	f003 0302 	and.w	r3, r3, #2
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d0f0      	beq.n	800f680 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f69e:	4b37      	ldr	r3, [pc, #220]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	4a36      	ldr	r2, [pc, #216]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f6a4:	f043 0308 	orr.w	r3, r3, #8
 800f6a8:	6013      	str	r3, [r2, #0]
 800f6aa:	4b34      	ldr	r3, [pc, #208]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6a1b      	ldr	r3, [r3, #32]
 800f6b6:	4931      	ldr	r1, [pc, #196]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f6b8:	4313      	orrs	r3, r2
 800f6ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f6bc:	4b2f      	ldr	r3, [pc, #188]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f6be:	685b      	ldr	r3, [r3, #4]
 800f6c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	69db      	ldr	r3, [r3, #28]
 800f6c8:	021b      	lsls	r3, r3, #8
 800f6ca:	492c      	ldr	r1, [pc, #176]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f6cc:	4313      	orrs	r3, r2
 800f6ce:	604b      	str	r3, [r1, #4]
 800f6d0:	e01a      	b.n	800f708 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800f6d2:	4b2a      	ldr	r3, [pc, #168]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	4a29      	ldr	r2, [pc, #164]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f6d8:	f023 0301 	bic.w	r3, r3, #1
 800f6dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f6de:	f7fb faa1 	bl	800ac24 <HAL_GetTick>
 800f6e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f6e4:	e008      	b.n	800f6f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f6e6:	f7fb fa9d 	bl	800ac24 <HAL_GetTick>
 800f6ea:	4602      	mov	r2, r0
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	1ad3      	subs	r3, r2, r3
 800f6f0:	2b02      	cmp	r3, #2
 800f6f2:	d901      	bls.n	800f6f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800f6f4:	2303      	movs	r3, #3
 800f6f6:	e2dd      	b.n	800fcb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f6f8:	4b20      	ldr	r3, [pc, #128]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	f003 0302 	and.w	r3, r3, #2
 800f700:	2b00      	cmp	r3, #0
 800f702:	d1f0      	bne.n	800f6e6 <HAL_RCC_OscConfig+0x1da>
 800f704:	e000      	b.n	800f708 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f706:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	f003 0301 	and.w	r3, r3, #1
 800f710:	2b00      	cmp	r3, #0
 800f712:	d074      	beq.n	800f7fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800f714:	69bb      	ldr	r3, [r7, #24]
 800f716:	2b08      	cmp	r3, #8
 800f718:	d005      	beq.n	800f726 <HAL_RCC_OscConfig+0x21a>
 800f71a:	69bb      	ldr	r3, [r7, #24]
 800f71c:	2b0c      	cmp	r3, #12
 800f71e:	d10e      	bne.n	800f73e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	2b03      	cmp	r3, #3
 800f724:	d10b      	bne.n	800f73e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f726:	4b15      	ldr	r3, [pc, #84]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d064      	beq.n	800f7fc <HAL_RCC_OscConfig+0x2f0>
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	685b      	ldr	r3, [r3, #4]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d160      	bne.n	800f7fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800f73a:	2301      	movs	r3, #1
 800f73c:	e2ba      	b.n	800fcb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	685b      	ldr	r3, [r3, #4]
 800f742:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f746:	d106      	bne.n	800f756 <HAL_RCC_OscConfig+0x24a>
 800f748:	4b0c      	ldr	r3, [pc, #48]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	4a0b      	ldr	r2, [pc, #44]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f74e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f752:	6013      	str	r3, [r2, #0]
 800f754:	e026      	b.n	800f7a4 <HAL_RCC_OscConfig+0x298>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	685b      	ldr	r3, [r3, #4]
 800f75a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f75e:	d115      	bne.n	800f78c <HAL_RCC_OscConfig+0x280>
 800f760:	4b06      	ldr	r3, [pc, #24]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	4a05      	ldr	r2, [pc, #20]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f766:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f76a:	6013      	str	r3, [r2, #0]
 800f76c:	4b03      	ldr	r3, [pc, #12]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	4a02      	ldr	r2, [pc, #8]	@ (800f77c <HAL_RCC_OscConfig+0x270>)
 800f772:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f776:	6013      	str	r3, [r2, #0]
 800f778:	e014      	b.n	800f7a4 <HAL_RCC_OscConfig+0x298>
 800f77a:	bf00      	nop
 800f77c:	40021000 	.word	0x40021000
 800f780:	08017444 	.word	0x08017444
 800f784:	20000168 	.word	0x20000168
 800f788:	20000174 	.word	0x20000174
 800f78c:	4ba0      	ldr	r3, [pc, #640]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	4a9f      	ldr	r2, [pc, #636]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f796:	6013      	str	r3, [r2, #0]
 800f798:	4b9d      	ldr	r3, [pc, #628]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	4a9c      	ldr	r2, [pc, #624]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f79e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f7a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	685b      	ldr	r3, [r3, #4]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d013      	beq.n	800f7d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f7ac:	f7fb fa3a 	bl	800ac24 <HAL_GetTick>
 800f7b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f7b2:	e008      	b.n	800f7c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f7b4:	f7fb fa36 	bl	800ac24 <HAL_GetTick>
 800f7b8:	4602      	mov	r2, r0
 800f7ba:	693b      	ldr	r3, [r7, #16]
 800f7bc:	1ad3      	subs	r3, r2, r3
 800f7be:	2b64      	cmp	r3, #100	@ 0x64
 800f7c0:	d901      	bls.n	800f7c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800f7c2:	2303      	movs	r3, #3
 800f7c4:	e276      	b.n	800fcb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f7c6:	4b92      	ldr	r3, [pc, #584]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d0f0      	beq.n	800f7b4 <HAL_RCC_OscConfig+0x2a8>
 800f7d2:	e014      	b.n	800f7fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f7d4:	f7fb fa26 	bl	800ac24 <HAL_GetTick>
 800f7d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f7da:	e008      	b.n	800f7ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f7dc:	f7fb fa22 	bl	800ac24 <HAL_GetTick>
 800f7e0:	4602      	mov	r2, r0
 800f7e2:	693b      	ldr	r3, [r7, #16]
 800f7e4:	1ad3      	subs	r3, r2, r3
 800f7e6:	2b64      	cmp	r3, #100	@ 0x64
 800f7e8:	d901      	bls.n	800f7ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800f7ea:	2303      	movs	r3, #3
 800f7ec:	e262      	b.n	800fcb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f7ee:	4b88      	ldr	r3, [pc, #544]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d1f0      	bne.n	800f7dc <HAL_RCC_OscConfig+0x2d0>
 800f7fa:	e000      	b.n	800f7fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f7fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	f003 0302 	and.w	r3, r3, #2
 800f806:	2b00      	cmp	r3, #0
 800f808:	d060      	beq.n	800f8cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800f80a:	69bb      	ldr	r3, [r7, #24]
 800f80c:	2b04      	cmp	r3, #4
 800f80e:	d005      	beq.n	800f81c <HAL_RCC_OscConfig+0x310>
 800f810:	69bb      	ldr	r3, [r7, #24]
 800f812:	2b0c      	cmp	r3, #12
 800f814:	d119      	bne.n	800f84a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800f816:	697b      	ldr	r3, [r7, #20]
 800f818:	2b02      	cmp	r3, #2
 800f81a:	d116      	bne.n	800f84a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f81c:	4b7c      	ldr	r3, [pc, #496]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f824:	2b00      	cmp	r3, #0
 800f826:	d005      	beq.n	800f834 <HAL_RCC_OscConfig+0x328>
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	68db      	ldr	r3, [r3, #12]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d101      	bne.n	800f834 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800f830:	2301      	movs	r3, #1
 800f832:	e23f      	b.n	800fcb4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f834:	4b76      	ldr	r3, [pc, #472]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f836:	685b      	ldr	r3, [r3, #4]
 800f838:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	691b      	ldr	r3, [r3, #16]
 800f840:	061b      	lsls	r3, r3, #24
 800f842:	4973      	ldr	r1, [pc, #460]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f844:	4313      	orrs	r3, r2
 800f846:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f848:	e040      	b.n	800f8cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	68db      	ldr	r3, [r3, #12]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d023      	beq.n	800f89a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f852:	4b6f      	ldr	r3, [pc, #444]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	4a6e      	ldr	r2, [pc, #440]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f85c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f85e:	f7fb f9e1 	bl	800ac24 <HAL_GetTick>
 800f862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f864:	e008      	b.n	800f878 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f866:	f7fb f9dd 	bl	800ac24 <HAL_GetTick>
 800f86a:	4602      	mov	r2, r0
 800f86c:	693b      	ldr	r3, [r7, #16]
 800f86e:	1ad3      	subs	r3, r2, r3
 800f870:	2b02      	cmp	r3, #2
 800f872:	d901      	bls.n	800f878 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800f874:	2303      	movs	r3, #3
 800f876:	e21d      	b.n	800fcb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f878:	4b65      	ldr	r3, [pc, #404]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f880:	2b00      	cmp	r3, #0
 800f882:	d0f0      	beq.n	800f866 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f884:	4b62      	ldr	r3, [pc, #392]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f886:	685b      	ldr	r3, [r3, #4]
 800f888:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	691b      	ldr	r3, [r3, #16]
 800f890:	061b      	lsls	r3, r3, #24
 800f892:	495f      	ldr	r1, [pc, #380]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f894:	4313      	orrs	r3, r2
 800f896:	604b      	str	r3, [r1, #4]
 800f898:	e018      	b.n	800f8cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f89a:	4b5d      	ldr	r3, [pc, #372]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	4a5c      	ldr	r2, [pc, #368]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f8a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f8a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f8a6:	f7fb f9bd 	bl	800ac24 <HAL_GetTick>
 800f8aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800f8ac:	e008      	b.n	800f8c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f8ae:	f7fb f9b9 	bl	800ac24 <HAL_GetTick>
 800f8b2:	4602      	mov	r2, r0
 800f8b4:	693b      	ldr	r3, [r7, #16]
 800f8b6:	1ad3      	subs	r3, r2, r3
 800f8b8:	2b02      	cmp	r3, #2
 800f8ba:	d901      	bls.n	800f8c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800f8bc:	2303      	movs	r3, #3
 800f8be:	e1f9      	b.n	800fcb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800f8c0:	4b53      	ldr	r3, [pc, #332]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d1f0      	bne.n	800f8ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	f003 0308 	and.w	r3, r3, #8
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d03c      	beq.n	800f952 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	695b      	ldr	r3, [r3, #20]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d01c      	beq.n	800f91a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f8e0:	4b4b      	ldr	r3, [pc, #300]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f8e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f8e6:	4a4a      	ldr	r2, [pc, #296]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f8e8:	f043 0301 	orr.w	r3, r3, #1
 800f8ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f8f0:	f7fb f998 	bl	800ac24 <HAL_GetTick>
 800f8f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800f8f6:	e008      	b.n	800f90a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f8f8:	f7fb f994 	bl	800ac24 <HAL_GetTick>
 800f8fc:	4602      	mov	r2, r0
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	1ad3      	subs	r3, r2, r3
 800f902:	2b02      	cmp	r3, #2
 800f904:	d901      	bls.n	800f90a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800f906:	2303      	movs	r3, #3
 800f908:	e1d4      	b.n	800fcb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800f90a:	4b41      	ldr	r3, [pc, #260]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f90c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f910:	f003 0302 	and.w	r3, r3, #2
 800f914:	2b00      	cmp	r3, #0
 800f916:	d0ef      	beq.n	800f8f8 <HAL_RCC_OscConfig+0x3ec>
 800f918:	e01b      	b.n	800f952 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f91a:	4b3d      	ldr	r3, [pc, #244]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f91c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f920:	4a3b      	ldr	r2, [pc, #236]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f922:	f023 0301 	bic.w	r3, r3, #1
 800f926:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f92a:	f7fb f97b 	bl	800ac24 <HAL_GetTick>
 800f92e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f930:	e008      	b.n	800f944 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f932:	f7fb f977 	bl	800ac24 <HAL_GetTick>
 800f936:	4602      	mov	r2, r0
 800f938:	693b      	ldr	r3, [r7, #16]
 800f93a:	1ad3      	subs	r3, r2, r3
 800f93c:	2b02      	cmp	r3, #2
 800f93e:	d901      	bls.n	800f944 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800f940:	2303      	movs	r3, #3
 800f942:	e1b7      	b.n	800fcb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f944:	4b32      	ldr	r3, [pc, #200]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f946:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f94a:	f003 0302 	and.w	r3, r3, #2
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d1ef      	bne.n	800f932 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	f003 0304 	and.w	r3, r3, #4
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	f000 80a6 	beq.w	800faac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f960:	2300      	movs	r3, #0
 800f962:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800f964:	4b2a      	ldr	r3, [pc, #168]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f968:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d10d      	bne.n	800f98c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f970:	4b27      	ldr	r3, [pc, #156]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f974:	4a26      	ldr	r2, [pc, #152]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f976:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f97a:	6593      	str	r3, [r2, #88]	@ 0x58
 800f97c:	4b24      	ldr	r3, [pc, #144]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f97e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f980:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f984:	60bb      	str	r3, [r7, #8]
 800f986:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f988:	2301      	movs	r3, #1
 800f98a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f98c:	4b21      	ldr	r3, [pc, #132]	@ (800fa14 <HAL_RCC_OscConfig+0x508>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f994:	2b00      	cmp	r3, #0
 800f996:	d118      	bne.n	800f9ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f998:	4b1e      	ldr	r3, [pc, #120]	@ (800fa14 <HAL_RCC_OscConfig+0x508>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	4a1d      	ldr	r2, [pc, #116]	@ (800fa14 <HAL_RCC_OscConfig+0x508>)
 800f99e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f9a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f9a4:	f7fb f93e 	bl	800ac24 <HAL_GetTick>
 800f9a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f9aa:	e008      	b.n	800f9be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f9ac:	f7fb f93a 	bl	800ac24 <HAL_GetTick>
 800f9b0:	4602      	mov	r2, r0
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	1ad3      	subs	r3, r2, r3
 800f9b6:	2b02      	cmp	r3, #2
 800f9b8:	d901      	bls.n	800f9be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800f9ba:	2303      	movs	r3, #3
 800f9bc:	e17a      	b.n	800fcb4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f9be:	4b15      	ldr	r3, [pc, #84]	@ (800fa14 <HAL_RCC_OscConfig+0x508>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d0f0      	beq.n	800f9ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	689b      	ldr	r3, [r3, #8]
 800f9ce:	2b01      	cmp	r3, #1
 800f9d0:	d108      	bne.n	800f9e4 <HAL_RCC_OscConfig+0x4d8>
 800f9d2:	4b0f      	ldr	r3, [pc, #60]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f9d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9d8:	4a0d      	ldr	r2, [pc, #52]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f9da:	f043 0301 	orr.w	r3, r3, #1
 800f9de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800f9e2:	e029      	b.n	800fa38 <HAL_RCC_OscConfig+0x52c>
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	689b      	ldr	r3, [r3, #8]
 800f9e8:	2b05      	cmp	r3, #5
 800f9ea:	d115      	bne.n	800fa18 <HAL_RCC_OscConfig+0x50c>
 800f9ec:	4b08      	ldr	r3, [pc, #32]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f9ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9f2:	4a07      	ldr	r2, [pc, #28]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f9f4:	f043 0304 	orr.w	r3, r3, #4
 800f9f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800f9fc:	4b04      	ldr	r3, [pc, #16]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800f9fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa02:	4a03      	ldr	r2, [pc, #12]	@ (800fa10 <HAL_RCC_OscConfig+0x504>)
 800fa04:	f043 0301 	orr.w	r3, r3, #1
 800fa08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800fa0c:	e014      	b.n	800fa38 <HAL_RCC_OscConfig+0x52c>
 800fa0e:	bf00      	nop
 800fa10:	40021000 	.word	0x40021000
 800fa14:	40007000 	.word	0x40007000
 800fa18:	4b9c      	ldr	r3, [pc, #624]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fa1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa1e:	4a9b      	ldr	r2, [pc, #620]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fa20:	f023 0301 	bic.w	r3, r3, #1
 800fa24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800fa28:	4b98      	ldr	r3, [pc, #608]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fa2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa2e:	4a97      	ldr	r2, [pc, #604]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fa30:	f023 0304 	bic.w	r3, r3, #4
 800fa34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	689b      	ldr	r3, [r3, #8]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d016      	beq.n	800fa6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fa40:	f7fb f8f0 	bl	800ac24 <HAL_GetTick>
 800fa44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fa46:	e00a      	b.n	800fa5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fa48:	f7fb f8ec 	bl	800ac24 <HAL_GetTick>
 800fa4c:	4602      	mov	r2, r0
 800fa4e:	693b      	ldr	r3, [r7, #16]
 800fa50:	1ad3      	subs	r3, r2, r3
 800fa52:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fa56:	4293      	cmp	r3, r2
 800fa58:	d901      	bls.n	800fa5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800fa5a:	2303      	movs	r3, #3
 800fa5c:	e12a      	b.n	800fcb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fa5e:	4b8b      	ldr	r3, [pc, #556]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fa60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa64:	f003 0302 	and.w	r3, r3, #2
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d0ed      	beq.n	800fa48 <HAL_RCC_OscConfig+0x53c>
 800fa6c:	e015      	b.n	800fa9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fa6e:	f7fb f8d9 	bl	800ac24 <HAL_GetTick>
 800fa72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800fa74:	e00a      	b.n	800fa8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fa76:	f7fb f8d5 	bl	800ac24 <HAL_GetTick>
 800fa7a:	4602      	mov	r2, r0
 800fa7c:	693b      	ldr	r3, [r7, #16]
 800fa7e:	1ad3      	subs	r3, r2, r3
 800fa80:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fa84:	4293      	cmp	r3, r2
 800fa86:	d901      	bls.n	800fa8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800fa88:	2303      	movs	r3, #3
 800fa8a:	e113      	b.n	800fcb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800fa8c:	4b7f      	ldr	r3, [pc, #508]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fa8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa92:	f003 0302 	and.w	r3, r3, #2
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d1ed      	bne.n	800fa76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800fa9a:	7ffb      	ldrb	r3, [r7, #31]
 800fa9c:	2b01      	cmp	r3, #1
 800fa9e:	d105      	bne.n	800faac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800faa0:	4b7a      	ldr	r3, [pc, #488]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800faa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800faa4:	4a79      	ldr	r2, [pc, #484]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800faa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800faaa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	f000 80fe 	beq.w	800fcb2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800faba:	2b02      	cmp	r3, #2
 800fabc:	f040 80d0 	bne.w	800fc60 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800fac0:	4b72      	ldr	r3, [pc, #456]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fac2:	68db      	ldr	r3, [r3, #12]
 800fac4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	f003 0203 	and.w	r2, r3, #3
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fad0:	429a      	cmp	r2, r3
 800fad2:	d130      	bne.n	800fb36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fade:	3b01      	subs	r3, #1
 800fae0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800fae2:	429a      	cmp	r2, r3
 800fae4:	d127      	bne.n	800fb36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800faf0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800faf2:	429a      	cmp	r2, r3
 800faf4:	d11f      	bne.n	800fb36 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fafc:	687a      	ldr	r2, [r7, #4]
 800fafe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800fb00:	2a07      	cmp	r2, #7
 800fb02:	bf14      	ite	ne
 800fb04:	2201      	movne	r2, #1
 800fb06:	2200      	moveq	r2, #0
 800fb08:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800fb0a:	4293      	cmp	r3, r2
 800fb0c:	d113      	bne.n	800fb36 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800fb0e:	697b      	ldr	r3, [r7, #20]
 800fb10:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb18:	085b      	lsrs	r3, r3, #1
 800fb1a:	3b01      	subs	r3, #1
 800fb1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800fb1e:	429a      	cmp	r2, r3
 800fb20:	d109      	bne.n	800fb36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800fb22:	697b      	ldr	r3, [r7, #20]
 800fb24:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb2c:	085b      	lsrs	r3, r3, #1
 800fb2e:	3b01      	subs	r3, #1
 800fb30:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800fb32:	429a      	cmp	r2, r3
 800fb34:	d06e      	beq.n	800fc14 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800fb36:	69bb      	ldr	r3, [r7, #24]
 800fb38:	2b0c      	cmp	r3, #12
 800fb3a:	d069      	beq.n	800fc10 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800fb3c:	4b53      	ldr	r3, [pc, #332]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d105      	bne.n	800fb54 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800fb48:	4b50      	ldr	r3, [pc, #320]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d001      	beq.n	800fb58 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800fb54:	2301      	movs	r3, #1
 800fb56:	e0ad      	b.n	800fcb4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800fb58:	4b4c      	ldr	r3, [pc, #304]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	4a4b      	ldr	r2, [pc, #300]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fb5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fb62:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800fb64:	f7fb f85e 	bl	800ac24 <HAL_GetTick>
 800fb68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fb6a:	e008      	b.n	800fb7e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fb6c:	f7fb f85a 	bl	800ac24 <HAL_GetTick>
 800fb70:	4602      	mov	r2, r0
 800fb72:	693b      	ldr	r3, [r7, #16]
 800fb74:	1ad3      	subs	r3, r2, r3
 800fb76:	2b02      	cmp	r3, #2
 800fb78:	d901      	bls.n	800fb7e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800fb7a:	2303      	movs	r3, #3
 800fb7c:	e09a      	b.n	800fcb4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fb7e:	4b43      	ldr	r3, [pc, #268]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d1f0      	bne.n	800fb6c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800fb8a:	4b40      	ldr	r3, [pc, #256]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fb8c:	68da      	ldr	r2, [r3, #12]
 800fb8e:	4b40      	ldr	r3, [pc, #256]	@ (800fc90 <HAL_RCC_OscConfig+0x784>)
 800fb90:	4013      	ands	r3, r2
 800fb92:	687a      	ldr	r2, [r7, #4]
 800fb94:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800fb96:	687a      	ldr	r2, [r7, #4]
 800fb98:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800fb9a:	3a01      	subs	r2, #1
 800fb9c:	0112      	lsls	r2, r2, #4
 800fb9e:	4311      	orrs	r1, r2
 800fba0:	687a      	ldr	r2, [r7, #4]
 800fba2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800fba4:	0212      	lsls	r2, r2, #8
 800fba6:	4311      	orrs	r1, r2
 800fba8:	687a      	ldr	r2, [r7, #4]
 800fbaa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800fbac:	0852      	lsrs	r2, r2, #1
 800fbae:	3a01      	subs	r2, #1
 800fbb0:	0552      	lsls	r2, r2, #21
 800fbb2:	4311      	orrs	r1, r2
 800fbb4:	687a      	ldr	r2, [r7, #4]
 800fbb6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800fbb8:	0852      	lsrs	r2, r2, #1
 800fbba:	3a01      	subs	r2, #1
 800fbbc:	0652      	lsls	r2, r2, #25
 800fbbe:	4311      	orrs	r1, r2
 800fbc0:	687a      	ldr	r2, [r7, #4]
 800fbc2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800fbc4:	0912      	lsrs	r2, r2, #4
 800fbc6:	0452      	lsls	r2, r2, #17
 800fbc8:	430a      	orrs	r2, r1
 800fbca:	4930      	ldr	r1, [pc, #192]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fbcc:	4313      	orrs	r3, r2
 800fbce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800fbd0:	4b2e      	ldr	r3, [pc, #184]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	4a2d      	ldr	r2, [pc, #180]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fbd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fbda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800fbdc:	4b2b      	ldr	r3, [pc, #172]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fbde:	68db      	ldr	r3, [r3, #12]
 800fbe0:	4a2a      	ldr	r2, [pc, #168]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fbe2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fbe6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800fbe8:	f7fb f81c 	bl	800ac24 <HAL_GetTick>
 800fbec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fbee:	e008      	b.n	800fc02 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fbf0:	f7fb f818 	bl	800ac24 <HAL_GetTick>
 800fbf4:	4602      	mov	r2, r0
 800fbf6:	693b      	ldr	r3, [r7, #16]
 800fbf8:	1ad3      	subs	r3, r2, r3
 800fbfa:	2b02      	cmp	r3, #2
 800fbfc:	d901      	bls.n	800fc02 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800fbfe:	2303      	movs	r3, #3
 800fc00:	e058      	b.n	800fcb4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fc02:	4b22      	ldr	r3, [pc, #136]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d0f0      	beq.n	800fbf0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800fc0e:	e050      	b.n	800fcb2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800fc10:	2301      	movs	r3, #1
 800fc12:	e04f      	b.n	800fcb4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fc14:	4b1d      	ldr	r3, [pc, #116]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d148      	bne.n	800fcb2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800fc20:	4b1a      	ldr	r3, [pc, #104]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	4a19      	ldr	r2, [pc, #100]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fc26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fc2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800fc2c:	4b17      	ldr	r3, [pc, #92]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fc2e:	68db      	ldr	r3, [r3, #12]
 800fc30:	4a16      	ldr	r2, [pc, #88]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fc32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fc36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800fc38:	f7fa fff4 	bl	800ac24 <HAL_GetTick>
 800fc3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fc3e:	e008      	b.n	800fc52 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fc40:	f7fa fff0 	bl	800ac24 <HAL_GetTick>
 800fc44:	4602      	mov	r2, r0
 800fc46:	693b      	ldr	r3, [r7, #16]
 800fc48:	1ad3      	subs	r3, r2, r3
 800fc4a:	2b02      	cmp	r3, #2
 800fc4c:	d901      	bls.n	800fc52 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800fc4e:	2303      	movs	r3, #3
 800fc50:	e030      	b.n	800fcb4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fc52:	4b0e      	ldr	r3, [pc, #56]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d0f0      	beq.n	800fc40 <HAL_RCC_OscConfig+0x734>
 800fc5e:	e028      	b.n	800fcb2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800fc60:	69bb      	ldr	r3, [r7, #24]
 800fc62:	2b0c      	cmp	r3, #12
 800fc64:	d023      	beq.n	800fcae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fc66:	4b09      	ldr	r3, [pc, #36]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	4a08      	ldr	r2, [pc, #32]	@ (800fc8c <HAL_RCC_OscConfig+0x780>)
 800fc6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fc70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fc72:	f7fa ffd7 	bl	800ac24 <HAL_GetTick>
 800fc76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fc78:	e00c      	b.n	800fc94 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fc7a:	f7fa ffd3 	bl	800ac24 <HAL_GetTick>
 800fc7e:	4602      	mov	r2, r0
 800fc80:	693b      	ldr	r3, [r7, #16]
 800fc82:	1ad3      	subs	r3, r2, r3
 800fc84:	2b02      	cmp	r3, #2
 800fc86:	d905      	bls.n	800fc94 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800fc88:	2303      	movs	r3, #3
 800fc8a:	e013      	b.n	800fcb4 <HAL_RCC_OscConfig+0x7a8>
 800fc8c:	40021000 	.word	0x40021000
 800fc90:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fc94:	4b09      	ldr	r3, [pc, #36]	@ (800fcbc <HAL_RCC_OscConfig+0x7b0>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d1ec      	bne.n	800fc7a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800fca0:	4b06      	ldr	r3, [pc, #24]	@ (800fcbc <HAL_RCC_OscConfig+0x7b0>)
 800fca2:	68da      	ldr	r2, [r3, #12]
 800fca4:	4905      	ldr	r1, [pc, #20]	@ (800fcbc <HAL_RCC_OscConfig+0x7b0>)
 800fca6:	4b06      	ldr	r3, [pc, #24]	@ (800fcc0 <HAL_RCC_OscConfig+0x7b4>)
 800fca8:	4013      	ands	r3, r2
 800fcaa:	60cb      	str	r3, [r1, #12]
 800fcac:	e001      	b.n	800fcb2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800fcae:	2301      	movs	r3, #1
 800fcb0:	e000      	b.n	800fcb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800fcb2:	2300      	movs	r3, #0
}
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	3720      	adds	r7, #32
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}
 800fcbc:	40021000 	.word	0x40021000
 800fcc0:	feeefffc 	.word	0xfeeefffc

0800fcc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b084      	sub	sp, #16
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
 800fccc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d101      	bne.n	800fcd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fcd4:	2301      	movs	r3, #1
 800fcd6:	e0e7      	b.n	800fea8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800fcd8:	4b75      	ldr	r3, [pc, #468]	@ (800feb0 <HAL_RCC_ClockConfig+0x1ec>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	f003 0307 	and.w	r3, r3, #7
 800fce0:	683a      	ldr	r2, [r7, #0]
 800fce2:	429a      	cmp	r2, r3
 800fce4:	d910      	bls.n	800fd08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fce6:	4b72      	ldr	r3, [pc, #456]	@ (800feb0 <HAL_RCC_ClockConfig+0x1ec>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	f023 0207 	bic.w	r2, r3, #7
 800fcee:	4970      	ldr	r1, [pc, #448]	@ (800feb0 <HAL_RCC_ClockConfig+0x1ec>)
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	4313      	orrs	r3, r2
 800fcf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fcf6:	4b6e      	ldr	r3, [pc, #440]	@ (800feb0 <HAL_RCC_ClockConfig+0x1ec>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	f003 0307 	and.w	r3, r3, #7
 800fcfe:	683a      	ldr	r2, [r7, #0]
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d001      	beq.n	800fd08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800fd04:	2301      	movs	r3, #1
 800fd06:	e0cf      	b.n	800fea8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	f003 0302 	and.w	r3, r3, #2
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d010      	beq.n	800fd36 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	689a      	ldr	r2, [r3, #8]
 800fd18:	4b66      	ldr	r3, [pc, #408]	@ (800feb4 <HAL_RCC_ClockConfig+0x1f0>)
 800fd1a:	689b      	ldr	r3, [r3, #8]
 800fd1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fd20:	429a      	cmp	r2, r3
 800fd22:	d908      	bls.n	800fd36 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fd24:	4b63      	ldr	r3, [pc, #396]	@ (800feb4 <HAL_RCC_ClockConfig+0x1f0>)
 800fd26:	689b      	ldr	r3, [r3, #8]
 800fd28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	689b      	ldr	r3, [r3, #8]
 800fd30:	4960      	ldr	r1, [pc, #384]	@ (800feb4 <HAL_RCC_ClockConfig+0x1f0>)
 800fd32:	4313      	orrs	r3, r2
 800fd34:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	f003 0301 	and.w	r3, r3, #1
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d04c      	beq.n	800fddc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	685b      	ldr	r3, [r3, #4]
 800fd46:	2b03      	cmp	r3, #3
 800fd48:	d107      	bne.n	800fd5a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fd4a:	4b5a      	ldr	r3, [pc, #360]	@ (800feb4 <HAL_RCC_ClockConfig+0x1f0>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d121      	bne.n	800fd9a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800fd56:	2301      	movs	r3, #1
 800fd58:	e0a6      	b.n	800fea8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	685b      	ldr	r3, [r3, #4]
 800fd5e:	2b02      	cmp	r3, #2
 800fd60:	d107      	bne.n	800fd72 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800fd62:	4b54      	ldr	r3, [pc, #336]	@ (800feb4 <HAL_RCC_ClockConfig+0x1f0>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d115      	bne.n	800fd9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800fd6e:	2301      	movs	r3, #1
 800fd70:	e09a      	b.n	800fea8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	685b      	ldr	r3, [r3, #4]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d107      	bne.n	800fd8a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800fd7a:	4b4e      	ldr	r3, [pc, #312]	@ (800feb4 <HAL_RCC_ClockConfig+0x1f0>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	f003 0302 	and.w	r3, r3, #2
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d109      	bne.n	800fd9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800fd86:	2301      	movs	r3, #1
 800fd88:	e08e      	b.n	800fea8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800fd8a:	4b4a      	ldr	r3, [pc, #296]	@ (800feb4 <HAL_RCC_ClockConfig+0x1f0>)
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d101      	bne.n	800fd9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800fd96:	2301      	movs	r3, #1
 800fd98:	e086      	b.n	800fea8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800fd9a:	4b46      	ldr	r3, [pc, #280]	@ (800feb4 <HAL_RCC_ClockConfig+0x1f0>)
 800fd9c:	689b      	ldr	r3, [r3, #8]
 800fd9e:	f023 0203 	bic.w	r2, r3, #3
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	685b      	ldr	r3, [r3, #4]
 800fda6:	4943      	ldr	r1, [pc, #268]	@ (800feb4 <HAL_RCC_ClockConfig+0x1f0>)
 800fda8:	4313      	orrs	r3, r2
 800fdaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fdac:	f7fa ff3a 	bl	800ac24 <HAL_GetTick>
 800fdb0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fdb2:	e00a      	b.n	800fdca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fdb4:	f7fa ff36 	bl	800ac24 <HAL_GetTick>
 800fdb8:	4602      	mov	r2, r0
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	1ad3      	subs	r3, r2, r3
 800fdbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fdc2:	4293      	cmp	r3, r2
 800fdc4:	d901      	bls.n	800fdca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800fdc6:	2303      	movs	r3, #3
 800fdc8:	e06e      	b.n	800fea8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fdca:	4b3a      	ldr	r3, [pc, #232]	@ (800feb4 <HAL_RCC_ClockConfig+0x1f0>)
 800fdcc:	689b      	ldr	r3, [r3, #8]
 800fdce:	f003 020c 	and.w	r2, r3, #12
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	685b      	ldr	r3, [r3, #4]
 800fdd6:	009b      	lsls	r3, r3, #2
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d1eb      	bne.n	800fdb4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	f003 0302 	and.w	r3, r3, #2
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d010      	beq.n	800fe0a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	689a      	ldr	r2, [r3, #8]
 800fdec:	4b31      	ldr	r3, [pc, #196]	@ (800feb4 <HAL_RCC_ClockConfig+0x1f0>)
 800fdee:	689b      	ldr	r3, [r3, #8]
 800fdf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fdf4:	429a      	cmp	r2, r3
 800fdf6:	d208      	bcs.n	800fe0a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fdf8:	4b2e      	ldr	r3, [pc, #184]	@ (800feb4 <HAL_RCC_ClockConfig+0x1f0>)
 800fdfa:	689b      	ldr	r3, [r3, #8]
 800fdfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	689b      	ldr	r3, [r3, #8]
 800fe04:	492b      	ldr	r1, [pc, #172]	@ (800feb4 <HAL_RCC_ClockConfig+0x1f0>)
 800fe06:	4313      	orrs	r3, r2
 800fe08:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800fe0a:	4b29      	ldr	r3, [pc, #164]	@ (800feb0 <HAL_RCC_ClockConfig+0x1ec>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	f003 0307 	and.w	r3, r3, #7
 800fe12:	683a      	ldr	r2, [r7, #0]
 800fe14:	429a      	cmp	r2, r3
 800fe16:	d210      	bcs.n	800fe3a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fe18:	4b25      	ldr	r3, [pc, #148]	@ (800feb0 <HAL_RCC_ClockConfig+0x1ec>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	f023 0207 	bic.w	r2, r3, #7
 800fe20:	4923      	ldr	r1, [pc, #140]	@ (800feb0 <HAL_RCC_ClockConfig+0x1ec>)
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	4313      	orrs	r3, r2
 800fe26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fe28:	4b21      	ldr	r3, [pc, #132]	@ (800feb0 <HAL_RCC_ClockConfig+0x1ec>)
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	f003 0307 	and.w	r3, r3, #7
 800fe30:	683a      	ldr	r2, [r7, #0]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d001      	beq.n	800fe3a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800fe36:	2301      	movs	r3, #1
 800fe38:	e036      	b.n	800fea8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	f003 0304 	and.w	r3, r3, #4
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d008      	beq.n	800fe58 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800fe46:	4b1b      	ldr	r3, [pc, #108]	@ (800feb4 <HAL_RCC_ClockConfig+0x1f0>)
 800fe48:	689b      	ldr	r3, [r3, #8]
 800fe4a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	68db      	ldr	r3, [r3, #12]
 800fe52:	4918      	ldr	r1, [pc, #96]	@ (800feb4 <HAL_RCC_ClockConfig+0x1f0>)
 800fe54:	4313      	orrs	r3, r2
 800fe56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	f003 0308 	and.w	r3, r3, #8
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d009      	beq.n	800fe78 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800fe64:	4b13      	ldr	r3, [pc, #76]	@ (800feb4 <HAL_RCC_ClockConfig+0x1f0>)
 800fe66:	689b      	ldr	r3, [r3, #8]
 800fe68:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	691b      	ldr	r3, [r3, #16]
 800fe70:	00db      	lsls	r3, r3, #3
 800fe72:	4910      	ldr	r1, [pc, #64]	@ (800feb4 <HAL_RCC_ClockConfig+0x1f0>)
 800fe74:	4313      	orrs	r3, r2
 800fe76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800fe78:	f000 f824 	bl	800fec4 <HAL_RCC_GetSysClockFreq>
 800fe7c:	4602      	mov	r2, r0
 800fe7e:	4b0d      	ldr	r3, [pc, #52]	@ (800feb4 <HAL_RCC_ClockConfig+0x1f0>)
 800fe80:	689b      	ldr	r3, [r3, #8]
 800fe82:	091b      	lsrs	r3, r3, #4
 800fe84:	f003 030f 	and.w	r3, r3, #15
 800fe88:	490b      	ldr	r1, [pc, #44]	@ (800feb8 <HAL_RCC_ClockConfig+0x1f4>)
 800fe8a:	5ccb      	ldrb	r3, [r1, r3]
 800fe8c:	f003 031f 	and.w	r3, r3, #31
 800fe90:	fa22 f303 	lsr.w	r3, r2, r3
 800fe94:	4a09      	ldr	r2, [pc, #36]	@ (800febc <HAL_RCC_ClockConfig+0x1f8>)
 800fe96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800fe98:	4b09      	ldr	r3, [pc, #36]	@ (800fec0 <HAL_RCC_ClockConfig+0x1fc>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f7fa fe71 	bl	800ab84 <HAL_InitTick>
 800fea2:	4603      	mov	r3, r0
 800fea4:	72fb      	strb	r3, [r7, #11]

  return status;
 800fea6:	7afb      	ldrb	r3, [r7, #11]
}
 800fea8:	4618      	mov	r0, r3
 800feaa:	3710      	adds	r7, #16
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}
 800feb0:	40022000 	.word	0x40022000
 800feb4:	40021000 	.word	0x40021000
 800feb8:	08017444 	.word	0x08017444
 800febc:	20000168 	.word	0x20000168
 800fec0:	20000174 	.word	0x20000174

0800fec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fec4:	b480      	push	{r7}
 800fec6:	b089      	sub	sp, #36	@ 0x24
 800fec8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800feca:	2300      	movs	r3, #0
 800fecc:	61fb      	str	r3, [r7, #28]
 800fece:	2300      	movs	r3, #0
 800fed0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fed2:	4b3e      	ldr	r3, [pc, #248]	@ (800ffcc <HAL_RCC_GetSysClockFreq+0x108>)
 800fed4:	689b      	ldr	r3, [r3, #8]
 800fed6:	f003 030c 	and.w	r3, r3, #12
 800feda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800fedc:	4b3b      	ldr	r3, [pc, #236]	@ (800ffcc <HAL_RCC_GetSysClockFreq+0x108>)
 800fede:	68db      	ldr	r3, [r3, #12]
 800fee0:	f003 0303 	and.w	r3, r3, #3
 800fee4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800fee6:	693b      	ldr	r3, [r7, #16]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d005      	beq.n	800fef8 <HAL_RCC_GetSysClockFreq+0x34>
 800feec:	693b      	ldr	r3, [r7, #16]
 800feee:	2b0c      	cmp	r3, #12
 800fef0:	d121      	bne.n	800ff36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	2b01      	cmp	r3, #1
 800fef6:	d11e      	bne.n	800ff36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800fef8:	4b34      	ldr	r3, [pc, #208]	@ (800ffcc <HAL_RCC_GetSysClockFreq+0x108>)
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	f003 0308 	and.w	r3, r3, #8
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d107      	bne.n	800ff14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ff04:	4b31      	ldr	r3, [pc, #196]	@ (800ffcc <HAL_RCC_GetSysClockFreq+0x108>)
 800ff06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ff0a:	0a1b      	lsrs	r3, r3, #8
 800ff0c:	f003 030f 	and.w	r3, r3, #15
 800ff10:	61fb      	str	r3, [r7, #28]
 800ff12:	e005      	b.n	800ff20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ff14:	4b2d      	ldr	r3, [pc, #180]	@ (800ffcc <HAL_RCC_GetSysClockFreq+0x108>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	091b      	lsrs	r3, r3, #4
 800ff1a:	f003 030f 	and.w	r3, r3, #15
 800ff1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ff20:	4a2b      	ldr	r2, [pc, #172]	@ (800ffd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800ff22:	69fb      	ldr	r3, [r7, #28]
 800ff24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d10d      	bne.n	800ff4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ff30:	69fb      	ldr	r3, [r7, #28]
 800ff32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ff34:	e00a      	b.n	800ff4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800ff36:	693b      	ldr	r3, [r7, #16]
 800ff38:	2b04      	cmp	r3, #4
 800ff3a:	d102      	bne.n	800ff42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ff3c:	4b25      	ldr	r3, [pc, #148]	@ (800ffd4 <HAL_RCC_GetSysClockFreq+0x110>)
 800ff3e:	61bb      	str	r3, [r7, #24]
 800ff40:	e004      	b.n	800ff4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800ff42:	693b      	ldr	r3, [r7, #16]
 800ff44:	2b08      	cmp	r3, #8
 800ff46:	d101      	bne.n	800ff4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ff48:	4b23      	ldr	r3, [pc, #140]	@ (800ffd8 <HAL_RCC_GetSysClockFreq+0x114>)
 800ff4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	2b0c      	cmp	r3, #12
 800ff50:	d134      	bne.n	800ffbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ff52:	4b1e      	ldr	r3, [pc, #120]	@ (800ffcc <HAL_RCC_GetSysClockFreq+0x108>)
 800ff54:	68db      	ldr	r3, [r3, #12]
 800ff56:	f003 0303 	and.w	r3, r3, #3
 800ff5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	2b02      	cmp	r3, #2
 800ff60:	d003      	beq.n	800ff6a <HAL_RCC_GetSysClockFreq+0xa6>
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	2b03      	cmp	r3, #3
 800ff66:	d003      	beq.n	800ff70 <HAL_RCC_GetSysClockFreq+0xac>
 800ff68:	e005      	b.n	800ff76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800ff6a:	4b1a      	ldr	r3, [pc, #104]	@ (800ffd4 <HAL_RCC_GetSysClockFreq+0x110>)
 800ff6c:	617b      	str	r3, [r7, #20]
      break;
 800ff6e:	e005      	b.n	800ff7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800ff70:	4b19      	ldr	r3, [pc, #100]	@ (800ffd8 <HAL_RCC_GetSysClockFreq+0x114>)
 800ff72:	617b      	str	r3, [r7, #20]
      break;
 800ff74:	e002      	b.n	800ff7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800ff76:	69fb      	ldr	r3, [r7, #28]
 800ff78:	617b      	str	r3, [r7, #20]
      break;
 800ff7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ff7c:	4b13      	ldr	r3, [pc, #76]	@ (800ffcc <HAL_RCC_GetSysClockFreq+0x108>)
 800ff7e:	68db      	ldr	r3, [r3, #12]
 800ff80:	091b      	lsrs	r3, r3, #4
 800ff82:	f003 0307 	and.w	r3, r3, #7
 800ff86:	3301      	adds	r3, #1
 800ff88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ff8a:	4b10      	ldr	r3, [pc, #64]	@ (800ffcc <HAL_RCC_GetSysClockFreq+0x108>)
 800ff8c:	68db      	ldr	r3, [r3, #12]
 800ff8e:	0a1b      	lsrs	r3, r3, #8
 800ff90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff94:	697a      	ldr	r2, [r7, #20]
 800ff96:	fb03 f202 	mul.w	r2, r3, r2
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffa0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ffa2:	4b0a      	ldr	r3, [pc, #40]	@ (800ffcc <HAL_RCC_GetSysClockFreq+0x108>)
 800ffa4:	68db      	ldr	r3, [r3, #12]
 800ffa6:	0e5b      	lsrs	r3, r3, #25
 800ffa8:	f003 0303 	and.w	r3, r3, #3
 800ffac:	3301      	adds	r3, #1
 800ffae:	005b      	lsls	r3, r3, #1
 800ffb0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800ffb2:	697a      	ldr	r2, [r7, #20]
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800ffbc:	69bb      	ldr	r3, [r7, #24]
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3724      	adds	r7, #36	@ 0x24
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc8:	4770      	bx	lr
 800ffca:	bf00      	nop
 800ffcc:	40021000 	.word	0x40021000
 800ffd0:	0801745c 	.word	0x0801745c
 800ffd4:	00f42400 	.word	0x00f42400
 800ffd8:	007a1200 	.word	0x007a1200

0800ffdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ffdc:	b480      	push	{r7}
 800ffde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ffe0:	4b03      	ldr	r3, [pc, #12]	@ (800fff0 <HAL_RCC_GetHCLKFreq+0x14>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
}
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffec:	4770      	bx	lr
 800ffee:	bf00      	nop
 800fff0:	20000168 	.word	0x20000168

0800fff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800fff8:	f7ff fff0 	bl	800ffdc <HAL_RCC_GetHCLKFreq>
 800fffc:	4602      	mov	r2, r0
 800fffe:	4b06      	ldr	r3, [pc, #24]	@ (8010018 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010000:	689b      	ldr	r3, [r3, #8]
 8010002:	0a1b      	lsrs	r3, r3, #8
 8010004:	f003 0307 	and.w	r3, r3, #7
 8010008:	4904      	ldr	r1, [pc, #16]	@ (801001c <HAL_RCC_GetPCLK1Freq+0x28>)
 801000a:	5ccb      	ldrb	r3, [r1, r3]
 801000c:	f003 031f 	and.w	r3, r3, #31
 8010010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010014:	4618      	mov	r0, r3
 8010016:	bd80      	pop	{r7, pc}
 8010018:	40021000 	.word	0x40021000
 801001c:	08017454 	.word	0x08017454

08010020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8010024:	f7ff ffda 	bl	800ffdc <HAL_RCC_GetHCLKFreq>
 8010028:	4602      	mov	r2, r0
 801002a:	4b06      	ldr	r3, [pc, #24]	@ (8010044 <HAL_RCC_GetPCLK2Freq+0x24>)
 801002c:	689b      	ldr	r3, [r3, #8]
 801002e:	0adb      	lsrs	r3, r3, #11
 8010030:	f003 0307 	and.w	r3, r3, #7
 8010034:	4904      	ldr	r1, [pc, #16]	@ (8010048 <HAL_RCC_GetPCLK2Freq+0x28>)
 8010036:	5ccb      	ldrb	r3, [r1, r3]
 8010038:	f003 031f 	and.w	r3, r3, #31
 801003c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010040:	4618      	mov	r0, r3
 8010042:	bd80      	pop	{r7, pc}
 8010044:	40021000 	.word	0x40021000
 8010048:	08017454 	.word	0x08017454

0801004c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b086      	sub	sp, #24
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8010054:	2300      	movs	r3, #0
 8010056:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8010058:	4b2a      	ldr	r3, [pc, #168]	@ (8010104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801005a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801005c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010060:	2b00      	cmp	r3, #0
 8010062:	d003      	beq.n	801006c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8010064:	f7fe fd8c 	bl	800eb80 <HAL_PWREx_GetVoltageRange>
 8010068:	6178      	str	r0, [r7, #20]
 801006a:	e014      	b.n	8010096 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 801006c:	4b25      	ldr	r3, [pc, #148]	@ (8010104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801006e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010070:	4a24      	ldr	r2, [pc, #144]	@ (8010104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010076:	6593      	str	r3, [r2, #88]	@ 0x58
 8010078:	4b22      	ldr	r3, [pc, #136]	@ (8010104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801007a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801007c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010080:	60fb      	str	r3, [r7, #12]
 8010082:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8010084:	f7fe fd7c 	bl	800eb80 <HAL_PWREx_GetVoltageRange>
 8010088:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 801008a:	4b1e      	ldr	r3, [pc, #120]	@ (8010104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801008c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801008e:	4a1d      	ldr	r2, [pc, #116]	@ (8010104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010090:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010094:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8010096:	697b      	ldr	r3, [r7, #20]
 8010098:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801009c:	d10b      	bne.n	80100b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	2b80      	cmp	r3, #128	@ 0x80
 80100a2:	d919      	bls.n	80100d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2ba0      	cmp	r3, #160	@ 0xa0
 80100a8:	d902      	bls.n	80100b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80100aa:	2302      	movs	r3, #2
 80100ac:	613b      	str	r3, [r7, #16]
 80100ae:	e013      	b.n	80100d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80100b0:	2301      	movs	r3, #1
 80100b2:	613b      	str	r3, [r7, #16]
 80100b4:	e010      	b.n	80100d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	2b80      	cmp	r3, #128	@ 0x80
 80100ba:	d902      	bls.n	80100c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80100bc:	2303      	movs	r3, #3
 80100be:	613b      	str	r3, [r7, #16]
 80100c0:	e00a      	b.n	80100d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2b80      	cmp	r3, #128	@ 0x80
 80100c6:	d102      	bne.n	80100ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80100c8:	2302      	movs	r3, #2
 80100ca:	613b      	str	r3, [r7, #16]
 80100cc:	e004      	b.n	80100d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	2b70      	cmp	r3, #112	@ 0x70
 80100d2:	d101      	bne.n	80100d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80100d4:	2301      	movs	r3, #1
 80100d6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80100d8:	4b0b      	ldr	r3, [pc, #44]	@ (8010108 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	f023 0207 	bic.w	r2, r3, #7
 80100e0:	4909      	ldr	r1, [pc, #36]	@ (8010108 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80100e2:	693b      	ldr	r3, [r7, #16]
 80100e4:	4313      	orrs	r3, r2
 80100e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80100e8:	4b07      	ldr	r3, [pc, #28]	@ (8010108 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	f003 0307 	and.w	r3, r3, #7
 80100f0:	693a      	ldr	r2, [r7, #16]
 80100f2:	429a      	cmp	r2, r3
 80100f4:	d001      	beq.n	80100fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80100f6:	2301      	movs	r3, #1
 80100f8:	e000      	b.n	80100fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80100fa:	2300      	movs	r3, #0
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3718      	adds	r7, #24
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}
 8010104:	40021000 	.word	0x40021000
 8010108:	40022000 	.word	0x40022000

0801010c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b086      	sub	sp, #24
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8010114:	2300      	movs	r3, #0
 8010116:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8010118:	2300      	movs	r3, #0
 801011a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010124:	2b00      	cmp	r3, #0
 8010126:	d041      	beq.n	80101ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801012c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8010130:	d02a      	beq.n	8010188 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8010132:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8010136:	d824      	bhi.n	8010182 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010138:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801013c:	d008      	beq.n	8010150 <HAL_RCCEx_PeriphCLKConfig+0x44>
 801013e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010142:	d81e      	bhi.n	8010182 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010144:	2b00      	cmp	r3, #0
 8010146:	d00a      	beq.n	801015e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8010148:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801014c:	d010      	beq.n	8010170 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801014e:	e018      	b.n	8010182 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8010150:	4b86      	ldr	r3, [pc, #536]	@ (801036c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010152:	68db      	ldr	r3, [r3, #12]
 8010154:	4a85      	ldr	r2, [pc, #532]	@ (801036c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801015a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 801015c:	e015      	b.n	801018a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	3304      	adds	r3, #4
 8010162:	2100      	movs	r1, #0
 8010164:	4618      	mov	r0, r3
 8010166:	f000 fabb 	bl	80106e0 <RCCEx_PLLSAI1_Config>
 801016a:	4603      	mov	r3, r0
 801016c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 801016e:	e00c      	b.n	801018a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	3320      	adds	r3, #32
 8010174:	2100      	movs	r1, #0
 8010176:	4618      	mov	r0, r3
 8010178:	f000 fba6 	bl	80108c8 <RCCEx_PLLSAI2_Config>
 801017c:	4603      	mov	r3, r0
 801017e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8010180:	e003      	b.n	801018a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010182:	2301      	movs	r3, #1
 8010184:	74fb      	strb	r3, [r7, #19]
      break;
 8010186:	e000      	b.n	801018a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8010188:	bf00      	nop
    }

    if(ret == HAL_OK)
 801018a:	7cfb      	ldrb	r3, [r7, #19]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d10b      	bne.n	80101a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010190:	4b76      	ldr	r3, [pc, #472]	@ (801036c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010196:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801019e:	4973      	ldr	r1, [pc, #460]	@ (801036c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80101a0:	4313      	orrs	r3, r2
 80101a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80101a6:	e001      	b.n	80101ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80101a8:	7cfb      	ldrb	r3, [r7, #19]
 80101aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d041      	beq.n	801023c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80101bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80101c0:	d02a      	beq.n	8010218 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80101c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80101c6:	d824      	bhi.n	8010212 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80101c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80101cc:	d008      	beq.n	80101e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80101ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80101d2:	d81e      	bhi.n	8010212 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d00a      	beq.n	80101ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80101d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80101dc:	d010      	beq.n	8010200 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80101de:	e018      	b.n	8010212 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80101e0:	4b62      	ldr	r3, [pc, #392]	@ (801036c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80101e2:	68db      	ldr	r3, [r3, #12]
 80101e4:	4a61      	ldr	r2, [pc, #388]	@ (801036c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80101e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80101ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80101ec:	e015      	b.n	801021a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	3304      	adds	r3, #4
 80101f2:	2100      	movs	r1, #0
 80101f4:	4618      	mov	r0, r3
 80101f6:	f000 fa73 	bl	80106e0 <RCCEx_PLLSAI1_Config>
 80101fa:	4603      	mov	r3, r0
 80101fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80101fe:	e00c      	b.n	801021a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	3320      	adds	r3, #32
 8010204:	2100      	movs	r1, #0
 8010206:	4618      	mov	r0, r3
 8010208:	f000 fb5e 	bl	80108c8 <RCCEx_PLLSAI2_Config>
 801020c:	4603      	mov	r3, r0
 801020e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010210:	e003      	b.n	801021a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010212:	2301      	movs	r3, #1
 8010214:	74fb      	strb	r3, [r7, #19]
      break;
 8010216:	e000      	b.n	801021a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8010218:	bf00      	nop
    }

    if(ret == HAL_OK)
 801021a:	7cfb      	ldrb	r3, [r7, #19]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d10b      	bne.n	8010238 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8010220:	4b52      	ldr	r3, [pc, #328]	@ (801036c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010226:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801022e:	494f      	ldr	r1, [pc, #316]	@ (801036c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010230:	4313      	orrs	r3, r2
 8010232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8010236:	e001      	b.n	801023c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010238:	7cfb      	ldrb	r3, [r7, #19]
 801023a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010244:	2b00      	cmp	r3, #0
 8010246:	f000 80a0 	beq.w	801038a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801024a:	2300      	movs	r3, #0
 801024c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801024e:	4b47      	ldr	r3, [pc, #284]	@ (801036c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010256:	2b00      	cmp	r3, #0
 8010258:	d101      	bne.n	801025e <HAL_RCCEx_PeriphCLKConfig+0x152>
 801025a:	2301      	movs	r3, #1
 801025c:	e000      	b.n	8010260 <HAL_RCCEx_PeriphCLKConfig+0x154>
 801025e:	2300      	movs	r3, #0
 8010260:	2b00      	cmp	r3, #0
 8010262:	d00d      	beq.n	8010280 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010264:	4b41      	ldr	r3, [pc, #260]	@ (801036c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010268:	4a40      	ldr	r2, [pc, #256]	@ (801036c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801026a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801026e:	6593      	str	r3, [r2, #88]	@ 0x58
 8010270:	4b3e      	ldr	r3, [pc, #248]	@ (801036c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010278:	60bb      	str	r3, [r7, #8]
 801027a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801027c:	2301      	movs	r3, #1
 801027e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010280:	4b3b      	ldr	r3, [pc, #236]	@ (8010370 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	4a3a      	ldr	r2, [pc, #232]	@ (8010370 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8010286:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801028a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801028c:	f7fa fcca 	bl	800ac24 <HAL_GetTick>
 8010290:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8010292:	e009      	b.n	80102a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010294:	f7fa fcc6 	bl	800ac24 <HAL_GetTick>
 8010298:	4602      	mov	r2, r0
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	1ad3      	subs	r3, r2, r3
 801029e:	2b02      	cmp	r3, #2
 80102a0:	d902      	bls.n	80102a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80102a2:	2303      	movs	r3, #3
 80102a4:	74fb      	strb	r3, [r7, #19]
        break;
 80102a6:	e005      	b.n	80102b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80102a8:	4b31      	ldr	r3, [pc, #196]	@ (8010370 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d0ef      	beq.n	8010294 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80102b4:	7cfb      	ldrb	r3, [r7, #19]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d15c      	bne.n	8010374 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80102ba:	4b2c      	ldr	r3, [pc, #176]	@ (801036c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80102bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80102c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d01f      	beq.n	801030c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80102d2:	697a      	ldr	r2, [r7, #20]
 80102d4:	429a      	cmp	r2, r3
 80102d6:	d019      	beq.n	801030c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80102d8:	4b24      	ldr	r3, [pc, #144]	@ (801036c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80102da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80102e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80102e4:	4b21      	ldr	r3, [pc, #132]	@ (801036c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80102e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102ea:	4a20      	ldr	r2, [pc, #128]	@ (801036c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80102ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80102f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80102f4:	4b1d      	ldr	r3, [pc, #116]	@ (801036c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80102f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102fa:	4a1c      	ldr	r2, [pc, #112]	@ (801036c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80102fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010300:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8010304:	4a19      	ldr	r2, [pc, #100]	@ (801036c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801030c:	697b      	ldr	r3, [r7, #20]
 801030e:	f003 0301 	and.w	r3, r3, #1
 8010312:	2b00      	cmp	r3, #0
 8010314:	d016      	beq.n	8010344 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010316:	f7fa fc85 	bl	800ac24 <HAL_GetTick>
 801031a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801031c:	e00b      	b.n	8010336 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801031e:	f7fa fc81 	bl	800ac24 <HAL_GetTick>
 8010322:	4602      	mov	r2, r0
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	1ad3      	subs	r3, r2, r3
 8010328:	f241 3288 	movw	r2, #5000	@ 0x1388
 801032c:	4293      	cmp	r3, r2
 801032e:	d902      	bls.n	8010336 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8010330:	2303      	movs	r3, #3
 8010332:	74fb      	strb	r3, [r7, #19]
            break;
 8010334:	e006      	b.n	8010344 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010336:	4b0d      	ldr	r3, [pc, #52]	@ (801036c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801033c:	f003 0302 	and.w	r3, r3, #2
 8010340:	2b00      	cmp	r3, #0
 8010342:	d0ec      	beq.n	801031e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8010344:	7cfb      	ldrb	r3, [r7, #19]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d10c      	bne.n	8010364 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801034a:	4b08      	ldr	r3, [pc, #32]	@ (801036c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801034c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010350:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801035a:	4904      	ldr	r1, [pc, #16]	@ (801036c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801035c:	4313      	orrs	r3, r2
 801035e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8010362:	e009      	b.n	8010378 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8010364:	7cfb      	ldrb	r3, [r7, #19]
 8010366:	74bb      	strb	r3, [r7, #18]
 8010368:	e006      	b.n	8010378 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 801036a:	bf00      	nop
 801036c:	40021000 	.word	0x40021000
 8010370:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010374:	7cfb      	ldrb	r3, [r7, #19]
 8010376:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8010378:	7c7b      	ldrb	r3, [r7, #17]
 801037a:	2b01      	cmp	r3, #1
 801037c:	d105      	bne.n	801038a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801037e:	4b9e      	ldr	r3, [pc, #632]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010382:	4a9d      	ldr	r2, [pc, #628]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010384:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010388:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	f003 0301 	and.w	r3, r3, #1
 8010392:	2b00      	cmp	r3, #0
 8010394:	d00a      	beq.n	80103ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8010396:	4b98      	ldr	r3, [pc, #608]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801039c:	f023 0203 	bic.w	r2, r3, #3
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103a4:	4994      	ldr	r1, [pc, #592]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80103a6:	4313      	orrs	r3, r2
 80103a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	f003 0302 	and.w	r3, r3, #2
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d00a      	beq.n	80103ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80103b8:	4b8f      	ldr	r3, [pc, #572]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80103ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80103be:	f023 020c 	bic.w	r2, r3, #12
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103c6:	498c      	ldr	r1, [pc, #560]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80103c8:	4313      	orrs	r3, r2
 80103ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	f003 0304 	and.w	r3, r3, #4
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d00a      	beq.n	80103f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80103da:	4b87      	ldr	r3, [pc, #540]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80103dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80103e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80103e8:	4983      	ldr	r1, [pc, #524]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80103ea:	4313      	orrs	r3, r2
 80103ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	f003 0308 	and.w	r3, r3, #8
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d00a      	beq.n	8010412 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80103fc:	4b7e      	ldr	r3, [pc, #504]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80103fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010402:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801040a:	497b      	ldr	r1, [pc, #492]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801040c:	4313      	orrs	r3, r2
 801040e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	f003 0310 	and.w	r3, r3, #16
 801041a:	2b00      	cmp	r3, #0
 801041c:	d00a      	beq.n	8010434 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801041e:	4b76      	ldr	r3, [pc, #472]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010424:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801042c:	4972      	ldr	r1, [pc, #456]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801042e:	4313      	orrs	r3, r2
 8010430:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	f003 0320 	and.w	r3, r3, #32
 801043c:	2b00      	cmp	r3, #0
 801043e:	d00a      	beq.n	8010456 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010440:	4b6d      	ldr	r3, [pc, #436]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010446:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801044e:	496a      	ldr	r1, [pc, #424]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010450:	4313      	orrs	r3, r2
 8010452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801045e:	2b00      	cmp	r3, #0
 8010460:	d00a      	beq.n	8010478 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010462:	4b65      	ldr	r3, [pc, #404]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010468:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010470:	4961      	ldr	r1, [pc, #388]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010472:	4313      	orrs	r3, r2
 8010474:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010480:	2b00      	cmp	r3, #0
 8010482:	d00a      	beq.n	801049a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010484:	4b5c      	ldr	r3, [pc, #368]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801048a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010492:	4959      	ldr	r1, [pc, #356]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010494:	4313      	orrs	r3, r2
 8010496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d00a      	beq.n	80104bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80104a6:	4b54      	ldr	r3, [pc, #336]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80104a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80104ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80104b4:	4950      	ldr	r1, [pc, #320]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80104b6:	4313      	orrs	r3, r2
 80104b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d00a      	beq.n	80104de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80104c8:	4b4b      	ldr	r3, [pc, #300]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80104ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80104ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80104d6:	4948      	ldr	r1, [pc, #288]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80104d8:	4313      	orrs	r3, r2
 80104da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d00a      	beq.n	8010500 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80104ea:	4b43      	ldr	r3, [pc, #268]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80104ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80104f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80104f8:	493f      	ldr	r1, [pc, #252]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80104fa:	4313      	orrs	r3, r2
 80104fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010508:	2b00      	cmp	r3, #0
 801050a:	d028      	beq.n	801055e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801050c:	4b3a      	ldr	r3, [pc, #232]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801050e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010512:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801051a:	4937      	ldr	r1, [pc, #220]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801051c:	4313      	orrs	r3, r2
 801051e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010526:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801052a:	d106      	bne.n	801053a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801052c:	4b32      	ldr	r3, [pc, #200]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801052e:	68db      	ldr	r3, [r3, #12]
 8010530:	4a31      	ldr	r2, [pc, #196]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010532:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010536:	60d3      	str	r3, [r2, #12]
 8010538:	e011      	b.n	801055e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801053e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010542:	d10c      	bne.n	801055e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	3304      	adds	r3, #4
 8010548:	2101      	movs	r1, #1
 801054a:	4618      	mov	r0, r3
 801054c:	f000 f8c8 	bl	80106e0 <RCCEx_PLLSAI1_Config>
 8010550:	4603      	mov	r3, r0
 8010552:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8010554:	7cfb      	ldrb	r3, [r7, #19]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d001      	beq.n	801055e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 801055a:	7cfb      	ldrb	r3, [r7, #19]
 801055c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8010566:	2b00      	cmp	r3, #0
 8010568:	d028      	beq.n	80105bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801056a:	4b23      	ldr	r3, [pc, #140]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801056c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010570:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010578:	491f      	ldr	r1, [pc, #124]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801057a:	4313      	orrs	r3, r2
 801057c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010584:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010588:	d106      	bne.n	8010598 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801058a:	4b1b      	ldr	r3, [pc, #108]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801058c:	68db      	ldr	r3, [r3, #12]
 801058e:	4a1a      	ldr	r2, [pc, #104]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010590:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010594:	60d3      	str	r3, [r2, #12]
 8010596:	e011      	b.n	80105bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801059c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80105a0:	d10c      	bne.n	80105bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	3304      	adds	r3, #4
 80105a6:	2101      	movs	r1, #1
 80105a8:	4618      	mov	r0, r3
 80105aa:	f000 f899 	bl	80106e0 <RCCEx_PLLSAI1_Config>
 80105ae:	4603      	mov	r3, r0
 80105b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80105b2:	7cfb      	ldrb	r3, [r7, #19]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d001      	beq.n	80105bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80105b8:	7cfb      	ldrb	r3, [r7, #19]
 80105ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d02b      	beq.n	8010620 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80105c8:	4b0b      	ldr	r3, [pc, #44]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80105ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80105ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80105d6:	4908      	ldr	r1, [pc, #32]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80105d8:	4313      	orrs	r3, r2
 80105da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80105e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80105e6:	d109      	bne.n	80105fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80105e8:	4b03      	ldr	r3, [pc, #12]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80105ea:	68db      	ldr	r3, [r3, #12]
 80105ec:	4a02      	ldr	r2, [pc, #8]	@ (80105f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80105ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80105f2:	60d3      	str	r3, [r2, #12]
 80105f4:	e014      	b.n	8010620 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80105f6:	bf00      	nop
 80105f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010600:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010604:	d10c      	bne.n	8010620 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	3304      	adds	r3, #4
 801060a:	2101      	movs	r1, #1
 801060c:	4618      	mov	r0, r3
 801060e:	f000 f867 	bl	80106e0 <RCCEx_PLLSAI1_Config>
 8010612:	4603      	mov	r3, r0
 8010614:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010616:	7cfb      	ldrb	r3, [r7, #19]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d001      	beq.n	8010620 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 801061c:	7cfb      	ldrb	r3, [r7, #19]
 801061e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010628:	2b00      	cmp	r3, #0
 801062a:	d02f      	beq.n	801068c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801062c:	4b2b      	ldr	r3, [pc, #172]	@ (80106dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801062e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010632:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801063a:	4928      	ldr	r1, [pc, #160]	@ (80106dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801063c:	4313      	orrs	r3, r2
 801063e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010646:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801064a:	d10d      	bne.n	8010668 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	3304      	adds	r3, #4
 8010650:	2102      	movs	r1, #2
 8010652:	4618      	mov	r0, r3
 8010654:	f000 f844 	bl	80106e0 <RCCEx_PLLSAI1_Config>
 8010658:	4603      	mov	r3, r0
 801065a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801065c:	7cfb      	ldrb	r3, [r7, #19]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d014      	beq.n	801068c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8010662:	7cfb      	ldrb	r3, [r7, #19]
 8010664:	74bb      	strb	r3, [r7, #18]
 8010666:	e011      	b.n	801068c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801066c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010670:	d10c      	bne.n	801068c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	3320      	adds	r3, #32
 8010676:	2102      	movs	r1, #2
 8010678:	4618      	mov	r0, r3
 801067a:	f000 f925 	bl	80108c8 <RCCEx_PLLSAI2_Config>
 801067e:	4603      	mov	r3, r0
 8010680:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010682:	7cfb      	ldrb	r3, [r7, #19]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d001      	beq.n	801068c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8010688:	7cfb      	ldrb	r3, [r7, #19]
 801068a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010694:	2b00      	cmp	r3, #0
 8010696:	d00a      	beq.n	80106ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010698:	4b10      	ldr	r3, [pc, #64]	@ (80106dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801069e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80106a6:	490d      	ldr	r1, [pc, #52]	@ (80106dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80106a8:	4313      	orrs	r3, r2
 80106aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d00b      	beq.n	80106d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80106ba:	4b08      	ldr	r3, [pc, #32]	@ (80106dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80106bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80106c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106ca:	4904      	ldr	r1, [pc, #16]	@ (80106dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80106cc:	4313      	orrs	r3, r2
 80106ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80106d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80106d4:	4618      	mov	r0, r3
 80106d6:	3718      	adds	r7, #24
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}
 80106dc:	40021000 	.word	0x40021000

080106e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b084      	sub	sp, #16
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
 80106e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80106ea:	2300      	movs	r3, #0
 80106ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80106ee:	4b75      	ldr	r3, [pc, #468]	@ (80108c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80106f0:	68db      	ldr	r3, [r3, #12]
 80106f2:	f003 0303 	and.w	r3, r3, #3
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d018      	beq.n	801072c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80106fa:	4b72      	ldr	r3, [pc, #456]	@ (80108c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80106fc:	68db      	ldr	r3, [r3, #12]
 80106fe:	f003 0203 	and.w	r2, r3, #3
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	429a      	cmp	r2, r3
 8010708:	d10d      	bne.n	8010726 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
       ||
 801070e:	2b00      	cmp	r3, #0
 8010710:	d009      	beq.n	8010726 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8010712:	4b6c      	ldr	r3, [pc, #432]	@ (80108c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010714:	68db      	ldr	r3, [r3, #12]
 8010716:	091b      	lsrs	r3, r3, #4
 8010718:	f003 0307 	and.w	r3, r3, #7
 801071c:	1c5a      	adds	r2, r3, #1
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	685b      	ldr	r3, [r3, #4]
       ||
 8010722:	429a      	cmp	r2, r3
 8010724:	d047      	beq.n	80107b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8010726:	2301      	movs	r3, #1
 8010728:	73fb      	strb	r3, [r7, #15]
 801072a:	e044      	b.n	80107b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	2b03      	cmp	r3, #3
 8010732:	d018      	beq.n	8010766 <RCCEx_PLLSAI1_Config+0x86>
 8010734:	2b03      	cmp	r3, #3
 8010736:	d825      	bhi.n	8010784 <RCCEx_PLLSAI1_Config+0xa4>
 8010738:	2b01      	cmp	r3, #1
 801073a:	d002      	beq.n	8010742 <RCCEx_PLLSAI1_Config+0x62>
 801073c:	2b02      	cmp	r3, #2
 801073e:	d009      	beq.n	8010754 <RCCEx_PLLSAI1_Config+0x74>
 8010740:	e020      	b.n	8010784 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8010742:	4b60      	ldr	r3, [pc, #384]	@ (80108c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	f003 0302 	and.w	r3, r3, #2
 801074a:	2b00      	cmp	r3, #0
 801074c:	d11d      	bne.n	801078a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 801074e:	2301      	movs	r3, #1
 8010750:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010752:	e01a      	b.n	801078a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8010754:	4b5b      	ldr	r3, [pc, #364]	@ (80108c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801075c:	2b00      	cmp	r3, #0
 801075e:	d116      	bne.n	801078e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8010760:	2301      	movs	r3, #1
 8010762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010764:	e013      	b.n	801078e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8010766:	4b57      	ldr	r3, [pc, #348]	@ (80108c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801076e:	2b00      	cmp	r3, #0
 8010770:	d10f      	bne.n	8010792 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8010772:	4b54      	ldr	r3, [pc, #336]	@ (80108c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801077a:	2b00      	cmp	r3, #0
 801077c:	d109      	bne.n	8010792 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 801077e:	2301      	movs	r3, #1
 8010780:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010782:	e006      	b.n	8010792 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8010784:	2301      	movs	r3, #1
 8010786:	73fb      	strb	r3, [r7, #15]
      break;
 8010788:	e004      	b.n	8010794 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801078a:	bf00      	nop
 801078c:	e002      	b.n	8010794 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801078e:	bf00      	nop
 8010790:	e000      	b.n	8010794 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8010792:	bf00      	nop
    }

    if(status == HAL_OK)
 8010794:	7bfb      	ldrb	r3, [r7, #15]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d10d      	bne.n	80107b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 801079a:	4b4a      	ldr	r3, [pc, #296]	@ (80108c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 801079c:	68db      	ldr	r3, [r3, #12]
 801079e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	6819      	ldr	r1, [r3, #0]
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	685b      	ldr	r3, [r3, #4]
 80107aa:	3b01      	subs	r3, #1
 80107ac:	011b      	lsls	r3, r3, #4
 80107ae:	430b      	orrs	r3, r1
 80107b0:	4944      	ldr	r1, [pc, #272]	@ (80108c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80107b2:	4313      	orrs	r3, r2
 80107b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80107b6:	7bfb      	ldrb	r3, [r7, #15]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d17d      	bne.n	80108b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80107bc:	4b41      	ldr	r3, [pc, #260]	@ (80108c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	4a40      	ldr	r2, [pc, #256]	@ (80108c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80107c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80107c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80107c8:	f7fa fa2c 	bl	800ac24 <HAL_GetTick>
 80107cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80107ce:	e009      	b.n	80107e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80107d0:	f7fa fa28 	bl	800ac24 <HAL_GetTick>
 80107d4:	4602      	mov	r2, r0
 80107d6:	68bb      	ldr	r3, [r7, #8]
 80107d8:	1ad3      	subs	r3, r2, r3
 80107da:	2b02      	cmp	r3, #2
 80107dc:	d902      	bls.n	80107e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80107de:	2303      	movs	r3, #3
 80107e0:	73fb      	strb	r3, [r7, #15]
        break;
 80107e2:	e005      	b.n	80107f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80107e4:	4b37      	ldr	r3, [pc, #220]	@ (80108c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d1ef      	bne.n	80107d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80107f0:	7bfb      	ldrb	r3, [r7, #15]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d160      	bne.n	80108b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d111      	bne.n	8010820 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80107fc:	4b31      	ldr	r3, [pc, #196]	@ (80108c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80107fe:	691b      	ldr	r3, [r3, #16]
 8010800:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8010804:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010808:	687a      	ldr	r2, [r7, #4]
 801080a:	6892      	ldr	r2, [r2, #8]
 801080c:	0211      	lsls	r1, r2, #8
 801080e:	687a      	ldr	r2, [r7, #4]
 8010810:	68d2      	ldr	r2, [r2, #12]
 8010812:	0912      	lsrs	r2, r2, #4
 8010814:	0452      	lsls	r2, r2, #17
 8010816:	430a      	orrs	r2, r1
 8010818:	492a      	ldr	r1, [pc, #168]	@ (80108c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 801081a:	4313      	orrs	r3, r2
 801081c:	610b      	str	r3, [r1, #16]
 801081e:	e027      	b.n	8010870 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	2b01      	cmp	r3, #1
 8010824:	d112      	bne.n	801084c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010826:	4b27      	ldr	r3, [pc, #156]	@ (80108c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010828:	691b      	ldr	r3, [r3, #16]
 801082a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 801082e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8010832:	687a      	ldr	r2, [r7, #4]
 8010834:	6892      	ldr	r2, [r2, #8]
 8010836:	0211      	lsls	r1, r2, #8
 8010838:	687a      	ldr	r2, [r7, #4]
 801083a:	6912      	ldr	r2, [r2, #16]
 801083c:	0852      	lsrs	r2, r2, #1
 801083e:	3a01      	subs	r2, #1
 8010840:	0552      	lsls	r2, r2, #21
 8010842:	430a      	orrs	r2, r1
 8010844:	491f      	ldr	r1, [pc, #124]	@ (80108c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010846:	4313      	orrs	r3, r2
 8010848:	610b      	str	r3, [r1, #16]
 801084a:	e011      	b.n	8010870 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801084c:	4b1d      	ldr	r3, [pc, #116]	@ (80108c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 801084e:	691b      	ldr	r3, [r3, #16]
 8010850:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8010854:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8010858:	687a      	ldr	r2, [r7, #4]
 801085a:	6892      	ldr	r2, [r2, #8]
 801085c:	0211      	lsls	r1, r2, #8
 801085e:	687a      	ldr	r2, [r7, #4]
 8010860:	6952      	ldr	r2, [r2, #20]
 8010862:	0852      	lsrs	r2, r2, #1
 8010864:	3a01      	subs	r2, #1
 8010866:	0652      	lsls	r2, r2, #25
 8010868:	430a      	orrs	r2, r1
 801086a:	4916      	ldr	r1, [pc, #88]	@ (80108c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 801086c:	4313      	orrs	r3, r2
 801086e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8010870:	4b14      	ldr	r3, [pc, #80]	@ (80108c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	4a13      	ldr	r2, [pc, #76]	@ (80108c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010876:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801087a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801087c:	f7fa f9d2 	bl	800ac24 <HAL_GetTick>
 8010880:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8010882:	e009      	b.n	8010898 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010884:	f7fa f9ce 	bl	800ac24 <HAL_GetTick>
 8010888:	4602      	mov	r2, r0
 801088a:	68bb      	ldr	r3, [r7, #8]
 801088c:	1ad3      	subs	r3, r2, r3
 801088e:	2b02      	cmp	r3, #2
 8010890:	d902      	bls.n	8010898 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8010892:	2303      	movs	r3, #3
 8010894:	73fb      	strb	r3, [r7, #15]
          break;
 8010896:	e005      	b.n	80108a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8010898:	4b0a      	ldr	r3, [pc, #40]	@ (80108c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d0ef      	beq.n	8010884 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80108a4:	7bfb      	ldrb	r3, [r7, #15]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d106      	bne.n	80108b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80108aa:	4b06      	ldr	r3, [pc, #24]	@ (80108c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80108ac:	691a      	ldr	r2, [r3, #16]
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	699b      	ldr	r3, [r3, #24]
 80108b2:	4904      	ldr	r1, [pc, #16]	@ (80108c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80108b4:	4313      	orrs	r3, r2
 80108b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80108b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80108ba:	4618      	mov	r0, r3
 80108bc:	3710      	adds	r7, #16
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}
 80108c2:	bf00      	nop
 80108c4:	40021000 	.word	0x40021000

080108c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b084      	sub	sp, #16
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80108d2:	2300      	movs	r3, #0
 80108d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80108d6:	4b6a      	ldr	r3, [pc, #424]	@ (8010a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80108d8:	68db      	ldr	r3, [r3, #12]
 80108da:	f003 0303 	and.w	r3, r3, #3
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d018      	beq.n	8010914 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80108e2:	4b67      	ldr	r3, [pc, #412]	@ (8010a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80108e4:	68db      	ldr	r3, [r3, #12]
 80108e6:	f003 0203 	and.w	r2, r3, #3
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	429a      	cmp	r2, r3
 80108f0:	d10d      	bne.n	801090e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
       ||
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d009      	beq.n	801090e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80108fa:	4b61      	ldr	r3, [pc, #388]	@ (8010a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80108fc:	68db      	ldr	r3, [r3, #12]
 80108fe:	091b      	lsrs	r3, r3, #4
 8010900:	f003 0307 	and.w	r3, r3, #7
 8010904:	1c5a      	adds	r2, r3, #1
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	685b      	ldr	r3, [r3, #4]
       ||
 801090a:	429a      	cmp	r2, r3
 801090c:	d047      	beq.n	801099e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 801090e:	2301      	movs	r3, #1
 8010910:	73fb      	strb	r3, [r7, #15]
 8010912:	e044      	b.n	801099e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	2b03      	cmp	r3, #3
 801091a:	d018      	beq.n	801094e <RCCEx_PLLSAI2_Config+0x86>
 801091c:	2b03      	cmp	r3, #3
 801091e:	d825      	bhi.n	801096c <RCCEx_PLLSAI2_Config+0xa4>
 8010920:	2b01      	cmp	r3, #1
 8010922:	d002      	beq.n	801092a <RCCEx_PLLSAI2_Config+0x62>
 8010924:	2b02      	cmp	r3, #2
 8010926:	d009      	beq.n	801093c <RCCEx_PLLSAI2_Config+0x74>
 8010928:	e020      	b.n	801096c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801092a:	4b55      	ldr	r3, [pc, #340]	@ (8010a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	f003 0302 	and.w	r3, r3, #2
 8010932:	2b00      	cmp	r3, #0
 8010934:	d11d      	bne.n	8010972 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8010936:	2301      	movs	r3, #1
 8010938:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801093a:	e01a      	b.n	8010972 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801093c:	4b50      	ldr	r3, [pc, #320]	@ (8010a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010944:	2b00      	cmp	r3, #0
 8010946:	d116      	bne.n	8010976 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8010948:	2301      	movs	r3, #1
 801094a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801094c:	e013      	b.n	8010976 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801094e:	4b4c      	ldr	r3, [pc, #304]	@ (8010a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010956:	2b00      	cmp	r3, #0
 8010958:	d10f      	bne.n	801097a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 801095a:	4b49      	ldr	r3, [pc, #292]	@ (8010a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010962:	2b00      	cmp	r3, #0
 8010964:	d109      	bne.n	801097a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8010966:	2301      	movs	r3, #1
 8010968:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801096a:	e006      	b.n	801097a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 801096c:	2301      	movs	r3, #1
 801096e:	73fb      	strb	r3, [r7, #15]
      break;
 8010970:	e004      	b.n	801097c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8010972:	bf00      	nop
 8010974:	e002      	b.n	801097c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8010976:	bf00      	nop
 8010978:	e000      	b.n	801097c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 801097a:	bf00      	nop
    }

    if(status == HAL_OK)
 801097c:	7bfb      	ldrb	r3, [r7, #15]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d10d      	bne.n	801099e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8010982:	4b3f      	ldr	r3, [pc, #252]	@ (8010a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010984:	68db      	ldr	r3, [r3, #12]
 8010986:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	6819      	ldr	r1, [r3, #0]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	685b      	ldr	r3, [r3, #4]
 8010992:	3b01      	subs	r3, #1
 8010994:	011b      	lsls	r3, r3, #4
 8010996:	430b      	orrs	r3, r1
 8010998:	4939      	ldr	r1, [pc, #228]	@ (8010a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 801099a:	4313      	orrs	r3, r2
 801099c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 801099e:	7bfb      	ldrb	r3, [r7, #15]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d167      	bne.n	8010a74 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80109a4:	4b36      	ldr	r3, [pc, #216]	@ (8010a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	4a35      	ldr	r2, [pc, #212]	@ (8010a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80109aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80109ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80109b0:	f7fa f938 	bl	800ac24 <HAL_GetTick>
 80109b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80109b6:	e009      	b.n	80109cc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80109b8:	f7fa f934 	bl	800ac24 <HAL_GetTick>
 80109bc:	4602      	mov	r2, r0
 80109be:	68bb      	ldr	r3, [r7, #8]
 80109c0:	1ad3      	subs	r3, r2, r3
 80109c2:	2b02      	cmp	r3, #2
 80109c4:	d902      	bls.n	80109cc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80109c6:	2303      	movs	r3, #3
 80109c8:	73fb      	strb	r3, [r7, #15]
        break;
 80109ca:	e005      	b.n	80109d8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80109cc:	4b2c      	ldr	r3, [pc, #176]	@ (8010a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d1ef      	bne.n	80109b8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80109d8:	7bfb      	ldrb	r3, [r7, #15]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d14a      	bne.n	8010a74 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d111      	bne.n	8010a08 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80109e4:	4b26      	ldr	r3, [pc, #152]	@ (8010a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80109e6:	695b      	ldr	r3, [r3, #20]
 80109e8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80109ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80109f0:	687a      	ldr	r2, [r7, #4]
 80109f2:	6892      	ldr	r2, [r2, #8]
 80109f4:	0211      	lsls	r1, r2, #8
 80109f6:	687a      	ldr	r2, [r7, #4]
 80109f8:	68d2      	ldr	r2, [r2, #12]
 80109fa:	0912      	lsrs	r2, r2, #4
 80109fc:	0452      	lsls	r2, r2, #17
 80109fe:	430a      	orrs	r2, r1
 8010a00:	491f      	ldr	r1, [pc, #124]	@ (8010a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a02:	4313      	orrs	r3, r2
 8010a04:	614b      	str	r3, [r1, #20]
 8010a06:	e011      	b.n	8010a2c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8010a08:	4b1d      	ldr	r3, [pc, #116]	@ (8010a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a0a:	695b      	ldr	r3, [r3, #20]
 8010a0c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8010a10:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8010a14:	687a      	ldr	r2, [r7, #4]
 8010a16:	6892      	ldr	r2, [r2, #8]
 8010a18:	0211      	lsls	r1, r2, #8
 8010a1a:	687a      	ldr	r2, [r7, #4]
 8010a1c:	6912      	ldr	r2, [r2, #16]
 8010a1e:	0852      	lsrs	r2, r2, #1
 8010a20:	3a01      	subs	r2, #1
 8010a22:	0652      	lsls	r2, r2, #25
 8010a24:	430a      	orrs	r2, r1
 8010a26:	4916      	ldr	r1, [pc, #88]	@ (8010a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a28:	4313      	orrs	r3, r2
 8010a2a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8010a2c:	4b14      	ldr	r3, [pc, #80]	@ (8010a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	4a13      	ldr	r2, [pc, #76]	@ (8010a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010a36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010a38:	f7fa f8f4 	bl	800ac24 <HAL_GetTick>
 8010a3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8010a3e:	e009      	b.n	8010a54 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8010a40:	f7fa f8f0 	bl	800ac24 <HAL_GetTick>
 8010a44:	4602      	mov	r2, r0
 8010a46:	68bb      	ldr	r3, [r7, #8]
 8010a48:	1ad3      	subs	r3, r2, r3
 8010a4a:	2b02      	cmp	r3, #2
 8010a4c:	d902      	bls.n	8010a54 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8010a4e:	2303      	movs	r3, #3
 8010a50:	73fb      	strb	r3, [r7, #15]
          break;
 8010a52:	e005      	b.n	8010a60 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8010a54:	4b0a      	ldr	r3, [pc, #40]	@ (8010a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d0ef      	beq.n	8010a40 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8010a60:	7bfb      	ldrb	r3, [r7, #15]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d106      	bne.n	8010a74 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8010a66:	4b06      	ldr	r3, [pc, #24]	@ (8010a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a68:	695a      	ldr	r2, [r3, #20]
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	695b      	ldr	r3, [r3, #20]
 8010a6e:	4904      	ldr	r1, [pc, #16]	@ (8010a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a70:	4313      	orrs	r3, r2
 8010a72:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8010a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a76:	4618      	mov	r0, r3
 8010a78:	3710      	adds	r7, #16
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}
 8010a7e:	bf00      	nop
 8010a80:	40021000 	.word	0x40021000

08010a84 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b084      	sub	sp, #16
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d079      	beq.n	8010b8a <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8010a9c:	b2db      	uxtb	r3, r3
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d106      	bne.n	8010ab0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f7f6 fc56 	bl	800735c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	2202      	movs	r2, #2
 8010ab4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	68db      	ldr	r3, [r3, #12]
 8010abe:	f003 0310 	and.w	r3, r3, #16
 8010ac2:	2b10      	cmp	r3, #16
 8010ac4:	d058      	beq.n	8010b78 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	22ca      	movs	r2, #202	@ 0xca
 8010acc:	625a      	str	r2, [r3, #36]	@ 0x24
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	2253      	movs	r2, #83	@ 0x53
 8010ad4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8010ad6:	6878      	ldr	r0, [r7, #4]
 8010ad8:	f000 fb82 	bl	80111e0 <RTC_EnterInitMode>
 8010adc:	4603      	mov	r3, r0
 8010ade:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8010ae0:	7bfb      	ldrb	r3, [r7, #15]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d127      	bne.n	8010b36 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	689b      	ldr	r3, [r3, #8]
 8010aec:	687a      	ldr	r2, [r7, #4]
 8010aee:	6812      	ldr	r2, [r2, #0]
 8010af0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010af4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010af8:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	6899      	ldr	r1, [r3, #8]
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	685a      	ldr	r2, [r3, #4]
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	691b      	ldr	r3, [r3, #16]
 8010b08:	431a      	orrs	r2, r3
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	699b      	ldr	r3, [r3, #24]
 8010b0e:	431a      	orrs	r2, r3
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	430a      	orrs	r2, r1
 8010b16:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	687a      	ldr	r2, [r7, #4]
 8010b1e:	68d2      	ldr	r2, [r2, #12]
 8010b20:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	6919      	ldr	r1, [r3, #16]
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	689b      	ldr	r3, [r3, #8]
 8010b2c:	041a      	lsls	r2, r3, #16
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	430a      	orrs	r2, r1
 8010b34:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f000 fb86 	bl	8011248 <RTC_ExitInitMode>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8010b40:	7bfb      	ldrb	r3, [r7, #15]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d113      	bne.n	8010b6e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	f022 0203 	bic.w	r2, r2, #3
 8010b54:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	69da      	ldr	r2, [r3, #28]
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	695b      	ldr	r3, [r3, #20]
 8010b64:	431a      	orrs	r2, r3
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	430a      	orrs	r2, r1
 8010b6c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	22ff      	movs	r2, #255	@ 0xff
 8010b74:	625a      	str	r2, [r3, #36]	@ 0x24
 8010b76:	e001      	b.n	8010b7c <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8010b7c:	7bfb      	ldrb	r3, [r7, #15]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d103      	bne.n	8010b8a <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	2201      	movs	r2, #1
 8010b86:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8010b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	3710      	adds	r7, #16
 8010b90:	46bd      	mov	sp, r7
 8010b92:	bd80      	pop	{r7, pc}

08010b94 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010b94:	b590      	push	{r4, r7, lr}
 8010b96:	b087      	sub	sp, #28
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	60f8      	str	r0, [r7, #12]
 8010b9c:	60b9      	str	r1, [r7, #8]
 8010b9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010ba6:	2b01      	cmp	r3, #1
 8010ba8:	d101      	bne.n	8010bae <HAL_RTC_SetTime+0x1a>
 8010baa:	2302      	movs	r3, #2
 8010bac:	e08b      	b.n	8010cc6 <HAL_RTC_SetTime+0x132>
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	2201      	movs	r2, #1
 8010bb2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	2202      	movs	r2, #2
 8010bba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	22ca      	movs	r2, #202	@ 0xca
 8010bc4:	625a      	str	r2, [r3, #36]	@ 0x24
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	2253      	movs	r2, #83	@ 0x53
 8010bcc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010bce:	68f8      	ldr	r0, [r7, #12]
 8010bd0:	f000 fb06 	bl	80111e0 <RTC_EnterInitMode>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8010bd8:	7cfb      	ldrb	r3, [r7, #19]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d163      	bne.n	8010ca6 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d126      	bne.n	8010c32 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	689b      	ldr	r3, [r3, #8]
 8010bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d102      	bne.n	8010bf8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	781b      	ldrb	r3, [r3, #0]
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f000 fb61 	bl	80112c4 <RTC_ByteToBcd2>
 8010c02:	4603      	mov	r3, r0
 8010c04:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	785b      	ldrb	r3, [r3, #1]
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f000 fb5a 	bl	80112c4 <RTC_ByteToBcd2>
 8010c10:	4603      	mov	r3, r0
 8010c12:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010c14:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8010c16:	68bb      	ldr	r3, [r7, #8]
 8010c18:	789b      	ldrb	r3, [r3, #2]
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f000 fb52 	bl	80112c4 <RTC_ByteToBcd2>
 8010c20:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010c22:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	78db      	ldrb	r3, [r3, #3]
 8010c2a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010c2c:	4313      	orrs	r3, r2
 8010c2e:	617b      	str	r3, [r7, #20]
 8010c30:	e018      	b.n	8010c64 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	689b      	ldr	r3, [r3, #8]
 8010c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d102      	bne.n	8010c46 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	2200      	movs	r2, #0
 8010c44:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010c46:	68bb      	ldr	r3, [r7, #8]
 8010c48:	781b      	ldrb	r3, [r3, #0]
 8010c4a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	785b      	ldrb	r3, [r3, #1]
 8010c50:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010c52:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8010c54:	68ba      	ldr	r2, [r7, #8]
 8010c56:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010c58:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010c5a:	68bb      	ldr	r3, [r7, #8]
 8010c5c:	78db      	ldrb	r3, [r3, #3]
 8010c5e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010c60:	4313      	orrs	r3, r2
 8010c62:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	681a      	ldr	r2, [r3, #0]
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8010c6e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8010c72:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	689a      	ldr	r2, [r3, #8]
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8010c82:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	6899      	ldr	r1, [r3, #8]
 8010c8a:	68bb      	ldr	r3, [r7, #8]
 8010c8c:	68da      	ldr	r2, [r3, #12]
 8010c8e:	68bb      	ldr	r3, [r7, #8]
 8010c90:	691b      	ldr	r3, [r3, #16]
 8010c92:	431a      	orrs	r2, r3
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	430a      	orrs	r2, r1
 8010c9a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010c9c:	68f8      	ldr	r0, [r7, #12]
 8010c9e:	f000 fad3 	bl	8011248 <RTC_ExitInitMode>
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	22ff      	movs	r2, #255	@ 0xff
 8010cac:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8010cae:	7cfb      	ldrb	r3, [r7, #19]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d103      	bne.n	8010cbc <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	2201      	movs	r2, #1
 8010cb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8010cc4:	7cfb      	ldrb	r3, [r7, #19]
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	371c      	adds	r7, #28
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd90      	pop	{r4, r7, pc}

08010cce <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010cce:	b580      	push	{r7, lr}
 8010cd0:	b086      	sub	sp, #24
 8010cd2:	af00      	add	r7, sp, #0
 8010cd4:	60f8      	str	r0, [r7, #12]
 8010cd6:	60b9      	str	r1, [r7, #8]
 8010cd8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010ce0:	68bb      	ldr	r3, [r7, #8]
 8010ce2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	691b      	ldr	r3, [r3, #16]
 8010cea:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8010cee:	68bb      	ldr	r3, [r7, #8]
 8010cf0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8010cfc:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8010d00:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8010d02:	697b      	ldr	r3, [r7, #20]
 8010d04:	0c1b      	lsrs	r3, r3, #16
 8010d06:	b2db      	uxtb	r3, r3
 8010d08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010d0c:	b2da      	uxtb	r2, r3
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8010d12:	697b      	ldr	r3, [r7, #20]
 8010d14:	0a1b      	lsrs	r3, r3, #8
 8010d16:	b2db      	uxtb	r3, r3
 8010d18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010d1c:	b2da      	uxtb	r2, r3
 8010d1e:	68bb      	ldr	r3, [r7, #8]
 8010d20:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8010d22:	697b      	ldr	r3, [r7, #20]
 8010d24:	b2db      	uxtb	r3, r3
 8010d26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010d2a:	b2da      	uxtb	r2, r3
 8010d2c:	68bb      	ldr	r3, [r7, #8]
 8010d2e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	0d9b      	lsrs	r3, r3, #22
 8010d34:	b2db      	uxtb	r3, r3
 8010d36:	f003 0301 	and.w	r3, r3, #1
 8010d3a:	b2da      	uxtb	r2, r3
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d11a      	bne.n	8010d7c <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	781b      	ldrb	r3, [r3, #0]
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f000 fada 	bl	8011304 <RTC_Bcd2ToByte>
 8010d50:	4603      	mov	r3, r0
 8010d52:	461a      	mov	r2, r3
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8010d58:	68bb      	ldr	r3, [r7, #8]
 8010d5a:	785b      	ldrb	r3, [r3, #1]
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f000 fad1 	bl	8011304 <RTC_Bcd2ToByte>
 8010d62:	4603      	mov	r3, r0
 8010d64:	461a      	mov	r2, r3
 8010d66:	68bb      	ldr	r3, [r7, #8]
 8010d68:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8010d6a:	68bb      	ldr	r3, [r7, #8]
 8010d6c:	789b      	ldrb	r3, [r3, #2]
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f000 fac8 	bl	8011304 <RTC_Bcd2ToByte>
 8010d74:	4603      	mov	r3, r0
 8010d76:	461a      	mov	r2, r3
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8010d7c:	2300      	movs	r3, #0
}
 8010d7e:	4618      	mov	r0, r3
 8010d80:	3718      	adds	r7, #24
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd80      	pop	{r7, pc}

08010d86 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010d86:	b590      	push	{r4, r7, lr}
 8010d88:	b087      	sub	sp, #28
 8010d8a:	af00      	add	r7, sp, #0
 8010d8c:	60f8      	str	r0, [r7, #12]
 8010d8e:	60b9      	str	r1, [r7, #8]
 8010d90:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010d98:	2b01      	cmp	r3, #1
 8010d9a:	d101      	bne.n	8010da0 <HAL_RTC_SetDate+0x1a>
 8010d9c:	2302      	movs	r3, #2
 8010d9e:	e075      	b.n	8010e8c <HAL_RTC_SetDate+0x106>
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	2201      	movs	r2, #1
 8010da4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	2202      	movs	r2, #2
 8010dac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d10e      	bne.n	8010dd4 <HAL_RTC_SetDate+0x4e>
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	785b      	ldrb	r3, [r3, #1]
 8010dba:	f003 0310 	and.w	r3, r3, #16
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d008      	beq.n	8010dd4 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8010dc2:	68bb      	ldr	r3, [r7, #8]
 8010dc4:	785b      	ldrb	r3, [r3, #1]
 8010dc6:	f023 0310 	bic.w	r3, r3, #16
 8010dca:	b2db      	uxtb	r3, r3
 8010dcc:	330a      	adds	r3, #10
 8010dce:	b2da      	uxtb	r2, r3
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d11c      	bne.n	8010e14 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8010dda:	68bb      	ldr	r3, [r7, #8]
 8010ddc:	78db      	ldrb	r3, [r3, #3]
 8010dde:	4618      	mov	r0, r3
 8010de0:	f000 fa70 	bl	80112c4 <RTC_ByteToBcd2>
 8010de4:	4603      	mov	r3, r0
 8010de6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	785b      	ldrb	r3, [r3, #1]
 8010dec:	4618      	mov	r0, r3
 8010dee:	f000 fa69 	bl	80112c4 <RTC_ByteToBcd2>
 8010df2:	4603      	mov	r3, r0
 8010df4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8010df6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8010df8:	68bb      	ldr	r3, [r7, #8]
 8010dfa:	789b      	ldrb	r3, [r3, #2]
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f000 fa61 	bl	80112c4 <RTC_ByteToBcd2>
 8010e02:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8010e04:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	781b      	ldrb	r3, [r3, #0]
 8010e0c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8010e0e:	4313      	orrs	r3, r2
 8010e10:	617b      	str	r3, [r7, #20]
 8010e12:	e00e      	b.n	8010e32 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	78db      	ldrb	r3, [r3, #3]
 8010e18:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8010e1a:	68bb      	ldr	r3, [r7, #8]
 8010e1c:	785b      	ldrb	r3, [r3, #1]
 8010e1e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8010e20:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8010e22:	68ba      	ldr	r2, [r7, #8]
 8010e24:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8010e26:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	781b      	ldrb	r3, [r3, #0]
 8010e2c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8010e2e:	4313      	orrs	r3, r2
 8010e30:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	22ca      	movs	r2, #202	@ 0xca
 8010e38:	625a      	str	r2, [r3, #36]	@ 0x24
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	2253      	movs	r2, #83	@ 0x53
 8010e40:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010e42:	68f8      	ldr	r0, [r7, #12]
 8010e44:	f000 f9cc 	bl	80111e0 <RTC_EnterInitMode>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8010e4c:	7cfb      	ldrb	r3, [r7, #19]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d10c      	bne.n	8010e6c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	681a      	ldr	r2, [r3, #0]
 8010e56:	697b      	ldr	r3, [r7, #20]
 8010e58:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010e5c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010e60:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010e62:	68f8      	ldr	r0, [r7, #12]
 8010e64:	f000 f9f0 	bl	8011248 <RTC_ExitInitMode>
 8010e68:	4603      	mov	r3, r0
 8010e6a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	22ff      	movs	r2, #255	@ 0xff
 8010e72:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8010e74:	7cfb      	ldrb	r3, [r7, #19]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d103      	bne.n	8010e82 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	2201      	movs	r2, #1
 8010e7e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	2200      	movs	r2, #0
 8010e86:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8010e8a:	7cfb      	ldrb	r3, [r7, #19]
}
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	371c      	adds	r7, #28
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd90      	pop	{r4, r7, pc}

08010e94 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8010e94:	b590      	push	{r4, r7, lr}
 8010e96:	b089      	sub	sp, #36	@ 0x24
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	60f8      	str	r0, [r7, #12]
 8010e9c:	60b9      	str	r1, [r7, #8]
 8010e9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010ea6:	2b01      	cmp	r3, #1
 8010ea8:	d101      	bne.n	8010eae <HAL_RTC_SetAlarm_IT+0x1a>
 8010eaa:	2302      	movs	r3, #2
 8010eac:	e127      	b.n	80110fe <HAL_RTC_SetAlarm_IT+0x26a>
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	2201      	movs	r2, #1
 8010eb2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	2202      	movs	r2, #2
 8010eba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d137      	bne.n	8010f34 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	689b      	ldr	r3, [r3, #8]
 8010eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d102      	bne.n	8010ed8 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8010ed8:	68bb      	ldr	r3, [r7, #8]
 8010eda:	781b      	ldrb	r3, [r3, #0]
 8010edc:	4618      	mov	r0, r3
 8010ede:	f000 f9f1 	bl	80112c4 <RTC_ByteToBcd2>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8010ee6:	68bb      	ldr	r3, [r7, #8]
 8010ee8:	785b      	ldrb	r3, [r3, #1]
 8010eea:	4618      	mov	r0, r3
 8010eec:	f000 f9ea 	bl	80112c4 <RTC_ByteToBcd2>
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8010ef4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8010ef6:	68bb      	ldr	r3, [r7, #8]
 8010ef8:	789b      	ldrb	r3, [r3, #2]
 8010efa:	4618      	mov	r0, r3
 8010efc:	f000 f9e2 	bl	80112c4 <RTC_ByteToBcd2>
 8010f00:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8010f02:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	78db      	ldrb	r3, [r3, #3]
 8010f0a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8010f0c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8010f10:	68bb      	ldr	r3, [r7, #8]
 8010f12:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8010f16:	4618      	mov	r0, r3
 8010f18:	f000 f9d4 	bl	80112c4 <RTC_ByteToBcd2>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8010f20:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8010f28:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8010f2a:	68bb      	ldr	r3, [r7, #8]
 8010f2c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8010f2e:	4313      	orrs	r3, r2
 8010f30:	61fb      	str	r3, [r7, #28]
 8010f32:	e023      	b.n	8010f7c <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	689b      	ldr	r3, [r3, #8]
 8010f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d102      	bne.n	8010f48 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8010f42:	68bb      	ldr	r3, [r7, #8]
 8010f44:	2200      	movs	r2, #0
 8010f46:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	781b      	ldrb	r3, [r3, #0]
 8010f4c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8010f4e:	68bb      	ldr	r3, [r7, #8]
 8010f50:	785b      	ldrb	r3, [r3, #1]
 8010f52:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8010f54:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8010f56:	68ba      	ldr	r2, [r7, #8]
 8010f58:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8010f5a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	78db      	ldrb	r3, [r3, #3]
 8010f60:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8010f62:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8010f6a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8010f6c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8010f72:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8010f78:	4313      	orrs	r3, r2
 8010f7a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	685a      	ldr	r2, [r3, #4]
 8010f80:	68bb      	ldr	r3, [r7, #8]
 8010f82:	69db      	ldr	r3, [r3, #28]
 8010f84:	4313      	orrs	r3, r2
 8010f86:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	22ca      	movs	r2, #202	@ 0xca
 8010f8e:	625a      	str	r2, [r3, #36]	@ 0x24
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	2253      	movs	r2, #83	@ 0x53
 8010f96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010fa0:	d14a      	bne.n	8011038 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	689a      	ldr	r2, [r3, #8]
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010fb0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	68db      	ldr	r3, [r3, #12]
 8010fb8:	b2da      	uxtb	r2, r3
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8010fc2:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8010fc4:	f7f9 fe2e 	bl	800ac24 <HAL_GetTick>
 8010fc8:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8010fca:	e015      	b.n	8010ff8 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010fcc:	f7f9 fe2a 	bl	800ac24 <HAL_GetTick>
 8010fd0:	4602      	mov	r2, r0
 8010fd2:	693b      	ldr	r3, [r7, #16]
 8010fd4:	1ad3      	subs	r3, r2, r3
 8010fd6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010fda:	d90d      	bls.n	8010ff8 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	22ff      	movs	r2, #255	@ 0xff
 8010fe2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	2203      	movs	r2, #3
 8010fe8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	2200      	movs	r2, #0
 8010ff0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8010ff4:	2303      	movs	r3, #3
 8010ff6:	e082      	b.n	80110fe <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	68db      	ldr	r3, [r3, #12]
 8010ffe:	f003 0301 	and.w	r3, r3, #1
 8011002:	2b00      	cmp	r3, #0
 8011004:	d0e2      	beq.n	8010fcc <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	69fa      	ldr	r2, [r7, #28]
 801100c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	69ba      	ldr	r2, [r7, #24]
 8011014:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	689a      	ldr	r2, [r3, #8]
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011024:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	689a      	ldr	r2, [r3, #8]
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011034:	609a      	str	r2, [r3, #8]
 8011036:	e049      	b.n	80110cc <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	689a      	ldr	r2, [r3, #8]
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8011046:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	68db      	ldr	r3, [r3, #12]
 801104e:	b2da      	uxtb	r2, r3
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8011058:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 801105a:	f7f9 fde3 	bl	800ac24 <HAL_GetTick>
 801105e:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8011060:	e015      	b.n	801108e <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011062:	f7f9 fddf 	bl	800ac24 <HAL_GetTick>
 8011066:	4602      	mov	r2, r0
 8011068:	697b      	ldr	r3, [r7, #20]
 801106a:	1ad3      	subs	r3, r2, r3
 801106c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011070:	d90d      	bls.n	801108e <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	22ff      	movs	r2, #255	@ 0xff
 8011078:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	2203      	movs	r2, #3
 801107e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	2200      	movs	r2, #0
 8011086:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 801108a:	2303      	movs	r3, #3
 801108c:	e037      	b.n	80110fe <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	68db      	ldr	r3, [r3, #12]
 8011094:	f003 0302 	and.w	r3, r3, #2
 8011098:	2b00      	cmp	r3, #0
 801109a:	d0e2      	beq.n	8011062 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	69fa      	ldr	r2, [r7, #28]
 80110a2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	69ba      	ldr	r2, [r7, #24]
 80110aa:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	689a      	ldr	r2, [r3, #8]
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80110ba:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	689a      	ldr	r2, [r3, #8]
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80110ca:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80110cc:	4b0e      	ldr	r3, [pc, #56]	@ (8011108 <HAL_RTC_SetAlarm_IT+0x274>)
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	4a0d      	ldr	r2, [pc, #52]	@ (8011108 <HAL_RTC_SetAlarm_IT+0x274>)
 80110d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80110d6:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80110d8:	4b0b      	ldr	r3, [pc, #44]	@ (8011108 <HAL_RTC_SetAlarm_IT+0x274>)
 80110da:	689b      	ldr	r3, [r3, #8]
 80110dc:	4a0a      	ldr	r2, [pc, #40]	@ (8011108 <HAL_RTC_SetAlarm_IT+0x274>)
 80110de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80110e2:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	22ff      	movs	r2, #255	@ 0xff
 80110ea:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	2201      	movs	r2, #1
 80110f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	2200      	movs	r2, #0
 80110f8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80110fc:	2300      	movs	r3, #0
}
 80110fe:	4618      	mov	r0, r3
 8011100:	3724      	adds	r7, #36	@ 0x24
 8011102:	46bd      	mov	sp, r7
 8011104:	bd90      	pop	{r4, r7, pc}
 8011106:	bf00      	nop
 8011108:	40010400 	.word	0x40010400

0801110c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b082      	sub	sp, #8
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8011114:	4b1f      	ldr	r3, [pc, #124]	@ (8011194 <HAL_RTC_AlarmIRQHandler+0x88>)
 8011116:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801111a:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	689b      	ldr	r3, [r3, #8]
 8011122:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8011126:	2b00      	cmp	r3, #0
 8011128:	d012      	beq.n	8011150 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	68db      	ldr	r3, [r3, #12]
 8011130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011134:	2b00      	cmp	r3, #0
 8011136:	d00b      	beq.n	8011150 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	68db      	ldr	r3, [r3, #12]
 801113e:	b2da      	uxtb	r2, r3
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8011148:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 801114a:	6878      	ldr	r0, [r7, #4]
 801114c:	f7f1 fc10 	bl	8002970 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	689b      	ldr	r3, [r3, #8]
 8011156:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801115a:	2b00      	cmp	r3, #0
 801115c:	d012      	beq.n	8011184 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	68db      	ldr	r3, [r3, #12]
 8011164:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011168:	2b00      	cmp	r3, #0
 801116a:	d00b      	beq.n	8011184 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	68db      	ldr	r3, [r3, #12]
 8011172:	b2da      	uxtb	r2, r3
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	f462 7220 	orn	r2, r2, #640	@ 0x280
 801117c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 801117e:	6878      	ldr	r0, [r7, #4]
 8011180:	f000 f8da 	bl	8011338 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2201      	movs	r2, #1
 8011188:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 801118c:	bf00      	nop
 801118e:	3708      	adds	r7, #8
 8011190:	46bd      	mov	sp, r7
 8011192:	bd80      	pop	{r7, pc}
 8011194:	40010400 	.word	0x40010400

08011198 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b084      	sub	sp, #16
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	4a0d      	ldr	r2, [pc, #52]	@ (80111dc <HAL_RTC_WaitForSynchro+0x44>)
 80111a6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80111a8:	f7f9 fd3c 	bl	800ac24 <HAL_GetTick>
 80111ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80111ae:	e009      	b.n	80111c4 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80111b0:	f7f9 fd38 	bl	800ac24 <HAL_GetTick>
 80111b4:	4602      	mov	r2, r0
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	1ad3      	subs	r3, r2, r3
 80111ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80111be:	d901      	bls.n	80111c4 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80111c0:	2303      	movs	r3, #3
 80111c2:	e007      	b.n	80111d4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	68db      	ldr	r3, [r3, #12]
 80111ca:	f003 0320 	and.w	r3, r3, #32
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d0ee      	beq.n	80111b0 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80111d2:	2300      	movs	r3, #0
}
 80111d4:	4618      	mov	r0, r3
 80111d6:	3710      	adds	r7, #16
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}
 80111dc:	0003ff5f 	.word	0x0003ff5f

080111e0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b084      	sub	sp, #16
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80111e8:	2300      	movs	r3, #0
 80111ea:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	68db      	ldr	r3, [r3, #12]
 80111f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d120      	bne.n	801123c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	f04f 32ff 	mov.w	r2, #4294967295
 8011202:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011204:	f7f9 fd0e 	bl	800ac24 <HAL_GetTick>
 8011208:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801120a:	e00d      	b.n	8011228 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 801120c:	f7f9 fd0a 	bl	800ac24 <HAL_GetTick>
 8011210:	4602      	mov	r2, r0
 8011212:	68bb      	ldr	r3, [r7, #8]
 8011214:	1ad3      	subs	r3, r2, r3
 8011216:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801121a:	d905      	bls.n	8011228 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 801121c:	2303      	movs	r3, #3
 801121e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2203      	movs	r2, #3
 8011224:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	68db      	ldr	r3, [r3, #12]
 801122e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011232:	2b00      	cmp	r3, #0
 8011234:	d102      	bne.n	801123c <RTC_EnterInitMode+0x5c>
 8011236:	7bfb      	ldrb	r3, [r7, #15]
 8011238:	2b03      	cmp	r3, #3
 801123a:	d1e7      	bne.n	801120c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 801123c:	7bfb      	ldrb	r3, [r7, #15]
}
 801123e:	4618      	mov	r0, r3
 8011240:	3710      	adds	r7, #16
 8011242:	46bd      	mov	sp, r7
 8011244:	bd80      	pop	{r7, pc}
	...

08011248 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b084      	sub	sp, #16
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011250:	2300      	movs	r3, #0
 8011252:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8011254:	4b1a      	ldr	r3, [pc, #104]	@ (80112c0 <RTC_ExitInitMode+0x78>)
 8011256:	68db      	ldr	r3, [r3, #12]
 8011258:	4a19      	ldr	r2, [pc, #100]	@ (80112c0 <RTC_ExitInitMode+0x78>)
 801125a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801125e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011260:	4b17      	ldr	r3, [pc, #92]	@ (80112c0 <RTC_ExitInitMode+0x78>)
 8011262:	689b      	ldr	r3, [r3, #8]
 8011264:	f003 0320 	and.w	r3, r3, #32
 8011268:	2b00      	cmp	r3, #0
 801126a:	d10c      	bne.n	8011286 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801126c:	6878      	ldr	r0, [r7, #4]
 801126e:	f7ff ff93 	bl	8011198 <HAL_RTC_WaitForSynchro>
 8011272:	4603      	mov	r3, r0
 8011274:	2b00      	cmp	r3, #0
 8011276:	d01e      	beq.n	80112b6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2203      	movs	r2, #3
 801127c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8011280:	2303      	movs	r3, #3
 8011282:	73fb      	strb	r3, [r7, #15]
 8011284:	e017      	b.n	80112b6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011286:	4b0e      	ldr	r3, [pc, #56]	@ (80112c0 <RTC_ExitInitMode+0x78>)
 8011288:	689b      	ldr	r3, [r3, #8]
 801128a:	4a0d      	ldr	r2, [pc, #52]	@ (80112c0 <RTC_ExitInitMode+0x78>)
 801128c:	f023 0320 	bic.w	r3, r3, #32
 8011290:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011292:	6878      	ldr	r0, [r7, #4]
 8011294:	f7ff ff80 	bl	8011198 <HAL_RTC_WaitForSynchro>
 8011298:	4603      	mov	r3, r0
 801129a:	2b00      	cmp	r3, #0
 801129c:	d005      	beq.n	80112aa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	2203      	movs	r2, #3
 80112a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80112a6:	2303      	movs	r3, #3
 80112a8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80112aa:	4b05      	ldr	r3, [pc, #20]	@ (80112c0 <RTC_ExitInitMode+0x78>)
 80112ac:	689b      	ldr	r3, [r3, #8]
 80112ae:	4a04      	ldr	r2, [pc, #16]	@ (80112c0 <RTC_ExitInitMode+0x78>)
 80112b0:	f043 0320 	orr.w	r3, r3, #32
 80112b4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80112b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	3710      	adds	r7, #16
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd80      	pop	{r7, pc}
 80112c0:	40002800 	.word	0x40002800

080112c4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80112c4:	b480      	push	{r7}
 80112c6:	b085      	sub	sp, #20
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	4603      	mov	r3, r0
 80112cc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80112ce:	2300      	movs	r3, #0
 80112d0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80112d2:	79fb      	ldrb	r3, [r7, #7]
 80112d4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80112d6:	e005      	b.n	80112e4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	3301      	adds	r3, #1
 80112dc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80112de:	7afb      	ldrb	r3, [r7, #11]
 80112e0:	3b0a      	subs	r3, #10
 80112e2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80112e4:	7afb      	ldrb	r3, [r7, #11]
 80112e6:	2b09      	cmp	r3, #9
 80112e8:	d8f6      	bhi.n	80112d8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	b2db      	uxtb	r3, r3
 80112ee:	011b      	lsls	r3, r3, #4
 80112f0:	b2da      	uxtb	r2, r3
 80112f2:	7afb      	ldrb	r3, [r7, #11]
 80112f4:	4313      	orrs	r3, r2
 80112f6:	b2db      	uxtb	r3, r3
}
 80112f8:	4618      	mov	r0, r3
 80112fa:	3714      	adds	r7, #20
 80112fc:	46bd      	mov	sp, r7
 80112fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011302:	4770      	bx	lr

08011304 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011304:	b480      	push	{r7}
 8011306:	b085      	sub	sp, #20
 8011308:	af00      	add	r7, sp, #0
 801130a:	4603      	mov	r3, r0
 801130c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 801130e:	79fb      	ldrb	r3, [r7, #7]
 8011310:	091b      	lsrs	r3, r3, #4
 8011312:	b2db      	uxtb	r3, r3
 8011314:	461a      	mov	r2, r3
 8011316:	0092      	lsls	r2, r2, #2
 8011318:	4413      	add	r3, r2
 801131a:	005b      	lsls	r3, r3, #1
 801131c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 801131e:	79fb      	ldrb	r3, [r7, #7]
 8011320:	f003 030f 	and.w	r3, r3, #15
 8011324:	b2da      	uxtb	r2, r3
 8011326:	7bfb      	ldrb	r3, [r7, #15]
 8011328:	4413      	add	r3, r2
 801132a:	b2db      	uxtb	r3, r3
}
 801132c:	4618      	mov	r0, r3
 801132e:	3714      	adds	r7, #20
 8011330:	46bd      	mov	sp, r7
 8011332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011336:	4770      	bx	lr

08011338 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8011338:	b480      	push	{r7}
 801133a:	b083      	sub	sp, #12
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8011340:	bf00      	nop
 8011342:	370c      	adds	r7, #12
 8011344:	46bd      	mov	sp, r7
 8011346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134a:	4770      	bx	lr

0801134c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801134c:	b580      	push	{r7, lr}
 801134e:	b084      	sub	sp, #16
 8011350:	af00      	add	r7, sp, #0
 8011352:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d101      	bne.n	801135e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801135a:	2301      	movs	r3, #1
 801135c:	e095      	b.n	801148a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011362:	2b00      	cmp	r3, #0
 8011364:	d108      	bne.n	8011378 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	685b      	ldr	r3, [r3, #4]
 801136a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801136e:	d009      	beq.n	8011384 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	2200      	movs	r2, #0
 8011374:	61da      	str	r2, [r3, #28]
 8011376:	e005      	b.n	8011384 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	2200      	movs	r2, #0
 801137c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	2200      	movs	r2, #0
 8011382:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	2200      	movs	r2, #0
 8011388:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011390:	b2db      	uxtb	r3, r3
 8011392:	2b00      	cmp	r3, #0
 8011394:	d106      	bne.n	80113a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	2200      	movs	r2, #0
 801139a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801139e:	6878      	ldr	r0, [r7, #4]
 80113a0:	f7f6 f816 	bl	80073d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2202      	movs	r2, #2
 80113a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	681a      	ldr	r2, [r3, #0]
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80113ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	68db      	ldr	r3, [r3, #12]
 80113c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80113c4:	d902      	bls.n	80113cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80113c6:	2300      	movs	r3, #0
 80113c8:	60fb      	str	r3, [r7, #12]
 80113ca:	e002      	b.n	80113d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80113cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80113d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	68db      	ldr	r3, [r3, #12]
 80113d6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80113da:	d007      	beq.n	80113ec <HAL_SPI_Init+0xa0>
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	68db      	ldr	r3, [r3, #12]
 80113e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80113e4:	d002      	beq.n	80113ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2200      	movs	r2, #0
 80113ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	685b      	ldr	r3, [r3, #4]
 80113f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	689b      	ldr	r3, [r3, #8]
 80113f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80113fc:	431a      	orrs	r2, r3
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	691b      	ldr	r3, [r3, #16]
 8011402:	f003 0302 	and.w	r3, r3, #2
 8011406:	431a      	orrs	r2, r3
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	695b      	ldr	r3, [r3, #20]
 801140c:	f003 0301 	and.w	r3, r3, #1
 8011410:	431a      	orrs	r2, r3
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	699b      	ldr	r3, [r3, #24]
 8011416:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801141a:	431a      	orrs	r2, r3
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	69db      	ldr	r3, [r3, #28]
 8011420:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011424:	431a      	orrs	r2, r3
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	6a1b      	ldr	r3, [r3, #32]
 801142a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801142e:	ea42 0103 	orr.w	r1, r2, r3
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011436:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	430a      	orrs	r2, r1
 8011440:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	699b      	ldr	r3, [r3, #24]
 8011446:	0c1b      	lsrs	r3, r3, #16
 8011448:	f003 0204 	and.w	r2, r3, #4
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011450:	f003 0310 	and.w	r3, r3, #16
 8011454:	431a      	orrs	r2, r3
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801145a:	f003 0308 	and.w	r3, r3, #8
 801145e:	431a      	orrs	r2, r3
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	68db      	ldr	r3, [r3, #12]
 8011464:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8011468:	ea42 0103 	orr.w	r1, r2, r3
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	430a      	orrs	r2, r1
 8011478:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	2200      	movs	r2, #0
 801147e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	2201      	movs	r2, #1
 8011484:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8011488:	2300      	movs	r3, #0
}
 801148a:	4618      	mov	r0, r3
 801148c:	3710      	adds	r7, #16
 801148e:	46bd      	mov	sp, r7
 8011490:	bd80      	pop	{r7, pc}

08011492 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011492:	b580      	push	{r7, lr}
 8011494:	b088      	sub	sp, #32
 8011496:	af00      	add	r7, sp, #0
 8011498:	60f8      	str	r0, [r7, #12]
 801149a:	60b9      	str	r1, [r7, #8]
 801149c:	603b      	str	r3, [r7, #0]
 801149e:	4613      	mov	r3, r2
 80114a0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80114a2:	f7f9 fbbf 	bl	800ac24 <HAL_GetTick>
 80114a6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80114a8:	88fb      	ldrh	r3, [r7, #6]
 80114aa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80114b2:	b2db      	uxtb	r3, r3
 80114b4:	2b01      	cmp	r3, #1
 80114b6:	d001      	beq.n	80114bc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80114b8:	2302      	movs	r3, #2
 80114ba:	e15c      	b.n	8011776 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80114bc:	68bb      	ldr	r3, [r7, #8]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d002      	beq.n	80114c8 <HAL_SPI_Transmit+0x36>
 80114c2:	88fb      	ldrh	r3, [r7, #6]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d101      	bne.n	80114cc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80114c8:	2301      	movs	r3, #1
 80114ca:	e154      	b.n	8011776 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80114d2:	2b01      	cmp	r3, #1
 80114d4:	d101      	bne.n	80114da <HAL_SPI_Transmit+0x48>
 80114d6:	2302      	movs	r3, #2
 80114d8:	e14d      	b.n	8011776 <HAL_SPI_Transmit+0x2e4>
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	2201      	movs	r2, #1
 80114de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	2203      	movs	r2, #3
 80114e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	2200      	movs	r2, #0
 80114ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	68ba      	ldr	r2, [r7, #8]
 80114f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	88fa      	ldrh	r2, [r7, #6]
 80114fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	88fa      	ldrh	r2, [r7, #6]
 8011500:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	2200      	movs	r2, #0
 8011506:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	2200      	movs	r2, #0
 801150c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	2200      	movs	r2, #0
 8011514:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	2200      	movs	r2, #0
 801151c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	2200      	movs	r2, #0
 8011522:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	689b      	ldr	r3, [r3, #8]
 8011528:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801152c:	d10f      	bne.n	801154e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	681a      	ldr	r2, [r3, #0]
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801153c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	681a      	ldr	r2, [r3, #0]
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801154c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011558:	2b40      	cmp	r3, #64	@ 0x40
 801155a:	d007      	beq.n	801156c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	681a      	ldr	r2, [r3, #0]
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801156a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	68db      	ldr	r3, [r3, #12]
 8011570:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011574:	d952      	bls.n	801161c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	685b      	ldr	r3, [r3, #4]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d002      	beq.n	8011584 <HAL_SPI_Transmit+0xf2>
 801157e:	8b7b      	ldrh	r3, [r7, #26]
 8011580:	2b01      	cmp	r3, #1
 8011582:	d145      	bne.n	8011610 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011588:	881a      	ldrh	r2, [r3, #0]
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011594:	1c9a      	adds	r2, r3, #2
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801159e:	b29b      	uxth	r3, r3
 80115a0:	3b01      	subs	r3, #1
 80115a2:	b29a      	uxth	r2, r3
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80115a8:	e032      	b.n	8011610 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	689b      	ldr	r3, [r3, #8]
 80115b0:	f003 0302 	and.w	r3, r3, #2
 80115b4:	2b02      	cmp	r3, #2
 80115b6:	d112      	bne.n	80115de <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80115bc:	881a      	ldrh	r2, [r3, #0]
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80115c8:	1c9a      	adds	r2, r3, #2
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80115d2:	b29b      	uxth	r3, r3
 80115d4:	3b01      	subs	r3, #1
 80115d6:	b29a      	uxth	r2, r3
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80115dc:	e018      	b.n	8011610 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80115de:	f7f9 fb21 	bl	800ac24 <HAL_GetTick>
 80115e2:	4602      	mov	r2, r0
 80115e4:	69fb      	ldr	r3, [r7, #28]
 80115e6:	1ad3      	subs	r3, r2, r3
 80115e8:	683a      	ldr	r2, [r7, #0]
 80115ea:	429a      	cmp	r2, r3
 80115ec:	d803      	bhi.n	80115f6 <HAL_SPI_Transmit+0x164>
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115f4:	d102      	bne.n	80115fc <HAL_SPI_Transmit+0x16a>
 80115f6:	683b      	ldr	r3, [r7, #0]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d109      	bne.n	8011610 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	2201      	movs	r2, #1
 8011600:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	2200      	movs	r2, #0
 8011608:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 801160c:	2303      	movs	r3, #3
 801160e:	e0b2      	b.n	8011776 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011614:	b29b      	uxth	r3, r3
 8011616:	2b00      	cmp	r3, #0
 8011618:	d1c7      	bne.n	80115aa <HAL_SPI_Transmit+0x118>
 801161a:	e083      	b.n	8011724 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	685b      	ldr	r3, [r3, #4]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d002      	beq.n	801162a <HAL_SPI_Transmit+0x198>
 8011624:	8b7b      	ldrh	r3, [r7, #26]
 8011626:	2b01      	cmp	r3, #1
 8011628:	d177      	bne.n	801171a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801162e:	b29b      	uxth	r3, r3
 8011630:	2b01      	cmp	r3, #1
 8011632:	d912      	bls.n	801165a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011638:	881a      	ldrh	r2, [r3, #0]
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011644:	1c9a      	adds	r2, r3, #2
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801164e:	b29b      	uxth	r3, r3
 8011650:	3b02      	subs	r3, #2
 8011652:	b29a      	uxth	r2, r3
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011658:	e05f      	b.n	801171a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	330c      	adds	r3, #12
 8011664:	7812      	ldrb	r2, [r2, #0]
 8011666:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801166c:	1c5a      	adds	r2, r3, #1
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011676:	b29b      	uxth	r3, r3
 8011678:	3b01      	subs	r3, #1
 801167a:	b29a      	uxth	r2, r3
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8011680:	e04b      	b.n	801171a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	689b      	ldr	r3, [r3, #8]
 8011688:	f003 0302 	and.w	r3, r3, #2
 801168c:	2b02      	cmp	r3, #2
 801168e:	d12b      	bne.n	80116e8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011694:	b29b      	uxth	r3, r3
 8011696:	2b01      	cmp	r3, #1
 8011698:	d912      	bls.n	80116c0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801169e:	881a      	ldrh	r2, [r3, #0]
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116aa:	1c9a      	adds	r2, r3, #2
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80116b4:	b29b      	uxth	r3, r3
 80116b6:	3b02      	subs	r3, #2
 80116b8:	b29a      	uxth	r2, r3
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80116be:	e02c      	b.n	801171a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	330c      	adds	r3, #12
 80116ca:	7812      	ldrb	r2, [r2, #0]
 80116cc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116d2:	1c5a      	adds	r2, r3, #1
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80116dc:	b29b      	uxth	r3, r3
 80116de:	3b01      	subs	r3, #1
 80116e0:	b29a      	uxth	r2, r3
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80116e6:	e018      	b.n	801171a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80116e8:	f7f9 fa9c 	bl	800ac24 <HAL_GetTick>
 80116ec:	4602      	mov	r2, r0
 80116ee:	69fb      	ldr	r3, [r7, #28]
 80116f0:	1ad3      	subs	r3, r2, r3
 80116f2:	683a      	ldr	r2, [r7, #0]
 80116f4:	429a      	cmp	r2, r3
 80116f6:	d803      	bhi.n	8011700 <HAL_SPI_Transmit+0x26e>
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116fe:	d102      	bne.n	8011706 <HAL_SPI_Transmit+0x274>
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d109      	bne.n	801171a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	2201      	movs	r2, #1
 801170a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	2200      	movs	r2, #0
 8011712:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8011716:	2303      	movs	r3, #3
 8011718:	e02d      	b.n	8011776 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801171e:	b29b      	uxth	r3, r3
 8011720:	2b00      	cmp	r3, #0
 8011722:	d1ae      	bne.n	8011682 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011724:	69fa      	ldr	r2, [r7, #28]
 8011726:	6839      	ldr	r1, [r7, #0]
 8011728:	68f8      	ldr	r0, [r7, #12]
 801172a:	f000 fcf5 	bl	8012118 <SPI_EndRxTxTransaction>
 801172e:	4603      	mov	r3, r0
 8011730:	2b00      	cmp	r3, #0
 8011732:	d002      	beq.n	801173a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	2220      	movs	r2, #32
 8011738:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	689b      	ldr	r3, [r3, #8]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d10a      	bne.n	8011758 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011742:	2300      	movs	r3, #0
 8011744:	617b      	str	r3, [r7, #20]
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	68db      	ldr	r3, [r3, #12]
 801174c:	617b      	str	r3, [r7, #20]
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	689b      	ldr	r3, [r3, #8]
 8011754:	617b      	str	r3, [r7, #20]
 8011756:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	2201      	movs	r2, #1
 801175c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	2200      	movs	r2, #0
 8011764:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801176c:	2b00      	cmp	r3, #0
 801176e:	d001      	beq.n	8011774 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8011770:	2301      	movs	r3, #1
 8011772:	e000      	b.n	8011776 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8011774:	2300      	movs	r3, #0
  }
}
 8011776:	4618      	mov	r0, r3
 8011778:	3720      	adds	r7, #32
 801177a:	46bd      	mov	sp, r7
 801177c:	bd80      	pop	{r7, pc}

0801177e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801177e:	b580      	push	{r7, lr}
 8011780:	b088      	sub	sp, #32
 8011782:	af02      	add	r7, sp, #8
 8011784:	60f8      	str	r0, [r7, #12]
 8011786:	60b9      	str	r1, [r7, #8]
 8011788:	603b      	str	r3, [r7, #0]
 801178a:	4613      	mov	r3, r2
 801178c:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011794:	b2db      	uxtb	r3, r3
 8011796:	2b01      	cmp	r3, #1
 8011798:	d001      	beq.n	801179e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 801179a:	2302      	movs	r3, #2
 801179c:	e123      	b.n	80119e6 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	685b      	ldr	r3, [r3, #4]
 80117a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80117a6:	d112      	bne.n	80117ce <HAL_SPI_Receive+0x50>
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	689b      	ldr	r3, [r3, #8]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d10e      	bne.n	80117ce <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	2204      	movs	r2, #4
 80117b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80117b8:	88fa      	ldrh	r2, [r7, #6]
 80117ba:	683b      	ldr	r3, [r7, #0]
 80117bc:	9300      	str	r3, [sp, #0]
 80117be:	4613      	mov	r3, r2
 80117c0:	68ba      	ldr	r2, [r7, #8]
 80117c2:	68b9      	ldr	r1, [r7, #8]
 80117c4:	68f8      	ldr	r0, [r7, #12]
 80117c6:	f000 f912 	bl	80119ee <HAL_SPI_TransmitReceive>
 80117ca:	4603      	mov	r3, r0
 80117cc:	e10b      	b.n	80119e6 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80117ce:	f7f9 fa29 	bl	800ac24 <HAL_GetTick>
 80117d2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80117d4:	68bb      	ldr	r3, [r7, #8]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d002      	beq.n	80117e0 <HAL_SPI_Receive+0x62>
 80117da:	88fb      	ldrh	r3, [r7, #6]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d101      	bne.n	80117e4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80117e0:	2301      	movs	r3, #1
 80117e2:	e100      	b.n	80119e6 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80117ea:	2b01      	cmp	r3, #1
 80117ec:	d101      	bne.n	80117f2 <HAL_SPI_Receive+0x74>
 80117ee:	2302      	movs	r3, #2
 80117f0:	e0f9      	b.n	80119e6 <HAL_SPI_Receive+0x268>
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	2201      	movs	r2, #1
 80117f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	2204      	movs	r2, #4
 80117fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	2200      	movs	r2, #0
 8011806:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	68ba      	ldr	r2, [r7, #8]
 801180c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	88fa      	ldrh	r2, [r7, #6]
 8011812:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	88fa      	ldrh	r2, [r7, #6]
 801181a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	2200      	movs	r2, #0
 8011822:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	2200      	movs	r2, #0
 8011828:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	2200      	movs	r2, #0
 801182e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	2200      	movs	r2, #0
 8011834:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	2200      	movs	r2, #0
 801183a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	68db      	ldr	r3, [r3, #12]
 8011840:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011844:	d908      	bls.n	8011858 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	685a      	ldr	r2, [r3, #4]
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8011854:	605a      	str	r2, [r3, #4]
 8011856:	e007      	b.n	8011868 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	685a      	ldr	r2, [r3, #4]
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011866:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	689b      	ldr	r3, [r3, #8]
 801186c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011870:	d10f      	bne.n	8011892 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	681a      	ldr	r2, [r3, #0]
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011880:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	681a      	ldr	r2, [r3, #0]
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8011890:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801189c:	2b40      	cmp	r3, #64	@ 0x40
 801189e:	d007      	beq.n	80118b0 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	681a      	ldr	r2, [r3, #0]
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80118ae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	68db      	ldr	r3, [r3, #12]
 80118b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80118b8:	d875      	bhi.n	80119a6 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80118ba:	e037      	b.n	801192c <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	689b      	ldr	r3, [r3, #8]
 80118c2:	f003 0301 	and.w	r3, r3, #1
 80118c6:	2b01      	cmp	r3, #1
 80118c8:	d117      	bne.n	80118fa <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	f103 020c 	add.w	r2, r3, #12
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80118d6:	7812      	ldrb	r2, [r2, #0]
 80118d8:	b2d2      	uxtb	r2, r2
 80118da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80118e0:	1c5a      	adds	r2, r3, #1
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80118ec:	b29b      	uxth	r3, r3
 80118ee:	3b01      	subs	r3, #1
 80118f0:	b29a      	uxth	r2, r3
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80118f8:	e018      	b.n	801192c <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80118fa:	f7f9 f993 	bl	800ac24 <HAL_GetTick>
 80118fe:	4602      	mov	r2, r0
 8011900:	697b      	ldr	r3, [r7, #20]
 8011902:	1ad3      	subs	r3, r2, r3
 8011904:	683a      	ldr	r2, [r7, #0]
 8011906:	429a      	cmp	r2, r3
 8011908:	d803      	bhi.n	8011912 <HAL_SPI_Receive+0x194>
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011910:	d102      	bne.n	8011918 <HAL_SPI_Receive+0x19a>
 8011912:	683b      	ldr	r3, [r7, #0]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d109      	bne.n	801192c <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	2201      	movs	r2, #1
 801191c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	2200      	movs	r2, #0
 8011924:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8011928:	2303      	movs	r3, #3
 801192a:	e05c      	b.n	80119e6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011932:	b29b      	uxth	r3, r3
 8011934:	2b00      	cmp	r3, #0
 8011936:	d1c1      	bne.n	80118bc <HAL_SPI_Receive+0x13e>
 8011938:	e03b      	b.n	80119b2 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	689b      	ldr	r3, [r3, #8]
 8011940:	f003 0301 	and.w	r3, r3, #1
 8011944:	2b01      	cmp	r3, #1
 8011946:	d115      	bne.n	8011974 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	68da      	ldr	r2, [r3, #12]
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011952:	b292      	uxth	r2, r2
 8011954:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801195a:	1c9a      	adds	r2, r3, #2
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011966:	b29b      	uxth	r3, r3
 8011968:	3b01      	subs	r3, #1
 801196a:	b29a      	uxth	r2, r3
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8011972:	e018      	b.n	80119a6 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011974:	f7f9 f956 	bl	800ac24 <HAL_GetTick>
 8011978:	4602      	mov	r2, r0
 801197a:	697b      	ldr	r3, [r7, #20]
 801197c:	1ad3      	subs	r3, r2, r3
 801197e:	683a      	ldr	r2, [r7, #0]
 8011980:	429a      	cmp	r2, r3
 8011982:	d803      	bhi.n	801198c <HAL_SPI_Receive+0x20e>
 8011984:	683b      	ldr	r3, [r7, #0]
 8011986:	f1b3 3fff 	cmp.w	r3, #4294967295
 801198a:	d102      	bne.n	8011992 <HAL_SPI_Receive+0x214>
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d109      	bne.n	80119a6 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	2201      	movs	r2, #1
 8011996:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	2200      	movs	r2, #0
 801199e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80119a2:	2303      	movs	r3, #3
 80119a4:	e01f      	b.n	80119e6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80119ac:	b29b      	uxth	r3, r3
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d1c3      	bne.n	801193a <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80119b2:	697a      	ldr	r2, [r7, #20]
 80119b4:	6839      	ldr	r1, [r7, #0]
 80119b6:	68f8      	ldr	r0, [r7, #12]
 80119b8:	f000 fb56 	bl	8012068 <SPI_EndRxTransaction>
 80119bc:	4603      	mov	r3, r0
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d002      	beq.n	80119c8 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	2220      	movs	r2, #32
 80119c6:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	2201      	movs	r2, #1
 80119cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	2200      	movs	r2, #0
 80119d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d001      	beq.n	80119e4 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80119e0:	2301      	movs	r3, #1
 80119e2:	e000      	b.n	80119e6 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80119e4:	2300      	movs	r3, #0
  }
}
 80119e6:	4618      	mov	r0, r3
 80119e8:	3718      	adds	r7, #24
 80119ea:	46bd      	mov	sp, r7
 80119ec:	bd80      	pop	{r7, pc}

080119ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80119ee:	b580      	push	{r7, lr}
 80119f0:	b08a      	sub	sp, #40	@ 0x28
 80119f2:	af00      	add	r7, sp, #0
 80119f4:	60f8      	str	r0, [r7, #12]
 80119f6:	60b9      	str	r1, [r7, #8]
 80119f8:	607a      	str	r2, [r7, #4]
 80119fa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80119fc:	2301      	movs	r3, #1
 80119fe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011a00:	f7f9 f910 	bl	800ac24 <HAL_GetTick>
 8011a04:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011a0c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	685b      	ldr	r3, [r3, #4]
 8011a12:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8011a14:	887b      	ldrh	r3, [r7, #2]
 8011a16:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8011a18:	887b      	ldrh	r3, [r7, #2]
 8011a1a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011a1c:	7ffb      	ldrb	r3, [r7, #31]
 8011a1e:	2b01      	cmp	r3, #1
 8011a20:	d00c      	beq.n	8011a3c <HAL_SPI_TransmitReceive+0x4e>
 8011a22:	69bb      	ldr	r3, [r7, #24]
 8011a24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011a28:	d106      	bne.n	8011a38 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	689b      	ldr	r3, [r3, #8]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d102      	bne.n	8011a38 <HAL_SPI_TransmitReceive+0x4a>
 8011a32:	7ffb      	ldrb	r3, [r7, #31]
 8011a34:	2b04      	cmp	r3, #4
 8011a36:	d001      	beq.n	8011a3c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8011a38:	2302      	movs	r3, #2
 8011a3a:	e1f3      	b.n	8011e24 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d005      	beq.n	8011a4e <HAL_SPI_TransmitReceive+0x60>
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d002      	beq.n	8011a4e <HAL_SPI_TransmitReceive+0x60>
 8011a48:	887b      	ldrh	r3, [r7, #2]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d101      	bne.n	8011a52 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8011a4e:	2301      	movs	r3, #1
 8011a50:	e1e8      	b.n	8011e24 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8011a58:	2b01      	cmp	r3, #1
 8011a5a:	d101      	bne.n	8011a60 <HAL_SPI_TransmitReceive+0x72>
 8011a5c:	2302      	movs	r3, #2
 8011a5e:	e1e1      	b.n	8011e24 <HAL_SPI_TransmitReceive+0x436>
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	2201      	movs	r2, #1
 8011a64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011a6e:	b2db      	uxtb	r3, r3
 8011a70:	2b04      	cmp	r3, #4
 8011a72:	d003      	beq.n	8011a7c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	2205      	movs	r2, #5
 8011a78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	2200      	movs	r2, #0
 8011a80:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	687a      	ldr	r2, [r7, #4]
 8011a86:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	887a      	ldrh	r2, [r7, #2]
 8011a8c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	887a      	ldrh	r2, [r7, #2]
 8011a94:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	68ba      	ldr	r2, [r7, #8]
 8011a9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	887a      	ldrh	r2, [r7, #2]
 8011aa2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	887a      	ldrh	r2, [r7, #2]
 8011aa8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	2200      	movs	r2, #0
 8011aae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	68db      	ldr	r3, [r3, #12]
 8011aba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011abe:	d802      	bhi.n	8011ac6 <HAL_SPI_TransmitReceive+0xd8>
 8011ac0:	8abb      	ldrh	r3, [r7, #20]
 8011ac2:	2b01      	cmp	r3, #1
 8011ac4:	d908      	bls.n	8011ad8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	685a      	ldr	r2, [r3, #4]
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8011ad4:	605a      	str	r2, [r3, #4]
 8011ad6:	e007      	b.n	8011ae8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	685a      	ldr	r2, [r3, #4]
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011ae6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011af2:	2b40      	cmp	r3, #64	@ 0x40
 8011af4:	d007      	beq.n	8011b06 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	681a      	ldr	r2, [r3, #0]
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011b04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	68db      	ldr	r3, [r3, #12]
 8011b0a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011b0e:	f240 8083 	bls.w	8011c18 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	685b      	ldr	r3, [r3, #4]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d002      	beq.n	8011b20 <HAL_SPI_TransmitReceive+0x132>
 8011b1a:	8afb      	ldrh	r3, [r7, #22]
 8011b1c:	2b01      	cmp	r3, #1
 8011b1e:	d16f      	bne.n	8011c00 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b24:	881a      	ldrh	r2, [r3, #0]
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b30:	1c9a      	adds	r2, r3, #2
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011b3a:	b29b      	uxth	r3, r3
 8011b3c:	3b01      	subs	r3, #1
 8011b3e:	b29a      	uxth	r2, r3
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011b44:	e05c      	b.n	8011c00 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	689b      	ldr	r3, [r3, #8]
 8011b4c:	f003 0302 	and.w	r3, r3, #2
 8011b50:	2b02      	cmp	r3, #2
 8011b52:	d11b      	bne.n	8011b8c <HAL_SPI_TransmitReceive+0x19e>
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011b58:	b29b      	uxth	r3, r3
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d016      	beq.n	8011b8c <HAL_SPI_TransmitReceive+0x19e>
 8011b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b60:	2b01      	cmp	r3, #1
 8011b62:	d113      	bne.n	8011b8c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b68:	881a      	ldrh	r2, [r3, #0]
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b74:	1c9a      	adds	r2, r3, #2
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011b7e:	b29b      	uxth	r3, r3
 8011b80:	3b01      	subs	r3, #1
 8011b82:	b29a      	uxth	r2, r3
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011b88:	2300      	movs	r3, #0
 8011b8a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	689b      	ldr	r3, [r3, #8]
 8011b92:	f003 0301 	and.w	r3, r3, #1
 8011b96:	2b01      	cmp	r3, #1
 8011b98:	d11c      	bne.n	8011bd4 <HAL_SPI_TransmitReceive+0x1e6>
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011ba0:	b29b      	uxth	r3, r3
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d016      	beq.n	8011bd4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	68da      	ldr	r2, [r3, #12]
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011bb0:	b292      	uxth	r2, r2
 8011bb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011bb8:	1c9a      	adds	r2, r3, #2
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011bc4:	b29b      	uxth	r3, r3
 8011bc6:	3b01      	subs	r3, #1
 8011bc8:	b29a      	uxth	r2, r3
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011bd0:	2301      	movs	r3, #1
 8011bd2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8011bd4:	f7f9 f826 	bl	800ac24 <HAL_GetTick>
 8011bd8:	4602      	mov	r2, r0
 8011bda:	6a3b      	ldr	r3, [r7, #32]
 8011bdc:	1ad3      	subs	r3, r2, r3
 8011bde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011be0:	429a      	cmp	r2, r3
 8011be2:	d80d      	bhi.n	8011c00 <HAL_SPI_TransmitReceive+0x212>
 8011be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bea:	d009      	beq.n	8011c00 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	2201      	movs	r2, #1
 8011bf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8011bfc:	2303      	movs	r3, #3
 8011bfe:	e111      	b.n	8011e24 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011c04:	b29b      	uxth	r3, r3
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d19d      	bne.n	8011b46 <HAL_SPI_TransmitReceive+0x158>
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011c10:	b29b      	uxth	r3, r3
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d197      	bne.n	8011b46 <HAL_SPI_TransmitReceive+0x158>
 8011c16:	e0e5      	b.n	8011de4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	685b      	ldr	r3, [r3, #4]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d003      	beq.n	8011c28 <HAL_SPI_TransmitReceive+0x23a>
 8011c20:	8afb      	ldrh	r3, [r7, #22]
 8011c22:	2b01      	cmp	r3, #1
 8011c24:	f040 80d1 	bne.w	8011dca <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011c2c:	b29b      	uxth	r3, r3
 8011c2e:	2b01      	cmp	r3, #1
 8011c30:	d912      	bls.n	8011c58 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c36:	881a      	ldrh	r2, [r3, #0]
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c42:	1c9a      	adds	r2, r3, #2
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011c4c:	b29b      	uxth	r3, r3
 8011c4e:	3b02      	subs	r3, #2
 8011c50:	b29a      	uxth	r2, r3
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011c56:	e0b8      	b.n	8011dca <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	330c      	adds	r3, #12
 8011c62:	7812      	ldrb	r2, [r2, #0]
 8011c64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c6a:	1c5a      	adds	r2, r3, #1
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011c74:	b29b      	uxth	r3, r3
 8011c76:	3b01      	subs	r3, #1
 8011c78:	b29a      	uxth	r2, r3
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011c7e:	e0a4      	b.n	8011dca <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	689b      	ldr	r3, [r3, #8]
 8011c86:	f003 0302 	and.w	r3, r3, #2
 8011c8a:	2b02      	cmp	r3, #2
 8011c8c:	d134      	bne.n	8011cf8 <HAL_SPI_TransmitReceive+0x30a>
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011c92:	b29b      	uxth	r3, r3
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d02f      	beq.n	8011cf8 <HAL_SPI_TransmitReceive+0x30a>
 8011c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c9a:	2b01      	cmp	r3, #1
 8011c9c:	d12c      	bne.n	8011cf8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011ca2:	b29b      	uxth	r3, r3
 8011ca4:	2b01      	cmp	r3, #1
 8011ca6:	d912      	bls.n	8011cce <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cac:	881a      	ldrh	r2, [r3, #0]
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cb8:	1c9a      	adds	r2, r3, #2
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	3b02      	subs	r3, #2
 8011cc6:	b29a      	uxth	r2, r3
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011ccc:	e012      	b.n	8011cf4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	330c      	adds	r3, #12
 8011cd8:	7812      	ldrb	r2, [r2, #0]
 8011cda:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ce0:	1c5a      	adds	r2, r3, #1
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011cea:	b29b      	uxth	r3, r3
 8011cec:	3b01      	subs	r3, #1
 8011cee:	b29a      	uxth	r2, r3
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	689b      	ldr	r3, [r3, #8]
 8011cfe:	f003 0301 	and.w	r3, r3, #1
 8011d02:	2b01      	cmp	r3, #1
 8011d04:	d148      	bne.n	8011d98 <HAL_SPI_TransmitReceive+0x3aa>
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011d0c:	b29b      	uxth	r3, r3
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d042      	beq.n	8011d98 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011d18:	b29b      	uxth	r3, r3
 8011d1a:	2b01      	cmp	r3, #1
 8011d1c:	d923      	bls.n	8011d66 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	68da      	ldr	r2, [r3, #12]
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d28:	b292      	uxth	r2, r2
 8011d2a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d30:	1c9a      	adds	r2, r3, #2
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011d3c:	b29b      	uxth	r3, r3
 8011d3e:	3b02      	subs	r3, #2
 8011d40:	b29a      	uxth	r2, r3
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011d4e:	b29b      	uxth	r3, r3
 8011d50:	2b01      	cmp	r3, #1
 8011d52:	d81f      	bhi.n	8011d94 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	685a      	ldr	r2, [r3, #4]
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011d62:	605a      	str	r2, [r3, #4]
 8011d64:	e016      	b.n	8011d94 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	f103 020c 	add.w	r2, r3, #12
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d72:	7812      	ldrb	r2, [r2, #0]
 8011d74:	b2d2      	uxtb	r2, r2
 8011d76:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d7c:	1c5a      	adds	r2, r3, #1
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011d88:	b29b      	uxth	r3, r3
 8011d8a:	3b01      	subs	r3, #1
 8011d8c:	b29a      	uxth	r2, r3
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011d94:	2301      	movs	r3, #1
 8011d96:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8011d98:	f7f8 ff44 	bl	800ac24 <HAL_GetTick>
 8011d9c:	4602      	mov	r2, r0
 8011d9e:	6a3b      	ldr	r3, [r7, #32]
 8011da0:	1ad3      	subs	r3, r2, r3
 8011da2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011da4:	429a      	cmp	r2, r3
 8011da6:	d803      	bhi.n	8011db0 <HAL_SPI_TransmitReceive+0x3c2>
 8011da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dae:	d102      	bne.n	8011db6 <HAL_SPI_TransmitReceive+0x3c8>
 8011db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d109      	bne.n	8011dca <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	2201      	movs	r2, #1
 8011dba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8011dc6:	2303      	movs	r3, #3
 8011dc8:	e02c      	b.n	8011e24 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011dce:	b29b      	uxth	r3, r3
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	f47f af55 	bne.w	8011c80 <HAL_SPI_TransmitReceive+0x292>
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011ddc:	b29b      	uxth	r3, r3
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	f47f af4e 	bne.w	8011c80 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011de4:	6a3a      	ldr	r2, [r7, #32]
 8011de6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011de8:	68f8      	ldr	r0, [r7, #12]
 8011dea:	f000 f995 	bl	8012118 <SPI_EndRxTxTransaction>
 8011dee:	4603      	mov	r3, r0
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d008      	beq.n	8011e06 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	2220      	movs	r2, #32
 8011df8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8011e02:	2301      	movs	r3, #1
 8011e04:	e00e      	b.n	8011e24 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	2201      	movs	r2, #1
 8011e0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	2200      	movs	r2, #0
 8011e12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d001      	beq.n	8011e22 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8011e1e:	2301      	movs	r3, #1
 8011e20:	e000      	b.n	8011e24 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8011e22:	2300      	movs	r3, #0
  }
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	3728      	adds	r7, #40	@ 0x28
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd80      	pop	{r7, pc}

08011e2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b088      	sub	sp, #32
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	60f8      	str	r0, [r7, #12]
 8011e34:	60b9      	str	r1, [r7, #8]
 8011e36:	603b      	str	r3, [r7, #0]
 8011e38:	4613      	mov	r3, r2
 8011e3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8011e3c:	f7f8 fef2 	bl	800ac24 <HAL_GetTick>
 8011e40:	4602      	mov	r2, r0
 8011e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e44:	1a9b      	subs	r3, r3, r2
 8011e46:	683a      	ldr	r2, [r7, #0]
 8011e48:	4413      	add	r3, r2
 8011e4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8011e4c:	f7f8 feea 	bl	800ac24 <HAL_GetTick>
 8011e50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8011e52:	4b39      	ldr	r3, [pc, #228]	@ (8011f38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	015b      	lsls	r3, r3, #5
 8011e58:	0d1b      	lsrs	r3, r3, #20
 8011e5a:	69fa      	ldr	r2, [r7, #28]
 8011e5c:	fb02 f303 	mul.w	r3, r2, r3
 8011e60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011e62:	e054      	b.n	8011f0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e6a:	d050      	beq.n	8011f0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011e6c:	f7f8 feda 	bl	800ac24 <HAL_GetTick>
 8011e70:	4602      	mov	r2, r0
 8011e72:	69bb      	ldr	r3, [r7, #24]
 8011e74:	1ad3      	subs	r3, r2, r3
 8011e76:	69fa      	ldr	r2, [r7, #28]
 8011e78:	429a      	cmp	r2, r3
 8011e7a:	d902      	bls.n	8011e82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8011e7c:	69fb      	ldr	r3, [r7, #28]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d13d      	bne.n	8011efe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	685a      	ldr	r2, [r3, #4]
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8011e90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	685b      	ldr	r3, [r3, #4]
 8011e96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011e9a:	d111      	bne.n	8011ec0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	689b      	ldr	r3, [r3, #8]
 8011ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011ea4:	d004      	beq.n	8011eb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	689b      	ldr	r3, [r3, #8]
 8011eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011eae:	d107      	bne.n	8011ec0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	681a      	ldr	r2, [r3, #0]
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011ebe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ec4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011ec8:	d10f      	bne.n	8011eea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	681a      	ldr	r2, [r3, #0]
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8011ed8:	601a      	str	r2, [r3, #0]
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	681a      	ldr	r2, [r3, #0]
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8011ee8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	2201      	movs	r2, #1
 8011eee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	2200      	movs	r2, #0
 8011ef6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8011efa:	2303      	movs	r3, #3
 8011efc:	e017      	b.n	8011f2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011efe:	697b      	ldr	r3, [r7, #20]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d101      	bne.n	8011f08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8011f04:	2300      	movs	r3, #0
 8011f06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8011f08:	697b      	ldr	r3, [r7, #20]
 8011f0a:	3b01      	subs	r3, #1
 8011f0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	689a      	ldr	r2, [r3, #8]
 8011f14:	68bb      	ldr	r3, [r7, #8]
 8011f16:	4013      	ands	r3, r2
 8011f18:	68ba      	ldr	r2, [r7, #8]
 8011f1a:	429a      	cmp	r2, r3
 8011f1c:	bf0c      	ite	eq
 8011f1e:	2301      	moveq	r3, #1
 8011f20:	2300      	movne	r3, #0
 8011f22:	b2db      	uxtb	r3, r3
 8011f24:	461a      	mov	r2, r3
 8011f26:	79fb      	ldrb	r3, [r7, #7]
 8011f28:	429a      	cmp	r2, r3
 8011f2a:	d19b      	bne.n	8011e64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8011f2c:	2300      	movs	r3, #0
}
 8011f2e:	4618      	mov	r0, r3
 8011f30:	3720      	adds	r7, #32
 8011f32:	46bd      	mov	sp, r7
 8011f34:	bd80      	pop	{r7, pc}
 8011f36:	bf00      	nop
 8011f38:	20000168 	.word	0x20000168

08011f3c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b08a      	sub	sp, #40	@ 0x28
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	60f8      	str	r0, [r7, #12]
 8011f44:	60b9      	str	r1, [r7, #8]
 8011f46:	607a      	str	r2, [r7, #4]
 8011f48:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8011f4e:	f7f8 fe69 	bl	800ac24 <HAL_GetTick>
 8011f52:	4602      	mov	r2, r0
 8011f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f56:	1a9b      	subs	r3, r3, r2
 8011f58:	683a      	ldr	r2, [r7, #0]
 8011f5a:	4413      	add	r3, r2
 8011f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8011f5e:	f7f8 fe61 	bl	800ac24 <HAL_GetTick>
 8011f62:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	330c      	adds	r3, #12
 8011f6a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8011f6c:	4b3d      	ldr	r3, [pc, #244]	@ (8012064 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8011f6e:	681a      	ldr	r2, [r3, #0]
 8011f70:	4613      	mov	r3, r2
 8011f72:	009b      	lsls	r3, r3, #2
 8011f74:	4413      	add	r3, r2
 8011f76:	00da      	lsls	r2, r3, #3
 8011f78:	1ad3      	subs	r3, r2, r3
 8011f7a:	0d1b      	lsrs	r3, r3, #20
 8011f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f7e:	fb02 f303 	mul.w	r3, r2, r3
 8011f82:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8011f84:	e060      	b.n	8012048 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8011f86:	68bb      	ldr	r3, [r7, #8]
 8011f88:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8011f8c:	d107      	bne.n	8011f9e <SPI_WaitFifoStateUntilTimeout+0x62>
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d104      	bne.n	8011f9e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8011f94:	69fb      	ldr	r3, [r7, #28]
 8011f96:	781b      	ldrb	r3, [r3, #0]
 8011f98:	b2db      	uxtb	r3, r3
 8011f9a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8011f9c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8011f9e:	683b      	ldr	r3, [r7, #0]
 8011fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fa4:	d050      	beq.n	8012048 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011fa6:	f7f8 fe3d 	bl	800ac24 <HAL_GetTick>
 8011faa:	4602      	mov	r2, r0
 8011fac:	6a3b      	ldr	r3, [r7, #32]
 8011fae:	1ad3      	subs	r3, r2, r3
 8011fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011fb2:	429a      	cmp	r2, r3
 8011fb4:	d902      	bls.n	8011fbc <SPI_WaitFifoStateUntilTimeout+0x80>
 8011fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d13d      	bne.n	8012038 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	685a      	ldr	r2, [r3, #4]
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8011fca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	685b      	ldr	r3, [r3, #4]
 8011fd0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011fd4:	d111      	bne.n	8011ffa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	689b      	ldr	r3, [r3, #8]
 8011fda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011fde:	d004      	beq.n	8011fea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	689b      	ldr	r3, [r3, #8]
 8011fe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011fe8:	d107      	bne.n	8011ffa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	681a      	ldr	r2, [r3, #0]
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011ff8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ffe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012002:	d10f      	bne.n	8012024 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	681a      	ldr	r2, [r3, #0]
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8012012:	601a      	str	r2, [r3, #0]
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	681a      	ldr	r2, [r3, #0]
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8012022:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	2201      	movs	r2, #1
 8012028:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	2200      	movs	r2, #0
 8012030:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8012034:	2303      	movs	r3, #3
 8012036:	e010      	b.n	801205a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8012038:	69bb      	ldr	r3, [r7, #24]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d101      	bne.n	8012042 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801203e:	2300      	movs	r3, #0
 8012040:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8012042:	69bb      	ldr	r3, [r7, #24]
 8012044:	3b01      	subs	r3, #1
 8012046:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	689a      	ldr	r2, [r3, #8]
 801204e:	68bb      	ldr	r3, [r7, #8]
 8012050:	4013      	ands	r3, r2
 8012052:	687a      	ldr	r2, [r7, #4]
 8012054:	429a      	cmp	r2, r3
 8012056:	d196      	bne.n	8011f86 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8012058:	2300      	movs	r3, #0
}
 801205a:	4618      	mov	r0, r3
 801205c:	3728      	adds	r7, #40	@ 0x28
 801205e:	46bd      	mov	sp, r7
 8012060:	bd80      	pop	{r7, pc}
 8012062:	bf00      	nop
 8012064:	20000168 	.word	0x20000168

08012068 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b086      	sub	sp, #24
 801206c:	af02      	add	r7, sp, #8
 801206e:	60f8      	str	r0, [r7, #12]
 8012070:	60b9      	str	r1, [r7, #8]
 8012072:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	685b      	ldr	r3, [r3, #4]
 8012078:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801207c:	d111      	bne.n	80120a2 <SPI_EndRxTransaction+0x3a>
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	689b      	ldr	r3, [r3, #8]
 8012082:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012086:	d004      	beq.n	8012092 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	689b      	ldr	r3, [r3, #8]
 801208c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012090:	d107      	bne.n	80120a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	681a      	ldr	r2, [r3, #0]
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80120a0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	9300      	str	r3, [sp, #0]
 80120a6:	68bb      	ldr	r3, [r7, #8]
 80120a8:	2200      	movs	r2, #0
 80120aa:	2180      	movs	r1, #128	@ 0x80
 80120ac:	68f8      	ldr	r0, [r7, #12]
 80120ae:	f7ff febd 	bl	8011e2c <SPI_WaitFlagStateUntilTimeout>
 80120b2:	4603      	mov	r3, r0
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d007      	beq.n	80120c8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80120bc:	f043 0220 	orr.w	r2, r3, #32
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80120c4:	2303      	movs	r3, #3
 80120c6:	e023      	b.n	8012110 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	685b      	ldr	r3, [r3, #4]
 80120cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80120d0:	d11d      	bne.n	801210e <SPI_EndRxTransaction+0xa6>
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	689b      	ldr	r3, [r3, #8]
 80120d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80120da:	d004      	beq.n	80120e6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	689b      	ldr	r3, [r3, #8]
 80120e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80120e4:	d113      	bne.n	801210e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	9300      	str	r3, [sp, #0]
 80120ea:	68bb      	ldr	r3, [r7, #8]
 80120ec:	2200      	movs	r2, #0
 80120ee:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80120f2:	68f8      	ldr	r0, [r7, #12]
 80120f4:	f7ff ff22 	bl	8011f3c <SPI_WaitFifoStateUntilTimeout>
 80120f8:	4603      	mov	r3, r0
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d007      	beq.n	801210e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012102:	f043 0220 	orr.w	r2, r3, #32
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 801210a:	2303      	movs	r3, #3
 801210c:	e000      	b.n	8012110 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801210e:	2300      	movs	r3, #0
}
 8012110:	4618      	mov	r0, r3
 8012112:	3710      	adds	r7, #16
 8012114:	46bd      	mov	sp, r7
 8012116:	bd80      	pop	{r7, pc}

08012118 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b086      	sub	sp, #24
 801211c:	af02      	add	r7, sp, #8
 801211e:	60f8      	str	r0, [r7, #12]
 8012120:	60b9      	str	r1, [r7, #8]
 8012122:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	9300      	str	r3, [sp, #0]
 8012128:	68bb      	ldr	r3, [r7, #8]
 801212a:	2200      	movs	r2, #0
 801212c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8012130:	68f8      	ldr	r0, [r7, #12]
 8012132:	f7ff ff03 	bl	8011f3c <SPI_WaitFifoStateUntilTimeout>
 8012136:	4603      	mov	r3, r0
 8012138:	2b00      	cmp	r3, #0
 801213a:	d007      	beq.n	801214c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012140:	f043 0220 	orr.w	r2, r3, #32
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8012148:	2303      	movs	r3, #3
 801214a:	e027      	b.n	801219c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	9300      	str	r3, [sp, #0]
 8012150:	68bb      	ldr	r3, [r7, #8]
 8012152:	2200      	movs	r2, #0
 8012154:	2180      	movs	r1, #128	@ 0x80
 8012156:	68f8      	ldr	r0, [r7, #12]
 8012158:	f7ff fe68 	bl	8011e2c <SPI_WaitFlagStateUntilTimeout>
 801215c:	4603      	mov	r3, r0
 801215e:	2b00      	cmp	r3, #0
 8012160:	d007      	beq.n	8012172 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012166:	f043 0220 	orr.w	r2, r3, #32
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801216e:	2303      	movs	r3, #3
 8012170:	e014      	b.n	801219c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	9300      	str	r3, [sp, #0]
 8012176:	68bb      	ldr	r3, [r7, #8]
 8012178:	2200      	movs	r2, #0
 801217a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 801217e:	68f8      	ldr	r0, [r7, #12]
 8012180:	f7ff fedc 	bl	8011f3c <SPI_WaitFifoStateUntilTimeout>
 8012184:	4603      	mov	r3, r0
 8012186:	2b00      	cmp	r3, #0
 8012188:	d007      	beq.n	801219a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801218e:	f043 0220 	orr.w	r2, r3, #32
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8012196:	2303      	movs	r3, #3
 8012198:	e000      	b.n	801219c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801219a:	2300      	movs	r3, #0
}
 801219c:	4618      	mov	r0, r3
 801219e:	3710      	adds	r7, #16
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd80      	pop	{r7, pc}

080121a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b082      	sub	sp, #8
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d101      	bne.n	80121b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80121b2:	2301      	movs	r3, #1
 80121b4:	e049      	b.n	801224a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80121bc:	b2db      	uxtb	r3, r3
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d106      	bne.n	80121d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	2200      	movs	r2, #0
 80121c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80121ca:	6878      	ldr	r0, [r7, #4]
 80121cc:	f7f5 f9d8 	bl	8007580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	2202      	movs	r2, #2
 80121d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	681a      	ldr	r2, [r3, #0]
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	3304      	adds	r3, #4
 80121e0:	4619      	mov	r1, r3
 80121e2:	4610      	mov	r0, r2
 80121e4:	f001 fa58 	bl	8013698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	2201      	movs	r2, #1
 80121ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2201      	movs	r2, #1
 80121f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	2201      	movs	r2, #1
 80121fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	2201      	movs	r2, #1
 8012204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	2201      	movs	r2, #1
 801220c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	2201      	movs	r2, #1
 8012214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	2201      	movs	r2, #1
 801221c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2201      	movs	r2, #1
 8012224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2201      	movs	r2, #1
 801222c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	2201      	movs	r2, #1
 8012234:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	2201      	movs	r2, #1
 801223c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	2201      	movs	r2, #1
 8012244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012248:	2300      	movs	r3, #0
}
 801224a:	4618      	mov	r0, r3
 801224c:	3708      	adds	r7, #8
 801224e:	46bd      	mov	sp, r7
 8012250:	bd80      	pop	{r7, pc}

08012252 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8012252:	b580      	push	{r7, lr}
 8012254:	b082      	sub	sp, #8
 8012256:	af00      	add	r7, sp, #0
 8012258:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d101      	bne.n	8012264 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8012260:	2301      	movs	r3, #1
 8012262:	e049      	b.n	80122f8 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801226a:	b2db      	uxtb	r3, r3
 801226c:	2b00      	cmp	r3, #0
 801226e:	d106      	bne.n	801227e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	2200      	movs	r2, #0
 8012274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8012278:	6878      	ldr	r0, [r7, #4]
 801227a:	f7f5 f921 	bl	80074c0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	2202      	movs	r2, #2
 8012282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	681a      	ldr	r2, [r3, #0]
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	3304      	adds	r3, #4
 801228e:	4619      	mov	r1, r3
 8012290:	4610      	mov	r0, r2
 8012292:	f001 fa01 	bl	8013698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2201      	movs	r2, #1
 801229a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	2201      	movs	r2, #1
 80122a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	2201      	movs	r2, #1
 80122aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	2201      	movs	r2, #1
 80122b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	2201      	movs	r2, #1
 80122ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	2201      	movs	r2, #1
 80122c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	2201      	movs	r2, #1
 80122ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	2201      	movs	r2, #1
 80122d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	2201      	movs	r2, #1
 80122da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	2201      	movs	r2, #1
 80122e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	2201      	movs	r2, #1
 80122ea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	2201      	movs	r2, #1
 80122f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80122f6:	2300      	movs	r3, #0
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	3708      	adds	r7, #8
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}

08012300 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b084      	sub	sp, #16
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
 8012308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801230a:	2300      	movs	r3, #0
 801230c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d109      	bne.n	8012328 <HAL_TIM_OC_Start_IT+0x28>
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801231a:	b2db      	uxtb	r3, r3
 801231c:	2b01      	cmp	r3, #1
 801231e:	bf14      	ite	ne
 8012320:	2301      	movne	r3, #1
 8012322:	2300      	moveq	r3, #0
 8012324:	b2db      	uxtb	r3, r3
 8012326:	e03c      	b.n	80123a2 <HAL_TIM_OC_Start_IT+0xa2>
 8012328:	683b      	ldr	r3, [r7, #0]
 801232a:	2b04      	cmp	r3, #4
 801232c:	d109      	bne.n	8012342 <HAL_TIM_OC_Start_IT+0x42>
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8012334:	b2db      	uxtb	r3, r3
 8012336:	2b01      	cmp	r3, #1
 8012338:	bf14      	ite	ne
 801233a:	2301      	movne	r3, #1
 801233c:	2300      	moveq	r3, #0
 801233e:	b2db      	uxtb	r3, r3
 8012340:	e02f      	b.n	80123a2 <HAL_TIM_OC_Start_IT+0xa2>
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	2b08      	cmp	r3, #8
 8012346:	d109      	bne.n	801235c <HAL_TIM_OC_Start_IT+0x5c>
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801234e:	b2db      	uxtb	r3, r3
 8012350:	2b01      	cmp	r3, #1
 8012352:	bf14      	ite	ne
 8012354:	2301      	movne	r3, #1
 8012356:	2300      	moveq	r3, #0
 8012358:	b2db      	uxtb	r3, r3
 801235a:	e022      	b.n	80123a2 <HAL_TIM_OC_Start_IT+0xa2>
 801235c:	683b      	ldr	r3, [r7, #0]
 801235e:	2b0c      	cmp	r3, #12
 8012360:	d109      	bne.n	8012376 <HAL_TIM_OC_Start_IT+0x76>
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012368:	b2db      	uxtb	r3, r3
 801236a:	2b01      	cmp	r3, #1
 801236c:	bf14      	ite	ne
 801236e:	2301      	movne	r3, #1
 8012370:	2300      	moveq	r3, #0
 8012372:	b2db      	uxtb	r3, r3
 8012374:	e015      	b.n	80123a2 <HAL_TIM_OC_Start_IT+0xa2>
 8012376:	683b      	ldr	r3, [r7, #0]
 8012378:	2b10      	cmp	r3, #16
 801237a:	d109      	bne.n	8012390 <HAL_TIM_OC_Start_IT+0x90>
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012382:	b2db      	uxtb	r3, r3
 8012384:	2b01      	cmp	r3, #1
 8012386:	bf14      	ite	ne
 8012388:	2301      	movne	r3, #1
 801238a:	2300      	moveq	r3, #0
 801238c:	b2db      	uxtb	r3, r3
 801238e:	e008      	b.n	80123a2 <HAL_TIM_OC_Start_IT+0xa2>
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012396:	b2db      	uxtb	r3, r3
 8012398:	2b01      	cmp	r3, #1
 801239a:	bf14      	ite	ne
 801239c:	2301      	movne	r3, #1
 801239e:	2300      	moveq	r3, #0
 80123a0:	b2db      	uxtb	r3, r3
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d001      	beq.n	80123aa <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80123a6:	2301      	movs	r3, #1
 80123a8:	e0e7      	b.n	801257a <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d104      	bne.n	80123ba <HAL_TIM_OC_Start_IT+0xba>
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	2202      	movs	r2, #2
 80123b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80123b8:	e023      	b.n	8012402 <HAL_TIM_OC_Start_IT+0x102>
 80123ba:	683b      	ldr	r3, [r7, #0]
 80123bc:	2b04      	cmp	r3, #4
 80123be:	d104      	bne.n	80123ca <HAL_TIM_OC_Start_IT+0xca>
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	2202      	movs	r2, #2
 80123c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80123c8:	e01b      	b.n	8012402 <HAL_TIM_OC_Start_IT+0x102>
 80123ca:	683b      	ldr	r3, [r7, #0]
 80123cc:	2b08      	cmp	r3, #8
 80123ce:	d104      	bne.n	80123da <HAL_TIM_OC_Start_IT+0xda>
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2202      	movs	r2, #2
 80123d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80123d8:	e013      	b.n	8012402 <HAL_TIM_OC_Start_IT+0x102>
 80123da:	683b      	ldr	r3, [r7, #0]
 80123dc:	2b0c      	cmp	r3, #12
 80123de:	d104      	bne.n	80123ea <HAL_TIM_OC_Start_IT+0xea>
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	2202      	movs	r2, #2
 80123e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80123e8:	e00b      	b.n	8012402 <HAL_TIM_OC_Start_IT+0x102>
 80123ea:	683b      	ldr	r3, [r7, #0]
 80123ec:	2b10      	cmp	r3, #16
 80123ee:	d104      	bne.n	80123fa <HAL_TIM_OC_Start_IT+0xfa>
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	2202      	movs	r2, #2
 80123f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80123f8:	e003      	b.n	8012402 <HAL_TIM_OC_Start_IT+0x102>
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	2202      	movs	r2, #2
 80123fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	2b0c      	cmp	r3, #12
 8012406:	d841      	bhi.n	801248c <HAL_TIM_OC_Start_IT+0x18c>
 8012408:	a201      	add	r2, pc, #4	@ (adr r2, 8012410 <HAL_TIM_OC_Start_IT+0x110>)
 801240a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801240e:	bf00      	nop
 8012410:	08012445 	.word	0x08012445
 8012414:	0801248d 	.word	0x0801248d
 8012418:	0801248d 	.word	0x0801248d
 801241c:	0801248d 	.word	0x0801248d
 8012420:	08012457 	.word	0x08012457
 8012424:	0801248d 	.word	0x0801248d
 8012428:	0801248d 	.word	0x0801248d
 801242c:	0801248d 	.word	0x0801248d
 8012430:	08012469 	.word	0x08012469
 8012434:	0801248d 	.word	0x0801248d
 8012438:	0801248d 	.word	0x0801248d
 801243c:	0801248d 	.word	0x0801248d
 8012440:	0801247b 	.word	0x0801247b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	68da      	ldr	r2, [r3, #12]
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	f042 0202 	orr.w	r2, r2, #2
 8012452:	60da      	str	r2, [r3, #12]
      break;
 8012454:	e01d      	b.n	8012492 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	68da      	ldr	r2, [r3, #12]
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	f042 0204 	orr.w	r2, r2, #4
 8012464:	60da      	str	r2, [r3, #12]
      break;
 8012466:	e014      	b.n	8012492 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	68da      	ldr	r2, [r3, #12]
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	f042 0208 	orr.w	r2, r2, #8
 8012476:	60da      	str	r2, [r3, #12]
      break;
 8012478:	e00b      	b.n	8012492 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	68da      	ldr	r2, [r3, #12]
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	f042 0210 	orr.w	r2, r2, #16
 8012488:	60da      	str	r2, [r3, #12]
      break;
 801248a:	e002      	b.n	8012492 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 801248c:	2301      	movs	r3, #1
 801248e:	73fb      	strb	r3, [r7, #15]
      break;
 8012490:	bf00      	nop
  }

  if (status == HAL_OK)
 8012492:	7bfb      	ldrb	r3, [r7, #15]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d16f      	bne.n	8012578 <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	2201      	movs	r2, #1
 801249e:	6839      	ldr	r1, [r7, #0]
 80124a0:	4618      	mov	r0, r3
 80124a2:	f001 fec7 	bl	8014234 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	4a36      	ldr	r2, [pc, #216]	@ (8012584 <HAL_TIM_OC_Start_IT+0x284>)
 80124ac:	4293      	cmp	r3, r2
 80124ae:	d013      	beq.n	80124d8 <HAL_TIM_OC_Start_IT+0x1d8>
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	4a34      	ldr	r2, [pc, #208]	@ (8012588 <HAL_TIM_OC_Start_IT+0x288>)
 80124b6:	4293      	cmp	r3, r2
 80124b8:	d00e      	beq.n	80124d8 <HAL_TIM_OC_Start_IT+0x1d8>
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	4a33      	ldr	r2, [pc, #204]	@ (801258c <HAL_TIM_OC_Start_IT+0x28c>)
 80124c0:	4293      	cmp	r3, r2
 80124c2:	d009      	beq.n	80124d8 <HAL_TIM_OC_Start_IT+0x1d8>
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	4a31      	ldr	r2, [pc, #196]	@ (8012590 <HAL_TIM_OC_Start_IT+0x290>)
 80124ca:	4293      	cmp	r3, r2
 80124cc:	d004      	beq.n	80124d8 <HAL_TIM_OC_Start_IT+0x1d8>
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	4a30      	ldr	r2, [pc, #192]	@ (8012594 <HAL_TIM_OC_Start_IT+0x294>)
 80124d4:	4293      	cmp	r3, r2
 80124d6:	d101      	bne.n	80124dc <HAL_TIM_OC_Start_IT+0x1dc>
 80124d8:	2301      	movs	r3, #1
 80124da:	e000      	b.n	80124de <HAL_TIM_OC_Start_IT+0x1de>
 80124dc:	2300      	movs	r3, #0
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d007      	beq.n	80124f2 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80124f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	4a23      	ldr	r2, [pc, #140]	@ (8012584 <HAL_TIM_OC_Start_IT+0x284>)
 80124f8:	4293      	cmp	r3, r2
 80124fa:	d01d      	beq.n	8012538 <HAL_TIM_OC_Start_IT+0x238>
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012504:	d018      	beq.n	8012538 <HAL_TIM_OC_Start_IT+0x238>
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	4a23      	ldr	r2, [pc, #140]	@ (8012598 <HAL_TIM_OC_Start_IT+0x298>)
 801250c:	4293      	cmp	r3, r2
 801250e:	d013      	beq.n	8012538 <HAL_TIM_OC_Start_IT+0x238>
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	4a21      	ldr	r2, [pc, #132]	@ (801259c <HAL_TIM_OC_Start_IT+0x29c>)
 8012516:	4293      	cmp	r3, r2
 8012518:	d00e      	beq.n	8012538 <HAL_TIM_OC_Start_IT+0x238>
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	4a20      	ldr	r2, [pc, #128]	@ (80125a0 <HAL_TIM_OC_Start_IT+0x2a0>)
 8012520:	4293      	cmp	r3, r2
 8012522:	d009      	beq.n	8012538 <HAL_TIM_OC_Start_IT+0x238>
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	4a17      	ldr	r2, [pc, #92]	@ (8012588 <HAL_TIM_OC_Start_IT+0x288>)
 801252a:	4293      	cmp	r3, r2
 801252c:	d004      	beq.n	8012538 <HAL_TIM_OC_Start_IT+0x238>
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	4a16      	ldr	r2, [pc, #88]	@ (801258c <HAL_TIM_OC_Start_IT+0x28c>)
 8012534:	4293      	cmp	r3, r2
 8012536:	d115      	bne.n	8012564 <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	689a      	ldr	r2, [r3, #8]
 801253e:	4b19      	ldr	r3, [pc, #100]	@ (80125a4 <HAL_TIM_OC_Start_IT+0x2a4>)
 8012540:	4013      	ands	r3, r2
 8012542:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012544:	68bb      	ldr	r3, [r7, #8]
 8012546:	2b06      	cmp	r3, #6
 8012548:	d015      	beq.n	8012576 <HAL_TIM_OC_Start_IT+0x276>
 801254a:	68bb      	ldr	r3, [r7, #8]
 801254c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012550:	d011      	beq.n	8012576 <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	681a      	ldr	r2, [r3, #0]
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	f042 0201 	orr.w	r2, r2, #1
 8012560:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012562:	e008      	b.n	8012576 <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	681a      	ldr	r2, [r3, #0]
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	f042 0201 	orr.w	r2, r2, #1
 8012572:	601a      	str	r2, [r3, #0]
 8012574:	e000      	b.n	8012578 <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012576:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012578:	7bfb      	ldrb	r3, [r7, #15]
}
 801257a:	4618      	mov	r0, r3
 801257c:	3710      	adds	r7, #16
 801257e:	46bd      	mov	sp, r7
 8012580:	bd80      	pop	{r7, pc}
 8012582:	bf00      	nop
 8012584:	40012c00 	.word	0x40012c00
 8012588:	40013400 	.word	0x40013400
 801258c:	40014000 	.word	0x40014000
 8012590:	40014400 	.word	0x40014400
 8012594:	40014800 	.word	0x40014800
 8012598:	40000400 	.word	0x40000400
 801259c:	40000800 	.word	0x40000800
 80125a0:	40000c00 	.word	0x40000c00
 80125a4:	00010007 	.word	0x00010007

080125a8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b084      	sub	sp, #16
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
 80125b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80125b2:	2300      	movs	r3, #0
 80125b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80125b6:	683b      	ldr	r3, [r7, #0]
 80125b8:	2b0c      	cmp	r3, #12
 80125ba:	d841      	bhi.n	8012640 <HAL_TIM_OC_Stop_IT+0x98>
 80125bc:	a201      	add	r2, pc, #4	@ (adr r2, 80125c4 <HAL_TIM_OC_Stop_IT+0x1c>)
 80125be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125c2:	bf00      	nop
 80125c4:	080125f9 	.word	0x080125f9
 80125c8:	08012641 	.word	0x08012641
 80125cc:	08012641 	.word	0x08012641
 80125d0:	08012641 	.word	0x08012641
 80125d4:	0801260b 	.word	0x0801260b
 80125d8:	08012641 	.word	0x08012641
 80125dc:	08012641 	.word	0x08012641
 80125e0:	08012641 	.word	0x08012641
 80125e4:	0801261d 	.word	0x0801261d
 80125e8:	08012641 	.word	0x08012641
 80125ec:	08012641 	.word	0x08012641
 80125f0:	08012641 	.word	0x08012641
 80125f4:	0801262f 	.word	0x0801262f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	68da      	ldr	r2, [r3, #12]
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	f022 0202 	bic.w	r2, r2, #2
 8012606:	60da      	str	r2, [r3, #12]
      break;
 8012608:	e01d      	b.n	8012646 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	68da      	ldr	r2, [r3, #12]
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	f022 0204 	bic.w	r2, r2, #4
 8012618:	60da      	str	r2, [r3, #12]
      break;
 801261a:	e014      	b.n	8012646 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	68da      	ldr	r2, [r3, #12]
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	f022 0208 	bic.w	r2, r2, #8
 801262a:	60da      	str	r2, [r3, #12]
      break;
 801262c:	e00b      	b.n	8012646 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	68da      	ldr	r2, [r3, #12]
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	f022 0210 	bic.w	r2, r2, #16
 801263c:	60da      	str	r2, [r3, #12]
      break;
 801263e:	e002      	b.n	8012646 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8012640:	2301      	movs	r3, #1
 8012642:	73fb      	strb	r3, [r7, #15]
      break;
 8012644:	bf00      	nop
  }

  if (status == HAL_OK)
 8012646:	7bfb      	ldrb	r3, [r7, #15]
 8012648:	2b00      	cmp	r3, #0
 801264a:	f040 8081 	bne.w	8012750 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	2200      	movs	r2, #0
 8012654:	6839      	ldr	r1, [r7, #0]
 8012656:	4618      	mov	r0, r3
 8012658:	f001 fdec 	bl	8014234 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	4a3e      	ldr	r2, [pc, #248]	@ (801275c <HAL_TIM_OC_Stop_IT+0x1b4>)
 8012662:	4293      	cmp	r3, r2
 8012664:	d013      	beq.n	801268e <HAL_TIM_OC_Stop_IT+0xe6>
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	4a3d      	ldr	r2, [pc, #244]	@ (8012760 <HAL_TIM_OC_Stop_IT+0x1b8>)
 801266c:	4293      	cmp	r3, r2
 801266e:	d00e      	beq.n	801268e <HAL_TIM_OC_Stop_IT+0xe6>
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	4a3b      	ldr	r2, [pc, #236]	@ (8012764 <HAL_TIM_OC_Stop_IT+0x1bc>)
 8012676:	4293      	cmp	r3, r2
 8012678:	d009      	beq.n	801268e <HAL_TIM_OC_Stop_IT+0xe6>
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	4a3a      	ldr	r2, [pc, #232]	@ (8012768 <HAL_TIM_OC_Stop_IT+0x1c0>)
 8012680:	4293      	cmp	r3, r2
 8012682:	d004      	beq.n	801268e <HAL_TIM_OC_Stop_IT+0xe6>
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	4a38      	ldr	r2, [pc, #224]	@ (801276c <HAL_TIM_OC_Stop_IT+0x1c4>)
 801268a:	4293      	cmp	r3, r2
 801268c:	d101      	bne.n	8012692 <HAL_TIM_OC_Stop_IT+0xea>
 801268e:	2301      	movs	r3, #1
 8012690:	e000      	b.n	8012694 <HAL_TIM_OC_Stop_IT+0xec>
 8012692:	2300      	movs	r3, #0
 8012694:	2b00      	cmp	r3, #0
 8012696:	d017      	beq.n	80126c8 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	6a1a      	ldr	r2, [r3, #32]
 801269e:	f241 1311 	movw	r3, #4369	@ 0x1111
 80126a2:	4013      	ands	r3, r2
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d10f      	bne.n	80126c8 <HAL_TIM_OC_Stop_IT+0x120>
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	6a1a      	ldr	r2, [r3, #32]
 80126ae:	f240 4344 	movw	r3, #1092	@ 0x444
 80126b2:	4013      	ands	r3, r2
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d107      	bne.n	80126c8 <HAL_TIM_OC_Stop_IT+0x120>
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80126c6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	6a1a      	ldr	r2, [r3, #32]
 80126ce:	f241 1311 	movw	r3, #4369	@ 0x1111
 80126d2:	4013      	ands	r3, r2
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d10f      	bne.n	80126f8 <HAL_TIM_OC_Stop_IT+0x150>
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	6a1a      	ldr	r2, [r3, #32]
 80126de:	f240 4344 	movw	r3, #1092	@ 0x444
 80126e2:	4013      	ands	r3, r2
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d107      	bne.n	80126f8 <HAL_TIM_OC_Stop_IT+0x150>
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	681a      	ldr	r2, [r3, #0]
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	f022 0201 	bic.w	r2, r2, #1
 80126f6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d104      	bne.n	8012708 <HAL_TIM_OC_Stop_IT+0x160>
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	2201      	movs	r2, #1
 8012702:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012706:	e023      	b.n	8012750 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	2b04      	cmp	r3, #4
 801270c:	d104      	bne.n	8012718 <HAL_TIM_OC_Stop_IT+0x170>
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	2201      	movs	r2, #1
 8012712:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012716:	e01b      	b.n	8012750 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012718:	683b      	ldr	r3, [r7, #0]
 801271a:	2b08      	cmp	r3, #8
 801271c:	d104      	bne.n	8012728 <HAL_TIM_OC_Stop_IT+0x180>
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	2201      	movs	r2, #1
 8012722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012726:	e013      	b.n	8012750 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	2b0c      	cmp	r3, #12
 801272c:	d104      	bne.n	8012738 <HAL_TIM_OC_Stop_IT+0x190>
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	2201      	movs	r2, #1
 8012732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012736:	e00b      	b.n	8012750 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012738:	683b      	ldr	r3, [r7, #0]
 801273a:	2b10      	cmp	r3, #16
 801273c:	d104      	bne.n	8012748 <HAL_TIM_OC_Stop_IT+0x1a0>
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	2201      	movs	r2, #1
 8012742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012746:	e003      	b.n	8012750 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	2201      	movs	r2, #1
 801274c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8012750:	7bfb      	ldrb	r3, [r7, #15]
}
 8012752:	4618      	mov	r0, r3
 8012754:	3710      	adds	r7, #16
 8012756:	46bd      	mov	sp, r7
 8012758:	bd80      	pop	{r7, pc}
 801275a:	bf00      	nop
 801275c:	40012c00 	.word	0x40012c00
 8012760:	40013400 	.word	0x40013400
 8012764:	40014000 	.word	0x40014000
 8012768:	40014400 	.word	0x40014400
 801276c:	40014800 	.word	0x40014800

08012770 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b082      	sub	sp, #8
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d101      	bne.n	8012782 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801277e:	2301      	movs	r3, #1
 8012780:	e049      	b.n	8012816 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012788:	b2db      	uxtb	r3, r3
 801278a:	2b00      	cmp	r3, #0
 801278c:	d106      	bne.n	801279c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	2200      	movs	r2, #0
 8012792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012796:	6878      	ldr	r0, [r7, #4]
 8012798:	f000 f841 	bl	801281e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2202      	movs	r2, #2
 80127a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	681a      	ldr	r2, [r3, #0]
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	3304      	adds	r3, #4
 80127ac:	4619      	mov	r1, r3
 80127ae:	4610      	mov	r0, r2
 80127b0:	f000 ff72 	bl	8013698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	2201      	movs	r2, #1
 80127b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	2201      	movs	r2, #1
 80127c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	2201      	movs	r2, #1
 80127c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	2201      	movs	r2, #1
 80127d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	2201      	movs	r2, #1
 80127d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	2201      	movs	r2, #1
 80127e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	2201      	movs	r2, #1
 80127e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	2201      	movs	r2, #1
 80127f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	2201      	movs	r2, #1
 80127f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	2201      	movs	r2, #1
 8012800:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	2201      	movs	r2, #1
 8012808:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	2201      	movs	r2, #1
 8012810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012814:	2300      	movs	r3, #0
}
 8012816:	4618      	mov	r0, r3
 8012818:	3708      	adds	r7, #8
 801281a:	46bd      	mov	sp, r7
 801281c:	bd80      	pop	{r7, pc}

0801281e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801281e:	b480      	push	{r7}
 8012820:	b083      	sub	sp, #12
 8012822:	af00      	add	r7, sp, #0
 8012824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8012826:	bf00      	nop
 8012828:	370c      	adds	r7, #12
 801282a:	46bd      	mov	sp, r7
 801282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012830:	4770      	bx	lr
	...

08012834 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b084      	sub	sp, #16
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
 801283c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801283e:	683b      	ldr	r3, [r7, #0]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d109      	bne.n	8012858 <HAL_TIM_PWM_Start+0x24>
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801284a:	b2db      	uxtb	r3, r3
 801284c:	2b01      	cmp	r3, #1
 801284e:	bf14      	ite	ne
 8012850:	2301      	movne	r3, #1
 8012852:	2300      	moveq	r3, #0
 8012854:	b2db      	uxtb	r3, r3
 8012856:	e03c      	b.n	80128d2 <HAL_TIM_PWM_Start+0x9e>
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	2b04      	cmp	r3, #4
 801285c:	d109      	bne.n	8012872 <HAL_TIM_PWM_Start+0x3e>
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8012864:	b2db      	uxtb	r3, r3
 8012866:	2b01      	cmp	r3, #1
 8012868:	bf14      	ite	ne
 801286a:	2301      	movne	r3, #1
 801286c:	2300      	moveq	r3, #0
 801286e:	b2db      	uxtb	r3, r3
 8012870:	e02f      	b.n	80128d2 <HAL_TIM_PWM_Start+0x9e>
 8012872:	683b      	ldr	r3, [r7, #0]
 8012874:	2b08      	cmp	r3, #8
 8012876:	d109      	bne.n	801288c <HAL_TIM_PWM_Start+0x58>
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801287e:	b2db      	uxtb	r3, r3
 8012880:	2b01      	cmp	r3, #1
 8012882:	bf14      	ite	ne
 8012884:	2301      	movne	r3, #1
 8012886:	2300      	moveq	r3, #0
 8012888:	b2db      	uxtb	r3, r3
 801288a:	e022      	b.n	80128d2 <HAL_TIM_PWM_Start+0x9e>
 801288c:	683b      	ldr	r3, [r7, #0]
 801288e:	2b0c      	cmp	r3, #12
 8012890:	d109      	bne.n	80128a6 <HAL_TIM_PWM_Start+0x72>
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012898:	b2db      	uxtb	r3, r3
 801289a:	2b01      	cmp	r3, #1
 801289c:	bf14      	ite	ne
 801289e:	2301      	movne	r3, #1
 80128a0:	2300      	moveq	r3, #0
 80128a2:	b2db      	uxtb	r3, r3
 80128a4:	e015      	b.n	80128d2 <HAL_TIM_PWM_Start+0x9e>
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	2b10      	cmp	r3, #16
 80128aa:	d109      	bne.n	80128c0 <HAL_TIM_PWM_Start+0x8c>
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80128b2:	b2db      	uxtb	r3, r3
 80128b4:	2b01      	cmp	r3, #1
 80128b6:	bf14      	ite	ne
 80128b8:	2301      	movne	r3, #1
 80128ba:	2300      	moveq	r3, #0
 80128bc:	b2db      	uxtb	r3, r3
 80128be:	e008      	b.n	80128d2 <HAL_TIM_PWM_Start+0x9e>
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80128c6:	b2db      	uxtb	r3, r3
 80128c8:	2b01      	cmp	r3, #1
 80128ca:	bf14      	ite	ne
 80128cc:	2301      	movne	r3, #1
 80128ce:	2300      	moveq	r3, #0
 80128d0:	b2db      	uxtb	r3, r3
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d001      	beq.n	80128da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80128d6:	2301      	movs	r3, #1
 80128d8:	e09c      	b.n	8012a14 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80128da:	683b      	ldr	r3, [r7, #0]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d104      	bne.n	80128ea <HAL_TIM_PWM_Start+0xb6>
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	2202      	movs	r2, #2
 80128e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80128e8:	e023      	b.n	8012932 <HAL_TIM_PWM_Start+0xfe>
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	2b04      	cmp	r3, #4
 80128ee:	d104      	bne.n	80128fa <HAL_TIM_PWM_Start+0xc6>
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	2202      	movs	r2, #2
 80128f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80128f8:	e01b      	b.n	8012932 <HAL_TIM_PWM_Start+0xfe>
 80128fa:	683b      	ldr	r3, [r7, #0]
 80128fc:	2b08      	cmp	r3, #8
 80128fe:	d104      	bne.n	801290a <HAL_TIM_PWM_Start+0xd6>
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	2202      	movs	r2, #2
 8012904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012908:	e013      	b.n	8012932 <HAL_TIM_PWM_Start+0xfe>
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	2b0c      	cmp	r3, #12
 801290e:	d104      	bne.n	801291a <HAL_TIM_PWM_Start+0xe6>
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	2202      	movs	r2, #2
 8012914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012918:	e00b      	b.n	8012932 <HAL_TIM_PWM_Start+0xfe>
 801291a:	683b      	ldr	r3, [r7, #0]
 801291c:	2b10      	cmp	r3, #16
 801291e:	d104      	bne.n	801292a <HAL_TIM_PWM_Start+0xf6>
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	2202      	movs	r2, #2
 8012924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012928:	e003      	b.n	8012932 <HAL_TIM_PWM_Start+0xfe>
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	2202      	movs	r2, #2
 801292e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	2201      	movs	r2, #1
 8012938:	6839      	ldr	r1, [r7, #0]
 801293a:	4618      	mov	r0, r3
 801293c:	f001 fc7a 	bl	8014234 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	4a35      	ldr	r2, [pc, #212]	@ (8012a1c <HAL_TIM_PWM_Start+0x1e8>)
 8012946:	4293      	cmp	r3, r2
 8012948:	d013      	beq.n	8012972 <HAL_TIM_PWM_Start+0x13e>
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	4a34      	ldr	r2, [pc, #208]	@ (8012a20 <HAL_TIM_PWM_Start+0x1ec>)
 8012950:	4293      	cmp	r3, r2
 8012952:	d00e      	beq.n	8012972 <HAL_TIM_PWM_Start+0x13e>
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	4a32      	ldr	r2, [pc, #200]	@ (8012a24 <HAL_TIM_PWM_Start+0x1f0>)
 801295a:	4293      	cmp	r3, r2
 801295c:	d009      	beq.n	8012972 <HAL_TIM_PWM_Start+0x13e>
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	4a31      	ldr	r2, [pc, #196]	@ (8012a28 <HAL_TIM_PWM_Start+0x1f4>)
 8012964:	4293      	cmp	r3, r2
 8012966:	d004      	beq.n	8012972 <HAL_TIM_PWM_Start+0x13e>
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	4a2f      	ldr	r2, [pc, #188]	@ (8012a2c <HAL_TIM_PWM_Start+0x1f8>)
 801296e:	4293      	cmp	r3, r2
 8012970:	d101      	bne.n	8012976 <HAL_TIM_PWM_Start+0x142>
 8012972:	2301      	movs	r3, #1
 8012974:	e000      	b.n	8012978 <HAL_TIM_PWM_Start+0x144>
 8012976:	2300      	movs	r3, #0
 8012978:	2b00      	cmp	r3, #0
 801297a:	d007      	beq.n	801298c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801298a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	4a22      	ldr	r2, [pc, #136]	@ (8012a1c <HAL_TIM_PWM_Start+0x1e8>)
 8012992:	4293      	cmp	r3, r2
 8012994:	d01d      	beq.n	80129d2 <HAL_TIM_PWM_Start+0x19e>
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801299e:	d018      	beq.n	80129d2 <HAL_TIM_PWM_Start+0x19e>
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	4a22      	ldr	r2, [pc, #136]	@ (8012a30 <HAL_TIM_PWM_Start+0x1fc>)
 80129a6:	4293      	cmp	r3, r2
 80129a8:	d013      	beq.n	80129d2 <HAL_TIM_PWM_Start+0x19e>
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	4a21      	ldr	r2, [pc, #132]	@ (8012a34 <HAL_TIM_PWM_Start+0x200>)
 80129b0:	4293      	cmp	r3, r2
 80129b2:	d00e      	beq.n	80129d2 <HAL_TIM_PWM_Start+0x19e>
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	4a1f      	ldr	r2, [pc, #124]	@ (8012a38 <HAL_TIM_PWM_Start+0x204>)
 80129ba:	4293      	cmp	r3, r2
 80129bc:	d009      	beq.n	80129d2 <HAL_TIM_PWM_Start+0x19e>
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	4a17      	ldr	r2, [pc, #92]	@ (8012a20 <HAL_TIM_PWM_Start+0x1ec>)
 80129c4:	4293      	cmp	r3, r2
 80129c6:	d004      	beq.n	80129d2 <HAL_TIM_PWM_Start+0x19e>
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	4a15      	ldr	r2, [pc, #84]	@ (8012a24 <HAL_TIM_PWM_Start+0x1f0>)
 80129ce:	4293      	cmp	r3, r2
 80129d0:	d115      	bne.n	80129fe <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	689a      	ldr	r2, [r3, #8]
 80129d8:	4b18      	ldr	r3, [pc, #96]	@ (8012a3c <HAL_TIM_PWM_Start+0x208>)
 80129da:	4013      	ands	r3, r2
 80129dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	2b06      	cmp	r3, #6
 80129e2:	d015      	beq.n	8012a10 <HAL_TIM_PWM_Start+0x1dc>
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80129ea:	d011      	beq.n	8012a10 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	681a      	ldr	r2, [r3, #0]
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	f042 0201 	orr.w	r2, r2, #1
 80129fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80129fc:	e008      	b.n	8012a10 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	681a      	ldr	r2, [r3, #0]
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	f042 0201 	orr.w	r2, r2, #1
 8012a0c:	601a      	str	r2, [r3, #0]
 8012a0e:	e000      	b.n	8012a12 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a10:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012a12:	2300      	movs	r3, #0
}
 8012a14:	4618      	mov	r0, r3
 8012a16:	3710      	adds	r7, #16
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	bd80      	pop	{r7, pc}
 8012a1c:	40012c00 	.word	0x40012c00
 8012a20:	40013400 	.word	0x40013400
 8012a24:	40014000 	.word	0x40014000
 8012a28:	40014400 	.word	0x40014400
 8012a2c:	40014800 	.word	0x40014800
 8012a30:	40000400 	.word	0x40000400
 8012a34:	40000800 	.word	0x40000800
 8012a38:	40000c00 	.word	0x40000c00
 8012a3c:	00010007 	.word	0x00010007

08012a40 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b082      	sub	sp, #8
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
 8012a48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	2200      	movs	r2, #0
 8012a50:	6839      	ldr	r1, [r7, #0]
 8012a52:	4618      	mov	r0, r3
 8012a54:	f001 fbee 	bl	8014234 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	4a3e      	ldr	r2, [pc, #248]	@ (8012b58 <HAL_TIM_PWM_Stop+0x118>)
 8012a5e:	4293      	cmp	r3, r2
 8012a60:	d013      	beq.n	8012a8a <HAL_TIM_PWM_Stop+0x4a>
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	4a3d      	ldr	r2, [pc, #244]	@ (8012b5c <HAL_TIM_PWM_Stop+0x11c>)
 8012a68:	4293      	cmp	r3, r2
 8012a6a:	d00e      	beq.n	8012a8a <HAL_TIM_PWM_Stop+0x4a>
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	4a3b      	ldr	r2, [pc, #236]	@ (8012b60 <HAL_TIM_PWM_Stop+0x120>)
 8012a72:	4293      	cmp	r3, r2
 8012a74:	d009      	beq.n	8012a8a <HAL_TIM_PWM_Stop+0x4a>
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	4a3a      	ldr	r2, [pc, #232]	@ (8012b64 <HAL_TIM_PWM_Stop+0x124>)
 8012a7c:	4293      	cmp	r3, r2
 8012a7e:	d004      	beq.n	8012a8a <HAL_TIM_PWM_Stop+0x4a>
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	4a38      	ldr	r2, [pc, #224]	@ (8012b68 <HAL_TIM_PWM_Stop+0x128>)
 8012a86:	4293      	cmp	r3, r2
 8012a88:	d101      	bne.n	8012a8e <HAL_TIM_PWM_Stop+0x4e>
 8012a8a:	2301      	movs	r3, #1
 8012a8c:	e000      	b.n	8012a90 <HAL_TIM_PWM_Stop+0x50>
 8012a8e:	2300      	movs	r3, #0
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d017      	beq.n	8012ac4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	6a1a      	ldr	r2, [r3, #32]
 8012a9a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012a9e:	4013      	ands	r3, r2
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d10f      	bne.n	8012ac4 <HAL_TIM_PWM_Stop+0x84>
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	6a1a      	ldr	r2, [r3, #32]
 8012aaa:	f240 4344 	movw	r3, #1092	@ 0x444
 8012aae:	4013      	ands	r3, r2
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d107      	bne.n	8012ac4 <HAL_TIM_PWM_Stop+0x84>
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8012ac2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	6a1a      	ldr	r2, [r3, #32]
 8012aca:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012ace:	4013      	ands	r3, r2
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d10f      	bne.n	8012af4 <HAL_TIM_PWM_Stop+0xb4>
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	6a1a      	ldr	r2, [r3, #32]
 8012ada:	f240 4344 	movw	r3, #1092	@ 0x444
 8012ade:	4013      	ands	r3, r2
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d107      	bne.n	8012af4 <HAL_TIM_PWM_Stop+0xb4>
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	681a      	ldr	r2, [r3, #0]
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	f022 0201 	bic.w	r2, r2, #1
 8012af2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012af4:	683b      	ldr	r3, [r7, #0]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d104      	bne.n	8012b04 <HAL_TIM_PWM_Stop+0xc4>
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	2201      	movs	r2, #1
 8012afe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012b02:	e023      	b.n	8012b4c <HAL_TIM_PWM_Stop+0x10c>
 8012b04:	683b      	ldr	r3, [r7, #0]
 8012b06:	2b04      	cmp	r3, #4
 8012b08:	d104      	bne.n	8012b14 <HAL_TIM_PWM_Stop+0xd4>
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	2201      	movs	r2, #1
 8012b0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012b12:	e01b      	b.n	8012b4c <HAL_TIM_PWM_Stop+0x10c>
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	2b08      	cmp	r3, #8
 8012b18:	d104      	bne.n	8012b24 <HAL_TIM_PWM_Stop+0xe4>
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	2201      	movs	r2, #1
 8012b1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012b22:	e013      	b.n	8012b4c <HAL_TIM_PWM_Stop+0x10c>
 8012b24:	683b      	ldr	r3, [r7, #0]
 8012b26:	2b0c      	cmp	r3, #12
 8012b28:	d104      	bne.n	8012b34 <HAL_TIM_PWM_Stop+0xf4>
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	2201      	movs	r2, #1
 8012b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012b32:	e00b      	b.n	8012b4c <HAL_TIM_PWM_Stop+0x10c>
 8012b34:	683b      	ldr	r3, [r7, #0]
 8012b36:	2b10      	cmp	r3, #16
 8012b38:	d104      	bne.n	8012b44 <HAL_TIM_PWM_Stop+0x104>
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	2201      	movs	r2, #1
 8012b3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012b42:	e003      	b.n	8012b4c <HAL_TIM_PWM_Stop+0x10c>
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2201      	movs	r2, #1
 8012b48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8012b4c:	2300      	movs	r3, #0
}
 8012b4e:	4618      	mov	r0, r3
 8012b50:	3708      	adds	r7, #8
 8012b52:	46bd      	mov	sp, r7
 8012b54:	bd80      	pop	{r7, pc}
 8012b56:	bf00      	nop
 8012b58:	40012c00 	.word	0x40012c00
 8012b5c:	40013400 	.word	0x40013400
 8012b60:	40014000 	.word	0x40014000
 8012b64:	40014400 	.word	0x40014400
 8012b68:	40014800 	.word	0x40014800

08012b6c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b082      	sub	sp, #8
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d101      	bne.n	8012b7e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8012b7a:	2301      	movs	r3, #1
 8012b7c:	e049      	b.n	8012c12 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012b84:	b2db      	uxtb	r3, r3
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d106      	bne.n	8012b98 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8012b92:	6878      	ldr	r0, [r7, #4]
 8012b94:	f7f4 fcb4 	bl	8007500 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	2202      	movs	r2, #2
 8012b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	681a      	ldr	r2, [r3, #0]
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	3304      	adds	r3, #4
 8012ba8:	4619      	mov	r1, r3
 8012baa:	4610      	mov	r0, r2
 8012bac:	f000 fd74 	bl	8013698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	2201      	movs	r2, #1
 8012bb4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	2201      	movs	r2, #1
 8012bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	2201      	movs	r2, #1
 8012bc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	2201      	movs	r2, #1
 8012bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	2201      	movs	r2, #1
 8012bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	2201      	movs	r2, #1
 8012bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	2201      	movs	r2, #1
 8012be4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	2201      	movs	r2, #1
 8012bec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	2201      	movs	r2, #1
 8012bf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	2201      	movs	r2, #1
 8012bfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	2201      	movs	r2, #1
 8012c04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	2201      	movs	r2, #1
 8012c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012c10:	2300      	movs	r3, #0
}
 8012c12:	4618      	mov	r0, r3
 8012c14:	3708      	adds	r7, #8
 8012c16:	46bd      	mov	sp, r7
 8012c18:	bd80      	pop	{r7, pc}
	...

08012c1c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b084      	sub	sp, #16
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	6078      	str	r0, [r7, #4]
 8012c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012c26:	2300      	movs	r3, #0
 8012c28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d104      	bne.n	8012c3a <HAL_TIM_IC_Start_IT+0x1e>
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012c36:	b2db      	uxtb	r3, r3
 8012c38:	e023      	b.n	8012c82 <HAL_TIM_IC_Start_IT+0x66>
 8012c3a:	683b      	ldr	r3, [r7, #0]
 8012c3c:	2b04      	cmp	r3, #4
 8012c3e:	d104      	bne.n	8012c4a <HAL_TIM_IC_Start_IT+0x2e>
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8012c46:	b2db      	uxtb	r3, r3
 8012c48:	e01b      	b.n	8012c82 <HAL_TIM_IC_Start_IT+0x66>
 8012c4a:	683b      	ldr	r3, [r7, #0]
 8012c4c:	2b08      	cmp	r3, #8
 8012c4e:	d104      	bne.n	8012c5a <HAL_TIM_IC_Start_IT+0x3e>
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012c56:	b2db      	uxtb	r3, r3
 8012c58:	e013      	b.n	8012c82 <HAL_TIM_IC_Start_IT+0x66>
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	2b0c      	cmp	r3, #12
 8012c5e:	d104      	bne.n	8012c6a <HAL_TIM_IC_Start_IT+0x4e>
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012c66:	b2db      	uxtb	r3, r3
 8012c68:	e00b      	b.n	8012c82 <HAL_TIM_IC_Start_IT+0x66>
 8012c6a:	683b      	ldr	r3, [r7, #0]
 8012c6c:	2b10      	cmp	r3, #16
 8012c6e:	d104      	bne.n	8012c7a <HAL_TIM_IC_Start_IT+0x5e>
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012c76:	b2db      	uxtb	r3, r3
 8012c78:	e003      	b.n	8012c82 <HAL_TIM_IC_Start_IT+0x66>
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012c80:	b2db      	uxtb	r3, r3
 8012c82:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8012c84:	683b      	ldr	r3, [r7, #0]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d104      	bne.n	8012c94 <HAL_TIM_IC_Start_IT+0x78>
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012c90:	b2db      	uxtb	r3, r3
 8012c92:	e013      	b.n	8012cbc <HAL_TIM_IC_Start_IT+0xa0>
 8012c94:	683b      	ldr	r3, [r7, #0]
 8012c96:	2b04      	cmp	r3, #4
 8012c98:	d104      	bne.n	8012ca4 <HAL_TIM_IC_Start_IT+0x88>
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012ca0:	b2db      	uxtb	r3, r3
 8012ca2:	e00b      	b.n	8012cbc <HAL_TIM_IC_Start_IT+0xa0>
 8012ca4:	683b      	ldr	r3, [r7, #0]
 8012ca6:	2b08      	cmp	r3, #8
 8012ca8:	d104      	bne.n	8012cb4 <HAL_TIM_IC_Start_IT+0x98>
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8012cb0:	b2db      	uxtb	r3, r3
 8012cb2:	e003      	b.n	8012cbc <HAL_TIM_IC_Start_IT+0xa0>
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8012cba:	b2db      	uxtb	r3, r3
 8012cbc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8012cbe:	7bbb      	ldrb	r3, [r7, #14]
 8012cc0:	2b01      	cmp	r3, #1
 8012cc2:	d102      	bne.n	8012cca <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8012cc4:	7b7b      	ldrb	r3, [r7, #13]
 8012cc6:	2b01      	cmp	r3, #1
 8012cc8:	d001      	beq.n	8012cce <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8012cca:	2301      	movs	r3, #1
 8012ccc:	e0dd      	b.n	8012e8a <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012cce:	683b      	ldr	r3, [r7, #0]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d104      	bne.n	8012cde <HAL_TIM_IC_Start_IT+0xc2>
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	2202      	movs	r2, #2
 8012cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012cdc:	e023      	b.n	8012d26 <HAL_TIM_IC_Start_IT+0x10a>
 8012cde:	683b      	ldr	r3, [r7, #0]
 8012ce0:	2b04      	cmp	r3, #4
 8012ce2:	d104      	bne.n	8012cee <HAL_TIM_IC_Start_IT+0xd2>
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	2202      	movs	r2, #2
 8012ce8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012cec:	e01b      	b.n	8012d26 <HAL_TIM_IC_Start_IT+0x10a>
 8012cee:	683b      	ldr	r3, [r7, #0]
 8012cf0:	2b08      	cmp	r3, #8
 8012cf2:	d104      	bne.n	8012cfe <HAL_TIM_IC_Start_IT+0xe2>
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2202      	movs	r2, #2
 8012cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012cfc:	e013      	b.n	8012d26 <HAL_TIM_IC_Start_IT+0x10a>
 8012cfe:	683b      	ldr	r3, [r7, #0]
 8012d00:	2b0c      	cmp	r3, #12
 8012d02:	d104      	bne.n	8012d0e <HAL_TIM_IC_Start_IT+0xf2>
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	2202      	movs	r2, #2
 8012d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012d0c:	e00b      	b.n	8012d26 <HAL_TIM_IC_Start_IT+0x10a>
 8012d0e:	683b      	ldr	r3, [r7, #0]
 8012d10:	2b10      	cmp	r3, #16
 8012d12:	d104      	bne.n	8012d1e <HAL_TIM_IC_Start_IT+0x102>
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2202      	movs	r2, #2
 8012d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012d1c:	e003      	b.n	8012d26 <HAL_TIM_IC_Start_IT+0x10a>
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	2202      	movs	r2, #2
 8012d22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d104      	bne.n	8012d36 <HAL_TIM_IC_Start_IT+0x11a>
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	2202      	movs	r2, #2
 8012d30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012d34:	e013      	b.n	8012d5e <HAL_TIM_IC_Start_IT+0x142>
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	2b04      	cmp	r3, #4
 8012d3a:	d104      	bne.n	8012d46 <HAL_TIM_IC_Start_IT+0x12a>
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2202      	movs	r2, #2
 8012d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012d44:	e00b      	b.n	8012d5e <HAL_TIM_IC_Start_IT+0x142>
 8012d46:	683b      	ldr	r3, [r7, #0]
 8012d48:	2b08      	cmp	r3, #8
 8012d4a:	d104      	bne.n	8012d56 <HAL_TIM_IC_Start_IT+0x13a>
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	2202      	movs	r2, #2
 8012d50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012d54:	e003      	b.n	8012d5e <HAL_TIM_IC_Start_IT+0x142>
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	2202      	movs	r2, #2
 8012d5a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8012d5e:	683b      	ldr	r3, [r7, #0]
 8012d60:	2b0c      	cmp	r3, #12
 8012d62:	d841      	bhi.n	8012de8 <HAL_TIM_IC_Start_IT+0x1cc>
 8012d64:	a201      	add	r2, pc, #4	@ (adr r2, 8012d6c <HAL_TIM_IC_Start_IT+0x150>)
 8012d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d6a:	bf00      	nop
 8012d6c:	08012da1 	.word	0x08012da1
 8012d70:	08012de9 	.word	0x08012de9
 8012d74:	08012de9 	.word	0x08012de9
 8012d78:	08012de9 	.word	0x08012de9
 8012d7c:	08012db3 	.word	0x08012db3
 8012d80:	08012de9 	.word	0x08012de9
 8012d84:	08012de9 	.word	0x08012de9
 8012d88:	08012de9 	.word	0x08012de9
 8012d8c:	08012dc5 	.word	0x08012dc5
 8012d90:	08012de9 	.word	0x08012de9
 8012d94:	08012de9 	.word	0x08012de9
 8012d98:	08012de9 	.word	0x08012de9
 8012d9c:	08012dd7 	.word	0x08012dd7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	68da      	ldr	r2, [r3, #12]
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	f042 0202 	orr.w	r2, r2, #2
 8012dae:	60da      	str	r2, [r3, #12]
      break;
 8012db0:	e01d      	b.n	8012dee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	68da      	ldr	r2, [r3, #12]
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	f042 0204 	orr.w	r2, r2, #4
 8012dc0:	60da      	str	r2, [r3, #12]
      break;
 8012dc2:	e014      	b.n	8012dee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	68da      	ldr	r2, [r3, #12]
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	f042 0208 	orr.w	r2, r2, #8
 8012dd2:	60da      	str	r2, [r3, #12]
      break;
 8012dd4:	e00b      	b.n	8012dee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	68da      	ldr	r2, [r3, #12]
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	f042 0210 	orr.w	r2, r2, #16
 8012de4:	60da      	str	r2, [r3, #12]
      break;
 8012de6:	e002      	b.n	8012dee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8012de8:	2301      	movs	r3, #1
 8012dea:	73fb      	strb	r3, [r7, #15]
      break;
 8012dec:	bf00      	nop
  }

  if (status == HAL_OK)
 8012dee:	7bfb      	ldrb	r3, [r7, #15]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d149      	bne.n	8012e88 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	2201      	movs	r2, #1
 8012dfa:	6839      	ldr	r1, [r7, #0]
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	f001 fa19 	bl	8014234 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	4a23      	ldr	r2, [pc, #140]	@ (8012e94 <HAL_TIM_IC_Start_IT+0x278>)
 8012e08:	4293      	cmp	r3, r2
 8012e0a:	d01d      	beq.n	8012e48 <HAL_TIM_IC_Start_IT+0x22c>
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012e14:	d018      	beq.n	8012e48 <HAL_TIM_IC_Start_IT+0x22c>
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	4a1f      	ldr	r2, [pc, #124]	@ (8012e98 <HAL_TIM_IC_Start_IT+0x27c>)
 8012e1c:	4293      	cmp	r3, r2
 8012e1e:	d013      	beq.n	8012e48 <HAL_TIM_IC_Start_IT+0x22c>
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	4a1d      	ldr	r2, [pc, #116]	@ (8012e9c <HAL_TIM_IC_Start_IT+0x280>)
 8012e26:	4293      	cmp	r3, r2
 8012e28:	d00e      	beq.n	8012e48 <HAL_TIM_IC_Start_IT+0x22c>
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	4a1c      	ldr	r2, [pc, #112]	@ (8012ea0 <HAL_TIM_IC_Start_IT+0x284>)
 8012e30:	4293      	cmp	r3, r2
 8012e32:	d009      	beq.n	8012e48 <HAL_TIM_IC_Start_IT+0x22c>
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	4a1a      	ldr	r2, [pc, #104]	@ (8012ea4 <HAL_TIM_IC_Start_IT+0x288>)
 8012e3a:	4293      	cmp	r3, r2
 8012e3c:	d004      	beq.n	8012e48 <HAL_TIM_IC_Start_IT+0x22c>
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	4a19      	ldr	r2, [pc, #100]	@ (8012ea8 <HAL_TIM_IC_Start_IT+0x28c>)
 8012e44:	4293      	cmp	r3, r2
 8012e46:	d115      	bne.n	8012e74 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	689a      	ldr	r2, [r3, #8]
 8012e4e:	4b17      	ldr	r3, [pc, #92]	@ (8012eac <HAL_TIM_IC_Start_IT+0x290>)
 8012e50:	4013      	ands	r3, r2
 8012e52:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e54:	68bb      	ldr	r3, [r7, #8]
 8012e56:	2b06      	cmp	r3, #6
 8012e58:	d015      	beq.n	8012e86 <HAL_TIM_IC_Start_IT+0x26a>
 8012e5a:	68bb      	ldr	r3, [r7, #8]
 8012e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012e60:	d011      	beq.n	8012e86 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	681a      	ldr	r2, [r3, #0]
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	f042 0201 	orr.w	r2, r2, #1
 8012e70:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e72:	e008      	b.n	8012e86 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	681a      	ldr	r2, [r3, #0]
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	f042 0201 	orr.w	r2, r2, #1
 8012e82:	601a      	str	r2, [r3, #0]
 8012e84:	e000      	b.n	8012e88 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e86:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	3710      	adds	r7, #16
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	bd80      	pop	{r7, pc}
 8012e92:	bf00      	nop
 8012e94:	40012c00 	.word	0x40012c00
 8012e98:	40000400 	.word	0x40000400
 8012e9c:	40000800 	.word	0x40000800
 8012ea0:	40000c00 	.word	0x40000c00
 8012ea4:	40013400 	.word	0x40013400
 8012ea8:	40014000 	.word	0x40014000
 8012eac:	00010007 	.word	0x00010007

08012eb0 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b084      	sub	sp, #16
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
 8012eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012eba:	2300      	movs	r3, #0
 8012ebc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8012ebe:	683b      	ldr	r3, [r7, #0]
 8012ec0:	2b0c      	cmp	r3, #12
 8012ec2:	d841      	bhi.n	8012f48 <HAL_TIM_IC_Stop_IT+0x98>
 8012ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8012ecc <HAL_TIM_IC_Stop_IT+0x1c>)
 8012ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012eca:	bf00      	nop
 8012ecc:	08012f01 	.word	0x08012f01
 8012ed0:	08012f49 	.word	0x08012f49
 8012ed4:	08012f49 	.word	0x08012f49
 8012ed8:	08012f49 	.word	0x08012f49
 8012edc:	08012f13 	.word	0x08012f13
 8012ee0:	08012f49 	.word	0x08012f49
 8012ee4:	08012f49 	.word	0x08012f49
 8012ee8:	08012f49 	.word	0x08012f49
 8012eec:	08012f25 	.word	0x08012f25
 8012ef0:	08012f49 	.word	0x08012f49
 8012ef4:	08012f49 	.word	0x08012f49
 8012ef8:	08012f49 	.word	0x08012f49
 8012efc:	08012f37 	.word	0x08012f37
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	68da      	ldr	r2, [r3, #12]
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	f022 0202 	bic.w	r2, r2, #2
 8012f0e:	60da      	str	r2, [r3, #12]
      break;
 8012f10:	e01d      	b.n	8012f4e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	68da      	ldr	r2, [r3, #12]
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	f022 0204 	bic.w	r2, r2, #4
 8012f20:	60da      	str	r2, [r3, #12]
      break;
 8012f22:	e014      	b.n	8012f4e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	68da      	ldr	r2, [r3, #12]
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	f022 0208 	bic.w	r2, r2, #8
 8012f32:	60da      	str	r2, [r3, #12]
      break;
 8012f34:	e00b      	b.n	8012f4e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	68da      	ldr	r2, [r3, #12]
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	f022 0210 	bic.w	r2, r2, #16
 8012f44:	60da      	str	r2, [r3, #12]
      break;
 8012f46:	e002      	b.n	8012f4e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8012f48:	2301      	movs	r3, #1
 8012f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8012f4c:	bf00      	nop
  }

  if (status == HAL_OK)
 8012f4e:	7bfb      	ldrb	r3, [r7, #15]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d166      	bne.n	8013022 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	2200      	movs	r2, #0
 8012f5a:	6839      	ldr	r1, [r7, #0]
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	f001 f969 	bl	8014234 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	6a1a      	ldr	r2, [r3, #32]
 8012f68:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012f6c:	4013      	ands	r3, r2
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d10f      	bne.n	8012f92 <HAL_TIM_IC_Stop_IT+0xe2>
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	6a1a      	ldr	r2, [r3, #32]
 8012f78:	f240 4344 	movw	r3, #1092	@ 0x444
 8012f7c:	4013      	ands	r3, r2
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d107      	bne.n	8012f92 <HAL_TIM_IC_Stop_IT+0xe2>
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	681a      	ldr	r2, [r3, #0]
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	f022 0201 	bic.w	r2, r2, #1
 8012f90:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012f92:	683b      	ldr	r3, [r7, #0]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d104      	bne.n	8012fa2 <HAL_TIM_IC_Stop_IT+0xf2>
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	2201      	movs	r2, #1
 8012f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012fa0:	e023      	b.n	8012fea <HAL_TIM_IC_Stop_IT+0x13a>
 8012fa2:	683b      	ldr	r3, [r7, #0]
 8012fa4:	2b04      	cmp	r3, #4
 8012fa6:	d104      	bne.n	8012fb2 <HAL_TIM_IC_Stop_IT+0x102>
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	2201      	movs	r2, #1
 8012fac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012fb0:	e01b      	b.n	8012fea <HAL_TIM_IC_Stop_IT+0x13a>
 8012fb2:	683b      	ldr	r3, [r7, #0]
 8012fb4:	2b08      	cmp	r3, #8
 8012fb6:	d104      	bne.n	8012fc2 <HAL_TIM_IC_Stop_IT+0x112>
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	2201      	movs	r2, #1
 8012fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012fc0:	e013      	b.n	8012fea <HAL_TIM_IC_Stop_IT+0x13a>
 8012fc2:	683b      	ldr	r3, [r7, #0]
 8012fc4:	2b0c      	cmp	r3, #12
 8012fc6:	d104      	bne.n	8012fd2 <HAL_TIM_IC_Stop_IT+0x122>
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	2201      	movs	r2, #1
 8012fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012fd0:	e00b      	b.n	8012fea <HAL_TIM_IC_Stop_IT+0x13a>
 8012fd2:	683b      	ldr	r3, [r7, #0]
 8012fd4:	2b10      	cmp	r3, #16
 8012fd6:	d104      	bne.n	8012fe2 <HAL_TIM_IC_Stop_IT+0x132>
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	2201      	movs	r2, #1
 8012fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012fe0:	e003      	b.n	8012fea <HAL_TIM_IC_Stop_IT+0x13a>
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	2201      	movs	r2, #1
 8012fe6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012fea:	683b      	ldr	r3, [r7, #0]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d104      	bne.n	8012ffa <HAL_TIM_IC_Stop_IT+0x14a>
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	2201      	movs	r2, #1
 8012ff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012ff8:	e013      	b.n	8013022 <HAL_TIM_IC_Stop_IT+0x172>
 8012ffa:	683b      	ldr	r3, [r7, #0]
 8012ffc:	2b04      	cmp	r3, #4
 8012ffe:	d104      	bne.n	801300a <HAL_TIM_IC_Stop_IT+0x15a>
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	2201      	movs	r2, #1
 8013004:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013008:	e00b      	b.n	8013022 <HAL_TIM_IC_Stop_IT+0x172>
 801300a:	683b      	ldr	r3, [r7, #0]
 801300c:	2b08      	cmp	r3, #8
 801300e:	d104      	bne.n	801301a <HAL_TIM_IC_Stop_IT+0x16a>
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	2201      	movs	r2, #1
 8013014:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8013018:	e003      	b.n	8013022 <HAL_TIM_IC_Stop_IT+0x172>
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	2201      	movs	r2, #1
 801301e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 8013022:	7bfb      	ldrb	r3, [r7, #15]
}
 8013024:	4618      	mov	r0, r3
 8013026:	3710      	adds	r7, #16
 8013028:	46bd      	mov	sp, r7
 801302a:	bd80      	pop	{r7, pc}

0801302c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 801302c:	b580      	push	{r7, lr}
 801302e:	b086      	sub	sp, #24
 8013030:	af00      	add	r7, sp, #0
 8013032:	60f8      	str	r0, [r7, #12]
 8013034:	60b9      	str	r1, [r7, #8]
 8013036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013038:	2300      	movs	r3, #0
 801303a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013042:	2b01      	cmp	r3, #1
 8013044:	d101      	bne.n	801304a <HAL_TIM_OC_ConfigChannel+0x1e>
 8013046:	2302      	movs	r3, #2
 8013048:	e066      	b.n	8013118 <HAL_TIM_OC_ConfigChannel+0xec>
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	2201      	movs	r2, #1
 801304e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	2b14      	cmp	r3, #20
 8013056:	d857      	bhi.n	8013108 <HAL_TIM_OC_ConfigChannel+0xdc>
 8013058:	a201      	add	r2, pc, #4	@ (adr r2, 8013060 <HAL_TIM_OC_ConfigChannel+0x34>)
 801305a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801305e:	bf00      	nop
 8013060:	080130b5 	.word	0x080130b5
 8013064:	08013109 	.word	0x08013109
 8013068:	08013109 	.word	0x08013109
 801306c:	08013109 	.word	0x08013109
 8013070:	080130c3 	.word	0x080130c3
 8013074:	08013109 	.word	0x08013109
 8013078:	08013109 	.word	0x08013109
 801307c:	08013109 	.word	0x08013109
 8013080:	080130d1 	.word	0x080130d1
 8013084:	08013109 	.word	0x08013109
 8013088:	08013109 	.word	0x08013109
 801308c:	08013109 	.word	0x08013109
 8013090:	080130df 	.word	0x080130df
 8013094:	08013109 	.word	0x08013109
 8013098:	08013109 	.word	0x08013109
 801309c:	08013109 	.word	0x08013109
 80130a0:	080130ed 	.word	0x080130ed
 80130a4:	08013109 	.word	0x08013109
 80130a8:	08013109 	.word	0x08013109
 80130ac:	08013109 	.word	0x08013109
 80130b0:	080130fb 	.word	0x080130fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	68b9      	ldr	r1, [r7, #8]
 80130ba:	4618      	mov	r0, r3
 80130bc:	f000 fb92 	bl	80137e4 <TIM_OC1_SetConfig>
      break;
 80130c0:	e025      	b.n	801310e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	68b9      	ldr	r1, [r7, #8]
 80130c8:	4618      	mov	r0, r3
 80130ca:	f000 fc1b 	bl	8013904 <TIM_OC2_SetConfig>
      break;
 80130ce:	e01e      	b.n	801310e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	68b9      	ldr	r1, [r7, #8]
 80130d6:	4618      	mov	r0, r3
 80130d8:	f000 fc9e 	bl	8013a18 <TIM_OC3_SetConfig>
      break;
 80130dc:	e017      	b.n	801310e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	68b9      	ldr	r1, [r7, #8]
 80130e4:	4618      	mov	r0, r3
 80130e6:	f000 fd1f 	bl	8013b28 <TIM_OC4_SetConfig>
      break;
 80130ea:	e010      	b.n	801310e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	68b9      	ldr	r1, [r7, #8]
 80130f2:	4618      	mov	r0, r3
 80130f4:	f000 fd82 	bl	8013bfc <TIM_OC5_SetConfig>
      break;
 80130f8:	e009      	b.n	801310e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	68b9      	ldr	r1, [r7, #8]
 8013100:	4618      	mov	r0, r3
 8013102:	f000 fddf 	bl	8013cc4 <TIM_OC6_SetConfig>
      break;
 8013106:	e002      	b.n	801310e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8013108:	2301      	movs	r3, #1
 801310a:	75fb      	strb	r3, [r7, #23]
      break;
 801310c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	2200      	movs	r2, #0
 8013112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8013116:	7dfb      	ldrb	r3, [r7, #23]
}
 8013118:	4618      	mov	r0, r3
 801311a:	3718      	adds	r7, #24
 801311c:	46bd      	mov	sp, r7
 801311e:	bd80      	pop	{r7, pc}

08013120 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8013120:	b580      	push	{r7, lr}
 8013122:	b086      	sub	sp, #24
 8013124:	af00      	add	r7, sp, #0
 8013126:	60f8      	str	r0, [r7, #12]
 8013128:	60b9      	str	r1, [r7, #8]
 801312a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801312c:	2300      	movs	r3, #0
 801312e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013136:	2b01      	cmp	r3, #1
 8013138:	d101      	bne.n	801313e <HAL_TIM_IC_ConfigChannel+0x1e>
 801313a:	2302      	movs	r3, #2
 801313c:	e088      	b.n	8013250 <HAL_TIM_IC_ConfigChannel+0x130>
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	2201      	movs	r2, #1
 8013142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d11b      	bne.n	8013184 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8013150:	68bb      	ldr	r3, [r7, #8]
 8013152:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8013154:	68bb      	ldr	r3, [r7, #8]
 8013156:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8013158:	68bb      	ldr	r3, [r7, #8]
 801315a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 801315c:	f000 feac 	bl	8013eb8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	699a      	ldr	r2, [r3, #24]
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	f022 020c 	bic.w	r2, r2, #12
 801316e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	6999      	ldr	r1, [r3, #24]
 8013176:	68bb      	ldr	r3, [r7, #8]
 8013178:	689a      	ldr	r2, [r3, #8]
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	430a      	orrs	r2, r1
 8013180:	619a      	str	r2, [r3, #24]
 8013182:	e060      	b.n	8013246 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	2b04      	cmp	r3, #4
 8013188:	d11c      	bne.n	80131c4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801318e:	68bb      	ldr	r3, [r7, #8]
 8013190:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8013192:	68bb      	ldr	r3, [r7, #8]
 8013194:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8013196:	68bb      	ldr	r3, [r7, #8]
 8013198:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 801319a:	f000 ff2a 	bl	8013ff2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	699a      	ldr	r2, [r3, #24]
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80131ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	6999      	ldr	r1, [r3, #24]
 80131b4:	68bb      	ldr	r3, [r7, #8]
 80131b6:	689b      	ldr	r3, [r3, #8]
 80131b8:	021a      	lsls	r2, r3, #8
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	430a      	orrs	r2, r1
 80131c0:	619a      	str	r2, [r3, #24]
 80131c2:	e040      	b.n	8013246 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	2b08      	cmp	r3, #8
 80131c8:	d11b      	bne.n	8013202 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80131ce:	68bb      	ldr	r3, [r7, #8]
 80131d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80131d2:	68bb      	ldr	r3, [r7, #8]
 80131d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80131d6:	68bb      	ldr	r3, [r7, #8]
 80131d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80131da:	f000 ff77 	bl	80140cc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	69da      	ldr	r2, [r3, #28]
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	f022 020c 	bic.w	r2, r2, #12
 80131ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	69d9      	ldr	r1, [r3, #28]
 80131f4:	68bb      	ldr	r3, [r7, #8]
 80131f6:	689a      	ldr	r2, [r3, #8]
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	430a      	orrs	r2, r1
 80131fe:	61da      	str	r2, [r3, #28]
 8013200:	e021      	b.n	8013246 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	2b0c      	cmp	r3, #12
 8013206:	d11c      	bne.n	8013242 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801320c:	68bb      	ldr	r3, [r7, #8]
 801320e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8013210:	68bb      	ldr	r3, [r7, #8]
 8013212:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8013214:	68bb      	ldr	r3, [r7, #8]
 8013216:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8013218:	f000 ff94 	bl	8014144 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	69da      	ldr	r2, [r3, #28]
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 801322a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	69d9      	ldr	r1, [r3, #28]
 8013232:	68bb      	ldr	r3, [r7, #8]
 8013234:	689b      	ldr	r3, [r3, #8]
 8013236:	021a      	lsls	r2, r3, #8
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	430a      	orrs	r2, r1
 801323e:	61da      	str	r2, [r3, #28]
 8013240:	e001      	b.n	8013246 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8013242:	2301      	movs	r3, #1
 8013244:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	2200      	movs	r2, #0
 801324a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801324e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013250:	4618      	mov	r0, r3
 8013252:	3718      	adds	r7, #24
 8013254:	46bd      	mov	sp, r7
 8013256:	bd80      	pop	{r7, pc}

08013258 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8013258:	b580      	push	{r7, lr}
 801325a:	b086      	sub	sp, #24
 801325c:	af00      	add	r7, sp, #0
 801325e:	60f8      	str	r0, [r7, #12]
 8013260:	60b9      	str	r1, [r7, #8]
 8013262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013264:	2300      	movs	r3, #0
 8013266:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801326e:	2b01      	cmp	r3, #1
 8013270:	d101      	bne.n	8013276 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8013272:	2302      	movs	r3, #2
 8013274:	e0ff      	b.n	8013476 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	2201      	movs	r2, #1
 801327a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	2b14      	cmp	r3, #20
 8013282:	f200 80f0 	bhi.w	8013466 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8013286:	a201      	add	r2, pc, #4	@ (adr r2, 801328c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8013288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801328c:	080132e1 	.word	0x080132e1
 8013290:	08013467 	.word	0x08013467
 8013294:	08013467 	.word	0x08013467
 8013298:	08013467 	.word	0x08013467
 801329c:	08013321 	.word	0x08013321
 80132a0:	08013467 	.word	0x08013467
 80132a4:	08013467 	.word	0x08013467
 80132a8:	08013467 	.word	0x08013467
 80132ac:	08013363 	.word	0x08013363
 80132b0:	08013467 	.word	0x08013467
 80132b4:	08013467 	.word	0x08013467
 80132b8:	08013467 	.word	0x08013467
 80132bc:	080133a3 	.word	0x080133a3
 80132c0:	08013467 	.word	0x08013467
 80132c4:	08013467 	.word	0x08013467
 80132c8:	08013467 	.word	0x08013467
 80132cc:	080133e5 	.word	0x080133e5
 80132d0:	08013467 	.word	0x08013467
 80132d4:	08013467 	.word	0x08013467
 80132d8:	08013467 	.word	0x08013467
 80132dc:	08013425 	.word	0x08013425
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	68b9      	ldr	r1, [r7, #8]
 80132e6:	4618      	mov	r0, r3
 80132e8:	f000 fa7c 	bl	80137e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	699a      	ldr	r2, [r3, #24]
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	f042 0208 	orr.w	r2, r2, #8
 80132fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	699a      	ldr	r2, [r3, #24]
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	f022 0204 	bic.w	r2, r2, #4
 801330a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	6999      	ldr	r1, [r3, #24]
 8013312:	68bb      	ldr	r3, [r7, #8]
 8013314:	691a      	ldr	r2, [r3, #16]
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	430a      	orrs	r2, r1
 801331c:	619a      	str	r2, [r3, #24]
      break;
 801331e:	e0a5      	b.n	801346c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	68b9      	ldr	r1, [r7, #8]
 8013326:	4618      	mov	r0, r3
 8013328:	f000 faec 	bl	8013904 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	699a      	ldr	r2, [r3, #24]
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801333a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	699a      	ldr	r2, [r3, #24]
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801334a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	6999      	ldr	r1, [r3, #24]
 8013352:	68bb      	ldr	r3, [r7, #8]
 8013354:	691b      	ldr	r3, [r3, #16]
 8013356:	021a      	lsls	r2, r3, #8
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	430a      	orrs	r2, r1
 801335e:	619a      	str	r2, [r3, #24]
      break;
 8013360:	e084      	b.n	801346c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	68b9      	ldr	r1, [r7, #8]
 8013368:	4618      	mov	r0, r3
 801336a:	f000 fb55 	bl	8013a18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	69da      	ldr	r2, [r3, #28]
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	f042 0208 	orr.w	r2, r2, #8
 801337c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	69da      	ldr	r2, [r3, #28]
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	f022 0204 	bic.w	r2, r2, #4
 801338c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	69d9      	ldr	r1, [r3, #28]
 8013394:	68bb      	ldr	r3, [r7, #8]
 8013396:	691a      	ldr	r2, [r3, #16]
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	430a      	orrs	r2, r1
 801339e:	61da      	str	r2, [r3, #28]
      break;
 80133a0:	e064      	b.n	801346c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	68b9      	ldr	r1, [r7, #8]
 80133a8:	4618      	mov	r0, r3
 80133aa:	f000 fbbd 	bl	8013b28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	69da      	ldr	r2, [r3, #28]
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80133bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	69da      	ldr	r2, [r3, #28]
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80133cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	69d9      	ldr	r1, [r3, #28]
 80133d4:	68bb      	ldr	r3, [r7, #8]
 80133d6:	691b      	ldr	r3, [r3, #16]
 80133d8:	021a      	lsls	r2, r3, #8
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	430a      	orrs	r2, r1
 80133e0:	61da      	str	r2, [r3, #28]
      break;
 80133e2:	e043      	b.n	801346c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	68b9      	ldr	r1, [r7, #8]
 80133ea:	4618      	mov	r0, r3
 80133ec:	f000 fc06 	bl	8013bfc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	f042 0208 	orr.w	r2, r2, #8
 80133fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	f022 0204 	bic.w	r2, r2, #4
 801340e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8013416:	68bb      	ldr	r3, [r7, #8]
 8013418:	691a      	ldr	r2, [r3, #16]
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	430a      	orrs	r2, r1
 8013420:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8013422:	e023      	b.n	801346c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	68b9      	ldr	r1, [r7, #8]
 801342a:	4618      	mov	r0, r3
 801342c:	f000 fc4a 	bl	8013cc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801343e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801344e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8013456:	68bb      	ldr	r3, [r7, #8]
 8013458:	691b      	ldr	r3, [r3, #16]
 801345a:	021a      	lsls	r2, r3, #8
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	430a      	orrs	r2, r1
 8013462:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8013464:	e002      	b.n	801346c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8013466:	2301      	movs	r3, #1
 8013468:	75fb      	strb	r3, [r7, #23]
      break;
 801346a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	2200      	movs	r2, #0
 8013470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8013474:	7dfb      	ldrb	r3, [r7, #23]
}
 8013476:	4618      	mov	r0, r3
 8013478:	3718      	adds	r7, #24
 801347a:	46bd      	mov	sp, r7
 801347c:	bd80      	pop	{r7, pc}
 801347e:	bf00      	nop

08013480 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b084      	sub	sp, #16
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
 8013488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801348a:	2300      	movs	r3, #0
 801348c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013494:	2b01      	cmp	r3, #1
 8013496:	d101      	bne.n	801349c <HAL_TIM_ConfigClockSource+0x1c>
 8013498:	2302      	movs	r3, #2
 801349a:	e0b6      	b.n	801360a <HAL_TIM_ConfigClockSource+0x18a>
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	2201      	movs	r2, #1
 80134a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	2202      	movs	r2, #2
 80134a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	689b      	ldr	r3, [r3, #8]
 80134b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80134b4:	68bb      	ldr	r3, [r7, #8]
 80134b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80134ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80134be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80134c0:	68bb      	ldr	r3, [r7, #8]
 80134c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80134c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	68ba      	ldr	r2, [r7, #8]
 80134ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80134d0:	683b      	ldr	r3, [r7, #0]
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80134d8:	d03e      	beq.n	8013558 <HAL_TIM_ConfigClockSource+0xd8>
 80134da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80134de:	f200 8087 	bhi.w	80135f0 <HAL_TIM_ConfigClockSource+0x170>
 80134e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80134e6:	f000 8086 	beq.w	80135f6 <HAL_TIM_ConfigClockSource+0x176>
 80134ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80134ee:	d87f      	bhi.n	80135f0 <HAL_TIM_ConfigClockSource+0x170>
 80134f0:	2b70      	cmp	r3, #112	@ 0x70
 80134f2:	d01a      	beq.n	801352a <HAL_TIM_ConfigClockSource+0xaa>
 80134f4:	2b70      	cmp	r3, #112	@ 0x70
 80134f6:	d87b      	bhi.n	80135f0 <HAL_TIM_ConfigClockSource+0x170>
 80134f8:	2b60      	cmp	r3, #96	@ 0x60
 80134fa:	d050      	beq.n	801359e <HAL_TIM_ConfigClockSource+0x11e>
 80134fc:	2b60      	cmp	r3, #96	@ 0x60
 80134fe:	d877      	bhi.n	80135f0 <HAL_TIM_ConfigClockSource+0x170>
 8013500:	2b50      	cmp	r3, #80	@ 0x50
 8013502:	d03c      	beq.n	801357e <HAL_TIM_ConfigClockSource+0xfe>
 8013504:	2b50      	cmp	r3, #80	@ 0x50
 8013506:	d873      	bhi.n	80135f0 <HAL_TIM_ConfigClockSource+0x170>
 8013508:	2b40      	cmp	r3, #64	@ 0x40
 801350a:	d058      	beq.n	80135be <HAL_TIM_ConfigClockSource+0x13e>
 801350c:	2b40      	cmp	r3, #64	@ 0x40
 801350e:	d86f      	bhi.n	80135f0 <HAL_TIM_ConfigClockSource+0x170>
 8013510:	2b30      	cmp	r3, #48	@ 0x30
 8013512:	d064      	beq.n	80135de <HAL_TIM_ConfigClockSource+0x15e>
 8013514:	2b30      	cmp	r3, #48	@ 0x30
 8013516:	d86b      	bhi.n	80135f0 <HAL_TIM_ConfigClockSource+0x170>
 8013518:	2b20      	cmp	r3, #32
 801351a:	d060      	beq.n	80135de <HAL_TIM_ConfigClockSource+0x15e>
 801351c:	2b20      	cmp	r3, #32
 801351e:	d867      	bhi.n	80135f0 <HAL_TIM_ConfigClockSource+0x170>
 8013520:	2b00      	cmp	r3, #0
 8013522:	d05c      	beq.n	80135de <HAL_TIM_ConfigClockSource+0x15e>
 8013524:	2b10      	cmp	r3, #16
 8013526:	d05a      	beq.n	80135de <HAL_TIM_ConfigClockSource+0x15e>
 8013528:	e062      	b.n	80135f0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801352e:	683b      	ldr	r3, [r7, #0]
 8013530:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8013532:	683b      	ldr	r3, [r7, #0]
 8013534:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801353a:	f000 fe5b 	bl	80141f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	689b      	ldr	r3, [r3, #8]
 8013544:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013546:	68bb      	ldr	r3, [r7, #8]
 8013548:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801354c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	68ba      	ldr	r2, [r7, #8]
 8013554:	609a      	str	r2, [r3, #8]
      break;
 8013556:	e04f      	b.n	80135f8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801355c:	683b      	ldr	r3, [r7, #0]
 801355e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8013560:	683b      	ldr	r3, [r7, #0]
 8013562:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8013564:	683b      	ldr	r3, [r7, #0]
 8013566:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8013568:	f000 fe44 	bl	80141f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	689a      	ldr	r2, [r3, #8]
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801357a:	609a      	str	r2, [r3, #8]
      break;
 801357c:	e03c      	b.n	80135f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013582:	683b      	ldr	r3, [r7, #0]
 8013584:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013586:	683b      	ldr	r3, [r7, #0]
 8013588:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801358a:	461a      	mov	r2, r3
 801358c:	f000 fd02 	bl	8013f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	2150      	movs	r1, #80	@ 0x50
 8013596:	4618      	mov	r0, r3
 8013598:	f000 fe11 	bl	80141be <TIM_ITRx_SetConfig>
      break;
 801359c:	e02c      	b.n	80135f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80135aa:	461a      	mov	r2, r3
 80135ac:	f000 fd5e 	bl	801406c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	2160      	movs	r1, #96	@ 0x60
 80135b6:	4618      	mov	r0, r3
 80135b8:	f000 fe01 	bl	80141be <TIM_ITRx_SetConfig>
      break;
 80135bc:	e01c      	b.n	80135f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80135c2:	683b      	ldr	r3, [r7, #0]
 80135c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80135c6:	683b      	ldr	r3, [r7, #0]
 80135c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80135ca:	461a      	mov	r2, r3
 80135cc:	f000 fce2 	bl	8013f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	2140      	movs	r1, #64	@ 0x40
 80135d6:	4618      	mov	r0, r3
 80135d8:	f000 fdf1 	bl	80141be <TIM_ITRx_SetConfig>
      break;
 80135dc:	e00c      	b.n	80135f8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	681a      	ldr	r2, [r3, #0]
 80135e2:	683b      	ldr	r3, [r7, #0]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	4619      	mov	r1, r3
 80135e8:	4610      	mov	r0, r2
 80135ea:	f000 fde8 	bl	80141be <TIM_ITRx_SetConfig>
      break;
 80135ee:	e003      	b.n	80135f8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80135f0:	2301      	movs	r3, #1
 80135f2:	73fb      	strb	r3, [r7, #15]
      break;
 80135f4:	e000      	b.n	80135f8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80135f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	2201      	movs	r2, #1
 80135fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	2200      	movs	r2, #0
 8013604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8013608:	7bfb      	ldrb	r3, [r7, #15]
}
 801360a:	4618      	mov	r0, r3
 801360c:	3710      	adds	r7, #16
 801360e:	46bd      	mov	sp, r7
 8013610:	bd80      	pop	{r7, pc}

08013612 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8013612:	b580      	push	{r7, lr}
 8013614:	b082      	sub	sp, #8
 8013616:	af00      	add	r7, sp, #0
 8013618:	6078      	str	r0, [r7, #4]
 801361a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013622:	2b01      	cmp	r3, #1
 8013624:	d101      	bne.n	801362a <HAL_TIM_SlaveConfigSynchro+0x18>
 8013626:	2302      	movs	r3, #2
 8013628:	e031      	b.n	801368e <HAL_TIM_SlaveConfigSynchro+0x7c>
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	2201      	movs	r2, #1
 801362e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	2202      	movs	r2, #2
 8013636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 801363a:	6839      	ldr	r1, [r7, #0]
 801363c:	6878      	ldr	r0, [r7, #4]
 801363e:	f000 fba7 	bl	8013d90 <TIM_SlaveTimer_SetConfig>
 8013642:	4603      	mov	r3, r0
 8013644:	2b00      	cmp	r3, #0
 8013646:	d009      	beq.n	801365c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	2201      	movs	r2, #1
 801364c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	2200      	movs	r2, #0
 8013654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8013658:	2301      	movs	r3, #1
 801365a:	e018      	b.n	801368e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	68da      	ldr	r2, [r3, #12]
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801366a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	68da      	ldr	r2, [r3, #12]
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801367a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	2201      	movs	r2, #1
 8013680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	2200      	movs	r2, #0
 8013688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801368c:	2300      	movs	r3, #0
}
 801368e:	4618      	mov	r0, r3
 8013690:	3708      	adds	r7, #8
 8013692:	46bd      	mov	sp, r7
 8013694:	bd80      	pop	{r7, pc}
	...

08013698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013698:	b480      	push	{r7}
 801369a:	b085      	sub	sp, #20
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
 80136a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	4a46      	ldr	r2, [pc, #280]	@ (80137c4 <TIM_Base_SetConfig+0x12c>)
 80136ac:	4293      	cmp	r3, r2
 80136ae:	d013      	beq.n	80136d8 <TIM_Base_SetConfig+0x40>
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80136b6:	d00f      	beq.n	80136d8 <TIM_Base_SetConfig+0x40>
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	4a43      	ldr	r2, [pc, #268]	@ (80137c8 <TIM_Base_SetConfig+0x130>)
 80136bc:	4293      	cmp	r3, r2
 80136be:	d00b      	beq.n	80136d8 <TIM_Base_SetConfig+0x40>
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	4a42      	ldr	r2, [pc, #264]	@ (80137cc <TIM_Base_SetConfig+0x134>)
 80136c4:	4293      	cmp	r3, r2
 80136c6:	d007      	beq.n	80136d8 <TIM_Base_SetConfig+0x40>
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	4a41      	ldr	r2, [pc, #260]	@ (80137d0 <TIM_Base_SetConfig+0x138>)
 80136cc:	4293      	cmp	r3, r2
 80136ce:	d003      	beq.n	80136d8 <TIM_Base_SetConfig+0x40>
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	4a40      	ldr	r2, [pc, #256]	@ (80137d4 <TIM_Base_SetConfig+0x13c>)
 80136d4:	4293      	cmp	r3, r2
 80136d6:	d108      	bne.n	80136ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80136de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80136e0:	683b      	ldr	r3, [r7, #0]
 80136e2:	685b      	ldr	r3, [r3, #4]
 80136e4:	68fa      	ldr	r2, [r7, #12]
 80136e6:	4313      	orrs	r3, r2
 80136e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	4a35      	ldr	r2, [pc, #212]	@ (80137c4 <TIM_Base_SetConfig+0x12c>)
 80136ee:	4293      	cmp	r3, r2
 80136f0:	d01f      	beq.n	8013732 <TIM_Base_SetConfig+0x9a>
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80136f8:	d01b      	beq.n	8013732 <TIM_Base_SetConfig+0x9a>
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	4a32      	ldr	r2, [pc, #200]	@ (80137c8 <TIM_Base_SetConfig+0x130>)
 80136fe:	4293      	cmp	r3, r2
 8013700:	d017      	beq.n	8013732 <TIM_Base_SetConfig+0x9a>
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	4a31      	ldr	r2, [pc, #196]	@ (80137cc <TIM_Base_SetConfig+0x134>)
 8013706:	4293      	cmp	r3, r2
 8013708:	d013      	beq.n	8013732 <TIM_Base_SetConfig+0x9a>
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	4a30      	ldr	r2, [pc, #192]	@ (80137d0 <TIM_Base_SetConfig+0x138>)
 801370e:	4293      	cmp	r3, r2
 8013710:	d00f      	beq.n	8013732 <TIM_Base_SetConfig+0x9a>
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	4a2f      	ldr	r2, [pc, #188]	@ (80137d4 <TIM_Base_SetConfig+0x13c>)
 8013716:	4293      	cmp	r3, r2
 8013718:	d00b      	beq.n	8013732 <TIM_Base_SetConfig+0x9a>
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	4a2e      	ldr	r2, [pc, #184]	@ (80137d8 <TIM_Base_SetConfig+0x140>)
 801371e:	4293      	cmp	r3, r2
 8013720:	d007      	beq.n	8013732 <TIM_Base_SetConfig+0x9a>
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	4a2d      	ldr	r2, [pc, #180]	@ (80137dc <TIM_Base_SetConfig+0x144>)
 8013726:	4293      	cmp	r3, r2
 8013728:	d003      	beq.n	8013732 <TIM_Base_SetConfig+0x9a>
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	4a2c      	ldr	r2, [pc, #176]	@ (80137e0 <TIM_Base_SetConfig+0x148>)
 801372e:	4293      	cmp	r3, r2
 8013730:	d108      	bne.n	8013744 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801373a:	683b      	ldr	r3, [r7, #0]
 801373c:	68db      	ldr	r3, [r3, #12]
 801373e:	68fa      	ldr	r2, [r7, #12]
 8013740:	4313      	orrs	r3, r2
 8013742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801374a:	683b      	ldr	r3, [r7, #0]
 801374c:	695b      	ldr	r3, [r3, #20]
 801374e:	4313      	orrs	r3, r2
 8013750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	68fa      	ldr	r2, [r7, #12]
 8013756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013758:	683b      	ldr	r3, [r7, #0]
 801375a:	689a      	ldr	r2, [r3, #8]
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013760:	683b      	ldr	r3, [r7, #0]
 8013762:	681a      	ldr	r2, [r3, #0]
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	4a16      	ldr	r2, [pc, #88]	@ (80137c4 <TIM_Base_SetConfig+0x12c>)
 801376c:	4293      	cmp	r3, r2
 801376e:	d00f      	beq.n	8013790 <TIM_Base_SetConfig+0xf8>
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	4a18      	ldr	r2, [pc, #96]	@ (80137d4 <TIM_Base_SetConfig+0x13c>)
 8013774:	4293      	cmp	r3, r2
 8013776:	d00b      	beq.n	8013790 <TIM_Base_SetConfig+0xf8>
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	4a17      	ldr	r2, [pc, #92]	@ (80137d8 <TIM_Base_SetConfig+0x140>)
 801377c:	4293      	cmp	r3, r2
 801377e:	d007      	beq.n	8013790 <TIM_Base_SetConfig+0xf8>
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	4a16      	ldr	r2, [pc, #88]	@ (80137dc <TIM_Base_SetConfig+0x144>)
 8013784:	4293      	cmp	r3, r2
 8013786:	d003      	beq.n	8013790 <TIM_Base_SetConfig+0xf8>
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	4a15      	ldr	r2, [pc, #84]	@ (80137e0 <TIM_Base_SetConfig+0x148>)
 801378c:	4293      	cmp	r3, r2
 801378e:	d103      	bne.n	8013798 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013790:	683b      	ldr	r3, [r7, #0]
 8013792:	691a      	ldr	r2, [r3, #16]
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	2201      	movs	r2, #1
 801379c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	691b      	ldr	r3, [r3, #16]
 80137a2:	f003 0301 	and.w	r3, r3, #1
 80137a6:	2b01      	cmp	r3, #1
 80137a8:	d105      	bne.n	80137b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	691b      	ldr	r3, [r3, #16]
 80137ae:	f023 0201 	bic.w	r2, r3, #1
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	611a      	str	r2, [r3, #16]
  }
}
 80137b6:	bf00      	nop
 80137b8:	3714      	adds	r7, #20
 80137ba:	46bd      	mov	sp, r7
 80137bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c0:	4770      	bx	lr
 80137c2:	bf00      	nop
 80137c4:	40012c00 	.word	0x40012c00
 80137c8:	40000400 	.word	0x40000400
 80137cc:	40000800 	.word	0x40000800
 80137d0:	40000c00 	.word	0x40000c00
 80137d4:	40013400 	.word	0x40013400
 80137d8:	40014000 	.word	0x40014000
 80137dc:	40014400 	.word	0x40014400
 80137e0:	40014800 	.word	0x40014800

080137e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80137e4:	b480      	push	{r7}
 80137e6:	b087      	sub	sp, #28
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	6078      	str	r0, [r7, #4]
 80137ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	6a1b      	ldr	r3, [r3, #32]
 80137f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	6a1b      	ldr	r3, [r3, #32]
 80137f8:	f023 0201 	bic.w	r2, r3, #1
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	685b      	ldr	r3, [r3, #4]
 8013804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	699b      	ldr	r3, [r3, #24]
 801380a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	f023 0303 	bic.w	r3, r3, #3
 801381e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013820:	683b      	ldr	r3, [r7, #0]
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	68fa      	ldr	r2, [r7, #12]
 8013826:	4313      	orrs	r3, r2
 8013828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801382a:	697b      	ldr	r3, [r7, #20]
 801382c:	f023 0302 	bic.w	r3, r3, #2
 8013830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013832:	683b      	ldr	r3, [r7, #0]
 8013834:	689b      	ldr	r3, [r3, #8]
 8013836:	697a      	ldr	r2, [r7, #20]
 8013838:	4313      	orrs	r3, r2
 801383a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	4a2c      	ldr	r2, [pc, #176]	@ (80138f0 <TIM_OC1_SetConfig+0x10c>)
 8013840:	4293      	cmp	r3, r2
 8013842:	d00f      	beq.n	8013864 <TIM_OC1_SetConfig+0x80>
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	4a2b      	ldr	r2, [pc, #172]	@ (80138f4 <TIM_OC1_SetConfig+0x110>)
 8013848:	4293      	cmp	r3, r2
 801384a:	d00b      	beq.n	8013864 <TIM_OC1_SetConfig+0x80>
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	4a2a      	ldr	r2, [pc, #168]	@ (80138f8 <TIM_OC1_SetConfig+0x114>)
 8013850:	4293      	cmp	r3, r2
 8013852:	d007      	beq.n	8013864 <TIM_OC1_SetConfig+0x80>
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	4a29      	ldr	r2, [pc, #164]	@ (80138fc <TIM_OC1_SetConfig+0x118>)
 8013858:	4293      	cmp	r3, r2
 801385a:	d003      	beq.n	8013864 <TIM_OC1_SetConfig+0x80>
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	4a28      	ldr	r2, [pc, #160]	@ (8013900 <TIM_OC1_SetConfig+0x11c>)
 8013860:	4293      	cmp	r3, r2
 8013862:	d10c      	bne.n	801387e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013864:	697b      	ldr	r3, [r7, #20]
 8013866:	f023 0308 	bic.w	r3, r3, #8
 801386a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801386c:	683b      	ldr	r3, [r7, #0]
 801386e:	68db      	ldr	r3, [r3, #12]
 8013870:	697a      	ldr	r2, [r7, #20]
 8013872:	4313      	orrs	r3, r2
 8013874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013876:	697b      	ldr	r3, [r7, #20]
 8013878:	f023 0304 	bic.w	r3, r3, #4
 801387c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	4a1b      	ldr	r2, [pc, #108]	@ (80138f0 <TIM_OC1_SetConfig+0x10c>)
 8013882:	4293      	cmp	r3, r2
 8013884:	d00f      	beq.n	80138a6 <TIM_OC1_SetConfig+0xc2>
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	4a1a      	ldr	r2, [pc, #104]	@ (80138f4 <TIM_OC1_SetConfig+0x110>)
 801388a:	4293      	cmp	r3, r2
 801388c:	d00b      	beq.n	80138a6 <TIM_OC1_SetConfig+0xc2>
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	4a19      	ldr	r2, [pc, #100]	@ (80138f8 <TIM_OC1_SetConfig+0x114>)
 8013892:	4293      	cmp	r3, r2
 8013894:	d007      	beq.n	80138a6 <TIM_OC1_SetConfig+0xc2>
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	4a18      	ldr	r2, [pc, #96]	@ (80138fc <TIM_OC1_SetConfig+0x118>)
 801389a:	4293      	cmp	r3, r2
 801389c:	d003      	beq.n	80138a6 <TIM_OC1_SetConfig+0xc2>
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	4a17      	ldr	r2, [pc, #92]	@ (8013900 <TIM_OC1_SetConfig+0x11c>)
 80138a2:	4293      	cmp	r3, r2
 80138a4:	d111      	bne.n	80138ca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80138a6:	693b      	ldr	r3, [r7, #16]
 80138a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80138ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80138ae:	693b      	ldr	r3, [r7, #16]
 80138b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80138b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80138b6:	683b      	ldr	r3, [r7, #0]
 80138b8:	695b      	ldr	r3, [r3, #20]
 80138ba:	693a      	ldr	r2, [r7, #16]
 80138bc:	4313      	orrs	r3, r2
 80138be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80138c0:	683b      	ldr	r3, [r7, #0]
 80138c2:	699b      	ldr	r3, [r3, #24]
 80138c4:	693a      	ldr	r2, [r7, #16]
 80138c6:	4313      	orrs	r3, r2
 80138c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	693a      	ldr	r2, [r7, #16]
 80138ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	68fa      	ldr	r2, [r7, #12]
 80138d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80138d6:	683b      	ldr	r3, [r7, #0]
 80138d8:	685a      	ldr	r2, [r3, #4]
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	697a      	ldr	r2, [r7, #20]
 80138e2:	621a      	str	r2, [r3, #32]
}
 80138e4:	bf00      	nop
 80138e6:	371c      	adds	r7, #28
 80138e8:	46bd      	mov	sp, r7
 80138ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ee:	4770      	bx	lr
 80138f0:	40012c00 	.word	0x40012c00
 80138f4:	40013400 	.word	0x40013400
 80138f8:	40014000 	.word	0x40014000
 80138fc:	40014400 	.word	0x40014400
 8013900:	40014800 	.word	0x40014800

08013904 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013904:	b480      	push	{r7}
 8013906:	b087      	sub	sp, #28
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
 801390c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	6a1b      	ldr	r3, [r3, #32]
 8013912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	6a1b      	ldr	r3, [r3, #32]
 8013918:	f023 0210 	bic.w	r2, r3, #16
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	685b      	ldr	r3, [r3, #4]
 8013924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	699b      	ldr	r3, [r3, #24]
 801392a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8013932:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801393e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013940:	683b      	ldr	r3, [r7, #0]
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	021b      	lsls	r3, r3, #8
 8013946:	68fa      	ldr	r2, [r7, #12]
 8013948:	4313      	orrs	r3, r2
 801394a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801394c:	697b      	ldr	r3, [r7, #20]
 801394e:	f023 0320 	bic.w	r3, r3, #32
 8013952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013954:	683b      	ldr	r3, [r7, #0]
 8013956:	689b      	ldr	r3, [r3, #8]
 8013958:	011b      	lsls	r3, r3, #4
 801395a:	697a      	ldr	r2, [r7, #20]
 801395c:	4313      	orrs	r3, r2
 801395e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	4a28      	ldr	r2, [pc, #160]	@ (8013a04 <TIM_OC2_SetConfig+0x100>)
 8013964:	4293      	cmp	r3, r2
 8013966:	d003      	beq.n	8013970 <TIM_OC2_SetConfig+0x6c>
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	4a27      	ldr	r2, [pc, #156]	@ (8013a08 <TIM_OC2_SetConfig+0x104>)
 801396c:	4293      	cmp	r3, r2
 801396e:	d10d      	bne.n	801398c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013970:	697b      	ldr	r3, [r7, #20]
 8013972:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013978:	683b      	ldr	r3, [r7, #0]
 801397a:	68db      	ldr	r3, [r3, #12]
 801397c:	011b      	lsls	r3, r3, #4
 801397e:	697a      	ldr	r2, [r7, #20]
 8013980:	4313      	orrs	r3, r2
 8013982:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013984:	697b      	ldr	r3, [r7, #20]
 8013986:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801398a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	4a1d      	ldr	r2, [pc, #116]	@ (8013a04 <TIM_OC2_SetConfig+0x100>)
 8013990:	4293      	cmp	r3, r2
 8013992:	d00f      	beq.n	80139b4 <TIM_OC2_SetConfig+0xb0>
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	4a1c      	ldr	r2, [pc, #112]	@ (8013a08 <TIM_OC2_SetConfig+0x104>)
 8013998:	4293      	cmp	r3, r2
 801399a:	d00b      	beq.n	80139b4 <TIM_OC2_SetConfig+0xb0>
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	4a1b      	ldr	r2, [pc, #108]	@ (8013a0c <TIM_OC2_SetConfig+0x108>)
 80139a0:	4293      	cmp	r3, r2
 80139a2:	d007      	beq.n	80139b4 <TIM_OC2_SetConfig+0xb0>
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	4a1a      	ldr	r2, [pc, #104]	@ (8013a10 <TIM_OC2_SetConfig+0x10c>)
 80139a8:	4293      	cmp	r3, r2
 80139aa:	d003      	beq.n	80139b4 <TIM_OC2_SetConfig+0xb0>
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	4a19      	ldr	r2, [pc, #100]	@ (8013a14 <TIM_OC2_SetConfig+0x110>)
 80139b0:	4293      	cmp	r3, r2
 80139b2:	d113      	bne.n	80139dc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80139b4:	693b      	ldr	r3, [r7, #16]
 80139b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80139ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80139bc:	693b      	ldr	r3, [r7, #16]
 80139be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80139c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80139c4:	683b      	ldr	r3, [r7, #0]
 80139c6:	695b      	ldr	r3, [r3, #20]
 80139c8:	009b      	lsls	r3, r3, #2
 80139ca:	693a      	ldr	r2, [r7, #16]
 80139cc:	4313      	orrs	r3, r2
 80139ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80139d0:	683b      	ldr	r3, [r7, #0]
 80139d2:	699b      	ldr	r3, [r3, #24]
 80139d4:	009b      	lsls	r3, r3, #2
 80139d6:	693a      	ldr	r2, [r7, #16]
 80139d8:	4313      	orrs	r3, r2
 80139da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	693a      	ldr	r2, [r7, #16]
 80139e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	68fa      	ldr	r2, [r7, #12]
 80139e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80139e8:	683b      	ldr	r3, [r7, #0]
 80139ea:	685a      	ldr	r2, [r3, #4]
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	697a      	ldr	r2, [r7, #20]
 80139f4:	621a      	str	r2, [r3, #32]
}
 80139f6:	bf00      	nop
 80139f8:	371c      	adds	r7, #28
 80139fa:	46bd      	mov	sp, r7
 80139fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a00:	4770      	bx	lr
 8013a02:	bf00      	nop
 8013a04:	40012c00 	.word	0x40012c00
 8013a08:	40013400 	.word	0x40013400
 8013a0c:	40014000 	.word	0x40014000
 8013a10:	40014400 	.word	0x40014400
 8013a14:	40014800 	.word	0x40014800

08013a18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013a18:	b480      	push	{r7}
 8013a1a:	b087      	sub	sp, #28
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	6078      	str	r0, [r7, #4]
 8013a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	6a1b      	ldr	r3, [r3, #32]
 8013a26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	6a1b      	ldr	r3, [r3, #32]
 8013a2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	685b      	ldr	r3, [r3, #4]
 8013a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	69db      	ldr	r3, [r3, #28]
 8013a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	f023 0303 	bic.w	r3, r3, #3
 8013a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013a54:	683b      	ldr	r3, [r7, #0]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	68fa      	ldr	r2, [r7, #12]
 8013a5a:	4313      	orrs	r3, r2
 8013a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013a5e:	697b      	ldr	r3, [r7, #20]
 8013a60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8013a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013a66:	683b      	ldr	r3, [r7, #0]
 8013a68:	689b      	ldr	r3, [r3, #8]
 8013a6a:	021b      	lsls	r3, r3, #8
 8013a6c:	697a      	ldr	r2, [r7, #20]
 8013a6e:	4313      	orrs	r3, r2
 8013a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	4a27      	ldr	r2, [pc, #156]	@ (8013b14 <TIM_OC3_SetConfig+0xfc>)
 8013a76:	4293      	cmp	r3, r2
 8013a78:	d003      	beq.n	8013a82 <TIM_OC3_SetConfig+0x6a>
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	4a26      	ldr	r2, [pc, #152]	@ (8013b18 <TIM_OC3_SetConfig+0x100>)
 8013a7e:	4293      	cmp	r3, r2
 8013a80:	d10d      	bne.n	8013a9e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013a82:	697b      	ldr	r3, [r7, #20]
 8013a84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013a88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013a8a:	683b      	ldr	r3, [r7, #0]
 8013a8c:	68db      	ldr	r3, [r3, #12]
 8013a8e:	021b      	lsls	r3, r3, #8
 8013a90:	697a      	ldr	r2, [r7, #20]
 8013a92:	4313      	orrs	r3, r2
 8013a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013a96:	697b      	ldr	r3, [r7, #20]
 8013a98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8013a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	4a1c      	ldr	r2, [pc, #112]	@ (8013b14 <TIM_OC3_SetConfig+0xfc>)
 8013aa2:	4293      	cmp	r3, r2
 8013aa4:	d00f      	beq.n	8013ac6 <TIM_OC3_SetConfig+0xae>
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	4a1b      	ldr	r2, [pc, #108]	@ (8013b18 <TIM_OC3_SetConfig+0x100>)
 8013aaa:	4293      	cmp	r3, r2
 8013aac:	d00b      	beq.n	8013ac6 <TIM_OC3_SetConfig+0xae>
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	4a1a      	ldr	r2, [pc, #104]	@ (8013b1c <TIM_OC3_SetConfig+0x104>)
 8013ab2:	4293      	cmp	r3, r2
 8013ab4:	d007      	beq.n	8013ac6 <TIM_OC3_SetConfig+0xae>
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	4a19      	ldr	r2, [pc, #100]	@ (8013b20 <TIM_OC3_SetConfig+0x108>)
 8013aba:	4293      	cmp	r3, r2
 8013abc:	d003      	beq.n	8013ac6 <TIM_OC3_SetConfig+0xae>
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	4a18      	ldr	r2, [pc, #96]	@ (8013b24 <TIM_OC3_SetConfig+0x10c>)
 8013ac2:	4293      	cmp	r3, r2
 8013ac4:	d113      	bne.n	8013aee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013ac6:	693b      	ldr	r3, [r7, #16]
 8013ac8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013ace:	693b      	ldr	r3, [r7, #16]
 8013ad0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013ad6:	683b      	ldr	r3, [r7, #0]
 8013ad8:	695b      	ldr	r3, [r3, #20]
 8013ada:	011b      	lsls	r3, r3, #4
 8013adc:	693a      	ldr	r2, [r7, #16]
 8013ade:	4313      	orrs	r3, r2
 8013ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013ae2:	683b      	ldr	r3, [r7, #0]
 8013ae4:	699b      	ldr	r3, [r3, #24]
 8013ae6:	011b      	lsls	r3, r3, #4
 8013ae8:	693a      	ldr	r2, [r7, #16]
 8013aea:	4313      	orrs	r3, r2
 8013aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	693a      	ldr	r2, [r7, #16]
 8013af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	68fa      	ldr	r2, [r7, #12]
 8013af8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013afa:	683b      	ldr	r3, [r7, #0]
 8013afc:	685a      	ldr	r2, [r3, #4]
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	697a      	ldr	r2, [r7, #20]
 8013b06:	621a      	str	r2, [r3, #32]
}
 8013b08:	bf00      	nop
 8013b0a:	371c      	adds	r7, #28
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b12:	4770      	bx	lr
 8013b14:	40012c00 	.word	0x40012c00
 8013b18:	40013400 	.word	0x40013400
 8013b1c:	40014000 	.word	0x40014000
 8013b20:	40014400 	.word	0x40014400
 8013b24:	40014800 	.word	0x40014800

08013b28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013b28:	b480      	push	{r7}
 8013b2a:	b087      	sub	sp, #28
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
 8013b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	6a1b      	ldr	r3, [r3, #32]
 8013b36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	6a1b      	ldr	r3, [r3, #32]
 8013b3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	685b      	ldr	r3, [r3, #4]
 8013b48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	69db      	ldr	r3, [r3, #28]
 8013b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8013b56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013b64:	683b      	ldr	r3, [r7, #0]
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	021b      	lsls	r3, r3, #8
 8013b6a:	68fa      	ldr	r2, [r7, #12]
 8013b6c:	4313      	orrs	r3, r2
 8013b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013b70:	693b      	ldr	r3, [r7, #16]
 8013b72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013b76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013b78:	683b      	ldr	r3, [r7, #0]
 8013b7a:	689b      	ldr	r3, [r3, #8]
 8013b7c:	031b      	lsls	r3, r3, #12
 8013b7e:	693a      	ldr	r2, [r7, #16]
 8013b80:	4313      	orrs	r3, r2
 8013b82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	4a18      	ldr	r2, [pc, #96]	@ (8013be8 <TIM_OC4_SetConfig+0xc0>)
 8013b88:	4293      	cmp	r3, r2
 8013b8a:	d00f      	beq.n	8013bac <TIM_OC4_SetConfig+0x84>
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	4a17      	ldr	r2, [pc, #92]	@ (8013bec <TIM_OC4_SetConfig+0xc4>)
 8013b90:	4293      	cmp	r3, r2
 8013b92:	d00b      	beq.n	8013bac <TIM_OC4_SetConfig+0x84>
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	4a16      	ldr	r2, [pc, #88]	@ (8013bf0 <TIM_OC4_SetConfig+0xc8>)
 8013b98:	4293      	cmp	r3, r2
 8013b9a:	d007      	beq.n	8013bac <TIM_OC4_SetConfig+0x84>
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	4a15      	ldr	r2, [pc, #84]	@ (8013bf4 <TIM_OC4_SetConfig+0xcc>)
 8013ba0:	4293      	cmp	r3, r2
 8013ba2:	d003      	beq.n	8013bac <TIM_OC4_SetConfig+0x84>
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	4a14      	ldr	r2, [pc, #80]	@ (8013bf8 <TIM_OC4_SetConfig+0xd0>)
 8013ba8:	4293      	cmp	r3, r2
 8013baa:	d109      	bne.n	8013bc0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013bac:	697b      	ldr	r3, [r7, #20]
 8013bae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8013bb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013bb4:	683b      	ldr	r3, [r7, #0]
 8013bb6:	695b      	ldr	r3, [r3, #20]
 8013bb8:	019b      	lsls	r3, r3, #6
 8013bba:	697a      	ldr	r2, [r7, #20]
 8013bbc:	4313      	orrs	r3, r2
 8013bbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	697a      	ldr	r2, [r7, #20]
 8013bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	68fa      	ldr	r2, [r7, #12]
 8013bca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013bcc:	683b      	ldr	r3, [r7, #0]
 8013bce:	685a      	ldr	r2, [r3, #4]
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	693a      	ldr	r2, [r7, #16]
 8013bd8:	621a      	str	r2, [r3, #32]
}
 8013bda:	bf00      	nop
 8013bdc:	371c      	adds	r7, #28
 8013bde:	46bd      	mov	sp, r7
 8013be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be4:	4770      	bx	lr
 8013be6:	bf00      	nop
 8013be8:	40012c00 	.word	0x40012c00
 8013bec:	40013400 	.word	0x40013400
 8013bf0:	40014000 	.word	0x40014000
 8013bf4:	40014400 	.word	0x40014400
 8013bf8:	40014800 	.word	0x40014800

08013bfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013bfc:	b480      	push	{r7}
 8013bfe:	b087      	sub	sp, #28
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	6078      	str	r0, [r7, #4]
 8013c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	6a1b      	ldr	r3, [r3, #32]
 8013c0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	6a1b      	ldr	r3, [r3, #32]
 8013c10:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	685b      	ldr	r3, [r3, #4]
 8013c1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013c30:	683b      	ldr	r3, [r7, #0]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	68fa      	ldr	r2, [r7, #12]
 8013c36:	4313      	orrs	r3, r2
 8013c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013c3a:	693b      	ldr	r3, [r7, #16]
 8013c3c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8013c40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013c42:	683b      	ldr	r3, [r7, #0]
 8013c44:	689b      	ldr	r3, [r3, #8]
 8013c46:	041b      	lsls	r3, r3, #16
 8013c48:	693a      	ldr	r2, [r7, #16]
 8013c4a:	4313      	orrs	r3, r2
 8013c4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	4a17      	ldr	r2, [pc, #92]	@ (8013cb0 <TIM_OC5_SetConfig+0xb4>)
 8013c52:	4293      	cmp	r3, r2
 8013c54:	d00f      	beq.n	8013c76 <TIM_OC5_SetConfig+0x7a>
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	4a16      	ldr	r2, [pc, #88]	@ (8013cb4 <TIM_OC5_SetConfig+0xb8>)
 8013c5a:	4293      	cmp	r3, r2
 8013c5c:	d00b      	beq.n	8013c76 <TIM_OC5_SetConfig+0x7a>
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	4a15      	ldr	r2, [pc, #84]	@ (8013cb8 <TIM_OC5_SetConfig+0xbc>)
 8013c62:	4293      	cmp	r3, r2
 8013c64:	d007      	beq.n	8013c76 <TIM_OC5_SetConfig+0x7a>
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	4a14      	ldr	r2, [pc, #80]	@ (8013cbc <TIM_OC5_SetConfig+0xc0>)
 8013c6a:	4293      	cmp	r3, r2
 8013c6c:	d003      	beq.n	8013c76 <TIM_OC5_SetConfig+0x7a>
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	4a13      	ldr	r2, [pc, #76]	@ (8013cc0 <TIM_OC5_SetConfig+0xc4>)
 8013c72:	4293      	cmp	r3, r2
 8013c74:	d109      	bne.n	8013c8a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013c76:	697b      	ldr	r3, [r7, #20]
 8013c78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013c7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8013c7e:	683b      	ldr	r3, [r7, #0]
 8013c80:	695b      	ldr	r3, [r3, #20]
 8013c82:	021b      	lsls	r3, r3, #8
 8013c84:	697a      	ldr	r2, [r7, #20]
 8013c86:	4313      	orrs	r3, r2
 8013c88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	697a      	ldr	r2, [r7, #20]
 8013c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	68fa      	ldr	r2, [r7, #12]
 8013c94:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013c96:	683b      	ldr	r3, [r7, #0]
 8013c98:	685a      	ldr	r2, [r3, #4]
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	693a      	ldr	r2, [r7, #16]
 8013ca2:	621a      	str	r2, [r3, #32]
}
 8013ca4:	bf00      	nop
 8013ca6:	371c      	adds	r7, #28
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cae:	4770      	bx	lr
 8013cb0:	40012c00 	.word	0x40012c00
 8013cb4:	40013400 	.word	0x40013400
 8013cb8:	40014000 	.word	0x40014000
 8013cbc:	40014400 	.word	0x40014400
 8013cc0:	40014800 	.word	0x40014800

08013cc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013cc4:	b480      	push	{r7}
 8013cc6:	b087      	sub	sp, #28
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
 8013ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	6a1b      	ldr	r3, [r3, #32]
 8013cd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	6a1b      	ldr	r3, [r3, #32]
 8013cd8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	685b      	ldr	r3, [r3, #4]
 8013ce4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8013cf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013cf8:	683b      	ldr	r3, [r7, #0]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	021b      	lsls	r3, r3, #8
 8013cfe:	68fa      	ldr	r2, [r7, #12]
 8013d00:	4313      	orrs	r3, r2
 8013d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013d04:	693b      	ldr	r3, [r7, #16]
 8013d06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8013d0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013d0c:	683b      	ldr	r3, [r7, #0]
 8013d0e:	689b      	ldr	r3, [r3, #8]
 8013d10:	051b      	lsls	r3, r3, #20
 8013d12:	693a      	ldr	r2, [r7, #16]
 8013d14:	4313      	orrs	r3, r2
 8013d16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	4a18      	ldr	r2, [pc, #96]	@ (8013d7c <TIM_OC6_SetConfig+0xb8>)
 8013d1c:	4293      	cmp	r3, r2
 8013d1e:	d00f      	beq.n	8013d40 <TIM_OC6_SetConfig+0x7c>
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	4a17      	ldr	r2, [pc, #92]	@ (8013d80 <TIM_OC6_SetConfig+0xbc>)
 8013d24:	4293      	cmp	r3, r2
 8013d26:	d00b      	beq.n	8013d40 <TIM_OC6_SetConfig+0x7c>
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	4a16      	ldr	r2, [pc, #88]	@ (8013d84 <TIM_OC6_SetConfig+0xc0>)
 8013d2c:	4293      	cmp	r3, r2
 8013d2e:	d007      	beq.n	8013d40 <TIM_OC6_SetConfig+0x7c>
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	4a15      	ldr	r2, [pc, #84]	@ (8013d88 <TIM_OC6_SetConfig+0xc4>)
 8013d34:	4293      	cmp	r3, r2
 8013d36:	d003      	beq.n	8013d40 <TIM_OC6_SetConfig+0x7c>
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	4a14      	ldr	r2, [pc, #80]	@ (8013d8c <TIM_OC6_SetConfig+0xc8>)
 8013d3c:	4293      	cmp	r3, r2
 8013d3e:	d109      	bne.n	8013d54 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013d40:	697b      	ldr	r3, [r7, #20]
 8013d42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8013d46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013d48:	683b      	ldr	r3, [r7, #0]
 8013d4a:	695b      	ldr	r3, [r3, #20]
 8013d4c:	029b      	lsls	r3, r3, #10
 8013d4e:	697a      	ldr	r2, [r7, #20]
 8013d50:	4313      	orrs	r3, r2
 8013d52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	697a      	ldr	r2, [r7, #20]
 8013d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	68fa      	ldr	r2, [r7, #12]
 8013d5e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013d60:	683b      	ldr	r3, [r7, #0]
 8013d62:	685a      	ldr	r2, [r3, #4]
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	693a      	ldr	r2, [r7, #16]
 8013d6c:	621a      	str	r2, [r3, #32]
}
 8013d6e:	bf00      	nop
 8013d70:	371c      	adds	r7, #28
 8013d72:	46bd      	mov	sp, r7
 8013d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d78:	4770      	bx	lr
 8013d7a:	bf00      	nop
 8013d7c:	40012c00 	.word	0x40012c00
 8013d80:	40013400 	.word	0x40013400
 8013d84:	40014000 	.word	0x40014000
 8013d88:	40014400 	.word	0x40014400
 8013d8c:	40014800 	.word	0x40014800

08013d90 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b086      	sub	sp, #24
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
 8013d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	689b      	ldr	r3, [r3, #8]
 8013da4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013da6:	693b      	ldr	r3, [r7, #16]
 8013da8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013dac:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8013dae:	683b      	ldr	r3, [r7, #0]
 8013db0:	685b      	ldr	r3, [r3, #4]
 8013db2:	693a      	ldr	r2, [r7, #16]
 8013db4:	4313      	orrs	r3, r2
 8013db6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8013db8:	693b      	ldr	r3, [r7, #16]
 8013dba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013dbe:	f023 0307 	bic.w	r3, r3, #7
 8013dc2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8013dc4:	683b      	ldr	r3, [r7, #0]
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	693a      	ldr	r2, [r7, #16]
 8013dca:	4313      	orrs	r3, r2
 8013dcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	693a      	ldr	r2, [r7, #16]
 8013dd4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8013dd6:	683b      	ldr	r3, [r7, #0]
 8013dd8:	685b      	ldr	r3, [r3, #4]
 8013dda:	2b70      	cmp	r3, #112	@ 0x70
 8013ddc:	d01a      	beq.n	8013e14 <TIM_SlaveTimer_SetConfig+0x84>
 8013dde:	2b70      	cmp	r3, #112	@ 0x70
 8013de0:	d860      	bhi.n	8013ea4 <TIM_SlaveTimer_SetConfig+0x114>
 8013de2:	2b60      	cmp	r3, #96	@ 0x60
 8013de4:	d054      	beq.n	8013e90 <TIM_SlaveTimer_SetConfig+0x100>
 8013de6:	2b60      	cmp	r3, #96	@ 0x60
 8013de8:	d85c      	bhi.n	8013ea4 <TIM_SlaveTimer_SetConfig+0x114>
 8013dea:	2b50      	cmp	r3, #80	@ 0x50
 8013dec:	d046      	beq.n	8013e7c <TIM_SlaveTimer_SetConfig+0xec>
 8013dee:	2b50      	cmp	r3, #80	@ 0x50
 8013df0:	d858      	bhi.n	8013ea4 <TIM_SlaveTimer_SetConfig+0x114>
 8013df2:	2b40      	cmp	r3, #64	@ 0x40
 8013df4:	d019      	beq.n	8013e2a <TIM_SlaveTimer_SetConfig+0x9a>
 8013df6:	2b40      	cmp	r3, #64	@ 0x40
 8013df8:	d854      	bhi.n	8013ea4 <TIM_SlaveTimer_SetConfig+0x114>
 8013dfa:	2b30      	cmp	r3, #48	@ 0x30
 8013dfc:	d055      	beq.n	8013eaa <TIM_SlaveTimer_SetConfig+0x11a>
 8013dfe:	2b30      	cmp	r3, #48	@ 0x30
 8013e00:	d850      	bhi.n	8013ea4 <TIM_SlaveTimer_SetConfig+0x114>
 8013e02:	2b20      	cmp	r3, #32
 8013e04:	d051      	beq.n	8013eaa <TIM_SlaveTimer_SetConfig+0x11a>
 8013e06:	2b20      	cmp	r3, #32
 8013e08:	d84c      	bhi.n	8013ea4 <TIM_SlaveTimer_SetConfig+0x114>
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d04d      	beq.n	8013eaa <TIM_SlaveTimer_SetConfig+0x11a>
 8013e0e:	2b10      	cmp	r3, #16
 8013e10:	d04b      	beq.n	8013eaa <TIM_SlaveTimer_SetConfig+0x11a>
 8013e12:	e047      	b.n	8013ea4 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8013e18:	683b      	ldr	r3, [r7, #0]
 8013e1a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8013e1c:	683b      	ldr	r3, [r7, #0]
 8013e1e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8013e20:	683b      	ldr	r3, [r7, #0]
 8013e22:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8013e24:	f000 f9e6 	bl	80141f4 <TIM_ETR_SetConfig>
      break;
 8013e28:	e040      	b.n	8013eac <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8013e2a:	683b      	ldr	r3, [r7, #0]
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	2b05      	cmp	r3, #5
 8013e30:	d101      	bne.n	8013e36 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8013e32:	2301      	movs	r3, #1
 8013e34:	e03b      	b.n	8013eae <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	6a1b      	ldr	r3, [r3, #32]
 8013e3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	6a1a      	ldr	r2, [r3, #32]
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	f022 0201 	bic.w	r2, r2, #1
 8013e4c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	699b      	ldr	r3, [r3, #24]
 8013e54:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013e56:	68bb      	ldr	r3, [r7, #8]
 8013e58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013e5c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8013e5e:	683b      	ldr	r3, [r7, #0]
 8013e60:	691b      	ldr	r3, [r3, #16]
 8013e62:	011b      	lsls	r3, r3, #4
 8013e64:	68ba      	ldr	r2, [r7, #8]
 8013e66:	4313      	orrs	r3, r2
 8013e68:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	68ba      	ldr	r2, [r7, #8]
 8013e70:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	68fa      	ldr	r2, [r7, #12]
 8013e78:	621a      	str	r2, [r3, #32]
      break;
 8013e7a:	e017      	b.n	8013eac <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8013e80:	683b      	ldr	r3, [r7, #0]
 8013e82:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8013e84:	683b      	ldr	r3, [r7, #0]
 8013e86:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013e88:	461a      	mov	r2, r3
 8013e8a:	f000 f883 	bl	8013f94 <TIM_TI1_ConfigInputStage>
      break;
 8013e8e:	e00d      	b.n	8013eac <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8013e98:	683b      	ldr	r3, [r7, #0]
 8013e9a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013e9c:	461a      	mov	r2, r3
 8013e9e:	f000 f8e5 	bl	801406c <TIM_TI2_ConfigInputStage>
      break;
 8013ea2:	e003      	b.n	8013eac <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8013ea4:	2301      	movs	r3, #1
 8013ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8013ea8:	e000      	b.n	8013eac <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8013eaa:	bf00      	nop
  }

  return status;
 8013eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8013eae:	4618      	mov	r0, r3
 8013eb0:	3718      	adds	r7, #24
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd80      	pop	{r7, pc}
	...

08013eb8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8013eb8:	b480      	push	{r7}
 8013eba:	b087      	sub	sp, #28
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	60f8      	str	r0, [r7, #12]
 8013ec0:	60b9      	str	r1, [r7, #8]
 8013ec2:	607a      	str	r2, [r7, #4]
 8013ec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	6a1b      	ldr	r3, [r3, #32]
 8013eca:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	6a1b      	ldr	r3, [r3, #32]
 8013ed0:	f023 0201 	bic.w	r2, r3, #1
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	699b      	ldr	r3, [r3, #24]
 8013edc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	4a26      	ldr	r2, [pc, #152]	@ (8013f7c <TIM_TI1_SetConfig+0xc4>)
 8013ee2:	4293      	cmp	r3, r2
 8013ee4:	d017      	beq.n	8013f16 <TIM_TI1_SetConfig+0x5e>
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013eec:	d013      	beq.n	8013f16 <TIM_TI1_SetConfig+0x5e>
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	4a23      	ldr	r2, [pc, #140]	@ (8013f80 <TIM_TI1_SetConfig+0xc8>)
 8013ef2:	4293      	cmp	r3, r2
 8013ef4:	d00f      	beq.n	8013f16 <TIM_TI1_SetConfig+0x5e>
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	4a22      	ldr	r2, [pc, #136]	@ (8013f84 <TIM_TI1_SetConfig+0xcc>)
 8013efa:	4293      	cmp	r3, r2
 8013efc:	d00b      	beq.n	8013f16 <TIM_TI1_SetConfig+0x5e>
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	4a21      	ldr	r2, [pc, #132]	@ (8013f88 <TIM_TI1_SetConfig+0xd0>)
 8013f02:	4293      	cmp	r3, r2
 8013f04:	d007      	beq.n	8013f16 <TIM_TI1_SetConfig+0x5e>
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	4a20      	ldr	r2, [pc, #128]	@ (8013f8c <TIM_TI1_SetConfig+0xd4>)
 8013f0a:	4293      	cmp	r3, r2
 8013f0c:	d003      	beq.n	8013f16 <TIM_TI1_SetConfig+0x5e>
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	4a1f      	ldr	r2, [pc, #124]	@ (8013f90 <TIM_TI1_SetConfig+0xd8>)
 8013f12:	4293      	cmp	r3, r2
 8013f14:	d101      	bne.n	8013f1a <TIM_TI1_SetConfig+0x62>
 8013f16:	2301      	movs	r3, #1
 8013f18:	e000      	b.n	8013f1c <TIM_TI1_SetConfig+0x64>
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d008      	beq.n	8013f32 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8013f20:	697b      	ldr	r3, [r7, #20]
 8013f22:	f023 0303 	bic.w	r3, r3, #3
 8013f26:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8013f28:	697a      	ldr	r2, [r7, #20]
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	4313      	orrs	r3, r2
 8013f2e:	617b      	str	r3, [r7, #20]
 8013f30:	e003      	b.n	8013f3a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8013f32:	697b      	ldr	r3, [r7, #20]
 8013f34:	f043 0301 	orr.w	r3, r3, #1
 8013f38:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013f3a:	697b      	ldr	r3, [r7, #20]
 8013f3c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013f40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8013f42:	683b      	ldr	r3, [r7, #0]
 8013f44:	011b      	lsls	r3, r3, #4
 8013f46:	b2db      	uxtb	r3, r3
 8013f48:	697a      	ldr	r2, [r7, #20]
 8013f4a:	4313      	orrs	r3, r2
 8013f4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013f4e:	693b      	ldr	r3, [r7, #16]
 8013f50:	f023 030a 	bic.w	r3, r3, #10
 8013f54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8013f56:	68bb      	ldr	r3, [r7, #8]
 8013f58:	f003 030a 	and.w	r3, r3, #10
 8013f5c:	693a      	ldr	r2, [r7, #16]
 8013f5e:	4313      	orrs	r3, r2
 8013f60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	697a      	ldr	r2, [r7, #20]
 8013f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	693a      	ldr	r2, [r7, #16]
 8013f6c:	621a      	str	r2, [r3, #32]
}
 8013f6e:	bf00      	nop
 8013f70:	371c      	adds	r7, #28
 8013f72:	46bd      	mov	sp, r7
 8013f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f78:	4770      	bx	lr
 8013f7a:	bf00      	nop
 8013f7c:	40012c00 	.word	0x40012c00
 8013f80:	40000400 	.word	0x40000400
 8013f84:	40000800 	.word	0x40000800
 8013f88:	40000c00 	.word	0x40000c00
 8013f8c:	40013400 	.word	0x40013400
 8013f90:	40014000 	.word	0x40014000

08013f94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013f94:	b480      	push	{r7}
 8013f96:	b087      	sub	sp, #28
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	60f8      	str	r0, [r7, #12]
 8013f9c:	60b9      	str	r1, [r7, #8]
 8013f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	6a1b      	ldr	r3, [r3, #32]
 8013fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	6a1b      	ldr	r3, [r3, #32]
 8013faa:	f023 0201 	bic.w	r2, r3, #1
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	699b      	ldr	r3, [r3, #24]
 8013fb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013fb8:	693b      	ldr	r3, [r7, #16]
 8013fba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	011b      	lsls	r3, r3, #4
 8013fc4:	693a      	ldr	r2, [r7, #16]
 8013fc6:	4313      	orrs	r3, r2
 8013fc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013fca:	697b      	ldr	r3, [r7, #20]
 8013fcc:	f023 030a 	bic.w	r3, r3, #10
 8013fd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013fd2:	697a      	ldr	r2, [r7, #20]
 8013fd4:	68bb      	ldr	r3, [r7, #8]
 8013fd6:	4313      	orrs	r3, r2
 8013fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	693a      	ldr	r2, [r7, #16]
 8013fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	697a      	ldr	r2, [r7, #20]
 8013fe4:	621a      	str	r2, [r3, #32]
}
 8013fe6:	bf00      	nop
 8013fe8:	371c      	adds	r7, #28
 8013fea:	46bd      	mov	sp, r7
 8013fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff0:	4770      	bx	lr

08013ff2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8013ff2:	b480      	push	{r7}
 8013ff4:	b087      	sub	sp, #28
 8013ff6:	af00      	add	r7, sp, #0
 8013ff8:	60f8      	str	r0, [r7, #12]
 8013ffa:	60b9      	str	r1, [r7, #8]
 8013ffc:	607a      	str	r2, [r7, #4]
 8013ffe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	6a1b      	ldr	r3, [r3, #32]
 8014004:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	6a1b      	ldr	r3, [r3, #32]
 801400a:	f023 0210 	bic.w	r2, r3, #16
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	699b      	ldr	r3, [r3, #24]
 8014016:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8014018:	693b      	ldr	r3, [r7, #16]
 801401a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801401e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	021b      	lsls	r3, r3, #8
 8014024:	693a      	ldr	r2, [r7, #16]
 8014026:	4313      	orrs	r3, r2
 8014028:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801402a:	693b      	ldr	r3, [r7, #16]
 801402c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8014030:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8014032:	683b      	ldr	r3, [r7, #0]
 8014034:	031b      	lsls	r3, r3, #12
 8014036:	b29b      	uxth	r3, r3
 8014038:	693a      	ldr	r2, [r7, #16]
 801403a:	4313      	orrs	r3, r2
 801403c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801403e:	697b      	ldr	r3, [r7, #20]
 8014040:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8014044:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8014046:	68bb      	ldr	r3, [r7, #8]
 8014048:	011b      	lsls	r3, r3, #4
 801404a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801404e:	697a      	ldr	r2, [r7, #20]
 8014050:	4313      	orrs	r3, r2
 8014052:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	693a      	ldr	r2, [r7, #16]
 8014058:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	697a      	ldr	r2, [r7, #20]
 801405e:	621a      	str	r2, [r3, #32]
}
 8014060:	bf00      	nop
 8014062:	371c      	adds	r7, #28
 8014064:	46bd      	mov	sp, r7
 8014066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406a:	4770      	bx	lr

0801406c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801406c:	b480      	push	{r7}
 801406e:	b087      	sub	sp, #28
 8014070:	af00      	add	r7, sp, #0
 8014072:	60f8      	str	r0, [r7, #12]
 8014074:	60b9      	str	r1, [r7, #8]
 8014076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	6a1b      	ldr	r3, [r3, #32]
 801407c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	6a1b      	ldr	r3, [r3, #32]
 8014082:	f023 0210 	bic.w	r2, r3, #16
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	699b      	ldr	r3, [r3, #24]
 801408e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014090:	693b      	ldr	r3, [r7, #16]
 8014092:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8014096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	031b      	lsls	r3, r3, #12
 801409c:	693a      	ldr	r2, [r7, #16]
 801409e:	4313      	orrs	r3, r2
 80140a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80140a2:	697b      	ldr	r3, [r7, #20]
 80140a4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80140a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80140aa:	68bb      	ldr	r3, [r7, #8]
 80140ac:	011b      	lsls	r3, r3, #4
 80140ae:	697a      	ldr	r2, [r7, #20]
 80140b0:	4313      	orrs	r3, r2
 80140b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	693a      	ldr	r2, [r7, #16]
 80140b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	697a      	ldr	r2, [r7, #20]
 80140be:	621a      	str	r2, [r3, #32]
}
 80140c0:	bf00      	nop
 80140c2:	371c      	adds	r7, #28
 80140c4:	46bd      	mov	sp, r7
 80140c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ca:	4770      	bx	lr

080140cc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80140cc:	b480      	push	{r7}
 80140ce:	b087      	sub	sp, #28
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	60f8      	str	r0, [r7, #12]
 80140d4:	60b9      	str	r1, [r7, #8]
 80140d6:	607a      	str	r2, [r7, #4]
 80140d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	6a1b      	ldr	r3, [r3, #32]
 80140de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	6a1b      	ldr	r3, [r3, #32]
 80140e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	69db      	ldr	r3, [r3, #28]
 80140f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80140f2:	693b      	ldr	r3, [r7, #16]
 80140f4:	f023 0303 	bic.w	r3, r3, #3
 80140f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80140fa:	693a      	ldr	r2, [r7, #16]
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	4313      	orrs	r3, r2
 8014100:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8014102:	693b      	ldr	r3, [r7, #16]
 8014104:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8014108:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801410a:	683b      	ldr	r3, [r7, #0]
 801410c:	011b      	lsls	r3, r3, #4
 801410e:	b2db      	uxtb	r3, r3
 8014110:	693a      	ldr	r2, [r7, #16]
 8014112:	4313      	orrs	r3, r2
 8014114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8014116:	697b      	ldr	r3, [r7, #20]
 8014118:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 801411c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801411e:	68bb      	ldr	r3, [r7, #8]
 8014120:	021b      	lsls	r3, r3, #8
 8014122:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8014126:	697a      	ldr	r2, [r7, #20]
 8014128:	4313      	orrs	r3, r2
 801412a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	693a      	ldr	r2, [r7, #16]
 8014130:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	697a      	ldr	r2, [r7, #20]
 8014136:	621a      	str	r2, [r3, #32]
}
 8014138:	bf00      	nop
 801413a:	371c      	adds	r7, #28
 801413c:	46bd      	mov	sp, r7
 801413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014142:	4770      	bx	lr

08014144 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8014144:	b480      	push	{r7}
 8014146:	b087      	sub	sp, #28
 8014148:	af00      	add	r7, sp, #0
 801414a:	60f8      	str	r0, [r7, #12]
 801414c:	60b9      	str	r1, [r7, #8]
 801414e:	607a      	str	r2, [r7, #4]
 8014150:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	6a1b      	ldr	r3, [r3, #32]
 8014156:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	6a1b      	ldr	r3, [r3, #32]
 801415c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	69db      	ldr	r3, [r3, #28]
 8014168:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801416a:	693b      	ldr	r3, [r7, #16]
 801416c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014170:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	021b      	lsls	r3, r3, #8
 8014176:	693a      	ldr	r2, [r7, #16]
 8014178:	4313      	orrs	r3, r2
 801417a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 801417c:	693b      	ldr	r3, [r7, #16]
 801417e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8014182:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8014184:	683b      	ldr	r3, [r7, #0]
 8014186:	031b      	lsls	r3, r3, #12
 8014188:	b29b      	uxth	r3, r3
 801418a:	693a      	ldr	r2, [r7, #16]
 801418c:	4313      	orrs	r3, r2
 801418e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8014190:	697b      	ldr	r3, [r7, #20]
 8014192:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8014196:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8014198:	68bb      	ldr	r3, [r7, #8]
 801419a:	031b      	lsls	r3, r3, #12
 801419c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80141a0:	697a      	ldr	r2, [r7, #20]
 80141a2:	4313      	orrs	r3, r2
 80141a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	693a      	ldr	r2, [r7, #16]
 80141aa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	697a      	ldr	r2, [r7, #20]
 80141b0:	621a      	str	r2, [r3, #32]
}
 80141b2:	bf00      	nop
 80141b4:	371c      	adds	r7, #28
 80141b6:	46bd      	mov	sp, r7
 80141b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141bc:	4770      	bx	lr

080141be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80141be:	b480      	push	{r7}
 80141c0:	b085      	sub	sp, #20
 80141c2:	af00      	add	r7, sp, #0
 80141c4:	6078      	str	r0, [r7, #4]
 80141c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	689b      	ldr	r3, [r3, #8]
 80141cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80141d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80141d6:	683a      	ldr	r2, [r7, #0]
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	4313      	orrs	r3, r2
 80141dc:	f043 0307 	orr.w	r3, r3, #7
 80141e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	68fa      	ldr	r2, [r7, #12]
 80141e6:	609a      	str	r2, [r3, #8]
}
 80141e8:	bf00      	nop
 80141ea:	3714      	adds	r7, #20
 80141ec:	46bd      	mov	sp, r7
 80141ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f2:	4770      	bx	lr

080141f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80141f4:	b480      	push	{r7}
 80141f6:	b087      	sub	sp, #28
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	60f8      	str	r0, [r7, #12]
 80141fc:	60b9      	str	r1, [r7, #8]
 80141fe:	607a      	str	r2, [r7, #4]
 8014200:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	689b      	ldr	r3, [r3, #8]
 8014206:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014208:	697b      	ldr	r3, [r7, #20]
 801420a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801420e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8014210:	683b      	ldr	r3, [r7, #0]
 8014212:	021a      	lsls	r2, r3, #8
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	431a      	orrs	r2, r3
 8014218:	68bb      	ldr	r3, [r7, #8]
 801421a:	4313      	orrs	r3, r2
 801421c:	697a      	ldr	r2, [r7, #20]
 801421e:	4313      	orrs	r3, r2
 8014220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	697a      	ldr	r2, [r7, #20]
 8014226:	609a      	str	r2, [r3, #8]
}
 8014228:	bf00      	nop
 801422a:	371c      	adds	r7, #28
 801422c:	46bd      	mov	sp, r7
 801422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014232:	4770      	bx	lr

08014234 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8014234:	b480      	push	{r7}
 8014236:	b087      	sub	sp, #28
 8014238:	af00      	add	r7, sp, #0
 801423a:	60f8      	str	r0, [r7, #12]
 801423c:	60b9      	str	r1, [r7, #8]
 801423e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8014240:	68bb      	ldr	r3, [r7, #8]
 8014242:	f003 031f 	and.w	r3, r3, #31
 8014246:	2201      	movs	r2, #1
 8014248:	fa02 f303 	lsl.w	r3, r2, r3
 801424c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	6a1a      	ldr	r2, [r3, #32]
 8014252:	697b      	ldr	r3, [r7, #20]
 8014254:	43db      	mvns	r3, r3
 8014256:	401a      	ands	r2, r3
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	6a1a      	ldr	r2, [r3, #32]
 8014260:	68bb      	ldr	r3, [r7, #8]
 8014262:	f003 031f 	and.w	r3, r3, #31
 8014266:	6879      	ldr	r1, [r7, #4]
 8014268:	fa01 f303 	lsl.w	r3, r1, r3
 801426c:	431a      	orrs	r2, r3
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	621a      	str	r2, [r3, #32]
}
 8014272:	bf00      	nop
 8014274:	371c      	adds	r7, #28
 8014276:	46bd      	mov	sp, r7
 8014278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427c:	4770      	bx	lr
	...

08014280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8014280:	b480      	push	{r7}
 8014282:	b085      	sub	sp, #20
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
 8014288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014290:	2b01      	cmp	r3, #1
 8014292:	d101      	bne.n	8014298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014294:	2302      	movs	r3, #2
 8014296:	e068      	b.n	801436a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	2201      	movs	r2, #1
 801429c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	2202      	movs	r2, #2
 80142a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	685b      	ldr	r3, [r3, #4]
 80142ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	689b      	ldr	r3, [r3, #8]
 80142b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	4a2e      	ldr	r2, [pc, #184]	@ (8014378 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80142be:	4293      	cmp	r3, r2
 80142c0:	d004      	beq.n	80142cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	4a2d      	ldr	r2, [pc, #180]	@ (801437c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80142c8:	4293      	cmp	r3, r2
 80142ca:	d108      	bne.n	80142de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80142d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80142d4:	683b      	ldr	r3, [r7, #0]
 80142d6:	685b      	ldr	r3, [r3, #4]
 80142d8:	68fa      	ldr	r2, [r7, #12]
 80142da:	4313      	orrs	r3, r2
 80142dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80142e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80142e6:	683b      	ldr	r3, [r7, #0]
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	68fa      	ldr	r2, [r7, #12]
 80142ec:	4313      	orrs	r3, r2
 80142ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	68fa      	ldr	r2, [r7, #12]
 80142f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	4a1e      	ldr	r2, [pc, #120]	@ (8014378 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80142fe:	4293      	cmp	r3, r2
 8014300:	d01d      	beq.n	801433e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801430a:	d018      	beq.n	801433e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	4a1b      	ldr	r2, [pc, #108]	@ (8014380 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8014312:	4293      	cmp	r3, r2
 8014314:	d013      	beq.n	801433e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	4a1a      	ldr	r2, [pc, #104]	@ (8014384 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801431c:	4293      	cmp	r3, r2
 801431e:	d00e      	beq.n	801433e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	4a18      	ldr	r2, [pc, #96]	@ (8014388 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8014326:	4293      	cmp	r3, r2
 8014328:	d009      	beq.n	801433e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	4a13      	ldr	r2, [pc, #76]	@ (801437c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8014330:	4293      	cmp	r3, r2
 8014332:	d004      	beq.n	801433e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	4a14      	ldr	r2, [pc, #80]	@ (801438c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801433a:	4293      	cmp	r3, r2
 801433c:	d10c      	bne.n	8014358 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801433e:	68bb      	ldr	r3, [r7, #8]
 8014340:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014344:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8014346:	683b      	ldr	r3, [r7, #0]
 8014348:	689b      	ldr	r3, [r3, #8]
 801434a:	68ba      	ldr	r2, [r7, #8]
 801434c:	4313      	orrs	r3, r2
 801434e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	68ba      	ldr	r2, [r7, #8]
 8014356:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	2201      	movs	r2, #1
 801435c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	2200      	movs	r2, #0
 8014364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8014368:	2300      	movs	r3, #0
}
 801436a:	4618      	mov	r0, r3
 801436c:	3714      	adds	r7, #20
 801436e:	46bd      	mov	sp, r7
 8014370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014374:	4770      	bx	lr
 8014376:	bf00      	nop
 8014378:	40012c00 	.word	0x40012c00
 801437c:	40013400 	.word	0x40013400
 8014380:	40000400 	.word	0x40000400
 8014384:	40000800 	.word	0x40000800
 8014388:	40000c00 	.word	0x40000c00
 801438c:	40014000 	.word	0x40014000

08014390 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8014390:	b480      	push	{r7}
 8014392:	b085      	sub	sp, #20
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
 8014398:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801439a:	2300      	movs	r3, #0
 801439c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80143a4:	2b01      	cmp	r3, #1
 80143a6:	d101      	bne.n	80143ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80143a8:	2302      	movs	r3, #2
 80143aa:	e065      	b.n	8014478 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	2201      	movs	r2, #1
 80143b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80143ba:	683b      	ldr	r3, [r7, #0]
 80143bc:	68db      	ldr	r3, [r3, #12]
 80143be:	4313      	orrs	r3, r2
 80143c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80143c8:	683b      	ldr	r3, [r7, #0]
 80143ca:	689b      	ldr	r3, [r3, #8]
 80143cc:	4313      	orrs	r3, r2
 80143ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80143d6:	683b      	ldr	r3, [r7, #0]
 80143d8:	685b      	ldr	r3, [r3, #4]
 80143da:	4313      	orrs	r3, r2
 80143dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80143e4:	683b      	ldr	r3, [r7, #0]
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	4313      	orrs	r3, r2
 80143ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80143f2:	683b      	ldr	r3, [r7, #0]
 80143f4:	691b      	ldr	r3, [r3, #16]
 80143f6:	4313      	orrs	r3, r2
 80143f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8014400:	683b      	ldr	r3, [r7, #0]
 8014402:	695b      	ldr	r3, [r3, #20]
 8014404:	4313      	orrs	r3, r2
 8014406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801440e:	683b      	ldr	r3, [r7, #0]
 8014410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014412:	4313      	orrs	r3, r2
 8014414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 801441c:	683b      	ldr	r3, [r7, #0]
 801441e:	699b      	ldr	r3, [r3, #24]
 8014420:	041b      	lsls	r3, r3, #16
 8014422:	4313      	orrs	r3, r2
 8014424:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	4a16      	ldr	r2, [pc, #88]	@ (8014484 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 801442c:	4293      	cmp	r3, r2
 801442e:	d004      	beq.n	801443a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	4a14      	ldr	r2, [pc, #80]	@ (8014488 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8014436:	4293      	cmp	r3, r2
 8014438:	d115      	bne.n	8014466 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8014440:	683b      	ldr	r3, [r7, #0]
 8014442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014444:	051b      	lsls	r3, r3, #20
 8014446:	4313      	orrs	r3, r2
 8014448:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8014450:	683b      	ldr	r3, [r7, #0]
 8014452:	69db      	ldr	r3, [r3, #28]
 8014454:	4313      	orrs	r3, r2
 8014456:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801445e:	683b      	ldr	r3, [r7, #0]
 8014460:	6a1b      	ldr	r3, [r3, #32]
 8014462:	4313      	orrs	r3, r2
 8014464:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	68fa      	ldr	r2, [r7, #12]
 801446c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	2200      	movs	r2, #0
 8014472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8014476:	2300      	movs	r3, #0
}
 8014478:	4618      	mov	r0, r3
 801447a:	3714      	adds	r7, #20
 801447c:	46bd      	mov	sp, r7
 801447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014482:	4770      	bx	lr
 8014484:	40012c00 	.word	0x40012c00
 8014488:	40013400 	.word	0x40013400

0801448c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b082      	sub	sp, #8
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	2b00      	cmp	r3, #0
 8014498:	d101      	bne.n	801449e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801449a:	2301      	movs	r3, #1
 801449c:	e040      	b.n	8014520 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d106      	bne.n	80144b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	2200      	movs	r2, #0
 80144aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80144ae:	6878      	ldr	r0, [r7, #4]
 80144b0:	f7f3 f8f8 	bl	80076a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	2224      	movs	r2, #36	@ 0x24
 80144b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	681a      	ldr	r2, [r3, #0]
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	f022 0201 	bic.w	r2, r2, #1
 80144c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d002      	beq.n	80144d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80144d2:	6878      	ldr	r0, [r7, #4]
 80144d4:	f000 fdb4 	bl	8015040 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80144d8:	6878      	ldr	r0, [r7, #4]
 80144da:	f000 faf9 	bl	8014ad0 <UART_SetConfig>
 80144de:	4603      	mov	r3, r0
 80144e0:	2b01      	cmp	r3, #1
 80144e2:	d101      	bne.n	80144e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80144e4:	2301      	movs	r3, #1
 80144e6:	e01b      	b.n	8014520 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	685a      	ldr	r2, [r3, #4]
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80144f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	689a      	ldr	r2, [r3, #8]
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8014506:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	681a      	ldr	r2, [r3, #0]
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	f042 0201 	orr.w	r2, r2, #1
 8014516:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8014518:	6878      	ldr	r0, [r7, #4]
 801451a:	f000 fe33 	bl	8015184 <UART_CheckIdleState>
 801451e:	4603      	mov	r3, r0
}
 8014520:	4618      	mov	r0, r3
 8014522:	3708      	adds	r7, #8
 8014524:	46bd      	mov	sp, r7
 8014526:	bd80      	pop	{r7, pc}

08014528 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8014528:	b580      	push	{r7, lr}
 801452a:	b082      	sub	sp, #8
 801452c:	af00      	add	r7, sp, #0
 801452e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d101      	bne.n	801453a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8014536:	2301      	movs	r3, #1
 8014538:	e048      	b.n	80145cc <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801453e:	2b00      	cmp	r3, #0
 8014540:	d106      	bne.n	8014550 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	2200      	movs	r2, #0
 8014546:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801454a:	6878      	ldr	r0, [r7, #4]
 801454c:	f7f3 f8aa 	bl	80076a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	2224      	movs	r2, #36	@ 0x24
 8014554:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	681a      	ldr	r2, [r3, #0]
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	f022 0201 	bic.w	r2, r2, #1
 8014564:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801456a:	2b00      	cmp	r3, #0
 801456c:	d002      	beq.n	8014574 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 801456e:	6878      	ldr	r0, [r7, #4]
 8014570:	f000 fd66 	bl	8015040 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014574:	6878      	ldr	r0, [r7, #4]
 8014576:	f000 faab 	bl	8014ad0 <UART_SetConfig>
 801457a:	4603      	mov	r3, r0
 801457c:	2b01      	cmp	r3, #1
 801457e:	d101      	bne.n	8014584 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 8014580:	2301      	movs	r3, #1
 8014582:	e023      	b.n	80145cc <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	685a      	ldr	r2, [r3, #4]
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8014592:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	689a      	ldr	r2, [r3, #8]
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80145a2:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	689a      	ldr	r2, [r3, #8]
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	f042 0208 	orr.w	r2, r2, #8
 80145b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	681a      	ldr	r2, [r3, #0]
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	f042 0201 	orr.w	r2, r2, #1
 80145c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	f000 fddd 	bl	8015184 <UART_CheckIdleState>
 80145ca:	4603      	mov	r3, r0
}
 80145cc:	4618      	mov	r0, r3
 80145ce:	3708      	adds	r7, #8
 80145d0:	46bd      	mov	sp, r7
 80145d2:	bd80      	pop	{r7, pc}

080145d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b08a      	sub	sp, #40	@ 0x28
 80145d8:	af02      	add	r7, sp, #8
 80145da:	60f8      	str	r0, [r7, #12]
 80145dc:	60b9      	str	r1, [r7, #8]
 80145de:	603b      	str	r3, [r7, #0]
 80145e0:	4613      	mov	r3, r2
 80145e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80145e8:	2b20      	cmp	r3, #32
 80145ea:	d177      	bne.n	80146dc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80145ec:	68bb      	ldr	r3, [r7, #8]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d002      	beq.n	80145f8 <HAL_UART_Transmit+0x24>
 80145f2:	88fb      	ldrh	r3, [r7, #6]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d101      	bne.n	80145fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80145f8:	2301      	movs	r3, #1
 80145fa:	e070      	b.n	80146de <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	2200      	movs	r2, #0
 8014600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	2221      	movs	r2, #33	@ 0x21
 8014608:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801460a:	f7f6 fb0b 	bl	800ac24 <HAL_GetTick>
 801460e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	88fa      	ldrh	r2, [r7, #6]
 8014614:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	88fa      	ldrh	r2, [r7, #6]
 801461c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	689b      	ldr	r3, [r3, #8]
 8014624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014628:	d108      	bne.n	801463c <HAL_UART_Transmit+0x68>
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	691b      	ldr	r3, [r3, #16]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d104      	bne.n	801463c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8014632:	2300      	movs	r3, #0
 8014634:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8014636:	68bb      	ldr	r3, [r7, #8]
 8014638:	61bb      	str	r3, [r7, #24]
 801463a:	e003      	b.n	8014644 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801463c:	68bb      	ldr	r3, [r7, #8]
 801463e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014640:	2300      	movs	r3, #0
 8014642:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8014644:	e02f      	b.n	80146a6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014646:	683b      	ldr	r3, [r7, #0]
 8014648:	9300      	str	r3, [sp, #0]
 801464a:	697b      	ldr	r3, [r7, #20]
 801464c:	2200      	movs	r2, #0
 801464e:	2180      	movs	r1, #128	@ 0x80
 8014650:	68f8      	ldr	r0, [r7, #12]
 8014652:	f000 fe3f 	bl	80152d4 <UART_WaitOnFlagUntilTimeout>
 8014656:	4603      	mov	r3, r0
 8014658:	2b00      	cmp	r3, #0
 801465a:	d004      	beq.n	8014666 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	2220      	movs	r2, #32
 8014660:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8014662:	2303      	movs	r3, #3
 8014664:	e03b      	b.n	80146de <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8014666:	69fb      	ldr	r3, [r7, #28]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d10b      	bne.n	8014684 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801466c:	69bb      	ldr	r3, [r7, #24]
 801466e:	881a      	ldrh	r2, [r3, #0]
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014678:	b292      	uxth	r2, r2
 801467a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801467c:	69bb      	ldr	r3, [r7, #24]
 801467e:	3302      	adds	r3, #2
 8014680:	61bb      	str	r3, [r7, #24]
 8014682:	e007      	b.n	8014694 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8014684:	69fb      	ldr	r3, [r7, #28]
 8014686:	781a      	ldrb	r2, [r3, #0]
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801468e:	69fb      	ldr	r3, [r7, #28]
 8014690:	3301      	adds	r3, #1
 8014692:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801469a:	b29b      	uxth	r3, r3
 801469c:	3b01      	subs	r3, #1
 801469e:	b29a      	uxth	r2, r3
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80146ac:	b29b      	uxth	r3, r3
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d1c9      	bne.n	8014646 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	9300      	str	r3, [sp, #0]
 80146b6:	697b      	ldr	r3, [r7, #20]
 80146b8:	2200      	movs	r2, #0
 80146ba:	2140      	movs	r1, #64	@ 0x40
 80146bc:	68f8      	ldr	r0, [r7, #12]
 80146be:	f000 fe09 	bl	80152d4 <UART_WaitOnFlagUntilTimeout>
 80146c2:	4603      	mov	r3, r0
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d004      	beq.n	80146d2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	2220      	movs	r2, #32
 80146cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80146ce:	2303      	movs	r3, #3
 80146d0:	e005      	b.n	80146de <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	2220      	movs	r2, #32
 80146d6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80146d8:	2300      	movs	r3, #0
 80146da:	e000      	b.n	80146de <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80146dc:	2302      	movs	r3, #2
  }
}
 80146de:	4618      	mov	r0, r3
 80146e0:	3720      	adds	r7, #32
 80146e2:	46bd      	mov	sp, r7
 80146e4:	bd80      	pop	{r7, pc}

080146e6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80146e6:	b580      	push	{r7, lr}
 80146e8:	b08a      	sub	sp, #40	@ 0x28
 80146ea:	af02      	add	r7, sp, #8
 80146ec:	60f8      	str	r0, [r7, #12]
 80146ee:	60b9      	str	r1, [r7, #8]
 80146f0:	603b      	str	r3, [r7, #0]
 80146f2:	4613      	mov	r3, r2
 80146f4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80146fc:	2b20      	cmp	r3, #32
 80146fe:	f040 80b6 	bne.w	801486e <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8014702:	68bb      	ldr	r3, [r7, #8]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d002      	beq.n	801470e <HAL_UART_Receive+0x28>
 8014708:	88fb      	ldrh	r3, [r7, #6]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d101      	bne.n	8014712 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 801470e:	2301      	movs	r3, #1
 8014710:	e0ae      	b.n	8014870 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	2200      	movs	r2, #0
 8014716:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	2222      	movs	r2, #34	@ 0x22
 801471e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	2200      	movs	r2, #0
 8014726:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014728:	f7f6 fa7c 	bl	800ac24 <HAL_GetTick>
 801472c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	88fa      	ldrh	r2, [r7, #6]
 8014732:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	88fa      	ldrh	r2, [r7, #6]
 801473a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	689b      	ldr	r3, [r3, #8]
 8014742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014746:	d10e      	bne.n	8014766 <HAL_UART_Receive+0x80>
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	691b      	ldr	r3, [r3, #16]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d105      	bne.n	801475c <HAL_UART_Receive+0x76>
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8014756:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801475a:	e02d      	b.n	80147b8 <HAL_UART_Receive+0xd2>
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	22ff      	movs	r2, #255	@ 0xff
 8014760:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014764:	e028      	b.n	80147b8 <HAL_UART_Receive+0xd2>
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	689b      	ldr	r3, [r3, #8]
 801476a:	2b00      	cmp	r3, #0
 801476c:	d10d      	bne.n	801478a <HAL_UART_Receive+0xa4>
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	691b      	ldr	r3, [r3, #16]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d104      	bne.n	8014780 <HAL_UART_Receive+0x9a>
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	22ff      	movs	r2, #255	@ 0xff
 801477a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801477e:	e01b      	b.n	80147b8 <HAL_UART_Receive+0xd2>
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	227f      	movs	r2, #127	@ 0x7f
 8014784:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8014788:	e016      	b.n	80147b8 <HAL_UART_Receive+0xd2>
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	689b      	ldr	r3, [r3, #8]
 801478e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014792:	d10d      	bne.n	80147b0 <HAL_UART_Receive+0xca>
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	691b      	ldr	r3, [r3, #16]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d104      	bne.n	80147a6 <HAL_UART_Receive+0xc0>
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	227f      	movs	r2, #127	@ 0x7f
 80147a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80147a4:	e008      	b.n	80147b8 <HAL_UART_Receive+0xd2>
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	223f      	movs	r2, #63	@ 0x3f
 80147aa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80147ae:	e003      	b.n	80147b8 <HAL_UART_Receive+0xd2>
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	2200      	movs	r2, #0
 80147b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80147be:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	689b      	ldr	r3, [r3, #8]
 80147c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80147c8:	d108      	bne.n	80147dc <HAL_UART_Receive+0xf6>
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	691b      	ldr	r3, [r3, #16]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d104      	bne.n	80147dc <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80147d2:	2300      	movs	r3, #0
 80147d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80147d6:	68bb      	ldr	r3, [r7, #8]
 80147d8:	61bb      	str	r3, [r7, #24]
 80147da:	e003      	b.n	80147e4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80147dc:	68bb      	ldr	r3, [r7, #8]
 80147de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80147e0:	2300      	movs	r3, #0
 80147e2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80147e4:	e037      	b.n	8014856 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80147e6:	683b      	ldr	r3, [r7, #0]
 80147e8:	9300      	str	r3, [sp, #0]
 80147ea:	697b      	ldr	r3, [r7, #20]
 80147ec:	2200      	movs	r2, #0
 80147ee:	2120      	movs	r1, #32
 80147f0:	68f8      	ldr	r0, [r7, #12]
 80147f2:	f000 fd6f 	bl	80152d4 <UART_WaitOnFlagUntilTimeout>
 80147f6:	4603      	mov	r3, r0
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d005      	beq.n	8014808 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	2220      	movs	r2, #32
 8014800:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8014804:	2303      	movs	r3, #3
 8014806:	e033      	b.n	8014870 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8014808:	69fb      	ldr	r3, [r7, #28]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d10c      	bne.n	8014828 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014814:	b29a      	uxth	r2, r3
 8014816:	8a7b      	ldrh	r3, [r7, #18]
 8014818:	4013      	ands	r3, r2
 801481a:	b29a      	uxth	r2, r3
 801481c:	69bb      	ldr	r3, [r7, #24]
 801481e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8014820:	69bb      	ldr	r3, [r7, #24]
 8014822:	3302      	adds	r3, #2
 8014824:	61bb      	str	r3, [r7, #24]
 8014826:	e00d      	b.n	8014844 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801482e:	b29b      	uxth	r3, r3
 8014830:	b2da      	uxtb	r2, r3
 8014832:	8a7b      	ldrh	r3, [r7, #18]
 8014834:	b2db      	uxtb	r3, r3
 8014836:	4013      	ands	r3, r2
 8014838:	b2da      	uxtb	r2, r3
 801483a:	69fb      	ldr	r3, [r7, #28]
 801483c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801483e:	69fb      	ldr	r3, [r7, #28]
 8014840:	3301      	adds	r3, #1
 8014842:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801484a:	b29b      	uxth	r3, r3
 801484c:	3b01      	subs	r3, #1
 801484e:	b29a      	uxth	r2, r3
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801485c:	b29b      	uxth	r3, r3
 801485e:	2b00      	cmp	r3, #0
 8014860:	d1c1      	bne.n	80147e6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	2220      	movs	r2, #32
 8014866:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 801486a:	2300      	movs	r3, #0
 801486c:	e000      	b.n	8014870 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 801486e:	2302      	movs	r3, #2
  }
}
 8014870:	4618      	mov	r0, r3
 8014872:	3720      	adds	r7, #32
 8014874:	46bd      	mov	sp, r7
 8014876:	bd80      	pop	{r7, pc}

08014878 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b08a      	sub	sp, #40	@ 0x28
 801487c:	af00      	add	r7, sp, #0
 801487e:	60f8      	str	r0, [r7, #12]
 8014880:	60b9      	str	r1, [r7, #8]
 8014882:	4613      	mov	r3, r2
 8014884:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801488a:	2b20      	cmp	r3, #32
 801488c:	d165      	bne.n	801495a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 801488e:	68bb      	ldr	r3, [r7, #8]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d002      	beq.n	801489a <HAL_UART_Transmit_DMA+0x22>
 8014894:	88fb      	ldrh	r3, [r7, #6]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d101      	bne.n	801489e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 801489a:	2301      	movs	r3, #1
 801489c:	e05e      	b.n	801495c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	68ba      	ldr	r2, [r7, #8]
 80148a2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	88fa      	ldrh	r2, [r7, #6]
 80148a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	88fa      	ldrh	r2, [r7, #6]
 80148b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	2200      	movs	r2, #0
 80148b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	2221      	movs	r2, #33	@ 0x21
 80148c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d027      	beq.n	801491a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80148ce:	4a25      	ldr	r2, [pc, #148]	@ (8014964 <HAL_UART_Transmit_DMA+0xec>)
 80148d0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80148d6:	4a24      	ldr	r2, [pc, #144]	@ (8014968 <HAL_UART_Transmit_DMA+0xf0>)
 80148d8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80148de:	4a23      	ldr	r2, [pc, #140]	@ (801496c <HAL_UART_Transmit_DMA+0xf4>)
 80148e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80148e6:	2200      	movs	r2, #0
 80148e8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80148f2:	4619      	mov	r1, r3
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	3328      	adds	r3, #40	@ 0x28
 80148fa:	461a      	mov	r2, r3
 80148fc:	88fb      	ldrh	r3, [r7, #6]
 80148fe:	f7f8 f947 	bl	800cb90 <HAL_DMA_Start_IT>
 8014902:	4603      	mov	r3, r0
 8014904:	2b00      	cmp	r3, #0
 8014906:	d008      	beq.n	801491a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	2210      	movs	r2, #16
 801490c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	2220      	movs	r2, #32
 8014914:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8014916:	2301      	movs	r3, #1
 8014918:	e020      	b.n	801495c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	2240      	movs	r2, #64	@ 0x40
 8014920:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	3308      	adds	r3, #8
 8014928:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801492a:	697b      	ldr	r3, [r7, #20]
 801492c:	e853 3f00 	ldrex	r3, [r3]
 8014930:	613b      	str	r3, [r7, #16]
   return(result);
 8014932:	693b      	ldr	r3, [r7, #16]
 8014934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014938:	627b      	str	r3, [r7, #36]	@ 0x24
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	3308      	adds	r3, #8
 8014940:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014942:	623a      	str	r2, [r7, #32]
 8014944:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014946:	69f9      	ldr	r1, [r7, #28]
 8014948:	6a3a      	ldr	r2, [r7, #32]
 801494a:	e841 2300 	strex	r3, r2, [r1]
 801494e:	61bb      	str	r3, [r7, #24]
   return(result);
 8014950:	69bb      	ldr	r3, [r7, #24]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d1e5      	bne.n	8014922 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8014956:	2300      	movs	r3, #0
 8014958:	e000      	b.n	801495c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 801495a:	2302      	movs	r3, #2
  }
}
 801495c:	4618      	mov	r0, r3
 801495e:	3728      	adds	r7, #40	@ 0x28
 8014960:	46bd      	mov	sp, r7
 8014962:	bd80      	pop	{r7, pc}
 8014964:	08015605 	.word	0x08015605
 8014968:	0801569f 	.word	0x0801569f
 801496c:	08015825 	.word	0x08015825

08014970 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b090      	sub	sp, #64	@ 0x40
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801497c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014984:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	689b      	ldr	r3, [r3, #8]
 801498c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014990:	2b80      	cmp	r3, #128	@ 0x80
 8014992:	d139      	bne.n	8014a08 <HAL_UART_DMAStop+0x98>
 8014994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014996:	2b21      	cmp	r3, #33	@ 0x21
 8014998:	d136      	bne.n	8014a08 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	3308      	adds	r3, #8
 80149a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80149a2:	6a3b      	ldr	r3, [r7, #32]
 80149a4:	e853 3f00 	ldrex	r3, [r3]
 80149a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80149aa:	69fb      	ldr	r3, [r7, #28]
 80149ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80149b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	3308      	adds	r3, #8
 80149b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80149ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80149bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80149be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80149c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80149c2:	e841 2300 	strex	r3, r2, [r1]
 80149c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80149c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d1e5      	bne.n	801499a <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d015      	beq.n	8014a02 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80149da:	4618      	mov	r0, r3
 80149dc:	f7f8 f938 	bl	800cc50 <HAL_DMA_Abort>
 80149e0:	4603      	mov	r3, r0
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d00d      	beq.n	8014a02 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80149ea:	4618      	mov	r0, r3
 80149ec:	f7f8 fa1d 	bl	800ce2a <HAL_DMA_GetError>
 80149f0:	4603      	mov	r3, r0
 80149f2:	2b20      	cmp	r3, #32
 80149f4:	d105      	bne.n	8014a02 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	2210      	movs	r2, #16
 80149fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80149fe:	2303      	movs	r3, #3
 8014a00:	e044      	b.n	8014a8c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8014a02:	6878      	ldr	r0, [r7, #4]
 8014a04:	f000 fd74 	bl	80154f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	689b      	ldr	r3, [r3, #8]
 8014a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014a12:	2b40      	cmp	r3, #64	@ 0x40
 8014a14:	d139      	bne.n	8014a8a <HAL_UART_DMAStop+0x11a>
 8014a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a18:	2b22      	cmp	r3, #34	@ 0x22
 8014a1a:	d136      	bne.n	8014a8a <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	3308      	adds	r3, #8
 8014a22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	e853 3f00 	ldrex	r3, [r3]
 8014a2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8014a2c:	68bb      	ldr	r3, [r7, #8]
 8014a2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014a32:	633b      	str	r3, [r7, #48]	@ 0x30
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	3308      	adds	r3, #8
 8014a3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014a3c:	61ba      	str	r2, [r7, #24]
 8014a3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a40:	6979      	ldr	r1, [r7, #20]
 8014a42:	69ba      	ldr	r2, [r7, #24]
 8014a44:	e841 2300 	strex	r3, r2, [r1]
 8014a48:	613b      	str	r3, [r7, #16]
   return(result);
 8014a4a:	693b      	ldr	r3, [r7, #16]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d1e5      	bne.n	8014a1c <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d015      	beq.n	8014a84 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	f7f8 f8f7 	bl	800cc50 <HAL_DMA_Abort>
 8014a62:	4603      	mov	r3, r0
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d00d      	beq.n	8014a84 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	f7f8 f9dc 	bl	800ce2a <HAL_DMA_GetError>
 8014a72:	4603      	mov	r3, r0
 8014a74:	2b20      	cmp	r3, #32
 8014a76:	d105      	bne.n	8014a84 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	2210      	movs	r2, #16
 8014a7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8014a80:	2303      	movs	r3, #3
 8014a82:	e003      	b.n	8014a8c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8014a84:	6878      	ldr	r0, [r7, #4]
 8014a86:	f000 fd59 	bl	801553c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8014a8a:	2300      	movs	r3, #0
}
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	3740      	adds	r7, #64	@ 0x40
 8014a90:	46bd      	mov	sp, r7
 8014a92:	bd80      	pop	{r7, pc}

08014a94 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8014a94:	b480      	push	{r7}
 8014a96:	b083      	sub	sp, #12
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8014a9c:	bf00      	nop
 8014a9e:	370c      	adds	r7, #12
 8014aa0:	46bd      	mov	sp, r7
 8014aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa6:	4770      	bx	lr

08014aa8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8014aa8:	b480      	push	{r7}
 8014aaa:	b083      	sub	sp, #12
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8014ab0:	bf00      	nop
 8014ab2:	370c      	adds	r7, #12
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aba:	4770      	bx	lr

08014abc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014abc:	b480      	push	{r7}
 8014abe:	b083      	sub	sp, #12
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8014ac4:	bf00      	nop
 8014ac6:	370c      	adds	r7, #12
 8014ac8:	46bd      	mov	sp, r7
 8014aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ace:	4770      	bx	lr

08014ad0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014ad4:	b08a      	sub	sp, #40	@ 0x28
 8014ad6:	af00      	add	r7, sp, #0
 8014ad8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014ada:	2300      	movs	r3, #0
 8014adc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	689a      	ldr	r2, [r3, #8]
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	691b      	ldr	r3, [r3, #16]
 8014ae8:	431a      	orrs	r2, r3
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	695b      	ldr	r3, [r3, #20]
 8014aee:	431a      	orrs	r2, r3
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	69db      	ldr	r3, [r3, #28]
 8014af4:	4313      	orrs	r3, r2
 8014af6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	681a      	ldr	r2, [r3, #0]
 8014afe:	4ba4      	ldr	r3, [pc, #656]	@ (8014d90 <UART_SetConfig+0x2c0>)
 8014b00:	4013      	ands	r3, r2
 8014b02:	68fa      	ldr	r2, [r7, #12]
 8014b04:	6812      	ldr	r2, [r2, #0]
 8014b06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014b08:	430b      	orrs	r3, r1
 8014b0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	685b      	ldr	r3, [r3, #4]
 8014b12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	68da      	ldr	r2, [r3, #12]
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	430a      	orrs	r2, r1
 8014b20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	699b      	ldr	r3, [r3, #24]
 8014b26:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	4a99      	ldr	r2, [pc, #612]	@ (8014d94 <UART_SetConfig+0x2c4>)
 8014b2e:	4293      	cmp	r3, r2
 8014b30:	d004      	beq.n	8014b3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	6a1b      	ldr	r3, [r3, #32]
 8014b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014b38:	4313      	orrs	r3, r2
 8014b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	689b      	ldr	r3, [r3, #8]
 8014b42:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014b4c:	430a      	orrs	r2, r1
 8014b4e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	4a90      	ldr	r2, [pc, #576]	@ (8014d98 <UART_SetConfig+0x2c8>)
 8014b56:	4293      	cmp	r3, r2
 8014b58:	d126      	bne.n	8014ba8 <UART_SetConfig+0xd8>
 8014b5a:	4b90      	ldr	r3, [pc, #576]	@ (8014d9c <UART_SetConfig+0x2cc>)
 8014b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014b60:	f003 0303 	and.w	r3, r3, #3
 8014b64:	2b03      	cmp	r3, #3
 8014b66:	d81b      	bhi.n	8014ba0 <UART_SetConfig+0xd0>
 8014b68:	a201      	add	r2, pc, #4	@ (adr r2, 8014b70 <UART_SetConfig+0xa0>)
 8014b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b6e:	bf00      	nop
 8014b70:	08014b81 	.word	0x08014b81
 8014b74:	08014b91 	.word	0x08014b91
 8014b78:	08014b89 	.word	0x08014b89
 8014b7c:	08014b99 	.word	0x08014b99
 8014b80:	2301      	movs	r3, #1
 8014b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014b86:	e116      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014b88:	2302      	movs	r3, #2
 8014b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014b8e:	e112      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014b90:	2304      	movs	r3, #4
 8014b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014b96:	e10e      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014b98:	2308      	movs	r3, #8
 8014b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014b9e:	e10a      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014ba0:	2310      	movs	r3, #16
 8014ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014ba6:	e106      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	4a7c      	ldr	r2, [pc, #496]	@ (8014da0 <UART_SetConfig+0x2d0>)
 8014bae:	4293      	cmp	r3, r2
 8014bb0:	d138      	bne.n	8014c24 <UART_SetConfig+0x154>
 8014bb2:	4b7a      	ldr	r3, [pc, #488]	@ (8014d9c <UART_SetConfig+0x2cc>)
 8014bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014bb8:	f003 030c 	and.w	r3, r3, #12
 8014bbc:	2b0c      	cmp	r3, #12
 8014bbe:	d82d      	bhi.n	8014c1c <UART_SetConfig+0x14c>
 8014bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8014bc8 <UART_SetConfig+0xf8>)
 8014bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bc6:	bf00      	nop
 8014bc8:	08014bfd 	.word	0x08014bfd
 8014bcc:	08014c1d 	.word	0x08014c1d
 8014bd0:	08014c1d 	.word	0x08014c1d
 8014bd4:	08014c1d 	.word	0x08014c1d
 8014bd8:	08014c0d 	.word	0x08014c0d
 8014bdc:	08014c1d 	.word	0x08014c1d
 8014be0:	08014c1d 	.word	0x08014c1d
 8014be4:	08014c1d 	.word	0x08014c1d
 8014be8:	08014c05 	.word	0x08014c05
 8014bec:	08014c1d 	.word	0x08014c1d
 8014bf0:	08014c1d 	.word	0x08014c1d
 8014bf4:	08014c1d 	.word	0x08014c1d
 8014bf8:	08014c15 	.word	0x08014c15
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014c02:	e0d8      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014c04:	2302      	movs	r3, #2
 8014c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014c0a:	e0d4      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014c0c:	2304      	movs	r3, #4
 8014c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014c12:	e0d0      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014c14:	2308      	movs	r3, #8
 8014c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014c1a:	e0cc      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014c1c:	2310      	movs	r3, #16
 8014c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014c22:	e0c8      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	4a5e      	ldr	r2, [pc, #376]	@ (8014da4 <UART_SetConfig+0x2d4>)
 8014c2a:	4293      	cmp	r3, r2
 8014c2c:	d125      	bne.n	8014c7a <UART_SetConfig+0x1aa>
 8014c2e:	4b5b      	ldr	r3, [pc, #364]	@ (8014d9c <UART_SetConfig+0x2cc>)
 8014c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014c34:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8014c38:	2b30      	cmp	r3, #48	@ 0x30
 8014c3a:	d016      	beq.n	8014c6a <UART_SetConfig+0x19a>
 8014c3c:	2b30      	cmp	r3, #48	@ 0x30
 8014c3e:	d818      	bhi.n	8014c72 <UART_SetConfig+0x1a2>
 8014c40:	2b20      	cmp	r3, #32
 8014c42:	d00a      	beq.n	8014c5a <UART_SetConfig+0x18a>
 8014c44:	2b20      	cmp	r3, #32
 8014c46:	d814      	bhi.n	8014c72 <UART_SetConfig+0x1a2>
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d002      	beq.n	8014c52 <UART_SetConfig+0x182>
 8014c4c:	2b10      	cmp	r3, #16
 8014c4e:	d008      	beq.n	8014c62 <UART_SetConfig+0x192>
 8014c50:	e00f      	b.n	8014c72 <UART_SetConfig+0x1a2>
 8014c52:	2300      	movs	r3, #0
 8014c54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014c58:	e0ad      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014c5a:	2302      	movs	r3, #2
 8014c5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014c60:	e0a9      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014c62:	2304      	movs	r3, #4
 8014c64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014c68:	e0a5      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014c6a:	2308      	movs	r3, #8
 8014c6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014c70:	e0a1      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014c72:	2310      	movs	r3, #16
 8014c74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014c78:	e09d      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	4a4a      	ldr	r2, [pc, #296]	@ (8014da8 <UART_SetConfig+0x2d8>)
 8014c80:	4293      	cmp	r3, r2
 8014c82:	d125      	bne.n	8014cd0 <UART_SetConfig+0x200>
 8014c84:	4b45      	ldr	r3, [pc, #276]	@ (8014d9c <UART_SetConfig+0x2cc>)
 8014c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014c8a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8014c8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8014c90:	d016      	beq.n	8014cc0 <UART_SetConfig+0x1f0>
 8014c92:	2bc0      	cmp	r3, #192	@ 0xc0
 8014c94:	d818      	bhi.n	8014cc8 <UART_SetConfig+0x1f8>
 8014c96:	2b80      	cmp	r3, #128	@ 0x80
 8014c98:	d00a      	beq.n	8014cb0 <UART_SetConfig+0x1e0>
 8014c9a:	2b80      	cmp	r3, #128	@ 0x80
 8014c9c:	d814      	bhi.n	8014cc8 <UART_SetConfig+0x1f8>
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d002      	beq.n	8014ca8 <UART_SetConfig+0x1d8>
 8014ca2:	2b40      	cmp	r3, #64	@ 0x40
 8014ca4:	d008      	beq.n	8014cb8 <UART_SetConfig+0x1e8>
 8014ca6:	e00f      	b.n	8014cc8 <UART_SetConfig+0x1f8>
 8014ca8:	2300      	movs	r3, #0
 8014caa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014cae:	e082      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014cb0:	2302      	movs	r3, #2
 8014cb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014cb6:	e07e      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014cb8:	2304      	movs	r3, #4
 8014cba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014cbe:	e07a      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014cc0:	2308      	movs	r3, #8
 8014cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014cc6:	e076      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014cc8:	2310      	movs	r3, #16
 8014cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014cce:	e072      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	4a35      	ldr	r2, [pc, #212]	@ (8014dac <UART_SetConfig+0x2dc>)
 8014cd6:	4293      	cmp	r3, r2
 8014cd8:	d12a      	bne.n	8014d30 <UART_SetConfig+0x260>
 8014cda:	4b30      	ldr	r3, [pc, #192]	@ (8014d9c <UART_SetConfig+0x2cc>)
 8014cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014ce0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8014ce4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014ce8:	d01a      	beq.n	8014d20 <UART_SetConfig+0x250>
 8014cea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014cee:	d81b      	bhi.n	8014d28 <UART_SetConfig+0x258>
 8014cf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014cf4:	d00c      	beq.n	8014d10 <UART_SetConfig+0x240>
 8014cf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014cfa:	d815      	bhi.n	8014d28 <UART_SetConfig+0x258>
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d003      	beq.n	8014d08 <UART_SetConfig+0x238>
 8014d00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014d04:	d008      	beq.n	8014d18 <UART_SetConfig+0x248>
 8014d06:	e00f      	b.n	8014d28 <UART_SetConfig+0x258>
 8014d08:	2300      	movs	r3, #0
 8014d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014d0e:	e052      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014d10:	2302      	movs	r3, #2
 8014d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014d16:	e04e      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014d18:	2304      	movs	r3, #4
 8014d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014d1e:	e04a      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014d20:	2308      	movs	r3, #8
 8014d22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014d26:	e046      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014d28:	2310      	movs	r3, #16
 8014d2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014d2e:	e042      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	4a17      	ldr	r2, [pc, #92]	@ (8014d94 <UART_SetConfig+0x2c4>)
 8014d36:	4293      	cmp	r3, r2
 8014d38:	d13a      	bne.n	8014db0 <UART_SetConfig+0x2e0>
 8014d3a:	4b18      	ldr	r3, [pc, #96]	@ (8014d9c <UART_SetConfig+0x2cc>)
 8014d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014d40:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8014d44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8014d48:	d01a      	beq.n	8014d80 <UART_SetConfig+0x2b0>
 8014d4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8014d4e:	d81b      	bhi.n	8014d88 <UART_SetConfig+0x2b8>
 8014d50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014d54:	d00c      	beq.n	8014d70 <UART_SetConfig+0x2a0>
 8014d56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014d5a:	d815      	bhi.n	8014d88 <UART_SetConfig+0x2b8>
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d003      	beq.n	8014d68 <UART_SetConfig+0x298>
 8014d60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014d64:	d008      	beq.n	8014d78 <UART_SetConfig+0x2a8>
 8014d66:	e00f      	b.n	8014d88 <UART_SetConfig+0x2b8>
 8014d68:	2300      	movs	r3, #0
 8014d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014d6e:	e022      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014d70:	2302      	movs	r3, #2
 8014d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014d76:	e01e      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014d78:	2304      	movs	r3, #4
 8014d7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014d7e:	e01a      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014d80:	2308      	movs	r3, #8
 8014d82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014d86:	e016      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014d88:	2310      	movs	r3, #16
 8014d8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014d8e:	e012      	b.n	8014db6 <UART_SetConfig+0x2e6>
 8014d90:	efff69f3 	.word	0xefff69f3
 8014d94:	40008000 	.word	0x40008000
 8014d98:	40013800 	.word	0x40013800
 8014d9c:	40021000 	.word	0x40021000
 8014da0:	40004400 	.word	0x40004400
 8014da4:	40004800 	.word	0x40004800
 8014da8:	40004c00 	.word	0x40004c00
 8014dac:	40005000 	.word	0x40005000
 8014db0:	2310      	movs	r3, #16
 8014db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	4a9f      	ldr	r2, [pc, #636]	@ (8015038 <UART_SetConfig+0x568>)
 8014dbc:	4293      	cmp	r3, r2
 8014dbe:	d17a      	bne.n	8014eb6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8014dc0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014dc4:	2b08      	cmp	r3, #8
 8014dc6:	d824      	bhi.n	8014e12 <UART_SetConfig+0x342>
 8014dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8014dd0 <UART_SetConfig+0x300>)
 8014dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dce:	bf00      	nop
 8014dd0:	08014df5 	.word	0x08014df5
 8014dd4:	08014e13 	.word	0x08014e13
 8014dd8:	08014dfd 	.word	0x08014dfd
 8014ddc:	08014e13 	.word	0x08014e13
 8014de0:	08014e03 	.word	0x08014e03
 8014de4:	08014e13 	.word	0x08014e13
 8014de8:	08014e13 	.word	0x08014e13
 8014dec:	08014e13 	.word	0x08014e13
 8014df0:	08014e0b 	.word	0x08014e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014df4:	f7fb f8fe 	bl	800fff4 <HAL_RCC_GetPCLK1Freq>
 8014df8:	61f8      	str	r0, [r7, #28]
        break;
 8014dfa:	e010      	b.n	8014e1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8014dfc:	4b8f      	ldr	r3, [pc, #572]	@ (801503c <UART_SetConfig+0x56c>)
 8014dfe:	61fb      	str	r3, [r7, #28]
        break;
 8014e00:	e00d      	b.n	8014e1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014e02:	f7fb f85f 	bl	800fec4 <HAL_RCC_GetSysClockFreq>
 8014e06:	61f8      	str	r0, [r7, #28]
        break;
 8014e08:	e009      	b.n	8014e1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014e0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014e0e:	61fb      	str	r3, [r7, #28]
        break;
 8014e10:	e005      	b.n	8014e1e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8014e12:	2300      	movs	r3, #0
 8014e14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8014e16:	2301      	movs	r3, #1
 8014e18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8014e1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8014e1e:	69fb      	ldr	r3, [r7, #28]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	f000 80fb 	beq.w	801501c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	685a      	ldr	r2, [r3, #4]
 8014e2a:	4613      	mov	r3, r2
 8014e2c:	005b      	lsls	r3, r3, #1
 8014e2e:	4413      	add	r3, r2
 8014e30:	69fa      	ldr	r2, [r7, #28]
 8014e32:	429a      	cmp	r2, r3
 8014e34:	d305      	bcc.n	8014e42 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	685b      	ldr	r3, [r3, #4]
 8014e3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8014e3c:	69fa      	ldr	r2, [r7, #28]
 8014e3e:	429a      	cmp	r2, r3
 8014e40:	d903      	bls.n	8014e4a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8014e42:	2301      	movs	r3, #1
 8014e44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8014e48:	e0e8      	b.n	801501c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8014e4a:	69fb      	ldr	r3, [r7, #28]
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	461c      	mov	r4, r3
 8014e50:	4615      	mov	r5, r2
 8014e52:	f04f 0200 	mov.w	r2, #0
 8014e56:	f04f 0300 	mov.w	r3, #0
 8014e5a:	022b      	lsls	r3, r5, #8
 8014e5c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8014e60:	0222      	lsls	r2, r4, #8
 8014e62:	68f9      	ldr	r1, [r7, #12]
 8014e64:	6849      	ldr	r1, [r1, #4]
 8014e66:	0849      	lsrs	r1, r1, #1
 8014e68:	2000      	movs	r0, #0
 8014e6a:	4688      	mov	r8, r1
 8014e6c:	4681      	mov	r9, r0
 8014e6e:	eb12 0a08 	adds.w	sl, r2, r8
 8014e72:	eb43 0b09 	adc.w	fp, r3, r9
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	685b      	ldr	r3, [r3, #4]
 8014e7a:	2200      	movs	r2, #0
 8014e7c:	603b      	str	r3, [r7, #0]
 8014e7e:	607a      	str	r2, [r7, #4]
 8014e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014e84:	4650      	mov	r0, sl
 8014e86:	4659      	mov	r1, fp
 8014e88:	f7eb fdf8 	bl	8000a7c <__aeabi_uldivmod>
 8014e8c:	4602      	mov	r2, r0
 8014e8e:	460b      	mov	r3, r1
 8014e90:	4613      	mov	r3, r2
 8014e92:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8014e94:	69bb      	ldr	r3, [r7, #24]
 8014e96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014e9a:	d308      	bcc.n	8014eae <UART_SetConfig+0x3de>
 8014e9c:	69bb      	ldr	r3, [r7, #24]
 8014e9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014ea2:	d204      	bcs.n	8014eae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	69ba      	ldr	r2, [r7, #24]
 8014eaa:	60da      	str	r2, [r3, #12]
 8014eac:	e0b6      	b.n	801501c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8014eae:	2301      	movs	r3, #1
 8014eb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8014eb4:	e0b2      	b.n	801501c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	69db      	ldr	r3, [r3, #28]
 8014eba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014ebe:	d15e      	bne.n	8014f7e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8014ec0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014ec4:	2b08      	cmp	r3, #8
 8014ec6:	d828      	bhi.n	8014f1a <UART_SetConfig+0x44a>
 8014ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8014ed0 <UART_SetConfig+0x400>)
 8014eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ece:	bf00      	nop
 8014ed0:	08014ef5 	.word	0x08014ef5
 8014ed4:	08014efd 	.word	0x08014efd
 8014ed8:	08014f05 	.word	0x08014f05
 8014edc:	08014f1b 	.word	0x08014f1b
 8014ee0:	08014f0b 	.word	0x08014f0b
 8014ee4:	08014f1b 	.word	0x08014f1b
 8014ee8:	08014f1b 	.word	0x08014f1b
 8014eec:	08014f1b 	.word	0x08014f1b
 8014ef0:	08014f13 	.word	0x08014f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014ef4:	f7fb f87e 	bl	800fff4 <HAL_RCC_GetPCLK1Freq>
 8014ef8:	61f8      	str	r0, [r7, #28]
        break;
 8014efa:	e014      	b.n	8014f26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014efc:	f7fb f890 	bl	8010020 <HAL_RCC_GetPCLK2Freq>
 8014f00:	61f8      	str	r0, [r7, #28]
        break;
 8014f02:	e010      	b.n	8014f26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8014f04:	4b4d      	ldr	r3, [pc, #308]	@ (801503c <UART_SetConfig+0x56c>)
 8014f06:	61fb      	str	r3, [r7, #28]
        break;
 8014f08:	e00d      	b.n	8014f26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014f0a:	f7fa ffdb 	bl	800fec4 <HAL_RCC_GetSysClockFreq>
 8014f0e:	61f8      	str	r0, [r7, #28]
        break;
 8014f10:	e009      	b.n	8014f26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014f12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014f16:	61fb      	str	r3, [r7, #28]
        break;
 8014f18:	e005      	b.n	8014f26 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8014f1e:	2301      	movs	r3, #1
 8014f20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8014f24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8014f26:	69fb      	ldr	r3, [r7, #28]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d077      	beq.n	801501c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8014f2c:	69fb      	ldr	r3, [r7, #28]
 8014f2e:	005a      	lsls	r2, r3, #1
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	685b      	ldr	r3, [r3, #4]
 8014f34:	085b      	lsrs	r3, r3, #1
 8014f36:	441a      	add	r2, r3
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	685b      	ldr	r3, [r3, #4]
 8014f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014f40:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014f42:	69bb      	ldr	r3, [r7, #24]
 8014f44:	2b0f      	cmp	r3, #15
 8014f46:	d916      	bls.n	8014f76 <UART_SetConfig+0x4a6>
 8014f48:	69bb      	ldr	r3, [r7, #24]
 8014f4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014f4e:	d212      	bcs.n	8014f76 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014f50:	69bb      	ldr	r3, [r7, #24]
 8014f52:	b29b      	uxth	r3, r3
 8014f54:	f023 030f 	bic.w	r3, r3, #15
 8014f58:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014f5a:	69bb      	ldr	r3, [r7, #24]
 8014f5c:	085b      	lsrs	r3, r3, #1
 8014f5e:	b29b      	uxth	r3, r3
 8014f60:	f003 0307 	and.w	r3, r3, #7
 8014f64:	b29a      	uxth	r2, r3
 8014f66:	8afb      	ldrh	r3, [r7, #22]
 8014f68:	4313      	orrs	r3, r2
 8014f6a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	8afa      	ldrh	r2, [r7, #22]
 8014f72:	60da      	str	r2, [r3, #12]
 8014f74:	e052      	b.n	801501c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8014f76:	2301      	movs	r3, #1
 8014f78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8014f7c:	e04e      	b.n	801501c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8014f7e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014f82:	2b08      	cmp	r3, #8
 8014f84:	d827      	bhi.n	8014fd6 <UART_SetConfig+0x506>
 8014f86:	a201      	add	r2, pc, #4	@ (adr r2, 8014f8c <UART_SetConfig+0x4bc>)
 8014f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f8c:	08014fb1 	.word	0x08014fb1
 8014f90:	08014fb9 	.word	0x08014fb9
 8014f94:	08014fc1 	.word	0x08014fc1
 8014f98:	08014fd7 	.word	0x08014fd7
 8014f9c:	08014fc7 	.word	0x08014fc7
 8014fa0:	08014fd7 	.word	0x08014fd7
 8014fa4:	08014fd7 	.word	0x08014fd7
 8014fa8:	08014fd7 	.word	0x08014fd7
 8014fac:	08014fcf 	.word	0x08014fcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014fb0:	f7fb f820 	bl	800fff4 <HAL_RCC_GetPCLK1Freq>
 8014fb4:	61f8      	str	r0, [r7, #28]
        break;
 8014fb6:	e014      	b.n	8014fe2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014fb8:	f7fb f832 	bl	8010020 <HAL_RCC_GetPCLK2Freq>
 8014fbc:	61f8      	str	r0, [r7, #28]
        break;
 8014fbe:	e010      	b.n	8014fe2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8014fc0:	4b1e      	ldr	r3, [pc, #120]	@ (801503c <UART_SetConfig+0x56c>)
 8014fc2:	61fb      	str	r3, [r7, #28]
        break;
 8014fc4:	e00d      	b.n	8014fe2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014fc6:	f7fa ff7d 	bl	800fec4 <HAL_RCC_GetSysClockFreq>
 8014fca:	61f8      	str	r0, [r7, #28]
        break;
 8014fcc:	e009      	b.n	8014fe2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014fce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014fd2:	61fb      	str	r3, [r7, #28]
        break;
 8014fd4:	e005      	b.n	8014fe2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8014fda:	2301      	movs	r3, #1
 8014fdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8014fe0:	bf00      	nop
    }

    if (pclk != 0U)
 8014fe2:	69fb      	ldr	r3, [r7, #28]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d019      	beq.n	801501c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	685b      	ldr	r3, [r3, #4]
 8014fec:	085a      	lsrs	r2, r3, #1
 8014fee:	69fb      	ldr	r3, [r7, #28]
 8014ff0:	441a      	add	r2, r3
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	685b      	ldr	r3, [r3, #4]
 8014ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8014ffa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014ffc:	69bb      	ldr	r3, [r7, #24]
 8014ffe:	2b0f      	cmp	r3, #15
 8015000:	d909      	bls.n	8015016 <UART_SetConfig+0x546>
 8015002:	69bb      	ldr	r3, [r7, #24]
 8015004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015008:	d205      	bcs.n	8015016 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801500a:	69bb      	ldr	r3, [r7, #24]
 801500c:	b29a      	uxth	r2, r3
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	60da      	str	r2, [r3, #12]
 8015014:	e002      	b.n	801501c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8015016:	2301      	movs	r3, #1
 8015018:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	2200      	movs	r2, #0
 8015020:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	2200      	movs	r2, #0
 8015026:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8015028:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 801502c:	4618      	mov	r0, r3
 801502e:	3728      	adds	r7, #40	@ 0x28
 8015030:	46bd      	mov	sp, r7
 8015032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015036:	bf00      	nop
 8015038:	40008000 	.word	0x40008000
 801503c:	00f42400 	.word	0x00f42400

08015040 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015040:	b480      	push	{r7}
 8015042:	b083      	sub	sp, #12
 8015044:	af00      	add	r7, sp, #0
 8015046:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801504c:	f003 0308 	and.w	r3, r3, #8
 8015050:	2b00      	cmp	r3, #0
 8015052:	d00a      	beq.n	801506a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	685b      	ldr	r3, [r3, #4]
 801505a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	430a      	orrs	r2, r1
 8015068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801506e:	f003 0301 	and.w	r3, r3, #1
 8015072:	2b00      	cmp	r3, #0
 8015074:	d00a      	beq.n	801508c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	685b      	ldr	r3, [r3, #4]
 801507c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	430a      	orrs	r2, r1
 801508a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015090:	f003 0302 	and.w	r3, r3, #2
 8015094:	2b00      	cmp	r3, #0
 8015096:	d00a      	beq.n	80150ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	685b      	ldr	r3, [r3, #4]
 801509e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	430a      	orrs	r2, r1
 80150ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150b2:	f003 0304 	and.w	r3, r3, #4
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d00a      	beq.n	80150d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	685b      	ldr	r3, [r3, #4]
 80150c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	430a      	orrs	r2, r1
 80150ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150d4:	f003 0310 	and.w	r3, r3, #16
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d00a      	beq.n	80150f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	689b      	ldr	r3, [r3, #8]
 80150e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	430a      	orrs	r2, r1
 80150f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150f6:	f003 0320 	and.w	r3, r3, #32
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d00a      	beq.n	8015114 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	689b      	ldr	r3, [r3, #8]
 8015104:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	430a      	orrs	r2, r1
 8015112:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801511c:	2b00      	cmp	r3, #0
 801511e:	d01a      	beq.n	8015156 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	685b      	ldr	r3, [r3, #4]
 8015126:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	430a      	orrs	r2, r1
 8015134:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801513a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801513e:	d10a      	bne.n	8015156 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	685b      	ldr	r3, [r3, #4]
 8015146:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	430a      	orrs	r2, r1
 8015154:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801515a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801515e:	2b00      	cmp	r3, #0
 8015160:	d00a      	beq.n	8015178 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	685b      	ldr	r3, [r3, #4]
 8015168:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	430a      	orrs	r2, r1
 8015176:	605a      	str	r2, [r3, #4]
  }
}
 8015178:	bf00      	nop
 801517a:	370c      	adds	r7, #12
 801517c:	46bd      	mov	sp, r7
 801517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015182:	4770      	bx	lr

08015184 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015184:	b580      	push	{r7, lr}
 8015186:	b098      	sub	sp, #96	@ 0x60
 8015188:	af02      	add	r7, sp, #8
 801518a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	2200      	movs	r2, #0
 8015190:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015194:	f7f5 fd46 	bl	800ac24 <HAL_GetTick>
 8015198:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	f003 0308 	and.w	r3, r3, #8
 80151a4:	2b08      	cmp	r3, #8
 80151a6:	d12e      	bne.n	8015206 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80151a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80151ac:	9300      	str	r3, [sp, #0]
 80151ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80151b0:	2200      	movs	r2, #0
 80151b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80151b6:	6878      	ldr	r0, [r7, #4]
 80151b8:	f000 f88c 	bl	80152d4 <UART_WaitOnFlagUntilTimeout>
 80151bc:	4603      	mov	r3, r0
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d021      	beq.n	8015206 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80151c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80151ca:	e853 3f00 	ldrex	r3, [r3]
 80151ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80151d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80151d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80151d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	461a      	mov	r2, r3
 80151de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80151e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80151e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80151e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80151e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80151e8:	e841 2300 	strex	r3, r2, [r1]
 80151ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80151ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d1e6      	bne.n	80151c2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	2220      	movs	r2, #32
 80151f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	2200      	movs	r2, #0
 80151fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015202:	2303      	movs	r3, #3
 8015204:	e062      	b.n	80152cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	f003 0304 	and.w	r3, r3, #4
 8015210:	2b04      	cmp	r3, #4
 8015212:	d149      	bne.n	80152a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015214:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8015218:	9300      	str	r3, [sp, #0]
 801521a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801521c:	2200      	movs	r2, #0
 801521e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8015222:	6878      	ldr	r0, [r7, #4]
 8015224:	f000 f856 	bl	80152d4 <UART_WaitOnFlagUntilTimeout>
 8015228:	4603      	mov	r3, r0
 801522a:	2b00      	cmp	r3, #0
 801522c:	d03c      	beq.n	80152a8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015236:	e853 3f00 	ldrex	r3, [r3]
 801523a:	623b      	str	r3, [r7, #32]
   return(result);
 801523c:	6a3b      	ldr	r3, [r7, #32]
 801523e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8015242:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	461a      	mov	r2, r3
 801524a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801524c:	633b      	str	r3, [r7, #48]	@ 0x30
 801524e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015250:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015252:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015254:	e841 2300 	strex	r3, r2, [r1]
 8015258:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801525a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801525c:	2b00      	cmp	r3, #0
 801525e:	d1e6      	bne.n	801522e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	3308      	adds	r3, #8
 8015266:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015268:	693b      	ldr	r3, [r7, #16]
 801526a:	e853 3f00 	ldrex	r3, [r3]
 801526e:	60fb      	str	r3, [r7, #12]
   return(result);
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	f023 0301 	bic.w	r3, r3, #1
 8015276:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	3308      	adds	r3, #8
 801527e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015280:	61fa      	str	r2, [r7, #28]
 8015282:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015284:	69b9      	ldr	r1, [r7, #24]
 8015286:	69fa      	ldr	r2, [r7, #28]
 8015288:	e841 2300 	strex	r3, r2, [r1]
 801528c:	617b      	str	r3, [r7, #20]
   return(result);
 801528e:	697b      	ldr	r3, [r7, #20]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d1e5      	bne.n	8015260 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	2220      	movs	r2, #32
 8015298:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	2200      	movs	r2, #0
 80152a0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80152a4:	2303      	movs	r3, #3
 80152a6:	e011      	b.n	80152cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	2220      	movs	r2, #32
 80152ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	2220      	movs	r2, #32
 80152b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	2200      	movs	r2, #0
 80152ba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	2200      	movs	r2, #0
 80152c0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	2200      	movs	r2, #0
 80152c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80152ca:	2300      	movs	r3, #0
}
 80152cc:	4618      	mov	r0, r3
 80152ce:	3758      	adds	r7, #88	@ 0x58
 80152d0:	46bd      	mov	sp, r7
 80152d2:	bd80      	pop	{r7, pc}

080152d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b084      	sub	sp, #16
 80152d8:	af00      	add	r7, sp, #0
 80152da:	60f8      	str	r0, [r7, #12]
 80152dc:	60b9      	str	r1, [r7, #8]
 80152de:	603b      	str	r3, [r7, #0]
 80152e0:	4613      	mov	r3, r2
 80152e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80152e4:	e04f      	b.n	8015386 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80152e6:	69bb      	ldr	r3, [r7, #24]
 80152e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152ec:	d04b      	beq.n	8015386 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80152ee:	f7f5 fc99 	bl	800ac24 <HAL_GetTick>
 80152f2:	4602      	mov	r2, r0
 80152f4:	683b      	ldr	r3, [r7, #0]
 80152f6:	1ad3      	subs	r3, r2, r3
 80152f8:	69ba      	ldr	r2, [r7, #24]
 80152fa:	429a      	cmp	r2, r3
 80152fc:	d302      	bcc.n	8015304 <UART_WaitOnFlagUntilTimeout+0x30>
 80152fe:	69bb      	ldr	r3, [r7, #24]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d101      	bne.n	8015308 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015304:	2303      	movs	r3, #3
 8015306:	e04e      	b.n	80153a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	f003 0304 	and.w	r3, r3, #4
 8015312:	2b00      	cmp	r3, #0
 8015314:	d037      	beq.n	8015386 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015316:	68bb      	ldr	r3, [r7, #8]
 8015318:	2b80      	cmp	r3, #128	@ 0x80
 801531a:	d034      	beq.n	8015386 <UART_WaitOnFlagUntilTimeout+0xb2>
 801531c:	68bb      	ldr	r3, [r7, #8]
 801531e:	2b40      	cmp	r3, #64	@ 0x40
 8015320:	d031      	beq.n	8015386 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	69db      	ldr	r3, [r3, #28]
 8015328:	f003 0308 	and.w	r3, r3, #8
 801532c:	2b08      	cmp	r3, #8
 801532e:	d110      	bne.n	8015352 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	2208      	movs	r2, #8
 8015336:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015338:	68f8      	ldr	r0, [r7, #12]
 801533a:	f000 f8ff 	bl	801553c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	2208      	movs	r2, #8
 8015342:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	2200      	movs	r2, #0
 801534a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 801534e:	2301      	movs	r3, #1
 8015350:	e029      	b.n	80153a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	69db      	ldr	r3, [r3, #28]
 8015358:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801535c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015360:	d111      	bne.n	8015386 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801536a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801536c:	68f8      	ldr	r0, [r7, #12]
 801536e:	f000 f8e5 	bl	801553c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	2220      	movs	r2, #32
 8015376:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	2200      	movs	r2, #0
 801537e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8015382:	2303      	movs	r3, #3
 8015384:	e00f      	b.n	80153a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	69da      	ldr	r2, [r3, #28]
 801538c:	68bb      	ldr	r3, [r7, #8]
 801538e:	4013      	ands	r3, r2
 8015390:	68ba      	ldr	r2, [r7, #8]
 8015392:	429a      	cmp	r2, r3
 8015394:	bf0c      	ite	eq
 8015396:	2301      	moveq	r3, #1
 8015398:	2300      	movne	r3, #0
 801539a:	b2db      	uxtb	r3, r3
 801539c:	461a      	mov	r2, r3
 801539e:	79fb      	ldrb	r3, [r7, #7]
 80153a0:	429a      	cmp	r2, r3
 80153a2:	d0a0      	beq.n	80152e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80153a4:	2300      	movs	r3, #0
}
 80153a6:	4618      	mov	r0, r3
 80153a8:	3710      	adds	r7, #16
 80153aa:	46bd      	mov	sp, r7
 80153ac:	bd80      	pop	{r7, pc}
	...

080153b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b096      	sub	sp, #88	@ 0x58
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	60f8      	str	r0, [r7, #12]
 80153b8:	60b9      	str	r1, [r7, #8]
 80153ba:	4613      	mov	r3, r2
 80153bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	68ba      	ldr	r2, [r7, #8]
 80153c2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	88fa      	ldrh	r2, [r7, #6]
 80153c8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	2200      	movs	r2, #0
 80153d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	2222      	movs	r2, #34	@ 0x22
 80153d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d028      	beq.n	8015436 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80153e8:	4a3e      	ldr	r2, [pc, #248]	@ (80154e4 <UART_Start_Receive_DMA+0x134>)
 80153ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80153f0:	4a3d      	ldr	r2, [pc, #244]	@ (80154e8 <UART_Start_Receive_DMA+0x138>)
 80153f2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80153f8:	4a3c      	ldr	r2, [pc, #240]	@ (80154ec <UART_Start_Receive_DMA+0x13c>)
 80153fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015400:	2200      	movs	r2, #0
 8015402:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	3324      	adds	r3, #36	@ 0x24
 801540e:	4619      	mov	r1, r3
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015414:	461a      	mov	r2, r3
 8015416:	88fb      	ldrh	r3, [r7, #6]
 8015418:	f7f7 fbba 	bl	800cb90 <HAL_DMA_Start_IT>
 801541c:	4603      	mov	r3, r0
 801541e:	2b00      	cmp	r3, #0
 8015420:	d009      	beq.n	8015436 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	2210      	movs	r2, #16
 8015426:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	2220      	movs	r2, #32
 801542e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8015432:	2301      	movs	r3, #1
 8015434:	e051      	b.n	80154da <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	691b      	ldr	r3, [r3, #16]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d018      	beq.n	8015470 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015446:	e853 3f00 	ldrex	r3, [r3]
 801544a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801544c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801544e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015452:	657b      	str	r3, [r7, #84]	@ 0x54
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	461a      	mov	r2, r3
 801545a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801545c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801545e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015460:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8015462:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015464:	e841 2300 	strex	r3, r2, [r1]
 8015468:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801546a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801546c:	2b00      	cmp	r3, #0
 801546e:	d1e6      	bne.n	801543e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	3308      	adds	r3, #8
 8015476:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801547a:	e853 3f00 	ldrex	r3, [r3]
 801547e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015482:	f043 0301 	orr.w	r3, r3, #1
 8015486:	653b      	str	r3, [r7, #80]	@ 0x50
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	3308      	adds	r3, #8
 801548e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015490:	637a      	str	r2, [r7, #52]	@ 0x34
 8015492:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015494:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015496:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015498:	e841 2300 	strex	r3, r2, [r1]
 801549c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801549e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d1e5      	bne.n	8015470 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	3308      	adds	r3, #8
 80154aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80154ac:	697b      	ldr	r3, [r7, #20]
 80154ae:	e853 3f00 	ldrex	r3, [r3]
 80154b2:	613b      	str	r3, [r7, #16]
   return(result);
 80154b4:	693b      	ldr	r3, [r7, #16]
 80154b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80154ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	3308      	adds	r3, #8
 80154c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80154c4:	623a      	str	r2, [r7, #32]
 80154c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80154c8:	69f9      	ldr	r1, [r7, #28]
 80154ca:	6a3a      	ldr	r2, [r7, #32]
 80154cc:	e841 2300 	strex	r3, r2, [r1]
 80154d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80154d2:	69bb      	ldr	r3, [r7, #24]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d1e5      	bne.n	80154a4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80154d8:	2300      	movs	r3, #0
}
 80154da:	4618      	mov	r0, r3
 80154dc:	3758      	adds	r7, #88	@ 0x58
 80154de:	46bd      	mov	sp, r7
 80154e0:	bd80      	pop	{r7, pc}
 80154e2:	bf00      	nop
 80154e4:	080156bb 	.word	0x080156bb
 80154e8:	080157e7 	.word	0x080157e7
 80154ec:	08015825 	.word	0x08015825

080154f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80154f0:	b480      	push	{r7}
 80154f2:	b089      	sub	sp, #36	@ 0x24
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	e853 3f00 	ldrex	r3, [r3]
 8015504:	60bb      	str	r3, [r7, #8]
   return(result);
 8015506:	68bb      	ldr	r3, [r7, #8]
 8015508:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801550c:	61fb      	str	r3, [r7, #28]
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	461a      	mov	r2, r3
 8015514:	69fb      	ldr	r3, [r7, #28]
 8015516:	61bb      	str	r3, [r7, #24]
 8015518:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801551a:	6979      	ldr	r1, [r7, #20]
 801551c:	69ba      	ldr	r2, [r7, #24]
 801551e:	e841 2300 	strex	r3, r2, [r1]
 8015522:	613b      	str	r3, [r7, #16]
   return(result);
 8015524:	693b      	ldr	r3, [r7, #16]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d1e6      	bne.n	80154f8 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	2220      	movs	r2, #32
 801552e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8015530:	bf00      	nop
 8015532:	3724      	adds	r7, #36	@ 0x24
 8015534:	46bd      	mov	sp, r7
 8015536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801553a:	4770      	bx	lr

0801553c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801553c:	b480      	push	{r7}
 801553e:	b095      	sub	sp, #84	@ 0x54
 8015540:	af00      	add	r7, sp, #0
 8015542:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801554a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801554c:	e853 3f00 	ldrex	r3, [r3]
 8015550:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8015552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015554:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8015558:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	461a      	mov	r2, r3
 8015560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015562:	643b      	str	r3, [r7, #64]	@ 0x40
 8015564:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015566:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015568:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801556a:	e841 2300 	strex	r3, r2, [r1]
 801556e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8015570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015572:	2b00      	cmp	r3, #0
 8015574:	d1e6      	bne.n	8015544 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	3308      	adds	r3, #8
 801557c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801557e:	6a3b      	ldr	r3, [r7, #32]
 8015580:	e853 3f00 	ldrex	r3, [r3]
 8015584:	61fb      	str	r3, [r7, #28]
   return(result);
 8015586:	69fb      	ldr	r3, [r7, #28]
 8015588:	f023 0301 	bic.w	r3, r3, #1
 801558c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	3308      	adds	r3, #8
 8015594:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015596:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8015598:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801559a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801559c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801559e:	e841 2300 	strex	r3, r2, [r1]
 80155a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80155a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d1e5      	bne.n	8015576 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80155ae:	2b01      	cmp	r3, #1
 80155b0:	d118      	bne.n	80155e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	e853 3f00 	ldrex	r3, [r3]
 80155be:	60bb      	str	r3, [r7, #8]
   return(result);
 80155c0:	68bb      	ldr	r3, [r7, #8]
 80155c2:	f023 0310 	bic.w	r3, r3, #16
 80155c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	461a      	mov	r2, r3
 80155ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80155d0:	61bb      	str	r3, [r7, #24]
 80155d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80155d4:	6979      	ldr	r1, [r7, #20]
 80155d6:	69ba      	ldr	r2, [r7, #24]
 80155d8:	e841 2300 	strex	r3, r2, [r1]
 80155dc:	613b      	str	r3, [r7, #16]
   return(result);
 80155de:	693b      	ldr	r3, [r7, #16]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d1e6      	bne.n	80155b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	2220      	movs	r2, #32
 80155e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	2200      	movs	r2, #0
 80155f0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	2200      	movs	r2, #0
 80155f6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80155f8:	bf00      	nop
 80155fa:	3754      	adds	r7, #84	@ 0x54
 80155fc:	46bd      	mov	sp, r7
 80155fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015602:	4770      	bx	lr

08015604 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015604:	b580      	push	{r7, lr}
 8015606:	b090      	sub	sp, #64	@ 0x40
 8015608:	af00      	add	r7, sp, #0
 801560a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015610:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	f003 0320 	and.w	r3, r3, #32
 801561c:	2b00      	cmp	r3, #0
 801561e:	d137      	bne.n	8015690 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8015620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015622:	2200      	movs	r2, #0
 8015624:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	3308      	adds	r3, #8
 801562e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015632:	e853 3f00 	ldrex	r3, [r3]
 8015636:	623b      	str	r3, [r7, #32]
   return(result);
 8015638:	6a3b      	ldr	r3, [r7, #32]
 801563a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801563e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	3308      	adds	r3, #8
 8015646:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015648:	633a      	str	r2, [r7, #48]	@ 0x30
 801564a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801564c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801564e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015650:	e841 2300 	strex	r3, r2, [r1]
 8015654:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015658:	2b00      	cmp	r3, #0
 801565a:	d1e5      	bne.n	8015628 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801565c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015662:	693b      	ldr	r3, [r7, #16]
 8015664:	e853 3f00 	ldrex	r3, [r3]
 8015668:	60fb      	str	r3, [r7, #12]
   return(result);
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015670:	637b      	str	r3, [r7, #52]	@ 0x34
 8015672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	461a      	mov	r2, r3
 8015678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801567a:	61fb      	str	r3, [r7, #28]
 801567c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801567e:	69b9      	ldr	r1, [r7, #24]
 8015680:	69fa      	ldr	r2, [r7, #28]
 8015682:	e841 2300 	strex	r3, r2, [r1]
 8015686:	617b      	str	r3, [r7, #20]
   return(result);
 8015688:	697b      	ldr	r3, [r7, #20]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d1e6      	bne.n	801565c <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801568e:	e002      	b.n	8015696 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8015690:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015692:	f7ed f92b 	bl	80028ec <HAL_UART_TxCpltCallback>
}
 8015696:	bf00      	nop
 8015698:	3740      	adds	r7, #64	@ 0x40
 801569a:	46bd      	mov	sp, r7
 801569c:	bd80      	pop	{r7, pc}

0801569e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801569e:	b580      	push	{r7, lr}
 80156a0:	b084      	sub	sp, #16
 80156a2:	af00      	add	r7, sp, #0
 80156a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80156aa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80156ac:	68f8      	ldr	r0, [r7, #12]
 80156ae:	f7ff f9f1 	bl	8014a94 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80156b2:	bf00      	nop
 80156b4:	3710      	adds	r7, #16
 80156b6:	46bd      	mov	sp, r7
 80156b8:	bd80      	pop	{r7, pc}

080156ba <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80156ba:	b580      	push	{r7, lr}
 80156bc:	b09c      	sub	sp, #112	@ 0x70
 80156be:	af00      	add	r7, sp, #0
 80156c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80156c6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	f003 0320 	and.w	r3, r3, #32
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d171      	bne.n	80157ba <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80156d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80156d8:	2200      	movs	r2, #0
 80156da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80156de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80156e6:	e853 3f00 	ldrex	r3, [r3]
 80156ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80156ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80156ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80156f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80156f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	461a      	mov	r2, r3
 80156fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80156fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80156fe:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015700:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8015702:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015704:	e841 2300 	strex	r3, r2, [r1]
 8015708:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801570a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801570c:	2b00      	cmp	r3, #0
 801570e:	d1e6      	bne.n	80156de <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015710:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	3308      	adds	r3, #8
 8015716:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801571a:	e853 3f00 	ldrex	r3, [r3]
 801571e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8015720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015722:	f023 0301 	bic.w	r3, r3, #1
 8015726:	667b      	str	r3, [r7, #100]	@ 0x64
 8015728:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	3308      	adds	r3, #8
 801572e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8015730:	647a      	str	r2, [r7, #68]	@ 0x44
 8015732:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015734:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015736:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015738:	e841 2300 	strex	r3, r2, [r1]
 801573c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801573e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015740:	2b00      	cmp	r3, #0
 8015742:	d1e5      	bne.n	8015710 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015744:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	3308      	adds	r3, #8
 801574a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801574e:	e853 3f00 	ldrex	r3, [r3]
 8015752:	623b      	str	r3, [r7, #32]
   return(result);
 8015754:	6a3b      	ldr	r3, [r7, #32]
 8015756:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801575a:	663b      	str	r3, [r7, #96]	@ 0x60
 801575c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	3308      	adds	r3, #8
 8015762:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8015764:	633a      	str	r2, [r7, #48]	@ 0x30
 8015766:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015768:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801576a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801576c:	e841 2300 	strex	r3, r2, [r1]
 8015770:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015774:	2b00      	cmp	r3, #0
 8015776:	d1e5      	bne.n	8015744 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015778:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801577a:	2220      	movs	r2, #32
 801577c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015780:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015784:	2b01      	cmp	r3, #1
 8015786:	d118      	bne.n	80157ba <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015788:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801578e:	693b      	ldr	r3, [r7, #16]
 8015790:	e853 3f00 	ldrex	r3, [r3]
 8015794:	60fb      	str	r3, [r7, #12]
   return(result);
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	f023 0310 	bic.w	r3, r3, #16
 801579c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801579e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	461a      	mov	r2, r3
 80157a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80157a6:	61fb      	str	r3, [r7, #28]
 80157a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80157aa:	69b9      	ldr	r1, [r7, #24]
 80157ac:	69fa      	ldr	r2, [r7, #28]
 80157ae:	e841 2300 	strex	r3, r2, [r1]
 80157b2:	617b      	str	r3, [r7, #20]
   return(result);
 80157b4:	697b      	ldr	r3, [r7, #20]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d1e6      	bne.n	8015788 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80157ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80157bc:	2200      	movs	r2, #0
 80157be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80157c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80157c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80157c4:	2b01      	cmp	r3, #1
 80157c6:	d107      	bne.n	80157d8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80157c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80157ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80157ce:	4619      	mov	r1, r3
 80157d0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80157d2:	f7ed f803 	bl	80027dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80157d6:	e002      	b.n	80157de <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80157d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80157da:	f7ed f87d 	bl	80028d8 <HAL_UART_RxCpltCallback>
}
 80157de:	bf00      	nop
 80157e0:	3770      	adds	r7, #112	@ 0x70
 80157e2:	46bd      	mov	sp, r7
 80157e4:	bd80      	pop	{r7, pc}

080157e6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80157e6:	b580      	push	{r7, lr}
 80157e8:	b084      	sub	sp, #16
 80157ea:	af00      	add	r7, sp, #0
 80157ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80157f2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	2201      	movs	r2, #1
 80157f8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80157fe:	2b01      	cmp	r3, #1
 8015800:	d109      	bne.n	8015816 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8015808:	085b      	lsrs	r3, r3, #1
 801580a:	b29b      	uxth	r3, r3
 801580c:	4619      	mov	r1, r3
 801580e:	68f8      	ldr	r0, [r7, #12]
 8015810:	f7ec ffe4 	bl	80027dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015814:	e002      	b.n	801581c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8015816:	68f8      	ldr	r0, [r7, #12]
 8015818:	f7ff f946 	bl	8014aa8 <HAL_UART_RxHalfCpltCallback>
}
 801581c:	bf00      	nop
 801581e:	3710      	adds	r7, #16
 8015820:	46bd      	mov	sp, r7
 8015822:	bd80      	pop	{r7, pc}

08015824 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b086      	sub	sp, #24
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015830:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8015832:	697b      	ldr	r3, [r7, #20]
 8015834:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015836:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8015838:	697b      	ldr	r3, [r7, #20]
 801583a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801583e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8015840:	697b      	ldr	r3, [r7, #20]
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	689b      	ldr	r3, [r3, #8]
 8015846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801584a:	2b80      	cmp	r3, #128	@ 0x80
 801584c:	d109      	bne.n	8015862 <UART_DMAError+0x3e>
 801584e:	693b      	ldr	r3, [r7, #16]
 8015850:	2b21      	cmp	r3, #33	@ 0x21
 8015852:	d106      	bne.n	8015862 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8015854:	697b      	ldr	r3, [r7, #20]
 8015856:	2200      	movs	r2, #0
 8015858:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 801585c:	6978      	ldr	r0, [r7, #20]
 801585e:	f7ff fe47 	bl	80154f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8015862:	697b      	ldr	r3, [r7, #20]
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	689b      	ldr	r3, [r3, #8]
 8015868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801586c:	2b40      	cmp	r3, #64	@ 0x40
 801586e:	d109      	bne.n	8015884 <UART_DMAError+0x60>
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	2b22      	cmp	r3, #34	@ 0x22
 8015874:	d106      	bne.n	8015884 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8015876:	697b      	ldr	r3, [r7, #20]
 8015878:	2200      	movs	r2, #0
 801587a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 801587e:	6978      	ldr	r0, [r7, #20]
 8015880:	f7ff fe5c 	bl	801553c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8015884:	697b      	ldr	r3, [r7, #20]
 8015886:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801588a:	f043 0210 	orr.w	r2, r3, #16
 801588e:	697b      	ldr	r3, [r7, #20]
 8015890:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015894:	6978      	ldr	r0, [r7, #20]
 8015896:	f7ff f911 	bl	8014abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801589a:	bf00      	nop
 801589c:	3718      	adds	r7, #24
 801589e:	46bd      	mov	sp, r7
 80158a0:	bd80      	pop	{r7, pc}

080158a2 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 80158a2:	b580      	push	{r7, lr}
 80158a4:	b088      	sub	sp, #32
 80158a6:	af00      	add	r7, sp, #0
 80158a8:	60f8      	str	r0, [r7, #12]
 80158aa:	60b9      	str	r1, [r7, #8]
 80158ac:	603b      	str	r3, [r7, #0]
 80158ae:	4613      	mov	r3, r2
 80158b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80158b8:	2b20      	cmp	r3, #32
 80158ba:	f040 80f0 	bne.w	8015a9e <HAL_UARTEx_ReceiveToIdle+0x1fc>
  {
    if ((pData == NULL) || (Size == 0U))
 80158be:	68bb      	ldr	r3, [r7, #8]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d002      	beq.n	80158ca <HAL_UARTEx_ReceiveToIdle+0x28>
 80158c4:	88fb      	ldrh	r3, [r7, #6]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d101      	bne.n	80158ce <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 80158ca:	2301      	movs	r3, #1
 80158cc:	e0e8      	b.n	8015aa0 <HAL_UARTEx_ReceiveToIdle+0x1fe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	2200      	movs	r2, #0
 80158d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	2222      	movs	r2, #34	@ 0x22
 80158da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	2201      	movs	r2, #1
 80158e2:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	2200      	movs	r2, #0
 80158e8:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80158ea:	f7f5 f99b 	bl	800ac24 <HAL_GetTick>
 80158ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	88fa      	ldrh	r2, [r7, #6]
 80158f4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	88fa      	ldrh	r2, [r7, #6]
 80158fc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8015900:	68fb      	ldr	r3, [r7, #12]
 8015902:	689b      	ldr	r3, [r3, #8]
 8015904:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015908:	d10e      	bne.n	8015928 <HAL_UARTEx_ReceiveToIdle+0x86>
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	691b      	ldr	r3, [r3, #16]
 801590e:	2b00      	cmp	r3, #0
 8015910:	d105      	bne.n	801591e <HAL_UARTEx_ReceiveToIdle+0x7c>
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8015918:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801591c:	e02d      	b.n	801597a <HAL_UARTEx_ReceiveToIdle+0xd8>
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	22ff      	movs	r2, #255	@ 0xff
 8015922:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015926:	e028      	b.n	801597a <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	689b      	ldr	r3, [r3, #8]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d10d      	bne.n	801594c <HAL_UARTEx_ReceiveToIdle+0xaa>
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	691b      	ldr	r3, [r3, #16]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d104      	bne.n	8015942 <HAL_UARTEx_ReceiveToIdle+0xa0>
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	22ff      	movs	r2, #255	@ 0xff
 801593c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015940:	e01b      	b.n	801597a <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	227f      	movs	r2, #127	@ 0x7f
 8015946:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801594a:	e016      	b.n	801597a <HAL_UARTEx_ReceiveToIdle+0xd8>
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	689b      	ldr	r3, [r3, #8]
 8015950:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015954:	d10d      	bne.n	8015972 <HAL_UARTEx_ReceiveToIdle+0xd0>
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	691b      	ldr	r3, [r3, #16]
 801595a:	2b00      	cmp	r3, #0
 801595c:	d104      	bne.n	8015968 <HAL_UARTEx_ReceiveToIdle+0xc6>
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	227f      	movs	r2, #127	@ 0x7f
 8015962:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015966:	e008      	b.n	801597a <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	223f      	movs	r2, #63	@ 0x3f
 801596c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015970:	e003      	b.n	801597a <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	2200      	movs	r2, #0
 8015976:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8015980:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	689b      	ldr	r3, [r3, #8]
 8015986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801598a:	d108      	bne.n	801599e <HAL_UARTEx_ReceiveToIdle+0xfc>
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	691b      	ldr	r3, [r3, #16]
 8015990:	2b00      	cmp	r3, #0
 8015992:	d104      	bne.n	801599e <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 8015994:	2300      	movs	r3, #0
 8015996:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015998:	68bb      	ldr	r3, [r7, #8]
 801599a:	61bb      	str	r3, [r7, #24]
 801599c:	e003      	b.n	80159a6 <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 801599e:	68bb      	ldr	r3, [r7, #8]
 80159a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80159a2:	2300      	movs	r3, #0
 80159a4:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 80159a6:	683b      	ldr	r3, [r7, #0]
 80159a8:	2200      	movs	r2, #0
 80159aa:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80159ac:	e060      	b.n	8015a70 <HAL_UARTEx_ReceiveToIdle+0x1ce>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	69db      	ldr	r3, [r3, #28]
 80159b4:	f003 0310 	and.w	r3, r3, #16
 80159b8:	2b10      	cmp	r3, #16
 80159ba:	d110      	bne.n	80159de <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	2210      	movs	r2, #16
 80159c2:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 80159c4:	683b      	ldr	r3, [r7, #0]
 80159c6:	881b      	ldrh	r3, [r3, #0]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d008      	beq.n	80159de <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	2202      	movs	r2, #2
 80159d0:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	2220      	movs	r2, #32
 80159d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_OK;
 80159da:	2300      	movs	r3, #0
 80159dc:	e060      	b.n	8015aa0 <HAL_UARTEx_ReceiveToIdle+0x1fe>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	69db      	ldr	r3, [r3, #28]
 80159e4:	f003 0320 	and.w	r3, r3, #32
 80159e8:	2b20      	cmp	r3, #32
 80159ea:	d12c      	bne.n	8015a46 <HAL_UARTEx_ReceiveToIdle+0x1a4>
      {
        if (pdata8bits == NULL)
 80159ec:	69fb      	ldr	r3, [r7, #28]
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d10c      	bne.n	8015a0c <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80159f8:	b29a      	uxth	r2, r3
 80159fa:	8a7b      	ldrh	r3, [r7, #18]
 80159fc:	4013      	ands	r3, r2
 80159fe:	b29a      	uxth	r2, r3
 8015a00:	69bb      	ldr	r3, [r7, #24]
 8015a02:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8015a04:	69bb      	ldr	r3, [r7, #24]
 8015a06:	3302      	adds	r3, #2
 8015a08:	61bb      	str	r3, [r7, #24]
 8015a0a:	e00d      	b.n	8015a28 <HAL_UARTEx_ReceiveToIdle+0x186>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015a12:	b29b      	uxth	r3, r3
 8015a14:	b2da      	uxtb	r2, r3
 8015a16:	8a7b      	ldrh	r3, [r7, #18]
 8015a18:	b2db      	uxtb	r3, r3
 8015a1a:	4013      	ands	r3, r2
 8015a1c:	b2da      	uxtb	r2, r3
 8015a1e:	69fb      	ldr	r3, [r7, #28]
 8015a20:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 8015a22:	69fb      	ldr	r3, [r7, #28]
 8015a24:	3301      	adds	r3, #1
 8015a26:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8015a28:	683b      	ldr	r3, [r7, #0]
 8015a2a:	881b      	ldrh	r3, [r3, #0]
 8015a2c:	3301      	adds	r3, #1
 8015a2e:	b29a      	uxth	r2, r3
 8015a30:	683b      	ldr	r3, [r7, #0]
 8015a32:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015a3a:	b29b      	uxth	r3, r3
 8015a3c:	3b01      	subs	r3, #1
 8015a3e:	b29a      	uxth	r2, r3
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8015a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a4c:	d010      	beq.n	8015a70 <HAL_UARTEx_ReceiveToIdle+0x1ce>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8015a4e:	f7f5 f8e9 	bl	800ac24 <HAL_GetTick>
 8015a52:	4602      	mov	r2, r0
 8015a54:	697b      	ldr	r3, [r7, #20]
 8015a56:	1ad3      	subs	r3, r2, r3
 8015a58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015a5a:	429a      	cmp	r2, r3
 8015a5c:	d302      	bcc.n	8015a64 <HAL_UARTEx_ReceiveToIdle+0x1c2>
 8015a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d105      	bne.n	8015a70 <HAL_UARTEx_ReceiveToIdle+0x1ce>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	2220      	movs	r2, #32
 8015a68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8015a6c:	2303      	movs	r3, #3
 8015a6e:	e017      	b.n	8015aa0 <HAL_UARTEx_ReceiveToIdle+0x1fe>
    while (huart->RxXferCount > 0U)
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015a76:	b29b      	uxth	r3, r3
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d198      	bne.n	80159ae <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015a88:	b29b      	uxth	r3, r3
 8015a8a:	1ad3      	subs	r3, r2, r3
 8015a8c:	b29a      	uxth	r2, r3
 8015a8e:	683b      	ldr	r3, [r7, #0]
 8015a90:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	2220      	movs	r2, #32
 8015a96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	e000      	b.n	8015aa0 <HAL_UARTEx_ReceiveToIdle+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8015a9e:	2302      	movs	r3, #2
  }
}
 8015aa0:	4618      	mov	r0, r3
 8015aa2:	3720      	adds	r7, #32
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	bd80      	pop	{r7, pc}

08015aa8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b08c      	sub	sp, #48	@ 0x30
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	60f8      	str	r0, [r7, #12]
 8015ab0:	60b9      	str	r1, [r7, #8]
 8015ab2:	4613      	mov	r3, r2
 8015ab4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015abc:	2b20      	cmp	r3, #32
 8015abe:	d142      	bne.n	8015b46 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8015ac0:	68bb      	ldr	r3, [r7, #8]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d002      	beq.n	8015acc <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8015ac6:	88fb      	ldrh	r3, [r7, #6]
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d101      	bne.n	8015ad0 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8015acc:	2301      	movs	r3, #1
 8015ace:	e03b      	b.n	8015b48 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	2201      	movs	r2, #1
 8015ad4:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	2200      	movs	r2, #0
 8015ada:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8015adc:	88fb      	ldrh	r3, [r7, #6]
 8015ade:	461a      	mov	r2, r3
 8015ae0:	68b9      	ldr	r1, [r7, #8]
 8015ae2:	68f8      	ldr	r0, [r7, #12]
 8015ae4:	f7ff fc64 	bl	80153b0 <UART_Start_Receive_DMA>
 8015ae8:	4603      	mov	r3, r0
 8015aea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8015aee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d124      	bne.n	8015b40 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015afa:	2b01      	cmp	r3, #1
 8015afc:	d11d      	bne.n	8015b3a <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	2210      	movs	r2, #16
 8015b04:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b0c:	69bb      	ldr	r3, [r7, #24]
 8015b0e:	e853 3f00 	ldrex	r3, [r3]
 8015b12:	617b      	str	r3, [r7, #20]
   return(result);
 8015b14:	697b      	ldr	r3, [r7, #20]
 8015b16:	f043 0310 	orr.w	r3, r3, #16
 8015b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	461a      	mov	r2, r3
 8015b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8015b26:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b28:	6a39      	ldr	r1, [r7, #32]
 8015b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015b2c:	e841 2300 	strex	r3, r2, [r1]
 8015b30:	61fb      	str	r3, [r7, #28]
   return(result);
 8015b32:	69fb      	ldr	r3, [r7, #28]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d1e6      	bne.n	8015b06 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8015b38:	e002      	b.n	8015b40 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8015b3a:	2301      	movs	r3, #1
 8015b3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8015b40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015b44:	e000      	b.n	8015b48 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8015b46:	2302      	movs	r3, #2
  }
}
 8015b48:	4618      	mov	r0, r3
 8015b4a:	3730      	adds	r7, #48	@ 0x30
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	bd80      	pop	{r7, pc}

08015b50 <atoi>:
 8015b50:	220a      	movs	r2, #10
 8015b52:	2100      	movs	r1, #0
 8015b54:	f000 b87c 	b.w	8015c50 <strtol>

08015b58 <_strtol_l.isra.0>:
 8015b58:	2b24      	cmp	r3, #36	@ 0x24
 8015b5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b5e:	4686      	mov	lr, r0
 8015b60:	4690      	mov	r8, r2
 8015b62:	d801      	bhi.n	8015b68 <_strtol_l.isra.0+0x10>
 8015b64:	2b01      	cmp	r3, #1
 8015b66:	d106      	bne.n	8015b76 <_strtol_l.isra.0+0x1e>
 8015b68:	f000 f92c 	bl	8015dc4 <__errno>
 8015b6c:	2316      	movs	r3, #22
 8015b6e:	6003      	str	r3, [r0, #0]
 8015b70:	2000      	movs	r0, #0
 8015b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b76:	4834      	ldr	r0, [pc, #208]	@ (8015c48 <_strtol_l.isra.0+0xf0>)
 8015b78:	460d      	mov	r5, r1
 8015b7a:	462a      	mov	r2, r5
 8015b7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015b80:	5d06      	ldrb	r6, [r0, r4]
 8015b82:	f016 0608 	ands.w	r6, r6, #8
 8015b86:	d1f8      	bne.n	8015b7a <_strtol_l.isra.0+0x22>
 8015b88:	2c2d      	cmp	r4, #45	@ 0x2d
 8015b8a:	d110      	bne.n	8015bae <_strtol_l.isra.0+0x56>
 8015b8c:	782c      	ldrb	r4, [r5, #0]
 8015b8e:	2601      	movs	r6, #1
 8015b90:	1c95      	adds	r5, r2, #2
 8015b92:	f033 0210 	bics.w	r2, r3, #16
 8015b96:	d115      	bne.n	8015bc4 <_strtol_l.isra.0+0x6c>
 8015b98:	2c30      	cmp	r4, #48	@ 0x30
 8015b9a:	d10d      	bne.n	8015bb8 <_strtol_l.isra.0+0x60>
 8015b9c:	782a      	ldrb	r2, [r5, #0]
 8015b9e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015ba2:	2a58      	cmp	r2, #88	@ 0x58
 8015ba4:	d108      	bne.n	8015bb8 <_strtol_l.isra.0+0x60>
 8015ba6:	786c      	ldrb	r4, [r5, #1]
 8015ba8:	3502      	adds	r5, #2
 8015baa:	2310      	movs	r3, #16
 8015bac:	e00a      	b.n	8015bc4 <_strtol_l.isra.0+0x6c>
 8015bae:	2c2b      	cmp	r4, #43	@ 0x2b
 8015bb0:	bf04      	itt	eq
 8015bb2:	782c      	ldrbeq	r4, [r5, #0]
 8015bb4:	1c95      	addeq	r5, r2, #2
 8015bb6:	e7ec      	b.n	8015b92 <_strtol_l.isra.0+0x3a>
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d1f6      	bne.n	8015baa <_strtol_l.isra.0+0x52>
 8015bbc:	2c30      	cmp	r4, #48	@ 0x30
 8015bbe:	bf14      	ite	ne
 8015bc0:	230a      	movne	r3, #10
 8015bc2:	2308      	moveq	r3, #8
 8015bc4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8015bc8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015bcc:	2200      	movs	r2, #0
 8015bce:	fbbc f9f3 	udiv	r9, ip, r3
 8015bd2:	4610      	mov	r0, r2
 8015bd4:	fb03 ca19 	mls	sl, r3, r9, ip
 8015bd8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8015bdc:	2f09      	cmp	r7, #9
 8015bde:	d80f      	bhi.n	8015c00 <_strtol_l.isra.0+0xa8>
 8015be0:	463c      	mov	r4, r7
 8015be2:	42a3      	cmp	r3, r4
 8015be4:	dd1b      	ble.n	8015c1e <_strtol_l.isra.0+0xc6>
 8015be6:	1c57      	adds	r7, r2, #1
 8015be8:	d007      	beq.n	8015bfa <_strtol_l.isra.0+0xa2>
 8015bea:	4581      	cmp	r9, r0
 8015bec:	d314      	bcc.n	8015c18 <_strtol_l.isra.0+0xc0>
 8015bee:	d101      	bne.n	8015bf4 <_strtol_l.isra.0+0x9c>
 8015bf0:	45a2      	cmp	sl, r4
 8015bf2:	db11      	blt.n	8015c18 <_strtol_l.isra.0+0xc0>
 8015bf4:	fb00 4003 	mla	r0, r0, r3, r4
 8015bf8:	2201      	movs	r2, #1
 8015bfa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015bfe:	e7eb      	b.n	8015bd8 <_strtol_l.isra.0+0x80>
 8015c00:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8015c04:	2f19      	cmp	r7, #25
 8015c06:	d801      	bhi.n	8015c0c <_strtol_l.isra.0+0xb4>
 8015c08:	3c37      	subs	r4, #55	@ 0x37
 8015c0a:	e7ea      	b.n	8015be2 <_strtol_l.isra.0+0x8a>
 8015c0c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8015c10:	2f19      	cmp	r7, #25
 8015c12:	d804      	bhi.n	8015c1e <_strtol_l.isra.0+0xc6>
 8015c14:	3c57      	subs	r4, #87	@ 0x57
 8015c16:	e7e4      	b.n	8015be2 <_strtol_l.isra.0+0x8a>
 8015c18:	f04f 32ff 	mov.w	r2, #4294967295
 8015c1c:	e7ed      	b.n	8015bfa <_strtol_l.isra.0+0xa2>
 8015c1e:	1c53      	adds	r3, r2, #1
 8015c20:	d108      	bne.n	8015c34 <_strtol_l.isra.0+0xdc>
 8015c22:	2322      	movs	r3, #34	@ 0x22
 8015c24:	f8ce 3000 	str.w	r3, [lr]
 8015c28:	4660      	mov	r0, ip
 8015c2a:	f1b8 0f00 	cmp.w	r8, #0
 8015c2e:	d0a0      	beq.n	8015b72 <_strtol_l.isra.0+0x1a>
 8015c30:	1e69      	subs	r1, r5, #1
 8015c32:	e006      	b.n	8015c42 <_strtol_l.isra.0+0xea>
 8015c34:	b106      	cbz	r6, 8015c38 <_strtol_l.isra.0+0xe0>
 8015c36:	4240      	negs	r0, r0
 8015c38:	f1b8 0f00 	cmp.w	r8, #0
 8015c3c:	d099      	beq.n	8015b72 <_strtol_l.isra.0+0x1a>
 8015c3e:	2a00      	cmp	r2, #0
 8015c40:	d1f6      	bne.n	8015c30 <_strtol_l.isra.0+0xd8>
 8015c42:	f8c8 1000 	str.w	r1, [r8]
 8015c46:	e794      	b.n	8015b72 <_strtol_l.isra.0+0x1a>
 8015c48:	0801753b 	.word	0x0801753b

08015c4c <_strtol_r>:
 8015c4c:	f7ff bf84 	b.w	8015b58 <_strtol_l.isra.0>

08015c50 <strtol>:
 8015c50:	4613      	mov	r3, r2
 8015c52:	460a      	mov	r2, r1
 8015c54:	4601      	mov	r1, r0
 8015c56:	4802      	ldr	r0, [pc, #8]	@ (8015c60 <strtol+0x10>)
 8015c58:	6800      	ldr	r0, [r0, #0]
 8015c5a:	f7ff bf7d 	b.w	8015b58 <_strtol_l.isra.0>
 8015c5e:	bf00      	nop
 8015c60:	2000019c 	.word	0x2000019c

08015c64 <siprintf>:
 8015c64:	b40e      	push	{r1, r2, r3}
 8015c66:	b510      	push	{r4, lr}
 8015c68:	b09d      	sub	sp, #116	@ 0x74
 8015c6a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8015c6c:	9002      	str	r0, [sp, #8]
 8015c6e:	9006      	str	r0, [sp, #24]
 8015c70:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015c74:	480a      	ldr	r0, [pc, #40]	@ (8015ca0 <siprintf+0x3c>)
 8015c76:	9107      	str	r1, [sp, #28]
 8015c78:	9104      	str	r1, [sp, #16]
 8015c7a:	490a      	ldr	r1, [pc, #40]	@ (8015ca4 <siprintf+0x40>)
 8015c7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c80:	9105      	str	r1, [sp, #20]
 8015c82:	2400      	movs	r4, #0
 8015c84:	a902      	add	r1, sp, #8
 8015c86:	6800      	ldr	r0, [r0, #0]
 8015c88:	9301      	str	r3, [sp, #4]
 8015c8a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8015c8c:	f000 fa30 	bl	80160f0 <_svfiprintf_r>
 8015c90:	9b02      	ldr	r3, [sp, #8]
 8015c92:	701c      	strb	r4, [r3, #0]
 8015c94:	b01d      	add	sp, #116	@ 0x74
 8015c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015c9a:	b003      	add	sp, #12
 8015c9c:	4770      	bx	lr
 8015c9e:	bf00      	nop
 8015ca0:	2000019c 	.word	0x2000019c
 8015ca4:	ffff0208 	.word	0xffff0208

08015ca8 <siscanf>:
 8015ca8:	b40e      	push	{r1, r2, r3}
 8015caa:	b570      	push	{r4, r5, r6, lr}
 8015cac:	b09d      	sub	sp, #116	@ 0x74
 8015cae:	ac21      	add	r4, sp, #132	@ 0x84
 8015cb0:	2500      	movs	r5, #0
 8015cb2:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8015cb6:	f854 6b04 	ldr.w	r6, [r4], #4
 8015cba:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015cbe:	951b      	str	r5, [sp, #108]	@ 0x6c
 8015cc0:	9002      	str	r0, [sp, #8]
 8015cc2:	9006      	str	r0, [sp, #24]
 8015cc4:	f7ea fa8e 	bl	80001e4 <strlen>
 8015cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8015cf8 <siscanf+0x50>)
 8015cca:	9003      	str	r0, [sp, #12]
 8015ccc:	9007      	str	r0, [sp, #28]
 8015cce:	480b      	ldr	r0, [pc, #44]	@ (8015cfc <siscanf+0x54>)
 8015cd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015cd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015cd6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015cda:	4632      	mov	r2, r6
 8015cdc:	4623      	mov	r3, r4
 8015cde:	a902      	add	r1, sp, #8
 8015ce0:	6800      	ldr	r0, [r0, #0]
 8015ce2:	950f      	str	r5, [sp, #60]	@ 0x3c
 8015ce4:	9514      	str	r5, [sp, #80]	@ 0x50
 8015ce6:	9401      	str	r4, [sp, #4]
 8015ce8:	f000 fb58 	bl	801639c <__ssvfiscanf_r>
 8015cec:	b01d      	add	sp, #116	@ 0x74
 8015cee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015cf2:	b003      	add	sp, #12
 8015cf4:	4770      	bx	lr
 8015cf6:	bf00      	nop
 8015cf8:	08015d01 	.word	0x08015d01
 8015cfc:	2000019c 	.word	0x2000019c

08015d00 <__seofread>:
 8015d00:	2000      	movs	r0, #0
 8015d02:	4770      	bx	lr

08015d04 <memcmp>:
 8015d04:	b510      	push	{r4, lr}
 8015d06:	3901      	subs	r1, #1
 8015d08:	4402      	add	r2, r0
 8015d0a:	4290      	cmp	r0, r2
 8015d0c:	d101      	bne.n	8015d12 <memcmp+0xe>
 8015d0e:	2000      	movs	r0, #0
 8015d10:	e005      	b.n	8015d1e <memcmp+0x1a>
 8015d12:	7803      	ldrb	r3, [r0, #0]
 8015d14:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015d18:	42a3      	cmp	r3, r4
 8015d1a:	d001      	beq.n	8015d20 <memcmp+0x1c>
 8015d1c:	1b18      	subs	r0, r3, r4
 8015d1e:	bd10      	pop	{r4, pc}
 8015d20:	3001      	adds	r0, #1
 8015d22:	e7f2      	b.n	8015d0a <memcmp+0x6>

08015d24 <memset>:
 8015d24:	4402      	add	r2, r0
 8015d26:	4603      	mov	r3, r0
 8015d28:	4293      	cmp	r3, r2
 8015d2a:	d100      	bne.n	8015d2e <memset+0xa>
 8015d2c:	4770      	bx	lr
 8015d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8015d32:	e7f9      	b.n	8015d28 <memset+0x4>

08015d34 <strchr>:
 8015d34:	b2c9      	uxtb	r1, r1
 8015d36:	4603      	mov	r3, r0
 8015d38:	4618      	mov	r0, r3
 8015d3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d3e:	b112      	cbz	r2, 8015d46 <strchr+0x12>
 8015d40:	428a      	cmp	r2, r1
 8015d42:	d1f9      	bne.n	8015d38 <strchr+0x4>
 8015d44:	4770      	bx	lr
 8015d46:	2900      	cmp	r1, #0
 8015d48:	bf18      	it	ne
 8015d4a:	2000      	movne	r0, #0
 8015d4c:	4770      	bx	lr

08015d4e <strncmp>:
 8015d4e:	b510      	push	{r4, lr}
 8015d50:	b16a      	cbz	r2, 8015d6e <strncmp+0x20>
 8015d52:	3901      	subs	r1, #1
 8015d54:	1884      	adds	r4, r0, r2
 8015d56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015d5a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015d5e:	429a      	cmp	r2, r3
 8015d60:	d103      	bne.n	8015d6a <strncmp+0x1c>
 8015d62:	42a0      	cmp	r0, r4
 8015d64:	d001      	beq.n	8015d6a <strncmp+0x1c>
 8015d66:	2a00      	cmp	r2, #0
 8015d68:	d1f5      	bne.n	8015d56 <strncmp+0x8>
 8015d6a:	1ad0      	subs	r0, r2, r3
 8015d6c:	bd10      	pop	{r4, pc}
 8015d6e:	4610      	mov	r0, r2
 8015d70:	e7fc      	b.n	8015d6c <strncmp+0x1e>

08015d72 <strncpy>:
 8015d72:	b510      	push	{r4, lr}
 8015d74:	3901      	subs	r1, #1
 8015d76:	4603      	mov	r3, r0
 8015d78:	b132      	cbz	r2, 8015d88 <strncpy+0x16>
 8015d7a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015d7e:	f803 4b01 	strb.w	r4, [r3], #1
 8015d82:	3a01      	subs	r2, #1
 8015d84:	2c00      	cmp	r4, #0
 8015d86:	d1f7      	bne.n	8015d78 <strncpy+0x6>
 8015d88:	441a      	add	r2, r3
 8015d8a:	2100      	movs	r1, #0
 8015d8c:	4293      	cmp	r3, r2
 8015d8e:	d100      	bne.n	8015d92 <strncpy+0x20>
 8015d90:	bd10      	pop	{r4, pc}
 8015d92:	f803 1b01 	strb.w	r1, [r3], #1
 8015d96:	e7f9      	b.n	8015d8c <strncpy+0x1a>

08015d98 <strstr>:
 8015d98:	780a      	ldrb	r2, [r1, #0]
 8015d9a:	b570      	push	{r4, r5, r6, lr}
 8015d9c:	b96a      	cbnz	r2, 8015dba <strstr+0x22>
 8015d9e:	bd70      	pop	{r4, r5, r6, pc}
 8015da0:	429a      	cmp	r2, r3
 8015da2:	d109      	bne.n	8015db8 <strstr+0x20>
 8015da4:	460c      	mov	r4, r1
 8015da6:	4605      	mov	r5, r0
 8015da8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d0f6      	beq.n	8015d9e <strstr+0x6>
 8015db0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8015db4:	429e      	cmp	r6, r3
 8015db6:	d0f7      	beq.n	8015da8 <strstr+0x10>
 8015db8:	3001      	adds	r0, #1
 8015dba:	7803      	ldrb	r3, [r0, #0]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d1ef      	bne.n	8015da0 <strstr+0x8>
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	e7ec      	b.n	8015d9e <strstr+0x6>

08015dc4 <__errno>:
 8015dc4:	4b01      	ldr	r3, [pc, #4]	@ (8015dcc <__errno+0x8>)
 8015dc6:	6818      	ldr	r0, [r3, #0]
 8015dc8:	4770      	bx	lr
 8015dca:	bf00      	nop
 8015dcc:	2000019c 	.word	0x2000019c

08015dd0 <__libc_init_array>:
 8015dd0:	b570      	push	{r4, r5, r6, lr}
 8015dd2:	4d0d      	ldr	r5, [pc, #52]	@ (8015e08 <__libc_init_array+0x38>)
 8015dd4:	4c0d      	ldr	r4, [pc, #52]	@ (8015e0c <__libc_init_array+0x3c>)
 8015dd6:	1b64      	subs	r4, r4, r5
 8015dd8:	10a4      	asrs	r4, r4, #2
 8015dda:	2600      	movs	r6, #0
 8015ddc:	42a6      	cmp	r6, r4
 8015dde:	d109      	bne.n	8015df4 <__libc_init_array+0x24>
 8015de0:	4d0b      	ldr	r5, [pc, #44]	@ (8015e10 <__libc_init_array+0x40>)
 8015de2:	4c0c      	ldr	r4, [pc, #48]	@ (8015e14 <__libc_init_array+0x44>)
 8015de4:	f001 f86e 	bl	8016ec4 <_init>
 8015de8:	1b64      	subs	r4, r4, r5
 8015dea:	10a4      	asrs	r4, r4, #2
 8015dec:	2600      	movs	r6, #0
 8015dee:	42a6      	cmp	r6, r4
 8015df0:	d105      	bne.n	8015dfe <__libc_init_array+0x2e>
 8015df2:	bd70      	pop	{r4, r5, r6, pc}
 8015df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8015df8:	4798      	blx	r3
 8015dfa:	3601      	adds	r6, #1
 8015dfc:	e7ee      	b.n	8015ddc <__libc_init_array+0xc>
 8015dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8015e02:	4798      	blx	r3
 8015e04:	3601      	adds	r6, #1
 8015e06:	e7f2      	b.n	8015dee <__libc_init_array+0x1e>
 8015e08:	08017694 	.word	0x08017694
 8015e0c:	08017694 	.word	0x08017694
 8015e10:	08017694 	.word	0x08017694
 8015e14:	08017698 	.word	0x08017698

08015e18 <__retarget_lock_acquire_recursive>:
 8015e18:	4770      	bx	lr

08015e1a <__retarget_lock_release_recursive>:
 8015e1a:	4770      	bx	lr

08015e1c <strcpy>:
 8015e1c:	4603      	mov	r3, r0
 8015e1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015e22:	f803 2b01 	strb.w	r2, [r3], #1
 8015e26:	2a00      	cmp	r2, #0
 8015e28:	d1f9      	bne.n	8015e1e <strcpy+0x2>
 8015e2a:	4770      	bx	lr

08015e2c <memcpy>:
 8015e2c:	440a      	add	r2, r1
 8015e2e:	4291      	cmp	r1, r2
 8015e30:	f100 33ff 	add.w	r3, r0, #4294967295
 8015e34:	d100      	bne.n	8015e38 <memcpy+0xc>
 8015e36:	4770      	bx	lr
 8015e38:	b510      	push	{r4, lr}
 8015e3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015e42:	4291      	cmp	r1, r2
 8015e44:	d1f9      	bne.n	8015e3a <memcpy+0xe>
 8015e46:	bd10      	pop	{r4, pc}

08015e48 <_free_r>:
 8015e48:	b538      	push	{r3, r4, r5, lr}
 8015e4a:	4605      	mov	r5, r0
 8015e4c:	2900      	cmp	r1, #0
 8015e4e:	d041      	beq.n	8015ed4 <_free_r+0x8c>
 8015e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015e54:	1f0c      	subs	r4, r1, #4
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	bfb8      	it	lt
 8015e5a:	18e4      	addlt	r4, r4, r3
 8015e5c:	f000 f8e0 	bl	8016020 <__malloc_lock>
 8015e60:	4a1d      	ldr	r2, [pc, #116]	@ (8015ed8 <_free_r+0x90>)
 8015e62:	6813      	ldr	r3, [r2, #0]
 8015e64:	b933      	cbnz	r3, 8015e74 <_free_r+0x2c>
 8015e66:	6063      	str	r3, [r4, #4]
 8015e68:	6014      	str	r4, [r2, #0]
 8015e6a:	4628      	mov	r0, r5
 8015e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015e70:	f000 b8dc 	b.w	801602c <__malloc_unlock>
 8015e74:	42a3      	cmp	r3, r4
 8015e76:	d908      	bls.n	8015e8a <_free_r+0x42>
 8015e78:	6820      	ldr	r0, [r4, #0]
 8015e7a:	1821      	adds	r1, r4, r0
 8015e7c:	428b      	cmp	r3, r1
 8015e7e:	bf01      	itttt	eq
 8015e80:	6819      	ldreq	r1, [r3, #0]
 8015e82:	685b      	ldreq	r3, [r3, #4]
 8015e84:	1809      	addeq	r1, r1, r0
 8015e86:	6021      	streq	r1, [r4, #0]
 8015e88:	e7ed      	b.n	8015e66 <_free_r+0x1e>
 8015e8a:	461a      	mov	r2, r3
 8015e8c:	685b      	ldr	r3, [r3, #4]
 8015e8e:	b10b      	cbz	r3, 8015e94 <_free_r+0x4c>
 8015e90:	42a3      	cmp	r3, r4
 8015e92:	d9fa      	bls.n	8015e8a <_free_r+0x42>
 8015e94:	6811      	ldr	r1, [r2, #0]
 8015e96:	1850      	adds	r0, r2, r1
 8015e98:	42a0      	cmp	r0, r4
 8015e9a:	d10b      	bne.n	8015eb4 <_free_r+0x6c>
 8015e9c:	6820      	ldr	r0, [r4, #0]
 8015e9e:	4401      	add	r1, r0
 8015ea0:	1850      	adds	r0, r2, r1
 8015ea2:	4283      	cmp	r3, r0
 8015ea4:	6011      	str	r1, [r2, #0]
 8015ea6:	d1e0      	bne.n	8015e6a <_free_r+0x22>
 8015ea8:	6818      	ldr	r0, [r3, #0]
 8015eaa:	685b      	ldr	r3, [r3, #4]
 8015eac:	6053      	str	r3, [r2, #4]
 8015eae:	4408      	add	r0, r1
 8015eb0:	6010      	str	r0, [r2, #0]
 8015eb2:	e7da      	b.n	8015e6a <_free_r+0x22>
 8015eb4:	d902      	bls.n	8015ebc <_free_r+0x74>
 8015eb6:	230c      	movs	r3, #12
 8015eb8:	602b      	str	r3, [r5, #0]
 8015eba:	e7d6      	b.n	8015e6a <_free_r+0x22>
 8015ebc:	6820      	ldr	r0, [r4, #0]
 8015ebe:	1821      	adds	r1, r4, r0
 8015ec0:	428b      	cmp	r3, r1
 8015ec2:	bf04      	itt	eq
 8015ec4:	6819      	ldreq	r1, [r3, #0]
 8015ec6:	685b      	ldreq	r3, [r3, #4]
 8015ec8:	6063      	str	r3, [r4, #4]
 8015eca:	bf04      	itt	eq
 8015ecc:	1809      	addeq	r1, r1, r0
 8015ece:	6021      	streq	r1, [r4, #0]
 8015ed0:	6054      	str	r4, [r2, #4]
 8015ed2:	e7ca      	b.n	8015e6a <_free_r+0x22>
 8015ed4:	bd38      	pop	{r3, r4, r5, pc}
 8015ed6:	bf00      	nop
 8015ed8:	20005e50 	.word	0x20005e50

08015edc <sbrk_aligned>:
 8015edc:	b570      	push	{r4, r5, r6, lr}
 8015ede:	4e0f      	ldr	r6, [pc, #60]	@ (8015f1c <sbrk_aligned+0x40>)
 8015ee0:	460c      	mov	r4, r1
 8015ee2:	6831      	ldr	r1, [r6, #0]
 8015ee4:	4605      	mov	r5, r0
 8015ee6:	b911      	cbnz	r1, 8015eee <sbrk_aligned+0x12>
 8015ee8:	f000 ff36 	bl	8016d58 <_sbrk_r>
 8015eec:	6030      	str	r0, [r6, #0]
 8015eee:	4621      	mov	r1, r4
 8015ef0:	4628      	mov	r0, r5
 8015ef2:	f000 ff31 	bl	8016d58 <_sbrk_r>
 8015ef6:	1c43      	adds	r3, r0, #1
 8015ef8:	d103      	bne.n	8015f02 <sbrk_aligned+0x26>
 8015efa:	f04f 34ff 	mov.w	r4, #4294967295
 8015efe:	4620      	mov	r0, r4
 8015f00:	bd70      	pop	{r4, r5, r6, pc}
 8015f02:	1cc4      	adds	r4, r0, #3
 8015f04:	f024 0403 	bic.w	r4, r4, #3
 8015f08:	42a0      	cmp	r0, r4
 8015f0a:	d0f8      	beq.n	8015efe <sbrk_aligned+0x22>
 8015f0c:	1a21      	subs	r1, r4, r0
 8015f0e:	4628      	mov	r0, r5
 8015f10:	f000 ff22 	bl	8016d58 <_sbrk_r>
 8015f14:	3001      	adds	r0, #1
 8015f16:	d1f2      	bne.n	8015efe <sbrk_aligned+0x22>
 8015f18:	e7ef      	b.n	8015efa <sbrk_aligned+0x1e>
 8015f1a:	bf00      	nop
 8015f1c:	20005e4c 	.word	0x20005e4c

08015f20 <_malloc_r>:
 8015f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f24:	1ccd      	adds	r5, r1, #3
 8015f26:	f025 0503 	bic.w	r5, r5, #3
 8015f2a:	3508      	adds	r5, #8
 8015f2c:	2d0c      	cmp	r5, #12
 8015f2e:	bf38      	it	cc
 8015f30:	250c      	movcc	r5, #12
 8015f32:	2d00      	cmp	r5, #0
 8015f34:	4606      	mov	r6, r0
 8015f36:	db01      	blt.n	8015f3c <_malloc_r+0x1c>
 8015f38:	42a9      	cmp	r1, r5
 8015f3a:	d904      	bls.n	8015f46 <_malloc_r+0x26>
 8015f3c:	230c      	movs	r3, #12
 8015f3e:	6033      	str	r3, [r6, #0]
 8015f40:	2000      	movs	r0, #0
 8015f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801601c <_malloc_r+0xfc>
 8015f4a:	f000 f869 	bl	8016020 <__malloc_lock>
 8015f4e:	f8d8 3000 	ldr.w	r3, [r8]
 8015f52:	461c      	mov	r4, r3
 8015f54:	bb44      	cbnz	r4, 8015fa8 <_malloc_r+0x88>
 8015f56:	4629      	mov	r1, r5
 8015f58:	4630      	mov	r0, r6
 8015f5a:	f7ff ffbf 	bl	8015edc <sbrk_aligned>
 8015f5e:	1c43      	adds	r3, r0, #1
 8015f60:	4604      	mov	r4, r0
 8015f62:	d158      	bne.n	8016016 <_malloc_r+0xf6>
 8015f64:	f8d8 4000 	ldr.w	r4, [r8]
 8015f68:	4627      	mov	r7, r4
 8015f6a:	2f00      	cmp	r7, #0
 8015f6c:	d143      	bne.n	8015ff6 <_malloc_r+0xd6>
 8015f6e:	2c00      	cmp	r4, #0
 8015f70:	d04b      	beq.n	801600a <_malloc_r+0xea>
 8015f72:	6823      	ldr	r3, [r4, #0]
 8015f74:	4639      	mov	r1, r7
 8015f76:	4630      	mov	r0, r6
 8015f78:	eb04 0903 	add.w	r9, r4, r3
 8015f7c:	f000 feec 	bl	8016d58 <_sbrk_r>
 8015f80:	4581      	cmp	r9, r0
 8015f82:	d142      	bne.n	801600a <_malloc_r+0xea>
 8015f84:	6821      	ldr	r1, [r4, #0]
 8015f86:	1a6d      	subs	r5, r5, r1
 8015f88:	4629      	mov	r1, r5
 8015f8a:	4630      	mov	r0, r6
 8015f8c:	f7ff ffa6 	bl	8015edc <sbrk_aligned>
 8015f90:	3001      	adds	r0, #1
 8015f92:	d03a      	beq.n	801600a <_malloc_r+0xea>
 8015f94:	6823      	ldr	r3, [r4, #0]
 8015f96:	442b      	add	r3, r5
 8015f98:	6023      	str	r3, [r4, #0]
 8015f9a:	f8d8 3000 	ldr.w	r3, [r8]
 8015f9e:	685a      	ldr	r2, [r3, #4]
 8015fa0:	bb62      	cbnz	r2, 8015ffc <_malloc_r+0xdc>
 8015fa2:	f8c8 7000 	str.w	r7, [r8]
 8015fa6:	e00f      	b.n	8015fc8 <_malloc_r+0xa8>
 8015fa8:	6822      	ldr	r2, [r4, #0]
 8015faa:	1b52      	subs	r2, r2, r5
 8015fac:	d420      	bmi.n	8015ff0 <_malloc_r+0xd0>
 8015fae:	2a0b      	cmp	r2, #11
 8015fb0:	d917      	bls.n	8015fe2 <_malloc_r+0xc2>
 8015fb2:	1961      	adds	r1, r4, r5
 8015fb4:	42a3      	cmp	r3, r4
 8015fb6:	6025      	str	r5, [r4, #0]
 8015fb8:	bf18      	it	ne
 8015fba:	6059      	strne	r1, [r3, #4]
 8015fbc:	6863      	ldr	r3, [r4, #4]
 8015fbe:	bf08      	it	eq
 8015fc0:	f8c8 1000 	streq.w	r1, [r8]
 8015fc4:	5162      	str	r2, [r4, r5]
 8015fc6:	604b      	str	r3, [r1, #4]
 8015fc8:	4630      	mov	r0, r6
 8015fca:	f000 f82f 	bl	801602c <__malloc_unlock>
 8015fce:	f104 000b 	add.w	r0, r4, #11
 8015fd2:	1d23      	adds	r3, r4, #4
 8015fd4:	f020 0007 	bic.w	r0, r0, #7
 8015fd8:	1ac2      	subs	r2, r0, r3
 8015fda:	bf1c      	itt	ne
 8015fdc:	1a1b      	subne	r3, r3, r0
 8015fde:	50a3      	strne	r3, [r4, r2]
 8015fe0:	e7af      	b.n	8015f42 <_malloc_r+0x22>
 8015fe2:	6862      	ldr	r2, [r4, #4]
 8015fe4:	42a3      	cmp	r3, r4
 8015fe6:	bf0c      	ite	eq
 8015fe8:	f8c8 2000 	streq.w	r2, [r8]
 8015fec:	605a      	strne	r2, [r3, #4]
 8015fee:	e7eb      	b.n	8015fc8 <_malloc_r+0xa8>
 8015ff0:	4623      	mov	r3, r4
 8015ff2:	6864      	ldr	r4, [r4, #4]
 8015ff4:	e7ae      	b.n	8015f54 <_malloc_r+0x34>
 8015ff6:	463c      	mov	r4, r7
 8015ff8:	687f      	ldr	r7, [r7, #4]
 8015ffa:	e7b6      	b.n	8015f6a <_malloc_r+0x4a>
 8015ffc:	461a      	mov	r2, r3
 8015ffe:	685b      	ldr	r3, [r3, #4]
 8016000:	42a3      	cmp	r3, r4
 8016002:	d1fb      	bne.n	8015ffc <_malloc_r+0xdc>
 8016004:	2300      	movs	r3, #0
 8016006:	6053      	str	r3, [r2, #4]
 8016008:	e7de      	b.n	8015fc8 <_malloc_r+0xa8>
 801600a:	230c      	movs	r3, #12
 801600c:	6033      	str	r3, [r6, #0]
 801600e:	4630      	mov	r0, r6
 8016010:	f000 f80c 	bl	801602c <__malloc_unlock>
 8016014:	e794      	b.n	8015f40 <_malloc_r+0x20>
 8016016:	6005      	str	r5, [r0, #0]
 8016018:	e7d6      	b.n	8015fc8 <_malloc_r+0xa8>
 801601a:	bf00      	nop
 801601c:	20005e50 	.word	0x20005e50

08016020 <__malloc_lock>:
 8016020:	4801      	ldr	r0, [pc, #4]	@ (8016028 <__malloc_lock+0x8>)
 8016022:	f7ff bef9 	b.w	8015e18 <__retarget_lock_acquire_recursive>
 8016026:	bf00      	nop
 8016028:	20005e48 	.word	0x20005e48

0801602c <__malloc_unlock>:
 801602c:	4801      	ldr	r0, [pc, #4]	@ (8016034 <__malloc_unlock+0x8>)
 801602e:	f7ff bef4 	b.w	8015e1a <__retarget_lock_release_recursive>
 8016032:	bf00      	nop
 8016034:	20005e48 	.word	0x20005e48

08016038 <__ssputs_r>:
 8016038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801603c:	688e      	ldr	r6, [r1, #8]
 801603e:	461f      	mov	r7, r3
 8016040:	42be      	cmp	r6, r7
 8016042:	680b      	ldr	r3, [r1, #0]
 8016044:	4682      	mov	sl, r0
 8016046:	460c      	mov	r4, r1
 8016048:	4690      	mov	r8, r2
 801604a:	d82d      	bhi.n	80160a8 <__ssputs_r+0x70>
 801604c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016050:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016054:	d026      	beq.n	80160a4 <__ssputs_r+0x6c>
 8016056:	6965      	ldr	r5, [r4, #20]
 8016058:	6909      	ldr	r1, [r1, #16]
 801605a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801605e:	eba3 0901 	sub.w	r9, r3, r1
 8016062:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016066:	1c7b      	adds	r3, r7, #1
 8016068:	444b      	add	r3, r9
 801606a:	106d      	asrs	r5, r5, #1
 801606c:	429d      	cmp	r5, r3
 801606e:	bf38      	it	cc
 8016070:	461d      	movcc	r5, r3
 8016072:	0553      	lsls	r3, r2, #21
 8016074:	d527      	bpl.n	80160c6 <__ssputs_r+0x8e>
 8016076:	4629      	mov	r1, r5
 8016078:	f7ff ff52 	bl	8015f20 <_malloc_r>
 801607c:	4606      	mov	r6, r0
 801607e:	b360      	cbz	r0, 80160da <__ssputs_r+0xa2>
 8016080:	6921      	ldr	r1, [r4, #16]
 8016082:	464a      	mov	r2, r9
 8016084:	f7ff fed2 	bl	8015e2c <memcpy>
 8016088:	89a3      	ldrh	r3, [r4, #12]
 801608a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801608e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016092:	81a3      	strh	r3, [r4, #12]
 8016094:	6126      	str	r6, [r4, #16]
 8016096:	6165      	str	r5, [r4, #20]
 8016098:	444e      	add	r6, r9
 801609a:	eba5 0509 	sub.w	r5, r5, r9
 801609e:	6026      	str	r6, [r4, #0]
 80160a0:	60a5      	str	r5, [r4, #8]
 80160a2:	463e      	mov	r6, r7
 80160a4:	42be      	cmp	r6, r7
 80160a6:	d900      	bls.n	80160aa <__ssputs_r+0x72>
 80160a8:	463e      	mov	r6, r7
 80160aa:	6820      	ldr	r0, [r4, #0]
 80160ac:	4632      	mov	r2, r6
 80160ae:	4641      	mov	r1, r8
 80160b0:	f000 fe37 	bl	8016d22 <memmove>
 80160b4:	68a3      	ldr	r3, [r4, #8]
 80160b6:	1b9b      	subs	r3, r3, r6
 80160b8:	60a3      	str	r3, [r4, #8]
 80160ba:	6823      	ldr	r3, [r4, #0]
 80160bc:	4433      	add	r3, r6
 80160be:	6023      	str	r3, [r4, #0]
 80160c0:	2000      	movs	r0, #0
 80160c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160c6:	462a      	mov	r2, r5
 80160c8:	f000 fe56 	bl	8016d78 <_realloc_r>
 80160cc:	4606      	mov	r6, r0
 80160ce:	2800      	cmp	r0, #0
 80160d0:	d1e0      	bne.n	8016094 <__ssputs_r+0x5c>
 80160d2:	6921      	ldr	r1, [r4, #16]
 80160d4:	4650      	mov	r0, sl
 80160d6:	f7ff feb7 	bl	8015e48 <_free_r>
 80160da:	230c      	movs	r3, #12
 80160dc:	f8ca 3000 	str.w	r3, [sl]
 80160e0:	89a3      	ldrh	r3, [r4, #12]
 80160e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80160e6:	81a3      	strh	r3, [r4, #12]
 80160e8:	f04f 30ff 	mov.w	r0, #4294967295
 80160ec:	e7e9      	b.n	80160c2 <__ssputs_r+0x8a>
	...

080160f0 <_svfiprintf_r>:
 80160f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160f4:	4698      	mov	r8, r3
 80160f6:	898b      	ldrh	r3, [r1, #12]
 80160f8:	061b      	lsls	r3, r3, #24
 80160fa:	b09d      	sub	sp, #116	@ 0x74
 80160fc:	4607      	mov	r7, r0
 80160fe:	460d      	mov	r5, r1
 8016100:	4614      	mov	r4, r2
 8016102:	d510      	bpl.n	8016126 <_svfiprintf_r+0x36>
 8016104:	690b      	ldr	r3, [r1, #16]
 8016106:	b973      	cbnz	r3, 8016126 <_svfiprintf_r+0x36>
 8016108:	2140      	movs	r1, #64	@ 0x40
 801610a:	f7ff ff09 	bl	8015f20 <_malloc_r>
 801610e:	6028      	str	r0, [r5, #0]
 8016110:	6128      	str	r0, [r5, #16]
 8016112:	b930      	cbnz	r0, 8016122 <_svfiprintf_r+0x32>
 8016114:	230c      	movs	r3, #12
 8016116:	603b      	str	r3, [r7, #0]
 8016118:	f04f 30ff 	mov.w	r0, #4294967295
 801611c:	b01d      	add	sp, #116	@ 0x74
 801611e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016122:	2340      	movs	r3, #64	@ 0x40
 8016124:	616b      	str	r3, [r5, #20]
 8016126:	2300      	movs	r3, #0
 8016128:	9309      	str	r3, [sp, #36]	@ 0x24
 801612a:	2320      	movs	r3, #32
 801612c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016130:	f8cd 800c 	str.w	r8, [sp, #12]
 8016134:	2330      	movs	r3, #48	@ 0x30
 8016136:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80162d4 <_svfiprintf_r+0x1e4>
 801613a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801613e:	f04f 0901 	mov.w	r9, #1
 8016142:	4623      	mov	r3, r4
 8016144:	469a      	mov	sl, r3
 8016146:	f813 2b01 	ldrb.w	r2, [r3], #1
 801614a:	b10a      	cbz	r2, 8016150 <_svfiprintf_r+0x60>
 801614c:	2a25      	cmp	r2, #37	@ 0x25
 801614e:	d1f9      	bne.n	8016144 <_svfiprintf_r+0x54>
 8016150:	ebba 0b04 	subs.w	fp, sl, r4
 8016154:	d00b      	beq.n	801616e <_svfiprintf_r+0x7e>
 8016156:	465b      	mov	r3, fp
 8016158:	4622      	mov	r2, r4
 801615a:	4629      	mov	r1, r5
 801615c:	4638      	mov	r0, r7
 801615e:	f7ff ff6b 	bl	8016038 <__ssputs_r>
 8016162:	3001      	adds	r0, #1
 8016164:	f000 80a7 	beq.w	80162b6 <_svfiprintf_r+0x1c6>
 8016168:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801616a:	445a      	add	r2, fp
 801616c:	9209      	str	r2, [sp, #36]	@ 0x24
 801616e:	f89a 3000 	ldrb.w	r3, [sl]
 8016172:	2b00      	cmp	r3, #0
 8016174:	f000 809f 	beq.w	80162b6 <_svfiprintf_r+0x1c6>
 8016178:	2300      	movs	r3, #0
 801617a:	f04f 32ff 	mov.w	r2, #4294967295
 801617e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016182:	f10a 0a01 	add.w	sl, sl, #1
 8016186:	9304      	str	r3, [sp, #16]
 8016188:	9307      	str	r3, [sp, #28]
 801618a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801618e:	931a      	str	r3, [sp, #104]	@ 0x68
 8016190:	4654      	mov	r4, sl
 8016192:	2205      	movs	r2, #5
 8016194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016198:	484e      	ldr	r0, [pc, #312]	@ (80162d4 <_svfiprintf_r+0x1e4>)
 801619a:	f7ea f831 	bl	8000200 <memchr>
 801619e:	9a04      	ldr	r2, [sp, #16]
 80161a0:	b9d8      	cbnz	r0, 80161da <_svfiprintf_r+0xea>
 80161a2:	06d0      	lsls	r0, r2, #27
 80161a4:	bf44      	itt	mi
 80161a6:	2320      	movmi	r3, #32
 80161a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80161ac:	0711      	lsls	r1, r2, #28
 80161ae:	bf44      	itt	mi
 80161b0:	232b      	movmi	r3, #43	@ 0x2b
 80161b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80161b6:	f89a 3000 	ldrb.w	r3, [sl]
 80161ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80161bc:	d015      	beq.n	80161ea <_svfiprintf_r+0xfa>
 80161be:	9a07      	ldr	r2, [sp, #28]
 80161c0:	4654      	mov	r4, sl
 80161c2:	2000      	movs	r0, #0
 80161c4:	f04f 0c0a 	mov.w	ip, #10
 80161c8:	4621      	mov	r1, r4
 80161ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80161ce:	3b30      	subs	r3, #48	@ 0x30
 80161d0:	2b09      	cmp	r3, #9
 80161d2:	d94b      	bls.n	801626c <_svfiprintf_r+0x17c>
 80161d4:	b1b0      	cbz	r0, 8016204 <_svfiprintf_r+0x114>
 80161d6:	9207      	str	r2, [sp, #28]
 80161d8:	e014      	b.n	8016204 <_svfiprintf_r+0x114>
 80161da:	eba0 0308 	sub.w	r3, r0, r8
 80161de:	fa09 f303 	lsl.w	r3, r9, r3
 80161e2:	4313      	orrs	r3, r2
 80161e4:	9304      	str	r3, [sp, #16]
 80161e6:	46a2      	mov	sl, r4
 80161e8:	e7d2      	b.n	8016190 <_svfiprintf_r+0xa0>
 80161ea:	9b03      	ldr	r3, [sp, #12]
 80161ec:	1d19      	adds	r1, r3, #4
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	9103      	str	r1, [sp, #12]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	bfbb      	ittet	lt
 80161f6:	425b      	neglt	r3, r3
 80161f8:	f042 0202 	orrlt.w	r2, r2, #2
 80161fc:	9307      	strge	r3, [sp, #28]
 80161fe:	9307      	strlt	r3, [sp, #28]
 8016200:	bfb8      	it	lt
 8016202:	9204      	strlt	r2, [sp, #16]
 8016204:	7823      	ldrb	r3, [r4, #0]
 8016206:	2b2e      	cmp	r3, #46	@ 0x2e
 8016208:	d10a      	bne.n	8016220 <_svfiprintf_r+0x130>
 801620a:	7863      	ldrb	r3, [r4, #1]
 801620c:	2b2a      	cmp	r3, #42	@ 0x2a
 801620e:	d132      	bne.n	8016276 <_svfiprintf_r+0x186>
 8016210:	9b03      	ldr	r3, [sp, #12]
 8016212:	1d1a      	adds	r2, r3, #4
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	9203      	str	r2, [sp, #12]
 8016218:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801621c:	3402      	adds	r4, #2
 801621e:	9305      	str	r3, [sp, #20]
 8016220:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80162e4 <_svfiprintf_r+0x1f4>
 8016224:	7821      	ldrb	r1, [r4, #0]
 8016226:	2203      	movs	r2, #3
 8016228:	4650      	mov	r0, sl
 801622a:	f7e9 ffe9 	bl	8000200 <memchr>
 801622e:	b138      	cbz	r0, 8016240 <_svfiprintf_r+0x150>
 8016230:	9b04      	ldr	r3, [sp, #16]
 8016232:	eba0 000a 	sub.w	r0, r0, sl
 8016236:	2240      	movs	r2, #64	@ 0x40
 8016238:	4082      	lsls	r2, r0
 801623a:	4313      	orrs	r3, r2
 801623c:	3401      	adds	r4, #1
 801623e:	9304      	str	r3, [sp, #16]
 8016240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016244:	4824      	ldr	r0, [pc, #144]	@ (80162d8 <_svfiprintf_r+0x1e8>)
 8016246:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801624a:	2206      	movs	r2, #6
 801624c:	f7e9 ffd8 	bl	8000200 <memchr>
 8016250:	2800      	cmp	r0, #0
 8016252:	d036      	beq.n	80162c2 <_svfiprintf_r+0x1d2>
 8016254:	4b21      	ldr	r3, [pc, #132]	@ (80162dc <_svfiprintf_r+0x1ec>)
 8016256:	bb1b      	cbnz	r3, 80162a0 <_svfiprintf_r+0x1b0>
 8016258:	9b03      	ldr	r3, [sp, #12]
 801625a:	3307      	adds	r3, #7
 801625c:	f023 0307 	bic.w	r3, r3, #7
 8016260:	3308      	adds	r3, #8
 8016262:	9303      	str	r3, [sp, #12]
 8016264:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016266:	4433      	add	r3, r6
 8016268:	9309      	str	r3, [sp, #36]	@ 0x24
 801626a:	e76a      	b.n	8016142 <_svfiprintf_r+0x52>
 801626c:	fb0c 3202 	mla	r2, ip, r2, r3
 8016270:	460c      	mov	r4, r1
 8016272:	2001      	movs	r0, #1
 8016274:	e7a8      	b.n	80161c8 <_svfiprintf_r+0xd8>
 8016276:	2300      	movs	r3, #0
 8016278:	3401      	adds	r4, #1
 801627a:	9305      	str	r3, [sp, #20]
 801627c:	4619      	mov	r1, r3
 801627e:	f04f 0c0a 	mov.w	ip, #10
 8016282:	4620      	mov	r0, r4
 8016284:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016288:	3a30      	subs	r2, #48	@ 0x30
 801628a:	2a09      	cmp	r2, #9
 801628c:	d903      	bls.n	8016296 <_svfiprintf_r+0x1a6>
 801628e:	2b00      	cmp	r3, #0
 8016290:	d0c6      	beq.n	8016220 <_svfiprintf_r+0x130>
 8016292:	9105      	str	r1, [sp, #20]
 8016294:	e7c4      	b.n	8016220 <_svfiprintf_r+0x130>
 8016296:	fb0c 2101 	mla	r1, ip, r1, r2
 801629a:	4604      	mov	r4, r0
 801629c:	2301      	movs	r3, #1
 801629e:	e7f0      	b.n	8016282 <_svfiprintf_r+0x192>
 80162a0:	ab03      	add	r3, sp, #12
 80162a2:	9300      	str	r3, [sp, #0]
 80162a4:	462a      	mov	r2, r5
 80162a6:	4b0e      	ldr	r3, [pc, #56]	@ (80162e0 <_svfiprintf_r+0x1f0>)
 80162a8:	a904      	add	r1, sp, #16
 80162aa:	4638      	mov	r0, r7
 80162ac:	f3af 8000 	nop.w
 80162b0:	1c42      	adds	r2, r0, #1
 80162b2:	4606      	mov	r6, r0
 80162b4:	d1d6      	bne.n	8016264 <_svfiprintf_r+0x174>
 80162b6:	89ab      	ldrh	r3, [r5, #12]
 80162b8:	065b      	lsls	r3, r3, #25
 80162ba:	f53f af2d 	bmi.w	8016118 <_svfiprintf_r+0x28>
 80162be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80162c0:	e72c      	b.n	801611c <_svfiprintf_r+0x2c>
 80162c2:	ab03      	add	r3, sp, #12
 80162c4:	9300      	str	r3, [sp, #0]
 80162c6:	462a      	mov	r2, r5
 80162c8:	4b05      	ldr	r3, [pc, #20]	@ (80162e0 <_svfiprintf_r+0x1f0>)
 80162ca:	a904      	add	r1, sp, #16
 80162cc:	4638      	mov	r0, r7
 80162ce:	f000 fa49 	bl	8016764 <_printf_i>
 80162d2:	e7ed      	b.n	80162b0 <_svfiprintf_r+0x1c0>
 80162d4:	0801763b 	.word	0x0801763b
 80162d8:	08017645 	.word	0x08017645
 80162dc:	00000000 	.word	0x00000000
 80162e0:	08016039 	.word	0x08016039
 80162e4:	08017641 	.word	0x08017641

080162e8 <_sungetc_r>:
 80162e8:	b538      	push	{r3, r4, r5, lr}
 80162ea:	1c4b      	adds	r3, r1, #1
 80162ec:	4614      	mov	r4, r2
 80162ee:	d103      	bne.n	80162f8 <_sungetc_r+0x10>
 80162f0:	f04f 35ff 	mov.w	r5, #4294967295
 80162f4:	4628      	mov	r0, r5
 80162f6:	bd38      	pop	{r3, r4, r5, pc}
 80162f8:	8993      	ldrh	r3, [r2, #12]
 80162fa:	f023 0320 	bic.w	r3, r3, #32
 80162fe:	8193      	strh	r3, [r2, #12]
 8016300:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016302:	6852      	ldr	r2, [r2, #4]
 8016304:	b2cd      	uxtb	r5, r1
 8016306:	b18b      	cbz	r3, 801632c <_sungetc_r+0x44>
 8016308:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801630a:	4293      	cmp	r3, r2
 801630c:	dd08      	ble.n	8016320 <_sungetc_r+0x38>
 801630e:	6823      	ldr	r3, [r4, #0]
 8016310:	1e5a      	subs	r2, r3, #1
 8016312:	6022      	str	r2, [r4, #0]
 8016314:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016318:	6863      	ldr	r3, [r4, #4]
 801631a:	3301      	adds	r3, #1
 801631c:	6063      	str	r3, [r4, #4]
 801631e:	e7e9      	b.n	80162f4 <_sungetc_r+0xc>
 8016320:	4621      	mov	r1, r4
 8016322:	f000 fcc4 	bl	8016cae <__submore>
 8016326:	2800      	cmp	r0, #0
 8016328:	d0f1      	beq.n	801630e <_sungetc_r+0x26>
 801632a:	e7e1      	b.n	80162f0 <_sungetc_r+0x8>
 801632c:	6921      	ldr	r1, [r4, #16]
 801632e:	6823      	ldr	r3, [r4, #0]
 8016330:	b151      	cbz	r1, 8016348 <_sungetc_r+0x60>
 8016332:	4299      	cmp	r1, r3
 8016334:	d208      	bcs.n	8016348 <_sungetc_r+0x60>
 8016336:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801633a:	42a9      	cmp	r1, r5
 801633c:	d104      	bne.n	8016348 <_sungetc_r+0x60>
 801633e:	3b01      	subs	r3, #1
 8016340:	3201      	adds	r2, #1
 8016342:	6023      	str	r3, [r4, #0]
 8016344:	6062      	str	r2, [r4, #4]
 8016346:	e7d5      	b.n	80162f4 <_sungetc_r+0xc>
 8016348:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801634c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016350:	6363      	str	r3, [r4, #52]	@ 0x34
 8016352:	2303      	movs	r3, #3
 8016354:	63a3      	str	r3, [r4, #56]	@ 0x38
 8016356:	4623      	mov	r3, r4
 8016358:	f803 5f46 	strb.w	r5, [r3, #70]!
 801635c:	6023      	str	r3, [r4, #0]
 801635e:	2301      	movs	r3, #1
 8016360:	e7dc      	b.n	801631c <_sungetc_r+0x34>

08016362 <__ssrefill_r>:
 8016362:	b510      	push	{r4, lr}
 8016364:	460c      	mov	r4, r1
 8016366:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8016368:	b169      	cbz	r1, 8016386 <__ssrefill_r+0x24>
 801636a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801636e:	4299      	cmp	r1, r3
 8016370:	d001      	beq.n	8016376 <__ssrefill_r+0x14>
 8016372:	f7ff fd69 	bl	8015e48 <_free_r>
 8016376:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016378:	6063      	str	r3, [r4, #4]
 801637a:	2000      	movs	r0, #0
 801637c:	6360      	str	r0, [r4, #52]	@ 0x34
 801637e:	b113      	cbz	r3, 8016386 <__ssrefill_r+0x24>
 8016380:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8016382:	6023      	str	r3, [r4, #0]
 8016384:	bd10      	pop	{r4, pc}
 8016386:	6923      	ldr	r3, [r4, #16]
 8016388:	6023      	str	r3, [r4, #0]
 801638a:	2300      	movs	r3, #0
 801638c:	6063      	str	r3, [r4, #4]
 801638e:	89a3      	ldrh	r3, [r4, #12]
 8016390:	f043 0320 	orr.w	r3, r3, #32
 8016394:	81a3      	strh	r3, [r4, #12]
 8016396:	f04f 30ff 	mov.w	r0, #4294967295
 801639a:	e7f3      	b.n	8016384 <__ssrefill_r+0x22>

0801639c <__ssvfiscanf_r>:
 801639c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163a0:	460c      	mov	r4, r1
 80163a2:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80163a6:	2100      	movs	r1, #0
 80163a8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80163ac:	49a6      	ldr	r1, [pc, #664]	@ (8016648 <__ssvfiscanf_r+0x2ac>)
 80163ae:	91a0      	str	r1, [sp, #640]	@ 0x280
 80163b0:	f10d 0804 	add.w	r8, sp, #4
 80163b4:	49a5      	ldr	r1, [pc, #660]	@ (801664c <__ssvfiscanf_r+0x2b0>)
 80163b6:	4fa6      	ldr	r7, [pc, #664]	@ (8016650 <__ssvfiscanf_r+0x2b4>)
 80163b8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80163bc:	4606      	mov	r6, r0
 80163be:	91a1      	str	r1, [sp, #644]	@ 0x284
 80163c0:	9300      	str	r3, [sp, #0]
 80163c2:	f892 9000 	ldrb.w	r9, [r2]
 80163c6:	f1b9 0f00 	cmp.w	r9, #0
 80163ca:	f000 8158 	beq.w	801667e <__ssvfiscanf_r+0x2e2>
 80163ce:	f817 3009 	ldrb.w	r3, [r7, r9]
 80163d2:	f013 0308 	ands.w	r3, r3, #8
 80163d6:	f102 0501 	add.w	r5, r2, #1
 80163da:	d019      	beq.n	8016410 <__ssvfiscanf_r+0x74>
 80163dc:	6863      	ldr	r3, [r4, #4]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	dd0f      	ble.n	8016402 <__ssvfiscanf_r+0x66>
 80163e2:	6823      	ldr	r3, [r4, #0]
 80163e4:	781a      	ldrb	r2, [r3, #0]
 80163e6:	5cba      	ldrb	r2, [r7, r2]
 80163e8:	0712      	lsls	r2, r2, #28
 80163ea:	d401      	bmi.n	80163f0 <__ssvfiscanf_r+0x54>
 80163ec:	462a      	mov	r2, r5
 80163ee:	e7e8      	b.n	80163c2 <__ssvfiscanf_r+0x26>
 80163f0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80163f2:	3201      	adds	r2, #1
 80163f4:	9245      	str	r2, [sp, #276]	@ 0x114
 80163f6:	6862      	ldr	r2, [r4, #4]
 80163f8:	3301      	adds	r3, #1
 80163fa:	3a01      	subs	r2, #1
 80163fc:	6062      	str	r2, [r4, #4]
 80163fe:	6023      	str	r3, [r4, #0]
 8016400:	e7ec      	b.n	80163dc <__ssvfiscanf_r+0x40>
 8016402:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016404:	4621      	mov	r1, r4
 8016406:	4630      	mov	r0, r6
 8016408:	4798      	blx	r3
 801640a:	2800      	cmp	r0, #0
 801640c:	d0e9      	beq.n	80163e2 <__ssvfiscanf_r+0x46>
 801640e:	e7ed      	b.n	80163ec <__ssvfiscanf_r+0x50>
 8016410:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8016414:	f040 8085 	bne.w	8016522 <__ssvfiscanf_r+0x186>
 8016418:	9341      	str	r3, [sp, #260]	@ 0x104
 801641a:	9343      	str	r3, [sp, #268]	@ 0x10c
 801641c:	7853      	ldrb	r3, [r2, #1]
 801641e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016420:	bf02      	ittt	eq
 8016422:	2310      	moveq	r3, #16
 8016424:	1c95      	addeq	r5, r2, #2
 8016426:	9341      	streq	r3, [sp, #260]	@ 0x104
 8016428:	220a      	movs	r2, #10
 801642a:	46aa      	mov	sl, r5
 801642c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8016430:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8016434:	2b09      	cmp	r3, #9
 8016436:	d91e      	bls.n	8016476 <__ssvfiscanf_r+0xda>
 8016438:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8016654 <__ssvfiscanf_r+0x2b8>
 801643c:	2203      	movs	r2, #3
 801643e:	4658      	mov	r0, fp
 8016440:	f7e9 fede 	bl	8000200 <memchr>
 8016444:	b138      	cbz	r0, 8016456 <__ssvfiscanf_r+0xba>
 8016446:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8016448:	eba0 000b 	sub.w	r0, r0, fp
 801644c:	2301      	movs	r3, #1
 801644e:	4083      	lsls	r3, r0
 8016450:	4313      	orrs	r3, r2
 8016452:	9341      	str	r3, [sp, #260]	@ 0x104
 8016454:	4655      	mov	r5, sl
 8016456:	f815 3b01 	ldrb.w	r3, [r5], #1
 801645a:	2b78      	cmp	r3, #120	@ 0x78
 801645c:	d806      	bhi.n	801646c <__ssvfiscanf_r+0xd0>
 801645e:	2b57      	cmp	r3, #87	@ 0x57
 8016460:	d810      	bhi.n	8016484 <__ssvfiscanf_r+0xe8>
 8016462:	2b25      	cmp	r3, #37	@ 0x25
 8016464:	d05d      	beq.n	8016522 <__ssvfiscanf_r+0x186>
 8016466:	d857      	bhi.n	8016518 <__ssvfiscanf_r+0x17c>
 8016468:	2b00      	cmp	r3, #0
 801646a:	d075      	beq.n	8016558 <__ssvfiscanf_r+0x1bc>
 801646c:	2303      	movs	r3, #3
 801646e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8016470:	230a      	movs	r3, #10
 8016472:	9342      	str	r3, [sp, #264]	@ 0x108
 8016474:	e088      	b.n	8016588 <__ssvfiscanf_r+0x1ec>
 8016476:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8016478:	fb02 1103 	mla	r1, r2, r3, r1
 801647c:	3930      	subs	r1, #48	@ 0x30
 801647e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8016480:	4655      	mov	r5, sl
 8016482:	e7d2      	b.n	801642a <__ssvfiscanf_r+0x8e>
 8016484:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8016488:	2a20      	cmp	r2, #32
 801648a:	d8ef      	bhi.n	801646c <__ssvfiscanf_r+0xd0>
 801648c:	a101      	add	r1, pc, #4	@ (adr r1, 8016494 <__ssvfiscanf_r+0xf8>)
 801648e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016492:	bf00      	nop
 8016494:	08016567 	.word	0x08016567
 8016498:	0801646d 	.word	0x0801646d
 801649c:	0801646d 	.word	0x0801646d
 80164a0:	080165c1 	.word	0x080165c1
 80164a4:	0801646d 	.word	0x0801646d
 80164a8:	0801646d 	.word	0x0801646d
 80164ac:	0801646d 	.word	0x0801646d
 80164b0:	0801646d 	.word	0x0801646d
 80164b4:	0801646d 	.word	0x0801646d
 80164b8:	0801646d 	.word	0x0801646d
 80164bc:	0801646d 	.word	0x0801646d
 80164c0:	080165d7 	.word	0x080165d7
 80164c4:	080165bd 	.word	0x080165bd
 80164c8:	0801651f 	.word	0x0801651f
 80164cc:	0801651f 	.word	0x0801651f
 80164d0:	0801651f 	.word	0x0801651f
 80164d4:	0801646d 	.word	0x0801646d
 80164d8:	08016579 	.word	0x08016579
 80164dc:	0801646d 	.word	0x0801646d
 80164e0:	0801646d 	.word	0x0801646d
 80164e4:	0801646d 	.word	0x0801646d
 80164e8:	0801646d 	.word	0x0801646d
 80164ec:	080165e7 	.word	0x080165e7
 80164f0:	08016581 	.word	0x08016581
 80164f4:	0801655f 	.word	0x0801655f
 80164f8:	0801646d 	.word	0x0801646d
 80164fc:	0801646d 	.word	0x0801646d
 8016500:	080165e3 	.word	0x080165e3
 8016504:	0801646d 	.word	0x0801646d
 8016508:	080165bd 	.word	0x080165bd
 801650c:	0801646d 	.word	0x0801646d
 8016510:	0801646d 	.word	0x0801646d
 8016514:	08016567 	.word	0x08016567
 8016518:	3b45      	subs	r3, #69	@ 0x45
 801651a:	2b02      	cmp	r3, #2
 801651c:	d8a6      	bhi.n	801646c <__ssvfiscanf_r+0xd0>
 801651e:	2305      	movs	r3, #5
 8016520:	e031      	b.n	8016586 <__ssvfiscanf_r+0x1ea>
 8016522:	6863      	ldr	r3, [r4, #4]
 8016524:	2b00      	cmp	r3, #0
 8016526:	dd0d      	ble.n	8016544 <__ssvfiscanf_r+0x1a8>
 8016528:	6823      	ldr	r3, [r4, #0]
 801652a:	781a      	ldrb	r2, [r3, #0]
 801652c:	454a      	cmp	r2, r9
 801652e:	f040 80a6 	bne.w	801667e <__ssvfiscanf_r+0x2e2>
 8016532:	3301      	adds	r3, #1
 8016534:	6862      	ldr	r2, [r4, #4]
 8016536:	6023      	str	r3, [r4, #0]
 8016538:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801653a:	3a01      	subs	r2, #1
 801653c:	3301      	adds	r3, #1
 801653e:	6062      	str	r2, [r4, #4]
 8016540:	9345      	str	r3, [sp, #276]	@ 0x114
 8016542:	e753      	b.n	80163ec <__ssvfiscanf_r+0x50>
 8016544:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016546:	4621      	mov	r1, r4
 8016548:	4630      	mov	r0, r6
 801654a:	4798      	blx	r3
 801654c:	2800      	cmp	r0, #0
 801654e:	d0eb      	beq.n	8016528 <__ssvfiscanf_r+0x18c>
 8016550:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8016552:	2800      	cmp	r0, #0
 8016554:	f040 808b 	bne.w	801666e <__ssvfiscanf_r+0x2d2>
 8016558:	f04f 30ff 	mov.w	r0, #4294967295
 801655c:	e08b      	b.n	8016676 <__ssvfiscanf_r+0x2da>
 801655e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8016560:	f042 0220 	orr.w	r2, r2, #32
 8016564:	9241      	str	r2, [sp, #260]	@ 0x104
 8016566:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8016568:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801656c:	9241      	str	r2, [sp, #260]	@ 0x104
 801656e:	2210      	movs	r2, #16
 8016570:	2b6e      	cmp	r3, #110	@ 0x6e
 8016572:	9242      	str	r2, [sp, #264]	@ 0x108
 8016574:	d902      	bls.n	801657c <__ssvfiscanf_r+0x1e0>
 8016576:	e005      	b.n	8016584 <__ssvfiscanf_r+0x1e8>
 8016578:	2300      	movs	r3, #0
 801657a:	9342      	str	r3, [sp, #264]	@ 0x108
 801657c:	2303      	movs	r3, #3
 801657e:	e002      	b.n	8016586 <__ssvfiscanf_r+0x1ea>
 8016580:	2308      	movs	r3, #8
 8016582:	9342      	str	r3, [sp, #264]	@ 0x108
 8016584:	2304      	movs	r3, #4
 8016586:	9347      	str	r3, [sp, #284]	@ 0x11c
 8016588:	6863      	ldr	r3, [r4, #4]
 801658a:	2b00      	cmp	r3, #0
 801658c:	dd39      	ble.n	8016602 <__ssvfiscanf_r+0x266>
 801658e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8016590:	0659      	lsls	r1, r3, #25
 8016592:	d404      	bmi.n	801659e <__ssvfiscanf_r+0x202>
 8016594:	6823      	ldr	r3, [r4, #0]
 8016596:	781a      	ldrb	r2, [r3, #0]
 8016598:	5cba      	ldrb	r2, [r7, r2]
 801659a:	0712      	lsls	r2, r2, #28
 801659c:	d438      	bmi.n	8016610 <__ssvfiscanf_r+0x274>
 801659e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80165a0:	2b02      	cmp	r3, #2
 80165a2:	dc47      	bgt.n	8016634 <__ssvfiscanf_r+0x298>
 80165a4:	466b      	mov	r3, sp
 80165a6:	4622      	mov	r2, r4
 80165a8:	a941      	add	r1, sp, #260	@ 0x104
 80165aa:	4630      	mov	r0, r6
 80165ac:	f000 f9f8 	bl	80169a0 <_scanf_chars>
 80165b0:	2801      	cmp	r0, #1
 80165b2:	d064      	beq.n	801667e <__ssvfiscanf_r+0x2e2>
 80165b4:	2802      	cmp	r0, #2
 80165b6:	f47f af19 	bne.w	80163ec <__ssvfiscanf_r+0x50>
 80165ba:	e7c9      	b.n	8016550 <__ssvfiscanf_r+0x1b4>
 80165bc:	220a      	movs	r2, #10
 80165be:	e7d7      	b.n	8016570 <__ssvfiscanf_r+0x1d4>
 80165c0:	4629      	mov	r1, r5
 80165c2:	4640      	mov	r0, r8
 80165c4:	f000 fb3a 	bl	8016c3c <__sccl>
 80165c8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80165ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80165ce:	9341      	str	r3, [sp, #260]	@ 0x104
 80165d0:	4605      	mov	r5, r0
 80165d2:	2301      	movs	r3, #1
 80165d4:	e7d7      	b.n	8016586 <__ssvfiscanf_r+0x1ea>
 80165d6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80165d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80165dc:	9341      	str	r3, [sp, #260]	@ 0x104
 80165de:	2300      	movs	r3, #0
 80165e0:	e7d1      	b.n	8016586 <__ssvfiscanf_r+0x1ea>
 80165e2:	2302      	movs	r3, #2
 80165e4:	e7cf      	b.n	8016586 <__ssvfiscanf_r+0x1ea>
 80165e6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80165e8:	06c3      	lsls	r3, r0, #27
 80165ea:	f53f aeff 	bmi.w	80163ec <__ssvfiscanf_r+0x50>
 80165ee:	9b00      	ldr	r3, [sp, #0]
 80165f0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80165f2:	1d19      	adds	r1, r3, #4
 80165f4:	9100      	str	r1, [sp, #0]
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	07c0      	lsls	r0, r0, #31
 80165fa:	bf4c      	ite	mi
 80165fc:	801a      	strhmi	r2, [r3, #0]
 80165fe:	601a      	strpl	r2, [r3, #0]
 8016600:	e6f4      	b.n	80163ec <__ssvfiscanf_r+0x50>
 8016602:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016604:	4621      	mov	r1, r4
 8016606:	4630      	mov	r0, r6
 8016608:	4798      	blx	r3
 801660a:	2800      	cmp	r0, #0
 801660c:	d0bf      	beq.n	801658e <__ssvfiscanf_r+0x1f2>
 801660e:	e79f      	b.n	8016550 <__ssvfiscanf_r+0x1b4>
 8016610:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8016612:	3201      	adds	r2, #1
 8016614:	9245      	str	r2, [sp, #276]	@ 0x114
 8016616:	6862      	ldr	r2, [r4, #4]
 8016618:	3a01      	subs	r2, #1
 801661a:	2a00      	cmp	r2, #0
 801661c:	6062      	str	r2, [r4, #4]
 801661e:	dd02      	ble.n	8016626 <__ssvfiscanf_r+0x28a>
 8016620:	3301      	adds	r3, #1
 8016622:	6023      	str	r3, [r4, #0]
 8016624:	e7b6      	b.n	8016594 <__ssvfiscanf_r+0x1f8>
 8016626:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016628:	4621      	mov	r1, r4
 801662a:	4630      	mov	r0, r6
 801662c:	4798      	blx	r3
 801662e:	2800      	cmp	r0, #0
 8016630:	d0b0      	beq.n	8016594 <__ssvfiscanf_r+0x1f8>
 8016632:	e78d      	b.n	8016550 <__ssvfiscanf_r+0x1b4>
 8016634:	2b04      	cmp	r3, #4
 8016636:	dc0f      	bgt.n	8016658 <__ssvfiscanf_r+0x2bc>
 8016638:	466b      	mov	r3, sp
 801663a:	4622      	mov	r2, r4
 801663c:	a941      	add	r1, sp, #260	@ 0x104
 801663e:	4630      	mov	r0, r6
 8016640:	f000 fa08 	bl	8016a54 <_scanf_i>
 8016644:	e7b4      	b.n	80165b0 <__ssvfiscanf_r+0x214>
 8016646:	bf00      	nop
 8016648:	080162e9 	.word	0x080162e9
 801664c:	08016363 	.word	0x08016363
 8016650:	0801753b 	.word	0x0801753b
 8016654:	08017641 	.word	0x08017641
 8016658:	4b0a      	ldr	r3, [pc, #40]	@ (8016684 <__ssvfiscanf_r+0x2e8>)
 801665a:	2b00      	cmp	r3, #0
 801665c:	f43f aec6 	beq.w	80163ec <__ssvfiscanf_r+0x50>
 8016660:	466b      	mov	r3, sp
 8016662:	4622      	mov	r2, r4
 8016664:	a941      	add	r1, sp, #260	@ 0x104
 8016666:	4630      	mov	r0, r6
 8016668:	f3af 8000 	nop.w
 801666c:	e7a0      	b.n	80165b0 <__ssvfiscanf_r+0x214>
 801666e:	89a3      	ldrh	r3, [r4, #12]
 8016670:	065b      	lsls	r3, r3, #25
 8016672:	f53f af71 	bmi.w	8016558 <__ssvfiscanf_r+0x1bc>
 8016676:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801667a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801667e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8016680:	e7f9      	b.n	8016676 <__ssvfiscanf_r+0x2da>
 8016682:	bf00      	nop
 8016684:	00000000 	.word	0x00000000

08016688 <_printf_common>:
 8016688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801668c:	4616      	mov	r6, r2
 801668e:	4698      	mov	r8, r3
 8016690:	688a      	ldr	r2, [r1, #8]
 8016692:	690b      	ldr	r3, [r1, #16]
 8016694:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016698:	4293      	cmp	r3, r2
 801669a:	bfb8      	it	lt
 801669c:	4613      	movlt	r3, r2
 801669e:	6033      	str	r3, [r6, #0]
 80166a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80166a4:	4607      	mov	r7, r0
 80166a6:	460c      	mov	r4, r1
 80166a8:	b10a      	cbz	r2, 80166ae <_printf_common+0x26>
 80166aa:	3301      	adds	r3, #1
 80166ac:	6033      	str	r3, [r6, #0]
 80166ae:	6823      	ldr	r3, [r4, #0]
 80166b0:	0699      	lsls	r1, r3, #26
 80166b2:	bf42      	ittt	mi
 80166b4:	6833      	ldrmi	r3, [r6, #0]
 80166b6:	3302      	addmi	r3, #2
 80166b8:	6033      	strmi	r3, [r6, #0]
 80166ba:	6825      	ldr	r5, [r4, #0]
 80166bc:	f015 0506 	ands.w	r5, r5, #6
 80166c0:	d106      	bne.n	80166d0 <_printf_common+0x48>
 80166c2:	f104 0a19 	add.w	sl, r4, #25
 80166c6:	68e3      	ldr	r3, [r4, #12]
 80166c8:	6832      	ldr	r2, [r6, #0]
 80166ca:	1a9b      	subs	r3, r3, r2
 80166cc:	42ab      	cmp	r3, r5
 80166ce:	dc26      	bgt.n	801671e <_printf_common+0x96>
 80166d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80166d4:	6822      	ldr	r2, [r4, #0]
 80166d6:	3b00      	subs	r3, #0
 80166d8:	bf18      	it	ne
 80166da:	2301      	movne	r3, #1
 80166dc:	0692      	lsls	r2, r2, #26
 80166de:	d42b      	bmi.n	8016738 <_printf_common+0xb0>
 80166e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80166e4:	4641      	mov	r1, r8
 80166e6:	4638      	mov	r0, r7
 80166e8:	47c8      	blx	r9
 80166ea:	3001      	adds	r0, #1
 80166ec:	d01e      	beq.n	801672c <_printf_common+0xa4>
 80166ee:	6823      	ldr	r3, [r4, #0]
 80166f0:	6922      	ldr	r2, [r4, #16]
 80166f2:	f003 0306 	and.w	r3, r3, #6
 80166f6:	2b04      	cmp	r3, #4
 80166f8:	bf02      	ittt	eq
 80166fa:	68e5      	ldreq	r5, [r4, #12]
 80166fc:	6833      	ldreq	r3, [r6, #0]
 80166fe:	1aed      	subeq	r5, r5, r3
 8016700:	68a3      	ldr	r3, [r4, #8]
 8016702:	bf0c      	ite	eq
 8016704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016708:	2500      	movne	r5, #0
 801670a:	4293      	cmp	r3, r2
 801670c:	bfc4      	itt	gt
 801670e:	1a9b      	subgt	r3, r3, r2
 8016710:	18ed      	addgt	r5, r5, r3
 8016712:	2600      	movs	r6, #0
 8016714:	341a      	adds	r4, #26
 8016716:	42b5      	cmp	r5, r6
 8016718:	d11a      	bne.n	8016750 <_printf_common+0xc8>
 801671a:	2000      	movs	r0, #0
 801671c:	e008      	b.n	8016730 <_printf_common+0xa8>
 801671e:	2301      	movs	r3, #1
 8016720:	4652      	mov	r2, sl
 8016722:	4641      	mov	r1, r8
 8016724:	4638      	mov	r0, r7
 8016726:	47c8      	blx	r9
 8016728:	3001      	adds	r0, #1
 801672a:	d103      	bne.n	8016734 <_printf_common+0xac>
 801672c:	f04f 30ff 	mov.w	r0, #4294967295
 8016730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016734:	3501      	adds	r5, #1
 8016736:	e7c6      	b.n	80166c6 <_printf_common+0x3e>
 8016738:	18e1      	adds	r1, r4, r3
 801673a:	1c5a      	adds	r2, r3, #1
 801673c:	2030      	movs	r0, #48	@ 0x30
 801673e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016742:	4422      	add	r2, r4
 8016744:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016748:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801674c:	3302      	adds	r3, #2
 801674e:	e7c7      	b.n	80166e0 <_printf_common+0x58>
 8016750:	2301      	movs	r3, #1
 8016752:	4622      	mov	r2, r4
 8016754:	4641      	mov	r1, r8
 8016756:	4638      	mov	r0, r7
 8016758:	47c8      	blx	r9
 801675a:	3001      	adds	r0, #1
 801675c:	d0e6      	beq.n	801672c <_printf_common+0xa4>
 801675e:	3601      	adds	r6, #1
 8016760:	e7d9      	b.n	8016716 <_printf_common+0x8e>
	...

08016764 <_printf_i>:
 8016764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016768:	7e0f      	ldrb	r7, [r1, #24]
 801676a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801676c:	2f78      	cmp	r7, #120	@ 0x78
 801676e:	4691      	mov	r9, r2
 8016770:	4680      	mov	r8, r0
 8016772:	460c      	mov	r4, r1
 8016774:	469a      	mov	sl, r3
 8016776:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801677a:	d807      	bhi.n	801678c <_printf_i+0x28>
 801677c:	2f62      	cmp	r7, #98	@ 0x62
 801677e:	d80a      	bhi.n	8016796 <_printf_i+0x32>
 8016780:	2f00      	cmp	r7, #0
 8016782:	f000 80d1 	beq.w	8016928 <_printf_i+0x1c4>
 8016786:	2f58      	cmp	r7, #88	@ 0x58
 8016788:	f000 80b8 	beq.w	80168fc <_printf_i+0x198>
 801678c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016790:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016794:	e03a      	b.n	801680c <_printf_i+0xa8>
 8016796:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801679a:	2b15      	cmp	r3, #21
 801679c:	d8f6      	bhi.n	801678c <_printf_i+0x28>
 801679e:	a101      	add	r1, pc, #4	@ (adr r1, 80167a4 <_printf_i+0x40>)
 80167a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80167a4:	080167fd 	.word	0x080167fd
 80167a8:	08016811 	.word	0x08016811
 80167ac:	0801678d 	.word	0x0801678d
 80167b0:	0801678d 	.word	0x0801678d
 80167b4:	0801678d 	.word	0x0801678d
 80167b8:	0801678d 	.word	0x0801678d
 80167bc:	08016811 	.word	0x08016811
 80167c0:	0801678d 	.word	0x0801678d
 80167c4:	0801678d 	.word	0x0801678d
 80167c8:	0801678d 	.word	0x0801678d
 80167cc:	0801678d 	.word	0x0801678d
 80167d0:	0801690f 	.word	0x0801690f
 80167d4:	0801683b 	.word	0x0801683b
 80167d8:	080168c9 	.word	0x080168c9
 80167dc:	0801678d 	.word	0x0801678d
 80167e0:	0801678d 	.word	0x0801678d
 80167e4:	08016931 	.word	0x08016931
 80167e8:	0801678d 	.word	0x0801678d
 80167ec:	0801683b 	.word	0x0801683b
 80167f0:	0801678d 	.word	0x0801678d
 80167f4:	0801678d 	.word	0x0801678d
 80167f8:	080168d1 	.word	0x080168d1
 80167fc:	6833      	ldr	r3, [r6, #0]
 80167fe:	1d1a      	adds	r2, r3, #4
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	6032      	str	r2, [r6, #0]
 8016804:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016808:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801680c:	2301      	movs	r3, #1
 801680e:	e09c      	b.n	801694a <_printf_i+0x1e6>
 8016810:	6833      	ldr	r3, [r6, #0]
 8016812:	6820      	ldr	r0, [r4, #0]
 8016814:	1d19      	adds	r1, r3, #4
 8016816:	6031      	str	r1, [r6, #0]
 8016818:	0606      	lsls	r6, r0, #24
 801681a:	d501      	bpl.n	8016820 <_printf_i+0xbc>
 801681c:	681d      	ldr	r5, [r3, #0]
 801681e:	e003      	b.n	8016828 <_printf_i+0xc4>
 8016820:	0645      	lsls	r5, r0, #25
 8016822:	d5fb      	bpl.n	801681c <_printf_i+0xb8>
 8016824:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016828:	2d00      	cmp	r5, #0
 801682a:	da03      	bge.n	8016834 <_printf_i+0xd0>
 801682c:	232d      	movs	r3, #45	@ 0x2d
 801682e:	426d      	negs	r5, r5
 8016830:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016834:	4858      	ldr	r0, [pc, #352]	@ (8016998 <_printf_i+0x234>)
 8016836:	230a      	movs	r3, #10
 8016838:	e011      	b.n	801685e <_printf_i+0xfa>
 801683a:	6821      	ldr	r1, [r4, #0]
 801683c:	6833      	ldr	r3, [r6, #0]
 801683e:	0608      	lsls	r0, r1, #24
 8016840:	f853 5b04 	ldr.w	r5, [r3], #4
 8016844:	d402      	bmi.n	801684c <_printf_i+0xe8>
 8016846:	0649      	lsls	r1, r1, #25
 8016848:	bf48      	it	mi
 801684a:	b2ad      	uxthmi	r5, r5
 801684c:	2f6f      	cmp	r7, #111	@ 0x6f
 801684e:	4852      	ldr	r0, [pc, #328]	@ (8016998 <_printf_i+0x234>)
 8016850:	6033      	str	r3, [r6, #0]
 8016852:	bf14      	ite	ne
 8016854:	230a      	movne	r3, #10
 8016856:	2308      	moveq	r3, #8
 8016858:	2100      	movs	r1, #0
 801685a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801685e:	6866      	ldr	r6, [r4, #4]
 8016860:	60a6      	str	r6, [r4, #8]
 8016862:	2e00      	cmp	r6, #0
 8016864:	db05      	blt.n	8016872 <_printf_i+0x10e>
 8016866:	6821      	ldr	r1, [r4, #0]
 8016868:	432e      	orrs	r6, r5
 801686a:	f021 0104 	bic.w	r1, r1, #4
 801686e:	6021      	str	r1, [r4, #0]
 8016870:	d04b      	beq.n	801690a <_printf_i+0x1a6>
 8016872:	4616      	mov	r6, r2
 8016874:	fbb5 f1f3 	udiv	r1, r5, r3
 8016878:	fb03 5711 	mls	r7, r3, r1, r5
 801687c:	5dc7      	ldrb	r7, [r0, r7]
 801687e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016882:	462f      	mov	r7, r5
 8016884:	42bb      	cmp	r3, r7
 8016886:	460d      	mov	r5, r1
 8016888:	d9f4      	bls.n	8016874 <_printf_i+0x110>
 801688a:	2b08      	cmp	r3, #8
 801688c:	d10b      	bne.n	80168a6 <_printf_i+0x142>
 801688e:	6823      	ldr	r3, [r4, #0]
 8016890:	07df      	lsls	r7, r3, #31
 8016892:	d508      	bpl.n	80168a6 <_printf_i+0x142>
 8016894:	6923      	ldr	r3, [r4, #16]
 8016896:	6861      	ldr	r1, [r4, #4]
 8016898:	4299      	cmp	r1, r3
 801689a:	bfde      	ittt	le
 801689c:	2330      	movle	r3, #48	@ 0x30
 801689e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80168a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80168a6:	1b92      	subs	r2, r2, r6
 80168a8:	6122      	str	r2, [r4, #16]
 80168aa:	f8cd a000 	str.w	sl, [sp]
 80168ae:	464b      	mov	r3, r9
 80168b0:	aa03      	add	r2, sp, #12
 80168b2:	4621      	mov	r1, r4
 80168b4:	4640      	mov	r0, r8
 80168b6:	f7ff fee7 	bl	8016688 <_printf_common>
 80168ba:	3001      	adds	r0, #1
 80168bc:	d14a      	bne.n	8016954 <_printf_i+0x1f0>
 80168be:	f04f 30ff 	mov.w	r0, #4294967295
 80168c2:	b004      	add	sp, #16
 80168c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168c8:	6823      	ldr	r3, [r4, #0]
 80168ca:	f043 0320 	orr.w	r3, r3, #32
 80168ce:	6023      	str	r3, [r4, #0]
 80168d0:	4832      	ldr	r0, [pc, #200]	@ (801699c <_printf_i+0x238>)
 80168d2:	2778      	movs	r7, #120	@ 0x78
 80168d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80168d8:	6823      	ldr	r3, [r4, #0]
 80168da:	6831      	ldr	r1, [r6, #0]
 80168dc:	061f      	lsls	r7, r3, #24
 80168de:	f851 5b04 	ldr.w	r5, [r1], #4
 80168e2:	d402      	bmi.n	80168ea <_printf_i+0x186>
 80168e4:	065f      	lsls	r7, r3, #25
 80168e6:	bf48      	it	mi
 80168e8:	b2ad      	uxthmi	r5, r5
 80168ea:	6031      	str	r1, [r6, #0]
 80168ec:	07d9      	lsls	r1, r3, #31
 80168ee:	bf44      	itt	mi
 80168f0:	f043 0320 	orrmi.w	r3, r3, #32
 80168f4:	6023      	strmi	r3, [r4, #0]
 80168f6:	b11d      	cbz	r5, 8016900 <_printf_i+0x19c>
 80168f8:	2310      	movs	r3, #16
 80168fa:	e7ad      	b.n	8016858 <_printf_i+0xf4>
 80168fc:	4826      	ldr	r0, [pc, #152]	@ (8016998 <_printf_i+0x234>)
 80168fe:	e7e9      	b.n	80168d4 <_printf_i+0x170>
 8016900:	6823      	ldr	r3, [r4, #0]
 8016902:	f023 0320 	bic.w	r3, r3, #32
 8016906:	6023      	str	r3, [r4, #0]
 8016908:	e7f6      	b.n	80168f8 <_printf_i+0x194>
 801690a:	4616      	mov	r6, r2
 801690c:	e7bd      	b.n	801688a <_printf_i+0x126>
 801690e:	6833      	ldr	r3, [r6, #0]
 8016910:	6825      	ldr	r5, [r4, #0]
 8016912:	6961      	ldr	r1, [r4, #20]
 8016914:	1d18      	adds	r0, r3, #4
 8016916:	6030      	str	r0, [r6, #0]
 8016918:	062e      	lsls	r6, r5, #24
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	d501      	bpl.n	8016922 <_printf_i+0x1be>
 801691e:	6019      	str	r1, [r3, #0]
 8016920:	e002      	b.n	8016928 <_printf_i+0x1c4>
 8016922:	0668      	lsls	r0, r5, #25
 8016924:	d5fb      	bpl.n	801691e <_printf_i+0x1ba>
 8016926:	8019      	strh	r1, [r3, #0]
 8016928:	2300      	movs	r3, #0
 801692a:	6123      	str	r3, [r4, #16]
 801692c:	4616      	mov	r6, r2
 801692e:	e7bc      	b.n	80168aa <_printf_i+0x146>
 8016930:	6833      	ldr	r3, [r6, #0]
 8016932:	1d1a      	adds	r2, r3, #4
 8016934:	6032      	str	r2, [r6, #0]
 8016936:	681e      	ldr	r6, [r3, #0]
 8016938:	6862      	ldr	r2, [r4, #4]
 801693a:	2100      	movs	r1, #0
 801693c:	4630      	mov	r0, r6
 801693e:	f7e9 fc5f 	bl	8000200 <memchr>
 8016942:	b108      	cbz	r0, 8016948 <_printf_i+0x1e4>
 8016944:	1b80      	subs	r0, r0, r6
 8016946:	6060      	str	r0, [r4, #4]
 8016948:	6863      	ldr	r3, [r4, #4]
 801694a:	6123      	str	r3, [r4, #16]
 801694c:	2300      	movs	r3, #0
 801694e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016952:	e7aa      	b.n	80168aa <_printf_i+0x146>
 8016954:	6923      	ldr	r3, [r4, #16]
 8016956:	4632      	mov	r2, r6
 8016958:	4649      	mov	r1, r9
 801695a:	4640      	mov	r0, r8
 801695c:	47d0      	blx	sl
 801695e:	3001      	adds	r0, #1
 8016960:	d0ad      	beq.n	80168be <_printf_i+0x15a>
 8016962:	6823      	ldr	r3, [r4, #0]
 8016964:	079b      	lsls	r3, r3, #30
 8016966:	d413      	bmi.n	8016990 <_printf_i+0x22c>
 8016968:	68e0      	ldr	r0, [r4, #12]
 801696a:	9b03      	ldr	r3, [sp, #12]
 801696c:	4298      	cmp	r0, r3
 801696e:	bfb8      	it	lt
 8016970:	4618      	movlt	r0, r3
 8016972:	e7a6      	b.n	80168c2 <_printf_i+0x15e>
 8016974:	2301      	movs	r3, #1
 8016976:	4632      	mov	r2, r6
 8016978:	4649      	mov	r1, r9
 801697a:	4640      	mov	r0, r8
 801697c:	47d0      	blx	sl
 801697e:	3001      	adds	r0, #1
 8016980:	d09d      	beq.n	80168be <_printf_i+0x15a>
 8016982:	3501      	adds	r5, #1
 8016984:	68e3      	ldr	r3, [r4, #12]
 8016986:	9903      	ldr	r1, [sp, #12]
 8016988:	1a5b      	subs	r3, r3, r1
 801698a:	42ab      	cmp	r3, r5
 801698c:	dcf2      	bgt.n	8016974 <_printf_i+0x210>
 801698e:	e7eb      	b.n	8016968 <_printf_i+0x204>
 8016990:	2500      	movs	r5, #0
 8016992:	f104 0619 	add.w	r6, r4, #25
 8016996:	e7f5      	b.n	8016984 <_printf_i+0x220>
 8016998:	0801764c 	.word	0x0801764c
 801699c:	0801765d 	.word	0x0801765d

080169a0 <_scanf_chars>:
 80169a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80169a4:	4615      	mov	r5, r2
 80169a6:	688a      	ldr	r2, [r1, #8]
 80169a8:	4680      	mov	r8, r0
 80169aa:	460c      	mov	r4, r1
 80169ac:	b932      	cbnz	r2, 80169bc <_scanf_chars+0x1c>
 80169ae:	698a      	ldr	r2, [r1, #24]
 80169b0:	2a00      	cmp	r2, #0
 80169b2:	bf14      	ite	ne
 80169b4:	f04f 32ff 	movne.w	r2, #4294967295
 80169b8:	2201      	moveq	r2, #1
 80169ba:	608a      	str	r2, [r1, #8]
 80169bc:	6822      	ldr	r2, [r4, #0]
 80169be:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8016a50 <_scanf_chars+0xb0>
 80169c2:	06d1      	lsls	r1, r2, #27
 80169c4:	bf5f      	itttt	pl
 80169c6:	681a      	ldrpl	r2, [r3, #0]
 80169c8:	1d11      	addpl	r1, r2, #4
 80169ca:	6019      	strpl	r1, [r3, #0]
 80169cc:	6816      	ldrpl	r6, [r2, #0]
 80169ce:	2700      	movs	r7, #0
 80169d0:	69a0      	ldr	r0, [r4, #24]
 80169d2:	b188      	cbz	r0, 80169f8 <_scanf_chars+0x58>
 80169d4:	2801      	cmp	r0, #1
 80169d6:	d107      	bne.n	80169e8 <_scanf_chars+0x48>
 80169d8:	682b      	ldr	r3, [r5, #0]
 80169da:	781a      	ldrb	r2, [r3, #0]
 80169dc:	6963      	ldr	r3, [r4, #20]
 80169de:	5c9b      	ldrb	r3, [r3, r2]
 80169e0:	b953      	cbnz	r3, 80169f8 <_scanf_chars+0x58>
 80169e2:	2f00      	cmp	r7, #0
 80169e4:	d031      	beq.n	8016a4a <_scanf_chars+0xaa>
 80169e6:	e022      	b.n	8016a2e <_scanf_chars+0x8e>
 80169e8:	2802      	cmp	r0, #2
 80169ea:	d120      	bne.n	8016a2e <_scanf_chars+0x8e>
 80169ec:	682b      	ldr	r3, [r5, #0]
 80169ee:	781b      	ldrb	r3, [r3, #0]
 80169f0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80169f4:	071b      	lsls	r3, r3, #28
 80169f6:	d41a      	bmi.n	8016a2e <_scanf_chars+0x8e>
 80169f8:	6823      	ldr	r3, [r4, #0]
 80169fa:	06da      	lsls	r2, r3, #27
 80169fc:	bf5e      	ittt	pl
 80169fe:	682b      	ldrpl	r3, [r5, #0]
 8016a00:	781b      	ldrbpl	r3, [r3, #0]
 8016a02:	f806 3b01 	strbpl.w	r3, [r6], #1
 8016a06:	682a      	ldr	r2, [r5, #0]
 8016a08:	686b      	ldr	r3, [r5, #4]
 8016a0a:	3201      	adds	r2, #1
 8016a0c:	602a      	str	r2, [r5, #0]
 8016a0e:	68a2      	ldr	r2, [r4, #8]
 8016a10:	3b01      	subs	r3, #1
 8016a12:	3a01      	subs	r2, #1
 8016a14:	606b      	str	r3, [r5, #4]
 8016a16:	3701      	adds	r7, #1
 8016a18:	60a2      	str	r2, [r4, #8]
 8016a1a:	b142      	cbz	r2, 8016a2e <_scanf_chars+0x8e>
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	dcd7      	bgt.n	80169d0 <_scanf_chars+0x30>
 8016a20:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8016a24:	4629      	mov	r1, r5
 8016a26:	4640      	mov	r0, r8
 8016a28:	4798      	blx	r3
 8016a2a:	2800      	cmp	r0, #0
 8016a2c:	d0d0      	beq.n	80169d0 <_scanf_chars+0x30>
 8016a2e:	6823      	ldr	r3, [r4, #0]
 8016a30:	f013 0310 	ands.w	r3, r3, #16
 8016a34:	d105      	bne.n	8016a42 <_scanf_chars+0xa2>
 8016a36:	68e2      	ldr	r2, [r4, #12]
 8016a38:	3201      	adds	r2, #1
 8016a3a:	60e2      	str	r2, [r4, #12]
 8016a3c:	69a2      	ldr	r2, [r4, #24]
 8016a3e:	b102      	cbz	r2, 8016a42 <_scanf_chars+0xa2>
 8016a40:	7033      	strb	r3, [r6, #0]
 8016a42:	6923      	ldr	r3, [r4, #16]
 8016a44:	443b      	add	r3, r7
 8016a46:	6123      	str	r3, [r4, #16]
 8016a48:	2000      	movs	r0, #0
 8016a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a4e:	bf00      	nop
 8016a50:	0801753b 	.word	0x0801753b

08016a54 <_scanf_i>:
 8016a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a58:	4698      	mov	r8, r3
 8016a5a:	4b74      	ldr	r3, [pc, #464]	@ (8016c2c <_scanf_i+0x1d8>)
 8016a5c:	460c      	mov	r4, r1
 8016a5e:	4682      	mov	sl, r0
 8016a60:	4616      	mov	r6, r2
 8016a62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016a66:	b087      	sub	sp, #28
 8016a68:	ab03      	add	r3, sp, #12
 8016a6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016a6e:	4b70      	ldr	r3, [pc, #448]	@ (8016c30 <_scanf_i+0x1dc>)
 8016a70:	69a1      	ldr	r1, [r4, #24]
 8016a72:	4a70      	ldr	r2, [pc, #448]	@ (8016c34 <_scanf_i+0x1e0>)
 8016a74:	2903      	cmp	r1, #3
 8016a76:	bf08      	it	eq
 8016a78:	461a      	moveq	r2, r3
 8016a7a:	68a3      	ldr	r3, [r4, #8]
 8016a7c:	9201      	str	r2, [sp, #4]
 8016a7e:	1e5a      	subs	r2, r3, #1
 8016a80:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8016a84:	bf88      	it	hi
 8016a86:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8016a8a:	4627      	mov	r7, r4
 8016a8c:	bf82      	ittt	hi
 8016a8e:	eb03 0905 	addhi.w	r9, r3, r5
 8016a92:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8016a96:	60a3      	strhi	r3, [r4, #8]
 8016a98:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016a9c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8016aa0:	bf98      	it	ls
 8016aa2:	f04f 0900 	movls.w	r9, #0
 8016aa6:	6023      	str	r3, [r4, #0]
 8016aa8:	463d      	mov	r5, r7
 8016aaa:	f04f 0b00 	mov.w	fp, #0
 8016aae:	6831      	ldr	r1, [r6, #0]
 8016ab0:	ab03      	add	r3, sp, #12
 8016ab2:	7809      	ldrb	r1, [r1, #0]
 8016ab4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016ab8:	2202      	movs	r2, #2
 8016aba:	f7e9 fba1 	bl	8000200 <memchr>
 8016abe:	b328      	cbz	r0, 8016b0c <_scanf_i+0xb8>
 8016ac0:	f1bb 0f01 	cmp.w	fp, #1
 8016ac4:	d159      	bne.n	8016b7a <_scanf_i+0x126>
 8016ac6:	6862      	ldr	r2, [r4, #4]
 8016ac8:	b92a      	cbnz	r2, 8016ad6 <_scanf_i+0x82>
 8016aca:	6822      	ldr	r2, [r4, #0]
 8016acc:	2108      	movs	r1, #8
 8016ace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016ad2:	6061      	str	r1, [r4, #4]
 8016ad4:	6022      	str	r2, [r4, #0]
 8016ad6:	6822      	ldr	r2, [r4, #0]
 8016ad8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8016adc:	6022      	str	r2, [r4, #0]
 8016ade:	68a2      	ldr	r2, [r4, #8]
 8016ae0:	1e51      	subs	r1, r2, #1
 8016ae2:	60a1      	str	r1, [r4, #8]
 8016ae4:	b192      	cbz	r2, 8016b0c <_scanf_i+0xb8>
 8016ae6:	6832      	ldr	r2, [r6, #0]
 8016ae8:	1c51      	adds	r1, r2, #1
 8016aea:	6031      	str	r1, [r6, #0]
 8016aec:	7812      	ldrb	r2, [r2, #0]
 8016aee:	f805 2b01 	strb.w	r2, [r5], #1
 8016af2:	6872      	ldr	r2, [r6, #4]
 8016af4:	3a01      	subs	r2, #1
 8016af6:	2a00      	cmp	r2, #0
 8016af8:	6072      	str	r2, [r6, #4]
 8016afa:	dc07      	bgt.n	8016b0c <_scanf_i+0xb8>
 8016afc:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8016b00:	4631      	mov	r1, r6
 8016b02:	4650      	mov	r0, sl
 8016b04:	4790      	blx	r2
 8016b06:	2800      	cmp	r0, #0
 8016b08:	f040 8085 	bne.w	8016c16 <_scanf_i+0x1c2>
 8016b0c:	f10b 0b01 	add.w	fp, fp, #1
 8016b10:	f1bb 0f03 	cmp.w	fp, #3
 8016b14:	d1cb      	bne.n	8016aae <_scanf_i+0x5a>
 8016b16:	6863      	ldr	r3, [r4, #4]
 8016b18:	b90b      	cbnz	r3, 8016b1e <_scanf_i+0xca>
 8016b1a:	230a      	movs	r3, #10
 8016b1c:	6063      	str	r3, [r4, #4]
 8016b1e:	6863      	ldr	r3, [r4, #4]
 8016b20:	4945      	ldr	r1, [pc, #276]	@ (8016c38 <_scanf_i+0x1e4>)
 8016b22:	6960      	ldr	r0, [r4, #20]
 8016b24:	1ac9      	subs	r1, r1, r3
 8016b26:	f000 f889 	bl	8016c3c <__sccl>
 8016b2a:	f04f 0b00 	mov.w	fp, #0
 8016b2e:	68a3      	ldr	r3, [r4, #8]
 8016b30:	6822      	ldr	r2, [r4, #0]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d03d      	beq.n	8016bb2 <_scanf_i+0x15e>
 8016b36:	6831      	ldr	r1, [r6, #0]
 8016b38:	6960      	ldr	r0, [r4, #20]
 8016b3a:	f891 c000 	ldrb.w	ip, [r1]
 8016b3e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016b42:	2800      	cmp	r0, #0
 8016b44:	d035      	beq.n	8016bb2 <_scanf_i+0x15e>
 8016b46:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8016b4a:	d124      	bne.n	8016b96 <_scanf_i+0x142>
 8016b4c:	0510      	lsls	r0, r2, #20
 8016b4e:	d522      	bpl.n	8016b96 <_scanf_i+0x142>
 8016b50:	f10b 0b01 	add.w	fp, fp, #1
 8016b54:	f1b9 0f00 	cmp.w	r9, #0
 8016b58:	d003      	beq.n	8016b62 <_scanf_i+0x10e>
 8016b5a:	3301      	adds	r3, #1
 8016b5c:	f109 39ff 	add.w	r9, r9, #4294967295
 8016b60:	60a3      	str	r3, [r4, #8]
 8016b62:	6873      	ldr	r3, [r6, #4]
 8016b64:	3b01      	subs	r3, #1
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	6073      	str	r3, [r6, #4]
 8016b6a:	dd1b      	ble.n	8016ba4 <_scanf_i+0x150>
 8016b6c:	6833      	ldr	r3, [r6, #0]
 8016b6e:	3301      	adds	r3, #1
 8016b70:	6033      	str	r3, [r6, #0]
 8016b72:	68a3      	ldr	r3, [r4, #8]
 8016b74:	3b01      	subs	r3, #1
 8016b76:	60a3      	str	r3, [r4, #8]
 8016b78:	e7d9      	b.n	8016b2e <_scanf_i+0xda>
 8016b7a:	f1bb 0f02 	cmp.w	fp, #2
 8016b7e:	d1ae      	bne.n	8016ade <_scanf_i+0x8a>
 8016b80:	6822      	ldr	r2, [r4, #0]
 8016b82:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8016b86:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8016b8a:	d1c4      	bne.n	8016b16 <_scanf_i+0xc2>
 8016b8c:	2110      	movs	r1, #16
 8016b8e:	6061      	str	r1, [r4, #4]
 8016b90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016b94:	e7a2      	b.n	8016adc <_scanf_i+0x88>
 8016b96:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8016b9a:	6022      	str	r2, [r4, #0]
 8016b9c:	780b      	ldrb	r3, [r1, #0]
 8016b9e:	f805 3b01 	strb.w	r3, [r5], #1
 8016ba2:	e7de      	b.n	8016b62 <_scanf_i+0x10e>
 8016ba4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8016ba8:	4631      	mov	r1, r6
 8016baa:	4650      	mov	r0, sl
 8016bac:	4798      	blx	r3
 8016bae:	2800      	cmp	r0, #0
 8016bb0:	d0df      	beq.n	8016b72 <_scanf_i+0x11e>
 8016bb2:	6823      	ldr	r3, [r4, #0]
 8016bb4:	05d9      	lsls	r1, r3, #23
 8016bb6:	d50d      	bpl.n	8016bd4 <_scanf_i+0x180>
 8016bb8:	42bd      	cmp	r5, r7
 8016bba:	d909      	bls.n	8016bd0 <_scanf_i+0x17c>
 8016bbc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016bc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8016bc4:	4632      	mov	r2, r6
 8016bc6:	4650      	mov	r0, sl
 8016bc8:	4798      	blx	r3
 8016bca:	f105 39ff 	add.w	r9, r5, #4294967295
 8016bce:	464d      	mov	r5, r9
 8016bd0:	42bd      	cmp	r5, r7
 8016bd2:	d028      	beq.n	8016c26 <_scanf_i+0x1d2>
 8016bd4:	6822      	ldr	r2, [r4, #0]
 8016bd6:	f012 0210 	ands.w	r2, r2, #16
 8016bda:	d113      	bne.n	8016c04 <_scanf_i+0x1b0>
 8016bdc:	702a      	strb	r2, [r5, #0]
 8016bde:	6863      	ldr	r3, [r4, #4]
 8016be0:	9e01      	ldr	r6, [sp, #4]
 8016be2:	4639      	mov	r1, r7
 8016be4:	4650      	mov	r0, sl
 8016be6:	47b0      	blx	r6
 8016be8:	f8d8 3000 	ldr.w	r3, [r8]
 8016bec:	6821      	ldr	r1, [r4, #0]
 8016bee:	1d1a      	adds	r2, r3, #4
 8016bf0:	f8c8 2000 	str.w	r2, [r8]
 8016bf4:	f011 0f20 	tst.w	r1, #32
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	d00f      	beq.n	8016c1c <_scanf_i+0x1c8>
 8016bfc:	6018      	str	r0, [r3, #0]
 8016bfe:	68e3      	ldr	r3, [r4, #12]
 8016c00:	3301      	adds	r3, #1
 8016c02:	60e3      	str	r3, [r4, #12]
 8016c04:	6923      	ldr	r3, [r4, #16]
 8016c06:	1bed      	subs	r5, r5, r7
 8016c08:	445d      	add	r5, fp
 8016c0a:	442b      	add	r3, r5
 8016c0c:	6123      	str	r3, [r4, #16]
 8016c0e:	2000      	movs	r0, #0
 8016c10:	b007      	add	sp, #28
 8016c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c16:	f04f 0b00 	mov.w	fp, #0
 8016c1a:	e7ca      	b.n	8016bb2 <_scanf_i+0x15e>
 8016c1c:	07ca      	lsls	r2, r1, #31
 8016c1e:	bf4c      	ite	mi
 8016c20:	8018      	strhmi	r0, [r3, #0]
 8016c22:	6018      	strpl	r0, [r3, #0]
 8016c24:	e7eb      	b.n	8016bfe <_scanf_i+0x1aa>
 8016c26:	2001      	movs	r0, #1
 8016c28:	e7f2      	b.n	8016c10 <_scanf_i+0x1bc>
 8016c2a:	bf00      	nop
 8016c2c:	08017438 	.word	0x08017438
 8016c30:	08015c4d 	.word	0x08015c4d
 8016c34:	08016eb1 	.word	0x08016eb1
 8016c38:	0801767e 	.word	0x0801767e

08016c3c <__sccl>:
 8016c3c:	b570      	push	{r4, r5, r6, lr}
 8016c3e:	780b      	ldrb	r3, [r1, #0]
 8016c40:	4604      	mov	r4, r0
 8016c42:	2b5e      	cmp	r3, #94	@ 0x5e
 8016c44:	bf0b      	itete	eq
 8016c46:	784b      	ldrbeq	r3, [r1, #1]
 8016c48:	1c4a      	addne	r2, r1, #1
 8016c4a:	1c8a      	addeq	r2, r1, #2
 8016c4c:	2100      	movne	r1, #0
 8016c4e:	bf08      	it	eq
 8016c50:	2101      	moveq	r1, #1
 8016c52:	3801      	subs	r0, #1
 8016c54:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8016c58:	f800 1f01 	strb.w	r1, [r0, #1]!
 8016c5c:	42a8      	cmp	r0, r5
 8016c5e:	d1fb      	bne.n	8016c58 <__sccl+0x1c>
 8016c60:	b90b      	cbnz	r3, 8016c66 <__sccl+0x2a>
 8016c62:	1e50      	subs	r0, r2, #1
 8016c64:	bd70      	pop	{r4, r5, r6, pc}
 8016c66:	f081 0101 	eor.w	r1, r1, #1
 8016c6a:	54e1      	strb	r1, [r4, r3]
 8016c6c:	4610      	mov	r0, r2
 8016c6e:	4602      	mov	r2, r0
 8016c70:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016c74:	2d2d      	cmp	r5, #45	@ 0x2d
 8016c76:	d005      	beq.n	8016c84 <__sccl+0x48>
 8016c78:	2d5d      	cmp	r5, #93	@ 0x5d
 8016c7a:	d016      	beq.n	8016caa <__sccl+0x6e>
 8016c7c:	2d00      	cmp	r5, #0
 8016c7e:	d0f1      	beq.n	8016c64 <__sccl+0x28>
 8016c80:	462b      	mov	r3, r5
 8016c82:	e7f2      	b.n	8016c6a <__sccl+0x2e>
 8016c84:	7846      	ldrb	r6, [r0, #1]
 8016c86:	2e5d      	cmp	r6, #93	@ 0x5d
 8016c88:	d0fa      	beq.n	8016c80 <__sccl+0x44>
 8016c8a:	42b3      	cmp	r3, r6
 8016c8c:	dcf8      	bgt.n	8016c80 <__sccl+0x44>
 8016c8e:	3002      	adds	r0, #2
 8016c90:	461a      	mov	r2, r3
 8016c92:	3201      	adds	r2, #1
 8016c94:	4296      	cmp	r6, r2
 8016c96:	54a1      	strb	r1, [r4, r2]
 8016c98:	dcfb      	bgt.n	8016c92 <__sccl+0x56>
 8016c9a:	1af2      	subs	r2, r6, r3
 8016c9c:	3a01      	subs	r2, #1
 8016c9e:	1c5d      	adds	r5, r3, #1
 8016ca0:	42b3      	cmp	r3, r6
 8016ca2:	bfa8      	it	ge
 8016ca4:	2200      	movge	r2, #0
 8016ca6:	18ab      	adds	r3, r5, r2
 8016ca8:	e7e1      	b.n	8016c6e <__sccl+0x32>
 8016caa:	4610      	mov	r0, r2
 8016cac:	e7da      	b.n	8016c64 <__sccl+0x28>

08016cae <__submore>:
 8016cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cb2:	460c      	mov	r4, r1
 8016cb4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8016cb6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016cba:	4299      	cmp	r1, r3
 8016cbc:	d11d      	bne.n	8016cfa <__submore+0x4c>
 8016cbe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8016cc2:	f7ff f92d 	bl	8015f20 <_malloc_r>
 8016cc6:	b918      	cbnz	r0, 8016cd0 <__submore+0x22>
 8016cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8016ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016cd4:	63a3      	str	r3, [r4, #56]	@ 0x38
 8016cd6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8016cda:	6360      	str	r0, [r4, #52]	@ 0x34
 8016cdc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8016ce0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8016ce4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8016ce8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8016cec:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8016cf0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8016cf4:	6020      	str	r0, [r4, #0]
 8016cf6:	2000      	movs	r0, #0
 8016cf8:	e7e8      	b.n	8016ccc <__submore+0x1e>
 8016cfa:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8016cfc:	0077      	lsls	r7, r6, #1
 8016cfe:	463a      	mov	r2, r7
 8016d00:	f000 f83a 	bl	8016d78 <_realloc_r>
 8016d04:	4605      	mov	r5, r0
 8016d06:	2800      	cmp	r0, #0
 8016d08:	d0de      	beq.n	8016cc8 <__submore+0x1a>
 8016d0a:	eb00 0806 	add.w	r8, r0, r6
 8016d0e:	4601      	mov	r1, r0
 8016d10:	4632      	mov	r2, r6
 8016d12:	4640      	mov	r0, r8
 8016d14:	f7ff f88a 	bl	8015e2c <memcpy>
 8016d18:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8016d1c:	f8c4 8000 	str.w	r8, [r4]
 8016d20:	e7e9      	b.n	8016cf6 <__submore+0x48>

08016d22 <memmove>:
 8016d22:	4288      	cmp	r0, r1
 8016d24:	b510      	push	{r4, lr}
 8016d26:	eb01 0402 	add.w	r4, r1, r2
 8016d2a:	d902      	bls.n	8016d32 <memmove+0x10>
 8016d2c:	4284      	cmp	r4, r0
 8016d2e:	4623      	mov	r3, r4
 8016d30:	d807      	bhi.n	8016d42 <memmove+0x20>
 8016d32:	1e43      	subs	r3, r0, #1
 8016d34:	42a1      	cmp	r1, r4
 8016d36:	d008      	beq.n	8016d4a <memmove+0x28>
 8016d38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016d3c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016d40:	e7f8      	b.n	8016d34 <memmove+0x12>
 8016d42:	4402      	add	r2, r0
 8016d44:	4601      	mov	r1, r0
 8016d46:	428a      	cmp	r2, r1
 8016d48:	d100      	bne.n	8016d4c <memmove+0x2a>
 8016d4a:	bd10      	pop	{r4, pc}
 8016d4c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016d50:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016d54:	e7f7      	b.n	8016d46 <memmove+0x24>
	...

08016d58 <_sbrk_r>:
 8016d58:	b538      	push	{r3, r4, r5, lr}
 8016d5a:	4d06      	ldr	r5, [pc, #24]	@ (8016d74 <_sbrk_r+0x1c>)
 8016d5c:	2300      	movs	r3, #0
 8016d5e:	4604      	mov	r4, r0
 8016d60:	4608      	mov	r0, r1
 8016d62:	602b      	str	r3, [r5, #0]
 8016d64:	f7f0 fdf2 	bl	800794c <_sbrk>
 8016d68:	1c43      	adds	r3, r0, #1
 8016d6a:	d102      	bne.n	8016d72 <_sbrk_r+0x1a>
 8016d6c:	682b      	ldr	r3, [r5, #0]
 8016d6e:	b103      	cbz	r3, 8016d72 <_sbrk_r+0x1a>
 8016d70:	6023      	str	r3, [r4, #0]
 8016d72:	bd38      	pop	{r3, r4, r5, pc}
 8016d74:	20005e44 	.word	0x20005e44

08016d78 <_realloc_r>:
 8016d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d7c:	4607      	mov	r7, r0
 8016d7e:	4614      	mov	r4, r2
 8016d80:	460d      	mov	r5, r1
 8016d82:	b921      	cbnz	r1, 8016d8e <_realloc_r+0x16>
 8016d84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016d88:	4611      	mov	r1, r2
 8016d8a:	f7ff b8c9 	b.w	8015f20 <_malloc_r>
 8016d8e:	b92a      	cbnz	r2, 8016d9c <_realloc_r+0x24>
 8016d90:	f7ff f85a 	bl	8015e48 <_free_r>
 8016d94:	4625      	mov	r5, r4
 8016d96:	4628      	mov	r0, r5
 8016d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d9c:	f000 f88a 	bl	8016eb4 <_malloc_usable_size_r>
 8016da0:	4284      	cmp	r4, r0
 8016da2:	4606      	mov	r6, r0
 8016da4:	d802      	bhi.n	8016dac <_realloc_r+0x34>
 8016da6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016daa:	d8f4      	bhi.n	8016d96 <_realloc_r+0x1e>
 8016dac:	4621      	mov	r1, r4
 8016dae:	4638      	mov	r0, r7
 8016db0:	f7ff f8b6 	bl	8015f20 <_malloc_r>
 8016db4:	4680      	mov	r8, r0
 8016db6:	b908      	cbnz	r0, 8016dbc <_realloc_r+0x44>
 8016db8:	4645      	mov	r5, r8
 8016dba:	e7ec      	b.n	8016d96 <_realloc_r+0x1e>
 8016dbc:	42b4      	cmp	r4, r6
 8016dbe:	4622      	mov	r2, r4
 8016dc0:	4629      	mov	r1, r5
 8016dc2:	bf28      	it	cs
 8016dc4:	4632      	movcs	r2, r6
 8016dc6:	f7ff f831 	bl	8015e2c <memcpy>
 8016dca:	4629      	mov	r1, r5
 8016dcc:	4638      	mov	r0, r7
 8016dce:	f7ff f83b 	bl	8015e48 <_free_r>
 8016dd2:	e7f1      	b.n	8016db8 <_realloc_r+0x40>

08016dd4 <_strtoul_l.isra.0>:
 8016dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016dd8:	4e34      	ldr	r6, [pc, #208]	@ (8016eac <_strtoul_l.isra.0+0xd8>)
 8016dda:	4686      	mov	lr, r0
 8016ddc:	460d      	mov	r5, r1
 8016dde:	4628      	mov	r0, r5
 8016de0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016de4:	5d37      	ldrb	r7, [r6, r4]
 8016de6:	f017 0708 	ands.w	r7, r7, #8
 8016dea:	d1f8      	bne.n	8016dde <_strtoul_l.isra.0+0xa>
 8016dec:	2c2d      	cmp	r4, #45	@ 0x2d
 8016dee:	d110      	bne.n	8016e12 <_strtoul_l.isra.0+0x3e>
 8016df0:	782c      	ldrb	r4, [r5, #0]
 8016df2:	2701      	movs	r7, #1
 8016df4:	1c85      	adds	r5, r0, #2
 8016df6:	f033 0010 	bics.w	r0, r3, #16
 8016dfa:	d115      	bne.n	8016e28 <_strtoul_l.isra.0+0x54>
 8016dfc:	2c30      	cmp	r4, #48	@ 0x30
 8016dfe:	d10d      	bne.n	8016e1c <_strtoul_l.isra.0+0x48>
 8016e00:	7828      	ldrb	r0, [r5, #0]
 8016e02:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8016e06:	2858      	cmp	r0, #88	@ 0x58
 8016e08:	d108      	bne.n	8016e1c <_strtoul_l.isra.0+0x48>
 8016e0a:	786c      	ldrb	r4, [r5, #1]
 8016e0c:	3502      	adds	r5, #2
 8016e0e:	2310      	movs	r3, #16
 8016e10:	e00a      	b.n	8016e28 <_strtoul_l.isra.0+0x54>
 8016e12:	2c2b      	cmp	r4, #43	@ 0x2b
 8016e14:	bf04      	itt	eq
 8016e16:	782c      	ldrbeq	r4, [r5, #0]
 8016e18:	1c85      	addeq	r5, r0, #2
 8016e1a:	e7ec      	b.n	8016df6 <_strtoul_l.isra.0+0x22>
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d1f6      	bne.n	8016e0e <_strtoul_l.isra.0+0x3a>
 8016e20:	2c30      	cmp	r4, #48	@ 0x30
 8016e22:	bf14      	ite	ne
 8016e24:	230a      	movne	r3, #10
 8016e26:	2308      	moveq	r3, #8
 8016e28:	f04f 38ff 	mov.w	r8, #4294967295
 8016e2c:	2600      	movs	r6, #0
 8016e2e:	fbb8 f8f3 	udiv	r8, r8, r3
 8016e32:	fb03 f908 	mul.w	r9, r3, r8
 8016e36:	ea6f 0909 	mvn.w	r9, r9
 8016e3a:	4630      	mov	r0, r6
 8016e3c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8016e40:	f1bc 0f09 	cmp.w	ip, #9
 8016e44:	d810      	bhi.n	8016e68 <_strtoul_l.isra.0+0x94>
 8016e46:	4664      	mov	r4, ip
 8016e48:	42a3      	cmp	r3, r4
 8016e4a:	dd1e      	ble.n	8016e8a <_strtoul_l.isra.0+0xb6>
 8016e4c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8016e50:	d007      	beq.n	8016e62 <_strtoul_l.isra.0+0x8e>
 8016e52:	4580      	cmp	r8, r0
 8016e54:	d316      	bcc.n	8016e84 <_strtoul_l.isra.0+0xb0>
 8016e56:	d101      	bne.n	8016e5c <_strtoul_l.isra.0+0x88>
 8016e58:	45a1      	cmp	r9, r4
 8016e5a:	db13      	blt.n	8016e84 <_strtoul_l.isra.0+0xb0>
 8016e5c:	fb00 4003 	mla	r0, r0, r3, r4
 8016e60:	2601      	movs	r6, #1
 8016e62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016e66:	e7e9      	b.n	8016e3c <_strtoul_l.isra.0+0x68>
 8016e68:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8016e6c:	f1bc 0f19 	cmp.w	ip, #25
 8016e70:	d801      	bhi.n	8016e76 <_strtoul_l.isra.0+0xa2>
 8016e72:	3c37      	subs	r4, #55	@ 0x37
 8016e74:	e7e8      	b.n	8016e48 <_strtoul_l.isra.0+0x74>
 8016e76:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8016e7a:	f1bc 0f19 	cmp.w	ip, #25
 8016e7e:	d804      	bhi.n	8016e8a <_strtoul_l.isra.0+0xb6>
 8016e80:	3c57      	subs	r4, #87	@ 0x57
 8016e82:	e7e1      	b.n	8016e48 <_strtoul_l.isra.0+0x74>
 8016e84:	f04f 36ff 	mov.w	r6, #4294967295
 8016e88:	e7eb      	b.n	8016e62 <_strtoul_l.isra.0+0x8e>
 8016e8a:	1c73      	adds	r3, r6, #1
 8016e8c:	d106      	bne.n	8016e9c <_strtoul_l.isra.0+0xc8>
 8016e8e:	2322      	movs	r3, #34	@ 0x22
 8016e90:	f8ce 3000 	str.w	r3, [lr]
 8016e94:	4630      	mov	r0, r6
 8016e96:	b932      	cbnz	r2, 8016ea6 <_strtoul_l.isra.0+0xd2>
 8016e98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e9c:	b107      	cbz	r7, 8016ea0 <_strtoul_l.isra.0+0xcc>
 8016e9e:	4240      	negs	r0, r0
 8016ea0:	2a00      	cmp	r2, #0
 8016ea2:	d0f9      	beq.n	8016e98 <_strtoul_l.isra.0+0xc4>
 8016ea4:	b106      	cbz	r6, 8016ea8 <_strtoul_l.isra.0+0xd4>
 8016ea6:	1e69      	subs	r1, r5, #1
 8016ea8:	6011      	str	r1, [r2, #0]
 8016eaa:	e7f5      	b.n	8016e98 <_strtoul_l.isra.0+0xc4>
 8016eac:	0801753b 	.word	0x0801753b

08016eb0 <_strtoul_r>:
 8016eb0:	f7ff bf90 	b.w	8016dd4 <_strtoul_l.isra.0>

08016eb4 <_malloc_usable_size_r>:
 8016eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016eb8:	1f18      	subs	r0, r3, #4
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	bfbc      	itt	lt
 8016ebe:	580b      	ldrlt	r3, [r1, r0]
 8016ec0:	18c0      	addlt	r0, r0, r3
 8016ec2:	4770      	bx	lr

08016ec4 <_init>:
 8016ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ec6:	bf00      	nop
 8016ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016eca:	bc08      	pop	{r3}
 8016ecc:	469e      	mov	lr, r3
 8016ece:	4770      	bx	lr

08016ed0 <_fini>:
 8016ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ed2:	bf00      	nop
 8016ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016ed6:	bc08      	pop	{r3}
 8016ed8:	469e      	mov	lr, r3
 8016eda:	4770      	bx	lr
